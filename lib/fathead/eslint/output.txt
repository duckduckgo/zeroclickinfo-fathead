no-await-in-loop	A			Possible Errors						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Performing an operation on each element of an iterable is a common task. However, performing an\n<code>await</code> as part of each operation is an indication that the program is not taking full advantage of\nthe parallelization benefits of <code>async</code>/<code>await</code>.</p>\n\n<p>Usually, the code should be refactored to create all the promises at once, then get access to the\nresults using <code>Promise.all()</code>. Otherwise, each successive operation will not start until the\nprevious one has completed.</p>\n\n<p>Concretely, the following function should be refactored as shown:</p>\n\n<p><code>js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await bar(thing));\n  }\n  return baz(results);\n}\n</code></p>\n\n<p><code>js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    results.push(bar(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  return baz(await Promise.all(results));\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows the use of <code>await</code> within loop bodies.</p></section>	http://eslint.org/docs/rules/no-await-in-loop
no-cond-assign	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In conditional statements, it is very easy to mistype a comparison operator (such as <code>==</code>) as an assignment operator (such as <code>=</code>). For example:</p>\n\n<p><code>js\n// Check the user&#39;s job title\nif (user.jobTitle = &quot;manager&quot;) {\n    // user.jobTitle is now incorrect\n}\n</code></p>\n\n<p>There are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows ambiguous assignment operators in test conditions of <code>if</code>, <code>for</code>, <code>while</code>, and <code>do...while</code> statements.</p></section>	http://eslint.org/docs/rules/no-cond-assign
no-console	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript that is designed to be executed in the browser, it&#39;s considered a best practice to avoid using methods on <code>console</code>. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using <code>console</code> should be stripped before being pushed to production.</p>\n\n<p><code>js\nconsole.log(&quot;Made it here.&quot;);\nconsole.error(&quot;That shouldn&#39;t have happened.&quot;);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows calls to methods of the <code>console</code> object.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-console: &quot;error&quot;</em>/</p>\n\n<p>console.log(&quot;Log a debug level message.&quot;);\nconsole.warn(&quot;Log a warn level message.&quot;);\nconsole.error(&quot;Log an error level message.&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-console: &quot;error&quot;</em>/</p>\n\n<p>// custom console\nConsole.log(&quot;Hello world!&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-console
no-constant-condition	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>A constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.</p>\n\n<p><code>js\nif (false) {\n    doSomethingUnfinished();\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows constant expressions in the test condition of:</p>\n\n<ul><li><code>if</code>, <code>for</code>, <code>while</code>, or <code>do...while</code> statement</li><li><code>?:</code> ternary expression</li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-constant-condition: &quot;error&quot;</em>/</p>\n\n<p>if (false) {\n    doSomethingUnfinished();\n}</p>\n\n<p>if (void x) {\n    doSomethingUnfinished();\n}</p>\n\n<p>for (;-2;) {\n    doSomethingForever();\n}</p>\n\n<p>while (typeof x) {\n    doSomethingForever();\n}</p>\n\n<p>do {\n    doSomethingForever();\n} while (x = -1);</p>\n\n<p>var result = 0 ? a : b;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-constant-condition: &quot;error&quot;</em>/</p>\n\n<p>if (x === 0) {\n    doSomething();\n}</p>\n\n<p>for (;;) {\n    doSomethingForever();\n}</p>\n\n<p>while (typeof x === &quot;undefined&quot;) {\n    doSomething();\n}</p>\n\n<p>do {\n    doSomething();\n} while (x);</p>\n\n<p>var result = x !== 0 ? a : b;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-constant-condition
no-control-regex	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Control characters are special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings so a regular expression containing these characters is most likely a mistake.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows control characters in regular expressions.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-control-regex: &quot;error&quot;</em>/</p>\n\n<p>var pattern1 = /\x1f/;\nvar pattern2 = new RegExp(&quot;\x1f&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-control-regex: &quot;error&quot;</em>/</p>\n\n<p>var pattern1 = /\x20/;\nvar pattern2 = new RegExp(&quot;\x20&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-control-regex
no-debugger	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>debugger</code> statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain <code>debugger</code>, as it will cause the browser to stop executing code and open an appropriate debugger.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>debugger</code> statements.</p>\n\n<p>Example of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-debugger: &quot;error&quot;</em>/</p>\n\n<p>function isTruthy(x) {\n    debugger;\n    return Boolean(x);\n}\n<code></code>`</p>\n\n<p>Example of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-debugger: &quot;error&quot;</em>/</p>\n\n<p>function isTruthy(x) {\n    return Boolean(x); // set a breakpoint at this line\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-debugger
no-dupe-args	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If more than one parameter has the same name in a function definition, the last occurrence &quot;shadows&quot; the preceding occurrences. A duplicated name might be a typing error.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.</p>\n\n<p>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-dupe-args: &quot;error&quot;</em>/</p>\n\n<p>function foo(a, b, a) {\n    console.log(&quot;value of the second a:&quot;, a);\n}</p>\n\n<p>var bar = function (a, b, a) {\n    console.log(&quot;value of the second a:&quot;, a);\n};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-dupe-args: &quot;error&quot;</em>/</p>\n\n<p>function foo(a, b, c) {\n    console.log(a, b, c);\n}</p>\n\n<p>var bar = function (a, b, c) {\n    console.log(a, b, c);\n};\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-dupe-args
no-dupe-keys	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Multiple properties with the same key in object literals can cause unexpected behavior in your application.</p>\n\n<p><code>js\nvar foo = {\n    bar: &quot;baz&quot;,\n    bar: &quot;qux&quot;\n};\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows duplicate keys in object literals.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-dupe-keys: &quot;error&quot;</em>/</p>\n\n<p>var foo = {\n    bar: &quot;baz&quot;,\n    bar: &quot;qux&quot;\n};</p>\n\n<p>var foo = {\n    &quot;bar&quot;: &quot;baz&quot;,\n    bar: &quot;qux&quot;\n};</p>\n\n<p>var foo = {\n    0x1: &quot;baz&quot;,\n    1: &quot;qux&quot;\n};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-dupe-keys: &quot;error&quot;</em>/</p>\n\n<p>var foo = {\n    bar: &quot;baz&quot;,\n    quxx: &quot;qux&quot;\n};\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-dupe-keys
no-duplicate-case	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If a <code>switch</code> statement has duplicate test expressions in <code>case</code> clauses, it is likely that a programmer copied a <code>case</code> clause but forgot to change the test expression.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows duplicate test expressions in <code>case</code> clauses of <code>switch</code> statements.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-duplicate-case: &quot;error&quot;</em>/</p>\n\n<p>var a = 1,\n    one = 1;</p>\n\n<p>switch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 1:         // duplicate test expression\n        break;\n    default:\n        break;\n}</p>\n\n<p>switch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case one:         // duplicate test expression\n        break;\n    default:\n        break;\n}</p>\n\n<p>switch (a) {\n    case &quot;1&quot;:\n        break;\n    case &quot;2&quot;:\n        break;\n    case &quot;1&quot;:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-duplicate-case: &quot;error&quot;</em>/</p>\n\n<p>var a = 1,\n    one = 1;</p>\n\n<p>switch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}</p>\n\n<p>switch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}</p>\n\n<p>switch (a) {\n    case &quot;1&quot;:\n        break;\n    case &quot;2&quot;:\n        break;\n    case &quot;3&quot;:\n        break;\n    default:\n        break;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-duplicate-case
no-empty-character-class	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Because empty character classes in regular expressions do not match anything, they might be typing mistakes.</p>\n\n<p><code>js\nvar foo = /^abc[]/;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows empty character classes in regular expressions.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-character-class: &quot;error&quot;</em>/</p>\n\n<p>/^abc[]/.test(&quot;abcdefg&quot;); // false\n&quot;abcdefg&quot;.match(/^abc[]/); // null\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-character-class: &quot;error&quot;</em>/</p>\n\n<p>/^abc/.test(&quot;abcdefg&quot;); // true\n&quot;abcdefg&quot;.match(/^abc/); // [&quot;abc&quot;]</p>\n\n<p>/^abc[a-z]/.test(&quot;abcdefg&quot;); // true\n&quot;abcdefg&quot;.match(/^abc[a-z]/); // [&quot;abcd&quot;]\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-empty-character-class
no-empty	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Empty block statements, while not technically errors, usually occur due to refactoring that wasn&#39;t completed. They can cause confusion when reading code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty <code>catch</code> or <code>finally</code> block of a <code>try</code> statement to indicate that execution should continue regardless of errors).</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty: &quot;error&quot;</em>/</p>\n\n<p>if (foo) {\n}</p>\n\n<p>while (foo) {\n}</p>\n\n<p>switch(foo) {\n}</p>\n\n<p>try {\n    doSomething();\n} catch(ex) {</p>\n\n<p>} finally {</p>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty: &quot;error&quot;</em>/</p>\n\n<p>if (foo) {\n    // empty\n}</p>\n\n<p>while (foo) {\n    /<em> empty </em>/\n}</p>\n\n<p>try {\n    doSomething();\n} catch (ex) {\n    // continue regardless of error\n}</p>\n\n<p>try {\n    doSomething();\n} finally {\n    /<em> continue regardless of error </em>/\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-empty
no-ex-assign	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If a <code>catch</code> clause in a <code>try</code> statement accidentally (or purposely) assigns another value to the exception parameter, it impossible to refer to the error from that point on.\nSince there is no <code>arguments</code> object to offer alternative access to this data, assignment of the parameter is absolutely destructive.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows reassigning exceptions in <code>catch</code> clauses.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-ex-assign: &quot;error&quot;</em>/</p>\n\n<p>try {\n    // code\n} catch (e) {\n    e = 10;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-ex-assign: &quot;error&quot;</em>/</p>\n\n<p>try {\n    // code\n} catch (e) {\n    var foo = 10;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-ex-assign
no-extra-boolean-cast	A			Possible Errors\nFixable Rules\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>In contexts such as an <code>if</code> statement&#39;s test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (<code>!!</code>) or a <code>Boolean</code> call is unnecessary. For example, these <code>if</code> statements are equivalent:</p>\n\n<p><code></code>`js\nif (!!foo) {\n    // ...\n}</p>\n\n<p>if (Boolean(foo)) {\n    // ...\n}</p>\n\n<p>if (foo) {\n    // ...\n}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows unnecessary boolean casts.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-boolean-cast: &quot;error&quot;</em>/</p>\n\n<p>var foo = !!!bar;</p>\n\n<p>var foo = !!bar ? baz : bat;</p>\n\n<p>var foo = Boolean(!!bar);</p>\n\n<p>var foo = new Boolean(!!bar);</p>\n\n<p>if (!!foo) {\n    // ...\n}</p>\n\n<p>if (Boolean(foo)) {\n    // ...\n}</p>\n\n<p>while (!!foo) {\n    // ...\n}</p>\n\n<p>do {\n    // ...\n} while (Boolean(foo));</p>\n\n<p>for (; !!foo; ) {\n    // ...\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-boolean-cast: &quot;error&quot;</em>/</p>\n\n<p>var foo = !!bar;\nvar foo = Boolean(bar);</p>\n\n<p>function foo() {\n    return !!bar;\n}</p>\n\n<p>var foo = bar ? !!baz : !!bat;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-extra-boolean-cast
no-extra-parens	A			Possible Errors\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>This rule restricts the use of parentheses to only where they are necessary.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule always ignores extra parentheses around the following:</p>\n\n<ul><li>RegExp literals such as <code>(/abc/).test(var)</code> to avoid conflicts with the <a href="wrap-regex">wrap-regex</a> rule</li><li>immediately-invoked function expressions (also known as IIFEs) such as <code>var x = (function () {})();</code> and <code>((function foo() {return 1;})())</code> to avoid conflicts with the <a href="wrap-iife">wrap-iife</a> rule</li></ul></section>	http://eslint.org/docs/rules/no-extra-parens
no-extra-semi	A			Possible Errors\nFixable Rules\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Typing mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows unnecessary semicolons.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-semi: &quot;error&quot;</em>/</p>\n\n<p>var x = 5;;</p>\n\n<p>function foo() {\n    // code\n};</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-semi: &quot;error&quot;</em>/</p>\n\n<p>var x = 5;</p>\n\n<p>var foo = function() {\n    // code\n};</p>\n\n<p><code></code>`</p></section>	http://eslint.org/docs/rules/no-extra-semi
no-func-assign	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript functions can be written as a FunctionDeclaration <code>function foo() { ... }</code> or as a FunctionExpression <code>var foo = function() { ... };</code>. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.</p>\n\n<p><code>js\nfunction foo() {}\nfoo = bar;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows reassigning <code>function</code> declarations.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-func-assign: &quot;error&quot;</em>/</p>\n\n<p>function foo() {}\nfoo = bar;</p>\n\n<p>function foo() {\n    foo = bar;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule, unlike the corresponding rule in JSHint:</p>\n\n<p><code></code>`js\n/<em>eslint no-func-assign: &quot;error&quot;</em>/</p>\n\n<p>foo = bar;\nfunction foo() {}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-func-assign: &quot;error&quot;</em>/</p>\n\n<p>var foo = function () {}\nfoo = bar;</p>\n\n<p>function foo(foo) { // <code>foo</code> is shadowed.\n    foo = bar;\n}</p>\n\n<p>function foo() {\n    var foo = bar;  // <code>foo</code> is shadowed.\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-func-assign
no-inner-declarations	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes <a href="https://code.google.com/p/esprima/issues/detail?id=422">erroneously accept them elsewhere</a>. This only applies to function declarations; named or anonymous function expressions can occur anywhere an expression is permitted.</p>\n\n<p><code></code>`js\n// Good\nfunction doSomething() { }</p>\n\n<p>// Bad\nif (test) {\n    function doSomethingElse () { }\n}</p>\n\n<p>function anotherThing() {\n    var fn;</p>\n\n<pre><code>if (test) {\n\n    // Good\n    fn = function expression() { };\n\n    // Bad\n    function declaration() { }\n}</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>A variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks. This is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity. Note that <a href="https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings">block bindings</a> (<code>let</code>, <code>const</code>) are not hoisted and therefore they are not affected by this rule.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// Good\nvar foo = 42;</p>\n\n<p>// Good\nif (foo) {\n    let bar1;\n}</p>\n\n<p>// Bad\nwhile (test) {\n    var bar2;\n}</p>\n\n<p>function doSomething() {\n    // Good\n    var baz = true;</p>\n\n<pre><code>// Bad\nif (baz) {\n    var quux;\n}</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires that function declarations and, optionally, variable declarations be in the root of a program or the body of a function.</p></section>	http://eslint.org/docs/rules/no-inner-declarations
no-invalid-regexp	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>An invalid pattern in a regular expression literal is a <code>SyntaxError</code> when the code is parsed, but an invalid string in <code>RegExp</code> constructors throws a <code>SyntaxError</code> only when the code is executed.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows invalid regular expression strings in <code>RegExp</code> constructors.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-invalid-regexp: &quot;error&quot;</em>/</p>\n\n<p>RegExp(&#39;[&#39;)</p>\n\n<p>RegExp(&#39;.&#39;, &#39;z&#39;)</p>\n\n<p>new RegExp(&#39;\&#39;)\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-invalid-regexp: &quot;error&quot;</em>/</p>\n\n<p>RegExp(&#39;.&#39;)</p>\n\n<p>new RegExp</p>\n\n<p>this.RegExp(&#39;[&#39;)\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-invalid-regexp
no-irregular-whitespace	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Invalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces.</p>\n\n<p>Various whitespace characters can be inputted by programmers by mistake for example from copying or keyboard shortcuts. Pressing Alt + Space on OS X adds in a non breaking space character for example.</p>\n\n<p>Known issues these spaces cause:</p>\n\n<ul><li>Zero Width Space<ul><li>Is NOT considered a separator for tokens and is often parsed as an <code>Unexpected token ILLEGAL</code></li><li>Is NOT shown in modern browsers making code repository software expected to resolve the visualisation</li></ul></li><li>Line Separator<ul><li>Is NOT a valid character within JSON which would cause parse errors</li></ul></li></ul>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.</p>\n\n<p>This rule disallows the following characters except where the options allow:</p>\n\n<pre><code>\u000B - Line Tabulation (\v) - &lt;VT&gt;\n\u000C - Form Feed (\f) - &lt;FF&gt;\n\u00A0 - No-Break Space - &lt;NBSP&gt;\n\u0085 - Next Line\n\u1680 - Ogham Space Mark\n\u180E - Mongolian Vowel Separator - &lt;MVS&gt;\n\ufeff - Zero Width No-Break Space - &lt;BOM&gt;\n\u2000 - En Quad\n\u2001 - Em Quad\n\u2002 - En Space - &lt;ENSP&gt;\n\u2003 - Em Space - &lt;EMSP&gt;\n\u2004 - Tree-Per-Em\n\u2005 - Four-Per-Em\n\u2006 - Six-Per-Em\n\u2007 - Figure Space\n\u2008 - Punctuation Space - &lt;PUNCSP&gt;\n\u2009 - Thin Space\n\u200A - Hair Space\n\u200B - Zero Width Space - &lt;ZWSP&gt;\n\u2028 - Line Separator\n\u2029 - Paragraph Separator\n\u202F - Narrow No-Break Space\n\u205f - Medium Mathematical Space\n\u3000 - Ideographic Space</code></pre></section>	http://eslint.org/docs/rules/no-irregular-whitespace
no-obj-calls	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>ECMAScript provides several global objects that are intended to be used as-is. Some of these objects look as if they could be constructors due their capitalization (such as <code>Math</code> and <code>JSON</code>) but will throw an error if you try to execute them as functions.</p>\n\n<p>The <a href="http://es5.github.io/#x15.8">ECMAScript 5 specification</a> makes it clear that both <code>Math</code> and <code>JSON</code> cannot be invoked:</p>\n\n<blockquote><p>The Math object does not have a <code>[[Call]]</code> internal property; it is not possible to invoke the Math object as a function.</p></blockquote>\n\n<p>And the <a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object">ECMAScript 2015 specification</a> makes it clear that <code>Reflect</code> cannot be invoked:</p>\n\n<blockquote><p>The Reflect object also does not have a <code>[[Call]]</code> internal method; it is not possible to invoke the Reflect object as a function.</p></blockquote>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows calling the <code>Math</code>, <code>JSON</code> and <code>Reflect</code> objects as functions.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-obj-calls: &quot;error&quot;</em>/</p>\n\n<p>var math = Math();\nvar json = JSON();\nvar reflect = Reflect();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-obj-calls: &quot;error&quot;</em>/</p>\n\n<p>function area(r) {\n    return Math.PI <em> r </em> r;\n}\nvar object = JSON.parse(&quot;{}&quot;);\nvar value = Reflect.get({ x: 1, y: 2 }, &quot;x&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-obj-calls
no-prototype-builtins	A			Possible Errors						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In ECMAScript 5.1, <code>Object.create</code> was added, which enables the creation of objects with a specified <code>[[Prototype]]</code>. <code>Object.create(null)</code> is a common pattern used to create objects that will be used as a Map. This can lead to errors when it is assumed that objects will have properties from <code>Object.prototype</code>. This rule prevents calling <code>Object.prototype</code> methods directly from an object.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows calling some <code>Object.prototype</code> methods directly on object instances.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-prototype-builtins: &quot;error&quot;</em>/</p>\n\n<p>var hasBarProperty = foo.hasOwnProperty(&quot;bar&quot;);</p>\n\n<p>var isPrototypeOfBar = foo.isPrototypeOf(bar);</p>\n\n<p>var barIsEnumerable = foo.propertyIsEnumerable(&quot;bar&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-prototype-builtins: &quot;error&quot;</em>/</p>\n\n<p>var hasBarProperty = Object.prototype.hasOwnProperty.call(foo, &quot;bar&quot;);</p>\n\n<p>var isPrototypeOfBar = Object.prototype.isPrototypeOf.call(foo, bar);</p>\n\n<p>var barIsEnumerable = {}.propertyIsEnumerable.call(foo, &quot;bar&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-prototype-builtins
no-regex-spaces	A			Possible Errors\nFixable Rules\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Regular expressions can be very complex and difficult to understand, which is why it&#39;s important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:</p>\n\n<p><code>js\nvar re = /foo   bar/;\n</code></p>\n\n<p>In this regular expression, it&#39;s very hard to tell how many spaces are intended to be matched. It&#39;s better to use only one space and then specify how many spaces are expected, such as:</p>\n\n<p><code>js\nvar re = /foo {3}bar/;\n</code></p>\n\n<p>Now it is very clear that three spaces are expected to be matched.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows multiple spaces in regular expression literals.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-regex-spaces: &quot;error&quot;</em>/</p>\n\n<p>var re = /foo   bar/;\nvar re = new RegExp(&quot;foo   bar&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-regex-spaces: &quot;error&quot;</em>/</p>\n\n<p>var re = /foo {3}bar/;\nvar re = new RegExp(&quot;foo {3}bar&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-regex-spaces
no-sparse-arrays	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</p>\n\n<p><code>js\nvar items = [,,];\n</code></p>\n\n<p>While the <code>items</code> array in this example has a <code>length</code> of 2, there are actually no values in <code>items[0]</code> or <code>items[1]</code>. The fact that the array literal is valid with only commas inside, coupled with the <code>length</code> being set and actual item values not being set, make sparse arrays confusing for many developers. Consider the following:</p>\n\n<p><code>js\nvar colors = [ &quot;red&quot;,, &quot;blue&quot; ];\n</code></p>\n\n<p>In this example, the <code>colors</code> array has a <code>length</code> of 3. But did the developer intend for there to be an empty spot in the middle of the array? Or is it a typo?</p>\n\n<p>The confusion around sparse arrays defined in this manner is enough that it&#39;s recommended to avoid using them unless you are certain that they are useful in your code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows sparse array literals which have &quot;holes&quot; where commas are not preceded by elements. It does not apply to a trailing comma following the last element.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sparse-arrays: &quot;error&quot;</em>/</p>\n\n<p>var items = [,];\nvar colors = [ &quot;red&quot;,, &quot;blue&quot; ];\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sparse-arrays: &quot;error&quot;</em>/</p>\n\n<p>var items = [];\nvar items = new Array(23);</p>\n\n<p>// trailing comma (after the last element) is not a problem\nvar colors = [ &quot;red&quot;, &quot;blue&quot;, ];\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-sparse-arrays
no-template-curly-in-string	A			Possible Errors						http://eslint.org/img/logo.svg	<section class="prog__container"><p>ECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like <code>${variable}</code> between two backtick quotes (`). It can be easy to use the wrong quotes when wanting to use template literals, by writing <code>&quot;${variable}&quot;</code>, and end up with the literal value <code>&quot;${variable}&quot;</code> instead of a string containing the value of the injected expressions.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal place holder (<code>${something}</code>) that uses either <code>&quot;</code> or <code>&#39;</code> for the quotes.</p></section>	http://eslint.org/docs/rules/no-template-curly-in-string
no-unexpected-multiline	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the <a href="./semi">semi</a> rule.</p>\n\n<p>The rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, <strong>except</strong> where one of the following is true:</p>\n\n<ul><li>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with <code>.</code> or <code>,</code>.)</li><li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment the next token.)</li><li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is no <code>{</code></li><li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>, or some other binary operator that can only be found between two tokens in a single expression.</li></ul>\n\n<p>In the exceptions where a newline does <strong>not</strong> end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unexpected-multiline: &quot;error&quot;</em>/</p>\n\n<p>var foo = bar\n(1 || 2).baz();</p>\n\n<p>var hello = &#39;world&#39;\n[1, 2, 3].forEach(addNumber);</p>\n\n<p>let x = function() {}\n<code>hello</code></p>\n\n<p>let x = function() {}\nx\n<code>hello</code>\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unexpected-multiline: &quot;error&quot;</em>/</p>\n\n<p>var foo = bar;\n(1 || 2).baz();</p>\n\n<p>var foo = bar\n;(1 || 2).baz()</p>\n\n<p>var hello = &#39;world&#39;;\n[1, 2, 3].forEach(addNumber);</p>\n\n<p>var hello = &#39;world&#39;\nvoid [1, 2, 3].forEach(addNumber);</p>\n\n<p>let x = function() {};\n<code>hello</code></p>\n\n<p>let tag = function() {}\ntag <code>hello</code>\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unexpected-multiline
no-unreachable	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Because the <code>return</code>, <code>throw</code>, <code>break</code>, and <code>continue</code> statements unconditionally exit a block of code, any statements after them cannot be executed. Unreachable statements are usually a mistake.</p>\n\n<p><code>js\nfunction fn() {\n    x = 1;\n    return x;\n    x = 3; // this will never execute\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows unreachable code after <code>return</code>, <code>throw</code>, <code>continue</code>, and <code>break</code> statements.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unreachable: &quot;error&quot;</em>/</p>\n\n<p>function foo() {\n    return true;\n    console.log(&quot;done&quot;);\n}</p>\n\n<p>function bar() {\n    throw new Error(&quot;Oops!&quot;);\n    console.log(&quot;done&quot;);\n}</p>\n\n<p>while(value) {\n    break;\n    console.log(&quot;done&quot;);\n}</p>\n\n<p>throw new Error(&quot;Oops!&quot;);\nconsole.log(&quot;done&quot;);</p>\n\n<p>function baz() {\n    if (Math.random() &lt; 0.5) {\n        return;\n    } else {\n        throw new Error();\n    }\n    console.log(&quot;done&quot;);\n}</p>\n\n<p>for (;;) {}\nconsole.log(&quot;done&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule, because of JavaScript function and variable hoisting:</p>\n\n<p><code></code>`js\n/<em>eslint no-unreachable: &quot;error&quot;</em>/</p>\n\n<p>function foo() {\n    return bar();\n    function bar() {\n        return 1;\n    }\n}</p>\n\n<p>function bar() {\n    return x;\n    var x;\n}</p>\n\n<p>switch (foo) {\n    case 1:\n        break;\n        var x;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unreachable
no-unsafe-finally	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript suspends the control flow statements of <code>try</code> and <code>catch</code> blocks until the execution of <code>finally</code> block finishes. So, when <code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> is used in <code>finally</code>, control flow statements inside <code>try</code> and <code>catch</code> are overwritten, which is considered as unexpected behavior. Such as:</p>\n\n<p><code></code>`js\n// We expect this function to return 1;\n(() =&gt; {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();</p>\n\n<p>// &gt; 3\n<code></code>`</p>\n\n<p><code></code>`js\n// We expect this function to throw an error, then return\n(() =&gt; {\n    try {\n        throw new Error(&quot;Try&quot;); // error is thrown but suspended until finally block ends\n    } finally {\n        return 3; // 3 is returned before the error is thrown, which we did not expect\n    }\n})();</p>\n\n<p>// &gt; 3\n<code></code>`</p>\n\n<p><code></code>`js\n// We expect this function to throw Try(...) error from the catch block\n(() =&gt; {\n    try {\n        throw new Error(&quot;Try&quot;)\n    } catch(err) {\n        throw err; // The error thrown from try block is catched and rethrown\n    } finally {\n        throw new Error(&quot;Finally&quot;); // Finally(...) is thrown, which we did not expect\n    }\n})();</p>\n\n<p>// &gt; Uncaught Error: Finally(...)\n<code></code>`</p>\n\n<p><code></code>`js\n// We expect this function to return 0 from try block.\n(() =&gt; {\n  label: try {\n    return 0; // 1 is returned but suspended until finally block ends\n  } finally {\n    break label; // It breaks out the try-finally block, before 0 is returned.\n  }\n  return 1;\n})();</p>\n\n<p>// &gt; 1\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>return</code>, <code>throw</code>, <code>break</code>, and <code>continue</code> statements inside <code>finally</code> blocks. It allows indirect usages, such as in <code>function</code> or <code>class</code> definitions.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code>js\n/*eslint no-unsafe-finally: &quot;error&quot;*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3;\n    }\n};\n</code></p>\n\n<p><code>js\n/*eslint no-unsafe-finally: &quot;error&quot;*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        throw new Error;\n    }\n};\n</code></p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code>js\n/*eslint no-unsafe-finally: &quot;error&quot;*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        console.log(&quot;hola!&quot;);\n    }\n};\n</code></p>\n\n<p><code>js\n/*eslint no-unsafe-finally: &quot;error&quot;*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        let a = function() {\n            return &quot;hola!&quot;;\n        }\n    }\n};\n</code></p>\n\n<p><code>js\n/*eslint no-unsafe-finally: &quot;error&quot;*/\nlet foo = function(a) {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        switch(a) {\n            case 1: {\n                console.log(&quot;hola!&quot;)\n                break;\n            }\n        }\n    }\n};\n</code></p></section>	http://eslint.org/docs/rules/no-unsafe-finally
no-unsafe-negation	A			Possible Errors\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Just as developers might type <code>-a + b</code> when they mean <code>-(a + b)</code> for the negative of a sum, they might type <code>!key in object</code> by mistake when they almost certainly mean <code>!(key in object)</code> to test that a key is not in an object. <code>!obj instanceof Ctor</code> is similar.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows negating the left operand of <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Expressions_and_Operators#Relational_operators">Relational Operators</a>.</p>\n\n<p>Relational Operators are:</p>\n\n<ul><li><code>in</code> operator.</li><li><code>instanceof</code> operator.</li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unsafe-negation: &quot;error&quot;</em>/</p>\n\n<p>if (!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? &quot;false&quot; : &quot;true&quot;) in object\n}</p>\n\n<p>if (!obj instanceof Ctor) {\n    // operator precedence makes it equivalent to (!obj) instanceof Ctor\n    // and it equivalent to always false since boolean values are not objects.\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unsafe-negation: &quot;error&quot;</em>/</p>\n\n<p>if (!(key in object)) {\n    // key is not in object\n}</p>\n\n<p>if (!(obj instanceof Ctor)) {\n    // obj is not an instance of Ctor\n}</p>\n\n<p>if((&quot;&quot; + !key) in object) {\n    // make operator precedence and type conversion explicit\n    // in a rare situation when that is the intended meaning\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unsafe-negation
use-isnan	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, <code>NaN</code> is a special value of the <code>Number</code> type. It&#39;s used to represent any of the &quot;not-a-number&quot; values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.</p>\n\n<p>Because <code>NaN</code> is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to <code>NaN</code> are confusing:</p>\n\n<ul><li><code>NaN === NaN</code> or <code>NaN == NaN</code> evaluate to false</li><li><code>NaN !== NaN</code> or <code>NaN != NaN</code> evaluate to true</li></ul>\n\n<p>Therefore, use <code>Number.isNaN()</code> or global <code>isNaN()</code> functions to test whether a value is <code>NaN</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows comparisons to &#39;NaN&#39;.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint use-isnan: &quot;error&quot;</em>/</p>\n\n<p>if (foo == NaN) {\n    // ...\n}</p>\n\n<p>if (foo != NaN) {\n    // ...\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint use-isnan: &quot;error&quot;</em>/</p>\n\n<p>if (isNaN(foo)) {\n    // ...\n}</p>\n\n<p>if (!isNaN(foo)) {\n    // ...\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/use-isnan
valid-jsdoc	A			Possible Errors						http://eslint.org/img/logo.svg	<section class="prog__container"><p><a href="http://usejsdoc.org">JSDoc</a> generates application programming interface (API) documentation from specially-formatted comments in JavaScript code. For example, this is a JSDoc comment for a function:</p>\n\n<p><code>js\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n</code></p>\n\n<p>If comments are invalid because of typing mistakes, then documentation will be incomplete.</p>\n\n<p>If comments are inconsistent because they are not updated when function definitions are modified, then readers might become confused.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces valid and consistent JSDoc comments. It reports any of the following problems:</p>\n\n<ul><li>missing parameter tag: <code>@arg</code>, <code>@argument</code>, or <code>@param</code></li><li>inconsistent order of parameter names in a comment compared to the function or method</li><li>missing return tag: <code>@return</code> or <code>@returns</code></li><li>missing parameter or return type</li><li>missing parameter or return description</li><li>syntax error</li></ul>\n\n<p>This rule does not report missing JSDoc comments for classes, functions, or methods.</p>\n\n<p><strong>Note:</strong> This rule does not support all of the Google Closure documentation tool&#39;s use cases. As such, some code such as <code>(/**number*/ n =&gt; n * 2);</code> will be flagged as missing appropriate function JSDoc comments even though <code>/**number*/</code> is intended to be a type hint and not a documentation block for the function. We don&#39;t recommend using this rule if you use type hints in this way.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint valid-jsdoc: &quot;error&quot;</em>/</p>\n\n<p>// expected @param tag for parameter num1 but found num instead\n// missing @param tag for parameter num2\n// missing return type\n/**\n <em> Add two numbers.\n </em> @param {number} num The first number.\n <em> @returns The sum of the two numbers.\n </em>/\nfunction add(num1, num2) {\n    return num1 + num2;\n}</p>\n\n<p>// missing brace\n// missing @returns tag\n/**\n <em> @param {string name Whom to greet.\n </em>/\nfunction greet(name) {\n    console.log(&quot;Hello &quot; + name);\n}</p>\n\n<p>// missing parameter type for num1\n// missing parameter description for num2\n/**\n <em> Represents a sum.\n </em> @constructor\n <em> @param num1 The first number.\n </em> @param {number} num2\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint valid-jsdoc: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>/**\n <em> Add two numbers.\n </em> @param {number} num1 The first number.\n <em> @param {number} num2 The second number.\n </em> @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}</p>\n\n<p>// default options allow missing function description\n// return type <code>void</code> means the function has no <code>return</code> statement\n/**\n <em> @param {string} name Whom to greet.\n </em> @returns {void}\n */\nfunction greet(name) {\n    console.log(&quot;Hello &quot; + name);\n}</p>\n\n<p>// @constructor tag allows missing @returns tag\n/**\n <em> Represents a sum.\n </em> @constructor\n <em> @param {number} num1 The first number.\n </em> @param {number} num2 The second number.\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}</p>\n\n<p>// class constructor allows missing @returns tag\n/<strong>\n <em> Represents a sum.\n </em>/\nclass Sum {\n    /</strong>\n     <em> @param {number} num1 The first number.\n     </em> @param {number} num2 The second number.\n     */\n    constructor(num1, num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n}</p>\n\n<p>// @abstract tag allows @returns tag without <code>return</code> statement\nclass Widget {\n    /**\n    <em> When the state changes, does it affect the rendered appearance?\n    </em> @abstract\n    <em> @param {Object} state The new state of the widget.\n    </em> @returns {boolean} Is current appearance inconsistent with new state?\n    */\n    mustRender (state) {\n        throw new Error(&quot;Widget subclass did not implement mustRender&quot;);\n    }\n}</p>\n\n<p>// @override tag allows missing @param and @returns tags\nclass WonderfulWidget extends Widget {\n    /**\n     <em> @override\n     </em>/\n    mustRender (state) {\n        return state !== this.state; // shallow comparison\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/valid-jsdoc
valid-typeof	A			Possible Errors\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>For a vast majority of use cases, the result of the <code>typeof</code> operator is one of the following string literals: <code>&quot;undefined&quot;</code>, <code>&quot;object&quot;</code>, <code>&quot;boolean&quot;</code>, <code>&quot;number&quot;</code>, <code>&quot;string&quot;</code>, <code>&quot;function&quot;</code> and <code>&quot;symbol&quot;</code>. It is usually a typing mistake to compare the result of a <code>typeof</code> operator to other string literals.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces comparing <code>typeof</code> expressions to valid string literals.</p></section>	http://eslint.org/docs/rules/valid-typeof
accessor-pairs	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It&#39;s a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it. Without a getter, you cannot read the property, so it ends up not being used.</p>\n\n<p>Here are some examples:</p>\n\n<p><code></code>`js\n// Bad\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};</p>\n\n<p>// Good\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};</p>\n\n<p><code></code>`</p>\n\n<p>This rule warns if setters are defined without getters. Using an option <code>getWithoutSet</code>, it will warn if you have a getter without a setter also.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a style where it requires to have a getter for every property which has a setter defined.</p>\n\n<p>By activating the option <code>getWithoutSet</code> it enforces the presence of a setter for every property which has a getter defined.</p></section>	http://eslint.org/docs/rules/accessor-pairs
array-callback-return	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p><code>Array</code> has several methods for filtering, mapping, and folding.\nIf we forget to write <code>return</code> statement in a callback of those, it&#39;s probably a mistake.</p>\n\n<p><code>js\n// example: convert [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] --&gt; {a: 0, b: 1, c: 2}\nvar indexMap = myArray.reduce(function(memo, item, index) {\n  memo[item] = index;\n}, {}); // Error: cannot set property &#39;b&#39; of undefined\n</code></p>\n\n<p>This rule enforces usage of <code>return</code> statement in callbacks of array&#39;s methods.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule finds callback functions of the following methods, then checks usage of <code>return</code> statement.</p>\n\n<ul><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.from"><code>Array.from</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.every"><code>Array.prototype.every</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.filter"><code>Array.prototype.filter</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.find"><code>Array.prototype.find</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.findIndex "><code>Array.prototype.findIndex</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.map"><code>Array.prototype.map</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduce"><code>Array.prototype.reduce</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduceRight"><code>Array.prototype.reduceRight</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.some"><code>Array.prototype.some</code></a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.sort"><code>Array.prototype.sort</code></a></li><li>And above of typed arrays.</li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint array-callback-return: &quot;error&quot;</em>/</p>\n\n<p>var indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n}, {});</p>\n\n<p>var foo = Array.from(nodes, function(node) {\n    if (node.tagName === &quot;DIV&quot;) {\n        return true;\n    }\n});</p>\n\n<p>var bar = foo.filter(function(x) {\n    if (x) {\n        return true;\n    } else {\n        return;\n    }\n});\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint array-callback-return: &quot;error&quot;</em>/</p>\n\n<p>var indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n    return memo;\n}, {});</p>\n\n<p>var foo = Array.from(nodes, function(node) {\n    if (node.tagName === &quot;DIV&quot;) {\n        return true;\n    }\n    return false;\n});</p>\n\n<p>var bar = foo.map(node =&gt; node.getAttribute(&quot;id&quot;));\n<code></code>`</p></section>	http://eslint.org/docs/rules/array-callback-return
block-scoped-var	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>block-scoped-var</code> rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint block-scoped-var: &quot;error&quot;</em>/</p>\n\n<p>function doIf() {\n    if (true) {\n        var build = true;\n    }</p>\n\n<pre><code>console.log(build);</code></pre>\n\n<p>}</p>\n\n<p>function doIfElse() {\n    if (true) {\n        var build = true;\n    } else {\n        var build = false;\n    }\n}</p>\n\n<p>function doTryCatch() {\n    try {\n        var build = 1;\n    } catch (e) {\n        var f = build;\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint block-scoped-var: &quot;error&quot;</em>/</p>\n\n<p>function doIf() {\n    var build;</p>\n\n<pre><code>if (true) {\n    build = true;\n}\n\nconsole.log(build);</code></pre>\n\n<p>}</p>\n\n<p>function doIfElse() {\n    var build;</p>\n\n<pre><code>if (true) {\n    build = true;\n} else {\n    build = false;\n}</code></pre>\n\n<p>}</p>\n\n<p>function doTryCatch() {\n    var build;\n    var f;</p>\n\n<pre><code>try {\n    build = 1;\n} catch (e) {\n    f = build;\n}</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/block-scoped-var
class-methods-use-this	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If a class method does not use <code>this</code>, it can safely be made a static function.</p>\n\n<p>It&#39;s possible to have a class method which doesn&#39;t use <code>this</code>, such as:</p>\n\n<p><code></code>`js\nclass A {\n    constructor() {\n        this.a = &quot;hi&quot;;\n    }</p>\n\n<pre><code>print() {\n    console.log(this.a);\n}\n\nsayHi() {\n    console.log(&quot;hi&quot;);\n}</code></pre>\n\n<p>}</p>\n\n<p>let a = new A();\na.sayHi(); // =&gt; &quot;hi&quot;\n<code></code>`</p>\n\n<p>In the example above, the <code>sayHi</code> method doesn&#39;t use <code>this</code>, so we can make it a static method:</p>\n\n<p><code></code>`js\nclass A {\n    constructor() {\n        this.a = &quot;hi&quot;;\n    }</p>\n\n<pre><code>print() {\n    console.log(this.a);\n}\n\nstatic sayHi() {\n    console.log(&quot;hi&quot;);\n}</code></pre>\n\n<p>}</p>\n\n<p>A.sayHi(); // =&gt; &quot;hi&quot;\n<code></code>`</p>\n\n<p>Also note in the above examples that the code calling the function on an <em>instance</em> of the class (<code>let a = new A(); a.sayHi();</code>) changes to calling it on the <em>class</em> itself (<code>A.sayHi();</code>).</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag class methods that do not use <code>this</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint class-methods-use-this: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A {\n    foo() {\n        console.log(&quot;Hello World&quot;);     /<em>error Expected &#39;this&#39; to be used by class method &#39;foo&#39;.</em>/\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint class-methods-use-this: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/\nclass A {\n    foo() {\n        this.bar = &quot;Hello World&quot;; // OK, this is used\n    }\n}</p>\n\n<p>class A {\n    constructor() {\n        // OK. constructor is exempt\n    }\n}</p>\n\n<p>class A {\n    static foo() {\n        // OK. static methods aren&#39;t expected to use this.\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/class-methods-use-this
complexity	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Cyclomatic complexity measures the number of linearly independent paths through a program&#39;s source code. This rule allows setting a cyclomatic complexity threshold.</p>\n\n<p><code>js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is <code>20</code>).</p>\n\n<p>Examples of <strong>incorrect</strong> code for a maximum of 2:</p>\n\n<p><code></code>`js\n/<em>eslint complexity: [&quot;error&quot;, 2]</em>/</p>\n\n<p>function a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for a maximum of 2:</p>\n\n<p><code></code>`js\n/<em>eslint complexity: [&quot;error&quot;, 2]</em>/</p>\n\n<p>function a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/complexity
consistent-return	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Unlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.</p>\n\n<p>A confusing aspect of JavaScript is that a function returns <code>undefined</code> if any of the following are true:</p>\n\n<ul><li>it does not execute a <code>return</code> statement before it exits</li><li>it executes <code>return</code> which does not specify a value explicitly</li><li>it executes <code>return undefined</code></li><li>it executes <code>return void</code> followed by an expression (for example, a function call)</li><li>it executes <code>return</code> followed by any other expression which evaluates to <code>undefined</code></li></ul>\n\n<p>If any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:</p>\n\n<ul><li>a code path through the function returns a Boolean value <code>true</code></li><li>another code path does not return a value explicitly, therefore returns <code>undefined</code> implicitly</li></ul>\n\n<p><code>js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires <code>return</code> statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the <code>new</code> operator) return the instantiated object implicitly if they do not return another object explicitly.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint consistent-return: &quot;error&quot;</em>/</p>\n\n<p>function doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}</p>\n\n<p>function doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint consistent-return: &quot;error&quot;</em>/</p>\n\n<p>function doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}</p>\n\n<p>function Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }</p>\n\n<pre><code>this.a = 0;</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/consistent-return
curly	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to <em>never</em> omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity. So the following:</p>\n\n<p><code>js\nif (foo) foo++;\n</code></p>\n\n<p>Can be rewritten as:</p>\n\n<p><code>js\nif (foo) {\n    foo++;\n}\n</code></p>\n\n<p>There are, however, some who prefer to only use braces when there is more than one statement to be executed.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.</p></section>	http://eslint.org/docs/rules/curly
default-case	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Some code conventions require that all <code>switch</code> statements have a <code>default</code> case, even if the default case is empty, such as:</p>\n\n<p><code></code>`js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;</p>\n\n<pre><code>case 2:\n    doSomething();\n    break;\n\ndefault:\n    // do nothing</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>The thinking is that it&#39;s better to always explicitly state what the default behavior should be so that it&#39;s clear whether or not the developer forgot to include the default behavior by mistake.</p>\n\n<p>Other code conventions allow you to skip the <code>default</code> case so long as there is a comment indicating the omission is intentional, such as:</p>\n\n<p><code></code>`js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;</p>\n\n<pre><code>case 2:\n    doSomething();\n    break;\n\n// no default</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Once again, the intent here is to show that the developer intended for there to be no default behavior.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to require <code>default</code> case in <code>switch</code> statements. You may optionally include a <code>// no default</code> after the last <code>case</code> if there is no <code>default</code> case. The comment may be in any desired case, such as <code>// No Default</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint default-case: &quot;error&quot;</em>/</p>\n\n<p>switch (a) {\n    case 1:\n        /<em> code </em>/\n        break;\n}</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint default-case: &quot;error&quot;</em>/</p>\n\n<p>switch (a) {\n    case 1:\n        /<em> code </em>/\n        break;</p>\n\n<pre><code>default:\n    /* code */\n    break;</code></pre>\n\n<p>}</p>\n\n<p>switch (a) {\n    case 1:\n        /<em> code </em>/\n        break;</p>\n\n<pre><code>// no default</code></pre>\n\n<p>}</p>\n\n<p>switch (a) {\n    case 1:\n        /<em> code </em>/\n        break;</p>\n\n<pre><code>// No Default</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/default-case
dot-location	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows you to place newlines before or after a dot in a member expression.</p>\n\n<p>Consistency in placing a newline before or after the dot can greatly increase readability.</p>\n\n<p><code></code>`js\nvar a = universe.\n        galaxy;</p>\n\n<p>var b = universe\n       .galaxy;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.</p></section>	http://eslint.org/docs/rules/dot-location
dot-notation	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>In JavaScript, one can access properties using the dot notation (<code>foo.bar</code>) or square-bracket notation (<code>foo[&quot;bar&quot;]</code>). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.</p>\n\n<p><code>js\nfoo[&quot;bar&quot;];\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint dot-notation: &quot;error&quot;</em>/</p>\n\n<p>var x = foo[&quot;bar&quot;];\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint dot-notation: &quot;error&quot;</em>/</p>\n\n<p>var x = foo.bar;</p>\n\n<p>var x = foo[bar];    // Property name is a variable, square-bracket notation required\n<code></code>`</p></section>	http://eslint.org/docs/rules/dot-notation
eqeqeq	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>It is considered good practice to use the type-safe equality operators <code>===</code> and <code>!==</code> instead of their regular counterparts <code>==</code> and <code>!=</code>.</p>\n\n<p>The reason for this is that <code>==</code> and <code>!=</code> do type coercion which follows the rather obscure <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3">Abstract Equality Comparison Algorithm</a>.\nFor instance, the following statements are all considered <code>true</code>:</p>\n\n<ul><li><code>[] == false</code></li><li><code>[] == ![]</code></li><li><code>3 == &quot;03&quot;</code></li></ul>\n\n<p>If one of those occurs in an innocent-looking statement such as <code>a == b</code> the actual problem is very difficult to spot.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating the type-unsafe equality operators.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint eqeqeq: &quot;error&quot;</em>/</p>\n\n<p>if (x == 42) { }</p>\n\n<p>if (&quot;&quot; == text) { }</p>\n\n<p>if (obj.getStuff() != undefined) { }\n<code></code>`</p>\n\n<p>The <code>--fix</code> option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a <code>typeof</code> expression, or if both operands are literals with the same type.</p></section>	http://eslint.org/docs/rules/eqeqeq
guard-for-in	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Looping over objects with a <code>for in</code> loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.</p>\n\n<p><code>js\nfor (key in foo) {\n    doSomething(key);\n}\n</code></p>\n\n<p>Note that simply checking <code>foo.hasOwnProperty(key)</code> is likely to cause an error in some cases; see <a href="no-prototype-builtins">no-prototype-builtins</a>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing unexpected behavior that could arise from using a <code>for in</code> loop without filtering the results in the loop. As such, it will warn when <code>for in</code> loops do not filter their results with an <code>if</code> statement.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint guard-for-in: &quot;error&quot;</em>/</p>\n\n<p>for (key in foo) {\n    doSomething(key);\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint guard-for-in: &quot;error&quot;</em>/</p>\n\n<p>for (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/guard-for-in
no-alert	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript&#39;s <code>alert</code>, <code>confirm</code>, and <code>prompt</code> functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, <code>alert</code> is often used while debugging code, which should be removed before deployment to production.</p>\n\n<p><code>js\nalert(&quot;here!&quot;);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters <code>alert</code>, <code>prompt</code>, and <code>confirm</code> function calls which are not shadowed.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-alert: &quot;error&quot;</em>/</p>\n\n<p>alert(&quot;here!&quot;);</p>\n\n<p>confirm(&quot;Are you sure?&quot;);</p>\n\n<p>prompt(&quot;What&#39;s your name?&quot;, &quot;John Doe&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-alert: &quot;error&quot;</em>/</p>\n\n<p>customAlert(&quot;Something happened!&quot;);</p>\n\n<p>customConfirm(&quot;Are you sure?&quot;);</p>\n\n<p>customPrompt(&quot;Who are you?&quot;);</p>\n\n<p>function foo() {\n    var alert = myCustomLib.customAlert;\n    alert();\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-alert
no-caller	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The use of <code>arguments.caller</code> and <code>arguments.callee</code> make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.</p>\n\n<p><code>js\nfunction foo() {\n    var callee = arguments.callee;\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at discouraging the use of deprecated and sub-optimal code, but disallowing the use of <code>arguments.caller</code> and <code>arguments.callee</code>. As such, it will warn when <code>arguments.caller</code> and <code>arguments.callee</code> are used.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-caller: &quot;error&quot;</em>/</p>\n\n<p>function foo(n) {\n    if (n &lt;= 0) {\n        return;\n    }</p>\n\n<pre><code>arguments.callee(n - 1);</code></pre>\n\n<p>}</p>\n\n<p>[1,2,3,4,5].map(function(n) {\n    return !(n &gt; 1) ? 1 : arguments.callee(n - 1) * n;\n});\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-caller: &quot;error&quot;</em>/</p>\n\n<p>function foo(n) {\n    if (n &lt;= 0) {\n        return;\n    }</p>\n\n<pre><code>foo(n - 1);</code></pre>\n\n<p>}</p>\n\n<p>[1,2,3,4,5].map(function factorial(n) {\n    return !(n &gt; 1) ? 1 : factorial(n - 1) * n;\n});\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-caller
no-case-declarations	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>This rule disallows lexical declarations (<code>let</code>, <code>const</code>, <code>function</code> and <code>class</code>)\nin <code>case</code>/<code>default</code> clauses. The reason is that the lexical declaration is visible\nin the entire switch block but it only gets initialized when it is assigned, which\nwill only happen if the case where it is defined is reached.</p>\n\n<p>To ensure that the lexical declaration only applies to the current case clause\nwrap your clauses in blocks.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-case-declarations: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>switch (foo) {\n    case 1:\n        let x = 1;\n        break;\n    case 2:\n        const y = 2;\n        break;\n    case 3:\n        function f() {}\n        break;\n    default:\n        class C {}\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-case-declarations: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>// Declarations outside switch-statements are valid\nconst a = 0;</p>\n\n<p>switch (foo) {\n    // The following case clauses are wrapped into blocks using brackets\n    case 1: {\n        let x = 1;\n        break;\n    }\n    case 2: {\n        const y = 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4:\n        // Declarations using var without brackets are valid due to function-scope hoisting\n        var z = 4;\n        break;\n    default: {\n        class C {}\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-case-declarations
no-div-regex	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Require regex literals to escape division operators.</p>\n\n<p><code>js\nfunction bar() { return /=foo/; }\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This is used to disambiguate the division operator to not confuse users.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-div-regex: &quot;error&quot;</em>/</p>\n\n<p>function bar() { return /=foo/; }\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-div-regex: &quot;error&quot;</em>/</p>\n\n<p>function bar() { return /\=foo/; }\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-div-regex
no-else-return	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If an <code>if</code> block contains a <code>return</code> statement, the <code>else</code> block becomes unnecessary. Its contents can be placed outside of the block.</p>\n\n<p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p><code>js\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at highlighting an unnecessary block of code following an <code>if</code> containing a return statement. As such, it will warn when it encounters an <code>else</code> following a chain of <code>if</code>s, all of them containing a <code>return</code> statement.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-else-return: &quot;error&quot;</em>/</p>\n\n<p>function foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}</p>\n\n<p>function foo() {\n    if (x) {\n        return y;\n    } else if (z) {\n        return w;\n    } else {\n        return t;\n    }\n}</p>\n\n<p>function foo() {\n    if (x) {\n        return y;\n    } else {\n        var t = &quot;foo&quot;;\n    }</p>\n\n<pre><code>return t;</code></pre>\n\n<p>}</p>\n\n<p>// Two warnings for nested occurrences\nfunction foo() {\n    if (x) {\n        if (y) {\n            return y;\n        } else {\n            return x;\n        }\n    } else {\n        return z;\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-else-return: &quot;error&quot;</em>/</p>\n\n<p>function foo() {\n    if (x) {\n        return y;\n    }</p>\n\n<pre><code>return z;</code></pre>\n\n<p>}</p>\n\n<p>function foo() {\n    if (x) {\n        return y;\n    } else if (z) {\n        var t = &quot;foo&quot;;\n    } else {\n        return w;\n    }\n}</p>\n\n<p>function foo() {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-else-return
no-empty-function	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Empty functions can reduce readability because readers need to guess whether it&#39;s intentional or not.\nSo writing a clear comment for empty functions is a good practice.</p>\n\n<p><code>js\nfunction foo() {\n    // do nothing.\n}\n</code></p>\n\n<p>Especially, the empty block of arrow functions might be confusing developers.\nIt&#39;s very similar to an empty object literal.</p>\n\n<p><code>js\nlist.map(() =&gt; {});   // This is a block, would return undefined.\nlist.map(() =&gt; ({})); // This is an empty object.\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating empty functions.\nA function will not be considered a problem if it contains a comment.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-function: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>function foo() {}</p>\n\n<p>var foo = function() {};</p>\n\n<p>var foo = () =&gt; {};</p>\n\n<p>function* foo() {}</p>\n\n<p>var foo = function*() {};</p>\n\n<p>var obj = {\n    foo: function() {},</p>\n\n<pre><code>foo: function*() {},\n\nfoo() {},\n\n*foo() {},\n\nget foo() {},\n\nset foo(value) {}</code></pre>\n\n<p>};</p>\n\n<p>class A {\n    constructor() {}</p>\n\n<pre><code>foo() {}\n\n*foo() {}\n\nget foo() {}\n\nset foo(value) {}\n\nstatic foo() {}\n\nstatic *foo() {}\n\nstatic get foo() {}\n\nstatic set foo(value) {}</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-function: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>function foo() {\n    // do nothing.\n}</p>\n\n<p>var foo = function() {\n    // any clear comments.\n};</p>\n\n<p>var foo = () =&gt; {\n    bar();\n};</p>\n\n<p>function* foo() {\n    // do nothing.\n}</p>\n\n<p>var foo = function*() {\n    // do nothing.\n};</p>\n\n<p>var obj = {\n    foo: function() {\n        // do nothing.\n    },</p>\n\n<pre><code>foo: function*() {\n    // do nothing.\n},\n\nfoo() {\n    // do nothing.\n},\n\n*foo() {\n    // do nothing.\n},\n\nget foo() {\n    // do nothing.\n},\n\nset foo(value) {\n    // do nothing.\n}</code></pre>\n\n<p>};</p>\n\n<p>class A {\n    constructor() {\n        // do nothing.\n    }</p>\n\n<pre><code>foo() {\n    // do nothing.\n}\n\n*foo() {\n    // do nothing.\n}\n\nget foo() {\n    // do nothing.\n}\n\nset foo(value) {\n    // do nothing.\n}\n\nstatic foo() {\n    // do nothing.\n}\n\nstatic *foo() {\n    // do nothing.\n}\n\nstatic get foo() {\n    // do nothing.\n}\n\nstatic set foo(value) {\n    // do nothing.\n}</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-empty-function
no-empty-pattern	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When using destructuring, it&#39;s possible to create a pattern that has no effect. This happens when empty curly braces are used to the right of an embedded object destructuring pattern, such as:</p>\n\n<p><code>js\n// doesn&#39;t create any variables\nvar {a: {}} = foo;\n</code></p>\n\n<p>In this code, no new variables are created because <code>a</code> is just a location helper while the <code>{}</code> is expected to contain the variables to create, such as:</p>\n\n<p><code>js\n// creates variable b\nvar {a: { b }} = foo;\n</code></p>\n\n<p>In many cases, the empty object pattern is a mistake where the author intended to use a default value instead, such as:</p>\n\n<p><code>js\n// creates variable a\nvar {a = {}} = foo;\n</code></p>\n\n<p>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-pattern: &quot;error&quot;</em>/</p>\n\n<p>var {} = foo;\nvar [] = foo;\nvar {a: {}} = foo;\nvar {a: []} = foo;\nfunction foo({}) {}\nfunction foo([]) {}\nfunction foo({a: {}}) {}\nfunction foo({a: []}) {}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-empty-pattern: &quot;error&quot;</em>/</p>\n\n<p>var {a = {}} = foo;\nvar {a = []} = foo;\nfunction foo({a = {}}) {}\nfunction foo({a = []}) {}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-empty-pattern
no-eq-null	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Comparing to <code>null</code> without a type-checking operator (<code>==</code> or <code>!=</code>), can have unintended results as the comparison will evaluate to true when comparing to not just a <code>null</code>, but also an <code>undefined</code> value.</p>\n\n<p><code>js\nif (foo == null) {\n  bar();\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>The <code>no-eq-null</code> rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to <code>null</code> only match <code>null</code>, and not also <code>undefined</code>. As such it will flag comparisons to null when using <code>==</code> and <code>!=</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-eq-null: &quot;error&quot;</em>/</p>\n\n<p>if (foo == null) {\n  bar();\n}</p>\n\n<p>while (qux != null) {\n  baz();\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-eq-null: &quot;error&quot;</em>/</p>\n\n<p>if (foo === null) {\n  bar();\n}</p>\n\n<p>while (qux !== null) {\n  baz();\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-eq-null
no-eval	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript&#39;s <code>eval()</code> function is potentially dangerous and is often misused. Using <code>eval()</code> on untrusted code can open a program up to several different injection attacks. The use of <code>eval()</code> in most contexts can be substituted for a better, alternative approach to a problem.</p>\n\n<p><code>js\nvar obj = { x: &quot;foo&quot; },\n    key = &quot;x&quot;,\n    value = eval(&quot;obj.&quot; + key);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the <code>eval()</code> function. As such, it will warn whenever the <code>eval()</code> function is used.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-eval: &quot;error&quot;</em>/</p>\n\n<p>var obj = { x: &quot;foo&quot; },\n    key = &quot;x&quot;,\n    value = eval(&quot;obj.&quot; + key);</p>\n\n<p>(0, eval)(&quot;var a = 0&quot;);</p>\n\n<p>var foo = eval;\nfoo(&quot;var a = 0&quot;);</p>\n\n<p>// This <code>this</code> is the global object.\nthis.eval(&quot;var a = 0&quot;);\n<code></code>`</p>\n\n<p>Example of additional <strong>incorrect</strong> code for this rule when <code>browser</code> environment is set to <code>true</code>:</p>\n\n<p><code></code>`js\n/<em>eslint no-eval: &quot;error&quot;</em>/\n/<em>eslint-env browser</em>/</p>\n\n<p>window.eval(&quot;var a = 0&quot;);\n<code></code>`</p>\n\n<p>Example of additional <strong>incorrect</strong> code for this rule when <code>node</code> environment is set to <code>true</code>:</p>\n\n<p><code></code>`js\n/<em>eslint no-eval: &quot;error&quot;</em>/\n/<em>eslint-env node</em>/</p>\n\n<p>global.eval(&quot;var a = 0&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-eval: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var obj = { x: &quot;foo&quot; },\n    key = &quot;x&quot;,\n    value = obj[key];</p>\n\n<p>class A {\n    foo() {\n        // This is a user-defined method.\n        this.eval(&quot;var a = 0&quot;);\n    }</p>\n\n<pre><code>eval() {\n}</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-eval
no-extend-native	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, you can extend any object, including builtin or &quot;native&quot; objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.</p>\n\n<p>For example here we are overriding a builtin method that will then affect all Objects, even other builtins.</p>\n\n<p><code></code>`js\n// seems harmless\nObject.prototype.extra = 55;</p>\n\n<p>// loop through some userIds\nvar users = {\n    &quot;123&quot;: &quot;Stan&quot;,\n    &quot;456&quot;: &quot;David&quot;\n};</p>\n\n<p>// not what you&#39;d expect\nfor (var id in users) {\n    console.log(id); // &quot;123&quot;, &quot;456&quot;, &quot;extra&quot;\n}\n<code></code>`</p>\n\n<p>A common suggestion to avoid this problem would be to wrap the inside of the <code>for</code> loop with <code>users.hasOwnProperty(id)</code>. However, if this rule is strictly enforced throughout your codebase you won&#39;t need to take that step.</p>\n\n<h2>Rule Details</h2>\n\n<p>Disallows directly modifying the prototype of builtin objects.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extend-native: &quot;error&quot;</em>/</p>\n\n<p>Object.prototype.a = &quot;a&quot;;\nObject.defineProperty(Array.prototype, &quot;times&quot;, { value: 999 });\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-extend-native
no-extra-bind	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>The <code>bind()</code> method is used to create functions with specific <code>this</code> values and, optionally, binds arguments to specific values. When used to specify the value of <code>this</code>, it&#39;s important that the function actually use <code>this</code> in its function body. For example:</p>\n\n<p><code></code>`js\nvar boundGetName = (function getName() {\n    return this.name;\n}).bind({ name: &quot;ESLint&quot; });</p>\n\n<p>console.log(boundGetName());      // &quot;ESLint&quot;\n<code></code>`</p>\n\n<p>This code is an example of a good use of <code>bind()</code> for setting the value of <code>this</code>.</p>\n\n<p>Sometimes during the course of code maintenance, the <code>this</code> value is removed from the function body. In that case, you can end up with a call to <code>bind()</code> that doesn&#39;t accomplish anything:</p>\n\n<p><code></code>`js\n// useless bind\nvar boundGetName = (function getName() {\n    return &quot;ESLint&quot;;\n}).bind({ name: &quot;ESLint&quot; });</p>\n\n<p>console.log(boundGetName());      // &quot;ESLint&quot;\n<code></code>`</p>\n\n<p>In this code, the reference to <code>this</code> has been removed but <code>bind()</code> is still used. In this case, the <code>bind()</code> is unnecessary overhead (and a performance hit) and can be safely removed.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at avoiding the unnecessary use of <code>bind()</code> and as such will warn whenever an immediately-invoked function expression (IIFE) is using <code>bind()</code> and doesn&#39;t have an appropriate <code>this</code> value. This rule won&#39;t flag usage of <code>bind()</code> that includes function argument binding.</p>\n\n<p><strong>Note:</strong> Arrow functions can never have their <code>this</code> value set using <code>bind()</code>. This rule flags all uses of <code>bind()</code> with arrow functions as a problem</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-bind: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var x = function () {\n    foo();\n}.bind(bar);</p>\n\n<p>var x = (() =&gt; {\n    foo();\n}).bind(bar);</p>\n\n<p>var x = (() =&gt; {\n    this.foo();\n}).bind(bar);</p>\n\n<p>var x = function () {\n    (function () {\n      this.foo();\n    }());\n}.bind(bar);</p>\n\n<p>var x = function () {\n    function foo() {\n      this.bar();\n    }\n}.bind(baz);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-bind: &quot;error&quot;</em>/</p>\n\n<p>var x = function () {\n    this.foo();\n}.bind(bar);</p>\n\n<p>var x = function (a) {\n    return a + 1;\n}.bind(foo, bar);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-extra-bind
no-extra-label	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>If a loop contains no nested loops or switches, labeling the loop is unnecessary.</p>\n\n<p><code>js\nA: while (a) {\n    break A;\n}\n</code></p>\n\n<p>You can achieve the same result by removing the label and using <code>break</code> or <code>continue</code> without a label.\nProbably those labels would confuse developers because they expect labels to jump to further.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating unnecessary labels.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-label: &quot;error&quot;</em>/</p>\n\n<p>A: while (a) {\n    break A;\n}</p>\n\n<p>B: for (let i = 0; i &lt; 10; ++i) {\n    break B;\n}</p>\n\n<p>C: switch (a) {\n    case 0:\n        break C;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-extra-label: &quot;error&quot;</em>/</p>\n\n<p>while (a) {\n    break;\n}</p>\n\n<p>for (let i = 0; i &lt; 10; ++i) {\n    break;\n}</p>\n\n<p>switch (a) {\n    case 0:\n        break;\n}</p>\n\n<p>A: {\n    break A;\n}</p>\n\n<p>B: while (a) {\n    while (b) {\n        break B;\n    }\n}</p>\n\n<p>C: switch (a) {\n    case 0:\n        while (b) {\n            break C;\n        }\n        break;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-extra-label
no-fallthrough	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>switch</code> statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one <code>case</code> to the next. For example:</p>\n\n<p><code></code>`js\nswitch(foo) {\n    case 1:\n        doSomething();</p>\n\n<pre><code>case 2:\n    doSomethingElse();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>In this example, if <code>foo</code> is <code>1</code>, then execution will flow through both cases, as the first falls through to the second. You can prevent this by using <code>break</code>, as in this example:</p>\n\n<p><code></code>`js\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;</p>\n\n<pre><code>case 2:\n    doSomethingElse();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>That works fine when you don&#39;t want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It&#39;s considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the <code>/falls?\s?through/i</code> regular expression:</p>\n\n<p><code></code>`js\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through</p>\n\n<pre><code>case 2:\n    doSomethingElse();</code></pre>\n\n<p>}</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();\n        // fall through</p>\n\n<pre><code>case 2:\n    doSomethingElse();</code></pre>\n\n<p>}</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();\n        // fallsthrough</p>\n\n<pre><code>case 2:\n    doSomethingElse();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>In this example, there is no confusion as to the expected behavior. It is clear that the first case is meant to fall through to the second case.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-fallthrough: &quot;error&quot;</em>/</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();</p>\n\n<pre><code>case 2:\n    doSomething();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-fallthrough: &quot;error&quot;</em>/</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();\n        break;</p>\n\n<pre><code>case 2:\n    doSomething();</code></pre>\n\n<p>}</p>\n\n<p>function bar(foo) {\n    switch(foo) {\n        case 1:\n            doSomething();\n            return;</p>\n\n<pre><code>    case 2:\n        doSomething();\n}</code></pre>\n\n<p>}</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();\n        throw new Error(&quot;Boo!&quot;);</p>\n\n<pre><code>case 2:\n    doSomething();</code></pre>\n\n<p>}</p>\n\n<p>switch(foo) {\n    case 1:\n    case 2:\n        doSomething();\n}</p>\n\n<p>switch(foo) {\n    case 1:\n        doSomething();\n        // falls through</p>\n\n<pre><code>case 2:\n    doSomething();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Note that the last <code>case</code> statement in these examples does not cause a warning because there is nothing to fall through into.</p></section>	http://eslint.org/docs/rules/no-fallthrough
no-floating-decimal	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Float values in JavaScript contain a decimal point, and there is no requirement that the decimal point be preceded or followed by a number. For example, the following are all valid JavaScript numbers:</p>\n\n<p><code>js\nvar num = .5;\nvar num = 2.;\nvar num = -.7;\n</code></p>\n\n<p>Although not a syntax error, this format for numbers can make it difficult to distinguish between true decimal numbers and the dot operator. For this reason, some recommend that you should always include a number before and after a decimal point to make it clear the intent is to create a decimal number.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating floating decimal points and will warn whenever a numeric value has a decimal point but is missing a number either before or after it.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-floating-decimal: &quot;error&quot;</em>/</p>\n\n<p>var num = .5;\nvar num = 2.;\nvar num = -.7;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-floating-decimal: &quot;error&quot;</em>/</p>\n\n<p>var num = 0.5;\nvar num = 2.0;\nvar num = -0.7;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-floating-decimal
no-global-assign	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript environments contain a number of built-in global variables, such as <code>window</code> in browsers and <code>process</code> in Node.js. In almost all cases, you don&#39;t want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don&#39;t want to do this in browser code:</p>\n\n<p><code>js\nwindow = {};\n</code></p>\n\n<p>While examples such as <code>window</code> are obvious, there are often hundreds of built-in global objects provided by JavaScript environments. It can be hard to know if you&#39;re assigning to a global variable or not.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows modifications to read-only global variables.</p>\n\n<p>ESLint has the capability to configure global variables as read-only.</p>\n\n<ul><li><a href="../user-guide/configuring#specifying-environments">Specifying Environments</a></li><li><a href="../user-guide/configuring#specifying-globals">Specifying Globals</a></li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/</p>\n\n<p>Object = null\nundefined = 1\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/\n/<em>eslint-env browser</em>/</p>\n\n<p>window = {}\nlength = 1\ntop = 1\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/\n/<em>globals a:false</em>/</p>\n\n<p>a = 1\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/</p>\n\n<p>a = 1\nvar b = 1\nb = 2\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/\n/<em>eslint-env browser</em>/</p>\n\n<p>onload = function() {}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-global-assign: &quot;error&quot;</em>/\n/<em>globals a:true</em>/</p>\n\n<p>a = 1\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-global-assign
no-implicit-coercion	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>In JavaScript, there are a lot of different ways to convert value types.\nSome of them might be hard to read and understand.</p>\n\n<p>Such as:</p>\n\n<p><code>js\nvar b = !!foo;\nvar b = ~foo.indexOf(&quot;.&quot;);\nvar n = +foo;\nvar n = 1 * foo;\nvar s = &quot;&quot; + foo;\nfoo += ``;\n</code></p>\n\n<p>Those can be replaced with the following code:</p>\n\n<p><code>js\nvar b = Boolean(foo);\nvar b = foo.indexOf(&quot;.&quot;) !== -1;\nvar n = Number(foo);\nvar n = Number(foo);\nvar s = String(foo);\nfoo = String(foo);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.</p></section>	http://eslint.org/docs/rules/no-implicit-coercion
no-implicit-globals	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When working with browser scripts, developers often forget that variable and function declarations at the top-level scope become global variables on the <code>window</code> object. As opposed to modules which have their own scope. Globals should be explicitly assigned to <code>window</code> or <code>self</code> if that is the intent. Otherwise variables intended to be local to the script should be wrapped in an IIFE.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>var</code> and named <code>function</code> declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-implicit-globals: &quot;error&quot;</em>/</p>\n\n<p>var foo = 1;</p>\n\n<p>function bar() {}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-implicit-globals: &quot;error&quot;</em>/</p>\n\n<p>// explicitly set on window\nwindow.foo = 1;\nwindow.bar = function() {};</p>\n\n<p>// intended to be scope to this file\n(function() {\n  var foo = 1;</p>\n\n<p>  function bar() {}\n})();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with <code>&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }</code> in the ESLint configuration:</p>\n\n<p><code></code>`js\n/<em>eslint no-implicit-globals: &quot;error&quot;</em>/</p>\n\n<p>// foo and bar are local to module\nvar foo = 1;\nfunction bar() {}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-implicit-globals
no-implied-eval	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It&#39;s considered a good practice to avoid using <code>eval()</code> in JavaScript. There are security and performance implications involved with doing so, which is why many linters (including ESLint) recommend disallowing <code>eval()</code>. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.</p>\n\n<p>The first is using <code>setTimeout()</code>, <code>setInterval()</code> or <code>execScript()</code> (Internet Explorer only), both of which can accept a string of JavaScript code as their first argument. For example:</p>\n\n<p><code>js\nsetTimeout(&quot;alert(&#39;Hi!&#39;);&quot;, 100);\n</code></p>\n\n<p>This is considered an implied <code>eval()</code> because a string of JavaScript code is\n passed in to be interpreted. The same can be done with <code>setInterval()</code> and <code>execScript()</code>. Both interpret the JavaScript code in  the global scope. For  both <code>setTimeout()</code> and <code>setInterval()</code>, the first argument can also be a function, and that is considered safer and is more performant:</p>\n\n<p><code>js\nsetTimeout(function() {\n    alert(&quot;Hi!&quot;);\n}, 100);\n</code></p>\n\n<p>The best practice is to always use a function for the first argument of <code>setTimeout()</code> and <code>setInterval()</code> (and avoid <code>execScript()</code>).</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate implied <code>eval()</code> through the use of <code>setTimeout()</code>, <code>setInterval()</code> or <code>execScript()</code>. As such, it will warn when either function is used with a string as the first argument.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-implied-eval: &quot;error&quot;</em>/</p>\n\n<p>setTimeout(&quot;alert(&#39;Hi!&#39;);&quot;, 100);</p>\n\n<p>setInterval(&quot;alert(&#39;Hi!&#39;);&quot;, 100);</p>\n\n<p>execScript(&quot;alert(&#39;Hi!&#39;)&quot;);</p>\n\n<p>window.setTimeout(&quot;count = 5&quot;, 10);</p>\n\n<p>window.setInterval(&quot;foo = bar&quot;, 10);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-implied-eval: &quot;error&quot;</em>/</p>\n\n<p>setTimeout(function() {\n    alert(&quot;Hi!&quot;);\n}, 100);</p>\n\n<p>setInterval(function() {\n    alert(&quot;Hi!&quot;);\n}, 100);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-implied-eval
no-invalid-this	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Under the strict mode, <code>this</code> keywords outside of classes or class-like objects might be <code>undefined</code> and raise a <code>TypeError</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to flag usage of <code>this</code> keywords outside of classes or class-like objects.</p>\n\n<p>Basically this rule checks whether or not a function which are containing <code>this</code> keywords is a constructor or a method.</p>\n\n<p>This rule judges from following conditions whether or not the function is a constructor:</p>\n\n<ul><li>The name of the function starts with uppercase.</li><li>The function is assigned to a variable which starts with an uppercase letter.</li><li>The function is a constructor of ES2015 Classes.</li></ul>\n\n<p>This rule judges from following conditions whether or not the function is a method:</p>\n\n<ul><li>The function is on an object literal.</li><li>The function is assigned to a property.</li><li>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</li></ul>\n\n<p>And this rule allows <code>this</code> keywords in functions below:</p>\n\n<ul><li>The <code>call/apply/bind</code> method of the function is called directly.</li><li>The function is a callback of array methods (such as <code>.forEach()</code>) if <code>thisArg</code> is given.</li><li>The function has <code>@this</code> tag in its JSDoc comment.</li></ul>\n\n<p>Otherwise are considered problems.</p>\n\n<p>This rule applies <strong>only</strong> in strict mode.\nWith <code>&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }</code> in the ESLint configuration, your code is in strict mode even without a <code>&quot;use strict&quot;</code> directive.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule in strict mode:</p>\n\n<p><code></code>`js\n/<em>eslint no-invalid-this: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>&quot;use strict&quot;;</p>\n\n<p>this.a = 0;\nbaz(() =&gt; this);</p>\n\n<p>(function() {\n    this.a = 0;\n    baz(() =&gt; this);\n})();</p>\n\n<p>function foo() {\n    this.a = 0;\n    baz(() =&gt; this);\n}</p>\n\n<p>var foo = function() {\n    this.a = 0;\n    baz(() =&gt; this);\n};</p>\n\n<p>foo(function() {\n    this.a = 0;\n    baz(() =&gt; this);\n});</p>\n\n<p>obj.foo = () =&gt; {\n    // <code>this</code> of arrow functions is the outer scope&#39;s.\n    this.a = 0;\n};</p>\n\n<p>var obj = {\n    aaa: function() {\n        return function foo() {\n            // There is in a method <code>aaa</code>, but <code>foo</code> is not a method.\n            this.a = 0;\n            baz(() =&gt; this);\n        };\n    }\n};</p>\n\n<p>foo.forEach(function() {\n    this.a = 0;\n    baz(() =&gt; this);\n});\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule in strict mode:</p>\n\n<p><code></code>`js\n/<em>eslint no-invalid-this: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>&quot;use strict&quot;;</p>\n\n<p>function Foo() {\n    // OK, this is in a legacy style constructor.\n    this.a = 0;\n    baz(() =&gt; this);\n}</p>\n\n<p>class Foo {\n    constructor() {\n        // OK, this is in a constructor.\n        this.a = 0;\n        baz(() =&gt; this);\n    }\n}</p>\n\n<p>var obj = {\n    foo: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};</p>\n\n<p>var obj = {\n    foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};</p>\n\n<p>var obj = {\n    get foo() {\n        // OK, this is in a method (this function is on object literal).\n        return this.a;\n    }\n};</p>\n\n<p>var obj = Object.create(null, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});</p>\n\n<p>Object.defineProperty(obj, &quot;foo&quot;, {\n    value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n});</p>\n\n<p>Object.defineProperties(obj, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});</p>\n\n<p>function Foo() {\n    this.foo = function foo() {\n        // OK, this is in a method (this function assigns to a property).\n        this.a = 0;\n        baz(() =&gt; this);\n    };\n}</p>\n\n<p>obj.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};</p>\n\n<p>Foo.prototype.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};</p>\n\n<p>class Foo {\n    foo() {\n        // OK, this is in a method.\n        this.a = 0;\n        baz(() =&gt; this);\n    }</p>\n\n<pre><code>static foo() {\n    // OK, this is in a method (static methods also have valid this).\n    this.a = 0;\n    baz(() =&gt; this);\n}</code></pre>\n\n<p>}</p>\n\n<p>var foo = (function foo() {\n    // OK, the <code>bind</code> method of this function is called directly.\n    this.a = 0;\n}).bind(obj);</p>\n\n<p>foo.forEach(function() {\n    // OK, <code>thisArg</code> of <code>.forEach()</code> is given.\n    this.a = 0;\n    baz(() =&gt; this);\n}, thisArg);</p>\n\n<p>/** @this Foo */\nfunction foo() {\n    // OK, this function has a <code>@this</code> tag in its JSDoc comment.\n    this.a = 0;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-invalid-this
no-iterator	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>__iterator__</code> property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript&#39;s <code>for in</code> and <code>for each</code> constructs. However, this property is now obsolete, so it should not be used. Here&#39;s an example of how this used to work:</p>\n\n<p><code>js\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n</code></p>\n\n<p>You should use ECMAScript 6 iterators and generators instead.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing errors that may arise from using the <code>__iterator__</code> property, which is not implemented in several browsers. As such, it will warn whenever it encounters the <code>__iterator__</code> property.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-iterator: &quot;error&quot;</em>/</p>\n\n<p>Foo.prototype.<strong>iterator</strong> = function() {\n    return new FooIterator(this);\n};</p>\n\n<p>foo.<strong>iterator</strong> = function () {};</p>\n\n<p>foo[&quot;<strong>iterator</strong>&quot;] = function () {};</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-iterator: &quot;error&quot;</em>/</p>\n\n<p>var <strong>iterator</strong> = foo; // Not using the <code>__iterator__</code> property.\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-iterator
no-labels	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Labeled statements in JavaScript are used in conjunction with <code>break</code> and <code>continue</code> to control flow around multiple loops. For example:</p>\n\n<p><code></code>`js\nouter:\n    while (true) {</p>\n\n<pre><code>    while (true) {\n        break outer;\n    }\n}</code></pre>\n\n<p><code></code>`</p>\n\n<p>The <code>break outer</code> statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the <code>outer</code> label was applied. If this statement was changed to be just <code>break</code>, control would flow back to the outer <code>while</code> statement and an infinite loop would result.</p>\n\n<p>While convenient in some cases, labels tend to be used only rarely and are frowned upon by some as a remedial form of flow control that is more error prone and harder to understand.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever <code>break</code> or <code>continue</code> are used with a label.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-labels: &quot;error&quot;</em>/</p>\n\n<p>label:\n    while(true) {\n        // ...\n    }</p>\n\n<p>label:\n    while(true) {\n        break label;\n    }</p>\n\n<p>label:\n    while(true) {\n        continue label;\n    }</p>\n\n<p>label:\n    switch (a) {\n    case 0:\n        break label;\n    }</p>\n\n<p>label:\n    {\n        break label;\n    }</p>\n\n<p>label:\n    if (a) {\n        break label;\n    }\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-labels: &quot;error&quot;</em>/</p>\n\n<p>var f = {\n    label: &quot;foo&quot;\n};</p>\n\n<p>while (true) {\n    break;\n}</p>\n\n<p>while (true) {\n    continue;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-labels
no-lone-blocks	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use. For example, these curly braces do nothing to <code>foo</code>:</p>\n\n<p><code>js\n{\n    var foo = bar();\n}\n</code></p>\n\n<p>In ES6, code blocks may create a new scope if a block-level binding (<code>let</code> and <code>const</code>), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-lone-blocks: &quot;error&quot;</em>/</p>\n\n<p>{}</p>\n\n<p>if (foo) {\n    bar();\n    {\n        baz();\n    }\n}</p>\n\n<p>function bar() {\n    {\n        baz();\n    }\n}</p>\n\n<p>{\n    function foo() {}\n}</p>\n\n<p>{\n    aLabel: {\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with es6 environment:</p>\n\n<p><code></code>`js\n/<em>eslint no-lone-blocks: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>while (foo) {\n    bar();\n}</p>\n\n<p>if (foo) {\n    if (bar) {\n        baz();\n    }\n}</p>\n\n<p>function bar() {\n    baz();\n}</p>\n\n<p>{\n    let x = 1;\n}</p>\n\n<p>{\n    const y = 1;\n}</p>\n\n<p>{\n    class Foo {}\n}</p>\n\n<p>aLabel: {\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with es6 environment and strict mode via <code>&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }</code> in the ESLint configuration or <code>&quot;use strict&quot;</code> directive in the code:</p>\n\n<p><code></code>`js\n/<em>eslint no-lone-blocks: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>&quot;use strict&quot;;</p>\n\n<p>{\n    function foo() {}\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-lone-blocks
no-loop-func	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Writing functions within loops tends to result in errors due to the way the function creates a closure around the loop. For example:</p>\n\n<p><code>js\nfor (var i = 0; i &lt; 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n</code></p>\n\n<p>In this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of <code>i</code> in the scope.</p>\n\n<p><code>let</code> or <code>const</code> mitigate this problem.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>for (let i = 0; i &lt; 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n<code></code>`</p>\n\n<p>In this case, each function created within the loop returns a different number as expected.</p>\n\n<h2>Rule Details</h2>\n\n<p>This error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-loop-func: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>for (var i=10; i; i--) {\n    (function() { return i; })();\n}</p>\n\n<p>while(i) {\n    var a = function() { return i; };\n    a();\n}</p>\n\n<p>do {\n    function a() { return i; };\n    a();\n} while (i);</p>\n\n<p>let foo = 0;\nfor (let i=10; i; i--) {\n    // Bad, function is referencing block scoped variable in the outer scope.\n    var a = function() { return foo; };\n    a();\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-loop-func: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var a = function() {};</p>\n\n<p>for (var i=10; i; i--) {\n    a();\n}</p>\n\n<p>for (var i=10; i; i--) {\n    var a = function() {}; // OK, no references to variables in the outer scopes.\n    a();\n}</p>\n\n<p>for (let i=10; i; i--) {\n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop.\n    a();\n}</p>\n\n<p>var foo = 100;\nfor (let i=10; i; i--) {\n    var a = function() { return foo; }; // OK, all references are referring to never modified variables.\n    a();\n}\n//... no modifications of foo after this loop ...\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-loop-func
no-magic-numbers	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>&#39;Magic numbers&#39; are numbers that occur multiple time in code without an explicit meaning.\nThey should preferably be replaced by named constants.</p>\n\n<p><code>js\nvar now = Date.now(),\n    inOneHour = now + (60 * 60 * 1000);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>The <code>no-magic-numbers</code> rule aims to make code more readable and refactoring easier by ensuring that special numbers\nare declared as constants to make their meaning explicit.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-magic-numbers: &quot;error&quot;</em>/</p>\n\n<p>var dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * 0.25);\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-magic-numbers: &quot;error&quot;</em>/</p>\n\n<p>var data = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;];</p>\n\n<p>var dataLast = data[2];\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-magic-numbers: &quot;error&quot;</em>/</p>\n\n<p>var SECONDS;</p>\n\n<p>SECONDS = 60;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-magic-numbers: &quot;error&quot;</em>/</p>\n\n<p>var TAX = 0.25;</p>\n\n<p>var dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-magic-numbers
no-multi-spaces	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Multiple spaces in a row that are not used for indentation are typically mistakes. For example:</p>\n\n<p><code></code>`js</p>\n\n<p>if(foo  === &quot;bar&quot;) {}</p>\n\n<p><code></code>`</p>\n\n<p>It&#39;s hard to tell, but there are two spaces between <code>foo</code> and <code>===</code>. Multiple spaces such as this are generally frowned upon in favor of single spaces:</p>\n\n<p><code></code>`js</p>\n\n<p>if(foo === &quot;bar&quot;) {}</p>\n\n<p><code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-multi-spaces: &quot;error&quot;</em>/</p>\n\n<p>var a =  1;</p>\n\n<p>if(foo   === &quot;bar&quot;) {}</p>\n\n<p>a &lt;&lt;  b</p>\n\n<p>var arr = [1,  2];</p>\n\n<p>a ?  b: c\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-multi-spaces: &quot;error&quot;</em>/</p>\n\n<p>var a = 1;</p>\n\n<p>if(foo === &quot;bar&quot;) {}</p>\n\n<p>a &lt;&lt; b</p>\n\n<p>var arr = [1, 2];</p>\n\n<p>a ? b: c\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-multi-spaces
no-multi-str	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It&#39;s possible to create multiline strings in JavaScript by using a slash before a newline, such as:</p>\n\n<p><code>js\nvar x = &quot;Line 1 \\n         Line 2&quot;;\n</code></p>\n\n<p>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing the use of multiline strings.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code>js\n/*eslint no-multi-str: &quot;error&quot;*/\nvar x = &quot;Line 1 \\n         Line 2&quot;;\n</code></p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-multi-str: &quot;error&quot;</em>/</p>\n\n<p>var x = &quot;Line 1\n&quot; +\n        &quot;Line 2&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-multi-str
no-new-func	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It&#39;s possible to create functions in JavaScript using the <code>Function</code> constructor, such as:</p>\n\n<p><code>js\nvar x = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\n</code></p>\n\n<p>This is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.</p>\n\n<h2>Rule Details</h2>\n\n<p>This error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the <code>eval</code> function.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-func: &quot;error&quot;</em>/</p>\n\n<p>var x = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\nvar x = Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-func: &quot;error&quot;</em>/</p>\n\n<p>var x = function (a, b) {\n    return a + b;\n};\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-new-func
no-new-wrappers	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors <code>String</code>, <code>Number</code>, and <code>Boolean</code>, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:</p>\n\n<p><code>js\nvar text = &quot;Hello world&quot;.substring(2);\n</code></p>\n\n<p>Behind the scenes in this example, a <code>String</code> object is constructed. The <code>substring()</code> method exists on <code>String.prototype</code> and so is accessible to the string instance.</p>\n\n<p>It&#39;s also possible to manually create a new wrapper instance:</p>\n\n<p><code>js\nvar stringObject = new String(&quot;Hello world&quot;);\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);\n</code></p>\n\n<p>Although possible, there aren&#39;t any good reasons to use these primitive wrappers as constructors. They tend to confuse other developers more than anything else because they seem like they should act as primitives, but they do not. For example:</p>\n\n<p><code></code>`js\nvar stringObject = new String(&quot;Hello world&quot;);\nconsole.log(typeof stringObject);       // &quot;object&quot;</p>\n\n<p>var text = &quot;Hello world&quot;;\nconsole.log(typeof text);               // &quot;string&quot;</p>\n\n<p>var booleanObject = new Boolean(false);\nif (booleanObject) {    // all objects are truthy!\n    console.log(&quot;This executes&quot;);\n}\n<code></code>`</p>\n\n<p>The first problem is that primitive wrapper objects are, in fact, objects. That means <code>typeof</code> will return <code>&quot;object&quot;</code> instead of <code>&quot;string&quot;</code>, <code>&quot;number&quot;</code>, or <code>&quot;boolean&quot;</code>. The second problem comes with boolean objects. Every object is truthy, that means an instance of <code>Boolean</code> always resolves to <code>true</code> even when its actual value is <code>false</code>.</p>\n\n<p>For these reasons, it&#39;s considered a best practice to avoid using primitive wrapper types with <code>new</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate the use of <code>String</code>, <code>Number</code>, and <code>Boolean</code> with the <code>new</code> operator. As such, it warns whenever it sees <code>new String</code>, <code>new Number</code>, or <code>new Boolean</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-wrappers: &quot;error&quot;</em>/</p>\n\n<p>var stringObject = new String(&quot;Hello world&quot;);\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);</p>\n\n<p>var stringObject = new String;\nvar numberObject = new Number;\nvar booleanObject = new Boolean;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-wrappers: &quot;error&quot;</em>/</p>\n\n<p>var text = String(someValue);\nvar num = Number(someValue);</p>\n\n<p>var object = new MyString();\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-new-wrappers
no-new	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The goal of using <code>new</code> with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</p>\n\n<p><code>js\nvar person = new Person();\n</code></p>\n\n<p>It&#39;s less common to use <code>new</code> and not store the result, such as:</p>\n\n<p><code>js\nnew Person();\n</code></p>\n\n<p>In this case, the created object is thrown away because its reference isn&#39;t stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn&#39;t require <code>new</code> to be used.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at maintaining consistency and convention by disallowing constructor calls using the <code>new</code> keyword that do not assign the resulting object to a variable.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new: &quot;error&quot;</em>/</p>\n\n<p>new Thing();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new: &quot;error&quot;</em>/</p>\n\n<p>var thing = new Thing();</p>\n\n<p>Thing();\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-new
no-octal-escape	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>As of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used. Unicode escape sequences should be used instead.</p>\n\n<p><code>js\nvar foo = &quot;Copyright \251&quot;;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows octal escape sequences in string literals.</p>\n\n<p>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-octal-escape: &quot;error&quot;</em>/</p>\n\n<p>var foo = &quot;Copyright \251&quot;;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-octal-escape: &quot;error&quot;</em>/</p>\n\n<p>var foo = &quot;Copyright \u00A9&quot;;   // unicode</p>\n\n<p>var foo = &quot;Copyright \xA9&quot;;     // hexadecimal\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-octal-escape
no-octal	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Octal literals are numerals that begin with a leading zero, such as:</p>\n\n<p><code>js\nvar num = 071;      // 57\n</code></p>\n\n<p>Because the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals.</p>\n\n<h2>Rule Details</h2>\n\n<p>The rule disallows octal literals.</p>\n\n<p>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-octal: &quot;error&quot;</em>/</p>\n\n<p>var num = 071;\nvar result = 5 + 07;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-octal: &quot;error&quot;</em>/</p>\n\n<p>var num  = &quot;071&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-octal
no-param-reassign	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Assignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the <code>arguments</code> object. Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.</p>\n\n<p>This rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-param-reassign: &quot;error&quot;</em>/</p>\n\n<p>function foo(bar) {\n    bar = 13;\n}</p>\n\n<p>function foo(bar) {\n    bar++;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-param-reassign: &quot;error&quot;</em>/</p>\n\n<p>function foo(bar) {\n    var baz = bar;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-param-reassign
no-proto	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p><code>__proto__</code> property has been deprecated as of ECMAScript 3.1 and shouldn&#39;t be used in the code. Use <code>getPrototypeOf</code> method instead.</p>\n\n<h2>Rule Details</h2>\n\n<p>When an object is created <code>__proto__</code> is set to the original prototype property of the object’s constructor function. <code>getPrototypeOf</code> is the preferred method of getting &quot;the prototype&quot;.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-proto: &quot;error&quot;</em>/</p>\n\n<p>var a = obj.<strong>proto</strong>;</p>\n\n<p>var a = obj[&quot;<strong>proto</strong>&quot;];\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-proto: &quot;error&quot;</em>/</p>\n\n<p>var a = Object.getPrototypeOf(obj);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-proto
no-redeclare	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, it&#39;s possible to redeclare the same variable name using <code>var</code>. This can lead to confusion as to where the variable is actually declared and initialized.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating variables that have multiple declarations in the same scope.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-redeclare: &quot;error&quot;</em>/</p>\n\n<p>var a = 3;\nvar a = 10;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-redeclare: &quot;error&quot;</em>/</p>\n\n<p>var a = 3;\n// ...\na = 10;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-redeclare
no-restricted-properties	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Certain properties on objects may be disallowed in a codebase. This is useful for deprecating an API or restricting usage of a module&#39;s methods. For example, you may want to disallow using <code>describe.only</code> when using Mocha or telling people to use <code>Object.assign</code> instead of <code>_.extend</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule looks for accessing a given property key on a given object name, either when reading the property&#39;s value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction.</p>\n\n<h3>Options</h3>\n\n<p>This rule takes a list of objects, where the object name and property names are specified:</p>\n\n<p><code>json\n{\n    &quot;rules&quot;: {\n        &quot;no-restricted-properties&quot;: [2, {\n            &quot;object&quot;: &quot;disallowedObjectName&quot;,\n            &quot;property&quot;: &quot;disallowedPropertyName&quot;\n        }]\n    }\n}\n</code></p>\n\n<p>Multiple object/property values can be disallowed, and you can specify an optional message:</p>\n\n<p><code>json\n{\n    &quot;rules&quot;: {\n        &quot;no-restricted-properties&quot;: [2, {\n            &quot;object&quot;: &quot;disallowedObjectName&quot;,\n            &quot;property&quot;: &quot;disallowedPropertyName&quot;\n        }, {\n            &quot;object&quot;: &quot;disallowedObjectName&quot;,\n            &quot;property&quot;: &quot;anotherDisallowedPropertyName&quot;,\n            &quot;message&quot;: &quot;Please use allowedObjectName.allowedPropertyName.&quot;\n        }]\n    }\n}\n</code></p>\n\n<p>If the object name is omitted, the property is disallowed for all objects:</p>\n\n<p><code>json\n{\n    &quot;rules&quot;: {\n        &quot;no-restricted-properties&quot;: [2, {\n            &quot;property&quot;: &quot;__defineGetter__&quot;,\n            &quot;message&quot;: &quot;Please use Object.defineProperty instead.&quot;\n        }]\n    }\n}\n</code></p>\n\n<p>If the property name is omitted, accessing any property of the given object is disallowed:</p>\n\n<p><code>json\n{\n    &quot;rules&quot;: {\n        &quot;no-restricted-properties&quot;: [2, {\n            &quot;object&quot;: &quot;require&quot;,\n            &quot;message&quot;: &quot;Please call require() directly.&quot;\n        }]\n    }\n}\n</code></p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint no-restricted-properties: [2, {\n    &quot;object&quot;: &quot;disallowedObjectName&quot;,\n    &quot;property&quot;: &quot;disallowedPropertyName&quot;\n}] </em>/</p>\n\n<p>var example = disallowedObjectName.disallowedPropertyName; /<em>error Disallowed object property: disallowedObjectName.disallowedPropertyName.</em>/</p>\n\n<p>disallowedObjectName.disallowedPropertyName(); /<em>error Disallowed object property: disallowedObjectName.disallowedPropertyName.</em>/\n<code></code>`</p>\n\n<p><code></code>`js\n/<em> eslint no-restricted-properties: [2, {\n    &quot;property&quot;: &quot;<strong>defineGetter</strong>&quot;\n}] </em>/</p>\n\n<p>foo.<strong>defineGetter</strong>(bar, baz);\n<code></code>`</p>\n\n<p><code></code>`js\n/<em> eslint no-restricted-properties: [2, {\n    &quot;object&quot;: &quot;require&quot;\n}] </em>/</p>\n\n<p>require.resolve(&#39;foo&#39;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint no-restricted-properties: [2, {\n    &quot;object&quot;: &quot;disallowedObjectName&quot;,\n    &quot;property&quot;: &quot;disallowedPropertyName&quot;\n}] </em>/</p>\n\n<p>var example = disallowedObjectName.somePropertyName;</p>\n\n<p>allowedObjectName.disallowedPropertyName();\n<code></code>`</p>\n\n<p><code></code>`js\n/<em> eslint no-restricted-properties: [2, {\n    &quot;object&quot;: &quot;require&quot;\n}] </em>/</p>\n\n<p>require(&#39;foo&#39;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-restricted-properties
no-return-assign	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a <code>return</code> statement. For example:</p>\n\n<p><code>js\nfunction doSomething() {\n    return foo = bar + 2;\n}\n</code></p>\n\n<p>It is difficult to tell the intent of the <code>return</code> statement here. It&#39;s possible that the function is meant to return the result of <code>bar + 2</code>, but then why is it assigning to <code>foo</code>? It&#39;s also possible that the intent was to use a comparison operator such as <code>==</code> and that this code is an error.</p>\n\n<p>Because of this ambiguity, it&#39;s considered a best practice to not use assignment in <code>return</code> statements.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate assignments from <code>return</code> statements. As such, it will warn whenever an assignment is found as part of <code>return</code>.</p></section>	http://eslint.org/docs/rules/no-return-assign
no-return-await	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Inside an <code>async function</code>, <code>return await</code> is useless. Since the return value of an <code>async function</code> is always wrapped in <code>Promise.resolve</code>, <code>return await</code> doesn&#39;t actually do anything except add extra time before the overarching Promise resolves or rejects. This pattern is almost certainly due to programmer ignorance of the return semantics of <code>async function</code>s.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of <code>async function</code>.</p>\n\n<p>The following patterns are considered warnings:</p>\n\n<p><code>js\nasync function foo() {\n  return await bar();\n}\n</code></p>\n\n<p>The following patterns are not warnings:</p>\n\n<p><code></code>`js\nasync function foo() {\n  return bar();\n}</p>\n\n<p>async function foo() {\n  await bar();\n  return;\n}</p>\n\n<p>async function foo() {\n  const x = await bar();\n  return x;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-return-await
no-script-url	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Using <code>javascript:</code> URLs is considered by some as a form of <code>eval</code>. Code passed in <code>javascript:</code> URLs has to be parsed and evaluated by the browser in the same way that <code>eval</code> is processed.</p>\n\n<h2>Rule Details</h2>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-script-url: &quot;error&quot;</em>/</p>\n\n<p>location.href = &quot;javascript:void(0)&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-script-url
no-self-assign	A			Best Practices\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Self assignments have no effect, so probably those are an error due to incomplete refactoring.\nThose indicate that what you should do is still remaining.</p>\n\n<p><code>js\nfoo = foo;\n[bar, baz] = [bar, qiz];\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating self assignments.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-self-assign: &quot;error&quot;</em>/</p>\n\n<p>foo = foo;</p>\n\n<p>[a, b] = [a, b];</p>\n\n<p>[a, ...b] = [x, ...b];</p>\n\n<p>({a, b} = {a, x});\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-self-assign: &quot;error&quot;</em>/</p>\n\n<p>foo = bar;\n[a, b] = [b, a];</p>\n\n<p>// This pattern is warned by the <code>no-use-before-define</code> rule.\nlet foo = foo;</p>\n\n<p>// The default values have an effect.\n[foo = 1] = [foo];\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-self-assign
no-self-compare	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Comparing a variable against itself is usually an error, either an typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.</p>\n\n<p>The only time you would compare a variable against itself is when you are testing for <code>NaN</code>. However, it is far more appropriate to use <code>typeof x === &#39;number&#39; &amp;&amp; isNaN(x)</code> or the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN ES2015 function</a> for that use case rather than leaving the reader of the code to determine the intent of self comparison.</p>\n\n<h2>Rule Details</h2>\n\n<p>This error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-self-compare: &quot;error&quot;</em>/</p>\n\n<p>var x = 10;\nif (x === x) {\n    x = 20;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-self-compare
no-sequences	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</p>\n\n<p><code></code>`js\nvar a = (3, 5); // a = 5</p>\n\n<p>a = b += 5, a + b;</p>\n\n<p>while (a = next(), a &amp;&amp; a.length);</p>\n\n<p>(0, eval)(&quot;doSomething();&quot;);\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule forbids the use of the comma operator, with the following exceptions:</p>\n\n<ul><li>In the initialization or update portions of a <code>for</code> statement.</li><li>If the expression sequence is explicitly wrapped in parentheses.</li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sequences: &quot;error&quot;</em>/</p>\n\n<p>foo = doSomething(), val;</p>\n\n<p>0, eval(&quot;doSomething();&quot;);</p>\n\n<p>do {} while (doSomething(), !!test);</p>\n\n<p>for (; doSomething(), !!test; );</p>\n\n<p>if (doSomething(), !!test);</p>\n\n<p>switch (val = foo(), val) {}</p>\n\n<p>while (val = foo(), val &lt; 42);</p>\n\n<p>with (doSomething(), val) {}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sequences: &quot;error&quot;</em>/</p>\n\n<p>foo = (doSomething(), val);</p>\n\n<p>(0, eval)(&quot;doSomething();&quot;);</p>\n\n<p>do {} while ((doSomething(), !!test));</p>\n\n<p>for (i = 0, j = 10; i &lt; j; i++, j--);</p>\n\n<p>if ((doSomething(), !!test));</p>\n\n<p>switch ((val = foo(), val)) {}</p>\n\n<p>while ((val = foo(), val &lt; 42));</p>\n\n<p>// with ((doSomething(), val)) {}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-sequences
no-throw-literal	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It is considered good practice to only <code>throw</code> the <code>Error</code> object itself or an object using the <code>Error</code> object as base objects for user-defined exceptions.\nThe fundamental benefit of <code>Error</code> objects is that they automatically keep track of where they were built and originated.</p>\n\n<p>This rule restricts what can be thrown as an exception.  When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an <code>Error</code> object.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an <code>Error</code> object.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-throw-literal: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>throw &quot;error&quot;;</p>\n\n<p>throw 0;</p>\n\n<p>throw undefined;</p>\n\n<p>throw null;</p>\n\n<p>var err = new Error();\nthrow &quot;an &quot; + err;\n// err is recast to a string literal</p>\n\n<p>var err = new Error();\nthrow <code>${err}</code></p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-throw-literal: &quot;error&quot;</em>/</p>\n\n<p>throw new Error();</p>\n\n<p>throw new Error(&quot;error&quot;);</p>\n\n<p>var e = new Error(&quot;error&quot;);\nthrow e;</p>\n\n<p>try {\n    throw new Error(&quot;error&quot;);\n} catch (e) {\n    throw e;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-throw-literal
no-unmodified-loop-condition	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Variables in a loop condition often are modified in the loop.\nIf not, it&#39;s possibly a mistake.</p>\n\n<p><code>js\nwhile (node) {\n    doSomething(node);\n}\n</code></p>\n\n<p><code>js\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule finds references which are inside of loop conditions, then checks the\nvariables of those references are modified in the loop.</p>\n\n<p>If a reference is inside of a binary expression or a ternary expression, this rule checks the result of\nthe expression instead.\nIf a reference is inside of a dynamic expression (e.g. <code>CallExpression</code>,\n<code>YieldExpression</code>, ...), this rule ignores it.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\nwhile (node) {\n    doSomething(node);\n}\nnode = other;</p>\n\n<p>for (var j = 0; j &lt; items.length; ++i) {\n    doSomething(items[j]);\n}</p>\n\n<p>while (node !== root) {\n    doSomething(node);\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}</p>\n\n<p>for (var j = 0; j &lt; items.length; ++j) {\n    doSomething(items[j]);\n}</p>\n\n<p>// OK, the result of this binary expression is changed in this loop.\nwhile (node !== root) {\n    doSomething(node);\n    node = node.parent;\n}</p>\n\n<p>// OK, the result of this ternary expression is changed in this loop.\nwhile (node ? A : B) {\n    doSomething(node);\n    node = node.parent;\n}</p>\n\n<p>// A property might be a getter which has side effect...\n// Or &quot;doSomething&quot; can modify &quot;obj.foo&quot;.\nwhile (obj.foo) {\n    doSomething(obj);\n}</p>\n\n<p>// A function call can return various values.\nwhile (check(obj)) {\n    doSomething(obj);\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unmodified-loop-condition
no-unused-expressions	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>An unused expression which has no effect on the state of the program indicates a logic error.</p>\n\n<p>For example, <code>n + 1;</code> is not a syntax error, but it might be a typing mistake where a programmer meant an assignment statement <code>n += 1;</code> instead.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate unused expressions which have no effect on the state of the program.</p>\n\n<p>This rule does not apply to function calls or constructor calls with the <code>new</code> operator, because they could have <em>side effects</em> on the state of the program.</p>\n\n<p><code></code>`js\nvar i = 0;\nfunction increment() { i += 1; }\nincrement(); // return value is unused, but i changed as a side effect</p>\n\n<p>var nThings = 0;\nfunction Thing() { nThings += 1; }\nnew Thing(); // constructed object is unused, but nThings changed as a side effect\n<code></code>`</p>\n\n<p>This rule does not apply to directives (which are in the form of literal string expressions such as <code>&quot;use strict&quot;;</code> at the beginning of a script, module, or function).</p>\n\n<p>Sequence expressions (those using a comma, such as <code>a = 1, b = 2</code>) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</p></section>	http://eslint.org/docs/rules/no-unused-expressions
no-unused-labels	A			Best Practices\nFixable Rules\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Labels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.</p>\n\n<p><code>js\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n</code></p>\n\n<p>In this case, probably removing <code>OUTER_LOOP:</code> had been forgotten.\nSuch labels take up space in the code and can lead to confusion by readers.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating unused labels.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unused-labels: &quot;error&quot;</em>/</p>\n\n<p>A: var foo = 0;</p>\n\n<p>B: {\n    foo();\n}</p>\n\n<p>C:\nfor (let i = 0; i &lt; 10; ++i) {\n    foo();\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unused-labels: &quot;error&quot;</em>/</p>\n\n<p>A: {\n    if (foo()) {\n        break A;\n    }\n    bar();\n}</p>\n\n<p>B:\nfor (let i = 0; i &lt; 10; ++i) {\n    if (foo()) {\n        break B;\n    }\n    bar();\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unused-labels
no-useless-call	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The function invocation can be written by <code>Function.prototype.call()</code> and <code>Function.prototype.apply()</code>.\nBut <code>Function.prototype.call()</code> and <code>Function.prototype.apply()</code> are slower than the normal function invocation.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag usage of <code>Function.prototype.call()</code> and <code>Function.prototype.apply()</code> that can be replaced with the normal function invocation.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-call: &quot;error&quot;</em>/</p>\n\n<p>// These are same as <code>foo(1, 2, 3);</code>\nfoo.call(undefined, 1, 2, 3);\nfoo.apply(undefined, [1, 2, 3]);\nfoo.call(null, 1, 2, 3);\nfoo.apply(null, [1, 2, 3]);</p>\n\n<p>// These are same as <code>obj.foo(1, 2, 3);</code>\nobj.foo.call(obj, 1, 2, 3);\nobj.foo.apply(obj, [1, 2, 3]);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-call: &quot;error&quot;</em>/</p>\n\n<p>// The <code>this</code> binding is different.\nfoo.call(obj, 1, 2, 3);\nfoo.apply(obj, [1, 2, 3]);\nobj.foo.call(null, 1, 2, 3);\nobj.foo.apply(null, [1, 2, 3]);\nobj.foo.call(otherObj, 1, 2, 3);\nobj.foo.apply(otherObj, [1, 2, 3]);</p>\n\n<p>// The argument list is variadic.\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-useless-call
no-useless-concat	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It&#39;s unnecessary to concatenate two strings together, such as:</p>\n\n<p><code>js\nvar foo = &quot;a&quot; + &quot;b&quot;;\n</code></p>\n\n<p>This code is likely the result of refactoring where a variable was removed from the concatenation (such as <code>&quot;a&quot; + b + &quot;b&quot;</code>). In such a case, the concatenation isn&#39;t important and the code can be rewritten as:</p>\n\n<p><code>js\nvar foo = &quot;ab&quot;;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-concat: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>// these are the same as &quot;10&quot;\nvar a = <code>some</code> + <code>string</code>;\nvar a = &#39;1&#39; + &#39;0&#39;;\nvar a = &#39;1&#39; + <code>0</code>;\nvar a = <code>1</code> + &#39;0&#39;;\nvar a = <code>1</code> + <code>0</code>;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-concat: &quot;error&quot;</em>/</p>\n\n<p>// when a non string is included\nvar c = a + b;\nvar c = &#39;1&#39; + a;\nvar a = 1 + &#39;1&#39;;\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = &quot;foo&quot; +\n    &quot;bar&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-useless-concat
no-useless-escape	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Escaping non-special characters in strings, template literals, and regular expressions doesn&#39;t have any effect, as demonstrated in the following example:</p>\n\n<p><code>js\nlet foo = &quot;hol\a&quot;; // &gt; foo = &quot;hola&quot;\nlet bar = `${foo}\!`; // &gt; bar = &quot;hola!&quot;\nlet baz = /\:/ // same functionality with /:/\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule flags escapes that can be safely removed without changing behavior.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-escape: &quot;error&quot;</em>/</p>\n\n<p>&quot;\&#39;&quot;;\n&#39;\&quot;&#39;;\n&quot;#&quot;;\n&quot;\e&quot;;\n<code>\&quot;</code>;\n<code>\&quot;${foo}\&quot;</code>;\n<code>\#{foo}</code>;\n/!/;\n/\@/;</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-useless-escape: &quot;error&quot;</em>/</p>\n\n<p>&quot;\&quot;&quot;;\n&#39;\&#39;&#39;;\n&quot;\x12&quot;;\n&quot;\u00a9&quot;;\n&quot;\371&quot;;\n&quot;xs\u2111&quot;;\n<code>\</code><code>;\n</code>\${${foo}}<code>;\n</code>${${foo}}`;\n/\/g;\n/\t/g;\n/\w\$*\^./;</p>\n\n<p><code></code>`</p></section>	http://eslint.org/docs/rules/no-useless-escape
no-useless-return	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>A <code>return;</code> statement with nothing after it is redundant, and has no effect on the runtime behavior of a function. This can be confusing, so it&#39;s better to disallow these redundant statements.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to report redundant <code>return</code> statements.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint no-useless-return: &quot;error&quot; </em>/</p>\n\n<p>function foo() { return; }</p>\n\n<p>function foo() {\n  doSomething();\n  return;\n}</p>\n\n<p>function foo() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n}</p>\n\n<p>function foo() {\n  switch (bar) {\n    case 1:\n      doSomething();\n    default:\n      doSomethingElse();\n      return;\n  }\n}</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint no-useless-return: &quot;error&quot; </em>/</p>\n\n<p>function foo() { return 5; }</p>\n\n<p>function foo() {\n  return doSomething();\n}</p>\n\n<p>function foo() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n  qux();\n}</p>\n\n<p>function foo() {\n  switch (bar) {\n    case 1:\n      doSomething();\n      return;\n    default:\n      doSomethingElse();\n  }\n}</p>\n\n<p>function foo() {\n  for (const foo of bar) {\n    return;\n  }\n}</p>\n\n<p><code></code>`</p></section>	http://eslint.org/docs/rules/no-useless-return
no-void	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>void</code> operator takes an operand and returns <code>undefined</code>: <code>void expression</code> will evaluate <code>expression</code> and return <code>undefined</code>. It can be used to ignore any side effects <code>expression</code> may produce:</p>\n\n<p>The common case of using <code>void</code> operator is to get a &quot;pure&quot; <code>undefined</code> value as prior to ES5 the <code>undefined</code> variable was mutable:</p>\n\n<p><code></code>`js\n// will always return undefined\n(function(){\n    return void 0;\n})();</p>\n\n<p>// will return 1 in ES3 and undefined in ES5+\n(function(){\n    undefined = 1;\n    return undefined;\n})();</p>\n\n<p>// will throw TypeError in ES5+\n(function(){\n    &#39;use strict&#39;;\n    undefined = 1;\n})();\n<code></code>`</p>\n\n<p>Another common case is to minify code as <code>void 0</code> is shorter than <code>undefined</code>:</p>\n\n<p><code>js\nfoo = void 0;\nfoo = undefined;\n</code></p>\n\n<p>When used with IIFE (immediately-invoked function expression), <code>void</code> can be used to force the function keyword to be treated as an expression instead of a declaration:</p>\n\n<p><code>js\nvar foo = 1;\nvoid function(){ foo = 1; }() // will assign foo a value of 1\n+function(){ foo = 1; }() // same as above\n</code></p>\n\n<p><code>\nfunction(){ foo = 1; }() // will throw SyntaxError\n</code></p>\n\n<p>Some code styles prohibit <code>void</code> operator, marking it as non-obvious and hard to read.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate use of void operator.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-void: &quot;error&quot;</em>/</p>\n\n<p>void foo</p>\n\n<p>var foo = void bar();\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-void
no-warning-comments	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Developers often add comments to code which is not complete or needs review. Most likely you want to fix or review the code, and then remove the comment, before you consider the code to be production ready.</p>\n\n<p><code>js\n// TODO: do something\n// FIXME: this is not a good idea\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule reports comments that include any of the predefined terms specified in its configuration.</p></section>	http://eslint.org/docs/rules/no-warning-comments
no-with	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>with</code> statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>with</code> statements.</p>\n\n<p>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-with: &quot;error&quot;</em>/</p>\n\n<p>with (point) {\n    r = Math.sqrt(x <em> x + y </em> y); // is r a member of point?\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-with: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>const r = ({x, y}) =&gt; Math.sqrt(x <em> x + y </em> y);\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-with
prefer-promise-reject-errors	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It is considered good practice to only pass instances of the built-in <code>Error</code> object to the <code>reject()</code> function for user-defined errors in Promises. <code>Error</code> objects automatically store a stack trace, which can be used to debug an error by determining where it came from. If a Promise is rejected with a non-<code>Error</code> value, it can be difficult to determine where the rejection occurred.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to ensure that Promises are only rejected with <code>Error</code> objects.</p></section>	http://eslint.org/docs/rules/prefer-promise-reject-errors
radix	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When using the <code>parseInt()</code> function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is. By default, <code>parseInt()</code> will autodetect decimal and hexadecimal (via <code>0x</code> prefix). Prior to ECMAScript 5, <code>parseInt()</code> also autodetected octal literals, which caused problems because many developers assumed a leading <code>0</code> would be ignored.</p>\n\n<p>This confusion led to the suggestion that you always use the radix parameter to <code>parseInt()</code> to eliminate unintended consequences. So instead of doing this:</p>\n\n<p><code>js\nvar num = parseInt(&quot;071&quot;);      // 57\n</code></p>\n\n<p>Do this:</p>\n\n<p><code>js\nvar num = parseInt(&quot;071&quot;, 10);  // 71\n</code></p>\n\n<p>ECMAScript 5 changed the behavior of <code>parseInt()</code> so that it no longer autodetects octal literals and instead treats them as decimal literals. However, the differences between hexadecimal and decimal interpretation of the first parameter causes many developers to continue using the radix parameter to ensure the string is interpreted in the intended way.</p>\n\n<p>On the other hand, if the code is targeting only ES5-compliant environments passing the radix <code>10</code> may be redundant. In such a case you might want to disallow using such a radix.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant <code>10</code> radix if targeting modern environments only.</p></section>	http://eslint.org/docs/rules/radix
require-await	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Async functions which have no <code>await</code> expression may be the unintentional result of refactoring.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule warns async functions which have no <code>await</code> expression.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint require-await: &quot;error&quot;</em>/</p>\n\n<p>async function foo() {\n    doSomething();\n}</p>\n\n<p>bar(async () =&gt; {\n    doSomething();\n});\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint require-await: &quot;error&quot;</em>/</p>\n\n<p>async function foo() {\n    await doSomething();\n}</p>\n\n<p>bar(async () =&gt; {\n    await doSomething();\n});</p>\n\n<p>function foo() {\n    doSomething();\n}</p>\n\n<p>bar(() =&gt; {\n    doSomething();\n});</p>\n\n<p>// Allow empty functions.\nasync function noop() {}\n<code></code>`</p></section>	http://eslint.org/docs/rules/require-await
vars-on-top	A			Best Practices						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>vars-on-top</code> rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program.\nBy default variable declarations are always moved (“hoisted”) invisibly to the top of their containing scope by the JavaScript interpreter.\nThis rule forces the programmer to represent that behaviour by manually moving the variable declaration to the top of its containing scope.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to keep all variable declarations in the leading series of statements.\nAllowing multiple declarations helps promote maintainability and is thus allowed.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint vars-on-top: &quot;error&quot;</em>/</p>\n\n<p>// Variable declarations in a block:\nfunction doSomething() {\n    var first;\n    if (true) {\n        first = true;\n    }\n    var second;\n}</p>\n\n<p>// Variable declaration in for initializer:\nfunction doSomething() {\n    for (var i=0; i&lt;10; i++) {}\n}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint vars-on-top: &quot;error&quot;</em>/</p>\n\n<p>// Variables after other statements:\nf();\nvar a;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint vars-on-top: &quot;error&quot;</em>/</p>\n\n<p>function doSomething() {\n    var first;\n    var second; //multiple declarations are allowed at the top\n    if (true) {\n        first = true;\n    }\n}</p>\n\n<p>function doSomething() {\n    var i;\n    for (i=0; i&lt;10; i++) {}\n}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint vars-on-top: &quot;error&quot;</em>/</p>\n\n<p>var a;\nf();\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint vars-on-top: &quot;error&quot;</em>/</p>\n\n<p>// Directives may precede variable declarations.\n&quot;use strict&quot;;\nvar a;\nf();</p>\n\n<p>// Comments can describe variables.\nfunction doSomething() {\n    // this is the first var.\n    var first;\n    // this is the second var.\n    var second\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/vars-on-top
wrap-iife	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>You can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.</p>\n\n<p><code></code>`js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();</p>\n\n<p>// function declaration must be wrapped\nfunction () { /<em> side effects </em>/ }(); // SyntaxError\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires all immediately-invoked function expressions to be wrapped in parentheses.</p></section>	http://eslint.org/docs/rules/wrap-iife
yoda	A			Best Practices\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Yoda conditions are so named because the literal value of the condition comes first while the variable comes second. For example, the following is a Yoda condition:</p>\n\n<p><code>js\nif (&quot;red&quot; === color) {\n    // ...\n}\n</code></p>\n\n<p>This is called a Yoda condition because it reads as, &quot;if red equals the color&quot;, similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:</p>\n\n<p><code>js\nif (color === &quot;red&quot;) {\n    // ...\n}\n</code></p>\n\n<p>This typically reads, &quot;if the color equals red&quot;, which is arguably a more natural way to describe the comparison.</p>\n\n<p>Proponents of Yoda conditions highlight that it is impossible to mistakenly use <code>=</code> instead of <code>==</code> because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.</p>\n\n<p>Opponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of <code>=</code> instead of <code>==</code> (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn&#39;t outweigh the readability hit the code takes while using Yoda conditions.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce consistent style of conditions which compare a variable to a literal value.</p></section>	http://eslint.org/docs/rules/yoda
strict	A			Strict Mode\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>A strict mode directive is a <code>&quot;use strict&quot;</code> literal at the beginning of a script or function body. It enables strict mode semantics.</p>\n\n<p>When a directive occurs in global scope, strict mode applies to the entire script:</p>\n\n<p><code></code>`js\n&quot;use strict&quot;;</p>\n\n<p>// strict mode</p>\n\n<p>function foo() {\n    // strict mode\n}\n<code></code>`</p>\n\n<p>When a directive occurs at the beginning of a function body, strict mode applies only to that function, including all contained functions:</p>\n\n<p><code></code>`js\nfunction foo() {\n    &quot;use strict&quot;;\n    // strict mode\n}</p>\n\n<p>function foo2() {\n    // not strict mode\n};</p>\n\n<p>(function() {\n    &quot;use strict&quot;;\n    function bar() {\n        // strict mode\n    }\n}());\n<code></code>`</p>\n\n<p>In the <strong>CommonJS</strong> module system, a hidden function wraps each module and limits the scope of a &quot;global&quot; strict mode directive.</p>\n\n<p>In <strong>ECMAScript</strong> modules, which always have strict mode semantics, the directives are unnecessary.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires or disallows strict mode directives.</p>\n\n<p>This rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as <a href="../user-guide/configuring#specifying-parser-options">parser options</a>:</p>\n\n<ul><li><code>&quot;sourceType&quot;: &quot;module&quot;</code> that is, files are <strong>ECMAScript</strong> modules</li><li><code>&quot;impliedStrict&quot;: true</code> property in the <code>ecmaFeatures</code> object</li></ul>\n\n<p>This rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in <strong>ECMAScript 2016</strong> and later. See the examples of the <a href="#function">function</a> option.</p></section>	http://eslint.org/docs/rules/strict
init-declarations	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement. For example, in the following code, <code>foo</code> is initialized during declaration, while <code>bar</code> is initialized later.</p>\n\n<p><code></code>`js\nvar foo = 1;\nvar bar;</p>\n\n<p>if (foo) {\n    bar = 1;\n} else {\n    bar = 2;\n}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, <code>foo</code> is initialized during declaration, while <code>bar</code> is not.</p>\n\n<p><code></code>`js\nvar foo = 1;\nvar bar;</p>\n\n<p>bar = 2;\n<code></code>`</p>\n\n<p>This rule aims to bring consistency to variable initializations and declarations.</p></section>	http://eslint.org/docs/rules/init-declarations
no-catch-shadow	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In IE 8 and earlier, the catch clause parameter can overwrite the value of a variable in the outer scope, if that variable has the same name as the catch clause parameter.</p>\n\n<p><code></code>`js\nvar err = &quot;x&quot;;</p>\n\n<p>try {\n    throw &quot;problem&quot;;\n} catch (err) {</p>\n\n<p>}</p>\n\n<p>console.log(err)    // err is &#39;problem&#39;, not &#39;x&#39;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing unexpected behavior in your program that may arise from a bug in IE 8 and earlier, in which the catch clause parameter can leak into outer scopes. This rule will warn whenever it encounters a catch clause parameter that has the same name as a variable in an outer scope.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-catch-shadow: &quot;error&quot;</em>/</p>\n\n<p>var err = &quot;x&quot;;</p>\n\n<p>try {\n    throw &quot;problem&quot;;\n} catch (err) {</p>\n\n<p>}</p>\n\n<p>function err() {\n    // ...\n};</p>\n\n<p>try {\n    throw &quot;problem&quot;;\n} catch (err) {</p>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-catch-shadow: &quot;error&quot;</em>/</p>\n\n<p>var err = &quot;x&quot;;</p>\n\n<p>try {\n    throw &quot;problem&quot;;\n} catch (e) {</p>\n\n<p>}</p>\n\n<p>function err() {\n    // ...\n};</p>\n\n<p>try {\n    throw &quot;problem&quot;;\n} catch (e) {</p>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-catch-shadow
no-delete-var	A			Variables\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The purpose of the <code>delete</code> operator is to remove a property from an object. Using the <code>delete</code> operator on a variable might lead to unexpected behavior.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows the use of the <code>delete</code> operator on variables.</p>\n\n<p>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-delete-var: &quot;error&quot;</em>/</p>\n\n<p>var x;\ndelete x;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-delete-var
no-label-var	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><h2>Rule Details</h2>\n\n<p>This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-label-var: &quot;error&quot;</em>/</p>\n\n<p>var x = foo;\nfunction bar() {\nx:\n  for (;;) {\n    break x;\n  }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-label-var: &quot;error&quot;</em>/</p>\n\n<p>// The variable that has the same name as the label is not in scope.</p>\n\n<p>function foo() {\n  var q = t;\n}</p>\n\n<p>function bar() {\nq:\n  for(;;) {\n    break q;\n  }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-label-var
no-restricted-globals	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Disallowing usage of specific global variables can be useful if you want to allow a set of global\nvariables by enabling an environment, but still want to disallow some of those.</p>\n\n<p>For instance, early Internet Explorer versions exposed the current DOM event as a global variable\n<code>event</code>, but using this variable has been considered as a bad practice for a long time. Restricting\nthis will make sure this variable isn&#39;t used in browser code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule allows you to specify global variable names that you don&#39;t want to use in your application.</p></section>	http://eslint.org/docs/rules/no-restricted-globals
no-shadow-restricted-names	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>ES5 §15.1.1 Value Properties of the Global Object (<code>NaN</code>, <code>Infinity</code>, <code>undefined</code>) as well as strict mode restricted identifiers <code>eval</code> and <code>arguments</code> are considered to be restricted names in JavaScript. Defining them to mean something else can have unintended consequences and confuse others reading the code. For example, there&#39;s nothing prevent you from writing:</p>\n\n<p><code>js\nvar undefined = &quot;foo&quot;;\n</code></p>\n\n<p>Then any code used within the same scope would not get the global <code>undefined</code>, but rather the local version with a very different meaning.</p>\n\n<h2>Rule Details</h2>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-shadow-restricted-names: &quot;error&quot;</em>/</p>\n\n<p>function NaN(){}</p>\n\n<p>!function(Infinity){};</p>\n\n<p>var undefined;</p>\n\n<p>try {} catch(eval){}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-shadow-restricted-names: &quot;error&quot;</em>/</p>\n\n<p>var Object;</p>\n\n<p>function f(a, b){}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-shadow-restricted-names
no-shadow	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</p>\n\n<p><code>js\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n</code></p>\n\n<p>In this case, the variable <code>a</code> inside of <code>b()</code> is shadowing the variable <code>a</code> in the global scope. This can cause confusion while reading the code and it&#39;s impossible to access the global variable.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate shadowed variable declarations.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-shadow: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var a = 3;\nfunction b() {\n    var a = 10;\n}</p>\n\n<p>var b = function () {\n    var a = 10;\n}</p>\n\n<p>function b(a) {\n    a = 10;\n}\nb(a);</p>\n\n<p>if (true) {\n    let a = 5;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-shadow
no-undef-init	A			Variables\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>In JavaScript, a variable that is declared and not initialized to any value automatically gets the value of <code>undefined</code>. For example:</p>\n\n<p><code></code>`js\nvar foo;</p>\n\n<p>console.log(foo === undefined);     // true\n<code></code>`</p>\n\n<p>It&#39;s therefore unnecessary to initialize a variable to <code>undefined</code>, such as:</p>\n\n<p><code>js\nvar foo = undefined;\n</code></p>\n\n<p>It&#39;s considered a best practice to avoid initializing variables to <code>undefined</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate variable declarations that initialize to <code>undefined</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-undef-init: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var foo = undefined;\nlet bar = undefined;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-undef-init: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var foo;\nlet bar;\nconst baz = undefined;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-undef-init
no-undef	A			Variables\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the <code>var</code> keyword in a <code>for</code> loop initializer).</p>\n\n<h2>Rule Details</h2>\n\n<p>Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a <code>/*global ...*/</code> comment.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-undef: &quot;error&quot;</em>/</p>\n\n<p>var a = someFunction();\nb = 10;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with <code>global</code> declaration:</p>\n\n<p><code></code>`js\n/<em>global someFunction b:true</em>/\n/<em>eslint no-undef: &quot;error&quot;</em>/</p>\n\n<p>var a = someFunction();\nb = 10;\n<code></code>`</p>\n\n<p>The <code>b:true</code> syntax in <code>/*global */</code> indicates that assignment to <code>b</code> is correct.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with <code>global</code> declaration:</p>\n\n<p><code></code>`js\n/<em>global b</em>/\n/<em>eslint no-undef: &quot;error&quot;</em>/</p>\n\n<p>b = 10;\n<code></code>`</p>\n\n<p>By default, variables declared in <code>/*global */</code> are read-only, therefore assignment is incorrect.</p></section>	http://eslint.org/docs/rules/no-undef
no-undefined	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>undefined</code> variable is unique in JavaScript because it is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of <code>undefined</code>. While ECMAScript 5 disallows overwriting <code>undefined</code>, it&#39;s still possible to shadow <code>undefined</code>, such as:</p>\n\n<p><code></code>`js\nfunction doSomething(data) {\n    var undefined = &quot;hi&quot;;</p>\n\n<pre><code>// doesn&#39;t do what you think it does\nif (data === undefined) {\n    // ...\n}</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>This represents a problem for <code>undefined</code> that doesn&#39;t exist for <code>null</code>, which is a keyword and primitive value that can neither be overwritten nor shadowed.</p>\n\n<p>All uninitialized variables automatically get the value of <code>undefined</code>:</p>\n\n<p><code></code>`js\nvar foo;</p>\n\n<p>console.log(foo === undefined);     // true (assuming no shadowing)\n<code></code>`</p>\n\n<p>For this reason, it&#39;s not necessary to explicitly initialize a variable to <code>undefined</code>.</p>\n\n<p>Taking all of this into account, some style guides forbid the use of <code>undefined</code>, recommending instead:</p>\n\n<ul><li>Variables that should be <code>undefined</code> are simply left uninitialized.</li><li>Checking if a value is <code>undefined</code> should be done with <code>typeof</code>.</li><li>Using the <code>void</code> operator to generate the value of <code>undefined</code> if necessary.</li></ul>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate the use of <code>undefined</code>, and as such, generates a warning whenever it is used.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-undefined: &quot;error&quot;</em>/</p>\n\n<p>var foo = undefined;</p>\n\n<p>var undefined = &quot;foo&quot;;</p>\n\n<p>if (foo === undefined) {\n    // ...\n}</p>\n\n<p>function foo(undefined) {\n    // ...\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-undefined: &quot;error&quot;</em>/</p>\n\n<p>var foo = void 0;</p>\n\n<p>var Undefined = &quot;foo&quot;;</p>\n\n<p>if (typeof foo === &quot;undefined&quot;) {\n    // ...\n}</p>\n\n<p>global.undefined = &quot;foo&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-undefined
no-unused-vars	A			Variables\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at eliminating unused variables, functions, and parameters of functions.</p>\n\n<p>A variable is considered to be used if any of the following are true:</p>\n\n<ul><li>It represents a function that is called (<code>doSomething()</code>)</li><li>It is read (<code>var y = x</code>)</li><li>It is passed into a function as an argument (<code>doSomething(x)</code>)</li><li>It is read inside of a function that is passed to another function (<code>doSomething(function() { foo(); })</code>)</li></ul>\n\n<p>A variable is <em>not</em> considered to be used if it is only ever assigned to (<code>var x = 5</code>) or declared.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unused-vars: &quot;error&quot;</em>/\n/*global some<em>unused</em>var*/</p>\n\n<p>// It checks variables you have defined as global\nsome<em>unused</em>var = 42;</p>\n\n<p>var x;</p>\n\n<p>// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;</p>\n\n<p>// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;</p>\n\n<p>// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();</p>\n\n<p>// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n &lt; 2) return 1;\n    return n * fact(n - 1);\n}</p>\n\n<p>// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unused-vars: &quot;error&quot;</em>/</p>\n\n<p>var x = 10;\nalert(x);</p>\n\n<p>// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));</p>\n\n<p>(function(foo) {\n    return foo;\n})();</p>\n\n<p>var myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);</p>\n\n<p>// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n<code></code>`</p>\n\n<h3>exported</h3>\n\n<p>In environments outside of CommonJS or ECMAScript modules, you may use <code>var</code> to create a global variable that may be used by other scripts. You can use the <code>/* exported variableName */</code> comment block to indicate that this variable is being exported and therefore should not be considered unused.</p>\n\n<p>Note that <code>/* exported */</code> has no effect for any of the following:</p>\n\n<ul><li>when the environment is <code>node</code> or <code>commonjs</code></li><li>when <code>parserOptions.sourceType</code> is <code>module</code></li><li>when <code>ecmaFeatures.globalReturn</code> is <code>true</code></li></ul>\n\n<p>The line comment <code>// exported variableName</code> will not work as <code>exported</code> is not line-specific.</p>\n\n<p>Examples of <strong>correct</strong> code for <code>/* exported variableName */</code> operation:</p>\n\n<p><code></code>`js\n/<em> exported global_var </em>/</p>\n\n<p>var global_var = 42;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unused-vars
no-use-before-define	A			Variables						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it&#39;s possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.</p>\n\n<p>In ES6, block-level bindings (<code>let</code> and <code>const</code>) introduce a &quot;temporal dead zone&quot; where a <code>ReferenceError</code> will be thrown with any attempt to access the variable before its declaration.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule will warn when it encounters a reference to an identifier that has not yet been declared.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-use-before-define: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>alert(a);\nvar a = 10;</p>\n\n<p>f();\nfunction f() {}</p>\n\n<p>function g() {\n    return b;\n}\nvar b = 1;</p>\n\n<p>// With blockBindings: true\n{\n    alert(c);\n    let c = 1;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-use-before-define: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var a;\na = 10;\nalert(a);</p>\n\n<p>function f() {}\nf(1);</p>\n\n<p>var b = 1;\nfunction g() {\n    return b;\n}</p>\n\n<p>// With blockBindings: true\n{\n    let C;\n    c++;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-use-before-define
callback-return	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The callback pattern is at the heart of most I/O and event-driven programming\n in JavaScript.</p>\n\n<p><code>js\nfunction doSomething(err, callback) {\n    if (err) {\n        return callback(err);\n    }\n    callback();\n}\n</code></p>\n\n<p>To prevent calling the callback multiple times it is important to <code>return</code> anytime the callback is triggered outside\n of the main function body. Neglecting this technique often leads to issues where you do something more than once.\n For example, in the case of an HTTP request, you may try to send HTTP headers more than once leading Node.js to <code>throw</code>\n a <code>Can&#39;t render headers after they are sent to the client.</code> error.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at ensuring that callbacks used outside of the main function block are always part-of or immediately\npreceding a <code>return</code> statement. This rule decides what is a callback based on the name of the function being called.</p></section>	http://eslint.org/docs/rules/callback-return
global-require	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In Node.js, module dependencies are included using the <code>require()</code> function, such as:</p>\n\n<p><code>js\nvar fs = require(&quot;fs&quot;);\n</code></p>\n\n<p>While <code>require()</code> may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it&#39;s arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:</p>\n\n<p><code></code>`js\nfunction foo() {</p>\n\n<pre><code>if (condition) {\n    var fs = require(&quot;fs&quot;);\n}</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Since <code>require()</code> does a synchronous load, it can cause performance problems when used in other locations.</p>\n\n<p>Further, ES6 modules mandate that <code>import</code> and <code>export</code> statements can only occur in the top level of the module&#39;s body.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires all calls to <code>require()</code> to be at the top level of the module, similar to ES6 <code>import</code> and <code>export</code> statements, which also can occur only at the top level.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint global-require: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require(&#39;fs&#39;);\n    fs.readFile(filename, callback)\n}</p>\n\n<p>// conditional requires like this are also not allowed\nif (DEBUG) { require(&#39;debug&#39;); }</p>\n\n<p>// a require() in a switch statement is also flagged\nswitch(x) { case &#39;1&#39;: require(&#39;1&#39;); break; }</p>\n\n<p>// you may not require() inside an arrow function body\nvar getModule = (name) =&gt; require(name);</p>\n\n<p>// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }</p>\n\n<p>// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint global-require: &quot;error&quot;</em>/</p>\n\n<p>// all these variations of require() are ok\nrequire(&#39;x&#39;);\nvar y = require(&#39;y&#39;);\nvar z;\nz = require(&#39;z&#39;).initialize();</p>\n\n<p>// requiring a module and using it in a function is ok\nvar fs = require(&#39;fs&#39;);\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}</p>\n\n<p>// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require(&#39;dev-logger&#39;) : require(&#39;logger&#39;);</p>\n\n<p>// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(&quot;x&quot;),\n    z = require(&quot;z&quot;);\n<code></code>`</p></section>	http://eslint.org/docs/rules/global-require
handle-callback-err	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern.\nThis pattern expects an <code>Error</code> object or <code>null</code> as the first argument of the callback.\nForgetting to handle these errors can lead to some really strange behavior in your application.</p>\n\n<p><code>js\nfunction loadData (err, data) {\n    doSomething(); // forgot to handle error\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule expects that when you&#39;re using the callback pattern in Node.js you&#39;ll handle the error.</p></section>	http://eslint.org/docs/rules/handle-callback-err
no-mixed-requires	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In the Node.js community it is often customary to separate initializations with calls to <code>require</code> modules from other variable declarations, sometimes also grouping them by the type of module. This rule helps you enforce this convention.</p>\n\n<h2>Rule Details</h2>\n\n<p>When this rule is enabled, each <code>var</code> statement must satisfy the following conditions:</p>\n\n<ul><li>either none or all variable declarations must be require declarations (default)</li><li>all require declarations must be of the same type (grouping)</li></ul>\n\n<p>This rule distinguishes between six kinds of variable declaration types:</p>\n\n<ul><li><code>core</code>: declaration of a required [core module][1]</li><li><code>file</code>: declaration of a required [file module][2]</li><li><code>module</code>: declaration of a required module from the [node_modules folder][3]</li><li><code>computed</code>: declaration of a required module whose type could not be determined (either because it is computed or because require was called without an argument)</li><li><code>uninitialized</code>: a declaration that is not initialized</li><li><code>other</code>: any other kind of declaration</li></ul>\n\n<p>In this document, the first four types are summed up under the term <em>require declaration</em>.</p>\n\n<p><code>js\nvar fs = require(&#39;fs&#39;),        // &quot;core&quot;     \\n    async = require(&#39;async&#39;),  // &quot;module&quot;   |- these are &quot;require declaration&quot;s\n    foo = require(&#39;./foo&#39;),    // &quot;file&quot;     |\n    bar = require(getName()),  // &quot;computed&quot; /\n    baz = 42,                  // &quot;other&quot;\n    bam;                       // &quot;uninitialized&quot;\n</code></p></section>	http://eslint.org/docs/rules/no-mixed-requires
no-new-require	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>require</code> function is used to include modules that exist in separate files, such as:</p>\n\n<p><code>js\nvar appHeader = require(&#39;app-header&#39;);\n</code></p>\n\n<p>Some modules return a constructor which can potentially lead to code such as:</p>\n\n<p><code>js\nvar appHeader = new require(&#39;app-header&#39;);\n</code></p>\n\n<p>Unfortunately, this introduces a high potential for confusion since the code author likely meant to write:</p>\n\n<p><code>js\nvar appHeader = new (require(&#39;app-header&#39;));\n</code></p>\n\n<p>For this reason, it is usually best to disallow this particular expression.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to eliminate use of the <code>new require</code> expression.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-require: &quot;error&quot;</em>/</p>\n\n<p>var appHeader = new require(&#39;app-header&#39;);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-require: &quot;error&quot;</em>/</p>\n\n<p>var AppHeader = require(&#39;app-header&#39;);\nvar appHeader = new AppHeader();\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-new-require
no-path-concat	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In Node.js, the <code>__dirname</code> and <code>__filename</code> global variables contain the directory path and the file path of the currently executing script file, respectively. Sometimes, developers try to use these variables to create paths to other files, such as:</p>\n\n<p><code>js\nvar fullPath = __dirname + &quot;/foo.js&quot;;\n</code></p>\n\n<p>However, there are a few problems with this. First, you can&#39;t be sure what type of system the script is running on. Node.js can be run on any computer, including Windows, which uses a different path separator. It&#39;s very easy, therefore, to create an invalid path using string concatenation and assuming Unix-style separators. There&#39;s also the possibility of having double separators, or otherwise ending up with an invalid path.</p>\n\n<p>In order to avoid any confusion as to how to create the correct path, Node.js provides the <code>path</code> module. This module uses system-specific information to always return the correct value. So you can rewrite the previous example as:</p>\n\n<p><code>js\nvar fullPath = path.join(__dirname, &quot;foo.js&quot;);\n</code></p>\n\n<p>This example doesn&#39;t need to include separators as <code>path.join()</code> will do it in the most appropriate manner. Alternately, you can use <code>path.resolve()</code> to retrieve the fully-qualified path:</p>\n\n<p><code>js\nvar fullPath = path.resolve(__dirname, &quot;foo.js&quot;);\n</code></p>\n\n<p>Both <code>path.join()</code> and <code>path.resolve()</code> are suitable replacements for string concatenation wherever file or directory paths are being created.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to prevent string concatenation of directory paths in Node.js</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-path-concat: &quot;error&quot;</em>/</p>\n\n<p>var fullPath = __dirname + &quot;/foo.js&quot;;</p>\n\n<p>var fullPath = __filename + &quot;/foo.js&quot;;</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-path-concat: &quot;error&quot;</em>/</p>\n\n<p>var fullPath = dirname + &quot;/foo.js&quot;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-path-concat
no-process-env	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>process.env</code> object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it&#39;s another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at discouraging use of <code>process.env</code> to avoid global dependencies. As such, it will warn whenever <code>process.env</code> is used.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-process-env: &quot;error&quot;</em>/</p>\n\n<p>if(process.env.NODE_ENV === &quot;development&quot;) {\n    //...\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-process-env: &quot;error&quot;</em>/</p>\n\n<p>var config = require(&quot;./config&quot;);</p>\n\n<p>if(config.env === &quot;development&quot;) {\n    //...\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-process-env
no-process-exit	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>process.exit()</code> method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</p>\n\n<p><code>js\nif (somethingBadHappened) {\n    console.error(&quot;Something bad happened!&quot;);\n    process.exit(1);\n}\n</code></p>\n\n<p>This code could appear in any module and will stop the entire application when <code>somethingBadHappened</code> is truthy. This doesn&#39;t give the application any chance to respond to the error. It&#39;s usually better to throw an error and allow the application to handle it appropriately:</p>\n\n<p><code>js\nif (somethingBadHappened) {\n    throw new Error(&quot;Something bad happened!&quot;);\n}\n</code></p>\n\n<p>By throwing an error in this way, other parts of the application have an opportunity to handle the error rather than stopping the application altogether. If the error bubbles all the way up to the process without being handled, then the process will exit and a non-zero exit code will returned, so the end result is the same.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to prevent the use of <code>process.exit()</code> in Node.js JavaScript. As such, it warns whenever <code>process.exit()</code> is found in code.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-process-exit: &quot;error&quot;</em>/</p>\n\n<p>process.exit(1);\nprocess.exit(0);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-process-exit: &quot;error&quot;</em>/</p>\n\n<p>Process.exit();\nvar exit = process.exit;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-process-exit
no-restricted-modules	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Disallowing usage of specific Node.js modules can be useful if you want to control the available methods, a developer can\nuse, to implement a feature.</p>\n\n<p>This way you can block usage of the <code>fs</code> module if you want to disallow file system access.\nBlocking the <code>os</code> module can be useful if you don&#39;t want to allow any operating system specific code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule allows you to specify modules that you don&#39;t want to use in your application.</p></section>	http://eslint.org/docs/rules/no-restricted-modules
no-sync	A			Node.js and CommonJS						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In Node.js, most I/O is done through asynchronous methods. However, there are often synchronous versions of the asynchronous methods. For example, <code>fs.exists()</code> and <code>fs.existsSync()</code>. In some contexts, using synchronous operations is okay (if, as with ESLint, you are writing a command line utility). However, in other contexts the use of synchronous operations is considered a bad practice that should be avoided. For example, if you are running a high-travel web server on Node.js, you should consider carefully if you want to allow any synchronous operations that could lock up the server.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing synchronous methods from being called in Node.js. It looks specifically for the method suffix &quot;<code>Sync</code>&quot; (as is the convention with Node.js operations).</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sync: &quot;error&quot;</em>/</p>\n\n<p>fs.existsSync(somePath);</p>\n\n<p>var contents = fs.readFileSync(somePath).toString();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-sync: &quot;error&quot;</em>/</p>\n\n<p>obj.sync();</p>\n\n<p>async(function() {\n    // ...\n});\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-sync
array-bracket-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>A number of style guides require or disallow spaces between array brackets and other tokens. This rule\napplies to both array literals and destructuring assignments (ECMAScript 6).</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>var arr = [ &#39;foo&#39;, &#39;bar&#39; ];\nvar [ x, y ] = z;</p>\n\n<p>var arr = [&#39;foo&#39;, &#39;bar&#39;];\nvar [x,y] = z;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing inside array brackets.</p></section>	http://eslint.org/docs/rules/array-bracket-spacing
block-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing inside single-line blocks.</p></section>	http://eslint.org/docs/rules/block-spacing
brace-style	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Brace style is closely related to <a href="http://en.wikipedia.org/wiki/Indent_style">indent style</a> in programming and describes the placement of braces relative to their control statement and body. There are probably a dozen, if not more, brace styles in the world.</p>\n\n<p>The <em>one true brace style</em> is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</p>\n\n<p><code>js\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n</code></p>\n\n<p>One common variant of one true brace style is called Stroustrup, in which the <code>else</code> statements in an <code>if-else</code> construct, as well as <code>catch</code> and <code>finally</code>, must be on its own line after the preceding closing brace. For example:</p>\n\n<p><code>js\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n</code></p>\n\n<p>Another style is called <a href="https://en.wikipedia.org/wiki/Indent_style#Allman_style">Allman</a>, in which all the braces are expected to be on their own lines without any extra indentation. For example:</p>\n\n<p><code>js\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n</code></p>\n\n<p>While no style is considered better than the other, most developers agree that having a consistent style throughout a project is important for its long-term maintainability.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent brace style for blocks.</p></section>	http://eslint.org/docs/rules/brace-style
camelcase	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When it comes to naming variables, style guides generally fall into one of two camps: camelcase (<code>variableName</code>) and underscores (<code>variable_name</code>). This rule focuses on using the camelcase approach. If your style guide calls for camelcasing your variable names, then this rule is for you!</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule looks for any underscores (<code>_</code>) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 <code>import</code> statements, this rule only targets the name of the variable that will be imported into the local module scope.</p></section>	http://eslint.org/docs/rules/camelcase
capitalized-comments	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Comments are useful for leaving information for future developers. In order for that information to be useful and not distracting, it is sometimes desirable for comments to follow a particular style. One element of comment formatting styles is whether the first word of a comment should be capitalized or lowercase.</p>\n\n<p>In general, no comment style is any more or less valid than any others, but many developers would agree that a consistent style can improve a project&#39;s maintainability.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.</p>\n\n<p>By default, this rule will require a non-lowercase letter at the beginning of comments.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;] </em>/</p>\n\n<p>// lowercase comment</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js</p>\n\n<p>// Capitalized comment</p>\n\n<p>// 1. Non-letter at beginning of comment</p>\n\n<p>// 丈 Non-Latin character at beginning of comment</p>\n\n<p>/<em> eslint semi:off </em>/\n/<em> eslint-env node </em>/\n/<em> eslint-disable </em>/\n/<em> eslint-enable </em>/\n/<em> istanbul ignore next </em>/\n/<em> jscs:enable </em>/\n/<em> jshint asi:true </em>/\n/<em> global foo </em>/\n/<em> globals foo </em>/\n/<em> exported myVar </em>/\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com</p>\n\n<p><code></code>`</p>\n\n<h3>Options</h3>\n\n<p>This rule has two options: a string value <code>&quot;always&quot;</code> or <code>&quot;never&quot;</code> which determines whether capitalization of the first word of a comment should be required or forbidden, and optionally an object containing more configuration parameters for the rule.</p>\n\n<p>Here are the supported object options:</p>\n\n<ul><li><code>ignorePattern</code>: A string representing a regular expression pattern of words that should be ignored by this rule. If the first word of a comment matches the pattern, this rule will not report that comment.<ul><li>Note that the following words are always ignored by this rule: <code>[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]</code>.</li></ul></li><li><code>ignoreInlineComments</code>: If this is <code>true</code>, the rule will not report on comments in the middle of code. By default, this is <code>false</code>.</li><li><code>ignoreConsecutiveComments</code>: If this is <code>true</code>, the rule will not report on a comment which violates the rule, as long as the comment immediately follows another comment. By default, this is <code>false</code>.</li></ul>\n\n<p>Here is an example configuration:</p>\n\n<p><code>json\n{\n    &quot;capitalized-comments&quot;: [\n        &quot;error&quot;,\n        &quot;always&quot;,\n        {\n            &quot;ignorePattern&quot;: &quot;pragma|ignored&quot;,\n            &quot;ignoreInlineComments&quot;: true\n        }\n    ]\n}\n</code></p>\n\n<h4><code>&quot;always&quot;</code></h4>\n\n<p>Using the <code>&quot;always&quot;</code> option means that this rule will report any comments which start with a lowercase letter. This is the default configuration for this rule.</p>\n\n<p>Note that configuration comments and comments which start with URLs are never reported.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;] </em>/</p>\n\n<p>// lowercase comment</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;] </em>/</p>\n\n<p>// Capitalized comment</p>\n\n<p>// 1. Non-letter at beginning of comment</p>\n\n<p>// 丈 Non-Latin character at beginning of comment</p>\n\n<p>/<em> eslint semi:off </em>/\n/<em> eslint-env node </em>/\n/<em> eslint-disable </em>/\n/<em> eslint-enable </em>/\n/<em> istanbul ignore next </em>/\n/<em> jscs:enable </em>/\n/<em> jshint asi:true </em>/\n/<em> global foo </em>/\n/<em> globals foo </em>/\n/<em> exported myVar </em>/\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com</p>\n\n<p><code></code>`</p>\n\n<h4><code>&quot;never&quot;</code></h4>\n\n<p>Using the <code>&quot;never&quot;</code> option means that this rule will report any comments which start with an uppercase letter.</p>\n\n<p>Examples of <strong>incorrect</strong> code with the <code>&quot;never&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;never&quot;] </em>/</p>\n\n<p>// Capitalized comment</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code with the <code>&quot;never&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;never&quot;] </em>/</p>\n\n<p>// lowercase comment</p>\n\n<p>// 1. Non-letter at beginning of comment</p>\n\n<p>// 丈 Non-Latin character at beginning of comment</p>\n\n<p><code></code>`</p>\n\n<h4><code>ignorePattern</code></h4>\n\n<p>The <code>ignorePattern</code> object takes a string value, which is used as a regular expression applied to the first word of a comment.</p>\n\n<p>Examples of <strong>correct</strong> code with the <code>&quot;ignorePattern&quot;</code> option set to <code>&quot;pragma&quot;</code>:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;ignorePattern&quot;: &quot;pragma&quot; }] </em>/</p>\n\n<p>function foo() {\n    /<em> pragma wrap(true) </em>/\n}</p>\n\n<p><code></code>`</p>\n\n<h4><code>ignoreInlineComments</code></h4>\n\n<p>Setting the <code>ignoreInlineComments</code> option to <code>true</code> means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</p>\n\n<p>Examples of <strong>correct</strong> code with the <code>&quot;ignoreInlineComments&quot;</code> option set to <code>true</code>:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;ignoreInlineComments&quot;: true }] </em>/</p>\n\n<p>function foo(/<em> ignored </em>/ a) {\n}</p>\n\n<p><code></code>`</p>\n\n<h4><code>ignoreConsecutiveComments</code></h4>\n\n<p>If the <code>ignoreConsecutiveComments</code> option is set to <code>true</code>, then comments which otherwise violate the rule will not be reported as long as they immediately follow another comment. This can be applied more than once.</p>\n\n<p>Examples of <strong>correct</strong> code with <code>ignoreConsecutiveComments</code> set to <code>true</code>:</p>\n\n<p><code></code>`js\n/<em> eslint capitalize-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;ignoreConsecutiveComments&quot;: true }] </em>/</p>\n\n<p>// This comment is valid since it has the correct capitalization.\n// this comment is ignored since it follows another comment,\n// and this one as well because it follows yet another comment.</p>\n\n<p>/<em> Here is a block comment which has the correct capitalization, </em>/\n/<em> but this one is ignored due to being consecutive; </em>/\n/<em>\n </em> in fact, even if any of these are multi-line, that is fine too.\n */\n<code></code>`</p>\n\n<p>Examples of <strong>incorrect</strong> code with <code>ignoreConsecutiveComments</code> set to <code>true</code>:</p>\n\n<p><code></code>`js\n/<em> eslint capitalize-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;ignoreConsecutiveComments&quot;: true }] </em>/</p>\n\n<p>// this comment is invalid, but only on this line.\n// this comment does NOT get reported, since it is a consecutive comment.\n<code></code>`</p>\n\n<h3>Using Different Options for Line and Block Comments</h3>\n\n<p>If you wish to have a different configuration for line comments and block comments, you can do so by using two different object configurations (note that the capitalization option will be enforced consistently for line and block comments):</p>\n\n<p><code>json\n{\n    &quot;capitalized-comments&quot;: [\n        &quot;error&quot;,\n        &quot;always&quot;,\n        {\n            &quot;line&quot;: {\n                &quot;ignorePattern&quot;: &quot;pragma|ignored&quot;,\n            },\n            &quot;block&quot;: {\n                &quot;ignoreInlineComments&quot;: true,\n                &quot;ignorePattern&quot;: &quot;ignored&quot;\n            }\n        }\n    ]\n}\n</code></p>\n\n<p>Examples of <strong>incorrect</strong> code with different line and block comment configuration:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;block&quot;: { &quot;ignorePattern&quot;: &quot;blockignore&quot; } }] </em>/</p>\n\n<p>// capitalized line comment, this is incorrect, blockignore does not help here\n/<em> lowercased block comment, this is incorrect too </em>/</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code with different line and block comment configuration:</p>\n\n<p><code></code>`js\n/<em> eslint capitalized-comments: [&quot;error&quot;, &quot;always&quot;, { &quot;block&quot;: { &quot;ignorePattern&quot;: &quot;blockignore&quot; } }] </em>/</p>\n\n<p>// Uppercase line comment, this is correct\n/<em> blockignore lowercase block comment, this is correct due to ignorePattern </em>/</p>\n\n<p><code></code>`</p></section>	http://eslint.org/docs/rules/capitalized-comments
comma-dangle	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Trailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.</p>\n\n<p><code>js\nvar foo = {\n    bar: &quot;baz&quot;,\n    qux: &quot;quux&quot;,\n};\n</code></p>\n\n<p>Trailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:</p>\n\n<p>Less clear:</p>\n\n<p><code>diff\n var foo = {\n-    bar: &quot;baz&quot;,\n-    qux: &quot;quux&quot;\n+    bar: &quot;baz&quot;\n };\n</code></p>\n\n<p>More clear:</p>\n\n<p><code>diff\n var foo = {\n     bar: &quot;baz&quot;,\n-    qux: &quot;quux&quot;,\n };\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent use of trailing commas in object and array literals.</p></section>	http://eslint.org/docs/rules/comma-dangle
comma-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Spacing around commas improve readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</p>\n\n<p><code>js\nvar foo = 1, bar = 2;\nvar foo = 1 ,bar = 2;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.</p>\n\n<p>This rule does not apply in an <code>ArrayExpression</code> or <code>ArrayPattern</code> in either of the following cases:</p>\n\n<ul><li>adjacent null elements</li><li>an initial null element, to avoid conflicts with the <a href="array-bracket-spacing"><code>array-bracket-spacing</code></a> rule</li></ul></section>	http://eslint.org/docs/rules/comma-spacing
comma-style	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</p>\n\n<ul><li>The standard style, in which commas are placed at the end of the current line</li><li>Comma First style, in which commas are placed at the start of the next line</li></ul>\n\n<p>One of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforce consistent comma style in array literals, object literals, and variable declarations.</p>\n\n<p>This rule does not apply in either of the following cases:</p>\n\n<ul><li>comma preceded and followed by linebreak (lone comma)</li><li>single-line array literals, object literals, and variable declarations</li></ul></section>	http://eslint.org/docs/rules/comma-style
computed-property-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>While formatting preferences are very personal, a number of style guides require\nor disallow spaces between computed properties in the following situations:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>var obj = { prop: &quot;value&quot; };\nvar a = &quot;prop&quot;;\nvar x = obj[a]; // computed property in object member expression</p>\n\n<p>var a = &quot;prop&quot;;\nvar obj = {\n  [a]: &quot;value&quot; // computed property key in object literal (ECMAScript 6)\n};\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing inside computed property brackets.</p>\n\n<p>It either requires or disallows spaces between the brackets and the values inside of them.\nThis rule does not apply to brackets that are separated from the adjacent value by a newline.</p></section>	http://eslint.org/docs/rules/computed-property-spacing
consistent-this	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>It is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks:</p>\n\n<p><code>js\nvar that = this;\njQuery(&#39;li&#39;).click(function (event) {\n    // here, &quot;this&quot; is the HTMLElement where the click event occurred\n    that.setFoo(42);\n});\n</code></p>\n\n<p>There are many commonly used aliases for <code>this</code> such as <code>that</code>, <code>self</code> or <code>me</code>. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces two things about variables with the designated alias names for <code>this</code>:</p>\n\n<ul><li>If a variable with a designated name is declared, it <em>must</em> be either initialized (in the declaration) or assigned (in the same scope as the declaration) the value <code>this</code>.</li><li>If a variable is initialized or assigned the value <code>this</code>, the name of the variable <em>must</em> be a designated alias.</li></ul></section>	http://eslint.org/docs/rules/consistent-this
eol-last	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Trailing newlines in non-empty files are a common UNIX idiom. Benefits of\ntrailing newlines include the ability to concatenate or append to files as well\nas output files to the terminal without interfering with shell prompts.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces at least one newline (or absence thereof) at the end\nof non-empty files.</p>\n\n<p>Prior to v0.16.0 this rule also enforced that there was only a single line at\nthe end of the file. If you still want this behaviour, consider enabling\n<a href="no-multiple-empty-lines">no-multiple-empty-lines</a> with <code>maxEOF</code> and/or\n<a href="no-trailing-spaces">no-trailing-spaces</a>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint eol-last: [&quot;error&quot;, &quot;always&quot;]</em>/</p>\n\n<p>function doSmth() {\n  var foo = 2;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint eol-last: [&quot;error&quot;, &quot;always&quot;]</em>/</p>\n\n<p>function doSmth() {\n  var foo = 2;\n}\n\n<code></code>`</p></section>	http://eslint.org/docs/rules/eol-last
func-call-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>When calling a function, developers may insert optional whitespace between the function&#39;s name and the parentheses that invoke it. The following pairs of function calls are equivalent:</p>\n\n<p><code></code>`js\nalert(&#39;Hello&#39;);\nalert (&#39;Hello&#39;);</p>\n\n<p>console.log(42);\nconsole.log (42);</p>\n\n<p>new Date();\nnew Date ();\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires or disallows spaces between the function name and the opening parenthesis that calls it.</p></section>	http://eslint.org/docs/rules/func-call-spacing
func-name-matching	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><h2>Rule Details</h2>\n\n<p>This rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).</p></section>	http://eslint.org/docs/rules/func-name-matching
func-names	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>A pattern that&#39;s becoming more common is to give function expressions names to aid in debugging. For example:</p>\n\n<p><code>js\nFoo.prototype.bar = function bar() {};\n</code></p>\n\n<p>Adding the second <code>bar</code> in the above example is optional.  If you leave off the function name then when the function throws an exception you are likely to get something similar to <code>anonymous function</code> in the stack trace.  If you provide the optional name for a function expression then you will get the name of the function expression in the stack trace.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule can enforce or disallow the use of named function expressions.</p></section>	http://eslint.org/docs/rules/func-names
func-style	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>There are two ways of defining functions in JavaScript: <code>function</code> declarations and <code>function</code> expressions. Declarations contain the <code>function</code> keyword first, followed by a name and then its arguments and the function body, for example:</p>\n\n<p><code>js\nfunction doSomething() {\n    // ...\n}\n</code></p>\n\n<p>Equivalent function expressions begin with the <code>var</code> keyword, followed by a name and then the function itself, such as:</p>\n\n<p><code>js\nvar doSomething = function() {\n    // ...\n};\n</code></p>\n\n<p>The primary difference between <code>function</code> declarations and <code>function expressions</code> is that declarations are <em>hoisted</em> to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</p>\n\n<p><code></code>`js\ndoSomething();</p>\n\n<p>function doSomething() {\n    // ...\n}\n<code></code>`</p>\n\n<p>Although this code might seem like an error, it actually works fine because JavaScript engines hoist the <code>function</code> declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.</p>\n\n<p>For <code>function</code> expressions, you must define the function before it is used, otherwise it causes an error. Example:</p>\n\n<p><code></code>`js\ndoSomething();  // error!</p>\n\n<p>var doSomething = function() {\n    // ...\n};\n<code></code>`</p>\n\n<p>In this case, <code>doSomething()</code> is undefined at the time of invocation and so causes a runtime error.</p>\n\n<p>Due to these different behaviors, it is common to have guidelines as to which style of function should be used. There is really no correct or incorrect choice here, it is just a preference.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a particular type of <code>function</code> style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.</p></section>	http://eslint.org/docs/rules/func-style
id-blacklist	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><blockquote><p>&quot;There are only two hard things in Computer Science: cache invalidation and naming things.&quot; — Phil Karlton</p></blockquote>\n\n<p>Bad names can lead to hard-to-decipher code. Generic names, such as <code>data</code>, don&#39;t infer much about the code and the values it receives. This rule allows you to configure a blacklist of bad identifier names, that you don&#39;t want to see in your code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows specified identifiers in assignments and <code>function</code> definitions.</p>\n\n<p>This rule will catch blacklisted identifiers that are:</p>\n\n<ul><li>variable declarations</li><li>function declarations</li><li>object properties assigned to during object creation</li></ul>\n\n<p>It will not catch blacklisted identifiers that are:</p>\n\n<ul><li>function calls (so you can still use functions you do not have control over)</li><li>object properties (so you can still use objects you do not have control over)</li></ul></section>	http://eslint.org/docs/rules/id-blacklist
id-length	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Very short identifier names like <code>e</code>, <code>x</code>, <code>_t</code> or very long ones like <code>hashGeneratorResultOutputContainerObject</code> can make code harder to read and potentially less maintainable. To prevent this, one may enforce a minimum and/or maximum identifier length.</p>\n\n<p><code>js\nvar x = 5; // too short; difficult to understand its purpose without context\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a minimum and/or maximum identifier length convention.</p></section>	http://eslint.org/docs/rules/id-length
id-match	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><blockquote><p>&quot;There are only two hard things in Computer Science: cache invalidation and naming things.&quot; — Phil Karlton</p></blockquote>\n\n<p>Naming things consistently in a project is an often underestimated aspect of code creation.\nWhen done correctly, it can save your team hours of unnecessary head scratching and misdirections.\nThis rule allows you to precisely define and enforce the variables and function names on your team should use.\nNo more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires identifiers in assignments and <code>function</code> definitions to match a specified regular expression.</p></section>	http://eslint.org/docs/rules/id-match
indent	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>There are several common guidelines which require specific indentation of nested blocks and statements, like:</p>\n\n<p><code>js\nfunction hello(indentSize, type) {\n    if (indentSize === 4 &amp;&amp; type !== &#39;tab&#39;) {\n        console.log(&#39;Each next indentation will increase on 4 spaces&#39;);\n    }\n}\n</code></p>\n\n<p>These are the most common scenarios recommended in different style guides:</p>\n\n<ul><li>Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix</li><li>Tabs: jQuery</li><li>Four spaces: Crockford</li></ul>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a consistent indentation style. The default style is <code>4 spaces</code>.</p></section>	http://eslint.org/docs/rules/indent
jsx-quotes	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JSX attribute values can contain string literals, which are delimited with single or double quotes.</p>\n\n<p><code>xml\n&lt;a b=&#39;c&#39; /&gt;\n&lt;a b=&quot;c&quot; /&gt;\n</code></p>\n\n<p>Unlike string literals in JavaScript, string literals within JSX attributes can’t contain escaped quotes.\nIf you want to have e.g. a double quote within a JSX attribute value, you have to use single quotes as string delimiter.</p>\n\n<p><code>xml\n&lt;a b=&quot;&#39;&quot; /&gt;\n&lt;a b=&#39;&quot;&#39; /&gt;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces the consistent use of either double or single quotes in JSX attributes.</p></section>	http://eslint.org/docs/rules/jsx-quotes
key-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>This rule enforces spacing around the colon in object literal properties. It can verify each property individually, or it can ensure horizontal alignment of adjacent properties in an object literal.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing between keys and values in object literal properties. In the case of long lines, it is acceptable to add a new line wherever whitespace is allowed.</p></section>	http://eslint.org/docs/rules/key-spacing
keyword-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Keywords are syntax elements of JavaScript, such as <code>function</code> and <code>if</code>.\nThese identifiers have special meaning to the language and so often appear in a different color in code editors.\nAs an important part of the language, style guides often refer to the spacing that should be used around keywords.\nFor example, you might have a style guide that says keywords should be always surrounded by spaces, which would mean <code>if-else</code> statements must look like this:</p>\n\n<p><code>js\nif (foo) {\n    // ...\n} else {\n    // ...\n}\n</code></p>\n\n<p>Of course, you could also have a style guide that disallows spaces around keywords.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent spacing around keywords and keyword-like tokens: <code>as</code> (in module declarations), <code>async</code> (of async functions), <code>await</code> (of await expressions), <code>break</code>, <code>case</code>, <code>catch</code>, <code>class</code>, <code>const</code>, <code>continue</code>, <code>debugger</code>, <code>default</code>, <code>delete</code>, <code>do</code>, <code>else</code>, <code>export</code>, <code>extends</code>, <code>finally</code>, <code>for</code>, <code>from</code> (in module declarations), <code>function</code>, <code>get</code> (of getters), <code>if</code>, <code>import</code>, <code>in</code>, <code>instanceof</code>, <code>let</code>, <code>new</code>, <code>of</code> (in for-of statements), <code>return</code>, <code>set</code> (of setters), <code>static</code>, <code>super</code>, <code>switch</code>, <code>this</code>, <code>throw</code>, <code>try</code>, <code>typeof</code>, <code>var</code>, <code>void</code>, <code>while</code>, <code>with</code>, and <code>yield</code>. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.</p></section>	http://eslint.org/docs/rules/keyword-spacing
line-comment-position	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Line comments can be positioned above or beside code. This rule helps teams maintain a consistent style.</p>\n\n<p><code>js\n// above comment\nvar foo = &quot;bar&quot;;  // beside comment\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: <code>eslint</code>, <code>jshint</code>, <code>jslint</code>, <code>istanbul</code>, <code>global</code>, <code>exported</code>, <code>jscs</code>, <code>falls through</code>.</p></section>	http://eslint.org/docs/rules/line-comment-position
linebreak-style	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>When developing with a lot of people all having different editors, VCS applications and operating systems it may occur that\ndifferent line endings are written by either of the mentioned (might especially happen when using the windows and mac versions of SourceTree together).</p>\n\n<p>The linebreaks (new lines) used in windows operating system are usually <em>carriage returns</em> (CR) followed by a <em>line feed</em> (LF) making it a <em>carriage return line feed</em> (CRLF)\nwhereas Linux and Unix use a simple <em>line feed</em> (LF). The corresponding <em>control sequences</em> are <code>&quot;\n&quot;</code> (for LF) and <code>&quot;\r\n&quot;</code> for (CRLF).</p>\n\n<p>Many versioning systems (like git and subversion) can automatically ensure the correct ending. However to cover all contingencies, you can activate this rule.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.</p>\n\n<h3>Options</h3>\n\n<p>This rule has a string option:</p>\n\n<ul><li><code>&quot;unix&quot;</code> (default) enforces the usage of Unix line endings: <code>\n</code> for LF.</li><li><code>&quot;windows&quot;</code> enforces the usage of Windows line endings: <code>\r\n</code> for CRLF.</li></ul>\n\n<h3>unix</h3>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with the default <code>&quot;unix&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint linebreak-style: [&quot;error&quot;, &quot;unix&quot;]</em>/</p>\n\n<p>var a = &#39;a&#39;; // \r\n</p>\n\n<p><code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with the default <code>&quot;unix&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint linebreak-style: [&quot;error&quot;, &quot;unix&quot;]</em>/</p>\n\n<p>var a = &#39;a&#39;, // \n\n    b = &#39;b&#39;; // \n\n// \n\nfunction foo(params) { // \n\n    // do stuff \n\n}// \n\n<code></code>`</p>\n\n<h3>windows</h3>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with the <code>&quot;windows&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint linebreak-style: [&quot;error&quot;, &quot;windows&quot;]</em>/</p>\n\n<p>var a = &#39;a&#39;; // \n\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with the <code>&quot;windows&quot;</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint linebreak-style: [&quot;error&quot;, &quot;windows&quot;]</em>/</p>\n\n<p>var a = &#39;a&#39;, // \r\n\n    b = &#39;b&#39;; // \r\n\n// \r\n\nfunction foo(params) { // \r\n\n    // do stuff \r\n\n} // \r\n\n<code></code>`</p></section>	http://eslint.org/docs/rules/linebreak-style
lines-around-comment	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Many style guides require empty lines before or after comments. The primary goal\nof these rules is to make the comments easier to read and improve readability of the code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires empty lines before and/or after comments. It can be enabled separately for both block (<code>/*</code>) and line (<code>//</code>) comments. This rule does not apply to comments that appear on the same line as code and does not require empty lines at the beginning or end of a file.</p></section>	http://eslint.org/docs/rules/lines-around-comment
lines-around-directive	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Directives are used in JavaScript to indicate to the execution environment that a script would like to opt into a feature such as <code>&quot;strict mode&quot;</code>. Directives are grouped together in a <a href="http://www.ecma-international.org/ecma-262/7.0/#directive-prologue">directive prologue</a> at the top of either a file or function block and are applied to the scope in which they occur.</p>\n\n<p><code></code>`js\n// Strict mode is invoked for the entire script\n&quot;use strict&quot;;</p>\n\n<p>var foo;</p>\n\n<p>function bar() {\n  var baz;\n}\n<code></code>`</p>\n\n<p><code></code>`js\nvar foo;</p>\n\n<p>function bar() {\n  // Strict mode is only invoked within this function\n  &quot;use strict&quot;;</p>\n\n<p>  var baz;\n}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires or disallows blank newlines around directive prologues. This rule does not enforce any conventions about blank newlines between the individual directives. In addition, it does not require blank newlines before directive prologues unless they are preceded by a comment. Please use the <a href="padded-blocks">padded-blocks</a> rule if this is a style you would like to enforce.</p></section>	http://eslint.org/docs/rules/lines-around-directive
max-depth	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Many developers consider code difficult to read if blocks are nested beyond a certain depth.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum depth that blocks can be nested to reduce code complexity.</p></section>	http://eslint.org/docs/rules/max-depth
max-len	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Very long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).</p>\n\n<p><code>js\nvar foo = { &quot;bar&quot;: &quot;This is a bar.&quot;, &quot;baz&quot;: { &quot;qux&quot;: &quot;This is a qux&quot; }, &quot;difficult&quot;: &quot;to read&quot; }; // very long\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.</p></section>	http://eslint.org/docs/rules/max-len
max-lines	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what&#39;s going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.</p></section>	http://eslint.org/docs/rules/max-lines
max-nested-callbacks	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Many JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.</p>\n\n<p><code></code>`js\nfoo(function () {\n    bar(function () {\n        baz(function() {\n            qux(function () {</p>\n\n<pre><code>        });\n    });\n});</code></pre>\n\n<p>});\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum depth that callbacks can be nested to increase code clarity.</p></section>	http://eslint.org/docs/rules/max-nested-callbacks
max-params	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Functions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.</p>\n\n<p><code>js\nfunction foo (bar, baz, qux, qxx) { // four parameters, may be too many\n    doSomething();\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum number of parameters allowed in function definitions.</p></section>	http://eslint.org/docs/rules/max-params
max-statements-per-line	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>A line of code containing too many statements can be difficult to read. Code is generally read from the top down, especially when scanning, so limiting the number of statements allowed on a single line can be very beneficial for readability and maintainability.</p>\n\n<p><code>js\nfunction () { var bar; if (condition) { bar = 1; } else { bar = 2; } return true; } // too many statements\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum number of statements allowed per line.</p></section>	http://eslint.org/docs/rules/max-statements-per-line
max-statements	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>max-statements</code> rule allows you to specify the maximum number of statements allowed in a function.</p>\n\n<p><code>js\nfunction foo() {\n  var bar = 1; // one statement\n  var baz = 2; // two statements\n  var qux = 3; // three statements\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a maximum number of statements allowed in function blocks.</p></section>	http://eslint.org/docs/rules/max-statements
multiline-ternary	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program.</p>\n\n<p>For example:</p>\n\n<p><code>js\nvar foo = bar &gt; baz ? value1 : value2;\n</code></p>\n\n<p>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</p>\n\n<p><code>js\nvar foo = bar &gt; baz ?\n    value1 :\n    value2;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces or disallows newlines between operands of a ternary expression.\nNote: The location of the operators is not enforced by this rule. Please see the <a href="operator-linebreak">operator-linebreak</a> rule if you are interested in enforcing the location of the operators themselves.</p></section>	http://eslint.org/docs/rules/multiline-ternary
new-cap	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>new</code> operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that <code>new</code> is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</p>\n\n<p><code>js\nvar friend = new Person();\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:</p>\n\n<ul><li><code>Array</code></li><li><code>Boolean</code></li><li><code>Date</code></li><li><code>Error</code></li><li><code>Function</code></li><li><code>Number</code></li><li><code>Object</code></li><li><code>RegExp</code></li><li><code>String</code></li><li><code>Symbol</code></li></ul>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint new-cap: &quot;error&quot;</em>/</p>\n\n<p>function foo(arg) {\n    return Boolean(arg);\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/new-cap
new-parens	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows the omission of parentheses when invoking a function via the <code>new</code> keyword and the constructor has no arguments. However, some coders believe that omitting the parentheses is inconsistent with the rest of the language and thus makes code less clear.</p>\n\n<p><code>js\nvar person = new Person;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires parentheses when invoking a constructor with no arguments using the <code>new</code> keyword in order to increase code clarity.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint new-parens: &quot;error&quot;</em>/</p>\n\n<p>var person = new Person;\nvar person = new (Person);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint new-parens: &quot;error&quot;</em>/</p>\n\n<p>var person = new Person();\nvar person = new (Person)();\n<code></code>`</p></section>	http://eslint.org/docs/rules/new-parens
newline-after-var	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>As of today there is no consistency in separating variable declarations from the rest of the code. Some developers leave an empty line between var statements and the rest of the code like:</p>\n\n<p><code></code>`js\nvar foo;</p>\n\n<p>// do something with foo\n<code></code>`</p>\n\n<p>Whereas others don&#39;t leave any empty newlines at all.</p>\n\n<p><code>js\nvar foo;\n// do something with foo\n</code></p>\n\n<p>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after <code>var</code>, <code>let</code>, or <code>const</code> statements. It helps the code to look consistent across the entire project.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a coding style where empty lines are required or disallowed after <code>var</code>, <code>let</code>, or <code>const</code> statements to achieve a consistent coding style across the project.</p></section>	http://eslint.org/docs/rules/newline-after-var
newline-before-return	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>There is no hard and fast rule about whether empty lines should precede <code>return</code> statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:</p>\n\n<p><code>js\nfunction foo(bar) {\n  var baz = &#39;baz&#39;;\n  if (!bar) {\n    bar = baz;\n    return bar;\n  }\n  return bar;\n}\n</code></p>\n\n<p>Adding newlines visibly separates the return statements from the previous lines, making it clear where the function exits and what value it returns:</p>\n\n<p><code></code>`js\nfunction foo(bar) {\n  var baz = &#39;baz&#39;;</p>\n\n<p>  if (!bar) {\n    bar = baz;</p>\n\n<pre><code>return bar;</code></pre>\n\n<p>  }</p>\n\n<p>  return bar;\n}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires an empty line before <code>return</code> statements to increase code clarity, except when the <code>return</code> is alone inside a statement group (such as an if statement). In the latter case, the <code>return</code> statement does not need to be delineated by virtue of it being alone. Comments are ignored and do not count as empty lines.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint newline-before-return: &quot;error&quot;</em>/</p>\n\n<p>function foo(bar) {\n    if (!bar) {\n        return;\n    }\n    return bar;\n}</p>\n\n<p>function foo(bar) {\n    if (!bar) {\n        return;\n    }\n    /<em> multi-line\n    comment </em>/\n    return bar;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint newline-before-return: &quot;error&quot;</em>/</p>\n\n<p>function foo() {\n    return;\n}</p>\n\n<p>function foo() {</p>\n\n<pre><code>return;</code></pre>\n\n<p>}</p>\n\n<p>function foo(bar) {\n    if (!bar) return;\n}</p>\n\n<p>function foo(bar) {\n    if (!bar) { return };\n}</p>\n\n<p>function foo(bar) {\n    if (!bar) {\n        return;\n    }\n}</p>\n\n<p>function foo(bar) {\n    if (!bar) {\n        return;\n    }</p>\n\n<pre><code>return bar;</code></pre>\n\n<p>}</p>\n\n<p>function foo(bar) {\n    if (!bar) {</p>\n\n<pre><code>    return;\n}</code></pre>\n\n<p>}</p>\n\n<p>function foo() {</p>\n\n<pre><code>// comment\nreturn;</code></pre>\n\n<p>}\n<code></code>`</p></section>	http://eslint.org/docs/rules/newline-before-return
newline-per-chained-call	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Chained method calls on a single line without line breaks are harder to read, so some developers place a newline character after each method call in the chain to make it more readable and easy to maintain.</p>\n\n<p>Let&#39;s look at the following perfectly valid (but single line) code.</p>\n\n<p><code>js\nd3.select(&quot;body&quot;).selectAll(&quot;p&quot;).data([4, 8, 15, 16, 23, 42 ]).enter().append(&quot;p&quot;).text(function(d) { return &quot;I&#39;m number &quot; + d + &quot;!&quot;; });\n</code></p>\n\n<p>However, with appropriate new lines, it becomes easy to read and understand. Look at the same code written below with line breaks after each call.</p>\n\n<p><code>js\nd3\n    .select(&quot;body&quot;)\n    .selectAll(&quot;p&quot;)\n    .data([\n        4,\n        8,\n        15,\n        16,\n        23,\n        42\n    ])\n    .enter()\n    .append(&quot;p&quot;)\n    .text(function (d) {\n        return &quot;I&#39;m number &quot; + d + &quot;!&quot;;\n    });\n</code></p>\n\n<p>Another argument in favor of this style is that it improves the clarity of diffs when something in the method chain is changed:</p>\n\n<p>Less clear:</p>\n\n<p><code>diff\n-d3.select(&quot;body&quot;).selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;white&quot;);\n+d3.select(&quot;body&quot;).selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;blue&quot;);\n</code></p>\n\n<p>More clear:</p>\n\n<p><code>diff\nd3\n    .select(&quot;body&quot;)\n    .selectAll(&quot;p&quot;)\n-    .style(&quot;color&quot;, &quot;white&quot;);\n+    .style(&quot;color&quot;, &quot;blue&quot;);\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires a newline after each call in a method chain or deep member access. Computed property accesses such as <code>instance[something]</code> are excluded.</p></section>	http://eslint.org/docs/rules/newline-per-chained-call
no-array-constructor	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Use of the <code>Array</code> constructor to construct a new array is generally\ndiscouraged in favour of array literal notation because of the single-argument\npitfall and because the <code>Array</code> global may be redefined. The exception is when\nthe Array constructor is used to intentionally create sparse arrays of a\nspecified size by giving the constructor a single numeric argument.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>Array</code> constructors.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-array-constructor: &quot;error&quot;</em>/</p>\n\n<p>Array(0, 1, 2)\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-array-constructor: &quot;error&quot;</em>/</p>\n\n<p>new Array(0, 1, 2)\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-array-constructor: &quot;error&quot;</em>/</p>\n\n<p>Array(500)\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-array-constructor: &quot;error&quot;</em>/</p>\n\n<p>new Array(someOtherArray.length)\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-array-constructor
no-bitwise	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The use of bitwise operators in JavaScript is very rare and often <code>&amp;</code> or <code>|</code> is simply a mistyped <code>&amp;&amp;</code> or <code>||</code>, which will lead to unexpected behavior.</p>\n\n<p><code>js\nvar x = y | z;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows bitwise operators.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-bitwise: &quot;error&quot;</em>/</p>\n\n<p>var x = y | z;</p>\n\n<p>var x = y &amp; z;</p>\n\n<p>var x = y ^ z;</p>\n\n<p>var x = ~ z;</p>\n\n<p>var x = y &lt;&lt; z;</p>\n\n<p>var x = y &gt;&gt; z;</p>\n\n<p>var x = y &gt;&gt;&gt; z;</p>\n\n<p>x |= y;</p>\n\n<p>x &amp;= y;</p>\n\n<p>x ^= y;</p>\n\n<p>x &lt;&lt;= y;</p>\n\n<p>x &gt;&gt;= y;</p>\n\n<p>x &gt;&gt;&gt;= y;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-bitwise: &quot;error&quot;</em>/</p>\n\n<p>var x = y || z;</p>\n\n<p>var x = y &amp;&amp; z;</p>\n\n<p>var x = y &gt; z;</p>\n\n<p>var x = y &lt; z;</p>\n\n<p>x += y;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-bitwise
no-continue	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>continue</code> statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as <code>if</code> should be used instead.</p>\n\n<p><code></code>`js\nvar sum = 0,\n    i;</p>\n\n<p>for(i = 0; i &lt; 10; i++) {\n    if(i &gt;= 5) {\n        continue;\n    }</p>\n\n<pre><code>a += i;</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>continue</code> statements.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-continue: &quot;error&quot;</em>/</p>\n\n<p>var sum = 0,\n    i;</p>\n\n<p>for(i = 0; i &lt; 10; i++) {\n    if(i &gt;= 5) {\n        continue;\n    }</p>\n\n<pre><code>a += i;</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-continue: &quot;error&quot;</em>/</p>\n\n<p>var sum = 0,\n    i;</p>\n\n<p>labeledLoop: for(i = 0; i &lt; 10; i++) {\n    if(i &gt;= 5) {\n        continue labeledLoop;\n    }</p>\n\n<pre><code>a += i;</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-continue: &quot;error&quot;</em>/</p>\n\n<p>var sum = 0,\n    i;</p>\n\n<p>for(i = 0; i &lt; 10; i++) {\n    if(i &lt; 5) {\n       a += i;\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-continue
no-inline-comments	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line.\nOn the other hand, it is sometimes faster and more obvious to put comments immediately following code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows comments on the same line as code.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-inline-comments: &quot;error&quot;</em>/</p>\n\n<p>var a = 1; // declaring a to 1</p>\n\n<p>function getRandomNumber(){\n    return 4; // chosen by fair dice roll.\n              // guaranteed to be random.\n}</p>\n\n<p>/<em> A block comment before code </em>/ var b = 2;</p>\n\n<p>var c = 3; /<em> A block comment after code </em>/\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-inline-comments: &quot;error&quot;</em>/</p>\n\n<p>// This is a comment above a line of code\nvar foo = 5;</p>\n\n<p>var bar = 5;\n//This is a comment below a line of code\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-inline-comments
no-lonely-if	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>If an <code>if</code> statement is the only statement in the <code>else</code> block, it is often clearer to use an <code>else if</code> form.</p>\n\n<p><code>js\nif (foo) {\n    // ...\n} else {\n    if (bar) {\n        // ...\n    }\n}\n</code></p>\n\n<p>should be rewritten as</p>\n\n<p><code>js\nif (foo) {\n    // ...\n} else if (bar) {\n    // ...\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>if</code> statements as the only statement in <code>else</code> blocks.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-lonely-if: &quot;error&quot;</em>/</p>\n\n<p>if (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n}</p>\n\n<p>if (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    } else {\n        // ...\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-lonely-if: &quot;error&quot;</em>/</p>\n\n<p>if (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n}</p>\n\n<p>if (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n} else {\n    // ...\n}</p>\n\n<p>if (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n    doSomething();\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-lonely-if
no-mixed-operators	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Enclosing complex expressions by parentheses clarifies the developer&#39;s intention, which makes the code more readable.\nThis rule warns when different operators are used consecutively without parentheses in an expression.</p>\n\n<p><code>js\nvar foo = a &amp;&amp; b || c || d;    /*BAD: Unexpected mix of &#39;&amp;&amp;&#39; and &#39;||&#39;.*/\nvar foo = (a &amp;&amp; b) || c || d;  /*GOOD*/\nvar foo = a &amp;&amp; (b || c || d);  /*GOOD*/\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule checks <code>BinaryExpression</code> and <code>LogicalExpression</code>.</p>\n\n<p>This rule may conflict with <a href="no-extra-parens">no-extra-parens</a> rule.\nIf you use both this and <a href="no-extra-parens">no-extra-parens</a> rule together, you need to use the <code>nestedBinaryExpressions</code> option of <a href="no-extra-parens">no-extra-parens</a> rule.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-mixed-operators: &quot;error&quot;</em>/</p>\n\n<p>var foo = a &amp;&amp; b &lt; 0 || c &gt; 0 || d + 1 === 0;\nvar foo = a + b * c;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-mixed-operators: &quot;error&quot;</em>/</p>\n\n<p>var foo = a || b || c;\nvar foo = a &amp;&amp; b &amp;&amp; c;\nvar foo = (a &amp;&amp; b &lt; 0) || c &gt; 0 || d + 1 === 0;\nvar foo = a &amp;&amp; (b &lt; 0 || c &gt; 0 || d + 1 === 0);\nvar foo = a + (b <em> c);\nvar foo = (a + b) </em> c;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-mixed-operators
no-mixed-spaces-and-tabs	A			Stylistic Issues\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Most code conventions require either tabs or spaces be used for indentation. As such, it&#39;s usually an error if a single line of code is indented with both tabs and spaces.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows mixed spaces and tabs for indentation.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-mixed-spaces-and-tabs: &quot;error&quot;</em>/</p>\n\n<p>function add(x, y) {\n// ---&gt;..return x + y;</p>\n\n<pre><code>  return x + y;</code></pre>\n\n<p>}</p>\n\n<p>function main() {\n// ---&gt;var x = 5,\n// ---&gt;....y = 7;</p>\n\n<pre><code>var x = 5,\n    y = 7;</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-mixed-spaces-and-tabs: &quot;error&quot;</em>/</p>\n\n<p>function add(x, y) {\n// ---&gt;return x + y;\n    return x + y;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-mixed-spaces-and-tabs
no-multi-assign	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Chaining the assignment of variables can lead to unexpected results and be difficult to read.</p>\n\n<p><code>js\na = b = c = d;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows using multiple assignments within a single statement.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-multi-assign: &quot;error&quot;</em>/</p>\n\n<p>var a = b = c = 5;</p>\n\n<p>var foo = bar = &quot;baz&quot;;</p>\n\n<p>var a =\n    b =\n    c;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-multi-assign: &quot;error&quot;</em>/\nvar a = 5;\nvar b = 5;\nvar c = 5;</p>\n\n<p>var foo = &quot;baz&quot;;\nvar bar = &quot;baz&quot;;</p>\n\n<p>var a = c;\nvar b = c;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-multi-assign
no-multiple-empty-lines	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.</p></section>	http://eslint.org/docs/rules/no-multiple-empty-lines
no-negated-condition	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Negated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows negated conditions in either of the following:</p>\n\n<ul><li><code>if</code> statements which have an <code>else</code> branch</li><li>ternary expressions</li></ul>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-negated-condition: &quot;error&quot;</em>/</p>\n\n<p>if (!a) {\n    doSomething();\n} else {\n    doSomethingElse();\n}</p>\n\n<p>if (a != b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}</p>\n\n<p>if (a !== b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}</p>\n\n<p>!a ? c : b\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-negated-condition: &quot;error&quot;</em>/</p>\n\n<p>if (!a) {\n    doSomething();\n}</p>\n\n<p>if (!a) {\n    doSomething();\n} else if (b) {\n    doSomething();\n}</p>\n\n<p>if (a != b) {\n    doSomething();\n}</p>\n\n<p>a ? b : c\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-negated-condition
no-nested-ternary	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Nesting ternary expressions can make code more difficult to understand.</p>\n\n<p><code>js\nvar foo = bar ? baz : qux === quxx ? bing : bam;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>The <code>no-nested-ternary</code> rule disallows nested ternary expressions.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-nested-ternary: &quot;error&quot;</em>/</p>\n\n<p>var thing = foo ? bar : baz === qux ? quxx : foobar;</p>\n\n<p>foo ? baz === qux ? quxx() : foobar() : bar();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-nested-ternary: &quot;error&quot;</em>/</p>\n\n<p>var thing = foo ? bar : foobar;</p>\n\n<p>var thing;</p>\n\n<p>if (foo) {\n  thing = bar;\n} else if (baz === qux) {\n  thing = quxx;\n} else {\n  thing = foobar;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-nested-ternary
no-new-object	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>Object</code> constructor is used to create new generic objects in JavaScript, such as:</p>\n\n<p><code>js\nvar myObject = new Object();\n</code></p>\n\n<p>However, this is no different from using the more concise object literal syntax:</p>\n\n<p><code>js\nvar myObject = {};\n</code></p>\n\n<p>For this reason, many prefer to always use the object literal syntax and never use the <code>Object</code> constructor.</p>\n\n<p>While there are no performance differences between the two approaches, the byte savings and conciseness of the object literal form is what has made it the de facto way of creating new objects.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>Object</code> constructors.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-object: &quot;error&quot;</em>/</p>\n\n<p>var myObject = new Object();</p>\n\n<p>var myObject = new Object;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-new-object: &quot;error&quot;</em>/</p>\n\n<p>var myObject = new CustomObject();</p>\n\n<p>var myObject = {};\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-new-object
no-plusplus	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Because the unary <code>++</code> and <code>--</code> operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code.</p>\n\n<p><code></code>`js\nvar i = 10;\nvar j = 20;</p>\n\n<p>i ++\nj\n// i = 11, j = 20\n<code></code>`</p>\n\n<p><code></code>`js\nvar i = 10;\nvar j = 20;</p>\n\n<p>i\n++\nj\n// i = 10, j = 21\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows the unary operators <code>++</code> and <code>--</code>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-plusplus: &quot;error&quot;</em>/</p>\n\n<p>var foo = 0;\nfoo++;</p>\n\n<p>var bar = 42;\nbar--;</p>\n\n<p>for (i = 0; i &lt; l; i++) {\n    return;\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-plusplus: &quot;error&quot;</em>/</p>\n\n<p>var foo = 0;\nfoo += 1;</p>\n\n<p>var bar = 42;\nbar -= 1;</p>\n\n<p>for (i = 0; i &lt; l; i += 1) {\n    return;\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-plusplus
no-restricted-syntax	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>JavaScript has a lot of language features, and not everyone likes all of them. As a result, some projects choose to disallow the use of certain language features altogether. For instance, you might decide to disallow the use of <code>try-catch</code> or <code>class</code>.</p>\n\n<p>Rather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their <a href="https://github.com/estree/estree">ESTree</a> node types. For example, a function declaration is represented by <code>FunctionDeclaration</code> and the <code>with</code> statement is represented by <code>WithStatement</code>. You may find the full list of AST node names you can use <a href="https://github.com/eslint/espree/blob/master/lib/ast-node-types.js">on GitHub</a> and use the <a href="http://eslint.org/parser/">online parser</a> to see what type of nodes your code consists of.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows specified (that is, user-defined) syntax.</p></section>	http://eslint.org/docs/rules/no-restricted-syntax
no-tabs	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Some style guides don&#39;t allow the use of tab characters at all, including within comments.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule looks for tabs anywhere inside a file: code, comments or anything else.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\nvar a /t= 2;</p>\n\n<p>/**\n<em> /t/t its a test function\n</em>/\nfunction test(){}</p>\n\n<p>var x = 1; // /t test\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\nvar a = 2;</p>\n\n<p>/**\n<em> its a test function\n</em>/\nfunction test(){}</p>\n\n<p>var x = 1; // test\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-tabs
no-ternary	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.</p>\n\n<p><code>js\nvar foo = isBar ? baz : qux;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows ternary operators.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-ternary: &quot;error&quot;</em>/</p>\n\n<p>var foo = isBar ? baz : qux;</p>\n\n<p>function quux() {\n  return foo ? bar() : baz();\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-ternary: &quot;error&quot;</em>/</p>\n\n<p>var foo;</p>\n\n<p>if (isBar) {\n    foo = baz;\n} else {\n    foo = qux;\n}</p>\n\n<p>function quux() {\n    if (foo) {\n        return bar();\n    } else {\n        return baz();\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-ternary
no-trailing-spaces	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-trailing-spaces: &quot;error&quot;</em>/</p>\n\n<p>var foo = 0;//•••••\nvar baz = 5;//••\n//•••••\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-trailing-spaces: &quot;error&quot;</em>/</p>\n\n<p>var foo = 0;\nvar baz = 5;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-trailing-spaces
no-underscore-dangle	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>As far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript. Dangling underscores are underscores at either the beginning or end of an identifier, such as:</p>\n\n<p><code>js\nvar _foo;\n</code></p>\n\n<p>There is actually a long history of using dangling underscores to indicate &quot;private&quot; members of objects in JavaScript (though JavaScript doesn&#39;t have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as <code>__defineGetter__()</code>. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate &quot;private&quot; members of objects.</p>\n\n<p>Whether or not you choose to allow dangling underscores in identifiers is purely a convention and has no effect on performance, readability, or complexity. It&#39;s purely a preference.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows dangling underscores in identifiers.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-underscore-dangle: &quot;error&quot;</em>/</p>\n\n<p>var foo<em>;\nvar <strong>proto</strong> = {};\nfoo.</em>bar();\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-underscore-dangle: &quot;error&quot;</em>/</p>\n\n<p>var <em> = require(&#39;underscore&#39;);\nvar obj = </em>.contains(items, item);\nobj.<strong>proto</strong> = {};\nvar file = __filename;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-underscore-dangle
no-unneeded-ternary	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>It&#39;s a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean.\nHere are some examples:</p>\n\n<p><code></code>`js\n// Bad\nvar isYes = answer === 1 ? true : false;</p>\n\n<p>// Good\nvar isYes = answer === 1;</p>\n\n<p>// Bad\nvar isNo = answer === 1 ? false : true;</p>\n\n<p>// Good\nvar isNo = answer !== 1;\n<code></code>`</p>\n\n<p>Another common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical <code>OR</code> can be used to provide the same functionality.\nHere is an example:</p>\n\n<p><code></code>`js\n// Bad\nvar foo = bar ? bar : 1;</p>\n\n<p>// Good\nvar foo = bar || 1;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallow ternary operators when simpler alternatives exist.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unneeded-ternary: &quot;error&quot;</em>/</p>\n\n<p>var a = x === 2 ? true : false;</p>\n\n<p>var a = x ? true : false;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-unneeded-ternary: &quot;error&quot;</em>/</p>\n\n<p>var a = x === 2 ? &quot;Yes&quot; : &quot;No&quot;;</p>\n\n<p>var a = x !== false;</p>\n\n<p>var a = x ? &quot;Yes&quot; : &quot;No&quot;;</p>\n\n<p>var a = x ? y : x;</p>\n\n<p>var a = x ? x : 1;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-unneeded-ternary
no-whitespace-before-property	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows whitespace between objects and their properties. However, inconsistent spacing can make code harder to read and can lead to errors.</p>\n\n<p><code>js\nfoo. bar .baz . quz\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:</p>\n\n<p><code>js\nfoo\n  .bar()\n  .baz()\n  .qux()\n</code></p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-whitespace-before-property: &quot;error&quot;</em>/</p>\n\n<p>foo [bar]</p>\n\n<p>foo. bar</p>\n\n<p>foo .bar</p>\n\n<p>foo. bar. baz</p>\n\n<p>foo. bar()\n  .baz()</p>\n\n<p>foo\n  .bar(). baz()\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-whitespace-before-property: &quot;error&quot;</em>/</p>\n\n<p>foo.bar</p>\n\n<p>foo[bar]</p>\n\n<p>foo[ bar ]</p>\n\n<p>foo.bar.baz</p>\n\n<p>foo\n  .bar().baz()</p>\n\n<p>foo\n  .bar()\n  .baz()</p>\n\n<p>foo.\n  bar().\n  baz()\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-whitespace-before-property
object-curly-newline	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>A number of style guides require or disallow line breaks inside of object braces and other tokens.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent line breaks inside braces of object literals or destructuring assignments.</p></section>	http://eslint.org/docs/rules/object-curly-newline
object-curly-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>While formatting preferences are very personal, a number of style guides require\nor disallow spaces between curly braces in the following situations:</p>\n\n<p><code></code>`js\n// simple object literals\nvar obj = { foo: &quot;bar&quot; };</p>\n\n<p>// nested object literals\nvar obj = { foo: { zoo: &quot;bar&quot; } };</p>\n\n<p>// destructuring assignment (EcmaScript 6)\nvar { x, y } = y;</p>\n\n<p>// import/export declarations (EcmaScript 6)\nimport { foo } from &quot;bar&quot;;\nexport { foo };\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforce consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.</p></section>	http://eslint.org/docs/rules/object-curly-spacing
object-property-newline	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>While formatting preferences are very personal, a number of style guides require that object properties be placed on separate lines for better readability.</p>\n\n<p>Another argument in favor of this style is that it improves the readability of diffs when a property is changed:</p>\n\n<p><code>diff\n// More readable\n var obj = {\n     foo: &quot;foo&quot;,\n-    bar: &quot;bar&quot;,\n+    bar: &quot;bazz&quot;,\n     baz: &quot;baz&quot;\n };\n</code></p>\n\n<p><code>diff\n// Less readable\n-var obj = { foo: &quot;foo&quot;, bar: &quot;bar&quot;, baz: &quot;baz&quot; };\n+var obj = { foo: &quot;foo&quot;, bar: &quot;bazz&quot;, baz: &quot;baz&quot; };\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to maintain consistency of newlines between object properties.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint object-property-newline: &quot;error&quot;</em>/</p>\n\n<p>var obj = { foo: &quot;foo&quot;, bar: &quot;bar&quot;, baz: &quot;baz&quot; };</p>\n\n<p>var obj2 = {\n    foo: &quot;foo&quot;, bar: &quot;bar&quot;, baz: &quot;baz&quot;\n};</p>\n\n<p>var obj3 = {\n    foo: &quot;foo&quot;, bar: &quot;bar&quot;,\n    baz: &quot;baz&quot;\n};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint object-property-newline: &quot;error&quot;</em>/</p>\n\n<p>var obj = {\n    foo: &quot;foo&quot;,\n    bar: &quot;bar&quot;,\n    baz: &quot;baz&quot;\n};\n<code></code>`</p></section>	http://eslint.org/docs/rules/object-property-newline
one-var-declaration-per-line	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some developers declare multiple var statements on the same line:</p>\n\n<p><code>js\nvar foo, bar, baz;\n</code></p>\n\n<p>Others prefer to declare one var per line.</p>\n\n<p><code>js\nvar foo,\n    bar,\n    baz;\n</code></p>\n\n<p>Keeping to one of these styles across a project&#39;s codebase can help with maintaining code consistency.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside <code>for</code> loop conditionals.</p></section>	http://eslint.org/docs/rules/one-var-declaration-per-line
one-var	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Variables can be declared at any point in JavaScript code using <code>var</code>, <code>let</code>, or <code>const</code>. There are many styles and preferences related to the declaration of variables, and one of those is deciding on how many variable declarations should be allowed in a single function.</p>\n\n<p>There are two schools of thought in this regard:</p>\n\n<ol><li>There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.</li><li>You should use one variable declaration for each variable you want to define.</li></ol>\n\n<p>For instance:</p>\n\n<p><code></code>`js\n// one variable declaration per function\nfunction foo() {\n    var bar, baz;\n}</p>\n\n<p>// multiple variable declarations per function\nfunction foo() {\n    var bar;\n    var baz;\n}\n<code></code>`</p>\n\n<p>The single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all <code>var</code> statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces variables to be declared either together or separately per function ( for <code>var</code>) or block (for <code>let</code> and <code>const</code>) scope.</p></section>	http://eslint.org/docs/rules/one-var
operator-assignment	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, <code>x = x + 4</code> can be shortened to <code>x += 4</code>. The supported shorthand forms are as follows:</p>\n\n<p><code>text\n Shorthand | Separate\n-----------|------------\n x += y    | x = x + y\n x -= y    | x = x - y\n x *= y    | x = x * y\n x /= y    | x = x / y\n x %= y    | x = x % y\n x &lt;&lt;= y   | x = x &lt;&lt; y\n x &gt;&gt;= y   | x = x &gt;&gt; y\n x &gt;&gt;&gt;= y  | x = x &gt;&gt;&gt; y\n x &amp;= y    | x = x &amp; y\n x ^= y    | x = x ^ y\n x |= y    | x = x | y\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires or disallows assignment operator shorthand where possible.</p></section>	http://eslint.org/docs/rules/operator-assignment
operator-linebreak	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>When a statement is too long to fit on a single line, line breaks are generally inserted next to the operators separating expressions. The first style coming to mind would be to place the operator at the end of the line, following the english punctuation rules.</p>\n\n<p><code>js\nvar fullHeight = borderTop +\n                 innerHeight +\n                 borderBottom;\n</code></p>\n\n<p>Some developers find that placing operators at the beginning of the line makes the code more readable.</p>\n\n<p><code>js\nvar fullHeight = borderTop\n               + innerHeight\n               + borderBottom;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces a consistent linebreak style for operators.</p></section>	http://eslint.org/docs/rules/operator-linebreak
padded-blocks	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some style guides require block statements to start and end with blank lines. The goal is\nto improve readability by visually separating the block content and the surrounding code.</p>\n\n<p><code></code>`js\nif (a) {</p>\n\n<pre><code>b();</code></pre>\n\n<p>}\n<code></code>`</p>\n\n<p>Since it&#39;s good to have a consistent code style, you should either always write\npadded blocks or never do it.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent empty line padding within blocks.</p></section>	http://eslint.org/docs/rules/padded-blocks
quote-props	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Object literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:</p>\n\n<p><code></code>`js\nvar object1 = {\n    property: true\n};</p>\n\n<p>var object2 = {\n    &quot;property&quot;: true\n};\n<code></code>`</p>\n\n<p>In many cases, it doesn&#39;t matter if you choose to use an identifier instead of a string or vice-versa. Even so, you might decide to enforce a consistent style in your code.</p>\n\n<p>There are, however, some occasions when you must use quotes:</p>\n\n<ol><li>If you are using an ECMAScript 3 JavaScript engine (such as IE8) and you want to use a keyword (such as <code>if</code>) as a property name. This restriction was removed in ECMAScript 5.</li><li>You want to use a non-identifier character in your property name, such as having a property with a space like <code>&quot;one two&quot;</code>.</li></ol>\n\n<p>Another example where quotes do matter is when using numeric literals as property keys:</p>\n\n<p><code>js\nvar object = {\n    1e2: 1,\n    100: 2\n};\n</code></p>\n\n<p>This may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because <code>1e2</code> and <code>100</code> are coerced into strings before getting used as the property name. Both <code>String(1e2)</code> and <code>String(100)</code> happen to be equal to <code>&quot;100&quot;</code>, which causes the &quot;Duplicate data property in object literal not allowed in strict mode&quot; error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires quotes around object literal property names.</p></section>	http://eslint.org/docs/rules/quote-props
quotes	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows you to define strings in one of three ways: double quotes, single quotes, and backticks (as of ECMAScript 6). For example:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>var double = &quot;double&quot;;\nvar single = &#39;single&#39;;\nvar backtick = <code>backtick</code>;    // ES6 only\n<code></code>`</p>\n\n<p>Each of these lines creates a string and, in some cases, can be used interchangeably. The choice of how to define strings in a codebase is a stylistic one outside of template literals (which allow embedded of expressions to be interpreted).</p>\n\n<p>Many codebases require strings to be defined in a consistent manner.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces the consistent use of either backticks, double, or single quotes.</p></section>	http://eslint.org/docs/rules/quotes
require-jsdoc	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p><a href="http://usejsdoc.org">JSDoc</a> is a JavaScript API documentation generator. It uses specially-formatted comments inside of code to generate API documentation automatically. For example, this is what a JSDoc comment looks like for a function:</p>\n\n<p><code>js\n/**\n * Adds two numbers together.\n * @param {int} num1 The first number.\n * @param {int} num2 The second number.\n * @returns {int} The sum of the two numbers.\n */\nfunction sum(num1, num2) {\n    return num1 + num2;\n}\n</code></p>\n\n<p>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule requires JSDoc comments for specified nodes. Supported nodes:</p>\n\n<ul><li><code>&quot;FunctionDeclaration&quot;</code></li><li><code>&quot;ClassDeclaration&quot;</code></li><li><code>&quot;MethodDefinition&quot;</code></li><li><code>&quot;ArrowFunctionExpression&quot;</code></li></ul></section>	http://eslint.org/docs/rules/require-jsdoc
semi-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript allows you to place unnecessary spaces before or after a semicolon.</p>\n\n<p>Disallowing or enforcing space around a semicolon can improve the readability of your program.</p>\n\n<p><code></code>`js\nvar a = &quot;b&quot; ;</p>\n\n<p>var c = &quot;d&quot;;var e = &quot;f&quot;;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.</p>\n\n<p>This rule doesn&#39;t check spacing in the following cases:</p>\n\n<ul><li><p>The spacing after the semicolon if it is the first token in the line.</p></li><li><p>The spacing before the semicolon if it is after an opening parenthesis (<code>(</code> or <code>{</code>), or the spacing after the semicolon if it is before a closing parenthesis (<code>)</code> or <code>}</code>). That spacing is checked by <code>space-in-parens</code> or <code>block-spacing</code>.</p></li><li><p>The spacing around the semicolon in a for loop with an empty condition (<code>for(;;)</code>).</p></li></ul></section>	http://eslint.org/docs/rules/semi-spacing
semi	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>JavaScript is unique amongst the C-like languages in that it doesn&#39;t require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as <strong>automatic semicolon insertion (ASI)</strong> and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:</p>\n\n<p><code>js\nvar name = &quot;ESLint&quot;\nvar website = &quot;eslint.org&quot;;\n</code></p>\n\n<p>On the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.</p>\n\n<p>In the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn&#39;t exist and always include semicolons manually. The rationale is that it&#39;s easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.</p>\n\n<p>However, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:</p>\n\n<p><code>js\nreturn\n{\n    name: &quot;ESLint&quot;\n};\n</code></p>\n\n<p>This may look like a <code>return</code> statement that returns an object literal, however, the JavaScript engine will interpret this code as:</p>\n\n<p><code>js\nreturn;\n{\n    name: &quot;ESLint&quot;;\n}\n</code></p>\n\n<p>Effectively, a semicolon is inserted after the <code>return</code> statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the <a href="no-unreachable">no-unreachable</a> rule will protect your code from such cases.</p>\n\n<p>On the other side of the argument are those who says that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don&#39;t use semicolons. For example, consider this code:</p>\n\n<p><code></code>`js\nvar globalCounter = { }</p>\n\n<p>(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n<code></code>`</p>\n\n<p>In this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it&#39;s a function). The <a href="no-unexpected-multiline">no-unexpected-multiline</a> rule can protect your code from such cases.</p>\n\n<p>Although ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a <code>\n</code> character always ends a statement (just like a semicolon) unless one of the following is true:</p>\n\n<ol><li>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with <code>.</code> or <code>,</code>.)</li><li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment the next token.)</li><li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is no <code>{</code></li><li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>, or some other binary operator that can only be found between two tokens in a single expression.</li></ol>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistent use of semicolons.</p></section>	http://eslint.org/docs/rules/semi
sort-keys	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When declaring multiple properties, some developers prefer to sort property names alphabetically to be able to find necessary property easier at the later time. Others feel that it adds complexity and becomes burden to maintain.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint sort-keys: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>let obj = {a: 1, c: 3, b: 2};\nlet obj = {a: 1, &quot;c&quot;: 3, b: 2};</p>\n\n<p>// Case-sensitive by default.\nlet obj = {a: 1, b: 2, C: 3};</p>\n\n<p>// Non-natural order by default.\nlet obj = {1: a, 2: c, 10: b};</p>\n\n<p>// This rule checks computed properties which have a simple name as well.\n// Simple names are names which are expressed by an Identifier node or a Literal node.\nconst S = Symbol(&quot;s&quot;)\nlet obj = {a: 1, [&quot;c&quot;]: 3, b: 2};\nlet obj = {a: 1, [S]: 3, b: 2};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint sort-keys: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>let obj = {a: 1, b: 2, c: 3};\nlet obj = {a: 1, &quot;b&quot;: 2, c: 3};</p>\n\n<p>// Case-sensitive by default.\nlet obj = {C: 3, a: 1, b: 2};</p>\n\n<p>// Non-natural order by default.\nlet obj = {1: a, 10: b, 2: c};</p>\n\n<p>// This rule checks computed properties which have a simple name as well.\nlet obj = {a: 1, [&quot;b&quot;]: 2, c: 3};\nlet obj = {a: 1, [b]: 2, c: 3};</p>\n\n<p>// This rule ignores computed properties which have a non-simple name.\nlet obj = {a: 1, [c + d]: 3, b: 2};\nlet obj = {a: 1, [&quot;c&quot; + &quot;d&quot;]: 3, b: 2};\nlet obj = {a: 1, [<code>${c}</code>]: 3, b: 2};\nlet obj = {a: 1, [tag<code>c</code>]: 3, b: 2};\n<code></code>`</p></section>	http://eslint.org/docs/rules/sort-keys
sort-vars	A			Stylistic Issues						http://eslint.org/img/logo.svg	<section class="prog__container"><p>When declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time. Others feel that it adds complexity and becomes burden to maintain.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically.\nThe default configuration of the rule is case-sensitive.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint sort-vars: &quot;error&quot;</em>/</p>\n\n<p>var b, a;</p>\n\n<p>var a, B, c;</p>\n\n<p>var a, A;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint sort-vars: &quot;error&quot;</em>/</p>\n\n<p>var a, b, c, d;</p>\n\n<p>var <em>a = 10;\nvar </em>b = 20;</p>\n\n<p>var A, a;</p>\n\n<p>var B, a, c;\n<code></code>`</p>\n\n<p>Alphabetical list is maintained starting from the first variable and excluding any that are considered problems. So the following code will produce two problems:</p>\n\n<p><code></code>`js\n/<em>eslint sort-vars: &quot;error&quot;</em>/</p>\n\n<p>var c, d, a, b;\n<code></code>`</p>\n\n<p>But this one, will only produce one:</p>\n\n<p><code></code>`js\n/<em>eslint sort-vars: &quot;error&quot;</em>/</p>\n\n<p>var c, d, a, e;\n<code></code>`</p></section>	http://eslint.org/docs/rules/sort-vars
space-before-blocks	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Consistency is an important part of any style guide.\nWhile it is a personal preference where to put the opening brace of blocks,\nit should be consistent across a whole project.\nHaving an inconsistent style distracts the reader from seeing the important parts of the code.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule will enforce consistency of spacing before blocks. It is only applied on blocks that don’t begin on a new line.</p>\n\n<ul><li>This rule ignores spacing which is between <code>=&gt;</code> and a block. The spacing is handled by the <code>arrow-spacing</code> rule.</li><li>This rule ignores spacing which is between a keyword and a block. The spacing is handled by the <code>keyword-spacing</code> rule.</li></ul></section>	http://eslint.org/docs/rules/space-before-blocks
space-before-function-paren	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>When formatting a function, whitespace is allowed between the function name or <code>function</code> keyword and the opening paren. Named functions also require a space between the <code>function</code> keyword and the function name, but anonymous functions require no whitespace. For example:</p>\n\n<p><code></code>`js\nfunction withoutSpace(x) {\n    // ...\n}</p>\n\n<p>function withSpace (x) {\n    // ...\n}</p>\n\n<p>var anonymousWithoutSpace = function() {};</p>\n\n<p>var anonymousWithSpace = function () {};\n<code></code>`</p>\n\n<p>Style guides may require a space after the <code>function</code> keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn&#39;t match the preferences specified.</p></section>	http://eslint.org/docs/rules/space-before-function-paren
space-in-parens	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some style guides require or disallow spaces inside of parentheses:</p>\n\n<p><code></code>`js\nfoo( &#39;bar&#39; );\nvar x = ( 1 + 2 ) * 3;</p>\n\n<p>foo(&#39;bar&#39;);\nvar x = (1 + 2) * 3;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule will enforce consistency of spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of <code>(</code> and to the left of <code>)</code>. In either case, <code>()</code> will still be allowed.</p></section>	http://eslint.org/docs/rules/space-in-parens
space-infix-ops	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>While formatting preferences are very personal, a number of style guides require spaces around operators, such as:</p>\n\n<p><code>js\nvar sum = 1 + 2;\n</code></p>\n\n<p>The proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:</p>\n\n<p><code>js\nvar sum = i+++2;\n</code></p>\n\n<p>While this is valid JavaScript syntax, it is hard to determine what the author intended.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at ensuring there are spaces around infix operators.</p></section>	http://eslint.org/docs/rules/space-infix-ops
space-unary-ops	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces consistency regarding the spaces after <code>words</code> unary operators and after/before <code>nonwords</code> unary operators.</p>\n\n<p>Examples of unary <code>words</code> operators:</p>\n\n<p><code></code>`js\n// new\nvar joe = new Person();</p>\n\n<p>// delete\nvar obj = {\n    foo: &#39;bar&#39;\n};\ndelete obj.foo;</p>\n\n<p>// typeof\ntypeof {} // object</p>\n\n<p>// void\nvoid 0 // undefined\n<code></code>`</p>\n\n<p>Examples of unary <code>nonwords</code> operators:</p>\n\n<p><code>js\nif ([1,2,3].indexOf(1) !== -1) {};\nfoo = --foo;\nbar = bar++;\nbaz = !foo;\nqux = !!baz;\n</code></p></section>	http://eslint.org/docs/rules/space-unary-ops
spaced-comment	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Some style guides require or disallow a whitespace immediately after the initial <code>//</code> or <code>/*</code> of a comment.\nWhitespace after the <code>//</code> or <code>/*</code> makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the <code>//</code> or <code>/*</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule will enforce consistency of spacing after the start of a comment <code>//</code> or <code>/*</code>. It also provides several\nexceptions for various documentation styles.</p></section>	http://eslint.org/docs/rules/spaced-comment
template-tag-spacing	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>With ES6, it&#39;s possible to create functions called <a href="#further-reading">tagged template literals</a> where the function parameters consist of a template literal&#39;s strings and expressions.</p>\n\n<p>When using tagged template literals, it&#39;s possible to insert whitespace between the tag function and the template literal. Since this whitespace is optional, the following lines are equivalent:</p>\n\n<p><code>js\nlet hello = func`Hello world`;\nlet hello = func `Hello world`;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to maintain consistency around the spacing between template tag functions and their template literals.</p></section>	http://eslint.org/docs/rules/template-tag-spacing
unicode-bom	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big\nendian or little endian. That is, whether the most significant or least\nsignificant bytes come first. UTF-8 does not require a BOM because byte ordering\ndoes not matter when characters are a single byte. Since UTF-8 is the dominant\nencoding of the web, we make <code>&quot;never&quot;</code> the default option.</p>\n\n<h2>Rule Details</h2>\n\n<p>If the <code>&quot;always&quot;</code> option is used, this rule requires that files always begin\nwith the Unicode BOM character U+FEFF. If <code>&quot;never&quot;</code> is used, files must never\nbegin with U+FEFF.</p></section>	http://eslint.org/docs/rules/unicode-bom
wrap-regex	A			Stylistic Issues\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>When a regular expression is used in certain situations, it can end up looking like a division operator. For example:</p>\n\n<p><code>js\nfunction a() {\n    return /foo/.test(&quot;bar&quot;);\n}\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This is used to disambiguate the slash operator and facilitates more readable code.</p>\n\n<p>Example of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint wrap-regex: &quot;error&quot;</em>/</p>\n\n<p>function a() {\n    return /foo/.test(&quot;bar&quot;);\n}\n<code></code>`</p>\n\n<p>Example of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint wrap-regex: &quot;error&quot;</em>/</p>\n\n<p>function a() {\n    return (/foo/).test(&quot;bar&quot;);\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/wrap-regex
arrow-body-style	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Arrow functions have two syntactic forms for their function bodies.  They may be defined with a <em>block</em> body (denoted by curly braces) <code>() =&gt; { ... }</code> or with a single expression <code>() =&gt; ...</code>, whose value is implicitly returned.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule can enforce or disallow the use of braces around arrow function body.</p></section>	http://eslint.org/docs/rules/arrow-body-style
arrow-parens	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Arrow functions can omit parentheses when they have exactly one parameter. In all other cases the parameter(s) must\nbe wrapped in parentheses. This rule enforces the consistent use of parentheses in arrow functions.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces parentheses around arrow function parameters regardless of arity. For example:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// Bad\na =&gt; {}</p>\n\n<p>// Good\n(a) =&gt; {}\n<code></code>`</p>\n\n<p>Following this style will help you find arrow functions (<code>=&gt;</code>) which may be mistakenly included in a condition\nwhen a comparison such as <code>&gt;=</code> was the intent.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// Bad\nif (a =&gt; 2) {\n}</p>\n\n<p>// Good\nif (a &gt;= 2) {\n}\n<code></code>`</p>\n\n<p>The rule can also be configured to discourage the use of parens when they are not required:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// Bad\n(a) =&gt; {}</p>\n\n<p>// Good\na =&gt; {}\n<code></code>`</p></section>	http://eslint.org/docs/rules/arrow-parens
arrow-spacing	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>This rule normalize style of spacing before/after an arrow function&#39;s arrow(<code>=&gt;</code>).</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// { &quot;before&quot;: true, &quot;after&quot;: true }\n(a) =&gt; {}</p>\n\n<p>// { &quot;before&quot;: false, &quot;after&quot;: false }\n(a)=&gt;{}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule takes an object argument with <code>before</code> and <code>after</code> properties, each with a Boolean value.</p>\n\n<p>The default configuration is <code>{ &quot;before&quot;: true, &quot;after&quot;: true }</code>.</p>\n\n<p><code>true</code> means there should be <strong>one or more spaces</strong> and <code>false</code> means <strong>no spaces</strong>.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with the default <code>{ &quot;before&quot;: true, &quot;after&quot;: true }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>()=&gt; {};\n() =&gt;{};\n(a)=&gt; {};\n(a) =&gt;{};\na =&gt;a;\na=&gt; a;\n()=&gt; {&#39;\n&#39;};\n() =&gt;{&#39;\n&#39;};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with the default <code>{ &quot;before&quot;: true, &quot;after&quot;: true }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>() =&gt; {};\n(a) =&gt; {};\na =&gt; a;\n() =&gt; {&#39;\n&#39;};\n<code></code>`</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with the <code>{ &quot;before&quot;: false, &quot;after&quot;: false }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: [&quot;error&quot;, { &quot;before&quot;: false, &quot;after&quot;: false }]</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>() =&gt;{};\n(a) =&gt; {};\n()=&gt; {&#39;\n&#39;};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with the <code>{ &quot;before&quot;: false, &quot;after&quot;: false }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: [&quot;error&quot;, { &quot;before&quot;: false, &quot;after&quot;: false }]</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>()=&gt;{};\n(a)=&gt;{};\n()=&gt;{&#39;\n&#39;};\n<code></code>`</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule with the <code>{ &quot;before&quot;: false, &quot;after&quot;: true }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: [&quot;error&quot;, { &quot;before&quot;: false, &quot;after&quot;: true }]</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>() =&gt;{};\n(a) =&gt; {};\n()=&gt;{&#39;\n&#39;};\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule with the <code>{ &quot;before&quot;: false, &quot;after&quot;: true }</code> option:</p>\n\n<p><code></code>`js\n/<em>eslint arrow-spacing: [&quot;error&quot;, { &quot;before&quot;: false, &quot;after&quot;: true }]</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>()=&gt; {};\n(a)=&gt; {};\n()=&gt; {&#39;\n&#39;};\n<code></code>`</p></section>	http://eslint.org/docs/rules/arrow-spacing
constructor-super	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Constructors of derived classes must call <code>super()</code>.\nConstructors of non derived classes must not call <code>super()</code>.\nIf this is not observed, the javascript engine will raise a runtime error.</p>\n\n<p>This rule checks whether or not there is a valid <code>super()</code> call.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag invalid/missing <code>super()</code> calls.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint constructor-super: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A {\n    constructor() {\n        super();  // This is a SyntaxError.\n    }\n}</p>\n\n<p>class A extends B {\n    constructor() { }  // Would throw a ReferenceError.\n}</p>\n\n<p>// Classes which inherits from a non constructor are always problems.\nclass A extends null {\n    constructor() {\n        super();  // Would throw a TypeError.\n    }\n}</p>\n\n<p>class A extends null {\n    constructor() { }  // Would throw a ReferenceError.\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint constructor-super: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A {\n    constructor() { }\n}</p>\n\n<p>class A extends B {\n    constructor() {\n        super();\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/constructor-super
generator-star-spacing	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Generators are a new type of function in ECMAScript 6 that can return multiple values over time.\nThese special functions are indicated by placing an <code>*</code> after the <code>function</code> keyword.</p>\n\n<p>Here is an example of a generator function:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>function* generator() {\n    yield &quot;44&quot;;\n    yield &quot;55&quot;;\n}\n<code></code>`</p>\n\n<p>This is also valid:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>function *generator() {\n    yield &quot;44&quot;;\n    yield &quot;55&quot;;\n}\n<code></code>`</p>\n\n<p>This is valid as well:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>function * generator() {\n    yield &quot;44&quot;;\n    yield &quot;55&quot;;\n}\n<code></code>`</p>\n\n<p>To keep a sense of consistency when using generators this rule enforces a single position for the <code>*</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce spacing around the <code>*</code> of generator functions.</p></section>	http://eslint.org/docs/rules/generator-star-spacing
no-class-assign	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p><code>ClassDeclaration</code> creates a variable, and we can modify the variable.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>class A { }\nA = 0;\n<code></code>`</p>\n\n<p>But the modification is a mistake in most cases.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag modifying variables of class declarations.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A { }\nA = 0;\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>A = 0;\nclass A { }\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A {\n    b() {\n        A = 0;\n    }\n}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>let A = class A {\n    b() {\n        A = 0;\n        // <code>let A</code> is shadowed by the class name.\n    }\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>let A = class A { }\nA = 0; // A is a variable.\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>let A = class {\n    b() {\n        A = 0; // A is a variable.\n    }\n}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-class-assign: 2</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>class A {\n    b(A) {\n        A = 0; // A is a parameter.\n    }\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-class-assign
no-confusing-arrow	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Arrow functions (<code>=&gt;</code>) are similar in syntax to some comparison operators (<code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>). This rule warns against using the arrow function syntax in places where it could be confused with a comparison operator. Even if the arguments of the arrow function are wrapped with parens, this rule still warns about it unless <code>allowParens</code> is set to <code>true</code>.</p>\n\n<p>Here&#39;s an example where the usage of <code>=&gt;</code> could be confusing:</p>\n\n<p><code>js\n// The intent is not clear\nvar x = a =&gt; 1 ? 2 : 3;\n// Did the author mean this\nvar x = function (a) { return 1 ? 2 : 3 };\n// Or this\nvar x = a &lt;= 1 ? 2 : 3;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-confusing-arrow: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var x = a =&gt; 1 ? 2 : 3;\nvar x = (a) =&gt; 1 ? 2 : 3;\nvar x = (a) =&gt; (1 ? 2 : 3);\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-confusing-arrow: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var x = a =&gt; { return 1 ? 2 : 3; };\nvar x = (a) =&gt; { return 1 ? 2 : 3; };\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-confusing-arrow
no-const-assign	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>We cannot modify variables that are declared using <code>const</code> keyword.\nIt will raise a runtime error.</p>\n\n<p>Under non ES2015 environment, it might be ignored merely.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag modifying variables that are declared using <code>const</code> keyword.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>const a = 0;\na = 1;\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>const a = 0;\na += 1;\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>const a = 0;\n++a;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>const a = 0;\nconsole.log(a);\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>for (const a in [1, 2, 3]) { // <code>a</code> is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n<code></code>`</p>\n\n<p><code></code>`js\n/<em>eslint no-const-assign: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>for (const a of [1, 2, 3]) { // <code>a</code> is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-const-assign
no-dupe-class-members	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>If there are declarations of the same name in class members, the last declaration overwrites other declarations silently.\nIt can cause unexpected behaviors.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>class Foo {\n  bar() { console.log(&quot;hello&quot;); }\n  bar() { console.log(&quot;goodbye&quot;); }\n}</p>\n\n<p>var foo = new Foo();\nfoo.bar(); // goodbye\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag the use of duplicate names in class members.</p></section>	http://eslint.org/docs/rules/no-dupe-class-members
no-duplicate-imports	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Using a single <code>import</code> statement per module will make the code clearer because you can see everything being imported from that module on one line.</p>\n\n<p>In the following example the <code>module</code> import on line 1 is repeated on line 3. These can be combined to make the list of imports more succinct.</p>\n\n<p><code>js\nimport { merge } from &#39;module&#39;;\nimport something from &#39;another-module&#39;;\nimport { find } from &#39;module&#39;;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rules requires that all imports from a single module exists in a single <code>import</code> statement.</p>\n\n<p>Example of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-duplicate-imports: &quot;error&quot;</em>/</p>\n\n<p>import { merge } from &#39;module&#39;;\nimport something from &#39;another-module&#39;;\nimport { find } from &#39;module&#39;;\n<code></code>`</p>\n\n<p>Example of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint no-duplicate-imports: &quot;error&quot;</em>/</p>\n\n<p>import { merge, find } from &#39;module&#39;;\nimport something from &#39;another-module&#39;;\n<code></code>`</p></section>	http://eslint.org/docs/rules/no-duplicate-imports
no-new-symbol	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p><code>Symbol</code> is not intended to be used with the <code>new</code> operator, but to be called as a function.</p>\n\n<p><code>js\nvar foo = new Symbol(&quot;foo&quot;);\n</code></p>\n\n<p>This throws a <code>TypeError</code> exception.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at preventing the accidental calling of <code>Symbol</code> with the <code>new</code> operator.</p></section>	http://eslint.org/docs/rules/no-new-symbol
no-restricted-imports	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>Imports are an ES6/ES2015 standard for making the functionality of other modules available in your current module. In CommonJS this is implemented through the require() call which makes this ESLint rule roughly equivalent to its CommonJS counterpart <code>no-restricted-modules</code>.</p>\n\n<p>Why would you want to restrict imports?</p>\n\n<ul><li><p>Some imports might not make sense in a particular environment. For example, Node.js&#39; <code>fs</code> module would not make sense in an environment that didn&#39;t have a file system.</p></li><li><p>Some modules provide similar or identical functionality, think <code>lodash</code> and <code>underscore</code>. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</p></li></ul>\n\n<h2>Rule Details</h2>\n\n<p>This rule allows you to specify imports that you don&#39;t want to use in your application.</p></section>	http://eslint.org/docs/rules/no-restricted-imports
no-this-before-super	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>In the constructor of derived classes, if <code>this</code>/<code>super</code> are used before <code>super()</code> calls, it raises a reference error.</p>\n\n<p>This rule checks <code>this</code>/<code>super</code> keywords in constructors, then reports those that are before <code>super()</code>.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag <code>this</code>/<code>super</code> keywords before <code>super()</code> callings.</p></section>	http://eslint.org/docs/rules/no-this-before-super
no-useless-computed-key	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>It&#39;s unnecessary to use computed properties with literals such as:</p>\n\n<p><code>js\nvar foo = {[&quot;a&quot;]: &quot;b&quot;};\n</code></p>\n\n<p>The code can be rewritten as:</p>\n\n<p><code>js\nvar foo = {&quot;a&quot;: &quot;b&quot;};\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows unnecessary usage of computed property keys.</p></section>	http://eslint.org/docs/rules/no-useless-computed-key
no-useless-constructor	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>ES2015 provides a default class constructor if one is not specified. As such, it is unnecessary to provide an empty constructor or one that simply delegates into its parent class, as in the following examples:</p>\n\n<p><code></code>`js\nclass A {\n    constructor () {\n    }\n}</p>\n\n<p>class A extends B {\n    constructor (value) {\n      super(value);\n    }\n}\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule flags class constructors that can be safely removed without changing how the class works.</p></section>	http://eslint.org/docs/rules/no-useless-constructor
no-useless-rename	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>ES2015 allows for the renaming of references in import and export statements as well as destructuring assignments. This gives programmers a concise syntax for performing these operations while renaming these references:</p>\n\n<p><code>js\nimport { foo as bar } from &quot;baz&quot;;\nexport { foo as bar };\nlet { foo: bar } = baz;\n</code></p>\n\n<p>With this syntax, it is possible to rename a reference to the same name. This is a completely redundant operation, as this is the same as not renaming at all. For example, this:</p>\n\n<p><code>js\nimport { foo as foo } from &quot;bar&quot;;\nexport { foo as foo };\nlet { foo: foo } = bar;\n</code></p>\n\n<p>is the same as:</p>\n\n<p><code>js\nimport { foo } from &quot;bar&quot;;\nexport { foo };\nlet { foo } = bar;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows the renaming of import, export, and destructured assignments to the same name.</p></section>	http://eslint.org/docs/rules/no-useless-rename
no-var	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes some instances of problems reported by this rule.</p>\n\n<p>ECMAScript 6 allows programmers to create variables with block scope instead of function scope using the <code>let</code>\nand <code>const</code> keywords. Block scope is common in many other programming languages and helps programmers avoid mistakes\nsuch as:</p>\n\n<p><code></code>`js\nvar count = people.length;\nvar enoughFood = count &gt; sandwiches.length;</p>\n\n<p>if (enoughFood) {\n    var count = sandwiches.length; // accidently overriding the count variable\n    console.log(&quot;We have &quot; + count + &quot; sandwiches for everyone. Plenty for all!&quot;);\n}</p>\n\n<p>// our count variable is no longer accurate\nconsole.log(&quot;We have &quot; + count + &quot; people and &quot; + sandwiches.length + &quot; sandwiches!&quot;);\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at discouraging the use of <code>var</code> and encouraging the use of <code>const</code> or <code>let</code> instead.</p></section>	http://eslint.org/docs/rules/no-var
object-shorthand	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>EcmaScript 6 provides a concise form for defining object literal methods and properties. This\nsyntax can make defining complex object literals much cleaner.</p>\n\n<p>Here are a few common examples using the ES5 syntax:</p>\n\n<p><code></code>`js\n// properties\nvar foo = {\n    x: x,\n    y: y,\n    z: z,\n};</p>\n\n<p>// methods\nvar foo = {\n    a: function() {},\n    b: function() {}\n};\n<code></code>`</p>\n\n<p>Now here are ES6 equivalents:</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>// properties\nvar foo = {x, y, z};</p>\n\n<p>// methods\nvar foo = {\n    a() {},\n    b() {}\n};\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces the use of the shorthand syntax. This applies\nto all methods (including generators) defined in object literals and any\nproperties defined where the key name matches name of the assigned variable.</p>\n\n<p>Each of the following properties would warn:</p>\n\n<p><code></code>`js\n/<em>eslint object-shorthand: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var foo = {\n    w: function() {},\n    x: function *() {},\n    [y]: function() {},\n    z: z\n};\n<code></code>`</p>\n\n<p>In that case the expected syntax would have been:</p>\n\n<p><code></code>`js\n/<em>eslint object-shorthand: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var foo = {\n    w() {},\n    *x() {},\n    <a href="">y</a> {},\n    z\n};\n<code></code>`</p>\n\n<p>This rule does not flag arrow functions inside of object literals.\nThe following will <em>not</em> warn:</p>\n\n<p><code></code>`js\n/<em>eslint object-shorthand: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>var foo = {\n    x: (y) =&gt; y\n};\n<code></code>`</p></section>	http://eslint.org/docs/rules/object-shorthand
prefer-arrow-callback	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Arrow functions are suited to callbacks, because:</p>\n\n<ul><li><code>this</code> keywords in arrow functions bind to the upper scope&#39;s.</li><li>The notation of the arrow function is shorter than function expression&#39;s.</li></ul>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag usage of function expressions in an argument list.</p>\n\n<p>The following patterns are considered problems:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-arrow-callback: &quot;error&quot;</em>/</p>\n\n<p>foo(function(a) { return a; });\nfoo(function() { return this.a; }.bind(this));\n<code></code>`</p>\n\n<p>The following patterns are not considered problems:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-arrow-callback: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>foo(a =&gt; a);\nfoo(function*() { yield; });</p>\n\n<p>// this is not a callback.\nvar foo = function foo(a) { return a; };</p>\n\n<p>// using <code>this</code> without <code>.bind(this)</code>.\nfoo(function() { return this.a; });</p>\n\n<p>// recursively.\nfoo(function bar(n) { return n &amp;&amp; n + bar(n - 1); });\n<code></code>`</p></section>	http://eslint.org/docs/rules/prefer-arrow-callback
prefer-const	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes some instances of problems reported by this rule.</p>\n\n<p>If a variable is never reassigned, using the <code>const</code> declaration is better.</p>\n\n<p><code>const</code> declaration tells readers, &quot;this variable is never reassigned,&quot; reducing cognitive load and improving maintainability.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed at flagging variables that are declared using <code>let</code> keyword, but never reassigned after the initial assignment.</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-const: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>// it&#39;s initialized and never reassigned.\nlet a = 3;\nconsole.log(a);</p>\n\n<p>let a;\na = 0;\nconsole.log(a);</p>\n\n<p>// <code>i</code> is redefined (not reassigned) on each loop step.\nfor (let i in [1, 2, 3]) {\n    console.log(i);\n}</p>\n\n<p>// <code>a</code> is redefined (not reassigned) on each loop step.\nfor (let a of [1, 2, 3]) {\n    console.log(a);\n}\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-const: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>// using const.\nconst a = 0;</p>\n\n<p>// it&#39;s never initialized.\nlet a;\nconsole.log(a);</p>\n\n<p>// it&#39;s reassigned after initialized.\nlet a;\na = 0;\na = 1;\nconsole.log(a);</p>\n\n<p>// it&#39;s initialized in a different block from the declaration.\nlet a;\nif (true) {\n    a = 0;\n}\nconsole.log(a);</p>\n\n<p>// it&#39;s initialized at a place that we cannot write a variable declaration.\nlet a;\nif (true) a = 0;\nconsole.log(a);</p>\n\n<p>// <code>i</code> gets a new binding each iteration\nfor (const i in [1, 2, 3]) {\n  console.log(i);\n}</p>\n\n<p>// <code>a</code> gets a new binding each iteration\nfor (const a of [1, 2, 3]) {\n  console.log(a);\n}</p>\n\n<p>// <code>end</code> is never reassigned, but we cannot separate the declarations without modifying the scope.\nfor (let i = 0, end = 10; i &lt; end; ++i) {\n    console.log(a);\n}</p>\n\n<p>// suggest to use <code>no-var</code> rule.\nvar b = 3;\nconsole.log(b);\n<code></code>`</p></section>	http://eslint.org/docs/rules/prefer-const
prefer-destructuring	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>With JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called <a href="#further-reading">destructuring</a>.  This rule enforces usage of destructuring instead of accessing a property through a member expression.</p>\n\n<h2>Rule Details</h2>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code><code>javascript\n// With </code>array` enabled\nvar foo = array[0];</p>\n\n<p>// With <code>object</code> enabled\nvar foo = object.foo;\nvar foo = object[&#39;foo&#39;];\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code><code>javascript\n// With </code>array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];</p>\n\n<p>// With <code>object</code> enabled\nvar { foo } = object;\nvar foo = object.bar;\n<code></code>`</p>\n\n<h3>Options</h3>\n\n<p>This rule takes two sets of configuration objects; the first controls the types that the rule is applied to, and the second controls the way those objects are evaluated.</p>\n\n<p>The first has two properties, <code>array</code> and <code>object</code>, which can be used to turn on or off the destructuring requirement for each of those types independently.  By default, both are <code>true</code>.</p>\n\n<p>The second has a single property, <code>enforceForRenamedProperties</code>, that controls whether or not the <code>object</code> destructuring rules are applied in cases where the variable requires the property being access to be renamed.</p>\n\n<p>Examples of <strong>incorrect</strong> code when <code>enforceForRenamedProperties</code> is enabled:</p>\n\n<p><code>javascript\nvar foo = object.bar;\n</code></p>\n\n<p>Examples of <strong>correct</strong> code when <code>enforceForRenamedProperties</code> is enabled:</p>\n\n<p><code>javascript\nvar { bar: foo } = object;\n</code></p>\n\n<p>An example configuration, with the defaults filled in, looks like this:</p>\n\n<p><code>json\n{\n  &quot;rules&quot;: {\n    &quot;prefer-destructuring&quot;: [&quot;error&quot;, {\n      &quot;array&quot;: true,\n      &quot;object&quot;: true\n    }, {\n      &quot;enforceForRenamedProperties&quot;: false\n    }]\n  }\n}\n</code></p></section>	http://eslint.org/docs/rules/prefer-destructuring
prefer-numeric-literals	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>The <code>parseInt()</code> function can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of <code>parseInt()</code>.</p>\n\n<p><code>js\n0b111110111 === 503;\n0o767 === 503;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule disallows <code>parseInt()</code> if it is called with two arguments: a string and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).</p>\n\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-numeric-literals: &quot;error&quot;</em>/</p>\n\n<p>parseInt(&quot;111110111&quot;, 2) === 503;\nparseInt(&quot;767&quot;, 8) === 503;\nparseInt(&quot;1F7&quot;, 16) === 255;\n<code></code>`</p>\n\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n\n<p><code></code>`js\n/<em>eslint prefer-numeric-literals: &quot;error&quot;</em>/\n/<em>eslint-env es6</em>/</p>\n\n<p>parseInt(1);\nparseInt(1, 3);</p>\n\n<p>0b111110111 === 503;\n0o767 === 503;\n0x1F7 === 503;</p>\n\n<p>a<a href="1,2">parseInt</a>;</p>\n\n<p>parseInt(foo);\nparseInt(foo, 2);\n<code></code>`</p></section>	http://eslint.org/docs/rules/prefer-numeric-literals
prefer-rest-params	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>There are rest parameters in ES2015.\nWe can use that feature for variadic functions instead of the <code>arguments</code> variable.</p>\n\n<p><code>arguments</code> does not have methods of <code>Array.prototype</code>, so it&#39;s a bit of an inconvenience.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag usage of <code>arguments</code> variables.</p></section>	http://eslint.org/docs/rules/prefer-rest-params
prefer-spread	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>Before ES2015, one must use <code>Function.prototype.apply()</code> to call variadic functions.</p>\n\n<p><code>js\nvar args = [1, 2, 3, 4];\nMath.max.apply(Math, args);\n</code></p>\n\n<p>In ES2015, one can use the spread operator to call variadic functions.</p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>var args = [1, 2, 3, 4];\nMath.max(...args);\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag usage of <code>Function.prototype.apply()</code> in situations where the spread operator could be used instead.</p></section>	http://eslint.org/docs/rules/prefer-spread
prefer-template	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>In ES2015 (ES6), we can use template literals instead of string concatenation.</p>\n\n<p><code>js\nvar str = &quot;Hello, &quot; + name + &quot;!&quot;;\n</code></p>\n\n<p><code></code>`js\n/<em>eslint-env es6</em>/</p>\n\n<p>var str = <code>Hello, ${name}!</code>;\n<code></code>`</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule is aimed to flag usage of <code>+</code> operators with strings.</p></section>	http://eslint.org/docs/rules/prefer-template
require-yield	A			ECMAScript 6\nRecommended Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><h2>Rule Details</h2>\n\n<p>This rule generates warnings for generator functions that do not have the <code>yield</code> keyword.</p></section>	http://eslint.org/docs/rules/require-yield
rest-spread-spacing	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>ES2015 introduced the rest and spread operators, which expand an iterable structure into its individual parts. Some examples of their usage are as follows:</p>\n\n<p><code></code>`js\nlet numArr = [1, 2, 3];\nfunction add(a, b, c) {\n    return a + b + c;\n}\nadd(...numArr); // -&gt; 6</p>\n\n<p>let arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\narr1.push(...arr2); // -&gt; [1, 2, 3, 4, 5, 6]</p>\n\n<p>let [a, b, ...arr] = [1, 2, 3, 4, 5];\na; // -&gt; 1\nb // -&gt; 2\narr; // -&gt;  [3, 4, 5]</p>\n\n<p>function numArgs(...args) {\n  return args.length;\n}\nnumArgs(a, b, c); // -&gt; 3\n<code></code>`</p>\n\n<p>In addition to the above, there is currently a proposal to add object rest and spread properties to the spec. They can be used as follows:</p>\n\n<p><code></code>`js</p>\n\n<p>let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // -&gt; 1\ny; // -&gt; 2\nz; // -&gt; { a: 3, b: 4 }</p>\n\n<p>let n = { x, y, ...z };\nn; // -&gt; { x: 1, y: 2, a: 3, b: 4 }\n<code></code>`</p>\n\n<p>As with other operators, whitespace is allowed between the rest or spread operator and the expression it is operating on, which can lead to inconsistent spacing within a codebase.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports the currently experimental object rest and spread properties when enabled:</p>\n\n<p><code>json\n{\n    &quot;parserOptions&quot;: {\n        &quot;ecmaVersion&quot;: 6,\n        &quot;ecmaFeatures&quot;: {\n            &quot;experimentalObjectRestSpread&quot;: true\n        }\n    }\n}\n</code></p>\n\n<p>Please read the user guide&#39;s section on <a href="http://eslint.org/docs/user-guide/configuring#specifying-parser-options">configuring parser options</a> to learn more.</p></section>	http://eslint.org/docs/rules/rest-spread-spacing
sort-imports	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</p>\n\n<p><code></code>`js\n// single - Import single member.\nimport myMember from &quot;my-module.js&quot;;</p>\n\n<p>// multiple - Import multiple members.\nimport {foo, bar} from &quot;my-module.js&quot;;</p>\n\n<p>// all - Import all members, where myModule contains all the exported bindings.\nimport * as myModule from &quot;my-module.js&quot;;\n<code></code>`</p>\n\n<p>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</p>\n\n<p><code>js\n// none - Import module without exported bindings.\nimport &quot;my-module.js&quot;\n</code></p>\n\n<p>When declaring multiple imports, a sorted list of import declarations make it easier for developers to read the code and find necessary imports later. This rule is purely a matter of style.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.</p></section>	http://eslint.org/docs/rules/sort-imports
symbol-description	A			ECMAScript 6						http://eslint.org/img/logo.svg	<section class="prog__container"><p>The <code>Symbol</code> function may have optional description:</p>\n\n<p><code></code>`js\nvar foo = Symbol(&quot;some description&quot;);</p>\n\n<p>var someString = &quot;some description&quot;;\nvar bar = Symbol(someString);\n<code></code>`</p>\n\n<p>Using <code>description</code> promotes easier debugging: when a symbol is logged the description is used:</p>\n\n<p><code></code>`js\nvar foo = Symbol(&quot;some description&quot;);</p>\n\n<blockquote><p>console.log(foo);\n// Symbol(some description)\n<code></code>`</p></blockquote>\n\n<p>It may facilitate identifying symbols when one is observed during debugging.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rules requires a description when creating symbols.</p></section>	http://eslint.org/docs/rules/symbol-description
template-curly-spacing	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<p>We can embed expressions in template strings with using a pair of <code>${</code> and <code>}</code>.</p>\n\n<p>This rule can force usage of spacing <em>within</em> the curly brace pair according to style guides.</p>\n\n<p><code>js\nlet hello = `hello, ${people.name}!`;\n</code></p>\n\n<h2>Rule Details</h2>\n\n<p>This rule aims to maintain consistency around the spacing inside of template literals.</p></section>	http://eslint.org/docs/rules/template-curly-spacing
yield-star-spacing	A			ECMAScript 6\nFixable Rules						http://eslint.org/img/logo.svg	<section class="prog__container"><p>(fixable) The <code>--fix</code> option on the <a href="../user-guide/command-line-interface#fix">command line</a> automatically fixes problems reported by this rule.</p>\n\n<h2>Rule Details</h2>\n\n<p>This rule enforces spacing around the <code>*</code> in <code>yield*</code> expressions.</p>\n\n<p>To use this rule you either need to <a href="../user-guide/configuring">use the <code>es6</code> environment</a> or\n<a href="../user-guide/configuring">set <code>ecmaVersion</code> to <code>6</code> in <code>parserOptions</code></a>.</p></section>	http://eslint.org/docs/rules/yield-star-spacing
