api	R	perlapi										
perlapi	A										<p>This file contains the documentation of the perl public API generated by <i>embed.pl</i>, specifically a listing of functions, macros, flags, and variables that may be used by extension writers.  At the end is a list of functions which have yet to be documented.  The interfaces of those are subject to change without notice.  Anything not listed here is not part of the public API, and should not be used by extension writers at all.  For these reasons, blindly using functions listed in proto.h is to be avoided when writing extensions.</p><i>embed.pl</i><p>Note that all Perl API global variables must be referenced with the <code class="inline"><span class="w">PL_</span></code>  prefix.	http://perldoc.perl.org/perlapi.html
apio	R	perlapio										
perlapio	A										<p>Perl&#39;s source code, and extensions that want maximum portability, should use the above functions instead of those defined in ANSI C&#39;s <i>stdio.h</i>.  The perl headers (in particular &quot;perlio.h&quot;) will <code class="inline"><span class="c">#define</span></code>  them to the I/O mechanism selected at Configure time.</p><i>stdio.h</i><p>The functions are modeled on those in <i>stdio.h</i>, but parameter order has been &quot;tidied up a little&quot;.</p><i>stdio.h</i><p><code class="inline"><span class="w">PerlIO</span> *</code>  takes the place of FILE *. Like FILE * it should be treated as opaque (it is probably safe to assume it is a pointer to something).</p><code class="inline"><span class="w">PerlIO</span> *</code><p>There are currently three implementations:</p><dt>1. </dt><b>USE_STDIO</b><p>All above are #define&#39;d to stdio functions or are trivial wrapper functions which call stdio.	http://perldoc.perl.org/perlapio.html
call	R	perlcall										
perlcall	A										<p>The purpose of this document is to show you how to call Perl subroutines directly from C, i.e., how to write <i>callbacks</i>.</p><i>callbacks</i><p>Apart from discussing the C interface provided by Perl for writing callbacks the document uses a series of examples to show how the interface actually works in practice.  In addition some techniques for coding callbacks are covered.</p><p>Examples where callbacks are necessary include</p><b>An Error Handler</b><p>You have created an XSUB interface to an application&#39;s C API.</p><p>A fairly common feature in applications is to allow you to define a C function that will be called whenever something nasty occurs. What we would like is to be able to specify a Perl subroutine that will be called instead.</p><b>An Event-Driven Program</b><p>The classic example of where callbacks are used is when writing an event driven program, such as for an X11 application.	http://perldoc.perl.org/perlcall.html
clib	R	perlclib										
perlclib	A										<p>One thing Perl porters should note is that <i>perl</i> doesn&#39;t tend to use that much of the C standard library internally; you&#39;ll see very little use of,  for example, the <i>ctype.h</i> functions in there. This is because Perl tends to reimplement or abstract standard library functions, so that we know exactly how they&#39;re going to operate.</p><i>perl</i><i>ctype.h</i><p>This is a reference card for people who are familiar with the C library and who want to do things the Perl way; to tell them which functions they ought to use instead of the more normal C functions.</p>	http://perldoc.perl.org/perlclib.html
debguts	R	perldebguts										
perldebguts	A										<p>This is not perldebug, which tells you how to use the debugger.  This manpage describes low-level details concerning the debugger&#39;s internals, which range from difficult to impossible to understand for anyone who isn&#39;t incredibly intimate with Perl&#39;s guts. Caveat lector.</p>	http://perldoc.perl.org/perldebguts.html
guts	R	perlguts										
perlguts	A										<p>This document attempts to describe how to use the Perl API, as well as to provide some info on the basic workings of the Perl core.  It is far from complete and probably contains many errors.  Please refer any questions or comments to the author below.</p>	http://perldoc.perl.org/perlguts.html
hack	R	perlhack										
perlhack	A										<p>This document explains how Perl development works.  It includes details about the Perl 5 Porters email list, the Perl repository, the Perlbug bug tracker, patch guidelines, and commentary on Perl development philosophy.</p>	http://perldoc.perl.org/perlhack.html
hacktips	R	perlhacktips										
perlhacktips	A										<p>This document will help you learn the best way to go about hacking on the Perl core C code.  It covers common problems, debugging, profiling, and more.</p><p>If you haven&#39;t read perlhack and <a href="perlhacktut.html">perlhacktut yet, you might want to do that first.</a></p><a href="perlhacktut.html">perlhacktut yet, you might want to do that first.</a>	http://perldoc.perl.org/perlhacktips.html
hacktut	R	perlhacktut										
perlhacktut	A										<p>This document takes you through a simple patch example.</p><p>If you haven&#39;t read perlhack yet, go do that first! You might also want to read through perlsource too.</p><p>Once you&#39;re done here, check out perlhacktips next.</p>	http://perldoc.perl.org/perlhacktut.html
intern	R	perlintern										
perlintern	A										<p>This file is the autogenerated documentation of functions in the Perl interpreter that are documented using Perl&#39;s internal documentation format but are not marked as part of the Perl API.  In other words, <b>they are not for use in extensions</b>!</p><b>they are not for use in extensions</b>	http://perldoc.perl.org/perlintern.html
interp	R	perlinterp										
perlinterp	A										<p>This document provides an overview of how the Perl interpreter works at the level of C code, along with pointers to the relevant C source code files.</p>	http://perldoc.perl.org/perlinterp.html
iol	R	perliol										
perliol	A										<p>This document describes the behavior and implementation of the PerlIO abstraction described in perlapio when <code class="inline"><span class="w">USE_PERLIO</span></code>  is defined.</p>	http://perldoc.perl.org/perliol.html
mroapi	R	perlmroapi										
perlmroapi	A										<p>As of Perl 5.10.1 there is a new interface for plugging and using method resolution orders other than the default (linear depth first search). The C3 method resolution order added in 5.10.0 has been re-implemented as a plugin, without changing its Perl-space interface.</p><p>Each plugin should register itself by providing the following structure</p><li>    struct mro_alg {</li><li>        AV *(*resolve)(pTHX_ HV *stash, U32 level);</li><li>        const char *name;</li><li>        U16 length;</li><li>        U16 kflags;</li><li>        U32 hash;</li><li>    };</li><p>and calling <code class="inline"><span class="w">Perl_mro_register</span></code> :</p><li>    <span class="i">Perl_mro_register</span><span class="s">(</span><span class="w">aTHX_</span> <span class="i">&amp;my_mro_alg</span><span class="s">)</span><span class="sc">;</span></li><span class="i">Perl_mro_register</span><span class="s">(</span><span class="w">aTHX_</span><span class="i">&amp;my_mro_alg</span><span class="s">)</span><span class="sc">;</span>	http://perldoc.perl.org/perlmroapi.html
op	R	perlop										
perlop	A										<p>In Perl, the operator determines what operation is performed, independent of the type of the operands.  For example <code class="inline"><span class="i">$x</span> + <span class="i">$y</span></code>  is always a numeric addition, and if <code class="inline"><span class="i">$x</span></code>  or <code class="inline"><span class="i">$y</span></code>  do not contain numbers, an attempt is made to convert them to numbers first.</p><code class="inline"><span class="i">$x</span> + <span class="i">$y</span></code><p>This is in contrast to many other dynamic languages, where the operation is determined by the type of the first argument.  It also means that Perl has two versions of some operators, one for numeric and one for string comparison.	http://perldoc.perl.org/perlop.html
policy	R	perlpolicy										
perlpolicy	A										<p>This document is the master document which records all written policies about how the Perl 5 Porters collectively develop and maintain the Perl core.</p>	http://perldoc.perl.org/perlpolicy.html
reapi	R	perlreapi										
perlreapi	A										<p>As of Perl 5.9.5 there is a new interface for plugging and using regular expression engines other than the default one.</p><p>Each engine is supposed to provide access to a constant structure of the following format:</p><li>    <span class="w">typedef</span> <span class="w">struct</span> <span class="i">regexp_engine</span> <span class="s">{</span></li><span class="w">typedef</span><span class="w">struct</span><span class="i">regexp_engine</span><span class="s">{</span><li>        <span class="w">REGEXP</span>* <span class="s">(</span><span class="i">*comp</span><span class="s">)</span> <span class="s">(</span><span class="w">pTHX_</span></li><span class="w">REGEXP</span><span class="s">(</span><span class="i">*comp</span><span class="s">)</span><span class="s">(</span><span class="w">pTHX_</span><li>                         <span class="w">const</span> <span class="w">SV</span> * <span class="w">const</span> <span class="w">pattern</span><span class="cm">,</span> <span class="w">const</span> <span class="w">U32</span> <span class="w">flags</span><span class="s">)</span><span class="sc">;</span></li><span class="w">const</span><span class="w">SV</span><span class="w">const</span><span class="w">pattern</span><span class="cm">,</span><span class="w">const</span><span class="w">U32</span>	http://perldoc.perl.org/perlreapi.html
reguts	R	perlreguts										
perlreguts	A										<p>This document is an attempt to shine some light on the guts of the regex engine and how it works. The regex engine represents a significant chunk of the perl codebase, but is relatively poorly understood. This document is a meagre attempt at addressing this situation. It is derived from the author&#39;s experience, comments in the source code, other papers on the regex engine, feedback on the perl5-porters mail list, and no doubt other places as well.</p><p><b>NOTICE!</b> It should be clearly understood that the behavior and structures discussed in this represents the state of the engine as the author understood it at the time of writing.	http://perldoc.perl.org/perlreguts.html
repository	R	perlrepository										
perlrepository	A										<p>Perl&#39;s source code is stored in a Git repository.</p><p>See perlhack for an explanation of Perl development, including the Super Quick Patch Guide for making and submitting a small patch.</p><p>See perlgit for detailed information about Perl&#39;s Git repository.</p><p>(The above documents supersede the information that was formerly here in perlrepository.)</p><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/perlrepository.html
source	R	perlsource										
perlsource	A										<p>This document describes the layout of the Perl source tree. If you&#39;re hacking on the Perl core, this will help you find what you&#39;re looking for.</p>	http://perldoc.perl.org/perlsource.html
xstut	R	perlxstut										
perlxstut	A										<p>This tutorial will educate the reader on the steps involved in creating a Perl extension.  The reader is assumed to have access to perlguts, perlapi and <a href="perlxs.html">perlxs.</a></p><a href="perlxs.html">perlxs.</a><p>This tutorial starts with very simple examples and becomes more complex, with each new example adding new features.  Certain concepts may not be completely explained until later in the tutorial in order to slowly ease the reader into building extensions.</p><p>This tutorial was written from a Unix point of view.  Where I know them to be otherwise different for other platforms (e.g. Win32), I will list them.  If you find something that was missed, please let me know.</p>	http://perldoc.perl.org/perlxstut.html
xstypemap	R	perlxstypemap										
perlxstypemap	A										<p>The more you think about interfacing between two languages, the more you&#39;ll realize that the majority of programmer effort has to go into converting between the data structures that are native to either of the languages involved.  This trumps other matter such as differing calling conventions because the problem space is so much greater. There are simply more ways to shove data into memory than there are ways to implement a function call.</p><p>Perl XS&#39; attempt at a solution to this is the concept of typemaps. At an abstract level, a Perl XS typemap is nothing but a recipe for converting from a certain Perl data structure to a certain C data structure and vice versa.	http://perldoc.perl.org/perlxstypemap.html
CORE	A										<p>The <code class="inline"><span class="w">CORE</span></code>  namespace gives access to the original built-in functions of Perl.  The <code class="inline"><span class="w">CORE</span></code>  package is built into Perl, and therefore you do not need to use or require a hypothetical &quot;CORE&quot; module prior to accessing routines in this namespace.</p><p>A list of the built-in functions in Perl can be found in perlfunc.</p><p>For all Perl keywords, a <code class="inline"><span class="w">CORE::</span></code>  prefix will force the built-in function to be used, even if it has been overridden or would normally require the feature pragma.  Despite appearances, this has nothing to do with the CORE package, but is part of Perl&#39;s syntax.</p><p>For many Perl functions, the CORE package contains real subroutines.	http://perldoc.perl.org/CORE.html
dbmfilter	R	perldbmfilter										
perldbmfilter	A										<p>The four <code class="inline"><span class="w">filter_</span>*</code>  methods shown above are available in all the DBM modules that ship with Perl, namely DB_File, GDBM_File, NDBM_File, ODBM_File and SDBM_File.</p><code class="inline"><span class="w">filter_</span>*</code><p>Each of the methods works identically, and is used to install (or uninstall) a single DBM Filter. The only difference between them is the place that the filter is installed.</p><p>To summarise:</p><b>filter_store_key</b><p>If a filter has been installed with this method, it will be invoked every time you write a key to a DBM database.</p><b>filter_store_value</b><p>If a filter has been installed with this method, it will be invoked every time you write a value to a DBM database.</p><b>filter_fetch_key</b><p>If a filter has been installed with this method, it will be invoked every time you read a key from a DBM database.</p><b>filter_fetch_value</b><p>If a filter has been installed with this method, it will be invoked every time you read a value from a DBM database.</p><p>You can use any combination of the methods from none to all four.</p><p>All filter methods return the existing filter, if present, or <code class="inline">undef</code> if not.</p><code class="inline">undef</code><p>To delete a filter pass <code class="inline">undef</code> to it.</p><code class="inline">undef</code>	http://perldoc.perl.org/perldbmfilter.html
debug	R	perldebug										
perldebug	A										<p>First of all, have you tried using the <b>-w</b> switch?</p><b>-w</b><p>If you&#39;re new to the Perl debugger, you may prefer to read perldebtut, which is a tutorial introduction to the debugger.</p>	http://perldoc.perl.org/perldebug.html
diag	R	perldiag										
perldiag	A										<p>These messages are classified as follows (listed in increasing order of desperation):</p><li>    (W) A warning (optional).</li><li>    (D) A deprecation (enabled by default).</li><li>    (S) A severe warning (enabled by default).</li><li>    (F) A fatal error (trappable).</li><li>    (P) An internal error you should never see (trappable).</li><li>    (X) A very fatal error (nontrappable).</li><li>    (A) An alien error message (not generated by Perl).</li><p>The majority of messages from the first three classifications above (W, D &amp; S) can be controlled using the <code class="inline"><span class="w">warnings</span></code>  pragma.</p><p>If a message can be controlled by the <code class="inline"><span class="w">warnings</span></code>  pragma, its warning category is included with the classification letter in the description below.	http://perldoc.perl.org/perldiag.html
dtrace	R	perldtrace										
perldtrace	A										<p>DTrace is a framework for comprehensive system- and application-level tracing. Perl is a DTrace <i>provider</i>, meaning it exposes several <i>probes</i> for instrumentation. You can use these in conjunction with kernel-level probes, as well as probes from other providers such as MySQL, in order to diagnose software defects, or even just your application&#39;s bottlenecks.</p><i>provider</i><i>probes</i><p>Perl must be compiled with the <code class="inline">-<span class="w">Dusedtrace</span></code>  option in order to make use of the provided probes. While DTrace aims to have no overhead when its instrumentation is not active, Perl&#39;s support itself cannot uphold that guarantee, so it is built without DTrace probes under most systems.	http://perldoc.perl.org/perldtrace.html
ebcdic	R	perlebcdic										
perlebcdic	A										<p>An exploration of some of the issues facing Perl programmers on EBCDIC based computers.</p><p>Portions of this document that are still incomplete are marked with XXX.</p><p>Early Perl versions worked on some EBCDIC machines, but the last known version that ran on EBCDIC was v5.8.7, until v5.22, when the Perl core again works on z/OS.  Theoretically, it could work on OS/400 or Siemens&#39; BS2000  (or their successors), but this is untested.  In v5.22, not all the modules found on CPAN but shipped with core Perl work on z/OS.</p><p>If you want to use Perl on a non-z/OS EBCDIC machine, please let us know by sending mail to perlbug@perl.org</p><p>Writing Perl on an EBCDIC platform is really no different than writing on an ASCII one, but with different underlying numbers, as we&#39;ll see shortly.	http://perldoc.perl.org/perlebcdic.html
experiment	R	perlexperiment										
perlexperiment	A										<p>This document lists the current and past experimental features in the perl core. Although all of these are documented with their appropriate topics, this succinct listing gives you an overview and basic facts about their status.</p><p>So far we&#39;ve merely tried to find and list the experimental features and infer their inception, versions, etc. There&#39;s a lot of speculation here.</p>	http://perldoc.perl.org/perlexperiment.html
filter	R	perlfilter										
perlfilter	A										<p>This article is about a little-known feature of Perl called <i>source filters</i>. Source filters alter the program text of a module before Perl sees it, much as a C preprocessor alters the source text of a C program before the compiler sees it. This article tells you more about what source filters are, how they work, and how to write your own.</p><i>source filters</i><p>The original purpose of source filters was to let you encrypt your program source to prevent casual piracy. This isn&#39;t all they can do, as you&#39;ll soon learn. But first, the basics.</p>	http://perldoc.perl.org/perlfilter.html
fork	R	perlfork										
perlfork	A										<p>The fork() emulation is implemented at the level of the Perl interpreter. What this means in general is that running fork() will actually clone the running interpreter and all its state, and run the cloned interpreter in a separate thread, beginning execution in the new thread just after the point where the fork() was called in the parent.  We will refer to the thread that implements this child &quot;process&quot; as the pseudo-process.</p><p>To the Perl program that called fork(), all this is designed to be transparent.  The parent returns from the fork() with a pseudo-process ID that can be subsequently used in any process-manipulation functions; the child returns from the fork() with a value of <code class="inline"><span class="n">0</span></code>  to signify that it is the child pseudo-process.</p>	http://perldoc.perl.org/perlfork.html
form	R	perlform										
perlform	A										<p>Perl has a mechanism to help you generate simple reports and charts.  To facilitate this, Perl helps you code up your output page close to how it will look when it&#39;s printed.  It can keep track of things like how many lines are on a page, what page you&#39;re on, when to print page headers, etc.  Keywords are borrowed from FORTRAN: format() to declare and write() to execute; see their entries in perlfunc.  Fortunately, the layout is much more legible, more like BASIC&#39;s PRINT USING statement.  Think of it as a poor man&#39;s nroff(1). </p><p>Formats, like packages and subroutines, are declared rather than executed, so they may occur at any point in your program.	http://perldoc.perl.org/perlform.html
func	R	perlfunc										
perlfunc	A										<p>The functions in this section can serve as terms in an expression. They fall into two major categories: list operators and named unary operators.  These differ in their precedence relationship with a following comma.  (See the precedence table in perlop.)  List operators take more than one argument, while unary operators can never take more than one argument.  Thus, a comma terminates the argument of a unary operator, but merely separates the arguments of a list operator.  A unary operator generally provides scalar context to its argument, while a list operator may provide either scalar or list contexts for its arguments.	http://perldoc.perl.org/perlfunc.html
glossary	R	perlglossary										
perlglossary	A										<p>A glossary of terms (technical and otherwise) used in the Perl documentation, derived from the Glossary of <i>Programming Perl</i>, Fourth Edition.  Words or phrases in bold are defined elsewhere in this glossary.</p><i>Programming Perl</i><p>Other useful sources include the Unicode Glossary http://unicode.org/glossary/, the Free On-Line Dictionary of Computing http://foldoc.org/, the Jargon File http://catb.org/~esr/jargon/, and Wikipedia http://www.wikipedia.org/.</p>	http://perldoc.perl.org/perlglossary.html
ipc	R	perlipc										
perlipc	A										<p>The basic IPC facilities of Perl are built out of the good old Unix signals, named pipes, pipe opens, the Berkeley socket routines, and SysV IPC calls.  Each is used in slightly different situations.</p>	http://perldoc.perl.org/perlipc.html
lexwarn	R	perllexwarn										
perllexwarn	A										<p>Perl v5.6.0 introduced lexical control over the handling of warnings by category.  The <code class="inline"><span class="w">warnings</span></code>  pragma generally replaces the command line flag <b>-w</b>.  Documentation on the use of lexical warnings, once partly found in this document, is now found in the warnings documentation.</p><b>-w</b><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/perllexwarn.html
locale	R	perllocale										
perllocale	A										<p>In the beginning there was ASCII, the &quot;American Standard Code for Information Interchange&quot;, which works quite well for Americans with their English alphabet and dollar-denominated currency.  But it doesn&#39;t work so well even for other English speakers, who may use different currencies, such as the pound sterling (as the symbol for that currency is not in ASCII); and it&#39;s hopelessly inadequate for many of the thousands of the world&#39;s other languages.</p><p>To address these deficiencies, the concept of locales was invented (formally the ISO C, XPG4, POSIX 1.c &quot;locale system&quot;).  And applications were and are being written that use the locale mechanism.	http://perldoc.perl.org/perllocale.html
mod	R	perlmod										
perlmod	A										<h2>Is this the document you were after?</h2><p>There are other documents which might contain the information that you&#39;re looking for:</p>	http://perldoc.perl.org/perlmod.html
modinstall	R	perlmodinstall										
perlmodinstall	A										<p>You can think of a module as the fundamental unit of reusable Perl code; see perlmod for details.  Whenever anyone creates a chunk of Perl code that they think will be useful to the world, they register as a Perl developer at http://www.cpan.org/modules/04pause.html so that they can then upload their code to the CPAN.  The CPAN is the Comprehensive Perl Archive Network and can be accessed at http://www.cpan.org/ , and searched at <a href="http://search.cpan.org/">http://search.cpan.org/ .</a></p><a href="http://search.cpan.org/">http://search.cpan.org/ .</a><p>This documentation is for people who want to download CPAN modules and install them on their own computer.</p>	http://perldoc.perl.org/perlmodinstall.html
newmod	R	perlnewmod										
perlnewmod	A										<p>This document gives you some suggestions about how to go about writing Perl modules, preparing them for distribution, and making them available via CPAN.</p><p>One of the things that makes Perl really powerful is the fact that Perl hackers tend to want to share the solutions to problems they&#39;ve faced, so you and I don&#39;t have to battle with the same problem again.</p><p>The main way they do this is by abstracting the solution into a Perl module. If you don&#39;t know what one of these is, the rest of this document isn&#39;t going to be much use to you. You&#39;re also missing out on an awful lot of useful code; consider having a look at perlmod, perlmodlib and <a href="perlmodinstall.html">perlmodinstall before coming back here.</a></p><a href="perlmodinstall.html">perlmodinstall before coming back here.</a><p>When you&#39;ve found that there isn&#39;t a module available for what you&#39;re trying to do, and you&#39;ve had to write the code yourself, consider packaging up the solution into a module and uploading it to CPAN so that others can benefit.</p><p>You should also take a look at perlmodstyle for best practices in making a module.</p>	http://perldoc.perl.org/perlnewmod.html
number	R	perlnumber										
perlnumber	A										<p>This document describes how Perl internally handles numeric values.</p><p>Perl&#39;s operator overloading facility is completely ignored here.  Operator overloading allows user-defined behaviors for numbers, such as operations over arbitrarily large integers, floating points numbers with arbitrary precision, operations over &quot;exotic&quot; numbers such as modular arithmetic or p-adic arithmetic, and so on.  See overload for details.</p>	http://perldoc.perl.org/perlnumber.html
obj	R	perlobj										
perlobj	A										<p>This document provides a reference for Perl&#39;s object orientation features. If you&#39;re looking for an introduction to object-oriented programming in Perl, please see perlootut.</p><p>In order to understand Perl objects, you first need to understand references in Perl. See perlref for details.</p><p>This document describes all of Perl&#39;s object-oriented (OO) features from the ground up. If you&#39;re just looking to write some object-oriented code of your own, you are probably better served by using one of the object systems from CPAN described in perlootut.</p><p>If you&#39;re looking to write your own object system, or you need to maintain code which implements objects from scratch then this document will help you understand exactly how Perl does object orientation.</p><p>There are a few basic principles which define object oriented Perl:</p><dt>1.</dt><p>An object is simply a data structure that knows to which class it belongs.</p><dt>2.</dt><p>A class is simply a package.	http://perldoc.perl.org/perlobj.html
perf	R	perlperf										
perlperf	A										<p>This is an introduction to the use of performance and optimization techniques which can be used with particular reference to perl programs.  While many perl developers have come from other languages, and can use their prior knowledge where appropriate, there are many other people who might benefit from a few perl specific pointers.  If you want the condensed version, perhaps the best advice comes from the renowned Japanese Samurai, Miyamoto Musashi, who said:</p><li>    <span class="q">&quot;Do Not Engage in Useless Activity&quot;</span></li><span class="q">&quot;Do Not Engage in Useless Activity&quot;</span><p>in 1645.</p>	http://perldoc.perl.org/perlperf.html
pod	R	perlpod										
perlpod	A										<p>Pod is a simple-to-use markup language used for writing documentation for Perl, Perl programs, and Perl modules.</p><p>Translators are available for converting Pod to various formats like plain text, HTML, man pages, and more.</p><p>Pod markup consists of three basic kinds of paragraphs: ordinary, verbatim, and  command.</p>	http://perldoc.perl.org/perlpod.html
podspec	R	perlpodspec										
perlpodspec	A										<p>This document is detailed notes on the Pod markup language.  Most people will only have to read perlpod to know how to write in Pod, but this document may answer some incidental questions to do with parsing and rendering Pod.</p><p>In this document, &quot;must&quot; / &quot;must not&quot;, &quot;should&quot; / &quot;should not&quot;, and &quot;may&quot; have their conventional (cf. RFC 2119) meanings: &quot;X must do Y&quot; means that if X doesn&#39;t do Y, it&#39;s against this specification, and should really be fixed.  &quot;X should do Y&quot; means that it&#39;s recommended, but X may fail to do Y, if there&#39;s a good reason.	http://perldoc.perl.org/perlpodspec.html
podstyle	R	perlpodstyle										
perlpodstyle	A										<p>These are general guidelines for how to write POD documentation for Perl scripts and modules, based on general guidelines for writing good UNIX man pages.  All of these guidelines are, of course, optional, but following them will make your documentation more consistent with other documentation on the system.</p><p>The name of the program being documented is conventionally written in bold (using B&lt;&gt;) wherever it occurs, as are all program options. Arguments should be written in italics (I&lt;&gt;).  Function names are traditionally written in italics; if you write a function as function(), Pod::Man will take care of this for you.	http://perldoc.perl.org/perlpodstyle.html
port	R	perlport										
perlport	A										<p>Perl runs on numerous operating systems.  While most of them share much in common, they also have their own unique features.</p><p>This document is meant to help you to find out what constitutes portable Perl code.  That way once you make a decision to write portably, you know where the lines are drawn, and you can stay within them.</p><p>There is a tradeoff between taking full advantage of one particular type of computer and taking advantage of a full range of them. Naturally, as you broaden your range and become more diverse, the common factors drop, and you are left with an increasingly smaller area of common ground in which you can operate to accomplish a particular task.	http://perldoc.perl.org/perlport.html
re	R	perlre										
perlre	A										<p>This page describes the syntax of regular expressions in Perl.</p><p>If you haven&#39;t used regular expressions before, a quick-start introduction is available in perlrequick, and a longer tutorial introduction is available in perlretut.</p><p>For reference on how regular expressions are used in matching operations, plus various examples of the same, see discussions of <code class="inline">m//</code>, <code class="inline"><a class="l_k" href="functions/s.html">s///</a></code>, <code class="inline"><a class="l_k" href="functions/qr.html">qr//</a></code> and <code class="inline"><span class="q">??</span></code>  in Regexp Quote-Like Operators in perlop.</p><code class="inline">m//</code><a class="l_k" href="functions/s.html">s///</a><a class="l_k" href="functions/qr.html">qr//</a><p>New in v5.22, use re &#39;strict&#39;  applies stricter rules than otherwise when compiling regular expression patterns.  It can find things that, while legal, may not be what you intended.</p>	http://perldoc.perl.org/perlre.html
rebackslash	R	perlrebackslash										
perlrebackslash	A										<p>The top level documentation about Perl regular expressions is found in perlre.</p><p>This document describes all backslash and escape sequences. After explaining the role of the backslash, it lists all the sequences that have a special meaning in Perl regular expressions (in alphabetical order), then describes each of them.</p><p>Most sequences are described in detail in different documents; the primary purpose of this document is to have a quick reference guide describing all backslash and escape sequences.</p>	http://perldoc.perl.org/perlrebackslash.html
recharclass	R	perlrecharclass										
perlrecharclass	A										<p>The top level documentation about Perl regular expressions is found in perlre.</p><p>This manual page discusses the syntax and use of character classes in Perl regular expressions.</p><p>A character class is a way of denoting a set of characters in such a way that one character of the set is matched. It&#39;s important to remember that: matching a character class consumes exactly one character in the source string. (The source string is the string the regular expression is matched against.)</p><p>There are three types of character classes in Perl regular expressions: the dot, backslash sequences, and the form enclosed in square brackets.  Keep in mind, though, that often the term &quot;character class&quot; is used to mean just the bracketed form.	http://perldoc.perl.org/perlrecharclass.html
ref	R	perlref										
perlref	A										<p>Before release 5 of Perl it was difficult to represent complex data structures, because all references had to be symbolic--and even then it was difficult to refer to a variable instead of a symbol table entry. Perl now not only makes it easier to use symbolic references to variables, but also lets you have &quot;hard&quot; references to any piece of data or code. Any scalar may hold a hard reference.  Because arrays and hashes contain scalars, you can now easily build arrays of arrays, arrays of hashes, hashes of arrays, arrays of hashes of functions, and so on.</p><p>Hard references are smart--they keep track of reference counts for you, automatically freeing the thing referred to when its reference count goes to zero.	http://perldoc.perl.org/perlref.html
reref	R	perlreref										
perlreref	A										<p>This is a quick reference to Perl&#39;s regular expressions. For full information see perlre and <a href="perlop.html">perlop, as well as the SEE ALSO section in this document.</a></p><a href="perlop.html">perlop, as well as the SEE ALSO section in this document.</a>	http://perldoc.perl.org/perlreref.html
sec	R	perlsec										
perlsec	A										<p>Perl is designed to make it easy to program securely even when running with extra privileges, like setuid or setgid programs.  Unlike most command line shells, which are based on multiple substitution passes on each line of the script, Perl uses a more conventional evaluation scheme with fewer hidden snags.  Additionally, because the language has more builtin functionality, it can rely less upon external (and possibly untrustworthy) programs to accomplish its purposes.</p>	http://perldoc.perl.org/perlsec.html
sub	R	perlsub										
perlsub	A										<p>Like many languages, Perl provides for user-defined subroutines. These may be located anywhere in the main program, loaded in from other files via the <code class="inline">do</code>, <code class="inline"><a class="l_k" href="functions/require.html">require</a></code>, or <code class="inline"><a class="l_k" href="functions/use.html">use</a></code> keywords, or generated on the fly using <code class="inline">eval</code> or anonymous subroutines. You can even call a function indirectly using a variable containing its name or a CODE reference.</p><code class="inline">do</code><a class="l_k" href="functions/require.html">require</a><a class="l_k" href="functions/use.html">use</a><code class="inline">eval</code><p>The Perl model for function call and return values is simple: all functions are passed as parameters one single flat list of scalars, and all functions likewise return to their caller one single flat list of scalars.	http://perldoc.perl.org/perlsub.html
syn	R	perlsyn										
perlsyn	A										<p>A Perl program consists of a sequence of declarations and statements which run from the top to the bottom.  Loops, subroutines, and other control structures allow you to jump around within the code.</p><p>Perl is a <b>free-form</b> language: you can format and indent it however you like.  Whitespace serves mostly to separate tokens, unlike languages like Python where it is an important part of the syntax, or Fortran where it is immaterial.</p><b>free-form</b><p>Many of Perl&#39;s syntactic elements are <b>optional</b>.  Rather than requiring you to put parentheses around every function call and declare every variable, you can often leave such explicit elements off and Perl will figure out what you meant.	http://perldoc.perl.org/perlsyn.html
tie	R	perltie										
perltie	A										<p>Prior to release 5.0 of Perl, a programmer could use dbmopen() to connect an on-disk database in the standard Unix dbm(3x) format magically to a %HASH in their program.  However, their Perl was either built with one particular dbm library or another, but not both, and you couldn&#39;t extend this mechanism to other packages or types of variables.</p><p>Now you can.</p><p>The tie() function binds a variable to a class (package) that will provide the implementation for access methods for that variable.  Once this magic has been performed, accessing a tied variable automatically triggers method calls in the proper class.	http://perldoc.perl.org/perltie.html
unicode	R	perlunicode										
perlunicode	A										<p>If you haven&#39;t already, before reading this document, you should become familiar with both perlunitut and <a href="perluniintro.html">perluniintro.</a></p><a href="perluniintro.html">perluniintro.</a><p>Unicode aims to <b>UNI</b>-fy the en-<b>CODE</b>-ings of all the world&#39;s character sets into a single Standard.   For quite a few of the various coding standards that existed when Unicode was first created, converting from each to Unicode essentially meant adding a constant to each code point in the original standard, and converting back meant just subtracting that same constant.  For ASCII and ISO-8859-1, the constant is 0.  For ISO-8859-5, (Cyrillic) the constant is 864; for Hebrew (ISO-8859-8), it&#39;s 1488; Thai (ISO-8859-11), 3424; and so forth.	http://perldoc.perl.org/perlunicode.html
unicook	R	perlunicook										
perlunicook	A										<p>This manpage contains short recipes demonstrating how to handle common Unicode operations in Perl, plus one complete program at the end. Any undeclared variables in individual recipes are assumed to have a previous appropriate value in them.</p>	http://perldoc.perl.org/perlunicook.html
uniintro	R	perluniintro										
perluniintro	A										<p>This document gives a general idea of Unicode and how to use Unicode in Perl.  See Further Resources for references to more in-depth treatments of Unicode.</p>	http://perldoc.perl.org/perluniintro.html
uniprops	R	perluniprops										
perluniprops	A										<p>This document provides information about the portion of the Unicode database that deals with character properties, that is the portion that is defined on single code points.  (Other information in the Unicode data base below briefly mentions other data that Unicode provides.)</p><p>Perl can provide access to all non-provisional Unicode character properties, though not all are enabled by default.  The omitted ones are the Unihan properties (accessible via the CPAN module Unicode::Unihan) and certain deprecated or Unicode-internal properties.  (An installation may choose to recompile Perl&#39;s tables to change this.  See Unicode character properties that are NOT accepted by Perl.)</p><p>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section.	http://perldoc.perl.org/perluniprops.html
attributes	A										<p>Subroutine declarations and definitions may optionally have attribute lists associated with them.  (Variable <code class="inline">my</code> declarations also may, but see the warning below.)  Perl handles these declarations by passing some information about the call site and the thing being declared along with the attribute list to this module.  In particular, the first example above is equivalent to the following:</p><code class="inline">my</code><li>    use <span class="w">attributes</span> <span class="w">__PACKAGE__</span><span class="cm">,</span> \<span class="i">&amp;foo</span><span class="cm">,</span> <span class="q">&#39;method&#39;</span><span class="sc">;</span></li><span class="w">attributes</span><span class="w">__PACKAGE__</span><span class="cm">,</span><span class="i">&amp;foo</span><span class="cm">,</span><span class="q">&#39;method&#39;</span><span class="sc">;</span><p>The second example in the synopsis does something equivalent to this:</p><li>    use <span class="w">attributes</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><span class="w">attributes</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span><li>    <a class="l_k" href="functions/my.html">my <span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="i">%z</span><span class="s">)</span><span class="sc">;</span></a></li><a class="l_k" href="functions/my.html">my <span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="i">%z</span><span class="s">)</span><span class="sc">;</span></a><span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="i">%z</span><span class="s">)</span><span class="sc">;</span><li>    <span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span> \<span class="i">$x</span><span class="cm">,</span> <span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span></li><span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span><span class="i">$x</span><span class="cm">,</span><span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span><li>    <span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span> \<span class="i">@y</span><span class="cm">,</span> <span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span></li><span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span><li>    <span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span> \<span class="i">%z</span><span class="cm">,</span> <span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span></li><span class="i">attributes::-&gt;import</span><span class="s">(</span><span class="w">__PACKAGE__</span><span class="cm">,</span><span class="i">%z</span><span class="cm">,</span><span class="q">&#39;Bent&#39;</span><span class="s">)</span><span class="sc">;</span><li>    <span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="i">%z</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span></li><span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="i">@y</span><span class="cm">,</span><span class="i">%z</span><span class="s">)</span><span class="n">1</span><span class="sc">;</span><p>Yes, that&#39;s a lot of expansion.</p><p><b>WARNING</b>: attribute declarations for variables are still evolving.	http://perldoc.perl.org/attributes.html
autodie	A										<li>        bIlujDI&#39; yIchegh()Qo&#39;; yIHegh()!</li><li>        It is better to die() than to return() in failure.</li><li>                -- Klingon programming proverb.</li><p>The <code class="inline"><span class="w">autodie</span></code>  pragma provides a convenient way to replace functions that normally return false on failure with equivalents that throw an exception on failure.</p><p>The <code class="inline"><span class="w">autodie</span></code>  pragma has <i>lexical scope</i>, meaning that functions and subroutines altered with <code class="inline"><span class="w">autodie</span></code>  will only change their behaviour until the end of the enclosing block, file, or <code class="inline">eval</code>.</p><i>lexical scope</i><code class="inline">eval</code><p>If <code class="inline">system</code> is specified as an argument to <code class="inline"><span class="w">autodie</span></code> , then it uses IPC::System::Simple to do the heavy lifting.	http://perldoc.perl.org/autodie.html
autouse	A										<p>If the module <code class="inline"><span class="w">Module</span></code>  is already loaded, then the declaration</p><li>  use <span class="w">autouse</span> <span class="q">&#39;Module&#39;</span> <span class="cm">=&gt;</span> <span class="q">qw(func1 func2($;$))</span><span class="sc">;</span></li><span class="w">autouse</span><span class="q">&#39;Module&#39;</span><span class="cm">=&gt;</span><span class="q">qw(func1 func2($;$))</span><span class="sc">;</span><p>is equivalent to</p><li>  use <span class="w">Module</span> <span class="q">qw(func1 func2)</span><span class="sc">;</span></li><span class="w">Module</span><span class="q">qw(func1 func2)</span><span class="sc">;</span><p>if <code class="inline"><span class="w">Module</span></code>  defines func2() with prototype <code class="inline">($;$)</code>, and func1() has no prototypes.  (At least if <code class="inline"><span class="w">Module</span></code>  uses <code class="inline"><span class="w">Exporter</span></code> &#39;s <code class="inline">import</code>, otherwise it is a fatal error.)</p><code class="inline">($;$)</code><code class="inline">import</code><p>If the module <code class="inline"><span class="w">Module</span></code>  is not loaded yet, then the above declaration declares functions func1() and func2() in the current package.	http://perldoc.perl.org/autouse.html
base	A										<p>Unless you are using the <code class="inline"><span class="w">fields</span></code>  pragma, consider this module discouraged in favor of the lighter-weight <code class="inline"><span class="w">parent</span></code> .</p><p>Allows you to both load one or more modules, while setting up inheritance from those modules at the same time.  Roughly similar in effect to</p><li>require <span class="w">Foo</span><span class="sc">;</span></li><span class="w">Foo</span><span class="sc">;</span><li>        <a class="l_k" href="functions/require.html">require</a> <span class="w">Bar</span><span class="sc">;</span></li><a class="l_k" href="functions/require.html">require</a><span class="w">Bar</span><span class="sc">;</span><li>        <a class="l_k" href="functions/push.html">push <span class="i">@ISA</span><span class="cm">,</span> <span class="q">qw(Foo Bar)</span><span class="sc">;</span></a></li><a class="l_k" href="functions/push.html">push <span class="i">@ISA</span><span class="cm">,</span> <span class="q">qw(Foo Bar)</span><span class="sc">;</span></a><span class="i">@ISA</span><span class="cm">,</span><span class="q">qw(Foo Bar)</span><span class="sc">;</span><li>    <span class="s">}</span></li><span class="s">}</span><p>When <code class="inline"><span class="w">base</span></code>  tries to <code class="inline">require</code> a module, it will not die if it cannot find the module&#39;s file, but will die on any other error.	http://perldoc.perl.org/base.html
bigint	A										<p>All operators (including basic math operations) except the range operator <code class="inline">..</code>  are overloaded. Integer constants are created as proper BigInts.</p><code class="inline">..</code><p>Floating point constants are truncated to integer. All parts and results of expressions are also truncated.</p><p>Unlike integer, this pragma creates integer constants that are only limited in their size by the available memory and CPU time.</p>	http://perldoc.perl.org/bigint.html
bignum	A										<p>All operators (including basic math operations) are overloaded. Integer and floating-point constants are created as proper BigInts or BigFloats, respectively.</p><p>If you do</p><li>        use <span class="w">bignum</span><span class="sc">;</span></li><span class="w">bignum</span><span class="sc">;</span><p>at the top of your script, Math::BigFloat and Math::BigInt will be loaded and any constant number will be converted to an object (Math::BigFloat for floats like 3.1415 and Math::BigInt for integers like 1234).</p><p>So, the following line:</p><li>        <span class="i">$x</span> = <span class="n">1234</span><span class="sc">;</span></li><span class="i">$x</span><span class="n">1234</span><span class="sc">;</span><p>creates actually a Math::BigInt and stores a reference to in $x. This happens transparently and behind your back, so to speak.</p><p>You can see this with the following:</p><li>        <span class="w">perl</span> -<span class="w">Mbignum</span> -le <span class="q">&#39;print ref(1234)&#39;</span></li><span class="w">perl</span><span class="w">Mbignum</span><span class="q">&#39;print ref(1234)&#39;</span><p>Don&#39;t worry if it says Math::BigInt::Lite, bignum and friends will use Lite if it is installed since it is faster for some operations.	http://perldoc.perl.org/bignum.html
bigrat	A										<p>All operators (including basic math operations) are overloaded. Integer and floating-point constants are created as proper BigInts or BigFloats, respectively.</p><p>Other than bignum, this module upgrades to Math::BigRat, meaning that instead of 2.5 you will get 2+1/2 as output.</p>	http://perldoc.perl.org/bigrat.html
blib	A										<p>Looks for MakeMaker-like <i>&#39;blib&#39;</i> directory structure starting in <i>dir</i> (or current directory) and working back up to five levels of &#39;..&#39;.</p><i>&#39;blib&#39;</i><i>dir</i><p>Intended for use on command line with <b>-M</b> option as a way of testing arbitrary scripts against an uninstalled version of a package.</p><b>-M</b><p>However it is possible to :</p><li> use <span class="w">blib</span><span class="sc">;</span></li><span class="w">blib</span><span class="sc">;</span><li> or</li><li> <a class="l_k" href="functions/use.html">use <span class="w">blib</span> <span class="q">&#39;..&#39;</span><span class="sc">;</span></a></li><a class="l_k" href="functions/use.html">use <span class="w">blib</span> <span class="q">&#39;..&#39;</span><span class="sc">;</span></a><span class="w">blib</span><span class="q">&#39;..&#39;</span><span class="sc">;</span><p>etc. if you really must.</p>	http://perldoc.perl.org/blib.html
bytes	A										<p>The <code class="inline">use <span class="w">bytes</span></code>  pragma disables character semantics for the rest of the lexical scope in which it appears.  <code class="inline">no <span class="w">bytes</span></code>  can be used to reverse the effect of <code class="inline">use <span class="w">bytes</span></code>  within the current lexical scope.</p><code class="inline">use <span class="w">bytes</span></code><code class="inline">no <span class="w">bytes</span></code><code class="inline">use <span class="w">bytes</span></code><p>Perl normally assumes character semantics in the presence of character data (i.e. data that has come from a source that has been marked as being of a particular character encoding). When <code class="inline">use <span class="w">bytes</span></code>  is in effect, the encoding is temporarily ignored, and each string is treated as a series of bytes.</p><code class="inline">use <span class="w">bytes</span></code><p>As an example, when Perl sees <code class="inline"><span class="i">$x</span> = chr<span class="s">(</span><span class="n">400</span><span class="s">)</span></code> , it encodes the character in UTF-8 and stores it in $x.	http://perldoc.perl.org/bytes.html
charnames	A										<p>Pragma <code class="inline">use <span class="w">charnames</span></code>  is used to gain access to the names of the Unicode characters and named character sequences, and to allow you to define your own character and character sequence names.</p><code class="inline">use <span class="w">charnames</span></code><p>All forms of the pragma enable use of the following 3 functions:</p><p>charnames::string_vianame(name) for run-time lookup of a either a character name or a named character sequence, returning its string representation</p><p>charnames::vianame(name) for run-time lookup of a character name (but not a named character sequence) to get its ordinal value (code point)</p><p>charnames::viacode(code) for run-time lookup of a code point to get its Unicode name.</p><p>Starting in Perl v5.16, any occurrence of <code class="inline">\N{<i>CHARNAME</i>}</code> sequences in a double-quotish string automatically loads this module with arguments <code class="inline"><span class="j">:</span><span class="w">full</span></code>  and <code class="inline"><span class="j">:</span><span class="w">short</span></code>  (described below) if it hasn&#39;t already been loaded with different arguments, in order to compile the named Unicode character into position in the string.	http://perldoc.perl.org/charnames.html
constant	A										<p>This pragma allows you to declare constants at compile-time.</p><p>When you declare a constant such as <code class="inline"><span class="w">PI</span></code>  using the method shown above, each machine your script runs upon can have as many digits of accuracy as it can use.  Also, your program will be easier to read, more likely to be maintained (and maintained correctly), and far less likely to send a space probe to the wrong planet because nobody noticed the one equation in which you wrote <code class="inline"><span class="n">3.14195</span></code> .</p><p>When a constant is used in an expression, Perl replaces it with its value at compile time, and may then optimize the expression further.	http://perldoc.perl.org/constant.html
diagnostics	A										<h2>The <code class="inline"><span class="w">diagnostics</span></code>  Pragma</h2><p>This module extends the terse diagnostics normally emitted by both the perl compiler and the perl interpreter (from running perl with a -w  switch or <code class="inline">use <span class="w">warnings</span></code> ), augmenting them with the more explicative and endearing descriptions found in perldiag.  Like the other pragmata, it affects the compilation phase of your program rather than merely the execution phase.</p><code class="inline">use <span class="w">warnings</span></code><p>To use in your program as a pragma, merely invoke</p><li>    use <span class="w">diagnostics</span><span class="sc">;</span></li><span class="w">diagnostics</span><span class="sc">;</span><p>at the start (or near the start) of your program.  (Note  that this <i>does</i> enable perl&#39;s <b>-w</b> flag.)  Your whole compilation will then be subject(ed :-) to the enhanced diagnostics.	http://perldoc.perl.org/diagnostics.html
encoding	A										<p>This pragma is used to enable a Perl script to be written in encodings that aren&#39;t strictly ASCII nor UTF-8.  It translates all or portions of the Perl program script from a given encoding into UTF-8, and changes the PerlIO layers of <code class="inline"><span class="w">STDIN</span></code>  and <code class="inline"><span class="w">STDOUT</span></code>  to the encoding specified.</p><p>This pragma dates from the days when UTF-8-enabled editors were uncommon.  But that was long ago, and the need for it is greatly diminished.  That, coupled with the fact that it doesn&#39;t work with threads, along with other problems, (see BUGS) have led to its being deprecated.	http://perldoc.perl.org/encoding.html
feature	A										<p>It is usually impossible to add new syntax to Perl without breaking some existing programs.  This pragma provides a way to minimize that risk. New syntactic constructs, or new semantic meanings to older constructs, can be enabled by <code class="inline">use <span class="w">feature</span> <span class="q">&#39;foo&#39;</span></code> , and will be parsed only when the appropriate feature pragma is in scope.  (Nevertheless, the <code class="inline"><span class="w">CORE::</span></code>  prefix provides access to all Perl keywords, regardless of this pragma.)</p><code class="inline">use <span class="w">feature</span> <span class="q">&#39;foo&#39;</span></code>	http://perldoc.perl.org/feature.html
fields	A										<p>The <code class="inline"><span class="w">fields</span></code>  pragma enables compile-time and run-time verified class fields.</p><p>NOTE: The current implementation keeps the declared fields in the %FIELDS hash of the calling package, but this may change in future versions. Do <b>not</b> update the %FIELDS hash directly, because it must be created at compile-time for it to be fully useful, as is done by this pragma.</p><b>not</b><p>If a typed lexical variable (<code class="inline">my <span class="w">Class</span> <span class="i">$var</span></code> ) holding a reference is used to access a hash element and a package with the same name as the type has declared class fields using this pragma, then the hash key is verified at compile time.	http://perldoc.perl.org/fields.html
filetest	A										<p>This pragma tells the compiler to change the behaviour of the filetest permission operators, <code class="inline">-r</code>  <code class="inline">-w</code>  <code class="inline">-x</code>  <code class="inline">-R</code>  <code class="inline">-W</code>  <code class="inline">-X</code> (see perlfunc).</p><code class="inline">-r</code><code class="inline">-w</code><code class="inline">-x</code><code class="inline">-R</code><code class="inline">-W</code><code class="inline">-X</code><p>The default behaviour of file test operators is to use the simple mode bits as returned by the stat() family of system calls.  However, many operating systems have additional features to define more complex access rights, for example ACLs (Access Control Lists). For such environments, <code class="inline">use <span class="w">filetest</span></code>  may help the permission operators to return results more consistent with other tools.</p><code class="inline">use <span class="w">filetest</span></code><p>The <code class="inline">use <span class="w">filetest</span></code>  or <code class="inline">no <span class="w">filetest</span></code>  statements affect file tests defined in their block, up to the end of the closest enclosing block (they are lexically block-scoped).</p><code class="inline">use <span class="w">filetest</span></code><code class="inline">no <span class="w">filetest</span></code><p>Currently, only the <code class="inline"><span class="w">access</span></code>  sub-pragma is implemented.	http://perldoc.perl.org/filetest.html
if	A										<p>The <code class="inline">if</code>  module is used to conditionally load or unload another module. The construct</p><code class="inline">if</code><li>  use if <span class="w">CONDITION</span><span class="cm">,</span> <span class="w">MODULE</span> <span class="cm">=&gt;</span> <span class="w">ARGUMENTS</span><span class="sc">;</span></li><span class="w">CONDITION</span><span class="cm">,</span><span class="w">MODULE</span><span class="cm">=&gt;</span><span class="w">ARGUMENTS</span><span class="sc">;</span><p>will load MODULE only if CONDITION evaluates to true. The above statement has no effect unless <code class="inline"><span class="w">CONDITION</span></code>  is true. If the CONDITION does evaluate to true, then the above line has the same effect as:</p><li>  use <span class="w">MODULE</span> <span class="w">ARGUMENTS</span><span class="sc">;</span></li><span class="w">MODULE</span><span class="w">ARGUMENTS</span><span class="sc">;</span><p>The use of <code class="inline"><span class="cm">=&gt;</span></code>  above provides necessary quoting of <code class="inline"><span class="w">MODULE</span></code> . If you don&#39;t use the fat comma (eg you don&#39;t have any ARGUMENTS), then you&#39;ll need to quote the MODULE.</p>	http://perldoc.perl.org/if.html
integer	A										<p>This tells the compiler to use integer operations from here to the end of the enclosing BLOCK.  On many machines, this doesn&#39;t matter a great deal for most computations, but on those without floating point hardware, it can make a big difference in performance.</p><p>Note that this only affects how most of the arithmetic and relational <b>operators</b> handle their operands and results, and <b>not</b> how all numbers everywhere are treated.  Specifically, <code class="inline">use <span class="w">integer</span><span class="sc">;</span></code>  has the effect that before computing the results of the arithmetic operators (+, -, *, /, %, +=, -=, *=, /=, %=, and unary minus), the comparison operators (&lt;, &lt;=, &gt;, &gt;=, ==, !=, &lt;=&gt;), and the bitwise operators (|, &amp;, ^, &lt;&lt;,&gt;&gt;, |=, &amp;=, ^=, &lt;&lt;=,&gt;&gt;=), the operands have their fractional portions truncated (or floored), and the result will have its fractional portion truncated as well.	http://perldoc.perl.org/integer.html
less	A										<p>This is a user-pragma. If you&#39;re very lucky some code you&#39;re using will know that you asked for less CPU usage or ram or fat or... we just can&#39;t know. Consult your documentation on everything you&#39;re currently using.</p><p>For general suggestions, try requesting <code class="inline"><span class="w">CPU</span></code>  or <code class="inline"><span class="w">memory</span></code> .</p><li>    use <span class="w">less</span> <span class="q">&#39;memory&#39;</span><span class="sc">;</span></li><span class="w">less</span><span class="q">&#39;memory&#39;</span><span class="sc">;</span><li>    <a class="l_k" href="functions/use.html">use</a> <span class="w">less</span> <span class="q">&#39;CPU&#39;</span><span class="sc">;</span></li><a class="l_k" href="functions/use.html">use</a><span class="w">less</span><span class="q">&#39;CPU&#39;</span><span class="sc">;</span><li>    <a class="l_k" href="functions/use.html">use <span class="w">less</span> <span class="q">&#39;fat&#39;</span><span class="sc">;</span></a></li><a class="l_k" href="functions/use.html">use <span class="w">less</span> <span class="q">&#39;fat&#39;</span><span class="sc">;</span></a><span class="w">less</span><span class="q">&#39;fat&#39;</span><span class="sc">;</span><p>If you ask for nothing in particular, you&#39;ll be asking for <code class="inline"><span class="w">less</span> <span class="q">&#39;please&#39;</span></code> .</p><li>    use <span class="w">less</span> <span class="q">&#39;please&#39;</span><span class="sc">;</span></li><span class="w">less</span><span class="q">&#39;please&#39;</span><span class="sc">;</span>	http://perldoc.perl.org/less.html
lib	A										<p>This is a small simple module which simplifies the manipulation of @INC at compile time.</p><p>It is typically used to add extra directories to perl&#39;s search path so that later <code class="inline">use</code> or <code class="inline"><a class="l_k" href="functions/require.html">require</a></code> statements will find modules which are not located on perl&#39;s default search path.</p><code class="inline">use</code><a class="l_k" href="functions/require.html">require</a><h2>Adding directories to @INC</h2><p>The parameters to <code class="inline">use <span class="w">lib</span></code>  are added to the start of the perl search path. Saying</p><code class="inline">use <span class="w">lib</span></code><li>    use <span class="w">lib</span> <span class="w">LIST</span><span class="sc">;</span></li><span class="w">lib</span><span class="w">LIST</span><span class="sc">;</span><p>is <i>almost</i> the same as saying</p><i>almost</i><li>    BEGIN <span class="s">{</span> unshift<span class="s">(</span><span class="i">@INC</span><span class="cm">,</span> <span class="w">LIST</span><span class="s">)</span> <span class="s">}</span></li><span class="s">{</span><span class="s">(</span><span class="i">@INC</span><span class="cm">,</span><span class="w">LIST</span><span class="s">)</span><span class="s">}</span><p>For each directory in LIST (called $dir here) the lib module also checks to see if a directory called $dir/$archname/auto exists.	http://perldoc.perl.org/lib.html
locale	A										<p>This pragma tells the compiler to enable (or disable) the use of POSIX locales for built-in operations (for example, LC_CTYPE for regular expressions, LC_COLLATE for string comparison, and LC_NUMERIC for number formatting).  Each &quot;use locale&quot; or &quot;no locale&quot; affects statements to the end of the enclosing BLOCK.</p><p>See perllocale for more detailed information on how Perl supports locales.</p><p>On systems that don&#39;t have locales, this pragma will cause your operations to behave as if in the &quot;C&quot; locale; attempts to change the locale will fail.</p><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/locale.html
mro	A										<p>The &quot;mro&quot; namespace provides several utilities for dealing with method resolution order and method caching in general.</p><p>These interfaces are only available in Perl 5.9.5 and higher. See MRO::Compat on CPAN for a mostly forwards compatible implementation for older Perls.</p>	http://perldoc.perl.org/mro.html
open	A										<p>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which is now the default).</p><p>The <code class="inline">open</code> pragma serves as one of the interfaces to declare default &quot;layers&quot; (also known as &quot;disciplines&quot;) for all I/O. Any two-argument open(), readpipe() (aka qx//) and similar operators found within the lexical scope of this pragma will use the declared defaults. Even three-argument opens may be affected by this pragma when they don&#39;t specify IO layers in MODE.</p><code class="inline">open</code><p>With the <code class="inline"><span class="w">IN</span></code>  subpragma you can declare the default layers of input streams, and with the <code class="inline"><span class="w">OUT</span></code>  subpragma you can declare the default layers of output streams.	http://perldoc.perl.org/open.html
ops	A										<p>Since the <code class="inline"><span class="w">ops</span></code>  pragma currently has an irreversible global effect, it is only of significant practical use with the <code class="inline">-M</code>  option on the command line.</p><code class="inline">-M</code><p>See the Opcode module for information about opcodes, optags, opmasks and important information about safety.</p>	http://perldoc.perl.org/ops.html
overload	A										<p>This pragma allows overloading of Perl&#39;s operators for a class. To overload built-in functions, see Overriding Built-in Functions in perlsub instead.</p>	http://perldoc.perl.org/overload.html
overloading	A										<p>This pragma allows you to lexically disable or enable overloading.</p><li>no <span class="w">overloading</span>  <p>Disables overloading entirely in the current lexical scope.</p> </li><span class="w">overloading</span><p>Disables overloading entirely in the current lexical scope.</p><li>no <span class="w">overloading</span> <span class="i">@ops</span>  <p>Disables only specific overloads in the current lexical scope.</p> </li><span class="w">overloading</span><span class="i">@ops</span><p>Disables only specific overloads in the current lexical scope.</p><li>use <span class="w">overloading</span>  <p>Reenables overloading in the current lexical scope.</p> </li><span class="w">overloading</span><p>Reenables overloading in the current lexical scope.</p><li>use <span class="w">overloading</span> <span class="i">@ops</span>  <p>Reenables overloading only for specific ops in the current lexical scope.</p> </li><span class="w">overloading</span><span class="i">@ops</span><p>Reenables overloading only for specific ops in the current lexical scope.</p><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/overloading.html
parent	A										<p>Allows you to both load one or more modules, while setting up inheritance from those modules at the same time.  Mostly similar in effect to</p><li>require <span class="w">Foo</span><span class="sc">;</span></li><span class="w">Foo</span><span class="sc">;</span><li>        <a class="l_k" href="functions/require.html">require</a> <span class="w">Bar</span><span class="sc">;</span></li><a class="l_k" href="functions/require.html">require</a><span class="w">Bar</span><span class="sc">;</span><li>        <a class="l_k" href="functions/push.html">push <span class="i">@ISA</span><span class="cm">,</span> <span class="q">qw(Foo Bar)</span><span class="sc">;</span></a></li><a class="l_k" href="functions/push.html">push <span class="i">@ISA</span><span class="cm">,</span> <span class="q">qw(Foo Bar)</span><span class="sc">;</span></a><span class="i">@ISA</span><span class="cm">,</span><span class="q">qw(Foo Bar)</span><span class="sc">;</span><li>    <span class="s">}</span></li><span class="s">}</span><p>By default, every base class needs to live in a file of its own. If you want to have a subclass and its parent class in the same file, you can tell <code class="inline"><span class="w">parent</span></code>  not to load any modules by using the <code class="inline">-<span class="w">norequire</span></code>  switch:</p><code class="inline">-<span class="w">norequire</span></code><li>use <span class="w">parent</span> -<span class="w">norequire</span><span class="cm">,</span> <span class="q">&#39;Foo&#39;</span><span class="cm">,</span> <span class="q">&#39;Bar&#39;</span><span class="sc">;</span></li><span class="w">parent</span><span class="w">norequire</span><span class="cm">,</span><span class="q">&#39;Foo&#39;</span><span class="cm">,</span><span class="q">&#39;Bar&#39;</span><span class="sc">;</span><li>  <span class="c"># will not go looking for Foo.pm or Bar.pm</span></li><span class="c"># will not go looking for Foo.pm or Bar.pm</span><p>This is equivalent to the following code:</p><li>push <span class="i">@DoesNotLoadFooBar::ISA</span><span class="cm">,</span> <span class="q">&#39;Foo&#39;</span><span class="cm">,</span> <span class="q">&#39;Bar&#39;</span><span class="sc">;</span></li><span class="i">@DoesNotLoadFooBar::ISA</span><span class="cm">,</span><span class="q">&#39;Foo&#39;</span><span class="cm">,</span><span class="q">&#39;Bar&#39;</span><span class="sc">;</span><p>This is also helpful for the case where a package lives within a differently named file:</p><li>use <span class="w">Tie::Hash</span><span class="sc">;</span></li><span class="w">Tie::Hash</span><span class="sc">;</span><li>  <a class="l_k" href="functions/use.html">use <span class="w">parent</span> -<span class="w">norequire</span><span class="cm">,</span> <span class="q">&#39;Tie::StdHash&#39;</span><span class="sc">;</span></a></li><a class="l_k" href="functions/use.html">use <span class="w">parent</span> -<span class="w">norequire</span><span class="cm">,</span> <span class="q">&#39;Tie::StdHash&#39;</span><span class="sc">;</span></a><span class="w">parent</span><span class="w">norequire</span><span class="cm">,</span><span class="q">&#39;Tie::StdHash&#39;</span><span class="sc">;</span><p>This is equivalent to the following code:</p><li>require <span class="w">Tie::Hash</span><span class="sc">;</span></li><span class="w">Tie::Hash</span><span class="sc">;</span><li>  <a class="l_k" href="functions/push.html">push</a> <span class="i">@ISA</span><span class="cm">,</span> <span class="q">&#39;Tie::StdHash&#39;</span><span class="sc">;</span></li><a class="l_k" href="functions/push.html">push</a><span class="i">@ISA</span><span class="cm">,</span><span class="q">&#39;Tie::StdHash&#39;</span><span class="sc">;</span><p>If you want to load a subclass from a file that <code class="inline"><a class="l_k" href="functions/require.html">require</a></code> would not consider an eligible filename (that is, it does not end in either <code class="inline">.pm</code> or <code class="inline">.pmc</code>), use the following code:</p><a class="l_k" href="functions/require.html">require</a><code class="inline">.pm</code><code class="inline">.pmc</code><li>require <span class="q">&#39;./plugins/custom.plugin&#39;</span><span class="sc">;</span> <span class="c"># contains Plugin::Custom</span></li><span class="q">&#39;./plugins/custom.plugin&#39;</span><span class="sc">;</span><span class="c"># contains Plugin::Custom</span><li>  <a class="l_k" href="functions/use.html">use</a> <span class="w">parent</span> -<span class="w">norequire</span><span class="cm">,</span> <span class="q">&#39;Plugin::Custom&#39;</span><span class="sc">;</span></li><a class="l_k" href="functions/use.html">use</a><span class="w">parent</span><span class="w">norequire</span><span class="cm">,</span><span class="q">&#39;Plugin::Custom&#39;</span><span class="sc">;</span><a name="DIAGNOSTICS"><h1>DIAGNOSTICS</h1> <ul> <li><a name="Class-&#39;Foo&#39;-tried-to-inherit-from-itself"></a><b>Class &#39;Foo&#39; tried to inherit from itself</b> <p>Attempting to inherit from yourself generates a warning.</p> <pre class="verbatim"><ol><li>use <span class="w">parent</span> <span class="q">&#39;Foo&#39;</span><span class="sc">;</span></li></ol></pre></li> </ul> <a name="HISTORY"></a><h1>HISTORY</h1> <p>This module was forked from base to remove the cruft that had accumulated in it.</p> <a name="CAVEATS"></a><h1>CAVEATS</h1> <a name="SEE-ALSO"></a><h1>SEE ALSO</h1> <p>base</p> <a name="AUTHORS-AND-CONTRIBUTORS"></a><h1>AUTHORS AND CONTRIBUTORS</h1> <p>Rafaël Garcia-Suarez, Bart Lateur, Max Maischein, Anno Siegel, Michael Schwern</p> <a name="MAINTAINER"></a><h1>MAINTAINER</h1> <p>Max Maischein <code class="inline"> <span class="w">corion</span><span class="i">@cpan</span>.<span class="w">org</span> </code> </p> <p>Copyright (c) 2007-10 Max Maischein <code class="inline"><span class="q">&lt;corion@cpan.org&gt;</span></code>  Based on the idea of <code class="inline"><span class="w">base</span>.<span class="w">pm</span></code> , which was introduced with Perl 5.004_04.</p> <a name="LICENSE"></a><h1>LICENSE</h1> <p>This module is released under the same terms as Perl itself.</p>       <div class="hud_container" id="page_index">     <div class="hud_header" id="page_index_header">       <div class="hud_close" id="page_index_close"><a href="#" onclick="pageIndex.hide();return false;"></a></div>       <div class="hud_title" id="page_index_title"><span class="hud_span_top">Page index</span></div>       <div class="hud_topright" id="page_index_topright"></div>     </div>     <div class="hud_content" id="page_index_content">       <ul><li>NAME</li><li><a href="#SYNOPSIS">SYNOPSIS</a></li><li><a href="#DESCRIPTION">DESCRIPTION</a></li><li><a href="#DIAGNOSTICS">DIAGNOSTICS</a></li><li><a href="#HISTORY">HISTORY</a></li><li><a href="#CAVEATS">CAVEATS</a></li><li><a href="#SEE-ALSO">SEE ALSO</a></li><li><a href="#AUTHORS-AND-CONTRIBUTORS">AUTHORS AND CONTRIBUTORS</a></li><li><a href="#MAINTAINER">MAINTAINER</a></li><li><a href="#LICENSE">LICENSE</a></li></ul>     </div>     <div class="hud_footer" id="page_index_footer">       <div class="hud_bottomleft" id="page_index_bottomleft"></div>       <div class="hud_bottom" id="page_index_bottom"><span class="hud_span_bottom"></span></div>       <div class="hud_resize" id="page_index_resize"></div>     </div>   </div>                    </a>	http://perldoc.perl.org/parent.html
sigtrap	A										<p>The <b>sigtrap</b> pragma is a simple interface to installing signal handlers.  You can have it install one of two handlers supplied by <b>sigtrap</b> itself (one which provides a Perl stack trace and one which simply <code class="inline">die()</code>s), or alternately you can supply your own handler for it to install.  It can be told only to install a handler for signals which are either untrapped or ignored.  It has a couple of lists of signals to trap, plus you can supply your own list of signals.</p><b>sigtrap</b><b>sigtrap</b><code class="inline">die()</code><p>The arguments passed to the <code class="inline">use</code> statement which invokes <b>sigtrap</b> are processed in order.	http://perldoc.perl.org/sigtrap.html
sort	A										<p>With the <code class="inline">sort</code> pragma you can control the behaviour of the builtin <code class="inline">sort()</code> function.</p><code class="inline">sort</code><code class="inline">sort()</code><p>In Perl versions 5.6 and earlier the quicksort algorithm was used to implement <code class="inline">sort()</code>, but in Perl 5.8 a mergesort algorithm was also made available, mainly to guarantee worst case O(N log N) behaviour: the worst case of quicksort is O(N**2).  In Perl 5.8 and later, quicksort defends against quadratic behaviour by shuffling large arrays before sorting.</p><code class="inline">sort()</code><p>A stable sort means that for records that compare equal, the original input ordering is preserved.  Mergesort is stable, quicksort is not. Stability will matter only if elements that compare equal can be distinguished in some other way.	http://perldoc.perl.org/sort.html
strict	A										<p>If no import list is supplied, all possible restrictions are assumed. (This is the safest mode to operate in, but is sometimes too strict for casual programming.)  Currently, there are three possible things to be strict about:  &quot;subs&quot;, &quot;vars&quot;, and &quot;refs&quot;.</p><p>This generates a runtime error if you  use symbolic references (see perlref).</p><li>    use <span class="w">strict</span> <span class="q">&#39;refs&#39;</span><span class="sc">;</span></li><span class="w">strict</span><span class="q">&#39;refs&#39;</span><span class="sc">;</span><li>    <span class="i">$ref</span> = \<span class="i">$foo</span><span class="sc">;</span></li><span class="i">$ref</span><span class="i">$foo</span><span class="sc">;</span><li>    <a class="l_k" href="functions/print.html">print</a> <span class="i">$$ref</span><span class="sc">;</span> <span class="c"># ok</span></li><a class="l_k" href="functions/print.html">print</a><span class="i">$$ref</span><span class="sc">;</span><span class="c"># ok</span><li>    <span class="i">$ref</span> = <span class="q">&quot;foo&quot;</span><span class="sc">;</span></li><span class="i">$ref</span><span class="q">&quot;foo&quot;</span><span class="sc">;</span><li>    <a class="l_k" href="functions/print.html">print</a> <span class="i">$$ref</span><span class="sc">;</span> <span class="c"># runtime error; normally ok</span></li><a class="l_k" href="functions/print.html">print</a><span class="i">$$ref</span><span class="sc">;</span><span class="c"># runtime error; normally ok</span><li>    <span class="i">$file</span> = <span class="q">&quot;STDOUT&quot;</span><span class="sc">;</span></li><span class="i">$file</span><span class="q">&quot;STDOUT&quot;</span><span class="sc">;</span><li>    <a class="l_k" href="functions/print.html">print <span class="i">$file</span> <span class="q">&quot;Hi!&quot;</span><span class="sc">;</span> <span class="c"># error; note: no comma after $file</span></a></li><a class="l_k" href="functions/print.html">print <span class="i">$file</span> <span class="q">&quot;Hi!&quot;</span><span class="sc">;</span> <span class="c"># error; note: no comma after $file</span></a><span class="i">$file</span><span class="q">&quot;Hi!&quot;</span><span class="sc">;</span><span class="c"># error; note: no comma after $file</span><p>There is one exception to this rule:</p><li>    <span class="i">$bar</span> = \<span class="i">&amp;</span>{<span class="q">&#39;foo&#39;</span>}<span class="sc">;</span></li><span class="i">$bar</span><span class="i">&amp;</span><span class="q">&#39;foo&#39;</span><span class="sc">;</span><li>    <span class="i">&amp;$bar</span><span class="sc">;</span></li><span class="i">&amp;$bar</span><span class="sc">;</span><p>is allowed so that <code class="inline">goto <span class="i">&amp;$AUTOLOAD</span></code>  would not break under stricture.</p><code class="inline">goto <span class="i">&amp;$AUTOLOAD</span></code><p>This generates a compile-time error if you access a variable that was neither explicitly declared (using any of <code class="inline">my</code>, <code class="inline"><a class="l_k" href="functions/our.html">our</a></code>, <code class="inline"><a class="l_k" href="functions/state.html">state</a></code>, or <code class="inline"><a class="l_k" href="functions/use.html">use <span class="w">vars</span></a></code> ) nor fully qualified.	http://perldoc.perl.org/strict.html
subs	A										<p>This will predeclare all the subroutine whose names are  in the list, allowing you to use them without parentheses even before they&#39;re declared.</p><p>Unlike pragmas that affect the <code class="inline"><span class="i">$^H</span></code>  hints variable, the <code class="inline">use <span class="w">vars</span></code>  and <code class="inline">use <span class="w">subs</span></code>  declarations are not BLOCK-scoped.  They are thus effective for the entire package in which they appear.  You may not rescind such declarations with <code class="inline">no <span class="w">vars</span></code>  or <code class="inline">no <span class="w">subs</span></code> .</p><code class="inline">use <span class="w">vars</span></code><code class="inline">use <span class="w">subs</span></code><code class="inline">no <span class="w">vars</span></code><code class="inline">no <span class="w">subs</span></code><p>See Pragmatic Modules in perlmodlib and <a href="strict.html#strict-subs">strict subs in strict.</a></p><a href="strict.html#strict-subs">strict subs in strict.</a><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/subs.html
threads	A										<p>Since Perl 5.8, thread programming has been available using a model called <i>interpreter threads</i> which provides a new Perl interpreter for each thread, and, by default, results in no data or state information being shared between threads.</p><i>interpreter threads</i><p>(Prior to Perl 5.8, <i>5005threads</i> was available through the <code class="inline"><span class="w">Thread</span>.<span class="w">pm</span></code>  API. This threading model has been deprecated, and was removed as of Perl 5.10.0.)</p><i>5005threads</i><code class="inline"><span class="w">Thread</span>.<span class="w">pm</span></code><p>As just mentioned, all variables are, by default, thread local.  To use shared variables, you need to also load threads::shared:</p><li>    use <span class="w">threads</span><span class="sc">;</span></li><span class="w">threads</span><span class="sc">;</span><li>    <a class="l_k" href="functions/use.html">use</a> <span class="w">threads::shared</span><span class="sc">;</span></li><a class="l_k" href="functions/use.html">use</a><span class="w">threads::shared</span><span class="sc">;</span><p>When loading <a href="threads/shared.html">threads::shared</a>, you must <code class="inline"><a class="l_k" href="functions/use.html">use <span class="w">threads</span></a></code>  before you <code class="inline">use <span class="w">threads::shared</span></code> .	http://perldoc.perl.org/threads.html
threads::shared	A										<p>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable.  This module allows you to share variables across different threads (and pseudo-forks on Win32).  It is used together with the threads module.</p><p>This module supports the sharing of the following data types only:  scalars and scalar refs, arrays and array refs, and hashes and hash refs.</p>	http://perldoc.perl.org/threads_shared.html
utf8	A										<p>The <code class="inline">use <span class="w">utf8</span></code>  pragma tells the Perl parser to allow UTF-8 in the program text in the current lexical scope (allow UTF-EBCDIC on EBCDIC based platforms).  The <code class="inline">no <span class="w">utf8</span></code>  pragma tells Perl to switch back to treating the source text as literal bytes in the current lexical scope.</p><code class="inline">use <span class="w">utf8</span></code><code class="inline">no <span class="w">utf8</span></code><p><b>Do not use this pragma for anything else than telling Perl that your script is written in UTF-8.</b> The utility functions described below are directly usable without <code class="inline">use <span class="w">utf8</span><span class="sc">;</span></code> .</p><b>Do not use this pragma for anything else than telling Perl that your script is written in UTF-8.</b><code class="inline">use <span class="w">utf8</span><span class="sc">;</span></code><p>Because it is not possible to reliably tell UTF-8 from native 8 bit encodings, you need either a Byte Order Mark at the beginning of your source code, or <code class="inline">use <span class="w">utf8</span><span class="sc">;</span></code> , to instruct perl.</p><code class="inline">use <span class="w">utf8</span><span class="sc">;</span></code><p>When UTF-8 becomes the standard source format, this pragma will effectively become a no-op.	http://perldoc.perl.org/utf8.html
vars	A										<p>NOTE: For use with variables in the current package for a single scope, the functionality provided by this pragma has been superseded by <code class="inline">our</code> declarations, available in Perl v5.6.0 or later, and use of this pragma is discouraged.  See our.</p><code class="inline">our</code><p>This will predeclare all the variables whose names are  in the list, allowing you to use them under &quot;use strict&quot;, and disabling any typo warnings.</p><p>Unlike pragmas that affect the <code class="inline"><span class="i">$^H</span></code>  hints variable, the <code class="inline">use <span class="w">vars</span></code>  and <code class="inline">use <span class="w">subs</span></code>  declarations are not BLOCK-scoped.  They are thus effective for the entire file in which they appear.	http://perldoc.perl.org/vars.html
vmsish	A										<p>If no import list is supplied, all possible VMS-specific features are assumed.  Currently, there are four VMS-specific features available: &#39;status&#39; (a.k.a &#39;$?&#39;), &#39;exit&#39;, &#39;time&#39; and &#39;hushed&#39;.</p><p>If you&#39;re not running VMS, this module does nothing.</p><p>This makes <code class="inline"><span class="i">$?</span></code>  and <code class="inline">system</code> return the native VMS exit status instead of emulating the POSIX exit status.</p><code class="inline">system</code><li>exit  <p>This makes <code class="inline">exit <span class="n">1</span></code>  produce a successful exit (with status SS$_NORMAL), instead of emulating UNIX exit(), which considers <code class="inline">exit <span class="n">1</span></code>  to indicate an error.  As with the CRTL&#39;s exit() function, <code class="inline">exit <span class="n">0</span></code>  is also mapped to an exit status of SS$_NORMAL, and any other argument to exit() is used directly as Perl&#39;s exit status.</p> </li><p>This makes <code class="inline">exit <span class="n">1</span></code>  produce a successful exit (with status SS$_NORMAL), instead of emulating UNIX exit(), which considers <code class="inline">exit <span class="n">1</span></code>  to indicate an error.	http://perldoc.perl.org/vmsish.html
warnings	A										<p>The <code class="inline"><span class="w">warnings</span></code>  pragma gives control over which warnings are enabled in which parts of a Perl program.  It&#39;s a more flexible alternative for both the command line flag <b>-w</b> and the equivalent Perl variable, <code class="inline"><span class="i">$^W</span></code> .</p><b>-w</b><p>This pragma works just like the <code class="inline"><span class="w">strict</span></code>  pragma. This means that the scope of the warning pragma is limited to the enclosing block.  It also means that the pragma setting will not leak across files (via <code class="inline">use</code>, <code class="inline"><a class="l_k" href="functions/require.html">require</a></code> or <code class="inline"><a class="l_k" href="functions/do.html">do</a></code>).  This allows authors to independently define the degree of warning checks that will be applied to their module.</p><code class="inline">use</code><a class="l_k" href="functions/require.html">require</a><a class="l_k" href="functions/do.html">do</a><p>By default, optional warnings are disabled, so any legacy code that doesn&#39;t attempt to control the warnings will work unchanged.</p><p>All warnings are enabled in a block by either of these:</p><li>    use <span class="w">warnings</span><span class="sc">;</span></li><span class="w">warnings</span><span class="sc">;</span><li>    <a class="l_k" href="functions/use.html">use <span class="w">warnings</span> <span class="q">&#39;all&#39;</span><span class="sc">;</span></a></li><a class="l_k" href="functions/use.html">use <span class="w">warnings</span> <span class="q">&#39;all&#39;</span><span class="sc">;</span></a><span class="w">warnings</span><span class="q">&#39;all&#39;</span><span class="sc">;</span><p>Similarly all warnings are disabled in a block by either of these:</p><li>    no <span class="w">warnings</span><span class="sc">;</span></li><span class="w">warnings</span><span class="sc">;</span><li>    <a class="l_k" href="functions/no.html">no <span class="w">warnings</span> <span class="q">&#39;all&#39;</span><span class="sc">;</span></a></li><a class="l_k" href="functions/no.html">no <span class="w">warnings</span> <span class="q">&#39;all&#39;</span><span class="sc">;</span></a><span class="w">warnings</span><span class="q">&#39;all&#39;</span><span class="sc">;</span><p>For example, consider the code below:</p><li>    use <span class="w">warnings</span><span class="sc">;</span></li><span class="w">warnings</span><span class="sc">;</span><li>    <a class="l_k" href="functions/my.html">my</a> <span class="i">@a</span><span class="sc">;</span></li><a class="l_k" href="functions/my.html">my</a><span class="i">@a</span><span class="sc">;</span><li>    <span class="s">{</span></li><span class="s">{</span><li>        <a class="l_k" href="functions/no.html">no</a> <span class="w">warnings</span><span class="sc">;</span></li><a class="l_k" href="functions/no.html">no</a><span class="w">warnings</span><span class="sc">;</span><li> <a class="l_k" href="functions/my.html">my</a> <span class="i">$b</span> = <span class="i">@a</span>[<span class="n">0</span>]<span class="sc">;</span></li><a class="l_k" href="functions/my.html">my</a><span class="i">$b</span><span class="i">@a</span><span class="sc">;</span><li>    <span class="s">}</span></li><span class="s">}</span><li>    <a class="l_k" href="functions/my.html">my <span class="i">$c</span> = <span class="i">@a</span>[<span class="n">0</span>]<span class="sc">;</span></a></li><a class="l_k" href="functions/my.html">my <span class="i">$c</span> = <span class="i">@a</span>[<span class="n">0</span>]<span class="sc">;</span></a><span class="i">$c</span><span class="i">@a</span><span class="sc">;</span><p>The code in the enclosing block has warnings enabled, but the inner block has them disabled.	http://perldoc.perl.org/warnings.html
warnings::register	A										<p>Creates a warnings category with the same name as the current package.</p><p>See warnings for more information on this module&#39;s usage.</p><span class="hud_span_top">Page index</span>	http://perldoc.perl.org/warnings_register.html
c2ph	A										<p>The following is the old c2ph.doc documentation by Tom Christiansen &lt;tchrist@perl.com&gt; Date: 25 Jul 91 08:10:21 GMT</p><p>Once upon a time, I wrote a program called pstruct.  It was a perl program that tried to parse out C structures and display their member offsets for you.  This was especially useful for people looking at binary dumps or poking around the kernel.</p><p>Pstruct was not a pretty program.  Neither was it particularly robust. The problem, you see, was that the C compiler was much better at parsing C than I could ever hope to be.</p><p>So I got smart:  I decided to be lazy and let the C compiler parse the C, which would spit out debugger stabs for me to read.	http://perldoc.perl.org/c2ph.html
corelist	A										<p>See Module::CoreList for one.</p>	http://perldoc.perl.org/corelist.html
cpan	A										<p>This script provides a command interface (not a shell) to CPAN. At the moment it uses CPAN.pm to do the work, but it is not a one-shot command runner for CPAN.pm.</p>	http://perldoc.perl.org/cpan.html
enc2xs	A										<p><i>enc2xs</i> builds a Perl extension for use by Encode from either Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc). Besides being used internally during the build process of the Encode module, you can use <i>enc2xs</i> to add your own encoding to perl. No knowledge of XS is necessary.</p><i>enc2xs</i><i>enc2xs</i>	http://perldoc.perl.org/enc2xs.html
h2ph	A										<p><i>h2ph</i> converts any C header files specified to the corresponding Perl header file format. It is most easily run while in /usr/include:</p><i>h2ph</i><li> cd /usr/include; h2ph * sys/*</li><p>or</p><li> cd /usr/include; h2ph * sys/* arpa/* netinet/*</li><p>or</p><li> cd /usr/include; h2ph -r -l .</li><p>The output files are placed in the hierarchy rooted at Perl&#39;s architecture dependent library directory.  You can specify a different hierarchy with a <b>-d</b> switch.</p><b>-d</b><p>If run with no arguments, filters standard input to standard output.</p>	http://perldoc.perl.org/h2ph.html
h2xs	A										<p><i>h2xs</i> builds a Perl extension from C header files.  The extension will include functions which can be used to retrieve the value of any #define statement which was in the C header files.</p><i>h2xs</i><p>The <i>module_name</i> will be used for the name of the extension.  If module_name is not supplied then the name of the first header file will be used, with the first character capitalized.</p><i>module_name</i><p>If the extension might need extra libraries, they should be included here.  The extension Makefile.PL will take care of checking whether the libraries actually exist and how they should be loaded.  The extra libraries should be specified in the form -lm -lposix, etc, just as on the cc command line.	http://perldoc.perl.org/h2xs.html
instmodsh	A										<p>A little interface to ExtUtils::Installed to examine installed modules, validate your packlists and even create a tarball from an installed module.</p>	http://perldoc.perl.org/instmodsh.html
libnetcfg	A										<p>The libnetcfg utility can be used to configure the libnet. Starting from perl 5.8 libnet is part of the standard Perl distribution, but the libnetcfg can be used for any libnet installation.</p>	http://perldoc.perl.org/libnetcfg.html
bug	R	perlbug										
perlbug	A										<p>This program is designed to help you generate and send bug reports (and thank-you notes) about perl5 and the modules which ship with it.</p><p>In most cases, you can just run it interactively from a command line without any special arguments and follow the prompts.</p><p>If you have found a bug with a non-standard port (one that was not part of the <i>standard distribution</i>), a binary distribution, or a non-core module (such as Tk, DBI, etc), then please see the documentation that came with that distribution to determine the correct place to report bugs.</p><i>standard distribution</i><p>If you are unable to send your report using <b>perlbug</b> (most likely because your system doesn&#39;t have a way to send mail that perlbug recognizes), you may be able to use this tool to compose your report and save it to a file which you can then send to <b>perlbug@perl.org</b> using your regular mail client.</p><b>perlbug</b><b>perlbug@perl.org</b><p>In extreme cases, <b>perlbug</b> may not work well enough on your system to guide you through composing a bug report.	http://perldoc.perl.org/perlbug.html
doc	R	perldoc										
perldoc	A										<p><b>perldoc</b> looks up a piece of documentation in .pod format that is embedded in the perl installation tree or in a perl script, and displays it via <code class="inline"><span class="w">groff</span> -<span class="w">man</span> | <span class="i">$PAGER</span></code> . (In addition, if running under HP-UX, <code class="inline"><span class="w">col</span> -x</code>  will be used.) This is primarily used for the documentation for the perl library modules.</p><b>perldoc</b><code class="inline"><span class="w">groff</span> -<span class="w">man</span> | <span class="i">$PAGER</span></code><code class="inline"><span class="w">col</span> -x</code><p>Your system may also have man pages installed for those modules, in which case you can probably just use the man(1) command.</p><p>If you are looking for a table of contents to the Perl library modules documentation, see the perltoc page.</p>	http://perldoc.perl.org/perldoc.html
ivp	R	perlivp										
perlivp	A										<p>The <b>perlivp</b> program is set up at Perl source code build time to test the Perl version it was built under.  It can be used after running:</p><b>perlivp</b><li>    <span class="w">make</span> <span class="w">install</span></li><span class="w">make</span><span class="w">install</span><p>(or your platform&#39;s equivalent procedure) to verify that <b>perl</b> and its libraries have been installed correctly.  A correct installation is verified by output that looks like:</p><b>perl</b><li>    ok 1</li><li>    ok 2</li><p>etc.</p>	http://perldoc.perl.org/perlivp.html
thanks	R	perlthanks										
perlthanks	A										<p>This program is designed to help you generate and send bug reports (and thank-you notes) about perl5 and the modules which ship with it.</p><p>In most cases, you can just run it interactively from a command line without any special arguments and follow the prompts.</p><p>If you have found a bug with a non-standard port (one that was not part of the <i>standard distribution</i>), a binary distribution, or a non-core module (such as Tk, DBI, etc), then please see the documentation that came with that distribution to determine the correct place to report bugs.</p><i>standard distribution</i><p>If you are unable to send your report using <b>perlbug</b> (most likely because your system doesn&#39;t have a way to send mail that perlbug recognizes), you may be able to use this tool to compose your report and save it to a file which you can then send to <b>perlbug@perl.org</b> using your regular mail client.</p><b>perlbug</b><b>perlbug@perl.org</b><p>In extreme cases, <b>perlbug</b> may not work well enough on your system to guide you through composing a bug report.	http://perldoc.perl.org/perlthanks.html
util	R	perlutil										
perlutil	A										<p>Along with the Perl interpreter itself, the Perl distribution installs a range of utilities on your system. There are also several utilities which are used by the Perl distribution itself as part of the install process. This document exists to list all of these utilities, explain what they are for and provide pointers to each module&#39;s documentation, if appropriate.</p>	http://perldoc.perl.org/perlutil.html
piconv	A										<p><b>piconv</b> is perl version of <b>iconv</b>, a character encoding converter widely available for various Unixen today.  This script was primarily a technology demonstrator for Perl 5.8.0, but you can use piconv in the place of iconv for virtually any case.</p><b>piconv</b><b>iconv</b><p>piconv converts the character encoding of either STDIN or files specified in the argument and prints out to STDOUT.</p><p>Here is the list of options.  Some options can be in short format (-f) or long (--from) one.</p><b>-f,--from <i>from_encoding</i></b><i>from_encoding</i><p>Specifies the encoding you are converting from.  Unlike <b>iconv</b>, this option can be omitted.  In such cases, the current locale is used.</p><b>iconv</b><b>-t,--to <i>to_encoding</i></b><i>to_encoding</i><p>Specifies the encoding you are converting to.	http://perldoc.perl.org/piconv.html
pod2html	A										<p>Converts files from pod format (see perlpod) to HTML format.</p>	http://perldoc.perl.org/pod2html.html
pod2man	A										<p><b>pod2man</b> is a front-end for Pod::Man, using it to generate *roff input from POD source.  The resulting *roff code is suitable for display on a terminal using nroff(1), normally via man(1), or printing using troff(1).</p><b>pod2man</b><p><i>input</i> is the file to read for POD source (the POD can be embedded in code).  If <i>input</i> isn&#39;t given, it defaults to <code class="inline"><span class="w">STDIN</span></code> .  <i>output</i>, if given, is the file to which to write the formatted output.  If <i>output</i> isn&#39;t given, the formatted output is written to <code class="inline"><span class="w">STDOUT</span></code> .  Several POD files can be processed in the same <b>pod2man</b> invocation (saving module load and compile times) by providing multiple pairs of <i>input</i> and <i>output</i> files on the command line.</p><i>input</i><i>input</i><i>output</i><i>output</i><b>pod2man</b><i>input</i><i>output</i><p><b>--section</b>, <b>--release</b>, <b>--center</b>, <b>--date</b>, and <b>--official</b> can be used to set the headers and footers to use; if not given, Pod::Man will assume various defaults.	http://perldoc.perl.org/pod2man.html
pod2text	A										<p><b>pod2text</b> is a front-end for Pod::Text and its subclasses.  It uses them to generate formatted ASCII text from POD source.  It can optionally use either termcap sequences or ANSI color escape sequences to format the text.</p><b>pod2text</b><p><i>input</i> is the file to read for POD source (the POD can be embedded in code).  If <i>input</i> isn&#39;t given, it defaults to <code class="inline"><span class="w">STDIN</span></code> .  <i>output</i>, if given, is the file to which to write the formatted output.  If <i>output</i> isn&#39;t given, the formatted output is written to <code class="inline"><span class="w">STDOUT</span></code> .  Several POD files can be processed in the same <b>pod2text</b> invocation (saving module load and compile times) by providing multiple pairs of <i>input</i> and <i>output</i> files on the command line.</p><i>input</i><i>input</i><i>output</i><i>output</i><b>pod2text</b><i>input</i><i>output</i>	http://perldoc.perl.org/pod2text.html
pod2usage	A										<p><b>pod2usage</b> will read the given input file looking for pod documentation and will print the corresponding usage message. If no input file is specified then standard input is read.</p><b>pod2usage</b><p><b>pod2usage</b> invokes the <b>pod2usage()</b> function in the <b>Pod::Usage</b> module. Please see pod2usage() in Pod::Usage.</p><b>pod2usage</b><b>pod2usage()</b><b>Pod::Usage</b>	http://perldoc.perl.org/pod2usage.html
podchecker	A										<p><b>podchecker</b> will read the given input files looking for POD syntax errors in the POD documentation and will print any errors it find to STDERR. At the end, it will print a status message indicating the number of errors found.</p><b>podchecker</b><p>Directories are ignored, an appropriate warning message is printed.</p><p><b>podchecker</b> invokes the <b>podchecker()</b> function exported by <b>Pod::Checker</b> Please see podchecker() in Pod::Checker for more details.</p><b>podchecker</b><b>podchecker()</b><b>Pod::Checker</b>	http://perldoc.perl.org/podchecker.html
podselect	A										<p><b>podselect</b> will read the given input files looking for pod documentation and will print out (in raw pod format) all sections that match one ore more of the given section specifications. If no section specifications are given than all pod sections encountered are output.</p><b>podselect</b><p><b>podselect</b> invokes the <b>podselect()</b> function exported by <b>Pod::Select</b> Please see podselect() in Pod::Select for more details.</p><b>podselect</b><b>podselect()</b><b>Pod::Select</b>	http://perldoc.perl.org/podselect.html
pstruct	A										<p>The following is the old c2ph.doc documentation by Tom Christiansen &lt;tchrist@perl.com&gt; Date: 25 Jul 91 08:10:21 GMT</p><p>Once upon a time, I wrote a program called pstruct.  It was a perl program that tried to parse out C structures and display their member offsets for you.  This was especially useful for people looking at binary dumps or poking around the kernel.</p><p>Pstruct was not a pretty program.  Neither was it particularly robust. The problem, you see, was that the C compiler was much better at parsing C than I could ever hope to be.</p><p>So I got smart:  I decided to be lazy and let the C compiler parse the C, which would spit out debugger stabs for me to read.	http://perldoc.perl.org/pstruct.html
ptar	A										<li>    <span class="w">ptar</span> <span class="w">is</span> <span class="w">a</span> <span class="w">small</span><span class="cm">,</span> <span class="w">tar</span> <span class="w">look</span>-<span class="w">alike</span> <span class="w">program</span> <span class="w">that</span> <span class="w">uses</span> <span class="w">the</span> <span class="w">perl</span> <span class="w">module</span></li><span class="w">ptar</span><span class="w">is</span><span class="w">a</span><span class="w">small</span><span class="cm">,</span><span class="w">tar</span><span class="w">look</span><span class="w">alike</span><span class="w">program</span><span class="w">that</span><span class="w">uses</span><span class="w">the</span><span class="w">perl</span><span class="w">module</span><li>    <span class="w">Archive::Tar</span> <span class="w">to</span> <span class="w">extract</span><span class="cm">,</span> <span class="w">create</span> and <span class="w">list</span> <span class="w">tar</span> <span class="w">archives</span>.</li><span class="w">Archive::Tar</span><span class="w">to</span><span class="w">extract</span><span class="cm">,</span><span class="w">create</span><span class="w">list</span><span class="w">tar</span><span class="w">archives</span>	http://perldoc.perl.org/ptar.html
ptardiff	A										<li>    <span class="w">ptardiff</span> <span class="w">is</span> <span class="w">a</span> <span class="w">small</span> <span class="w">program</span> <span class="w">that</span> <span class="w">diffs</span> <span class="w">an</span> <span class="w">extracted</span> <span class="w">archive</span></li><span class="w">ptardiff</span><span class="w">is</span><span class="w">a</span><span class="w">small</span><span class="w">program</span><span class="w">that</span><span class="w">diffs</span><span class="w">an</span><span class="w">extracted</span><span class="w">archive</span><li>    <span class="w">against</span> <span class="w">an</span> <span class="w">unextracted</span> <span class="w">one</span><span class="cm">,</span> <span class="w">using</span> <span class="w">the</span> <span class="w">perl</span> <span class="w">module</span> <span class="w">Archive::Tar</span>.</li><span class="w">against</span><span class="w">an</span><span class="w">unextracted</span><span class="w">one</span><span class="cm">,</span><span class="w">using</span><span class="w">the</span><span class="w">perl</span><span class="w">module</span><span class="w">Archive::Tar</span><li>    <span class="w">This</span> <span class="w">effectively</span> <span class="w">lets</span> <span class="w">you</span> <span class="w">view</span> <span class="w">changes</span> <span class="w">made</span> <span class="w">to</span> <span class="w">an</span> <span class="w">archives</span> <span class="w">contents</span>.</li><span class="w">This</span><span class="w">effectively</span><span class="w">lets</span><span class="w">you</span><span class="w">view</span><span class="w">changes</span><span class="w">made</span><span class="w">to</span><span class="w">an</span><span class="w">archives</span><span class="w">contents</span><li>    <span class="w">Provide</span> <span class="w">the</span> <span class="w">progam</span> <span class="w">with</span> <span class="w">an</span> <span class="w">ARCHIVE_FILE</span> and <span class="w">it</span> <span class="w">will</span> <span class="w">look</span> <span class="w">up</span> <span class="w">all</span></li><span class="w">Provide</span><span class="w">the</span><span class="w">progam</span><span class="w">with</span><span class="w">an</span><span class="w">ARCHIVE_FILE</span><span class="w">it</span><span class="w">will</span><span class="w">look</span><span class="w">up</span><span class="w">all</span><li>    <span class="w">the</span> <span class="w">files</span> <span class="w">with</span> <span class="w">in</span> <span class="w">the</span> <span class="w">archive</span><span class="cm">,</span> <span class="w">scan</span> <span class="w">the</span> <span class="w">current</span> <span class="w">working</span> <span class="w">directory</span></li><span class="w">the</span><span class="w">files</span><span class="w">with</span><span class="w">in</span><span class="w">the</span><span class="w">archive</span><span class="cm">,</span><span class="w">scan</span><span class="w">the</span><span class="w">current</span><span class="w">working</span><span class="w">directory</span><li>    <a class="l_k" href="functions/for.html">for</a> <span class="w">a</span> <span class="w">file</span> <span class="w">with</span> <span class="w">the</span> <span class="w">name</span> <a class="l_k" href="functions/and.html">and</a> <span class="w">diff</span> <span class="w">it</span> <span class="w">against</span> <span class="w">the</span> <span class="w">contents</span> <span class="w">of</span> <span class="w">the</span></li><a class="l_k" href="functions/for.html">for</a><span class="w">a</span><span class="w">file</span><span class="w">with</span><span class="w">the</span><span class="w">name</span><a class="l_k" href="functions/and.html">and</a><span class="w">diff</span><span class="w">it</span><span class="w">against</span><span class="w">the</span><span class="w">contents</span><span class="w">of</span><span class="w">the</span><li>    <span class="w">archive</span>.</li><span class="w">archive</span><a name="SYNOPSIS"><h1>SYNOPSIS</h1> <pre class="verbatim"><ol><li>    <span class="w">ptardiff</span> <span class="w">ARCHIVE_FILE</span></li><li>    <span class="w">ptardiff</span> -<span class="w">h</span></li><li></li><li>    <span class="i">$ tar</span> -<span class="w">xzf</span> <span class="w">Acme</span>-<span class="w">Buffy</span>-<span class="n">1.3</span>.<span class="w">tar</span>.<span class="w">gz</span></li><li>    <span class="i">$ vi</span> <span class="w">Acme</span>-<span class="w">Buffy</span>-<span class="n">1.3</span>/<span class="w">README</span></li><li>    <span class="s">[</span>...<span class="s">]</span></li><li>    <span class="i">$ ptardiff</span> <span class="w">Acme</span>-<span class="w">Buffy</span>-<span class="n">1.3</span>.<span class="w">tar</span>.<span class="w">gz</span> &gt; <span class="w">README</span>.<span class="w">patch</span></li></ol></pre><a name="OPTIONS"></a><h1>OPTIONS</h1> <pre class="verbatim"><ol><li>    <span class="w">h</span>   <span class="w">Prints</span> <span class="w">this</span> <span class="w">help</span> <span class="w">message</span></li></ol></pre><a name="SEE-ALSO"></a><h1>SEE ALSO</h1> <p>tar(1), Archive::Tar.</p>       <div class="hud_container" id="page_index">     <div class="hud_header" id="page_index_header">       <div class="hud_close" id="page_index_close"><a href="#" onclick="pageIndex.hide();return false;"></a></div>       <div class="hud_title" id="page_index_title"><span class="hud_span_top">Page index</span></div>       <div class="hud_topright" id="page_index_topright"></div>     </div>     <div class="hud_content" id="page_index_content">       <ul><li>NAME</li><li><a href="#DESCRIPTION">DESCRIPTION</a></li><li><a href="#SYNOPSIS">SYNOPSIS</a></li><li><a href="#OPTIONS">OPTIONS</a></li><li><a href="#SEE-ALSO">SEE ALSO</a></li></ul>     </div>     <div class="hud_footer" id="page_index_footer">       <div class="hud_bottomleft" id="page_index_bottomleft"></div>       <div class="hud_bottom" id="page_index_bottom"><span class="hud_span_bottom"></span></div>       <div class="hud_resize" id="page_index_resize"></div>     </div>   </div>                    </a>	http://perldoc.perl.org/ptardiff.html
shasum	A										<p>Running <i>shasum</i> is often the quickest way to compute SHA message digests.  The user simply feeds data to the script through files or standard input, and then collects the results from standard output.</p><i>shasum</i><p>The following command shows how to compute digests for typical inputs such as the NIST test vector &quot;abc&quot;:</p><li> <span class="w">perl</span> -e <span class="q">&quot;print qq(abc)&quot;</span> | <span class="w">shasum</span></li><span class="w">perl</span><span class="q">&quot;print qq(abc)&quot;</span><span class="w">shasum</span><p>Or, if you want to use SHA-256 instead of the default SHA-1, simply say:</p><li> <span class="w">perl</span> -e <span class="q">&quot;print qq(abc)&quot;</span> | <span class="w">shasum</span> -<span class="w">a</span> <span class="n">256</span></li><span class="w">perl</span><span class="q">&quot;print qq(abc)&quot;</span><span class="w">shasum</span><span class="w">a</span><span class="n">256</span><p>Since <i>shasum</i> mimics the behavior of the combined GNU <i>sha1sum</i>, <i>sha224sum</i>, <i>sha256sum</i>, <i>sha384sum</i>, and <i>sha512sum</i> programs, you can install this script as a convenient drop-in replacement.</p><i>shasum</i><i>sha1sum</i><i>sha224sum</i><i>sha256sum</i><i>sha384sum</i><i>sha512sum</i><p>Unlike the GNU programs, <i>shasum</i> encompasses the full SHA standard by allowing partial-byte inputs.	http://perldoc.perl.org/shasum.html
splain	A										<h2>The <code class="inline"><span class="w">diagnostics</span></code>  Pragma</h2><p>This module extends the terse diagnostics normally emitted by both the perl compiler and the perl interpreter (from running perl with a -w  switch or <code class="inline">use <span class="w">warnings</span></code> ), augmenting them with the more explicative and endearing descriptions found in perldiag.  Like the other pragmata, it affects the compilation phase of your program rather than merely the execution phase.</p><code class="inline">use <span class="w">warnings</span></code><p>To use in your program as a pragma, merely invoke</p><li>    use <span class="w">diagnostics</span><span class="sc">;</span></li><span class="w">diagnostics</span><span class="sc">;</span><p>at the start (or near the start) of your program.  (Note  that this <i>does</i> enable perl&#39;s <b>-w</b> flag.)  Your whole compilation will then be subject(ed :-) to the enhanced diagnostics.	http://perldoc.perl.org/splain.html
xsubpp	A										<p>This compiler is typically run by the makefiles created by ExtUtils::MakeMaker or by Module::Build or other Perl module build tools.</p><p><i>xsubpp</i> will compile XS code into C code by embedding the constructs necessary to let C functions manipulate Perl values and creates the glue necessary to let Perl access those functions.  The compiler uses typemaps to determine how to map C function parameters and variables to Perl values.</p><i>xsubpp</i><p>The compiler will search for typemap files called <i>typemap</i>.  It will use the following search path to find default typemaps, with the rightmost typemap taking precedence.</p><i>typemap</i><li> ../../../typemap:../../typemap:../typemap:typemap</li><p>It will also use a default typemap installed as <code class="inline"><span class="w">ExtUtils::typemap</span></code> .</p>	http://perldoc.perl.org/xsubpp.html
-X	A										<code><br>-X FILEHANDLE<br></code><br> A file test, where X is one of the letters listed below.  This unary operator takes one argument, either a filename, a filehandle, or a dirhandle,  and tests the associated file to see if something is true about it.  If the argument is omitted, tests <code class="inline"><span class="i">$_</span></code> , except for <code class="inline">-t</code> , which tests STDIN. Unless otherwise documented, it returns <code class="inline"><span class="n">1</span></code>  for true and <code class="inline"><span class="q">&#39;&#39;</span></code>  for false. If the file doesn&#39;t exist or can&#39;t be examined, it returns <code class="inline">undef</code> and sets <code class="inline"><span class="i">$!</span></code>  (errno).  Despite the funny names, precedence is the same as any other named unary operator.	http://perldoc.perl.org/functions/-X.html
__DATA__	A										<code><br>__DATA__<br></code><br>These keywords are documented in Special Literals in perldata.	http://perldoc.perl.org/functions/__DATA__.html
__END__	A										<code><br>__END__<br></code><br>These keywords are documented in Special Literals in perldata.	http://perldoc.perl.org/functions/__END__.html
__FILE__	A										<code><br>__FILE__<br></code><br>A special token that returns the name of the file in which it occurs.	http://perldoc.perl.org/functions/__FILE__.html
__LINE__	A										<code><br>__LINE__<br></code><br>A special token that compiles to the current line number.	http://perldoc.perl.org/functions/__LINE__.html
__PACKAGE__	A										<code><br>__PACKAGE__<br></code><br>A special token that returns the name of the package in which it occurs.	http://perldoc.perl.org/functions/__PACKAGE__.html
__SUB__	A										<code><br>__SUB__<br></code><br>A special token that returns a reference to the current subroutine, or <code class="inline">undef</code> outside of a subroutine.undefThe behaviour of <code class="inline">__SUB__</code> within a regex code block (such as <code class="inline"><span class="q">/(?{...})/</span></code> ) is subject to change.__SUB__<span class="q">/(?{...})/</span>This token is only available under <code class="inline">use <span class="v">v5.16</span></code>  or the &quot;current_sub&quot; feature.  See feature.use <span class="v">v5.16</span>	http://perldoc.perl.org/functions/__SUB__.html
abs	A										<code><br>abs VALUE<br></code><br> Returns the absolute value of its argument. If VALUE is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>	http://perldoc.perl.org/functions/abs.html
accept	A										<code><br>accept NEWSOCKET,GENERICSOCKET<br></code><br>Accepts an incoming socket connect, just as accept(2)  does.  Returns the packed address if it succeeded, false otherwise. See the example in Sockets: Client/Server Communication in perlipc.On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor, as determined by the value of $^F.  See $^F in perlvar.	http://perldoc.perl.org/functions/accept.html
alarm	A										<code><br>alarm SECONDS<br></code><br>  Arranges to have a SIGALRM delivered to this process after the specified number of wallclock seconds has elapsed.  If SECONDS is not specified, the value stored in <code class="inline"><span class="i">$_</span></code>  is used.  (On some machines, unfortunately, the elapsed time may be up to one second less or more than you specified because of how seconds are counted, and process scheduling may delay the delivery of the signal even further.)<span class="i">$_</span>Only one timer may be counting at once.  Each call disables the previous timer, and an argument of <code class="inline"><span class="n">0</span></code>  may be supplied to cancel the previous timer without starting a new one.	http://perldoc.perl.org/functions/alarm.html
and	A										<code><br>and<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/and.html
atan2	A										<code><br>atan2 Y,X<br></code><br>   Returns the arctangent of Y/X in the range -PI to PI.For the tangent operation, you may use the <code class="inline"><span class="w">Math::Trig::tan</span></code>  function, or use the familiar relation:<span class="w">Math::Trig::tan</span>The return value for <code class="inline"><a class="l_k" href="../functions/atan2.html">atan2(0,0)</a></code> is implementation-defined; consult your atan2(3) manpage for more information.<a class="l_k" href="../functions/atan2.html">atan2(0,0)</a>Portability issues: atan2 in perlport.	http://perldoc.perl.org/functions/atan2.html
AUTOLOAD	A										<code><br>AUTOLOAD<br></code><br>This keyword is documented in Autoloading in perlsub.	http://perldoc.perl.org/functions/AUTOLOAD.html
BEGIN	A										<code><br>BEGIN<br></code><br>These compile phase keywords are documented in BEGIN, UNITCHECK, CHECK, INIT and END in perlmod.	http://perldoc.perl.org/functions/BEGIN.html
bind	A										<code><br>bind SOCKET,NAME<br></code><br>Binds a network address to a socket, just as bind(2) does.  Returns true if it succeeded, false otherwise.  NAME should be a packed address of the appropriate type for the socket.  See the examples in Sockets: Client/Server Communication in perlipc.	http://perldoc.perl.org/functions/bind.html
binmode	A										<code><br>binmode FILEHANDLE, LAYER<br></code><br>    Arranges for FILEHANDLE to be read or written in &quot;binary&quot; or &quot;text&quot; mode on systems where the run-time libraries distinguish between binary and text files.  If FILEHANDLE is an expression, the value is taken as the name of the filehandle.  Returns true on success, otherwise it returns <code class="inline">undef</code> and sets <code class="inline"><span class="i">$!</span></code>  (errno).undef<span class="i">$!</span>On some systems (in general, DOS- and Windows-based systems) binmode() is necessary when you&#39;re not working with a text file.  For the sake of portability it is a good idea always to use it when appropriate, and never to use it when it isn&#39;t appropriate.	http://perldoc.perl.org/functions/binmode.html
bless	A										<code><br>bless REF,CLASSNAME<br></code><br>This function tells the thingy referenced by REF that it is now an object in the CLASSNAME package.  If CLASSNAME is omitted, the current package is used.  Because a <code class="inline">bless</code> is often the last thing in a constructor, it returns the reference for convenience.  Always use the two-argument version if a derived class might inherit the function doing the blessing. See perlobj for more about the blessing (and blessings) of objects.blessConsider always blessing objects in CLASSNAMEs that are mixed case. Namespaces with all lowercase names are considered reserved for Perl pragmata.  Builtin types have all uppercase names.	http://perldoc.perl.org/functions/bless.html
break	A										<code><br>break<br></code><br>Break out of a <code class="inline">given<span class="s">(</span><span class="s">)</span></code>  block.given<span class="s">(</span><span class="s">)</span>This keyword is enabled by the <code class="inline"><span class="q">&quot;switch&quot;</span></code>  feature; see feature for more information on <code class="inline"><span class="q">&quot;switch&quot;</span></code> .  You can also access it by prefixing it with <code class="inline"><span class="w">CORE::</span></code> .  Alternatively, include a <code class="inline">use <span class="v">v5.10</span></code>  or later to the current scope.<span class="q">&quot;switch&quot;</span><span class="q">&quot;switch&quot;</span><span class="w">CORE::</span>use <span class="v">v5.10</span>	http://perldoc.perl.org/functions/break.html
caller	A										<code><br>caller EXPR<br></code><br>   Returns the context of the current pure perl subroutine call.  In scalar context, returns the caller&#39;s package name if there <i>is</i> a caller (that is, if we&#39;re in a subroutine or <code class="inline">eval</code> or <code class="inline"><a class="l_k" href="../functions/require.html">require</a></code>) and the undefined value otherwise.  caller never returns XS subs and they are skipped.  The next pure perl sub will appear instead of the XS sub in caller&#39;s return values.  In list context, caller returnseval<a class="l_k" href="../functions/require.html">require</a>With EXPR, it returns some extra information that the debugger uses to print a stack trace.  The value of EXPR indicates how many call frames to go back before the current one.Here, $subroutine is the function that the caller called (rather than the function containing the caller).	http://perldoc.perl.org/functions/caller.html
chdir	A										<code><br>chdir EXPR<br></code><br>  Changes the working directory to EXPR, if possible.  If EXPR is omitted, changes to the directory specified by <code class="inline"><span class="i">$ENV</span>{<span class="w">HOME</span>}</code> , if set; if not, changes to the directory specified by <code class="inline"><span class="i">$ENV</span>{<span class="w">LOGDIR</span>}</code> .  (Under VMS, the variable <code class="inline"><span class="i">$ENV</span>{<span class="w">SYS</span><span class="i">$LOGIN</span>}</code>  is also checked, and used if it is set.)  If neither is set, <code class="inline">chdir</code> does nothing.  It returns true on success, false otherwise.  See the example under <code class="inline">die</code>.<span class="i">$ENV</span>{<span class="w">HOME</span>}<span class="i">$ENV</span>{<span class="w">LOGDIR</span>}<span class="i">$ENV</span>{<span class="w">SYS</span><span class="i">$LOGIN</span>}chdirdieOn systems that support fchdir(2), you may pass a filehandle or directory handle as the argument.	http://perldoc.perl.org/functions/chdir.html
CHECK	A										<code><br>CHECK<br></code><br>These compile phase keywords are documented in BEGIN, UNITCHECK, CHECK, INIT and END in perlmod.	http://perldoc.perl.org/functions/CHECK.html
chmod	A										<code><br>chmod LIST<br></code><br>  Changes the permissions of a list of files.  The first element of the list must be the numeric mode, which should probably be an octal number, and which definitely should <i>not</i> be a string of octal digits: <code class="inline"><span class="n">0644</span></code>  is okay, but <code class="inline"><span class="q">&quot;0644&quot;</span></code>  is not.  Returns the number of files successfully changed.  See also oct if all you have is a string.<span class="n">0644</span><span class="q">&quot;0644&quot;</span>On systems that support fchmod(2), you may pass filehandles among the files.  On systems that don&#39;t support fchmod(2), passing filehandles raises an exception.  Filehandles must be passed as globs or glob references to be recognized; barewords are considered filenames.You can also import the symbolic <code class="inline"><span class="w">S_I</span>*</code>  constants from the <code class="inline"><span class="w">Fcntl</span></code>  module:<span class="w">S_I</span>*<span class="w">Fcntl</span>Portability issues: <a href="../perlport.html#chmod">chmod in perlport.</a>	http://perldoc.perl.org/functions/chmod.html
chomp	A										<code><br>chomp VARIABLE<br></code><br>    This safer version of chop removes any trailing string that corresponds to the current value of <code class="inline"><span class="i">$/</span></code>  (also known as $INPUT_RECORD_SEPARATOR in the <code class="inline"><span class="w">English</span></code>  module).  It returns the total number of characters removed from all its arguments.  It&#39;s often used to remove the newline from the end of an input record when you&#39;re worried that the final record may be missing its newline.  When in paragraph mode (<code class="inline"><span class="i">$/</span> = <span class="q">&#39;&#39;</span></code> ), it removes all trailing newlines from the string. When in slurp mode (<code class="inline"><span class="i">$/</span> = undef</code> ) or fixed-length record mode (<code class="inline"><span class="i">$/</span></code>  is a reference to an integer or the like; see perlvar) chomp() won&#39;t remove anything.	http://perldoc.perl.org/functions/chomp.html
chop	A										<code><br>chop VARIABLE<br></code><br>Chops off the last character of a string and returns the character chopped.  It is much more efficient than <code class="inline">s/.$//s</code> because it neither scans nor copies the string.  If VARIABLE is omitted, chops <code class="inline"><span class="i">$_</span></code> . If VARIABLE is a hash, it chops the hash&#39;s values, but not its keys, resetting the <code class="inline">each</code> iterator in the process.s/.$//s<span class="i">$_</span>eachYou can actually chop anything that&#39;s an lvalue, including an assignment.If you chop a list, each element is chopped.  Only the value of the last <code class="inline">chop</code> is returned.chopNote that <code class="inline">chop</code> returns the last character.  To return all but the last character, use <code class="inline">substr<span class="s">(</span><span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span></code> .chopsubstr<span class="s">(</span><span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span>See also chomp.	http://perldoc.perl.org/functions/chop.html
chown	A										<code><br>chown LIST<br></code><br>   Changes the owner (and group) of a list of files.  The first two elements of the list must be the <i>numeric</i> uid and gid, in that order.  A value of -1 in either position is interpreted by most systems to leave that value unchanged.  Returns the number of files successfully changed.On systems that support fchown(2), you may pass filehandles among the files.  On systems that don&#39;t support fchown(2), passing filehandles raises an exception.  Filehandles must be passed as globs or glob references to be recognized; barewords are considered filenames.Here&#39;s an example that looks up nonnumeric uids in the passwd file:On most systems, you are not allowed to change the ownership of the file unless you&#39;re the superuser, although you should be able to change the group to any of your secondary groups.	http://perldoc.perl.org/functions/chown.html
chr	A										<code><br>chr NUMBER<br></code><br>   Returns the character represented by that NUMBER in the character set. For example, <code class="inline">chr(65)</code> is <code class="inline"><span class="q">&quot;A&quot;</span></code>  in either ASCII or Unicode, and chr(0x263a) is a Unicode smiley face.chr(65)<span class="q">&quot;A&quot;</span>Negative values give the Unicode replacement character (chr(0xfffd)), except under the bytes pragma, where the low eight bits of the value (truncated to an integer) are used.If NUMBER is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>For the reverse, use ord.Note that characters from 128 to 255 (inclusive) are by default internally not encoded as UTF-8 for backward compatibility reasons.See perlunicode for more about Unicode.	http://perldoc.perl.org/functions/chr.html
chroot	A										<code><br>chroot FILENAME<br></code><br> This function works like the system call by the same name: it makes the named directory the new root directory for all further pathnames that begin with a <code class="inline">/</code> by your process and all its children.  (It doesn&#39;t change your current working directory, which is unaffected.)  For security reasons, this call is restricted to the superuser.  If FILENAME is omitted, does a <code class="inline">chroot</code> to <code class="inline"><span class="i">$_</span></code> ./chroot<span class="i">$_</span><b>NOTE:</b>  It is good security practice to do <code class="inline">chdir(&quot;/&quot;)</code> (to the root directory) immediately after a <code class="inline">chroot()</code>.chdir(&quot;/&quot;)chroot()Portability issues: chroot in perlport.	http://perldoc.perl.org/functions/chroot.html
close	A										<code><br>close FILEHANDLE<br></code><br>Closes the file or pipe associated with the filehandle, flushes the IO buffers, and closes the system file descriptor.  Returns true if those operations succeed and if no error was reported by any PerlIO layer.  Closes the currently selected filehandle if the argument is omitted.You don&#39;t have to close FILEHANDLE if you are immediately going to do another <code class="inline">open</code> on it, because <code class="inline"><a class="l_k" href="../functions/open.html">open</a></code> closes it for you.  (See open.)  However, an explicit <code class="inline"><a class="l_k" href="../functions/close.html">close</a></code> on an input file resets the line counter (<code class="inline"><span class="i">$.</span></code> ), while the implicit close done by <code class="inline">open</code> does not.open<a class="l_k" href="../functions/open.html">open</a><a class="l_k" href="../functions/close.html">close</a><span class="i">$.</span>openIf the filehandle came from a piped open, <code class="inline">close</code> returns false if one of the other syscalls involved fails or if its program exits with non-zero status.	http://perldoc.perl.org/functions/close.html
closedir	A										<code><br>closedir DIRHANDLE<br></code><br>Closes a directory opened by <code class="inline">opendir</code> and returns the success of that system call.opendir	http://perldoc.perl.org/functions/closedir.html
cmp	A										<code><br>cmp<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/cmp.html
connect	A										<code><br>connect SOCKET,NAME<br></code><br>Attempts to connect to a remote socket, just like connect(2). Returns true if it succeeded, false otherwise.  NAME should be a packed address of the appropriate type for the socket.  See the examples in Sockets: Client/Server Communication in perlipc.	http://perldoc.perl.org/functions/connect.html
continue	A										<code><br>continue BLOCK<br></code><br>When followed by a BLOCK, <code class="inline">continue</code> is actually a flow control statement rather than a function.  If there is a <code class="inline">continue</code> BLOCK attached to a BLOCK (typically in a <code class="inline">while</code>  or <code class="inline">foreach</code> ), it is always executed just before the conditional is about to be evaluated again, just like the third part of a <code class="inline">for</code>  loop in C.  Thus it can be used to increment a loop variable, even when the loop has been continued via the <code class="inline">next</code> statement (which is similar to the C <code class="inline"><a class="l_k" href="../functions/continue.html">continue</a></code> statement).continuecontinuewhileforeachfornext<a class="l_k" href="../functions/continue.html">continue</a><code>next</code>, or <code class="inline"><a class="l_k" href="../functions/redo.html">redo</a></code> may appear within a <code class="inline"><a class="l_k" href="../functions/continue.html">continue</a></code> block; <code class="inline">last</code> and <code class="inline"><a class="l_k" href="../functions/redo.html">redo</a></code> behave as if they had been executed within the main block.	http://perldoc.perl.org/functions/continue.html
cos	A										<code><br>cos EXPR<br></code><br>   Returns the cosine of EXPR (expressed in radians).  If EXPR is omitted, takes the cosine of <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>For the inverse cosine operation, you may use the <code class="inline"><span class="i">Math::Trig::acos</span><span class="s">(</span><span class="s">)</span></code>  function, or use this relation:<span class="i">Math::Trig::acos</span><span class="s">(</span><span class="s">)</span>	http://perldoc.perl.org/functions/cos.html
crypt	A										<code><br>crypt PLAINTEXT,SALT<br></code><br>         Creates a digest string exactly like the crypt(3) function in the C library (assuming that you actually have a version there that has not been extirpated as a potential munition).crypt() is a one-way hash function.  The PLAINTEXT and SALT are turned into a short string, called a digest, which is returned.  The same PLAINTEXT and SALT will always return the same string, but there is no (known) way to get the original PLAINTEXT from the hash.  Small changes in the PLAINTEXT or SALT will result in large changes in the digest.There is no decrypt function.	http://perldoc.perl.org/functions/crypt.html
dbmclose	A										<code><br>dbmclose HASH<br></code><br>[This function has been largely superseded by the <code class="inline">untie</code> function.]untieBreaks the binding between a DBM file and a hash.Portability issues: dbmclose in perlport.	http://perldoc.perl.org/functions/dbmclose.html
dbmopen	A										<code><br>dbmopen HASH,DBNAME,MASK<br></code><br>    [This function has been largely superseded by the tie function.]This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash.  HASH is the name of the hash.  (Unlike normal <code class="inline">open</code>, the first argument is <i>not</i> a filehandle, even though it looks like one).  DBNAME is the name of the database (without the <i>.dir</i> or <i>.pag</i> extension if any).  If the database does not exist, it is created with protection specified by MASK (as modified by the <code class="inline">umask</code>).  To prevent creation of the database if it doesn&#39;t exist, you may specify a MODE of 0, and the function will return a false value if it can&#39;t find an existing database.	http://perldoc.perl.org/functions/dbmopen.html
default	A										<code><br>default<br></code><br>These flow-control keywords related to the experimental switch feature are documented in Switch Statements in perlsyn.	http://perldoc.perl.org/functions/default.html
defined	A										<code><br>defined EXPR<br></code><br>  Returns a Boolean value telling whether EXPR has a value other than the undefined value <code class="inline">undef</code>.  If EXPR is not present, <code class="inline"><span class="i">$_</span></code>  is checked.undef<span class="i">$_</span>Many operations return <code class="inline">undef</code> to indicate failure, end of file, system error, uninitialized variable, and other exceptional conditions.  This function allows you to distinguish <code class="inline">undef</code> from other values.  (A simple Boolean test will not distinguish among <code class="inline">undef</code>, zero, the empty string, and <code class="inline"><span class="q">&quot;0&quot;</span></code> , which are all equally false.)  Note that since <code class="inline">undef</code> is a valid scalar, its presence doesn&#39;t <i>necessarily</i> indicate an exceptional condition: <code class="inline">pop</code> returns <code class="inline">undef</code> when its argument is an empty array, <i>or</i> when the element to return happens to be <code class="inline">undef</code>.undefundefundef<span class="q">&quot;0&quot;</span>undefpopundefundefYou may also use <code class="inline">defined(&amp;func)</code> to check whether subroutine <code class="inline"><span class="i">&amp;func</span></code>  has ever been defined.	http://perldoc.perl.org/functions/defined.html
delete	A										<code><br>delete EXPR<br></code><br>Given an expression that specifies an element or slice of a hash, <code class="inline">delete</code> deletes the specified elements from that hash so that exists() on that element no longer returns true.  Setting a hash element to the undefined value does not remove its key, but deleting it does; see exists.deleteIn list context, returns the value or values deleted, or the last such element in scalar context.  The return list&#39;s length always matches that of the argument list: deleting non-existent elements returns the undefined value in their corresponding positions.delete() may also be used on arrays and array slices, but its behavior is less straightforward.	http://perldoc.perl.org/functions/delete.html
DESTROY	A										<code><br>DESTROY<br></code><br>This method keyword is documented in Destructors in perlobj.	http://perldoc.perl.org/functions/DESTROY.html
die	A										<code><br>die LIST<br></code><br>     <code class="inline">die</code> raises an exception.  Inside an <code class="inline"><a class="l_k" href="../functions/eval.html">eval</a></code> the error message is stuffed into <code class="inline"><span class="i">$@</span></code>  and the <code class="inline">eval</code> is terminated with the undefined value. If the exception is outside of all enclosing <code class="inline">eval</code>s, then the uncaught exception prints LIST to <code class="inline"><span class="w">STDERR</span></code>  and exits with a non-zero value.  If you need to exit the process with a specific exit code, see exit.die<a class="l_k" href="../functions/eval.html">eval</a><span class="i">$@</span>evaleval<span class="w">STDERR</span>Equivalent examples:If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied.	http://perldoc.perl.org/functions/die.html
do	A										<code><br>do BLOCK<br></code><br> Not really a function.  Returns the value of the last command in the sequence of commands indicated by BLOCK.  When modified by the <code class="inline">while</code>  or <code class="inline">until</code>  loop modifier, executes the BLOCK once before testing the loop condition.  (On other statements the loop modifiers test the conditional first.)whileuntil<code class="inline">do <span class="w">BLOCK</span></code>  does <i>not</i> count as a loop, so the loop control statements <code>last</code>, or <code class="inline"><a class="l_k" href="../functions/redo.html">redo</a></code> cannot be used to leave or restart the block. See perlsyn for alternative strategies.do <span class="w">BLOCK</span>last<a class="l_k" href="../functions/redo.html">redo</a>Uses the value of EXPR as a filename and executes the contents of the file as a Perl script.is largely likeexcept that it&#39;s more concise, runs no external processes, keeps track of the current filename for error messages, searches the <code class="inline"><span class="i">@INC</span></code>  directories, and updates <code class="inline"><span class="i">%INC</span></code>  if the file is found.	http://perldoc.perl.org/functions/do.html
dump	A										<code><br>dump LABEL<br></code><br>  This function causes an immediate core dump.  See also the <b>-u</b> command-line switch in perlrun, which does the same thing. Primarily this is so that you can use the <b>undump</b> program (not supplied) to turn your core dump into an executable binary after having initialized all your variables at the beginning of the program.  When the new binary is executed it will begin by executing a <code class="inline">goto <span class="j">LABEL</span></code>  (with all the restrictions that <code class="inline">goto</code> suffers). Think of it as a goto with an intervening core dump and reincarnation. If <code class="inline"><span class="w">LABEL</span></code>  is omitted, restarts the program from the top.	http://perldoc.perl.org/functions/dump.html
each	A										<code><br>each HASH<br></code><br> When called on a hash in list context, returns a 2-element list consisting of the key and value for the next element of a hash.  In Perl 5.12 and later only, it will also return the index and value for the next element of an array so that you can iterate over it; older Perls consider this a syntax error.  When called in scalar context, returns only the key (not the value) in a hash, or the index in an array.Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.	http://perldoc.perl.org/functions/each.html
else	A										<code><br>else<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/else.html
elseif	A										<code><br>elseif<br></code><br>The &quot;else if&quot; keyword is spelled <code class="inline">elsif</code>  in Perl.  There&#39;s no <code class="inline"><span class="w">elif</span></code>  or <code class="inline">else <a class="l_k" href="../functions/if.html">if</a></code>  either.  It does parse <code class="inline">elseif</code>, but only to warn you about not using it.elsif<span class="w">elif</span>else <a class="l_k" href="../functions/if.html">if</a>elseifSee the documentation for flow-control keywords in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/elseif.html
elsif	A										<code><br>elsif<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/elsif.html
END	A										<code><br>END<br></code><br>These compile phase keywords are documented in BEGIN, UNITCHECK, CHECK, INIT and END in perlmod.	http://perldoc.perl.org/functions/END.html
endservent	A										<code><br>endservent<br></code><br>These routines are the same as their counterparts in the system C library.  In list context, the return values from the various get routines are as follows:(If the entry doesn&#39;t exist, the return value is a single meaningless true value.)The exact meaning of the $gcos field varies but it usually contains the real name of the user (as opposed to the login name) and other information pertaining to the user.  Beware, however, that in many system users are able to change this information and therefore it cannot be trusted and therefore the $gcos is tainted (see perlsec).  The $passwd and $shell, user&#39;s encrypted password and login shell, are also tainted, for the same reason.In scalar context, you get the name, unless the function was a lookup by name, in which case you get the other thing, whatever it is.	http://perldoc.perl.org/functions/endservent.html
eof	A										<code><br>eof FILEHANDLE<br></code><br>  Returns 1 if the next read on FILEHANDLE will return end of file <i>or</i> if FILEHANDLE is not open.  FILEHANDLE may be an expression whose value gives the real filehandle.  (Note that this function actually reads a character and then <code class="inline"><span class="w">ungetc</span></code> s it, so isn&#39;t useful in an interactive context.)  Do not read from a terminal file (or call <code class="inline">eof(FILEHANDLE)</code> on it) after end-of-file is reached.  File types such as terminals may lose the end-of-file condition if you do.<span class="w">ungetc</span>eof(FILEHANDLE)An <code class="inline">eof</code> without an argument uses the last file read.  Using <code class="inline"><a class="l_k" href="../functions/eof.html">eof()</a></code> with empty parentheses is different.	http://perldoc.perl.org/functions/eof.html
eq	A										<code><br>eq<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/eq.html
eval	A										<code><br>eval EXPR<br></code><br>       In the first form, often referred to as a &quot;string eval&quot;, the return value of EXPR is parsed and executed as if it were a little Perl program.  The value of the expression (which is itself determined within scalar context) is first parsed, and if there were no errors, executed as a block within the lexical context of the current Perl program.  This means, that in particular, any outer lexical variables are visible to it, and any package variable settings or subroutine and format definitions remain afterwards.Note that the value is parsed every time the <code class="inline">eval</code> executes.	http://perldoc.perl.org/functions/eval.html
evalbytes	A										<code><br>evalbytes EXPR<br></code><br>This function is like eval with a string argument, except it always parses its argument, or <code class="inline"><span class="i">$_</span></code>  if EXPR is omitted, as a string of bytes.  A string containing characters whose ordinal value exceeds 255 results in an error.  Source filters activated within the evaluated code apply to the code itself.<span class="i">$_</span>This function is only available under the <code class="inline">evalbytes</code> feature, a <code class="inline">use <span class="v">v5.16</span></code>  (or higher) declaration, or with a <code class="inline"><span class="w">CORE::</span></code>  prefix.  See feature for more information.evalbytesuse <span class="v">v5.16</span><span class="w">CORE::</span>	http://perldoc.perl.org/functions/evalbytes.html
exec	A										<code><br>exec LIST<br></code><br> The <code class="inline">exec</code> function executes a system command <i>and never returns</i>; use <code class="inline">system</code> instead of <code class="inline"><a class="l_k" href="../functions/exec.html">exec</a></code> if you want it to return.  It fails and returns false only if the command does not exist <i>and</i> it is executed directly instead of via your system&#39;s command shell (see below).execsystem<a class="l_k" href="../functions/exec.html">exec</a>Since it&#39;s a common mistake to use <code class="inline">exec</code> instead of <code class="inline"><a class="l_k" href="../functions/system.html">system</a></code>, Perl warns you if <code class="inline">exec</code> is called in void context and if there is a following statement that isn&#39;t <code>warn</code>, or <code class="inline"><a class="l_k" href="../functions/exit.html">exit</a></code> (if <code class="inline">-w</code>  is set--but you always do that, right?).	http://perldoc.perl.org/functions/exec.html
exists	A										<code><br>exists EXPR<br></code><br> Given an expression that specifies an element of a hash, returns true if the specified element in the hash has ever been initialized, even if the corresponding value is undefined.exists may also be called on array elements, but its behavior is much less obvious and is strongly tied to the use of delete on arrays.<b>WARNING:</b> Calling <code class="inline">exists</code> on array values is strongly discouraged.  The notion of deleting or checking the existence of Perl array elements is not conceptually coherent, and can lead to surprising behavior.existsA hash or array element can be true only if it&#39;s defined and defined only if it exists, but the reverse doesn&#39;t necessarily hold true.Given an expression that specifies the name of a subroutine, returns true if the specified subroutine has ever been declared, even if it is undefined.	http://perldoc.perl.org/functions/exists.html
exit	A										<code><br>exit EXPR<br></code><br>  Evaluates EXPR and exits immediately with that value.    Example:See also <code class="inline"><a class="l_k" href="../functions/die.html">die</a></code>.  If EXPR is omitted, exits with <code class="inline"><span class="n">0</span></code>  status.  The only universally recognized values for EXPR are <code class="inline"><span class="n">0</span></code>  for success and <code class="inline"><span class="n">1</span></code>  for error; other values are subject to interpretation depending on the environment in which the Perl program is running.  For example, exiting 69 (EX_UNAVAILABLE) from a <i>sendmail</i> incoming-mail filter will cause the mailer to return the item undelivered, but that&#39;s not true everywhere.<a class="l_k" href="../functions/die.html">die</a><span class="n">0</span><span class="n">0</span><span class="n">1</span>Don&#39;t use <code class="inline">exit</code> to abort a subroutine if there&#39;s any chance that someone might want to trap whatever error happened.	http://perldoc.perl.org/functions/exit.html
exp	A										<code><br>exp EXPR<br></code><br>    Returns <i>e</i> (the natural logarithm base) to the power of EXPR. If EXPR is omitted, gives <code class="inline">exp($_)</code>.exp($_)	http://perldoc.perl.org/functions/exp.html
fc	A										<code><br>fc EXPR<br></code><br>    Returns the casefolded version of EXPR.  This is the internal function implementing the <code class="inline">\<span class="w">F</span></code>  escape in double-quoted strings.\<span class="w">F</span>Casefolding is the process of mapping strings to a form where case differences are erased; comparing two strings in their casefolded form is effectively a way of asking if two strings are equal, regardless of case.Roughly, if you ever found yourself writing thisNow you can writeAnd get the correct results.Perl only implements the full form of casefolding, but you can access the simple folds using casefold() in Unicode::UCD and prop_invmap() in Unicode::UCD. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 <code class="inline"><span class="w">Default</span> <span class="w">Case</span> <span class="w">Operations</span></code> , 4.2 <code class="inline"><span class="w">Case</span>-<span class="w">Normative</span></code> , and 5.18 <code class="inline"><span class="w">Case</span> <span class="w">Mappings</span></code> , available at http://www.unicode.org/versions/latest/, as well as the Case Charts available at http://www.unicode.org/charts/case/.<span class="w">Default</span> <span class="w">Case</span> <span class="w">Operations</span><span class="w">Case</span>-<span class="w">Normative</span><span class="w">Case</span> <span class="w">Mappings</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>This function behaves the same way under various pragma, such as within <code class="inline"><span class="q">&quot;use feature &#39;unicode_strings&quot;</span></code> , as lc does, with the single exception of <code class="inline">fc</code> of LATIN CAPITAL LETTER SHARP S (U+1E9E) within the scope of <code class="inline">use <span class="w">locale</span></code> .	http://perldoc.perl.org/functions/fc.html
fcntl	A										<code><br>fcntl FILEHANDLE,FUNCTION,SCALAR<br></code><br>Implements the fcntl(2) function.  You&#39;ll probably have to sayfirst to get the correct constant definitions.  Argument processing and value returned work just like <code class="inline">ioctl</code> below. For example:ioctlYou don&#39;t have to check for <code>defined</code> on the return from <code class="inline"><a class="l_k" href="../functions/fcntl.html">fcntl</a></code>. Like <code class="inline">ioctl</code>, it maps a <code class="inline"><span class="n">0</span></code>  return from the system call into <code class="inline"><span class="q">&quot;0 but true&quot;</span></code>  in Perl.  This string is true in boolean context and <code class="inline"><span class="n">0</span></code>  in numeric context.  It is also exempt from the normal <b>-w</b> warnings on improper numeric conversions.defined<a class="l_k" href="../functions/fcntl.html">fcntl</a>ioctl<span class="n">0</span><span class="q">&quot;0 but true&quot;</span><span class="n">0</span>Note that <code class="inline">fcntl</code> raises an exception if used on a machine that doesn&#39;t implement fcntl(2).	http://perldoc.perl.org/functions/fcntl.html
fileno	A										<code><br>fileno FILEHANDLE<br></code><br>Returns the file descriptor for a filehandle, or undefined if the filehandle is not open.  If there is no real file descriptor at the OS level, as can happen with filehandles connected to memory objects via <code class="inline">open</code> with a reference for the third argument, -1 is returned.openThis is mainly useful for constructing bitmaps for <code class="inline">select</code> and low-level POSIX tty-handling operations. If FILEHANDLE is an expression, the value is taken as an indirect filehandle, generally its name.selectYou can use this to find out whether two handles refer to the same underlying descriptor:The behavior of <code class="inline"><a class="l_k" href="../functions/fileno.html">fileno</a></code> on a directory handle depends on the operating system.	http://perldoc.perl.org/functions/fileno.html
flock	A										<code><br>flock FILEHANDLE,OPERATION<br></code><br>  Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true for success, false on failure.  Produces a fatal error if used on a machine that doesn&#39;t implement flock(2), fcntl(2) locking, or lockf(3). <code class="inline">flock</code> is Perl&#39;s portable file-locking interface, although it locks entire files only, not records.flockTwo potentially non-obvious but traditional <code class="inline">flock</code> semantics are that it waits indefinitely until the lock is granted, and that its locks are <b>merely advisory</b>.  Such discretionary locks are more flexible, but offer fewer guarantees.  This means that programs that do not also use <code>flock</code>.  See <a href="../perlport.html">perlport,  your port&#39;s specific documentation, and your system-specific local manpages for details.	http://perldoc.perl.org/functions/flock.html
for	A										<code><br>for<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/for.html
foreach	A										<code><br>foreach<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/foreach.html
fork	A										<code><br>fork<br></code><br>  Does a fork(2) system call to create a new process running the same program at the same point.  It returns the child pid to the parent process, <code class="inline"><span class="n">0</span></code>  to the child process, or <code class="inline">undef</code> if the fork is unsuccessful.  File descriptors (and sometimes locks on those descriptors) are shared, while everything else is copied.  On most systems supporting fork(), great care has gone into making it extremely efficient (for example, using copy-on-write technology on data pages), making it the dominant paradigm for multitasking over the last few decades.<span class="n">0</span>undefPerl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see perlport).	http://perldoc.perl.org/functions/fork.html
format	A										<code><br>format<br></code><br>Declare a picture format for use by the <code class="inline">write</code> function.  For example:writeSee perlform for many details and examples.	http://perldoc.perl.org/functions/format.html
formline	A										<code><br>formline PICTURE,LIST<br></code><br>This is an internal function used by <code class="inline">format</code>s, though you may call it, too.  It formats (see perlform) a list of values according to the contents of PICTURE, placing the output into the format output accumulator, <code class="inline"><span class="i">$^A</span></code>  (or <code class="inline"><span class="i">$ACCUMULATOR</span></code>  in English). Eventually, when a <code class="inline">write</code> is done, the contents of <code class="inline"><span class="i">$^A</span></code>  are written to some filehandle.  You could also read <code class="inline"><span class="i">$^A</span></code>  and then set <code class="inline"><span class="i">$^A</span></code>  back to <code class="inline"><span class="q">&quot;&quot;</span></code> .  Note that a format typically does one <code class="inline">formline</code> per line of form, but the <code class="inline"><a class="l_k" href="../functions/formline.html">formline</a></code> function itself doesn&#39;t care how many newlines are embedded in the PICTURE.	http://perldoc.perl.org/functions/formline.html
ge	A										<code><br>ge<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/ge.html
getc	A										<code><br>getc FILEHANDLE<br></code><br>   Returns the next character from the input file attached to FILEHANDLE, or the undefined value at end of file or if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is set).  If FILEHANDLE is omitted, reads from STDIN.  This is not particularly efficient.  However, it cannot be used by itself to fetch single characters without waiting for the user to hit enter.  For that, try something more like:<span class="i">$!</span>Determination of whether $BSD_STYLE should be set is left as an exercise to the reader.The <code class="inline"><span class="w">POSIX::getattr</span></code>  function can do this more portably on systems purporting POSIX compliance.	http://perldoc.perl.org/functions/getc.html
getlogin	A										<code><br>getlogin<br></code><br> This implements the C library function of the same name, which on most systems returns the current login from <i>/etc/utmp</i>, if any.  If it returns the empty string, use <code class="inline">getpwuid</code>.getpwuidDo not consider <code class="inline"><a class="l_k" href="../functions/getlogin.html">getlogin</a></code> for authentication: it is not as secure as <code class="inline">getpwuid</code>.<a class="l_k" href="../functions/getlogin.html">getlogin</a>getpwuidPortability issues: getlogin in perlport.	http://perldoc.perl.org/functions/getlogin.html
getpeername	A										<code><br>getpeername SOCKET<br></code><br> Returns the packed sockaddr address of the other end of the SOCKET connection.	http://perldoc.perl.org/functions/getpeername.html
getpgrp	A										<code><br>getpgrp PID<br></code><br> Returns the current process group for the specified PID.  Use a PID of <code class="inline"><span class="n">0</span></code>  to get the current process group for the current process.  Will raise an exception if used on a machine that doesn&#39;t implement getpgrp(2).  If PID is omitted, returns the process group of the current process.  Note that the POSIX version of <code class="inline">getpgrp</code> does not accept a PID argument, so only <code class="inline"><span class="w">PID</span>==<span class="n">0</span></code>  is truly portable.<span class="n">0</span>getpgrp<span class="w">PID</span>==<span class="n">0</span>Portability issues: getpgrp in perlport.	http://perldoc.perl.org/functions/getpgrp.html
getppid	A										<code><br>getppid<br></code><br>  Returns the process id of the parent process.Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work around non-POSIX thread semantics the minority of Linux systems (and Debian GNU/kFreeBSD systems) that used LinuxThreads, this emulation has since been removed.  See the documentation for $$ for details.Portability issues: getppid in perlport.	http://perldoc.perl.org/functions/getppid.html
getpriority	A										<code><br>getpriority WHICH,WHO<br></code><br>  Returns the current priority for a process, a process group, or a user. (See <i>getpriority(2)</i>.)  Will raise a fatal exception if used on a machine that doesn&#39;t implement getpriority(2).Portability issues: getpriority in perlport.	http://perldoc.perl.org/functions/getpriority.html
getpwnam	A										<code><br>getpwnam NAME<br></code><br>	http://perldoc.perl.org/functions/getpwnam.html
getsockname	A										<code><br>getsockname SOCKET<br></code><br>Returns the packed sockaddr address of this end of the SOCKET connection, in case you don&#39;t know the address because you have several different IPs that the connection might have come in on.	http://perldoc.perl.org/functions/getsockname.html
getsockopt	A										<code><br>getsockopt SOCKET,LEVEL,OPTNAME<br></code><br>Queries the option named OPTNAME associated with SOCKET at a given LEVEL. Options may exist at multiple protocol levels depending on the socket type, but at least the uppermost socket level SOL_SOCKET (defined in the <code class="inline"><span class="w">Socket</span></code>  module) will exist.  To query options at another level the protocol number of the appropriate protocol controlling the option should be supplied.  For example, to indicate that an option is to be interpreted by the TCP protocol, LEVEL should be set to the protocol number of TCP, which you can get using <code class="inline">getprotobyname</code>.<span class="w">Socket</span>getprotobynameThe function returns a packed string representing the requested socket option, or <code class="inline">undef</code> on error, with the reason for the error placed in <code class="inline"><span class="i">$!</span></code> .	http://perldoc.perl.org/functions/getsockopt.html
given	A										<code><br>given<br></code><br>These flow-control keywords related to the experimental switch feature are documented in Switch Statements in perlsyn.	http://perldoc.perl.org/functions/given.html
glob	A										<code><br>glob EXPR<br></code><br>   In list context, returns a (possibly empty) list of filename expansions on the value of EXPR such as the standard Unix shell <i>/bin/csh</i> would do.  In scalar context, glob iterates through such filename expansions, returning undef when the list is exhausted.  This is the internal function implementing the <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator, but you can use it directly.  If EXPR is omitted, <code class="inline"><span class="i">$_</span></code>  is used.  The <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator is discussed in more detail in I/O Operators in perlop.<span class="q">&lt;*.c&gt;</span><span class="i">$_</span><span class="q">&lt;*.c&gt;</span>Note that <code class="inline">glob</code> splits its arguments on whitespace and treats each segment as separate pattern.	http://perldoc.perl.org/functions/glob.html
gmtime	A										<code><br>gmtime EXPR<br></code><br>  Works just like localtime but the returned values are localized for the standard Greenwich time zone.Note: When called in list context, $isdst, the last value returned by gmtime, is always <code class="inline"><span class="n">0</span></code> .  There is no Daylight Saving Time in GMT.<span class="n">0</span>Portability issues: gmtime in perlport.	http://perldoc.perl.org/functions/gmtime.html
goto	A										<code><br>goto LABEL<br></code><br>  The <code class="inline">goto <span class="j">LABEL</span></code>  form finds the statement labeled with LABEL and resumes execution there.  It can&#39;t be used to get out of a block or subroutine given to <code class="inline">sort</code>.  It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it&#39;s usually better to use some other construct such as <code class="inline">last</code> or <code class="inline"><a class="l_k" href="../functions/die.html">die</a></code>. The author of Perl has never felt the need to use this form of <code class="inline">goto</code> (in Perl, that is; C is another matter).  (The difference is that C does not offer named loops combined with loop control.	http://perldoc.perl.org/functions/goto.html
grep	A										<code><br>grep BLOCK LIST<br></code><br>This is similar in spirit to, but not the same as, grep(1) and its relatives.  In particular, it is not limited to using regular expressions.Evaluates the BLOCK or EXPR for each element of LIST (locally setting <code class="inline"><span class="i">$_</span></code>  to each element) and returns the list value consisting of those elements for which the expression evaluated to true.  In scalar context, returns the number of times the expression was true.<span class="i">$_</span>or equivalently,Note that <code class="inline"><span class="i">$_</span></code>  is an alias to the list value, so it can be used to modify the elements of the LIST.  While this is useful and supported, it can cause bizarre results if the elements of LIST are not variables.	http://perldoc.perl.org/functions/grep.html
gt	A										<code><br>gt<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/gt.html
hex	A										<code><br>hex EXPR<br></code><br> Interprets EXPR as a hex string and returns the corresponding value. (To convert strings that might start with either <code class="inline"><span class="n">0</span></code> , <code class="inline"><span class="n">0</span>x</code> , or <code class="inline">0b</code>, see oct.)  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="n">0</span><span class="n">0</span>x0b<span class="i">$_</span>Hex strings may only represent integers.  Strings that would cause integer overflow trigger a warning.  Leading whitespace is not stripped, unlike oct().  To present something as hex, look into printf, sprintf, and <a href="../functions/unpack.html">unpack.</a>	http://perldoc.perl.org/functions/hex.html
if	A										<code><br>if<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/if.html
import	A										<code><br>import LIST<br></code><br>There is no builtin <code class="inline">import</code> function.  It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module.  The <code class="inline">use</code> function calls the <code class="inline"><a class="l_k" href="../functions/import.html">import</a></code> method for the package used.  See also use, <a href="../perlmod.html">perlmod</a>, and <a href="../Exporter.html">Exporter.</a>importuse<a class="l_k" href="../functions/import.html">import</a>	http://perldoc.perl.org/functions/import.html
index	A										<code><br>index STR,SUBSTR,POSITION<br></code><br>  The index function searches for one string within another, but without the wildcard-like behavior of a full regular-expression pattern match. It returns the position of the first occurrence of SUBSTR in STR at or after POSITION.  If POSITION is omitted, starts searching from the beginning of the string.  POSITION before the beginning of the string or after its end is treated as if it were the beginning or the end, respectively.  POSITION and the return value are based at zero. If the substring is not found, <code class="inline">index</code> returns -1.index	http://perldoc.perl.org/functions/index.html
INIT	A										<code><br>INIT<br></code><br>These compile phase keywords are documented in BEGIN, UNITCHECK, CHECK, INIT and END in perlmod.	http://perldoc.perl.org/functions/INIT.html
int	A										<code><br>int EXPR<br></code><br>    Returns the integer portion of EXPR.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> . You should not use this function for rounding: one because it truncates towards <code class="inline"><span class="n">0</span></code> , and two because machine representations of floating-point numbers can sometimes produce counterintuitive results.  For example, <code class="inline">int(-6.725/0.025)</code> produces -268 rather than the correct -269; that&#39;s because it&#39;s really more like -268.99999999999994315658 instead.  Usually, the <code class="inline">sprintf</code>, <code class="inline"><a class="l_k" href="../functions/printf.html">printf</a></code>, or the <code class="inline"><span class="w">POSIX::floor</span></code>  and <code class="inline"><span class="w">POSIX::ceil</span></code>  functions will serve you better than will int().<span class="i">$_</span><span class="n">0</span>int(-6.725/0.025)sprintf<a class="l_k" href="../functions/printf.html">printf</a><span class="w">POSIX::floor</span><span class="w">POSIX::ceil</span>	http://perldoc.perl.org/functions/int.html
ioctl	A										<code><br>ioctl FILEHANDLE,FUNCTION,SCALAR<br></code><br>Implements the ioctl(2) function.  You&#39;ll probably first have to sayto get the correct function definitions.  If <i>sys/ioctl.ph</i> doesn&#39;t exist or doesn&#39;t have the correct definitions you&#39;ll have to roll your own, based on your C header files such as <i>&lt;sys/ioctl.h&gt;</i>. (There is a Perl script called <b>h2ph</b> that comes with the Perl kit that may help you in this, but it&#39;s nontrivial.)  SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual <code class="inline">ioctl</code> call.  (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value.	http://perldoc.perl.org/functions/ioctl.html
join	A										<code><br>join EXPR,LIST<br></code><br>Joins the separate strings of LIST into a single string with fields separated by the value of EXPR, and returns that new string.  Example:Beware that unlike <code>split</code>, <code class="inline"><a class="l_k" href="../functions/join.html">join</a></code> doesn&#39;t take a pattern as its first argument.  Compare split.split<a class="l_k" href="../functions/join.html">join</a>	http://perldoc.perl.org/functions/join.html
keys	A										<code><br>keys HASH<br></code><br> Called in list context, returns a list consisting of all the keys of the named hash, or in Perl 5.12 or later only, the indices of an array.  Perl releases prior to 5.12 will produce a syntax error if you try to use an array argument.  In scalar context, returns the number of keys or indices.Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.  Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by <code class="inline">each</code> or <code class="inline"><a class="l_k" href="../functions/keys.html">keys</a></code> may be deleted without changing the order.	http://perldoc.perl.org/functions/keys.html
kill	A										<code><br>kill SIGNAL, LIST<br></code><br> Sends a signal to a list of processes.  Returns the number of arguments that were successfully used to signal (which is not necessarily the same as the number of processes actually killed, e.g. where a process group is killed).SIGNAL may be either a signal name (a string) or a signal number.  A signal name may start with a <code class="inline"><span class="w">SIG</span></code>  prefix, thus <code class="inline"><span class="w">FOO</span></code>  and <code class="inline"><span class="w">SIGFOO</span></code>  refer to the same signal.  The string form of SIGNAL is recommended for portability because the same signal may have different numbers in different operating systems.<span class="w">SIG</span><span class="w">FOO</span><span class="w">SIGFOO</span>A list of signal names supported by the current platform can be found in <code class="inline"><span class="i">$Config</span>{<span class="w">sig_name</span>}</code> , which is provided by the <code class="inline"><span class="w">Config</span></code>  module.	http://perldoc.perl.org/functions/kill.html
last	A										<code><br>last LABEL<br></code><br> The <code class="inline">last</code> command is like the <code class="inline"><span class="w">break</span></code>  statement in C (as used in loops); it immediately exits the loop in question.  If the LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline">last <span class="j">EXPR</span></code>  form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to <code class="inline">last <span class="j">LABEL</span></code> .  The <code class="inline">continue</code> block, if any, is not executed:last<span class="w">break</span>last <span class="j">EXPR</span>last <span class="j">LABEL</span>continue<code class="inline"><a class="l_k" href="../functions/last.html">last</a></code> cannot be used to exit a block that returns a value such as <code class="inline">eval <span class="s">{</span><span class="s">}</span></code> , <code class="inline">sub <span class="s">{</span><span class="s">}</span></code> , or <code class="inline">do <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.<a class="l_k" href="../functions/last.html">last</a>eval <span class="s">{</span><span class="s">}</span>sub <span class="s">{</span><span class="s">}</span>do <span class="s">{</span><span class="s">}</span>Note that a block by itself is semantically identical to a loop that executes once.	http://perldoc.perl.org/functions/last.html
lc	A										<code><br>lc EXPR<br></code><br> Returns a lowercased version of EXPR.  This is the internal function implementing the <code class="inline">\<span class="w">L</span></code>  escape in double-quoted strings.\<span class="w">L</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>What gets returned depends on several factors:The results follow ASCII rules.  Only the characters <code class="inline"><span class="w">A</span>-<span class="w">Z</span></code>  change, to <code class="inline"><span class="w">a</span>-z</code>  respectively.<span class="w">A</span>-<span class="w">Z</span><span class="w">a</span>-z<span class="w">LC_CTYPE</span>Respects current <code class="inline"><span class="w">LC_CTYPE</span></code>  locale for code points &lt; 256; and uses Unicode rules for the remaining code points (this last can only happen if the UTF8 flag is also set).  See perllocale.<span class="w">LC_CTYPE</span>Starting in v5.20, Perl uses full Unicode rules if the locale is UTF-8.	http://perldoc.perl.org/functions/lc.html
lcfirst	A										<code><br>lcfirst EXPR<br></code><br> Returns the value of EXPR with the first character lowercased.  This is the internal function implementing the <code class="inline">\<span class="w">l</span></code>  escape in double-quoted strings.\<span class="w">l</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>This function behaves the same way under various pragmata, such as in a locale, as lc does.	http://perldoc.perl.org/functions/lcfirst.html
le	A										<code><br>le<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/le.html
length	A										<code><br>length EXPR<br></code><br> Returns the length in <i>characters</i> of the value of EXPR.  If EXPR is omitted, returns the length of <code class="inline"><span class="i">$_</span></code> .  If EXPR is undefined, returns <code class="inline">undef</code>.<span class="i">$_</span>undefThis function cannot be used on an entire array or hash to find out how many elements these have.  For that, use <code class="inline">scalar <span class="i">@array</span></code>  and <code class="inline">scalar <a class="l_k" href="../functions/keys.html">keys <span class="i">%hash</span></a></code> , respectively.scalar <span class="i">@array</span>scalar <a class="l_k" href="../functions/keys.html">keys <span class="i">%hash</span></a>Like all Perl character operations, length() normally deals in logical characters, not physical bytes.  For how many bytes a string encoded as UTF-8 would take up, use <code class="inline">length(Encode::encode_utf8(EXPR))</code> (you&#39;ll have to <code class="inline">use <span class="w">Encode</span></code>  first).	http://perldoc.perl.org/functions/length.html
link	A										<code><br>link OLDFILE,NEWFILE<br></code><br>Creates a new filename linked to the old filename.  Returns true for success, false otherwise.Portability issues: link in perlport.	http://perldoc.perl.org/functions/link.html
listen	A										<code><br>listen SOCKET,QUEUESIZE<br></code><br>Does the same thing that the listen(2) system call does.  Returns true if it succeeded, false otherwise.  See the example in Sockets: Client/Server Communication in perlipc.	http://perldoc.perl.org/functions/listen.html
local	A										<code><br>local EXPR<br></code><br>You really probably want to be using <code class="inline">my</code> instead, because <code class="inline"><a class="l_k" href="../functions/local.html">local</a></code> isn&#39;t what most people think of as &quot;local&quot;.  See Private Variables via my() in perlsub for details.my<a class="l_k" href="../functions/local.html">local</a>A local modifies the listed variables to be local to the enclosing block, file, or eval.  If more than one value is listed, the list must be placed in parentheses.  See Temporary Values via local() in perlsub for details, including issues with tied arrays and hashes.The <code class="inline">delete <a class="l_k" href="../functions/local.html">local <span class="w">EXPR</span></a></code>  construct can also be used to localize the deletion of array/hash elements to the current block.	http://perldoc.perl.org/functions/local.html
localtime	A										<code><br>localtime EXPR<br></code><br> Converts a time as returned by the time function to a 9-element list with the time analyzed for the local time zone.  Typically used as follows:All list elements are numeric and come straight out of the C `struct tm&#39;.  <code class="inline"><span class="i">$sec</span></code> , <code class="inline"><span class="i">$min</span></code> , and <code class="inline"><span class="i">$hour</span></code>  are the seconds, minutes, and hours of the specified time.<span class="i">$sec</span><span class="i">$min</span><span class="i">$hour</span><code class="inline"><span class="i">$mday</span></code>  is the day of the month and <code class="inline"><span class="i">$mon</span></code>  the month in the range <code class="inline"><span class="n">0</span>..<span class="n">11</span></code> , with 0 indicating January and 11 indicating December.	http://perldoc.perl.org/functions/localtime.html
lock	A										<code><br>lock THING<br></code><br>This function places an advisory lock on a shared variable or referenced object contained in <i>THING</i> until the lock goes out of scope.The value returned is the scalar itself, if the argument is a scalar, or a reference, if the argument is a hash, array or subroutine.lock() is a &quot;weak keyword&quot; : this means that if you&#39;ve defined a function by this name (before any calls to it), that function will be called instead.  If you are not under <code class="inline">use <span class="w">threads::shared</span></code>  this does nothing. See threads::shared.use <span class="w">threads::shared</span>	http://perldoc.perl.org/functions/lock.html
log	A										<code><br>log EXPR<br></code><br>    Returns the natural logarithm (base <i>e</i>) of EXPR.  If EXPR is omitted, returns the log of <code class="inline"><span class="i">$_</span></code> .  To get the log of another base, use basic algebra: The base-N log of a number is equal to the natural log of that number divided by the natural log of N.  For example:<span class="i">$_</span>See also <a href="../functions/exp.html">exp for the inverse operation.</a>	http://perldoc.perl.org/functions/log.html
lstat	A										<code><br>lstat FILEHANDLE<br></code><br>Does the same thing as the <code class="inline">stat</code> function (including setting the special <code class="inline"><span class="w">_</span></code>  filehandle) but stats a symbolic link instead of the file the symbolic link points to.  If symbolic links are unimplemented on your system, a normal <code class="inline">stat</code> is done.  For much more detailed information, please see the documentation for <code class="inline">stat</code>.stat<span class="w">_</span>statstatIf EXPR is omitted, stats <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>Portability issues: lstat in perlport.	http://perldoc.perl.org/functions/lstat.html
lt	A										<code><br>lt<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/lt.html
m	A										<code><br>m//<br></code><br>The match operator.  See Regexp Quote-Like Operators in perlop.	http://perldoc.perl.org/functions/m.html
map	A										<code><br>map BLOCK LIST<br></code><br>Evaluates the BLOCK or EXPR for each element of LIST (locally setting <code class="inline"><span class="i">$_</span></code>  to each element) and returns the list value composed of the results of each such evaluation.  In scalar context, returns the total number of elements so generated.  Evaluates BLOCK or EXPR in list context, so each element of LIST may produce zero, one, or more elements in the returned value.<span class="i">$_</span>translates a list of numbers to the corresponding characters.translates a list of numbers to their squared values.shows that number of returned elements can differ from the number of input elements.  To omit an element, return an empty list ().	http://perldoc.perl.org/functions/map.html
mkdir	A										<code><br>mkdir FILENAME,MASK<br></code><br>  Creates the directory specified by FILENAME, with permissions specified by MASK (as modified by <code class="inline">umask</code>).  If it succeeds it returns true; otherwise it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno). MASK defaults to 0777 if omitted, and FILENAME defaults to <code class="inline"><span class="i">$_</span></code>  if omitted.umask<span class="i">$!</span><span class="i">$_</span>In general, it is better to create directories with a permissive MASK and let the user modify that with their <code class="inline">umask</code> than it is to supply a restrictive MASK and give the user no way to be more permissive. The exceptions to this rule are when the file or directory should be kept private (mail files, for instance).	http://perldoc.perl.org/functions/mkdir.html
msgctl	A										<code><br>msgctl ID,CMD,ARG<br></code><br>Calls the System V IPC function msgctl(2).  You&#39;ll probably have to sayfirst to get the correct constant definitions.  If CMD is <code class="inline"><span class="w">IPC_STAT</span></code> , then ARG must be a variable that will hold the returned <code class="inline"><span class="w">msqid_ds</span></code>  structure.  Returns like <code class="inline">ioctl</code>: the undefined value for error, <code class="inline"><span class="q">&quot;0 but true&quot;</span></code>  for zero, or the actual return value otherwise.  See also SysV IPC in perlipc and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::Semaphore</span></code> .<span class="w">IPC_STAT</span><span class="w">msqid_ds</span>ioctl<span class="q">&quot;0 but true&quot;</span><span class="w">IPC::SysV</span><span class="w">IPC::Semaphore</span>Portability issues: msgctl in perlport.	http://perldoc.perl.org/functions/msgctl.html
msgget	A										<code><br>msgget KEY,FLAGS<br></code><br>Calls the System V IPC function msgget(2).  Returns the message queue id, or <code class="inline">undef</code> on error.  See also SysV IPC in perlipc and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::Msg</span></code> .undef<span class="w">IPC::SysV</span><span class="w">IPC::Msg</span>Portability issues: msgget in perlport.	http://perldoc.perl.org/functions/msgget.html
msgrcv	A										<code><br>msgrcv ID,VAR,SIZE,TYPE,FLAGS<br></code><br>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE.  Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message.  This packing may be opened with <code class="inline">unpack<span class="s">(</span><span class="q">&quot;l! a*&quot;</span><span class="s">)</span></code> . Taints the variable.  Returns true if successful, false  on error.  See also SysV IPC in perlipc and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::SysV::Msg</span></code> .unpack<span class="s">(</span><span class="q">&quot;l!	http://perldoc.perl.org/functions/msgrcv.html
msgsnd	A										<code><br>msgsnd ID,MSG,FLAGS<br></code><br>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID.  MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself.  This kind of packing can be achieved with <code class="inline">pack<span class="s">(</span><span class="q">&quot;l! a*&quot;</span><span class="cm">,</span> <span class="i">$type</span><span class="cm">,</span> <span class="i">$message</span><span class="s">)</span></code> .  Returns true if successful, false on error.  See also the <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::SysV::Msg</span></code>  documentation.pack<span class="s">(</span><span class="q">&quot;l! a*&quot;</span><span class="cm">,</span> <span class="i">$type</span><span class="cm">,</span> <span class="i">$message</span><span class="s">)</span><span class="w">IPC::SysV</span><span class="w">IPC::SysV::Msg</span>Portability issues: msgsnd in perlport.	http://perldoc.perl.org/functions/msgsnd.html
my	A										<code><br>my VARLIST<br></code><br>A <code class="inline">my</code> declares the listed variables to be local (lexically) to the enclosing block, file, or <code class="inline">eval</code>.  If more than one variable is listed, the list must be placed in parentheses.myevalThe exact semantics and interface of TYPE and ATTRS are still evolving.  TYPE may be a bareword, a constant declared with <code class="inline">use <span class="w">constant</span></code> , or <code class="inline">__PACKAGE__</code>.  It is currently bound to the use of the <code class="inline"><span class="w">fields</span></code>  pragma, and attributes are handled using the <code class="inline"><span class="w">attributes</span></code>  pragma, or starting from Perl 5.8.0 also via the <code class="inline"><span class="w">Attribute::Handlers</span></code>  module.	http://perldoc.perl.org/functions/my.html
ne	A										<code><br>ne<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/ne.html
next	A										<code><br>next LABEL<br></code><br> The <code class="inline">next</code> command is like the <code class="inline"><a class="l_k" href="../functions/continue.html">continue</a></code> statement in C; it starts the next iteration of the loop:next<a class="l_k" href="../functions/continue.html">continue</a>Note that if there were a <code class="inline"><a class="l_k" href="../functions/continue.html">continue</a></code> block on the above, it would get executed even on discarded lines.  If LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline">next <span class="j">EXPR</span></code>  form, available as of Perl 5.18.0, allows a label name to be computed at run time, being otherwise identical to <code class="inline">next <span class="j">LABEL</span></code> .<a class="l_k" href="../functions/continue.html">continue</a>next <span class="j">EXPR</span>next <span class="j">LABEL</span><code class="inline">next</code> cannot be used to exit a block which returns a value such as <code class="inline">eval <span class="s">{</span><span class="s">}</span></code> , <code class="inline">sub <span class="s">{</span><span class="s">}</span></code> , or <code class="inline">do <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.nexteval <span class="s">{</span><span class="s">}</span>sub <span class="s">{</span><span class="s">}</span>do <span class="s">{</span><span class="s">}</span>Note that a block by itself is semantically identical to a loop that executes once.	http://perldoc.perl.org/functions/next.html
no	A										<code><br>no MODULE VERSION LIST<br></code><br> See the <code class="inline">use</code> function, of which <code class="inline"><a class="l_k" href="../functions/no.html">no</a></code> is the opposite.use<a class="l_k" href="../functions/no.html">no</a>	http://perldoc.perl.org/functions/no.html
not	A										<code><br>not<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/not.html
oct	A										<code><br>oct EXPR<br></code><br>     Interprets EXPR as an octal string and returns the corresponding value.  (If EXPR happens to start off with <code class="inline"><span class="n">0</span>x</code> , interprets it as a hex string.  If EXPR starts off with <code class="inline">0b</code>, it is interpreted as a binary string.  Leading whitespace is ignored in all three cases.) The following will handle decimal, binary, octal, and hex in standard Perl notation:<span class="n">0</span>x0bIf EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .   To go the other way (produce a number in octal), use sprintf() or printf():<span class="i">$_</span>The oct() function is commonly used when a string such as <code class="inline"><span class="n">644</span></code>  needs to be converted into a file mode, for example.	http://perldoc.perl.org/functions/oct.html
open	A										<code><br>open FILEHANDLE,EXPR<br></code><br>   Opens the file whose filename is given by EXPR, and associates it with FILEHANDLE.Simple examples to open a file for reading:and for writing:(The following is a comprehensive reference to open(): for a gentler introduction you may consider perlopentut.)If FILEHANDLE is an undefined scalar variable (or array or hash element), a new filehandle is autovivified, meaning that the variable is assigned a reference to a newly allocated anonymous filehandle.  Otherwise if FILEHANDLE is an expression, its value is the real filehandle.  (This is considered a symbolic reference, so <code class="inline">use <span class="w">strict</span> <span class="q">&quot;refs&quot;</span></code>  should <i>not</i> be in effect.)use <span class="w">strict</span> <span class="q">&quot;refs&quot;</span>If three (or more) arguments are specified, the open mode (including optional encoding) in the second argument are distinct from the filename in the third.	http://perldoc.perl.org/functions/open.html
opendir	A										<code><br>opendir DIRHANDLE,EXPR<br></code><br>Opens a directory named EXPR for processing by <code class="inline">readdir</code>, <code class="inline"><a class="l_k" href="../functions/telldir.html">telldir</a></code>, <code>rewinddir</code>, and <code class="inline"><a class="l_k" href="../functions/closedir.html">closedir</a></code>.  Returns true if successful. DIRHANDLE may be an expression whose value can be used as an indirect dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined scalar variable (or array or hash element), the variable is assigned a reference to a new anonymous dirhandle; that is, it&#39;s autovivified. DIRHANDLEs have their own namespace separate from FILEHANDLEs.readdir<a class="l_k" href="../functions/telldir.html">telldir</a>rewinddir<a class="l_k" href="../functions/closedir.html">closedir</a>See the example at <code class="inline">readdir</code>.readdir	http://perldoc.perl.org/functions/opendir.html
or	A										<code><br>or<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/or.html
ord	A										<code><br>ord EXPR<br></code><br> Returns the numeric value of the first character of EXPR. If EXPR is an empty string, returns 0.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> . (Note <i>character</i>, not byte.)<span class="i">$_</span>For the reverse, see chr. See perlunicode for more about Unicode.	http://perldoc.perl.org/functions/ord.html
our	A										<code><br>our VARLIST<br></code><br> <code class="inline">our</code> makes a lexical alias to a package (i.e. global) variable of the same name in the current package for use within the current lexical scope.our<code>my</code> or <code class="inline"><a class="l_k" href="../functions/state.html">state</a></code>, meaning that it is only valid within a lexical scope.  Unlike <code class="inline">my</code> and <code class="inline"><a class="l_k" href="../functions/state.html">state</a></code>, which both declare new (lexical) variables, <code class="inline">our</code> only creates an alias to an existing variable: a package variable of the same name.my<a class="l_k" href="../functions/state.html">state</a>my<a class="l_k" href="../functions/state.html">state</a>ourThis means that when <code class="inline">use <span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code>  is in effect, <code class="inline">our</code> lets you use a package variable without qualifying it with the package name, but only within the lexical scope of the <code class="inline">our</code> declaration.	http://perldoc.perl.org/functions/our.html
pack	A										<code><br>pack TEMPLATE,LIST<br></code><br>Takes a LIST of values and converts it into a string using the rules given by the TEMPLATE.  The resulting string is the concatenation of the converted values.  Typically, each converted value looks like its machine-level representation.  For example, on 32-bit machines an integer may be represented by a sequence of 4 bytes, which  will in Perl be presented as a string that&#39;s 4 characters long.See perlpacktut for an introduction to this function.The TEMPLATE is a sequence of characters that give the order and type of values, as follows:One or more modifiers below may optionally follow certain letters in the TEMPLATE (the second column lists letters for which the modifier is valid):The <code class="inline">&gt;</code> and <code class="inline">&lt;</code>  modifiers can also be used on <code class="inline"><span class="s">(</span><span class="s">)</span></code>  groups  to force a particular byte-order on all components in that group,  including all its subgroups.&gt;&lt;<span class="s">(</span><span class="s">)</span>The following rules apply:Each letter may optionally be followed by a number indicating the repeat count.	http://perldoc.perl.org/functions/pack.html
package	A										<code><br>package NAMESPACE<br></code><br>      Declares the BLOCK or the rest of the compilation unit as being in the given namespace.  The scope of the package declaration is either the supplied code BLOCK or, in the absence of a BLOCK, from the declaration itself through the end of current scope (the enclosing block, file, or <code class="inline">eval</code>).  That is, the forms without a BLOCK are operative through the end of the current scope, just like the <code>state</code>, and <code class="inline"><a class="l_k" href="../functions/our.html">our</a></code> operators. All unqualified dynamic identifiers in this scope will be in the given namespace, except where overridden by another <code class="inline">package</code> declaration or when they&#39;re one of the special identifiers that qualify into <code class="inline"><span class="w">main::</span></code> , like <code class="inline"><span class="w">STDOUT</span></code> , <code class="inline"><span class="w">ARGV</span></code> , <code class="inline"><span class="w">ENV</span></code> , and the punctuation variables.evalstate<a class="l_k" href="../functions/our.html">our</a>package<span class="w">main::</span><span class="w">STDOUT</span><span class="w">ARGV</span><span class="w">ENV</span>A package statement affects dynamic variables only, including those you&#39;ve used <code class="inline">local</code> on, but <i>not</i> lexically-scoped variables, which are created with <code>state</code>, or <code class="inline"><a class="l_k" href="../functions/our.html">our</a></code>.	http://perldoc.perl.org/functions/package.html
pipe	A										<code><br>pipe READHANDLE,WRITEHANDLE<br></code><br>Opens a pair of connected pipes like the corresponding system call. Note that if you set up a loop of piped processes, deadlock can occur unless you are very careful.  In addition, note that Perl&#39;s pipes use IO buffering, so you may need to set <code class="inline"><span class="i">$|</span></code>  to flush your WRITEHANDLE after each command, depending on the application.<span class="i">$|</span>Returns true on success.See IPC::Open2, <a href="../IPC/Open3.html">IPC::Open3, and Bidirectional Communication with Another Process in perlipc for examples of such things.</a>On systems that support a close-on-exec flag on files, that flag is set on all newly opened file descriptors whose <code class="inline">fileno</code>s are <i>higher</i> than  the current value of $^F (by default 2 for <code class="inline"><span class="w">STDERR</span></code> ).	http://perldoc.perl.org/functions/pipe.html
pop	A										<code><br>pop ARRAY<br></code><br> Pops and returns the last value of the array, shortening the array by one element.Returns the undefined value if the array is empty, although this may also happen at other times.  If ARRAY is omitted, pops the <code class="inline"><span class="i">@ARGV</span></code>  array in the main program, but the <code class="inline"><span class="i">@_</span></code>  array in subroutines, just like <code class="inline">shift</code>.<span class="i">@ARGV</span><span class="i">@_</span>shiftStarting with Perl 5.14, <code class="inline">pop</code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline">pop</code> is considered highly experimental. The exact behaviour may change in a future version of Perl.poppopTo avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:	http://perldoc.perl.org/functions/pop.html
pos	A										<code><br>pos SCALAR<br></code><br> Returns the offset of where the last <code class="inline">m//g</code> search left off for the variable in question (<code class="inline"><span class="i">$_</span></code>  is used when the variable is not specified).  Note that 0 is a valid match offset.  <code class="inline">undef</code> indicates that the search position is reset (usually due to match failure, but can also be because no match has yet been run on the scalar).m//g<span class="i">$_</span>undef<code class="inline">pos</code> directly accesses the location used by the regexp engine to store the offset, so assigning to <code class="inline">pos</code> will change that offset, and so will also influence the <code class="inline">\<span class="w">G</span></code>  zero-width assertion in regular expressions.	http://perldoc.perl.org/functions/pos.html
print	A										<code><br>print FILEHANDLE LIST<br></code><br>Prints a string or a list of strings.  Returns true if successful. FILEHANDLE may be a scalar variable containing the name of or a reference to the filehandle, thus introducing one level of indirection.  (NOTE: If FILEHANDLE is a variable and the next token is a term, it may be misinterpreted as an operator unless you interpose a <code class="inline">+</code>  or put parentheses around the arguments.)  If FILEHANDLE is omitted, prints to the last selected (see select) output handle.  If LIST is omitted, prints <code class="inline"><span class="i">$_</span></code>  to the currently selected output handle.  To use FILEHANDLE alone to print the content of <code class="inline"><span class="i">$_</span></code>  to it, you must use a real filehandle like <code class="inline"><span class="w">FH</span></code> , not an indirect one like <code class="inline"><span class="i">$fh</span></code> .	http://perldoc.perl.org/functions/print.html
printf	A										<code><br>printf FILEHANDLE FORMAT, LIST<br></code><br>Equivalent to <code class="inline">print <span class="i">FILEHANDLE</span> <a class="l_k" href="../functions/sprintf.html">sprintf<span class="s">(</span><span class="w">FORMAT</span><span class="cm">,</span> <span class="w">LIST</span><span class="s">)</span></a></code> , except that <code class="inline"><span class="i">$\</span></code>  (the output record separator) is not appended.  The FORMAT and the LIST are actually parsed as a single list.  The first argument of the list will be interpreted as the <code class="inline">printf</code> format.  This means that <code class="inline">printf(@_)</code> will use <code class="inline"><span class="i">$_</span>[<span class="n">0</span>]</code>  as the format.  See sprintf for an explanation of the format argument.  If <code class="inline">use <span class="w">locale</span></code>  for <code class="inline"><span class="w">LC_NUMERIC</span></code>  Look for this throught pod is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the <code class="inline"><span class="w">LC_NUMERIC</span></code>  locale setting.	http://perldoc.perl.org/functions/printf.html
prototype	A										<code><br>prototype FUNCTION<br></code><br>Returns the prototype of a function as a string (or <code class="inline">undef</code> if the function has no prototype).  FUNCTION is a reference to, or the name of, the function whose prototype you want to retrieve.  If FUNCTION is omitted, $_ is used.undefIf FUNCTION is a string starting with <code class="inline"><span class="w">CORE::</span></code> , the rest is taken as a name for a Perl builtin.  If the builtin&#39;s arguments cannot be adequately expressed by a prototype (such as <code class="inline">system</code>), prototype() returns <code class="inline"><a class="l_k" href="../functions/undef.html">undef</a></code>, because the builtin does not really behave like a Perl function.  Otherwise, the string describing the equivalent prototype is returned.<span class="w">CORE::</span>system<a class="l_k" href="../functions/undef.html">undef</a>	http://perldoc.perl.org/functions/prototype.html
push	A										<code><br>push ARRAY,LIST<br></code><br> Treats ARRAY as a stack by appending the values of LIST to the end of ARRAY.  The length of ARRAY increases by the length of LIST.  Has the same effect asbut is more efficient.  Returns the number of elements in the array following the completed <code class="inline">push</code>.pushStarting with Perl 5.14, <code class="inline">push</code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline">push</code> is considered highly experimental. The exact behaviour may change in a future version of Perl.pushpushTo avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:	http://perldoc.perl.org/functions/push.html
qr	A										<code><br>qr/STRING/<br></code><br>Regexp-like quote.  See Regexp Quote-Like Operators in perlop.	http://perldoc.perl.org/functions/qr.html
quotemeta	A										<code><br>quotemeta EXPR<br></code><br> Returns the value of EXPR with all the ASCII non-&quot;word&quot; characters backslashed.  (That is, all ASCII characters not matching <code class="inline"><span class="q">/[A-Za-z_0-9]/</span></code>  will be preceded by a backslash in the returned string, regardless of any locale settings.) This is the internal function implementing the <code class="inline">\<span class="w">Q</span></code>  escape in double-quoted strings. (See below for the behavior on non-ASCII code points.)<span class="q">/[A-Za-z_0-9]/</span>\<span class="w">Q</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>quotemeta (and <code class="inline">\<span class="w">Q</span></code>  ... <code class="inline">\<span class="w">E</span></code> ) are useful when interpolating strings into regular expressions, because by default an interpolated variable will be considered a mini-regular expression.	http://perldoc.perl.org/functions/quotemeta.html
qx	A										<code><br>qx/STRING/<br></code><br>Generalized quotes.  See Quote-Like Operators in perlop.	http://perldoc.perl.org/functions/qx.html
rand	A										<code><br>rand EXPR<br></code><br> Returns a random fractional number greater than or equal to <code class="inline"><span class="n">0</span></code>  and less than the value of EXPR.  (EXPR should be positive.)  If EXPR is omitted, the value <code class="inline"><span class="n">1</span></code>  is used.  Currently EXPR with the value <code class="inline"><span class="n">0</span></code>  is also special-cased as <code class="inline"><span class="n">1</span></code>  (this was undocumented before Perl 5.8.0 and is subject to change in future versions of Perl).  Automatically calls <code>srand</code> has already been called.  See also <code class="inline"><a class="l_k" href="../functions/srand.html">srand</a></code>.<span class="n">0</span><span class="n">1</span><span class="n">0</span><span class="n">1</span>srand<a class="l_k" href="../functions/srand.html">srand</a>Apply <code class="inline">int()</code> to the value returned by <code class="inline"><a class="l_k" href="../functions/rand.html">rand()</a></code> if you want random integers instead of random fractional numbers.	http://perldoc.perl.org/functions/rand.html
read	A										<code><br>read FILEHANDLE,SCALAR,LENGTH,OFFSET<br></code><br> Attempts to read LENGTH <i>characters</i> of data into variable SCALAR from the specified FILEHANDLE.  Returns the number of characters actually read, <code class="inline"><span class="n">0</span></code>  at end of file, or undef if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is also set).  SCALAR will be grown or shrunk  so that the last character actually read is the last character of the scalar after the read.<span class="n">0</span><span class="i">$!</span>An OFFSET may be specified to place the read data at some place in the string other than the beginning.  A negative OFFSET specifies placement at that many characters counting backwards from the end of the string.	http://perldoc.perl.org/functions/read.html
readdir	A										<code><br>readdir DIRHANDLE<br></code><br>Returns the next directory entry for a directory opened by <code class="inline">opendir</code>. If used in list context, returns all the rest of the entries in the directory.  If there are no more entries, returns the undefined value in scalar context and the empty list in list context.opendirIf you&#39;re planning to filetest the return values out of a <code class="inline">readdir</code>, you&#39;d better prepend the directory in question.  Otherwise, because we didn&#39;t <code class="inline">chdir</code> there, it would have been testing the wrong file.readdirchdirAs of Perl 5.12 you can use a bare <code class="inline"><a class="l_k" href="../functions/readdir.html">readdir</a></code> in a <code class="inline">while</code>  loop, which will set <code class="inline"><span class="i">$_</span></code>  on every iteration.<a class="l_k" href="../functions/readdir.html">readdir</a>while<span class="i">$_</span>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious failures, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:	http://perldoc.perl.org/functions/readdir.html
readline	A										<code><br>readline EXPR<br></code><br>  Reads from the filehandle whose typeglob is contained in EXPR (or from <code class="inline"><span class="i">*ARGV</span></code>  if EXPR is not provided).  In scalar context, each call reads and returns the next line until end-of-file is reached, whereupon the subsequent call returns <code class="inline">undef</code>.  In list context, reads until end-of-file is reached and returns a list of lines.  Note that the notion of &quot;line&quot; used here is whatever you may have defined with <code class="inline"><span class="i">$/</span></code>  or <code class="inline"><span class="i">$INPUT_RECORD_SEPARATOR</span></code> ).  See $/ in perlvar.<span class="i">*ARGV</span>undef<span class="i">$/</span><span class="i">$INPUT_RECORD_SEPARATOR</span>When <code class="inline"><span class="i">$/</span></code>  is set to <code class="inline">undef</code>, when <code class="inline"><a class="l_k" href="../functions/readline.html">readline</a></code> is in scalar context (i.e., file slurp mode), and when an empty file is read, it returns <code class="inline"><span class="q">&#39;&#39;</span></code>  the first time, followed by <code class="inline">undef</code> subsequently.<span class="i">$/</span>undef<a class="l_k" href="../functions/readline.html">readline</a><span class="q">&#39;&#39;</span>undefThis is the internal function implementing the <code class="inline"><span class="q">&lt;EXPR&gt;</span></code>  operator, but you can use it directly.	http://perldoc.perl.org/functions/readline.html
readlink	A										<code><br>readlink EXPR<br></code><br>Returns the value of a symbolic link, if symbolic links are implemented.  If not, raises an exception.  If there is a system error, returns the undefined value and sets <code class="inline"><span class="i">$!</span></code>  (errno).  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$!</span><span class="i">$_</span>Portability issues: readlink in perlport.	http://perldoc.perl.org/functions/readlink.html
readpipe	A										<code><br>readpipe EXPR<br></code><br>EXPR is executed as a system command. The collected standard output of the command is returned. In scalar context, it comes back as a single (potentially multi-line) string.  In list context, returns a list of lines (however you&#39;ve defined lines with <code class="inline"><span class="i">$/</span></code>  or <code class="inline"><span class="i">$INPUT_RECORD_SEPARATOR</span></code> ). This is the internal function implementing the <code class="inline">qx/EXPR/</code> operator, but you can use it directly.  The <code class="inline">qx/EXPR/</code> operator is discussed in more detail in I/O Operators in perlop. If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$/</span><span class="i">$INPUT_RECORD_SEPARATOR</span>qx/EXPR/qx/EXPR/<span class="i">$_</span>	http://perldoc.perl.org/functions/readpipe.html
recv	A										<code><br>recv SOCKET,SCALAR,LENGTH,FLAGS<br></code><br>Receives a message on a socket.  Attempts to receive LENGTH characters of data into variable SCALAR from the specified SOCKET filehandle. SCALAR will be grown or shrunk to the length actually read.  Takes the same flags as the system call of the same name.  Returns the address of the sender if SOCKET&#39;s protocol supports this; returns an empty string otherwise.  If there&#39;s an error, returns the undefined value. This call is actually implemented in terms of recvfrom(2) system call. See UDP: Message Passing in perlipc for examples.Note the <i>characters</i>: depending on the status of the socket, either (8-bit) bytes or characters are received.	http://perldoc.perl.org/functions/recv.html
redo	A										<code><br>redo LABEL<br></code><br>The <code class="inline">redo</code> command restarts the loop block without evaluating the conditional again.  The <code class="inline">continue</code> block, if any, is not executed.  If the LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline">redo <span class="j">EXPR</span></code>  form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to <code class="inline">redo <span class="j">LABEL</span></code> .  Programs that want to lie to themselves about what was just input  normally use this command:redocontinueredo <span class="j">EXPR</span>redo <span class="j">LABEL</span><code class="inline"><a class="l_k" href="../functions/redo.html">redo</a></code> cannot be used to retry a block that returns a value such as <code class="inline">eval <span class="s">{</span><span class="s">}</span></code> , <code class="inline">sub <span class="s">{</span><span class="s">}</span></code> , or <code class="inline">do <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.<a class="l_k" href="../functions/redo.html">redo</a>eval <span class="s">{</span><span class="s">}</span>sub <span class="s">{</span><span class="s">}</span>do <span class="s">{</span><span class="s">}</span>Note that a block by itself is semantically identical to a loop that executes once.	http://perldoc.perl.org/functions/redo.html
ref	A										<code><br>ref EXPR<br></code><br> Returns a non-empty string if EXPR is a reference, the empty string otherwise.  If EXPR is not specified, <code class="inline"><span class="i">$_</span></code>  will be used.  The value returned depends on the type of thing the reference is a reference to.<span class="i">$_</span>Builtin types include:You can think of <code class="inline">ref</code> as a <code class="inline"><span class="w">typeof</span></code>  operator.ref<span class="w">typeof</span>The return value <code class="inline"><span class="w">LVALUE</span></code>  indicates a reference to an lvalue that is not a variable.  You get this from taking the reference of function calls like <code class="inline">pos()</code> or <code class="inline"><a class="l_k" href="../functions/substr.html">substr()</a></code>.  <code class="inline"><span class="w">VSTRING</span></code>  is returned if the reference points to a version string.<span class="w">LVALUE</span>pos()<a class="l_k" href="../functions/substr.html">substr()</a><span class="w">VSTRING</span>The result <code class="inline"><span class="w">Regexp</span></code>  indicates that the argument is a regular expression resulting from <code class="inline">qr//</code>.<span class="w">Regexp</span>qr//If the referenced object has been blessed into a package, then that package name is returned instead.	http://perldoc.perl.org/functions/ref.html
rename	A										<code><br>rename OLDNAME,NEWNAME<br></code><br>   Changes the name of a file; an existing file NEWNAME will be clobbered.  Returns true for success, false otherwise.Behavior of this function varies wildly depending on your system implementation.  For example, it will usually not work across file system boundaries, even though the system <i>mv</i> command sometimes compensates for this.  Other restrictions include whether it works on directories, open files, or pre-existing files.  Check perlport and either the rename(2) manpage or equivalent system documentation for details.For a platform independent <code class="inline"><span class="w">move</span></code>  function look at the File::Copy module.<span class="w">move</span>Portability issues: rename in perlport.	http://perldoc.perl.org/functions/rename.html
require	A										<code><br>require VERSION<br></code><br>Demands a version of Perl specified by VERSION, or demands some semantics specified by EXPR or by <code class="inline"><span class="i">$_</span></code>  if EXPR is not supplied.<span class="i">$_</span>VERSION may be either a numeric argument such as 5.006, which will be compared to <code class="inline"><span class="i">$]</span></code> , or a literal of the form v5.6.1, which will be compared to <code class="inline"><span class="i">$^V</span></code>  (aka $PERL_VERSION).  An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with use, which can do a similar check at compile time.<span class="i">$]</span><span class="i">$^V</span>Specifying VERSION as a literal of the form v5.6.1 should generally be avoided, because it leads to misleading error messages under earlier versions of Perl that do not support this syntax.	http://perldoc.perl.org/functions/require.html
reset	A										<code><br>reset EXPR<br></code><br>Generally used in a <code class="inline">continue</code> block at the end of a loop to clear variables and reset <code class="inline"><span class="q">??</span></code>  searches so that they work again.  The expression is interpreted as a list of single characters (hyphens allowed for ranges).  All variables and arrays beginning with one of those letters are reset to their pristine state.  If the expression is omitted, one-match searches (<code class="inline"><span class="q">?pattern?</span></code> ) are reset to match again.   Only resets variables or searches in the current package.  Always returns 1.  Examples:continue<span class="q">??</span><span class="q">?pattern?</span>Resetting <code class="inline"><span class="q">&quot;A-Z&quot;</span></code>  is not recommended because you&#39;ll wipe out your <code class="inline"><span class="i">@ARGV</span></code>  and <code class="inline"><span class="i">@INC</span></code>  arrays and your <code class="inline"><span class="i">%ENV</span></code>  hash.	http://perldoc.perl.org/functions/reset.html
return	A										<code><br>return EXPR<br></code><br>Returns from a subroutine, <code class="inline">eval</code>, or <code class="inline"><a class="l_k" href="../functions/do.html">do <span class="w">FILE</span></a></code>  with the value given in EXPR.  Evaluation of EXPR may be in list, scalar, or void context, depending on how the return value will be used, and the context may vary from one execution to the next (see wantarray).  If no EXPR is given, returns an empty list in list context, the undefined value in scalar context, and (of course) nothing at all in void context.eval<a class="l_k" href="../functions/do.html">do <span class="w">FILE</span></a>(In the absence of an explicit <code class="inline">return</code>, a subroutine, eval, or do FILE automatically returns the value of the last expression evaluated.)returnUnlike most named operators, this is also exempt from the looks-like-a-function rule, so <code class="inline">return <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline">return</code>.return <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span>return	http://perldoc.perl.org/functions/return.html
reverse	A										<code><br>reverse LIST<br></code><br>  In list context, returns a list value consisting of the elements of LIST in the opposite order.  In scalar context, concatenates the elements of LIST and returns a string value with all characters in the opposite order.Used without arguments in scalar context, reverse() reverses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>Note that reversing an array to itself (as in <code class="inline"><span class="i">@a</span> = <a class="l_k" href="../functions/reverse.html">reverse <span class="i">@a</span></a></code> ) will preserve non-existent elements whenever possible; i.e., for non-magical arrays or for tied arrays with <code class="inline"><span class="w">EXISTS</span></code>  and <code class="inline"><span class="w">DELETE</span></code>  methods.<span class="i">@a</span> = <a class="l_k" href="../functions/reverse.html">reverse <span class="i">@a</span></a><span class="w">EXISTS</span><span class="w">DELETE</span>This operator is also handy for inverting a hash, although there are some caveats.	http://perldoc.perl.org/functions/reverse.html
rewinddir	A										<code><br>rewinddir DIRHANDLE<br></code><br>Sets the current position to the beginning of the directory for the <code class="inline">readdir</code> routine on DIRHANDLE.readdirPortability issues: rewinddir in perlport.	http://perldoc.perl.org/functions/rewinddir.html
rindex	A										<code><br>rindex STR,SUBSTR,POSITION<br></code><br>Works just like index() except that it returns the position of the <i>last</i> occurrence of SUBSTR in STR.  If POSITION is specified, returns the last occurrence beginning at or before that position.	http://perldoc.perl.org/functions/rindex.html
rmdir	A										<code><br>rmdir FILENAME<br></code><br>  Deletes the directory specified by FILENAME if that directory is empty.  If it succeeds it returns true; otherwise it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno).  If FILENAME is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$!</span><span class="i">$_</span>To remove a directory tree recursively (<code class="inline"><span class="w">rm</span> -<span class="w">rf</span></code>  on Unix) look at the <code class="inline"><span class="w">rmtree</span></code>  function of the File::Path module.<span class="w">rm</span> -<span class="w">rf</span><span class="w">rmtree</span>	http://perldoc.perl.org/functions/rmdir.html
s	A										<code><br>s///<br></code><br>The substitution operator.  See Regexp Quote-Like Operators in perlop.	http://perldoc.perl.org/functions/s.html
say	A										<code><br>say FILEHANDLE LIST<br></code><br>Just like <code class="inline">print</code>, but implicitly appends a newline.  <code class="inline"><a class="l_k" href="../functions/say.html">say <span class="i">LIST</span></a></code>  is simply an abbreviation for <code class="inline"><span class="s">{</span> local <span class="i">$\</span> = <span class="q">&quot;\n&quot;</span><span class="sc">;</span> <a class="l_k" href="../functions/print.html">print <span class="i">LIST</span> <span class="s">}</span></a></code> .  To use FILEHANDLE without a LIST to print the contents of <code class="inline"><span class="i">$_</span></code>  to it, you must use a real filehandle like <code class="inline"><span class="w">FH</span></code> , not an indirect one like <code class="inline"><span class="i">$fh</span></code> .print<a class="l_k" href="../functions/say.html">say <span class="i">LIST</span></a><span class="s">{</span> local <span class="i">$\</span> = <span class="q">&quot;\n&quot;</span><span class="sc">;</span> <a class="l_k" href="../functions/print.html">print <span class="i">LIST</span> <span class="s">}</span></a><span class="i">$_</span><span class="w">FH</span><span class="i">$fh</span>This keyword is available only when the <code class="inline"><span class="q">&quot;say&quot;</span></code>  feature is enabled, or when prefixed with <code class="inline"><span class="w">CORE::</span></code> ; see feature.	http://perldoc.perl.org/functions/say.html
scalar	A										<code><br>scalar EXPR<br></code><br> Forces EXPR to be interpreted in scalar context and returns the value of EXPR.There is no equivalent operator to force an expression to be interpolated in list context because in practice, this is never needed.  If you really wanted to do so, however, you could use the construction <code class="inline"><span class="i">@</span>{<span class="s">[</span> <span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span> <span class="s">]</span>}</code> , but usually a simple <code class="inline"><span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span></code>  suffices.<span class="i">@</span>{<span class="s">[</span> <span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span> <span class="s">]</span>}<span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span>Because <code class="inline">scalar</code> is a unary operator, if you accidentally use a parenthesized list for the EXPR, this behaves as a scalar comma expression, evaluating all but the last element in void context and returning the final element evaluated in scalar context.	http://perldoc.perl.org/functions/scalar.html
seek	A										<code><br>seek FILEHANDLE,POSITION,WHENCE<br></code><br>  Sets FILEHANDLE&#39;s position, just like the <code class="inline"><span class="w">fseek</span></code>  call of <code class="inline"><span class="w">stdio</span></code> . FILEHANDLE may be an expression whose value gives the name of the filehandle.  The values for WHENCE are <code class="inline"><span class="n">0</span></code>  to set the new position <i>in bytes</i> to POSITION; <code class="inline"><span class="n">1</span></code>  to set it to the current position plus POSITION; and <code class="inline"><span class="n">2</span></code>  to set it to EOF plus POSITION, typically negative.  For WHENCE you may use the constants <code class="inline"><span class="w">SEEK_SET</span></code> , <code class="inline"><span class="w">SEEK_CUR</span></code> , and <code class="inline"><span class="w">SEEK_END</span></code>  (start of the file, current position, end of the file) from the Fcntl module.	http://perldoc.perl.org/functions/seek.html
seekdir	A										<code><br>seekdir DIRHANDLE,POS<br></code><br>Sets the current position for the <code class="inline">readdir</code> routine on DIRHANDLE.  POS must be a value returned by <code class="inline">telldir</code>.  <code class="inline"><a class="l_k" href="../functions/seekdir.html">seekdir</a></code> also has the same caveats about possible directory compaction as the corresponding system library routine.readdirtelldir<a class="l_k" href="../functions/seekdir.html">seekdir</a>	http://perldoc.perl.org/functions/seekdir.html
select	A										<code><br>select FILEHANDLE<br></code><br> Returns the currently selected filehandle.  If FILEHANDLE is supplied, sets the new current default filehandle for output.  This has two effects: first, a <code class="inline">write</code> or a <code class="inline"><a class="l_k" href="../functions/print.html">print</a></code> without a filehandle  default to this FILEHANDLE.  Second, references to variables related to output will refer to this output channel.write<a class="l_k" href="../functions/print.html">print</a>For example, to set the top-of-form format for more than one output channel, you might do the following:FILEHANDLE may be an expression whose value gives the name of the actual filehandle.  Thus:Some programmers may prefer to think of filehandles as objects with methods, preferring to write the last example as:Portability issues: <a href="../perlport.html#select">select in perlport.</a>This calls the select(2) syscall with the bit masks specified, which can be constructed using <code class="inline">fileno</code> and <code class="inline"><a class="l_k" href="../functions/vec.html">vec</a></code>, along these lines:fileno<a class="l_k" href="../functions/vec.html">vec</a>If you want to select on many filehandles, you may wish to write a subroutine like this:The usual idiom is:or to block until something becomes ready just do thisMost systems do not bother to return anything useful in $timeleft, so calling select() in scalar context just returns $nfound.Any of the bit masks can also be undef.	http://perldoc.perl.org/functions/select.html
semctl	A										<code><br>semctl ID,SEMNUM,CMD,ARG<br></code><br>Calls the System V IPC function semctl(2).  You&#39;ll probably have to sayfirst to get the correct constant definitions.  If CMD is IPC_STAT or GETALL, then ARG must be a variable that will hold the returned semid_ds structure or semaphore value array.  Returns like <code class="inline">ioctl</code>: the undefined value for error, &quot;<code class="inline">0 but true</code>&quot; for zero, or the actual return value otherwise.  The ARG must consist of a vector of native short integers, which may be created with <code class="inline">pack(&quot;s!&quot;,(0)x$nsem)</code>. See also SysV IPC in perlipc, <code class="inline"><span class="w">IPC::SysV</span></code> , <code class="inline"><span class="w">IPC::Semaphore</span></code>  documentation.ioctl0 but truepack(&quot;s!&quot;,(0)x$nsem)<span class="w">IPC::SysV</span><span class="w">IPC::Semaphore</span>Portability issues: semctl in perlport.	http://perldoc.perl.org/functions/semctl.html
semget	A										<code><br>semget KEY,NSEMS,FLAGS<br></code><br>Calls the System V IPC function semget(2).  Returns the semaphore id, or the undefined value on error.  See also SysV IPC in perlipc, <code class="inline"><span class="w">IPC::SysV</span></code> , <code class="inline"><span class="w">IPC::SysV::Semaphore</span></code>  documentation.<span class="w">IPC::SysV</span><span class="w">IPC::SysV::Semaphore</span>Portability issues: semget in perlport.	http://perldoc.perl.org/functions/semget.html
semop	A										<code><br>semop KEY,OPSTRING<br></code><br>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting.  OPSTRING must be a packed array of semop structures.  Each semop structure can be generated with <code class="inline">pack<span class="s">(</span><span class="q">&quot;s!3&quot;</span><span class="cm">,</span> <span class="i">$semnum</span><span class="cm">,</span> <span class="i">$semop</span><span class="cm">,</span> <span class="i">$semflag</span><span class="s">)</span></code> .  The length of OPSTRING  implies the number of semaphore operations.  Returns true if successful, false on error.  As an example, the following code waits on semaphore $semnum of semaphore id $semid:pack<span class="s">(</span><span class="q">&quot;s!3&quot;</span><span class="cm">,</span> <span class="i">$semnum</span><span class="cm">,</span> <span class="i">$semop</span><span class="cm">,</span> <span class="i">$semflag</span><span class="s">)</span>To signal the semaphore, replace <code class="inline"><span class="n">-1</span></code>  with <code class="inline"><span class="n">1</span></code> .	http://perldoc.perl.org/functions/semop.html
send	A										<code><br>send SOCKET,MSG,FLAGS,TO<br></code><br>Sends a message on a socket.  Attempts to send the scalar MSG to the SOCKET filehandle.  Takes the same flags as the system call of the same name.  On unconnected sockets, you must specify a destination to <i>send to</i>, in which case it does a sendto(2) syscall.  Returns the number of characters sent, or the undefined value on error.  The sendmsg(2) syscall is currently unimplemented.  See UDP: Message Passing in perlipc for examples.Note the <i>characters</i>: depending on the status of the socket, either (8-bit) bytes or characters are sent.  By default all sockets operate on bytes, but for example if the socket has been changed using binmode() to operate with the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  I/O layer (see open, or the <code>open</code> pragma, <a href="../open.html">open), the I/O will operate on UTF-8 encoded Unicode characters, not bytes.	http://perldoc.perl.org/functions/send.html
setpgrp	A										<code><br>setpgrp PID,PGRP<br></code><br> Sets the current process group for the specified PID, <code class="inline"><span class="n">0</span></code>  for the current process.  Raises an exception when used on a machine that doesn&#39;t implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted, it defaults to <code class="inline"><span class="n">0</span><span class="cm">,</span><span class="n">0</span></code> .  Note that the BSD 4.2 version of <code class="inline">setpgrp</code> does not accept any arguments, so only <code class="inline">setpgrp(0,0)</code> is portable.  See also <code class="inline"><span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span></code> .<span class="n">0</span><span class="n">0</span><span class="cm">,</span><span class="n">0</span>setpgrpsetpgrp(0,0)<span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span>Portability issues: setpgrp in perlport.	http://perldoc.perl.org/functions/setpgrp.html
setpriority	A										<code><br>setpriority WHICH,WHO,PRIORITY<br></code><br>   Sets the current priority for a process, a process group, or a user. (See setpriority(2).)  Raises an exception when used on a machine that doesn&#39;t implement setpriority(2).Portability issues: setpriority in perlport.	http://perldoc.perl.org/functions/setpriority.html
setsockopt	A										<code><br>setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL<br></code><br>Sets the socket option requested.  Returns <code class="inline">undef</code> on error. Use integer constants provided by the <code class="inline"><span class="w">Socket</span></code>  module for LEVEL and OPNAME.  Values for LEVEL can also be obtained from getprotobyname.  OPTVAL might either be a packed string or an integer. An integer OPTVAL is shorthand for pack(&quot;i&quot;, OPTVAL).undef<span class="w">Socket</span>An example disabling Nagle&#39;s algorithm on a socket:Portability issues: <a href="../perlport.html#setsockopt">setsockopt in perlport.</a>	http://perldoc.perl.org/functions/setsockopt.html
shift	A										<code><br>shift ARRAY<br></code><br>Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down.  If there are no elements in the array, returns the undefined value.  If ARRAY is omitted, shifts the <code class="inline"><span class="i">@_</span></code>  array within the lexical scope of subroutines and formats, and the <code class="inline"><span class="i">@ARGV</span></code>  array outside a subroutine and also within the lexical scopes established by the <code class="inline">eval <span class="w">STRING</span></code> , <code class="inline">BEGIN <span class="s">{</span><span class="s">}</span></code> , <code class="inline">INIT <span class="s">{</span><span class="s">}</span></code> , <code class="inline">CHECK <span class="s">{</span><span class="s">}</span></code> , <code class="inline">UNITCHECK <span class="s">{</span><span class="s">}</span></code> , and <code class="inline">END <span class="s">{</span><span class="s">}</span></code>  constructs.<span class="i">@_</span><span class="i">@ARGV</span>eval <span class="w">STRING</span>BEGIN <span class="s">{</span><span class="s">}</span>INIT <span class="s">{</span><span class="s">}</span>CHECK <span class="s">{</span><span class="s">}</span>UNITCHECK <span class="s">{</span><span class="s">}</span>END <span class="s">{</span><span class="s">}</span>Starting with Perl 5.14, <code class="inline">shift</code> can take a scalar EXPR, which must hold a reference to an unblessed array.	http://perldoc.perl.org/functions/shift.html
shmctl	A										<code><br>shmctl ID,CMD,ARG<br></code><br>Calls the System V IPC function shmctl.  You&#39;ll probably have to sayfirst to get the correct constant definitions.  If CMD is <code class="inline"><span class="w">IPC_STAT</span></code> , then ARG must be a variable that will hold the returned <code class="inline"><span class="w">shmid_ds</span></code>  structure.  Returns like ioctl: <code class="inline">undef</code> for error; &quot;<code class="inline"><span class="n">0</span></code>  but true&quot; for zero; and the actual return value otherwise. See also SysV IPC in perlipc and <code class="inline"><span class="w">IPC::SysV</span></code>  documentation.<span class="w">IPC_STAT</span><span class="w">shmid_ds</span>undef<span class="n">0</span><span class="w">IPC::SysV</span>Portability issues: shmctl in perlport.	http://perldoc.perl.org/functions/shmctl.html
shmget	A										<code><br>shmget KEY,SIZE,FLAGS<br></code><br>Calls the System V IPC function shmget.  Returns the shared memory segment id, or <code class="inline">undef</code> on error. See also SysV IPC in perlipc and <code class="inline"><span class="w">IPC::SysV</span></code>  documentation.undef<span class="w">IPC::SysV</span>Portability issues: shmget in perlport.	http://perldoc.perl.org/functions/shmget.html
shmread	A										<code><br>shmread ID,VAR,POS,SIZE<br></code><br>	http://perldoc.perl.org/functions/shmread.html
shmwrite	A										<code><br>shmwrite ID,STRING,POS,SIZE<br></code><br>Reads or writes the System V shared memory segment ID starting at position POS for size SIZE by attaching to it, copying in/out, and detaching from it.  When reading, VAR must be a variable that will hold the data read.  When writing, if STRING is too long, only SIZE bytes are used; if STRING is too short, nulls are written to fill out SIZE bytes.  Return true if successful, false on error. shmread() taints the variable.  See also SysV IPC in perlipc, <code class="inline"><span class="w">IPC::SysV</span></code> , and the <code class="inline"><span class="w">IPC::Shareable</span></code>  module from CPAN.<span class="w">IPC::SysV</span><span class="w">IPC::Shareable</span>Portability issues: shmread in perlport and <a href="../perlport.html#shmwrite">shmwrite in perlport.</a>	http://perldoc.perl.org/functions/shmwrite.html
shutdown	A										<code><br>shutdown SOCKET,HOW<br></code><br>Shuts down a socket connection in the manner indicated by HOW, which has the same interpretation as in the syscall of the same name.This is useful with sockets when you want to tell the other side you&#39;re done writing but not done reading, or vice versa. It&#39;s also a more insistent form of close because it also disables the file descriptor in any forked copies in other processes.Returns <code class="inline"><span class="n">1</span></code>  for success; on error, returns <code class="inline">undef</code> if the first argument is not a valid filehandle, or returns <code class="inline"><span class="n">0</span></code>  and sets <code class="inline"><span class="i">$!</span></code>  for any other failure.<span class="n">1</span>undef<span class="n">0</span><span class="i">$!</span>	http://perldoc.perl.org/functions/shutdown.html
sin	A										<code><br>sin EXPR<br></code><br>   Returns the sine of EXPR (expressed in radians).  If EXPR is omitted, returns sine of <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>For the inverse sine operation, you may use the <code class="inline"><span class="w">Math::Trig::asin</span></code>  function, or use this relation:<span class="w">Math::Trig::asin</span>	http://perldoc.perl.org/functions/sin.html
sleep	A										<code><br>sleep EXPR<br></code><br> Causes the script to sleep for (integer) EXPR seconds, or forever if no  argument is given.  Returns the integer number of seconds actually slept.May be interrupted if the process receives a signal such as <code class="inline"><span class="w">SIGALRM</span></code> .<span class="w">SIGALRM</span>You probably cannot mix <code>alarm</code> and <code class="inline"><a class="l_k" href="../functions/sleep.html">sleep</a></code> calls, because <code class="inline"><a class="l_k" href="../functions/sleep.html">sleep</a></code> is often implemented using <code class="inline">alarm</code>.alarm<a class="l_k" href="../functions/sleep.html">sleep</a><a class="l_k" href="../functions/sleep.html">sleep</a>alarmOn some older systems, it may sleep up to a full second less than what you requested, depending on how it counts seconds.  Most modern systems always sleep the full amount.  They may appear to sleep longer than that, however, because your process might not be scheduled right away in a busy multitasking system.For delays of finer granularity than one second, the Time::HiRes module (from CPAN, and starting from Perl 5.8 part of the standard distribution) provides usleep().	http://perldoc.perl.org/functions/sleep.html
socket	A										<code><br>socket SOCKET,DOMAIN,TYPE,PROTOCOL<br></code><br>Opens a socket of the specified kind and attaches it to filehandle SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name.  You should <code class="inline">use <span class="w">Socket</span></code>  first to get the proper definitions imported.  See the examples in Sockets: Client/Server Communication in perlipc.use <span class="w">Socket</span>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor, as determined by the value of $^F.  See $^F in perlvar.	http://perldoc.perl.org/functions/socket.html
socketpair	A										<code><br>socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL<br></code><br>Creates an unnamed pair of sockets in the specified domain, of the specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name.  If unimplemented, raises an exception. Returns true if successful.On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptors, as determined by the value of $^F.  See $^F in perlvar.Some systems defined <code class="inline">pipe</code> in terms of <code class="inline"><a class="l_k" href="../functions/socketpair.html">socketpair</a></code>, in which a call to <code class="inline">pipe<span class="s">(</span><span class="w">Rdr</span><span class="cm">,</span> <span class="w">Wtr</span><span class="s">)</span></code>  is essentially:pipe<a class="l_k" href="../functions/socketpair.html">socketpair</a>pipe<span class="s">(</span><span class="w">Rdr</span><span class="cm">,</span> <span class="w">Wtr</span><span class="s">)</span>See <a href="../perlipc.html">perlipc for an example of socketpair use.	http://perldoc.perl.org/functions/socketpair.html
sort	A										<code><br>sort SUBNAME LIST<br></code><br>   In list context, this sorts the LIST and returns the sorted list value. In scalar context, the behaviour of <code class="inline">sort()</code> is undefined.sort()If SUBNAME or BLOCK is omitted, <code class="inline">sort</code>s in standard string comparison order.  If SUBNAME is specified, it gives the name of a subroutine that returns an integer less than, equal to, or greater than <code class="inline"><span class="n">0</span></code> , depending on how the elements of the list are to be ordered.  (The  <code class="inline">&lt;=&gt;</code>  and <code class="inline">cmp</code>  operators are extremely useful in such routines.) SUBNAME may be a scalar variable name (unsubscripted), in which case the value provides the name of (or a reference to) the actual subroutine to use.	http://perldoc.perl.org/functions/sort.html
splice	A										<code><br>splice ARRAY,OFFSET,LENGTH,LIST<br></code><br>Removes the elements designated by OFFSET and LENGTH from an array, and replaces them with the elements of LIST, if any.  In list context, returns the elements removed from the array.  In scalar context, returns the last element removed, or <code class="inline">undef</code> if no elements are removed.  The array grows or shrinks as necessary. If OFFSET is negative then it starts that far from the end of the array. If LENGTH is omitted, removes everything from OFFSET onward. If LENGTH is negative, removes the elements from OFFSET onward except for -LENGTH elements at the end of the array.	http://perldoc.perl.org/functions/splice.html
split	A										<code><br>split /PATTERN/,EXPR,LIMIT<br></code><br>Splits the string EXPR into a list of strings and returns the list in list context, or the size of the list in scalar context.If only PATTERN is given, EXPR defaults to <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>Anything in EXPR that matches PATTERN is taken to be a separator that separates the EXPR into substrings (called &quot;<i>fields</i>&quot;) that do <b>not</b> include the separator.  Note that a separator may be longer than one character or even have no characters at all (the empty string, which is a zero-width match).The PATTERN need not be constant; an expression may be used to specify a pattern that varies at runtime.If PATTERN matches the empty string, the EXPR is split at the match position (between characters).	http://perldoc.perl.org/functions/split.html
sprintf	A										<code><br>sprintf FORMAT, LIST<br></code><br>Returns a string formatted by the usual <code class="inline">printf</code> conventions of the C library function <code class="inline">sprintf</code>.  See below for more details and see <i>sprintf(3)</i> or <i>printf(3)</i> on your system for an explanation of the general principles.printfsprintfFor example:Perl does its own <code class="inline"><a class="l_k" href="../functions/sprintf.html">sprintf</a></code> formatting: it emulates the C function sprintf(3), but doesn&#39;t use it except for floating-point numbers, and even then only standard modifiers are allowed.   Non-standard extensions in your local sprintf(3) are  therefore unavailable from Perl.<a class="l_k" href="../functions/sprintf.html">sprintf</a>Unlike <code class="inline">printf</code>, <code class="inline"><a class="l_k" href="../functions/sprintf.html">sprintf</a></code> does not do what you probably mean when you pass it an array as your first argument.	http://perldoc.perl.org/functions/sprintf.html
sqrt	A										<code><br>sqrt EXPR<br></code><br>  Return the positive square root of EXPR.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .  Works only for non-negative operands unless you&#39;ve loaded the <code class="inline"><span class="w">Math::Complex</span></code>  module.<span class="i">$_</span><span class="w">Math::Complex</span>	http://perldoc.perl.org/functions/sqrt.html
srand	A										<code><br>srand EXPR<br></code><br>  Sets and returns the random number seed for the <code class="inline">rand</code> operator.randThe point of the function is to &quot;seed&quot; the <code class="inline">rand</code> function so that <code class="inline"><a class="l_k" href="../functions/rand.html">rand</a></code> can produce a different sequence each time you run your program.  When called with a parameter, <code class="inline">srand</code> uses that for the seed; otherwise it (semi-)randomly chooses a seed.  In either case, starting with Perl 5.14, it returns the seed.  To signal that your code will work <i>only</i> on Perls of a recent vintage:rand<a class="l_k" href="../functions/rand.html">rand</a>srandIf <code class="inline"><a class="l_k" href="../functions/srand.html">srand()</a></code> is not called explicitly, it is called implicitly without a parameter at the first use of the <code class="inline">rand</code> operator.	http://perldoc.perl.org/functions/srand.html
stat	A										<code><br>stat FILEHANDLE<br></code><br>  Returns a 13-element list giving the status info for a file, either the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is  omitted, it stats <code class="inline"><span class="i">$_</span></code>  (not <code class="inline"><span class="w">_</span></code> !).  Returns the empty list if <code class="inline">stat</code> fails.  Typically used as follows:<span class="i">$_</span><span class="w">_</span>statNot all fields are supported on all filesystem types.  Here are the meanings of the fields:(The epoch was at 00:00 January 1, 1970 GMT.)(*) Not all fields are supported on all filesystem types.  Notably, the ctime field is non-portable.  In particular, you cannot expect it to be a &quot;creation time&quot;; see Files and Filesystems in perlport for details.If <code class="inline">stat</code> is passed the special filehandle consisting of an underline, no stat is done, but the current contents of the stat structure from the last <code class="inline">stat</code>, <code class="inline"><a class="l_k" href="../functions/lstat.html">lstat</a></code>, or filetest are returned.	http://perldoc.perl.org/functions/stat.html
state	A										<code><br>state VARLIST<br></code><br><code class="inline">state</code> declares a lexically scoped variable, just like <code class="inline"><a class="l_k" href="../functions/my.html">my</a></code>. However, those variables will never be reinitialized, contrary to lexical variables that are reinitialized each time their enclosing block is entered. See Persistent Private Variables in perlsub for details.state<a class="l_k" href="../functions/my.html">my</a>If more than one variable is listed, the list must be placed in parentheses.  With a parenthesised list, <code class="inline">undef</code> can be used as a dummy placeholder.  However, since initialization of state variables in list context is currently not possible this would serve no purpose.undef<code class="inline">state</code> variables are enabled only when the <code class="inline"><a class="l_k" href="../functions/use.html">use <span class="w">feature</span> <span class="q">&quot;state&quot;</span></a></code>  pragma  is in effect, unless the keyword is written as <code class="inline"><span class="w">CORE::state</span></code> .	http://perldoc.perl.org/functions/state.html
study	A										<code><br>study SCALAR<br></code><br>May take extra time to study SCALAR (<code class="inline"><span class="i">$_</span></code>  if unspecified) in anticipation of doing many pattern matches on the string before it is next modified. This may or may not save time, depending on the nature and number of patterns you are searching and the distribution of character frequencies in the string to be searched; you probably want to compare run times with and without it to see which is faster.  Those loops that scan for many short constant strings (including the constant parts of more complex patterns) will benefit most.<span class="i">$_</span>Note that since Perl version 5.16 this function has been a no-op, but this might change in a future release.(The way <code class="inline">study</code> works is this: a linked list of every character in the string to be searched is made, so we know, for example, where all the <code class="inline"><span class="q">&#39;k&#39;</span></code>  characters are.	http://perldoc.perl.org/functions/study.html
sub	A										<code><br>sub NAME BLOCK<br></code><br>This is subroutine definition, not a real function <i>per se</i>.  Without a BLOCK it&#39;s just a forward declaration.  Without a NAME, it&#39;s an anonymous function declaration, so does return a value: the CODE ref of the closure just created.See perlsub and <a href="../perlref.html">perlref for details about subroutines and references; see attributes</a> and <a href="../Attribute/Handlers.html">Attribute::Handlers for more information about attributes.</a>	http://perldoc.perl.org/functions/sub.html
substr	A										<code><br>substr EXPR,OFFSET,LENGTH,REPLACEMENT<br></code><br>    Extracts a substring out of EXPR and returns it.  First character is at offset zero.  If OFFSET is negative, starts that far back from the end of the string.  If LENGTH is omitted, returns everything through the end of the string.  If LENGTH is negative, leaves that many characters off the end of the string.You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue.  If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it.	http://perldoc.perl.org/functions/substr.html
symlink	A										<code><br>symlink OLDFILE,NEWFILE<br></code><br>   Creates a new filename symbolically linked to the old filename. Returns <code class="inline"><span class="n">1</span></code>  for success, <code class="inline"><span class="n">0</span></code>  otherwise.  On systems that don&#39;t support symbolic links, raises an exception.  To check for that, use eval:<span class="n">1</span><span class="n">0</span>Portability issues: <a href="../perlport.html#symlink">symlink in perlport.</a>	http://perldoc.perl.org/functions/symlink.html
syscall	A										<code><br>syscall NUMBER, LIST<br></code><br> Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call.  If unimplemented, raises an exception.  The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int.  If not, the pointer to the string value is passed.  You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string.  You can&#39;t use a string literal (or other read-only string) as an argument to <code class="inline">syscall</code> because Perl has to assume that any string pointer might be written through.	http://perldoc.perl.org/functions/syscall.html
sysopen	A										<code><br>sysopen FILEHANDLE,FILENAME,MODE<br></code><br>Opens the file whose filename is given by FILENAME, and associates it with FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the real filehandle wanted; an undefined scalar will be suitably autovivified.  This function calls the underlying operating system&#39;s <i>open</i>(2) function with the parameters FILENAME, MODE, and PERMS.The possible values and flag bits of the MODE parameter are system-dependent; they are available via the standard module <code class="inline"><span class="w">Fcntl</span></code> .  See the documentation of your operating system&#39;s <i>open</i>(2) syscall to see which values and flag bits are available.  You may combine several flags using the <code class="inline">|</code>-operator.<span class="w">Fcntl</span>|Some of the most common values are <code class="inline"><span class="w">O_RDONLY</span></code>  for opening the file in read-only mode, <code class="inline"><span class="w">O_WRONLY</span></code>  for opening the file in write-only mode, and <code class="inline"><span class="w">O_RDWR</span></code>  for opening the file in read-write mode.	http://perldoc.perl.org/functions/sysopen.html
sysread	A										<code><br>sysread FILEHANDLE,SCALAR,LENGTH,OFFSET<br></code><br>Attempts to read LENGTH bytes of data into variable SCALAR from the specified FILEHANDLE, using the read(2).  It bypasses buffered IO, so mixing this with other kinds of reads, <code class="inline">print</code>, <code>seek</code>, <code class="inline"><a class="l_k" href="../functions/tell.html">tell</a></code>, or <code class="inline"><a class="l_k" href="../functions/eof.html">eof</a></code> can cause confusion because the perlio or stdio layers usually buffers data.  Returns the number of bytes actually read, <code class="inline"><span class="n">0</span></code>  at end of file, or undef if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is also set).  SCALAR will be grown or shrunk so that the last byte actually read is the last byte of the scalar after the read.printseek<a class="l_k" href="../functions/tell.html">tell</a><a class="l_k" href="../functions/eof.html">eof</a><span class="n">0</span><span class="i">$!</span>An OFFSET may be specified to place the read data at some place in the string other than the beginning.	http://perldoc.perl.org/functions/sysread.html
sysseek	A										<code><br>sysseek FILEHANDLE,POSITION,WHENCE<br></code><br> Sets FILEHANDLE&#39;s system position in bytes using lseek(2).  FILEHANDLE may be an expression whose value gives the name of the filehandle.  The values for WHENCE are <code class="inline"><span class="n">0</span></code>  to set the new position to POSITION; <code class="inline"><span class="n">1</span></code>  to set the it to the current position plus POSITION; and <code class="inline"><span class="n">2</span></code>  to set it to EOF plus POSITION, typically negative.<span class="n">0</span><span class="n">1</span><span class="n">2</span>Note the <i>in bytes</i>: even if the filehandle has been set to operate on characters (for example by using the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  I/O layer), tell() will return byte offsets, not character offsets (because implementing that would render sysseek() unacceptably slow).<span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span>sysseek() bypasses normal buffered IO, so mixing it with reads other than <code class="inline">sysread</code> (for example <code class="inline">&lt;&gt;</code>  or read()) <code class="inline">print</code>, <code class="inline"><a class="l_k" href="../functions/write.html">write</a></code>, <code>tell</code>, or <code class="inline"><a class="l_k" href="../functions/eof.html">eof</a></code> may cause confusion.sysread&lt;&gt;print<a class="l_k" href="../functions/write.html">write</a>tell<a class="l_k" href="../functions/eof.html">eof</a>For WHENCE, you may also use the constants <code class="inline"><span class="w">SEEK_SET</span></code> , <code class="inline"><span class="w">SEEK_CUR</span></code> , and <code class="inline"><span class="w">SEEK_END</span></code>  (start of the file, current position, end of the file) from the Fcntl module.	http://perldoc.perl.org/functions/sysseek.html
system	A										<code><br>system LIST<br></code><br> Does exactly the same thing as <code class="inline">exec <span class="i">LIST</span></code> , except that a fork is done first and the parent process waits for the child process to exit.  Note that argument processing varies depending on the number of arguments.  If there is more than one argument in LIST, or if LIST is an array with more than one value, starts the program given by the first element of the list with arguments given by the rest of the list.  If there is only one scalar argument, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system&#39;s command shell for parsing (this is <code class="inline">/bin/sh -c</code> on Unix platforms, but varies on other platforms).	http://perldoc.perl.org/functions/system.html
syswrite	A										<code><br>syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET<br></code><br>Attempts to write LENGTH bytes of data from variable SCALAR to the specified FILEHANDLE, using write(2).  If LENGTH is not specified, writes whole SCALAR.  It bypasses buffered IO, so mixing this with reads (other than <code>print</code>, <code class="inline"><a class="l_k" href="../functions/write.html">write</a></code>, <code>tell</code>, or <code class="inline"><a class="l_k" href="../functions/eof.html">eof</a></code> may cause confusion because the perlio and stdio layers usually buffer data.  Returns the number of bytes actually written, or <code class="inline">undef</code> if there was an error (in this case the errno variable <code class="inline"><span class="i">$!</span></code>  is also set).  If the LENGTH is greater than the data available in the SCALAR after the OFFSET, only as much data as is available will be written.print<a class="l_k" href="../functions/write.html">write</a>tell<a class="l_k" href="../functions/eof.html">eof</a>undef<span class="i">$!</span>An OFFSET may be specified to write the data from some part of the string other than the beginning.	http://perldoc.perl.org/functions/syswrite.html
tell	A										<code><br>tell FILEHANDLE<br></code><br>Returns the current position <i>in bytes</i> for FILEHANDLE, or -1 on error.  FILEHANDLE may be an expression whose value gives the name of the actual filehandle.  If FILEHANDLE is omitted, assumes the file last read.Note the <i>in bytes</i>: even if the filehandle has been set to operate on characters (for example by using the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  open layer), tell() will return byte offsets, not character offsets (because that would render seek() and tell() rather slow).<span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span>The return value of tell() for the standard streams like the STDIN depends on the operating system: it may return -1 or something else.	http://perldoc.perl.org/functions/tell.html
telldir	A										<code><br>telldir DIRHANDLE<br></code><br>Returns the current position of the <code class="inline">readdir</code> routines on DIRHANDLE. Value may be given to <code class="inline">seekdir</code> to access a particular location in a directory.  <code class="inline">telldir</code> has the same caveats about possible directory compaction as the corresponding system library routine.readdirseekdirtelldir	http://perldoc.perl.org/functions/telldir.html
tie	A										<code><br>tie VARIABLE,CLASSNAME,LIST<br></code><br>This function binds a variable to a package class that will provide the implementation for the variable.  VARIABLE is the name of the variable to be enchanted.  CLASSNAME is the name of a class implementing objects of correct type.  Any additional arguments are passed to the appropriate constructor method of the class (meaning <code class="inline"><span class="w">TIESCALAR</span></code> , <code class="inline"><span class="w">TIEHANDLE</span></code> , <code class="inline"><span class="w">TIEARRAY</span></code> , or <code class="inline"><span class="w">TIEHASH</span></code> ).  Typically these are arguments such as might be passed to the <code class="inline"><span class="i">dbm_open</span><span class="s">(</span><span class="s">)</span></code>  function of C.  The object returned by the constructor is also returned by the <code class="inline">tie</code> function, which would be useful if you want to access other methods in CLASSNAME.<span class="w">TIESCALAR</span><span class="w">TIEHANDLE</span><span class="w">TIEARRAY</span><span class="w">TIEHASH</span><span class="i">dbm_open</span><span class="s">(</span><span class="s">)</span>tieNote that functions such as <code class="inline">keys</code> and <code class="inline"><a class="l_k" href="../functions/values.html">values</a></code> may return huge lists when used on large objects, like DBM files.	http://perldoc.perl.org/functions/tie.html
tied	A										<code><br>tied VARIABLE<br></code><br>Returns a reference to the object underlying VARIABLE (the same value that was originally returned by the <code class="inline">tie</code> call that bound the variable to a package.)  Returns the undefined value if VARIABLE isn&#39;t tied to a package.tie	http://perldoc.perl.org/functions/tied.html
time	A										<code><br>time<br></code><br> Returns the number of non-leap seconds since whatever time the system considers to be the epoch, suitable for feeding to <code class="inline">gmtime</code> and <code class="inline">localtime</code>.  On most systems the epoch is 00:00:00 UTC, January 1, 1970; a prominent exception being Mac OS Classic which uses 00:00:00, January 1, 1904 in the current local time zone for its epoch.gmtimelocaltimeFor measuring time in better granularity than one second, use the Time::HiRes module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the <code class="inline">syscall</code> interface of Perl.  See perlfaq8 for details.syscallFor date and time processing look at the many related modules on CPAN.	http://perldoc.perl.org/functions/time.html
times	A										<code><br>times<br></code><br>Returns a four-element list giving the user and system times in seconds for this process and any exited children of this process.In scalar context, <code class="inline"><a class="l_k" href="../functions/times.html">times</a></code> returns <code class="inline"><span class="i">$user</span></code> .<a class="l_k" href="../functions/times.html">times</a><span class="i">$user</span>Children&#39;s times are only included for terminated children.Portability issues: times in perlport.	http://perldoc.perl.org/functions/times.html
tr	A										<code><br>tr///<br></code><br>The transliteration operator.  Same as <code class="inline">y///</code>.  See Quote-Like Operators in perlop.y///	http://perldoc.perl.org/functions/tr.html
truncate	A										<code><br>truncate FILEHANDLE,LENGTH<br></code><br>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length.  Raises an exception if truncate isn&#39;t implemented on your system.  Returns true if successful, <code class="inline">undef</code> on error.undefThe behavior is undefined if LENGTH is greater than the length of the file.The position in the file of FILEHANDLE is left unchanged.  You may want to call seek before writing to the file.Portability issues: truncate in perlport.	http://perldoc.perl.org/functions/truncate.html
uc	A										<code><br>uc EXPR<br></code><br>  Returns an uppercased version of EXPR.  This is the internal function implementing the <code class="inline">\<span class="w">U</span></code>  escape in double-quoted strings. It does not attempt to do titlecase mapping on initial letters.  See ucfirst for that.\<span class="w">U</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>This function behaves the same way under various pragma, such as in a locale, as lc does.	http://perldoc.perl.org/functions/uc.html
ucfirst	A										<code><br>ucfirst EXPR<br></code><br> Returns the value of EXPR with the first character in uppercase (titlecase in Unicode).  This is the internal function implementing the <code class="inline">\<span class="w">u</span></code>  escape in double-quoted strings.\<span class="w">u</span>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .<span class="i">$_</span>This function behaves the same way under various pragma, such as in a locale, as lc does.	http://perldoc.perl.org/functions/ucfirst.html
umask	A										<code><br>umask EXPR<br></code><br>Sets the umask for the process to EXPR and returns the previous value. If EXPR is omitted, merely returns the current umask.The Unix permission <code class="inline"><span class="w">rwxr</span>-x---</code>  is represented as three sets of three bits, or three octal digits: <code class="inline"><span class="n">0750</span></code>  (the leading 0 indicates octal and isn&#39;t one of the digits).  The <code class="inline">umask</code> value is such a number representing disabled permissions bits.  The permission (or &quot;mode&quot;) values you pass <code class="inline">mkdir</code> or <code class="inline"><a class="l_k" href="../functions/sysopen.html">sysopen</a></code> are modified by your umask, so even if you tell <code class="inline">sysopen</code> to create a file with permissions <code class="inline"><span class="n">0777</span></code> , if your umask is <code class="inline"><span class="n">0022</span></code> , then the file will actually be created with permissions <code class="inline"><span class="n">0755</span></code> .	http://perldoc.perl.org/functions/umask.html
undef	A										<code><br>undef EXPR<br></code><br> Undefines the value of EXPR, which must be an lvalue.  Use only on a scalar value, an array (using <code class="inline"><span class="i">@</span></code> ), a hash (using <code class="inline"><span class="i">%</span></code> ), a subroutine (using <code class="inline"><span class="i">&amp;</span></code> ), or a typeglob (using <code class="inline"><span class="i">*</span></code> ).  Saying <code class="inline">undef <span class="i">$hash</span>{<span class="i">$key</span>}</code>  will probably not do what you expect on most predefined variables or DBM list values, so don&#39;t do that; see delete.  Always returns the undefined value.  You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter.	http://perldoc.perl.org/functions/undef.html
UNITCHECK	A										<code><br>UNITCHECK<br></code><br>These compile phase keywords are documented in BEGIN, UNITCHECK, CHECK, INIT and END in perlmod.	http://perldoc.perl.org/functions/UNITCHECK.html
unless	A										<code><br>unless<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/unless.html
unlink	A										<code><br>unlink LIST<br></code><br>    Deletes a list of files.  On success, it returns the number of files it successfully deleted.  On failure, it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno):<span class="i">$!</span>On error, <code class="inline"><a class="l_k" href="../functions/unlink.html">unlink</a></code> will not tell you which files it could not remove. If you want to know which files you could not remove, try them one at a time:<a class="l_k" href="../functions/unlink.html">unlink</a>Note: <code class="inline"><a class="l_k" href="../functions/unlink.html">unlink</a></code> will not attempt to delete directories unless you are superuser and the <b>-U</b> flag is supplied to Perl.  Even if these conditions are met, be warned that unlinking a directory can inflict damage on your filesystem.	http://perldoc.perl.org/functions/unlink.html
unpack	A										<code><br>unpack TEMPLATE,EXPR<br></code><br><code class="inline">unpack</code> does the reverse of <code class="inline"><a class="l_k" href="../functions/pack.html">pack</a></code>: it takes a string and expands it out into a list of values. (In scalar context, it returns merely the first value produced.)unpack<a class="l_k" href="../functions/pack.html">pack</a>If EXPR is omitted, unpacks the <code class="inline"><span class="i">$_</span></code>  string. See perlpacktut for an introduction to this function.<span class="i">$_</span>The string is broken into chunks described by the TEMPLATE.  Each chunk is converted separately to a value.  Typically, either the string is a result of <code class="inline">pack</code>, or the characters of the string represent a C structure of some kind.packThe TEMPLATE has the same format as in the <code class="inline">pack</code> function.	http://perldoc.perl.org/functions/unpack.html
unshift	A										<code><br>unshift ARRAY,LIST<br></code><br>Does the opposite of a <code class="inline">shift</code>.  Or the opposite of a <code class="inline"><a class="l_k" href="../functions/push.html">push</a></code>, depending on how you look at it.  Prepends list to the front of the array and returns the new number of elements in the array.shift<a class="l_k" href="../functions/push.html">push</a>Note the LIST is prepended whole, not one element at a time, so the prepended elements stay in the same order.  Use <code class="inline">reverse</code> to do the reverse.reverseStarting with Perl 5.14, <code class="inline">unshift</code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline">unshift</code> is considered highly experimental.	http://perldoc.perl.org/functions/unshift.html
untie	A										<code><br>untie VARIABLE<br></code><br>Breaks the binding between a variable and a package. (See tie.) Has no effect if the variable is not tied.	http://perldoc.perl.org/functions/untie.html
until	A										<code><br>until<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/until.html
use	A										<code><br>use Module VERSION LIST<br></code><br>  Imports some semantics into the current package from the named module, generally by aliasing certain subroutine or variable names into your package.  It is exactly equivalent toexcept that Module <i>must</i> be a bareword. The importation can be made conditional by using the if module.In the peculiar <code class="inline">use <span class="w">VERSION</span></code>  form, VERSION may be either a positive decimal fraction such as 5.006, which will be compared to <code class="inline"><span class="i">$]</span></code> , or a v-string of the form v5.6.1, which will be compared to <code class="inline"><span class="i">$^V</span></code>  (aka $PERL_VERSION).  An exception is raised if VERSION is greater than the version of the current Perl interpreter; Perl will not attempt to parse the rest of the file.	http://perldoc.perl.org/functions/use.html
utime	A										<code><br>utime LIST<br></code><br>Changes the access and modification times on each file of a list of files.  The first two elements of the list must be the NUMERIC access and modification times, in that order.  Returns the number of files successfully changed.  The inode change time of each file is set to the current time.  For example, this code has the same effect as the Unix touch(1) command when the files <i>already exist</i> and belong to the user running the program:Since Perl 5.8.0, if the first two elements of the list are <code class="inline"><a class="l_k" href="../functions/undef.html">undef</a></code>,  the utime(2) syscall from your C library is called with a null second argument.	http://perldoc.perl.org/functions/utime.html
values	A										<code><br>values HASH<br></code><br>In list context, returns a list consisting of all the values of the named hash.  In Perl 5.12 or later only, will also return a list of the values of an array; prior to that release, attempting to use an array argument will produce a syntax error.  In scalar context, returns the number of values.Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.  Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by <code class="inline">each</code> or <code class="inline"><a class="l_k" href="../functions/keys.html">keys</a></code> may be deleted without changing the order.	http://perldoc.perl.org/functions/values.html
vec	A										<code><br>vec EXPR,OFFSET,BITS<br></code><br>  Treats the string in EXPR as a bit vector made up of elements of width BITS and returns the value of the element specified by OFFSET as an unsigned integer.  BITS therefore specifies the number of bits that are reserved for each element in the bit vector.  This must be a power of two from 1 to 32 (or 64, if your platform supports that).If BITS is 8, &quot;elements&quot; coincide with bytes of the input string.If BITS is 16 or more, bytes of the input string are grouped into chunks of size BITS/8, and each group is converted to a number as with pack()/unpack() with big-endian formats <code class="inline"><span class="w">n</span></code> /<code class="inline"><span class="w">N</span></code>  (and analogously for BITS==64).	http://perldoc.perl.org/functions/vec.html
wait	A										<code><br>wait<br></code><br>Behaves like wait(2) on your system: it waits for a child process to terminate and returns the pid of the deceased process, or <code class="inline"><span class="n">-1</span></code>  if there are no child processes.  The status is returned in <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> . Note that a return value of <code class="inline"><span class="n">-1</span></code>  could mean that child processes are being automatically reaped, as described in perlipc.<span class="n">-1</span><span class="i">$?</span><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}<span class="n">-1</span>If you use <code class="inline">wait</code> in your handler for $SIG{CHLD}, it may accidentally wait for the child created by qx() or system().  See perlipc for details.waitPortability issues: wait in perlport.	http://perldoc.perl.org/functions/wait.html
waitpid	A										<code><br>waitpid PID,FLAGS<br></code><br>Waits for a particular child process to terminate and returns the pid of the deceased process, or <code class="inline"><span class="n">-1</span></code>  if there is no such child process.  On some systems, a value of 0 indicates that there are processes still running. The status is returned in <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> .  If you say<span class="n">-1</span><span class="i">$?</span><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}then you can do a non-blocking wait for all pending zombie processes. Non-blocking wait is available on machines supporting either the waitpid(2) or wait4(2) syscalls.  However, waiting for a particular pid with FLAGS of <code class="inline"><span class="n">0</span></code>  is implemented everywhere.	http://perldoc.perl.org/functions/waitpid.html
wantarray	A										<code><br>wantarray<br></code><br> Returns true if the context of the currently executing subroutine or <code class="inline">eval</code> is looking for a list value.  Returns false if the context is looking for a scalar.  Returns the undefined value if the context is looking for no value (void context).eval<code class="inline"><a class="l_k" href="../functions/wantarray.html">wantarray()</a></code>&#39;s result is unspecified in the top level of a file, in a <code class="inline">BEGIN</code> , <code class="inline">UNITCHECK</code> , <code class="inline">CHECK</code> , <code class="inline">INIT</code>  or <code class="inline">END</code>  block, or in a <code class="inline">DESTROY</code>  method.<a class="l_k" href="../functions/wantarray.html">wantarray()</a>BEGINUNITCHECKCHECKINITENDDESTROYThis function should have been named wantlist() instead.	http://perldoc.perl.org/functions/wantarray.html
warn	A										<code><br>warn LIST<br></code><br>  Prints the value of LIST to STDERR.  If the last element of LIST does not end in a newline, it appends the same file/line number text as <code class="inline">die</code> does.dieIf the output is empty and <code class="inline"><span class="i">$@</span></code>  already contains a value (typically from a previous eval) that value is used after appending <code class="inline"><span class="q">&quot;\t...caught&quot;</span></code>  to <code class="inline"><span class="i">$@</span></code> .  This is useful for staying almost, but not entirely similar to <code class="inline">die</code>.<span class="i">$@</span><span class="q">&quot;\t...caught&quot;</span><span class="i">$@</span>dieIf <code class="inline"><span class="i">$@</span></code>  is empty then the string <code class="inline"><span class="q">&quot;Warning: Something&#39;s wrong&quot;</span></code>  is used.<span class="i">$@</span><span class="q">&quot;Warning: Something&#39;s wrong&quot;</span>No message is printed if there is a <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  handler installed.	http://perldoc.perl.org/functions/warn.html
when	A										<code><br>when<br></code><br>These flow-control keywords related to the experimental switch feature are documented in Switch Statements in perlsyn.	http://perldoc.perl.org/functions/when.html
while	A										<code><br>while<br></code><br>These flow-control keywords are documented in Compound Statements in perlsyn.	http://perldoc.perl.org/functions/while.html
write	A										<code><br>write FILEHANDLE<br></code><br>Writes a formatted record (possibly multi-line) to the specified FILEHANDLE, using the format associated with that file.  By default the format for a file is the one having the same name as the filehandle, but the format for the current output channel (see the <code class="inline">select</code> function) may be set explicitly by assigning the name of the format to the <code class="inline"><span class="i">$~</span></code>  variable.select<span class="i">$~</span>Top of form processing is handled automatically:  if there is insufficient room on the current page for the formatted record, the page is advanced by writing a form feed and a special top-of-page format is used to format the new page header before the record is written.	http://perldoc.perl.org/functions/write.html
x	A										<code><br>x<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/x.html
xor	A										<code><br>xor<br></code><br>These operators are documented in perlop.	http://perldoc.perl.org/functions/xor.html
y	A										<code><br>y///<br></code><br>The transliteration operator.  Same as <code class="inline">tr///</code>.  See Quote-Like Operators in perlop.tr///	http://perldoc.perl.org/functions/y.html
