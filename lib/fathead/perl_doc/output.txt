title	type	alias	null1	categories	null2	related	null3	links	disambiguation	image	abstract	sourceurl
gromit	A										Wallace's dog	http://perldoc.perl.org/perldiag.html#%25s-has-too-many-errors
%s has too many errors	A			Perl Diagnostics							<section class="prog__container"><p>(F) The parser has given up trying to parse the program after 10 errors. Further error messages would likely be uninformative.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-has-too-many-errors
Bad symbol for hash	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal request asked to add a hash entry to something that wasn&#39;t a symbol table entry.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-symbol-for-hash
DirHandle (module)	A			Perl Standard Modules							<section class="prog__container"><p>DirHandle - supply object methods for directory handles</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DirHandle</span><span class="sc">;</span></li><li>    <span class="i">$d</span> = <span class="w">DirHandle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;.&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$d</span><span class="s">)</span> <span class="s">{</span></li><li>        while <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$_</span> = <span class="i">$d</span><span class="i">-&gt;read</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="i">something</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="i">$d</span><span class="i">-&gt;rewind</span><span class="sc">;</span></li><li>        while <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$_</span> = <span class="i">$d</span><span class="i">-&gt;read</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="i">something_else</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$d</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/DirHandle.html
Cwd (module)	A			Perl Standard Modules		[[File::chdir]]					<section class="prog__container"><p>Cwd - get pathname of current working directory</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Cwd</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dir</span> = <span class="w">getcwd</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Cwd</span> <span class="q">&#39;abs_path&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$abs_path</span> = <span class="i">abs_path</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Cwd.html
MIME::Base64 (module)	A			Perl Standard Modules		[[MIME::QuotedPrint]]\n[[http://en.wikipedia.org/wiki/Base64#URL_applications]]					<section class="prog__container"><p>MIME::Base64 - Encoding and decoding of base64 strings</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MIME::Base64</span><span class="sc">;</span></li><li></li><li> <span class="i">$encoded</span> = <span class="i">encode_base64</span><span class="s">(</span><span class="q">&#39;Aladdin:open sesame&#39;</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$decoded</span> = <span class="i">decode_base64</span><span class="s">(</span><span class="i">$encoded</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/MIME/Base64.html
Variable syntax	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl.  Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#Variable-syntax
Malformed UTF-8 character (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(S utf8)(F) Perl detected a string that didn&#39;t comply with UTF-8 encoding rules, even though it had the UTF8 flag on.</p><p>One possible cause is that you set the UTF8 flag yourself for data that you thought to be in UTF-8 but it wasn&#39;t (it was for example legacy 8-bit data).  To guard against this, you can use Encode::decode_utf8.</p><p>If you use the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code>  PerlIO layer for input, invalid byte sequences are handled gracefully, but if you use <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , the flag is set without validating the data, possibly resulting in this error message.</p><p>See also <span href="http://perldoc.perl.org/Encode.html#Handling-Malformed-Data">Handling Malformed Data in Encode</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-character-(%25s)
panic: return, type=%u	A			Perl Diagnostics							<section class="prog__container"><p>(P) We popped the context stack to a subroutine or eval context, and then discovered it wasn&#39;t a subroutine or eval context.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-return%2c-type%3d%25u
CPAN::FirstTime (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::FirstTime - Utility for CPAN::Config file Initialization</p> <p>CPAN::FirstTime::init()</p></section>	http://perldoc.perl.org/CPAN/FirstTime.html
How do I decode a MIME/BASE64 string?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>The <span href="http://perldoc.perl.org/MIME/Base64.html">MIME::Base64</span> package handles this as well as the MIME/QP encoding. Decoding base 64 becomes as simple as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MIME::Base64</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$decoded</span> = <span class="i">decode_base64</span><span class="s">(</span><span class="i">$encoded</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> module can decode base 64-encoded email message parts transparently so the developer doesn&#39;t need to worry about it.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-decode-a-MIME%2fBASE64-string%3f
syntax (definition)	A			Perl Glossary							<section class="prog__container"><p>From Greek σύνταξις, “with-arrangement”. How things (particularly symbols) are put together with each other.</p></section>	http://perldoc.perl.org/perlglossary.html#syntax
sysopen (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>sysopen FILEHANDLE,FILENAME,MODE<br>sysopen FILEHANDLE,FILENAME,MODE,PERMS</pre><p>Opens the file whose filename is given by FILENAME, and associates it with FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the real filehandle wanted; an undefined scalar will be suitably autovivified.  This function calls the underlying operating system&#39;s <i>open</i>(2) function with the parameters FILENAME, MODE, and PERMS.</p><p>The possible values and flag bits of the MODE parameter are system-dependent; they are available via the standard module <code class="inline"><span class="w">Fcntl</span></code> .  See the documentation of your operating system&#39;s <i>open</i>(2) syscall to see which values and flag bits are available.  You may combine several flags using the <code class="inline">|</code>-operator.</p><p>Some of the most common values are <code class="inline"><span class="w">O_RDONLY</span></code>  for opening the file in read-only mode, <code class="inline"><span class="w">O_WRONLY</span></code>  for opening the file in write-only mode, and <code class="inline"><span class="w">O_RDWR</span></code>  for opening the file in read-write mode.   </p><p>For historical reasons, some values work on almost every system supported by Perl: 0 means read-only, 1 means write-only, and 2 means read/write.  We know that these values do <i>not</i> work under OS/390 and on the Macintosh; you probably don&#39;t want to use them in new code.</p><p>If the file named by FILENAME does not exist and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> call creates it (typically because MODE includes the <code class="inline"><span class="w">O_CREAT</span></code>  flag), then the value of PERMS specifies the permissions of the newly created file.  If you omit the PERMS argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>, Perl uses the octal value <code class="inline"><span class="n">0666</span></code> . These permission values need to be in octal, and are modified by your process&#39;s current <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code>. </p><p>In many systems the <code class="inline"><span class="w">O_EXCL</span></code>  flag is available for opening files in exclusive mode.  This is <b>not</b> locking: exclusiveness means here that if the file already exists, sysopen() fails.  <code class="inline"><span class="w">O_EXCL</span></code>  may not work on network filesystems, and has no effect unless the <code class="inline"><span class="w">O_CREAT</span></code>  flag is set as well.  Setting <code class="inline"><span class="w">O_CREAT</span>|<span class="w">O_EXCL</span></code>  prevents the file from being opened if it is a symbolic link.  It does not protect against symbolic links in the file&#39;s path. </p><p>Sometimes you may want to truncate an already-existing file.  This can be done using the <code class="inline"><span class="w">O_TRUNC</span></code>  flag.  The behavior of <code class="inline"><span class="w">O_TRUNC</span></code>  with <code class="inline"><span class="w">O_RDONLY</span></code>  is undefined. </p><p>You should seldom if ever use <code class="inline"><span class="n">0644</span></code>  as argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>, because that takes away the user&#39;s option to have a more permissive umask. Better to omit it.  See the perlfunc(1) entry on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> for more on this.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> depends on the fdopen() C library function. On many Unix systems, fdopen() is known to fail when file descriptors exceed a certain value, typically 255.  If you need more file descriptors than that, consider using the POSIX::open() function.</p><p>See <span href="http://perldoc.perl.org/perlopentut.html">perlopentut</span> for a kinder, gentler explanation of opening files.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#sysopen">sysopen in perlport</span>.</p></section>	http://perldoc.perl.org/functions/sysopen.html
ExtUtils::MakeMaker::FAQ (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MakeMaker::FAQ - Frequently Asked Questions About MakeMaker</p> </section>	http://perldoc.perl.org/ExtUtils/MakeMaker/FAQ.html
Perl folding rules are not up-to-date for 0x%X; please use the perlbug utility to report; in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(S regexp) You used a regular expression with case-insensitive matching, and there is a bug in Perl in which the built-in regular expression folding rules are not accurate.  This may lead to incorrect results. Please report this as a bug using the <span href="http://perldoc.perl.org/perlbug.html">perlbug</span> utility.</p></section>	http://perldoc.perl.org/perldiag.html#Perl-folding-rules-are-not-up-to-date-for-0x%25X%3b-please-use-the-perlbug-utility-to-report%3b-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Unary "+" operator	A			Perl Operators\nPerl Symbolic Unary Operators							<section class="prog__container">Unary &quot;+&quot; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under Terms and List Operators (Leftward).)</section>	http://perldoc.perl.org/perlop.html#Symbolic-Unary-Operators
false (definition)	A			Perl Glossary							<section class="prog__container"><p>In Perl, any value that would look like <code class="inline"><span class="q">&quot;&quot;</span></code>  or <code class="inline"><span class="q">&quot;0&quot;</span></code>  if evaluated in a string context. Since undefined values evaluate to <code class="inline"><span class="q">&quot;&quot;</span></code> , all undefined values are false, but not all false values are undefined.</p></section>	http://perldoc.perl.org/perlglossary.html#false
How do I dup() a filehandle in Perl?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If you check <span href="http://perldoc.perl.org/functions/open.html">open</span>, you&#39;ll see that several of the ways to call open() should do the trick. For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$log</span><span class="cm">,</span> <span class="q">&#39;&gt;&gt;&#39;</span><span class="cm">,</span> <span class="q">&#39;/foo/logfile&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">STDERR</span><span class="cm">,</span> <span class="q">&#39;&gt;&amp;&#39;</span><span class="cm">,</span> <span class="i">$log</span><span class="sc">;</span></li></ol></pre><p>Or even with a literal numeric descriptor:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fd</span> = <span class="i">$ENV</span>{<span class="w">MHCONTEXTFD</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="i">$mhcontext</span><span class="cm">,</span> <span class="q">&quot;&lt;&amp;=$fd&quot;</span><span class="sc">;</span>  <span class="c"># like fdopen(3S)</span></li></ol></pre><p>Note that &quot;&lt;&amp;STDIN&quot; makes a copy, but &quot;&lt;&amp;=STDIN&quot; makes an alias. That means if you close an aliased handle, all aliases become inaccessible. This is not true with a copied one.</p><p>Error checking, as always, has been left as an exercise for the reader.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-dup()-a-filehandle-in-Perl%3f
Exiting subroutine via %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exiting) You are exiting a subroutine by unconventional means, such as a goto, or a loop control statement.</p></section>	http://perldoc.perl.org/perldiag.html#Exiting-subroutine-via-%25s
Simple Statements	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>The only kind of simple statement is an expression evaluated for its side-effects.  Every simple statement must be terminated with a semicolon, unless it is the final statement in a block, in which case the semicolon is optional.  But put the semicolon in anyway if the block takes up more than one line, because you may eventually add another line.  Note that there are operators like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span><span class="s">}</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code> , and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="s">}</span></code>  that <i>look</i> like compound statements, but aren&#39;t--they&#39;re just TERMs in an expression--and thus need an explicit termination when used as the last item in a statement.</p></section>	http://perldoc.perl.org/perlsyn.html#Simple-Statements
do_study: out of memory	A			Perl Diagnostics							<section class="prog__container"><p>(P) This should have been caught by safemalloc() instead.</p></section>	http://perldoc.perl.org/perldiag.html#do_study%3a-out-of-memory
Unrecognized escape \%c passed through	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You used a backslash-character combination which is not recognized by Perl.  The character was understood literally, but this may change in a future version of Perl.</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-escape-%5c%25c-passed-through
AutoLoader (module)	A			Perl Standard Modules		[[SelfLoader]]					<section class="prog__container"><p>AutoLoader - load subroutines only on demand</p> <pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AutoLoader</span> <span class="q">&#39;AUTOLOAD&#39;</span><span class="sc">;</span>   <span class="c"># import the default AUTOLOAD subroutine</span></li><li></li><li><span name="package-Bar"></span>    package <span class="i">Bar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AutoLoader</span><span class="sc">;</span>              <span class="c"># don&#39;t import AUTOLOAD, define our own</span></li><li><span name="AUTOLOAD"></span>    sub <span class="m">AUTOLOAD</span> <span class="s">{</span></li><li>        ...</li><li>        <span class="i">$AutoLoader::AUTOLOAD</span> = <span class="q">&quot;...&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="i">&amp;AutoLoader::AUTOLOAD</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/AutoLoader.html
monger (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for one member of <b>Perl mongers</b>, a purveyor of Perl.</p></section>	http://perldoc.perl.org/perlglossary.html#monger
Malformed integer in [] in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) Between the brackets enclosing a numeric repeat count only digits are permitted.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-integer-in-%5b%5d-in-unpack
Name "%s::%s" used only once: possible typo	A			Perl Diagnostics							<section class="prog__container"><p>(W once) Typographical errors often show up as unique variable names.  If you had a good reason for having a unique name, then just mention it again somehow to suppress the message.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration is also provided for this purpose.</p><p>NOTE: This warning detects package symbols that have been used only once.  This means lexical variables will never trigger this warning.  It also means that all of the package variables $c, @c, %c, as well as *c, &amp;c, sub c{}, c(), and c (the filehandle or format) are considered the same; if a program uses $c only once but also uses any of the others it will not trigger this warning. Symbols beginning with an underscore and symbols using special identifiers (q.v. <span href="http://perldoc.perl.org/perldata.html">perldata</span>) are exempt from this warning.</p></section>	http://perldoc.perl.org/perldiag.html#Name-%22%25s%3a%3a%25s%22-used-only-once%3a-possible-typo
dbmopen (function)	A			Perl Functions\nPerl Input and output functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>dbmopen HASH,DBNAME,MASK</pre><p>[This function has been largely superseded by the <span href="http://perldoc.perl.org/functions/dbmopen.html#tie-VARIABLE%2cCLASSNAME%2cLIST">tie</span> function.]</p><p>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash.  HASH is the name of the hash.  (Unlike normal <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>, the first argument is <i>not</i> a filehandle, even though it looks like one).  DBNAME is the name of the database (without the <i>.dir</i> or <i>.pag</i> extension if any).  If the database does not exist, it is created with protection specified by MASK (as modified by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code>).  To prevent creation of the database if it doesn&#39;t exist, you may specify a MODE of 0, and the function will return a false value if it can&#39;t find an existing database.  If your system supports only the older DBM functions, you may make only one <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span></code> call in your program.  In older versions of Perl, if your system had neither DBM nor ndbm, calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span></code> produced a fatal error; it now falls back to sdbm(3).</p><p>If you don&#39;t have write access to the DBM file, you can only read hash variables, not set them.  If you want to test whether you can write, either use file tests or try setting a dummy hash entry inside an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>  to trap the error.</p><p>Note that functions such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> may return huge lists when used on large DBM files.  You may prefer to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> function to iterate over large DBM files.  Example:</p><pre class="verbatim"><ol><li>    <span class="c"># print out history file offsets</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span><span class="s">(</span><span class="i">%HIST</span><span class="cm">,</span><span class="q">&#39;/usr/lib/news/history&#39;</span><span class="cm">,</span><span class="n">0666</span><span class="s">)</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%HIST</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$key</span><span class="cm">,</span> <span class="q">&#39; = &#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&#39;L&#39;</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/dbmclose.html">dbmclose</span><span class="s">(</span><span class="i">%HIST</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>See also <span href="http://perldoc.perl.org/AnyDBM_File.html">AnyDBM_File</span> for a more general description of the pros and cons of the various dbm approaches, as well as <span href="http://perldoc.perl.org/DB_File.html">DB_File</span> for a particularly rich implementation.</p><p>You can control which DBM library you use by loading that library before you call dbmopen():</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DB_File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span><span class="s">(</span><span class="i">%NS_Hist</span><span class="cm">,</span> <span class="q">&quot;$ENV{HOME}/.netscape/history.db&quot;</span><span class="s">)</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open netscape history file: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#dbmopen">dbmopen in perlport</span>.</p></section>	http://perldoc.perl.org/functions/dbmopen.html
Text::Balanced (module)	A			Perl Standard Modules							<section class="prog__container"><p>Text::Balanced - Extract delimited text sequences from strings.</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Balanced</span> <span class="q">qw (</span></li><li>&#09;&#09;&#09;<span class="q">extract_delimited</span></li><li>&#09;&#09;&#09;<span class="q">extract_bracketed</span></li><li>&#09;&#09;&#09;<span class="q">extract_quotelike</span></li><li>&#09;&#09;&#09;<span class="q">extract_codeblock</span></li><li>&#09;&#09;&#09;<span class="q">extract_variable</span></li><li>&#09;&#09;&#09;<span class="q">extract_tagged</span></li><li>&#09;&#09;&#09;<span class="q">extract_multiple</span></li><li>&#09;&#09;&#09;<span class="q">gen_delimited_pat</span></li><li>&#09;&#09;&#09;<span class="q">gen_extract_tagged</span></li><li>&#09;&#09;       <span class="q">)</span><span class="sc">;</span></li><li></li><li> <span class="c"># Extract the initial substring of $text that is delimited by</span></li><li> <span class="c"># two (unescaped) instances of the first character in $delim.</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">extract_delimited</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span><span class="i">$delim</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substring of $text that is bracketed</span></li><li> <span class="c"># with a delimiter(s) specified by $delim (where the string</span></li><li> <span class="c"># in $delim contains one or more of &#39;(){}[]&lt;&gt;&#39;).</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">extract_bracketed</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span><span class="i">$delim</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substring of $text that is bounded by</span></li><li> <span class="c"># an XML tag.</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">extract_tagged</span><span class="s">(</span><span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substring of $text that is bounded by</span></li><li> <span class="c"># a C&lt;BEGIN&gt;...C&lt;END&gt; pair. Don&#39;t allow nested C&lt;BEGIN&gt; tags</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> =</li><li>&#09;&#09;<span class="i">extract_tagged</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span><span class="q">&quot;BEGIN&quot;</span><span class="cm">,</span><span class="q">&quot;END&quot;</span><span class="cm">,</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span><span class="s">{</span><span class="w">bad</span><span class="cm">=&gt;</span><span class="s">[</span><span class="q">&quot;BEGIN&quot;</span><span class="s">]</span><span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substring of $text that represents a</span></li><li> <span class="c"># Perl &quot;quote or quote-like operation&quot;</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">extract_quotelike</span><span class="s">(</span><span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substring of $text that represents a block</span></li><li> <span class="c"># of Perl code, bracketed by any of character(s) specified by $delim</span></li><li> <span class="c"># (where the string $delim contains one or more of &#39;(){}[]&lt;&gt;&#39;).</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">extract_codeblock</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span><span class="i">$delim</span><span class="s">)</span><span class="sc">;</span></li><li></li><li></li><li> <span class="c"># Extract the initial substrings of $text that would be extracted by</span></li><li> <span class="c"># one or more sequential applications of the specified functions</span></li><li> <span class="c"># or regular expressions</span></li><li></li><li>&#09;<span class="i">@extracted</span> = <span class="i">extract_multiple</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;      <span class="s">[</span> \\<span class="i">&amp;extract_bracketed</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;&#09;\\<span class="i">&amp;extract_quotelike</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;&#09;\\<span class="i">&amp;some_other_extractor_sub</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;&#09;<span class="q">qr/[xyz]*/</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;&#09;<span class="q">&#39;literal&#39;</span><span class="cm">,</span></li><li>&#09;&#09;&#09;&#09;      <span class="s">]</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p># Create a string representing an optimized pattern (a la Friedl) # that matches a substring delimited by any of the specified characters # (in this case: any type of quote or a slash)</p><pre class="verbatim"><ol><li>&#09;<span class="i">$patstring</span> = <span class="i">gen_delimited_pat</span><span class="s">(</span><span class="q">q{&#39;&quot;`/}</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p># Generate a reference to an anonymous sub that is just like extract_tagged # but pre-compiled and optimized for a specific pair of tags, and consequently # much faster (i.e. 3 times faster). It uses qr// for better performance on # repeated calls, so it only works under Perl 5.005 or later.</p><pre class="verbatim"><ol><li>&#09;<span class="i">$extract_head</span> = <span class="i">gen_extract_tagged</span><span class="s">(</span><span class="q">&#39;&lt;HEAD&gt;&#39;</span><span class="cm">,</span><span class="q">&#39;&lt;/HEAD&gt;&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="s">(</span><span class="i">$extracted</span><span class="cm">,</span> <span class="i">$remainder</span><span class="s">)</span> = <span class="i">$extract_head</span>-&gt;<span class="s">(</span><span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Text/Balanced.html
-C [ number/list ]	A			Perl Command-Line Switches							<section class="prog__container"><p>The <b>-C</b> flag controls some of the Perl Unicode features.</p><p>As of 5.8.1, the <b>-C</b> can be followed either by a number or a list of option letters.  The letters, their numeric values, and effects are as follows; listing the letters is equal to summing the numbers.</p><pre class="verbatim"><ol><li>    <span class="w">I</span>     <span class="n">1</span>   <span class="w">STDIN</span> <span class="w">is</span> <span class="w">assumed</span> <span class="w">to</span> <span class="w">be</span> <span class="w">in</span> <span class="w">UTF</span>-<span class="n">8</span></li><li>    <span class="w">O</span>     <span class="n">2</span>   <span class="w">STDOUT</span> <span class="w">will</span> <span class="w">be</span> <span class="w">in</span> <span class="w">UTF</span>-<span class="n">8</span></li><li>    <span class="w">E</span>     <span class="n">4</span>   <span class="w">STDERR</span> <span class="w">will</span> <span class="w">be</span> <span class="w">in</span> <span class="w">UTF</span>-<span class="n">8</span></li><li>    <span class="w">S</span>     <span class="n">7</span>   <span class="w">I</span> + <span class="w">O</span> + <span class="w">E</span></li><li>    <span class="w">i</span>     <span class="n">8</span>   <span class="w">UTF</span>-<span class="n">8</span> <span class="w">is</span> <span class="w">the</span> <span class="w">default</span> <span class="w">PerlIO</span> <span class="w">layer</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">input</span> <span class="w">streams</span></li><li>    <span class="w">o</span>    <span class="n">16</span>   <span class="w">UTF</span>-<span class="n">8</span> <span class="w">is</span> <span class="w">the</span> <span class="w">default</span> <span class="w">PerlIO</span> <span class="w">layer</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">output</span> <span class="w">streams</span></li><li>    <span class="w">D</span>    <span class="n">24</span>   <span class="w">i</span> + <span class="w">o</span></li><li>    <span class="w">A</span>    <span class="n">32</span>   <span class="w">the</span> <span class="i">@ARGV</span> <span class="w">elements</span> <span class="w">are</span> <span class="w">expected</span> <span class="w">to</span> <span class="w">be</span> <span class="w">strings</span> <span class="w">encoded</span></li><li>              <span class="w">in</span> <span class="w">UTF</span>-<span class="n">8</span></li><li>    <span class="w">L</span>    <span class="n">64</span>   <span class="w">normally</span> <span class="w">the</span> <span class="q">&quot;IOEioA&quot;</span> <span class="w">are</span> <span class="w">unconditional</span><span class="cm">,</span> <span class="w">the</span> <span class="w">L</span> <span class="w">makes</span></li><li>              <span class="w">them</span> <span class="w">conditional</span> <span class="w">on</span> <span class="w">the</span> <span class="w">locale</span> <span class="w">environment</span> <span class="i">variables</span></li><li>              <span class="s">(</span><span class="w">the</span> <span class="w">LC_ALL</span><span class="cm">,</span> <span class="w">LC_CTYPE</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">LANG</span><span class="cm">,</span> <span class="w">in</span> <span class="w">the</span> <span class="w">order</span> <span class="w">of</span></li><li>              <span class="w">decreasing</span> <span class="w">precedence</span><span class="s">)</span> -- <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">the</span> <span class="w">variables</span> <span class="w">indicate</span></li><li>              <span class="w">UTF</span>-<span class="n">8</span><span class="cm">,</span> <span class="w">then</span> <span class="w">the</span> <span class="w">selected</span> <span class="q">&quot;IOEioA&quot;</span> <span class="w">are</span> <span class="w">in</span> <span class="w">effect</span></li><li>    <span class="w">a</span>   <span class="n">256</span>   <span class="w">Set</span> <span class="i">$</span>{<span class="w">^UTF8CACHE</span>} <span class="w">to</span> -<span class="n">1</span><span class="cm">,</span> <span class="w">to</span> <span class="w">run</span> <span class="w">the</span> <span class="w">UTF</span>-<span class="n">8</span> <span class="w">caching</span></li><li>              <span class="w">code</span> <span class="w">in</span> <span class="w">debugging</span> <span class="w">mode</span>.</li></ol></pre><p>For example, <b>-COE</b> and <b>-C6</b> will both turn on UTF-8-ness on both STDOUT and STDERR.  Repeating letters is just redundant, not cumulative nor toggling.</p><p>The <code class="inline"><span class="w">io</span></code>  options mean that any subsequent open() (or similar I/O operations) in the current file scope will have the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  PerlIO layer implicitly applied to them, in other words, UTF-8 is expected from any input stream, and UTF-8 is produced to any output stream.  This is just the default, with explicit layers in open() and with binmode() one can manipulate streams as usual.</p><p><b>-C</b> on its own (not followed by any number or option list), or the empty string <code class="inline"><span class="q">&quot;&quot;</span></code>  for the <code class="inline"><span class="w">PERL_UNICODE</span></code>  environment variable, has the same effect as <b>-CSDL</b>.  In other words, the standard I/O handles and the default <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> layer are UTF-8-fied <i>but</i> only if the locale environment variables indicate a UTF-8 locale.  This behaviour follows the <i>implicit</i> (and problematic) UTF-8 behaviour of Perl 5.8.0. (See <span href="http://perldoc.perl.org/perl581delta.html#UTF-8-no-longer-default-under-UTF-8-locales">UTF-8 no longer default under UTF-8 locales in perl581delta</span>.)</p><p>You can use <b>-C0</b> (or <code class="inline"><span class="q">&quot;0&quot;</span></code>  for <code class="inline"><span class="w">PERL_UNICODE</span></code> ) to explicitly disable all the above Unicode features.</p><p>The read-only magic variable <code class="inline"><span class="i">$</span>{<span class="w">^UNICODE</span>}</code>  reflects the numeric value of this setting.  This variable is set during Perl startup and is thereafter read-only.  If you want runtime effects, use the three-arg open() (see <span href="http://perldoc.perl.org/functions/open.html">open</span>), the two-arg binmode() (see <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span>), and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma (see <span href="http://perldoc.perl.org/open.html">open</span>).</p><p>(In Perls earlier than 5.8.1 the <b>-C</b> switch was a Win32-only switch that enabled the use of Unicode-aware &quot;wide system call&quot; Win32 APIs. This feature was practically unused, however, and the command line switch was therefore &quot;recycled&quot;.)</p><p><b>Note:</b> Since perl 5.10.1, if the <b>-C</b> option is used on the <code class="inline"><span class="c">#!</span></code>  line, it must be specified on the command line as well, since the standard streams are already set up at this point in the execution of the perl interpreter. You can also use binmode() to set the encoding of an I/O stream.</p></section>	http://perldoc.perl.org/perlrun.html#*-C-%5b_number%2flist_%5d*
Label not found for "last %s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You named a loop to break out of, but you&#39;re not currently in a loop of that name, not even if you count where you were called from.  See <span href="http://perldoc.perl.org/functions/last.html">last</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Label-not-found-for-%22last-%25s%22
push on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#push-on-reference-is-experimental
Tie::Memoize (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::Memoize - add data to hash when needed</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Memoize</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> <span class="q">&#39;Tie::Memoize&#39;</span><span class="cm">,</span></li><li>      \\<span class="i">&amp;fetch</span><span class="cm">,</span>&#09;&#09;&#09;<span class="c"># The rest is optional</span></li><li>      <span class="i">$DATA</span><span class="cm">,</span> \\<span class="i">&amp;exists</span><span class="cm">,</span></li><li>      <span class="s">{</span><span class="i">%ini_value</span><span class="s">}</span><span class="cm">,</span> <span class="s">{</span><span class="i">%ini_existence</span><span class="s">}</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Memoize.html
Possible precedence problem on bitwise %s operator	A			Perl Diagnostics							<section class="prog__container"><p>(W precedence) Your program uses a bitwise logical operator in conjunction with a numeric comparison operator, like this :</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$x</span> &amp; <span class="i">$y</span> == <span class="n">0</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>This expression is actually equivalent to <code class="inline"><span class="i">$x</span> &amp; <span class="s">(</span><span class="i">$y</span> == <span class="n">0</span><span class="s">)</span></code> , due to the higher precedence of <code class="inline">==</code> .  This is probably not what you want.  (If you really meant to write this, disable the warning, or, better, put the parentheses explicitly and write <code class="inline"><span class="i">$x</span> &amp; <span class="s">(</span><span class="i">$y</span> == <span class="n">0</span><span class="s">)</span></code> ).</p></section>	http://perldoc.perl.org/perldiag.html#Possible-precedence-problem-on-bitwise-%25s-operator
-l [ octnum ]	A			Perl Command-Line Switches							<section class="prog__container"><p>enables automatic line-ending processing.  It has two separate effects.  First, it automatically chomps <code class="inline"><span class="i">$/</span></code>  (the input record separator) when used with <b>-n</b> or <b>-p</b>.  Second, it assigns <code class="inline"><span class="i">$\\</span></code>  (the output record separator) to have the value of <i>octnum</i> so that any print statements will have that separator added back on. If <i>octnum</i> is omitted, sets <code class="inline"><span class="i">$\\</span></code>  to the current value of <code class="inline"><span class="i">$/</span></code> .  For instance, to trim lines to 80 columns:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">lpe</span> <span class="q">&#39;substr($_, 80) = &quot;&quot;&#39;</span></li></ol></pre><p>Note that the assignment <code class="inline"><span class="i">$\\</span> = <span class="i">$/</span></code>  is done when the switch is processed, so the input record separator can be different than the output record separator if the <b>-l</b> switch is followed by a <b>-0</b> switch:</p><pre class="verbatim"><ol><li>    gnufind / -print0 | perl -ln0e &#39;print &quot;found $_&quot; if -p&#39;</li></ol></pre><p>This sets <code class="inline"><span class="i">$\\</span></code>  to newline and then sets <code class="inline"><span class="i">$/</span></code>  to the null character.</p></section>	http://perldoc.perl.org/perlrun.html#*-l*%5b_octnum_%5d
Unrecognized escape \%s passed through in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used a backslash-character combination which is not recognized by Perl.  The character(s) were understood literally, but this may change in a future version of Perl.  The &lt;-- HERE shows whereabouts in the regular expression the escape was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-escape-%5c%25s-passed-through-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
label (definition)	A			Perl Glossary							<section class="prog__container"><p>A name you give to a <b>statement</b> so that you can talk about that statement elsewhere in the program.</p></section>	http://perldoc.perl.org/perlglossary.html#label
$/ (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The input record separator, newline by default.  This influences Perl&#39;s idea of what a &quot;line&quot; is.  Works like <b>awk</b>&#39;s RS variable, including treating empty lines as a terminator if set to the null string (an empty line cannot contain any spaces or tabs).  You may set it to a multi-character string to match a multi-character terminator, or to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> to read through the end of file.  Setting it to <code class="inline"><span class="q">&quot;\\n\\n&quot;</span></code>  means something slightly different than setting to <code class="inline"><span class="q">&quot;&quot;</span></code> , if the file contains consecutive empty lines.  Setting to <code class="inline"><span class="q">&quot;&quot;</span></code>  will treat two or more consecutive empty lines as a single empty line.  Setting to <code class="inline"><span class="q">&quot;\\n\\n&quot;</span></code>  will blindly assume that the next input character belongs to the next paragraph, even if it&#39;s a newline.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span><span class="sc">;</span>           <span class="c"># enable &quot;slurp&quot; mode</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="q">&lt;FH&gt;</span><span class="sc">;</span>    <span class="c"># whole file now here</span></li><li>    <span class="q">s/\\n[ \\t]+/ /g</span><span class="sc">;</span></li></ol></pre><p>Remember: the value of <code class="inline"><span class="i">$/</span></code>  is a string, not a regex.  <b>awk</b> has to be better for something. :-)</p><p>Setting <code class="inline"><span class="i">$/</span></code>  to a reference to an integer, scalar containing an integer, or scalar that&#39;s convertible to an integer will attempt to read records instead of lines, with the maximum record size being the referenced integer number of characters.  So this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span> = \\<span class="n">32768</span><span class="sc">;</span> <span class="c"># or \\&quot;32768&quot;, or \\$var_containing_32768</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="i">$myfile</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li></ol></pre><p>will read a record of no more than 32768 characters from $fh.  If you&#39;re not reading from a record-oriented file (or your OS doesn&#39;t have record-oriented files), then you&#39;ll likely get a full chunk of data with every read.  If a record is larger than the record size you&#39;ve set, you&#39;ll get the record back in pieces.  Trying to set the record size to zero or less is deprecated and will cause $/ to have the value of &quot;undef&quot;, which will cause reading in the (rest of the) whole file.</p><p>As of 5.19.9 setting <code class="inline"><span class="i">$/</span></code>  to any other form of reference will throw a fatal exception. This is in preparation for supporting new ways to set <code class="inline"><span class="i">$/</span></code>  in the future.</p><p>On VMS only, record reads bypass PerlIO layers and any associated buffering, so you must not mix record and non-record reads on the same filehandle.  Record mode mixes with line mode only when the same buffering layer is in use for both modes.</p><p>You cannot call <code class="inline"><span class="i">input_record_separator</span><span class="s">(</span><span class="s">)</span></code>  on a handle, only as a static method.  See <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p><p>See also <span href="http://perldoc.perl.org/perlport.html#Newlines">Newlines in perlport</span>.  Also see <span href="http://perldoc.perl.org/perlvar.html#%24.">$.</span>.</p><p>Mnemonic: / delimits line boundaries when quoting poetry.</p></section>	http://perldoc.perl.org/perlvar.html#%24%2f
Compilation failed in require	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl could not compile a file specified in a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> statement. Perl uses this generic message when none of the errors that it encountered were severe enough to halt compilation immediately.</p></section>	http://perldoc.perl.org/perldiag.html#Compilation-failed-in-require
ExtUtils::Manifest (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::Manifest - utilities to write and check a MANIFEST file</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Manifest</span> <span class="q">qw(...funcs to import...)</span><span class="sc">;</span></li><li></li><li>    <span class="i">mkmanifest</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@missing_files</span>    = <span class="w">manicheck</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@skipped</span>          = <span class="w">skipcheck</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@extra_files</span>      = <span class="w">filecheck</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$missing</span><span class="cm">,</span> <span class="i">$extra</span><span class="s">)</span> = <span class="w">fullcheck</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$found</span>    = <span class="i">manifind</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$manifest</span> = <span class="i">maniread</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">manicopy</span><span class="s">(</span><span class="i">$read</span><span class="cm">,</span><span class="i">$target</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">maniadd</span><span class="s">(</span><span class="s">{</span><span class="i">$file</span> <span class="cm">=&gt;</span> <span class="i">$comment</span><span class="cm">,</span> ...<span class="s">}</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Manifest.html
How do I count the number of lines in a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Conceptually, the easiest way to count the lines in a file is to simply read them and count them:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$fh&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$count</span>++<span class="sc">;</span> <span class="s">}</span></li></ol></pre><p>You don&#39;t really have to count them yourself, though, since Perl already does that with the <code class="inline"><span class="i">$.</span></code>  variable, which is the current line number from the last filehandle read:</p><pre class="verbatim"><ol><li>    <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$fh&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="i">$.</span><span class="sc">;</span></li></ol></pre><p>If you want to use <code class="inline"><span class="i">$.</span></code> , you can reduce it to a simple one-liner, like one of these:</p><pre class="verbatim"><ol><li>    <span class="i">% perl</span> -<span class="w">lne</span> <span class="q">&#39;} print $.; {&#39;</span>    <span class="w">file</span></li><li></li><li>    % <span class="w">perl</span> -<span class="w">lne</span> <span class="q">&#39;END { print $. }&#39;</span> <span class="w">file</span></li></ol></pre><p>Those can be rather inefficient though. If they aren&#39;t fast enough for you, you might just read chunks of data and count the number of newlines:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lines</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="cm">,</span> <span class="q">&#39;&lt;:raw&#39;</span><span class="cm">,</span> <span class="i">$filename</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $filename: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$buffer</span><span class="cm">,</span> <span class="n">4096</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$lines</span> += <span class="s">(</span> <span class="i">$buffer</span> =~ <span class="q">tr/\\n//</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$fh</span><span class="sc">;</span></li></ol></pre><p>However, that doesn&#39;t work if the line ending isn&#39;t a newline. You might change that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code> to a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code> so you can count the number of times the input record separator, <code class="inline"><span class="i">$/</span></code> , shows up:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lines</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="cm">,</span> <span class="q">&#39;&lt;:raw&#39;</span><span class="cm">,</span> <span class="i">$filename</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $filename: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$buffer</span><span class="cm">,</span> <span class="n">4096</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$lines</span> += <span class="s">(</span> <span class="i">$buffer</span> =~ <span class="q">s|$/||g</span><span class="sc">;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$fh</span><span class="sc">;</span></li></ol></pre><p>If you don&#39;t mind shelling out, the <code class="inline"><span class="w">wc</span></code>  command is usually the fastest, even with the extra interprocess overhead. Ensure that you have an untainted filename though:</p><pre class="verbatim"><ol><li>    <span class="c">#!perl -T</span></li><li></li><li>    <span class="i">$ENV</span>{<span class="w">PATH</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lines</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$filename</span> =~ <span class="q">/^([0-9a-z_.]+)\\z/</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$lines</span> = <span class="q">`/usr/bin/wc -l $1`</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span> <span class="i">$lines</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-count-the-number-of-lines-in-a-file%3f
panic: die %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) We popped the context stack to an eval context, and then discovered it wasn&#39;t an eval context.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-die-%25s
How do I find which modules are installed on my system?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>From the command line, you can use the <code class="inline"><span class="w">cpan</span></code>  command&#39;s <code class="inline">-l</code>  switch:</p><pre class="verbatim"><ol><li>    <span class="i">$ cpan</span> -<span class="w">l</span></li></ol></pre><p>You can also use <code class="inline"><span class="w">cpan</span></code> &#39;s <code class="inline">-<span class="w">a</span></code>  switch to create an autobundle file that <code class="inline"><span class="w">CPAN</span>.<span class="w">pm</span></code>  understands and can use to re-install every module:</p><pre class="verbatim"><ol><li>    <span class="i">$ cpan</span> -<span class="w">a</span></li></ol></pre><p>Inside a Perl program, you can use the <span href="http://perldoc.perl.org/ExtUtils/Installed.html">ExtUtils::Installed</span> module to show all installed distributions, although it can take awhile to do its magic. The standard library which comes with Perl just shows up as &quot;Perl&quot; (although you can get those with <span href="http://perldoc.perl.org/Module/CoreList.html">Module::CoreList</span>).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Installed</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$inst</span>    = <span class="w">ExtUtils::Installed</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@modules</span> = <span class="i">$inst</span><span class="i">-&gt;modules</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you want a list of all of the Perl module filenames, you can use <span href="http://search.cpan.org/perldoc/File::Find::Rule">File::Find::Rule</span>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Find::Rule</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@files</span> = <span class="w">File::Find::Rule</span>-&gt;</li><li>        <span class="w">extras</span><span class="s">(</span><span class="s">{</span><span class="w">follow</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="s">}</span><span class="s">)</span>-&gt;</li><li>        <span class="w">file</span><span class="s">(</span><span class="s">)</span>-&gt;</li><li>        <span class="w">name</span><span class="s">(</span> <span class="q">&#39;*.pm&#39;</span> <span class="s">)</span>-&gt;</li><li>        <span class="w">in</span><span class="s">(</span> <span class="i">@INC</span> <span class="s">)</span></li><li>        <span class="sc">;</span></li></ol></pre><p>If you do not have that module, you can do the same thing with <span href="http://perldoc.perl.org/File/Find.html">File::Find</span> which is part of the standard library:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Find</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="i">find</span><span class="s">(</span></li><li>        <span class="s">{</span></li><li>        <span class="w">wanted</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@files</span><span class="cm">,</span> <span class="i">$File::Find::fullname</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> -f <span class="i">$File::Find::fullname</span> &amp;&amp; <span class="q">/\\.pm$/</span></li><li>        <span class="s">}</span><span class="cm">,</span></li><li>        <span class="w">follow</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>        <span class="w">follow_skip</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="cm">,</span></li><li>        <span class="s">}</span><span class="cm">,</span></li><li>        <span class="i">@INC</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&quot;\\n&quot;</span><span class="cm">,</span> <span class="i">@files</span><span class="sc">;</span></li></ol></pre><p>If you simply need to check quickly to see if a module is available, you can check for its documentation. If you can read the documentation the module is most likely installed. If you cannot read the documentation, the module might not have any (in rare cases):</p><pre class="verbatim"><ol><li>    <span class="i">$ perldoc</span> <span class="w">Module::Name</span></li></ol></pre><p>You can also try to include the module in a one-liner to see if perl finds it:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">MModule::Name</span> -<span class="w">e1</span></li></ol></pre><p>(If you don&#39;t receive a &quot;Can&#39;t locate ... in @INC&quot; error message, then Perl found the module name you asked for.)</p></section>	http://perldoc.perl.org/perlfaq3.html#How-do-I-find-which-modules-are-installed-on-my-system%3f
lc (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>lc EXPR<br>lc<br>If is in effect:<br>Otherwise, if for is in effect:<br>Otherwise, If EXPR has the UTF8 flag set:<br>Otherwise, if or is in effect:<br>Otherwise:</pre><p>Returns a lowercased version of EXPR.  This is the internal function implementing the <code class="inline">\\<span class="w">L</span></code>  escape in double-quoted strings.</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>What gets returned depends on several factors:</p></section>	http://perldoc.perl.org/functions/lc.html
Pod::Perldoc::ToChecker (module)	A			Perl Standard Modules		[[Pod::Simple::Checker]]\n[[Pod::Simple]]\n[[Pod::Checker]]\n[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToChecker - let Perldoc check Pod for errors</p> <pre class="verbatim"><ol><li>  <span class="i">% perldoc</span> -<span class="w">o</span> <span class="w">checker</span> <span class="w">SomeFile</span>.<span class="w">pod</span></li><li>  <span class="w">No</span> <span class="w">Pod</span> <span class="w">errors</span> <span class="w">in</span> <span class="w">SomeFile</span>.<span class="i">pod</span></li><li>  <span class="s">(</span>or <span class="w">an</span> <span class="w">error</span> <span class="w">report</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToChecker.html
semi-panic: attempt to dup freed string	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The internal newSVsv() routine was called to duplicate a scalar that had previously been marked as free.</p></section>	http://perldoc.perl.org/perldiag.html#semi-panic%3a-attempt-to-dup-freed-string
package (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>namespace</b> for global <b>variables</b>, <b>subroutines</b>, and the like, such that they can be kept separate from like-named <b>symbols</b> in other namespaces. In a sense, only the package is global, since the symbols in the package’s symbol table are only accessible from code <b>compiled</b> outside the package by naming the package. But in another sense, all package symbols are also globals—they’re just well-organized globals.</p></section>	http://perldoc.perl.org/perlglossary.html#package
Nested quantifiers in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t quantify a quantifier without intervening parentheses. So things like ** or +* or ?* are illegal.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p><p>Note that the minimal matching quantifiers, <code class="inline"><span class="i">*?</span></code> , <code class="inline">+?</code>, and <code class="inline"><span class="q">??</span></code>  appear to be nested quantifiers, but aren&#39;t.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Nested-quantifiers-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Pod::Perldoc (module)	A			Perl Standard Modules		[[perldoc]]					<section class="prog__container"><p>Pod::Perldoc - Look up Perl documentation in Pod format.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Perldoc</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="w">Pod::Perldoc</span><span class="w">-&gt;run</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc.html
Unicode::UCD (module)	A			Perl Standard Modules							<section class="prog__container"><p>Unicode::UCD - Unicode character database</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charinfo&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$charinfo</span>   = <span class="i">charinfo</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charprop&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$value</span>  = <span class="i">charprop</span><span class="s">(</span><span class="i">$codepoint</span><span class="cm">,</span> <span class="i">$property</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charprops_all&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$all_values_hash_ref</span> = <span class="i">charprops_all</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;casefold&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$casefold</span> = <span class="i">casefold</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;all_casefolds&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$all_casefolds_ref</span> = <span class="i">all_casefolds</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;casespec&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$casespec</span> = <span class="i">casespec</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charblock&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$charblock</span>  = <span class="i">charblock</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charscript&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$charscript</span> = <span class="i">charscript</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charblocks&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$charblocks</span> = <span class="i">charblocks</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;charscripts&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$charscripts</span> = <span class="i">charscripts</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">qw(charscript charinrange)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$range</span> = <span class="i">charscript</span><span class="s">(</span><span class="i">$script</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;looks like $script\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">charinrange</span><span class="s">(</span><span class="i">$range</span><span class="cm">,</span> <span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">qw(general_categories bidi_types)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$categories</span> = <span class="i">general_categories</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$types</span> = <span class="i">bidi_types</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;prop_aliases&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@space_names</span> = <span class="i">prop_aliases</span><span class="s">(</span><span class="q">&quot;space&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;prop_value_aliases&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@gc_punct_names</span> = <span class="i">prop_value_aliases</span><span class="s">(</span><span class="q">&quot;Gc&quot;</span><span class="cm">,</span> <span class="q">&quot;Punct&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;prop_values&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@all_EA_short_names</span> = <span class="i">prop_values</span><span class="s">(</span><span class="q">&quot;East_Asian_Width&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;prop_invlist&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@puncts</span> = <span class="i">prop_invlist</span><span class="s">(</span><span class="q">&quot;gc=punctuation&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;prop_invmap&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$list_ref</span><span class="cm">,</span> <span class="i">$map_ref</span><span class="cm">,</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$missing</span><span class="s">)</span></li><li>                                      = <span class="i">prop_invmap</span><span class="s">(</span><span class="q">&quot;General Category&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;search_invlist&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$index</span> = <span class="i">search_invlist</span><span class="s">(</span>\\<span class="i">@invlist</span><span class="cm">,</span> <span class="i">$code_point</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;compexcl&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$compexcl</span> = <span class="i">compexcl</span><span class="s">(</span><span class="i">$codepoint</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::UCD</span> <span class="q">&#39;namedseq&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$namedseq</span> = <span class="i">namedseq</span><span class="s">(</span><span class="i">$named_sequence_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$unicode_version</span> = <span class="i">Unicode::UCD::UnicodeVersion</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$convert_to_numeric</span> =</li><li>              <span class="i">Unicode::UCD::num</span><span class="s">(</span><span class="q">&quot;\\N{RUMI DIGIT ONE}\\N{RUMI DIGIT TWO}&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Unicode/UCD.html
empty subclass test (definition)	A			Perl Glossary							<section class="prog__container"><p>The notion that an empty <b>derived class</b> should behave exactly like its <b>base class</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#empty-subclass-test
Loop Control	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> command starts the next iteration of the loop:</p><pre class="verbatim"><ol><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">LINE</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/^#/</span><span class="sc">;</span>      <span class="c"># discard comments</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> command immediately exits the loop in question.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block, if any, is not executed:</p><pre class="verbatim"><ol><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">LINE</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/^$/</span><span class="sc">;</span>      <span class="c"># exit when done with header</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> command restarts the loop block without evaluating the conditional again.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block, if any, is <i>not</i> executed. This command is normally used by programs that want to lie to themselves about what was just input.</p><p>For example, when processing a file like <i>/etc/termcap</i>. If your input lines might end in backslashes to indicate continuation, you want to skip ahead and get the next record.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">s/\\\\$//</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="i">$_</span> .= &lt;&gt;<span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="c"># now process $_</span></li><li>    <span class="s">}</span></li></ol></pre><p>which is Perl shorthand for the more explicitly written version:</p><pre class="verbatim"><ol><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$line</span> = <span class="q">&lt;ARGV&gt;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$line</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$line</span> =~ <span class="q">s/\\\\$//</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="i">$line</span> .= <span class="q">&lt;ARGV&gt;</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="j">LINE</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c"># not eof(ARGV)!</span></li><li>        <span class="s">}</span></li><li>        <span class="c"># now process $line</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that if there were a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block on the above code, it would get executed only on lines discarded by the regex (since redo skips the continue block).  A continue block is often used to reset line counters or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m?pat?</span></code> one-time matches:</p><pre class="verbatim"><ol><li>    <span class="c"># inspired by :1,$g/fred/s//WILMA/</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">m?(fred)?</span>    &amp;&amp; <span class="q">s//WILMA $1 WILMA/</span><span class="sc">;</span></li><li>        <span class="q">m?(barney)?</span>  &amp;&amp; <span class="q">s//BETTY $1 BETTY/</span><span class="sc">;</span></li><li>        <span class="q">m?(homer)?</span>   &amp;&amp; <span class="q">s//MARGE $1 MARGE/</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$ARGV $.: $_&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">ARGV</span>  <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span>             <span class="c"># reset $.</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/reset.html">reset</span>       <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span>             <span class="c"># reset ?pat?</span></li><li>    <span class="s">}</span></li></ol></pre><p>If the word <code class="inline">while</code>  is replaced by the word <code class="inline">until</code> , the sense of the test is reversed, but the conditional is still tested before the first iteration.</p><p>Loop control statements don&#39;t work in an <code class="inline">if</code>  or <code class="inline">unless</code> , since they aren&#39;t loops.  You can double the braces to make them such, though.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/pattern/</span><span class="s">)</span> <span class="s">{</span><span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/fred/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/barney/</span><span class="sc">;</span> <span class="c"># same effect as &quot;last&quot;,</span></li><li>                          <span class="c"># but doesn&#39;t document as well</span></li><li>        <span class="c"># do something here</span></li><li>    <span class="s">}</span><span class="s">}</span></li></ol></pre><p>This is caused by the fact that a block by itself acts as a loop that executes once, see <span href="http://perldoc.perl.org/perlsyn.html#Basic-BLOCKs">Basic BLOCKs</span>.</p><p>The form <code class="inline">while/if BLOCK BLOCK</code>, available in Perl 4, is no longer available.   Replace any occurrence of <code class="inline">if <span class="w">BLOCK</span></code>  by <code class="inline">if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">BLOCK</span><span class="s">)</span></code> .</p></section>	http://perldoc.perl.org/perlsyn.html#Loop-Control
shift on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#shift-on-reference-is-experimental
Unknown switch condition (?(...)) in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The condition part of a (?(condition)if-clause|else-clause) construct is not known.  The condition must be one of the following:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">(</span><span class="n">2</span><span class="s">)</span> ...        <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="n">1</span><span class="w">st</span><span class="cm">,</span> <span class="n">2</span><span class="w">nd</span><span class="cm">,</span> <span class="w">etc</span>.<span class="cm">,</span> <span class="w">capture</span> <span class="i">matched</span></li><li> <span class="s">(</span><span class="q">&lt;NAME&gt;</span><span class="s">)</span> <span class="s">(</span><span class="q">&#39;NAME&#39;</span><span class="s">)</span>  <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">named</span> <span class="w">capture</span> <span class="i">matched</span></li><li> <span class="s">(</span><span class="q">?=...) (?</span>&lt;=...<span class="s">)</span>   <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">subpattern</span> <span class="i">matches</span></li><li> <span class="s">(</span><span class="q">?!...) (?</span>&lt;!...<span class="s">)</span>   <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">subpattern</span> <span class="w">fails</span> <span class="w">to</span> <span class="i">match</span></li><li> <span class="s">(</span><span class="q">?{ CODE })        true if code returns a true value</span></li><li> <span class="q"> (R)                true if evaluating inside recursion</span></li><li> <span class="q"> (R1) (R2) ...      true if directly inside capture group 1, 2, etc.</span></li><li> <span class="q"> (R&amp;NAME)           true if directly inside named capture</span></li><li> <span class="q"> (DEFINE)           always false; for defining named subpatterns</span></li></ol></pre><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-switch-condition-(%3f(...))-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
DBM_Filter::compress (module)	A			Perl Standard Modules		[[DBM_Filter]]\n[[perldbmfilter]]\n[[Compress::Zlib]]					<section class="prog__container"><p>DBM_Filter::compress - filter for DBM_Filter</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, ODBM_File</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;compress&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter/compress.html
getpriority (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>getpriority WHICH,WHO</pre><p>Returns the current priority for a process, a process group, or a user. (See <i>getpriority(2)</i>.)  Will raise a fatal exception if used on a machine that doesn&#39;t implement getpriority(2).</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getpriority">getpriority in perlport</span>.</p></section>	http://perldoc.perl.org/functions/getpriority.html
Why doesn't & work the way I want it to?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The behavior of binary arithmetic operators depends on whether they&#39;re used on numbers or strings. The operators treat a string as a series of bits and work with that (the string <code class="inline"><span class="q">&quot;3&quot;</span></code>  is the bit pattern <code class="inline"><span class="n">00110011</span></code> ). The operators work with the binary form of a number (the number <code class="inline"><span class="n">3</span></code>  is treated as the bit pattern <code class="inline"><span class="n">00000011</span></code> ).</p><p>So, saying <code class="inline"><span class="n">11</span> &amp; <span class="n">3</span></code>  performs the &quot;and&quot; operation on numbers (yielding <code class="inline"><span class="n">3</span></code> ). Saying <code class="inline"><span class="q">&quot;11&quot;</span> &amp; <span class="q">&quot;3&quot;</span></code>  performs the &quot;and&quot; operation on strings (yielding <code class="inline"><span class="q">&quot;1&quot;</span></code> ).</p><p>Most problems with <code class="inline"><span class="i">&amp;</span></code>  and <code class="inline">|</code> arise because the programmer thinks they have a number but really it&#39;s a string or vice versa. To avoid this, stringify the arguments explicitly (using <code class="inline"><span class="q">&quot;&quot;</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qq.html">qq()</span></code>) or convert them to numbers explicitly (using <code class="inline"><span class="n">0</span>+<span class="i">$arg</span></code> ). The rest arise because the programmer says:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">&quot;\\020\\020&quot;</span> &amp; <span class="q">&quot;\\101\\101&quot;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># ...</span></li><li>    <span class="s">}</span></li></ol></pre><p>but a string consisting of two null bytes (the result of <code class="inline"><span class="q">&quot;\\020\\020&quot;</span> &amp; <span class="q">&quot;\\101\\101&quot;</span></code> ) is not a false value in Perl. You need:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span> <span class="s">(</span><span class="q">&quot;\\020\\020&quot;</span> &amp; <span class="q">&quot;\\101\\101&quot;</span><span class="s">)</span> !~ <span class="q">/[^\\000]/</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># ...</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#Why-doesn't-%26-work-the-way-I-want-it-to%3f
Unbalanced tmps: %d more allocs than frees	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The exit code detected an internal inconsistency in how many mortal scalars were allocated and freed.</p></section>	http://perldoc.perl.org/perldiag.html#Unbalanced-tmps%3a-%25d-more-allocs-than-frees
unlink (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>unlink LIST<br>unlink</pre><p>Deletes a list of files.  On success, it returns the number of files it successfully deleted.  On failure, it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$unlinked</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="q">&#39;b&#39;</span><span class="cm">,</span> <span class="q">&#39;c&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="i">@goners</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&quot;*.bak&quot;</span><span class="sc">;</span></li></ol></pre><p>On error, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></code> will not tell you which files it could not remove. If you want to know which files you could not remove, try them one at a time:</p><pre class="verbatim"><ol><li>     foreach <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$file</span> <span class="s">(</span> <span class="i">@goners</span> <span class="s">)</span> <span class="s">{</span></li><li>         <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="i">$file</span> or <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Could not unlink $file: $!&quot;</span><span class="sc">;</span></li><li>     <span class="s">}</span></li></ol></pre><p>Note: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></code> will not attempt to delete directories unless you are superuser and the <b>-U</b> flag is supplied to Perl.  Even if these conditions are met, be warned that unlinking a directory can inflict damage on your filesystem.  Finally, using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></code> on directories is not supported on many operating systems.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rmdir.html">rmdir</span></code> instead.</p><p>If LIST is omitted, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></code> uses <code class="inline"><span class="i">$_</span></code> .</p></section>	http://perldoc.perl.org/functions/unlink.html
Server error (a.k.a. "500 Server error")	A			Perl Diagnostics							<section class="prog__container"><p>(A) This is the error message generally seen in a browser window when trying to run a CGI program (including SSI) over the web.  The actual error text varies widely from server to server.  The most frequently-seen variants are &quot;500 Server error&quot;, &quot;Method (something) not permitted&quot;, &quot;Document contains no data&quot;, &quot;Premature end of script headers&quot;, and &quot;Did not produce a valid header&quot;.</p><p><b>This is a CGI error, not a Perl error</b>.</p><p>You need to make sure your script is executable, is accessible by the user CGI is running the script under (which is probably not the user account you tested it under), does not rely on any environment variables (like PATH) from the user it isn&#39;t running under, and isn&#39;t in a location where the CGI server can&#39;t find it, basically, more or less.  Please see the following for more information:</p><pre class="verbatim"><ol><li>&#09;http://www.perl.org/CGI_MetaFAQ.html</li><li>&#09;http://www.htmlhelp.org/faq/cgifaq.html</li><li>&#09;http://www.w3.org/Security/Faq/</li></ol></pre><p>You should also look at <span href="http://perldoc.perl.org/perlfaq9.html">perlfaq9</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Server-error-(a.k.a.-%22500-Server-error%22)
Sequence (?#... not terminated in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A regular expression comment must be terminated by a closing parenthesis.  Embedded parentheses aren&#39;t allowed.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%23...-not-terminated-in-regex-m%2f%25s%2f
and (function)	A			Perl Functions							<section class="prog__container"><pre>and</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/and.html
TAP::Parser::Result::Pragma (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Pragma - TAP pragma token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Pragma.html
pointer (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>variable</b> in a language like C that contains the exact memory location of some other item. Perl handles pointers internally so you don’t have to worry about them. Instead, you just use symbolic pointers in the form of <b>keys</b> and <b>variable</b> names, or <b>hard references</b>, which aren’t pointers (but act like pointers and do in fact contain pointers).</p></section>	http://perldoc.perl.org/perlglossary.html#pointer
(Did you mean "local" instead of "our"?)	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) Remember that &quot;our&quot; does not localize the declared global variable.  You have declared it again in the same lexical scope, which seems superfluous.</p></section>	http://perldoc.perl.org/perldiag.html#(Did-you-mean-%22local%22-instead-of-%22our%22%3f)
Can't goto subroutine from a sort sub (or similar callback)	A			Perl Diagnostics							<section class="prog__container"><p>(F) The &quot;goto subroutine&quot; call can&#39;t be used to jump out of the comparison sub for a sort(), or from a similar callback (such as the reduce() function in List::Util).</p></section>	http://perldoc.perl.org/perldiag.html#Can't-goto-subroutine-from-a-sort-sub-(or-similar-callback)
=cut	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that this line is the end of this previously started Pod block.  If there is any text after &quot;=cut&quot; on the line, it must be ignored.  Examples:</p><pre class="verbatim"><ol><li>  =cut</li><li></li><li>  =cut The documentation ends here.</li><li></li><li>  =cut</li><li>  # This is the first line of program text.</li><li>  sub foo { # This is the second.</li></ol></pre><p>It is an error to try to <i>start</i> a Pod block with a &quot;=cut&quot; command.  In that case, the Pod processor must halt parsing of the input file, and must by default emit a warning.</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dcut%22
Encode::GSM0338 (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::GSM0338 -- ESTI GSM 03.38 Encoding</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>  <span class="i">$gsm0338</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;gsm0338&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># loads Encode::GSM0338 implicitly</span></li><li>  <span class="i">$utf8</span>    = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;gsm0338&quot;</span><span class="cm">,</span> <span class="i">$gsm0338</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/GSM0338.html
magic (definition)	A			Perl Glossary							<section class="prog__container"><p>Technically speaking, any extra semantics attached to a variable such as <code class="inline"><span class="i">$!</span></code> , <code class="inline"><span class="i">$0</span></code> , <code class="inline"><span class="i">%ENV</span></code> , or <code class="inline"><span class="i">%SIG</span></code> , or to any tied variable.  Magical things happen when you diddle those variables.</p></section>	http://perldoc.perl.org/perlglossary.html#magic
Deprecated use of my() in false conditional	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You used a declaration similar to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> if <span class="n">0</span></code> .  There has been a long-standing bug in Perl that causes a lexical variable not to be cleared at scope exit when its declaration includes a false conditional.  Some people have exploited this bug to achieve a kind of static variable.  Since we intend to fix this bug, we don&#39;t want people relying on this behavior.  You can achieve a similar static effect by declaring the variable in a separate block outside the function, eg</p><pre class="verbatim"><ol><li><span name="f"></span>    sub <span class="m">f</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> if <span class="n">0</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$x</span>++ <span class="s">}</span></li></ol></pre><p>becomes</p><pre class="verbatim"><ol><li><span name="f"></span>    <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span><span class="sc">;</span> sub <span class="m">f</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$x</span>++ <span class="s">}</span> <span class="s">}</span></li></ol></pre><p>Beginning with perl 5.10.0, you can also use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> variables to have lexicals that are initialized only once (see <span href="http://perldoc.perl.org/feature.html">feature</span>):</p><pre class="verbatim"><ol><li><span name="f"></span>    sub <span class="m">f</span> <span class="s">{</span> <span class="w">state</span> <span class="i">$x</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$x</span>++ <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Deprecated-use-of-my()-in-false-conditional
Not a SCALAR reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to a scalar value, but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-SCALAR-reference
Ill-formed CRTL environ value "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W internal) A warning peculiar to VMS.  Perl tried to read the CRTL&#39;s internal environ array, and encountered an element without the <code class="inline">=</code>  delimiter used to separate keys from values.  The element is ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Ill-formed-CRTL-environ-value-%22%25s%22
IO::Pipe (module)	A			Perl Standard Modules		[[IO::Handle]]					<section class="prog__container"><p>IO::Pipe - supply object methods for pipes</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Pipe</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$pipe</span> = <span class="w">IO::Pipe</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;if<span class="s">(</span><span class="i">$pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="c"># Parent</span></li><li>&#09;    <span class="i">$pipe</span><span class="i">-&gt;reader</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;    while<span class="s">(</span><span class="q">&lt;$pipe&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;&#09;...</li><li>&#09;    <span class="s">}</span></li><li></li><li>&#09;<span class="s">}</span></li><li>&#09;elsif<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$pid</span><span class="s">)</span> <span class="s">{</span> <span class="c"># Child</span></li><li>&#09;    <span class="i">$pipe</span><span class="i">-&gt;writer</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$pipe</span> ...</li><li>&#09;<span class="s">}</span></li><li></li><li>&#09;or</li><li></li><li>&#09;<span class="i">$pipe</span> = <span class="w">IO::Pipe</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$pipe</span><span class="i">-&gt;reader</span><span class="s">(</span><span class="q">qw(ls -l)</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;while<span class="s">(</span><span class="q">&lt;$pipe&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;    ...</li><li>&#09;<span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Pipe.html
eval (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Miscellaneous functions							<section class="prog__container"><pre>eval EXPR<br>eval BLOCK<br>eval</pre><p>In the first form, often referred to as a &quot;string eval&quot;, the return value of EXPR is parsed and executed as if it were a little Perl program.  The value of the expression (which is itself determined within scalar context) is first parsed, and if there were no errors, executed as a block within the lexical context of the current Perl program.  This means, that in particular, any outer lexical variables are visible to it, and any package variable settings or subroutine and format definitions remain afterwards.</p><p>Note that the value is parsed every time the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> executes. If EXPR is omitted, evaluates <code class="inline"><span class="i">$_</span></code> .  This form is typically used to delay parsing and subsequent execution of the text of EXPR until run time.</p><p>If the <code class="inline"><span class="w">unicode_eval</span></code>  feature is enabled (which is the default under a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.16</span></code>  or higher declaration), EXPR or <code class="inline"><span class="i">$_</span></code>  is treated as a string of characters, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">utf8</span></code>  declarations have no effect, and source filters are forbidden.  In the absence of the <code class="inline"><span class="w">unicode_eval</span></code>  feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling.  See also the <span href="http://perldoc.perl.org/functions/evalbytes.html">evalbytes</span> keyword, which always treats its input as a byte stream and works properly with source filters, and the <span href="http://perldoc.perl.org/feature.html">feature</span> pragma.</p><p>Problems can arise if the string expands a scalar containing a floating point number.  That scalar can expand to letters, such as <code class="inline"><span class="q">&quot;NaN&quot;</span></code>  or <code class="inline"><span class="q">&quot;Infinity&quot;</span></code> ; or, within the scope of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code> , the decimal point character may be something other than a dot (such as a comma). None of these are likely to parse as you are likely expecting.</p><p>In the second form, the code within the BLOCK is parsed only once--at the same time the code surrounding the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> itself was parsed--and executed within the context of the current Perl program.  This form is typically used to trap exceptions more efficiently than the first (see below), while also providing the benefit of checking the code within BLOCK at compile time.</p><p>The final semicolon, if any, may be omitted from the value of EXPR or within the BLOCK.</p><p>In both forms, the value returned is the value of the last expression evaluated inside the mini-program; a return statement may be also used, just as with subroutines.  The expression providing the return value is evaluated in void, scalar, or list context, depending on the context of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>  itself.  See <span href="http://perldoc.perl.org/functions/wantarray.html">wantarray</span> for more on how the evaluation context can be  determined.</p><p>If there is a syntax error or runtime error, or a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> statement is executed, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> in scalar context or an empty list in list context, and <code class="inline"><span class="i">$@</span></code>  is set to the error message.  (Prior to 5.16, a bug caused <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> to be returned in list context for syntax errors, but not for runtime errors.) If there was no error, <code class="inline"><span class="i">$@</span></code>  is set to the empty string.  A control flow operator like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> can bypass the setting of <code class="inline"><span class="i">$@</span></code> .  Beware that using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> neither silences Perl from printing warnings to STDERR, nor does it stuff the text of warning messages into <code class="inline"><span class="i">$@</span></code> . To do either of those, you have to use the <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  facility, or turn off warnings inside the BLOCK or EXPR using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;all&#39;</span></code> . See <span href="http://perldoc.perl.org/functions/warn.html">warn</span>, <span href="http://perldoc.perl.org/perlvar.html">perlvar</span>, and <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p><p>Note that, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> traps otherwise-fatal errors, it is useful for determining whether a particular feature (such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/socket.html">socket</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/symlink.html">symlink</span></code>) is implemented.  It is also Perl&#39;s exception-trapping mechanism, where the die operator is used to raise exceptions.</p><p>If you want to trap errors when loading an XS module, some problems with the binary interface (such as Perl version skew) may be fatal even with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> unless <code class="inline"><span class="i">$ENV</span>{<span class="w">PERL_DL_NONLAZY</span>}</code>  is set.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>.</p><p>If the code to be executed doesn&#39;t vary, you may use the eval-BLOCK form to trap run-time errors without incurring the penalty of recompiling each time.  The error, if any, is still returned in <code class="inline"><span class="i">$@</span></code> . Examples:</p><pre class="verbatim"><ol><li>    <span class="c"># make divide-by-zero nonfatal</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$answer</span> = <span class="i">$a</span> / <span class="i">$b</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span> if <span class="i">$@</span><span class="sc">;</span></li><li></li><li>    <span class="c"># same thing, but less efficient</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;$answer = $a / $b&#39;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span> if <span class="i">$@</span><span class="sc">;</span></li><li></li><li>    <span class="c"># a compile-time error</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$answer</span> = <span class="s">}</span><span class="sc">;</span> <span class="c"># WRONG</span></li><li></li><li>    <span class="c"># a run-time error</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;$answer =&#39;</span><span class="sc">;</span>   <span class="c"># sets $@</span></li></ol></pre><p>Using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval{}</span></code> form as an exception trap in libraries does have some issues.  Due to the current arguably broken state of <code class="inline"><span class="w">__DIE__</span></code>  hooks, you may wish not to trigger any <code class="inline"><span class="w">__DIE__</span></code>  hooks that user code may have installed. You can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  construct for this purpose, as this example shows:</p><pre class="verbatim"><ol><li>    <span class="c"># a private exception trap for divide-by-zero</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="q">&#39;__DIE__&#39;</span>}<span class="sc">;</span> <span class="i">$answer</span> = <span class="i">$a</span> / <span class="i">$b</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span> if <span class="i">$@</span><span class="sc">;</span></li></ol></pre><p>This is especially significant, given that <code class="inline"><span class="w">__DIE__</span></code>  hooks can call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> again, which has the effect of changing their error messages:</p><pre class="verbatim"><ol><li>    <span class="c"># __DIE__ hooks may modify error messages</span></li><li>    <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="q">&#39;__DIE__&#39;</span>} =</li><li>              <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span> =~ <span class="q">s/foo/bar/g</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$x</span> <span class="s">}</span><span class="sc">;</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;foo lives here&quot;</span> <span class="s">}</span><span class="sc">;</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$@</span> if <span class="i">$@</span><span class="sc">;</span>                <span class="c"># prints &quot;bar lives here&quot;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Because this promotes action at a distance, this counterintuitive behavior may be fixed in a future release.</p><p>With an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>, you should be especially careful to remember what&#39;s being looked at when:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="i">$x</span><span class="sc">;</span>        <span class="c"># CASE 1</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;$x&quot;</span><span class="sc">;</span>      <span class="c"># CASE 2</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;$x&#39;</span><span class="sc">;</span>      <span class="c"># CASE 3</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$x</span> <span class="s">}</span><span class="sc">;</span>    <span class="c"># CASE 4</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;\\$$x++&quot;</span><span class="sc">;</span>  <span class="c"># CASE 5</span></li><li>    <span class="i">$$x</span>++<span class="sc">;</span>          <span class="c"># CASE 6</span></li></ol></pre><p>Cases 1 and 2 above behave identically: they run the code contained in the variable $x.  (Although case 2 has misleading double quotes making the reader wonder what else might be happening (nothing is).)  Cases 3 and 4 likewise behave in the same way: they run the code <code class="inline"><span class="q">&#39;$x&#39;</span></code> , which does nothing but return the value of $x.  (Case 4 is preferred for purely visual reasons, but it also has the advantage of compiling at compile-time instead of at run-time.)  Case 5 is a place where normally you <i>would</i> like to use double quotes, except that in this particular situation, you can just use symbolic references instead, as in case 6.</p><p>Before Perl 5.14, the assignment to <code class="inline"><span class="i">$@</span></code>  occurred before restoration  of localized variables, which means that for your code to run on older versions, a temporary is required if you want to mask some but not all errors:</p><pre class="verbatim"><ol><li>    <span class="c"># alter $@ on nefarious repugnancy only</span></li><li>    <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$e</span><span class="sc">;</span></li><li>       <span class="s">{</span></li><li>         <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$@</span><span class="sc">;</span> <span class="c"># protect existing $@</span></li><li>         <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">test_repugnancy</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>         <span class="c"># $@ =~ /nefarious/ and die $@; # Perl 5.14 and higher only</span></li><li>         <span class="i">$@</span> =~ <span class="q">/nefarious/</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="i">$e</span> = <span class="i">$@</span><span class="sc">;</span></li><li>       <span class="s">}</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$e</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$e</span></li><li>    <span class="s">}</span></li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">BLOCK</span></code>  does <i>not</i> count as a loop, so the loop control statements <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> cannot be used to leave or restart the block.</p><p>An <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;&#39;</span></code>  executed within a subroutine defined in the <code class="inline"><span class="w">DB</span></code>  package doesn&#39;t see the usual surrounding lexical scope, but rather the scope of the first non-DB piece of code that called it.  You don&#39;t normally need to worry about this unless you are writing a Perl debugger.</p></section>	http://perldoc.perl.org/functions/eval.html
IO::Uncompress::Gunzip (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Uncompress::Gunzip - Read RFC 1952 files/buffers</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;</li><li></li><li>    my $status = gunzip $input =&gt; $output [,OPTS]</li><li>        or die &quot;gunzip failed: $GunzipError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::Gunzip $input [OPTS] </li><li>        or die &quot;gunzip failed: $GunzipError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $status = $z-&gt;inflateSync()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $GunzipError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/Gunzip.html
Can't open a reference	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You tried to open a scalar reference for reading or writing, using the 3-arg open() syntax:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">FH</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="i">$ref</span><span class="sc">;</span></li></ol></pre><p>but your version of perl is compiled without perlio, and this form of open is not supported.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-a-reference
script kiddie (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>cracker</b> who is not a <b>hacker</b> but knows just enough to run canned scripts. A <b>cargo-cult</b> programmer.</p></section>	http://perldoc.perl.org/perlglossary.html#script-kiddie
Why aren't my random numbers random?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>If you&#39;re using a version of Perl before 5.004, you must call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> once at the start of your program to seed the random number generator.</p><pre class="verbatim"><ol><li>     <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span><span class="s">(</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$]</span> &lt; <span class="n">5.004</span> <span class="s">}</span></li></ol></pre><p>5.004 and later automatically call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> at the beginning. Don&#39;t call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> more than once--you make your numbers less random, rather than more.</p><p>Computers are good at being predictable and bad at being random (despite appearances caused by bugs in your programs :-). The <i>random</i> article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in <span href="http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz">http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz</span>, courtesy of Tom Phoenix, talks more about this. John von Neumann said, &quot;Anyone who attempts to generate random numbers by deterministic means is, of course, living in a state of sin.&quot;</p><p>Perl relies on the underlying system for the implementation of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code>; on some systems, the generated numbers are not random enough (especially on Windows : see <span href="http://www.perlmonks.org/?node_id=803632">http://www.perlmonks.org/?node_id=803632</span>). Several CPAN modules in the <code class="inline"><span class="w">Math</span></code>  namespace implement better pseudorandom generators; see for example <span href="http://search.cpan.org/perldoc/Math::Random::MT">Math::Random::MT</span> (&quot;Mersenne Twister&quot;, fast), or <span href="http://search.cpan.org/perldoc/Math::TrulyRandom">Math::TrulyRandom</span> (uses the imperfections in the system&#39;s timer to generate random numbers, which is rather slow). More algorithms for random numbers are described in &quot;Numerical Recipes in C&quot; at <span href="http://www.nr.com/">http://www.nr.com/</span></p></section>	http://perldoc.perl.org/perlfaq4.html#Why-aren't-my-random-numbers-random%3f
Can't coerce %s to %s in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) Certain types of SVs, in particular real symbol table entries (typeglobs), can&#39;t be forced to stop being what they are.  So you can&#39;t say things like:</p><pre class="verbatim"><ol><li>    <span class="i">*foo</span> += <span class="n">1</span><span class="sc">;</span></li></ol></pre><p>You CAN say</p><pre class="verbatim"><ol><li>    <span class="i">$foo</span> = <span class="i">*foo</span><span class="sc">;</span></li><li>    <span class="i">$foo</span> += <span class="n">1</span><span class="sc">;</span></li></ol></pre><p>but then $foo no longer contains a glob.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-coerce-%25s-to-%25s-in-%25s
Did not produce a valid header	A			Perl Diagnostics							<section class="prog__container"><p>See Server error.</p></section>	http://perldoc.perl.org/perldiag.html#Did-not-produce-a-valid-header
How do I find the first array element for which a condition is true?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>To find the first array element which satisfies a condition, you can use the <code class="inline"><span class="i">first</span><span class="s">(</span><span class="s">)</span></code>  function in the <span href="http://perldoc.perl.org/List/Util.html">List::Util</span> module, which comes with Perl 5.8. This example finds the first element that contains &quot;Perl&quot;.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::Util</span> <span class="q">qw(first)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> = <span class="i">first</span> <span class="s">{</span> <span class="q">/Perl/</span> <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>If you cannot use <span href="http://perldoc.perl.org/List/Util.html">List::Util</span>, you can make your own loop to do the same thing. Once you find the element, you stop the loop with last.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$found</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="i">@array</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="q">/Perl/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$found</span> = <span class="i">$_</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you want the array index, use the <code class="inline"><span class="i">firstidx</span><span class="s">(</span><span class="s">)</span></code>  function from <code class="inline"><span class="w">List::MoreUtils</span></code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::MoreUtils</span> <span class="q">qw(firstidx)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$index</span> = <span class="i">firstidx</span> <span class="s">{</span> <span class="q">/Perl/</span> <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>Or write it yourself, iterating through the indices and checking the array element at each index until you find one that satisfies the condition:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$found</span><span class="cm">,</span> <span class="i">$index</span> <span class="s">)</span> = <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="n">-1</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span><span class="s">(</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="i">@array</span><span class="sc">;</span> <span class="i">$i</span>++ <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$array</span>[<span class="i">$i</span>] =~ <span class="q">/Perl/</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="i">$found</span> = <span class="i">$array</span>[<span class="i">$i</span>]<span class="sc">;</span></li><li>            <span class="i">$index</span> = <span class="i">$i</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-the-first-array-element-for-which-a-condition-is-true%3f
Cannot printf %f with '%c'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried printing an infinity or not-a-number as a character (%c), which makes no sense.  Maybe you meant &#39;%s&#39;, or just stringifying it?</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-printf-%25f-with-'%25c'
role (definition)	A			Perl Glossary							<section class="prog__container"><p>A name for a concrete set of behaviors. A role is a way to add behavior to a class without inheritance.</p></section>	http://perldoc.perl.org/perlglossary.html#role
Odd name/value argument for subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) A subroutine using a slurpy hash parameter in its signature received an odd number of arguments to populate the hash.  It requires the arguments to be paired, with the same number of keys as values. The caller of the subroutine is presumably at fault.  Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</p></section>	http://perldoc.perl.org/perldiag.html#Odd-name%2fvalue-argument-for-subroutine
Can I write useful Perl programs on the command line?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Yes. Read <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for more information. Some examples follow. (These assume standard Unix shell quoting rules.)</p><pre class="verbatim"><ol><li>    <span class="c"># sum first and last fields</span></li><li>    <span class="w">perl</span> -<span class="w">lane</span> <span class="q">&#39;print $F[0] + $F[-1]&#39;</span> *</li><li></li><li>    <span class="c"># identify text files</span></li><li>    <span class="w">perl</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;for(@ARGV) {print if -f &amp;&amp; -T _}&#39;</span> *</li><li></li><li>    <span class="c"># remove (most) comments from C program</span></li><li>    <span class="w">perl</span> -<span class="n">0777</span> -<span class="w">pe</span> <span class="q">&#39;s{/\\*.*?\\*/}{}gs&#39;</span> <span class="w">foo</span>.<span class="w">c</span></li><li></li><li>    <span class="c"># make file a month younger than today, defeating reaper daemons</span></li><li>    <span class="w">perl</span> -e <span class="q">&#39;$X=24*60*60; utime(time(),time() + 30 * $X,@ARGV)&#39;</span> *</li><li></li><li>    <span class="c"># find first unused uid</span></li><li>    <span class="w">perl</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;$i++ while getpwuid($i); print $i&#39;</span></li><li></li><li>    <span class="c"># display reasonable manpath</span></li><li>    <span class="w">echo</span> <span class="i">$PATH</span> | <span class="w">perl</span> -<span class="w">nl</span> -<span class="n">072</span> -<span class="w">e</span> <span class="q">&#39;</span></li><li>    <span class="q">    s![^/+]*$!man!&amp;&amp;-d&amp;&amp;!$s{$_}++&amp;&amp;push@m,$_;END{print&quot;@m&quot;}&#39;</span></li></ol></pre><p>OK, the last one was actually an Obfuscated Perl Contest entry. :-)</p></section>	http://perldoc.perl.org/perlfaq3.html#Can-I-write-useful-Perl-programs-on-the-command-line%3f
CORE::%s is not a keyword	A			Perl Diagnostics							<section class="prog__container"><p>(F) The CORE:: namespace is reserved for Perl keywords.</p></section>	http://perldoc.perl.org/perldiag.html#CORE%3a%3a%25s-is-not-a-keyword
Devel::SelfStubber (module)	A			Perl Standard Modules							<section class="prog__container"><p>Devel::SelfStubber - generate stubs for a SelfLoading module</p> <p>To generate just the stubs:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Devel::SelfStubber</span><span class="sc">;</span></li><li>    <span class="w">Devel::SelfStubber</span><span class="w">-&gt;stub</span><span class="s">(</span><span class="q">&#39;MODULENAME&#39;</span><span class="cm">,</span><span class="q">&#39;MY_LIB_DIR&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>or to generate the whole module with stubs inserted correctly</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Devel::SelfStubber</span><span class="sc">;</span></li><li>    <span class="i">$Devel::SelfStubber::JUST_STUBS</span>=<span class="n">0</span><span class="sc">;</span></li><li>    <span class="w">Devel::SelfStubber</span><span class="w">-&gt;stub</span><span class="s">(</span><span class="q">&#39;MODULENAME&#39;</span><span class="cm">,</span><span class="q">&#39;MY_LIB_DIR&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>MODULENAME is the Perl module name, e.g. Devel::SelfStubber, NOT &#39;Devel/SelfStubber&#39; or &#39;Devel/SelfStubber.pm&#39;.</p><p>MY_LIB_DIR defaults to &#39;.&#39; if not present.</p></section>	http://perldoc.perl.org/Devel/SelfStubber.html
'@' outside of string in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had a template that specified an absolute position outside the string being unpacked.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%40'-outside-of-string-in-unpack
msgctl (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>msgctl ID,CMD,ARG</pre><p>Calls the System V IPC function msgctl(2).  You&#39;ll probably have to say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span><span class="sc">;</span></li></ol></pre><p>first to get the correct constant definitions.  If CMD is <code class="inline"><span class="w">IPC_STAT</span></code> , then ARG must be a variable that will hold the returned <code class="inline"><span class="w">msqid_ds</span></code>  structure.  Returns like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code>: the undefined value for error, <code class="inline"><span class="q">&quot;0 but true&quot;</span></code>  for zero, or the actual return value otherwise.  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span> and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::Semaphore</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#msgctl">msgctl in perlport</span>.</p></section>	http://perldoc.perl.org/functions/msgctl.html
Ambiguous use of -%s resolved as -&%s()	A			Perl Diagnostics							<section class="prog__container"><p>(S ambiguous) You wrote something like <code class="inline">-<span class="w">foo</span></code> , which might be the string <code class="inline"><span class="q">&quot;-foo&quot;</span></code> , or a call to the function <code class="inline"><span class="w">foo</span></code> , negated.  If you meant the string, just write <code class="inline"><span class="q">&quot;-foo&quot;</span></code> .  If you meant the function call, write <code class="inline">-<span class="i">foo</span><span class="s">(</span><span class="s">)</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-use-of--%25s-resolved-as--%26%25s()
NFS (definition)	A			Perl Glossary							<section class="prog__container"><p>Network File System, which allows you to mount a remote filesystem as if it were local.</p></section>	http://perldoc.perl.org/perlglossary.html#NFS
kill (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>kill SIGNAL, LIST<br>kill SIGNAL</pre><p>Sends a signal to a list of processes.  Returns the number of arguments that were successfully used to signal (which is not necessarily the same as the number of processes actually killed, e.g. where a process group is killed).</p><pre class="verbatim"><ol><li>    <span class="i">$cnt</span> = <span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> <span class="q">&#39;HUP&#39;</span><span class="cm">,</span> <span class="i">$child1</span><span class="cm">,</span> <span class="i">$child2</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> <span class="q">&#39;KILL&#39;</span><span class="cm">,</span> <span class="i">@goners</span><span class="sc">;</span></li></ol></pre><p>SIGNAL may be either a signal name (a string) or a signal number.  A signal name may start with a <code class="inline"><span class="w">SIG</span></code>  prefix, thus <code class="inline"><span class="w">FOO</span></code>  and <code class="inline"><span class="w">SIGFOO</span></code>  refer to the same signal.  The string form of SIGNAL is recommended for portability because the same signal may have different numbers in different operating systems.</p><p>A list of signal names supported by the current platform can be found in <code class="inline"><span class="i">$Config</span>{<span class="w">sig_name</span>}</code> , which is provided by the <code class="inline"><span class="w">Config</span></code>  module.  See <span href="http://perldoc.perl.org/Config.html">Config</span> for more details.</p><p>A negative signal name is the same as a negative signal number, killing process groups instead of processes.  For example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> <span class="q">&#39;-KILL&#39;</span><span class="cm">,</span> <span class="i">$pgrp</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> <span class="n">-9</span><span class="cm">,</span> <span class="i">$pgrp</span></code>  will send <code class="inline"><span class="w">SIGKILL</span></code>  to the entire process group specified.  That means you usually want to use positive not negative signals.</p><p>If SIGNAL is either the number 0 or the string <code class="inline"><span class="w">ZERO</span></code>  (or <code class="inline"><span class="w">SIGZERO</span></code> ), no signal is sent to the process, but <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span></code> checks whether it&#39;s <i>possible</i> to send a signal to it (that means, to be brief, that the process is owned by the same user, or we are the super-user).  This is useful to check that a child process is still alive (even if only as a zombie) and hasn&#39;t changed its UID.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span> for notes on the portability of this construct.</p><p>The behavior of kill when a <i>PROCESS</i> number is zero or negative depends on the operating system.  For example, on POSIX-conforming systems, zero will signal the current process group, -1 will signal all processes, and any other negative PROCESS number will act as a negative signal number and kill the entire process group specified.</p><p>If both the SIGNAL and the PROCESS are negative, the results are undefined. A warning may be produced in a future version.</p><p>See <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span> for more details.</p><p>On some platforms such as Windows where the fork() system call is not available, Perl can be built to emulate fork() at the interpreter level. This emulation has limitations related to kill that have to be considered, for code running on Windows and in code intended to be portable.</p><p>See <span href="http://perldoc.perl.org/perlfork.html">perlfork</span> for more details.</p><p>If there is no <i>LIST</i> of processes, no signal is sent, and the return value is 0.  This form is sometimes used, however, because it causes tainting checks to be run.  But see <span href="http://perldoc.perl.org/perlsec.html#Laundering-and-Detecting-Tainted-Data">Laundering and Detecting Tainted Data in perlsec</span>.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#kill">kill in perlport</span>.</p></section>	http://perldoc.perl.org/functions/kill.html
@+ (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>This array holds the offsets of the ends of the last successful submatches in the currently active dynamic scope.  <code class="inline"><span class="i">$+</span>[<span class="n">0</span>]</code>  is the offset into the string of the end of the entire match.  This is the same value as what the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> function returns when called on the variable that was matched against.  The <i>n</i>th element of this array holds the offset of the <i>n</i>th submatch, so <code class="inline"><span class="i">$+</span>[<span class="n">1</span>]</code>  is the offset past where <code class="inline"><span class="i">$1</span></code>  ends, <code class="inline"><span class="i">$+</span>[<span class="n">2</span>]</code>  the offset past where <code class="inline"><span class="i">$2</span></code>  ends, and so on.  You can use <code class="inline"><span class="i">$#+</span></code>  to determine how many subgroups were in the last successful match.  See the examples given for the <code class="inline"><span class="i">@-</span></code>  variable.</p><p>This variable was added in Perl v5.6.0.</p></section>	http://perldoc.perl.org/perlvar.html#%40%2b
Too many ('s	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#Too-many-('s
Encode::Encoder (module)	A			Perl Standard Modules		[[Encode]]\n[[Encode::Encoding]]					<section class="prog__container"><p>Encode::Encoder -- Object Oriented Encoder</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode::Encoder</span><span class="sc">;</span></li><li>  <span class="c"># Encode::encode(&quot;ISO-8859-1&quot;, $data); </span></li><li>  <span class="w">Encode::Encoder</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="i">-&gt;iso_8859_1</span><span class="sc">;</span> <span class="c"># OOP way</span></li><li>  <span class="c"># shortcut</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode::Encoder</span> <span class="q">qw(encoder)</span><span class="sc">;</span></li><li>  <span class="i">encoder</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="i">-&gt;iso_8859_1</span><span class="sc">;</span></li><li>  <span class="c"># you can stack them!</span></li><li>  <span class="i">encoder</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="i">-&gt;iso_8859_1</span><span class="i">-&gt;base64</span><span class="sc">;</span>  <span class="c"># provided base64() is defined</span></li><li>  <span class="c"># you can use it as a decoder as well</span></li><li>  <span class="i">encoder</span><span class="s">(</span><span class="i">$base64</span><span class="s">)</span><span class="i">-&gt;bytes</span><span class="s">(</span><span class="q">&#39;base64&#39;</span><span class="s">)</span><span class="i">-&gt;latin1</span><span class="sc">;</span></li><li>  <span class="c"># stringified</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">encoder</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="i">-&gt;utf8</span><span class="i">-&gt;latin1</span><span class="sc">;</span>  <span class="c"># prints the string in latin1</span></li><li>  <span class="c"># numified</span></li><li>  <span class="i">encoder</span><span class="s">(</span><span class="q">&quot;\\x{abcd}\\x{ef}g&quot;</span><span class="s">)</span><span class="i">-&gt;utf8</span> == <span class="n">6</span><span class="sc">;</span> <span class="c"># true. bytes::length($data)</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Encoder.html
Quantifier follows nothing in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You started a regular expression with a quantifier.  Backslash it if you meant it literally.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Quantifier-follows-nothing-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
/x regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Extend your pattern&#39;s legibility by permitting whitespace and comments. Details in <span href="http://perldoc.perl.org/perlre.html#%2fx">/x</span></p></section>	http://perldoc.perl.org/perlre.html#*x*
Can't reopen input pipe (name: %s) in binary mode	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  Perl thought stdin was a pipe, and tried to reopen it to accept binary data.  Alas, it failed.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-reopen-input-pipe-(name%3a-%25s)-in-binary-mode
Can't use "my %s" in sort comparison	A			Perl Diagnostics							<section class="prog__container"><p>(F) The global variables $a and $b are reserved for sort comparisons. You mentioned $a or $b in the same line as the &lt;=&gt; or cmp operator, and the variable had earlier been declared as a lexical variable. Either qualify the sort variable with the package name, or rename the lexical variable.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-%22my-%25s%22-in-sort-comparison
dereference (definition)	A			Perl Glossary							<section class="prog__container"><p>A fancy computer science term meaning “to follow a <b>reference</b> to what it points to”. The “de” part of it refers to the fact that you’re taking away one level of <b>indirection</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#dereference
getsockopt (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>getsockopt SOCKET,LEVEL,OPTNAME</pre><p>Queries the option named OPTNAME associated with SOCKET at a given LEVEL. Options may exist at multiple protocol levels depending on the socket type, but at least the uppermost socket level SOL_SOCKET (defined in the <code class="inline"><span class="w">Socket</span></code>  module) will exist.  To query options at another level the protocol number of the appropriate protocol controlling the option should be supplied.  For example, to indicate that an option is to be interpreted by the TCP protocol, LEVEL should be set to the protocol number of TCP, which you can get using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getprotobyname.html">getprotobyname</span></code>.</p><p>The function returns a packed string representing the requested socket option, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> on error, with the reason for the error placed in <code class="inline"><span class="i">$!</span></code> .  Just what is in the packed string depends on LEVEL and OPTNAME; consult getsockopt(2) for details.  A common case is that the option is an integer, in which case the result is a packed integer, which you can decode using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> with the <code class="inline"><span class="w">i</span></code>  (or <code class="inline"><span class="w">I</span></code> ) format.</p><p>Here&#39;s an example to test whether Nagle&#39;s algorithm is enabled on a socket:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span> <span class="q">qw(:all)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tcp</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getprotobyname.html">getprotobyname</span><span class="s">(</span><span class="q">&quot;tcp&quot;</span><span class="s">)</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Could not determine the protocol number for tcp&quot;</span><span class="sc">;</span></li><li>    <span class="c"># my $tcp = IPPROTO_TCP; # Alternative</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$packed</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getsockopt.html">getsockopt</span><span class="s">(</span><span class="i">$socket</span><span class="cm">,</span> <span class="i">$tcp</span><span class="cm">,</span> <span class="w">TCP_NODELAY</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;getsockopt TCP_NODELAY: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$nodelay</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;I&quot;</span><span class="cm">,</span> <span class="i">$packed</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Nagle&#39;s algorithm is turned &quot;</span><span class="cm">,</span></li><li>           <span class="i">$nodelay</span> ? <span class="q">&quot;off\\n&quot;</span> <span class="co">:</span> <span class="q">&quot;on\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getsockopt">getsockopt in perlport</span>.</p></section>	http://perldoc.perl.org/functions/getsockopt.html
How do I handle binary data correctly?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Perl is binary-clean, so it can handle binary data just fine. On Windows or DOS, however, you have to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code> for binary files to avoid conversions for line endings. In general, you should use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code> any time you want to work with binary data.</p><p>Also see <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span> or <span href="http://perldoc.perl.org/perlopentut.html">perlopentut</span>.</p><p>If you&#39;re concerned about 8-bit textual data then see <span href="http://perldoc.perl.org/perllocale.html">perllocale</span>. If you want to deal with multibyte characters, however, there are some gotchas. See the section on Regular Expressions.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-handle-binary-data-correctly%3f
IO::Compress::Deflate (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Compress::Deflate - Write RFC 1950 files/buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::Deflate</span> <span class="q">qw(deflate $DeflateError)</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$status</span> = <span class="w">deflate</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>] </li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;deflate failed: $DeflateError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">new</span> <span class="w">IO::Compress::Deflate</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>]</li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;deflate failed: $DeflateError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$z</span><span class="i">-&gt;print</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;printf</span><span class="s">(</span><span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;write</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;syswrite</span><span class="s">(</span><span class="i">$string</span> [<span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$offset</span>]<span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;tell</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;seek</span><span class="s">(</span><span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;binmode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;fileno</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;opened</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;input_line_number</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;newStream</span><span class="s">(</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$DeflateError</span> <span class="sc">;</span></li><li></li><li>    <span class="c"># IO::File mode</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$z</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="i">$z</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$z</span><span class="cm">,</span> <span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$z</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/Deflate.html
No such class %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You provided a class qualifier in a &quot;my&quot;, &quot;our&quot; or &quot;state&quot; declaration, but this class doesn&#39;t exist at this point in your program.</p></section>	http://perldoc.perl.org/perldiag.html#No-such-class-%25s
mortal (definition)	A			Perl Glossary							<section class="prog__container"><p>A temporary value scheduled to die when the current statement finishes.</p></section>	http://perldoc.perl.org/perlglossary.html#mortal
-i used with no filenames on the command line, reading from STDIN	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) The <code class="inline">-<span class="w">i</span></code>  option was passed on the command line, indicating that the script is intended to edit files in place, but no files were given.  This is usually a mistake, since editing STDIN in place doesn&#39;t make sense, and can be confusing because it can make perl look like it is hanging when it is really just trying to read from STDIN.  You should either pass a filename to edit, or remove <code class="inline">-<span class="w">i</span></code>  from the command line.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for more details.</p></section>	http://perldoc.perl.org/perldiag.html#-i-used-with-no-filenames-on-the-command-line%2c-reading-from-STDIN
Binary "!=" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;!=&quot; returns true if the left argument is numerically not equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
declaration (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>assertion</b> that states something exists and perhaps describes what it’s like, without giving any commitment as to how or where you’ll use it. A declaration is like the part of your recipe that says, “two cups flour, one large egg, four or five tadpoles…” See <b>statement</b> for its opposite. Note that some declarations also function as statements. Subroutine declarations also act as definitions if a body is supplied.</p></section>	http://perldoc.perl.org/perlglossary.html#declaration
format (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>format</pre><p>Declare a picture format for use by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> function.  For example:</p><pre class="verbatim"><ol><li>    format Something =</li><li>        Test: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||| @&gt;&gt;&gt;&gt;&gt;</li><li>              $str,     $%,    &#39;$&#39; . int($num)</li><li>    .</li><li></li><li>    $str = &quot;widget&quot;;</li><li>    $num = $cost/$quantity;</li><li>    $~ = &#39;Something&#39;;</li><li>    write;</li></ol></pre><p>See <span href="http://perldoc.perl.org/perlform.html">perlform</span> for many details and examples.</p></section>	http://perldoc.perl.org/functions/format.html
Test::Builder (module)	A			Perl Standard Modules		[[Test::Simple]]\n[[Test::More]]\n[[Test::Harness]]					<section class="prog__container"><p>Test::Builder - Backend for building test libraries</p> <pre class="verbatim"><ol><li><span name="package-My::Test::Module"></span>  package <span class="i">My::Test::Module</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;Test::Builder::Module&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$CLASS</span> = <span class="w">__PACKAGE__</span><span class="sc">;</span></li><li></li><li><span name="ok"></span>  sub <span class="m">ok</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$test</span><span class="cm">,</span> <span class="i">$name</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tb</span> = <span class="i">$CLASS</span><span class="i">-&gt;builder</span><span class="sc">;</span></li><li></li><li>      <span class="i">$tb</span><span class="i">-&gt;ok</span><span class="s">(</span><span class="i">$test</span><span class="cm">,</span> <span class="i">$name</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Builder.html
Pod::Simple::LinkSection (module)	A			Perl Standard Modules		[[Pod::Simple]]					<section class="prog__container"><p>Pod::Simple::LinkSection -- represent &quot;section&quot; attributes of L codes</p> <pre class="verbatim"><ol><li> <span class="c"># a long story</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/LinkSection.html
fileglob (definition)	A			Perl Glossary							<section class="prog__container"><p>A “wildcard” match on <b>filenames</b>. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#fileglob
How do I sort a hash (optionally by value instead of key)?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>To sort a hash, start with the keys. In this example, we give the list of keys to the sort function which then compares them ASCIIbetically (which might be affected by your locale settings). The output list has the keys in ASCIIbetical order. Once we have the keys, we can go through them to create a report which lists the keys in ASCIIbetical order.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$a</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$b</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="i">@keys</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%-20s %6d\\n&quot;</span><span class="cm">,</span> <span class="i">$key</span><span class="cm">,</span> <span class="i">$hash</span>{<span class="i">$key</span>}<span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>We could get more fancy in the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort()</span></code> block though. Instead of comparing the keys, we can compute a value with them and use that value as the comparison.</p><p>For instance, to make our report order case-insensitive, we use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span></code> to lowercase the keys before comparing them:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span> <span class="i">$a</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span> <span class="i">$b</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>Note: if the computation is expensive or the hash has many elements, you may want to look at the Schwartzian Transform to cache the computation results.</p><p>If we want to sort by the hash value instead, we use the hash key to look it up. We still get out a list of keys, but this time they are ordered by their value.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$hash</span>{<span class="i">$a</span>} &lt;=&gt; <span class="i">$hash</span>{<span class="i">$b</span>} <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>From there we can get more complex. If the hash values are the same, we can provide a secondary sort on the hash key.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span></li><li>        <span class="i">$hash</span>{<span class="i">$a</span>} &lt;=&gt; <span class="i">$hash</span>{<span class="i">$b</span>}</li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span></li><li>        <span class="q">&quot;\\L$a&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="q">&quot;\\L$b&quot;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-sort-a-hash-(optionally-by-value-instead-of-key)%3f
alias (definition)	A			Perl Glossary							<section class="prog__container"><p>A nickname for something, which behaves in all ways as though you’d used the original name instead of the nickname. Temporary aliases are implicitly created in the loop variable for <code class="inline">foreach</code>  loops, in the <code class="inline"><span class="i">$_</span></code>  variable for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> operators, in <code class="inline"><span class="i">$a</span></code>  and <code class="inline"><span class="i">$b</span></code>  during <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>’s comparison function, and in each element of <code class="inline"><span class="i">@_</span></code>  for the <b>actual arguments</b> of a subroutine call. Permanent aliases are explicitly created in <b>packages</b> by <b>importing</b> symbols or by assignment to <b>typeglobs</b>. Lexically scoped aliases for package variables are explicitly created by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration.</p></section>	http://perldoc.perl.org/perlglossary.html#alias
How do I find out if I'm running interactively or not?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>This is a difficult question to answer, and the best answer is only a guess.</p><p>What do you really want to know? If you merely want to know if one of your filehandles is connected to a terminal, you can try the <code class="inline">-t</code>  file test:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> -t <span class="w">STDOUT</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;I&#39;m connected to a terminal!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>However, you might be out of luck if you expect that means there is a real person on the other side. With the <span href="http://search.cpan.org/perldoc/Expect">Expect</span> module, another program can pretend to be a person. The program might even come close to passing the Turing test.</p><p>The <span href="http://search.cpan.org/perldoc/IO::Interactive">IO::Interactive</span> module does the best it can to give you an answer. Its <code class="inline"><span class="w">is_interactive</span></code>  function returns an output filehandle; that filehandle points to standard output if the module thinks the session is interactive. Otherwise, the filehandle is a null handle that simply discards the output:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Interactive</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="w">is_interactive</span> <span class="s">}</span> <span class="q">&quot;I might go to standard output!\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>This still doesn&#39;t guarantee that a real person is answering your prompts or reading your output.</p><p>If you want to know how to handle automated testing for your distribution, you can check the environment. The CPAN Testers, for instance, set the value of <code class="inline"><span class="w">AUTOMATED_TESTING</span></code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span><span class="s">(</span> <span class="i">$ENV</span>{<span class="w">AUTOMATED_TESTING</span>} <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Hello interactive tester!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-find-out-if-I'm-running-interactively-or-not%3f
Need exactly 3 octal digits in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Within <code class="inline"><span class="s">(</span><span class="q">?[   ])</span></code> , all constants interpreted as octal need to be exactly 3 digits long.  This helps catch some ambiguities.  If your constant is too short, add leading zeros, like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\078 ] ])     # Syntax error!</span></li><li> <span class="q"> (?</span><span class="s">[</span> <span class="s">[</span> \\<span class="n">0078</span> <span class="s">]</span> <span class="s">]</span><span class="s">)</span>    <span class="c"># Works</span></li><li> <span class="s">(</span><span class="q">?[ [ \\007 8 ] ])   # Clearer</span></li></ol></pre><p>The maximum number this construct can express is <code class="inline">\\<span class="n">777</span></code> .  If you need a larger one, you need to use <span href="http://perldoc.perl.org/perlrebackslash.html#Octal-escapes">\\o{}</span> instead.  If you meant two separate things, you need to separate them:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\7776 ] ])        # Syntax error!</span></li><li> <span class="q"> (?</span><span class="s">[</span> <span class="s">[</span> \\<span class="i">o</span><span class="s">{</span><span class="n">7776</span><span class="s">}</span> <span class="s">]</span> <span class="s">]</span><span class="s">)</span>     <span class="c"># One meaning</span></li><li> <span class="s">(</span><span class="q">?[ [ \\777 6 ] ])       # Another meaning</span></li><li> <span class="q"> (?</span><span class="s">[</span> <span class="s">[</span> \\<span class="n">777</span> \\<span class="n">006</span> <span class="s">]</span> <span class="s">]</span><span class="s">)</span>    <span class="c"># Still another</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Need-exactly-3-octal-digits-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
ExtUtils::Command::MM (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Command::MM - Commands for the MM&#39;s to use in Makefiles</p> <pre class="verbatim"><ol><li>  perl &quot;-MExtUtils::Command::MM&quot; -e &quot;function&quot; &quot;--&quot; arguments...</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Command/MM.html
${^ENCODING} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>DEPRECATED!!!</p><p>The <i>object reference</i> to the <code class="inline"><span class="w">Encode</span></code>  object that is used to convert the source code to Unicode.  Thanks to this variable your Perl script does not have to be written in UTF-8.  Default is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>Setting this variable to any other value than <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> is deprecated due to fundamental defects in its design and implementation.  It is planned to remove it from a future Perl version.  Its purpose was to allow your non-ASCII Perl scripts to not have to be written in UTF-8; this was useful before editors that worked on UTF-8 encoded text were common, but that was long ago.  It causes problems, such as affecting the operation of other modules that aren&#39;t expecting it, causing general mayhem.  Its use can lead to segfaults.</p><p>If you need something like this functionality, you should use the <span href="http://perldoc.perl.org/encoding.html">encoding</span> pragma, which is also deprecated, but has fewer nasty side effects.</p><p>If you are coming here because code of yours is being adversely affected by someone&#39;s use of this variable, you can usually work around it by doing this:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$</span>{<span class="w">^ENCODING</span>}<span class="sc">;</span></li></ol></pre><p>near the beginning of the functions that are getting broken.  This undefines the variable during the scope of execution of the including function.</p><p>This variable was added in Perl 5.8.2.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eENCODING%7d
CPAN (module)	A			Perl Standard Modules		[[cpan]]\n[[http://community.opscode.com/cookbooks/cpan]]					<section class="prog__container"><p>CPAN - query, download and build perl modules from CPAN sites</p> <p>Interactive mode:</p><pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MCPAN</span> -e <span class="w">shell</span></li></ol></pre><p>--or--</p><pre class="verbatim"><ol><li>  <span class="w">cpan</span></li></ol></pre><p>Basic commands:</p><pre class="verbatim"><ol><li>  <span class="c"># Modules:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">Acme::Meta</span>                       <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span><span class="w">-&gt;install</span><span class="s">(</span><span class="q">&quot;Acme::Meta&quot;</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># in perl</span></li><li></li><li>  <span class="c"># Distributions:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">NWCLARK</span>/<span class="w">Acme</span>-<span class="w">Meta</span>-<span class="n">0.02</span>.<span class="w">tar</span>.<span class="w">gz</span>    <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span>-&gt;</li><li>    <span class="w">install</span><span class="s">(</span><span class="q">&quot;NWCLARK/Acme-Meta-0.02.tar.gz&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># in perl</span></li><li></li><li>  <span class="c"># module objects:</span></li><li></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># same thing</span></li><li></li><li>  <span class="c"># distribution objects:</span></li><li></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="i">-&gt;distribution</span><span class="sc">;</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>         <span class="c"># same thing</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Distribution&quot;</span><span class="cm">,</span></li><li>                            <span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># same thing</span></li></ol></pre></section>	http://perldoc.perl.org/CPAN.html
Not an unblessed ARRAY reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You passed a reference to a blessed array to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code> or another array function.  These only accept unblessed array references or arrays beginning explicitly with <code class="inline"><span class="i">@</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Not-an-unblessed-ARRAY-reference
Can I do [task] in Perl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Perl is flexible and extensible enough for you to use on virtually any task, from one-line file-processing tasks to large, elaborate systems.</p><p>For many people, Perl serves as a great replacement for shell scripting. For others, it serves as a convenient, high-level replacement for most of what they&#39;d program in low-level languages like C or C++. It&#39;s ultimately up to you (and possibly your management) which tasks you&#39;ll use Perl for and which you won&#39;t.</p><p>If you have a library that provides an API, you can make any component of it available as just another Perl function or variable using a Perl extension written in C or C++ and dynamically linked into your main perl interpreter. You can also go the other direction, and write your main program in C or C++, and then link in some Perl code on the fly, to create a powerful application. See <span href="http://perldoc.perl.org/perlembed.html">perlembed</span>.</p><p>That said, there will always be small, focused, special-purpose languages dedicated to a specific problem domain that are simply more convenient for certain kinds of problems. Perl tries to be all things to all people, but nothing special to anyone. Examples of specialized languages that come to mind include prolog and matlab.</p></section>	http://perldoc.perl.org/perlfaq1.html#Can-I-do-%5btask%5d-in-Perl%3f
quotemeta (function)	A			Perl Functions\nPerl Regular expressions and pattern matching							<section class="prog__container"><pre>quotemeta EXPR<br>quotemeta</pre><p>Returns the value of EXPR with all the ASCII non-&quot;word&quot; characters backslashed.  (That is, all ASCII characters not matching <code class="inline"><span class="q">/[A-Za-z_0-9]/</span></code>  will be preceded by a backslash in the returned string, regardless of any locale settings.) This is the internal function implementing the <code class="inline">\\<span class="w">Q</span></code>  escape in double-quoted strings. (See below for the behavior on non-ASCII code points.)</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>quotemeta (and <code class="inline">\\<span class="w">Q</span></code>  ... <code class="inline">\\<span class="w">E</span></code> ) are useful when interpolating strings into regular expressions, because by default an interpolated variable will be considered a mini-regular expression.  For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sentence</span> = <span class="q">&#39;The quick brown fox jumped over the lazy dog&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$substring</span> = <span class="q">&#39;quick.*?fox&#39;</span><span class="sc">;</span></li><li>    <span class="i">$sentence</span> =~ <span class="q">s{$substring}{big bad wolf}</span><span class="sc">;</span></li></ol></pre><p>Will cause <code class="inline"><span class="i">$sentence</span></code>  to become <code class="inline"><span class="q">&#39;The big bad wolf jumped over...&#39;</span></code> .</p><p>On the other hand:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sentence</span> = <span class="q">&#39;The quick brown fox jumped over the lazy dog&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$substring</span> = <span class="q">&#39;quick.*?fox&#39;</span><span class="sc">;</span></li><li>    <span class="i">$sentence</span> =~ <span class="q">s{\\Q$substring\\E}{big bad wolf}</span><span class="sc">;</span></li></ol></pre><p>Or:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sentence</span> = <span class="q">&#39;The quick brown fox jumped over the lazy dog&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$substring</span> = <span class="q">&#39;quick.*?fox&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$quoted_substring</span> = <span class="l_k" href="http://perldoc.perl.org/functions/quotemeta.html">quotemeta</span><span class="s">(</span><span class="i">$substring</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$sentence</span> =~ <span class="q">s{$quoted_substring}{big bad wolf}</span><span class="sc">;</span></li></ol></pre><p>Will both leave the sentence as is. Normally, when accepting literal string input from the user, quotemeta() or <code class="inline">\\<span class="w">Q</span></code>  must be used.</p><p>In Perl v5.14, all non-ASCII characters are quoted in non-UTF-8-encoded strings, but not quoted in UTF-8 strings.</p><p>Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for quoting non-ASCII characters; the quoting of ASCII characters is unchanged.</p><p>Also unchanged is the quoting of non-UTF-8 strings when outside the scope of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;unicode_strings&#39;</span></code> , which is to quote all characters in the upper Latin1 range.  This provides complete backwards compatibility for old programs which do not use Unicode.  (Note that <code class="inline"><span class="w">unicode_strings</span></code>  is automatically enabled within the scope of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.12</span></code>  or greater.)</p><p>Within the scope of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code> , all non-ASCII Latin1 code points are quoted whether the string is encoded as UTF-8 or not.  As mentioned above, locale does not affect the quoting of ASCII-range characters. This protects against those locales where characters such as <code class="inline"><span class="q">&quot;|&quot;</span></code>  are considered to be word characters.</p><p>Otherwise, Perl quotes non-ASCII characters using an adaptation from Unicode (see <span href="http://www.unicode.org/reports/tr31/">http://www.unicode.org/reports/tr31/</span>). The only code points that are quoted are those that have any of the Unicode properties:  Pattern_Syntax, Pattern_White_Space, White_Space, Default_Ignorable_Code_Point, or General_Category=Control.</p><p>Of these properties, the two important ones are Pattern_Syntax and Pattern_White_Space.  They have been set up by Unicode for exactly this purpose of deciding which characters in a regular expression pattern should be quoted.  No character that can be in an identifier has these properties.</p><p>Perl promises, that if we ever add regular expression pattern metacharacters to the dozen already defined (<code class="inline">\\ | <span class="s">(</span> <span class="s">)</span> [ <span class="s">{</span> ^ <span class="i">$ *</span> + <span class="q">? .</span></code> ), that we will only use ones that have the Pattern_Syntax property.  Perl also promises, that if we ever add characters that are considered to be white space in regular expressions (currently mostly affected by <code class="inline">/x</code>), they will all have the Pattern_White_Space property.</p><p>Unicode promises that the set of code points that have these two properties will never change, so something that is not quoted in v5.16 will never need to be quoted in any future Perl release.  (Not all the code points that match Pattern_Syntax have actually had characters assigned to them; so there is room to grow, but they are quoted whether assigned or not.  Perl, of course, would never use an unassigned code point as an actual metacharacter.)</p><p>Quoting characters that have the other 3 properties is done to enhance the readability of the regular expression and not because they actually need to be quoted for regular expression purposes (characters with the White_Space property are likely to be indistinguishable on the page or screen from those with the Pattern_White_Space property; and the other two properties contain non-printing characters).</p></section>	http://perldoc.perl.org/functions/quotemeta.html
panic: yylex, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The lexer got into a bad state while processing a case modifier.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-yylex%2c-%25s
server (definition)	A			Perl Glossary							<section class="prog__container"><p>In networking, a <b>process</b> that either advertises a <b>service</b> or just hangs around at a known location and waits for <b>clients</b> who need service to get in touch with it.</p></section>	http://perldoc.perl.org/perlglossary.html#server
How do I delete the last N lines from a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The easiest conceptual solution is to count the lines in the file then start at the beginning and print the number of lines (minus the last N) to a new file.</p><p>Most often, the real question is how you can delete the last N lines without making more than one pass over the file, or how to do it without a lot of copying. The easy concept is the hard reality when you might have millions of lines in your file.</p><p>One trick is to use <span href="http://search.cpan.org/perldoc/File::ReadBackwards">File::ReadBackwards</span>, which starts at the end of the file. That module provides an object that wraps the real filehandle to make it easy for you to move around the file. Once you get to the spot you need, you can get the actual filehandle and work with it as normal. In this case, you get the file position at the end of the last line you want to keep and truncate the file to that point:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::ReadBackwards</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$filename</span> = <span class="q">&#39;test.txt&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$Lines_to_truncate</span> = <span class="n">2</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bw</span> = <span class="w">File::ReadBackwards</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="i">$filename</span> <span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Could not read backwards in [$filename]: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lines_from_end</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span><span class="s">(</span> <span class="i">$bw</span><span class="i">-&gt;eof</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="i">$lines_from_end</span> == <span class="i">$Lines_to_truncate</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Got: &quot;</span><span class="cm">,</span> <span class="i">$bw</span><span class="i">-&gt;readline</span><span class="sc">;</span></li><li>        <span class="i">$lines_from_end</span>++<span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/truncate.html">truncate</span><span class="s">(</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$bw</span><span class="i">-&gt;tell</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/File::ReadBackwards">File::ReadBackwards</span> module also has the advantage of setting the input record separator to a regular expression.</p><p>You can also use the <span href="http://perldoc.perl.org/Tie/File.html">Tie::File</span> module which lets you access the lines through a tied array. You can use normal array operations to modify your file, including setting the last index and using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code>.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-delete-the-last-N-lines-from-a-file%3f
How do I match XML, HTML, or other nasty, ugly things with a regex?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Do not use regexes. Use a module and forget about the regular expressions. The <span href="http://search.cpan.org/perldoc/XML::LibXML">XML::LibXML</span>, <span href="http://search.cpan.org/perldoc/HTML::TokeParser">HTML::TokeParser</span> and <span href="http://search.cpan.org/perldoc/HTML::TreeBuilder">HTML::TreeBuilder</span> modules are good starts, although each namespace has other parsing modules specialized for certain tasks and different ways of doing it. Start at CPAN Search ( <span href="http://metacpan.org/">http://metacpan.org/</span> ) and wonder at all the work people have done for you already! :)</p></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-match-XML%2c-HTML%2c-or-other-nasty%2c-ugly-things-with-a-regex%3f
Invalid %s attributes: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The indicated attributes for a subroutine or variable were not recognized by Perl or by a user-supplied handler.  See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-%25s-attributes%3a-%25s
MIME::QuotedPrint (module)	A			Perl Standard Modules		[[MIME::Base64]]					<section class="prog__container"><p>MIME::QuotedPrint - Encoding and decoding of quoted-printable strings</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MIME::QuotedPrint</span><span class="sc">;</span></li><li></li><li> <span class="i">$encoded</span> = <span class="i">encode_qp</span><span class="s">(</span><span class="i">$decoded</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$decoded</span> = <span class="i">decode_qp</span><span class="s">(</span><span class="i">$encoded</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/MIME/QuotedPrint.html
concatenation (definition)	A			Perl Glossary							<section class="prog__container"><p>The process of gluing one cat’s nose to another cat’s tail. Also a similar operation on two <b>strings</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#concatenation
BEGIN failed--compilation aborted	A			Perl Diagnostics							<section class="prog__container"><p>(F) An untrapped exception was raised while executing a BEGIN subroutine.  Compilation stops immediately and the interpreter is exited.</p></section>	http://perldoc.perl.org/perldiag.html#BEGIN-failed--compilation-aborted
Missing braces on \o{}	A			Perl Diagnostics							<section class="prog__container"><p>(F) A <code class="inline">\\<span class="w">o</span></code>  must be followed immediately by a <code class="inline">{</code> in double-quotish context.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-braces-on-%5co%7b%7d
Module::CoreList (module)	A			Perl Standard Modules		[[corelist]]\n[[Module::Info]]\n[[perl]]\n[[http://perlpunks.de/corelist]]					<section class="prog__container"><p>Module::CoreList - what modules shipped with versions of perl</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module::CoreList</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$Module::CoreList::version</span>{<span class="n">5.00503</span>}{<span class="w">CPAN</span>}<span class="sc">;</span> <span class="c"># prints 1.48</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">Module::CoreList</span><span class="i">-&gt;first_release</span><span class="s">(</span><span class="q">&#39;File::Spec&#39;</span><span class="s">)</span><span class="sc">;</span>         <span class="c"># prints 5.00405</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">Module::CoreList</span><span class="i">-&gt;first_release_by_date</span><span class="s">(</span><span class="q">&#39;File::Spec&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># prints 5.005</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">Module::CoreList</span><span class="i">-&gt;first_release</span><span class="s">(</span><span class="q">&#39;File::Spec&#39;</span><span class="cm">,</span> <span class="n">0.82</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># prints 5.006001</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">Module::CoreList::is_core</span><span class="s">(</span><span class="q">&#39;File::Spec&#39;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;File::Spec is a core module\\n&quot;</span><span class="sc">;</span></li><li> <span class="s">}</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&#39;, &#39;</span><span class="cm">,</span> <span class="w">Module::CoreList</span><span class="w">-&gt;find_modules</span><span class="s">(</span><span class="q">qr/Data/</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># prints &#39;Data::Dumper&#39;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&#39;, &#39;</span><span class="cm">,</span></li><li>            <span class="w">Module::CoreList</span><span class="w">-&gt;find_modules</span><span class="s">(</span><span class="q">qr/test::h.*::.*s/i</span><span class="cm">,</span> <span class="n">5.008008</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># prints &#39;Test::Harness::Assert, Test::Harness::Straps&#39;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&quot;, &quot;</span><span class="cm">,</span> <span class="i">@</span>{ <span class="i">$Module::CoreList::families</span>{<span class="n">5.005</span>} }<span class="sc">;</span></li><li>    <span class="c"># prints &quot;5.005, 5.00503, 5.00504&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/Module/CoreList.html
$+ (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The text matched by the last bracket of the last successful search pattern. This is useful if you don&#39;t know which one of a set of alternative patterns matched.  For example:</p><pre class="verbatim"><ol><li>    <span class="q">/Version: (.*)|Revision: (.*)/</span> &amp;&amp; <span class="s">(</span><span class="i">$rev</span> = <span class="i">$+</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This variable is read-only and dynamically-scoped.</p><p>Mnemonic: be positive and forward looking.</p></section>	http://perldoc.perl.org/perlvar.html#%24%2b
object (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>instance</b> of a <b>class</b>. Something that “knows” what user-defined type (class) it is, and what it can do because of what class it is. Your program can request an object to do things, but the object gets to decide whether it wants to do them or not. Some objects are more accommodating than others.</p></section>	http://perldoc.perl.org/perlglossary.html#object
$^H (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>WARNING: This variable is strictly for internal use only.  Its availability, behavior, and contents are subject to change without notice.</p><p>This variable contains compile-time hints for the Perl interpreter.  At the end of compilation of a BLOCK the value of this variable is restored to the value when the interpreter started to compile the BLOCK.</p><p>When perl begins to parse any block construct that provides a lexical scope (e.g., eval body, required file, subroutine body, loop body, or conditional block), the existing value of <code class="inline"><span class="i">$^H</span></code>  is saved, but its value is left unchanged. When the compilation of the block is completed, it regains the saved value. Between the points where its value is saved and restored, code that executes within BEGIN blocks is free to change the value of <code class="inline"><span class="i">$^H</span></code> .</p><p>This behavior provides the semantic of lexical scoping, and is used in, for instance, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code>  pragma.</p><p>The contents should be an integer; different bits of it are used for different pragmatic flags.  Here&#39;s an example:</p><pre class="verbatim"><ol><li><span name="add_100"></span>    sub <span class="m">add_100</span> <span class="s">{</span> <span class="i">$^H</span> |= <span class="n">0x100</span> <span class="s">}</span></li><li></li><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span></li><li>&#09;BEGIN <span class="s">{</span> <span class="i">add_100</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li>&#09;<span class="w">bar</span><span class="w">-&gt;baz</span><span class="s">(</span><span class="i">$boon</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Consider what happens during execution of the BEGIN block.  At this point the BEGIN block has already been compiled, but the body of <code class="inline"><span class="i">foo</span><span class="s">(</span><span class="s">)</span></code>  is still being compiled.  The new value of <code class="inline"><span class="i">$^H</span></code>  will therefore be visible only while the body of <code class="inline"><span class="i">foo</span><span class="s">(</span><span class="s">)</span></code>  is being compiled.</p><p>Substitution of <code class="inline">BEGIN <span class="s">{</span> <span class="i">add_100</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></code>  block with:</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">strict</span><span class="sc">;</span> <span class="w">strict</span><span class="w">-&gt;import</span><span class="s">(</span><span class="q">&#39;vars&#39;</span><span class="s">)</span> <span class="s">}</span></li></ol></pre><p>demonstrates how <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code>  is implemented.  Here&#39;s a conditional version of the same lexical pragma:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">strict</span><span class="sc">;</span> <span class="w">strict</span><span class="w">-&gt;import</span><span class="s">(</span><span class="q">&#39;vars&#39;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$condition</span></li><li>    <span class="s">}</span></li></ol></pre><p>This variable was added in Perl 5.003.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eH
Attempt to set length of freed array	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You tried to set the length of an array which has been freed.  You can do this by storing a reference to the scalar representing the last index of an array and later assigning through that reference.  For example</p><pre class="verbatim"><ol><li>    <span class="i">$r</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@a</span><span class="sc">;</span> \\<span class="i">$#a</span><span class="s">}</span><span class="sc">;</span></li><li>    <span class="i">$$r</span> = <span class="n">503</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-set-length-of-freed-array
What's wrong with using grep in a void context?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>The problem is that grep builds a return list, regardless of the context. This means you&#39;re making Perl go to the trouble of building a list that you then just throw away. If the list is large, you waste both time and space. If your intent is to iterate over the list, then use a for loop for this purpose.</p><p>In perls older than 5.8.1, map suffers from this problem as well. But since 5.8.1, this has been fixed, and map is context aware - in void context, no lists are constructed.</p></section>	http://perldoc.perl.org/perlfaq6.html#What's-wrong-with-using-grep-in-a-void-context%3f
join (function)	A			Perl Functions\nPerl Functions for list data							<section class="prog__container"><pre>join EXPR,LIST</pre><p>Joins the separate strings of LIST into a single string with fields separated by the value of EXPR, and returns that new string.  Example:</p><pre class="verbatim"><ol><li>    <span class="i">$rec</span> = <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="i">$login</span><span class="cm">,</span><span class="i">$passwd</span><span class="cm">,</span><span class="i">$uid</span><span class="cm">,</span><span class="i">$gid</span><span class="cm">,</span><span class="i">$gcos</span><span class="cm">,</span><span class="i">$home</span><span class="cm">,</span><span class="i">$shell</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Beware that unlike <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span></code> doesn&#39;t take a pattern as its first argument.  Compare <span href="http://perldoc.perl.org/functions/split.html">split</span>.</p></section>	http://perldoc.perl.org/functions/join.html
semop (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>semop KEY,OPSTRING</pre><p>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting.  OPSTRING must be a packed array of semop structures.  Each semop structure can be generated with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;s!3&quot;</span><span class="cm">,</span> <span class="i">$semnum</span><span class="cm">,</span> <span class="i">$semop</span><span class="cm">,</span> <span class="i">$semflag</span><span class="s">)</span></code> .  The length of OPSTRING  implies the number of semaphore operations.  Returns true if successful, false on error.  As an example, the following code waits on semaphore $semnum of semaphore id $semid:</p><pre class="verbatim"><ol><li>    <span class="i">$semop</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;s!3&quot;</span><span class="cm">,</span> <span class="i">$semnum</span><span class="cm">,</span> <span class="n">-1</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Semaphore trouble: $!\\n&quot;</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/semop.html">semop</span><span class="s">(</span><span class="i">$semid</span><span class="cm">,</span> <span class="i">$semop</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To signal the semaphore, replace <code class="inline"><span class="n">-1</span></code>  with <code class="inline"><span class="n">1</span></code> .  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span>, <code class="inline"><span class="w">IPC::SysV</span></code> , and <code class="inline"><span class="w">IPC::SysV::Semaphore</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#semop">semop in perlport</span>.</p></section>	http://perldoc.perl.org/functions/semop.html
Invalid \0 character in %s for %s: %s\0%s	A			Perl Diagnostics							<section class="prog__container"><p>(W syscalls) Embedded \\0 characters in pathnames or other system call arguments produce a warning as of 5.20.  The parts after the \\0 were formerly ignored by system calls.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-%5c0-character-in-%25s-for-%25s%3a-%25s%5c0%25s
How do I copy an entire directory?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by Shlomi Fish)</p><p>To do the equivalent of <code class="inline"><span class="w">cp</span> -R</code>  (i.e. copy an entire directory tree recursively) in portable Perl, you&#39;ll either need to write something yourself or find a good CPAN module such as  <span href="http://search.cpan.org/perldoc/File::Copy::Recursive">File::Copy::Recursive</span>.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-copy-an-entire-directory%3f
Unrecognized switch: -%s (-h will show valid options)	A			Perl Diagnostics							<section class="prog__container"><p>(F) You specified an illegal option to Perl.  Don&#39;t do that.  (If you think you didn&#39;t do that, check the #! line to see if it&#39;s supplying the bad switch on your behalf.)</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-switch%3a--%25s--(-h-will-show-valid-options)
Use "%s" instead of "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) The second listed construct is no longer legal.  Use the first one instead.</p></section>	http://perldoc.perl.org/perldiag.html#Use-%22%25s%22-instead-of-%22%25s%22
list (definition)	A			Perl Glossary							<section class="prog__container"><p>An ordered set of scalar values.</p></section>	http://perldoc.perl.org/perlglossary.html#list
lexical scoping (definition)	A			Perl Glossary							<section class="prog__container"><p>Looking at your <i>Oxford English Dictionary</i> through a microscope. (Also known as <b>static scoping</b>, because dictionaries don’t change very fast.) Similarly, looking at variables stored in a private dictionary (namespace) for each scope, which are visible only from their point of declaration down to the end of the lexical scope in which they are declared. —Syn. <b>static scoping</b>. —Ant. <b>dynamic scoping</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#lexical-scoping
syntax error	A			Perl Diagnostics							<section class="prog__container"><p>(F) Probably means you had a syntax error.  Common reasons include:</p><pre class="verbatim"><ol><li>    <span class="w">A</span> <span class="w">keyword</span> <span class="w">is</span> <span class="w">misspelled</span>.</li><li>    <span class="w">A</span> <span class="w">semicolon</span> <span class="w">is</span> <span class="w">missing</span>.</li><li>    <span class="w">A</span> <span class="w">comma</span> <span class="w">is</span> <span class="w">missing</span>.</li><li>    <span class="w">An</span> <span class="w">opening</span> or <span class="w">closing</span> <span class="w">parenthesis</span> <span class="w">is</span> <span class="w">missing</span>.</li><li>    <span class="w">An</span> <span class="w">opening</span> or <span class="w">closing</span> <span class="w">brace</span> <span class="w">is</span> <span class="w">missing</span>.</li><li>    <span class="w">A</span> <span class="w">closing</span> <span class="w">quote</span> <span class="w">is</span> <span class="w">missing</span>.</li></ol></pre><p>Often there will be another error message associated with the syntax error giving more information.  (Sometimes it helps to turn on <b>-w</b>.) The error message itself often tells you where it was in the line when it decided to give up.  Sometimes the actual error is several tokens before this, because Perl is good at understanding random input. Occasionally the line number may be misleading, and once in a blue moon the only way to figure out what&#39;s triggering the error is to call <code class="inline"><span class="w">perl</span> -c</code>  repeatedly, chopping away half the program each time to see if the error went away.  Sort of the cybernetic version of 20 questions.</p></section>	http://perldoc.perl.org/perldiag.html#syntax-error
bind (definition)	A			Perl Glossary							<section class="prog__container"><p>To assign a specific <b>network address</b> to a <b>socket</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#bind
Bad name after %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You started to name a symbol by using a package prefix, and then didn&#39;t finish the symbol.  In particular, you can&#39;t interpolate outside of quotes, so</p><pre class="verbatim"><ol><li>    <span class="i">$var</span> = <span class="q">&#39;myvar&#39;</span><span class="sc">;</span></li><li>    <span class="i">$sym</span> = <span class="w">mypack::</span><span class="i">$var</span><span class="sc">;</span></li></ol></pre><p>is not the same as</p><pre class="verbatim"><ol><li>    <span class="i">$var</span> = <span class="q">&#39;myvar&#39;</span><span class="sc">;</span></li><li>    <span class="i">$sym</span> = <span class="q">&quot;mypack::$var&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Bad-name-after-%25s
How do I randomly update a binary file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If you&#39;re just trying to patch a binary, in many cases something as simple as this works:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">i</span> -<span class="w">pe</span> <span class="q">&#39;s{window manager}{window mangler}g&#39;</span> /<span class="w">usr</span>/<span class="w">bin</span>/<span class="w">emacs</span></li></ol></pre><p>However, if you have fixed sized records, then you might do something more like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$RECSIZE</span> = <span class="n">220</span><span class="sc">;</span> <span class="c"># size of record, in bytes</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$recno</span>   = <span class="n">37</span><span class="sc">;</span>  <span class="c"># which record to update</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;+&lt;&#39;</span><span class="cm">,</span> <span class="q">&#39;somewhere&#39;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t update somewhere: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$recno</span> * <span class="i">$RECSIZE</span><span class="cm">,</span> <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$record</span><span class="cm">,</span> <span class="i">$RECSIZE</span> == <span class="i">$RECSIZE</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t read record $recno: $!&quot;</span><span class="sc">;</span></li><li>    <span class="c"># munge the record</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$fh</span><span class="cm">,</span> -<span class="i">$RECSIZE</span><span class="cm">,</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="i">$record</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$fh</span><span class="sc">;</span></li></ol></pre><p>Locking and error checking are left as an exercise for the reader. Don&#39;t forget them or you&#39;ll be quite sorry.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-randomly-update-a-binary-file%3f
\N{} in inverted character class or as a range end-point is restricted to one character in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Named Unicode character escapes (<code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code> ) may return a multi-character sequence.  Even though a character class is supposed to match just one character of input, perl will match the whole thing correctly, except when the class is inverted (<code class="inline">[^...]</code>), or the escape is the beginning or final end point of a range.  The mathematically logical behavior for what matches when inverting is very different from what people expect, so we have decided to forbid it.  Similarly unclear is what should be generated when the <code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code>  is used as one of the end points of the range, such as in</p><pre class="verbatim"><ol><li> <span class="s">[</span>\\<span class="i">x</span><span class="s">{</span><span class="n">41</span><span class="s">}</span>-\\<span class="i">N</span><span class="s">{</span><span class="w">ARABIC</span> <span class="w">SEQUENCE</span> <span class="w">YEH</span> <span class="w">WITH</span> <span class="w">HAMZA</span> <span class="w">ABOVE</span> <span class="w">WITH</span> <span class="w">AE</span><span class="s">}</span><span class="s">]</span></li></ol></pre><p>What is meant here is unclear, as the <code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code>  escape is a sequence of code points, so this is made an error.</p></section>	http://perldoc.perl.org/perldiag.html#%5cN%7b%7d-in-inverted-character-class-or-as-a-range-end-point-is-restricted-to-one-character-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Digest::base (module)	A			Perl Standard Modules		[[Digest]]					<section class="prog__container"><p>Digest::base - Digest base class</p> <pre class="verbatim"><ol><li><span name="package-Digest::Foo"></span>  package <span class="i">Digest::Foo</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;Digest::base&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Digest/base.html
Pod::Simple::PullParserToken (module)	A			Perl Standard Modules		[[Pod::Simple::PullParserStartToken]]\n[[Pod::Simple::PullParserTextToken]]\n[[Pod::Simple::PullParserEndToken]]\n[[Pod::Simple::PullParser]]\n[[Pod::Simple]]					<section class="prog__container"><p>Pod::Simple::PullParserToken -- tokens from Pod::Simple::PullParser</p> <p>Given a $parser that&#39;s an object of class Pod::Simple::PullParser (or a subclass)...</p><pre class="verbatim"><ol><li>  while<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$token</span> = <span class="i">$parser</span><span class="i">-&gt;get_token</span><span class="s">)</span> <span class="s">{</span></li><li>    <span class="i">$DEBUG</span> and <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Token: &quot;</span><span class="cm">,</span> <span class="i">$token</span><span class="i">-&gt;dump</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    if<span class="s">(</span><span class="i">$token</span><span class="i">-&gt;is_start</span><span class="s">)</span> <span class="s">{</span></li><li>      ...<span class="w">access</span> <span class="i">$token</span><span class="i">-&gt;tagname</span><span class="cm">,</span> <span class="i">$token</span><span class="i">-&gt;attr</span><span class="cm">,</span> <span class="w">etc</span>...</li><li></li><li>    <span class="s">}</span> elsif<span class="s">(</span><span class="i">$token</span><span class="i">-&gt;is_text</span><span class="s">)</span> <span class="s">{</span></li><li>      ...<span class="w">access</span> <span class="i">$token</span><span class="i">-&gt;text</span><span class="cm">,</span> <span class="i">$token</span><span class="i">-&gt;text_r</span><span class="cm">,</span> <span class="w">etc</span>...</li><li></li><li>    <span class="s">}</span> elsif<span class="s">(</span><span class="i">$token</span><span class="i">-&gt;is_end</span><span class="s">)</span> <span class="s">{</span></li><li>      ...<span class="w">access</span> <span class="i">$token</span><span class="i">-&gt;tagname</span>...</li><li></li><li>    <span class="s">}</span></li><li>  <span class="s">}</span></li></ol></pre><p>(Also see <span href="http://perldoc.perl.org/Pod/Simple/PullParser.html">Pod::Simple::PullParser</span>)</p></section>	http://perldoc.perl.org/Pod/Simple/PullParserToken.html
$^F (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The maximum system file descriptor, ordinarily 2.  System file descriptors are passed to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code>ed processes, while higher file descriptors are not.  Also, during an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code>, system file descriptors are preserved even if the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> fails (ordinary file descriptors are closed before the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> is attempted).  The close-on-exec status of a file descriptor will be decided according to the value of <code class="inline"><span class="i">$^F</span></code>  when the corresponding file, pipe, or socket was opened, not the time of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eF
Which web framework should I use?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>There is no simple answer to this question. Perl frameworks can run everything from basic file servers and small scale intranets to massive multinational multilingual websites that are the core to international businesses.</p><p>Below is a list of a few frameworks with comments which might help you in making a decision, depending on your specific requirements. Start by reading the docs, then ask questions on the relevant mailing list or IRC channel.</p><p>All of these interact with or use <span href="http://search.cpan.org/perldoc/Plack">Plack</span> which is worth understanding the basics of when building a website in Perl (there is a lot of useful <span href="http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fsearch%3fq%3dplack%253A%253Amiddleware">Plack::Middleware</span>).</p></section>	http://perldoc.perl.org/perlfaq9.html#Which-web-framework-should-I-use%3f
Tie::Hash (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes</p> <pre class="verbatim"><ol><li><span name="package-NewHash"></span>    package <span class="i">NewHash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Hash</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::Hash)</span><span class="sc">;</span></li><li></li><li><span name="DELETE"></span>    sub <span class="m">DELETE</span> <span class="s">{</span> ... <span class="s">}</span>&#09;&#09;<span class="c"># Provides needed method</span></li><li><span name="CLEAR"></span>    sub <span class="m">CLEAR</span> <span class="s">{</span> ... <span class="s">}</span>&#09;&#09;<span class="c"># Overrides inherited method</span></li><li></li><li></li><li><span name="package-NewStdHash"></span>    package <span class="i">NewStdHash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Hash</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::StdHash)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># All methods provided by default, define</span></li><li>    <span class="c"># only those needing overrides</span></li><li>    <span class="c"># Accessors access the storage in %{$_[0]};</span></li><li>    <span class="c"># TIEHASH should return a reference to the actual storage</span></li><li><span name="DELETE-1"></span>    sub <span class="m">DELETE</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li><span name="package-NewExtraHash"></span>    package <span class="i">NewExtraHash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Hash</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::ExtraHash)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># All methods provided by default, define </span></li><li>    <span class="c"># only those needing overrides</span></li><li>    <span class="c"># Accessors access the storage in %{$_[0][0]};</span></li><li>    <span class="c"># TIEHASH should return an array reference with the first element</span></li><li>    <span class="c"># being the reference to the actual storage </span></li><li><span name="DELETE-2"></span>    sub <span class="m">DELETE</span> <span class="s">{</span> </li><li>      <span class="i">$_</span>[<span class="n">0</span>][<span class="n">1</span>]-&gt;<span class="s">(</span><span class="q">&#39;del&#39;</span><span class="cm">,</span> <span class="i">$_</span>[<span class="n">0</span>][<span class="n">0</span>]<span class="cm">,</span> <span class="i">$_</span>[<span class="n">1</span>]<span class="s">)</span><span class="sc">;</span> <span class="c"># Call the report writer</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$_</span>[<span class="n">0</span>][<span class="n">0</span>]-&gt;{<span class="i">$_</span>[<span class="n">1</span>]}<span class="sc">;</span>&#09;&#09;  <span class="c">#  $_[0]-&gt;SUPER::DELETE($_[1])</span></li><li>    <span class="s">}</span></li><li></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%new_hash</span><span class="cm">,</span> <span class="q">&#39;NewHash&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%new_std_hash</span><span class="cm">,</span> <span class="q">&#39;NewStdHash&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%new_extra_hash</span><span class="cm">,</span> <span class="q">&#39;NewExtraHash&#39;</span><span class="cm">,</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Doing \\U$_[1]\\E of $_[2].\\n&quot;</span><span class="s">}</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Hash.html
%s did not return a true value	A			Perl Diagnostics							<section class="prog__container"><p>(F) A required (or used) file must return a true value to indicate that it compiled correctly and ran its initialization code correctly.  It&#39;s traditional to end such a file with a &quot;1;&quot;, though any true value would do.  See <span href="http://perldoc.perl.org/functions/require.html">require</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-did-not-return-a-true-value
Attribute "unique" is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You have used the attributes pragma to modify the &quot;unique&quot; attribute on an array, hash or scalar reference. The :unique attribute has had no effect since Perl 5.8.8, and will be removed in a future release of Perl 5.</p></section>	http://perldoc.perl.org/perldiag.html#Attribute-%22unique%22-is-deprecated
How do I print out or copy a recursive data structure?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The <span href="http://perldoc.perl.org/Data/Dumper.html">Data::Dumper</span> module on CPAN (or the 5.005 release of Perl) is great for printing out data structures. The <span href="http://perldoc.perl.org/Storable.html">Storable</span> module on CPAN (or the 5.8 release of Perl), provides a function called <code class="inline"><span class="w">dclone</span></code>  that recursively copies its argument.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Storable</span> <span class="q">qw(dclone)</span><span class="sc">;</span></li><li>    <span class="i">$r2</span> = <span class="i">dclone</span><span class="s">(</span><span class="i">$r1</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Where <code class="inline"><span class="i">$r1</span></code>  can be a reference to any kind of data structure you&#39;d like. It will be deeply copied. Because <code class="inline"><span class="w">dclone</span></code>  takes and returns references, you&#39;d have to add extra punctuation if you had a hash of arrays that you wanted to copy.</p><pre class="verbatim"><ol><li>    <span class="i">%newhash</span> = <span class="i">%</span>{ <span class="i">dclone</span><span class="s">(</span>\\<span class="i">%oldhash</span><span class="s">)</span> }<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-print-out-or-copy-a-recursive-data-structure%3f
Boolean context (definition)	A			Perl Glossary							<section class="prog__container"><p>A special kind of <b>scalar context</b> used in conditionals to decide whether the <b>scalar value</b> returned by an expression is <b>true</b> or <b>false</b>. Does not evaluate as either a string or a number. See <b>context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#Boolean-context
send (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>send SOCKET,MSG,FLAGS,TO<br>send SOCKET,MSG,FLAGS</pre><p>Sends a message on a socket.  Attempts to send the scalar MSG to the SOCKET filehandle.  Takes the same flags as the system call of the same name.  On unconnected sockets, you must specify a destination to <i>send to</i>, in which case it does a sendto(2) syscall.  Returns the number of characters sent, or the undefined value on error.  The sendmsg(2) syscall is currently unimplemented.  See <span href="http://perldoc.perl.org/perlipc.html#UDP%3a-Message-Passing">UDP: Message Passing in perlipc</span> for examples.</p><p>Note the <i>characters</i>: depending on the status of the socket, either (8-bit) bytes or characters are sent.  By default all sockets operate on bytes, but for example if the socket has been changed using binmode() to operate with the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  I/O layer (see <span href="http://perldoc.perl.org/functions/open.html">open</span>, or the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma, <span href="http://perldoc.perl.org/open.html">open</span>), the I/O will operate on UTF-8 encoded Unicode characters, not bytes.  Similarly for the <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  pragma: in that case pretty much any characters can be sent.</p></section>	http://perldoc.perl.org/functions/send.html
Recursive inheritance detected in package '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) While calculating the method resolution order (MRO) of a package, Perl believes it found an infinite loop in the <code class="inline"><span class="i">@ISA</span></code>  hierarchy.  This is a crude check that bails out after 100 levels of <code class="inline"><span class="i">@ISA</span></code>  depth.</p></section>	http://perldoc.perl.org/perldiag.html#Recursive-inheritance-detected-in-package-'%25s'
Can't use string ("%s"...) as %s ref while "strict refs" in use	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;ve told Perl to dereference a string, something which <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code>  blocks to prevent it happening accidentally.  See <span href="http://perldoc.perl.org/perlref.html#Symbolic-references">Symbolic references in perlref</span>.  This can be triggered by an <code class="inline"><span class="i">@</span></code>  or <code class="inline"><span class="i">$</span></code>  in a double-quoted string immediately before interpolating a variable, for example in <code class="inline"><span class="q">&quot;user @$twitter_id&quot;</span></code> , which says to treat the contents of <code class="inline"><span class="i">$twitter_id</span></code>  as an array reference; use a <code class="inline">\\</code>  to have a literal <code class="inline"><span class="i">@</span></code>  symbol followed by the contents of <code class="inline"><span class="i">$twitter_id</span></code> : <code class="inline"><span class="q">&quot;user \\@$twitter_id&quot;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-string-(%22%25s%22...)-as-%25s-ref-while-%22strict-refs%22-in-use
Setting ${^ENCODING} is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You assigned a non-<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> value to <code class="inline"><span class="i">$</span>{<span class="w">^ENCODING</span>}</code> . This is deprecated; see <code class="inline"><span href="http://perldoc.perl.org/perlvar.html#%24%7b%5eENCODING%7d">${^ENCODING} in perlvar</span></code> for details.</p></section>	http://perldoc.perl.org/perldiag.html#Setting-%24%7b%5eENCODING%7d-is-deprecated
Argument "%s" isn't numeric%s	A			Perl Diagnostics							<section class="prog__container"><p>(W numeric) The indicated string was fed as an argument to an operator that expected a numeric value instead.  If you&#39;re fortunate the message will identify which operator was so unfortunate.</p><p>Note that for the <code class="inline"><span class="w">Inf</span></code>  and <code class="inline"><span class="w">NaN</span></code>  (infinity and not-a-number) the definition of &quot;numeric&quot; is somewhat unusual: the strings themselves (like &quot;Inf&quot;) are considered numeric, and anything following them is considered non-numeric.</p></section>	http://perldoc.perl.org/perldiag.html#Argument-%22%25s%22-isn't-numeric%25s
construct (definition)	A			Perl Glossary							<section class="prog__container"><p>As a noun, a piece of syntax made up of smaller pieces. As a transitive verb, to create an <b>object</b> using a <b>constructor</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#construct
trigger (definition)	A			Perl Glossary							<section class="prog__container"><p>An event that causes a <b>handler</b> to be run.</p></section>	http://perldoc.perl.org/perlglossary.html#trigger
glob failed (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(S glob) Something went wrong with the external program(s) used for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code> and <code class="inline"><span class="q">&lt;*.c&gt;</span></code> .  Usually, this means that you supplied a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code> pattern that caused the external program to fail and exit with a nonzero status.  If the message indicates that the abnormal exit resulted in a coredump, this may also mean that your csh (C shell) is broken.  If so, you should change all of the csh-related variables in config.sh:  If you have tcsh, make the variables refer to it as if it were csh (e.g. <code class="inline"><span class="w">full_csh</span>=<span class="q">&#39;/usr/bin/tcsh&#39;</span></code> ); otherwise, make them all empty (except that <code class="inline"><span class="w">d_csh</span></code>  should be <code class="inline"><span class="q">&#39;undef&#39;</span></code> ) so that Perl will think csh is missing.  In either case, after editing config.sh, run <code class="inline">./Configure -S</code> and rebuild Perl.</p></section>	http://perldoc.perl.org/perldiag.html#glob-failed-(%25s)
How do I expand tabs in a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>You can do it yourself:</p><pre class="verbatim"><ol><li>    <span class="n">1</span> while <span class="i">$string</span> =~ <span class="q">s/\\t+/&#39; &#39; x (length($&amp;) * 8 - length($`) % 8)/e</span><span class="sc">;</span></li></ol></pre><p>Or you can just use the <span href="http://perldoc.perl.org/Text/Tabs.html">Text::Tabs</span> module (part of the standard Perl distribution).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Tabs</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@expanded_lines</span> = <span class="i">expand</span><span class="s">(</span><span class="i">@lines_with_tabs</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-expand-tabs-in-a-string%3f
instance (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for “an instance of a class”, meaning an <b>object</b> of that <b>class</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#instance
getprotoent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getprotoent</pre>Get next protocols record.</section>	http://perldoc.perl.org/functions/getprotoent.html
Illegal character \%o (carriage return)	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl normally treats carriage returns in the program text as it would any other whitespace, which means you should never see this error when Perl was built using standard options.  For some reason, your version of Perl appears to have been built without this support.  Talk to your Perl administrator.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-character-%5c%25o-(carriage-return)
msg%s not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You don&#39;t have System V message IPC on your system.</p></section>	http://perldoc.perl.org/perldiag.html#msg%25s-not-implemented
How can I get to work on [MS-DOS,NT,...]?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>For OS/2 just use</p><pre class="verbatim"><ol><li>    <span class="w">extproc</span> <span class="w">perl</span> -S -<span class="w">your_switches</span></li></ol></pre><p>as the first line in <code class="inline">*.cmd</code> file (<code class="inline">-S</code>  due to a bug in cmd.exe&#39;s &quot;extproc&quot; handling). For DOS one should first invent a corresponding batch file and codify it in <code class="inline"><span class="w">ALTERNATE_SHEBANG</span></code>  (see the <i>dosish.h</i> file in the source distribution for more information).</p><p>The Win95/NT installation, when using the ActiveState port of Perl, will modify the Registry to associate the <code class="inline">.pl</code> extension with the perl interpreter. If you install another port, perhaps even building your own Win95/NT Perl from the standard sources by using a Windows port of gcc (e.g., with cygwin or mingw32), then you&#39;ll have to modify the Registry yourself. In addition to associating <code class="inline">.pl</code> with the interpreter, NT people can use: <code class="inline">SET PATHEXT=%PATHEXT%;.PL</code> to let them run the program <code class="inline"><span class="w">install</span>-<span class="w">linux</span>.<span class="w">pl</span></code>  merely by typing <code class="inline"><span class="w">install</span>-<span class="w">linux</span></code> .</p><p>Under &quot;Classic&quot; MacOS, a perl program will have the appropriate Creator and Type, so that double-clicking them will invoke the MacPerl application. Under Mac OS X, clickable apps can be made from any <code class="inline"><span class="c">#!</span></code>  script using Wil Sanchez&#39; DropScript utility: <span href="http://www.wsanchez.net/software/">http://www.wsanchez.net/software/</span> .</p><p><i>IMPORTANT!</i>: Whatever you do, PLEASE don&#39;t get frustrated, and just throw the perl interpreter into your cgi-bin directory, in order to get your programs working for a web server. This is an EXTREMELY big security risk. Take the time to figure out how to do it correctly.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-get-%23!perl-to-work-on-%5bMS-DOS%2cNT%2c...%5d%3f
How come when I open a file read-write it wipes it out?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Because you&#39;re using something like this, which truncates the file <i>then</i> gives you read-write access:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;+&gt;&#39;</span><span class="cm">,</span> <span class="q">&#39;/path/name&#39;</span><span class="sc">;</span> <span class="c"># WRONG (almost always)</span></li></ol></pre><p>Whoops. You should instead use this, which will fail if the file doesn&#39;t exist:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;+&lt;&#39;</span><span class="cm">,</span> <span class="q">&#39;/path/name&#39;</span><span class="sc">;</span> <span class="c"># open for update</span></li></ol></pre><p>Using &quot;&gt;&quot; always clobbers or creates. Using &quot;&lt;&quot; never does either. The &quot;+&quot; doesn&#39;t change this.</p><p>Here are examples of many kinds of file opens. Those using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> all assume that you&#39;ve pulled in the constants from <span href="http://perldoc.perl.org/Fcntl.html">Fcntl</span>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li></ol></pre><p>To open file for reading:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="i">$path</span>                               <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDONLY</span>                       <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for writing, create new file if needed or else truncate old file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="i">$path</span>                               <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_TRUNC</span>|<span class="w">O_CREAT</span>       <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_TRUNC</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for writing, create new file, file must not exist:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span>  <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for appending, create if necessary:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&gt;&gt;&#39;</span> <span class="i">$path</span>                               <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_APPEND</span>|<span class="w">O_CREAT</span>      <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_APPEND</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for appending, file must exist:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_APPEND</span>              <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for update, file must exist:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;+&lt;&#39;</span><span class="cm">,</span> <span class="i">$path</span>                              <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>                         <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for update, create file if necessary:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span>                 <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span>           <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open file for update, file must not exist:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span>          <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span>    <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>To open a file without blocking, creating if necessary:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;/foo/somefile&#39;</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_NDELAY</span>|<span class="w">O_CREAT</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open /foo/somefile: $!&quot;</span><span class="co">:</span></li></ol></pre><p>Be warned that neither creation nor deletion of files is guaranteed to be an atomic operation over NFS. That is, two processes might both successfully create or unlink the same file! Therefore O_EXCL isn&#39;t as exclusive as you might wish.</p><p>See also <span href="http://perldoc.perl.org/perlopentut.html">perlopentut</span>.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-come-when-I-open-a-file-read-write-it-wipes-it-out%3f
Term::Complete (module)	A			Perl Standard Modules							<section class="prog__container"><p>Term::Complete - Perl word completion module</p> <pre class="verbatim"><ol><li>    <span class="i">$input</span> = <span class="i">Complete</span><span class="s">(</span><span class="q">&#39;prompt_string&#39;</span><span class="cm">,</span> \\<span class="i">@completion_list</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$input</span> = <span class="i">Complete</span><span class="s">(</span><span class="q">&#39;prompt_string&#39;</span><span class="cm">,</span> <span class="i">@completion_list</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Term/Complete.html
Bad filehandle: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) A symbol was passed to something wanting a filehandle, but the symbol has no filehandle associated with it.  Perhaps you didn&#39;t do an open(), or did it in another package.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-filehandle%3a-%25s
Eval-group not allowed at runtime, use re 'eval' in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl tried to compile a regular expression containing the <code class="inline">(?{ ... })</code> zero-width assertion at run time, as it would when the pattern contains interpolated values.  Since that is a security risk, it is not allowed.  If you insist, you may still do this by using the <code class="inline"><span class="w">re</span> <span class="q">&#39;eval&#39;</span></code>  pragma or by explicitly building the pattern from an interpolated string at run time and using that in an eval().  See <span href="http://perldoc.perl.org/perlre.html#(%3f%7b-code-%7d)">(?{ code }) in perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Eval-group-not-allowed-at-runtime%2c-use-re-'eval'-in-regex-m%2f%25s%2f
flock() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re attempting to flock() got itself closed some time before now.  Check your control flow.  flock() operates on filehandles.  Are you attempting to call flock() on a dirhandle by the same name?</p></section>	http://perldoc.perl.org/perldiag.html#flock()-on-closed-filehandle-%25s
%s() on unopened %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) An I/O operation was attempted on a filehandle that was never initialized.  You need to do an open(), a sysopen(), or a socket() call, or call a constructor from the FileHandle package.</p></section>	http://perldoc.perl.org/perldiag.html#%25s()-on-unopened-%25s
Pod::Simple::XHTML (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::Text]]\n[[Pod::Spell]]					<section class="prog__container"><p>Pod::Simple::XHTML -- format Pod as validating XHTML</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Simple::XHTML</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Simple::XHTML</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  ...</li><li></li><li>  <span class="i">$parser</span><span class="i">-&gt;parse_file</span><span class="s">(</span><span class="q">&#39;path/to/file.pod&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/XHTML.html
:const is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::const_attr) The &quot;const&quot; attribute is experimental. If you want to use the feature, disable the warning with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;experimental::const_attr&#39;</span></code> , but know that in doing so you are taking the risk that your code may break in a future Perl version.</p></section>	http://perldoc.perl.org/perldiag.html#%3aconst-is-experimental
splice on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#splice-on-reference-is-experimental
Too late for "-%s" option	A			Perl Diagnostics							<section class="prog__container"><p>(X) The #! line (or local equivalent) in a Perl script contains the <b>-M</b>, <b>-m</b> or <b>-C</b> option.</p><p>In the case of <b>-M</b> and <b>-m</b>, this is an error because those options are not intended for use inside scripts.  Use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> pragma instead.</p><p>The <b>-C</b> option only works if it is specified on the command line as well (with the same sequence of letters or numbers following).  Either specify this option on the command line, or, if your system supports it, make your script executable and run it directly instead of passing it to perl.</p></section>	http://perldoc.perl.org/perldiag.html#Too-late-for-%22-%25s%22-option
Substitution pattern not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer couldn&#39;t find the interior delimiter of an s/// or s{}{} construct.  Remember that bracketing delimiters count nesting level. Missing the leading <code class="inline"><span class="i">$</span></code>  from variable <code class="inline"><span class="i">$s</span></code>  may cause this error.</p></section>	http://perldoc.perl.org/perldiag.html#Substitution-pattern-not-terminated
Type of argument to %s must be unblessed hashref or arrayref	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> with a scalar argument that was not a reference to an unblessed hash or array.</p></section>	http://perldoc.perl.org/perldiag.html#Type-of-argument-to-%25s-must-be-unblessed-hashref-or-arrayref
Unknown verb pattern '%s' in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You either made a typo or have incorrectly put a <code class="inline"><span class="i">*</span></code>  quantifier after an open brace in your pattern.  Check the pattern and review <span href="http://perldoc.perl.org/perlre.html">perlre</span> for details on legal verb patterns.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-verb-pattern-'%25s'-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
TAP::Formatter::File::Session (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::File::Session - Harness output delegate for file output</p> </section>	http://perldoc.perl.org/TAP/Formatter/File/Session.html
Scalar value @%s{%s} better written as $%s{%s}	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You&#39;ve used a hash slice (indicated by @) to select a single element of a hash.  Generally it&#39;s better to ask for a scalar value (indicated by $).  The difference is that <code class="inline"><span class="i">$foo</span>{<span class="i">&amp;bar</span>}</code>  always behaves like a scalar, both when assigning to it and when evaluating its argument, while <code class="inline"><span class="i">@foo</span>{<span class="i">&amp;bar</span>}</code>  behaves like a list when you assign to it, and provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.</p><p>On the other hand, if you were actually hoping to treat the hash element as a list, you need to look into how references work, because Perl will not magically convert between scalars and lists for you.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Scalar-value-%40%25s%7b%25s%7d-better-written-as-%24%25s%7b%25s%7d
getlogin (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getlogin</pre><p>This implements the C library function of the same name, which on most systems returns the current login from <i>/etc/utmp</i>, if any.  If it returns the empty string, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span></code>.</p><pre class="verbatim"><ol><li>    <span class="i">$login</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getlogin.html">getlogin</span> || <span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span><span class="s">(</span><span class="i">$&lt;</span><span class="s">)</span> || <span class="q">&quot;Kilroy&quot;</span><span class="sc">;</span></li></ol></pre><p>Do not consider <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getlogin.html">getlogin</span></code> for authentication: it is not as secure as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span></code>.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getlogin">getlogin in perlport</span>.</p></section>	http://perldoc.perl.org/functions/getlogin.html
Bad symbol for dirhandle	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal request asked to add a dirhandle entry to something that wasn&#39;t a symbol table entry.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-symbol-for-dirhandle
Pod::Perldoc::ToXml (module)	A			Perl Standard Modules		[[Pod::Simple::XMLOutStream]]\n[[Pod::Simple]]\n[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToXml - let Perldoc render Pod as XML</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -o <span class="w">xml</span> -d <span class="w">out</span>.<span class="w">xml</span> <span class="w">Some::Modulename</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToXml.html
__END__ (function)	A			Perl Functions							<section class="prog__container"><pre>__END__</pre><p>These keywords are documented in <span href="http://perldoc.perl.org/perldata.html#Special-Literals">Special Literals in perldata</span>.</p></section>	http://perldoc.perl.org/functions/__END__.html
write (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>write FILEHANDLE<br>write EXPR<br>write</pre><p>Writes a formatted record (possibly multi-line) to the specified FILEHANDLE, using the format associated with that file.  By default the format for a file is the one having the same name as the filehandle, but the format for the current output channel (see the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code> function) may be set explicitly by assigning the name of the format to the <code class="inline"><span class="i">$~</span></code>  variable.</p><p>Top of form processing is handled automatically:  if there is insufficient room on the current page for the formatted record, the page is advanced by writing a form feed and a special top-of-page format is used to format the new page header before the record is written.  By default, the top-of-page format is the name of the filehandle with &quot;_TOP&quot; appended, or &quot;top&quot; in the current package if the former does not exist.  This would be a problem with autovivified filehandles, but it may be dynamically set to the format of your choice by assigning the name to the <code class="inline"><span class="i">$^</span></code>  variable while that filehandle is selected.  The number of lines remaining on the current page is in variable <code class="inline"><span class="i">$-</span></code> , which can be set to <code class="inline"><span class="n">0</span></code>  to force a new page.</p><p>If FILEHANDLE is unspecified, output goes to the current default output channel, which starts out as STDOUT but may be changed by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code> operator.  If the FILEHANDLE is an EXPR, then the expression is evaluated and the resulting string is used to look up the name of the FILEHANDLE at run time.  For more on formats, see <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p><p>Note that write is <i>not</i> the opposite of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span></code>.  Unfortunately.</p></section>	http://perldoc.perl.org/functions/write.html
Constants from lexical variables potentially modified elsewhere are deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You wrote something like</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span><span class="sc">;</span></li><li>    <span class="i">$sub</span> = <span class="i">sub ()</span> <span class="s">{</span> <span class="i">$var</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>but $var is referenced elsewhere and could be modified after the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span></code> expression is evaluated.  Either it is explicitly modified elsewhere (<code class="inline"><span class="i">$var</span> = <span class="n">3</span></code> ) or it is passed to a subroutine or to an operator like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code>, which may or may not modify the variable.</p><p>Traditionally, Perl has captured the value of the variable at that point and turned the subroutine into a constant eligible for inlining. In those cases where the variable can be modified elsewhere, this breaks the behavior of closures, in which the subroutine captures the variable itself, rather than its value, so future changes to the variable are reflected in the subroutine&#39;s return value.</p><p>This usage is deprecated, because the behavior is likely to change in a future version of Perl.</p><p>If you intended for the subroutine to be eligible for inlining, then make sure the variable is not referenced elsewhere, possibly by copying it:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var2</span> = <span class="i">$var</span><span class="sc">;</span></li><li>    <span class="i">$sub</span> = <span class="i">sub ()</span> <span class="s">{</span> <span class="i">$var2</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>If you do want this subroutine to be a closure that reflects future changes to the variable that it closes over, add an explicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span><span class="sc">;</span></li><li>    <span class="i">$sub</span> = <span class="i">sub ()</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$var</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Constants-from-lexical-variables-potentially-modified-elsewhere-are-deprecated
IO::Socket::atmark not implemented on this architecture	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t implement the sockatmark() functionality, neither as a system call nor an ioctl call (SIOCATMARK).</p></section>	http://perldoc.perl.org/perldiag.html#IO%3a%3aSocket%3a%3aatmark-not-implemented-on-this-architecture
pumpking (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>pumpkin</b> holder, the person in charge of pumping the pump, or at least priming it. Must be willing to play the part of the Great Pumpkin now and then.</p></section>	http://perldoc.perl.org/perlglossary.html#pumpking
How can I store a multidimensional array in a DBM file?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Either stringify the structure yourself (no fun), or else get the MLDBM (which uses Data::Dumper) module from CPAN and layer it on top of either DB_File or GDBM_File. You might also try DBM::Deep, but it can be a bit slow.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-store-a-multidimensional-array-in-a-DBM-file%3f
lexer (definition)	A			Perl Glossary							<section class="prog__container"><p>Fancy term for a <b>tokener</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#lexer
How do I skip some return values?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>One way is to treat the return values as a list and index into it:</p><pre class="verbatim"><ol><li>    <span class="i">$dir</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/getpwnam.html">getpwnam</span><span class="s">(</span><span class="i">$user</span><span class="s">)</span><span class="s">)</span>[<span class="n">7</span>]<span class="sc">;</span></li></ol></pre><p>Another way is to use undef as an element on the left-hand-side:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$dev</span><span class="cm">,</span> <span class="i">$ino</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$uid</span><span class="cm">,</span> <span class="i">$gid</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can also use a list slice to select only the elements that you need:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$dev</span><span class="cm">,</span> <span class="i">$ino</span><span class="cm">,</span> <span class="i">$uid</span><span class="cm">,</span> <span class="i">$gid</span><span class="s">)</span> = <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span> <span class="s">)</span>[<span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">5</span>]<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-skip-some-return-values%3f
page overflow	A			Perl Diagnostics							<section class="prog__container"><p>(W io) A single call to write() produced more lines than can fit on a page.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#page-overflow
Opening filehandle %s also as a directory	A			Perl Diagnostics							<section class="prog__container"><p>(D io, deprecated) You used opendir() to associate a dirhandle to a symbol (glob or scalar) that already holds a filehandle. Although legal, this idiom might render your code confusing and is deprecated.</p></section>	http://perldoc.perl.org/perldiag.html#Opening-filehandle-%25s-also-as-a-directory
int (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>int EXPR<br>int</pre><p>Returns the integer portion of EXPR.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> . You should not use this function for rounding: one because it truncates towards <code class="inline"><span class="n">0</span></code> , and two because machine representations of floating-point numbers can sometimes produce counterintuitive results.  For example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/int.html">int(-6.725/0.025)</span></code> produces -268 rather than the correct -269; that&#39;s because it&#39;s really more like -268.99999999999994315658 instead.  Usually, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code>, or the <code class="inline"><span class="w">POSIX::floor</span></code>  and <code class="inline"><span class="w">POSIX::ceil</span></code>  functions will serve you better than will int().</p></section>	http://perldoc.perl.org/functions/int.html
How do I redefine a builtin function, operator, or method?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Why do you want to do that? :-)</p><p>If you want to override a predefined function, such as open(), then you&#39;ll have to import the new definition from a different module. See <span href="http://perldoc.perl.org/perlsub.html#Overriding-Built-in-Functions">Overriding Built-in Functions in perlsub</span>.</p><p>If you want to overload a Perl operator, such as <code class="inline">+</code>  or <code class="inline"><span class="i">**</span></code> , then you&#39;ll want to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">overload</span></code>  pragma, documented in <span href="http://perldoc.perl.org/overload.html">overload</span>.</p><p>If you&#39;re talking about obscuring method calls in parent classes, see <span href="http://perldoc.perl.org/perlootut.html#Overriding-methods-and-method-resolution">Overriding methods and method resolution in perlootut</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-redefine-a-builtin-function%2c-operator%2c-or-method%3f
exploit (definition)	A			Perl Glossary							<section class="prog__container"><p>Used as a noun in this case, this refers to a known way to compromise a program to get it to do something the author didn’t intend. Your task is to write unexploitable programs.</p></section>	http://perldoc.perl.org/perlglossary.html#exploit
TAP::Parser::Result::Unknown (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Unknown - Unknown result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Unknown.html
How do I define methods for every class/object?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by Ben Morrow)</p><p>You can use the <code class="inline"><span class="w">UNIVERSAL</span></code>  class (see <span href="http://perldoc.perl.org/UNIVERSAL.html">UNIVERSAL</span>). However, please be very careful to consider the consequences of doing this: adding methods to every object is very likely to have unintended consequences. If possible, it would be better to have all your object inherit from some common base class, or to use an object system like Moose that supports roles.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-define-methods-for-every-class%2fobject%3f
%! (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>Each element of <code class="inline"><span class="i">%!</span></code>  has a true value only if <code class="inline"><span class="i">$!</span></code>  is set to that value.  For example, <code class="inline"><span class="i">$!</span>{<span class="w">ENOENT</span>}</code>  is true if and only if the current value of <code class="inline"><span class="i">$!</span></code>  is <code class="inline"><span class="w">ENOENT</span></code> ; that is, if the most recent error was &quot;No such file or directory&quot; (or its moral equivalent: not all operating systems give that exact error, and certainly not all languages).  To check if a particular key is meaningful on your system, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$!</span>{<span class="w">the_key</span>}</code> ; for a list of legal keys, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%!</span></code> .  See <span href="http://perldoc.perl.org/Errno.html">Errno</span> for more information, and also see <span href="http://perldoc.perl.org/perlvar.html#%24!">$!</span>.</p><p>This variable was added in Perl 5.005.</p></section>	http://perldoc.perl.org/perlvar.html#%25!
Can't undef active subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t undefine a routine that&#39;s currently running.  You can, however, redefine it while it&#39;s running, and you can even undef the redefined subroutine while the old routine is running.  Go figure.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-undef-active-subroutine
What does it mean that regexes are greedy? How can I get around it?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Most people mean that greedy regexes match as much as they can. Technically speaking, it&#39;s actually the quantifiers (<code class="inline">?</code>, <code class="inline"><span class="i">*</span></code> , <code class="inline">+</code> , <code class="inline"><span class="s">{</span><span class="s">}</span></code> ) that are greedy rather than the whole pattern; Perl prefers local greed and immediate gratification to overall greed. To get non-greedy versions of the same quantifiers, use (<code class="inline"><span class="q">??</span></code> , <code class="inline"><span class="i">*?</span></code> , <code class="inline">+?</code>, <code class="inline">{}?</code>).</p><p>An example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s1</span> = <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s2</span> = <span class="q">&quot;I am very very cold&quot;</span><span class="sc">;</span></li><li>    <span class="i">$s1</span> =~ <span class="q">s/ve.*y //</span><span class="sc">;</span>      <span class="c"># I am cold</span></li><li>    <span class="i">$s2</span> =~ <span class="q">s/ve.*?y //</span><span class="sc">;</span>     <span class="c"># I am very cold</span></li></ol></pre><p>Notice how the second substitution stopped matching as soon as it encountered &quot;y &quot;. The <code class="inline"><span class="i">*?</span></code>  quantifier effectively tells the regular expression engine to find a match as quickly as possible and pass control on to whatever is next in line, as you would if you were playing hot potato.</p></section>	http://perldoc.perl.org/perlfaq6.html#What-does-it-mean-that-regexes-are-greedy%3f-How-can-I-get-around-it%3f
Use of assignment to $[ is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) The <code class="inline"><span class="i">$[</span></code>  variable (index of the first element in an array) is deprecated.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5b">$[ in perlvar</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-assignment-to-%24%5b-is-deprecated
How to use the perlfaq	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>The <code class="inline"><span class="w">perldoc</span></code>  command line tool is part of the standard Perl distribution. To read the perlfaq:</p><pre class="verbatim"><ol><li>    <span class="i">$ perldoc</span> <span class="w">perlfaq</span></li></ol></pre><p>To search the perlfaq question headings:</p><pre class="verbatim"><ol><li>    <span class="i">$ perldoc</span> -<span class="q">q open</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq.html#How-to-use-the-perlfaq
"my sub" not yet implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexically scoped subroutines are not yet implemented.  Don&#39;t try that yet.</p></section>	http://perldoc.perl.org/perldiag.html#%22my-sub%22-not-yet-implemented
getservbyname (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getservbyname NAME,PROTO</pre>Get services record given its name.</section>	http://perldoc.perl.org/functions/getservbyname.html
else (function)	A			Perl Functions							<section class="prog__container"><pre>else</pre><p>These flow-control keywords are documented in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/else.html
Ternary "?:" operator	A			Perl Operators\nPerl Conditional Operator							<section class="prog__container">Ternary &quot;?:&quot; is the conditional operator, just as in C. It works much like an if-then-else. If the argument before the? is true, the argument before the: is returned, otherwise the argument after the: is returned. For example:</section>	http://perldoc.perl.org/perlop.html#Conditional-Operator
List::Util (module)	A			Perl Standard Modules		[[Scalar::Util]]\n[[List::MoreUtils]]					<section class="prog__container"><p>List::Util - A selection of general-utility list subroutines</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::Util</span> <span class="q">qw(first max maxstr min minstr reduce shuffle sum)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/List/Util.html
Encode::CJKConstants (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::CJKConstants.pm -- Internally used by Encode::??::ISO_2022_*</p> </section>	http://perldoc.perl.org/Encode/CJKConstants.html
ref (function)	A			Perl Functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>ref EXPR<br>ref</pre><p>Returns a non-empty string if EXPR is a reference, the empty string otherwise.  If EXPR is not specified, <code class="inline"><span class="i">$_</span></code>  will be used.  The value returned depends on the type of thing the reference is a reference to.</p><p>Builtin types include:</p><pre class="verbatim"><ol><li>    <span class="w">SCALAR</span></li><li>    <span class="w">ARRAY</span></li><li>    <span class="w">HASH</span></li><li>    <span class="w">CODE</span></li><li>    <span class="w">REF</span></li><li>    <span class="w">GLOB</span></li><li>    <span class="w">LVALUE</span></li><li>    <span class="w">FORMAT</span></li><li>    <span class="w">IO</span></li><li>    <span class="w">VSTRING</span></li><li>    <span class="w">Regexp</span></li></ol></pre><p>You can think of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span></code> as a <code class="inline"><span class="w">typeof</span></code>  operator.</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$r</span><span class="s">)</span> eq <span class="q">&quot;HASH&quot;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;r is a reference to a hash.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    unless <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$r</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;r is not a reference at all.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The return value <code class="inline"><span class="w">LVALUE</span></code>  indicates a reference to an lvalue that is not a variable.  You get this from taking the reference of function calls like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr()</span></code>.  <code class="inline"><span class="w">VSTRING</span></code>  is returned if the reference points to a <span href="http://perldoc.perl.org/perldata.html#Version-Strings">version string</span>.</p><p>The result <code class="inline"><span class="w">Regexp</span></code>  indicates that the argument is a regular expression resulting from <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr//</span></code>.</p><p>If the referenced object has been blessed into a package, then that package name is returned instead.  But don&#39;t use that, as it&#39;s now considered &quot;bad practice&quot;.  For one reason, an object could be using a class called <code class="inline"><span class="w">Regexp</span></code>  or <code class="inline"><span class="w">IO</span></code> , or even <code class="inline"><span class="w">HASH</span></code> .  Also, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span></code> doesn&#39;t take into account subclasses, like <code class="inline"><span class="w">isa</span></code>  does.</p><p>Instead, use <code class="inline"><span class="w">blessed</span></code>  (in the <span href="http://perldoc.perl.org/Scalar/Util.html">Scalar::Util</span> module) for boolean checks, <code class="inline"><span class="w">isa</span></code>  for specific class checks and <code class="inline"><span class="w">reftype</span></code>  (also from <span href="http://perldoc.perl.org/Scalar/Util.html">Scalar::Util</span>) for type checks.  (See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span> for details and a <code class="inline"><span class="w">blessed</span>/<span class="w">isa</span></code>  example.)</p><p>See also <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/functions/ref.html
invalid option -D%c, use -D'' to see choices	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) Perl was called with invalid debugger flags.  Call perl with the <b>-D</b> option with no flags to see the list of acceptable values. See also <span href="http://perldoc.perl.org/perlrun.html#-Dletters">-Dletters in perlrun</span>.</p></section>	http://perldoc.perl.org/perldiag.html#invalid-option--D%25c%2c-use--D''-to-see-choices
How can I translate tildes (~) in a filename?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Use the &lt;&gt; (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob()</span></code>) operator, documented in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>. Versions of Perl older than 5.6 require that you have a shell installed that groks tildes. Later versions of Perl have this feature built in. The <span href="http://search.cpan.org/perldoc/File::KGlob">File::KGlob</span> module (available from CPAN) gives more portable glob functionality.</p><p>Within Perl, you may use this directly:</p><pre class="verbatim"><ol><li>    <span class="i">$filename</span> =~ <span class="q">s{</span></li><li>      <span class="q">      ^ ~             # find a leading tilde</span></li><li>      <span class="q">      (               # save this in $1</span></li><li>          <span class="q">          [^/]        # a non-slash character</span></li><li>                <span class="q">                *     # repeated 0 or more times (0 means me)</span></li><li>      <span class="q">      )</span></li><li>    <span class="q">    }{</span></li><li>      <span class="q">      $1</span></li><li>          <span class="q">          ? (getpwnam($1))[7]</span></li><li>          <span class="q">          : ( $ENV{HOME} || $ENV{LOGDIR} )</span></li><li>    <span class="q">    }ex</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-translate-tildes-(~)-in-a-filename%3f
Illegal suidscript	A			Perl Diagnostics							<section class="prog__container"><p>(F) The script run under suidperl was somehow illegal.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-suidscript
gmtime(%f) failed	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> with a number that it could not handle: too large, too small, or NaN.  The returned value is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p></section>	http://perldoc.perl.org/perldiag.html#gmtime(%25f)-failed
-V: configvar	A			Perl Command-Line Switches							<section class="prog__container"><p>Prints to STDOUT the value of the named configuration variable(s), with multiples when your <code class="inline"><i>configvar</i></code> argument looks like a regex (has non-letters).  For example:</p><pre class="verbatim"><ol><li>    $ perl -V:libc</li><li>&#09;libc=&#39;/lib/libc-2.2.4.so&#39;;</li><li>    $ perl -V:lib.</li><li>&#09;libs=&#39;-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc&#39;;</li><li>&#09;libc=&#39;/lib/libc-2.2.4.so&#39;;</li><li>    $ perl -V:lib.*</li><li>&#09;libpth=&#39;/usr/local/lib /lib /usr/lib&#39;;</li><li>&#09;libs=&#39;-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc&#39;;</li><li>&#09;lib_ext=&#39;.a&#39;;</li><li>&#09;libc=&#39;/lib/libc-2.2.4.so&#39;;</li><li>&#09;libperl=&#39;libperl.a&#39;;</li><li>&#09;....</li></ol></pre><p>Additionally, extra colons can be used to control formatting.  A trailing colon suppresses the linefeed and terminator &quot;;&quot;, allowing you to embed queries into shell commands.  (mnemonic: PATH separator &quot;:&quot;.)</p><pre class="verbatim"><ol><li>    $ echo &quot;compression-vars: &quot; `perl -V:z.*: ` &quot; are here !&quot;</li><li>    compression-vars:  zcat=&#39;&#39; zip=&#39;zip&#39;  are here !</li></ol></pre><p>A leading colon removes the &quot;name=&quot; part of the response, this allows you to map to the name you need.  (mnemonic: empty label)</p><pre class="verbatim"><ol><li>    $ echo &quot;goodvfork=&quot;`./perl -Ilib -V::usevfork`</li><li>    goodvfork=false;</li></ol></pre><p>Leading and trailing colons can be used together if you need positional parameter values without the names.  Note that in the case below, the <code class="inline"><span class="w">PERL_API</span></code>  params are returned in alphabetical order.</p><pre class="verbatim"><ol><li>    $ echo building_on `perl -V::osname: -V::PERL_API_.*:` now</li><li>    building_on &#39;linux&#39; &#39;5&#39; &#39;1&#39; &#39;9&#39; now</li></ol></pre></section>	http://perldoc.perl.org/perlrun.html#*-V%3a*_configvar_
$* is no longer supported	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, syntax) The special variable <code class="inline"><span class="i">$*</span></code> , deprecated in older perls, has been removed as of 5.10.0 and is no longer supported.  In previous versions of perl the use of <code class="inline"><span class="i">$*</span></code>  enabled or disabled multi-line matching within a string.</p><p>Instead of using <code class="inline"><span class="i">$*</span></code>  you should use the <code class="inline">/m</code> (and maybe <code class="inline">/s</code>) regexp modifiers.  You can enable <code class="inline">/m</code> for a lexical scope (even a whole file) with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;/m&#39;</span></code> .  (In older versions: when <code class="inline"><span class="i">$*</span></code>  was set to a true value then all regular expressions behaved as if they were written using <code class="inline">/m</code>.)</p></section>	http://perldoc.perl.org/perldiag.html#%24*-is-no-longer-supported
integer (definition)	A			Perl Glossary							<section class="prog__container"><p>A number with no fractional (decimal) part. A counting number, like 1, 2, 3, and so on, but including 0 and the negatives.</p></section>	http://perldoc.perl.org/perlglossary.html#integer
Non-octal character in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a regular expression, there was a non-octal character where an octal one was expected, like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\o{1278} ] ])</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Non-octal-character-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
How can I prevent addition of unwanted keys into a hash?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Since version 5.8.0, hashes can be <i>restricted</i> to a fixed number of given keys. Methods for creating and dealing with restricted hashes are exported by the <span href="http://perldoc.perl.org/Hash/Util.html">Hash::Util</span> module.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-prevent-addition-of-unwanted-keys-into-a-hash%3f
CHECK (function)	A			Perl Functions							<section class="prog__container"><pre>CHECK</pre><p>These compile phase keywords are documented in <span href="http://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END">BEGIN, UNITCHECK, CHECK, INIT and END in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/CHECK.html
getsockname (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>getsockname SOCKET</pre><p>Returns the packed sockaddr address of this end of the SOCKET connection, in case you don&#39;t know the address because you have several different IPs that the connection might have come in on.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li>    <span class="i">$mysockaddr</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getsockname.html">getsockname</span><span class="s">(</span><span class="w">SOCK</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$port</span><span class="cm">,</span> <span class="i">$myaddr</span><span class="s">)</span> = <span class="i">sockaddr_in</span><span class="s">(</span><span class="i">$mysockaddr</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;Connect to %s [%s]\\n&quot;</span><span class="cm">,</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/gethostbyaddr.html">gethostbyaddr</span><span class="s">(</span><span class="i">$myaddr</span><span class="cm">,</span> <span class="w">AF_INET</span><span class="s">)</span><span class="cm">,</span></li><li>       <span class="i">inet_ntoa</span><span class="s">(</span><span class="i">$myaddr</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/functions/getsockname.html
Binary "<=" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;&lt;=&quot; returns true if the left argument is numerically less than or equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
Multidimensional syntax %s not supported	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) Multidimensional arrays aren&#39;t written like <code class="inline"><span class="i">$foo</span>[<span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span>]</code> . They&#39;re written like <code class="inline"><span class="i">$foo</span>[<span class="n">1</span>][<span class="n">2</span>][<span class="n">3</span>]</code> , as in C.</p></section>	http://perldoc.perl.org/perldiag.html#Multidimensional-syntax-%25s-not-supported
syswrite() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#syswrite()-on-closed-filehandle-%25s
Undefined subroutine called	A			Perl Diagnostics							<section class="prog__container"><p>(F) The anonymous subroutine you&#39;re trying to call hasn&#39;t been defined, or if it was, it has since been undefined.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-subroutine-called
Replacement list is longer than search list	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You have used a replacement list that is longer than the search list.  So the additional elements in the replacement list are meaningless.</p></section>	http://perldoc.perl.org/perldiag.html#Replacement-list-is-longer-than-search-list
stat structure (definition)	A			Perl Glossary							<section class="prog__container"><p>A special internal spot in which Perl keeps the information about the last <b>file</b> on which you requested information.</p></section>	http://perldoc.perl.org/perlglossary.html#stat-structure
Can't make list assignment to %ENV on this system	A			Perl Diagnostics							<section class="prog__container"><p>(F) List assignment to %ENV is not supported on some systems, notably VMS.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-make-list-assignment-to-%25ENV-on-this-system
Encode::JP (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::JP - Japanese Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$euc_jp</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;euc-jp&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># loads Encode::JP implicitly</span></li><li>    <span class="i">$utf8</span>   = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;euc-jp&quot;</span><span class="cm">,</span> <span class="i">$euc_jp</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/JP.html
$\ (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The output record separator for the print operator.  If defined, this value is printed after the last of print&#39;s arguments.  Default is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>You cannot call <code class="inline"><span class="i">output_record_separator</span><span class="s">(</span><span class="s">)</span></code>  on a handle, only as a static method.  See <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p><p>Mnemonic: you set <code class="inline"><span class="i">$\\</span></code>  instead of adding &quot;\\n&quot; at the end of the print. Also, it&#39;s just like <code class="inline"><span class="i">$/</span></code> , but it&#39;s what you get &quot;back&quot; from Perl.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5c
arithmetical operator (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>symbol</b> such as <code class="inline">+</code>  or <code class="inline">/</code> that tells Perl to do the arithmetic you were supposed to learn in grade school.</p></section>	http://perldoc.perl.org/perlglossary.html#arithmetical-operator
Module::Loaded (module)	A			Perl Standard Modules							<section class="prog__container"><p>Module::Loaded - mark modules as loaded or unloaded</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module::Loaded</span><span class="sc">;</span></li><li></li><li>    <span class="i">$bool</span> = <span class="i">mark_as_loaded</span><span class="s">(</span><span class="q">&#39;Foo&#39;</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># Foo.pm is now marked as loaded</span></li><li>    <span class="i">$loc</span>  = <span class="i">is_loaded</span><span class="s">(</span><span class="q">&#39;Foo&#39;</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># location of Foo.pm set to the</span></li><li>                                     <span class="c"># loaders location</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;require &#39;Foo&#39;&quot;</span><span class="sc">;</span>            <span class="c"># is now a no-op</span></li><li></li><li>    <span class="i">$bool</span> = <span class="i">mark_as_unloaded</span><span class="s">(</span><span class="q">&#39;Foo&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Foo.pm no longer marked as loaded</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;require &#39;Foo&#39;&quot;</span><span class="sc">;</span>            <span class="c"># Will try to find Foo.pm in @INC</span></li></ol></pre></section>	http://perldoc.perl.org/Module/Loaded.html
Cannot copy to %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl detected an attempt to copy a value to an internal type that cannot be directly assigned to.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-copy-to-%25s
Use of %s in printf format not supported	A			Perl Diagnostics							<section class="prog__container"><p>(F) You attempted to use a feature of printf that is accessible from only C.  This usually means there&#39;s a better way to do it in Perl.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%25s-in-printf-format-not-supported
Is there a way to automatically decode or encode?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>If all data that comes from a certain handle is encoded in exactly the same way, you can tell the PerlIO system to automatically decode everything, with the <code class="inline"><span class="w">encoding</span></code>  layer. If you do this, you can&#39;t accidentally forget to decode or encode anymore, on things that use the layered handle.</p><p>You can provide this layer when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>ing the file:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&gt;:encoding(UTF-8)&#39;</span><span class="cm">,</span> <span class="i">$filename</span><span class="sc">;</span>  <span class="c"># auto encoding on write</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&lt;:encoding(UTF-8)&#39;</span><span class="cm">,</span> <span class="i">$filename</span><span class="sc">;</span>  <span class="c"># auto decoding on read</span></li></ol></pre><p>Or if you already have an open filehandle:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;:encoding(UTF-8)&#39;</span><span class="sc">;</span></li></ol></pre><p>Some database drivers for DBI can also automatically encode and decode, but that is sometimes limited to the UTF-8 encoding.</p></section>	http://perldoc.perl.org/perlunifaq.html#Is-there-a-way-to-automatically-decode-or-encode%3f
signal (definition)	A			Perl Glossary							<section class="prog__container"><p>A bolt out of the blue; that is, an event triggered by the <b>operating system</b>, probably when you’re least expecting it.</p></section>	http://perldoc.perl.org/perlglossary.html#signal
TAP::Parser::Grammar (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::Iterator]]\n[[TAP::Parser::Result]]					<section class="prog__container"><p>TAP::Parser::Grammar - A grammar for the Test Anything Protocol.</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Grammar</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$grammar</span> = <span class="i">$self</span><span class="i">-&gt;make_grammar</span><span class="s">(</span><span class="s">{</span></li><li>    <span class="w">iterator</span> <span class="cm">=&gt;</span> <span class="i">$tap_parser_iterator</span><span class="cm">,</span></li><li>    <span class="w">parser</span>   <span class="cm">=&gt;</span> <span class="i">$tap_parser</span><span class="cm">,</span></li><li>    <span class="w">version</span>  <span class="cm">=&gt;</span> <span class="n">12</span><span class="cm">,</span></li><li>  <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="i">$grammar</span><span class="i">-&gt;tokenize</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Grammar.html
Test::Builder::Tester (module)	A			Perl Standard Modules		[[Test::Builder]]\n[[Test::Builder::Tester::Color]]\n[[Test::More]]					<section class="prog__container"><p>Test::Builder::Tester - test testsuites that have been built with Test::Builder</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::Builder::Tester</span> <span class="w">tests</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::More</span><span class="sc">;</span></li><li></li><li>    <span class="i">test_out</span><span class="s">(</span><span class="q">&quot;not ok 1 - foo&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">test_fail</span><span class="s">(</span><span class="n">+1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">fail</span><span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">test_test</span><span class="s">(</span><span class="q">&quot;fail works&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Builder/Tester.html
Can't locate object method "%s" via package "%s" (perhaps you forgot to load "%s"?)	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called a method on a class that did not exist, and the method could not be found in UNIVERSAL.  This often means that a method requires a package that has not been loaded.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-object-method-%22%25s%22-via-package-%22%25s%22-(perhaps-you-forgot-to-load-%22%25s%22%3f)
$^X (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The name used to execute the current copy of Perl, from C&#39;s <code class="inline"><span class="w">argv</span><span class="s">[</span><span class="n">0</span><span class="s">]</span></code>  or (where supported) <i>/proc/self/exe</i>.</p><p>Depending on the host operating system, the value of <code class="inline"><span class="i">$^X</span></code>  may be a relative or absolute pathname of the perl program file, or may be the string used to invoke perl but not the pathname of the perl program file.  Also, most operating systems permit invoking programs that are not in the PATH environment variable, so there is no guarantee that the value of <code class="inline"><span class="i">$^X</span></code>  is in PATH.  For VMS, the value may or may not include a version number.</p><p>You usually can use the value of <code class="inline"><span class="i">$^X</span></code>  to re-invoke an independent copy of the same perl that is currently running, e.g.,</p><pre class="verbatim"><ol><li>    <span class="i">@first_run</span> = <span class="q">`$^X -le &quot;print int rand 100 for 1..100&quot;`</span><span class="sc">;</span></li></ol></pre><p>But recall that not all operating systems support forking or capturing of the output of commands, so this complex statement may not be portable.</p><p>It is not safe to use the value of <code class="inline"><span class="i">$^X</span></code>  as a path name of a file, as some operating systems that have a mandatory suffix on executable files do not require use of the suffix when invoking a command.  To convert the value of <code class="inline"><span class="i">$^X</span></code>  to a path name, use the following statements:</p><pre class="verbatim"><ol><li>    <span class="c"># Build up a set of file names (not command names).</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Config</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$this_perl</span> = <span class="i">$^X</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$^O</span> <span class="l_k" href="http://perldoc.perl.org/functions/ne.html">ne</span> <span class="q">&#39;VMS&#39;</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="i">$this_perl</span> .= <span class="i">$Config</span>{<span class="w">_exe</span>}</li><li>&#09;  <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$this_perl</span> =~ <span class="q">m/$Config{_exe}$/i</span><span class="sc">;</span></li><li>&#09;<span class="s">}</span></li></ol></pre><p>Because many operating systems permit anyone with read access to the Perl program file to make a copy of it, patch the copy, and then execute the copy, the security-conscious Perl programmer should take care to invoke the installed copy of perl, not the copy referenced by <code class="inline"><span class="i">$^X</span></code> .  The following statements accomplish this goal, and produce a pathname that can be invoked as a command or referenced as a file.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Config</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$secure_perl_path</span> = <span class="i">$Config</span>{<span class="w">perlpath</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$^O</span> <span class="l_k" href="http://perldoc.perl.org/functions/ne.html">ne</span> <span class="q">&#39;VMS&#39;</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="i">$secure_perl_path</span> .= <span class="i">$Config</span>{<span class="w">_exe</span>}</li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$secure_perl_path</span> =~ <span class="q">m/$Config{_exe}$/i</span><span class="sc">;</span></li><li>&#09;<span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlvar.html#%24%5eX
Not a HASH reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to a hash value, but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-HASH-reference
'%s' is not an overloadable type	A			Perl Diagnostics							<section class="prog__container"><p>(W overload) You tried to overload a constant type the overload package is unaware of.</p></section>	http://perldoc.perl.org/perldiag.html#'%25s'-is-not-an-overloadable-type
Z<>	A			Perl POD Formatting Codes							<section class="prog__container"><p>This is rarely used.  It&#39;s one way to get around using an E&lt;...&gt; code sometimes.  For example, instead of &quot;<code class="inline">NE&lt;lt&gt;3</code>&quot; (for &quot;N&lt;3&quot;) you could write &quot;<code class="inline"><span class="w">NZ</span>&lt;&gt;&lt;<span class="n">3</span></code> &quot; (the &quot;Z&lt;&gt;&quot; breaks up the &quot;N&quot; and the &quot;&lt;&quot; so they can&#39;t be considered the part of a (fictitious) &quot;N&lt;...&gt;&quot; code).</p></section>	http://perldoc.perl.org/perlpod.html#Z%3c%3e----a-null-(zero-effect)-formatting-code
Character in 'c' format wrapped in pack	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) You said</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;c&quot;</span><span class="cm">,</span> <span class="i">$x</span><span class="s">)</span></li></ol></pre><p>where $x is either less than -128 or more than 127; the <code class="inline"><span class="q">&quot;c&quot;</span></code>  format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;c&quot;</span><span class="cm">,</span> <span class="i">$x</span> &amp; <span class="n">255</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you actually want to pack Unicode codepoints, use the <code class="inline"><span class="q">&quot;U&quot;</span></code>  format instead.</p></section>	http://perldoc.perl.org/perldiag.html#Character-in-'c'-format-wrapped-in-pack
Out of memory during ridiculously large request	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t allocate more than 2^31+&quot;small amount&quot; bytes.  This error is most likely to be caused by a typo in the Perl program. e.g., <code class="inline"><span class="i">$arr</span>[<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span>]</code>  instead of <code class="inline"><span class="i">$arr</span>[<span class="i">$time</span>]</code> .</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory-during-ridiculously-large-request
Encode::Guess (module)	A			Perl Standard Modules		[[Encode]]\n[[Encode::Encoding]]					<section class="prog__container"><p>Encode::Guess -- Guesses encoding from data</p> <pre class="verbatim"><ol><li>  <span class="c"># if you are sure $data won&#39;t contain anything bogus</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode::Guess</span> <span class="q">qw/euc-jp shiftjis 7bit-jis/</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;Guess&quot;</span><span class="cm">,</span> <span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$data</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;Guess&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># this doesn&#39;t work!</span></li><li></li><li>  <span class="c"># more elaborate way</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode::Guess</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$enc</span> = <span class="i">guess_encoding</span><span class="s">(</span><span class="i">$data</span><span class="cm">,</span> <span class="q">qw/euc-jp shiftjis 7bit-jis/</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$enc</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t guess: $enc&quot;</span><span class="sc">;</span> <span class="c"># trap error this way</span></li><li>  <span class="i">$utf8</span> = <span class="i">$enc</span><span class="i">-&gt;decode</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="c"># or</span></li><li>  <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="i">$enc</span><span class="i">-&gt;name</span><span class="cm">,</span> <span class="i">$data</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Guess.html
getsockopt() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to get a socket option on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/getsockopt.html">getsockopt</span>.</p></section>	http://perldoc.perl.org/perldiag.html#getsockopt()-on-closed-socket-%25s
IO::Poll (module)	A			Perl Standard Modules		[[IO::Handle]]\n[[IO::Select]]					<section class="prog__container"><p>IO::Poll - Object interface to system poll call</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Poll</span> <span class="q">qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$poll</span> = <span class="w">IO::Poll</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$poll</span><span class="i">-&gt;mask</span><span class="s">(</span><span class="i">$input_handle</span> <span class="cm">=&gt;</span> <span class="w">POLLIN</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$poll</span><span class="i">-&gt;mask</span><span class="s">(</span><span class="i">$output_handle</span> <span class="cm">=&gt;</span> <span class="w">POLLOUT</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$poll</span><span class="i">-&gt;poll</span><span class="s">(</span><span class="i">$timeout</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ev</span> = <span class="i">$poll</span><span class="i">-&gt;events</span><span class="s">(</span><span class="i">$input</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Poll.html
Filehandle %s reopened as %s only for input	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You opened for reading a filehandle that got the same filehandle id as STDOUT or STDERR.  This occurred because you closed STDOUT or STDERR previously.</p></section>	http://perldoc.perl.org/perldiag.html#Filehandle-%25s-reopened-as-%25s-only-for-input
troff (definition)	A			Perl Glossary							<section class="prog__container"><p>A venerable typesetting language from which Perl derives the name of its <code class="inline"><span class="i">$%</span></code>  variable and which is secretly used in the production of Camel books.</p></section>	http://perldoc.perl.org/perlglossary.html#troff
panic: pad_alloc, %p!=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_alloc%2c-%25p!%3d%25p
Unix (definition)	A			Perl Glossary							<section class="prog__container"><p>A very large and constantly evolving language with several alternative and largely incompatible syntaxes, in which anyone can define anything any way they choose, and usually do. Speakers of this language think it’s easy to learn because it’s so easily twisted to one’s own ends, but dialectical differences make tribal intercommunication nearly impossible, and travelers are often reduced to a pidgin-like subset of the language. To be universally understood, a Unix shell programmer must spend years of study in the art. Many have abandoned this discipline and now communicate via an Esperanto-like language called Perl.</p><p>In ancient times, Unix was also used to refer to some code that a couple of people at Bell Labs wrote to make use of a PDP-7 computer that wasn’t doing much of anything else at the time.</p></section>	http://perldoc.perl.org/perlglossary.html#Unix
setsockopt (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL</pre><p>Sets the socket option requested.  Returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> on error. Use integer constants provided by the <code class="inline"><span class="w">Socket</span></code>  module for LEVEL and OPNAME.  Values for LEVEL can also be obtained from getprotobyname.  OPTVAL might either be a packed string or an integer. An integer OPTVAL is shorthand for pack(&quot;i&quot;, OPTVAL).</p><p>An example disabling Nagle&#39;s algorithm on a socket:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span> <span class="q">qw(IPPROTO_TCP TCP_NODELAY)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/setsockopt.html">setsockopt</span><span class="s">(</span><span class="i">$socket</span><span class="cm">,</span> <span class="w">IPPROTO_TCP</span><span class="cm">,</span> <span class="w">TCP_NODELAY</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#setsockopt">setsockopt in perlport</span>.</p></section>	http://perldoc.perl.org/functions/setsockopt.html
Goto undefined subroutine%s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to call a subroutine with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="i">&amp;sub</span></code>  syntax, but the indicated subroutine hasn&#39;t been defined, or if it was, it has since been undefined.</p></section>	http://perldoc.perl.org/perldiag.html#Goto-undefined-subroutine%25s
: Regular Expressions	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section is surprisingly small because the rest of the FAQ is littered with answers involving regular expressions. For example, decoding a URL and checking whether something is a number can be handled with regular expressions, but those answers are found elsewhere in this document (in perlfaq9 : &quot;How do I decode or create those %-encodings on the web&quot; and perlfaq4 : &quot;How do I determine whether a scalar is a number/whole/integer/float&quot;, to be precise).</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq6-manpage%3a-Regular-Expressions
Reference to nonexistent or unclosed group in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used something like <code class="inline">\\<span class="i">g</span><span class="s">{</span><span class="n">-7</span><span class="s">}</span></code>  in your regular expression, but there are not at least seven sets of closed capturing parentheses in the expression before where the <code class="inline">\\<span class="i">g</span><span class="s">{</span><span class="n">-7</span><span class="s">}</span></code>  was located.</p><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Reference-to-nonexistent-or-unclosed-group-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
value (definition)	A			Perl Glossary							<section class="prog__container"><p>An actual piece of data, in contrast to all the variables, references, keys, indices, operators, and whatnot that you need to access the value.</p></section>	http://perldoc.perl.org/perlglossary.html#value
Can't do inplace edit on %s: %s	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) The creation of the new file failed for the indicated reason.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-inplace-edit-on-%25s%3a-%25s
umask (definition)	A			Perl Glossary							<section class="prog__container"><p>A mask of those <b>permission bits</b> that should be forced off when creating files or directories, in order to establish a policy of whom you’ll ordinarily deny access to. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#umask
pack (function)	A			Perl Functions\nPerl Functions for SCALARs or strings\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>pack TEMPLATE,LIST</pre><p>Takes a LIST of values and converts it into a string using the rules given by the TEMPLATE.  The resulting string is the concatenation of the converted values.  Typically, each converted value looks like its machine-level representation.  For example, on 32-bit machines an integer may be represented by a sequence of 4 bytes, which  will in Perl be presented as a string that&#39;s 4 characters long.</p><p>See <span href="http://perldoc.perl.org/perlpacktut.html">perlpacktut</span> for an introduction to this function.</p><p>The TEMPLATE is a sequence of characters that give the order and type of values, as follows:</p><pre class="verbatim"><ol><li>    <span class="w">a</span>  <span class="w">A</span> <span class="w">string</span> <span class="w">with</span> <span class="w">arbitrary</span> <span class="w">binary</span> <span class="w">data</span><span class="cm">,</span> <span class="w">will</span> <span class="w">be</span> <span class="w">null</span> <span class="w">padded</span>.</li><li>    <span class="w">A</span>  <span class="w">A</span> <span class="w">text</span> <span class="s">(</span><span class="w">ASCII</span><span class="s">)</span> <span class="w">string</span><span class="cm">,</span> <span class="w">will</span> <span class="w">be</span> <span class="w">space</span> <span class="w">padded</span>.</li><li>    <span class="w">Z</span>  <span class="w">A</span> <span class="w">null</span>-<span class="w">terminated</span> <span class="s">(</span><span class="w">ASCIZ</span><span class="s">)</span> <span class="w">string</span><span class="cm">,</span> <span class="w">will</span> <span class="w">be</span> <span class="w">null</span> <span class="w">padded</span>.</li><li></li><li>    <span class="w">b</span>  <span class="w">A</span> <span class="w">bit</span> <span class="w">string</span> <span class="s">(</span><span class="w">ascending</span> <span class="w">bit</span> <span class="w">order</span> <span class="w">inside</span> <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="w">byte</span><span class="cm">,</span></li><li>       <span class="w">like</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="s">)</span><span class="s">)</span>.</li><li>    <span class="w">B</span>  <span class="w">A</span> <span class="w">bit</span> <span class="w">string</span> <span class="s">(</span><span class="w">descending</span> <span class="w">bit</span> <span class="w">order</span> <span class="w">inside</span> <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="w">byte</span><span class="s">)</span>.</li><li>    <span class="w">h</span>  <span class="w">A</span> <span class="l_k" href="http://perldoc.perl.org/functions/hex.html">hex</span> <span class="w">string</span> <span class="s">(</span><span class="w">low</span> <span class="w">nybble</span> <span class="w">first</span><span class="s">)</span>.</li><li>    <span class="w">H</span>  <span class="w">A</span> <span class="l_k" href="http://perldoc.perl.org/functions/hex.html">hex</span> <span class="w">string</span> <span class="s">(</span><span class="w">high</span> <span class="w">nybble</span> <span class="w">first</span><span class="s">)</span>.</li><li></li><li>    <span class="w">c</span>  <span class="w">A</span> <span class="w">signed</span> <span class="w">char</span> <span class="s">(</span><span class="n">8</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">value</span>.</li><li>    <span class="w">C</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">char</span> <span class="s">(</span><span class="w">octet</span><span class="s">)</span> <span class="w">value</span>.</li><li>    <span class="w">W</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">char</span> <span class="w">value</span> <span class="s">(</span><span class="w">can</span> <span class="w">be</span> <span class="w">greater</span> <span class="w">than</span> <span class="n">255</span><span class="s">)</span>.</li><li></li><li>    <span class="q">s  A signed short (16-bit) value.</span></li><li>    <span class="q">    S  An unsigned short value.</span></li><li></li><li>    <span class="q">    l  A</span> <span class="w">signed</span> <span class="w">long</span> <span class="s">(</span><span class="n">32</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">value</span>.</li><li>    <span class="w">L</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">long</span> <span class="w">value</span>.</li><li></li><li>    <span class="q">q  A signed quad (64-bit) value.</span></li><li>    <span class="q">    Q  An</span> <span class="w">unsigned</span> <span class="w">quad</span> <span class="w">value</span>.</li><li>         <span class="s">(</span><span class="w">Quads</span> <span class="w">are</span> <span class="w">available</span> <span class="w">only</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">your</span> <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="i">supports</span> <span class="n">64</span>-<span class="w">bit</span></li><li>          <span class="w">integer</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="w">_and_</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">Perl</span> <span class="w">has</span> <span class="w">been</span> <span class="w">compiled</span> <span class="w">to</span> <span class="w">support</span></li><li>          <span class="w">those</span>.  <span class="w">Raises</span> <span class="w">an</span> <span class="w">exception</span> <span class="w">otherwise</span>.<span class="s">)</span></li><li></li><li>    <span class="w">i</span>  <span class="w">A</span> <span class="w">signed</span> <span class="w">integer</span> <span class="w">value</span>.</li><li>    <span class="w">I</span>  <span class="w">A</span> <span class="w">unsigned</span> <span class="w">integer</span> <span class="w">value</span>.</li><li>         <span class="s">(</span><span class="w">This</span> <span class="q">&#39;integer&#39;</span> <span class="w">is</span> <span class="w">_at_least_</span> <span class="n">32</span> <span class="w">bits</span> <span class="w">wide</span>.  <span class="w">Its</span> <span class="w">exact</span></li><li>          <span class="w">size</span> <span class="w">depends</span> <span class="w">on</span> <span class="w">what</span> <span class="w">a</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="w">C</span> <span class="w">compiler</span> <span class="w">calls</span> <span class="q">&#39;int&#39;</span>.<span class="s">)</span></li><li></li><li>    <span class="w">n</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">short</span> <span class="s">(</span><span class="n">16</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">in</span> <span class="q">&quot;network&quot;</span> <span class="s">(</span><span class="w">big</span>-<span class="w">endian</span><span class="s">)</span> <span class="w">order</span>.</li><li>    <span class="w">N</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">long</span> <span class="s">(</span><span class="n">32</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">in</span> <span class="q">&quot;network&quot;</span> <span class="s">(</span><span class="w">big</span>-<span class="w">endian</span><span class="s">)</span> <span class="w">order</span>.</li><li>    <span class="w">v</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">short</span> <span class="s">(</span><span class="n">16</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">in</span> <span class="q">&quot;VAX&quot;</span> <span class="s">(</span><span class="w">little</span>-<span class="w">endian</span><span class="s">)</span> <span class="w">order</span>.</li><li>    <span class="w">V</span>  <span class="w">An</span> <span class="w">unsigned</span> <span class="w">long</span> <span class="s">(</span><span class="n">32</span>-<span class="w">bit</span><span class="s">)</span> <span class="w">in</span> <span class="q">&quot;VAX&quot;</span> <span class="s">(</span><span class="w">little</span>-<span class="w">endian</span><span class="s">)</span> <span class="w">order</span>.</li><li></li><li>    <span class="w">j</span>  <span class="w">A</span> <span class="w">Perl</span> <span class="w">internal</span> <span class="w">signed</span> <span class="w">integer</span> <span class="w">value</span> <span class="s">(</span><span class="w">IV</span><span class="s">)</span>.</li><li>    <span class="w">J</span>  <span class="w">A</span> <span class="w">Perl</span> <span class="w">internal</span> <span class="w">unsigned</span> <span class="w">integer</span> <span class="w">value</span> <span class="s">(</span><span class="w">UV</span><span class="s">)</span>.</li><li></li><li>    <span class="w">f</span>  <span class="w">A</span> <span class="w">single</span>-<span class="w">precision</span> <span class="w">float</span> <span class="w">in</span> <span class="w">native</span> format.</li><li><span class="hh">    d  A double-precision float in native format.</span></li><li></li><li><span class="hh">    F  A Perl internal floating-point value (NV) in native format</span></li><li><span class="hh">    D  A float of long-double precision in native format.</span></li><li><span class="hh">         (Long doubles are available only if your system supports</span></li><li><span class="hh">          long double values _and_ if Perl has been compiled to</span></li><li><span class="hh">          support those.  Raises an exception otherwise.</span></li><li><span class="hh">          Note that there are different long double formats.)</span></li><li></li><li><span class="hh">    p  A pointer to a null-terminated string.</span></li><li><span class="hh">    P  A pointer to a structure (fixed-length string).</span></li><li></li><li><span class="hh">    u  A uuencoded string.</span></li><li><span class="hh">    U  A Unicode character number.  Encodes to a character in char-</span></li><li><span class="hh">       acter mode and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in</span></li><li><span class="hh">       byte mode.</span></li><li></li><li><span class="hh">    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut</span></li><li><span class="hh">       for details).  Its bytes represent an unsigned integer in</span></li><li><span class="hh">       base 128, most significant digit first, with as few digits</span></li><li><span class="hh">       as possible.  Bit eight (the high bit) is set on each byte</span></li><li><span class="hh">       except the last.</span></li><li></li><li><span class="hh">    x  A null byte (a.k.a ASCII NUL, &quot;\\000&quot;, chr(0))</span></li><li><span class="hh">    X  Back up a byte.</span></li><li><span class="hh">    @  Null-fill or truncate to absolute position, counted from the</span></li><li><span class="hh">       start of the innermost ()-group.</span></li><li><span class="hh">    .  Null-fill or truncate to absolute position specified by</span></li><li><span class="hh">       the value.</span></li><li><span class="hh">    (  Start of a ()-group.</span></li></ol></pre><p>One or more modifiers below may optionally follow certain letters in the TEMPLATE (the second column lists letters for which the modifier is valid):</p><pre class="verbatim"><ol><li>    !   <span class="w">sSlLiI</span>     <span class="w">Forces</span> <span class="w">native</span> <span class="s">(</span><span class="w">short</span><span class="cm">,</span> <span class="w">long</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">)</span> <span class="w">sizes</span> <span class="w">instead</span></li><li>                   <span class="w">of</span> <span class="w">fixed</span> <span class="s">(</span><span class="n">16</span>-<span class="q">/32-bit) sizes.</span></li><li></li><li>    <span class="q">    !   xX         Make x and X act as alignment commands.</span></li><li></li><li>    <span class="q">    !   nNvV       Treat integers as signed instead of unsigned.</span></li><li></li><li>    <span class="q">    !   @.         Specify position as byte offset in the internal</span></li><li>                   <span class="q">                   representation of the packed string.  Efficient</span></li><li>                   <span class="q">                   but dangerous.</span></li><li></li><li>    <span class="q">    &gt;   sSiIlLqQ   Force big-endian byte-order on the type.</span></li><li>        <span class="q">        jJfFdDpP   (The &quot;big end&quot; touches the construct.)</span></li><li></li><li>    <span class="q">    &lt;   sSiIlLqQ   Force little-endian byte-order on the type.</span></li><li>        <span class="q">        jJfFdDpP   (The &quot;little end&quot; touches the construct.)</span></li></ol></pre><p>The <code class="inline">&gt;</code> and <code class="inline">&lt;</code>  modifiers can also be used on <code class="inline"><span class="s">(</span><span class="s">)</span></code>  groups  to force a particular byte-order on all components in that group,  including all its subgroups.</p><p>The following rules apply:</p><p>Examples:</p><pre class="verbatim"><ol><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;WWWW&quot;</span><span class="cm">,</span><span class="n">65</span><span class="cm">,</span><span class="n">66</span><span class="cm">,</span><span class="n">67</span><span class="cm">,</span><span class="n">68</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># foo eq &quot;ABCD&quot;</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;W4&quot;</span><span class="cm">,</span><span class="n">65</span><span class="cm">,</span><span class="n">66</span><span class="cm">,</span><span class="n">67</span><span class="cm">,</span><span class="n">68</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># same thing</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;W4&quot;</span><span class="cm">,</span><span class="n">0x24b6</span><span class="cm">,</span><span class="n">0x24b7</span><span class="cm">,</span><span class="n">0x24b8</span><span class="cm">,</span><span class="n">0x24b9</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># same thing with Unicode circled letters.</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;U4&quot;</span><span class="cm">,</span><span class="n">0x24b6</span><span class="cm">,</span><span class="n">0x24b7</span><span class="cm">,</span><span class="n">0x24b8</span><span class="cm">,</span><span class="n">0x24b9</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># same thing with Unicode circled letters.  You don&#39;t get the</span></li><li>    <span class="c"># UTF-8 bytes because the U at the start of the format caused</span></li><li>    <span class="c"># a switch to U0-mode, so the UTF-8 bytes get joined into</span></li><li>    <span class="c"># characters</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;C0U4&quot;</span><span class="cm">,</span><span class="n">0x24b6</span><span class="cm">,</span><span class="n">0x24b7</span><span class="cm">,</span><span class="n">0x24b8</span><span class="cm">,</span><span class="n">0x24b9</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># foo eq &quot;\\xe2\\x92\\xb6\\xe2\\x92\\xb7\\xe2\\x92\\xb8\\xe2\\x92\\xb9&quot;</span></li><li>    <span class="c"># This is the UTF-8 encoding of the string in the</span></li><li>    <span class="c"># previous example</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;ccxxcc&quot;</span><span class="cm">,</span><span class="n">65</span><span class="cm">,</span><span class="n">66</span><span class="cm">,</span><span class="n">67</span><span class="cm">,</span><span class="n">68</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># foo eq &quot;AB\\0\\0CD&quot;</span></li><li></li><li>    <span class="c"># NOTE: The examples above featuring &quot;W&quot; and &quot;c&quot; are true</span></li><li>    <span class="c"># only on ASCII and ASCII-derived systems such as ISO Latin 1</span></li><li>    <span class="c"># and UTF-8.  On EBCDIC systems, the first example would be</span></li><li>    <span class="c">#      $foo = pack(&quot;WWWW&quot;,193,194,195,196);</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;s2&quot;</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># &quot;\\001\\000\\002\\000&quot; on little-endian</span></li><li>    <span class="c"># &quot;\\000\\001\\000\\002&quot; on big-endian</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;a4&quot;</span><span class="cm">,</span><span class="q">&quot;abcd&quot;</span><span class="cm">,</span><span class="q">&quot;x&quot;</span><span class="cm">,</span><span class="q">&quot;y&quot;</span><span class="cm">,</span><span class="q">&quot;z&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># &quot;abcd&quot;</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;aaaa&quot;</span><span class="cm">,</span><span class="q">&quot;abcd&quot;</span><span class="cm">,</span><span class="q">&quot;x&quot;</span><span class="cm">,</span><span class="q">&quot;y&quot;</span><span class="cm">,</span><span class="q">&quot;z&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># &quot;axyz&quot;</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;a14&quot;</span><span class="cm">,</span><span class="q">&quot;abcdefg&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># &quot;abcdefg\\0\\0\\0\\0\\0\\0\\0&quot;</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;i9pl&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># a real struct tm (on my system anyway)</span></li><li></li><li>    <span class="i">$utmp_template</span> = <span class="q">&quot;Z8 Z8 Z16 L&quot;</span><span class="sc">;</span></li><li>    <span class="i">$utmp</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="i">$utmp_template</span><span class="cm">,</span> <span class="i">@utmp1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># a struct utmp (BSDish)</span></li><li></li><li>    <span class="i">@utmp2</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="i">$utmp_template</span><span class="cm">,</span> <span class="i">$utmp</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># &quot;@utmp1&quot; eq &quot;@utmp2&quot;</span></li><li></li><li><span name="bintodec"></span>    sub <span class="m">bintodec</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;N&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;B32&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="q">&quot;0&quot;</span> x <span class="n">32</span> . <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="cm">,</span> <span class="n">-32</span><span class="s">)</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;sx2l&#39;</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="n">34</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># short 12, two zero bytes padding, long 34</span></li><li>    <span class="i">$bar</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;s@4l&#39;</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="n">34</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># short 12, zero fill to position 4, long 34</span></li><li>    <span class="c"># $foo eq $bar</span></li><li>    <span class="i">$baz</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;s.l&#39;</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">34</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># short 12, zero fill to position 4, long 34</span></li><li></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;nN&#39;</span><span class="cm">,</span> <span class="n">42</span><span class="cm">,</span> <span class="n">4711</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># pack big-endian 16- and 32-bit unsigned integers</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;S&gt;L&gt;&#39;</span><span class="cm">,</span> <span class="n">42</span><span class="cm">,</span> <span class="n">4711</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># exactly the same</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;s&lt;l&lt;&#39;</span><span class="cm">,</span> <span class="n">-42</span><span class="cm">,</span> <span class="n">4711</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># pack little-endian 16- and 32-bit signed integers</span></li><li>    <span class="i">$foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&#39;(sl)&lt;&#39;</span><span class="cm">,</span> <span class="n">-42</span><span class="cm">,</span> <span class="n">4711</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># exactly the same</span></li></ol></pre><p>The same template may generally also be used in unpack().</p></section>	http://perldoc.perl.org/functions/pack.html
Unmatched '[' in POSIX class in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [:digit: ])</span></li></ol></pre><p>That should be written:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [:digit:] ])</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Unmatched-'%5b'-in-POSIX-class-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
SV (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for “scalar value”. But within the Perl interpreter, every <b>referent</b> is treated as a member of a class derived from SV, in an object-oriented sort of way. Every <b>value</b> inside Perl is passed around as a C language <code class="inline"><span class="w">SV</span>*</code>  pointer. The SV <b>struct</b> knows its own “referent type”, and the code is smart enough (we hope) not to try to call a <b>hash</b> function on a <b>subroutine</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#SV
ioctl() on unopened %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried ioctl() on a filehandle that was never opened. Check your control flow and number of arguments.</p></section>	http://perldoc.perl.org/perldiag.html#ioctl()-on-unopened-%25s
Lost precision when %s %f by 1	A			Perl Diagnostics							<section class="prog__container"><p>(W imprecision) The value you attempted to increment or decrement by one is too large for the underlying floating point representation to store accurately, hence the target of <code class="inline">++</code>  or <code class="inline">--</code>  is unchanged.  Perl issues this warning because it has already switched from integers to floating point when values are too large for integers, and now even floating point is insufficient.  You may wish to switch to using <span href="http://perldoc.perl.org/Math/BigInt.html">Math::BigInt</span> explicitly.</p></section>	http://perldoc.perl.org/perldiag.html#Lost-precision-when-%25s-%25f-by-1
encapsulation (definition)	A			Perl Glossary							<section class="prog__container"><p>The veil of abstraction separating the <b>interface</b> from the <b>implementation</b> (whether enforced or not), which mandates that all access to an <b>object</b>’s state be through <b>methods</b> alone.</p></section>	http://perldoc.perl.org/perlglossary.html#encapsulation
separator (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>character</b> or <b>string</b> that keeps two surrounding strings from being confused with each other. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> function works on separators. Not to be confused with <b>delimiters</b> or <b>terminators</b>. The “or” in the previous sentence separated the two alternatives.</p></section>	http://perldoc.perl.org/perlglossary.html#separator
Pod::Man (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[http://www.cs.bell-labs.com/cm/cs/cstr.html]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::Man - Convert POD data to formatted *roff input</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Man</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Man</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">release</span> <span class="cm">=&gt;</span> <span class="i">$VERSION</span><span class="cm">,</span> <span class="w">section</span> <span class="cm">=&gt;</span> <span class="n">8</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_file</span> <span class="s">(</span>\\<span class="i">*STDIN</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.1.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.1&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Man.html
Where can I post questions?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>There are many Perl <span href="http://search.cpan.org/perldoc/lists.perl.org">mailing lists</span> for various topics, specifically the <span href="http://search.cpan.org/perldoc/http:#%2flists.perl.org%2flist%2fbeginners.html">beginners list</span> may be of use.</p><p>Other places to ask questions are on the <span href="http://search.cpan.org/perldoc/http:#%2fwww.perlmonks.org%2f">PerlMonks site</span> or <span href="http://search.cpan.org/perldoc/http:#%2fstackoverflow.com%2fquestions%2ftagged%2fperl">stackoverflow</span>.</p></section>	http://perldoc.perl.org/perlfaq2.html#Where-can-I-post-questions%3f
Unicode (definition)	A			Perl Glossary							<section class="prog__container"><p>A character set comprising all the major character sets of the world, more or less. See <span href="http://www.unicode.org">http://www.unicode.org</span>.</p></section>	http://perldoc.perl.org/perlglossary.html#Unicode
How do I pad a string with blanks or pad a number with zeroes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>In the following examples, <code class="inline"><span class="i">$pad_len</span></code>  is the length to which you wish to pad the string, <code class="inline"><span class="i">$text</span></code>  or <code class="inline"><span class="i">$num</span></code>  contains the string to be padded, and <code class="inline"><span class="i">$pad_char</span></code>  contains the padding character. You can use a single character string constant instead of the <code class="inline"><span class="i">$pad_char</span></code>  variable if you know what it is in advance. And in the same way you can use an integer in place of <code class="inline"><span class="i">$pad_len</span></code>  if you know the pad length in advance.</p><p>The simplest method uses the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> function. It can pad on the left or right with blanks and on the left with zeroes and it will not truncate the result. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code> function can only pad strings on the right with blanks and it will truncate the result to a maximum length of <code class="inline"><span class="i">$pad_len</span></code> .</p><pre class="verbatim"><ol><li>    <span class="c"># Left padding a string with blanks (no truncation):</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%${pad_len}s&quot;</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%*s&quot;</span><span class="cm">,</span> <span class="i">$pad_len</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># same thing</span></li><li></li><li>    <span class="c"># Right padding a string with blanks (no truncation):</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%-${pad_len}s&quot;</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%-*s&quot;</span><span class="cm">,</span> <span class="i">$pad_len</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span><span class="sc">;</span> <span class="c"># same thing</span></li><li></li><li>    <span class="c"># Left padding a number with 0 (no truncation):</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%0${pad_len}d&quot;</span><span class="cm">,</span> <span class="i">$num</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%0*d&quot;</span><span class="cm">,</span> <span class="i">$pad_len</span><span class="cm">,</span> <span class="i">$num</span><span class="s">)</span><span class="sc">;</span> <span class="c"># same thing</span></li><li></li><li>    <span class="c"># Right padding a string with blanks using pack (will truncate):</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;A$pad_len&quot;</span><span class="cm">,</span><span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you need to pad with a character other than blank or zero you can use one of the following methods. They all generate a pad string with the <code class="inline"><span class="w">x</span></code>  operator and combine that with <code class="inline"><span class="i">$text</span></code> . These methods do not truncate <code class="inline"><span class="i">$text</span></code> .</p><p>Left and right padding with any character, creating a new string:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="i">$pad_char</span> x <span class="s">(</span> <span class="i">$pad_len</span> - <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span> <span class="i">$text</span> <span class="s">)</span> <span class="s">)</span> . <span class="i">$text</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$padded</span> = <span class="i">$text</span> . <span class="i">$pad_char</span> x <span class="s">(</span> <span class="i">$pad_len</span> - <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span> <span class="i">$text</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Left and right padding with any character, modifying <code class="inline"><span class="i">$text</span></code>  directly:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$text</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span> <span class="s">)</span> = <span class="i">$pad_char</span> x <span class="s">(</span> <span class="i">$pad_len</span> - <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span> <span class="i">$text</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$text</span> .= <span class="i">$pad_char</span> x <span class="s">(</span> <span class="i">$pad_len</span> - <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span> <span class="i">$text</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-pad-a-string-with-blanks-or-pad-a-number-with-zeroes%3f
leaving effective %s failed	A			Perl Diagnostics							<section class="prog__container"><p>(F) While under the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">filetest</span></code>  pragma, switching the real and effective uids or gids failed.</p></section>	http://perldoc.perl.org/perldiag.html#leaving-effective-%25s-failed
typed lexical (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>lexical variable</b>  lexical&gt;that is declared with a <b>class</b> type: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="w">Pony</span> <span class="i">$bill</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#typed-lexical
Can't do inplace edit without backup	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;re on a system such as MS-DOS that gets confused if you try reading from a deleted (but still opened) file.  You have to say <code class="inline">-<span class="w">i</span>.<span class="w">bak</span></code> , or some such.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-inplace-edit-without-backup
select not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) This machine doesn&#39;t implement the select() system call.</p></section>	http://perldoc.perl.org/perldiag.html#select-not-implemented
Callback called exit	A			Perl Diagnostics							<section class="prog__container"><p>(F) A subroutine invoked from an external package via call_sv() exited by calling exit.</p></section>	http://perldoc.perl.org/perldiag.html#Callback-called-exit
What is socket.ph and where do I get it?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>It&#39;s a Perl 4 style file defining values for system networking constants. Sometimes it is built using <span href="http://perldoc.perl.org/h2ph.html">h2ph</span> when Perl is installed, but other times it is not. Modern programs should use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></code>  instead.</p></section>	http://perldoc.perl.org/perlfaq8.html#What-is-socket.ph-and-where-do-I-get-it%3f
time (function)	A			Perl Functions\nPerl Time-related functions							<section class="prog__container"><pre>time</pre><p>Returns the number of non-leap seconds since whatever time the system considers to be the epoch, suitable for feeding to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code>.  On most systems the epoch is 00:00:00 UTC, January 1, 1970; a prominent exception being Mac OS Classic which uses 00:00:00, January 1, 1904 in the current local time zone for its epoch.</p><p>For measuring time in better granularity than one second, use the <span href="http://perldoc.perl.org/Time/HiRes.html">Time::HiRes</span> module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> interface of Perl.  See <span href="http://perldoc.perl.org/perlfaq8.html">perlfaq8</span> for details.</p><p>For date and time processing look at the many related modules on CPAN. For a comprehensive date and time representation look at the <span href="http://search.cpan.org/perldoc/DateTime">DateTime</span> module.</p></section>	http://perldoc.perl.org/functions/time.html
ExtUtils::Embed (module)	A			Perl Standard Modules		[[perlembed]]					<section class="prog__container"><p>ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications</p> <pre class="verbatim"><ol><li> <span class="w">perl</span> -<span class="w">MExtUtils::Embed</span> -e <span class="w">xsinit</span> </li><li> <span class="w">perl</span> -<span class="w">MExtUtils::Embed</span> -e <span class="w">ccopts</span> </li><li> <span class="w">perl</span> -<span class="w">MExtUtils::Embed</span> -e <span class="w">ldopts</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Embed.html
Pod::Text::Termcap (module)	A			Perl Standard Modules		[[Pod::Text]]\n[[Pod::Simple]]\n[[Term::Cap]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::Text::Termcap - Convert POD data to ASCII text with format escapes</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Text::Termcap</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Text::Termcap</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">sentence</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">width</span> <span class="cm">=&gt;</span> <span class="n">78</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.txt.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.txt&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Text/Termcap.html
Attempt to free nonexistent shared string '%s'%s	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) Perl maintains a reference-counted internal table of strings to optimize the storage and access of hash keys and other strings.  This indicates someone tried to decrement the reference count of a string that can no longer be found in the table.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-free-nonexistent-shared-string-'%25s'%25s
I<text>	A			Perl POD Formatting Codes							<section class="prog__container"><p>Used for emphasis (&quot;<code class="inline"><span class="w">be</span> <span class="w">I</span><span class="q">&lt;careful!&gt;</span></code> &quot;) and parameters (&quot;<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="j">I</span><span class="q">&lt;LABEL&gt;</span></code> &quot;)</p></section>	http://perldoc.perl.org/perlpod.html#I%3ctext%3e----italic-text
symlink (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>symlink OLDFILE,NEWFILE</pre><p>Creates a new filename symbolically linked to the old filename. Returns <code class="inline"><span class="n">1</span></code>  for success, <code class="inline"><span class="n">0</span></code>  otherwise.  On systems that don&#39;t support symbolic links, raises an exception.  To check for that, use eval:</p><pre class="verbatim"><ol><li>    <span class="i">$symlink_exists</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/symlink.html">symlink</span><span class="s">(</span><span class="q">&quot;&quot;</span><span class="cm">,</span><span class="q">&quot;&quot;</span><span class="s">)</span><span class="sc">;</span> <span class="n">1</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#symlink">symlink in perlport</span>.</p></section>	http://perldoc.perl.org/functions/symlink.html
False [] range "%s" in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp)(F) A character class range must start and end at a literal character, not another character class like <code class="inline">\\<span class="w">d</span></code>  or <code class="inline">[:alpha:]</code>.  The &quot;-&quot; in your false range is interpreted as a literal &quot;-&quot;.  In a <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code>  construct, this is an error, rather than a warning.  Consider quoting the &quot;-&quot;, &quot;\\-&quot;.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#False-%5b%5d-range-%22%25s%22-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) There was a syntax error within the <code class="inline"><span class="s">(</span><span class="q">?[ ])</span></code> .  This can happen if the expression inside the construct was completely empty, or if there are too many or few operands for the number of operators.  Perl is not smart enough to give you a more precise indication as to what is wrong.</p></section>	http://perldoc.perl.org/perldiag.html#Incomplete-expression-within-'(%3f%5b-%5d)'-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
DBM_Filter::utf8 (module)	A			Perl Standard Modules		[[DBM_Filter]]\n[[perldbmfilter]]\n[[Encode]]					<section class="prog__container"><p>DBM_Filter::utf8 - filter for DBM_Filter</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, or ODBM_File</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span><span class="sc">;</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;utf8&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter/utf8.html
How can I count the number of occurrences of a substring within a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>There are a number of ways, with varying efficiency. If you want a count of a certain single character (X) within a string, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code> function like so:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="q">&quot;ThisXlineXhasXsomeXx&#39;sXinXit&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="s">(</span><span class="i">$string</span> =~ <span class="q">tr/X//</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;There are $count X characters in the string&quot;</span><span class="sc">;</span></li></ol></pre><p>This is fine if you are just looking for a single character. However, if you are trying to count multiple character substrings within a larger string, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code> won&#39;t work. What you can do is wrap a while() loop around a global pattern match. For example, let&#39;s count negative integers:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="q">&quot;-9 55 48 -2 23 -76 4 14 -44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">$string</span> =~ <span class="q">/-\\d+/g</span><span class="s">)</span> <span class="s">{</span> <span class="i">$count</span>++ <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;There are $count negative numbers in the string&quot;</span><span class="sc">;</span></li></ol></pre><p>Another version uses a global match in list context, then assigns the result to a scalar, producing a count of the number of matches.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="s">(</span><span class="s">)</span> = <span class="i">$string</span> =~ <span class="q">/-\\d+/g</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-count-the-number-of-occurrences-of-a-substring-within-a-string%3f
Does Perl have a Year 2000 or 2038 problem? Is Perl Y2K compliant?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Perl itself never had a Y2K problem, although that never stopped people from creating Y2K problems on their own. See the documentation for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> for its proper use.</p><p>Starting with Perl 5.12, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> can handle dates past 03:14:08 January 19, 2038, when a 32-bit based time would overflow. You still might get a warning on a 32-bit <code class="inline"><span class="w">perl</span></code> :</p><pre class="verbatim"><ol><li>    <span class="i">% perl5</span>.<span class="n">12</span> -<span class="w">E</span> <span class="q">&#39;say scalar localtime( 0x9FFF_FFFFFFFF )&#39;</span></li><li>    <span class="w">Integer</span> <span class="w">overflow</span> <span class="w">in</span> <span class="w">hexadecimal</span> <span class="w">number</span> <span class="w">at</span> -e <span class="w">line</span> <span class="n">1.</span></li><li>    <span class="w">Wed</span> <span class="w">Nov</span>  <span class="n">1</span> <span class="n">19</span><span class="co">:</span><span class="n">42</span><span class="co">:</span><span class="n">39</span> <span class="n">5576711</span></li></ol></pre><p>On a 64-bit <code class="inline"><span class="w">perl</span></code> , you can get even larger dates for those really long running projects:</p><pre class="verbatim"><ol><li>    <span class="i">% perl5</span>.<span class="n">12</span> -<span class="w">E</span> <span class="q">&#39;say scalar gmtime( 0x9FFF_FFFFFFFF )&#39;</span></li><li>    <span class="w">Thu</span> <span class="w">Nov</span>  <span class="n">2</span> <span class="n">00</span><span class="co">:</span><span class="n">42</span><span class="co">:</span><span class="n">39</span> <span class="n">5576711</span></li></ol></pre><p>You&#39;re still out of luck if you need to keep track of decaying protons though.</p></section>	http://perldoc.perl.org/perlfaq4.html#Does-Perl-have-a-Year-2000-or-2038-problem%3f-Is-Perl-Y2K-compliant%3f
%s: Command not found	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> or another shell instead of Perl.  Check the #! line, or manually feed your script into Perl yourself.  The #! line at the top of your file could look like</p><pre class="verbatim"><ol><li>  <span class="c">#!/usr/bin/perl -w</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#%25s%3a-Command-not-found
le (function)	A			Perl Functions							<section class="prog__container"><pre>le</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/le.html
our (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Miscellaneous functions							<section class="prog__container"><pre>our VARLIST<br>our TYPE VARLIST<br>our VARLIST : ATTRS<br>our TYPE VARLIST : ATTRS</pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> makes a lexical alias to a package (i.e. global) variable of the same name in the current package for use within the current lexical scope.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> has the same scoping rules as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, meaning that it is only valid within a lexical scope.  Unlike <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, which both declare new (lexical) variables, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> only creates an alias to an existing variable: a package variable of the same name.</p><p>This means that when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code>  is in effect, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> lets you use a package variable without qualifying it with the package name, but only within the lexical scope of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration.  This applies immediately--even within the same statement.</p><pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li></li><li>    <span class="i">$Foo::foo</span> = <span class="n">23</span><span class="sc">;</span></li><li></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$foo</span><span class="sc">;</span>   <span class="c"># alias to $Foo::foo</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$foo</span><span class="sc">;</span> <span class="c"># prints 23</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$Foo::foo</span><span class="sc">;</span> <span class="c"># prints 23</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$foo</span><span class="sc">;</span> <span class="c"># ERROR: requires explicit package name</span></li></ol></pre><p>This works even if the package variable has not been used before, as package variables spring into existence when first used.</p><pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$foo</span> = <span class="n">23</span><span class="sc">;</span>   <span class="c"># just like $Foo::foo = 23</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$Foo::foo</span><span class="sc">;</span> <span class="c"># prints 23</span></li></ol></pre><p>Because the variable becomes legal immediately under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code> , so long as there is no variable with that name is already in scope, you can then reference the package variable again even within the same statement.</p><pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span>  <span class="i">$foo</span> = <span class="i">$foo</span><span class="sc">;</span> <span class="c"># error, undeclared $foo on right-hand side</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$foo</span> = <span class="i">$foo</span><span class="sc">;</span> <span class="c"># no errors</span></li></ol></pre><p>If more than one variable is listed, the list must be placed in parentheses.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span><span class="s">(</span><span class="i">$bar</span><span class="cm">,</span> <span class="i">$baz</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>An <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration declares an alias for a package variable that will be visible across its entire lexical scope, even across package boundaries.  The package in which the variable is entered is determined at the point of the declaration, not at the point of use.  This means the following behavior holds:</p><pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$bar</span><span class="sc">;</span>      <span class="c"># declares $Foo::bar for rest of lexical scope</span></li><li>    <span class="i">$bar</span> = <span class="n">20</span><span class="sc">;</span></li><li></li><li><span name="package-Bar"></span>    package <span class="i">Bar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$bar</span><span class="sc">;</span>    <span class="c"># prints 20, as it refers to $Foo::bar</span></li></ol></pre><p>Multiple <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declarations with the same name in the same lexical scope are allowed if they are in different packages.  If they happen to be in the same package, Perl will emit warnings if you have asked for them, just like multiple <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> declarations.  Unlike a second <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> declaration, which will bind the name to a fresh variable, a second <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration in the same package, in the same scope, is merely redundant.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span><span class="sc">;</span></li><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$bar</span><span class="sc">;</span>      <span class="c"># declares $Foo::bar for rest of lexical scope</span></li><li>    <span class="i">$bar</span> = <span class="n">20</span><span class="sc">;</span></li><li></li><li><span name="package-Bar"></span>    package <span class="i">Bar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$bar</span> = <span class="n">30</span><span class="sc">;</span> <span class="c"># declares $Bar::bar for rest of lexical scope</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$bar</span><span class="sc">;</span>    <span class="c"># prints 30</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$bar</span><span class="sc">;</span>      <span class="c"># emits warning but has no other effect</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$bar</span><span class="sc">;</span>    <span class="c"># still prints 30</span></li></ol></pre><p>An <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration may also have a list of attributes associated with it.</p><p>The exact semantics and interface of TYPE and ATTRS are still evolving.  TYPE is currently bound to the use of the <code class="inline"><span class="w">fields</span></code>  pragma, and attributes are handled using the <code class="inline"><span class="w">attributes</span></code>  pragma, or, starting from Perl 5.8.0, also via the <code class="inline"><span class="w">Attribute::Handlers</span></code>  module.  See <span href="http://perldoc.perl.org/perlsub.html#Private-Variables-via-my()">Private Variables via my() in perlsub</span> for details, and <span href="http://perldoc.perl.org/fields.html">fields</span>, <span href="http://perldoc.perl.org/attributes.html">attributes</span>, and <span href="http://perldoc.perl.org/Attribute/Handlers.html">Attribute::Handlers</span>.</p><p>Note that with a parenthesised list, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> can be used as a dummy placeholder, for example to skip assignment of initial values:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$min</span><span class="cm">,</span> <span class="i">$hour</span> <span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> differs from <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vars</span></code> , which allows use of an unqualified name <i>only</i> within the affected package, but across scopes.</p></section>	http://perldoc.perl.org/functions/our.html
compile (definition)	A			Perl Glossary							<section class="prog__container"><p>The process of turning source code into a machine-usable form. See <b>compile phase</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#compile
How do I get a random number between X and Y?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>To get a random number between two values, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand()</span></code> built-in to get a random number between 0 and 1. From there, you shift that into the range that you want.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand($x)</span></code> returns a number such that <code class="inline"><span class="n">0</span> &lt;= <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="i">$x</span><span class="s">)</span> &lt; <span class="i">$x</span></code> . Thus what you want to have perl figure out is a random number in the range from 0 to the difference between your <i>X</i> and <i>Y</i>.</p><p>That is, to get a number between 10 and 15, inclusive, you want a random number between 0 and 5 that you can then add to 10.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$number</span> = <span class="n">10</span> + <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span> <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span> <span class="n">15</span>-<span class="n">10</span>+<span class="n">1</span> <span class="s">)</span><span class="sc">;</span> <span class="c"># ( 10,11,12,13,14, or 15 )</span></li></ol></pre><p>Hence you derive the following simple function to abstract that. It selects a random integer between the two given integers (inclusive). For example: <code class="inline"><span class="i">random_int_between</span><span class="s">(</span><span class="n">50</span><span class="cm">,</span><span class="n">120</span><span class="s">)</span></code> .</p><pre class="verbatim"><ol><li><span name="random_int_between"></span>    sub <span class="m">random_int_between</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$min</span><span class="cm">,</span> <span class="i">$max</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c"># Assumes that the two arguments are integers themselves!</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$min</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$min</span> == <span class="i">$max</span><span class="sc">;</span></li><li>        <span class="s">(</span><span class="i">$min</span><span class="cm">,</span> <span class="i">$max</span><span class="s">)</span> = <span class="s">(</span><span class="i">$max</span><span class="cm">,</span> <span class="i">$min</span><span class="s">)</span>  <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span>  <span class="i">$min</span> &gt; <span class="i">$max</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$min</span> + <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span> <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="n">1</span> + <span class="i">$max</span> - <span class="i">$min</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-get-a-random-number-between-X-and-Y%3f
pipe (definition)	A			Perl Glossary							<section class="prog__container"><p>A direct <b>connection</b> that carries the output of one <b>process</b> to the input of another without an intermediate temporary file. Once the pipe is set up, the two processes in question can read and write as if they were talking to a normal file, with some caveats.</p></section>	http://perldoc.perl.org/perlglossary.html#pipe
How do I put a password on my web pages?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>See if the web framework you are using has an authentication system and if that fits your needs.</p><p>Alternativly look at <span href="http://search.cpan.org/perldoc/Plack::Middleware::Auth::Basic">Plack::Middleware::Auth::Basic</span>, or one of the other <span href="http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fsearch%3fq%3dplack%2bauth">Plack authentication</span> options.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-put-a-password-on-my-web-pages%3f
vector argument not supported with alpha versions	A			Perl Diagnostics							<section class="prog__container"><p>(S printf) The %vd (s)printf format does not support version objects with alpha parts.</p></section>	http://perldoc.perl.org/perldiag.html#vector-argument-not-supported-with-alpha-versions
subroutine (definition)	A			Perl Glossary							<section class="prog__container"><p>A named or otherwise accessible piece of program that can be invoked from elsewhere in the program in order to accomplish some subgoal of the program. A subroutine is often parameterized to accomplish different but related things depending on its input <b>arguments</b>. If the subroutine returns a meaningful <b>value</b>, it is also called a <b>function</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#subroutine
Pod::Simple::PullParserStartToken (module)	A			Perl Standard Modules		[[Pod::Simple::PullParserToken]]\n[[Pod::Simple]]\n[[Pod::Simple::Subclassing]]\n[[Pod::Simple::PullParserToken]]\n[[Pod::Simple]]\n[[Pod::Simple::Subclassing]]					<section class="prog__container"><p>Pod::Simple::PullParserStartToken -- start-tokens from Pod::Simple::PullParser</p> <p>(See <span href="http://perldoc.perl.org/Pod/Simple/PullParser.html">Pod::Simple::PullParser</span>)</p></section>	http://perldoc.perl.org/Pod/Simple/PullParserStartToken.html
infix (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that comes in between its <b>operands</b>, such as multiplication in <code class="inline"><span class="n">24</span> * <span class="n">7</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#infix
Malformed UTF-8 returned by \N{%s} immediately after '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The charnames handler returned malformed UTF-8.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-returned-by-%5cN%7b%25s%7d-immediately-after-'%25s'
=end	A			Perl POD Commands							<section class="prog__container"><p>This marks the end of the region opened by the matching &quot;=begin formatname&quot; region.  If &quot;formatname&quot; is not the formatname of the most recent open &quot;=begin formatname&quot; region, then this is an error, and must generate an error message.  This is discussed in detail in the section <span href="http://perldoc.perl.org/perlpodspec.html#About-Data-Paragraphs-and-%22%3dbegin%2f%3dend%22-Regions">About Data Paragraphs and =begin/=end Regions</span>.</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dend-formatname%22
Transliteration replacement not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer couldn&#39;t find the final delimiter of a tr///, tr[][], y/// or y[][] construct.</p></section>	http://perldoc.perl.org/perldiag.html#Transliteration-replacement-not-terminated
Binary "lt" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;lt&quot; returns true if the left argument is stringwise less than the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
setsockopt() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to set a socket option on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/setsockopt.html">setsockopt</span>.</p></section>	http://perldoc.perl.org/perldiag.html#setsockopt()-on-closed-socket-%25s
Unknown Unicode option letter '%c'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You specified an unknown Unicode option.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> documentation of the <code class="inline">-C</code>  switch for the list of known options.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-Unicode-option-letter-'%25c'
Binary "|" operator	A			Perl Operators\nPerl Bitwise Or and Exclusive Or							<section class="prog__container">Binary &quot;|&quot; returns its operands ORed together bit by bit.</section>	http://perldoc.perl.org/perlop.html#Bitwise-Or-and-Exclusive-Or
warn (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>warn LIST</pre><p>Prints the value of LIST to STDERR.  If the last element of LIST does not end in a newline, it appends the same file/line number text as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> does.</p><p>If the output is empty and <code class="inline"><span class="i">$@</span></code>  already contains a value (typically from a previous eval) that value is used after appending <code class="inline"><span class="q">&quot;\\t...caught&quot;</span></code>  to <code class="inline"><span class="i">$@</span></code> .  This is useful for staying almost, but not entirely similar to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>.</p><p>If <code class="inline"><span class="i">$@</span></code>  is empty then the string <code class="inline"><span class="q">&quot;Warning: Something&#39;s wrong&quot;</span></code>  is used.</p><p>No message is printed if there is a <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  handler installed.  It is the handler&#39;s responsibility to deal with the message as it sees fit (like, for instance, converting it into a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>).  Most handlers must therefore arrange to actually display the warnings that they are not prepared to deal with, by calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span></code> again in the handler.  Note that this is quite safe and will not produce an endless loop, since <code class="inline"><span class="w">__WARN__</span></code>  hooks are not called from inside one.</p><p>You will find this behavior is slightly different from that of <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  handlers (which don&#39;t suppress the error text, but can instead call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> again to change it).</p><p>Using a <code class="inline"><span class="w">__WARN__</span></code>  handler provides a powerful way to silence all warnings (even the so-called mandatory ones).  An example:</p><pre class="verbatim"><ol><li>    <span class="c"># wipe out *all* compile-time warnings</span></li><li>    BEGIN <span class="s">{</span> <span class="i">$SIG</span>{<span class="q">&#39;__WARN__&#39;</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$_</span>[<span class="n">0</span>] if <span class="i">$DOWARN</span> <span class="s">}</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="n">10</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="n">20</span><span class="sc">;</span>          <span class="c"># no warning about duplicate my $foo,</span></li><li>                           <span class="c"># but hey, you asked for it!</span></li><li>    <span class="c"># no compile-time or run-time warnings before here</span></li><li>    <span class="i">$DOWARN</span> = <span class="n">1</span><span class="sc">;</span></li><li></li><li>    <span class="c"># run-time warnings enabled after here</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;\\$foo is alive and $foo!&quot;</span><span class="sc">;</span>     <span class="c"># does show up</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlvar.html">perlvar</span> for details on setting <code class="inline"><span class="i">%SIG</span></code>  entries and for more examples.  See the Carp module for other kinds of warnings using its carp() and cluck() functions.</p></section>	http://perldoc.perl.org/functions/warn.html
panic: fold_constants JMPENV_PUSH returned %d	A			Perl Diagnostics							<section class="prog__container"><p>(P) While attempting folding constants an exception other than an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> failure was caught.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-fold_constants-JMPENV_PUSH-returned-%25d
${^UTF8LOCALE} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>This variable indicates whether a UTF-8 locale was detected by perl at startup.  This information is used by perl when it&#39;s in adjust-utf8ness-to-locale mode (as when run with the <code class="inline">-<span class="w">CL</span></code>  command-line switch); see <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for more info on this.</p><p>This variable was added in Perl v5.8.8.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eUTF8LOCALE%7d
Can't check filesystem of script "%s" for nosuid	A			Perl Diagnostics							<section class="prog__container"><p>(P) For some reason you can&#39;t check the filesystem of the script for nosuid.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-check-filesystem-of-script-%22%25s%22-for-nosuid
\C is deprecated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, regexp) The \\C character class is deprecated, and will become a compile-time error in a future release of perl (tentatively v5.24).  This construct allows you to match a single byte of what makes up a multi-byte single UTF8 character, and breaks encapsulation.  It is currently also very buggy.  If you really need to process the individual bytes, you probably want to convert your string to one where each underlying byte is stored as a character, with utf8::encode().</p></section>	http://perldoc.perl.org/perldiag.html#%5cC-is-deprecated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
setpgrp (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>setpgrp PID,PGRP</pre><p>Sets the current process group for the specified PID, <code class="inline"><span class="n">0</span></code>  for the current process.  Raises an exception when used on a machine that doesn&#39;t implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted, it defaults to <code class="inline"><span class="n">0</span><span class="cm">,</span><span class="n">0</span></code> .  Note that the BSD 4.2 version of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/setpgrp.html">setpgrp</span></code> does not accept any arguments, so only <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/setpgrp.html">setpgrp(0,0)</span></code> is portable.  See also <code class="inline"><span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#setpgrp">setpgrp in perlport</span>.</p></section>	http://perldoc.perl.org/functions/setpgrp.html
Can't modify reference to %s in %s assignment	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only a limited number of constructs can be used as the argument to a reference constructor on the left-hand side of an assignment, and what you used was not one of them.  See <span href="http://perldoc.perl.org/perlref.html#Assigning-to-References">Assigning to References in perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-reference-to-%25s-in-%25s-assignment
Binary "<" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;&lt;&quot; returns true if the left argument is numerically less than the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
Internal disaster in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something went badly wrong in the regular expression parser. The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Internal-disaster-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
ExtUtils::ParseXS (module)	A			Perl Standard Modules		[[perl]]\n[[perlxs]]\n[[perlxstut]]					<section class="prog__container"><p>ExtUtils::ParseXS - converts Perl XS code into C code</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::ParseXS</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pxs</span> = <span class="w">ExtUtils::ParseXS</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>  <span class="i">$pxs</span><span class="i">-&gt;process_file</span><span class="s">(</span> <span class="w">filename</span> <span class="cm">=&gt;</span> <span class="q">&#39;foo.xs&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$pxs</span><span class="i">-&gt;process_file</span><span class="s">(</span> <span class="w">filename</span> <span class="cm">=&gt;</span> <span class="q">&#39;foo.xs&#39;</span><span class="cm">,</span></li><li>                      <span class="w">output</span> <span class="cm">=&gt;</span> <span class="q">&#39;bar.c&#39;</span><span class="cm">,</span></li><li>                      <span class="q">&#39;C++&#39;</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">typemap</span> <span class="cm">=&gt;</span> <span class="q">&#39;path/to/typemap&#39;</span><span class="cm">,</span></li><li>                      <span class="w">hiertype</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">except</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">versioncheck</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">linenumbers</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">optimize</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                      <span class="w">prototypes</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                    <span class="s">)</span><span class="sc">;</span></li><li>  </li><li>  <span class="c"># Legacy non-OO interface using a singleton:</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::ParseXS</span> <span class="q">qw(process_file)</span><span class="sc">;</span></li><li>  <span class="i">process_file</span><span class="s">(</span> <span class="w">filename</span> <span class="cm">=&gt;</span> <span class="q">&#39;foo.xs&#39;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/ParseXS.html
-%s on unopened filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to invoke a file test operator on a filehandle that isn&#39;t open.  Check your control flow.  See also <span href="http://perldoc.perl.org/functions/-X.html">-X</span>.</p></section>	http://perldoc.perl.org/perldiag.html#-%25s-on-unopened-filehandle-%25s
tokener (definition)	A			Perl Glossary							<section class="prog__container"><p>A module that breaks a program text into a sequence of <b>tokens</b> for later analysis by a parser.</p></section>	http://perldoc.perl.org/perlglossary.html#tokener
Ambiguous use of %c{%s{...}} resolved to %c%s{...}	A			Perl Diagnostics							<section class="prog__container"><p>(W ambiguous) You wrote something like <code class="inline"><span class="i">$</span>{<span class="w">foo</span><span class="s">[</span><span class="n">2</span><span class="s">]</span>}</code>  (where foo represents the name of a Perl keyword), which might be looking for element number 2 of the array named <code class="inline"><span class="i">@foo</span></code> , in which case please write <code class="inline"><span class="i">$foo</span>[<span class="n">2</span>]</code> , or you might have meant to pass an anonymous arrayref to the function named foo, and then do a scalar deref on the value it returns.  If you meant that, write <code class="inline"><span class="i">$</span>{<span class="i">foo</span><span class="s">(</span><span class="s">[</span><span class="n">2</span><span class="s">]</span><span class="s">)</span>}</code> .</p><p>In regular expressions, the <code class="inline"><span class="i">$</span>{<span class="w">foo</span><span class="s">[</span><span class="n">2</span><span class="s">]</span>}</code>  syntax is sometimes necessary to disambiguate between array subscripts and character classes. <code class="inline"><span class="q">/$length[2345]/</span></code> , for instance, will be interpreted as <code class="inline"><span class="i">$length</span></code>  followed by the character class <code class="inline"><span class="s">[</span><span class="n">2345</span><span class="s">]</span></code> .  If an array subscript is what you want, you can avoid the warning by changing <code class="inline"><span class="q">/${length[2345]}/</span></code>  to the unsightly <code class="inline"><span class="q">/${\\$length[2345]}/</span></code> , by renaming your array to something that does not coincide with a built-in keyword, or by simply turning off warnings with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;ambiguous&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-use-of-%25c%7b%25s%7b...%7d%7d-resolved-to-%25c%25s%7b...%7d
=item	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that an item in a list begins here.  Formatting codes are processed.  The semantics of the (optional) text in the remainder of this paragraph are explained in the <span href="http://perldoc.perl.org/perlpodspec.html#About-%3dover...%3dback-Regions">About =over...=back Regions</span> section, further below.  Examples:</p><pre class="verbatim"><ol><li>  =item</li><li></li><li>  =item *</li><li></li><li>  =item      *    </li><li></li><li>  =item 14</li><li></li><li>  =item   3.</li><li></li><li>  =item C&lt;&lt; $thing-&gt;stuff(I&lt;dodad&gt;) &gt;&gt;</li><li></li><li>  =item For transporting us beyond seas to be tried for pretended</li><li>  offenses</li><li></li><li>  =item He is at this time transporting large armies of foreign</li><li>  mercenaries to complete the works of death, desolation and</li><li>  tyranny, already begun with circumstances of cruelty and perfidy</li><li>  scarcely paralleled in the most barbarous ages, and totally</li><li>  unworthy the head of a civilized nation.</li></ol></pre></section>	http://perldoc.perl.org/perlpodspec.html#%22%3ditem%22
File::Temp (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Temp - return name and handle of a temporary file safely</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="q">qw/ tempfile tempdir /</span><span class="sc">;</span></li><li></li><li>  <span class="i">$fh</span> = <span class="i">tempfile</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="i">$template</span><span class="cm">,</span> <span class="w">DIR</span> <span class="cm">=&gt;</span> <span class="i">$dir</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="i">$template</span><span class="cm">,</span> <span class="w">SUFFIX</span> <span class="cm">=&gt;</span> <span class="q">&#39;.dat&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="i">$template</span><span class="cm">,</span> <span class="w">TMPDIR</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span><span class="s">(</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;:utf8&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$dir</span> = <span class="i">tempdir</span><span class="s">(</span> <span class="w">CLEANUP</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="w">DIR</span> <span class="cm">=&gt;</span> <span class="i">$dir</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Object interface:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Temp</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="q">qw/ :seekable /</span><span class="sc">;</span></li><li></li><li>  <span class="i">$fh</span> = <span class="w">File::Temp</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$fname</span> = <span class="i">$fh</span><span class="i">-&gt;filename</span><span class="sc">;</span></li><li></li><li>  <span class="i">$fh</span> = <span class="w">File::Temp</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">TEMPLATE</span> <span class="cm">=&gt;</span> <span class="i">$template</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$fname</span> = <span class="i">$fh</span><span class="i">-&gt;filename</span><span class="sc">;</span></li><li></li><li>  <span class="i">$tmp</span> = <span class="w">File::Temp</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="w">UNLINK</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">SUFFIX</span> <span class="cm">=&gt;</span> <span class="q">&#39;.dat&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$tmp</span> <span class="q">&quot;Some data\\n&quot;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Filename is $tmp\\n&quot;</span><span class="sc">;</span></li><li>  <span class="i">$tmp</span><span class="i">-&gt;seek</span><span class="s">(</span> <span class="n">0</span><span class="cm">,</span> <span class="w">SEEK_END</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The following interfaces are provided for compatibility with existing APIs. They should not be used in new code.</p><p>MkTemp family:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="q">qw/ :mktemp  /</span><span class="sc">;</span></li><li></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span> = <span class="i">mkstemp</span><span class="s">(</span> <span class="q">&quot;tmpfileXXXXX&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span> = <span class="i">mkstemps</span><span class="s">(</span> <span class="q">&quot;tmpfileXXXXXX&quot;</span><span class="cm">,</span> <span class="i">$suffix</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$tmpdir</span> = <span class="i">mkdtemp</span><span class="s">(</span> <span class="i">$template</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$unopened_file</span> = <span class="i">mktemp</span><span class="s">(</span> <span class="i">$template</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>POSIX functions:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="q">qw/ :POSIX /</span><span class="sc">;</span></li><li></li><li>  <span class="i">$file</span> = <span class="i">tmpnam</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$fh</span> = <span class="i">tmpfile</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span> = <span class="i">tmpnam</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Compatibility functions:</p><pre class="verbatim"><ol><li>  <span class="i">$unopened_file</span> = <span class="i">File::Temp::tempnam</span><span class="s">(</span> <span class="i">$dir</span><span class="cm">,</span> <span class="i">$pfx</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Temp.html
process (definition)	A			Perl Glossary							<section class="prog__container"><p>An instance of a running program. Under multitasking systems like Unix, two or more separate processes could be running the same program independently at the same time—in fact, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> function is designed to bring about this happy state of affairs. Under other operating systems, processes are sometimes called “threads”, “tasks”, or “jobs”, often with slight nuances in meaning.</p></section>	http://perldoc.perl.org/perlglossary.html#process
Use of uninitialized value%s	A			Perl Diagnostics							<section class="prog__container"><p>(W uninitialized) An undefined value was used as if it were already defined.  It was interpreted as a &quot;&quot; or a 0, but maybe it was a mistake. To suppress this warning assign a defined value to your variables.</p><p>To help you figure out what was undefined, perl will try to tell you the name of the variable (if any) that was undefined.  In some cases it cannot do this, so it also tells you what operation you used the undefined value in.  Note, however, that perl optimizes your program and the operation displayed in the warning may not necessarily appear literally in your program.  For example, <code class="inline"><span class="q">&quot;that $foo&quot;</span></code>  is usually optimized into <code class="inline"><span class="q">&quot;that &quot;</span> . <span class="i">$foo</span></code> , and the warning will refer to the <code class="inline">concatenation (.)</code> operator, even though there is no <code class="inline">.</code> in your program.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-uninitialized-value%25s
Illegal division by zero	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to divide a number by 0.  Either something was wrong in your logic, or you need to put a conditional in to guard against meaningless input.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-division-by-zero
How do I adopt or take over a module already on CPAN?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Ask the current maintainer to make you a co-maintainer or transfer the module to you.</p><p>If you can not reach the author for some reason contact the PAUSE admins at modules@perl.org who may be able to help, but each case is treated separately.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-adopt-or-take-over-a-module-already-on-CPAN%3f
octal (definition)	A			Perl Glossary							<section class="prog__container"><p>A number in base 8. Only the digits 0 through 7 are allowed. Octal constants in Perl start with 0, as in 013. See also the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#octal
and not implemented on filehandles	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl can&#39;t peek at the stdio buffer of filehandles when it doesn&#39;t know about your kind of stdio.  You&#39;ll have to use a filename instead.</p></section>	http://perldoc.perl.org/perldiag.html#-T-and--B-not-implemented-on-filehandles
Type of arg %d to &CORE::%s must be %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The subroutine in question in the CORE package requires its argument to be a hard reference to data of the specified type.  Overloading is ignored, so a reference to an object that is not the specified type, but nonetheless has overloading to handle it, will still not be accepted.</p></section>	http://perldoc.perl.org/perldiag.html#Type-of-arg-%25d-to-%26CORE%3a%3a%25s-must-be-%25s
Using !~ with %s doesn't make sense	A			Perl Diagnostics							<section class="prog__container"><p>(F) Using the <code class="inline">!~</code>  operator with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///r</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///r</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/y.html">y///r</span></code> is currently reserved for future use, as the exact behavior has not been decided.  (Simply returning the boolean opposite of the modified string is usually not particularly useful.)</p></section>	http://perldoc.perl.org/perldiag.html#Using-!~-with-%25s-doesn't-make-sense
How can I manipulate fixed-record-length files?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>The most efficient way is using <span href="http://perldoc.perl.org/functions/pack.html">pack</span> and <span href="http://perldoc.perl.org/functions/unpack.html">unpack</span>. This is faster than using <span href="http://perldoc.perl.org/functions/substr.html">substr</span> when taking many, many strings. It is slower for just a few.</p><p>Here is a sample chunk of code to break up and put back together again some fixed-format input lines, in this case from the output of a normal, Berkeley-style ps:</p><pre class="verbatim"><ol><li>    <span class="c"># sample input line:</span></li><li>    <span class="c">#   15158 p5  T      0:00 perl /home/tchrist/scripts/now-what</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$PS_T</span> = <span class="q">&#39;A6 A4 A7 A5 A*&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ps</span><span class="cm">,</span> <span class="q">&#39;-|&#39;</span><span class="cm">,</span> <span class="q">&#39;ps&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="q">&lt;$ps&gt;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@fields</span> = <span class="q">qw( pid tt stat time command )</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;$ps&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%process</span><span class="sc">;</span></li><li>        <span class="i">@process</span>{<span class="i">@fields</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="i">$PS_T</span><span class="cm">,</span> <span class="i">$_</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$field</span> <span class="s">(</span> <span class="i">@fields</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$field: &lt;$process{$field}&gt;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&#39;line=&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="i">$PS_T</span><span class="cm">,</span> <span class="i">@process</span>{<span class="i">@fields</span>} <span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>We&#39;ve used a hash slice in order to easily handle the fields of each row. Storing the keys in an array makes it easy to operate on them as a group or loop over them with <code class="inline">for</code> . It also avoids polluting the program with global variables and using symbolic references.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-manipulate-fixed-record-length-files%3f
getservent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getservent</pre>Get next services record.</section>	http://perldoc.perl.org/functions/getservent.html
package (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Keywords related to perl modules\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>package NAMESPACE<br>package NAMESPACE VERSION<br>package NAMESPACE BLOCK<br>package NAMESPACE VERSION BLOCK</pre><p>Declares the BLOCK or the rest of the compilation unit as being in the given namespace.  The scope of the package declaration is either the supplied code BLOCK or, in the absence of a BLOCK, from the declaration itself through the end of current scope (the enclosing block, file, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>).  That is, the forms without a BLOCK are operative through the end of the current scope, just like the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> operators. All unqualified dynamic identifiers in this scope will be in the given namespace, except where overridden by another <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/package.html">package</span></code> declaration or when they&#39;re one of the special identifiers that qualify into <code class="inline"><span class="w">main::</span></code> , like <code class="inline"><span class="w">STDOUT</span></code> , <code class="inline"><span class="w">ARGV</span></code> , <code class="inline"><span class="w">ENV</span></code> , and the punctuation variables.</p><p>A package statement affects dynamic variables only, including those you&#39;ve used <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> on, but <i>not</i> lexically-scoped variables, which are created with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code>.  Typically it would be the first  declaration in a file included by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code>.  You can switch into a package in more than one place, since this only determines which default  symbol table the compiler uses for the rest of that block.  You can refer to identifiers in other packages than the current one by prefixing the identifier with the package name and a double colon, as in <code class="inline"><span class="i">$SomePack::var</span></code>  or <code class="inline"><span class="w">ThatPack::INPUT_HANDLE</span></code> .  If package name is omitted, the <code class="inline"><span class="w">main</span></code>  package as assumed.  That is, <code class="inline"><span class="i">$::sail</span></code>  is equivalent to <code class="inline"><span class="i">$main::sail</span></code>  (as well as to <code class="inline"><span class="i">$main&#39;sail</span></code> , still seen in ancient code, mostly from Perl 4).</p><p>If VERSION is provided, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/package.html">package</span></code> sets the <code class="inline"><span class="i">$VERSION</span></code>  variable in the given namespace to a <span href="http://perldoc.perl.org/version.html">version</span> object with the VERSION provided.  VERSION must be a &quot;strict&quot; style version number as defined by the <span href="http://perldoc.perl.org/version.html">version</span> module: a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading &#39;v&#39; character and at least three components.  You should set <code class="inline"><span class="i">$VERSION</span></code>  only once per package.</p><p>See <span href="http://perldoc.perl.org/perlmod.html#Packages">Packages in perlmod</span> for more information about packages, modules, and classes.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span> for other scoping issues.</p></section>	http://perldoc.perl.org/functions/package.html
Infinite recursion in regex	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a pattern that references itself without consuming any input text.  You should check the pattern to ensure that recursive patterns either consume text or fail.</p></section>	http://perldoc.perl.org/perldiag.html#Infinite-recursion-in-regex
Useless assignment to a temporary	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You assigned to an lvalue subroutine, but what the subroutine returned was a temporary scalar about to be discarded, so the assignment had no effect.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-assignment-to-a-temporary
indirect object slot (definition)	A			Perl Glossary							<section class="prog__container"><p>The syntactic position falling between a method call and its arguments when using the indirect object invocation syntax. (The slot is distinguished by the absence of a comma between it and the next argument.) <code class="inline"><span class="w">STDERR</span></code>  is in the indirect object slot here:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;Awake! Awake! Fear, Fire, Foes! Awake!\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlglossary.html#indirect-object-slot
ternary (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> taking three <b>operands</b>. Sometimes pronounced <b>trinary</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#ternary
qw (function)	A			Perl Functions							<section class="prog__container"><pre>qw/STRING/</pre>Quote a list of words.</section>	http://perldoc.perl.org/functions/qw.html
Comments	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Text from a <code class="inline"><span class="q">&quot;#&quot;</span></code>  character until the end of the line is a comment, and is ignored.  Exceptions include <code class="inline"><span class="q">&quot;#&quot;</span></code>  inside a string or regular expression.</p></section>	http://perldoc.perl.org/perlsyn.html#Comments
internal %<num>p might conflict with future printf extensions	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) Perl&#39;s internal routine that handles <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> formatting follows a slightly different set of rules when called from C or XS code.  Specifically, formats consisting of digits followed by &quot;p&quot; (e.g., &quot;%7p&quot;) are reserved for future use.  If you see this message, then an XS module tried to call that routine with one such reserved format.</p></section>	http://perldoc.perl.org/perldiag.html#internal-%25%3cnum%3ep-might-conflict-with-future-printf-extensions
goto (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>goto LABEL<br>goto EXPR<br>goto &amp;NAME</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">LABEL</span></code>  form finds the statement labeled with LABEL and resumes execution there.  It can&#39;t be used to get out of a block or subroutine given to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>.  It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it&#39;s usually better to use some other construct such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>. The author of Perl has never felt the need to use this form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> (in Perl, that is; C is another matter).  (The difference is that C does not offer named loops combined with loop control.  Perl does, and this replaces most structured uses of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> in other languages.)</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">EXPR</span></code>  form expects to evaluate <code class="inline"><span class="w">EXPR</span></code>  to a code reference or a label name.  If it evaluates to a code reference, it will be handled like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="i">&amp;NAME</span></code> , below.  This is especially useful for implementing tail recursion via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">__SUB__</span></code> .</p><p>If the expression evaluates to a label name, its scope will be resolved dynamically.  This allows for computed <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>s per FORTRAN, but isn&#39;t necessarily recommended if you&#39;re optimizing for maintainability:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="s">(</span><span class="q">&quot;FOO&quot;</span><span class="cm">,</span> <span class="q">&quot;BAR&quot;</span><span class="cm">,</span> <span class="q">&quot;GLARCH&quot;</span><span class="s">)</span>[<span class="i">$i</span>]<span class="sc">;</span></li></ol></pre><p>As shown in this example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">EXPR</span></code>  is exempt from the &quot;looks like a function&quot; rule.  A pair of parentheses following it does not (necessarily) delimit its argument.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto(&quot;NE&quot;).&quot;XT&quot;</span></code> is equivalent to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">NEXT</span></code> . Also, unlike most named operators, this has the same precedence as assignment.</p><p>Use of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">LABEL</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">EXPR</span></code>  to jump into a construct is deprecated and will issue a warning.  Even then, it may not be used to go into any construct that requires initialization, such as a subroutine or a <code class="inline">foreach</code>  loop.  It also can&#39;t be used to go into a construct that is optimized away.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="i">&amp;NAME</span></code>  form is quite different from the other forms of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>.  In fact, it isn&#39;t a goto in the normal sense at all, and doesn&#39;t have the stigma associated with other gotos.  Instead, it exits the current subroutine (losing any changes set by local()) and immediately calls in its place the named subroutine using the current value of @_.  This is used by <code class="inline">AUTOLOAD</code>  subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to <code class="inline"><span class="i">@_</span></code>  in the current subroutine are propagated to the other subroutine.) After the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>, not even <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span></code> will be able to tell that this routine was called first.</p><p>NAME needn&#39;t be the name of a subroutine; it can be a scalar variable containing a code reference or a block that evaluates to a code reference.</p></section>	http://perldoc.perl.org/functions/goto.html
Setting $/ to %s reference is forbidden	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign a reference to a non integer to <code class="inline"><span class="i">$/</span></code> .  In older Perls this would have behaved similarly to setting it to a reference to a positive integer, where the integer was the address of the reference. As of Perl 5.20.0 this is a fatal error, to allow future versions of Perl to use non-integer refs for more interesting purposes.</p></section>	http://perldoc.perl.org/perldiag.html#Setting-%24%2f-to-%25s-reference-is-forbidden
slurp (definition)	A			Perl Glossary							<section class="prog__container"><p>To read an entire <b>file</b> into a <b>string</b> in one operation.</p></section>	http://perldoc.perl.org/perlglossary.html#slurp
${^UNICODE} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>Reflects certain Unicode settings of Perl.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> documentation for the <code class="inline">-C</code>  switch for more information about the possible values.</p><p>This variable is set during Perl startup and is thereafter read-only.</p><p>This variable was added in Perl v5.8.2.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eUNICODE%7d
getnetbyname (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getnetbyname NAME</pre>Get networks record given name.</section>	http://perldoc.perl.org/functions/getnetbyname.html
Pod::Checker (module)	A			Perl Standard Modules							<section class="prog__container"><p>Pod::Checker, podchecker() - check pod documents for syntax errors</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Checker</span><span class="sc">;</span></li><li></li><li>  <span class="i">$num_errors</span> = <span class="i">podchecker</span><span class="s">(</span><span class="i">$filepath</span><span class="cm">,</span> <span class="i">$outputpath</span><span class="cm">,</span> <span class="i">%options</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$checker</span> = <span class="w">new</span> <span class="w">Pod::Checker</span> <span class="i">%options</span><span class="sc">;</span></li><li>  <span class="i">$checker</span><span class="i">-&gt;parse_from_file</span><span class="s">(</span><span class="i">$filepath</span><span class="cm">,</span> \\<span class="i">*STDERR</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><span name="OPTIONS%2fARGUMENTS"></span><h1>OPTIONS/ARGUMENTS</h1><p><code class="inline"><span class="i">$filepath</span></code>  is the input POD to read and <code class="inline"><span class="i">$outputpath</span></code>  is where to write POD syntax error messages. Either argument may be a scalar indicating a file-path, or else a reference to an open filehandle. If unspecified, the input-file it defaults to <code class="inline">\\<span class="i">*STDIN</span></code> , and the output-file defaults to <code class="inline">\\<span class="i">*STDERR</span></code> .</p><span name="podchecker()"></span><h2>podchecker()</h2><p>This function can take a hash of options:</p><ul> <li><span name="*-warnings*-%3d%3e-_val_"></span><b><b>-warnings</b> =&gt; <i>val</i></b> <p>Turn warnings on/off. <i>val</i> is usually 1 for on, but higher values trigger additional warnings. See <span href="http://perldoc.perl.org/Pod/Checker.html#Warnings">Warnings</span>.</p> </li> </ul></section>	http://perldoc.perl.org/Pod/Checker.html
AUTOLOAD (function)	A			Perl Functions							<section class="prog__container"><pre>AUTOLOAD</pre><p>This keyword is documented in <span href="http://perldoc.perl.org/perlsub.html#Autoloading">Autoloading in perlsub</span>.</p></section>	http://perldoc.perl.org/functions/AUTOLOAD.html
How can I lock a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Perl&#39;s builtin flock() function (see <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> for details) will call flock(2) if that exists, fcntl(2) if it doesn&#39;t (on perl version 5.004 and later), and lockf(3) if neither of the two previous system calls exists. On some systems, it may even use a different form of native locking. Here are some gotchas with Perl&#39;s flock():</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-lock-a-file%3f
File::GlobMapper (module)	A			Perl Standard Modules		[[File::Glob]]					<section class="prog__container"><p>File::GlobMapper - Extend File Glob to Allow Input and Output Files</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::GlobMapper</span> <span class="q">qw( globmap )</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$aref</span> = <span class="w">globmap</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$File::GlobMapper::Error</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$gm</span> = <span class="w">new</span> <span class="w">File::GlobMapper</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$File::GlobMapper::Error</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/GlobMapper.html
TAP::Parser::Result::Bailout (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Bailout - Bailout result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Bailout.html
The crypt() function is unimplemented due to excessive paranoia.	A			Perl Diagnostics							<section class="prog__container"><p>(F) Configure couldn&#39;t find the crypt() function on your machine, probably because your vendor didn&#39;t supply it, probably because they think the U.S. Government thinks it&#39;s a secret, or at least that they will continue to pretend that it is.  And if you quote me on that, I will deny it.</p></section>	http://perldoc.perl.org/perldiag.html#The-crypt()-function-is-unimplemented-due-to-excessive-paranoia.
import (definition)	A			Perl Glossary							<section class="prog__container"><p>To gain access to symbols that are exported from another module. See <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> in Camel chapter 27, “Functions”.</p></section>	http://perldoc.perl.org/perlglossary.html#import
Benchmark (module)	A			Perl Standard Modules		[[Devel::NYTProf]]					<section class="prog__container"><p>Benchmark - benchmark running times of Perl code</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Benchmark</span> <span class="q">qw(:all)</span> <span class="sc">;</span></li><li></li><li>    <span class="w">timethis</span> <span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="q">&quot;code&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Use Perl code in strings...</span></li><li>    <span class="i">timethese</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="s">{</span></li><li>&#09;<span class="q">&#39;Name1&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;...code1...&#39;</span><span class="cm">,</span></li><li>&#09;<span class="q">&#39;Name2&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;...code2...&#39;</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># ... or use subroutine references.</span></li><li>    <span class="i">timethese</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="s">{</span></li><li>&#09;<span class="q">&#39;Name1&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code1</span>... <span class="s">}</span><span class="cm">,</span></li><li>&#09;<span class="q">&#39;Name2&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code2</span>... <span class="s">}</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># cmpthese can be used both ways as well</span></li><li>    <span class="i">cmpthese</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="s">{</span></li><li>&#09;<span class="q">&#39;Name1&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;...code1...&#39;</span><span class="cm">,</span></li><li>&#09;<span class="q">&#39;Name2&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;...code2...&#39;</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">cmpthese</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="s">{</span></li><li>&#09;<span class="q">&#39;Name1&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code1</span>... <span class="s">}</span><span class="cm">,</span></li><li>&#09;<span class="q">&#39;Name2&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code2</span>... <span class="s">}</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># ...or in two stages</span></li><li>    <span class="i">$results</span> = <span class="i">timethese</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span></li><li>        <span class="s">{</span></li><li>&#09;    <span class="q">&#39;Name1&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code1</span>... <span class="s">}</span><span class="cm">,</span></li><li>&#09;    <span class="q">&#39;Name2&#39;</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ...<span class="w">code2</span>... <span class="s">}</span><span class="cm">,</span></li><li>        <span class="s">}</span><span class="cm">,</span></li><li>&#09;<span class="q">&#39;none&#39;</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">cmpthese</span><span class="s">(</span> <span class="i">$results</span> <span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$t</span> = <span class="i">timeit</span><span class="s">(</span><span class="i">$count</span><span class="cm">,</span> <span class="q">&#39;...other code...&#39;</span><span class="s">)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$count loops of other code took:&quot;</span><span class="cm">,</span><span class="i">timestr</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$t</span> = <span class="i">countit</span><span class="s">(</span><span class="i">$time</span><span class="cm">,</span> <span class="q">&#39;...other code...&#39;</span><span class="s">)</span></li><li>    <span class="i">$count</span> = <span class="i">$t</span><span class="i">-&gt;iters</span> <span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$count loops of other code took:&quot;</span><span class="cm">,</span><span class="i">timestr</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># enable hires wallclock timing if possible</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Benchmark</span> <span class="q">&#39;:hireswallclock&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Benchmark.html
I18N::LangTags::List (module)	A			Perl Standard Modules		[[I18N::LangTags]]					<section class="prog__container"><p>I18N::LangTags::List -- tags and names for human languages</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::LangTags::List</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Parlez-vous... &quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;, &#39;</span><span class="cm">,</span></li><li>      <span class="i">I18N::LangTags::List::name</span><span class="s">(</span><span class="q">&#39;elx&#39;</span><span class="s">)</span> || <span class="q">&#39;unknown_language&#39;</span><span class="cm">,</span></li><li>      <span class="i">I18N::LangTags::List::name</span><span class="s">(</span><span class="q">&#39;ar-Kw&#39;</span><span class="s">)</span> || <span class="q">&#39;unknown_language&#39;</span><span class="cm">,</span></li><li>      <span class="i">I18N::LangTags::List::name</span><span class="s">(</span><span class="q">&#39;en&#39;</span><span class="s">)</span> || <span class="q">&#39;unknown_language&#39;</span><span class="cm">,</span></li><li>      <span class="i">I18N::LangTags::List::name</span><span class="s">(</span><span class="q">&#39;en-CA&#39;</span><span class="s">)</span> || <span class="q">&#39;unknown_language&#39;</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="cm">,</span> <span class="q">&quot;?\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>prints:</p><pre class="verbatim"><ol><li>  Parlez-vous... Elamite, Kuwait Arabic, English, Canadian English?</li></ol></pre></section>	http://perldoc.perl.org/I18N/LangTags/List.html
flock (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>flock FILEHANDLE,OPERATION</pre><p>Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true for success, false on failure.  Produces a fatal error if used on a machine that doesn&#39;t implement flock(2), fcntl(2) locking, or lockf(3). <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> is Perl&#39;s portable file-locking interface, although it locks entire files only, not records.</p><p>Two potentially non-obvious but traditional <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> semantics are that it waits indefinitely until the lock is granted, and that its locks are <b>merely advisory</b>.  Such discretionary locks are more flexible, but offer fewer guarantees.  This means that programs that do not also use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> may modify files locked with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code>.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span>,  your port&#39;s specific documentation, and your system-specific local manpages for details.  It&#39;s best to assume traditional behavior if you&#39;re writing portable programs.  (But if you&#39;re not, you should as always feel perfectly free to write for your own system&#39;s idiosyncrasies (sometimes called &quot;features&quot;).  Slavish adherence to portability concerns shouldn&#39;t get in the way of your getting your job done.)</p><p>OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined with LOCK_NB.  These constants are traditionally valued 1, 2, 8 and 4, but you can use the symbolic names if you import them from the <span href="http://perldoc.perl.org/Fcntl.html">Fcntl</span> module, either individually, or as a group using the <code class="inline"><span class="j">:</span><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code>  tag.  LOCK_SH requests a shared lock, LOCK_EX requests an exclusive lock, and LOCK_UN releases a previously requested lock.  If LOCK_NB is bitwise-or&#39;ed with LOCK_SH or LOCK_EX, then <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> returns immediately rather than blocking waiting for the lock; check the return status to see if you got it.</p><p>To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE before locking or unlocking it.</p><p>Note that the emulation built with lockf(3) doesn&#39;t provide shared locks, and it requires that FILEHANDLE be open with write intent.  These are the semantics that lockf(3) implements.  Most if not all systems implement lockf(3) in terms of fcntl(2) locking, though, so the differing semantics shouldn&#39;t bite too many people.</p><p>Note that the fcntl(2) emulation of flock(3) requires that FILEHANDLE be open with read intent to use LOCK_SH and requires that it be open with write intent to use LOCK_EX.</p><p>Note also that some versions of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> cannot lock things over the network; you would need to use the more system-specific <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span></code> for that.  If you like you can force Perl to ignore your system&#39;s flock(2) function, and so provide its own fcntl(2)-based emulation, by passing the switch <code class="inline">-<span class="w">Ud_flock</span></code>  to the <i>Configure</i> program when you configure and build a new Perl.</p><p>Here&#39;s a mailbox appender for BSD systems.</p><pre class="verbatim"><ol><li>    <span class="c"># import LOCK_* and SEEK_END constants</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">qw(:flock SEEK_END)</span><span class="sc">;</span></li><li></li><li><span name="lock"></span>    sub <span class="m">lock</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$fh</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="w">LOCK_EX</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot lock mailbox - $!\\n&quot;</span><span class="sc">;</span></li><li></li><li>        <span class="c"># and, in case someone appended while we were waiting...</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="w">SEEK_END</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot seek - $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="unlock"></span>    sub <span class="m">unlock</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$fh</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="w">LOCK_UN</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot unlock mailbox - $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mbox</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&quot;</span><span class="cm">,</span> <span class="q">&quot;/usr/spool/mail/$ENV{&#39;USER&#39;}&quot;</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open mailbox: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/lock.html">lock</span><span class="s">(</span><span class="i">$mbox</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$mbox</span> <span class="i">$msg</span><span class="cm">,</span><span class="q">&quot;\\n\\n&quot;</span><span class="sc">;</span></li><li>    <span class="i">unlock</span><span class="s">(</span><span class="i">$mbox</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>On systems that support a real flock(2), locks are inherited across fork() calls, whereas those that must resort to the more capricious fcntl(2) function lose their locks, making it seriously harder to write servers.</p><p>See also <span href="http://perldoc.perl.org/DB_File.html">DB_File</span> for other flock() examples.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#flock">flock in perlport</span>.</p></section>	http://perldoc.perl.org/functions/flock.html
default (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>value</b> chosen for you if you don’t supply a value of your own.</p></section>	http://perldoc.perl.org/perlglossary.html#default
exception (definition)	A			Perl Glossary							<section class="prog__container"><p>A fancy term for an error. See <b>fatal error</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#exception
Encode::JP::JIS7 (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::JP::JIS7 -- internally used by Encode::JP</p> </section>	http://perldoc.perl.org/Encode/JP/JIS7.html
backreference (definition)	A			Perl Glossary							<section class="prog__container"><p>A substring <b>captured</b> by a subpattern within unadorned parentheses in a <b>regex</b>. Backslashed decimal numbers (<code class="inline">\\<span class="n">1</span></code> , <code class="inline">\\<span class="n">2</span></code> , etc.) later in the same pattern refer back to the corresponding subpattern in the current match. Outside the pattern, the numbered variables (<code class="inline"><span class="i">$1</span></code> , <code class="inline"><span class="i">$2</span></code> , etc.) continue to refer to these same values, as long as the pattern was the last successful match of the current <b>dynamic scope</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#backreference
Does Perl have a round() function? What about ceil() and floor()? Trig functions?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Remember that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/int.html">int()</span></code> merely truncates toward 0. For rounding to a certain number of digits, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf()</span></code> is usually the easiest route.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span><span class="s">(</span><span class="q">&quot;%.3f&quot;</span><span class="cm">,</span> <span class="n">3.1415926535</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># prints 3.142</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module (part of the standard Perl distribution) implements <code class="inline"><span class="i">ceil</span><span class="s">(</span><span class="s">)</span></code> , <code class="inline"><span class="i">floor</span><span class="s">(</span><span class="s">)</span></code> , and a number of other mathematical and trigonometric functions.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ceil</span>   = <span class="i">ceil</span><span class="s">(</span><span class="n">3.5</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># 4</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$floor</span>  = <span class="i">floor</span><span class="s">(</span><span class="n">3.5</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># 3</span></li></ol></pre><p>In 5.000 to 5.003 perls, trigonometry was done in the <span href="http://perldoc.perl.org/Math/Complex.html">Math::Complex</span> module. With 5.004, the <span href="http://perldoc.perl.org/Math/Trig.html">Math::Trig</span> module (part of the standard Perl distribution) implements the trigonometric functions. Internally it uses the <span href="http://perldoc.perl.org/Math/Complex.html">Math::Complex</span> module and some functions can break out from the real axis into the complex plane, for example the inverse sine of 2.</p><p>Rounding in financial applications can have serious implications, and the rounding method used should be specified precisely. In these cases, it probably pays not to trust whichever system of rounding is being used by Perl, but instead to implement the rounding function you need yourself.</p><p>To see why, notice how you&#39;ll still have an issue on half-way-point alternation:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="n">1.01</span><span class="sc">;</span> <span class="i">$i</span> += <span class="n">0.05</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%.1f &quot;</span><span class="cm">,</span><span class="i">$i</span><span class="s">}</span></li><li></li><li>    <span class="n">0.0</span> <span class="n">0.1</span> <span class="n">0.1</span> <span class="n">0.2</span> <span class="n">0.2</span> <span class="n">0.2</span> <span class="n">0.3</span> <span class="n">0.3</span> <span class="n">0.4</span> <span class="n">0.4</span> <span class="n">0.5</span> <span class="n">0.5</span> <span class="n">0.6</span> <span class="n">0.7</span> <span class="n">0.7</span></li><li>    <span class="n">0.8</span> <span class="n">0.8</span> <span class="n">0.9</span> <span class="n">0.9</span> <span class="n">1.0</span> <span class="n">1.0</span></li></ol></pre><p>Don&#39;t blame Perl. It&#39;s the same as in C. IEEE says we have to do this. Perl numbers whose absolute values are integers under 2**31 (on 32-bit machines) will work pretty much like mathematical integers. Other numbers are not guaranteed.</p></section>	http://perldoc.perl.org/perlfaq4.html#Does-Perl-have-a-round()-function%3f-What-about-ceil()-and-floor()%3f-Trig-functions%3f
Unbalanced string table refcount: (%d) for "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) On exit, Perl found some strings remaining in the shared string table used for copy on write and for hash keys.  The entries should have been freed, so this indicates a bug somewhere.</p></section>	http://perldoc.perl.org/perldiag.html#Unbalanced-string-table-refcount%3a-(%25d)-for-%22%25s%22
readable (definition)	A			Perl Glossary							<section class="prog__container"><p>With respect to files, one that has the proper permission bit set to let you access the file. With respect to computer programs, one that’s written well enough that someone has a chance of figuring out what it’s trying to do.</p></section>	http://perldoc.perl.org/perlglossary.html#readable
CPAN::Debug (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Debug - internal debugging for CPAN.pm</p> </section>	http://perldoc.perl.org/CPAN/Debug.html
Unterminated verb pattern in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a pattern of the form <code class="inline"><span class="s">(</span><span class="i">*VERB</span><span class="s">)</span></code>  but did not terminate the pattern with a <code class="inline">)</code>.  Fix the pattern and retry.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-verb-pattern-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
PODs: Embedded Documentation	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Perl has a mechanism for intermixing documentation with source code. While it&#39;s expecting the beginning of a new statement, if the compiler encounters a line that begins with an equal sign and a word, like this</p><pre class="verbatim"><ol><li>    =<span class="w">head1</span> <span class="w">Here</span> <span class="w">There</span> <span class="w">Be</span> <span class="w">Pods</span>!</li></ol></pre><p>Then that text and all remaining text up through and including a line beginning with <code class="inline"><span class="pd">=cut</span></code>  will be ignored.  The format of the intervening text is described in <span href="http://perldoc.perl.org/perlpod.html">perlpod</span>.</p><p>This allows you to intermix your source code and your documentation text freely, as in</p><pre class="verbatim"><ol><li>    =<span class="w">item</span> <span class="i">snazzle</span><span class="s">(</span><span class="i">$)</span></li><li></li><li>    <span class="w">The</span> <span class="i">snazzle</span><span class="s">(</span><span class="s">)</span> <span class="w">function</span> <span class="w">will</span> <span class="w">behave</span> <span class="w">in</span> <span class="w">the</span> <span class="w">most</span> <span class="w">spectacular</span></li><li>    <span class="w">form</span> <span class="w">that</span> <span class="w">you</span> <span class="w">can</span> <span class="w">possibly</span> <span class="w">imagine</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/not.html">not</span> <span class="w">even</span> <span class="w">excepting</span></li><li>    <span class="w">cybernetic</span> <span class="w">pyrotechnics</span>.</li><li></li><li>    =<span class="w">cut</span> <span class="w">back</span> <span class="w">to</span> <span class="w">the</span> <span class="w">compiler</span><span class="cm">,</span> <span class="w">nuff</span> <span class="w">of</span> <span class="w">this</span> <span class="w">pod</span> <span class="w">stuff</span>!</li><li></li><li><span name="snazzle"></span>    sub <span class="m">snazzle($)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$thingie</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        .........</li><li>    <span class="s">}</span></li></ol></pre><p>Note that pod translators should look at only paragraphs beginning with a pod directive (it makes parsing easier), whereas the compiler actually knows to look for pod escapes even in the middle of a paragraph.  This means that the following secret stuff will be ignored by both the compiler and the translators.</p><pre class="verbatim"><ol><li>    <span class="i">$a</span>=<span class="n">3</span><span class="sc">;</span></li><li>    =<span class="w">secret</span> <span class="w">stuff</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Neither POD nor CODE!?&quot;</span></li><li>    =<span class="w">cut</span> <span class="w">back</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;got $a\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>You probably shouldn&#39;t rely upon the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn()</span></code> being podded out forever. Not all pod translators are well-behaved in this regard, and perhaps the compiler will become pickier.</p><p>One may also use pod directives to quickly comment out a section of code.</p></section>	http://perldoc.perl.org/perlsyn.html#PODs%3a-Embedded-Documentation
How do I set CPU limits?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by Xho)</p><p>Use the <span href="http://search.cpan.org/perldoc/BSD::Resource">BSD::Resource</span> module from CPAN. As an example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">BSD::Resource</span><span class="sc">;</span></li><li>    <span class="i">setrlimit</span><span class="s">(</span><span class="w">RLIMIT_CPU</span><span class="cm">,</span><span class="n">10</span><span class="cm">,</span><span class="n">20</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>This sets the soft and hard limits to 10 and 20 seconds, respectively. After 10 seconds of time spent running on the CPU (not &quot;wall&quot; time), the process will be sent a signal (XCPU on some systems) which, if not trapped, will cause the process to terminate. If that signal is trapped, then after 10 more seconds (20 seconds in total) the process will be killed with a non-trappable signal.</p><p>See the <span href="http://search.cpan.org/perldoc/BSD::Resource">BSD::Resource</span> and your systems documentation for the gory details.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-set-CPU-limits%3f
operating system (definition)	A			Perl Glossary		[[architecture]]\n[[platform]]					<section class="prog__container"><p>A special program that runs on the bare machine and hides the gory details of managing <b>processes</b> and <b>devices</b>. Usually used in a looser sense to indicate a particular culture of programming. The loose sense can be used at varying levels of specificity. At one extreme, you might say that all versions of Unix and Unix-lookalikes are the same operating system (upsetting many people, especially lawyers and other advocates). At the other extreme, you could say this particular version of this particular vendor’s operating system is different from any other version of this or any other vendor’s operating system. Perl is much more portable across operating systems than many other languages. </p></section>	http://perldoc.perl.org/perlglossary.html#operating-system
av_reify called on tied array	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) This indicates that something went wrong and Perl got <i>very</i> confused about <code class="inline"><span class="i">@_</span></code>  or <code class="inline"><span class="i">@DB::args</span></code>  being tied.</p></section>	http://perldoc.perl.org/perldiag.html#av_reify-called-on-tied-array
panic: pad_swipe po	A			Perl Diagnostics							<section class="prog__container"><p>(P) An invalid scratch pad offset was detected internally.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_swipe-po
How can I read in a file by paragraphs?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Use the <code class="inline"><span class="i">$/</span></code>  variable (see <span href="http://perldoc.perl.org/perlvar.html">perlvar</span> for details). You can either set it to <code class="inline"><span class="q">&quot;&quot;</span></code>  to eliminate empty paragraphs (<code class="inline"><span class="q">&quot;abc\\n\\n\\n\\ndef&quot;</span></code> , for instance, gets treated as two paragraphs and not three), or <code class="inline"><span class="q">&quot;\\n\\n&quot;</span></code>  to accept empty paragraphs.</p><p>Note that a blank line must have no blanks in it. Thus <code class="inline"><span class="q">&quot;fred\\n \\nstuff\\n\\n&quot;</span></code>  is one paragraph, but <code class="inline"><span class="q">&quot;fred\\n\\nstuff\\n\\n&quot;</span></code>  is two.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-read-in-a-file-by-paragraphs%3f
return value (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>value</b> produced by a <b>subroutine</b> or <b>expression</b> when evaluated. In Perl, a return value may be either a <b>list</b> or a <b>scalar</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#return-value
Variable "%s" is not available	A			Perl Diagnostics							<section class="prog__container"><p>(W closure) During compilation, an inner named subroutine or eval is attempting to capture an outer lexical that is not currently available. This can happen for one of two reasons.  First, the outer lexical may be declared in an outer anonymous subroutine that has not yet been created. (Remember that named subs are created at compile time, while anonymous subs are created at run-time.)  For example,</p><pre class="verbatim"><ol><li><span name="f"></span>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$a</span><span class="sc">;</span> sub <span class="m">f</span> <span class="s">{</span> <span class="i">$a</span> <span class="s">}</span> <span class="s">}</span></li></ol></pre><p>At the time that f is created, it can&#39;t capture the current value of $a, since the anonymous subroutine hasn&#39;t been created yet.  Conversely, the following won&#39;t give a warning since the anonymous subroutine has by now been created and is live:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$a</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;sub f { $a }&#39;</span> <span class="s">}</span>-&gt;<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The second situation is caused by an eval accessing a variable that has gone out of scope, for example,</p><pre class="verbatim"><ol><li><span name="f"></span>    sub <span class="m">f</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$a</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;$a&#39;</span> <span class="s">}</span></li><li>    <span class="s">}</span></li><li>    <span class="i">f</span><span class="s">(</span><span class="s">)</span>-&gt;<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Here, when the &#39;$a&#39; in the eval is being compiled, f() is not currently being executed, so its $a is not available for capture.</p></section>	http://perldoc.perl.org/perldiag.html#Variable-%22%25s%22-is-not-available
"my %s" used in sort comparison	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The package variables $a and $b are used for sort comparisons. You used $a or $b in as an operand to the <code class="inline">&lt;=&gt;</code>  or <code class="inline">cmp</code>  operator inside a sort comparison block, and the variable had earlier been declared as a lexical variable.  Either qualify the sort variable with the package name, or rename the lexical variable.</p></section>	http://perldoc.perl.org/perldiag.html#%22my-%25s%22-used-in-sort-comparison
Final $ should be \$ or $name	A			Perl Diagnostics							<section class="prog__container"><p>(F) You must now decide whether the final $ in a string was meant to be a literal dollar sign, or was meant to introduce a variable name that happens to be missing.  So you have to put either the backslash or the name.</p></section>	http://perldoc.perl.org/perldiag.html#Final-%24-should-be-%5c%24-or-%24name
File::Spec::Mac (module)	A			Perl Standard Modules		[[File::Spec]]\n[[File::Spec::Unix]]					<section class="prog__container"><p>File::Spec::Mac - File::Spec for Mac OS (Classic)</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::Mac</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Mac.html
grapheme (definition)	A			Perl Glossary							<section class="prog__container"><p>A graphene is an allotrope of carbon arranged in a hexagonal crystal lattice one atom thick. A <b>grapheme</b>, or more fully, a <i>grapheme cluster string</i> is a single user-visible <b>character</b>, which may in turn be several characters (<b>codepoints</b>) long. For example, a carriage return plus a line feed is a single grapheme but two characters, while a “ȫ” is a single grapheme but one, two, or even three characters, depending on <b>normalization</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#grapheme
How can I make my Perl program take less memory?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>When it comes to time-space tradeoffs, Perl nearly always prefers to throw memory at a problem. Scalars in Perl use more memory than strings in C, arrays take more than that, and hashes use even more. While there&#39;s still a lot to be done, recent releases have been addressing these issues. For example, as of 5.004, duplicate hash keys are shared amongst all hashes using them, so require no reallocation.</p><p>In some cases, using substr() or vec() to simulate arrays can be highly beneficial. For example, an array of a thousand booleans will take at least 20,000 bytes of space, but it can be turned into one 125-byte bit vector--a considerable memory savings. The standard Tie::SubstrHash module can also help for certain types of data structure. If you&#39;re working with specialist data structures (matrices, for instance) modules that implement these in C may use less memory than equivalent Perl modules.</p><p>Another thing to try is learning whether your Perl was compiled with the system malloc or with Perl&#39;s builtin malloc. Whichever one it is, try using the other one and see whether this makes a difference. Information about malloc is in the <i>INSTALL</i> file in the source distribution. You can find out whether you are using perl&#39;s malloc by typing <code class="inline">perl -V:usemymalloc</code>.</p><p>Of course, the best way to save memory is to not do anything to waste it in the first place. Good programming practices can go a long way toward this:</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-make-my-Perl-program-take-less-memory%3f
Binary "x" operator	A			Perl Operators\nPerl Multiplicative Operators							<section class="prog__container">Binary &quot;x&quot; is the repetition operator. In scalar context or if the left operand is not enclosed in parentheses, it returns a string consisting of the left operand repeated the number of times specified by the right operand. In list context, if the left operand is enclosed in parentheses or is a list formed by qw/ STRING /, it repeats the list. If the right operand is zero or negative (raising a warning on negative), it returns an empty string or an empty list, depending on the context.</section>	http://perldoc.perl.org/perlop.html#Multiplicative-Operators
TAP::Formatter::File (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::File - Harness output delegate for file output</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Formatter::File</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$harness</span> = <span class="w">TAP::Formatter::File</span><span class="w">-&gt;new</span><span class="s">(</span> \\<span class="i">%args</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><span name="open_test"></span><h2><code class="inline"><span class="w">open_test</span></code> </h2><p>See <span href="http://perldoc.perl.org/TAP/Formatter/Base.html">TAP::Formatter::Base</span></p><div class="hud_container" id="page_index">     <div class="hud_header" id="page_index_header">       <div class="hud_close" id="page_index_close"><span href="http://perldoc.perl.org/TAP/Formatter/File.html#" onclick="pageIndex.hide();return false;"></span></div>       <div class="hud_title" id="page_index_title"><span class="hud_span_top">Page index</span></div>       <div class="hud_topright" id="page_index_topright"></div>     </div>     <div class="hud_content" id="page_index_content">       <ul><li><span href="http://perldoc.perl.org/TAP/Formatter/File.html#NAME">NAME</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/File.html#VERSION">VERSION</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/File.html#DESCRIPTION">DESCRIPTION</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/File.html#SYNOPSIS">SYNOPSIS</span><ul><li><span href="http://perldoc.perl.org/TAP/Formatter/File.html#open_test">open_test</span></li></ul></li></ul>     </div>     <div class="hud_footer" id="page_index_footer">       <div class="hud_bottomleft" id="page_index_bottomleft"></div>       <div class="hud_bottom" id="page_index_bottom"><span class="hud_span_bottom"></span></div>       <div class="hud_resize" id="page_index_resize"></div>     </div>   </div></section>	http://perldoc.perl.org/TAP/Formatter/File.html
Negative offset to vec in lvalue context	A			Perl Diagnostics							<section class="prog__container"><p>(F) When <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span></code> is called in an lvalue context, the second argument must be greater than or equal to zero.</p></section>	http://perldoc.perl.org/perldiag.html#Negative-offset-to-vec-in-lvalue-context
shift (function)	A			Perl Functions\nPerl Functions for real @ARRAYs							<section class="prog__container"><pre>shift ARRAY<br>shift EXPR<br>shift</pre><p>Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down.  If there are no elements in the array, returns the undefined value.  If ARRAY is omitted, shifts the <code class="inline"><span class="i">@_</span></code>  array within the lexical scope of subroutines and formats, and the <code class="inline"><span class="i">@ARGV</span></code>  array outside a subroutine and also within the lexical scopes established by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">STRING</span></code> , <code class="inline">BEGIN <span class="s">{</span><span class="s">}</span></code> , <code class="inline">INIT <span class="s">{</span><span class="s">}</span></code> , <code class="inline">CHECK <span class="s">{</span><span class="s">}</span></code> , <code class="inline">UNITCHECK <span class="s">{</span><span class="s">}</span></code> , and <code class="inline">END <span class="s">{</span><span class="s">}</span></code>  constructs.</p><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code> is considered highly experimental. The exact behaviour may change in a future version of Perl.</p><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so push/pop/etc work on scalars (experimental)</span></li></ol></pre><p>See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code>.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code> do the same thing to the left end of an array that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code> do to the right end.</p></section>	http://perldoc.perl.org/functions/shift.html
environment variable (definition)	A			Perl Glossary							<section class="prog__container"><p>A mechanism by which some high-level agent such as a user can pass its preferences down to its future offspring (child <b>processes</b>, grandchild processes, great-grandchild processes, and so on). Each environment variable is a <b>key</b>/<b>value</b> pair, like one entry in a <b>hash</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#environment-variable
How do I extract URLs?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/HTML::SimpleLinkExtor">HTML::SimpleLinkExtor</span> will extract URLs from HTML, it handles anchors, images, objects, frames, and many other tags that can contain a URL. If you need anything more complex, you can create your own subclass of <span href="http://search.cpan.org/perldoc/HTML::LinkExtor">HTML::LinkExtor</span> or <span href="http://search.cpan.org/perldoc/HTML::Parser">HTML::Parser</span>. You might even use <span href="http://search.cpan.org/perldoc/HTML::SimpleLinkExtor">HTML::SimpleLinkExtor</span> as an example for something specifically suited to your needs.</p><p>You can use <span href="http://search.cpan.org/perldoc/URI::Find">URI::Find</span> to extract URLs from an arbitrary text document.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-extract-URLs%3f
How can I compare two dates and find the difference?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You could just store all your dates as a number and then subtract. Life isn&#39;t always that simple though.</p><p>The <span href="http://perldoc.perl.org/Time/Piece.html">Time::Piece</span> module, which comes with Perl, replaces <span href="http://perldoc.perl.org/functions/localtime.html">localtime</span> with a version that returns an object. It also overloads the comparison operators so you can compare them directly:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Piece</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$date1</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span> <span class="i">$some_time</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$date2</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span> <span class="i">$some_other_time</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$date1</span> &lt; <span class="i">$date2</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The date was in the past\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can also get differences with a subtraction, which returns a <span href="http://perldoc.perl.org/Time/Seconds.html">Time::Seconds</span> object:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$diff</span> = <span class="i">$date1</span> - <span class="i">$date2</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The difference is &quot;</span><span class="cm">,</span> <span class="i">$date_diff</span><span class="i">-&gt;days</span><span class="cm">,</span> <span class="q">&quot; days\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If you want to work with formatted dates, the <span href="http://search.cpan.org/perldoc/Date::Manip">Date::Manip</span>, <span href="http://search.cpan.org/perldoc/Date::Calc">Date::Calc</span>, or <span href="http://search.cpan.org/perldoc/DateTime">DateTime</span> modules can help you.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-compare-two-dates-and-find-the-difference%3f
No setregid available	A			Perl Diagnostics							<section class="prog__container"><p>(F) Configure didn&#39;t find anything resembling the setregid() call for your system.</p></section>	http://perldoc.perl.org/perldiag.html#No-setregid-available
"%s" subroutine &%s masks earlier declaration in same %s	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) A &quot;my&quot; or &quot;state&quot; subroutine has been redeclared in the current scope or statement, effectively eliminating all access to the previous instance.  This is almost always a typographical error. Note that the earlier subroutine will still exist until the end of the scope or until all closure references to it are destroyed.</p></section>	http://perldoc.perl.org/perldiag.html#%22%25s%22-subroutine-%26%25s-masks-earlier-declaration-in-same-%25s
%s "\x%X" does not map to Unicode	A			Perl Diagnostics							<section class="prog__container"><p>(S utf8) When reading in different encodings, Perl tries to map everything into Unicode characters.  The bytes you read in are not legal in this encoding.  For example</p><pre class="verbatim"><ol><li>    utf8 &quot;\\xE4&quot; does not map to Unicode</li></ol></pre><p>if you try to read in the a-diaereses Latin-1 as UTF-8.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-%22%5cx%25X%22-does-not-map-to-Unicode
static (definition)	A			Perl Glossary							<section class="prog__container"><p>Varying slowly compared to something else. (Unfortunately, everything is relatively stable compared to something else, except for certain elementary particles, and we’re not so sure about them.) In computers, where things are supposed to vary rapidly, “static” has a derogatory connotation, indicating a slightly dysfunctional <b>variable</b>, <b>subroutine</b>, or <b>method</b>. In Perl culture, the word is politely avoided.</p><p>If you’re a C or C++ programmer, you might be looking for Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> keyword.</p></section>	http://perldoc.perl.org/perlglossary.html#static
atomic operation (definition)	A			Perl Glossary							<section class="prog__container"><p>When Democritus gave the word “atom” to the indivisible bits of matter, he meant literally something that could not be cut: <i>ἀ-</i> (not) + <i>-τομος</i> (cuttable). An atomic operation is an action that can’t be interrupted, not one forbidden in a nuclear-free zone.</p></section>	http://perldoc.perl.org/perlglossary.html#atomic-operation
Can't return %s from lvalue subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl detected an attempt to return illegal lvalues (such as temporary or readonly values) from a subroutine used as an lvalue.  This is not allowed.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-return-%25s-from-lvalue-subroutine
Can't find an opnumber for "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) A string of a form <code class="inline"><span class="w">CORE::word</span></code>  was given to prototype(), but there is no builtin with the name <code class="inline"><span class="w">word</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-an-opnumber-for-%22%25s%22
binmode() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried binmode() on a filehandle that was never opened. Check your control flow and number of arguments.</p></section>	http://perldoc.perl.org/perldiag.html#binmode()-on-closed-filehandle-%25s
syntax error in file %s at line %d, next 2 tokens "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) This error is likely to occur if you run a perl5 script through a perl4 interpreter, especially if the next 2 tokens are &quot;use strict&quot; or &quot;my $var&quot; or &quot;our $var&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#syntax-error-in-file-%25s-at-line-%25d%2c-next-2-tokens-%22%25s%22
pack/unpack repeat count overflow	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t specify a repeat count so large that it overflows your signed integers.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#pack%2funpack-repeat-count-overflow
symbol table (definition)	A			Perl Glossary							<section class="prog__container"><p>Where a <b>compiler</b> remembers symbols. A program like Perl must somehow remember all the names of all the <b>variables</b>, <b>filehandles</b>, and <b>subroutines</b> you’ve used. It does this by placing the names in a symbol table, which is implemented in Perl using a <b>hash table</b>. There is a separate symbol table for each <b>package</b> to give each package its own <b>namespace</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#symbol-table
elseif should be elsif	A			Perl Diagnostics							<section class="prog__container"><p>(S syntax) There is no keyword &quot;elseif&quot; in Perl because Larry thinks it&#39;s ugly.  Your code will be interpreted as an attempt to call a method named &quot;elseif&quot; for the class returned by the following block.  This is unlikely to be what you want.</p></section>	http://perldoc.perl.org/perldiag.html#elseif-should-be-elsif
null string (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>string</b> containing no characters, not to be confused with a string containing a <b>null character</b>, which has a positive length and is <b>true</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#null-string
How can I tell if a variable is tainted?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>You can use the tainted() function of the Scalar::Util module, available from CPAN (or included with Perl since release 5.8.0). See also <span href="http://perldoc.perl.org/perlsec.html#Laundering-and-Detecting-Tainted-Data">Laundering and Detecting Tainted Data in perlsec</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-tell-if-a-variable-is-tainted%3f
SDBM_File (module)	A			Perl Standard Modules							<section class="prog__container"><p>SDBM_File - Tied access to sdbm files</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span>   <span class="c"># For O_RDWR, O_CREAT, etc.</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span><span class="s">(</span><span class="i">%h</span><span class="cm">,</span> <span class="q">&#39;SDBM_File&#39;</span><span class="cm">,</span> <span class="q">&#39;filename&#39;</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span><span class="s">)</span></li><li>   or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Couldn&#39;t tie SDBM file &#39;filename&#39;: $!; aborting&quot;</span><span class="sc">;</span></li><li></li><li> <span class="c"># Now read and change the hash</span></li><li> <span class="i">$h</span>{<span class="w">newkey</span>} = <span class="w">newvalue</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$h</span>{<span class="w">oldkey</span>}<span class="sc">;</span> </li><li> ...</li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="i">%h</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/SDBM_File.html
command (definition)	A			Perl Glossary							<section class="prog__container"><p>In <b>shell</b> programming, the syntactic combination of a program name and its arguments. More loosely, anything you type to a shell (a command interpreter) that starts it doing something. Even more loosely, a Perl <b>statement</b>, which might start with a <b>label</b> and typically ends with a semicolon.</p></section>	http://perldoc.perl.org/perlglossary.html#command
=pod	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that this paragraph begins a Pod block.  (If we are already in the middle of a Pod block, this command has no effect at all.)  If there is any text in this command paragraph after &quot;=pod&quot;, it must be ignored.  Examples:</p><pre class="verbatim"><ol><li>  =<span class="w">pod</span></li><li></li><li>  <span class="w">This</span> <span class="w">is</span> <span class="w">a</span> <span class="w">plain</span> <span class="w">Pod</span> <span class="w">paragraph</span>.</li><li></li><li>  =<span class="w">pod</span> <span class="w">This</span> <span class="w">text</span> <span class="w">is</span> <span class="w">ignored</span>.</li></ol></pre></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dpod%22
Undefined subroutine in sort	A			Perl Diagnostics							<section class="prog__container"><p>(F) The sort comparison routine specified is declared but doesn&#39;t seem to have been defined yet.  See <span href="http://perldoc.perl.org/functions/sort.html">sort</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-subroutine-in-sort
service (definition)	A			Perl Glossary							<section class="prog__container"><p>Something you do for someone else to make them happy, like giving them the time of day (or of their life). On some machines, well-known services are listed by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getservent.html">getservent</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#service
Where can I get Perl macros for vi?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>For a complete version of Tom Christiansen&#39;s vi configuration file, see <span href="http://www.cpan.org/authors/Tom_Christiansen/scripts/toms.exrc.gz">http://www.cpan.org/authors/Tom_Christiansen/scripts/toms.exrc.gz</span> , the standard benchmark file for vi emulators. The file runs best with nvi, the current version of vi out of Berkeley, which incidentally can be built with an embedded Perl interpreter--see <span href="http://www.cpan.org/src/misc/">http://www.cpan.org/src/misc/</span> .</p></section>	http://perldoc.perl.org/perlfaq3.html#Where-can-I-get-Perl-macros-for-vi%3f
Odd number of elements in anonymous hash	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You specified an odd number of elements to initialize a hash, which is odd, because hashes come in key/value pairs.</p></section>	http://perldoc.perl.org/perldiag.html#Odd-number-of-elements-in-anonymous-hash
ExtUtils::Liblist (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::Liblist - determine libraries to use and how to use them</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::Liblist</span><span class="sc">;</span></li><li></li><li>  <span class="i">$MM</span><span class="i">-&gt;ext</span><span class="s">(</span><span class="i">$potential_libs</span><span class="cm">,</span> <span class="i">$verbose</span><span class="cm">,</span> <span class="i">$need_names</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Usually you can get away with:</span></li><li>  <span class="w">ExtUtils::Liblist</span><span class="w">-&gt;ext</span><span class="s">(</span><span class="i">$potential_libs</span><span class="cm">,</span> <span class="i">$verbose</span><span class="cm">,</span> <span class="i">$need_names</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Liblist.html
Useless localization of %s	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The localization of lvalues such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local($x=10)</span></code> is legal, but in fact the local() currently has no effect.  This may change at some point in the future, but in the meantime such code is discouraged.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-localization-of-%25s
collating sequence (definition)	A			Perl Glossary							<section class="prog__container"><p>The order into which <b>characters</b> sort. This is used by <b>string</b> comparison routines to decide, for example, where in this glossary to put “collating sequence”.</p></section>	http://perldoc.perl.org/perlglossary.html#collating-sequence
zombie (definition)	A			Perl Glossary							<section class="prog__container"><p>A process that has died (exited) but whose parent has not yet received proper notification of its demise by virtue of having called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span></code>. If you <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code>, you must clean up after your child processes when they exit; otherwise, the process table will fill up and your system administrator will Not Be Happy with you.</p></section>	http://perldoc.perl.org/perlglossary.html#zombie
How can I know how many entries are in a hash?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>This is very similar to &quot;How do I process an entire hash?&quot;, also in <span href="http://perldoc.perl.org/perlfaq4.html">perlfaq4</span>, but a bit simpler in the common cases.</p><p>You can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys()</span></code> built-in function in scalar context to find out have many entries you have in a hash:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key_count</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span> <span class="c"># must be scalar context!</span></li></ol></pre><p>If you want to find out how many entries have a defined value, that&#39;s a bit different. You have to check each value. A <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> is handy:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$defined_value_count</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>You can use that same structure to count the entries any way that you like. If you want the count of the keys with vowels in them, you just test for that instead:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vowel_count</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="q">/[aeiou]/</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> in scalar context returns the count. If you want the list of matching items, just use it in list context instead:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@defined_values</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys()</span></code> function also resets the iterator, which means that you may see strange results if you use this between uses of other hash operators such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code>.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-know-how-many-entries-are-in-a-hash%3f
-f	A			Perl Command-Line Switches							<section class="prog__container"><p>Disable executing <i>$Config{sitelib}/sitecustomize.pl</i> at startup.</p><p>Perl can be built so that it by default will try to execute <i>$Config{sitelib}/sitecustomize.pl</i> at startup (in a BEGIN block). This is a hook that allows the sysadmin to customize how Perl behaves. It can for instance be used to add entries to the @INC array to make Perl find modules in non-standard locations.</p><p>Perl actually inserts the following code:</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$!</span><span class="sc">;</span> -f <span class="q">&quot;$Config{sitelib}/sitecustomize.pl&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li>            &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="q">&quot;$Config{sitelib}/sitecustomize.pl&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Since it is an actual <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> (not a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>), <i>sitecustomize.pl</i> doesn&#39;t need to return a true value. The code is run in package <code class="inline"><span class="w">main</span></code> , in its own lexical scope. However, if the script dies, <code class="inline"><span class="i">$@</span></code>  will not be set.</p><p>The value of <code class="inline"><span class="i">$Config</span>{<span class="w">sitelib</span>}</code>  is also determined in C code and not read from <code class="inline"><span class="w">Config</span>.<span class="w">pm</span></code> , which is not loaded.</p><p>The code is executed <i>very</i> early. For example, any changes made to <code class="inline"><span class="i">@INC</span></code>  will show up in the output of `perl -V`. Of course, <code class="inline">END</code>  blocks will be likewise executed very late.</p><p>To determine at runtime if this capability has been compiled in your perl, you can check the value of <code class="inline"><span class="i">$Config</span>{<span class="w">usesitecustomize</span>}</code> .</p></section>	http://perldoc.perl.org/perlrun.html#*-f*
Goto	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Although not for the faint of heart, Perl does support a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> statement.  There are three forms: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-LABEL, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-EXPR, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-&amp;NAME.  A loop&#39;s LABEL is not actually a valid target for a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>; it&#39;s just the name of the loop.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-LABEL form finds the statement labeled with LABEL and resumes execution there.  It may not be used to go into any construct that requires initialization, such as a subroutine or a <code class="inline">foreach</code>  loop.  It also can&#39;t be used to go into a construct that is optimized away.  It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it&#39;s usually better to use some other construct such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>.  The author of Perl has never felt the need to use this form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> (in Perl, that is--C is another matter).</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-EXPR form expects a label name, whose scope will be resolved dynamically.  This allows for computed <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>s per FORTRAN, but isn&#39;t necessarily recommended if you&#39;re optimizing for maintainability:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span><span class="s">(</span><span class="s">(</span><span class="q">&quot;FOO&quot;</span><span class="cm">,</span> <span class="q">&quot;BAR&quot;</span><span class="cm">,</span> <span class="q">&quot;GLARCH&quot;</span><span class="s">)</span>[<span class="i">$i</span>]<span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>-&amp;NAME form is highly magical, and substitutes a call to the named subroutine for the currently running subroutine.  This is used by <code class="inline">AUTOLOAD<span class="s">(</span><span class="s">)</span></code>  subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to <code class="inline"><span class="i">@_</span></code>  in the current subroutine are propagated to the other subroutine.)  After the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>, not even <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller()</span></code> will be able to tell that this routine was called first.</p><p>In almost all cases like this, it&#39;s usually a far, far better idea to use the structured control flow mechanisms of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> instead of resorting to a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>.  For certain applications, the catch and throw pair of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval{}</span></code> and die() for exception processing can also be a prudent approach.</p></section>	http://perldoc.perl.org/perlsyn.html#Goto
$~ (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The name of the current report format for the currently selected output channel.  The default format name is the same as the filehandle name.  For example, the default format name for the <code class="inline"><span class="w">STDOUT</span></code>  filehandle is just <code class="inline"><span class="w">STDOUT</span></code> .</p><p>Mnemonic: brother to <code class="inline"><span class="i">$^</span></code> .</p></section>	http://perldoc.perl.org/perlvar.html#%24~
Unknown PerlIO layer "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W layer) An attempt was made to push an unknown layer onto the Perl I/O system.  (Layers take care of transforming data between external and internal representations.)  Note that some layers, such as <code class="inline"><span class="w">mmap</span></code> , are not supported in all environments.  If your program didn&#39;t explicitly request the failing operation, it may be the result of the value of the environment variable PERLIO.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-PerlIO-layer-%22%25s%22
Modification of non-creatable array value attempted, %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to make an array value spring into existence, and the subscript was probably negative, even counting from end of the array backwards.</p></section>	http://perldoc.perl.org/perldiag.html#Modification-of-non-creatable-array-value-attempted%2c-%25s
How can I call my system's unique C functions from Perl?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>In most cases, you write an external module to do it--see the answer to &quot;Where can I learn about linking C with Perl? [h2xs, xsubpp]&quot;. However, if the function is a system call, and your system supports <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall()</span></code>, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> function (documented in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>).</p><p>Remember to check the modules that came with your distribution, and CPAN as well--someone may already have written a module to do it. On Windows, try <span href="http://search.cpan.org/perldoc/Win32::API">Win32::API</span>. On Macs, try <span href="http://search.cpan.org/perldoc/Mac::Carbon">Mac::Carbon</span>. If no module has an interface to the C function, you can inline a bit of C in your Perl source with <span href="http://search.cpan.org/perldoc/Inline::C">Inline::C</span>.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-call-my-system's-unique-C-functions-from-Perl%3f
Unterminated delimiter for here document	A			Perl Diagnostics							<section class="prog__container"><p>(F) This message occurs when a here document label has an initial quotation mark but the final quotation mark is missing.  Perhaps you wrote:</p><pre class="verbatim"><ol><li>    &lt;&lt;<span class="q">&quot;foo</span></li></ol></pre><p>instead of:</p><pre class="verbatim"><ol><li>    <span class="h">&lt;&lt;&quot;foo&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Unterminated-delimiter-for-here-document
Bad plugin affecting keyword '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) An extension using the keyword plugin mechanism violated the plugin API.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-plugin-affecting-keyword-'%25s'
slice (definition)	A			Perl Glossary							<section class="prog__container"><p>A selection of any number of <b>elements</b> from a <b>list</b>, <b>array</b>, or <b>hash</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#slice
serialization (definition)	A			Perl Glossary							<section class="prog__container"><p>Putting a fancy <b>data structure</b> into linear order so that it can be stored as a <b>string</b> in a disk file or database, or sent through a <b>pipe</b>. Also called marshalling.</p></section>	http://perldoc.perl.org/perlglossary.html#serialization
(in cleanup) %s	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) This prefix usually indicates that a DESTROY() method raised the indicated exception.  Since destructors are usually called by the system at arbitrary points during execution, and often a vast number of times, the warning is issued only once for any number of failures that would otherwise result in the same message being repeated.</p><p>Failure of user callbacks dispatched using the <code class="inline"><span class="w">G_KEEPERR</span></code>  flag could also result in this warning.  See <span href="http://perldoc.perl.org/perlcall.html#G_KEEPERR">G_KEEPERR in perlcall</span>.</p></section>	http://perldoc.perl.org/perldiag.html#(in-cleanup)-%25s
Binary ">=" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;&gt;=&quot; returns true if the left argument is numerically greater than or equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
ExtUtils::Mksymlists (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Mksymlists - write linker options files for dynamic extension</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Mksymlists</span><span class="sc">;</span></li><li>    <span class="i">Mksymlists</span><span class="s">(</span>  <span class="w">NAME</span>     <span class="cm">=&gt;</span> <span class="i">$name</span> <span class="cm">,</span></li><li>                 <span class="w">DL_VARS</span>  <span class="cm">=&gt;</span> <span class="s">[</span> <span class="i">$var1</span><span class="cm">,</span> <span class="i">$var2</span><span class="cm">,</span> <span class="i">$var3</span> <span class="s">]</span><span class="cm">,</span></li><li>                 <span class="w">DL_FUNCS</span> <span class="cm">=&gt;</span> <span class="s">{</span> <span class="i">$pkg1</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="i">$func1</span><span class="cm">,</span> <span class="i">$func2</span> <span class="s">]</span><span class="cm">,</span></li><li>                               <span class="i">$pkg2</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="i">$func3</span> <span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Mksymlists.html
I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Download the ExtUtils::Embed kit from CPAN and run `make test&#39;. If the tests pass, read the pods again and again and again. If they fail, see <span href="http://perldoc.perl.org/perlbug.html">perlbug</span> and send a bug report with the output of <code class="inline"><span class="w">make</span> <span class="w">test</span> <span class="w">TEST_VERBOSE</span>=<span class="n">1</span></code>  along with <code class="inline"><span class="w">perl</span> -<span class="w">V</span></code> .</p></section>	http://perldoc.perl.org/perlfaq3.html#I've-read-perlembed%2c-perlguts%2c-etc.%2c-but-I-can't-embed-perl-in-my-C-program%3b-what-am-I-doing-wrong%3f
taint mode (definition)	A			Perl Glossary							<section class="prog__container"><p>Running under the <code class="inline"><span class="q">–T</span></code>  switch, marking all external data as suspect and refusing to use it with system commands. See Camel chapter 20, “Security”.</p></section>	http://perldoc.perl.org/perlglossary.html#taint-mode
Binary number > 0b11111111111111111111111111111111 non-portable	A			Perl Diagnostics							<section class="prog__container"><p>(W portable) The binary number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span> for more on portability concerns.</p></section>	http://perldoc.perl.org/perldiag.html#Binary-number-%3e-0b11111111111111111111111111111111-non-portable
Regexp modifier "%c" may not appear twice in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The regular expression pattern had too many occurrences of the specified modifier.  Remove the extraneous ones.</p></section>	http://perldoc.perl.org/perldiag.html#Regexp-modifier-%22%25c%22-may-not-appear-twice-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
"our" variable %s redeclared	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You seem to have already declared the same global once before in the current lexical scope.</p></section>	http://perldoc.perl.org/perldiag.html#%22our%22-variable-%25s-redeclared
literal (definition)	A			Perl Glossary							<section class="prog__container"><p>A token in a programming language, such as a number or <b>string</b>, that gives you an actual <b>value</b> instead of merely representing possible values as a <b>variable</b> does.</p></section>	http://perldoc.perl.org/perlglossary.html#literal
-c	A			Perl Command-Line Switches							<section class="prog__container"><p>causes Perl to check the syntax of the program and then exit without executing it.  Actually, it <i>will</i> execute and <code class="inline">BEGIN</code> , <code class="inline">UNITCHECK</code> , or <code class="inline">CHECK</code>  blocks and any <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statements: these are considered as occurring outside the execution of your program.  <code class="inline">INIT</code>  and <code class="inline">END</code>  blocks, however, will be skipped.</p></section>	http://perldoc.perl.org/perlrun.html#*-c*
watch expression (definition)	A			Perl Glossary							<section class="prog__container"><p>An expression which, when its value changes, causes a breakpoint in the Perl debugger.</p></section>	http://perldoc.perl.org/perlglossary.html#watch-expression
What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/http:#%2fwww.perl.com%2f">Perl.com</span> used to be part of the O&#39;Reilly Network, a subsidiary of O&#39;Reilly Media. Although it retains most of the original content from its O&#39;Reilly Network, it is now hosted by <span href="http://search.cpan.org/perldoc/http:#%2fwww.perlfoundation.org%2f">The Perl Foundation</span>.</p><p>The Perl Foundation is an advocacy organization for the Perl language which maintains the web site <span href="http://www.perl.org/">http://www.perl.org/</span> as a general advocacy site for the Perl language. It uses the domain to provide general support services to the Perl community, including the hosting of mailing lists, web sites, and other services. There are also many other sub-domains for special topics like learning Perl and jobs in Perl, such as:</p><p><span href="http://search.cpan.org/perldoc/http:#%2fwww.pm.org%2f">Perl Mongers</span> uses the pm.org domain for services related to local Perl user groups, including the hosting of mailing lists and web sites. See the <span href="http://search.cpan.org/perldoc/http:#%2fwww.pm.org%2f">Perl Mongers web site</span> for more information about joining, starting, or requesting services for a Perl user group.</p><p>CPAN, or the Comprehensive Perl Archive Network <span href="http://www.cpan.org/">http://www.cpan.org/</span>, is a replicated, worldwide repository of Perl software. See <span href="http://perldoc.perl.org/perlfaq2.html#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f">What is CPAN?</span>.</p></section>	http://perldoc.perl.org/perlfaq2.html#What-is-perl.com%3f-Perl-Mongers%3f-pm.org%3f-perl.org%3f-cpan.org%3f
die (function)	A			Perl Functions\nPerl Input and output functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>die LIST</pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> raises an exception.  Inside an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> the error message is stuffed into <code class="inline"><span class="i">$@</span></code>  and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> is terminated with the undefined value. If the exception is outside of all enclosing <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>s, then the uncaught exception prints LIST to <code class="inline"><span class="w">STDERR</span></code>  and exits with a non-zero value.  If you need to exit the process with a specific exit code, see <span href="http://perldoc.perl.org/functions/exit.html">exit</span>.</p><p>Equivalent examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t cd to spool: $!\\n&quot;</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span> <span class="q">&#39;/usr/spool/news&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span> <span class="q">&#39;/usr/spool/news&#39;</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t cd to spool: $!\\n&quot;</span></li></ol></pre><p>If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied.  Note that the &quot;input line number&quot; (also known as &quot;chunk&quot;) is subject to whatever notion of &quot;line&quot; happens to be currently in effect, and is also available as the special variable <code class="inline"><span class="i">$.</span></code> .  See <span href="http://perldoc.perl.org/perlvar.html#%24%2f">$/ in perlvar</span> and <span href="http://perldoc.perl.org/perlvar.html#%24.">$. in perlvar</span>.</p><p>Hint: sometimes appending <code class="inline"><span class="q">&quot;, stopped&quot;</span></code>  to your message will cause it to make better sense when the string <code class="inline"><span class="q">&quot;at foo line 123&quot;</span></code>  is appended. Suppose you are running script &quot;canasta&quot;.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;/etc/games is no good&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;/etc/games is no good, stopped&quot;</span><span class="sc">;</span></li></ol></pre><p>produce, respectively</p><pre class="verbatim"><ol><li>    /etc/games is no good at canasta line 123.</li><li>    /etc/games is no good, stopped at canasta line 123.</li></ol></pre><p>If the output is empty and <code class="inline"><span class="i">$@</span></code>  already contains a value (typically from a previous eval) that value is reused after appending <code class="inline"><span class="q">&quot;\\t...propagated&quot;</span></code> . This is useful for propagating exceptions:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> ... <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> unless <span class="i">$@</span> =~ <span class="q">/Expected exception/</span><span class="sc">;</span></li></ol></pre><p>If the output is empty and <code class="inline"><span class="i">$@</span></code>  contains an object reference that has a <code class="inline"><span class="w">PROPAGATE</span></code>  method, that method will be called with additional file and line number parameters.  The return value replaces the value in <code class="inline"><span class="i">$@</span></code> ;  i.e., as if <code class="inline"><span class="i">$@</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$@</span><span class="i">-&gt;PROPAGATE</span><span class="s">(</span><span class="w">__FILE__</span><span class="cm">,</span> <span class="w">__LINE__</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></code>  were called.</p><p>If <code class="inline"><span class="i">$@</span></code>  is empty then the string <code class="inline"><span class="q">&quot;Died&quot;</span></code>  is used.</p><p>If an uncaught exception results in interpreter exit, the exit code is determined from the values of <code class="inline"><span class="i">$!</span></code>  and <code class="inline"><span class="i">$?</span></code>  with this pseudocode:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="i">$!</span> if <span class="i">$!</span><span class="sc">;</span>              <span class="c"># errno</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="i">$?</span> &gt;&gt; <span class="n">8</span> if <span class="i">$?</span> &gt;&gt; <span class="n">8</span><span class="sc">;</span>    <span class="c"># child exit status</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="n">255</span><span class="sc">;</span>                   <span class="c"># last resort</span></li></ol></pre><p>The intent is to squeeze as much possible information about the likely cause into the limited space of the system exit code.  However, as <code class="inline"><span class="i">$!</span></code>  is the value of C&#39;s <code class="inline"><span class="w">errno</span></code> , which can be set by any system call, this means that the value of the exit code used by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> can be non-predictable, so should not be relied upon, other than to be non-zero.</p><p>You can also call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> with a reference argument, and if this is trapped within an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>, <code class="inline"><span class="i">$@</span></code>  contains that reference.  This permits more elaborate exception handling using objects that maintain arbitrary state about the exception.  Such a scheme is sometimes preferable to matching particular string values of <code class="inline"><span class="i">$@</span></code>  with regular expressions.  Because <code class="inline"><span class="i">$@</span></code>   is a global variable and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> may be used within object implementations, be careful that analyzing the error object doesn&#39;t replace the reference in the global variable.  It&#39;s easiest to make a local copy of the reference before any manipulations.  Here&#39;s an example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Scalar::Util</span> <span class="q">&quot;blessed&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> ... <span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="w">Some::Module::Exception</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="w">FOO</span> <span class="cm">=&gt;</span> <span class="q">&quot;bar&quot;</span> <span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ev_err</span> = <span class="i">$@</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">blessed</span><span class="s">(</span><span class="i">$ev_err</span><span class="s">)</span></li><li>            &amp;&amp; <span class="i">$ev_err</span><span class="i">-&gt;isa</span><span class="s">(</span><span class="q">&quot;Some::Module::Exception&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="c"># handle Some::Module::Exception</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>            <span class="c"># handle all other possible exceptions</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Because Perl stringifies uncaught exception messages before display, you&#39;ll probably want to overload stringification operations on exception objects.  See <span href="http://perldoc.perl.org/overload.html">overload</span> for details about that.</p><p>You can arrange for a callback to be run just before the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> does its deed, by setting the <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  hook.  The associated handler is called with the error text and can change the error message, if it sees fit, by calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> again.  See <span href="http://perldoc.perl.org/perlvar.html#%25SIG">%SIG in perlvar</span> for details on setting <code class="inline"><span class="i">%SIG</span></code>  entries, and <span href="http://perldoc.perl.org/functions/die.html#eval-BLOCK">eval BLOCK</span> for some examples.  Although this feature was  to be run only right before your program was to exit, this is not currently so: the <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  hook is currently called even inside eval()ed blocks/strings!  If one wants the hook to do nothing in such situations, put</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">@_</span> if <span class="i">$^S</span><span class="sc">;</span></li></ol></pre><p>as the first line of the handler (see <span href="http://perldoc.perl.org/perlvar.html#%24%5eS">$^S in perlvar</span>).  Because this promotes strange action at a distance, this counterintuitive behavior may be fixed in a future release.</p><p>See also exit(), warn(), and the Carp module.</p></section>	http://perldoc.perl.org/functions/die.html
glob (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>glob EXPR<br>glob</pre><p>In list context, returns a (possibly empty) list of filename expansions on the value of EXPR such as the standard Unix shell <i>/bin/csh</i> would do.  In scalar context, glob iterates through such filename expansions, returning undef when the list is exhausted.  This is the internal function implementing the <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator, but you can use it directly.  If EXPR is omitted, <code class="inline"><span class="i">$_</span></code>  is used.  The <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator is discussed in more detail in <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code> splits its arguments on whitespace and treats each segment as separate pattern.  As such, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="q">&quot;*.c *.h&quot;</span><span class="s">)</span></code>   matches all files with a <i>.c</i> or <i>.h</i> extension.  The expression <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="q">&quot;.* *&quot;</span><span class="s">)</span></code>  matches all files in the current working directory. If you want to glob filenames that might contain whitespace, you&#39;ll have to use extra quotes around the spacey filename to protect it. For example, to glob filenames that have an <code class="inline"><span class="w">e</span></code>  followed by a space followed by an <code class="inline"><span class="w">f</span></code> , use either of:</p><pre class="verbatim"><ol><li>    <span class="i">@spacies</span> = <span class="q">&lt;&quot;*e f*&quot;&gt;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&#39;&quot;*e f*&quot;&#39;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">q(&quot;*e f*&quot;)</span><span class="sc">;</span></li></ol></pre><p>If you had to get a variable through, you could do this:</p><pre class="verbatim"><ol><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&quot;&#39;*${var}e f*&#39;&quot;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">qq(&quot;*${var}e f*&quot;)</span><span class="sc">;</span></li></ol></pre><p>If non-empty braces are the only wildcard characters used in the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code>, no filenames are matched, but potentially many strings are returned.  For example, this produces nine strings, one for each pairing of fruits and colors:</p><pre class="verbatim"><ol><li>    <span class="i">@many</span> =  <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&quot;{apple,tomato,cherry}={green,yellow,red}&quot;</span><span class="sc">;</span></li></ol></pre><p>This operator is implemented using the standard <code class="inline"><span class="w">File::Glob</span></code>  extension.  See <span href="http://perldoc.perl.org/File/Glob.html">File::Glob</span> for details, including <code class="inline"><span class="w">bsd_glob</span></code>  which does not treat whitespace as a pattern separator.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#glob">glob in perlport</span>.</p></section>	http://perldoc.perl.org/functions/glob.html
Illegal character in prototype for %s : %s	A			Perl Diagnostics							<section class="prog__container"><p>(W illegalproto) An illegal character was found in a prototype declaration. Legal characters in prototypes are $, @, %, *, ;, [, ], &amp;, \\, and +. Perhaps you were trying to write a subroutine signature but didn&#39;t enable that feature first (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;signatures&#39;</span></code> ), so your signature was instead interpreted as a bad prototype.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-character-in-prototype-for-%25s-%3a-%25s
ExtUtils::MM_Unix (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker</p> <p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::MM_Unix</span><span class="sc">;</span></code> </p></section>	http://perldoc.perl.org/ExtUtils/MM_Unix.html
exec (definition)	A			Perl Glossary							<section class="prog__container"><p>To throw away the current <b>process</b>’s program and replace it with another, without exiting the process or relinquishing any resources held (apart from the old memory image).</p></section>	http://perldoc.perl.org/perlglossary.html#exec
Unknown "re" subpragma '%s' (known ones are: %s)	A			Perl Diagnostics							<section class="prog__container"><p>(W) You tried to use an unknown subpragma of the &quot;re&quot; pragma.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-%22re%22-subpragma-'%25s'-(known-ones-are%3a-%25s)
BLOCK (definition)	A			Perl Glossary							<section class="prog__container"><p>A syntactic construct consisting of a sequence of Perl <b>statements</b> that is delimited by braces. The <code class="inline">if</code>  and <code class="inline">while</code>  statements are defined in terms of <i><code class="inline"><span class="w">BLOCK</span></code> </i>s, for instance. Sometimes we also say “block” to mean a lexical scope; that is, a sequence of statements that acts like a <i><code class="inline"><span class="w">BLOCK</span></code> </i>, such as within an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> or a file, even though the statements aren’t delimited by braces.</p></section>	http://perldoc.perl.org/perlglossary.html#BLOCK
setpriority (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>setpriority WHICH,WHO,PRIORITY</pre><p>Sets the current priority for a process, a process group, or a user. (See setpriority(2).)  Raises an exception when used on a machine that doesn&#39;t implement setpriority(2).</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#setpriority">setpriority in perlport</span>.</p></section>	http://perldoc.perl.org/functions/setpriority.html
Why does Perl let me delete read-only files? Why does clobber protected files? Isn't this a bug in Perl?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>This is elaborately and painstakingly described in the <i>file-dir-perms</i> article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in <span href="http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz">http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz</span> .</p><p>The executive summary: learn how your filesystem works. The permissions on a file say what can happen to the data in that file. The permissions on a directory say what can happen to the list of files in that directory. If you delete a file, you&#39;re removing its name from the directory (so the operation depends on the permissions of the directory, not of the file). If you try to write to the file, the permissions of the file govern whether you&#39;re allowed to.</p></section>	http://perldoc.perl.org/perlfaq5.html#Why-does-Perl-let-me-delete-read-only-files%3f-Why-does--i-clobber-protected-files%3f-Isn't-this-a-bug-in-Perl%3f
UNITCHECK (function)	A			Perl Functions							<section class="prog__container"><pre>UNITCHECK</pre><p>These compile phase keywords are documented in <span href="http://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END">BEGIN, UNITCHECK, CHECK, INIT and END in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/UNITCHECK.html
Use of inherited AUTOLOAD for non-method %s() is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) As an (ahem) accidental feature, <code class="inline">AUTOLOAD</code>  subroutines are looked up as methods (using the <code class="inline"><span class="i">@ISA</span></code>  hierarchy) even when the subroutines to be autoloaded were called as plain functions (e.g. <code class="inline"><span class="i">Foo::bar</span><span class="s">(</span><span class="s">)</span></code> ), not as methods (e.g. <code class="inline"><span class="w">Foo</span><span class="w">-&gt;bar</span><span class="s">(</span><span class="s">)</span></code>  or <code class="inline"><span class="i">$obj</span><span class="i">-&gt;bar</span><span class="s">(</span><span class="s">)</span></code> ).</p><p>This bug will be rectified in future by using method lookup only for methods&#39; <code class="inline">AUTOLOAD</code> s.  However, there is a significant base of existing code that may be using the old behavior.  So, as an interim step, Perl currently issues an optional warning when non-methods use inherited <code class="inline">AUTOLOAD</code> s.</p><p>The simple rule is:  Inheritance will not work when autoloading non-methods.  The simple fix for old code is:  In any module that used to depend on inheriting <code class="inline">AUTOLOAD</code>  for non-methods from a base class named <code class="inline"><span class="w">BaseClass</span></code> , execute <code class="inline"><span class="i">*AUTOLOAD</span> = \\<span class="i">&amp;BaseClass::AUTOLOAD</span></code>  during startup.</p><p>In code that currently says <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AutoLoader</span><span class="sc">;</span> <span class="i">@ISA</span> = <span class="q">qw(AutoLoader)</span><span class="sc">;</span></code>  you should remove AutoLoader from @ISA and change <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AutoLoader</span><span class="sc">;</span></code>  to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AutoLoader</span> <span class="q">&#39;AUTOLOAD&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-inherited-AUTOLOAD-for-non-method-%25s()-is-deprecated
whitespace (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>character</b> that moves your cursor but doesn’t otherwise put anything on your screen. Typically refers to any of: space, tab, line feed, carriage return, or form feed. In Unicode, matches many other characters that Unicode considers whitespace, including the ɴ-ʙʀ .</p></section>	http://perldoc.perl.org/perlglossary.html#whitespace
How can I output Roman numerals?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Get the <span href="http://www.cpan.org/modules/by-module/Roman">http://www.cpan.org/modules/by-module/Roman</span> module.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-output-Roman-numerals%3f
: Web, Email and Networking	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section deals with questions related to running web sites, sending and receiving email as well as general networking.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq9-manpage%3a-Web%2c-Email-and-Networking
regular expression (definition)	A			Perl Glossary							<section class="prog__container"><p>A single entity with various interpretations, like an elephant. To a computer scientist, it’s a grammar for a little language in which some strings are legal and others aren’t. To normal people, it’s a pattern you can use to find what you’re looking for when it varies from case to case. Perl’s regular expressions are far from regular in the theoretical sense, but in regular use they work quite well. Here’s a regular expression: <code class="inline"><span class="q">/Oh s.*t./</span></code> . This will match strings like “<code class="inline"><span class="w">Oh</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="i">can</span> <span class="w">you</span> <span class="w">see</span> <span class="w">by</span> <span class="w">the</span> <span class="w">dawn&#39;s</span> <span class="w">early</span> <span class="w">light</span></code> ” and “<code class="inline"><span class="w">Oh</span> <span class="w">sit</span>!</code> ”. See Camel chapter 5, “Pattern Matching”.</p></section>	http://perldoc.perl.org/perlglossary.html#regular-expression
study (function)	A			Perl Functions\nPerl Regular expressions and pattern matching							<section class="prog__container"><pre>study SCALAR<br>study</pre><p>May take extra time to study SCALAR (<code class="inline"><span class="i">$_</span></code>  if unspecified) in anticipation of doing many pattern matches on the string before it is next modified. This may or may not save time, depending on the nature and number of patterns you are searching and the distribution of character frequencies in the string to be searched; you probably want to compare run times with and without it to see which is faster.  Those loops that scan for many short constant strings (including the constant parts of more complex patterns) will benefit most.</p><p>Note that since Perl version 5.16 this function has been a no-op, but this might change in a future release.</p><p>(The way <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/study.html">study</span></code> works is this: a linked list of every character in the string to be searched is made, so we know, for example, where all the <code class="inline"><span class="q">&#39;k&#39;</span></code>  characters are.  From each search string, the rarest character is selected, based on some static frequency tables constructed from some C programs and English text.  Only those places that contain this &quot;rarest&quot; character are examined.)</p><p>For example, here is a loop that inserts index producing entries before any line containing a certain pattern:</p><pre class="verbatim"><ol><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/study.html">study</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.IX foo\\n&quot;</span>    if <span class="q">/\\bfoo\\b/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.IX bar\\n&quot;</span>    if <span class="q">/\\bbar\\b/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.IX blurfl\\n&quot;</span> if <span class="q">/\\bblurfl\\b/</span><span class="sc">;</span></li><li>        <span class="c"># ...</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>In searching for <code class="inline"><span class="q">/\\bfoo\\b/</span></code> , only locations in <code class="inline"><span class="i">$_</span></code>  that contain <code class="inline"><span class="w">f</span></code>  will be looked at, because <code class="inline"><span class="w">f</span></code>  is rarer than <code class="inline"><span class="w">o</span></code> .  In general, this is a big win except in pathological cases.  The only question is whether it saves you more time than it took to build the linked list in the first place.</p><p>Note that if you have to look for strings that you don&#39;t know till runtime, you can build an entire loop as a string and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> that to avoid recompiling all your patterns all the time.  Together with undefining <code class="inline"><span class="i">$/</span></code>  to input entire files as one record, this can be quite fast, often faster than specialized programs like fgrep(1).  The following scans a list of files (<code class="inline"><span class="i">@files</span></code> ) for a list of words (<code class="inline"><span class="i">@words</span></code> ), and prints out the names of those files that contain a match:</p><pre class="verbatim"><ol><li>    <span class="i">$search</span> = <span class="q">&#39;while (&lt;&gt;) { study;&#39;</span><span class="sc">;</span></li><li>    foreach <span class="i">$word</span> <span class="s">(</span><span class="i">@words</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$search</span> .= <span class="q">&quot;++\\$seen{\\$ARGV} if /\\\\b$word\\\\b/;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="i">$search</span> .= <span class="q">&quot;}&quot;</span><span class="sc">;</span></li><li>    <span class="i">@ARGV</span> = <span class="i">@files</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="i">$search</span><span class="sc">;</span>        <span class="c"># this screams</span></li><li>    <span class="i">$/</span> = <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>        <span class="c"># put back to normal input delimiter</span></li><li>    foreach <span class="i">$file</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span><span class="s">(</span><span class="i">%seen</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$file</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/study.html
What good is in a regular expression?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>You use the <code class="inline">\\<span class="w">G</span></code>  anchor to start the next match on the same string where the last match left off. The regular expression engine cannot skip over any characters to find the next match with this anchor, so <code class="inline">\\<span class="w">G</span></code>  is similar to the beginning of string anchor, <code class="inline">^</code>. The <code class="inline">\\<span class="w">G</span></code>  anchor is typically used with the <code class="inline"><span class="w">g</span></code>  flag. It uses the value of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> as the position to start the next match. As the match operator makes successive matches, it updates <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> with the position of the next character past the last match (or the first character of the next match, depending on how you like to look at it). Each string has its own <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> value.</p><p>Suppose you want to match all of consecutive pairs of digits in a string like &quot;1122a44&quot; and stop matching when you encounter non-digits. You want to match <code class="inline"><span class="n">11</span></code>  and <code class="inline"><span class="n">22</span></code>  but the letter &lt;a&gt; shows up between <code class="inline"><span class="n">22</span></code>  and <code class="inline"><span class="n">44</span></code>  and you want to stop at <code class="inline"><span class="w">a</span></code> . Simply matching pairs of digits skips over the <code class="inline"><span class="w">a</span></code>  and still matches <code class="inline"><span class="n">44</span></code> .</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;1122a44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@pairs</span> = <span class="q">m/(\\d\\d)/g</span><span class="sc">;</span>   <span class="c"># qw( 11 22 44 )</span></li></ol></pre><p>If you use the <code class="inline">\\<span class="w">G</span></code>  anchor, you force the match after <code class="inline"><span class="n">22</span></code>  to start with the <code class="inline"><span class="w">a</span></code> . The regular expression cannot match there since it does not find a digit, so the next match fails and the match operator returns the pairs it already found.</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;1122a44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@pairs</span> = <span class="q">m/\\G(\\d\\d)/g</span><span class="sc">;</span> <span class="c"># qw( 11 22 )</span></li></ol></pre><p>You can also use the <code class="inline">\\<span class="w">G</span></code>  anchor in scalar context. You still need the <code class="inline"><span class="w">g</span></code>  flag.</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;1122a44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">m/\\G(\\d\\d)/g</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Found $1\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>After the match fails at the letter <code class="inline"><span class="w">a</span></code> , perl resets <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> and the next match on the same string starts at the beginning.</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;1122a44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">m/\\G(\\d\\d)/g</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Found $1\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Found $1 after while&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">m/(\\d\\d)/g</span><span class="sc">;</span> <span class="c"># finds &quot;11&quot;</span></li></ol></pre><p>You can disable <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code> resets on fail with the <code class="inline"><span class="w">c</span></code>  flag, documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span> and <span href="http://perldoc.perl.org/perlreref.html">perlreref</span>. Subsequent matches start where the last successful match ended (the value of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos()</span></code>) even if a match on the same string has failed in the meantime. In this case, the match after the <code class="inline">while<span class="s">(</span><span class="s">)</span></code>  loop starts at the <code class="inline"><span class="w">a</span></code>  (where the last match stopped), and since it does not use any anchor it can skip over the <code class="inline"><span class="w">a</span></code>  to find <code class="inline"><span class="n">44</span></code> .</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;1122a44&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">m/\\G(\\d\\d)/gc</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Found $1\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Found $1 after while&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">m/(\\d\\d)/g</span><span class="sc">;</span> <span class="c"># finds &quot;44&quot;</span></li></ol></pre><p>Typically you use the <code class="inline">\\<span class="w">G</span></code>  anchor with the <code class="inline"><span class="w">c</span></code>  flag when you want to try a different match if one fails, such as in a tokenizer. Jeffrey Friedl offers this example which works in 5.004 or later.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>        <span class="j">PARSER:</span> <span class="s">{</span></li><li>            <span class="q">m/ \\G( \\d+\\b    )/gcx</span>   &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;number: $1\\n&quot;</span><span class="sc">;</span>  <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>            <span class="q">m/ \\G( \\w+      )/gcx</span>   &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;word:   $1\\n&quot;</span><span class="sc">;</span>  <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>            <span class="q">m/ \\G( \\s+      )/gcx</span>   &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;space:  $1\\n&quot;</span><span class="sc">;</span>  <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>            <span class="q">m/ \\G( [^\\w\\d]+ )/gcx</span>   &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;other:  $1\\n&quot;</span><span class="sc">;</span>  <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>For each line, the <code class="inline"><span class="w">PARSER</span></code>  loop first tries to match a series of digits followed by a word boundary. This match has to start at the place the last match left off (or the beginning of the string on the first match). Since <code class="inline"><span class="q">m/ \\G( \\d+\\b</span> <span class="q">)/gcx</span></code>  uses the <code class="inline"><span class="w">c</span></code>  flag, if the string does not match that regular expression, perl does not reset pos() and the next match starts at the same position to try a different pattern.</p></section>	http://perldoc.perl.org/perlfaq6.html#What-good-is-%5cG-in-a-regular-expression%3f
IO::Compress::Bzip2 (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.bzip.org]]\n[[Compress::Bzip2]]					<section class="prog__container"><p>IO::Compress::Bzip2 - Write bzip2 files/buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::Bzip2</span> <span class="q">qw(bzip2 $Bzip2Error)</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$status</span> = <span class="w">bzip2</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>] </li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;bzip2 failed: $Bzip2Error\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">new</span> <span class="w">IO::Compress::Bzip2</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>]</li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;bzip2 failed: $Bzip2Error\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$z</span><span class="i">-&gt;print</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;printf</span><span class="s">(</span><span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;write</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;syswrite</span><span class="s">(</span><span class="i">$string</span> [<span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$offset</span>]<span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;tell</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;seek</span><span class="s">(</span><span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;binmode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;fileno</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;opened</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;input_line_number</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;newStream</span><span class="s">(</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$Bzip2Error</span> <span class="sc">;</span></li><li></li><li>    <span class="c"># IO::File mode</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$z</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="i">$z</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$z</span><span class="cm">,</span> <span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$z</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/Bzip2.html
Unknown process %x sent message to prime_env_iter: %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  Perl was reading values for %ENV before iterating over it, and someone else stuck a message in the stream of data Perl expected.  Someone&#39;s very confused, or perhaps trying to subvert Perl&#39;s population of %ENV for nefarious purposes.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-process-%25x-sent-message-to-prime_env_iter%3a-%25s
exists (function)	A			Perl Functions\nPerl Functions for real %HASHes							<section class="prog__container"><pre>exists EXPR</pre><p>Given an expression that specifies an element of a hash, returns true if the specified element in the hash has ever been initialized, even if the corresponding value is undefined.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Exists\\n&quot;</span>    if <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="i">$key</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Defined\\n&quot;</span>   if <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="i">$key</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;True\\n&quot;</span>      if <span class="i">$hash</span>{<span class="i">$key</span>}<span class="sc">;</span></li></ol></pre><p>exists may also be called on array elements, but its behavior is much less obvious and is strongly tied to the use of <span href="http://perldoc.perl.org/functions/delete.html">delete</span> on arrays.</p><p><b>WARNING:</b> Calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span></code> on array values is strongly discouraged.  The notion of deleting or checking the existence of Perl array elements is not conceptually coherent, and can lead to surprising behavior.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Exists\\n&quot;</span>    if <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$array</span>[<span class="i">$index</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Defined\\n&quot;</span>   if <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$array</span>[<span class="i">$index</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;True\\n&quot;</span>      if <span class="i">$array</span>[<span class="i">$index</span>]<span class="sc">;</span></li></ol></pre><p>A hash or array element can be true only if it&#39;s defined and defined only if it exists, but the reverse doesn&#39;t necessarily hold true.</p><p>Given an expression that specifies the name of a subroutine, returns true if the specified subroutine has ever been declared, even if it is undefined.  Mentioning a subroutine name for exists or defined does not count as declaring it.  Note that a subroutine that does not exist may still be callable: its package may have an <code class="inline">AUTOLOAD</code>  method that makes it spring into existence the first time that it is called; see <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Exists\\n&quot;</span>  if <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;subroutine</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Defined\\n&quot;</span> if <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">&amp;subroutine</span><span class="sc">;</span></li></ol></pre><p>Note that the EXPR can be arbitrarily complicated as long as the final operation is a hash or array key lookup or subroutine name:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$ref</span>-&gt;{<span class="w">A</span>}-&gt;{<span class="w">B</span>}-&gt;{<span class="i">$key</span>}<span class="s">)</span>  <span class="s">{</span> <span class="s">}</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="w">A</span>}{<span class="w">B</span>}{<span class="i">$key</span>}<span class="s">)</span>       <span class="s">{</span> <span class="s">}</span></li><li></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$ref</span>-&gt;{<span class="w">A</span>}-&gt;{<span class="w">B</span>}-&gt;[<span class="i">$ix</span>]<span class="s">)</span>   <span class="s">{</span> <span class="s">}</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="w">A</span>}{<span class="w">B</span>}[<span class="i">$ix</span>]<span class="s">)</span>        <span class="s">{</span> <span class="s">}</span></li><li></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;</span>{<span class="i">$ref</span>-&gt;{<span class="w">A</span>}{<span class="w">B</span>}{<span class="i">$key</span>}}<span class="s">)</span>   <span class="s">{</span> <span class="s">}</span></li></ol></pre><p>Although the most deeply nested array or hash element will not spring into existence just because its existence was tested, any intervening ones will. Thus <code class="inline"><span class="i">$ref</span>-&gt;{<span class="q">&quot;A&quot;</span>}</code>  and <code class="inline"><span class="i">$ref</span>-&gt;{<span class="q">&quot;A&quot;</span>}-&gt;{<span class="q">&quot;B&quot;</span>}</code>  will spring into existence due to the existence test for the $key element above. This happens anywhere the arrow operator is used, including even here:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$ref</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$ref</span>-&gt;{<span class="q">&quot;Some key&quot;</span>}<span class="s">)</span>    <span class="s">{</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$ref</span><span class="sc">;</span>  <span class="c"># prints HASH(0x80d3d5c)</span></li></ol></pre><p>This surprising autovivification in what does not at first--or even second--glance appear to be an lvalue context may be fixed in a future release.</p><p>Use of a subroutine call, rather than a subroutine name, as an argument to exists() is an error.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;sub</span><span class="sc">;</span>    <span class="c"># OK</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;sub</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Error</span></li></ol></pre></section>	http://perldoc.perl.org/functions/exists.html
How do I do (anything)?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Have you looked at CPAN (see <span href="http://perldoc.perl.org/perlfaq2.html">perlfaq2</span>)? The chances are that someone has already written a module that can solve your problem. Have you read the appropriate manpages? Here&#39;s a brief index:</p><p>A crude table of contents for the Perl manpage set is found in <span href="http://search.cpan.org/perldoc/perltoc">perltoc</span>.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-do-I-do-(anything)%3f
vector (definition)	A			Perl Glossary							<section class="prog__container"><p>Mathematical jargon for a list of <b>scalar values</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#vector
print (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>print FILEHANDLE LIST<br>print FILEHANDLE<br>print LIST<br>print</pre><p>Prints a string or a list of strings.  Returns true if successful. FILEHANDLE may be a scalar variable containing the name of or a reference to the filehandle, thus introducing one level of indirection.  (NOTE: If FILEHANDLE is a variable and the next token is a term, it may be misinterpreted as an operator unless you interpose a <code class="inline">+</code>  or put parentheses around the arguments.)  If FILEHANDLE is omitted, prints to the last selected (see <span href="http://perldoc.perl.org/functions/select.html">select</span>) output handle.  If LIST is omitted, prints <code class="inline"><span class="i">$_</span></code>  to the currently selected output handle.  To use FILEHANDLE alone to print the content of <code class="inline"><span class="i">$_</span></code>  to it, you must use a real filehandle like <code class="inline"><span class="w">FH</span></code> , not an indirect one like <code class="inline"><span class="i">$fh</span></code> .  To set the default output handle to something other than STDOUT, use the select operation.</p><p>The current value of <code class="inline"><span class="i">$,</span></code>  (if any) is printed between each LIST item.  The current value of <code class="inline"><span class="i">$\\</span></code>  (if any) is printed after the entire LIST has been printed.  Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>.  Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a <code class="inline">+</code> , but that doesn&#39;t look as good).</p><p>If you&#39;re storing handles in an array or hash, or in general whenever you&#39;re using any expression more complex than a bareword handle or a plain, unsubscripted scalar variable to retrieve it, you will have to use a block returning the filehandle value instead, in which case the LIST may not be omitted:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="i">$files</span>[<span class="i">$i</span>] <span class="s">}</span> <span class="q">&quot;stuff\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="i">$OK</span> ? <span class="w">STDOUT</span> <span class="co">:</span> <span class="w">STDERR</span> <span class="s">}</span> <span class="q">&quot;stuff\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Printing to a closed pipe or socket will generate a SIGPIPE signal.  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for more on signal handling.</p></section>	http://perldoc.perl.org/functions/print.html
Why don't word-boundary searches with work for me?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Ensure that you know what \\b really does: it&#39;s the boundary between a word character, \\w, and something that isn&#39;t a word character. That thing that isn&#39;t a word character might be \\W, but it can also be the start or end of the string.</p><p>It&#39;s not (not!) the boundary between whitespace and non-whitespace, and it&#39;s not the stuff between words we use to create sentences.</p><p>In regex speak, a word boundary (\\b) is a &quot;zero width assertion&quot;, meaning that it doesn&#39;t represent a character in the string, but a condition at a certain position.</p><p>For the regular expression, /\\bPerl\\b/, there has to be a word boundary before the &quot;P&quot; and after the &quot;l&quot;. As long as something other than a word character precedes the &quot;P&quot; and succeeds the &quot;l&quot;, the pattern will match. These strings match /\\bPerl\\b/.</p><pre class="verbatim"><ol><li>    <span class="q">&quot;Perl&quot;</span>    <span class="c"># no word char before P or after l</span></li><li>    <span class="q">&quot;Perl &quot;</span>   <span class="c"># same as previous (space is not a word char)</span></li><li>    <span class="q">&quot;&#39;Perl&#39;&quot;</span>  <span class="c"># the &#39; char is not a word char</span></li><li>    <span class="q">&quot;Perl&#39;s&quot;</span>  <span class="c"># no word char before P, non-word char after &quot;l&quot;</span></li></ol></pre><p>These strings do not match /\\bPerl\\b/.</p><pre class="verbatim"><ol><li>    <span class="q">&quot;Perl_&quot;</span>   <span class="c"># _ is a word char!</span></li><li>    <span class="q">&quot;Perler&quot;</span>  <span class="c"># no word char before P, but one after l</span></li></ol></pre><p>You don&#39;t have to use \\b to match words though. You can look for non-word characters surrounded by word characters. These strings match the pattern /\\b&#39;\\b/.</p><pre class="verbatim"><ol><li>    <span class="q">&quot;don&#39;t&quot;</span>   <span class="c"># the &#39; char is surrounded by &quot;n&quot; and &quot;t&quot;</span></li><li>    <span class="q">&quot;qep&#39;a&#39;&quot;</span>  <span class="c"># the &#39; char is surrounded by &quot;p&quot; and &quot;a&quot;</span></li></ol></pre><p>These strings do not match /\\b&#39;\\b/.</p><pre class="verbatim"><ol><li>    <span class="q">&quot;foo&#39;&quot;</span>    <span class="c"># there is no word char after non-word &#39;</span></li></ol></pre><p>You can also use the complement of \\b, \\B, to specify that there should not be a word boundary.</p><p>In the pattern /\\Bam\\B/, there must be a word character before the &quot;a&quot; and after the &quot;m&quot;. These patterns match /\\Bam\\B/:</p><pre class="verbatim"><ol><li>    <span class="q">&quot;llama&quot;</span>   <span class="c"># &quot;am&quot; surrounded by word chars</span></li><li>    <span class="q">&quot;Samuel&quot;</span>  <span class="c"># same</span></li></ol></pre><p>These strings do not match /\\Bam\\B/</p><pre class="verbatim"><ol><li>    <span class="q">&quot;Sam&quot;</span>      <span class="c"># no word boundary before &quot;a&quot;, but one after &quot;m&quot;</span></li><li>    <span class="q">&quot;I am Sam&quot;</span> <span class="c"># &quot;am&quot; surrounded by non-word chars</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#Why-don't-word-boundary-searches-with-%5cb-work-for-me%3f
Closure prototype called	A			Perl Diagnostics							<section class="prog__container"><p>(F) If a closure has attributes, the subroutine passed to an attribute handler is the prototype that is cloned when a new closure is created. This subroutine cannot be called.</p></section>	http://perldoc.perl.org/perldiag.html#Closure-prototype-called
How can I determine if a string is a text string or a binary string?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>You can&#39;t. Some use the UTF8 flag for this, but that&#39;s misuse, and makes well behaved modules like Data::Dumper look bad. The flag is useless for this purpose, because it&#39;s off when an 8 bit encoding (by default ISO-8859-1) is used to store the string.</p><p>This is something you, the programmer, has to keep track of; sorry. You could consider adopting a kind of &quot;Hungarian notation&quot; to help with this.</p></section>	http://perldoc.perl.org/perlunifaq.html#How-can-I-determine-if-a-string-is-a-text-string-or-a-binary-string%3f
Binary "and" operator	A			Perl Operators\nPerl Logical And							<section class="prog__container">Binary &quot;and&quot; returns the logical conjunction of the two surrounding expressions. It&#39;s equivalent to &amp;&amp; except for the very low precedence. This means that it short-circuits: the right expression is evaluated only if the left expression is true.</section>	http://perldoc.perl.org/perlop.html#Logical-And
dangling statement (definition)	A			Perl Glossary							<section class="prog__container"><p>A bare, single <b>statement</b>, without any braces, hanging off an <code class="inline">if</code>  or <code class="inline">while</code>  conditional. C allows them. Perl doesn’t.</p></section>	http://perldoc.perl.org/perlglossary.html#dangling-statement
File::Path (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Path - Create or remove directory trees</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Path</span> <span class="q">qw(make_path remove_tree)</span><span class="sc">;</span></li><li></li><li>  <span class="i">make_path</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">make_path</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="cm">,</span> <span class="s">{</span></li><li>      <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>      <span class="w">mode</span> <span class="cm">=&gt;</span> <span class="n">0711</span><span class="cm">,</span></li><li>  <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">remove_tree</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">remove_tree</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="cm">,</span> <span class="s">{</span></li><li>      <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>      <span class="w">error</span>  <span class="cm">=&gt;</span> \\<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$err_list</span><span class="cm">,</span></li><li>  <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># legacy (interface promoted before v2.00)</span></li><li>  <span class="i">mkpath</span><span class="s">(</span><span class="q">&#39;/foo/bar/baz&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">mkpath</span><span class="s">(</span><span class="q">&#39;/foo/bar/baz&#39;</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">0711</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">mkpath</span><span class="s">(</span><span class="s">[</span><span class="q">&#39;/foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;blurfl/quux&#39;</span><span class="s">]</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">0711</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">rmtree</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">rmtree</span><span class="s">(</span><span class="s">[</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;blurfl/quux&#39;</span><span class="s">]</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># legacy (interface promoted before v2.06)</span></li><li>  <span class="i">mkpath</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="cm">,</span> <span class="s">{</span> <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">mode</span> <span class="cm">=&gt;</span> <span class="n">0711</span> <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">rmtree</span><span class="s">(</span><span class="q">&#39;foo/bar/baz&#39;</span><span class="cm">,</span> <span class="q">&#39;/zug/zwang&#39;</span><span class="cm">,</span> <span class="s">{</span> <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">mode</span> <span class="cm">=&gt;</span> <span class="n">0711</span> <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Path.html
next::method/next::can/maybe::next::method cannot find enclosing method	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next::method</span></code> needs to be called within the context of a real method in a real package, and it could not find such a context. See <span href="http://perldoc.perl.org/mro.html">mro</span>.</p></section>	http://perldoc.perl.org/perldiag.html#next%3a%3amethod%2fnext%3a%3acan%2fmaybe%3a%3anext%3a%3amethod-cannot-find-enclosing-method
Malformed UTF-8 character immediately after '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">utf8</span></code> , but the program file doesn&#39;t comply with UTF-8 encoding rules.  The message prints out the properly encoded characters just before the first bad one.  If <code class="inline"><span class="w">utf8</span></code>  warnings are enabled, a warning is generated that gives more details about the type of malformation.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-character-immediately-after-'%25s'
Constant(%s) unknown	A			Perl Diagnostics							<section class="prog__container"><p>(F) The parser found inconsistencies either while attempting to define an overloaded constant, or when trying to find the character name specified in the <code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code>  escape.  Perhaps you forgot to load the corresponding <span href="http://perldoc.perl.org/overload.html">overload</span> pragma?</p></section>	http://perldoc.perl.org/perldiag.html#Constant(%25s)-unknown
panic: sv_chop %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The sv_chop() routine was passed a position that is not within the scalar&#39;s string buffer.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-sv_chop-%25s
Can't open output pipe (name: %s)	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  Perl does its own command line redirection, and couldn&#39;t open the pipe into which to send data destined for stdout.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-output-pipe-(name%3a-%25s)
ARGVOUT (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The special filehandle that points to the currently open output file when doing edit-in-place processing with <b>-i</b>.  Useful when you have to do a lot of inserting and don&#39;t want to keep modifying <code class="inline"><span class="i">$_</span></code> .  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for the <b>-i</b> switch.</p></section>	http://perldoc.perl.org/perlvar.html#ARGVOUT
Can't take sqrt of %g	A			Perl Diagnostics							<section class="prog__container"><p>(F) For ordinary real numbers, you can&#39;t take the square root of a negative number.  There&#39;s a Math::Complex package that comes standard with Perl, though, if you really want to do that.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-take-sqrt-of-%25g
portable (definition)	A			Perl Glossary							<section class="prog__container"><p>Once upon a time, C code compilable under both BSD and SysV. In general, code that can be easily converted to run on another <b>platform</b>, where “easily” can be defined however you like, and usually is.  Anything may be considered portable if you try hard enough, such as a mobile home or London Bridge.</p></section>	http://perldoc.perl.org/perlglossary.html#portable
refcnt_inc: fd %d%s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl&#39;s I/O implementation failed an internal consistency check.  If you see this message, something is very wrong.</p></section>	http://perldoc.perl.org/perldiag.html#refcnt_inc%3a-fd-%25d%25s
Devel::PPPort (module)	A			Perl Standard Modules		[[h2xs]]\n[[ppport.h]]					<section class="prog__container"><p>Devel::PPPort - Perl/Pollution/Portability</p> <pre class="verbatim"><ol><li>    <span class="i">Devel::PPPort::WriteFile</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># defaults to ./ppport.h</span></li><li>    <span class="i">Devel::PPPort::WriteFile</span><span class="s">(</span><span class="q">&#39;someheader.h&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Same as above but retrieve contents rather than write file</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$contents</span> = <span class="i">Devel::PPPort::GetFileContents</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$contents</span> = <span class="i">Devel::PPPort::GetFileContents</span><span class="s">(</span><span class="q">&#39;someheader.h&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Devel/PPPort.html
Safe (module)	A			Perl Standard Modules							<section class="prog__container"><p>Safe - Compile and execute code in restricted compartments</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Safe</span><span class="sc">;</span></li><li></li><li>  <span class="i">$compartment</span> = <span class="w">new</span> <span class="w">Safe</span><span class="sc">;</span></li><li></li><li>  <span class="i">$compartment</span><span class="i">-&gt;permit</span><span class="s">(</span><span class="q">qw(time sort :browse)</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$result</span> = <span class="i">$compartment</span><span class="i">-&gt;reval</span><span class="s">(</span><span class="i">$unsafe_code</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Safe.html
Unterminated compressed integer	A			Perl Diagnostics							<section class="prog__container"><p>(F) An argument to unpack(&quot;w&quot;,...) was incompatible with the BER compressed integer format and could not be converted to an integer. See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-compressed-integer
procedure (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>subroutine</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#procedure
Artistic License (definition)	A			Perl Glossary							<section class="prog__container"><p>The open source license that Larry Wall created for Perl, maximizing Perl’s usefulness, availability, and modifiability. The current version is 2. (<span href="http://www.opensource.org/licenses/artistic-license.php">http://www.opensource.org/licenses/artistic-license.php</span>).</p></section>	http://perldoc.perl.org/perlglossary.html#Artistic-License
Can only compress unsigned integers in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) An argument to pack(&quot;w&quot;,...) was not an integer.  The BER compressed integer format can only be used with positive integers, and you attempted to compress something else.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can-only-compress-unsigned-integers-in-pack
s (function)	A			Perl Functions							<section class="prog__container"><pre>s///</pre><p>The substitution operator.  See <span href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Regexp Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/s.html
rvalue (definition)	A			Perl Glossary		[[lvalue]]					<section class="prog__container"><p>A <b>value</b> that you might find on the right side of an <b>assignment</b>. </p></section>	http://perldoc.perl.org/perlglossary.html#rvalue
Attempt to delete disallowed key '%s' from a restricted hash	A			Perl Diagnostics							<section class="prog__container"><p>(F) The failing code attempted to delete from a restricted hash a key which is not in its key set.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-delete-disallowed-key-'%25s'-from-a-restricted-hash
identifier (definition)	A			Perl Glossary							<section class="prog__container"><p>A legally formed name for most anything in which a computer program might be interested. Many languages (including Perl) allow identifiers to start with an alphabetic character, and then contain alphabetics and digits. Perl also allows connector punctuation like the underscore character wherever it allows alphabetics. (Perl also has more complicated names, like <b>qualified</b> names.)</p></section>	http://perldoc.perl.org/perlglossary.html#identifier
Ill-formed message in prime_env_iter: |%s|	A			Perl Diagnostics							<section class="prog__container"><p>(W internal) A warning peculiar to VMS.  Perl tried to read a logical name or CLI symbol definition when preparing to iterate over %ENV, and didn&#39;t see the expected delimiter between key and value, so the line was ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Ill-formed-message-in-prime_env_iter%3a-%7c%25s%7c
my (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Miscellaneous functions							<section class="prog__container"><pre>my VARLIST<br>my TYPE VARLIST<br>my VARLIST : ATTRS<br>my TYPE VARLIST : ATTRS</pre><p>A <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> declares the listed variables to be local (lexically) to the enclosing block, file, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>.  If more than one variable is listed, the list must be placed in parentheses.</p><p>The exact semantics and interface of TYPE and ATTRS are still evolving.  TYPE may be a bareword, a constant declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">constant</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/__PACKAGE__.html">__PACKAGE__</span></code>.  It is currently bound to the use of the <code class="inline"><span class="w">fields</span></code>  pragma, and attributes are handled using the <code class="inline"><span class="w">attributes</span></code>  pragma, or starting from Perl 5.8.0 also via the <code class="inline"><span class="w">Attribute::Handlers</span></code>  module.  See <span href="http://perldoc.perl.org/perlsub.html#Private-Variables-via-my()">Private Variables via my() in perlsub</span> for details, and <span href="http://perldoc.perl.org/fields.html">fields</span>, <span href="http://perldoc.perl.org/attributes.html">attributes</span>, and <span href="http://perldoc.perl.org/Attribute/Handlers.html">Attribute::Handlers</span>.</p><p>Note that with a parenthesised list, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> can be used as a dummy placeholder, for example to skip assignment of initial values:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$min</span><span class="cm">,</span> <span class="i">$hour</span> <span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/functions/my.html
$< > ($1, $2, ...) (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>Contains the subpattern from the corresponding set of capturing parentheses from the last successful pattern match, not counting patterns matched in nested blocks that have been exited already.</p><p>These variables are read-only and dynamically-scoped.</p><p>Mnemonic: like \\digits.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3c_digits_%3e-(%241%2c-%242%2c-...)
$^A (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The current value of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write()</span></code> accumulator for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/format.html">format()</span></code> lines. A format contains <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline()</span></code> calls that put their result into <code class="inline"><span class="i">$^A</span></code> .  After calling its format, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write()</span></code> prints out the contents of <code class="inline"><span class="i">$^A</span></code>  and empties.  So you never really see the contents of <code class="inline"><span class="i">$^A</span></code>  unless you call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline()</span></code> yourself and then look at it.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span> and <span href="http://perldoc.perl.org/functions/formline.html">formline PICTURE,LIST</span>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eA
How do I expand function calls in a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>This is documented in <span href="http://perldoc.perl.org/perlref.html">perlref</span>, and although it&#39;s not the easiest thing to read, it does work. In each of these examples, we call the function inside the braces used to dereference a reference. If we have more than one return value, we can construct and dereference an anonymous array. In this case, we call the function in list context.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time values are @{ [localtime] }.\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If we want to call the function in scalar context, we have to do a bit more work. We can really have any code we like inside the braces, so we simply have to end with the scalar reference, although how you do that is up to you, and you can use code inside the braces. Note that the use of parens creates a list context, so we need <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span></code> to force the scalar context on the function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time is ${\\(scalar localtime)}.\\n&quot;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time is ${ my $x = localtime; \\$x }.\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If your function already returns a reference, you don&#39;t need to create the reference yourself.</p><pre class="verbatim"><ol><li><span name="timestamp"></span>    sub <span class="m">timestamp</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$t</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span> \\<span class="i">$t</span> <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time is ${ timestamp() }.\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="w">Interpolation</span></code>  module can also do a lot of magic for you. You can specify a variable name, in this case <code class="inline"><span class="w">E</span></code> , to set up a tied hash that does the interpolation for you. It has several other methods to do this as well.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Interpolation</span> <span class="w">E</span> <span class="cm">=&gt;</span> <span class="q">&#39;eval&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time values are $E{localtime()}.\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>In most cases, it is probably easier to simply use string concatenation, which also forces scalar context.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The time is &quot;</span> . <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="s">)</span> . <span class="q">&quot;.\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-expand-function-calls-in-a-string%3f
How do I determine whether a scalar is a number/whole/integer/float?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Assuming that you don&#39;t care about IEEE notations like &quot;NaN&quot; or &quot;Infinity&quot;, you probably just want to use a regular expression:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span><span class="s">(</span> <span class="i">$number</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/\\D/</span> <span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\thas nondigits&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/^\\d+\\z/</span> <span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\tis a whole number&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/^-?\\d+\\z/</span> <span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\tis an integer&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/^[+-]?\\d+\\z/</span> <span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\tis a +/- integer&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/^-?(?:\\d+\\.?|\\.\\d)\\d*\\z/</span> <span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\tis a real number&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/^[+-]?(?=\\.?\\d)\\d*\\.?\\d*(?:e[+-]?\\d+)?\\z/i</span><span class="s">)</span></li><li>            <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;\\tis a C float&quot;</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>There are also some commonly used modules for the task. <span href="http://perldoc.perl.org/Scalar/Util.html">Scalar::Util</span> (distributed with 5.8) provides access to perl&#39;s internal function <code class="inline"><span class="w">looks_like_number</span></code>  for determining whether a variable looks like a number. <span href="http://search.cpan.org/perldoc/Data::Types">Data::Types</span> exports functions that validate data types using both the above and other regular expressions. Thirdly, there is <span href="http://search.cpan.org/perldoc/Regexp::Common">Regexp::Common</span> which has regular expressions to match various types of numbers. Those three modules are available from the CPAN.</p><p>If you&#39;re on a POSIX system, Perl supports the <code class="inline"><span class="w">POSIX::strtod</span></code>  function for converting strings to doubles (and also <code class="inline"><span class="w">POSIX::strtol</span></code>  for longs). Its semantics are somewhat cumbersome, so here&#39;s a <code class="inline"><span class="w">getnum</span></code>  wrapper function for more convenient access. This function takes a string and returns the number it found, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> for input that isn&#39;t a C float. The <code class="inline"><span class="w">is_numeric</span></code>  function is a front end to <code class="inline"><span class="w">getnum</span></code>  if you just want to say, &quot;Is this a float?&quot;</p><pre class="verbatim"><ol><li><span name="getnum"></span>    sub <span class="m">getnum</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(strtod)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$str</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="i">$str</span> =~ <span class="q">s/^\\s+//</span><span class="sc">;</span></li><li>        <span class="i">$str</span> =~ <span class="q">s/\\s+$//</span><span class="sc">;</span></li><li>        <span class="i">$!</span> = <span class="n">0</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$num</span><span class="cm">,</span> <span class="i">$unparsed</span><span class="s">)</span> = <span class="i">strtod</span><span class="s">(</span><span class="i">$str</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="s">(</span><span class="i">$str</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;&#39;</span><span class="s">)</span> || <span class="s">(</span><span class="i">$unparsed</span> != <span class="n">0</span><span class="s">)</span> || <span class="i">$!</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$num</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li><span name="is_numeric"></span>    sub <span class="m">is_numeric</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">getnum</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span> <span class="s">}</span></li></ol></pre><p>Or you could check out the <span href="http://search.cpan.org/perldoc/String::Scanf">String::Scanf</span> module on the CPAN instead.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-determine-whether-a-scalar-is-a-number%2fwhole%2finteger%2ffloat%3f
substitution (definition)	A			Perl Glossary							<section class="prog__container"><p>Changing parts of a string via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code> operator. (We avoid use of this term to mean <b>variable interpolation</b>.)</p></section>	http://perldoc.perl.org/perlglossary.html#substitution
until (function)	A			Perl Functions							<section class="prog__container"><pre>until</pre><p>These flow-control keywords are documented in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/until.html
Can't exec %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to execute the indicated program for you because that&#39;s what the #! line said.  If that&#39;s not what you wanted, you may need to mention &quot;perl&quot; on the #! line somewhere.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-exec-%25s
Can't "default" outside a topicalizer	A			Perl Diagnostics							<section class="prog__container"><p>(F) You have used a <code class="inline"><span class="w">default</span></code>  block that is neither inside a <code class="inline">foreach</code>  loop nor a <code class="inline">given</code>  block.  (Note that this error is issued on exit from the <code class="inline"><span class="w">default</span></code>  block, so you won&#39;t get the error if you use an explicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code>.)</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22default%22-outside-a-topicalizer
Missing $ on loop variable	A			Perl Diagnostics							<section class="prog__container"><p>(F) Apparently you&#39;ve been programming in <b>csh</b> too much.  Variables are always mentioned with the $ in Perl, unlike in the shells, where it can vary from one line to the next.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-%24-on-loop-variable
ExtUtils::MM_VMS (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_VMS - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li>  <span class="w">Do</span> not <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">directly</span>.</li><li>  <span class="w">Instead</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM</span> and <span class="w">it</span> <span class="w">will</span> <span class="w">figure</span> <span class="w">out</span> <span class="w">which</span> <span class="w">MM_</span>*</li><li>  <span class="w">class</span> <span class="w">to</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> for <span class="w">you</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_VMS.html
circumfix operator (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that surrounds its <b>operand</b>, like the angle operator, or parentheses, or a hug.</p></section>	http://perldoc.perl.org/perlglossary.html#circumfix-operator
expression (definition)	A			Perl Glossary							<section class="prog__container"><p>Anything you can legally say in a spot where a <b>value</b> is required. Typically composed of <b>literals</b>, <b>variables</b>, <b>operators</b>, <b>functions</b>, and <b>subroutine</b> calls, not necessarily in that order.</p></section>	http://perldoc.perl.org/perlglossary.html#expression
Can't take log of %g	A			Perl Diagnostics							<section class="prog__container"><p>(F) For ordinary real numbers, you can&#39;t take the logarithm of a negative number or zero.  There&#39;s a Math::Complex package that comes standard with Perl, though, if you really want to do that for the negative numbers.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-take-log-of-%25g
Can't rename %s to %s: %s, skipping file	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) The rename done by the <b>-i</b> switch failed for some reason, probably because you don&#39;t have write permission to the directory.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-rename-%25s-to-%25s%3a-%25s%2c-skipping-file
Malformed prototype for %s: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use a function with a malformed prototype.  The syntax of function prototypes is given a brief compile-time check for obvious errors like invalid characters.  A more rigorous check is run when the function is called. Perhaps the function&#39;s author was trying to write a subroutine signature but didn&#39;t enable that feature first (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;signatures&#39;</span></code> ), so the signature was instead interpreted as a bad prototype.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-prototype-for-%25s%3a-%25s
gt (function)	A			Perl Functions							<section class="prog__container"><pre>gt</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/gt.html
pseudofunction (definition)	A			Perl Glossary							<section class="prog__container"><p>A construct that sometimes looks like a function but really isn’t. Usually reserved for <b>lvalue</b> modifiers like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, for <b>context</b> modifiers like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span></code>, and for the pick-your-own-quotes constructs, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/q.html">q//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qq.html">qq//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qx.html">qx//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qw.html">qw//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m//</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/y.html">y///</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code>.</p></section>	http://perldoc.perl.org/perlglossary.html#pseudofunction
$# is no longer supported	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, syntax) The special variable <code class="inline"><span class="i">$#</span></code> , deprecated in older perls, has been removed as of 5.10.0 and is no longer supported.  You should use the printf/sprintf functions instead.</p></section>	http://perldoc.perl.org/perldiag.html#%24%23-is-no-longer-supported
How do I match a regular expression that's in a variable?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by brian d foy)</p><p>We don&#39;t have to hard-code patterns into the match operator (or anything else that works with regular expressions). We can put the pattern in a variable for later use.</p><p>The match operator is a double quote context, so you can interpolate your variable just like a double quoted string. In this case, you read the regular expression as user input and store it in <code class="inline"><span class="i">$regex</span></code> . Once you have the pattern in <code class="inline"><span class="i">$regex</span></code> , you use that variable in the match operator.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$string</span> =~ <span class="q">m/$regex/</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>Any regular expression special characters in <code class="inline"><span class="i">$regex</span></code>  are still special, and the pattern still has to be valid or Perl will complain. For instance, in this pattern there is an unpaired parenthesis.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">&quot;Unmatched ( paren&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="q">&quot;Two parens to bind them all&quot;</span> =~ <span class="q">m/$regex/</span><span class="sc">;</span></li></ol></pre><p>When Perl compiles the regular expression, it treats the parenthesis as the start of a memory match. When it doesn&#39;t find the closing parenthesis, it complains:</p><pre class="verbatim"><ol><li>    <span class="w">Unmatched</span> <span class="s">(</span> <span class="w">in</span> <span class="w">regex</span><span class="sc">;</span> <span class="w">marked</span> <span class="w">by</span> &lt;-- <span class="w">HERE</span> <span class="w">in</span> <span class="q">m/Unmatched ( &lt;-- HERE  paren/</span> <span class="w">at</span> <span class="w">script</span> <span class="w">line</span> <span class="n">3.</span></li></ol></pre><p>You can get around this in several ways depending on our situation. First, if you don&#39;t want any of the characters in the string to be special, you can escape them with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/quotemeta.html">quotemeta</span></code> before you use the string.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$regex</span> = <span class="l_k" href="http://perldoc.perl.org/functions/quotemeta.html">quotemeta</span><span class="s">(</span> <span class="i">$regex</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$string</span> =~ <span class="q">m/$regex/</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>You can also do this directly in the match operator using the <code class="inline">\\<span class="w">Q</span></code>  and <code class="inline">\\<span class="w">E</span></code>  sequences. The <code class="inline">\\<span class="w">Q</span></code>  tells Perl where to start escaping special characters, and the <code class="inline">\\<span class="w">E</span></code>  tells it where to stop (see <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more details).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$string</span> =~ <span class="q">m/\\Q$regex\\E/</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>Alternately, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr//</span></code>, the regular expression quote operator (see <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more details). It quotes and perhaps compiles the pattern, and you can apply regular expression flags to the pattern.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$input</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">qr/$input/is</span><span class="sc">;</span></li><li></li><li>    <span class="i">$string</span> =~ <span class="q">m/$regex/</span>  <span class="c"># same as m/$input/is;</span></li></ol></pre><p>You might also want to trap any errors by wrapping an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> block around the whole thing.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$input</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$string</span> =~ <span class="q">m/\\Q$input\\E/</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$@</span><span class="sc">;</span></li></ol></pre><p>Or...</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="q">qr/$input/is</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$regex</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$string</span> =~ <span class="q">m/$regex/</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-match-a-regular-expression-that's-in-a-variable%3f
offset (definition)	A			Perl Glossary							<section class="prog__container"><p>How many things you have to skip over when moving from the beginning of a string or array to a specific position within it. Thus, the minimum offset is zero, not one, because you don’t skip anything to get to the first item.</p></section>	http://perldoc.perl.org/perlglossary.html#offset
English (module)	A			Perl Standard Modules							<section class="prog__container"><p>English - use nice English (or awk) names for ugly punctuation variables</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">English</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">English</span> <span class="q">qw( -no_match_vars )</span> <span class="sc">;</span>  <span class="c"># Avoids regex performance</span></li><li>                                        <span class="c"># penalty in perl 5.16 and</span></li><li>                                        <span class="c"># earlier</span></li><li>    ...</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$ERRNO</span> =~ <span class="q">/denied/</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/English.html
How can I use a filehandle indirectly?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>An indirect filehandle is the use of something other than a symbol in a place that a filehandle is expected. Here are ways to get indirect filehandles:</p><pre class="verbatim"><ol><li>    <span class="i">$fh</span> =   <span class="w">SOME_FH</span><span class="sc">;</span>       <span class="c"># bareword is strict-subs hostile</span></li><li>    <span class="i">$fh</span> =  <span class="q">&quot;SOME_FH&quot;</span><span class="sc">;</span>      <span class="c"># strict-refs hostile; same package only</span></li><li>    <span class="i">$fh</span> =  <span class="i">*SOME_FH</span><span class="sc">;</span>       <span class="c"># typeglob</span></li><li>    <span class="i">$fh</span> = \\<span class="i">*SOME_FH</span><span class="sc">;</span>       <span class="c"># ref to typeglob (bless-able)</span></li><li>    <span class="i">$fh</span> =  <span class="i">*SOME_FH</span>{<span class="w">IO</span>}<span class="sc">;</span>   <span class="c"># blessed IO::Handle from *SOME_FH typeglob</span></li></ol></pre><p>Or, you can use the <code class="inline"><span class="w">new</span></code>  method from one of the IO::* modules to create an anonymous filehandle and store that in a scalar variable.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Handle</span><span class="sc">;</span>                     <span class="c"># 5.004 or higher</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> = <span class="w">IO::Handle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Then use any of those as you would a normal filehandle. Anywhere that Perl is expecting a filehandle, an indirect filehandle may be used instead. An indirect filehandle is just a scalar variable that contains a filehandle. Functions like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>, or the <code class="inline"><span class="q">&lt;FH&gt;</span></code>  diamond operator will accept either a named filehandle or a scalar variable containing one:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$ifh</span><span class="cm">,</span> <span class="i">$ofh</span><span class="cm">,</span> <span class="i">$efh</span><span class="s">)</span> = <span class="s">(</span><span class="i">*STDIN</span><span class="cm">,</span> <span class="i">*STDOUT</span><span class="cm">,</span> <span class="i">*STDERR</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$ofh</span> <span class="q">&quot;Type it: &quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$got</span> = <span class="q">&lt;$ifh&gt;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$efh</span> <span class="q">&quot;What was that: $got&quot;</span><span class="sc">;</span></li></ol></pre><p>If you&#39;re passing a filehandle to a function, you can write the function in two ways:</p><pre class="verbatim"><ol><li><span name="accept_fh"></span>    sub <span class="m">accept_fh</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;Sending to indirect filehandle\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Or it can localize a typeglob and use the filehandle directly:</p><pre class="verbatim"><ol><li><span name="accept_fh"></span>    sub <span class="m">accept_fh</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">*FH</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span>  <span class="i">FH</span> <span class="q">&quot;Sending to localized filehandle\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Both styles work with either objects or typeglobs of real filehandles. (They might also work with strings under some circumstances, but this is risky.)</p><pre class="verbatim"><ol><li>    <span class="i">accept_fh</span><span class="s">(</span><span class="i">*STDOUT</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">accept_fh</span><span class="s">(</span><span class="i">$handle</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>In the examples above, we assigned the filehandle to a scalar variable before using it. That is because only simple scalar variables, not expressions or subscripts of hashes or arrays, can be used with built-ins like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code>, or the diamond operator. Using something other than a simple scalar variable as a filehandle is illegal and won&#39;t even compile:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@fd</span> = <span class="s">(</span><span class="i">*STDIN</span><span class="cm">,</span> <span class="i">*STDOUT</span><span class="cm">,</span> <span class="i">*STDERR</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fd</span>[<span class="n">1</span>] <span class="q">&quot;Type it: &quot;</span><span class="sc">;</span>                           <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$got</span> = <span class="q">&lt;$fd[0]&gt;</span>                                  <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fd</span>[<span class="n">2</span>] <span class="q">&quot;What was that: $got&quot;</span><span class="sc">;</span>                 <span class="c"># WRONG</span></li></ol></pre><p>With <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code>, you get around this by using a block and an expression where you would place the filehandle:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span>  <span class="s">{</span> <span class="i">$fd</span>[<span class="n">1</span>] <span class="s">}</span> <span class="q">&quot;funny stuff\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="s">{</span> <span class="i">$fd</span>[<span class="n">1</span>] <span class="s">}</span> <span class="q">&quot;Pity the poor %x.\\n&quot;</span><span class="cm">,</span> <span class="n">3_735_928_559</span><span class="sc">;</span></li><li>    <span class="c"># Pity the poor deadbeef.</span></li></ol></pre><p>That block is a proper block like any other, so you can put more complicated code there. This sends the message out to one of two places:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ok</span> = -x <span class="q">&quot;/bin/cat&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="i">$ok</span> ? <span class="i">$fd</span>[<span class="n">1</span>] <span class="co">:</span> <span class="i">$fd</span>[<span class="n">2</span>] <span class="s">}</span> <span class="q">&quot;cat stat $ok\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="i">$fd</span>[ <span class="n">1</span>+ <span class="s">(</span><span class="i">$ok</span> || <span class="n">0</span><span class="s">)</span> ]  <span class="s">}</span> <span class="q">&quot;cat stat $ok\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>This approach of treating <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> like object methods calls doesn&#39;t work for the diamond operator. That&#39;s because it&#39;s a real operator, not just a function with a comma-less argument. Assuming you&#39;ve been storing typeglobs in your structure as we did above, you can use the built-in function named <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> to read a record just as <code class="inline">&lt;&gt;</code>  does. Given the initialization shown above for @fd, this would work, but only because readline() requires a typeglob. It doesn&#39;t work with objects or strings, which might be a bug we haven&#39;t fixed yet.</p><pre class="verbatim"><ol><li>    <span class="i">$got</span> = <span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span><span class="s">(</span><span class="i">$fd</span>[<span class="n">0</span>]<span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Let it be noted that the flakiness of indirect filehandles is not related to whether they&#39;re strings, typeglobs, objects, or anything else. It&#39;s the syntax of the fundamental operators. Playing the object game doesn&#39;t help you at all here.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-use-a-filehandle-indirectly%3f
Encode::CN (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::CN - China-based Chinese Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$euc_cn</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;euc-cn&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># loads Encode::CN implicitly</span></li><li>    <span class="i">$utf8</span>   = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;euc-cn&quot;</span><span class="cm">,</span> <span class="i">$euc_cn</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/CN.html
minicpan (definition)	A			Perl Glossary							<section class="prog__container"><p>A CPAN mirror that includes just the latest versions for each distribution, probably created with <code class="inline"><span class="w">CPAN::Mini</span></code> . See Camel chapter 19, “CPAN”.</p></section>	http://perldoc.perl.org/perlglossary.html#minicpan
pumpkin (definition)	A			Perl Glossary							<section class="prog__container"><p>A notional “baton” handed around the Perl community indicating who is the lead integrator in some arena of development.</p></section>	http://perldoc.perl.org/perlglossary.html#pumpkin
How can I capture STDERR from an external command?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>There are three basic ways of running external commands:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="i">$cmd</span><span class="sc">;</span>        <span class="c"># using system()</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$output</span> = <span class="q">`$cmd`</span><span class="sc">;</span>        <span class="c"># using backticks (``)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pipe_fh</span><span class="cm">,</span> <span class="q">&quot;$cmd |&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># using open()</span></li></ol></pre><p>With <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code>, both STDOUT and STDERR will go the same place as the script&#39;s STDOUT and STDERR, unless the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> command redirects them. Backticks and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> read <b>only</b> the STDOUT of your command.</p><p>You can also use the <code class="inline"><span class="i">open3</span><span class="s">(</span><span class="s">)</span></code>  function from <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>. Benjamin Goldberg provides some sample code:</p><p>To capture a program&#39;s STDOUT, but discard its STDERR:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">NULL</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="w">File::Spec</span><span class="w">-&gt;devnull</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$in</span><span class="cm">,</span> \\<span class="i">*PH</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;NULL&quot;</span><span class="cm">,</span> <span class="q">&quot;cmd&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;PH&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To capture a program&#39;s STDERR, but discard its STDOUT:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">NULL</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="w">File::Spec</span><span class="w">-&gt;devnull</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$in</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;NULL&quot;</span><span class="cm">,</span> \\<span class="i">*PH</span><span class="cm">,</span> <span class="q">&quot;cmd&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;PH&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To capture a program&#39;s STDERR, and let its STDOUT go to our own STDERR:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$in</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;STDERR&quot;</span><span class="cm">,</span> \\<span class="i">*PH</span><span class="cm">,</span> <span class="q">&quot;cmd&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;PH&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To read both a command&#39;s STDOUT and its STDERR separately, you can redirect them to temp files, let the command run, then read the temp files:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">*CATCHOUT</span> = <span class="w">IO::File</span><span class="w">-&gt;new_tmpfile</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">*CATCHERR</span> = <span class="w">IO::File</span><span class="w">-&gt;new_tmpfile</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$in</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;CATCHOUT&quot;</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;CATCHERR&quot;</span><span class="cm">,</span> <span class="q">&quot;cmd&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> \\<span class="i">*CATCHOUT</span><span class="cm">,</span> \\<span class="i">*CATCHERR</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;CATCHOUT&gt;</span> <span class="s">)</span> <span class="s">{</span><span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;CATCHERR&gt;</span> <span class="s">)</span> <span class="s">{</span><span class="s">}</span></li></ol></pre><p>But there&#39;s no real need for <b>both</b> to be tempfiles... the following should work just as well, without deadlocking:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">*CATCHERR</span> = <span class="w">IO::File</span><span class="w">-&gt;new_tmpfile</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$in</span><span class="cm">,</span> \\<span class="i">*CATCHOUT</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;CATCHERR&quot;</span><span class="cm">,</span> <span class="q">&quot;cmd&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;CATCHOUT&gt;</span> <span class="s">)</span> <span class="s">{</span><span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="w">CATCHERR</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;CATCHERR&gt;</span> <span class="s">)</span> <span class="s">{</span><span class="s">}</span></li></ol></pre><p>And it&#39;ll be faster, too, since we can begin processing the program&#39;s stdout immediately, rather than waiting for the program to finish.</p><p>With any of these, you can change file descriptors before the call:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&quot;&gt;logfile&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;ls&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>or you can use Bourne shell file-descriptor redirection:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`$cmd 2&gt;some_file`</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="s">(</span><span class="w">PIPE</span><span class="cm">,</span> <span class="q">&quot;cmd 2&gt;some_file |&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can also use file-descriptor redirection to make STDERR a duplicate of STDOUT:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`$cmd 2&gt;&amp;1`</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="s">(</span><span class="w">PIPE</span><span class="cm">,</span> <span class="q">&quot;cmd 2&gt;&amp;1 |&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that you <i>cannot</i> simply open STDERR to be a dup of STDOUT in your Perl program and avoid calling the shell to do the redirection. This doesn&#39;t work:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDERR</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;STDOUT&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$alloutput</span> = <span class="q">`cmd args`</span><span class="sc">;</span>  <span class="c"># stderr still escapes</span></li></ol></pre><p>This fails because the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> makes STDERR go to where STDOUT was going at the time of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code>. The backticks then make STDOUT go to a string, but don&#39;t change STDERR (which still goes to the old STDOUT).</p><p>Note that you <i>must</i> use Bourne shell (<code class="inline"><span class="i">sh</span><span class="s">(</span><span class="n">1</span><span class="s">)</span></code> ) redirection syntax in backticks, not <code class="inline"><span class="i">csh</span><span class="s">(</span><span class="n">1</span><span class="s">)</span></code> !  Details on why Perl&#39;s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> and backtick and pipe opens all use the Bourne shell are in the <i>versus/csh.whynot</i> article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in <span href="http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz">http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz</span> . To capture a command&#39;s STDERR and STDOUT together:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`cmd 2&gt;&amp;1`</span><span class="sc">;</span>                       <span class="c"># either with backticks</span></li><li>    <span class="i">$pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">PH</span><span class="cm">,</span> <span class="q">&quot;cmd 2&gt;&amp;1 |&quot;</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># or with an open pipe</span></li><li>    while <span class="s">(</span><span class="q">&lt;PH&gt;</span><span class="s">)</span> <span class="s">{</span> <span class="s">}</span>                            <span class="c">#    plus a read</span></li></ol></pre><p>To capture a command&#39;s STDOUT but discard its STDERR:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`cmd 2&gt;/dev/null`</span><span class="sc">;</span>                <span class="c"># either with backticks</span></li><li>    <span class="i">$pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">PH</span><span class="cm">,</span> <span class="q">&quot;cmd 2&gt;/dev/null |&quot;</span><span class="s">)</span><span class="sc">;</span>       <span class="c"># or with an open pipe</span></li><li>    while <span class="s">(</span><span class="q">&lt;PH&gt;</span><span class="s">)</span> <span class="s">{</span> <span class="s">}</span>                            <span class="c">#    plus a read</span></li></ol></pre><p>To capture a command&#39;s STDERR but discard its STDOUT:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`cmd 2&gt;&amp;1 1&gt;/dev/null`</span><span class="sc">;</span>           <span class="c"># either with backticks</span></li><li>    <span class="i">$pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">PH</span><span class="cm">,</span> <span class="q">&quot;cmd 2&gt;&amp;1 1&gt;/dev/null |&quot;</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># or with an open pipe</span></li><li>    while <span class="s">(</span><span class="q">&lt;PH&gt;</span><span class="s">)</span> <span class="s">{</span> <span class="s">}</span>                            <span class="c">#    plus a read</span></li></ol></pre><p>To exchange a command&#39;s STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out our old STDERR:</p><pre class="verbatim"><ol><li>    <span class="i">$output</span> = <span class="q">`cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-`</span><span class="sc">;</span>        <span class="c"># either with backticks</span></li><li>    <span class="i">$pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">PH</span><span class="cm">,</span> <span class="q">&quot;cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-|&quot;</span><span class="s">)</span><span class="sc">;</span><span class="c"># or with an open pipe</span></li><li>    while <span class="s">(</span><span class="q">&lt;PH&gt;</span><span class="s">)</span> <span class="s">{</span> <span class="s">}</span>                            <span class="c">#    plus a read</span></li></ol></pre><p>To read both a command&#39;s STDOUT and its STDERR separately, it&#39;s easiest to redirect them separately to files, and then read from those files when the program is done:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;program args 1&gt;program.stdout 2&gt;program.stderr&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Ordering is important in all these examples. That&#39;s because the shell processes file descriptor redirections in strictly left to right order.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;prog args 1&gt;tmpfile 2&gt;&amp;1&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;prog args 2&gt;&amp;1 1&gt;tmpfile&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The first command sends both standard out and standard error to the temporary file. The second command sends only the old standard output there, and the old standard error shows up on the old standard out.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-capture-STDERR-from-an-external-command%3f
reserved words (definition)	A			Perl Glossary							<section class="prog__container"><p>A word with a specific, built-in meaning to a <b>compiler</b>, such as <code class="inline">if</code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code>. In many languages (not Perl), it’s illegal to use reserved words to name anything else. (Which is why they’re reserved, after all.) In Perl, you just can’t use them to name <b>labels</b> or <b>filehandles</b>. Also called “keywords”.</p></section>	http://perldoc.perl.org/perlglossary.html#reserved-words
trinary (definition)	A			Perl Glossary							<section class="prog__container"><p>Not a stellar system with three stars, but an <b>operator</b> taking three <b>operands</b>. Sometimes pronounced <b>ternary</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#trinary
Null realloc	A			Perl Diagnostics							<section class="prog__container"><p>(P) An attempt was made to realloc NULL.</p></section>	http://perldoc.perl.org/perldiag.html#Null-realloc
How can I hide the source for my Perl program?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Delete it. :-) Seriously, there are a number of (mostly unsatisfactory) solutions with varying levels of &quot;security&quot;.</p><p>First of all, however, you <i>can&#39;t</i> take away read permission, because the source code has to be readable in order to be compiled and interpreted. (That doesn&#39;t mean that a CGI script&#39;s source is readable by people on the web, though--only by people with access to the filesystem.)  So you have to leave the permissions at the socially friendly 0755 level.</p><p>Some people regard this as a security problem. If your program does insecure things and relies on people not knowing how to exploit those insecurities, it is not secure. It is often possible for someone to determine the insecure things and exploit them without viewing the source. Security through obscurity, the name for hiding your bugs instead of fixing them, is little security indeed.</p><p>You can try using encryption via source filters (Starting from Perl 5.8 the Filter::Simple and Filter::Util::Call modules are included in the standard distribution), but any decent programmer will be able to decrypt it. You can try using the byte code compiler and interpreter described later in <span href="http://perldoc.perl.org/perlfaq3.html">perlfaq3</span>, but the curious might still be able to de-compile it. You can try using the native-code compiler described later, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (true of every language, not just Perl).</p><p>It is very easy to recover the source of Perl programs. You simply feed the program to the perl interpreter and use the modules in the B:: hierarchy. The B::Deparse module should be able to defeat most attempts to hide source. Again, this is not unique to Perl.</p><p>If you&#39;re concerned about people profiting from your code, then the bottom line is that nothing but a restrictive license will give you legal security. License your software and pepper it with threatening statements like &quot;This is unpublished proprietary software of XYZ Corp. Your access to it does not give you permission to use it blah blah blah.&quot;  We are not lawyers, of course, so you should see a lawyer if you want to be sure your license&#39;s wording will stand up in court.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-hide-the-source-for-my-Perl-program%3f
Where to find the perlfaq	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>The perlfaq is an evolving document.  Read the latest version at <span href="http://learn.perl.org/faq/">http://learn.perl.org/faq/</span>.  It is also included in the standard Perl distribution.</p></section>	http://perldoc.perl.org/perlfaq.html#Where-to-find-the-perlfaq
callback (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>handler</b> that you register with some other part of your program in the hope that the other part of your program will <b>trigger</b> your handler when some event of interest transpires.</p></section>	http://perldoc.perl.org/perlglossary.html#callback
Is there a pretty-printer (formatter) for Perl?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/Perl::Tidy">Perl::Tidy</span> comes with a perl script <span href="http://search.cpan.org/perldoc/perltidy">perltidy</span> which indents and reformats Perl scripts to make them easier to read by trying to follow the rules of the <span href="http://perldoc.perl.org/perlstyle.html">perlstyle</span>. If you write Perl, or spend much time reading Perl, you will probably find it useful.</p><p>Of course, if you simply follow the guidelines in <span href="http://perldoc.perl.org/perlstyle.html">perlstyle</span>, you shouldn&#39;t need to reformat. The habit of formatting your code as you write it will help prevent bugs. Your editor can and should help you with this. The perl-mode or newer cperl-mode for emacs can provide remarkable amounts of help with most (but not all) code, and even less programmable editors can provide significant assistance. Tom Christiansen and many other VI users swear by the following settings in vi and its clones:</p><pre class="verbatim"><ol><li>    set ai sw=4</li><li>    map! ^O {^M}^[O^T</li></ol></pre><p>Put that in your <i>.exrc</i> file (replacing the caret characters with control characters) and away you go. In insert mode, ^T is for indenting, ^D is for undenting, and ^O is for blockdenting--as it were. A more complete example, with comments, can be found at <span href="http://www.cpan.org/authors/id/TOMC/scripts/toms.exrc.gz">http://www.cpan.org/authors/id/TOMC/scripts/toms.exrc.gz</span></p></section>	http://perldoc.perl.org/perlfaq3.html#Is-there-a-pretty-printer-(formatter)-for-Perl%3f
Useless use of sort in scalar context	A			Perl Diagnostics							<section class="prog__container"><p>(W void) You used sort in scalar context, as in :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">@y</span><span class="sc">;</span></li></ol></pre><p>This is not very useful, and perl currently optimizes this away.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-sort-in-scalar-context
L<name>	A			Perl POD Formatting Codes							<section class="prog__container"><p>There are various syntaxes, listed below.  In the syntaxes given, <code class="inline"><span class="w">text</span></code> , <code class="inline"><span class="w">name</span></code> , and <code class="inline"><span class="w">section</span></code>  cannot contain the characters &#39;/&#39; and &#39;|&#39;; and any &#39;&lt;&#39; or &#39;&gt;&#39; should be matched.</p><p>A section is started by the named heading or item.  For example, <code class="inline"><span class="w">L</span><span class="q">&lt;perlvar/$.&gt;</span></code>  or <code class="inline"><span class="w">L</span><span class="q">&lt;perlvar/&quot;$.&quot;&gt;</span></code>  both link to the section started by &quot;<code class="inline"><span class="pd">=item $.</span></code> &quot; in perlvar.  And <code class="inline"><span class="w">L</span><span class="q">&lt;perlsyn/For Loops&gt;</span></code>  or <code class="inline"><span class="w">L</span><span class="q">&lt;perlsyn/&quot;For Loops&quot;&gt;</span></code>  both link to the section started by &quot;<code class="inline"><span class="pd">=head2 For Loops</span></code> &quot; in perlsyn.</p><p>To control what text is used for display, you use &quot;<code class="inline">L&lt;text|...&gt;</code>&quot;, as in:</p><p>Or you can link to a web page:</p></section>	http://perldoc.perl.org/perlpod.html#L%3cname%3e----a-hyperlink
directive (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>pod</b> directive. See Camel chapter 23, “Plain Old Documentation”.</p></section>	http://perldoc.perl.org/perlglossary.html#directive
Repeated format line will never terminate (~~ and @#)	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your format contains the ~~ repeat-until-blank sequence and a numeric field that will never go blank so that the repetition never terminates.  You might use ^# instead.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Repeated-format-line-will-never-terminate-(~~-and-%40%23)
Label not found for "next %s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You named a loop to continue, but you&#39;re not currently in a loop of that name, not even if you count where you were called from.  See <span href="http://perldoc.perl.org/functions/last.html">last</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Label-not-found-for-%22next-%25s%22
Tie::File (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::File - Access the lines of a disk file via a Perl array</p> <pre class="verbatim"><ol><li>&#09;<span class="c"># This file documents Tie::File version 0.98</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::File</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">@array</span><span class="cm">,</span> <span class="q">&#39;Tie::File&#39;</span><span class="cm">,</span> <span class="w">filename</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> ...<span class="sc">;</span></li><li></li><li>&#09;<span class="i">$array</span>[<span class="n">13</span>] = <span class="q">&#39;blah&#39;</span><span class="sc">;</span>     <span class="c"># line 13 of the file is now &#39;blah&#39;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$array</span>[<span class="n">42</span>]<span class="sc">;</span>        <span class="c"># display line 42 of the file</span></li><li></li><li>&#09;<span class="i">$n_recs</span> = <span class="i">@array</span><span class="sc">;</span>        <span class="c"># how many records are in the file?</span></li><li>&#09;<span class="i">$#array</span> -= <span class="n">2</span><span class="sc">;</span>            <span class="c"># chop two records off the end</span></li><li></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@array</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;  <span class="q">s/PERL/Perl/g</span><span class="sc">;</span>         <span class="c"># Replace PERL with Perl everywhere in the file</span></li><li>&#09;<span class="s">}</span></li><li></li><li>&#09;<span class="c"># These are just like regular push, pop, unshift, shift, and splice</span></li><li>&#09;<span class="c"># Except that they modify the file in the way you would expect</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@array</span><span class="cm">,</span> <span class="w">new</span> <span class="w">recs</span>...<span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$r1</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span> <span class="i">@array</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span> <span class="i">@array</span><span class="cm">,</span> <span class="w">new</span> <span class="w">recs</span>...<span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$r2</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> <span class="i">@array</span><span class="sc">;</span></li><li>&#09;<span class="i">@old_recs</span> = <span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span> <span class="i">@array</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="w">new</span> <span class="w">recs</span>...<span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="i">@array</span><span class="sc">;</span>            <span class="c"># all finished</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/File.html
dual-lived (definition)	A			Perl Glossary							<section class="prog__container"><p>Some modules live both in the <b>Standard Library</b> and on <b>CPAN</b>. These modules might be developed on two tracks as people modify either version. The trend currently is to untangle these situations.</p></section>	http://perldoc.perl.org/perlglossary.html#dual-lived
How can I comment out a large block of Perl code?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The quick-and-dirty way to comment out more than one line of Perl is to surround those lines with Pod directives. You have to put these directives at the beginning of the line and somewhere where Perl expects a new statement (so not in the middle of statements like the <code class="inline"><span class="c">#</span></code>  comments). You end the comment with <code class="inline"><span class="pd">=cut</span></code> , ending the Pod section:</p><pre class="verbatim"><ol><li>    =<span class="w">pod</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$object</span> = <span class="w">NotGonnaHappen</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">ignored_sub</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$wont_be_assigned</span> = <span class="n">37</span><span class="sc">;</span></li><li></li><li>    =<span class="w">cut</span></li></ol></pre><p>The quick-and-dirty method only works well when you don&#39;t plan to leave the commented code in the source. If a Pod parser comes along, your multiline comment is going to show up in the Pod translation. A better way hides it from Pod parsers as well.</p><p>The <code class="inline"><span class="pd">=begin</span></code>  directive can mark a section for a particular purpose. If the Pod parser doesn&#39;t want to handle it, it just ignores it. Label the comments with <code class="inline"><span class="w">comment</span></code> . End the comment using <code class="inline"><span class="pd">=end</span></code>  with the same label. You still need the <code class="inline"><span class="pd">=cut</span></code>  to go back to Perl code from the Pod comment:</p><pre class="verbatim"><ol><li>    =<span class="w">begin</span> <span class="w">comment</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$object</span> = <span class="w">NotGonnaHappen</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">ignored_sub</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$wont_be_assigned</span> = <span class="n">37</span><span class="sc">;</span></li><li></li><li>    =<span class="w">end</span> <span class="w">comment</span></li><li></li><li>    =<span class="w">cut</span></li></ol></pre><p>For more information on Pod, check out <span href="http://perldoc.perl.org/perlpod.html">perlpod</span> and <span href="http://perldoc.perl.org/perlpodspec.html">perlpodspec</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-comment-out-a-large-block-of-Perl-code%3f
Term::Cap (module)	A			Perl Standard Modules							<section class="prog__container"><p>Term::Cap - Perl termcap interface</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Term::Cap</span><span class="sc">;</span></li><li>    <span class="i">$terminal</span> = <span class="w">Tgetent</span> <span class="w">Term::Cap</span> <span class="s">{</span> <span class="w">TERM</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="w">OSPEED</span> <span class="cm">=&gt;</span> <span class="i">$ospeed</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="i">$terminal</span><span class="i">-&gt;Trequire</span><span class="s">(</span><span class="q">qw/ce ku kd/</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$terminal</span><span class="i">-&gt;Tgoto</span><span class="s">(</span><span class="q">&#39;cm&#39;</span><span class="cm">,</span> <span class="i">$col</span><span class="cm">,</span> <span class="i">$row</span><span class="cm">,</span> <span class="i">$FH</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$terminal</span><span class="i">-&gt;Tputs</span><span class="s">(</span><span class="q">&#39;dl&#39;</span><span class="cm">,</span> <span class="i">$count</span><span class="cm">,</span> <span class="i">$FH</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$terminal</span><span class="i">-&gt;Tpad</span><span class="s">(</span><span class="i">$string</span><span class="cm">,</span> <span class="i">$count</span><span class="cm">,</span> <span class="i">$FH</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Term/Cap.html
How can I call backticks without shell processing?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>This is a bit tricky. You can&#39;t simply write the command like this:</p><pre class="verbatim"><ol><li>    <span class="i">@ok</span> = <span class="q">`grep @opts &#39;$search_string&#39; @filenames`</span><span class="sc">;</span></li></ol></pre><p>As of Perl 5.8.0, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> with multiple arguments. Just like the list forms of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code>, no shell escapes happen.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span> <span class="w">GREP</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="cm">,</span> <span class="q">&#39;grep&#39;</span><span class="cm">,</span> <span class="i">@opts</span><span class="cm">,</span> <span class="i">$search_string</span><span class="cm">,</span> <span class="i">@filenames</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">@ok</span> = <span class="q">&lt;GREP&gt;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">GREP</span><span class="sc">;</span></li></ol></pre><p>You can also:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@ok</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">GREP</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;GREP&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@ok</span><span class="cm">,</span> <span class="i">$_</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">GREP</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&#39;grep&#39;</span><span class="cm">,</span> <span class="i">@opts</span><span class="cm">,</span> <span class="i">$search_string</span><span class="cm">,</span> <span class="i">@filenames</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Just as with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code>, no shell escapes happen when you <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code> a list. Further examples of this can be found in <span href="http://perldoc.perl.org/perlipc.html#Safe-Pipe-Opens">Safe Pipe Opens in perlipc</span>.</p><p>Note that if you&#39;re using Windows, no solution to this vexing issue is even possible. Even though Perl emulates <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code>, you&#39;ll still be stuck, because Windows does not have an argc/argv-style API.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-call-backticks-without-shell-processing%3f
array context (definition)	A			Perl Glossary							<section class="prog__container"><p>An archaic expression for what is more correctly referred to as <b>list context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#array-context
E<escape>	A			Perl POD Formatting Codes							<section class="prog__container"><p>Very similar to HTML/XML <code class="inline">&amp;<i>foo</i>;</code> &quot;entity references&quot;:</p></section>	http://perldoc.perl.org/perlpod.html#E%3cescape%3e----a-character-escape
$= (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The current page length (printable lines) of the currently selected output channel.  The default is 60.</p><p>Mnemonic: = has horizontal lines.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3d
filter (definition)	A			Perl Glossary							<section class="prog__container"><p>A program designed to take a <b>stream</b> of input and transform it into a stream of output.</p></section>	http://perldoc.perl.org/perlglossary.html#filter
How do I manipulate arrays of bits?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack()</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack()</span></code>, or else <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec()</span></code> and the bitwise operations.</p><p>For example, you don&#39;t have to store individual bits in an array (which would mean that you&#39;re wasting a lot of space). To convert an array of bits to a string, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec()</span></code> to set the right bits. This sets <code class="inline"><span class="i">$vec</span></code>  to have bit N set only if <code class="inline"><span class="i">$ints</span>[<span class="w">N</span>]</code>  was set:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@ints</span> = <span class="s">(</span>...<span class="s">)</span><span class="sc">;</span> <span class="c"># array of bits, e.g. ( 1, 0, 0, 1, 1, 0 ... )</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vec</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span><span class="s">(</span> <span class="n">0</span> .. <span class="i">$#ints</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span><span class="i">$_</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$ints</span>[<span class="i">$_</span>]<span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The string <code class="inline"><span class="i">$vec</span></code>  only takes up as many bits as it needs. For instance, if you had 16 entries in <code class="inline"><span class="i">@ints</span></code> , <code class="inline"><span class="i">$vec</span></code>  only needs two bytes to store them (not counting the scalar variable overhead).</p><p>Here&#39;s how, given a vector in <code class="inline"><span class="i">$vec</span></code> , you can get those bits into your <code class="inline"><span class="i">@ints</span></code>  array:</p><pre class="verbatim"><ol><li><span name="bitvec_to_list"></span>    sub <span class="m">bitvec_to_list</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vec</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@ints</span><span class="sc">;</span></li><li>        <span class="c"># Find null-byte density then select best algorithm</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$vec</span> =~ <span class="q">tr/\\0//</span> / <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="i">$vec</span> &gt; <span class="n">0.95</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">integer</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span><span class="sc">;</span></li><li></li><li>            <span class="c"># This method is faster with mostly null-bytes</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span><span class="i">$vec</span> =~ <span class="q">/[^\\0]/g</span> <span class="s">)</span> <span class="s">{</span></li><li>                <span class="i">$i</span> = <span class="n">-9</span> + <span class="n">8</span> * <span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span> <span class="i">$vec</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="i">$i</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> ++<span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>            <span class="c"># This method is a fast general algorithm</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">integer</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span> <span class="q">&quot;b*&quot;</span><span class="cm">,</span> <span class="i">$vec</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="n">0</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$bits</span> =~ <span class="q">s/^(\\d)//</span> &amp;&amp; <span class="i">$1</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span> <span class="i">$bits</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span><span class="i">$bits</span> =~ <span class="q">/1/g</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> \\<span class="i">@ints</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>This method gets faster the more sparse the bit vector is. (Courtesy of Tim Bunce and Winfried Koenig.)</p><p>You can make the while loop a lot shorter with this suggestion from Benjamin Goldberg:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span><span class="i">$vec</span> =~ <span class="q">/[^\\0]+/g</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@ints</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vec</span><span class="cm">,</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="cm">,</span> <span class="i">$-</span>[<span class="n">0</span>] * <span class="n">8</span> .. <span class="i">$+</span>[<span class="n">0</span>] * <span class="n">8</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Or use the CPAN module <span href="http://search.cpan.org/perldoc/Bit::Vector">Bit::Vector</span>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vector</span> = <span class="w">Bit::Vector</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$num_of_bits</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$vector</span><span class="i">-&gt;Index_List_Store</span><span class="s">(</span><span class="i">@ints</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@ints</span> = <span class="i">$vector</span><span class="i">-&gt;Index_List_Read</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p><span href="http://search.cpan.org/perldoc/Bit::Vector">Bit::Vector</span> provides efficient methods for bit vector, sets of small integers and &quot;big int&quot; math.</p><p>Here&#39;s a more extensive illustration using vec():</p><pre class="verbatim"><ol><li>    <span class="c"># vec demo</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vector</span> = <span class="q">&quot;\\xff\\x0f\\xef\\xfe&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Ilya&#39;s string \\\\xff\\\\x0f\\\\xef\\\\xfe represents the number &quot;</span><span class="cm">,</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;N&quot;</span><span class="cm">,</span> <span class="i">$vector</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$is_set</span> = <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vector</span><span class="cm">,</span> <span class="n">23</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Its 23rd bit is &quot;</span><span class="cm">,</span> <span class="i">$is_set</span> ? <span class="q">&quot;set&quot;</span> <span class="co">:</span> <span class="q">&quot;clear&quot;</span><span class="cm">,</span> <span class="q">&quot;.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="i">pvec</span><span class="s">(</span><span class="i">$vector</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">23</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">7</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">8</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">8</span><span class="cm">,</span><span class="n">7</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">32</span><span class="cm">,</span><span class="n">17</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">set_vec</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">32</span><span class="cm">,</span><span class="n">17</span><span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="set_vec"></span>    sub <span class="m">set_vec</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$offset</span><span class="cm">,</span> <span class="i">$width</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vector</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$vector</span><span class="cm">,</span> <span class="i">$offset</span><span class="cm">,</span> <span class="i">$width</span><span class="s">)</span> = <span class="i">$value</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;offset=$offset width=$width value=$value\\n&quot;</span><span class="sc">;</span></li><li>        <span class="i">pvec</span><span class="s">(</span><span class="i">$vector</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="pvec"></span>    sub <span class="m">pvec</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vector</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;b*&quot;</span><span class="cm">,</span> <span class="i">$vector</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$BASE</span> = <span class="n">8</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;vector length in bytes: &quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$vector</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="i">@bytes</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;A8&quot;</span> x <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$vector</span><span class="s">)</span><span class="cm">,</span> <span class="i">$bits</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;bits are: @bytes\\n\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-manipulate-arrays-of-bits%3f
umask (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>umask EXPR<br>umask</pre><p>Sets the umask for the process to EXPR and returns the previous value. If EXPR is omitted, merely returns the current umask.</p><p>The Unix permission <code class="inline"><span class="w">rwxr</span>-x---</code>  is represented as three sets of three bits, or three octal digits: <code class="inline"><span class="n">0750</span></code>  (the leading 0 indicates octal and isn&#39;t one of the digits).  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> value is such a number representing disabled permissions bits.  The permission (or &quot;mode&quot;) values you pass <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/mkdir.html">mkdir</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> are modified by your umask, so even if you tell <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> to create a file with permissions <code class="inline"><span class="n">0777</span></code> , if your umask is <code class="inline"><span class="n">0022</span></code> , then the file will actually be created with permissions <code class="inline"><span class="n">0755</span></code> .  If your <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> were <code class="inline"><span class="n">0027</span></code>  (group can&#39;t write; others can&#39;t read, write, or execute), then passing <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> <code class="inline"><span class="n">0666</span></code>  would create a file with mode <code class="inline"><span class="n">0640</span></code>  (because  <code class="inline"><span class="n">0666</span> &amp;~ <span class="n">027</span></code>  is <code class="inline"><span class="n">0640</span></code> ).</p><p>Here&#39;s some advice: supply a creation mode of <code class="inline"><span class="n">0666</span></code>  for regular files (in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>) and one of <code class="inline"><span class="n">0777</span></code>  for directories (in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/mkdir.html">mkdir</span></code>) and executable files.  This gives users the freedom of choice: if they want protected files, they might choose process umasks of <code class="inline"><span class="n">022</span></code> , <code class="inline"><span class="n">027</span></code> , or even the particularly antisocial mask of <code class="inline"><span class="n">077</span></code> . Programs should rarely if ever make policy decisions better left to the user.  The exception to this is when writing files that should be kept private: mail files, web browser cookies, <i>.rhosts</i> files, and so on.</p><p>If umask(2) is not implemented on your system and you are trying to restrict access for <i>yourself</i> (i.e., <code class="inline"><span class="s">(</span><span class="w">EXPR</span> <span class="i">&amp; 0700</span><span class="s">)</span> &gt; <span class="n">0</span></code> ),  raises an exception.  If umask(2) is not implemented and you are not trying to restrict access for yourself, returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>Remember that a umask is a number, usually given in octal; it is <i>not</i> a string of octal digits.  See also <span href="http://perldoc.perl.org/functions/oct.html">oct</span>, if all you have is a string.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#umask">umask in perlport</span>.</p></section>	http://perldoc.perl.org/functions/umask.html
tell() on unopened filehandle	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to use the tell() function on a filehandle that was either never opened or has since been closed.</p></section>	http://perldoc.perl.org/perldiag.html#tell()-on-unopened-filehandle
%s: Undefined variable	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#%25s%3a-Undefined-variable
What's a closure?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Closures are documented in <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p><p><i>Closure</i> is a computer science term with a precise but hard-to-explain meaning. Usually, closures are implemented in Perl as anonymous subroutines with lasting references to lexical variables outside their own scopes. These lexicals magically refer to the variables that were around when the subroutine was defined (deep binding).</p><p>Closures are most often used in programming languages where you can have the return value of a function be itself a function, as you can in Perl. Note that some languages provide anonymous functions but are not capable of providing proper closures: the Python language, for example. For more information on closures, check out any textbook on functional programming. Scheme is a language that not only supports but encourages closures.</p><p>Here&#39;s a classic non-closure function-generating function:</p><pre class="verbatim"><ol><li><span name="add_function_generator"></span>    sub <span class="m">add_function_generator</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> + <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$add_sub</span> = <span class="i">add_function_generator</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sum</span> = <span class="i">$add_sub</span>-&gt;<span class="s">(</span><span class="n">4</span><span class="cm">,</span><span class="n">5</span><span class="s">)</span><span class="sc">;</span>                <span class="c"># $sum is 9 now.</span></li></ol></pre><p>The anonymous subroutine returned by add_function_generator() isn&#39;t technically a closure because it refers to no lexicals outside its own scope. Using a closure gives you a <i>function template</i> with some customization slots left out to be filled later.</p><p>Contrast this with the following make_adder() function, in which the returned anonymous function contains a reference to a lexical variable outside the scope of that function itself. Such a reference requires that Perl return a proper closure, thus locking in for all time the value that the lexical had when the function was created.</p><pre class="verbatim"><ol><li><span name="make_adder"></span>    sub <span class="m">make_adder</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$addpiece</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> + <span class="i">$addpiece</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f1</span> = <span class="i">make_adder</span><span class="s">(</span><span class="n">20</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f2</span> = <span class="i">make_adder</span><span class="s">(</span><span class="n">555</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Now <code class="inline"><span class="i">$f1</span>-&gt;<span class="s">(</span><span class="i">$n</span><span class="s">)</span></code>  is always 20 plus whatever $n you pass in, whereas <code class="inline"><span class="i">$f2</span>-&gt;<span class="s">(</span><span class="i">$n</span><span class="s">)</span></code>  is always 555 plus whatever $n you pass in. The $addpiece in the closure sticks around.</p><p>Closures are often used for less esoteric purposes. For example, when you want to pass in a bit of code into a function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span><span class="sc">;</span></li><li>    <span class="i">timeout</span><span class="s">(</span> <span class="n">30</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="i">$line</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If the code to execute had been passed in as a string, <code class="inline"><span class="q">&#39;$line = &lt;STDIN&gt;&#39;</span></code> , there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller&#39;s scope.</p><p>Another use for a closure is to make a variable <i>private</i> to a named subroutine, e.g. a counter that gets initialized at creation time of the sub and can only be modified from within the sub. This is sometimes used with a BEGIN block in package files to make sure a variable doesn&#39;t get meddled with during the lifetime of the package:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$id</span> = <span class="n">0</span><span class="sc">;</span></li><li><span name="next_id"></span>        sub <span class="m">next_id</span> <span class="s">{</span> ++<span class="i">$id</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>This is discussed in more detail in <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>; see the entry on <i>Persistent Private Variables</i>.</p></section>	http://perldoc.perl.org/perlfaq7.html#What's-a-closure%3f
Where are modules installed?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Modules are installed on a case-by-case basis (as provided by the methods described in the previous section), and in the operating system. All of these paths are stored in @INC, which you can display with the one-liner</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -e <span class="q">&#39;print join(&quot;\\n&quot;,@INC,&quot;&quot;)&#39;</span></li></ol></pre><p>The same information is displayed at the end of the output from the command</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">V</span></li></ol></pre><p>To find out where a module&#39;s source code is located, use</p><pre class="verbatim"><ol><li>    <span class="w">perldoc</span> -l <span class="w">Encode</span></li></ol></pre><p>to display the path to the module. In some cases (for example, the <code class="inline"><span class="w">AutoLoader</span></code>  module), this command will show the path to a separate <code class="inline"><span class="w">pod</span></code>  file; the module itself should be in the same directory, with a &#39;pm&#39; file extension.</p></section>	http://perldoc.perl.org/perlfaq8.html#Where-are-modules-installed%3f
garbage collection (definition)	A			Perl Glossary							<section class="prog__container"><p>A misnamed feature—it should be called, “expecting your mother to pick up after you”. Strictly speaking, Perl doesn’t do this, but it relies on a reference-counting mechanism to keep things tidy. However, we rarely speak strictly and will often refer to the reference-counting scheme as a form of garbage collection. (If it’s any comfort, when your interpreter exits, a “real” garbage collector runs to make sure everything is cleaned up if you’ve been messy with circular references and such.)</p></section>	http://perldoc.perl.org/perlglossary.html#garbage-collection
SIG%s handler "%s" not defined	A			Perl Diagnostics							<section class="prog__container"><p>(W signal) The signal handler named in %SIG doesn&#39;t, in fact, exist. Perhaps you put it into the wrong package?</p></section>	http://perldoc.perl.org/perldiag.html#SIG%25s-handler-%22%25s%22-not-defined
C (definition)	A			Perl Glossary							<section class="prog__container"><p>A language beloved by many for its inside-out <b>type</b> definitions, inscrutable <b>precedence</b> rules, and heavy <b>overloading</b> of the function-call mechanism. (Well, actually, people first switched to C because they found lowercase identifiers easier to read than upper.) Perl is written in C, so it’s not surprising that Perl borrowed a few ideas from it.</p></section>	http://perldoc.perl.org/perlglossary.html#C
Binary "xor" operator	A			Perl Operators\nPerl Logical or and Exclusive Or							<section class="prog__container">Binary &quot;xor&quot; returns the exclusive-OR of the two surrounding expressions. It cannot short-circuit (of course).</section>	http://perldoc.perl.org/perlop.html#Logical-or-and-Exclusive-Or
File::Spec::VMS (module)	A			Perl Standard Modules		[[File::Spec]]\n[[File::Spec::Unix]]\n[[http://h71000.www7.hp.com/doc/731FINAL/4506/4506pro_014.html#apps_locating_naming_files]]					<section class="prog__container"><p>File::Spec::VMS - methods for VMS file specs</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::VMS</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/VMS.html
Bad free() ignored	A			Perl Diagnostics							<section class="prog__container"><p>(S malloc) An internal routine called free() on something that had never been malloc()ed in the first place.  Mandatory, but can be disabled by setting environment variable <code class="inline"><span class="w">PERL_BADFREE</span></code>  to 0.</p><p>This message can be seen quite often with DB_File on systems with &quot;hard&quot; dynamic linking, like <code class="inline"><span class="w">AIX</span></code>  and <code class="inline"><span class="w">OS</span>/<span class="n">2</span></code> .  It is a bug of <code class="inline"><span class="w">Berkeley</span> <span class="w">DB</span></code>  which is left unnoticed if <code class="inline"><span class="w">DB</span></code>  uses <i>forgiving</i> system malloc().</p></section>	http://perldoc.perl.org/perldiag.html#Bad-free()-ignored
DynaLoader (module)	A			Perl Standard Modules							<section class="prog__container"><p>DynaLoader - Dynamically load C libraries into Perl code</p> <pre class="verbatim"><ol><li><span name="package-YourPackage"></span>    package <span class="i">YourPackage</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">DynaLoader</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="q">qw(... DynaLoader ...)</span><span class="sc">;</span></li><li>    <span class="w">bootstrap</span> <span class="w">YourPackage</span><span class="sc">;</span></li><li></li><li>    <span class="c"># optional method for &#39;global&#39; loading</span></li><li><span name="dl_load_flags"></span>    sub <span class="m">dl_load_flags</span> <span class="s">{</span> <span class="n">0x01</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/DynaLoader.html
lvalue modifier (definition)	A			Perl Glossary							<section class="prog__container"><p>An adjectival pseudofunction that warps the meaning of an <b>lvalue</b> in some declarative fashion. Currently there are three lvalue modifiers: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code>.</p></section>	http://perldoc.perl.org/perlglossary.html#lvalue-modifier
Bizarre SvTYPE [%d]	A			Perl Diagnostics							<section class="prog__container"><p>(P) When starting a new thread or returning values from a thread, Perl encountered an invalid data type.</p></section>	http://perldoc.perl.org/perldiag.html#Bizarre-SvTYPE-%5b%25d%5d
Are Perl regexes DFAs or NFAs? Are they POSIX compliant?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>While it&#39;s true that Perl&#39;s regular expressions resemble the DFAs (deterministic finite automata) of the egrep(1) program, they are in fact implemented as NFAs (non-deterministic finite automata) to allow backtracking and backreferencing. And they aren&#39;t POSIX-style either, because those guarantee worst-case behavior for all cases. (It seems that some people prefer guarantees of consistency, even when what&#39;s guaranteed is slowness.) See the book &quot;Mastering Regular Expressions&quot; (from O&#39;Reilly) by Jeffrey Friedl for all the details you could ever hope to know on these matters (a full citation appears in <span href="http://perldoc.perl.org/perlfaq2.html">perlfaq2</span>).</p></section>	http://perldoc.perl.org/perlfaq6.html#Are-Perl-regexes-DFAs-or-NFAs%3f-Are-they-POSIX-compliant%3f
Locale '%s' may not work well.%s	A			Perl Diagnostics							<section class="prog__container"><p>(W locale) You are using the named locale, which is a non-UTF-8 one, and which perl has determined is not fully compatible with what it can handle.  The second <code class="inline"><span class="i">%s</span></code>  gives a reason.</p><p>By far the most common reason is that the locale has characters in it that are represented by more than one byte.  The only such locales that Perl can handle are the UTF-8 locales.  Most likely the specified locale is a non-UTF-8 one for an East Asian language such as Chinese or Japanese.  If the locale is a superset of ASCII, the ASCII portion of it may work in Perl.</p><p>Some essentially obsolete locales that aren&#39;t supersets of ASCII, mainly those in ISO 646 or other 7-bit locales, such as ASMO 449, can also have problems, depending on what portions of the ASCII character set get changed by the locale and are also used by the program. The warning message lists the determinable conflicting characters.</p><p>Note that not all incompatibilities are found.</p><p>If this happens to you, there&#39;s not much you can do except switch to use a different locale or use <span href="http://perldoc.perl.org/Encode.html">Encode</span> to translate from the locale into UTF-8; if that&#39;s impracticable, you have been warned that some things may break.</p><p>This message is output once each time a bad locale is switched into within the scope of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code> , or on the first possibly-affected operation if the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code>  inherits a bad one.  It is not raised for any operations from the <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module.</p></section>	http://perldoc.perl.org/perldiag.html#Locale-'%25s'-may-not-work-well.%25s
Binary ">>" operator	A			Perl Operators\nPerl Shift Operators							<section class="prog__container">Binary &quot;&gt;&gt;&quot; returns the value of its left argument shifted right by the number of bits specified by the right argument. Arguments should be integers. (See also Integer Arithmetic.)</section>	http://perldoc.perl.org/perlop.html#Shift-Operators
Possible unintended interpolation of %s in string	A			Perl Diagnostics							<section class="prog__container"><p>(W ambiguous) You said something like &#39;@foo&#39; in a double-quoted string but there was no array <code class="inline"><span class="i">@foo</span></code>  in scope at the time.  If you wanted a literal @foo, then write it as \\@foo; otherwise find out what happened to the array you apparently lost track of.</p></section>	http://perldoc.perl.org/perldiag.html#Possible-unintended-interpolation-of-%25s-in-string
Do I need to recompile XS modules when there is a change in the C library?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by Alex Beamish)</p><p>If the new version of the C library is ABI-compatible (that&#39;s Application Binary Interface compatible) with the version you&#39;re upgrading from, and if the shared library version didn&#39;t change, no re-compilation should be necessary.</p></section>	http://perldoc.perl.org/perlfaq7.html#Do-I-need-to-recompile-XS-modules-when-there-is-a-change-in-the-C-library%3f
Can't localize through a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said something like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$$ref</span></code> , which Perl can&#39;t currently handle, because when it goes to restore the old value of whatever $ref pointed to after the scope of the local() is finished, it can&#39;t be sure that $ref will still be a reference.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-localize-through-a-reference
Can't weaken a nonreference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You attempted to weaken something that was not a reference.  Only references can be weakened.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-weaken-a-nonreference
closure (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>anonymous</b> subroutine that, when a reference to it is generated at runtime, keeps track of the identities of externally visible <b>lexical variables</b>, even after those lexical variables have supposedly gone out of <b>scope</b>. They’re called “closures” because this sort of behavior gives mathematicians a sense of closure.</p></section>	http://perldoc.perl.org/perlglossary.html#closure
IO::Socket::UNIX (module)	A			Perl Standard Modules		[[Socket]]\n[[IO::Socket]]					<section class="prog__container"><p>IO::Socket::UNIX - Object interface for AF_UNIX domain sockets</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Socket::UNIX</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$SOCK_PATH</span> = <span class="q">&quot;$ENV{HOME}/unix-domain-socket-test.sock&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Server:</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$server</span> = <span class="w">IO::Socket::UNIX</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="w">Type</span> <span class="cm">=&gt;</span> <span class="i">SOCK_STREAM</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span></li><li>        <span class="w">Local</span> <span class="cm">=&gt;</span> <span class="i">$SOCK_PATH</span><span class="cm">,</span></li><li>        <span class="w">Listen</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$conn</span> = <span class="i">$server</span><span class="i">-&gt;accept</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$conn</span><span class="i">-&gt;print</span><span class="s">(</span><span class="q">&quot;Hello &quot;</span> . <span class="s">(</span><span class="i">$count</span>++<span class="s">)</span> . <span class="q">&quot;\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># Client:</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$client</span> = <span class="w">IO::Socket::UNIX</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="w">Type</span> <span class="cm">=&gt;</span> <span class="i">SOCK_STREAM</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span></li><li>        <span class="w">Peer</span> <span class="cm">=&gt;</span> <span class="i">$SOCK_PATH</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Now read and write from $client</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Socket/UNIX.html
anonymous (definition)	A			Perl Glossary							<section class="prog__container"><p>Used to describe a <b>referent</b> that is not directly accessible through a named <b>variable</b>. Such a referent must be indirectly accessible through at least one <b>hard reference</b>. When the last hard reference goes away, the anonymous referent is destroyed without pity.</p></section>	http://perldoc.perl.org/perlglossary.html#anonymous
Math::BigInt::FastCalc (module)	A			Perl Standard Modules		[[Math::BigInt]]\n[[Math::BigFloat]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::FastCalc]]\n[[Math::BigInt::Pari]]					<section class="prog__container"><p>Math::BigInt::FastCalc - Math::BigInt::Calc with some XS for more speed</p> <p>Provides support for big integer calculations. Not intended to be used by other modules. Other modules which sport the same functions can also be used to support Math::BigInt, like <span href="http://search.cpan.org/perldoc/Math::BigInt::GMP">Math::BigInt::GMP</span> or <span href="http://search.cpan.org/perldoc/Math::BigInt::Pari">Math::BigInt::Pari</span>.</p></section>	http://perldoc.perl.org/Math/BigInt/FastCalc.html
device (definition)	A			Perl Glossary							<section class="prog__container"><p>A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a joystick or a mouse) attached to your computer, which the <b>operating system</b> tries to make look like a <b>file</b> (or a bunch of files). Under Unix, these fake files tend to live in the <i>/dev</i> directory.</p></section>	http://perldoc.perl.org/perlglossary.html#device
Thread::Semaphore (module)	A			Perl Standard Modules		[[http://www.cpanforum.com/dist/Thread-Semaphore]]\n[[threads]]\n[[threads::shared]]					<section class="prog__container"><p>Thread::Semaphore - Thread-safe semaphores</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Thread::Semaphore</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s</span> = <span class="w">Thread::Semaphore</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s</span><span class="i">-&gt;down</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># Also known as the semaphore P operation.</span></li><li>    <span class="c"># The guarded section is here</span></li><li>    <span class="i">$s</span><span class="i">-&gt;up</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>     <span class="c"># Also known as the semaphore V operation.</span></li><li></li><li>    <span class="c"># Decrement the semaphore only if it would immediately succeed.</span></li><li>    if <span class="s">(</span><span class="i">$s</span><span class="i">-&gt;down_nb</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># The guarded section is here</span></li><li>        <span class="i">$s</span><span class="i">-&gt;up</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># Forcefully decrement the semaphore even if its count goes below 0.</span></li><li>    <span class="i">$s</span><span class="i">-&gt;down_force</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># The default value for semaphore operations is 1</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s</span> = <span class="w">Thread::Semaphore</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$initial_value</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s</span><span class="i">-&gt;down</span><span class="s">(</span><span class="i">$down_value</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s</span><span class="i">-&gt;up</span><span class="s">(</span><span class="i">$up_value</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$s</span><span class="i">-&gt;down_nb</span><span class="s">(</span><span class="i">$down_value</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>        <span class="i">$s</span><span class="i">-&gt;up</span><span class="s">(</span><span class="i">$up_value</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="i">$s</span><span class="i">-&gt;down_force</span><span class="s">(</span><span class="i">$down_value</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Thread/Semaphore.html
bit shift (definition)	A			Perl Glossary							<section class="prog__container"><p>The movement of bits left or right in a computer word, which has the effect of multiplying or dividing by a power of 2.</p></section>	http://perldoc.perl.org/perlglossary.html#bit-shift
B::Debug (module)	A			Perl Standard Modules							<section class="prog__container"><p>B::Debug - Walk Perl syntax tree, printing debug info about ops</p> <pre class="verbatim"><ol><li>        <span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Debug</span> <span class="w">foo</span>.<span class="w">pl</span></li><li>        <span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Debug</span><span class="cm">,</span>-<span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">foo</span>.<span class="w">pl</span></li></ol></pre></section>	http://perldoc.perl.org/B/Debug.html
Invalid mro name: '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to <code class="inline"><span class="i">mro::set_mro</span><span class="s">(</span><span class="q">&quot;classname&quot;</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="s">)</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">mro</span> <span class="q">&#39;foo&#39;</span></code> , where <code class="inline"><span class="w">foo</span></code>  is not a valid method resolution order (MRO).  Currently, the only valid ones supported are <code class="inline"><span class="w">dfs</span></code>  and <code class="inline"><span class="w">c3</span></code> , unless you have loaded a module that is a MRO plugin.  See <span href="http://perldoc.perl.org/mro.html">mro</span> and <span href="http://perldoc.perl.org/perlmroapi.html">perlmroapi</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-mro-name%3a-'%25s'
hex (function)	A			Perl Functions\nPerl Functions for SCALARs or strings\nPerl Numeric functions							<section class="prog__container"><pre>hex EXPR<br>hex</pre><p>Interprets EXPR as a hex string and returns the corresponding value. (To convert strings that might start with either <code class="inline"><span class="n">0</span></code> , <code class="inline"><span class="n">0</span>x</code> , or <code class="inline">0b</code>, see <span href="http://perldoc.perl.org/functions/oct.html">oct</span>.)  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/hex.html">hex</span> <span class="q">&#39;0xAf&#39;</span><span class="sc">;</span> <span class="c"># prints &#39;175&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/hex.html">hex</span> <span class="q">&#39;aF&#39;</span><span class="sc">;</span>   <span class="c"># same</span></li></ol></pre><p>Hex strings may only represent integers.  Strings that would cause integer overflow trigger a warning.  Leading whitespace is not stripped, unlike oct().  To present something as hex, look into <span href="http://perldoc.perl.org/functions/printf.html">printf</span>, <span href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span>, and <span href="http://perldoc.perl.org/functions/unpack.html">unpack</span>.</p></section>	http://perldoc.perl.org/functions/hex.html
-x directory	A			Perl Command-Line Switches							<section class="prog__container"><p>tells Perl that the program is embedded in a larger chunk of unrelated text, such as in a mail message.  Leading garbage will be discarded until the first line that starts with <code class="inline"><span class="c">#!</span></code>  and contains the string &quot;perl&quot;.  Any meaningful switches on that line will be applied.</p><p>All references to line numbers by the program (warnings, errors, ...) will treat the <code class="inline"><span class="c">#!</span></code>  line as the first line. Thus a warning on the 2nd line of the program, which is on the 100th line in the file will be reported as line 2, not as line 100. This can be overridden by using the <code class="inline"><span class="c">#line</span></code>  directive. (See <span href="http://perldoc.perl.org/perlsyn.html#Plain-Old-Comments-(Not!)">Plain Old Comments (Not!) in perlsyn</span>)</p><p>If a directory name is specified, Perl will switch to that directory before running the program.  The <b>-x</b> switch controls only the disposal of leading garbage.  The program must be terminated with <code class="inline"><span name="__END__"></span>__END__</code>  if there is trailing garbage to be ignored;  the program can process any or all of the trailing garbage via the <code class="inline"><span class="w">DATA</span></code>  filehandle if desired.</p><p>The directory, if specified, must appear immediately following the <b>-x</b> with no intervening whitespace.</p></section>	http://perldoc.perl.org/perlrun.html#*-x*_directory_
block (definition)	A			Perl Glossary							<section class="prog__container"><p>What a <b>process</b> does when it has to wait for something: “My process blocked waiting for the disk.” As an unrelated noun, it refers to a large chunk of data, of a size that the <b>operating system</b> likes to deal with (normally a power of 2 such as 512 or 8192). Typically refers to a chunk of data that’s coming from or going to a disk file.</p></section>	http://perldoc.perl.org/perlglossary.html#block
Math::Trig (module)	A			Perl Standard Modules							<section class="prog__container"><p>Math::Trig - trigonometric functions</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Trig</span><span class="sc">;</span></li><li></li><li>    <span class="i">$x</span> = <span class="i">tan</span><span class="s">(</span><span class="n">0.9</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$y</span> = <span class="i">acos</span><span class="s">(</span><span class="n">3.7</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span> = <span class="i">asin</span><span class="s">(</span><span class="n">2.4</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$halfpi</span> = <span class="w">pi</span>/<span class="n">2</span><span class="sc">;</span></li><li></li><li>    <span class="i">$rad</span> = <span class="i">deg2rad</span><span class="s">(</span><span class="n">120</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Import constants pi2, pip2, pip4 (2*pi, pi/2, pi/4).</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Trig</span> <span class="q">&#39;:pi&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Import the conversions between cartesian/spherical/cylindrical.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Trig</span> <span class="q">&#39;:radial&#39;</span><span class="sc">;</span></li><li></li><li>        <span class="c"># Import the great circle formulas.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Trig</span> <span class="q">&#39;:great_circle&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Math/Trig.html
Encode::CN::HZ (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::CN::HZ -- internally used by Encode::CN</p> </section>	http://perldoc.perl.org/Encode/CN/HZ.html
Process terminated by SIG%s	A			Perl Diagnostics							<section class="prog__container"><p>(W) This is a standard message issued by OS/2 applications, while *nix applications die in silence.  It is considered a feature of the OS/2 port.  One can easily disable this by appropriate sighandlers, see <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span>.  See also &quot;Process terminated by SIGTERM/SIGINT&quot; in <span href="http://perldoc.perl.org/perlos2.html">perlos2</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Process-terminated-by-SIG%25s
Net::netent (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::netent - by-name interface to Perl&#39;s built-in getnet*() functions</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::netent</span> <span class="q">qw(:FIELDS)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/getnetbyname.html">getnetbyname</span><span class="s">(</span><span class="q">&quot;loopback&quot;</span><span class="s">)</span> &#09;&#09;or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;bad net&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%s is %08X\\n&quot;</span><span class="cm">,</span> <span class="i">$n_name</span><span class="cm">,</span> <span class="i">$n_net</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::netent</span><span class="sc">;</span></li><li></li><li> <span class="i">$n</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getnetbyname.html">getnetbyname</span><span class="s">(</span><span class="q">&quot;loopback&quot;</span><span class="s">)</span> &#09;&#09;or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;bad net&quot;</span><span class="sc">;</span></li><li> <span class="s">{</span> <span class="c"># there&#39;s gotta be a better way, eh?</span></li><li>     <span class="i">@bytes</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;C4&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;N&quot;</span><span class="cm">,</span> <span class="i">$n</span><span class="i">-&gt;net</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> <span class="i">@bytes</span> while <span class="i">@bytes</span> &amp;&amp; <span class="i">$bytes</span>[<span class="n">0</span>] == <span class="n">0</span><span class="sc">;</span></li><li> <span class="s">}</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%s is %08X [%d.%d.%d.%d]\\n&quot;</span><span class="cm">,</span> <span class="i">$n</span><span class="i">-&gt;name</span><span class="cm">,</span> <span class="i">$n</span><span class="i">-&gt;net</span><span class="cm">,</span> <span class="i">@bytes</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/netent.html
TAP::Parser::Result::Version (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Version - TAP syntax version token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Version.html
nybble (definition)	A			Perl Glossary							<section class="prog__container"><p>Half a <b>byte</b>, equivalent to one <b>hexadecimal</b> digit, and worth four <b>bits</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#nybble
$0 (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>Contains the name of the program being executed.</p><p>On some (but not all) operating systems assigning to <code class="inline"><span class="i">$0</span></code>  modifies the argument area that the <code class="inline"><span class="w">ps</span></code>  program sees.  On some platforms you may have to use special <code class="inline"><span class="w">ps</span></code>  options or a different <code class="inline"><span class="w">ps</span></code>  to see the changes.  Modifying the <code class="inline"><span class="i">$0</span></code>  is more useful as a way of indicating the current program state than it is for hiding the program you&#39;re running.</p><p>Note that there are platform-specific limitations on the maximum length of <code class="inline"><span class="i">$0</span></code> .  In the most extreme case it may be limited to the space occupied by the original <code class="inline"><span class="i">$0</span></code> .</p><p>In some platforms there may be arbitrary amount of padding, for example space characters, after the modified name as shown by <code class="inline"><span class="w">ps</span></code> . In some platforms this padding may extend all the way to the original length of the argument area, no matter what you do (this is the case for example with Linux 2.2).</p><p>Note for BSD users: setting <code class="inline"><span class="i">$0</span></code>  does not completely remove &quot;perl&quot; from the ps(1) output.  For example, setting <code class="inline"><span class="i">$0</span></code>  to <code class="inline"><span class="q">&quot;foobar&quot;</span></code>  may result in <code class="inline"><span class="q">&quot;perl: foobar (perl)&quot;</span></code>  (whether both the <code class="inline"><span class="q">&quot;perl: &quot;</span></code>  prefix and the &quot; (perl)&quot; suffix are shown depends on your exact BSD variant and version).  This is an operating system feature, Perl cannot help it.</p><p>In multithreaded scripts Perl coordinates the threads so that any thread may modify its copy of the <code class="inline"><span class="i">$0</span></code>  and the change becomes visible to ps(1) (assuming the operating system plays along).  Note that the view of <code class="inline"><span class="i">$0</span></code>  the other threads have will not change since they have their own copies of it.</p><p>If the program has been given to perl via the switches <code class="inline">-e</code>  or <code class="inline">-<span class="w">E</span></code> , <code class="inline"><span class="i">$0</span></code>  will contain the string <code class="inline"><span class="q">&quot;-e&quot;</span></code> .</p><p>On Linux as of perl v5.14.0 the legacy process name will be set with <code class="inline"><span class="i">prctl</span><span class="s">(</span><span class="n">2</span><span class="s">)</span></code> , in addition to altering the POSIX name via <code class="inline"><span class="w">argv</span><span class="s">[</span><span class="n">0</span><span class="s">]</span></code>  as perl has done since version 4.000.  Now system utilities that read the legacy process name such as ps, top and killall will recognize the name you set when assigning to <code class="inline"><span class="i">$0</span></code> .  The string you supply will be cut off at 16 bytes, this is a limitation imposed by Linux.</p><p>Mnemonic: same as <b>sh</b> and <b>ksh</b>.</p></section>	http://perldoc.perl.org/perlvar.html#%240
address operator (definition)	A			Perl Glossary							<section class="prog__container"><p>Some languages work directly with the memory addresses of values, but this can be like playing with fire. Perl provides a set of asbestos gloves for handling all memory management. The closest to an address operator in Perl is the backslash operator, but it gives you a <b>hard reference</b>, which is much safer than a memory address.</p></section>	http://perldoc.perl.org/perlglossary.html#address-operator
symbol (definition)	A			Perl Glossary							<section class="prog__container"><p>Generally, any <b>token</b> or <b>metasymbol</b>. Often used more specifically to mean the sort of name you might find in a <b>symbol table</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#symbol
$" (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>When an array or an array slice is interpolated into a double-quoted string or a similar context such as <code class="inline"><span class="q">/.../</span></code> , its elements are separated by this value.  Default is a space.  For example, this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The array is: @array\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>is equivalent to this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The array is: &quot;</span> . <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="i">$&quot;</span><span class="cm">,</span> <span class="i">@array</span><span class="s">)</span> . <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Mnemonic: works in double-quoted context.</p></section>	http://perldoc.perl.org/perlvar.html#%24%22
Can't fork: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) A fatal error occurred while trying to fork while opening a pipeline.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-fork%3a-%25s
titlecase (definition)	A			Perl Glossary							<section class="prog__container"><p>The case used for capitals that are followed by lowercase characters instead of by more capitals. Sometimes called sentence case or headline case. English doesn’t use Unicode titlecase, but casing rules for English titles are more complicated than simply capitalizing each word’s first character.</p></section>	http://perldoc.perl.org/perlglossary.html#titlecase
App::Prove (module)	A			Perl Standard Modules		[[prove]]\n[[TAP::Harness]]					<section class="prog__container"><p>App::Prove - Implements the <code class="inline"><span class="w">prove</span></code>  command.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">App::Prove</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$app</span> = <span class="w">App::Prove</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>    <span class="i">$app</span><span class="i">-&gt;process_args</span><span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$app</span><span class="i">-&gt;run</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/App/Prove.html
panic: realloc, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something requested a negative number of bytes of realloc.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-realloc%2c-%25s
Which magazines have Perl content?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>There&#39;s also <i>$foo Magazin</i>, a German magazine dedicated to Perl, at ( <span href="http://www.foo-magazin.de">http://www.foo-magazin.de</span> ). The <i>Perl-Zeitung</i> is another German-speaking magazine for Perl beginners (see <span href="http://perl-zeitung.at.tf">http://perl-zeitung.at.tf</span> ).</p><p>Several Unix/Linux related magazines frequently include articles on Perl.</p></section>	http://perldoc.perl.org/perlfaq2.html#Which-magazines-have-Perl-content%3f
TAP::Harness (module)	A			Perl Standard Modules		[[Test::Harness]]					<section class="prog__container"><p>TAP::Harness - Run test scripts with statistics</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Harness</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$harness</span> = <span class="w">TAP::Harness</span><span class="w">-&gt;new</span><span class="s">(</span> \\<span class="i">%args</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$harness</span><span class="i">-&gt;runtests</span><span class="s">(</span><span class="i">@tests</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Harness.html
Net::Config (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::Config - Local configuration data for libnet</p> </section>	http://perldoc.perl.org/Net/Config.html
$^D (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>The current value of the debugging flags.  May be read or set.  Like its command-line equivalent, you can use numeric or symbolic values, eg <code class="inline"><span class="i">$^D</span> = <span class="n">10</span></code>  or <code class="inline"><span class="i">$^D</span> = <span class="q">&quot;st&quot;</span></code> .</p><p>Mnemonic: value of <b>-D</b> switch.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eD
How do I close a file descriptor by number?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If, for some reason, you have a file descriptor instead of a filehandle (perhaps you used <code class="inline"><span class="w">POSIX::open</span></code> ), you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close()</span></code> function from the <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">POSIX::close</span><span class="s">(</span> <span class="i">$fd</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This should rarely be necessary, as the Perl <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close()</span></code> function is to be used for things that Perl opened itself, even if it was a dup of a numeric descriptor as with <code class="inline"><span class="w">MHCONTEXT</span></code>  above. But if you really have to, you may be able to do this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;sys/syscall.ph&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$rc</span> = <span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span><span class="s">(</span><span class="i">SYS_close</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span> <span class="i">$fd</span> + <span class="n">0</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># must force numeric</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t sysclose $fd: $!&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$rc</span> == <span class="n">-1</span><span class="sc">;</span></li></ol></pre><p>Or, just use the fdopen(3S) feature of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code>:</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&amp;=$fd&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot reopen fd=$fd: $!&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$fh</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-close-a-file-descriptor-by-number%3f
"%s" variable %s masks earlier declaration in same %s	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) A &quot;my&quot;, &quot;our&quot; or &quot;state&quot; variable has been redeclared in the current scope or statement, effectively eliminating all access to the previous instance.  This is almost always a typographical error.  Note that the earlier variable will still exist until the end of the scope or until all closure references to it are destroyed.</p></section>	http://perldoc.perl.org/perldiag.html#%22%25s%22-variable-%25s-masks-earlier-declaration-in-same-%25s
oct (function)	A			Perl Functions\nPerl Functions for SCALARs or strings\nPerl Numeric functions							<section class="prog__container"><pre>oct EXPR<br>oct</pre><p>Interprets EXPR as an octal string and returns the corresponding value.  (If EXPR happens to start off with <code class="inline"><span class="n">0</span>x</code> , interprets it as a hex string.  If EXPR starts off with <code class="inline">0b</code>, it is interpreted as a binary string.  Leading whitespace is ignored in all three cases.) The following will handle decimal, binary, octal, and hex in standard Perl notation:</p><pre class="verbatim"><ol><li>    <span class="i">$val</span> = <span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span><span class="s">(</span><span class="i">$val</span><span class="s">)</span> if <span class="i">$val</span> =~ <span class="q">/^0/</span><span class="sc">;</span></li></ol></pre><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .   To go the other way (produce a number in octal), use sprintf() or printf():</p><pre class="verbatim"><ol><li>    <span class="i">$dec_perms</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="q">&quot;filename&quot;</span><span class="s">)</span><span class="s">)</span>[<span class="n">2</span>] &amp; <span class="n">07777</span><span class="sc">;</span></li><li>    <span class="i">$oct_perm_str</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span> <span class="q">&quot;%o&quot;</span><span class="cm">,</span> <span class="i">$perms</span><span class="sc">;</span></li></ol></pre><p>The oct() function is commonly used when a string such as <code class="inline"><span class="n">644</span></code>  needs to be converted into a file mode, for example.  Although Perl  automatically converts strings into numbers as needed, this automatic conversion assumes base 10.</p><p>Leading white space is ignored without warning, as too are any trailing  non-digits, such as a decimal point (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span></code> only handles non-negative integers, not negative integers or floating point).</p></section>	http://perldoc.perl.org/functions/oct.html
What mailing lists are there for Perl?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>A comprehensive list of Perl-related mailing lists can be found at <span href="http://lists.perl.org/">http://lists.perl.org/</span></p></section>	http://perldoc.perl.org/perlfaq2.html#What-mailing-lists-are-there-for-Perl%3f
How do I avoid zombies on a Unix system?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Use the reaper code from <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span> to call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait()</span></code> when a SIGCHLD is received, or else use the double-fork technique described in <span href="http://perldoc.perl.org/perlfaq8.html#How-do-I-start-a-process-in-the-background%3f">How do I start a process in the background? in perlfaq8</span>.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-avoid-zombies-on-a-Unix-system%3f
rand (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>rand EXPR<br>rand</pre><p>Returns a random fractional number greater than or equal to <code class="inline"><span class="n">0</span></code>  and less than the value of EXPR.  (EXPR should be positive.)  If EXPR is omitted, the value <code class="inline"><span class="n">1</span></code>  is used.  Currently EXPR with the value <code class="inline"><span class="n">0</span></code>  is also special-cased as <code class="inline"><span class="n">1</span></code>  (this was undocumented before Perl 5.8.0 and is subject to change in future versions of Perl).  Automatically calls <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> unless <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> has already been called.  See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code>.</p><p>Apply <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/int.html">int()</span></code> to the value returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand()</span></code> if you want random integers instead of random fractional numbers.  For example,</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="n">10</span><span class="s">)</span><span class="s">)</span></li></ol></pre><p>returns a random integer between <code class="inline"><span class="n">0</span></code>  and <code class="inline"><span class="n">9</span></code> , inclusive.</p><p>(Note: If your rand function consistently returns numbers that are too large or too small, then your version of Perl was probably compiled with the wrong number of RANDBITS.)</p><p><b><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand()</span></code> is not cryptographically secure.  You should not rely on it in security-sensitive situations.</b>  As of this writing, a number of third-party CPAN modules offer random number generators intended by their authors to be cryptographically secure, including: <span href="http://search.cpan.org/perldoc/Data::Entropy">Data::Entropy</span>, <span href="http://search.cpan.org/perldoc/Crypt::Random">Crypt::Random</span>, <span href="http://search.cpan.org/perldoc/Math::Random::Secure">Math::Random::Secure</span>, and <span href="http://search.cpan.org/perldoc/Math::TrulyRandom">Math::TrulyRandom</span>.</p></section>	http://perldoc.perl.org/functions/rand.html
-i [ extension ]	A			Perl Command-Line Switches							<section class="prog__container"><p>specifies that files processed by the <code class="inline">&lt;&gt;</code>  construct are to be edited in-place.  It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for print() statements.  The extension, if supplied, is used to modify the name of the old file to make a backup copy, following these rules:</p><p>If no extension is supplied, and your system supports it, the original <i>file</i> is kept open without a name while the output is redirected to a new file with the original <i>filename</i>.  When perl exits, cleanly or not, the original <i>file</i> is unlinked.</p><p>If the extension doesn&#39;t contain a <code class="inline"><span class="i">*</span></code> , then it is appended to the end of the current filename as a suffix.  If the extension does contain one or more <code class="inline"><span class="i">*</span></code>  characters, then each <code class="inline"><span class="i">*</span></code>  is replaced with the current filename.  In Perl terms, you could think of this as:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$backup</span> = <span class="i">$extension</span><span class="s">)</span> =~ <span class="q">s/\\*/$file_name/g</span><span class="sc">;</span></li></ol></pre><p>This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix:</p><pre class="verbatim"><ol><li> <span class="i">$ perl</span> -<span class="w">pi&#39;orig_</span>*<span class="q">&#39; -e &#39;</span><span class="q">s/bar/baz/</span><span class="q">&#39; fileA  # backup to</span></li><li>                                           <span class="q">                                           # &#39;</span><span class="w">orig_fileA</span><span class="q">&#39;</span></li></ol></pre><p>Or even to place backup copies of the original files into another directory (provided the directory already exists):</p><pre class="verbatim"><ol><li> <span class="i">$ perl</span> -<span class="w">pi&#39;old</span><span class="q">/*.orig&#39; -e &#39;s/</span><span class="w">bar</span>/<span class="w">baz</span><span class="q">/&#39; fileA  # backup to</span></li><li>                                               <span class="q">                                               # &#39;old/</span><span class="w">fileA</span>.<span class="w">orig</span><span class="q">&#39;</span></li></ol></pre><p>These sets of one-liners are equivalent:</p><pre class="verbatim"><ol><li> <span class="i">$ perl</span> -<span class="w">pi</span> -e <span class="q">&#39;s/bar/baz/&#39;</span> <span class="w">fileA</span>          <span class="c"># overwrite current file</span></li><li> <span class="i">$ perl</span> -<span class="w">pi</span><span class="q">&#39;*&#39;</span> -<span class="w">e</span> <span class="q">&#39;s/bar/baz/&#39;</span> <span class="w">fileA</span>       <span class="c"># overwrite current file</span></li><li></li><li> <span class="i">$ perl</span> -<span class="w">pi</span><span class="q">&#39;.orig&#39;</span> -<span class="w">e</span> <span class="q">&#39;s/bar/baz/&#39;</span> <span class="w">fileA</span>   <span class="c"># backup to &#39;fileA.orig&#39;</span></li><li> <span class="i">$ perl</span> -<span class="w">pi</span><span class="q">&#39;*.orig&#39;</span> -<span class="w">e</span> <span class="q">&#39;s/bar/baz/&#39;</span> <span class="w">fileA</span>  <span class="c"># backup to &#39;fileA.orig&#39;</span></li></ol></pre><p>From the shell, saying</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">p</span> -<span class="w">i</span>.<span class="w">orig</span> -e <span class="q">&quot;s/foo/bar/; ... &quot;</span></li></ol></pre><p>is the same as using the program:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl -pi.orig</span></li><li>    <span class="q">s/foo/bar/</span><span class="sc">;</span></li></ol></pre><p>which is equivalent to</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl</span></li><li>    <span class="i">$extension</span> = <span class="q">&#39;.orig&#39;</span><span class="sc">;</span></li><li>    <span class="j">LINE:</span> while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>&#09;if <span class="s">(</span><span class="i">$ARGV</span> ne <span class="i">$oldargv</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;    if <span class="s">(</span><span class="i">$extension</span> !~ <span class="q">/\\*/</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;&#09;<span class="i">$backup</span> = <span class="i">$ARGV</span> . <span class="i">$extension</span><span class="sc">;</span></li><li>&#09;    <span class="s">}</span></li><li>&#09;    else <span class="s">{</span></li><li>&#09;&#09;<span class="s">(</span><span class="i">$backup</span> = <span class="i">$extension</span><span class="s">)</span> =~ <span class="q">s/\\*/$ARGV/g</span><span class="sc">;</span></li><li>&#09;    <span class="s">}</span></li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/rename.html">rename</span><span class="s">(</span><span class="i">$ARGV</span><span class="cm">,</span> <span class="i">$backup</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">ARGVOUT</span><span class="cm">,</span> <span class="q">&quot;&gt;$ARGV&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="w">ARGVOUT</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;    <span class="i">$oldargv</span> = <span class="i">$ARGV</span><span class="sc">;</span></li><li>&#09;<span class="s">}</span></li><li>&#09;<span class="q">s/foo/bar/</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span>&#09;<span class="c"># this prints to original filename</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>except that the <b>-i</b> form doesn&#39;t need to compare $ARGV to $oldargv to know when the filename has changed.  It does, however, use ARGVOUT for the selected filehandle.  Note that STDOUT is restored as the default output filehandle after the loop.</p><p>As shown above, Perl creates the backup file whether or not any output is actually changed.  So this is just a fancy way to copy files:</p><pre class="verbatim"><ol><li>    $ perl -p -i&#39;/some/file/path/*&#39; -e 1 file1 file2 file3...</li><li>or</li><li>    $ perl -p -i&#39;.orig&#39; -e 1 file1 file2 file3...</li></ol></pre><p>You can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering (see example in <span href="http://perldoc.perl.org/functions/eof.html">eof</span>).</p><p>If, for a given file, Perl is unable to create the backup file as specified in the extension then it will skip that file and continue on with the next one (if it exists).</p><p>For a discussion of issues surrounding file permissions and <b>-i</b>, see <span href="http://perldoc.perl.org/perlfaq5.html#Why-does-Perl-let-me-delete-read-only-files%3f-Why-does--i-clobber-protected-files%3f-Isn&#39;t-this-a-bug-in-Perl%3f">Why does Perl let me delete read-only files? Why does -i clobber protected files? Isn&#39;t this a bug in Perl? in perlfaq5</span>.</p><p>You cannot use <b>-i</b> to create directories or to strip extensions from files.</p><p>Perl does not expand <code class="inline">~</code>  in filenames, which is good, since some folks use it for their backup files:</p><pre class="verbatim"><ol><li>    $ perl -pi~ -e &#39;s/foo/bar/&#39; file1 file2 file3...</li></ol></pre><p>Note that because <b>-i</b> renames or deletes the original file before creating a new file of the same name, Unix-style soft and hard links will not be preserved.</p><p>Finally, the <b>-i</b> switch does not impede execution when no files are given on the command line.  In this case, no backup is made (the original file cannot, of course, be determined) and processing proceeds from STDIN to STDOUT as might be expected.</p></section>	http://perldoc.perl.org/perlrun.html#*-i*%5b_extension_%5d
line buffering (definition)	A			Perl Glossary							<section class="prog__container"><p>Used by a <b>standard I/O</b> output stream that flushes its <b>buffer</b> after every <b>newline</b>. Many standard I/O libraries automatically set up line buffering on output that is going to the terminal.</p></section>	http://perldoc.perl.org/perlglossary.html#line-buffering
fc (function)	A			Perl Functions							<section class="prog__container"><pre>fc EXPR<br>fc</pre><p>Returns the casefolded version of EXPR.  This is the internal function implementing the <code class="inline">\\<span class="w">F</span></code>  escape in double-quoted strings.</p><p>Casefolding is the process of mapping strings to a form where case differences are erased; comparing two strings in their casefolded form is effectively a way of asking if two strings are equal, regardless of case.</p><p>Roughly, if you ever found yourself writing this</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$this</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$that</span><span class="s">)</span>    <span class="c"># Wrong!</span></li><li>        <span class="c"># or</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="i">$this</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="i">$that</span><span class="s">)</span>    <span class="c"># Also wrong!</span></li><li>        <span class="c"># or</span></li><li>    <span class="i">$this</span> =~ <span class="q">/^\\Q$that\\E\\z/i</span>  <span class="c"># Right!</span></li></ol></pre><p>Now you can write</p><pre class="verbatim"><ol><li>    <span class="i">fc</span><span class="s">(</span><span class="i">$this</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="i">fc</span><span class="s">(</span><span class="i">$that</span><span class="s">)</span></li></ol></pre><p>And get the correct results.</p><p>Perl only implements the full form of casefolding, but you can access the simple folds using <span href="http://perldoc.perl.org/Unicode/UCD.html#casefold()">casefold() in Unicode::UCD</span> and <span href="http://perldoc.perl.org/Unicode/UCD.html#prop_invmap()">prop_invmap() in Unicode::UCD</span>. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 <code class="inline"><span class="w">Default</span> <span class="w">Case</span> <span class="w">Operations</span></code> , 4.2 <code class="inline"><span class="w">Case</span>-<span class="w">Normative</span></code> , and 5.18 <code class="inline"><span class="w">Case</span> <span class="w">Mappings</span></code> , available at <span href="http://www.unicode.org/versions/latest/">http://www.unicode.org/versions/latest/</span>, as well as the Case Charts available at <span href="http://www.unicode.org/charts/case/">http://www.unicode.org/charts/case/</span>.</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>This function behaves the same way under various pragma, such as within <code class="inline"><span class="q">&quot;use feature &#39;unicode_strings&quot;</span></code> , as <span href="http://perldoc.perl.org/functions/lc.html">lc</span> does, with the single exception of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fc.html">fc</span></code> of LATIN CAPITAL LETTER SHARP S (U+1E9E) within the scope of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code> .  The foldcase of this character would normally be <code class="inline"><span class="q">&quot;ss&quot;</span></code> , but as explained in the <span href="http://perldoc.perl.org/functions/lc.html">lc</span> section, case changes that cross the 255/256 boundary are problematic under locales, and are hence prohibited.  Therefore, this function under locale returns instead the string <code class="inline"><span class="q">&quot;\\x{17F}\\x{17F}&quot;</span></code> , which is the LATIN SMALL LETTER LONG S.  Since that character itself folds to <code class="inline"><span class="q">&quot;s&quot;</span></code> , the string of two of them together should be equivalent to a single U+1E9E when foldcased.</p><p>While the Unicode Standard defines two additional forms of casefolding, one for Turkic languages and one that never maps one character into multiple characters, these are not provided by the Perl core; However, the CPAN module <code class="inline"><span class="w">Unicode::Casing</span></code>  may be used to provide an implementation.</p><p>This keyword is available only when the <code class="inline"><span class="q">&quot;fc&quot;</span></code>  feature is enabled, or when prefixed with <code class="inline"><span class="w">CORE::</span></code> ; See <span href="http://perldoc.perl.org/feature.html">feature</span>.  Alternately, include a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.16</span></code>  or later to the current scope.</p></section>	http://perldoc.perl.org/functions/fc.html
times (function)	A			Perl Functions\nPerl Functions for processes and process groups\nPerl Time-related functions							<section class="prog__container"><pre>times</pre><p>Returns a four-element list giving the user and system times in seconds for this process and any exited children of this process.</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$user</span><span class="cm">,</span><span class="i">$system</span><span class="cm">,</span><span class="i">$cuser</span><span class="cm">,</span><span class="i">$csystem</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/times.html">times</span><span class="sc">;</span></li></ol></pre><p>In scalar context, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/times.html">times</span></code> returns <code class="inline"><span class="i">$user</span></code> .</p><p>Children&#39;s times are only included for terminated children.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#times">times in perlport</span>.</p></section>	http://perldoc.perl.org/functions/times.html
Use of each() on hash after insertion without resetting hash iterator results in undefined behavior	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The behavior of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code> after insertion is undefined; it may skip items, or visit items more than once.  Consider using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys()</span></code> instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code>.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-each()-on-hash-after-insertion-without-resetting-hash-iterator-results-in-undefined-behavior
panic: last, type=%u	A			Perl Diagnostics							<section class="prog__container"><p>(P) We popped the context stack to a block context, and then discovered it wasn&#39;t a block context.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-last%2c-type%3d%25u
IO::Compress::Zip (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Compress::Zip - Write zip files/buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::Zip</span> <span class="q">qw(zip $ZipError)</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$status</span> = <span class="w">zip</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>] </li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;zip failed: $ZipError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">new</span> <span class="w">IO::Compress::Zip</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>]</li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;zip failed: $ZipError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$z</span><span class="i">-&gt;print</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;printf</span><span class="s">(</span><span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;write</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;syswrite</span><span class="s">(</span><span class="i">$string</span> [<span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$offset</span>]<span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;tell</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;seek</span><span class="s">(</span><span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;binmode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;fileno</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;opened</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;input_line_number</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;newStream</span><span class="s">(</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$ZipError</span> <span class="sc">;</span></li><li></li><li>    <span class="c"># IO::File mode</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$z</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="i">$z</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$z</span><span class="cm">,</span> <span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$z</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/Zip.html
"state %s" used in sort comparison	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The package variables $a and $b are used for sort comparisons. You used $a or $b in as an operand to the <code class="inline">&lt;=&gt;</code>  or <code class="inline">cmp</code>  operator inside a sort comparison block, and the variable had earlier been declared as a lexical variable.  Either qualify the sort variable with the package name, or rename the lexical variable.</p></section>	http://perldoc.perl.org/perldiag.html#%22state-%25s%22-used-in-sort-comparison
How can I expand variables in text strings?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you can avoid it, don&#39;t, or if you can use a templating system, such as <span href="http://search.cpan.org/perldoc/Text::Template">Text::Template</span> or <span href="http://search.cpan.org/perldoc/Template">Template</span> Toolkit, do that instead. You might even be able to get the job done with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span> <span class="q">&#39;Say hello to %s and %s&#39;</span><span class="cm">,</span> <span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="sc">;</span></li></ol></pre><p>However, for the one-off simple case where I don&#39;t want to pull out a full templating system, I&#39;ll use a string that has two Perl scalar variables in it. In this example, I want to expand <code class="inline"><span class="i">$foo</span></code>  and <code class="inline"><span class="i">$bar</span></code>  to their variable&#39;s values:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="q">&#39;Fred&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bar</span> = <span class="q">&#39;Barney&#39;</span><span class="sc">;</span></li><li>    <span class="i">$string</span> = <span class="q">&#39;Say hello to $foo and $bar&#39;</span><span class="sc">;</span></li></ol></pre><p>One way I can do this involves the substitution operator and a double <code class="inline">/e</code> flag. The first <code class="inline">/e</code> evaluates <code class="inline"><span class="i">$1</span></code>  on the replacement side and turns it into <code class="inline"><span class="i">$foo</span></code> . The second /e starts with <code class="inline"><span class="i">$foo</span></code>  and replaces it with its value. <code class="inline"><span class="i">$foo</span></code> , then, turns into &#39;Fred&#39;, and that&#39;s finally what&#39;s left in the string:</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> =~ <span class="q">s/(\\$\\w+)/$1/eeg</span><span class="sc">;</span> <span class="c"># &#39;Say hello to Fred and Barney&#39;</span></li></ol></pre><p>The <code class="inline">/e</code> will also silently ignore violations of strict, replacing undefined variable names with the empty string. Since I&#39;m using the <code class="inline">/e</code> flag (twice even!), I have all of the same security problems I have with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> in its string form. If there&#39;s something odd in <code class="inline"><span class="i">$foo</span></code> , perhaps something like <code class="inline"><span class="i">@</span>{<span class="s">[</span> <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;rm -rf /&quot;</span> <span class="s">]</span>}</code> , then I could get myself in trouble.</p><p>To get around the security problem, I could also pull the values from a hash instead of evaluating variable names. Using a single <code class="inline">/e</code>, I can check the hash to ensure the value exists, and if it doesn&#39;t, I can replace the missing value with a marker, in this case <code class="inline">???</code> to signal that I missed something:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="q">&#39;This has $foo and $bar&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%Replacements</span> = <span class="s">(</span></li><li>        <span class="w">foo</span>  <span class="cm">=&gt;</span> <span class="q">&#39;Fred&#39;</span><span class="cm">,</span></li><li>        <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># $string =~ s/\\$(\\w+)/$Replacements{$1}/g;</span></li><li>    <span class="i">$string</span> =~ <span class="q">s/\\$(\\w+)/</span></li><li>        <span class="q">        exists $Replacements{$1} ? $Replacements{$1} : &#39;???&#39;</span></li><li>        <span class="q">        /eg</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$string</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-expand-variables-in-text-strings%3f
modulus (definition)	A			Perl Glossary							<section class="prog__container"><p>An integer divisor when you’re interested in the remainder instead of the quotient.</p></section>	http://perldoc.perl.org/perlglossary.html#modulus
msgget (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>msgget KEY,FLAGS</pre><p>Calls the System V IPC function msgget(2).  Returns the message queue id, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> on error.  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span> and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::Msg</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#msgget">msgget in perlport</span>.</p></section>	http://perldoc.perl.org/functions/msgget.html
panic: INTERPCONCAT, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The lexer got into a bad state parsing a string with brackets.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-INTERPCONCAT%2c-%25s
Invalid range "%s" in transliteration operator	A			Perl Diagnostics							<section class="prog__container"><p>(F) The range specified in the tr/// or y/// operator had a minimum character greater than the maximum character.  See <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-range-%22%25s%22-in-transliteration-operator
mprotect for %p %u failed with %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) You compiled perl with <b>-D</b>PERL_DEBUG_READONLY_OPS (see <span href="http://perldoc.perl.org/perlhacktips.html">perlhacktips</span>), but an op tree could not be made read-only.</p></section>	http://perldoc.perl.org/perldiag.html#mprotect-for-%25p-%25u-failed-with-%25d
Can't emulate -%s on #! line	A			Perl Diagnostics							<section class="prog__container"><p>(F) The #! line specifies a switch that doesn&#39;t make sense at this point.  For example, it&#39;d be kind of silly to put a <b>-x</b> on the #! line.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-emulate--%25s-on-%23!-line
Invalid separator character %s in attribute list	A			Perl Diagnostics							<section class="prog__container"><p>(F) Something other than a colon or whitespace was seen between the elements of an attribute list.  If the previous attribute had a parenthesised parameter list, perhaps that list was terminated too soon. See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-separator-character-%25s-in-attribute-list
socket (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>socket SOCKET,DOMAIN,TYPE,PROTOCOL</pre><p>Opens a socket of the specified kind and attaches it to filehandle SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name.  You should <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span></code>  first to get the proper definitions imported.  See the examples in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p><p>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor, as determined by the value of $^F.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p></section>	http://perldoc.perl.org/functions/socket.html
Use of literal non-graphic characters in variable names is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) Using literal non-graphic (including control) characters in the source to refer to the ^FOO variables, like <code class="inline"><span class="i">$^X</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^GLOBAL_PHASE</span>}</code>  is now deprecated.  (We use <code class="inline">^X</code> and <code class="inline">^<span class="w">G</span></code>  here for legibility.  They actually represent the non-printable control characters, code points 0x18 and 0x07, respectively; <code class="inline">^<span class="w">A</span></code>  would mean the control character whose code point is 0x01.) This only affects code like <code class="inline"><span class="i">$\\</span><span class="w">cT</span></code> , where <code class="inline">\\<span class="w">cT</span></code>  is a control in the source code; <code class="inline"><span class="i">$</span>{<span class="q">&quot;\\cT&quot;</span>}</code>  and <code class="inline"><span class="i">$^T</span></code>  remain valid.  Things that are non-controls and also not graphic are NO-BREAK SPACE and SOFT HYPHEN, which were previously only allowed for historical reasons.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-literal-non-graphic-characters-in-variable-names-is-deprecated
lexical analysis (definition)	A			Perl Glossary							<section class="prog__container"><p>Fancy term for <b>tokenizing</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#lexical-analysis
TAP::Parser::Aggregator (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Aggregator - Aggregate TAP::Parser results</p> <pre class="verbatim"><ol><li>    use TAP::Parser::Aggregator;</li><li></li><li>    my $aggregate = TAP::Parser::Aggregator-&gt;new;</li><li>    $aggregate-&gt;add( &#39;t/00-load.t&#39;, $load_parser );</li><li>    $aggregate-&gt;add( &#39;t/10-lex.t&#39;,  $lex_parser  );</li><li></li><li>    my $summary = &lt;&lt;&#39;END_SUMMARY&#39;;</li><li>    Passed:  %s</li><li>    Failed:  %s</li><li>    Unexpectedly succeeded: %s</li><li>    END_SUMMARY</li><li>    printf $summary,</li><li>           scalar $aggregate-&gt;passed,</li><li>           scalar $aggregate-&gt;failed,</li><li>           scalar $aggregate-&gt;todo_passed;</li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Aggregator.html
close() on unopened filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to close a filehandle that was never opened.</p></section>	http://perldoc.perl.org/perldiag.html#close()-on-unopened-filehandle-%25s
seekdir (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>seekdir DIRHANDLE,POS</pre><p>Sets the current position for the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code> routine on DIRHANDLE.  POS must be a value returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/telldir.html">telldir</span></code>.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seekdir.html">seekdir</span></code> also has the same caveats about possible directory compaction as the corresponding system library routine.</p></section>	http://perldoc.perl.org/functions/seekdir.html
Why is int() broken?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Your <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/int.html">int()</span></code> is most probably working just fine. It&#39;s the numbers that aren&#39;t quite what you think.</p><p>First, see the answer to &quot;Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?&quot;.</p><p>For example, this</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">(</span><span class="n">0.6</span>/<span class="n">0.2</span>-<span class="n">2</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>will in most computers print 0, not 1, because even such simple numbers as 0.6 and 0.2 cannot be presented exactly by floating-point numbers. What you think in the above as &#39;three&#39; is really more like 2.9999999999999995559.</p></section>	http://perldoc.perl.org/perlfaq4.html#Why-is-int()-broken%3f
Pod::Perldoc::ToText (module)	A			Perl Standard Modules		[[Pod::Text]]\n[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToText - let Perldoc render Pod as plaintext</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -o <span class="w">text</span> <span class="w">Some::Modulename</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToText.html
All I want to do is append a small amount of text to the end of a file. Do I still have to use locking?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If you are on a system that correctly implements <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> and you use the example appending code from &quot;perldoc -f flock&quot; everything will be OK even if the OS you are on doesn&#39;t implement append mode correctly (if such a system exists). So if you are happy to restrict yourself to OSs that implement <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span></code> (and that&#39;s not really much of a restriction) then that is what you should do.</p><p>If you know you are only going to use a system that does correctly implement appending (i.e. not Win32) then you can omit the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code> from the code in the previous answer.</p><p>If you know you are only writing code to run on an OS and filesystem that does implement append mode correctly (a local filesystem on a modern Unix for example), and you keep the file in block-buffered mode and you write less than one buffer-full of output between each manual flushing of the buffer then each bufferload is almost guaranteed to be written to the end of the file in one chunk without getting intermingled with anyone else&#39;s output. You can also use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syswrite.html">syswrite</span></code> function which is simply a wrapper around your system&#39;s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write(2)</span></code> system call.</p><p>There is still a small theoretical chance that a signal will interrupt the system-level <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write()</span></code> operation before completion. There is also a possibility that some STDIO implementations may call multiple system level <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write()</span></code>s even if the buffer was empty to start. There may be some systems where this probability is reduced to zero, and this is not a concern when using <code class="inline"><span class="j">:</span><span class="w">perlio</span></code>  instead of your system&#39;s STDIO.</p></section>	http://perldoc.perl.org/perlfaq5.html#All-I-want-to-do-is-append-a-small-amount-of-text-to-the-end-of-a-file.-Do-I-still-have-to-use-locking%3f
open source software (definition)	A			Perl Glossary							<section class="prog__container"><p>Programs for which the source code is freely available and freely redistributable, with no commercial strings attached. For a more detailed definition, see <span href="http://www.opensource.org/osd.html">http://www.opensource.org/osd.html</span>.</p></section>	http://perldoc.perl.org/perlglossary.html#open-source-software
TCP (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for Transmission Control Protocol. A protocol wrapped around the Internet Protocol to make an unreliable packet transmission mechanism appear to the application program to be a reliable <b>stream</b> of bytes. (Usually.)</p></section>	http://perldoc.perl.org/perlglossary.html#TCP
How do I declare/create a structure?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>In general, you don&#39;t &quot;declare&quot; a structure. Just use a (probably anonymous) hash reference. See <span href="http://perldoc.perl.org/perlref.html">perlref</span> and <span href="http://perldoc.perl.org/perldsc.html">perldsc</span> for details. Here&#39;s an example:</p><pre class="verbatim"><ol><li>    <span class="i">$person</span> = <span class="s">{</span><span class="s">}</span><span class="sc">;</span>                   <span class="c"># new anonymous hash</span></li><li>    <span class="i">$person</span>-&gt;{<span class="w">AGE</span>}  = <span class="n">24</span><span class="sc">;</span>           <span class="c"># set field AGE to 24</span></li><li>    <span class="i">$person</span>-&gt;{<span class="w">NAME</span>} = <span class="q">&quot;Nat&quot;</span><span class="sc">;</span>        <span class="c"># set field NAME to &quot;Nat&quot;</span></li></ol></pre><p>If you&#39;re looking for something a bit more rigorous, try <span href="http://perldoc.perl.org/perlootut.html">perlootut</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-declare%2fcreate-a-structure%3f
panic: pad_sv po	A			Perl Diagnostics							<section class="prog__container"><p>(P) A zero scratch pad offset was detected internally.  Most likely an operator needed a target but that target had not been allocated for whatever reason.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_sv-po
FAQ (definition)	A			Perl Glossary							<section class="prog__container"><p>Frequently Asked Question (although not necessarily frequently answered, especially if the answer appears in the Perl FAQ shipped standard with Perl).</p></section>	http://perldoc.perl.org/perlglossary.html#FAQ
interpreter (definition)	A			Perl Glossary							<section class="prog__container"><p>Strictly speaking, a program that reads a second program and does what the second program says directly without turning the program into a different form first, which is what <b>compilers</b> do. Perl is not an interpreter by this definition, because it contains a kind of compiler that takes a program and turns it into a more executable form (<b>syntax trees</b>) within the <i>perl</i> process itself, which the Perl <b>runtime</b> system then interprets.</p></section>	http://perldoc.perl.org/perlglossary.html#interpreter
ExtUtils::testlib (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::testlib - add blib/* directories to @INC</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::testlib</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/testlib.html
Attempt to free unreferenced glob pointers	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The reference counts got screwed up on symbol aliases.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-free-unreferenced-glob-pointers
unexec of %s into %s failed!	A			Perl Diagnostics							<section class="prog__container"><p>(F) The unexec() routine failed for some reason.  See your local FSF representative, who probably put it there in the first place.</p></section>	http://perldoc.perl.org/perldiag.html#unexec-of-%25s-into-%25s-failed!
Encode::Unicode::UTF7 (module)	A			Perl Standard Modules		[[Encode]]\n[[Encode::Unicode]]\n[[Unicode::String]]\n[[http://www.ietf.org/rfc/rfc2152.txt]]					<section class="prog__container"><p>Encode::Unicode::UTF7 -- UTF-7 encoding</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$utf7</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;UTF-7&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;UTF-7&quot;</span><span class="cm">,</span> <span class="i">$ucs2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Unicode/UTF7.html
Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You specified something like these:</p><pre class="verbatim"><ol><li> <span class="q">qr/a{3}?/</span></li><li> <span class="q">qr/b{1,1}+/</span></li></ol></pre><p>The <code class="inline"><span class="q">&quot;?&quot;</span></code>  and <code class="inline"><span class="q">&quot;+&quot;</span></code>  don&#39;t have any effect, as they modify whether to match more or fewer when there is a choice, and by specifying to match exactly a given numer, there is no room left for a choice.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-greediness-modifier-'%25c'-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Don't know how to handle magic of type \%o	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal handling of magical variables has been cursed.</p></section>	http://perldoc.perl.org/perldiag.html#Don't-know-how-to-handle-magic-of-type-%5c%25o
Test::Builder::Module (module)	A			Perl Standard Modules							<section class="prog__container"><p>Test::Builder::Module - Base class for test modules</p> <pre class="verbatim"><ol><li>  <span class="c"># Emulates Test::Simple</span></li><li><span name="package-Your::Module"></span>  package <span class="i">Your::Module</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$CLASS</span> = <span class="w">__PACKAGE__</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;Test::Builder::Module&#39;</span><span class="sc">;</span></li><li>  <span class="i">@EXPORT</span> = <span class="q">qw(ok)</span><span class="sc">;</span></li><li></li><li><span name="ok"></span>  sub <span class="m">ok ($;$)</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tb</span> = <span class="i">$CLASS</span><span class="i">-&gt;builder</span><span class="sc">;</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$tb</span><span class="i">-&gt;ok</span><span class="s">(</span><span class="i">@_</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">}</span></li><li>  </li><li>  <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Builder/Module.html
How can I write a GUI (X, Tk, Gtk, etc.) in Perl?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by Ben Morrow)</p><p>There are a number of modules which let you write GUIs in Perl. Most GUI toolkits have a perl interface: an incomplete list follows.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-write-a-GUI-(X%2c-Tk%2c-Gtk%2c-etc.)-in-Perl%3f
Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>This happens only if your perl is compiled to use stdio instead of perlio, which is the default. Some (maybe all?) stdios set error and eof flags that you may need to clear. The <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module defines <code class="inline"><span class="i">clearerr</span><span class="s">(</span><span class="s">)</span></code>  that you can use. That is the technically correct way to do it. Here are some less reliable workarounds:</p></section>	http://perldoc.perl.org/perlfaq8.html#Why-can't-my-script-read-from-STDIN-after-I-gave-it-EOF-(%5eD-on-Unix%2c-%5eZ-on-MS-DOS)%3f
getpwnam returned invalid UIC %#o for user "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning peculiar to VMS.  The call to <code class="inline"><span class="w">sys</span><span class="i">$getuai</span></code>  underlying the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getpwnam.html">getpwnam</span></code> operator returned an invalid UIC.</p></section>	http://perldoc.perl.org/perldiag.html#getpwnam-returned-invalid-UIC-%25%23o-for-user-%22%25s%22
File::Fetch (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Fetch - A generic file fetching mechanism</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Fetch</span><span class="sc">;</span></li><li></li><li>    <span class="c">### build a File::Fetch object ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ff</span> = <span class="w">File::Fetch</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">uri</span> <span class="cm">=&gt;</span> <span class="q">&#39;<span href="http://some.where.com/dir/a.txt">http://some.where.com/dir/a.txt</span>&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c">### fetch the uri to cwd() ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$where</span> = <span class="i">$ff</span><span class="i">-&gt;fetch</span><span class="s">(</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$ff</span><span class="i">-&gt;error</span><span class="sc">;</span></li><li></li><li>    <span class="c">### fetch the uri to /tmp ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$where</span> = <span class="i">$ff</span><span class="i">-&gt;fetch</span><span class="s">(</span> <span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">&#39;/tmp&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c">### parsed bits from the uri ###</span></li><li>    <span class="i">$ff</span><span class="i">-&gt;uri</span><span class="sc">;</span></li><li>    <span class="i">$ff</span><span class="i">-&gt;scheme</span><span class="sc">;</span></li><li>    <span class="i">$ff</span><span class="i">-&gt;host</span><span class="sc">;</span></li><li>    <span class="i">$ff</span><span class="i">-&gt;path</span><span class="sc">;</span></li><li>    <span class="i">$ff</span><span class="i">-&gt;file</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Fetch.html
DBM_Filter (module)	A			Perl Standard Modules		[[GDBM_File]]\n[[NDBM_File]]\n[[ODBM_File]]\n[[SDBM_File]]\n[[perldbmfilter]]					<section class="prog__container"><p>DBM_Filter -- Filter DBM keys/values</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span> <span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, or ODBM_File</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="w">Fetch</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span>...<span class="s">}</span><span class="cm">,</span></li><li>                     <span class="w">Store</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span>...<span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;my_filter1&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;my_filter2&#39;</span><span class="cm">,</span> <span class="w">params</span>...<span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Key_Push</span><span class="s">(</span>...<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Value_Push</span><span class="s">(</span>...<span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Pop</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$db</span><span class="i">-&gt;Filtered</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="package-DBM_Filter::my_filter1"></span>    package <span class="i">DBM_Filter::my_filter1</span><span class="sc">;</span></li><li></li><li><span name="Store"></span>    sub <span class="m">Store</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="Fetch"></span>    sub <span class="m">Fetch</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li>    <span class="n">1</span><span class="sc">;</span></li><li></li><li><span name="package-DBM_Filter::my_filter2"></span>    package <span class="i">DBM_Filter::my_filter2</span><span class="sc">;</span></li><li></li><li><span name="Filter"></span>    sub <span class="m">Filter</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@opts</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        ...</li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="s">(</span></li><li><span name="Store-1"></span>            sub <span class="m">Store</span> <span class="s">{</span> ... <span class="s">}</span><span class="cm">,</span></li><li><span name="Fetch-1"></span>            sub <span class="m">Fetch</span> <span class="s">{</span> ... <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter.html
mprotect RW for COW string %p %u failed with %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) You compiled perl with <b>-D</b>PERL_DEBUG_READONLY_COW (see <span href="http://perldoc.perl.org/perlguts.html#Copy-on-Write">Copy on Write in perlguts</span>), but a read-only shared string buffer could not be made mutable.</p></section>	http://perldoc.perl.org/perldiag.html#mprotect-RW-for-COW-string-%25p-%25u-failed-with-%25d
How do I parse a mail header?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> module. It&#39;s well-tested and supports all the craziness that you&#39;ll see in the real world (comment-folding whitespace, encodings, comments, etc.).</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Email::MIME</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$message</span> = <span class="w">Email::MIME</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$rfc2822</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$subject</span> = <span class="i">$message</span><span class="i">-&gt;header</span><span class="s">(</span><span class="q">&#39;Subject&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$from</span>    = <span class="i">$message</span><span class="i">-&gt;header</span><span class="s">(</span><span class="q">&#39;From&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you&#39;ve already got some other kind of email object, consider passing it to <span href="http://search.cpan.org/perldoc/Email::Abstract">Email::Abstract</span> and then using its cast method to get an <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> object:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mail_message_object</span> = <span class="i">read_message</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$abstract</span> = <span class="w">Email::Abstract</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$mail_message_object</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$email_mime_object</span> = <span class="i">$abstract</span><span class="i">-&gt;cast</span><span class="s">(</span><span class="q">&#39;Email::MIME&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-parse-a-mail-header%3f
Can't declare %s in "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only scalar, array, and hash variables may be declared as &quot;my&quot;, &quot;our&quot; or &quot;state&quot; variables.  They must have ordinary identifiers as names.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-declare-%25s-in-%22%25s%22
TAP::Parser::Iterator::Process (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::Iterator]]					<section class="prog__container"><p>TAP::Parser::Iterator::Process - Iterator for process-based TAP sources</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Iterator::Process</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%args</span> = <span class="s">(</span></li><li>   <span class="w">command</span>  <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">&#39;python&#39;</span><span class="cm">,</span> <span class="q">&#39;setup.py&#39;</span><span class="cm">,</span> <span class="q">&#39;test&#39;</span><span class="s">]</span><span class="cm">,</span></li><li>   <span class="w">merge</span>    <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>   <span class="w">setup</span>    <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span><span class="cm">,</span></li><li>   <span class="w">teardown</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span><span class="cm">,</span></li><li>  <span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$it</span>   = <span class="w">TAP::Parser::Iterator::Process</span><span class="w">-&gt;new</span><span class="s">(</span>\\<span class="i">%args</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span> = <span class="i">$it</span><span class="i">-&gt;next</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Iterator/Process.html
Missing braces on \N{} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Wrong syntax of character name literal <code class="inline">\\<span class="i">N</span><span class="s">{</span><span class="w">charname</span><span class="s">}</span></code>  within double-quotish context.  This can also happen when there is a space (or comment) between the <code class="inline">\\<span class="w">N</span></code>  and the <code class="inline">{</code> in a regex with the <code class="inline">/x</code> modifier. This modifier does not change the requirement that the brace immediately follow the <code class="inline">\\<span class="w">N</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Missing-braces-on-%5cN%7b%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
How do I get a file's timestamp in perl?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If you want to retrieve the time at which the file was last read, written, or had its meta-data (owner, etc) changed, you use the <b>-A</b>, <b>-M</b>, or <b>-C</b> file test operations as documented in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>. These retrieve the age of the file (measured against the start-time of your program) in days as a floating point number. Some platforms may not have all of these times. See <span href="http://perldoc.perl.org/perlport.html">perlport</span> for details. To retrieve the &quot;raw&quot; time in seconds since the epoch, you would call the stat function, then use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime()</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime()</span></code>, or <code class="inline"><span class="i">POSIX::strftime</span><span class="s">(</span><span class="s">)</span></code>  to convert this into human-readable form.</p><p>Here&#39;s an example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$write_secs</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="s">)</span>[<span class="n">9</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;file %s updated at %s\\n&quot;</span><span class="cm">,</span> <span class="i">$file</span><span class="cm">,</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="i">$write_secs</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you prefer something more legible, use the File::stat module (part of the standard distribution in version 5.004 and later):</p><pre class="verbatim"><ol><li>    <span class="c"># error checking left as an exercise for reader.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::stat</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::localtime</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$date_string</span> = <span class="i">ctime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="i">-&gt;mtime</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;file $file updated at $date_string\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>The POSIX::strftime() approach has the benefit of being, in theory, independent of the current locale. See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span> for details.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-get-a-file's-timestamp-in-perl%3f
Usage: Win32::%s(%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called a Win32 function with incorrect arguments. See <span href="http://search.cpan.org/perldoc/Win32">Win32</span> for more information.</p></section>	http://perldoc.perl.org/perldiag.html#Usage%3a-Win32%3a%3a%25s(%25s)
'|' and '>' may not both be specified on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl does its own command line redirection, and thinks you tried to redirect stdout both to a file and into a pipe to another command.  You need to choose one or the other, though nothing&#39;s stopping you from piping into a program or Perl script which &#39;splits&#39; output into two streams, such as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">OUT</span><span class="cm">,</span><span class="q">&quot;&gt;$ARGV[0]&quot;</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t write to $ARGV[0]: $!&quot;</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">OUT</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">OUT</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#'%7c'-and-'%3e'-may-not-both-be-specified-on-command-line
Can't kill a non-numeric process ID	A			Perl Diagnostics							<section class="prog__container"><p>(F) Process identifiers must be (signed) integers.  It is a fatal error to attempt to kill() an undefined, empty-string or otherwise non-numeric process identifier.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-kill-a-non-numeric-process-ID
perlunitut isn't really a Unicode tutorial, is it?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>No, and this isn&#39;t really a Unicode FAQ.</p><p>Perl has an abstracted interface for all supported character encodings, so this is actually a generic <code class="inline"><span class="w">Encode</span></code>  tutorial and <code class="inline"><span class="w">Encode</span></code>  FAQ. But many people think that Unicode is special and magical, and I didn&#39;t want to disappoint them, so I decided to call the document a Unicode tutorial.</p></section>	http://perldoc.perl.org/perlunifaq.html#perlunitut-isn't-really-a-Unicode-tutorial%2c-is-it%3f
How can I do approximate matching?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>See the module <span href="http://search.cpan.org/perldoc/String::Approx">String::Approx</span> available from CPAN.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-do-approximate-matching%3f
Optional parameter lacks default expression	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a subroutine signature, you wrote something like &quot;$a =&quot;, making a named optional parameter without a default value.  A nameless optional parameter is permitted to have no default value, but a named one must have a specific default.  You probably want &quot;$a = undef&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Optional-parameter-lacks-default-expression
How do I trap control characters/signals?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>You don&#39;t actually &quot;trap&quot; a control character. Instead, that character generates a signal which is sent to your terminal&#39;s currently foregrounded process group, which you then trap in your process. Signals are documented in <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span> and the section on &quot;Signals&quot; in the Camel.</p><p>You can set the values of the <code class="inline"><span class="i">%SIG</span></code>  hash to be the functions you want to handle the signal. After perl catches the signal, it looks in <code class="inline"><span class="i">%SIG</span></code>  for a key with the same name as the signal, then calls the subroutine value for that key.</p><pre class="verbatim"><ol><li>    <span class="c"># as an anonymous subroutine</span></li><li></li><li>    <span class="i">$SIG</span>{<span class="w">INT</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/syswrite.html">syswrite</span><span class="s">(</span><span class="w">STDERR</span><span class="cm">,</span> <span class="q">&quot;ouch\\n&quot;</span><span class="cm">,</span> <span class="n">5</span> <span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li></li><li>    <span class="c"># or a reference to a function</span></li><li></li><li>    <span class="i">$SIG</span>{<span class="w">INT</span>} = \\<span class="i">&amp;ouch</span><span class="sc">;</span></li><li></li><li>    <span class="c"># or the name of the function as a string</span></li><li></li><li>    <span class="i">$SIG</span>{<span class="w">INT</span>} = <span class="q">&quot;ouch&quot;</span><span class="sc">;</span></li></ol></pre><p>Perl versions before 5.8 had in its C source code signal handlers which would catch the signal and possibly run a Perl function that you had set in <code class="inline"><span class="i">%SIG</span></code> . This violated the rules of signal handling at that level causing perl to dump core. Since version 5.8.0, perl looks at <code class="inline"><span class="i">%SIG</span></code>  <b>after</b> the signal has been caught, rather than while it is being caught. Previous versions of this answer were incorrect.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-trap-control-characters%2fsignals%3f
Can't "break" in a loop topicalizer	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="w">break</span></code> , but you&#39;re in a <code class="inline">foreach</code>  block rather than a <code class="inline">given</code>  block.  You probably meant to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22break%22-in-a-loop-topicalizer
Value of CLI symbol "%s" too long	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) A warning peculiar to VMS.  Perl tried to read the value of an %ENV element from a CLI symbol table, and found a resultant string longer than 1024 characters.  The return value has been truncated to 1024 characters.</p></section>	http://perldoc.perl.org/perldiag.html#Value-of-CLI-symbol-%22%25s%22-too-long
root (definition)	A			Perl Glossary							<section class="prog__container"><p>The superuser (<code class="inline"><span class="w">UID</span></code>  == 0). Also the top-level directory of the filesystem.</p></section>	http://perldoc.perl.org/perlglossary.html#root
"my" variable %s can't be in a package	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexically scoped variables aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front.  Use local() if you want to localize a package variable.</p></section>	http://perldoc.perl.org/perldiag.html#%22my%22-variable-%25s-can't-be-in-a-package
FETCHSIZE returned a negative value	A			Perl Diagnostics							<section class="prog__container"><p>(F) A tied array claimed to have a negative number of elements, which is not possible.</p></section>	http://perldoc.perl.org/perldiag.html#FETCHSIZE-returned-a-negative-value
unshift on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#unshift-on-reference-is-experimental
Use of -l on filehandle%s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) A filehandle represents an opened file, and when you opened the file it already went past any symlink you are presumably trying to look for. The operation returned <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  Use a filename instead.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of--l-on-filehandle%25s
$& (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The string matched by the last successful pattern match (not counting any matches hidden within a BLOCK or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> enclosed by the current BLOCK).</p><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above for the serious performance implications of using this variable (even once) in your code.</p><p>This variable is read-only and dynamically-scoped.</p><p>Mnemonic: like <code class="inline"><span class="i">&amp;</span></code>  in some editors.</p></section>	http://perldoc.perl.org/perlvar.html#%24%26
derived class (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>class</b> that defines some of its <b>methods</b> in terms of a more generic class, called a <b>base class</b>. Note that classes aren’t classified exclusively into base classes or derived classes: a class can function as both a derived class and a base class simultaneously, which is kind of classy.</p></section>	http://perldoc.perl.org/perlglossary.html#derived-class
Cannot tie unreifiable array	A			Perl Diagnostics							<section class="prog__container"><p>(P) You somehow managed to call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> on an array that does not keep a reference count on its arguments and cannot be made to do so.  Such arrays are not even supposed to be accessible to Perl code, but are only used internally.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-tie-unreifiable-array
panic: leave_scope clearsv	A			Perl Diagnostics							<section class="prog__container"><p>(P) A writable lexical variable became read-only somehow within the scope.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-leave_scope-clearsv
Can't find %s on PATH, '.' not in PATH	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used the <b>-S</b> switch, but the script to execute could not be found in the PATH, or at least not with the correct permissions.  The script exists in the current directory, but PATH prohibits running it.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-%25s-on-PATH%2c-'.'-not-in-PATH
panic: ck_split, type=%u	A			Perl Diagnostics							<section class="prog__container"><p>(P) Failed an internal consistency check trying to compile a split.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-ck_split%2c-type%3d%25u
The signatures feature is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::signatures) This warning is emitted if you unwrap a subroutine&#39;s arguments using a signature.  Simply suppress the warning if you want to use the feature, but know that in doing so you are taking the risk of using an experimental feature which may change or be removed in a future Perl version:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::signatures&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;signatures&quot;</span><span class="sc">;</span></li><li><span name="foo"></span>    sub <span class="m">foo ($left, $right)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#The-signatures-feature-is-experimental
=for	A			Perl POD Commands							<section class="prog__container"><p>This is synonymous with:</p><pre class="verbatim"><ol><li>     =<span class="w">begin</span> <span class="w">formatname</span></li><li></li><li>     <span class="w">text</span>...</li><li></li><li>     =<span class="w">end</span> <span class="w">formatname</span></li></ol></pre><p>That is, it creates a region consisting of a single paragraph; that paragraph is to be treated as a normal paragraph if &quot;formatname&quot; begins with a &quot;:&quot;; if &quot;formatname&quot; <i>doesn&#39;t</i> begin with a colon, then &quot;text...&quot; will constitute a data paragraph.  There is no way to use &quot;=for formatname text...&quot; to express &quot;text...&quot; as a verbatim paragraph.</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dfor-formatname-text...%22
Encode::Symbol (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::Symbol - Symbol Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$symbol</span>  = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;symbol&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span> <span class="c"># loads Encode::Symbol implicitly</span></li><li>    <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;&quot;</span><span class="cm">,</span> <span class="i">$symbol</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Symbol.html
Use of comma-less variable list is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) The values you give to a format should be separated by commas, not just aligned on a line.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-comma-less-variable-list-is-deprecated
What's wrong with always quoting "$vars"?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The problem is that those double-quotes force stringification--coercing numbers and references into strings--even when you don&#39;t want them to be strings. Think of it this way: double-quote expansion is used to produce new strings. If you already have a string, why do you need more?</p><p>If you get used to writing odd things like these:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$var&quot;</span><span class="sc">;</span>       <span class="c"># BAD</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$new</span> = <span class="q">&quot;$old&quot;</span><span class="sc">;</span>       <span class="c"># BAD</span></li><li>    <span class="i">somefunc</span><span class="s">(</span><span class="q">&quot;$var&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># BAD</span></li></ol></pre><p>You&#39;ll be in trouble. Those should (in 99.8% of the cases) be the simpler and more direct:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$var</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$new</span> = <span class="i">$old</span><span class="sc">;</span></li><li>    <span class="i">somefunc</span><span class="s">(</span><span class="i">$var</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Otherwise, besides slowing you down, you&#39;re going to break code when the thing in the scalar is actually neither a string nor a number, but a reference:</p><pre class="verbatim"><ol><li>    <span class="i">func</span><span class="s">(</span>\\<span class="i">@array</span><span class="s">)</span><span class="sc">;</span></li><li><span name="func"></span>    sub <span class="m">func</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$aref</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$oref</span> = <span class="q">&quot;$aref&quot;</span><span class="sc">;</span>  <span class="c"># WRONG</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can also get into subtle problems on those few operations in Perl that actually do care about the difference between a string and a number, such as the magical <code class="inline">++</code>  autoincrement operator or the syscall() function.</p><p>Stringification also destroys arrays.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@lines</span> = <span class="q">`command`</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;@lines&quot;</span><span class="sc">;</span>     <span class="c"># WRONG - extra blanks</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">@lines</span><span class="sc">;</span>       <span class="c"># right</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#What's-wrong-with-always-quoting-%22%24vars%22%3f
How do I reformat a paragraph?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use <span href="http://perldoc.perl.org/Text/Wrap.html">Text::Wrap</span> (part of the standard Perl distribution):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Wrap</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">wrap</span><span class="s">(</span><span class="q">&quot;\\t&quot;</span><span class="cm">,</span> <span class="q">&#39;  &#39;</span><span class="cm">,</span> <span class="i">@paragraphs</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The paragraphs you give to <span href="http://perldoc.perl.org/Text/Wrap.html">Text::Wrap</span> should not contain embedded newlines. <span href="http://perldoc.perl.org/Text/Wrap.html">Text::Wrap</span> doesn&#39;t justify the lines (flush-right).</p><p>Or use the CPAN module <span href="http://search.cpan.org/perldoc/Text::Autoformat">Text::Autoformat</span>. Formatting files can be easily done by making a shell alias, like so:</p><pre class="verbatim"><ol><li>    <span class="w">alias</span> <span class="w">fmt</span>=<span class="q">&quot;perl -i -MText::Autoformat -n0777 \\</span></li><li>        <span class="q">        -e &#39;print autoformat $_, {all=&gt;1}&#39; $*&quot;</span></li></ol></pre><p>See the documentation for <span href="http://search.cpan.org/perldoc/Text::Autoformat">Text::Autoformat</span> to appreciate its many capabilities.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-reformat-a-paragraph%3f
getprotobyname (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getprotobyname NAME</pre>Get protocol record given name.</section>	http://perldoc.perl.org/functions/getprotobyname.html
Reference is already weak	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You have attempted to weaken a reference that is already weak. Doing so has no effect.</p></section>	http://perldoc.perl.org/perldiag.html#Reference-is-already-weak
sub (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>sub NAME BLOCK<br>sub NAME (PROTO) BLOCK<br>sub NAME : ATTRS BLOCK<br>sub NAME (PROTO) : ATTRS BLOCK</pre><p>This is subroutine definition, not a real function <i>per se</i>.  Without a BLOCK it&#39;s just a forward declaration.  Without a NAME, it&#39;s an anonymous function declaration, so does return a value: the CODE ref of the closure just created.</p><p>See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span> and <span href="http://perldoc.perl.org/perlref.html">perlref</span> for details about subroutines and references; see <span href="http://perldoc.perl.org/attributes.html">attributes</span> and <span href="http://perldoc.perl.org/Attribute/Handlers.html">Attribute::Handlers</span> for more information about attributes.</p></section>	http://perldoc.perl.org/functions/sub.html
freely redistributable (definition)	A			Perl Glossary							<section class="prog__container"><p>Means you’re not in legal trouble if you give a bootleg copy of it to your friends and we find out about it. In fact, we’d rather you gave a copy to all your friends.</p></section>	http://perldoc.perl.org/perlglossary.html#freely-redistributable
lvalue attribute ignored after the subroutine has been defined	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) Using the <code class="inline"><span class="j">:</span><span class="w">lvalue</span></code>  declarative syntax to make a Perl subroutine an lvalue subroutine after it has been defined is not permitted.  To make the subroutine an lvalue subroutine, add the lvalue attribute to the definition, or put the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="i">foo</span> <span class="co">:</span><span class="w">lvalue</span><span class="sc">;</span></code>  declaration before the definition.</p><p>See also <span href="http://perldoc.perl.org/attributes.html">attributes.pm</span>.</p></section>	http://perldoc.perl.org/perldiag.html#lvalue-attribute-ignored-after-the-subroutine-has-been-defined
pragma (definition)	A			Perl Glossary							<section class="prog__container"><p>A standard module whose practical hints and suggestions are received (and possibly ignored) at compile time. Pragmas are named in all lowercase.</p></section>	http://perldoc.perl.org/perlglossary.html#pragma
I put a regular expression into $/ but it didn't work. What's wrong?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>$/ has to be a string. You can use these examples if you really need to do this.</p><p>If you have <span href="http://search.cpan.org/perldoc/File::Stream">File::Stream</span>, this is easy.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Stream</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$stream</span> = <span class="w">File::Stream</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="i">$filehandle</span><span class="cm">,</span></li><li>        <span class="w">separator</span> <span class="cm">=&gt;</span> <span class="q">qr/\\s*,\\s*/</span><span class="cm">,</span></li><li>        <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="q">&lt;$stream&gt;</span><span class="sc">;</span></li></ol></pre><p>If you don&#39;t have File::Stream, you have to do a little more work.</p><p>You can use the four-argument form of sysread to continually add to a buffer. After you add to the buffer, you check if you have a complete line (using your regular expression).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span> <span class="w">FH</span><span class="cm">,</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">8192</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">s/^((?s).*?)your_pattern//</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$record</span> = <span class="i">$1</span><span class="sc">;</span></li><li>            <span class="c"># do stuff here.</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can do the same thing with foreach and a match using the c flag and the \\G anchor, if you do not mind your entire file being in memory at the end.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span> <span class="w">FH</span><span class="cm">,</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">8192</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$record</span> <span class="s">(</span> <span class="q">m/\\G((?s).*?)your_pattern/gc</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="c"># do stuff here.</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span> <span class="s">)</span> = <span class="q">&quot;&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#I-put-a-regular-expression-into-%24%2f-but-it-didn't-work.-What's-wrong%3f
Pod::Simple::TextContent (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::Text]]\n[[Pod::Spell]]					<section class="prog__container"><p>Pod::Simple::TextContent -- get the text content of Pod</p> <pre class="verbatim"><ol><li> <span class="w">TODO</span></li><li></li><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::TextContent</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::TextContent-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/TextContent.html
Pod::Simple::Checker (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::Text]]\n[[Pod::Checker]]					<section class="prog__container"><p>Pod::Simple::Checker -- check the Pod syntax of a document</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::Checker</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::Checker-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/Checker.html
Net::Cmd (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::Cmd - Network Command class (as used by FTP, SMTP etc)</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Cmd</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Net::Cmd)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/Cmd.html
$< (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The real uid of this process.  You can change both the real uid and the effective uid at the same time by using <code class="inline"><span class="i">POSIX::setuid</span><span class="s">(</span><span class="s">)</span></code> .  Since changes to <code class="inline"><span class="i">$&lt;</span></code>  require a system call, check <code class="inline"><span class="i">$!</span></code>  after a change attempt to detect any possible errors.</p><p>Mnemonic: it&#39;s the uid you came <i>from</i>, if you&#39;re running setuid.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3c
chmod (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>chmod LIST</pre><p>Changes the permissions of a list of files.  The first element of the list must be the numeric mode, which should probably be an octal number, and which definitely should <i>not</i> be a string of octal digits: <code class="inline"><span class="n">0644</span></code>  is okay, but <code class="inline"><span class="q">&quot;0644&quot;</span></code>  is not.  Returns the number of files successfully changed.  See also <span href="http://perldoc.perl.org/functions/oct.html">oct</span> if all you have is a string.</p><pre class="verbatim"><ol><li>    <span class="i">$cnt</span> = <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="n">0755</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="cm">,</span> <span class="q">&quot;bar&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="n">0755</span><span class="cm">,</span> <span class="i">@executables</span><span class="sc">;</span></li><li>    <span class="i">$mode</span> = <span class="q">&quot;0644&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="i">$mode</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="sc">;</span>      <span class="c"># !!! sets mode to</span></li><li>                                             <span class="c"># --w----r-T</span></li><li>    <span class="i">$mode</span> = <span class="q">&quot;0644&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="sc">;</span> <span class="c"># this is better</span></li><li>    <span class="i">$mode</span> = <span class="n">0644</span><span class="sc">;</span>   <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="i">$mode</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="sc">;</span>      <span class="c"># this is best</span></li></ol></pre><p>On systems that support fchmod(2), you may pass filehandles among the files.  On systems that don&#39;t support fchmod(2), passing filehandles raises an exception.  Filehandles must be passed as globs or glob references to be recognized; barewords are considered filenames.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;foo&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$perm</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span> <span class="i">$fh</span><span class="s">)</span>[<span class="n">2</span>] &amp; <span class="n">07777</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span><span class="s">(</span><span class="i">$perm</span> | <span class="n">0600</span><span class="cm">,</span> <span class="i">$fh</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can also import the symbolic <code class="inline"><span class="w">S_I</span>*</code>  constants from the <code class="inline"><span class="w">Fcntl</span></code>  module:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">qw( :mode )</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="w">S_IRWXU</span>|<span class="w">S_IRGRP</span>|<span class="w">S_IXGRP</span>|<span class="w">S_IROTH</span>|<span class="w">S_IXOTH</span><span class="cm">,</span> <span class="i">@executables</span><span class="sc">;</span></li><li>    <span class="c"># Identical to the chmod 0755 of the example above.</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#chmod">chmod in perlport</span>.</p></section>	http://perldoc.perl.org/functions/chmod.html
realloc() of freed memory ignored	A			Perl Diagnostics							<section class="prog__container"><p>(S malloc) An internal routine called realloc() on something that had already been freed.</p></section>	http://perldoc.perl.org/perldiag.html#realloc()-of-freed-memory-ignored
setegid() not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign to <code class="inline"><span class="i">$)</span></code> , and your operating system doesn&#39;t support the setegid() system call (or equivalent), or at least Configure didn&#39;t think so.</p></section>	http://perldoc.perl.org/perldiag.html#setegid()-not-implemented
Can't open %s: %s	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) The implicit opening of a file through use of the <code class="inline">&lt;&gt;</code>  filehandle, either implicitly under the <code class="inline">-<span class="w">n</span></code>  or <code class="inline">-p</code>  command-line switches, or explicitly, failed for the indicated reason.  Usually this is because you don&#39;t have read permission for a file which you named on the command line.</p><p>(F) You tried to call perl with the <b>-e</b> switch, but <i>/dev/null</i> (or your operating system&#39;s equivalent) could not be opened.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-%25s%3a-%25s
destructor (definition)	A			Perl Glossary							<section class="prog__container"><p>A special <b>method</b> that is called when an <b>object</b> is thinking about <b>destroying</b> itself. A Perl program’s <code class="inline">DESTROY</code>  method doesn’t do the actual destruction; Perl just <b>triggers</b> the method in case the <b>class</b> wants to do any associated cleanup.</p></section>	http://perldoc.perl.org/perlglossary.html#destructor
character property (definition)	A			Perl Glossary							<section class="prog__container"><p>A predefined <b>character class</b> matchable by the <code class="inline">\\<span class="w">p</span></code>  or <code class="inline">\\<span class="w">P</span></code>  <b>metasymbol</b>. <b>Unicode</b> defines hundreds of standard properties for every possible codepoint, and Perl defines a few of its own, too.</p></section>	http://perldoc.perl.org/perlglossary.html#character-property
scalar variable (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>variable</b> prefixed with <code class="inline"><span class="i">$</span></code>  that holds a single value.</p></section>	http://perldoc.perl.org/perlglossary.html#scalar-variable
-T	A			Perl Command-Line Switches							<section class="prog__container"><p>turns on &quot;taint&quot; so you can test them.  Ordinarily these checks are done only when running setuid or setgid.  It&#39;s a good idea to turn them on explicitly for programs that run on behalf of someone else whom you might not necessarily trust, such as CGI programs or any internet servers you might write in Perl.  See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span> for details.  For security reasons, this option must be seen by Perl quite early; usually this means it must appear early on the command line or in the <code class="inline"><span class="c">#!</span></code>  line for systems which support that construct.</p></section>	http://perldoc.perl.org/perlrun.html#*-T*
Misplaced _ in number	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) An underscore (underbar) in a numeric constant did not separate two digits.</p></section>	http://perldoc.perl.org/perldiag.html#Misplaced-_-in-number
Class::Struct (module)	A			Perl Standard Modules							<section class="prog__container"><p>Class::Struct - declare struct-like datatypes as Perl classes</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span><span class="sc">;</span></li><li>            <span class="c"># declare struct, based on array:</span></li><li>    <span class="i">struct</span><span class="s">(</span> <span class="w">CLASS_NAME</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ... <span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="c"># declare struct, based on hash:</span></li><li>    <span class="i">struct</span><span class="s">(</span> <span class="w">CLASS_NAME</span> <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ... <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="package-CLASS_NAME"></span>    package <span class="i">CLASS_NAME</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span><span class="sc">;</span></li><li>            <span class="c"># declare struct, based on array, implicit class name:</span></li><li>    <span class="i">struct</span><span class="s">(</span> <span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ... <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Declare struct at compile time</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span> <span class="w">CLASS_NAME</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ...<span class="s">]</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span> <span class="w">CLASS_NAME</span> <span class="cm">=&gt;</span> <span class="s">{</span><span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ...<span class="s">}</span><span class="sc">;</span></li><li></li><li>    <span class="c"># declare struct at compile time, based on array, implicit</span></li><li>    <span class="c"># class name:</span></li><li><span name="package-CLASS_NAME-1"></span>    package <span class="i">CLASS_NAME</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span> <span class="w">ELEMENT_NAME</span> <span class="cm">=&gt;</span> <span class="w">ELEMENT_TYPE</span><span class="cm">,</span> ... <span class="sc">;</span></li><li></li><li><span name="package-Myobj"></span>    package <span class="i">Myobj</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Class::Struct</span><span class="sc">;</span></li><li>            <span class="c"># declare struct with four types of elements:</span></li><li>    <span class="i">struct</span><span class="s">(</span> <span class="w">s</span> <span class="cm">=&gt;</span> <span class="q">&#39;$&#39;</span><span class="cm">,</span> <span class="w">a</span> <span class="cm">=&gt;</span> <span class="q">&#39;@&#39;</span><span class="cm">,</span> <span class="w">h</span> <span class="cm">=&gt;</span> <span class="q">&#39;%&#39;</span><span class="cm">,</span> <span class="w">c</span> <span class="cm">=&gt;</span> <span class="q">&#39;My_Other_Class&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$obj</span> = <span class="w">new</span> <span class="w">Myobj</span><span class="sc">;</span>               <span class="c"># constructor</span></li><li></li><li>                                    <span class="c"># scalar type accessor:</span></li><li>    <span class="i">$element_value</span> = <span class="i">$obj</span><span class="i">-&gt;s</span><span class="sc">;</span>           <span class="c"># element value</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;s</span><span class="s">(</span><span class="q">&#39;new value&#39;</span><span class="s">)</span><span class="sc">;</span>               <span class="c"># assign to element</span></li><li></li><li>                                    <span class="c"># array type accessor:</span></li><li>    <span class="i">$ary_ref</span> = <span class="i">$obj</span><span class="i">-&gt;a</span><span class="sc">;</span>                 <span class="c"># reference to whole array</span></li><li>    <span class="i">$ary_element_value</span> = <span class="i">$obj</span><span class="i">-&gt;a</span><span class="s">(</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># array element value</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;a</span><span class="s">(</span><span class="n">2</span><span class="cm">,</span> <span class="q">&#39;new value&#39;</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># assign to array element</span></li><li></li><li>                                    <span class="c"># hash type accessor:</span></li><li>    <span class="i">$hash_ref</span> = <span class="i">$obj</span><span class="i">-&gt;h</span><span class="sc">;</span>                <span class="c"># reference to whole hash</span></li><li>    <span class="i">$hash_element_value</span> = <span class="i">$obj</span><span class="i">-&gt;h</span><span class="s">(</span><span class="q">&#39;x&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># hash element value</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;h</span><span class="s">(</span><span class="q">&#39;x&#39;</span><span class="cm">,</span> <span class="q">&#39;new value&#39;</span><span class="s">)</span><span class="sc">;</span>          <span class="c"># assign to hash element</span></li><li></li><li>                                    <span class="c"># class type accessor:</span></li><li>    <span class="i">$element_value</span> = <span class="i">$obj</span><span class="i">-&gt;c</span><span class="sc">;</span>           <span class="c"># object reference</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;c</span><span class="i">-&gt;method</span><span class="s">(</span>...<span class="s">)</span><span class="sc">;</span>               <span class="c"># call method of object</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;c</span><span class="s">(</span><span class="w">new</span> <span class="w">My_Other_Class</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># assign a new object</span></li></ol></pre></section>	http://perldoc.perl.org/Class/Struct.html
sin (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>sin EXPR<br>sin</pre><p>Returns the sine of EXPR (expressed in radians).  If EXPR is omitted, returns sine of <code class="inline"><span class="i">$_</span></code> .</p><p>For the inverse sine operation, you may use the <code class="inline"><span class="w">Math::Trig::asin</span></code>  function, or use this relation:</p><pre class="verbatim"><ol><li><span name="asin"></span>    sub <span class="m">asin</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/atan2.html">atan2</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]<span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/sqrt.html">sqrt</span><span class="s">(</span><span class="n">1</span> - <span class="i">$_</span>[<span class="n">0</span>] * <span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span><span class="s">)</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/sin.html
Cannot set tied @DB::args	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span></code> tried to set <code class="inline"><span class="i">@DB::args</span></code> , but found it tied.  Tying <code class="inline"><span class="i">@DB::args</span></code>  is not supported.  (Before this error was added, it used to crash.)</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-set-tied-%40DB%3a%3aargs
ucfirst (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>ucfirst EXPR<br>ucfirst</pre><p>Returns the value of EXPR with the first character in uppercase (titlecase in Unicode).  This is the internal function implementing the <code class="inline">\\<span class="w">u</span></code>  escape in double-quoted strings.</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>This function behaves the same way under various pragma, such as in a locale, as <span href="http://perldoc.perl.org/functions/lc.html">lc</span> does.</p></section>	http://perldoc.perl.org/functions/ucfirst.html
corrupted regexp pointers	A			Perl Diagnostics							<section class="prog__container"><p>(P) The regular expression engine got confused by what the regular expression compiler gave it.</p></section>	http://perldoc.perl.org/perldiag.html#corrupted-regexp-pointers
Switch (?(condition)... contains too many branches in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A (?(condition)if-clause|else-clause) construct can have at most two branches (the if-clause and the else-clause).  If you want one or both to contain alternation, such as using <code class="inline"><span class="w">this</span>|<span class="w">that</span>|<span class="w">other</span></code> , enclose it in clustering parentheses:</p><pre class="verbatim"><ol><li>    (?(condition)(?:this|that|other)|else-clause)</li></ol></pre><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Switch-(%3f(condition)...-contains-too-many-branches-in-regex%3b-marked-by--%3c---HERE-in-m%2f%25s%2f
wantarray (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Miscellaneous functions							<section class="prog__container"><pre>wantarray</pre><p>Returns true if the context of the currently executing subroutine or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> is looking for a list value.  Returns false if the context is looking for a scalar.  Returns the undefined value if the context is looking for no value (void context).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="l_k" href="http://perldoc.perl.org/functions/wantarray.html">wantarray</span><span class="sc">;</span> <span class="c"># don&#39;t bother doing more</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@a</span> = <span class="i">complex_calculation</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/wantarray.html">wantarray</span> ? <span class="i">@a</span> <span class="co">:</span> <span class="q">&quot;@a&quot;</span><span class="sc">;</span></li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wantarray.html">wantarray()</span></code>&#39;s result is unspecified in the top level of a file, in a <code class="inline">BEGIN</code> , <code class="inline">UNITCHECK</code> , <code class="inline">CHECK</code> , <code class="inline">INIT</code>  or <code class="inline">END</code>  block, or in a <code class="inline">DESTROY</code>  method.</p><p>This function should have been named wantlist() instead.</p></section>	http://perldoc.perl.org/functions/wantarray.html
localtime (function)	A			Perl Functions\nPerl Time-related functions							<section class="prog__container"><pre>localtime EXPR<br>localtime</pre><p>Converts a time as returned by the time function to a 9-element list with the time analyzed for the local time zone.  Typically used as follows:</p><pre class="verbatim"><ol><li>    <span class="c">#  0    1    2     3     4    5     6     7     8</span></li><li>    <span class="s">(</span><span class="i">$sec</span><span class="cm">,</span><span class="i">$min</span><span class="cm">,</span><span class="i">$hour</span><span class="cm">,</span><span class="i">$mday</span><span class="cm">,</span><span class="i">$mon</span><span class="cm">,</span><span class="i">$year</span><span class="cm">,</span><span class="i">$wday</span><span class="cm">,</span><span class="i">$yday</span><span class="cm">,</span><span class="i">$isdst</span><span class="s">)</span> =</li><li>                                                <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>All list elements are numeric and come straight out of the C `struct tm&#39;.  <code class="inline"><span class="i">$sec</span></code> , <code class="inline"><span class="i">$min</span></code> , and <code class="inline"><span class="i">$hour</span></code>  are the seconds, minutes, and hours of the specified time.</p><p><code class="inline"><span class="i">$mday</span></code>  is the day of the month and <code class="inline"><span class="i">$mon</span></code>  the month in the range <code class="inline"><span class="n">0</span>..<span class="n">11</span></code> , with 0 indicating January and 11 indicating December. This makes it easy to get a month name from a list:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@abbr</span> = <span class="q">qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$abbr[$mon] $mday&quot;</span><span class="sc">;</span></li><li>    <span class="c"># $mon=9, $mday=18 gives &quot;Oct 18&quot;</span></li></ol></pre><p><code class="inline"><span class="i">$year</span></code>  contains the number of years since 1900.  To get a 4-digit year write:</p><pre class="verbatim"><ol><li>    <span class="i">$year</span> += <span class="n">1900</span><span class="sc">;</span></li></ol></pre><p>To get the last two digits of the year (e.g., &quot;01&quot; in 2001) do:</p><pre class="verbatim"><ol><li>    <span class="i">$year</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%02d&quot;</span><span class="cm">,</span> <span class="i">$year</span> % <span class="n">100</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p><code class="inline"><span class="i">$wday</span></code>  is the day of the week, with 0 indicating Sunday and 3 indicating Wednesday.  <code class="inline"><span class="i">$yday</span></code>  is the day of the year, in the range <code class="inline"><span class="n">0</span>..<span class="n">364</span></code>  (or <code class="inline"><span class="n">0</span>..<span class="n">365</span></code>  in leap years.)</p><p><code class="inline"><span class="i">$isdst</span></code>  is true if the specified time occurs during Daylight Saving Time, false otherwise.</p><p>If EXPR is omitted, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime()</span></code> uses the current time (as returned by time(3)).</p><p>In scalar context, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime()</span></code> returns the ctime(3) value:</p><pre class="verbatim"><ol><li>    <span class="i">$now_string</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span>  <span class="c"># e.g., &quot;Thu Oct 13 04:54:34 1994&quot;</span></li></ol></pre><p>The format of this scalar value is <b>not</b> locale-dependent but built into Perl.  For GMT instead of local time use the <span href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span> builtin.  See also the <code class="inline"><span class="w">Time::Local</span></code>  module (for converting seconds, minutes, hours, and such back to the integer value returned by time()), and the <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module&#39;s strftime(3) and mktime(3) functions.</p><p>To get somewhat similar but locale-dependent date strings, set up your locale environment variables appropriately (please see <span href="http://perldoc.perl.org/perllocale.html">perllocale</span>) and try for example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(strftime)</span><span class="sc">;</span></li><li>    <span class="i">$now_string</span> = <span class="w">strftime</span> <span class="q">&quot;%a %b %e %H:%M:%S %Y&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li><li>    <span class="c"># or for GMT formatted appropriately for your locale:</span></li><li>    <span class="i">$now_string</span> = <span class="w">strftime</span> <span class="q">&quot;%a %b %e %H:%M:%S %Y&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span><span class="sc">;</span></li></ol></pre><p>Note that the <code class="inline"><span class="i">%a</span></code>  and <code class="inline"><span class="i">%b</span></code> , the short forms of the day of the week and the month of the year, may not necessarily be three characters wide.</p><p>The <span href="http://perldoc.perl.org/Time/gmtime.html">Time::gmtime</span> and <span href="http://perldoc.perl.org/Time/localtime.html">Time::localtime</span> modules provide a convenient, by-name access mechanism to the gmtime() and localtime() functions, respectively.</p><p>For a comprehensive date and time representation look at the <span href="http://search.cpan.org/perldoc/DateTime">DateTime</span> module on CPAN.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#localtime">localtime in perlport</span>.</p></section>	http://perldoc.perl.org/functions/localtime.html
printf() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#printf()-on-closed-filehandle-%25s
Unsupported function fork	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your version of executable does not support forking.</p><p>Note that under some systems, like OS/2, there may be different flavors of Perl executables, some of which may support fork, some not.  Try changing the name you call Perl by to <code class="inline"><span class="w">perl_</span></code> , <code class="inline"><span class="w">perl__</span></code> , and so on.</p></section>	http://perldoc.perl.org/perldiag.html#Unsupported-function-fork
fatal error (definition)	A			Perl Glossary							<section class="prog__container"><p>An uncaught <b>exception</b>, which causes termination of the <b>process</b> after printing a message on your <b>standard error</b> stream. Errors that happen inside an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> are not fatal. Instead, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> terminates after placing the exception message in the <code class="inline"><span class="i">$@</span></code>  (<code class="inline"><span class="i">$EVAL_ERROR</span></code> ) variable. You can try to provoke a fatal error with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> operator (known as throwing or raising an exception), but this may be caught by a dynamically enclosing <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>. If not caught, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> becomes a fatal error.</p></section>	http://perldoc.perl.org/perlglossary.html#fatal-error
gethostbyname (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>gethostbyname NAME</pre>Get host record given name.</section>	http://perldoc.perl.org/functions/gethostbyname.html
Modification of non-creatable hash value attempted, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) You tried to make a hash value spring into existence, and it couldn&#39;t be created for some peculiar reason.</p></section>	http://perldoc.perl.org/perldiag.html#Modification-of-non-creatable-hash-value-attempted%2c-%25s
accessor methods (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>method</b> used to indirectly inspect or update an <b>object</b>’s state (its <b>instance variables</b>).</p></section>	http://perldoc.perl.org/perlglossary.html#accessor-methods
Why can't I get the output of a command with system()?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>You&#39;re confusing the purpose of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> and backticks (``). <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> runs a command and returns exit status information (as a 16 bit value: the low 7 bits are the signal the process died from, if any, and the high 8 bits are the actual exit value). Backticks (``) run a command and return what it sent to STDOUT.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$exit_status</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;mail-users&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$output_string</span> = <span class="q">`ls`</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#Why-can't-I-get-the-output-of-a-command-with-system()%3f
%- (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>Similar to <code class="inline"><span class="i">%+</span></code> , this variable allows access to the named capture groups in the last successful match in the currently active dynamic scope.  To each capture group name found in the regular expression, it associates a reference to an array containing the list of values captured by all buffers with that name (should there be several of them), in the order where they appear.</p><p>Here&#39;s an example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">&#39;1234&#39;</span> =~ <span class="q">/(?&lt;A&gt;1)(?&lt;B&gt;2)(?&lt;A&gt;3)(?&lt;B&gt;4)/</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bufname</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%-</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ary</span> = <span class="i">$-</span>{<span class="i">$bufname</span>}<span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$idx</span> <span class="s">(</span><span class="n">0</span>..<span class="i">$#$ary</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\$-{$bufname}[$idx] : &quot;</span><span class="cm">,</span></li><li>                      <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$ary</span>-&gt;[<span class="i">$idx</span>]<span class="s">)</span></li><li>                          ? <span class="q">&quot;&#39;$ary-&gt;[$idx]&#39;&quot;</span></li><li>                          <span class="co">:</span> <span class="q">&quot;undef&quot;</span><span class="s">)</span><span class="cm">,</span></li><li>                      <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>would print out:</p><pre class="verbatim"><ol><li>    $-{A}[0] : &#39;1&#39;</li><li>    $-{A}[1] : &#39;3&#39;</li><li>    $-{B}[0] : &#39;2&#39;</li><li>    $-{B}[1] : &#39;4&#39;</li></ol></pre><p>The keys of the <code class="inline"><span class="i">%-</span></code>  hash correspond to all buffer names found in the regular expression.</p><p>The behaviour of <code class="inline"><span class="i">%-</span></code>  is implemented via the <span href="http://perldoc.perl.org/Tie/Hash/NamedCapture.html">Tie::Hash::NamedCapture</span> module.</p><p><b>Note:</b> <code class="inline"><span class="i">%-</span></code>  and <code class="inline"><span class="i">%+</span></code>  are tied views into a common internal hash associated with the last successful regular expression.  Therefore mixing iterative access to them via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> may have unpredictable results. Likewise, if the last successful match changes, then the results may be surprising.</p><p>This variable was added in Perl v5.10.0.</p><p>This variable is read-only and dynamically-scoped.</p></section>	http://perldoc.perl.org/perlvar.html#%25-
getnetent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getnetent</pre>Get next networks record.</section>	http://perldoc.perl.org/functions/getnetent.html
How do I look up a hash element by value?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Create a reverse hash:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%by_value</span> = <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="i">%by_key</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> = <span class="i">$by_value</span>{<span class="i">$value</span>}<span class="sc">;</span></li></ol></pre><p>That&#39;s not particularly efficient. It would be more space-efficient to use:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%by_key</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$by_value</span>{<span class="i">$value</span>} = <span class="i">$key</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If your hash could have repeated values, the methods above will only find one of the associated keys.  This may or may not worry you. If it does worry you, you can always reverse the hash into a hash of arrays instead:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%by_key</span><span class="s">)</span> <span class="s">{</span></li><li>         <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@</span>{<span class="i">$key_list_by_value</span>{<span class="i">$value</span>}}<span class="cm">,</span> <span class="i">$key</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-look-up-a-hash-element-by-value%3f
bytecode (definition)	A			Perl Glossary							<section class="prog__container"><p>A pidgin-like lingo spoken among ’droids when they don’t wish to reveal their orientation (see <b>endian</b>). Named after some similar languages spoken (for similar reasons) between compilers and interpreters in the late 20ᵗʰ century. These languages are characterized by representing everything as a nonarchitecture-dependent sequence of bytes.</p></section>	http://perldoc.perl.org/perlglossary.html#bytecode
Can't chdir to %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline">perl -x/foo/bar</code>, but <i>/foo/bar</i> is not a directory that you can chdir to, possibly because it doesn&#39;t exist.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-chdir-to-%25s
Unmatched [ in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The brackets around a character class must match.  If you wish to include a closing bracket in a character class, backslash it or put it first.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unmatched-%5b-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
switching effective %s is not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) While under the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">filetest</span></code>  pragma, we cannot switch the real and effective uids or gids.</p></section>	http://perldoc.perl.org/perldiag.html#switching-effective-%25s-is-not-implemented
Unmatched right %s bracket	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer counted more closing curly or square brackets than opening ones, so you&#39;re probably missing a matching opening bracket.  As a general rule, you&#39;ll find the missing one (so to speak) near the place you were last editing.</p></section>	http://perldoc.perl.org/perldiag.html#Unmatched-right-%25s-bracket
chop (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>chop VARIABLE<br>chop( LIST )<br>chop</pre><p>Chops off the last character of a string and returns the character chopped.  It is much more efficient than <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s/.$//s</span></code> because it neither scans nor copies the string.  If VARIABLE is omitted, chops <code class="inline"><span class="i">$_</span></code> . If VARIABLE is a hash, it chops the hash&#39;s values, but not its keys, resetting the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> iterator in the process.</p><p>You can actually chop anything that&#39;s an lvalue, including an assignment.</p><p>If you chop a list, each element is chopped.  Only the value of the last <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chop.html">chop</span></code> is returned.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chop.html">chop</span></code> returns the last character.  To return all but the last character, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span></code> .</p><p>See also <span href="http://perldoc.perl.org/functions/chomp.html">chomp</span>.</p></section>	http://perldoc.perl.org/functions/chop.html
Can't stat script "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(P) For some reason you can&#39;t fstat() the script even though you have it open already.  Bizarre.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-stat-script-%22%25s%22
multiple inheritance (definition)	A			Perl Glossary		[[inheritance]]\n[[single inheritance]]					<section class="prog__container"><p>The features you got from your mother and father, mixed together unpredictably.  In computer languages (including Perl), it is the notion that a given class may have multiple direct ancestors or <b>base classes</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#multiple-inheritance
shutdown() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to do a shutdown on a closed socket.  Seems a bit superfluous.</p></section>	http://perldoc.perl.org/perldiag.html#shutdown()-on-closed-socket-%25s
length/code after end of string in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) While unpacking, the string buffer was already used up when an unpack length/code combination tried to obtain more data.  This results in an undefined value for the length.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#length%2fcode-after-end-of-string-in-unpack
=encoding	A			Perl POD Commands							<section class="prog__container"><p>This command, which should occur early in the document (at least before any non-US-ASCII data!), declares that this document is encoded in the encoding <i>encodingname</i>, which must be an encoding name that <span href="http://perldoc.perl.org/Encode.html">Encode</span> recognizes.  (Encode&#39;s list of supported encodings, in <span href="http://perldoc.perl.org/Encode/Supported.html">Encode::Supported</span>, is useful here.) If the Pod parser cannot decode the declared encoding, it  should emit a warning and may abort parsing the document altogether.</p><p>A document having more than one &quot;=encoding&quot; line should be considered an error.  Pod processors may silently tolerate this if the not-first &quot;=encoding&quot; lines are just duplicates of the first one (e.g., if there&#39;s a &quot;=encoding utf8&quot; line, and later on another &quot;=encoding utf8&quot; line).  But Pod processors should complain if there are contradictory &quot;=encoding&quot; lines in the same document (e.g., if there is a &quot;=encoding utf8&quot; early in the document and &quot;=encoding big5&quot; later).  Pod processors that recognize BOMs may also complain if they see an &quot;=encoding&quot; line that contradicts the BOM (e.g., if a document with a UTF-16LE BOM has an &quot;=encoding shiftjis&quot; line).</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dencoding-encodingname%22
Assigned value is not a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign something that was not a reference to an lvalue reference (e.g., <code class="inline">\\<span class="i">$x</span> = <span class="i">$y</span></code> ).  If you meant to make $x an alias to $y, use <code class="inline">\\<span class="i">$x</span> = \\<span class="i">$y</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Assigned-value-is-not-a-reference
Can't execute %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used the <b>-S</b> switch, but the copies of the script to execute found in the PATH did not have correct permissions.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-execute-%25s
getpgrp (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>getpgrp PID</pre><p>Returns the current process group for the specified PID.  Use a PID of <code class="inline"><span class="n">0</span></code>  to get the current process group for the current process.  Will raise an exception if used on a machine that doesn&#39;t implement getpgrp(2).  If PID is omitted, returns the process group of the current process.  Note that the POSIX version of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getpgrp.html">getpgrp</span></code> does not accept a PID argument, so only <code class="inline"><span class="w">PID</span>==<span class="n">0</span></code>  is truly portable.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getpgrp">getpgrp in perlport</span>.</p></section>	http://perldoc.perl.org/functions/getpgrp.html
System V %s is not implemented on this machine	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to do something with a function beginning with &quot;sem&quot;, &quot;shm&quot;, or &quot;msg&quot; but that System V IPC is not implemented in your machine.  In some machines the functionality can exist but be unconfigured.  Consult your system support.</p></section>	http://perldoc.perl.org/perldiag.html#System-V-%25s-is-not-implemented-on-this-machine
push (function)	A			Perl Functions\nPerl Functions for real @ARRAYs							<section class="prog__container"><pre>push ARRAY,LIST<br>push EXPR,LIST</pre><p>Treats ARRAY as a stack by appending the values of LIST to the end of ARRAY.  The length of ARRAY increases by the length of LIST.  Has the same effect as</p><pre class="verbatim"><ol><li>    for <span class="i">$value</span> <span class="s">(</span><span class="w">LIST</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$ARRAY</span>[++<span class="i">$#ARRAY</span>] = <span class="i">$value</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>but is more efficient.  Returns the number of elements in the array following the completed <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>.</p><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code> is considered highly experimental. The exact behaviour may change in a future version of Perl.</p><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so push/pop/etc work on scalars (experimental)</span></li></ol></pre></section>	http://perldoc.perl.org/functions/push.html
getppid (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>getppid</pre><p>Returns the process id of the parent process.</p><p>Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work around non-POSIX thread semantics the minority of Linux systems (and Debian GNU/kFreeBSD systems) that used LinuxThreads, this emulation has since been removed.  See the documentation for <span href="http://perldoc.perl.org/perlvar.html#%24%24">$$</span> for details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getppid">getppid in perlport</span>.</p></section>	http://perldoc.perl.org/functions/getppid.html
That use of $[ is unsupported	A			Perl Diagnostics							<section class="prog__container"><p>(F) Assignment to <code class="inline"><span class="i">$[</span></code>  is now strictly circumscribed, and interpreted as a compiler directive.  You may say only one of</p><pre class="verbatim"><ol><li>    <span class="i">$[</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="i">$[</span> = <span class="n">1</span><span class="sc">;</span></li><li>    ...</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$[</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$[</span> = <span class="n">1</span><span class="sc">;</span></li><li>    ...</li></ol></pre><p>This is to prevent the problem of one module changing the array base out from under another module inadvertently.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5b">$[ in perlvar</span> and <span href="http://perldoc.perl.org/arybase.html">arybase</span>.</p></section>	http://perldoc.perl.org/perldiag.html#That-use-of-%24%5b-is-unsupported
Substitution loop	A			Perl Diagnostics							<section class="prog__container"><p>(P) The substitution was looping infinitely.  (Obviously, a substitution shouldn&#39;t iterate more times than there are characters of input, which is what happened.)  See the discussion of substitution in <span href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Regexp Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Substitution-loop
glue language (definition)	A			Perl Glossary							<section class="prog__container"><p>A language such as Perl that is good at hooking things together that weren’t intended to be hooked together.</p></section>	http://perldoc.perl.org/perlglossary.html#glue-language
Not enough arguments for %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The function requires more arguments than you specified.</p></section>	http://perldoc.perl.org/perldiag.html#Not-enough-arguments-for-%25s
Data::Dumper (module)	A			Perl Standard Modules							<section class="prog__container"><p>Data::Dumper - stringified perl data structures, suitable for both printing and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code></p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span></li><li></li><li>    <span class="c"># simple procedural interface</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">Dumper</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># extended usage with names</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">Data::Dumper</span><span class="i">-&gt;Dump</span><span class="s">(</span><span class="s">[</span><span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="s">]</span><span class="cm">,</span> <span class="s">[</span><span class="q">qw(foo *ary)</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># configuration variables</span></li><li>    <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$Data::Dumper::Purity</span> = <span class="n">1</span><span class="sc">;</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">Data::Dumper</span><span class="w">-&gt;Dump</span><span class="s">(</span><span class="s">[</span><span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="s">]</span><span class="cm">,</span> <span class="s">[</span><span class="q">qw(foo *ary)</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># OO usage</span></li><li>    <span class="i">$d</span> = <span class="w">Data::Dumper</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">[</span><span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="s">]</span><span class="cm">,</span> <span class="s">[</span><span class="q">qw(foo *ary)</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>       ...</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$d</span><span class="i">-&gt;Dump</span><span class="sc">;</span></li><li>       ...</li><li>    <span class="i">$d</span><span class="i">-&gt;Purity</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="i">-&gt;Terse</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="i">-&gt;Deepcopy</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="i">$d</span><span class="i">-&gt;Dump</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Data/Dumper.html
Useless use of attribute "const"	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) The &quot;const&quot; attribute has no effect except on anonymous closure prototypes.  You applied it to a subroutine via <span href="http://perldoc.perl.org/attributes.html">attributes.pm</span>.  This is only useful inside an attribute handler for an anonymous subroutine.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-attribute-%22const%22
Can't "continue" outside a when block	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code>, but you&#39;re not inside a <code class="inline">when</code>  or <code class="inline"><span class="w">default</span></code>  block.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22continue%22-outside-a-when-block
How can I make my Perl program run faster?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>The best way to do this is to come up with a better algorithm. This can often make a dramatic difference. Jon Bentley&#39;s book <i>Programming Pearls</i> (that&#39;s not a misspelling!)  has some good tips on optimization, too. Advice on benchmarking boils down to: benchmark and profile to make sure you&#39;re optimizing the right part, look for better algorithms instead of microtuning your code, and when all else fails consider just buying faster hardware. You will probably want to read the answer to the earlier question &quot;How do I profile my Perl programs?&quot; if you haven&#39;t done so already.</p><p>A different approach is to autoload seldom-used Perl code. See the AutoSplit and AutoLoader modules in the standard distribution for that. Or you could locate the bottleneck and think about writing just that part in C, the way we used to take bottlenecks in C code and write them in assembler. Similar to rewriting in C, modules that have critical sections can be written in C (for instance, the PDL module from CPAN).</p><p>If you&#39;re currently linking your perl executable to a shared <i>libc.so</i>, you can often gain a 10-25% performance benefit by rebuilding it to link with a static libc.a instead. This will make a bigger perl executable, but your Perl programs (and programmers) may thank you for it. See the <i>INSTALL</i> file in the source distribution for more information.</p><p>The undump program was an ancient attempt to speed up Perl program by storing the already-compiled form to disk. This is no longer a viable option, as it only worked on a few architectures, and wasn&#39;t a good solution anyway.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-make-my-Perl-program-run-faster%3f
Constant(%s): $^H{%s} is not defined	A			Perl Diagnostics							<section class="prog__container"><p>(F) The parser found inconsistencies while attempting to define an overloaded constant.  Perhaps you forgot to load the corresponding <span href="http://perldoc.perl.org/overload.html">overload</span> pragma?</p></section>	http://perldoc.perl.org/perldiag.html#Constant(%25s)%3a-%24%5eH%7b%25s%7d-is-not-defined
given (function)	A			Perl Functions							<section class="prog__container"><pre>given</pre><p>These flow-control keywords related to the experimental switch feature are documented in <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/given.html
filename (definition)	A			Perl Glossary							<section class="prog__container"><p>One name for a file. This name is listed in a <b>directory</b>. You can use it in an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> to tell the <b>operating system</b> exactly which file you want to open, and associate the file with a <b>filehandle</b>, which will carry the subsequent identity of that file in your program, until you close it.</p></section>	http://perldoc.perl.org/perlglossary.html#filename
No Perl script found in input	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="w">perl</span> -x</code> , but no line was found in the file beginning with #! and containing the word &quot;perl&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#No-Perl-script-found-in-input
How do I find the current century or millennium?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use the following simple functions:</p><pre class="verbatim"><ol><li><span name="get_century"></span>    sub <span class="m">get_century</span>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">(</span><span class="s">(</span><span class="s">(</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">)</span><span class="s">)</span>[<span class="n">5</span>] + <span class="n">1999</span><span class="s">)</span><span class="s">)</span>/<span class="n">100</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="get_millennium"></span>    sub <span class="m">get_millennium</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span>+<span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">(</span><span class="s">(</span><span class="s">(</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">)</span><span class="s">)</span>[<span class="n">5</span>] + <span class="n">1899</span><span class="s">)</span><span class="s">)</span>/<span class="n">1000</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>On some systems, the <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module&#39;s <code class="inline"><span class="i">strftime</span><span class="s">(</span><span class="s">)</span></code>  function has been extended in a non-standard way to use a <code class="inline"><span class="i">%C</span></code>  format, which they sometimes claim is the &quot;century&quot;. It isn&#39;t, because on most such systems, this is only the first two digits of the four-digit year, and thus cannot be used to determine reliably the current century or millennium.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-the-current-century-or-millennium%3f
What does "bad interpreter" mean?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The &quot;bad interpreter&quot; message comes from the shell, not perl. The actual message may vary depending on your platform, shell, and locale settings.</p><p>If you see &quot;bad interpreter - no such file or directory&quot;, the first line in your perl script (the &quot;shebang&quot; line) does not contain the right path to perl (or any other program capable of running scripts). Sometimes this happens when you move the script from one machine to another and each machine has a different path to perl--/usr/bin/perl versus /usr/local/bin/perl for instance. It may also indicate that the source machine has CRLF line terminators and the destination machine has LF only: the shell tries to find /usr/bin/perl&lt;CR&gt;, but can&#39;t.</p><p>If you see &quot;bad interpreter: Permission denied&quot;, you need to make your script executable.</p><p>In either case, you should still be able to run the scripts with perl explicitly:</p><pre class="verbatim"><ol><li>    <span class="i">% perl</span> <span class="w">script</span>.<span class="w">pl</span></li></ol></pre><p>If you get a message like &quot;perl: command not found&quot;, perl is not in your PATH, which might also mean that the location of perl is not where you expect it so you need to adjust your shebang line.</p></section>	http://perldoc.perl.org/perlfaq7.html#What-does-%22bad-interpreter%22-mean%3f
How can I quote a variable to use in a regex?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>The Perl parser will expand $variable and @variable references in regular expressions unless the delimiter is a single quote. Remember, too, that the right-hand side of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code> substitution is considered a double-quoted string (see <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more details). Remember also that any regex special characters will be acted on unless you precede the substitution with \\Q. Here&#39;s an example:</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> = <span class="q">&quot;Placido P. Octopus&quot;</span><span class="sc">;</span></li><li>    <span class="i">$regex</span>  = <span class="q">&quot;P.&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$string</span> =~ <span class="q">s/$regex/Polyp/</span><span class="sc">;</span></li><li>    <span class="c"># $string is now &quot;Polypacido P. Octopus&quot;</span></li></ol></pre><p>Because <code class="inline">.</code> is special in regular expressions, and can match any single character, the regex <code class="inline"><span class="w">P</span>.</code>  here has matched the &lt;Pl&gt; in the original string.</p><p>To escape the special meaning of <code class="inline">.</code>, we use <code class="inline">\\<span class="w">Q</span></code> :</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> = <span class="q">&quot;Placido P. Octopus&quot;</span><span class="sc">;</span></li><li>    <span class="i">$regex</span>  = <span class="q">&quot;P.&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$string</span> =~ <span class="q">s/\\Q$regex/Polyp/</span><span class="sc">;</span></li><li>    <span class="c"># $string is now &quot;Placido Polyp Octopus&quot;</span></li></ol></pre><p>The use of <code class="inline">\\<span class="w">Q</span></code>  causes the &lt;.&gt; in the regex to be treated as a regular character, so that <code class="inline"><span class="w">P</span>.</code>  matches a <code class="inline"><span class="w">P</span></code>  followed by a dot.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-quote-a-variable-to-use-in-a-regex%3f
Binary "%" operator	A			Perl Operators\nPerl Multiplicative Operators							<section class="prog__container">Binary &quot;%&quot; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n: If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero). If the operands $m and $n are floating point values and the absolute value of $n (that is abs($n) ) is less than ( UV_MAX + 1 ), only the integer portion of $m and $n will be used in the operation (Note: here UV_MAX means the maximum of the unsigned integer type). If the absolute value of the right operand ( abs($n) ) is greater than or equal to ( UV_MAX + 1 ), &quot;%&quot; computes the floating-point remainder $r in the equation ( $r = $m - $i * $n ) where $i is a certain integer that makes $r have the same sign as the right operand $n ( not as the left operand $m like C function fmod ( ) ) and the absolute value less than that of $n. Note that when use integer is in scope, &quot;%&quot; gives you direct access to the modulo operator as implemented by your C compiler. This operator is not as well defined for negative operands, but it will execute faster.</section>	http://perldoc.perl.org/perlop.html#Multiplicative-Operators
Possible attempt to separate words with commas	A			Perl Diagnostics							<section class="prog__container"><p>(W qw) qw() lists contain items separated by whitespace; therefore commas aren&#39;t needed to separate the items.  (You may have used different delimiters than the parentheses shown here; braces are also frequently used.)</p><p>You probably wrote something like this:</p><pre class="verbatim"><ol><li>    <span class="q">qw! a, b, c !</span><span class="sc">;</span></li></ol></pre><p>which puts literal commas into some of the list items.  Write it without commas if you don&#39;t want them to appear in your data:</p><pre class="verbatim"><ol><li>    <span class="q">qw! a b c !</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Possible-attempt-to-separate-words-with-commas
Subroutine "&%s" is not available	A			Perl Diagnostics							<section class="prog__container"><p>(W closure) During compilation, an inner named subroutine or eval is attempting to capture an outer lexical subroutine that is not currently available.  This can happen for one of two reasons.  First, the lexical subroutine may be declared in an outer anonymous subroutine that has not yet been created.  (Remember that named subs are created at compile time, while anonymous subs are created at run-time.)  For example,</p><pre class="verbatim"><ol><li><span name="a"></span><span name="f"></span>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> sub <span class="m">a</span> <span class="s">{</span>...<span class="s">}</span> sub <span class="m">f</span> <span class="s">{</span> \\<span class="i">&amp;a</span> <span class="s">}</span> <span class="s">}</span></li></ol></pre><p>At the time that f is created, it can&#39;t capture the current &quot;a&quot; sub, since the anonymous subroutine hasn&#39;t been created yet.  Conversely, the following won&#39;t give a warning since the anonymous subroutine has by now been created and is live:</p><pre class="verbatim"><ol><li><span name="a"></span>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> sub <span class="m">a</span> <span class="s">{</span>...<span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;sub f { \\&amp;a }&#39;</span> <span class="s">}</span>-&gt;<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The second situation is caused by an eval accessing a lexical subroutine that has gone out of scope, for example,</p><pre class="verbatim"><ol><li><span name="f"></span>    sub <span class="m">f</span> <span class="s">{</span></li><li><span name="a"></span>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> sub <span class="m">a</span> <span class="s">{</span>...<span class="s">}</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;\\&amp;a&#39;</span> <span class="s">}</span></li><li>    <span class="s">}</span></li><li>    <span class="i">f</span><span class="s">(</span><span class="s">)</span>-&gt;<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Here, when the &#39;\\&amp;a&#39; in the eval is being compiled, f() is not currently being executed, so its &amp;a is not available for capture.</p></section>	http://perldoc.perl.org/perldiag.html#Subroutine-%22%26%25s%22-is-not-available
line (definition)	A			Perl Glossary							<section class="prog__container"><p>In Unix, a sequence of zero or more nonnewline characters terminated with a <b>newline</b> character. On non-Unix machines, this is emulated by the C library even if the underlying <b>operating system</b> has different ideas.</p></section>	http://perldoc.perl.org/perlglossary.html#line
The %s function is unimplemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) The function indicated isn&#39;t implemented on this architecture, according to the probings of Configure.</p></section>	http://perldoc.perl.org/perldiag.html#The-%25s-function-is-unimplemented
TAP::Parser::YAMLish::Reader (module)	A			Perl Standard Modules		[[YAML::Tiny]]\n[[YAML]]\n[[YAML::Syck]]\n[[Config::Tiny]]\n[[CSS::Tiny]]\n[[http://use.perl.org/~Alias/journal/29427]]					<section class="prog__container"><p>TAP::Parser::YAMLish::Reader - Read YAMLish data from iterator</p> </section>	http://perldoc.perl.org/TAP/Parser/YAMLish/Reader.html
How do I remove HTML from a string?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Use <span href="http://search.cpan.org/perldoc/HTML::Strip">HTML::Strip</span>, or <span href="http://search.cpan.org/perldoc/HTML::FormatText">HTML::FormatText</span> which not only removes HTML but also attempts to do a little simple formatting of the resulting plain text.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-remove-HTML-from-a-string%3f
No output file after > on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl handles its own command line redirection, and found a lone &#39;&gt;&#39; at the end of the command line, so it doesn&#39;t know where you wanted to redirect stdout.</p></section>	http://perldoc.perl.org/perldiag.html#No-output-file-after-%3e-on-command-line
binary operator (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that takes two <b>operands</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#binary-operator
sprintf (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>sprintf FORMAT, LIST<br>format parameter index<br>flags<br>vector flag<br>(minimum) width<br>precision, or maximum width<br>size<br>order of arguments</pre><p>Returns a string formatted by the usual <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> conventions of the C library function <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code>.  See below for more details and see <i>sprintf(3)</i> or <i>printf(3)</i> on your system for an explanation of the general principles.</p><p>For example:</p><pre class="verbatim"><ol><li>        <span class="c"># Format number with up to 8 leading zeroes</span></li><li>        <span class="i">$result</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%08d&quot;</span><span class="cm">,</span> <span class="i">$number</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>        <span class="c"># Round number to 3 digits after decimal point</span></li><li>        <span class="i">$rounded</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="q">&quot;%.3f&quot;</span><span class="cm">,</span> <span class="i">$number</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Perl does its own <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> formatting: it emulates the C function sprintf(3), but doesn&#39;t use it except for floating-point numbers, and even then only standard modifiers are allowed.   Non-standard extensions in your local sprintf(3) are  therefore unavailable from Perl.</p><p>Unlike <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> does not do what you probably mean when you pass it an array as your first argument.  The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</p><p>Perl&#39;s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> permits the following universally-known conversions:</p><pre class="verbatim"><ol><li>   %%    a percent sign</li><li>   %c    a character with the given number</li><li>   %s    a string</li><li>   %d    a signed integer, in decimal</li><li>   %u    an unsigned integer, in decimal</li><li>   %o    an unsigned integer, in octal</li><li>   %x    an unsigned integer, in hexadecimal</li><li>   %e    a floating-point number, in scientific notation</li><li>   %f    a floating-point number, in fixed decimal notation</li><li>   %g    a floating-point number, in %e or %f notation</li></ol></pre><p>In addition, Perl permits the following widely-supported conversions:</p><pre class="verbatim"><ol><li>   <span class="i">%X</span>    <span class="w">like</span> <span class="i">%x</span><span class="cm">,</span> <span class="w">but</span> <span class="w">using</span> <span class="w">upper</span>-case <span class="w">letters</span></li><li>   <span class="i">%E</span>    <span class="w">like</span> <span class="i">%e</span><span class="cm">,</span> <span class="w">but</span> <span class="w">using</span> <span class="w">an</span> <span class="w">upper</span>-case <span class="q">&quot;E&quot;</span></li><li>   %<span class="w">G</span>    <span class="w">like</span> <span class="i">%g</span><span class="cm">,</span> <span class="w">but</span> <span class="w">with</span> <span class="w">an</span> <span class="w">upper</span>-case <span class="q">&quot;E&quot;</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">applicable</span><span class="s">)</span></li><li>   %<span class="w">b</span>    <span class="w">an</span> <span class="w">unsigned</span> <span class="w">integer</span><span class="cm">,</span> <span class="w">in</span> <span class="w">binary</span></li><li>   <span class="i">%B</span>    <span class="w">like</span> <span class="i">%b</span><span class="cm">,</span> <span class="w">but</span> <span class="w">using</span> <span class="w">an</span> <span class="w">upper</span>-case <span class="q">&quot;B&quot;</span> <span class="w">with</span> <span class="w">the</span> <span class="c"># flag</span></li><li>   <span class="i">%p</span>    <span class="w">a</span> <span class="w">pointer</span> <span class="s">(</span><span class="w">outputs</span> <span class="w">the</span> <span class="w">Perl</span> <span class="w">value&#39;s</span> <span class="w">address</span> <span class="w">in</span> <span class="w">hexadecimal</span><span class="s">)</span></li><li>   %<span class="w">n</span>    <span class="w">special</span><span class="co">:</span> <span class="i">*stores</span>* <span class="w">the</span> <span class="w">number</span> <span class="w">of</span> <span class="w">characters</span> <span class="w">output</span> <span class="w">so</span> <span class="w">far</span></li><li>         <span class="w">into</span> <span class="w">the</span> <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">argument</span> <span class="w">in</span> <span class="w">the</span> <span class="w">parameter</span> <span class="w">list</span></li><li>   <span class="i">%a</span>    <span class="w">hexadecimal</span> <span class="w">floating</span> <span class="w">point</span></li><li>   <span class="i">%A</span>    <span class="w">like</span> <span class="i">%a</span><span class="cm">,</span> <span class="w">but</span> <span class="w">using</span> <span class="w">upper</span>-case <span class="w">letters</span></li></ol></pre><p>Finally, for backward (and we do mean &quot;backward&quot;) compatibility, Perl permits these unnecessary but widely-supported conversions:</p><pre class="verbatim"><ol><li>   %i    a synonym for %d</li><li>   %D    a synonym for %ld</li><li>   %U    a synonym for %lu</li><li>   %O    a synonym for %lo</li><li>   %F    a synonym for %f</li></ol></pre><p>Note that the number of exponent digits in the scientific notation produced by <code class="inline"><span class="i">%e</span></code> , <code class="inline"><span class="i">%E</span></code> , <code class="inline"><span class="i">%g</span></code>  and <code class="inline"><span class="i">%G</span></code>  for numbers with the modulus of the exponent less than 100 is system-dependent: it may be three or less (zero-padded as necessary).  In other words, 1.23 times ten to the 99th may be either &quot;1.23e99&quot; or &quot;1.23e099&quot;.  Similarly for <code class="inline"><span class="i">%a</span></code>  and <code class="inline"><span class="i">%A</span></code> : the exponent or the hexadecimal digits may float: especially the &quot;long doubles&quot; Perl configuration option may cause surprises.</p><p>Between the <code class="inline"><span class="i">%</span></code>  and the format letter, you may specify several additional attributes controlling the interpretation of the format. In order, these are:</p><p>If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code>  (including <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span> <span class="q">&#39;not_characters&#39;</span></code> ) is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the <code class="inline"><span class="w">LC_NUMERIC</span></code>  locale.  See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span> and <span href="http://perldoc.perl.org/POSIX.html">POSIX</span>.</p></section>	http://perldoc.perl.org/functions/sprintf.html
wait (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>wait</pre><p>Behaves like wait(2) on your system: it waits for a child process to terminate and returns the pid of the deceased process, or <code class="inline"><span class="n">-1</span></code>  if there are no child processes.  The status is returned in <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> . Note that a return value of <code class="inline"><span class="n">-1</span></code>  could mean that child processes are being automatically reaped, as described in <span href="http://perldoc.perl.org/perlipc.html">perlipc</span>.</p><p>If you use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait</span></code> in your handler for $SIG{CHLD}, it may accidentally wait for the child created by qx() or system().  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#wait">wait in perlport</span>.</p></section>	http://perldoc.perl.org/functions/wait.html
stack (definition)	A			Perl Glossary							<section class="prog__container"><p>A device you can put things on the top of, and later take them back off in the opposite order in which you put them on. See <b>LIFO</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#stack
telldir() attempted on invalid dirhandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) The dirhandle you tried to telldir() is either closed or not really a dirhandle.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#telldir()-attempted-on-invalid-dirhandle-%25s
import (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Keywords related to perl modules							<section class="prog__container"><pre>import LIST</pre><p>There is no builtin <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> function.  It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> function calls the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method for the package used.  See also <span href="http://perldoc.perl.org/functions/use.html">use</span>, <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>, and <span href="http://perldoc.perl.org/Exporter.html">Exporter</span>.</p></section>	http://perldoc.perl.org/functions/import.html
chroot (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>chroot FILENAME<br>chroot</pre><p>This function works like the system call by the same name: it makes the named directory the new root directory for all further pathnames that begin with a <code class="inline">/</code> by your process and all its children.  (It doesn&#39;t change your current working directory, which is unaffected.)  For security reasons, this call is restricted to the superuser.  If FILENAME is omitted, does a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chroot.html">chroot</span></code> to <code class="inline"><span class="i">$_</span></code> .</p><p><b>NOTE:</b>  It is good security practice to do <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir(&quot;/&quot;)</span></code> (to the root directory) immediately after a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chroot.html">chroot()</span></code>.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#chroot">chroot in perlport</span>.</p></section>	http://perldoc.perl.org/functions/chroot.html
Can't open perl script "%s": %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The script you specified can&#39;t be opened for the indicated reason.</p><p>If you&#39;re debugging a script that uses #!, and normally relies on the shell&#39;s $PATH search, the -S option causes perl to do that search, so you don&#39;t have to type the path or <code class="inline"><span class="q">`which $scriptname`</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-perl-script-%22%25s%22%3a-%25s
Useless use of %s in void context	A			Perl Diagnostics							<section class="prog__container"><p>(W void) You did something without a side effect in a context that does nothing with the return value, such as a statement that doesn&#39;t return a value from a block, or the left side of a scalar comma operator.  Very often this points not to stupidity on your part, but a failure of Perl to parse your program the way you thought it would.  For example, you&#39;d get this if you mixed up your C precedence with Python precedence and said</p><pre class="verbatim"><ol><li>    <span class="i">$one</span><span class="cm">,</span> <span class="i">$two</span> = <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="sc">;</span></li></ol></pre><p>when you meant to say</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$one</span><span class="cm">,</span> <span class="i">$two</span><span class="s">)</span> = <span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Another common error is to use ordinary parentheses to construct a list reference when you should be using square or curly brackets, for example, if you say</p><pre class="verbatim"><ol><li>    <span class="i">$array</span> = <span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>when you should have said</p><pre class="verbatim"><ol><li>    <span class="i">$array</span> = <span class="s">[</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="s">]</span><span class="sc">;</span></li></ol></pre><p>The square brackets explicitly turn a list value into a scalar value, while parentheses do not.  So when a parenthesized list is evaluated in a scalar context, the comma is treated like C&#39;s comma operator, which throws away the left argument, which is not what you want.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span> for more on this.</p><p>This warning will not be issued for numerical constants equal to 0 or 1 since they are often used in statements like</p><pre class="verbatim"><ol><li>    <span class="n">1</span> while <span class="i">sub_with_side_effects</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>String constants that would normally evaluate to 0 or 1 are warned about.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-%25s-in-void-context
Hexadecimal float: exponent overflow	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) The hexadecimal floating point has a larger exponent than the floating point supports.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-exponent-overflow
case (definition)	A			Perl Glossary							<section class="prog__container"><p>A property of certain characters. Originally, typesetter stored capital letters in the upper of two cases and small letters in the lower one. Unicode recognizes three cases: <b>lowercase</b> (<b>character property</b> <code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">lower</span><span class="s">}</span></code> ), <b>titlecase</b> (<code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">title</span><span class="s">}</span></code> ), and <b>uppercase</b> (<code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">upper</span><span class="s">}</span></code> ). A fourth casemapping called <b>foldcase</b> is not itself a distinct case, but it is used internally to implement <b>casefolding</b>. Not all letters have case, and some nonletters have case.</p></section>	http://perldoc.perl.org/perlglossary.html#case
waitpid (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>waitpid PID,FLAGS</pre><p>Waits for a particular child process to terminate and returns the pid of the deceased process, or <code class="inline"><span class="n">-1</span></code>  if there is no such child process.  On some systems, a value of 0 indicates that there are processes still running. The status is returned in <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> .  If you say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">&quot;:sys_wait_h&quot;</span><span class="sc">;</span></li><li>    <span class="c">#...</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>        <span class="i">$kid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span><span class="n">-1</span><span class="cm">,</span> <span class="w">WNOHANG</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span> while <span class="i">$kid</span> &gt; <span class="n">0</span><span class="sc">;</span></li></ol></pre><p>then you can do a non-blocking wait for all pending zombie processes. Non-blocking wait is available on machines supporting either the waitpid(2) or wait4(2) syscalls.  However, waiting for a particular pid with FLAGS of <code class="inline"><span class="n">0</span></code>  is implemented everywhere.  (Perl emulates the system call by remembering the status values of processes that have exited but have not been harvested by the Perl script yet.)</p><p>Note that on some systems, a return value of <code class="inline"><span class="n">-1</span></code>  could mean that child processes are being automatically reaped.  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for details, and for other examples.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#waitpid">waitpid in perlport</span>.</p></section>	http://perldoc.perl.org/functions/waitpid.html
Do I always/never have to quote my strings or use semicolons and commas?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Normally, a bareword doesn&#39;t need to be quoted, but in most cases probably should be (and must be under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code> ). But a hash key consisting of a simple word and the left-hand operand to the <code class="inline"><span class="cm">=&gt;</span></code>  operator both count as though they were quoted:</p><pre class="verbatim"><ol><li>    This                    is like this</li><li>    ------------            ---------------</li><li>    $foo{line}              $foo{&#39;line&#39;}</li><li>    bar =&gt; stuff            &#39;bar&#39; =&gt; stuff</li></ol></pre><p>The final semicolon in a block is optional, as is the final comma in a list. Good style (see <span href="http://perldoc.perl.org/perlstyle.html">perlstyle</span>) says to put them in except for one-liners:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$whoops</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="n">1</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@nums</span> = <span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$whoops</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@lines</span> = <span class="s">(</span></li><li>        <span class="q">&quot;There Beren came from mountains cold&quot;</span><span class="cm">,</span></li><li>        <span class="q">&quot;And lost he wandered under leaves&quot;</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#Do-I-always%2fnever-have-to-quote-my-strings-or-use-semicolons-and-commas%3f
Illegal hexadecimal digit %s ignored	A			Perl Diagnostics							<section class="prog__container"><p>(W digit) You may have tried to use a character other than 0 - 9 or A - F, a - f in a hexadecimal number.  Interpretation of the hexadecimal number stopped before the illegal character.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-hexadecimal-digit-%25s-ignored
Exiting pseudo-block via %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exiting) You are exiting a rather special block construct (like a sort block or subroutine) by unconventional means, such as a goto, or a loop control statement.  See <span href="http://perldoc.perl.org/functions/sort.html">sort</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Exiting-pseudo-block-via-%25s
Recursive call to Perl_load_module in PerlIO_find_layer	A			Perl Diagnostics							<section class="prog__container"><p>(P) It is currently not permitted to load modules when creating a filehandle inside an %INC hook.  This can happen with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> \\<span class="i">$scalar</span></code> , which implicitly loads PerlIO::scalar.  Try loading PerlIO::scalar explicitly first.</p></section>	http://perldoc.perl.org/perldiag.html#Recursive-call-to-Perl_load_module-in-PerlIO_find_layer
ExtUtils::MM_Darwin (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_Darwin - special behaviors for OS X</p> <pre class="verbatim"><ol><li>    <span class="w">For</span> <span class="w">internal</span> <span class="w">MakeMaker</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">only</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_Darwin.html
scalar (function)	A			Perl Functions\nPerl Miscellaneous functions							<section class="prog__container"><pre>scalar EXPR</pre><p>Forces EXPR to be interpreted in scalar context and returns the value of EXPR.</p><pre class="verbatim"><ol><li>    <span class="i">@counts</span> = <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@a</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@b</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@c</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>There is no equivalent operator to force an expression to be interpolated in list context because in practice, this is never needed.  If you really wanted to do so, however, you could use the construction <code class="inline"><span class="i">@</span>{<span class="s">[</span> <span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span> <span class="s">]</span>}</code> , but usually a simple <code class="inline"><span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span></code>  suffices.</p><p>Because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span></code> is a unary operator, if you accidentally use a parenthesized list for the EXPR, this behaves as a scalar comma expression, evaluating all but the last element in void context and returning the final element evaluated in scalar context.  This is seldom what you want.</p><p>The following single statement:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="i">&amp;foo</span><span class="cm">,</span><span class="i">$bar</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span><span class="i">$baz</span><span class="sc">;</span></li></ol></pre><p>is the moral equivalent of these two:</p><pre class="verbatim"><ol><li>    <span class="i">&amp;foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="i">$bar</span><span class="s">)</span><span class="cm">,</span><span class="i">$baz</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more details on unary operators and the comma operator.</p></section>	http://perldoc.perl.org/functions/scalar.html
=head1,	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that the text in the remainder of the paragraph is a heading.  That text may contain formatting codes.  Examples:</p><pre class="verbatim"><ol><li>  =head1 Object Attributes</li><li></li><li>  =head3 What B&lt;Not&gt; to Do!</li></ol></pre></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dhead1%22%2c-%22%3dhead2%22%2c-%22%3dhead3%22%2c-%22%3dhead4%22
sysseek (function)	A			Perl Functions\nPerl Input and output functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>sysseek FILEHANDLE,POSITION,WHENCE</pre><p>Sets FILEHANDLE&#39;s system position in bytes using lseek(2).  FILEHANDLE may be an expression whose value gives the name of the filehandle.  The values for WHENCE are <code class="inline"><span class="n">0</span></code>  to set the new position to POSITION; <code class="inline"><span class="n">1</span></code>  to set the it to the current position plus POSITION; and <code class="inline"><span class="n">2</span></code>  to set it to EOF plus POSITION, typically negative.</p><p>Note the <i>in bytes</i>: even if the filehandle has been set to operate on characters (for example by using the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  I/O layer), tell() will return byte offsets, not character offsets (because implementing that would render sysseek() unacceptably slow).</p><p>sysseek() bypasses normal buffered IO, so mixing it with reads other than <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span></code> (for example <code class="inline">&lt;&gt;</code>  or read()) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> may cause confusion.</p><p>For WHENCE, you may also use the constants <code class="inline"><span class="w">SEEK_SET</span></code> , <code class="inline"><span class="w">SEEK_CUR</span></code> , and <code class="inline"><span class="w">SEEK_END</span></code>  (start of the file, current position, end of the file) from the Fcntl module.  Use of the constants is also more portable than relying on 0, 1, and 2.  For example to define a &quot;systell&quot; function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">&#39;SEEK_CUR&#39;</span><span class="sc">;</span></li><li><span name="systell"></span>    sub <span class="m">systell</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/sysseek.html">sysseek</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]<span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="w">SEEK_CUR</span><span class="s">)</span> <span class="s">}</span></li></ol></pre><p>Returns the new position, or the undefined value on failure.  A position of zero is returned as the string <code class="inline"><span class="q">&quot;0 but true&quot;</span></code> ; thus <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysseek.html">sysseek</span></code> returns true on success and false on failure, yet you can still easily determine the new position.</p></section>	http://perldoc.perl.org/functions/sysseek.html
Trailing \ in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The regular expression ends with an unbackslashed backslash. Backslash it.   See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Trailing-%5c-in-regex-m%2f%25s%2f
"\c%c" is more clearly written simply as "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The <code class="inline">\\c<i>X</i></code> construct is intended to be a way to specify non-printable characters.  You used it for a printable one, which is better written as simply itself, perhaps preceded by a backslash for non-word characters.  Doing it the way you did is not portable between ASCII and EBCDIC platforms.</p></section>	http://perldoc.perl.org/perldiag.html#%22%5cc%25c%22-is-more-clearly-written-simply-as-%22%25s%22
$# (variable)	A			Perl Variables\nPerl Deprecated and removed variables							<section class="prog__container"><p><code class="inline"><span class="i">$#</span></code>  was a variable that could be used to format printed numbers. After a deprecation cycle, its magic was removed in Perl v5.10.0 and using it now triggers a warning: <code class="inline">$# is no longer supported</code>.</p><p>This is not the sigil you use in front of an array name to get the last index, like <code class="inline"><span class="i">$#array</span></code> .  That&#39;s still how you get the last index of an array in Perl.  The two have nothing to do with each other.</p><p>Deprecated in Perl 5.</p><p>Removed in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%23
How do I process/modify each element of an array?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use <code class="inline">for</code> /<code class="inline">foreach</code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@lines</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">s/foo/bar/</span><span class="sc">;</span>    <span class="c"># change that word</span></li><li>        <span class="q">tr/XZ/ZX/</span><span class="sc">;</span>    <span class="c"># swap those letters</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s another; let&#39;s compute spherical volumes:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@volumes</span> = <span class="i">@radii</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@volumes</span><span class="s">)</span> <span class="s">{</span>   <span class="c"># @volumes has changed parts</span></li><li>        <span class="i">$_</span> **= <span class="n">3</span><span class="sc">;</span></li><li>        <span class="i">$_</span> *= <span class="s">(</span><span class="n">4</span>/<span class="n">3</span><span class="s">)</span> * <span class="n">3.14159</span><span class="sc">;</span>  <span class="c"># this will be constant folded</span></li><li>    <span class="s">}</span></li></ol></pre><p>which can also be done with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map()</span></code> which is made to transform one list into another:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@volumes</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span><span class="i">$_</span> ** <span class="n">3</span> * <span class="s">(</span><span class="n">4</span>/<span class="n">3</span><span class="s">)</span> * <span class="n">3.14159</span><span class="s">}</span> <span class="i">@radii</span><span class="sc">;</span></li></ol></pre><p>If you want to do the same thing to modify the values of the hash, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> function. As of Perl 5.6 the values are not copied, so if you modify $orbit (in this case), you modify the value.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$orbit</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%orbits</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="s">(</span><span class="i">$orbit</span> **= <span class="n">3</span><span class="s">)</span> *= <span class="s">(</span><span class="n">4</span>/<span class="n">3</span><span class="s">)</span> * <span class="n">3.14159</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Prior to perl 5.6 <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> returned copies of the values, so older perl code often contains constructions such as <code class="inline"><span class="i">@orbits</span>{<span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%orbits</span>}</code>  instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%orbits</span></code>  where the hash is to be modified.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-process%2fmodify-each-element-of-an-array%3f
compile phase (definition)	A			Perl Glossary		[[run phase]]					<section class="prog__container"><p>Any time before Perl starts running your main program.  Compile phase is mostly spent in <b>compile time</b>, but may also be spent in <b>runtime</b> when <code class="inline">BEGIN</code>  blocks, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span></code> declarations, or constant subexpressions are being evaluated. The startup and import code of any <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> declaration is also run during compile phase.</p></section>	http://perldoc.perl.org/perlglossary.html#compile-phase
loop label (definition)	A			Perl Glossary							<section class="prog__container"><p>A kind of key or name attached to a loop (or roller coaster) so that loop control statements can talk about which loop they want to control.</p></section>	http://perldoc.perl.org/perlglossary.html#loop-label
autovivification (definition)	A			Perl Glossary							<section class="prog__container"><p>A Graeco-Roman word meaning “to bring oneself to life”. In Perl, storage locations (<b>lvalues</b>) spontaneously generate themselves as needed, including the creation of any <b>hard reference</b> values to point to the next level of storage. The assignment <code class="inline"><span class="i">$a</span>[<span class="n">5</span>][<span class="n">5</span>][<span class="n">5</span>][<span class="n">5</span>][<span class="n">5</span>] = <span class="q">&quot;quintet&quot;</span></code>  potentially creates five scalar storage locations, plus four references (in the first four scalar locations) pointing to four new anonymous arrays (to hold the last four scalar locations). But the point of autovivification is that you don’t have to worry about it.</p></section>	http://perldoc.perl.org/perlglossary.html#autovivification
Time::localtime (module)	A			Perl Standard Modules							<section class="prog__container"><p>Time::localtime - by-name interface to Perl&#39;s built-in localtime() function</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::localtime</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;Year is %d\\n&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="i">-&gt;year</span><span class="s">(</span><span class="s">)</span> + <span class="n">1900</span><span class="sc">;</span></li><li></li><li> <span class="i">$now</span> = <span class="i">ctime</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::localtime</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::stat</span><span class="sc">;</span></li><li> <span class="i">$date_string</span> = <span class="i">ctime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="i">-&gt;mtime</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/localtime.html
Pod::Perldoc::BaseTo (module)	A			Perl Standard Modules		[[perldoc]]					<section class="prog__container"><p>Pod::Perldoc::BaseTo - Base for Pod::Perldoc formatters</p> <pre class="verbatim"><ol><li><span name="package-Pod::Perldoc::ToMyFormat"></span>    package <span class="i">Pod::Perldoc::ToMyFormat</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">parent</span> <span class="q">qw( Pod::Perldoc::BaseTo )</span><span class="sc">;</span></li><li>    ...</li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/BaseTo.html
Config::Extensions (module)	A			Perl Standard Modules							<section class="prog__container"><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Config::Extensions</span> <span class="q">&#39;%Extensions&#39;</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$Extensions</span>{<span class="w">PerlIO::via</span>}<span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># This perl has PerlIO::via built</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Config/Extensions.html
Unary "\" operator	A			Perl Operators\nPerl Symbolic Unary Operators							<section class="prog__container">Unary &quot;\\&quot; creates a reference to whatever follows it. See perlreftut and perlref. Do not confuse this behavior with the behavior of backslash within a string, although both forms do convey the notion of protecting the next thing from interpolation.</section>	http://perldoc.perl.org/perlop.html#Symbolic-Unary-Operators
select (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>select FILEHANDLE<br>select<br>select RBITS,WBITS,EBITS,TIMEOUT</pre><p>This calls the select(2) syscall with the bit masks specified, which can be constructed using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span></code>, along these lines:</p><pre class="verbatim"><ol><li>    <span class="i">$rin</span> = <span class="i">$win</span> = <span class="i">$ein</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$rin</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="cm">,</span>  <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$win</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="i">$ein</span> = <span class="i">$rin</span> | <span class="i">$win</span><span class="sc">;</span></li></ol></pre><p>If you want to select on many filehandles, you may wish to write a subroutine like this:</p><pre class="verbatim"><ol><li><span name="fhbits"></span>    sub <span class="m">fhbits</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@fhlist</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bits</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> <span class="s">(</span><span class="i">@fhlist</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$bits</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$bits</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="i">$rin</span> = <span class="i">fhbits</span><span class="s">(</span><span class="i">*STDIN</span><span class="cm">,</span> <span class="i">*TTY</span><span class="cm">,</span> <span class="i">*MYSOCK</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The usual idiom is:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$nfound</span><span class="cm">,</span><span class="i">$timeleft</span><span class="s">)</span> =</li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$rout</span>=<span class="i">$rin</span><span class="cm">,</span> <span class="i">$wout</span>=<span class="i">$win</span><span class="cm">,</span> <span class="i">$eout</span>=<span class="i">$ein</span><span class="cm">,</span> <span class="i">$timeout</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>or to block until something becomes ready just do this</p><pre class="verbatim"><ol><li>    <span class="i">$nfound</span> = <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$rout</span>=<span class="i">$rin</span><span class="cm">,</span> <span class="i">$wout</span>=<span class="i">$win</span><span class="cm">,</span> <span class="i">$eout</span>=<span class="i">$ein</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Most systems do not bother to return anything useful in $timeleft, so calling select() in scalar context just returns $nfound.</p><p>Any of the bit masks can also be undef.  The timeout, if specified, is in seconds, which may be fractional.  Note: not all implementations are capable of returning the $timeleft.  If not, they always return $timeleft equal to the supplied $timeout.</p><p>You can effect a sleep of 250 milliseconds this way:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="n">0.25</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that whether <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code> gets restarted after signals (say, SIGALRM) is implementation-dependent.  See also <span href="http://perldoc.perl.org/perlport.html">perlport</span> for notes on the portability of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code>.</p><p>On error, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code> behaves just like select(2): it returns -1 and sets <code class="inline"><span class="i">$!</span></code> .</p><p>On some Unixes, select(2) may report a socket file descriptor as &quot;ready for reading&quot; even when no data is available, and thus any subsequent <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span></code> would block.  This can be avoided if you always use O_NONBLOCK on the socket.  See select(2) and fcntl(2) for further details.</p><p>The standard <code class="inline"><span class="w">IO::Select</span></code>  module provides a user-friendlier interface to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code>, mostly because it does all the bit-mask work for you.</p><p><b>WARNING</b>: One should not attempt to mix buffered I/O (like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span></code> or &lt;FH&gt;) with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code>, except as permitted by POSIX, and even then only on POSIX systems.  You have to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span></code> instead.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#select">select in perlport</span>.</p></section>	http://perldoc.perl.org/functions/select.html
shutdown (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>shutdown SOCKET,HOW</pre><p>Shuts down a socket connection in the manner indicated by HOW, which has the same interpretation as in the syscall of the same name.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/shutdown.html">shutdown</span><span class="s">(</span><span class="w">SOCKET</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># I/we have stopped reading data</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/shutdown.html">shutdown</span><span class="s">(</span><span class="w">SOCKET</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># I/we have stopped writing data</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/shutdown.html">shutdown</span><span class="s">(</span><span class="w">SOCKET</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># I/we have stopped using this socket</span></li></ol></pre><p>This is useful with sockets when you want to tell the other side you&#39;re done writing but not done reading, or vice versa. It&#39;s also a more insistent form of close because it also disables the file descriptor in any forked copies in other processes.</p><p>Returns <code class="inline"><span class="n">1</span></code>  for success; on error, returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if the first argument is not a valid filehandle, or returns <code class="inline"><span class="n">0</span></code>  and sets <code class="inline"><span class="i">$!</span></code>  for any other failure.</p></section>	http://perldoc.perl.org/functions/shutdown.html
Can't make loaded symbols global on this platform while loading %s	A			Perl Diagnostics							<section class="prog__container"><p>(S) A module passed the flag 0x01 to DynaLoader::dl_load_file() to request that symbols from the stated file are made available globally within the process, but that functionality is not available on this platform.  Whilst the module likely will still work, this may prevent the perl interpreter from loading other XS-based extensions which need to link directly to functions defined in the C or XS code in the stated file.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-make-loaded-symbols-global-on-this-platform-while-loading-%25s
rmdir (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>rmdir FILENAME<br>rmdir</pre><p>Deletes the directory specified by FILENAME if that directory is empty.  If it succeeds it returns true; otherwise it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno).  If FILENAME is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>To remove a directory tree recursively (<code class="inline"><span class="w">rm</span> -<span class="w">rf</span></code>  on Unix) look at the <code class="inline"><span class="w">rmtree</span></code>  function of the <span href="http://perldoc.perl.org/File/Path.html">File::Path</span> module.</p></section>	http://perldoc.perl.org/functions/rmdir.html
algorithm (definition)	A			Perl Glossary							<section class="prog__container"><p>A well-defined sequence of steps, explained clearly enough that even a computer could do them.</p></section>	http://perldoc.perl.org/perlglossary.html#algorithm
read() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to read from a closed filehandle.</p></section>	http://perldoc.perl.org/perldiag.html#read()-on-closed-filehandle-%25s
sandbox (definition)	A			Perl Glossary							<section class="prog__container"><p>A walled off area that’s not supposed to affect beyond its walls. You let kids play in the sandbox instead of running in the road. See Camel chapter 20, “Security”.</p></section>	http://perldoc.perl.org/perlglossary.html#sandbox
%s had compilation errors.	A			Perl Diagnostics							<section class="prog__container"><p>(F) The final summary message when a <code class="inline"><span class="w">perl</span> -c</code>  fails.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-had-compilation-errors.
${^LAST_FH} (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>This read-only variable contains a reference to the last-read filehandle. This is set by <code class="inline"><span class="q">&lt;HANDLE&gt;</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>. This is the same handle that <code class="inline"><span class="i">$.</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> without arguments use.  It is also the handle used when Perl appends &quot;, &lt;STDIN&gt; line 1&quot; to an error or warning message.</p><p>This variable was added in Perl v5.18.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eLAST_FH%7d
switch cluster (definition)	A			Perl Glossary							<section class="prog__container"><p>The combination of multiple command- line switches (<i>e.g.</i>, <code class="inline"><span class="q">–a –b –c</span></code> ) into one switch (<i>e.g.</i>, <code class="inline"><span class="q">–abc</span></code> ). Any switch with an additional <b>argument</b> must be the last switch in a cluster.</p></section>	http://perldoc.perl.org/perlglossary.html#switch-cluster
panic: kid popen errno read	A			Perl Diagnostics							<section class="prog__container"><p>(F) A forked child returned an incomprehensible message about its errno.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-kid-popen-errno-read
Prototype '%s' overridden by attribute 'prototype(%s)' in %s	A			Perl Diagnostics							<section class="prog__container"><p>(W prototype) A prototype was declared in both the parentheses after the sub name and via the prototype attribute.  The prototype in parentheses is useless, since it will be replaced by the prototype from the attribute before it&#39;s ever used.</p></section>	http://perldoc.perl.org/perldiag.html#Prototype-'%25s'-overridden-by-attribute-'prototype(%25s)'-in-%25s
pp (definition)	A			Perl Glossary							<section class="prog__container"><p>An internal shorthand for a “push- pop” code; that is, C code implementing Perl’s stack machine.</p></section>	http://perldoc.perl.org/perlglossary.html#pp
Undefined sort subroutine "%s" called	A			Perl Diagnostics							<section class="prog__container"><p>(F) The sort comparison routine specified doesn&#39;t seem to exist. Perhaps it&#39;s in a different package?  See <span href="http://perldoc.perl.org/functions/sort.html">sort</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-sort-subroutine-%22%25s%22-called
What's wrong with using backticks in a void context?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Strictly speaking, nothing. Stylistically speaking, it&#39;s not a good way to write maintainable code. Perl has several operators for running external commands. Backticks are one; they collect the output from the command for use in your program. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> function is another; it doesn&#39;t do this.</p><p>Writing backticks in your program sends a clear message to the readers of your code that you wanted to collect the output of the command. Why send a clear message that isn&#39;t true?</p><p>Consider this line:</p><pre class="verbatim"><ol><li>    <span class="q">`cat /etc/termcap`</span><span class="sc">;</span></li></ol></pre><p>You forgot to check <code class="inline"><span class="i">$?</span></code>  to see whether the program even ran correctly. Even if you wrote</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">`cat /etc/termcap`</span><span class="sc">;</span></li></ol></pre><p>this code could and probably should be written as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;cat /etc/termcap&quot;</span><span class="s">)</span> == <span class="n">0</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;cat program failed!&quot;</span><span class="sc">;</span></li></ol></pre><p>which will echo the cat command&#39;s output as it is generated, instead of waiting until the program has completed to print it out. It also checks the return value.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> also provides direct control over whether shell wildcard processing may take place, whereas backticks do not.</p></section>	http://perldoc.perl.org/perlfaq8.html#What's-wrong-with-using-backticks-in-a-void-context%3f
XSUB (definition)	A			Perl Glossary							<section class="prog__container"><p>An external <b>subroutine</b> defined in <b>XS</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#XSUB
export (definition)	A			Perl Glossary							<section class="prog__container"><p>To make symbols from a <b>module</b> available for <b>import</b> by other modules.</p></section>	http://perldoc.perl.org/perlglossary.html#export
Pod::Usage (module)	A			Perl Standard Modules		[[Pod::Text]]\n[[Pod::Simple]]\n[[Pod::Perldoc]]\n[[Getopt::Long]]\n[[Pod::Find]]\n[[FindBin]]\n[[Pod::Text]]\n[[Pod::Text::Termcap]]\n[[Pod::Simple]]					<section class="prog__container"><p>Pod::Usage - print a usage message from embedded pod documentation</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Usage</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$message_text</span>  = <span class="q">&quot;This text precedes the usage message.&quot;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$exit_status</span>   = <span class="n">2</span><span class="sc">;</span>          <span class="c">## The exit status to use</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$verbose_level</span> = <span class="n">0</span><span class="sc">;</span>          <span class="c">## The verbose level to use</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$filehandle</span>    = \\<span class="i">*STDERR</span><span class="sc">;</span>   <span class="c">## The filehandle to write to</span></li><li></li><li>  <span class="i">pod2usage</span><span class="s">(</span><span class="i">$message_text</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pod2usage</span><span class="s">(</span><span class="i">$exit_status</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pod2usage</span><span class="s">(</span> <span class="s">{</span> -<span class="w">message</span> <span class="cm">=&gt;</span> <span class="i">$message_text</span> <span class="cm">,</span></li><li>               -<span class="w">exitval</span> <span class="cm">=&gt;</span> <span class="i">$exit_status</span>  <span class="cm">,</span>  </li><li>               -<span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="i">$verbose_level</span><span class="cm">,</span>  </li><li>               -<span class="w">output</span>  <span class="cm">=&gt;</span> <span class="i">$filehandle</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pod2usage</span><span class="s">(</span>   -<span class="w">msg</span>     <span class="cm">=&gt;</span> <span class="i">$message_text</span> <span class="cm">,</span></li><li>               -<span class="w">exitval</span> <span class="cm">=&gt;</span> <span class="i">$exit_status</span>  <span class="cm">,</span>  </li><li>               -<span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="i">$verbose_level</span><span class="cm">,</span>  </li><li>               -<span class="w">output</span>  <span class="cm">=&gt;</span> <span class="i">$filehandle</span>   <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pod2usage</span><span class="s">(</span>   -<span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="cm">,</span></li><li>               -<span class="w">noperldoc</span> <span class="cm">=&gt;</span> <span class="n">1</span>  <span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Usage.html
Encode (module)	A			Perl Standard Modules		[[Encode::Encoding]]\n[[Encode::Supported]]\n[[Encode::PerlIO]]\n[[encoding]]\n[[perlebcdic]]\n[[open]]\n[[perlunicode]]\n[[perluniintro]]\n[[perlunifaq]]\n[[perlunitut]]\n[[utf8]]\n[[http://lists.perl.org/list/perl-unicode.html]]					<section class="prog__container"><p>Encode - character encodings in Perl</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw(decode encode)</span><span class="sc">;</span></li><li>    <span class="i">$characters</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&#39;UTF-8&#39;</span><span class="cm">,</span> <span class="i">$octets</span><span class="cm">,</span>     <span class="w">Encode::FB_CROAK</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$octets</span>     = <span class="i">encode</span><span class="s">(</span><span class="q">&#39;UTF-8&#39;</span><span class="cm">,</span> <span class="i">$characters</span><span class="cm">,</span> <span class="w">Encode::FB_CROAK</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><span name="Table-of-Contents"></span><h2>Table of Contents</h2><p>Encode consists of a collection of modules whose details are too extensive to fit in one document.  This one itself explains the top-level APIs and general topics at a glance.  For other topics and more details, see the documentation for these modules:</p><ul> <li><span name="the-Encode%3a%3aAlias-manpage---Alias-definitions-to-encodings"></span><b><span href="http://perldoc.perl.org/Encode/Alias.html">Encode::Alias</span> - Alias definitions to encodings</b> </li> <li><span name="the-Encode%3a%3aEncoding-manpage---Encode-Implementation-Base-Class"></span><b><span href="http://perldoc.perl.org/Encode/Encoding.html">Encode::Encoding</span> - Encode Implementation Base Class</b> </li> <li><span name="the-Encode%3a%3aSupported-manpage---List-of-Supported-Encodings"></span><b><span href="http://perldoc.perl.org/Encode/Supported.html">Encode::Supported</span> - List of Supported Encodings</b> </li> <li><span name="the-Encode%3a%3aCN-manpage---Simplified-Chinese-Encodings"></span><b><span href="http://perldoc.perl.org/Encode/CN.html">Encode::CN</span> - Simplified Chinese Encodings</b> </li> <li><span name="the-Encode%3a%3aJP-manpage---Japanese-Encodings"></span><b><span href="http://perldoc.perl.org/Encode/JP.html">Encode::JP</span> - Japanese Encodings</b> </li> <li><span name="the-Encode%3a%3aKR-manpage---Korean-Encodings"></span><b><span href="http://perldoc.perl.org/Encode/KR.html">Encode::KR</span> - Korean Encodings</b> </li> <li><span name="the-Encode%3a%3aTW-manpage---Traditional-Chinese-Encodings"></span><b><span href="http://perldoc.perl.org/Encode/TW.html">Encode::TW</span> - Traditional Chinese Encodings</b> </li> </ul></section>	http://perldoc.perl.org/Encode.html
values on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#values-on-reference-is-experimental
Where can I get information on Perl?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>The complete Perl documentation is available with the Perl distribution. If you have Perl installed locally, you probably have the documentation installed as well: type <code class="inline"><span class="w">perldoc</span> <span class="w">perl</span></code>  in a terminal or <span href="http://search.cpan.org/perldoc/http:#%2fperldoc.perl.org%2fperl.html">view online</span>.</p><p>(Some operating system distributions may ship the documentation in a different package; for instance, on Debian, you need to install the <code class="inline"><span class="w">perl</span>-<span class="w">doc</span></code>  package.)</p><p>Many good books have been written about Perl--see the section later in <span href="http://perldoc.perl.org/perlfaq2.html">perlfaq2</span> for more details.</p></section>	http://perldoc.perl.org/perlfaq2.html#Where-can-I-get-information-on-Perl%3f
Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".	A			Perl Diagnostics							<section class="prog__container"><p>(W locale) You are 1) running under &quot;<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code> &quot;; 2) the current locale is not a UTF-8 one; 3) you tried to do the designated case-change operation on the specified Unicode character; and 4) the result of this operation would mix Unicode and locale rules, which likely conflict. Mixing of different rule types is forbidden, so the operation was not done; instead the result is the indicated value, which is the best available that uses entirely Unicode rules.  That turns out to almost always be the original character, unchanged.</p><p>It is generally a bad idea to mix non-UTF-8 locales and Unicode, and this issue is one of the reasons why.  This warning is raised when Unicode rules would normally cause the result of this operation to contain a character that is in the range specified by the locale, 0..255, and hence is subject to the locale&#39;s rules, not Unicode&#39;s.</p><p>If you are using locale purely for its characteristics related to things like its numeric and time formatting (and not <code class="inline"><span class="w">LC_CTYPE</span></code> ), consider using a restricted form of the locale pragma (see <span href="http://perldoc.perl.org/perllocale.html#The-%22use-locale%22-pragma">The use locale pragma in perllocale</span>) like &quot;<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span> <span class="q">&#39;:not_characters&#39;</span></code> &quot;.</p><p>Note that failed case-changing operations done as a result of case-insensitive <code class="inline">/i</code> regular expression matching will show up in this warning as having the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fc.html">fc</span></code> operation (as that is what the regular expression engine calls behind the scenes.)</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-%25s(%22%25s%22)-on-non-UTF-8-locale%3b-resolved-to-%22%25s%22.
Regexp out of space in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(P) A &quot;can&#39;t happen&quot; error, because safemalloc() should have caught it earlier.</p></section>	http://perldoc.perl.org/perldiag.html#Regexp-out-of-space-in-regex-m%2f%25s%2f
Where do I send bug reports?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>(contributed by brian d foy)</p><p>First, ensure that you&#39;ve found an actual bug. Second, ensure you&#39;ve found an actual bug.</p><p>If you&#39;ve found a bug with the perl interpreter or one of the modules in the standard library (those that come with Perl), you can use the <span href="http://perldoc.perl.org/perlbug.html">perlbug</span> utility that comes with Perl (&gt;= 5.004). It collects information about your installation to include with your message, then sends the message to the right place.</p><p>To determine if a module came with your version of Perl, you can install and use the <span href="http://perldoc.perl.org/Module/CoreList.html">Module::CoreList</span> module. It has the information about the modules (with their versions) included with each release of Perl.</p><p>Every CPAN module has a bug tracker set up in RT, <span href="http://rt.cpan.org">http://rt.cpan.org</span>. You can submit bugs to RT either through its web interface or by email. To email a bug report, send it to bug-&lt;distribution-name&gt;@rt.cpan.org . For example, if you wanted to report a bug in <span href="http://search.cpan.org/perldoc/Business::ISBN">Business::ISBN</span>, you could send a message to bug-Business-ISBN@rt.cpan.org .</p><p>Some modules might have special reporting requirements, such as a Github or Google Code tracking system, so you should check the module documentation too.</p></section>	http://perldoc.perl.org/perlfaq2.html#Where-do-I-send-bug-reports%3f
ExtUtils::Mkbootstrap (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader</p> <p><code class="inline"><span class="w">Mkbootstrap</span></code> </p></section>	http://perldoc.perl.org/ExtUtils/Mkbootstrap.html
Binary "^" operator	A			Perl Operators\nPerl Bitwise Or and Exclusive Or							<section class="prog__container">Binary &quot;^&quot; returns its operands XORed together bit by bit.</section>	http://perldoc.perl.org/perlop.html#Bitwise-Or-and-Exclusive-Or
%INC (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The hash <code class="inline"><span class="i">%INC</span></code>  contains entries for each filename included via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> operators.  The key is the filename you specified (with module names converted to pathnames), and the value is the location of the file found.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> operator uses this hash to determine whether a particular file has already been included.</p><p>If the file was loaded via a hook (e.g. a subroutine reference, see <span href="http://perldoc.perl.org/functions/require.html">require</span> for a description of these hooks), this hook is by default inserted into <code class="inline"><span class="i">%INC</span></code>  in place of a filename.  Note, however, that the hook may have set the <code class="inline"><span class="i">%INC</span></code>  entry by itself to provide some more specific info.</p></section>	http://perldoc.perl.org/perlvar.html#%25INC
Can I use Perl regular expressions to match balanced text?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Your first try should probably be the <span href="http://perldoc.perl.org/Text/Balanced.html">Text::Balanced</span> module, which is in the Perl standard library since Perl 5.8. It has a variety of functions to deal with tricky text. The <span href="http://search.cpan.org/perldoc/Regexp::Common">Regexp::Common</span> module can also help by providing canned patterns you can use.</p><p>As of Perl 5.10, you can match balanced text with regular expressions using recursive patterns. Before Perl 5.10, you had to resort to various tricks such as using Perl code in <code class="inline"><span class="s">(</span><span class="q">??</span><span class="s">{</span><span class="s">}</span><span class="s">)</span></code>  sequences.</p><p>Here&#39;s an example using a recursive regular expression. The goal is to capture all of the text within angle brackets, including the text in nested angle brackets. This sample text has two &quot;major&quot; groups: a group with one level of nesting and a group with two levels of nesting. There are five total groups in angle brackets:</p><pre class="verbatim"><ol><li>    <span class="w">I</span> <span class="w">have</span> <span class="w">some</span> &lt;<span class="w">brackets</span> <span class="w">in</span> <span class="q">&lt;nested brackets&gt;</span> &gt; <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span></li><li>    <span class="q">&lt;another group &lt;nested once &lt;nested twice&gt;</span> &gt; &gt;</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">that&#39;s</span> <span class="w">it</span>.</li></ol></pre><p>The regular expression to match the balanced text uses two new (to Perl 5.10) regular expression features. These are covered in <span href="http://perldoc.perl.org/perlre.html">perlre</span> and this example is a modified version of one in that documentation.</p><p>First, adding the new possessive <code class="inline">+</code>  to any quantifier finds the longest match and does not backtrack. That&#39;s important since you want to handle any angle brackets through the recursion, not backtracking. The group <code class="inline">[^&lt;&gt;]++</code> finds one or more non-angle brackets without backtracking.</p><p>Second, the new <code class="inline">(?PARNO)</code> refers to the sub-pattern in the particular capture group given by <code class="inline"><span class="w">PARNO</span></code> . In the following regex, the first capture group finds (and remembers) the balanced text, and you need that same pattern within the first buffer to get past the nested text. That&#39;s the recursive part. The <code class="inline">(?1)</code> uses the pattern in the outer capture group as an independent part of the regex.</p><p>Putting it all together, you have:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/local/bin/perl5.10.0</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> =<span class="h">&lt;&lt;&quot;HERE&quot;</span><span class="sc">;</span></li><li><span class="hh">    I have some &lt;brackets in &lt;nested brackets&gt; &gt; and</span></li><li><span class="hh">    &lt;another group &lt;nested once &lt;nested twice&gt; &gt; &gt;</span></li><li><span class="hh">    and that&#39;s it.</span></li><li><span class="hh">    HERE</span></li><li></li><li><span class="hh">    my @groups = $string =~ m/</span></li><li><span class="hh">            (                   # start of capture group 1</span></li><li><span class="hh">            &lt;                   # match an opening angle bracket</span></li><li><span class="hh">                (?:</span></li><li><span class="hh">                    [^&lt;&gt;]++     # one or more non angle brackets, non backtracking</span></li><li><span class="hh">                      |</span></li><li><span class="hh">                    (?1)        # found &lt; or &gt;, so recurse to capture group 1</span></li><li><span class="hh">                )*</span></li><li><span class="hh">            &gt;                   # match a closing angle bracket</span></li><li><span class="hh">            )                   # end of capture group 1</span></li><li><span class="hh">            /xg;</span></li><li></li><li><span class="hh">    $&quot; = &quot;\\n\\t&quot;;</span></li><li><span class="hh">    print &quot;Found:\\n\\t@groups\\n&quot;;</span></li></ol></pre><p>The output shows that Perl found the two major groups:</p><pre class="verbatim"><ol><li>    <span class="j">Found:</span></li><li>        <span class="q">&lt;brackets in &lt;nested brackets&gt;</span> &gt;</li><li>        <span class="q">&lt;another group &lt;nested once &lt;nested twice&gt;</span> &gt; &gt;</li></ol></pre><p>With a little extra work, you can get all of the groups in angle brackets even if they are in other angle brackets too. Each time you get a balanced match, remove its outer delimiter (that&#39;s the one you just matched so don&#39;t match it again) and add it to a queue of strings to process. Keep doing that until you get no matches:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/local/bin/perl5.10.0</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@queue</span> =<span class="h">&lt;&lt;&quot;HERE&quot;</span><span class="sc">;</span></li><li><span class="hh">    I have some &lt;brackets in &lt;nested brackets&gt; &gt; and</span></li><li><span class="hh">    &lt;another group &lt;nested once &lt;nested twice&gt; &gt; &gt;</span></li><li><span class="hh">    and that&#39;s it.</span></li><li><span class="hh">    HERE</span></li><li></li><li><span class="hh">    my $regex = qr/</span></li><li><span class="hh">            (                   # start of bracket 1</span></li><li><span class="hh">            &lt;                   # match an opening angle bracket</span></li><li><span class="hh">                (?:</span></li><li><span class="hh">                    [^&lt;&gt;]++     # one or more non angle brackets, non backtracking</span></li><li><span class="hh">                      |</span></li><li><span class="hh">                    (?1)        # recurse to bracket 1</span></li><li><span class="hh">                )*</span></li><li><span class="hh">            &gt;                   # match a closing angle bracket</span></li><li><span class="hh">            )                   # end of bracket 1</span></li><li><span class="hh">            /x;</span></li><li></li><li><span class="hh">    $&quot; = &quot;\\n\\t&quot;;</span></li><li></li><li><span class="hh">    while( @queue ) {</span></li><li><span class="hh">        my $string = shift @queue;</span></li><li></li><li><span class="hh">        my @groups = $string =~ m/$regex/g;</span></li><li><span class="hh">        print &quot;Found:\\n\\t@groups\\n\\n&quot; if @groups;</span></li><li></li><li><span class="hh">        unshift @queue, map { s/^&lt;//; s/&gt;$//; $_ } @groups;</span></li><li><span class="hh">    }</span></li></ol></pre><p>The output shows all of the groups. The outermost matches show up first and the nested matches show up later:</p><pre class="verbatim"><ol><li>    <span class="j">Found:</span></li><li>        <span class="q">&lt;brackets in &lt;nested brackets&gt;</span> &gt;</li><li>        <span class="q">&lt;another group &lt;nested once &lt;nested twice&gt;</span> &gt; &gt;</li><li></li><li>    <span class="w">Found</span><span class="co">:</span></li><li>        <span class="q">&lt;nested brackets&gt;</span></li><li></li><li>    <span class="w">Found</span><span class="co">:</span></li><li>        <span class="q">&lt;nested once &lt;nested twice&gt;</span> &gt;</li><li></li><li>    <span class="w">Found</span><span class="co">:</span></li><li>        <span class="q">&lt;nested twice&gt;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#Can-I-use-Perl-regular-expressions-to-match-balanced-text%3f
@- (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p><code class="inline"><span class="i">$-</span>[<span class="n">0</span>]</code>  is the offset of the start of the last successful match. <code class="inline">$-[</code><i>n</i><code class="inline">]</code> is the offset of the start of the substring matched by <i>n</i>-th subpattern, or undef if the subpattern did not match.</p><p>Thus, after a match against <code class="inline"><span class="i">$_</span></code> , <code class="inline"><span class="i">$&amp;</span></code>  coincides with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$_</span><span class="cm">,</span> <span class="i">$-</span>[<span class="n">0</span>]<span class="cm">,</span> <span class="i">$+</span>[<span class="n">0</span>] - <span class="i">$-</span>[<span class="n">0</span>]</code> .  Similarly, $<i>n</i> coincides with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$_</span><span class="cm">,</span> <span class="i">$-</span>[<span class="w">n</span>]<span class="cm">,</span> <span class="i">$+</span>[<span class="w">n</span>] - <span class="i">$-</span>[<span class="w">n</span>]</code>  if <code class="inline"><span class="i">$-</span>[<span class="w">n</span>]</code>  is defined, and $+ coincides with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$_</span><span class="cm">,</span> <span class="i">$-</span>[<span class="i">$#-</span>]<span class="cm">,</span> <span class="i">$+</span>[<span class="i">$#-</span>] - <span class="i">$-</span>[<span class="i">$#-</span>]</code> .  One can use <code class="inline"><span class="i">$#-</span></code>  to find the last matched subgroup in the last successful match.  Contrast with <code class="inline"><span class="i">$#+</span></code> , the number of subgroups in the regular expression.  Compare with <code class="inline"><span class="i">@+</span></code> .</p><p>This array holds the offsets of the beginnings of the last successful submatches in the currently active dynamic scope. <code class="inline"><span class="i">$-</span>[<span class="n">0</span>]</code>  is the offset into the string of the beginning of the entire match.  The <i>n</i>th element of this array holds the offset of the <i>n</i>th submatch, so <code class="inline"><span class="i">$-</span>[<span class="n">1</span>]</code>  is the offset where <code class="inline"><span class="i">$1</span></code>  begins, <code class="inline"><span class="i">$-</span>[<span class="n">2</span>]</code>  the offset where <code class="inline"><span class="i">$2</span></code>  begins, and so on.</p><p>After a match against some variable <code class="inline"><span class="i">$var</span></code> :</p><p>This variable was added in Perl v5.6.0.</p></section>	http://perldoc.perl.org/perlvar.html#%40-
How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Usually a hash ref, perhaps like this:</p><pre class="verbatim"><ol><li>    <span class="i">$record</span> = <span class="s">{</span></li><li>        <span class="w">NAME</span>   <span class="cm">=&gt;</span> <span class="q">&quot;Jason&quot;</span><span class="cm">,</span></li><li>        <span class="w">EMPNO</span>  <span class="cm">=&gt;</span> <span class="n">132</span><span class="cm">,</span></li><li>        <span class="w">TITLE</span>  <span class="cm">=&gt;</span> <span class="q">&quot;deputy peon&quot;</span><span class="cm">,</span></li><li>        <span class="w">AGE</span>    <span class="cm">=&gt;</span> <span class="n">23</span><span class="cm">,</span></li><li>        <span class="w">SALARY</span> <span class="cm">=&gt;</span> <span class="n">37_000</span><span class="cm">,</span></li><li>        <span class="w">PALS</span>   <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">&quot;Norbert&quot;</span><span class="cm">,</span> <span class="q">&quot;Rhys&quot;</span><span class="cm">,</span> <span class="q">&quot;Phineas&quot;</span><span class="s">]</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>References are documented in <span href="http://perldoc.perl.org/perlref.html">perlref</span> and <span href="http://perldoc.perl.org/perlreftut.html">perlreftut</span>. Examples of complex data structures are given in <span href="http://perldoc.perl.org/perldsc.html">perldsc</span> and <span href="http://perldoc.perl.org/perllol.html">perllol</span>. Examples of structures and object-oriented classes are in <span href="http://perldoc.perl.org/perlootut.html">perlootut</span>.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-make-the-Perl-equivalent-of-a-C-structure%2fC%2b%2b-class%2fhash-or-array-of-hashes-or-arrays%3f
Missing command in piped open	A			Perl Diagnostics							<section class="prog__container"><p>(W pipe) You used the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="q">&quot;| command&quot;</span><span class="s">)</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="q">&quot;command |&quot;</span><span class="s">)</span></code>  construction, but the command was missing or blank.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-command-in-piped-open
Parse::CPAN::Meta (module)	A			Perl Standard Modules							<section class="prog__container"><p>Parse::CPAN::Meta - Parse META.yml and META.json CPAN metadata files</p> <pre class="verbatim"><ol><li>    <span class="c">#############################################</span></li><li>    <span class="c"># In your file</span></li><li>    </li><li>    ---</li><li>    <span class="w">name</span><span class="co">:</span> <span class="w">My</span>-<span class="w">Distribution</span></li><li>    <span class="w">version</span><span class="co">:</span> <span class="n">1.23</span></li><li>    <span class="w">resources</span><span class="co">:</span></li><li>      <span class="w">homepage</span><span class="co">:</span> <span class="q">&quot;<span href="http://example.com/dist/My-Distribution">http://example.com/dist/My-Distribution</span>&quot;</span></li><li>    </li><li>    </li><li>    <span class="c">#############################################</span></li><li>    <span class="c"># In your program</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Parse::CPAN::Meta</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$distmeta</span> = <span class="w">Parse::CPAN::Meta</span><span class="w">-&gt;load_file</span><span class="s">(</span><span class="q">&#39;META.yml&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="c"># Reading properties</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$name</span>     = <span class="i">$distmeta</span>-&gt;{<span class="w">name</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$version</span>  = <span class="i">$distmeta</span>-&gt;{<span class="w">version</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$homepage</span> = <span class="i">$distmeta</span>-&gt;{<span class="w">resources</span>}{<span class="w">homepage</span>}<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Parse/CPAN/Meta.html
ARGV (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The special filehandle that iterates over command-line filenames in <code class="inline"><span class="i">@ARGV</span></code> .  Usually written as the null filehandle in the angle operator <code class="inline">&lt;&gt;</code> .  Note that currently <code class="inline"><span class="w">ARGV</span></code>  only has its magical effect within the <code class="inline">&lt;&gt;</code>  operator; elsewhere it is just a plain filehandle corresponding to the last file opened by <code class="inline">&lt;&gt;</code> .  In particular, passing <code class="inline">\\<span class="i">*ARGV</span></code>  as a parameter to a function that expects a filehandle may not cause your function to automatically read the contents of all the files in <code class="inline"><span class="i">@ARGV</span></code> .</p></section>	http://perldoc.perl.org/perlvar.html#ARGV
What if I don't decode?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Whenever your encoded, binary string is used together with a text string, Perl will assume that your binary string was encoded with ISO-8859-1, also known as latin-1. If it wasn&#39;t latin-1, then your data is unpleasantly converted. For example, if it was UTF-8, the individual bytes of multibyte characters are seen as separate characters, and then again converted to UTF-8. Such double encoding can be compared to double HTML encoding (<code class="inline"><span class="i">&amp;amp</span><span class="sc">;</span>gt<span class="sc">;</span></code> ), or double URI encoding (<code class="inline"><span class="i">%253E</span></code> ).</p><p>This silent implicit decoding is known as &quot;upgrading&quot;. That may sound positive, but it&#39;s best to avoid it.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-if-I-don't-decode%3f
Search::Dict (module)	A			Perl Standard Modules							<section class="prog__container"><p>Search::Dict - look - search for key in dictionary file</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Search::Dict</span><span class="sc">;</span></li><li>    <span class="w">look</span> *<span class="w">FILEHANDLE</span><span class="cm">,</span> <span class="i">$key</span><span class="cm">,</span> <span class="i">$dict</span><span class="cm">,</span> <span class="i">$fold</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Search::Dict</span><span class="sc">;</span></li><li>    <span class="w">look</span> *<span class="w">FILEHANDLE</span><span class="cm">,</span> <span class="i">$params</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Search/Dict.html
accept() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to do an accept on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/accept.html">accept</span>.</p></section>	http://perldoc.perl.org/perldiag.html#accept()-on-closed-socket-%25s
S<text>	A			Perl POD Formatting Codes							<section class="prog__container"><p>This means that the words in <i>text</i> should not be broken across lines.  Example: <code class="inline"><span class="w">S</span><span class="q">&lt;$x ? $y : $z&gt;</span></code> .</p></section>	http://perldoc.perl.org/perlpod.html#S%3ctext%3e----text-contains-non-breaking-spaces
panic: pad_free po	A			Perl Diagnostics							<section class="prog__container"><p>(P) A zero scratch pad offset was detected internally.  An attempt was made to free a target that had not been allocated to begin with.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_free-po
POSIX syntax [. .] is reserved for future extensions in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Within regular expression character classes ([]) the syntax beginning with &quot;[.&quot; and ending with &quot;.]&quot; is reserved for future extensions.  If you need to represent those character sequences inside a regular expression character class, just quote the square brackets with the backslash: &quot;\\[.&quot; and &quot;.\\]&quot;.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#POSIX-syntax-%5b.-.%5d-is-reserved-for-future-extensions-in-regex%3b-marked-by--%3c---HERE-in-m%2f%25s%2f
%s defines neither package nor VERSION--version check failed	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said something like &quot;use Module 42&quot; but in the Module file there are neither package declarations nor a <code class="inline"><span class="i">$VERSION</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#%25s-defines-neither-package-nor-VERSION--version-check-failed
Unknown Unicode option value %d	A			Perl Diagnostics							<section class="prog__container"><p>(F) You specified an unknown Unicode option.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> documentation of the <code class="inline">-C</code>  switch for the list of known options.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-Unicode-option-value-%25d
__DATA__ (function)	A			Perl Functions							<section class="prog__container"><pre>__DATA__</pre><p>These keywords are documented in <span href="http://perldoc.perl.org/perldata.html#Special-Literals">Special Literals in perldata</span>.</p></section>	http://perldoc.perl.org/functions/__DATA__.html
Attribute prototype(%s) discards earlier prototype attribute in same sub	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) A sub was declared as sub foo : prototype(A) : prototype(B) {}, for example.  Since each sub can only have one prototype, the earlier declaration(s) are discarded while the last one is applied.</p></section>	http://perldoc.perl.org/perldiag.html#Attribute-prototype(%25s)-discards-earlier-prototype-attribute-in-same-sub
TAP::Formatter::Console::Session (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Console::Session - Harness output delegate for default console output</p> </section>	http://perldoc.perl.org/TAP/Formatter/Console/Session.html
RV (definition)	A			Perl Glossary							<section class="prog__container"><p>A recreational vehicle, not to be confused with vehicular recreation. RV also means an internal Reference Value of the type a <b>scalar</b> can hold. See also <b>IV</b> and <b>NV</b> if you’re not confused yet.</p></section>	http://perldoc.perl.org/perlglossary.html#RV
accept (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>accept NEWSOCKET,GENERICSOCKET</pre><p>Accepts an incoming socket connect, just as accept(2)  does.  Returns the packed address if it succeeded, false otherwise. See the example in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p><p>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor, as determined by the value of $^F.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p></section>	http://perldoc.perl.org/functions/accept.html
transliterate (definition)	A			Perl Glossary							<section class="prog__container"><p>To turn one string representation into another by mapping each character of the source string to its corresponding character in the result string. Not to be confused with translation: for example, Greek <i>πολύχρωμος</i> transliterates into <i>polychromos</i> but translates into <i>many-colored</i>. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code> operator in Camel chapter 5, “Pattern Matching”.</p></section>	http://perldoc.perl.org/perlglossary.html#transliterate
Bad symbol for filehandle	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal request asked to add a filehandle entry to something that wasn&#39;t a symbol table entry.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-symbol-for-filehandle
filesystem (definition)	A			Perl Glossary							<section class="prog__container"><p>A set of <b>directories</b> and <b>files</b> residing on a partition of the disk. Sometimes known as a “partition”. You can change the file’s name or even move a file around from directory to directory within a filesystem without actually moving the file itself, at least under Unix.</p></section>	http://perldoc.perl.org/perlglossary.html#filesystem
backtracking (definition)	A			Perl Glossary							<section class="prog__container"><p>The practice of saying, “If I had to do it all over, I’d do it differently,” and then actually going back and doing it all over differently. Mathematically speaking, it’s returning from an unsuccessful recursion on a tree of possibilities. Perl backtracks when it attempts to match patterns with a <b>regular expression</b>, and its earlier attempts don’t pan out. See the section “The Little Engine That /Couldn(n’t)” in Camel chapter 5, “Pattern Matching”.</p></section>	http://perldoc.perl.org/perlglossary.html#backtracking
How do I redirect to another page?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Most Perl Web Frameworks will have a mechanism for doing this, using the <span href="http://search.cpan.org/perldoc/Catalyst">Catalyst</span> framework it would be:</p><pre class="verbatim"><ol><li>    <span class="i">$c</span><span class="i">-&gt;res</span><span class="i">-&gt;redirect</span><span class="s">(</span><span class="i">$url</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$c</span><span class="i">-&gt;detach</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you are using Plack (which most frameworks do), then <span href="http://search.cpan.org/perldoc/Plack::Middleware::Rewrite">Plack::Middleware::Rewrite</span> is worth looking at if you are migrating from Apache or have URL&#39;s you want to always redirect.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-redirect-to-another-page%3f
Bareword "%s" not allowed while "strict subs" in use	A			Perl Diagnostics							<section class="prog__container"><p>(F) With &quot;strict subs&quot; in use, a bareword is only allowed as a subroutine identifier, in curly brackets or to the left of the &quot;=&gt;&quot; symbol.  Perhaps you need to predeclare a subroutine?</p></section>	http://perldoc.perl.org/perldiag.html#Bareword-%22%25s%22-not-allowed-while-%22strict-subs%22-in-use
co-maintainer (definition)	A			Perl Glossary							<section class="prog__container"><p>A person with permissions to index a <b>namespace</b> in <b>PAUSE</b>. Anyone can upload any namespace, but only primary and co-maintainers get their contributions indexed.</p></section>	http://perldoc.perl.org/perlglossary.html#co-maintainer
How can I use a reference as a hash key?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy and Ben Morrow)</p><p>Hash keys are strings, so you can&#39;t really use a reference as the key. When you try to do that, perl turns the reference into its stringified form (for instance, <code class="inline"><span class="i">HASH</span><span class="s">(</span><span class="n">0xDEADBEEF</span><span class="s">)</span></code> ). From there you can&#39;t get back the reference from the stringified form, at least without doing some extra work on your own.</p><p>Remember that the entry in the hash will still be there even if the referenced variable  goes out of scope, and that it is entirely possible for Perl to subsequently allocate a different variable at the same address. This will mean a new variable might accidentally be associated with the value for an old.</p><p>If you have Perl 5.10 or later, and you just want to store a value against the reference for lookup later, you can use the core Hash::Util::Fieldhash module. This will also handle renaming the keys if you use multiple threads (which causes all variables to be reallocated at new addresses, changing their stringification), and garbage-collecting the entries when the referenced variable goes out of scope.</p><p>If you actually need to be able to get a real reference back from each hash entry, you can use the Tie::RefHash module, which does the required work for you.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-use-a-reference-as-a-hash-key%3f
'|' and '<' may not both be specified on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl does its own command line redirection, and found that STDIN was a pipe, and that you also tried to redirect STDIN using &#39;&lt;&#39;.  Only one STDIN stream to a customer, please.</p></section>	http://perldoc.perl.org/perldiag.html#'%7c'-and-'%3c'-may-not-both-be-specified-on-command-line
FileCache (module)	A			Perl Standard Modules							<section class="prog__container"><p>FileCache - keep more files open than the system permits</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">strict</span> <span class="q">&#39;refs&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FileCache</span><span class="sc">;</span></li><li>    <span class="c"># or</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FileCache</span> <span class="w">maxopen</span> <span class="cm">=&gt;</span> <span class="n">16</span><span class="sc">;</span></li><li></li><li>    <span class="w">cacheout</span> <span class="i">$mode</span><span class="cm">,</span> <span class="i">$path</span><span class="sc">;</span></li><li>    <span class="c"># or</span></li><li>    <span class="w">cacheout</span> <span class="i">$path</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$path</span> <span class="i">@data</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">cacheout</span> <span class="i">$mode</span><span class="cm">,</span> <span class="i">$path</span><span class="sc">;</span></li><li>    <span class="c"># or</span></li><li>    <span class="i">$fh</span> = <span class="w">cacheout</span> <span class="i">$path</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="i">@data</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/FileCache.html
How do I set a file's timestamp in perl?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>You use the utime() function documented in <span href="http://perldoc.perl.org/functions/utime.html">utime</span>. By way of example, here&#39;s a little program that copies the read and write times from its first argument to all the rest of them.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">@ARGV</span> &lt; <span class="n">2</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;usage: cptimes timestamp_file other_files ...\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$timestamp</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$atime</span><span class="cm">,</span> <span class="i">$mtime</span><span class="s">)</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$timestamp</span><span class="s">)</span><span class="s">)</span>[<span class="n">8</span><span class="cm">,</span><span class="n">9</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/utime.html">utime</span> <span class="i">$atime</span><span class="cm">,</span> <span class="i">$mtime</span><span class="cm">,</span> <span class="i">@ARGV</span><span class="sc">;</span></li></ol></pre><p>Error checking is, as usual, left as an exercise for the reader.</p><p>The perldoc for utime also has an example that has the same effect as touch(1) on files that <i>already exist</i>.</p><p>Certain file systems have a limited ability to store the times on a file at the expected level of precision. For example, the FAT and HPFS filesystem are unable to create dates on files with a finer granularity than two seconds. This is a limitation of the filesystems, not of utime().</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-set-a-file's-timestamp-in-perl%3f
qq (function)	A			Perl Functions							<section class="prog__container"><pre>qq/STRING/</pre>Doubly quote a string.</section>	http://perldoc.perl.org/functions/qq.html
How can I write expect in Perl?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Once upon a time, there was a library called <i>chat2.pl</i> (part of the standard perl distribution), which never really got finished. If you find it somewhere, <i>don&#39;t use it</i>. These days, your best bet is to look at the <span href="http://search.cpan.org/perldoc/Expect">Expect</span> module available from CPAN, which also requires two other modules from CPAN, <span href="http://search.cpan.org/perldoc/IO::Pty">IO::Pty</span> and <span href="http://search.cpan.org/perldoc/IO::Stty">IO::Stty</span>.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-write-expect-in-Perl%3f
()-group starts with a count	A			Perl Diagnostics							<section class="prog__container"><p>(F) A ()-group started with a count.  A count is supposed to follow something: a template character or a ()-group.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#()-group-starts-with-a-count
TAP::Formatter::Base (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Base - Base class for harness output delegates</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Formatter::Console</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$harness</span> = <span class="w">TAP::Formatter::Console</span><span class="w">-&gt;new</span><span class="s">(</span> \\<span class="i">%args</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Formatter/Base.html
here document (definition)	A			Perl Glossary							<section class="prog__container"><p>So called because of a similar construct in <b>shells</b> that pretends that the <b>lines</b> following the <b>command</b> are a separate <b>file</b> to be fed to the command, up to some terminating string. In Perl, however, it’s just a fancy form of quoting.</p></section>	http://perldoc.perl.org/perlglossary.html#here-document
awk (definition)	A			Perl Glossary							<section class="prog__container"><p>Descriptive editing term—short for “awkward”. Also coincidentally refers to a venerable text-processing language from which Perl derived some of its high-level ideas.</p></section>	http://perldoc.perl.org/perlglossary.html#awk
Why do setuid perl scripts complain about kernel problems?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Some operating systems have bugs in the kernel that make setuid scripts inherently insecure. Perl gives you a number of options (described in <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>) to work around such systems.</p></section>	http://perldoc.perl.org/perlfaq8.html#Why-do-setuid-perl-scripts-complain-about-kernel-problems%3f
X<topic name>	A			Perl POD Formatting Codes							<section class="prog__container"><p>This is ignored by most formatters, but some may use it for building indexes.  It always renders as empty-string. Example: <code class="inline"><span class="w">X</span><span class="q">&lt;absolutizing relative URLs&gt;</span></code> </p></section>	http://perldoc.perl.org/perlpod.html#X%3ctopic-name%3e----an-index-entry
'%s' resolved to '\o{%s}%d'	A			Perl Diagnostics							<section class="prog__container"><p>(W misc, regexp)  You wrote something like <code class="inline">\\<span class="n">08</span></code> , or <code class="inline">\\<span class="n">179</span></code>  in a double-quotish string.  All but the last digit is treated as a single character, specified in octal.  The last digit is the next character in the string.  To tell Perl that this is indeed what you want, you can use the <code class="inline">\\<span class="w">o</span><span class="s">{</span> <span class="s">}</span></code>  syntax, or use exactly three digits to specify the octal for the character.</p></section>	http://perldoc.perl.org/perldiag.html#'%25s'-resolved-to-'%5co%7b%25s%7d%25d'
How can I catch accesses to undefined variables, functions, or methods?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>The AUTOLOAD method, discussed in <span href="http://perldoc.perl.org/perlsub.html#Autoloading">Autoloading in perlsub</span> lets you capture calls to undefined functions and methods.</p><p>When it comes to undefined variables that would trigger a warning under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code> , you can promote the warning to an error.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span> <span class="w">FATAL</span> <span class="cm">=&gt;</span> <span class="q">qw(uninitialized)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-catch-accesses-to-undefined-variables%2c-functions%2c-or-methods%3f
-u	A			Perl Command-Line Switches							<section class="prog__container"><p>This switch causes Perl to dump core after compiling your program.  You can then in theory take this core dump and turn it into an executable file by using the <i>undump</i> program (not supplied). This speeds startup at the expense of some disk space (which you can minimize by stripping the executable).  (Still, a &quot;hello world&quot; executable comes out to about 200K on my machine.)  If you want to execute a portion of your program before dumping, use the dump() operator instead.  Note: availability of <i>undump</i> is platform specific and may not be available for a specific port of Perl.</p></section>	http://perldoc.perl.org/perlrun.html#*-u*
ExtUtils::MM_AIX (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_AIX - AIX specific subclass of ExtUtils::MM_Unix</p> <pre class="verbatim"><ol><li>  <span class="w">Don&#39;t</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li><li>  <span class="w">Use</span> <span class="w">ExtUtils::MM</span> and <span class="w">let</span> <span class="w">it</span> <span class="w">choose</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_AIX.html
Useless use of (?-p) in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) The <code class="inline"><span class="w">p</span></code>  modifier cannot be turned off once set.  Trying to do so is futile.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-(%3f-p)-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
chomp (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>chomp VARIABLE<br>chomp( LIST )<br>chomp</pre><p>This safer version of <span href="http://perldoc.perl.org/functions/chop.html">chop</span> removes any trailing string that corresponds to the current value of <code class="inline"><span class="i">$/</span></code>  (also known as $INPUT_RECORD_SEPARATOR in the <code class="inline"><span class="w">English</span></code>  module).  It returns the total number of characters removed from all its arguments.  It&#39;s often used to remove the newline from the end of an input record when you&#39;re worried that the final record may be missing its newline.  When in paragraph mode (<code class="inline"><span class="i">$/</span> = <span class="q">&#39;&#39;</span></code> ), it removes all trailing newlines from the string. When in slurp mode (<code class="inline"><span class="i">$/</span> = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> ) or fixed-length record mode (<code class="inline"><span class="i">$/</span></code>  is a reference to an integer or the like; see <span href="http://perldoc.perl.org/perlvar.html">perlvar</span>) chomp() won&#39;t remove anything. If VARIABLE is omitted, it chomps <code class="inline"><span class="i">$_</span></code> .  Example:</p><pre class="verbatim"><ol><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span>  <span class="c"># avoid \\n on last field</span></li><li>        <span class="i">@array</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/:/</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="c"># ...</span></li><li>    <span class="s">}</span></li></ol></pre><p>If VARIABLE is a hash, it chomps the hash&#39;s values, but not its keys, resetting the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> iterator in the process.</p><p>You can actually chomp anything that&#39;s an lvalue, including an assignment:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$cwd</span> = <span class="q">`pwd`</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$answer</span> = <span class="q">&lt;STDIN&gt;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you chomp a list, each element is chomped, and the total number of characters removed is returned.</p><p>Note that parentheses are necessary when you&#39;re chomping anything that is not a simple variable.  This is because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span> <span class="i">$cwd</span> = <span class="q">`pwd`</span><span class="sc">;</span></code>  is interpreted as <code class="inline"><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span> <span class="i">$cwd</span><span class="s">)</span> = <span class="q">`pwd`</span><span class="sc">;</span></code> , rather than as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span> <span class="i">$cwd</span> = <span class="q">`pwd`</span> <span class="s">)</span></code>  which you might expect.  Similarly, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span> <span class="i">$a</span><span class="cm">,</span> <span class="i">$b</span></code>  is interpreted as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span><span class="cm">,</span> <span class="i">$b</span></code>  rather than as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$a</span><span class="cm">,</span> <span class="i">$b</span><span class="s">)</span></code> .</p></section>	http://perldoc.perl.org/functions/chomp.html
state (function)	A			Perl Functions							<section class="prog__container"><pre>state VARLIST<br>state TYPE VARLIST<br>state VARLIST : ATTRS<br>state TYPE VARLIST : ATTRS</pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> declares a lexically scoped variable, just like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>. However, those variables will never be reinitialized, contrary to lexical variables that are reinitialized each time their enclosing block is entered. See <span href="http://perldoc.perl.org/perlsub.html#Persistent-Private-Variables">Persistent Private Variables in perlsub</span> for details.</p><p>If more than one variable is listed, the list must be placed in parentheses.  With a parenthesised list, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> can be used as a dummy placeholder.  However, since initialization of state variables in list context is currently not possible this would serve no purpose.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> variables are enabled only when the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;state&quot;</span></code>  pragma  is in effect, unless the keyword is written as <code class="inline"><span class="w">CORE::state</span></code> . See also <span href="http://perldoc.perl.org/feature.html">feature</span>. Alternately, include a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10</span></code>  or later to the current scope.</p></section>	http://perldoc.perl.org/functions/state.html
Not enough format arguments	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) A format specified more picture fields than the next line supplied.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-enough-format-arguments
Can't use '%c' after -mname	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to call perl with the <b>-m</b> switch, but you put something other than &quot;=&quot; after the module name.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-'%25c'-after--mname
delete argument is not a HASH or ARRAY element or slice	A			Perl Diagnostics							<section class="prog__container"><p>(F) The argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code> must be either a hash or array element, such as:</p><pre class="verbatim"><ol><li>    $foo{$bar}</li><li>    $ref-&gt;{&quot;susie&quot;}[12]</li></ol></pre><p>or a hash or array slice, such as:</p><pre class="verbatim"><ol><li>    @foo[$bar, $baz, $xyzzy]</li><li>    @{$ref-&gt;[12]}{&quot;susie&quot;, &quot;queue&quot;}</li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#delete-argument-is-not-a-HASH-or-ARRAY-element-or-slice
Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>For the long explanation, see David Goldberg&#39;s &quot;What Every Computer Scientist Should Know About Floating-Point Arithmetic&quot; (<span href="http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf">http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf</span>).</p><p>Internally, your computer represents floating-point numbers in binary. Digital (as in powers of two) computers cannot store all numbers exactly. Some real numbers lose precision in the process. This is a problem with how computers store numbers and affects all computer languages, not just Perl.</p><p><span href="http://perldoc.perl.org/perlnumber.html">perlnumber</span> shows the gory details of number representations and conversions.</p><p>To limit the number of decimal places in your numbers, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code> function. See <span href="http://perldoc.perl.org/perlop.html#Floating-point-Arithmetic">Floating-point Arithmetic in perlop</span> for more details.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%.2f&quot;</span><span class="cm">,</span> <span class="n">10</span>/<span class="n">3</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$number</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span> <span class="q">&quot;%.2f&quot;</span><span class="cm">,</span> <span class="n">10</span>/<span class="n">3</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#Why-am-I-getting-long-decimals-(eg%2c-19.9499999999999)-instead-of-the-numbers-I-should-be-getting-(eg%2c-19.95)%3f
topic (definition)	A			Perl Glossary							<section class="prog__container"><p>The thing you’re working on. Structures like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/while.html">while(&lt;&gt;)</span></code>, <code class="inline">for</code> , <code class="inline">foreach</code> , and <code class="inline">given</code>  set the topic for you by assigning to <code class="inline"><span class="i">$_</span></code> , the default (<i>topic</i>) variable.</p></section>	http://perldoc.perl.org/perlglossary.html#topic
Unquoted string "%s" may clash with future reserved word	A			Perl Diagnostics							<section class="prog__container"><p>(W reserved) You used a bareword that might someday be claimed as a reserved word.  It&#39;s best to put such a word in quotes, or capitalize it somehow, or insert an underbar into it.  You might also declare it as a subroutine.</p></section>	http://perldoc.perl.org/perldiag.html#Unquoted-string-%22%25s%22-may-clash-with-future-reserved-word
What are Perl 4, Perl 5, or Perl 6?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>In short, Perl 4 is the parent to both Perl 5 and Perl 6. Perl 5 is the older sibling, and though they are different languages, someone who knows one will spot many similarities in the other.</p><p>The number after Perl (i.e. the 5 after Perl 5) is the major release of the perl interpreter as well as the version of the language. Each major version has significant differences that earlier versions cannot support.</p><p>The current major release of Perl is Perl 5, first released in 1994. It can run scripts from the previous major release, Perl 4 (March 1991), but has significant differences.</p><p>Perl 6 is a reinvention of Perl, it is a language in the same lineage but not compatible. The two are complementary, not mutually exclusive. Perl 6 is not meant to replace Perl 5, and vice versa. See <span href="http://perldoc.perl.org/perlfaq1.html#What-is-Perl-6%3f">What is Perl 6?</span> below to find out more.</p><p>See <span href="http://perldoc.perl.org/perlhist.html">perlhist</span> for a history of Perl revisions.</p></section>	http://perldoc.perl.org/perlfaq1.html#What-are-Perl-4%2c-Perl-5%2c-or-Perl-6%3f
truncate (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>truncate FILEHANDLE,LENGTH<br>truncate EXPR,LENGTH</pre><p>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length.  Raises an exception if truncate isn&#39;t implemented on your system.  Returns true if successful, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> on error.</p><p>The behavior is undefined if LENGTH is greater than the length of the file.</p><p>The position in the file of FILEHANDLE is left unchanged.  You may want to call <span href="http://perldoc.perl.org/functions/truncate.html#seek-FILEHANDLE%2cPOSITION%2cWHENCE">seek</span> before writing to the file.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#truncate">truncate in perlport</span>.</p></section>	http://perldoc.perl.org/functions/truncate.html
datagram (definition)	A			Perl Glossary							<section class="prog__container"><p>A packet of data, such as a <b>UDP</b> message, that (from the viewpoint of the programs involved) can be sent independently over the network. (In fact, all packets are sent independently at the <b>IP</b> level, but <b>stream</b> protocols such as <b>TCP</b> hide this from your program.)</p></section>	http://perldoc.perl.org/perlglossary.html#datagram
/s regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Treat string as single line.  That is, change &quot;.&quot; to match any character whatsoever, even a newline, which normally it would not match.</p><p>Used together, as <code class="inline">/ms</code>, they let the &quot;.&quot; match any character whatsoever, while still allowing &quot;^&quot; and &quot;$&quot; to match, respectively, just after and just before newlines within the string.</p></section>	http://perldoc.perl.org/perlre.html#*s*
Code missing after '/'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had a (sub-)template that ends with a &#39;/&#39;.  There must be another template code following the slash.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Code-missing-after-'%2f'
left shift (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>bit shift</b> that multiplies the number by some power of 2.</p></section>	http://perldoc.perl.org/perlglossary.html#left-shift
freely available (definition)	A			Perl Glossary							<section class="prog__container"><p>Means you don’t have to pay money to get it, but the copyright on it may still belong to someone else (like Larry).</p></section>	http://perldoc.perl.org/perlglossary.html#freely-available
ExtUtils::CBuilder::Platform::Windows (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::CBuilder::Platform::Windows - Builder class for Windows platforms</p> </section>	http://perldoc.perl.org/ExtUtils/CBuilder/Platform/Windows.html
PATH (definition)	A			Perl Glossary							<section class="prog__container"><p>The list of <b>directories</b> the system searches to find a program you want to <b>execute</b>.  The list is stored as one of your <b>environment variables</b>, accessible in Perl as <code class="inline"><span class="i">$ENV</span>{<span class="w">PATH</span>}</code> .</p></section>	http://perldoc.perl.org/perlglossary.html#PATH
How do I convert from encoding FOO to encoding BAR?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>By first converting the FOO-encoded byte string to a text string, and then the text string to a BAR-encoded byte string:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$text_string</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&#39;FOO&#39;</span><span class="cm">,</span> <span class="i">$foo_string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$bar_string</span>  = <span class="i">encode</span><span class="s">(</span><span class="q">&#39;BAR&#39;</span><span class="cm">,</span> <span class="i">$text_string</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>or by skipping the text string part, and going directly from one binary encoding to the other:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw(from_to)</span><span class="sc">;</span></li><li>    <span class="i">from_to</span><span class="s">(</span><span class="i">$string</span><span class="cm">,</span> <span class="q">&#39;FOO&#39;</span><span class="cm">,</span> <span class="q">&#39;BAR&#39;</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># changes contents of $string</span></li></ol></pre><p>or by letting automatic decoding and encoding do all the work:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foofh</span><span class="cm">,</span> <span class="q">&#39;&lt;:encoding(FOO)&#39;</span><span class="cm">,</span> <span class="q">&#39;example.foo.txt&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$barfh</span><span class="cm">,</span> <span class="q">&#39;&gt;:encoding(BAR)&#39;</span><span class="cm">,</span> <span class="q">&#39;example.bar.txt&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="i">$barfh</span> <span class="s">}</span> <span class="i">$_</span> while <span class="q">&lt;$foofh&gt;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlunifaq.html#How-do-I-convert-from-encoding-FOO-to-encoding-BAR%3f
$> (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The effective uid of this process.  For example:</p><pre class="verbatim"><ol><li>    <span class="i">$&lt;</span> = <span class="i">$&gt;</span><span class="sc">;</span>            <span class="c"># set real to effective uid</span></li><li>    <span class="s">(</span><span class="i">$&lt;</span><span class="cm">,</span><span class="i">$&gt;</span><span class="s">)</span> = <span class="s">(</span><span class="i">$&gt;</span><span class="cm">,</span><span class="i">$&lt;</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># swap real and effective uids</span></li></ol></pre><p>You can change both the effective uid and the real uid at the same time by using <code class="inline"><span class="i">POSIX::setuid</span><span class="s">(</span><span class="s">)</span></code> .  Changes to <code class="inline"><span class="i">$&gt;</span></code>  require a check to <code class="inline"><span class="i">$!</span></code>  to detect any possible errors after an attempted change.</p><p><code class="inline"><span class="i">$&lt;</span></code>  and <code class="inline"><span class="i">$&gt;</span></code>  can be swapped only on machines supporting <code class="inline"><span class="i">setreuid</span><span class="s">(</span><span class="s">)</span></code> .</p><p>Mnemonic: it&#39;s the uid you went <i>to</i>, if you&#39;re running setuid.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3e
ExtUtils::MM_Any (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_Any - Platform-agnostic MM methods</p> <pre class="verbatim"><ol><li>  <span class="w">FOR</span> <span class="w">INTERNAL</span> <span class="w">USE</span> <span class="w">ONLY</span>!</li><li></li><li><span name="package-ExtUtils::MM_SomeOS"></span>  package <span class="i">ExtUtils::MM_SomeOS</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Temporarily, you have to subclass both.  Put MM_Any first.</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::MM_Any</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::MM_Unix</span><span class="sc">;</span></li><li>  <span class="i">@ISA</span> = <span class="q">qw(ExtUtils::MM_Any ExtUtils::Unix)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_Any.html
Binary "<=>" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;<=>&quot; returns -1, 0, or 1 depending on whether the left argument is numerically less than, equal to, or greater than the right argument. If your platform supports NaN &#39;s (not-a-numbers) as numeric values, using them with &quot;<=>&quot; returns undef. NaN is not &quot;<", ">&quot;, &quot;<=" " or>=&quot; anything (even NaN ), so those 5 return false. NaN!= NaN returns true, as does NaN!= anything else. If your platform doesn&#39;t support NaN &#39;s then NaN is just a string with numeric value 0.</="></",></=></=></section>	http://perldoc.perl.org/perlop.html#Equality-Operators
setgrent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>setgrent</pre>Prepare group file for use.</section>	http://perldoc.perl.org/functions/setgrent.html
man (definition)	A			Perl Glossary							<section class="prog__container"><p>The Unix program that displays online documentation (manual pages) for you.</p></section>	http://perldoc.perl.org/perlglossary.html#man
Illegal pattern in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote something like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?+foo)</span></li></ol></pre><p>The <code class="inline"><span class="q">&quot;+&quot;</span></code>  is valid only when followed by digits, indicating a capturing group.  See <span href="http://perldoc.perl.org/perlre.html#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)">(?PARNO)</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-pattern-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Delimiter for here document is too long	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a here document construct like <code class="inline">&lt;&lt;FOO</code>, the label <code class="inline"><span class="w">FOO</span></code>  is too long for Perl to handle.  You have to be seriously twisted to write code that triggers this error.</p></section>	http://perldoc.perl.org/perldiag.html#Delimiter-for-here-document-is-too-long
Out of memory during "large" request for %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request.  However, the request was judged large enough (compile-time default is 64K), so a possibility to shut down by trapping this error is granted.</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory-during-%22large%22-request-for-%25s
Missing or undefined argument to require	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to call require with no argument or with an undefined value as an argument.  Require expects either a package name or a file-specification as an argument.  See <span href="http://perldoc.perl.org/functions/require.html">require</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-or-undefined-argument-to-require
How do I handle circular lists?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you want to cycle through an array endlessly, you can increment the index modulo the number of elements in the array:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@array</span> = <span class="q">qw( a b c )</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="n">1</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$array</span>[ <span class="i">$i</span>++ % <span class="i">@array</span> ]<span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$i</span> &gt; <span class="n">20</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can also use <span href="http://search.cpan.org/perldoc/Tie::Cycle">Tie::Cycle</span> to use a scalar that always has the next element of the circular array:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::Cycle</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$cycle</span><span class="cm">,</span> <span class="q">&#39;Tie::Cycle&#39;</span><span class="cm">,</span> <span class="s">[</span> <span class="q">qw( FFFFFF 000000 FFFF00 )</span> <span class="s">]</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$cycle</span><span class="sc">;</span> <span class="c"># FFFFFF</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$cycle</span><span class="sc">;</span> <span class="c"># 000000</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$cycle</span><span class="sc">;</span> <span class="c"># FFFF00</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Array::Iterator::Circular">Array::Iterator::Circular</span> creates an iterator object for circular arrays:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Array::Iterator::Circular</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$color_iterator</span> = <span class="w">Array::Iterator::Circular</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="q">qw(red green blue orange)</span></li><li>        <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="n">1</span> .. <span class="n">20</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$color_iterator</span><span class="i">-&gt;next</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-handle-circular-lists%3f
Ambiguous range in transliteration operator	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote something like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr/a-z-0//</span></code> which doesn&#39;t mean anything at all.  To include a <code class="inline">-</code>  character in a transliteration, put it either first or last.  (In the past, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr/a-z-0//</span></code> was synonymous with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr/a-y//</span></code>, which was probably not what you would have expected.)</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-range-in-transliteration-operator
floating point (definition)	A			Perl Glossary							<section class="prog__container"><p>A method of storing numbers in “scientific notation”, such that the precision of the number is independent of its magnitude (the decimal point “floats”). Perl does its numeric work with floating-point numbers (sometimes called “floats”) when it can’t get away with using <b>integers</b>. Floating-point numbers are mere approximations of real numbers.</p></section>	http://perldoc.perl.org/perlglossary.html#floating-point
seek (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>seek FILEHANDLE,POSITION,WHENCE</pre><p>Sets FILEHANDLE&#39;s position, just like the <code class="inline"><span class="w">fseek</span></code>  call of <code class="inline"><span class="w">stdio</span></code> . FILEHANDLE may be an expression whose value gives the name of the filehandle.  The values for WHENCE are <code class="inline"><span class="n">0</span></code>  to set the new position <i>in bytes</i> to POSITION; <code class="inline"><span class="n">1</span></code>  to set it to the current position plus POSITION; and <code class="inline"><span class="n">2</span></code>  to set it to EOF plus POSITION, typically negative.  For WHENCE you may use the constants <code class="inline"><span class="w">SEEK_SET</span></code> , <code class="inline"><span class="w">SEEK_CUR</span></code> , and <code class="inline"><span class="w">SEEK_END</span></code>  (start of the file, current position, end of the file) from the <span href="http://perldoc.perl.org/Fcntl.html">Fcntl</span> module.  Returns <code class="inline"><span class="n">1</span></code>  on success, false otherwise.</p><p>Note the <i>in bytes</i>: even if the filehandle has been set to operate on characters (for example by using the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  open layer), tell() will return byte offsets, not character offsets (because implementing that would render seek() and tell() rather slow).</p><p>If you want to position the file for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syswrite.html">syswrite</span></code>, don&#39;t use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>, because buffering makes its effect on the file&#39;s read-write position unpredictable and non-portable.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysseek.html">sysseek</span></code> instead.</p><p>Due to the rules and rigors of ANSI C, on some systems you have to do a seek whenever you switch between reading and writing.  Amongst other things, this may have the effect of calling stdio&#39;s clearerr(3). A WHENCE of <code class="inline"><span class="n">1</span></code>  (<code class="inline"><span class="w">SEEK_CUR</span></code> ) is useful for not moving the file position:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="w">TEST</span><span class="cm">,</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This is also useful for applications emulating <code class="inline"><span class="w">tail</span> -f</code> .  Once you hit EOF on your read and then sleep for a while, you (probably) have to stick in a dummy seek() to reset things.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code> doesn&#39;t change the position, but it <i>does</i> clear the end-of-file condition on the handle, so that the next <code class="inline"><span class="q">&lt;FILE&gt;</span></code>  makes Perl try again to read something.  (We hope.)</p><p>If that doesn&#39;t work (some I/O implementations are particularly cantankerous), you might need something like this:</p><pre class="verbatim"><ol><li>    for <span class="s">(</span><span class="sc">;</span><span class="sc">;</span><span class="s">)</span> <span class="s">{</span></li><li>        for <span class="s">(</span><span class="i">$curpos</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span><span class="s">(</span><span class="w">FILE</span><span class="s">)</span><span class="sc">;</span> <span class="i">$_</span> = <span class="q">&lt;FILE&gt;</span><span class="sc">;</span></li><li>             <span class="i">$curpos</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span><span class="s">(</span><span class="w">FILE</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="c"># search for some stuff and put it into files</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="s">(</span><span class="i">$for_a_while</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="w">FILE</span><span class="cm">,</span> <span class="i">$curpos</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/seek.html
localtime(%f) failed	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> with a number that it could not handle: too large, too small, or NaN.  The returned value is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p></section>	http://perldoc.perl.org/perldiag.html#localtime(%25f)-failed
EOF (definition)	A			Perl Glossary							<section class="prog__container"><p>End of File. Sometimes used metaphorically as the terminating string of a <b>here document</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#EOF
execute bit (definition)	A			Perl Glossary							<section class="prog__container"><p>The special mark that tells the operating system it can run this program. There are actually three execute bits under Unix, and which bit gets used depends on whether you own the file singularly, collectively, or not at all.</p></section>	http://perldoc.perl.org/perlglossary.html#execute-bit
gethostent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>gethostent</pre>Get next hosts record.</section>	http://perldoc.perl.org/functions/gethostent.html
Can't locate %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> (or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code>) a file that couldn&#39;t be found. Perl looks for the file in all the locations mentioned in @INC, unless the file name included the full path to the file.  Perhaps you need to set the PERL5LIB or PERL5OPT environment variable to say where the extra library is, or maybe the script needs to add the library name to @INC.  Or maybe you just misspelled the name of the file.  See <span href="http://perldoc.perl.org/functions/require.html">require</span> and <span href="http://perldoc.perl.org/lib.html">lib</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-%25s
TAP::Formatter::Console (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Console - Harness output delegate for default console output</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Formatter::Console</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$harness</span> = <span class="w">TAP::Formatter::Console</span><span class="w">-&gt;new</span><span class="s">(</span> \\<span class="i">%args</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><span name="open_test"></span><h2><code class="inline"><span class="w">open_test</span></code> </h2><p>See <span href="http://perldoc.perl.org/TAP/Formatter/Base.html">TAP::Formatter::Base</span></p><div class="hud_container" id="page_index">     <div class="hud_header" id="page_index_header">       <div class="hud_close" id="page_index_close"><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#" onclick="pageIndex.hide();return false;"></span></div>       <div class="hud_title" id="page_index_title"><span class="hud_span_top">Page index</span></div>       <div class="hud_topright" id="page_index_topright"></div>     </div>     <div class="hud_content" id="page_index_content">       <ul><li><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#NAME">NAME</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#VERSION">VERSION</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#DESCRIPTION">DESCRIPTION</span></li><li><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#SYNOPSIS">SYNOPSIS</span><ul><li><span href="http://perldoc.perl.org/TAP/Formatter/Console.html#open_test">open_test</span></li></ul></li></ul>     </div>     <div class="hud_footer" id="page_index_footer">       <div class="hud_bottomleft" id="page_index_bottomleft"></div>       <div class="hud_bottom" id="page_index_bottom"><span class="hud_span_bottom"></span></div>       <div class="hud_resize" id="page_index_resize"></div>     </div>   </div></section>	http://perldoc.perl.org/TAP/Formatter/Console.html
%s: not found	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through the Bourne shell instead of Perl.  Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#%25s%3a-not-found
metacharacter (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>character</b> that is <i>not</i> supposed to be treated normally. Which characters are to be treated specially as metacharacters varies greatly from context to context. Your <b>shell</b> will have certain metacharacters, double-quoted Perl <b>strings</b> have other metacharacters, and <b>regular expression</b> patterns have all the double-quote metacharacters plus some extra ones of their own.</p></section>	http://perldoc.perl.org/perlglossary.html#metacharacter
command buffering (definition)	A			Perl Glossary							<section class="prog__container"><p>A mechanism in Perl that lets you store up the output of each Perl <b>command</b> and then flush it out as a single request to the <b>operating system</b>. It’s enabled by setting the <code class="inline"><span class="i">$|</span></code>  (<code class="inline"><span class="i">$AUTOFLUSH</span></code> ) variable to a true value. It’s used when you don’t want data sitting around, not going where it’s supposed to, which may happen because the default on a <b>file</b> or <b>pipe</b> is to use <b>block buffering</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#command-buffering
taint checks (definition)	A			Perl Glossary							<section class="prog__container"><p>The special bookkeeping Perl does to track the flow of external data through your program and disallow their use in system commands.</p></section>	http://perldoc.perl.org/perlglossary.html#taint-checks
Invalid negative number (%s) in chr	A			Perl Diagnostics							<section class="prog__container"><p>(W utf8) You passed a negative number to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chr.html">chr</span></code>.  Negative numbers are not valid character numbers, so it returns the Unicode replacement character (U+FFFD).</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-negative-number-(%25s)-in-chr
No such signal: SIG%s	A			Perl Diagnostics							<section class="prog__container"><p>(W signal) You specified a signal name as a subscript to %SIG that was not recognized.  Say <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> -l</code>  in your shell to see the valid signal names on your system.</p></section>	http://perldoc.perl.org/perldiag.html#No-such-signal%3a-SIG%25s
Scalar value @%s[%s] better written as $%s[%s]	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You&#39;ve used an array slice (indicated by @) to select a single element of an array.  Generally it&#39;s better to ask for a scalar value (indicated by $).  The difference is that <code class="inline"><span class="i">$foo</span>[<span class="i">&amp;bar</span>]</code>  always behaves like a scalar, both when assigning to it and when evaluating its argument, while <code class="inline"><span class="i">@foo</span>[<span class="i">&amp;bar</span>]</code>  behaves like a list when you assign to it, and provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.</p><p>On the other hand, if you were actually hoping to treat the array element as a list, you need to look into how references work, because Perl will not magically convert between scalars and lists for you.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Scalar-value-%40%25s%5b%25s%5d-better-written-as-%24%25s%5b%25s%5d
sort is now a reserved word	A			Perl Diagnostics							<section class="prog__container"><p>(F) An ancient error message that almost nobody ever runs into anymore. But before sort was a keyword, people sometimes used it as a filehandle.</p></section>	http://perldoc.perl.org/perldiag.html#sort-is-now-a-reserved-word
BEGIN not safe after errors--compilation aborted	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl found a <code class="inline">BEGIN <span class="s">{</span><span class="s">}</span></code>  subroutine (or a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> directive, which implies a <code class="inline">BEGIN <span class="s">{</span><span class="s">}</span></code> ) after one or more compilation errors had already occurred.  Since the intended environment for the <code class="inline">BEGIN <span class="s">{</span><span class="s">}</span></code>  could not be guaranteed (due to the errors), and since subsequent code likely depends on its correct operation, Perl just gave up.</p></section>	http://perldoc.perl.org/perldiag.html#BEGIN-not-safe-after-errors--compilation-aborted
Pod::Text::Overstrike (module)	A			Perl Standard Modules		[[Pod::Text]]\n[[Pod::Simple]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::Text::Overstrike - Convert POD data to formatted overstrike text</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Text::Overstrike</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Text::Overstrike</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">sentence</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">width</span> <span class="cm">=&gt;</span> <span class="n">78</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.txt.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.txt&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Text/Overstrike.html
lexical variable (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>variable</b> subject to <b>lexical scoping</b>, declared by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>. Often just called a “lexical”. (The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> declaration declares a lexically scoped name for a global variable, which is not itself a lexical variable.)</p></section>	http://perldoc.perl.org/perlglossary.html#lexical-variable
autoincrement (definition)	A			Perl Glossary							<section class="prog__container"><p>To add one to something automatically, hence the name of the <code class="inline">++</code>  operator. To instead subtract one from something automatically is known as an “autodecrement”.</p></section>	http://perldoc.perl.org/perlglossary.html#autoincrement
No group ending character '%c' found in template	A			Perl Diagnostics							<section class="prog__container"><p>(F) A pack or unpack template has an opening &#39;(&#39; or &#39;[&#39; without its matching counterpart.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#No-group-ending-character-'%25c'-found-in-template
'/' does not take a repeat count	A			Perl Diagnostics							<section class="prog__container"><p>(F) You cannot put a repeat count of any kind right after the &#39;/&#39; code. See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%2f'-does-not-take-a-repeat-count
TAP::Parser::Result::Plan (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Plan - Plan result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Plan.html
statement (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>command</b> to the computer about what to do next, like a step in a recipe: “Add marmalade to batter and mix until mixed.” A statement is distinguished from a <b>declaration</b>, which doesn’t tell the computer to do anything, but just to learn something.</p></section>	http://perldoc.perl.org/perlglossary.html#statement
substr outside of string	A			Perl Diagnostics							<section class="prog__container"><p>(W substr)(F) You tried to reference a substr() that pointed outside of a string.  That is, the absolute value of the offset was larger than the length of the string.  See <span href="http://perldoc.perl.org/functions/substr.html">substr</span>.  This warning is fatal if substr is used in an lvalue context (as the left hand side of an assignment or as a subroutine argument for example).</p></section>	http://perldoc.perl.org/perldiag.html#substr-outside-of-string
Module name required with -%c option	A			Perl Diagnostics							<section class="prog__container"><p>(F) The <code class="inline">-M</code>  or <code class="inline">-m</code> options say that Perl should load some module, but you omitted the name of the module.  Consult <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for full details about <code class="inline">-M</code>  and <code class="inline">-m</code>.</p></section>	http://perldoc.perl.org/perldiag.html#Module-name-required-with--%25c-option
Why does passing a subroutine an undefined element in a hash create it?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Are you using a really old version of Perl?</p><p>Normally, accessing a hash key&#39;s value for a nonexistent key will <i>not</i> create the key.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span>  = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$value</span> = <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> }<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This won&#39;t print\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> }<span class="sc">;</span></li></ol></pre><p>Passing <code class="inline"><span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> }</code>  to a subroutine used to be a special case, though. Since you could assign directly to <code class="inline"><span class="i">$_</span>[<span class="n">0</span>]</code> , Perl had to be ready to make that assignment so it created the hash key ahead of time:</p><pre class="verbatim"><ol><li>    <span class="i">my_sub</span><span class="s">(</span> <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> } <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This will print before 5.004\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> }<span class="sc">;</span></li><li></li><li><span name="my_sub"></span>    sub <span class="m">my_sub</span> <span class="s">{</span></li><li>        <span class="c"># $_[0] = &#39;bar&#39;; # create hash key in case you do this</span></li><li>        <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Since Perl 5.004, however, this situation is a special case and Perl creates the hash key only when you make the assignment:</p><pre class="verbatim"><ol><li>    <span class="i">my_sub</span><span class="s">(</span> <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> } <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This will print, even after 5.004\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{ <span class="q">&#39;foo&#39;</span> }<span class="sc">;</span></li><li></li><li><span name="my_sub"></span>    sub <span class="m">my_sub</span> <span class="s">{</span></li><li>        <span class="i">$_</span>[<span class="n">0</span>] = <span class="q">&#39;bar&#39;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>However, if you want the old behavior (and think carefully about that because it&#39;s a weird side effect), you can pass a hash slice instead. Perl 5.004 didn&#39;t make this a special case:</p><pre class="verbatim"><ol><li>    <span class="i">my_sub</span><span class="s">(</span> <span class="i">@hash</span>{ <span class="q">qw/foo/</span> } <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#Why-does-passing-a-subroutine-an-undefined-element-in-a-hash-create-it%3f
IO (definition)	A			Perl Glossary							<section class="prog__container"><p>An internal I/O object. Can also mean <b>indirect object</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#IO
host (definition)	A			Perl Glossary							<section class="prog__container"><p>The computer on which a program or other data resides.</p></section>	http://perldoc.perl.org/perlglossary.html#host
endhostent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>endhostent</pre>Be done using hosts file.</section>	http://perldoc.perl.org/functions/endhostent.html
$^R (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The result of evaluation of the last successful <code class="inline">(?{ code })</code> regular expression assertion (see <span href="http://perldoc.perl.org/perlre.html">perlre</span>).  May be written to.</p><p>This variable was added in Perl 5.005.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eR
Can't open bidirectional pipe	A			Perl Diagnostics							<section class="prog__container"><p>(W pipe) You tried to say <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">CMD</span><span class="cm">,</span> <span class="q">&quot;|cmd|&quot;</span><span class="s">)</span></code> , which is not supported. You can try any of several modules in the Perl library to do this, such as IPC::Open2.  Alternately, direct the pipe&#39;s output to a file using &quot;&gt;&quot;, and then read it in under a different file handle.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-bidirectional-pipe
argument (definition)	A			Perl Glossary							<section class="prog__container"><p>A piece of data supplied to a <b>program</b>, <b>subroutine</b>, <b>function</b>, or <b>method</b> to tell it what it’s supposed to do. Also called a “parameter”.</p></section>	http://perldoc.perl.org/perlglossary.html#argument
formal arguments (definition)	A			Perl Glossary							<section class="prog__container"><p>The generic names by which a <b>subroutine</b> knows its <b>arguments</b>. In many languages, formal arguments are always given individual names; in Perl, the formal arguments are just the elements of an array. The formal arguments to a Perl program are <code class="inline"><span class="i">$ARGV</span>[<span class="n">0</span>]</code> , <code class="inline"><span class="i">$ARGV</span>[<span class="n">1</span>]</code> , and so on. Similarly, the formal arguments to a Perl subroutine are <code class="inline"><span class="i">$_</span>[<span class="n">0</span>]</code> , <code class="inline"><span class="i">$_</span>[<span class="n">1</span>]</code> , and so on. You may give the arguments individual names by assigning the values to a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> list. See also <b>actual arguments</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#formal-arguments
Lookbehind longer than %d not implemented in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) There is currently a limit on the length of string which lookbehind can handle.  This restriction may be eased in a future release.</p></section>	http://perldoc.perl.org/perldiag.html#Lookbehind-longer-than-%25d-not-implemented-in-regex-m%2f%25s%2f
broadcast (definition)	A			Perl Glossary							<section class="prog__container"><p>To send a <b>datagram</b> to multiple destinations simultaneously.</p></section>	http://perldoc.perl.org/perlglossary.html#broadcast
How do I get the screen size?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If you have <span href="http://search.cpan.org/perldoc/Term::ReadKey">Term::ReadKey</span> module installed from CPAN, you can use it to fetch the width and height in characters and in pixels:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadKey</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$wchar</span><span class="cm">,</span> <span class="i">$hchar</span><span class="cm">,</span> <span class="i">$wpixels</span><span class="cm">,</span> <span class="i">$hpixels</span><span class="s">)</span> = <span class="i">GetTerminalSize</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This is more portable than the raw <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code>, but not as illustrative:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;sys/ioctl.ph&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no TIOCGWINSZ &quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">&amp;TIOCGWINSZ</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tty_fh</span><span class="cm">,</span> <span class="q">&quot;+&lt;/dev/tty&quot;</span><span class="s">)</span>                     <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;No tty: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span><span class="s">(</span><span class="i">$tty_fh</span><span class="cm">,</span> <span class="i">&amp;TIOCGWINSZ</span><span class="cm">,</span> <span class="i">$winsize</span>=<span class="q">&#39;&#39;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span> <span class="q">&quot;$0: ioctl TIOCGWINSZ (%08x: $!)\\n&quot;</span><span class="cm">,</span> <span class="i">&amp;TIOCGWINSZ</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$row</span><span class="cm">,</span> <span class="i">$col</span><span class="cm">,</span> <span class="i">$xpixel</span><span class="cm">,</span> <span class="i">$ypixel</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&#39;S4&#39;</span><span class="cm">,</span> <span class="i">$winsize</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;(row,col) = ($row,$col)&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;  (xpixel,ypixel) = ($xpixel,$ypixel)&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$xpixel</span> || <span class="i">$ypixel</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-get-the-screen-size%3f
global (definition)	A			Perl Glossary							<section class="prog__container"><p>Something you can see from anywhere, usually used of <b>variables</b> and <b>subroutines</b> that are visible everywhere in your program.  In Perl, only certain special variables are truly global—most variables (and all subroutines) exist only in the current <b>package</b>. Global variables can be declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code>. See “Global Declarations” in Camel chapter 4, “Statements and Declarations”.</p></section>	http://perldoc.perl.org/perlglossary.html#global
race condition (definition)	A			Perl Glossary							<section class="prog__container"><p>A race condition exists when the result of several interrelated events depends on the ordering of those events, but that order cannot be guaranteed due to nondeterministic timing effects. If two or more programs, or parts of the same program, try to go through the same series of events, one might interrupt the work of the other. This is a good way to find an <b>exploit</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#race-condition
Undefined top format "%s" called	A			Perl Diagnostics							<section class="prog__container"><p>(F) The format indicated doesn&#39;t seem to exist.  Perhaps it&#39;s really in another package?  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-top-format-%22%25s%22-called
You need to quote "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You assigned a bareword as a signal handler name. Unfortunately, you already have a subroutine of that name declared, which means that Perl 5 will try to call the subroutine when the assignment is executed, which is probably not what you want.  (If it IS what you want, put an &amp; in front.)</p></section>	http://perldoc.perl.org/perldiag.html#You-need-to-quote-%22%25s%22
bit string (definition)	A			Perl Glossary							<section class="prog__container"><p>A sequence of <b>bits</b> that is actually being thought of as a sequence of bits, for once.</p></section>	http://perldoc.perl.org/perlglossary.html#bit-string
What's the difference between "delete" and "undef" with hashes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Hashes contain pairs of scalars: the first is the key, the second is the value. The key will be coerced to a string, although the value can be any kind of scalar: string, number, or reference. If a key <code class="inline"><span class="i">$key</span></code>  is present in %hash, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists($hash{$key})</span></code> will return true. The value for a given key can be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, in which case <code class="inline"><span class="i">$hash</span>{<span class="i">$key</span>}</code>  will be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> while <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="i">$key</span>}</code>  will return true. This corresponds to (<code class="inline"><span class="i">$key</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>) being in the hash.</p><p>Pictures help... Here&#39;s the <code class="inline"><span class="i">%hash</span></code>  table:</p><pre class="verbatim"><ol><li>      <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span>  <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></li><li>    +------+------+</li><li>    |  <span class="w">a</span>   |  <span class="n">3</span>   |</li><li>    |  <span class="w">x</span>   |  <span class="n">7</span>   |</li><li>    |  <span class="w">d</span>   |  <span class="n">0</span>   |</li><li>    |  <span class="w">e</span>   |  <span class="n">2</span>   |</li><li>    +------+------+</li></ol></pre><p>And these conditions hold</p><pre class="verbatim"><ol><li>    <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                       <span class="w">is</span> <span class="w">true</span></li><li>    <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}                       <span class="w">is</span> <span class="w">false</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}               <span class="w">is</span> <span class="w">true</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}               <span class="w">is</span> <span class="w">true</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                <span class="w">is</span> <span class="w">true</span> <span class="s">(</span><span class="w">Perl</span> <span class="n">5</span> <span class="w">only</span><span class="s">)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">(</span><span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="s">)</span>     <span class="w">is</span> <span class="w">true</span></li></ol></pre><p>If you now say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}</li></ol></pre><p>your table now reads:</p><pre class="verbatim"><ol><li>      <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span>  <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></li><li>    +------+------+</li><li>    |  <span class="w">a</span>   | <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span>|</li><li>    |  <span class="w">x</span>   |  <span class="n">7</span>   |</li><li>    |  <span class="w">d</span>   |  <span class="n">0</span>   |</li><li>    |  <span class="w">e</span>   |  <span class="n">2</span>   |</li><li>    +------+------+</li></ol></pre><p>and these conditions now hold; changes in caps:</p><pre class="verbatim"><ol><li>    <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                       <span class="w">is</span> <span class="w">FALSE</span></li><li>    <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}                       <span class="w">is</span> <span class="w">false</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}               <span class="w">is</span> <span class="w">true</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}               <span class="w">is</span> <span class="w">FALSE</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                <span class="w">is</span> <span class="w">true</span> <span class="s">(</span><span class="w">Perl</span> <span class="n">5</span> <span class="w">only</span><span class="s">)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">(</span><span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="s">)</span>     <span class="w">is</span> <span class="w">true</span></li></ol></pre><p>Notice the last two: you have an undef value, but a defined key!</p><p>Now, consider this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}</li></ol></pre><p>your table now reads:</p><pre class="verbatim"><ol><li>      <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span>  <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></li><li>    +------+------+</li><li>    |  <span class="w">x</span>   |  <span class="n">7</span>   |</li><li>    |  <span class="w">d</span>   |  <span class="n">0</span>   |</li><li>    |  <span class="w">e</span>   |  <span class="n">2</span>   |</li><li>    +------+------+</li></ol></pre><p>and these conditions now hold; changes in caps:</p><pre class="verbatim"><ol><li>    <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                       <span class="w">is</span> <span class="w">false</span></li><li>    <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}                       <span class="w">is</span> <span class="w">false</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;d&#39;</span>}               <span class="w">is</span> <span class="w">true</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}               <span class="w">is</span> <span class="w">false</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="q">&#39;a&#39;</span>}                <span class="w">is</span> <span class="w">FALSE</span> <span class="s">(</span><span class="w">Perl</span> <span class="n">5</span> <span class="w">only</span><span class="s">)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">(</span><span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="s">)</span>     <span class="w">is</span> <span class="w">FALSE</span></li></ol></pre><p>See, the whole entry is gone!</p></section>	http://perldoc.perl.org/perlfaq4.html#What's-the-difference-between-%22delete%22-and-%22undef%22-with-hashes%3f
%s: Expression syntax	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#%25s%3a-Expression-syntax
setpwent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>setpwent</pre>Prepare passwd file for use.</section>	http://perldoc.perl.org/functions/setpwent.html
Invalid module name %s with -%c option: contains single ':'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The module argument to perl&#39;s <b>-m</b> and <b>-M</b> command-line options cannot contain single colons in the module name, but only in the arguments after &quot;=&quot;.  In other words, <b>-MFoo::Bar=:baz</b> is ok, but <b>-MFoo:Bar=baz</b> is not.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-module-name-%25s-with--%25c-option%3a-contains-single-'%3a'
options (definition)	A			Perl Glossary							<section class="prog__container"><p>See either <b>switches</b> or <b>regular expression modifiers</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#options
POSIX syntax [= =] is reserved for future extensions in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Within regular expression character classes ([]) the syntax beginning with &quot;[=&quot; and ending with &quot;=]&quot; is reserved for future extensions.  If you need to represent those character sequences inside a regular expression character class, just quote the square brackets with the backslash: &quot;\\[=&quot; and &quot;=\\]&quot;.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#POSIX-syntax-%5b%3d-%3d%5d-is-reserved-for-future-extensions-in-regex%3b-marked-by--%3c---HERE-in-m%2f%25s%2f
User::grent (module)	A			Perl Standard Modules							<section class="prog__container"><p>User::grent - by-name interface to Perl&#39;s built-in getgr*() functions</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">User::grent</span><span class="sc">;</span></li><li> <span class="i">$gr</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getgrgid.html">getgrgid</span><span class="s">(</span><span class="n">0</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;No group zero&quot;</span><span class="sc">;</span></li><li> if <span class="s">(</span> <span class="i">$gr</span><span class="i">-&gt;name</span> eq <span class="q">&#39;wheel&#39;</span> &amp;&amp; <span class="i">@</span>{<span class="i">$gr</span><span class="i">-&gt;members</span>} &gt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;gid zero name wheel, with other members&quot;</span><span class="sc">;</span></li><li> <span class="s">}</span> </li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">User::grent</span> <span class="q">qw(:FIELDS)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/getgrgid.html">getgrgid</span><span class="s">(</span><span class="n">0</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;No group zero&quot;</span><span class="sc">;</span></li><li> if <span class="s">(</span> <span class="i">$gr_name</span> eq <span class="q">&#39;wheel&#39;</span> &amp;&amp; <span class="i">@gr_members</span> &gt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;gid zero name wheel, with other members&quot;</span><span class="sc">;</span></li><li> <span class="s">}</span> </li><li></li><li> <span class="i">$gr</span> = <span class="i">getgr</span><span class="s">(</span><span class="i">$whoever</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/User/grent.html
${^MATCH} (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>This is similar to <code class="inline"><span class="i">$&amp;</span></code>  (<code class="inline"><span class="i">$MATCH</span></code> ) except that it does not incur the performance penalty associated with that variable.</p><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above.</p><p>In Perl v5.18 and earlier, it is only guaranteed to return a defined value when the pattern was compiled or executed with the <code class="inline">/p</code> modifier.  In Perl v5.20, the <code class="inline">/p</code> modifier does nothing, so <code class="inline"><span class="i">$</span>{<span class="w">^MATCH</span>}</code>  does the same thing as <code class="inline"><span class="i">$MATCH</span></code> .</p><p>This variable was added in Perl v5.10.0.</p><p>This variable is read-only and dynamically-scoped.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eMATCH%7d
Unicode non-character U+%X is illegal for open interchange	A			Perl Diagnostics							<section class="prog__container"><p>(S nonchar) Certain codepoints, such as U+FFFE and U+FFFF, are defined by the Unicode standard to be non-characters.  Those are legal codepoints, but are reserved for internal use; so, applications shouldn&#39;t attempt to exchange them.  An application may not be expecting any of these characters at all, and receiving them may lead to bugs.  If you know what you are doing you can turn off this warning by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;nonchar&#39;</span><span class="sc">;</span></code> .</p><p>This is not really a &quot;severe&quot; error, but it is supposed to be raised by default even if warnings are not enabled, and currently the only way to do that in Perl is to mark it as serious.</p></section>	http://perldoc.perl.org/perldiag.html#Unicode-non-character-U%2b%25X-is-illegal-for-open-interchange
Can't use bareword ("%s") as %s ref while "strict refs" in use	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only hard references are allowed by &quot;strict refs&quot;.  Symbolic references are disallowed.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-bareword-(%22%25s%22)-as-%25s-ref-while-%22strict-refs%22-in-use
Allocation too large: %x	A			Perl Diagnostics							<section class="prog__container"><p>(X) You can&#39;t allocate more than 64K on an MS-DOS machine.</p></section>	http://perldoc.perl.org/perldiag.html#Allocation-too-large%3a-%25x
How can I find out my current or calling package?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>To find the package you are currently in, use the special literal <code class="inline"><span class="w">__PACKAGE__</span></code> , as documented in <span href="http://perldoc.perl.org/perldata.html">perldata</span>. You can only use the special literals as separate tokens, so you can&#39;t interpolate them into strings like you can with variables:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$current_package</span> = <span class="w">__PACKAGE__</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;I am in package $current_package\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If you want to find the package calling your code, perhaps to give better diagnostics as <span href="http://perldoc.perl.org/Carp.html">Carp</span> does, use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span></code> built-in:</p><pre class="verbatim"><ol><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@args</span> = ...<span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$package</span><span class="cm">,</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$line</span> <span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;I was called from package $package\\n&quot;</span><span class="sc">;</span></li><li>        <span class="p">)</span><span class="sc">;</span></li></ol></pre><p>By default, your program starts in package <code class="inline"><span class="w">main</span></code> , so you will always be in some package.</p><p>This is different from finding out the package an object is blessed into, which might not be the current package. For that, use <code class="inline"><span class="w">blessed</span></code>  from <span href="http://perldoc.perl.org/Scalar/Util.html">Scalar::Util</span>, part of the Standard Library since Perl 5.8:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Scalar::Util</span> <span class="q">qw(blessed)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$object_package</span> = <span class="i">blessed</span><span class="s">(</span> <span class="i">$object</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Most of the time, you shouldn&#39;t care what package an object is blessed into, however, as long as it claims to inherit from that class:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$is_right_class</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$object</span><span class="i">-&gt;isa</span><span class="s">(</span> <span class="i">$package</span> <span class="s">)</span> <span class="s">}</span><span class="sc">;</span> <span class="c"># true or false</span></li></ol></pre><p>And, with Perl 5.10 and later, you don&#39;t have to check for an inheritance to see if the object can handle a role. For that, you can use <code class="inline"><span class="w">DOES</span></code> , which comes from <code class="inline"><span class="w">UNIVERSAL</span></code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$class_does_it</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$object</span><span class="i">-&gt;DOES</span><span class="s">(</span> <span class="i">$role</span> <span class="s">)</span> <span class="s">}</span><span class="sc">;</span> <span class="c"># true or false</span></li></ol></pre><p>You can safely replace <code class="inline"><span class="w">isa</span></code>  with <code class="inline"><span class="w">DOES</span></code>  (although the converse is not true).</p></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-find-out-my-current-or-calling-package%3f
Illegal modulus zero	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to divide a number by 0 to get the remainder.  Most numbers don&#39;t take to this kindly.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-modulus-zero
Slurpy parameter not last	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a subroutine signature, you put something after a slurpy (array or hash) parameter.  The slurpy parameter takes all the available arguments, so there can&#39;t be any left to fill later parameters.</p></section>	http://perldoc.perl.org/perldiag.html#Slurpy-parameter-not-last
iteration (definition)	A			Perl Glossary							<section class="prog__container"><p>Doing something repeatedly.</p></section>	http://perldoc.perl.org/perlglossary.html#iteration
exit (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>exit EXPR<br>exit</pre><p>Evaluates EXPR and exits immediately with that value.    Example:</p><pre class="verbatim"><ol><li>    <span class="i">$ans</span> = <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="n">0</span> if <span class="i">$ans</span> =~ <span class="q">/^[Xx]/</span><span class="sc">;</span></li></ol></pre><p>See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>.  If EXPR is omitted, exits with <code class="inline"><span class="n">0</span></code>  status.  The only universally recognized values for EXPR are <code class="inline"><span class="n">0</span></code>  for success and <code class="inline"><span class="n">1</span></code>  for error; other values are subject to interpretation depending on the environment in which the Perl program is running.  For example, exiting 69 (EX_UNAVAILABLE) from a <i>sendmail</i> incoming-mail filter will cause the mailer to return the item undelivered, but that&#39;s not true everywhere.</p><p>Don&#39;t use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span></code> to abort a subroutine if there&#39;s any chance that someone might want to trap whatever error happened.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> instead, which can be trapped by an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>.</p><p>The exit() function does not always exit immediately.  It calls any defined <code class="inline">END</code>  routines first, but these <code class="inline">END</code>  routines may not themselves abort the exit.  Likewise any object destructors that need to be called are called before the real exit.  <code class="inline">END</code>  routines and destructors can change the exit status by modifying <code class="inline"><span class="i">$?</span></code> .  If this is a problem, you can call <code class="inline"><span class="i">POSIX::_exit</span><span class="s">(</span><span class="i">$status</span><span class="s">)</span></code>  to avoid END and destructor processing. See <span href="http://perldoc.perl.org/perlmod.html">perlmod</span> for details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#exit">exit in perlport</span>.</p></section>	http://perldoc.perl.org/functions/exit.html
$^O (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The name of the operating system under which this copy of Perl was built, as determined during the configuration process.  For examples see <span href="http://perldoc.perl.org/perlport.html#PLATFORMS">PLATFORMS in perlport</span>.</p><p>The value is identical to <code class="inline"><span class="i">$Config</span>{<span class="q">&#39;osname&#39;</span>}</code> .  See also <span href="http://perldoc.perl.org/Config.html">Config</span> and the <b>-V</b> command-line switch documented in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>.</p><p>In Windows platforms, <code class="inline"><span class="i">$^O</span></code>  is not very helpful: since it is always <code class="inline"><span class="w">MSWin32</span></code> , it doesn&#39;t tell the difference between 95/98/ME/NT/2000/XP/CE/.NET.  Use <code class="inline"><span class="i">Win32::GetOSName</span><span class="s">(</span><span class="s">)</span></code>  or Win32::GetOSVersion() (see <span href="http://search.cpan.org/perldoc/Win32">Win32</span> and <span href="http://perldoc.perl.org/perlport.html">perlport</span>) to distinguish between the variants.</p><p>This variable was added in Perl 5.003.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eO
endnetent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>endnetent</pre>Be done using networks file.</section>	http://perldoc.perl.org/functions/endnetent.html
Unbalanced saves: %d more saves than restores	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The exit code detected an internal inconsistency in how many values were temporarily localized.</p></section>	http://perldoc.perl.org/perldiag.html#Unbalanced-saves%3a-%25d-more-saves-than-restores
errno (definition)	A			Perl Glossary							<section class="prog__container"><p>The error number returned by a <b>syscall</b> when it fails. Perl refers to the error by the name <code class="inline"><span class="i">$!</span></code>  (or <code class="inline"><span class="i">$OS_ERROR</span></code>  if you use the English module).</p></section>	http://perldoc.perl.org/perlglossary.html#errno
syswrite (function)	A			Perl Functions\nPerl Input and output functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET<br>syswrite FILEHANDLE,SCALAR,LENGTH<br>syswrite FILEHANDLE,SCALAR</pre><p>Attempts to write LENGTH bytes of data from variable SCALAR to the specified FILEHANDLE, using write(2).  If LENGTH is not specified, writes whole SCALAR.  It bypasses buffered IO, so mixing this with reads (other than <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread())</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> may cause confusion because the perlio and stdio layers usually buffer data.  Returns the number of bytes actually written, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if there was an error (in this case the errno variable <code class="inline"><span class="i">$!</span></code>  is also set).  If the LENGTH is greater than the data available in the SCALAR after the OFFSET, only as much data as is available will be written.</p><p>An OFFSET may be specified to write the data from some part of the string other than the beginning.  A negative OFFSET specifies writing that many characters counting backwards from the end of the string. If SCALAR is of length zero, you can only use an OFFSET of 0.</p><p><b>WARNING</b>: If the filehandle is marked <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , Unicode characters encoded in UTF-8 are written instead of bytes, and the LENGTH, OFFSET, and return value of syswrite() are in (UTF8-encoded Unicode) characters. The <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span>...<span class="s">)</span></code>  layer implicitly introduces the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  layer. Alternately, if the handle is not marked with an encoding but you attempt to write characters with code points over 255, raises an exception. See <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span>, <span href="http://perldoc.perl.org/functions/open.html">open</span>, and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma, <span href="http://perldoc.perl.org/open.html">open</span>.</p></section>	http://perldoc.perl.org/functions/syswrite.html
$` (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The string preceding whatever was matched by the last successful pattern match, not counting any matches hidden within a BLOCK or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> enclosed by the current BLOCK.</p><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above for the serious performance implications of using this variable (even once) in your code.</p><p>This variable is read-only and dynamically-scoped.</p><p>Mnemonic: <code class="inline">`</code> often precedes a quoted string.</p></section>	http://perldoc.perl.org/perlvar.html#%24%60
INIT (function)	A			Perl Functions							<section class="prog__container"><pre>INIT</pre><p>These compile phase keywords are documented in <span href="http://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END">BEGIN, UNITCHECK, CHECK, INIT and END in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/INIT.html
bit (definition)	A			Perl Glossary							<section class="prog__container"><p>An integer in the range from 0 to 1, inclusive. The smallest possible unit of information storage. An eighth of a <b>byte</b> or of a dollar. (The term “Pieces of Eight” comes from being able to split the old Spanish dollar into 8 bits, each of which still counted for money. That’s why a 25- cent piece today is still “two bits”.)</p></section>	http://perldoc.perl.org/perlglossary.html#bit
Invalid quantifier in {,} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The pattern looks like a {min,max} quantifier, but the min or max could not be parsed as a valid number - either it has leading zeroes, or it represents too big a number to cope with.  The &lt;-- HERE shows where in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-quantifier-in-%7b%2c%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Can't resolve method "%s" overloading "%s" in package "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F)(P) Error resolving overloading specified by a method name (as opposed to a subroutine reference): no such method callable via the package.  If the method name is <code class="inline">???</code>, this is an internal error.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-resolve-method-%22%25s%22-overloading-%22%25s%22-in-package-%22%25s%22
-I directory	A			Perl Command-Line Switches							<section class="prog__container"><p>Directories specified by <b>-I</b> are prepended to the search path for modules (<code class="inline"><span class="i">@INC</span></code> ).</p></section>	http://perldoc.perl.org/perlrun.html#*-I*_directory_
$- (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The number of lines left on the page of the currently selected output channel.</p><p>Mnemonic: lines_on_page - lines_printed.</p></section>	http://perldoc.perl.org/perlvar.html#%24-
getpeername (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>getpeername SOCKET</pre><p>Returns the packed sockaddr address of the other end of the SOCKET connection.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li>    <span class="i">$hersockaddr</span>    = <span class="l_k" href="http://perldoc.perl.org/functions/getpeername.html">getpeername</span><span class="s">(</span><span class="w">SOCK</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$port</span><span class="cm">,</span> <span class="i">$iaddr</span><span class="s">)</span> = <span class="i">sockaddr_in</span><span class="s">(</span><span class="i">$hersockaddr</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$herhostname</span>    = <span class="l_k" href="http://perldoc.perl.org/functions/gethostbyaddr.html">gethostbyaddr</span><span class="s">(</span><span class="i">$iaddr</span><span class="cm">,</span> <span class="w">AF_INET</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$herstraddr</span>     = <span class="i">inet_ntoa</span><span class="s">(</span><span class="i">$iaddr</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/functions/getpeername.html
Wide character in %s	A			Perl Diagnostics							<section class="prog__container"><p>(S utf8) Perl met a wide character (&gt;255) when it wasn&#39;t expecting one.  This warning is by default on for I/O (like print).  The easiest way to quiet this warning is simply to add the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  layer to the output, e.g. <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&#39;:utf8&#39;</span></code> .  Another way to turn off the warning is to add <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;utf8&#39;</span><span class="sc">;</span></code>  but that is often closer to cheating.  In general, you are supposed to explicitly mark the filehandle with an encoding, see <span href="http://perldoc.perl.org/open.html">open</span> and <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Wide-character-in-%25s
%s never introduced	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The symbol in question was declared but somehow went out of scope before it could possibly have been used.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-never-introduced
${^WIN32_SLOPPY_STAT} (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>If this variable is set to a true value, then <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat()</span></code> on Windows will not try to open the file.  This means that the link count cannot be determined and file attributes may be out of date if additional hardlinks to the file exist.  On the other hand, not opening the file is considerably faster, especially for files on network drives.</p><p>This variable could be set in the <i>sitecustomize.pl</i> file to configure the local Perl installation to use &quot;sloppy&quot; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat()</span></code> by default.  See the documentation for <b>-f</b> in <span href="http://perldoc.perl.org/perlrun.html#Command-Switches">perlrun</span> for more information about site customization.</p><p>This variable was added in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eWIN32_SLOPPY_STAT%7d
Parsing code internal error (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) Parsing code supplied by an extension violated the parser&#39;s API in a detectable way.</p></section>	http://perldoc.perl.org/perldiag.html#Parsing-code-internal-error-(%25s)
panic: gp_free failed to free glob pointer	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal routine used to clear a typeglob&#39;s entries tried repeatedly, but each time something re-created entries in the glob. Most likely the glob contains an object with a reference back to the glob and a destructor that adds a new object to the glob.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-gp_free-failed-to-free-glob-pointer
Global symbol "%s" requires explicit package name (did you forget to declare "my %s"?)	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;ve said &quot;use strict&quot; or &quot;use strict vars&quot;, which indicates  that all variables must either be lexically scoped (using &quot;my&quot; or &quot;state&quot;),  declared beforehand using &quot;our&quot;, or explicitly qualified to say  which package the global variable is in (using &quot;::&quot;).</p></section>	http://perldoc.perl.org/perldiag.html#Global-symbol-%22%25s%22-requires-explicit-package-name-(did-you-forget-to-declare-%22my-%25s%22%3f)
Out of memory!	A			Perl Diagnostics							<section class="prog__container"><p>(X) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request.  Perl has no option but to exit immediately.</p><p>At least in Unix you may be able to get past this by increasing your process datasize limits: in csh/tcsh use <code class="inline"><span class="w">limit</span></code>  and <code class="inline"><span class="w">limit</span> <span class="w">datasize</span> <span class="w">n</span></code>  (where <code class="inline"><span class="w">n</span></code>  is the number of kilobytes) to check the current limits and change them, and in ksh/bash/zsh use <code class="inline"><span class="w">ulimit</span> -<span class="w">a</span></code>  and <code class="inline"><span class="w">ulimit</span> -d <span class="w">n</span></code> , respectively.</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory!
I'm having trouble matching over more than one line. What's wrong?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Either you don&#39;t have more than one line in the string you&#39;re looking at (probably), or else you aren&#39;t using the correct modifier(s) on your pattern (possibly).</p><p>There are many ways to get multiline data into a string. If you want it to happen automatically while reading input, you&#39;ll want to set $/ (probably to &#39;&#39; for paragraphs or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> for the whole file) to allow you to read more than one line at a time.</p><p>Read <span href="http://perldoc.perl.org/perlre.html">perlre</span> to help you decide which of <code class="inline">/s</code> and <code class="inline">/m</code> (or both) you might want to use: <code class="inline">/s</code> allows dot to include newline, and <code class="inline">/m</code> allows caret and dollar to match next to a newline, not just at the end of the string. You do need to make sure that you&#39;ve actually got a multiline string in there.</p><p>For example, this program detects duplicate words, even when they span line breaks (but not paragraph ones). For this example, we don&#39;t need <code class="inline">/s</code> because we aren&#39;t using dot in a regular expression that we want to cross line boundaries. Neither do we need <code class="inline">/m</code> because we don&#39;t want caret or dollar to match at any point inside the record next to newlines. But it&#39;s imperative that $/ be set to something other than the default, or else we won&#39;t actually ever have a multiline record read in.</p><pre class="verbatim"><ol><li>    <span class="i">$/</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span>          <span class="c"># read in whole paragraph, not just one line</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="q">/\\b([\\w&#39;-]+)(\\s+\\g1)+\\b/gi</span> <span class="s">)</span> <span class="s">{</span>     <span class="c"># word starts alpha</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Duplicate $1 at paragraph $.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s some code that finds sentences that begin with &quot;From &quot; (which would be mangled by many mailers):</p><pre class="verbatim"><ol><li>    <span class="i">$/</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span>          <span class="c"># read in whole paragraph, not just one line</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="q">/^From /gm</span> <span class="s">)</span> <span class="s">{</span> <span class="c"># /m makes ^ match next to \\n</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;leading from in paragraph $.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s code that finds everything between START and END in a paragraph:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$/</span><span class="sc">;</span>          <span class="c"># read in whole file, not just one line or paragraph</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="q">/START(.*?)END/sgm</span> <span class="s">)</span> <span class="s">{</span> <span class="c"># /s makes . cross line boundaries</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$1\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#I'm-having-trouble-matching-over-more-than-one-line.-What's-wrong%3f
Net::POP3 (module)	A			Perl Standard Modules		[[Net::Netrc]]\n[[Net::Cmd]]\n[[IO::Socket::SSL]]					<section class="prog__container"><p>Net::POP3 - Post Office Protocol 3 Client class (RFC1939)</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::POP3</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Constructors</span></li><li>    <span class="i">$pop</span> = <span class="w">Net::POP3</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;pop3host&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$pop</span> = <span class="w">Net::POP3</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;pop3host&#39;</span><span class="cm">,</span> <span class="w">Timeout</span> <span class="cm">=&gt;</span> <span class="n">60</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$pop</span> = <span class="w">Net::POP3</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;pop3host&#39;</span><span class="cm">,</span> <span class="w">SSL</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">Timeout</span> <span class="cm">=&gt;</span> <span class="n">60</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$pop</span><span class="i">-&gt;login</span><span class="s">(</span><span class="i">$username</span><span class="cm">,</span> <span class="i">$password</span><span class="s">)</span> &gt; <span class="n">0</span><span class="s">)</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$msgnums</span> = <span class="i">$pop</span><span class="i">-&gt;list</span><span class="sc">;</span> <span class="c"># hashref of msgnum =&gt; size</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$msgnum</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%$msgnums</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$msg</span> = <span class="i">$pop</span><span class="i">-&gt;get</span><span class="s">(</span><span class="i">$msgnum</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">@$msg</span><span class="sc">;</span></li><li>        <span class="i">$pop</span><span class="i">-&gt;delete</span><span class="s">(</span><span class="i">$msgnum</span><span class="s">)</span><span class="sc">;</span></li><li>      <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$pop</span><span class="i">-&gt;quit</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/POP3.html
How do I find out which operating system I'm running under?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>The <code class="inline"><span class="i">$^O</span></code>  variable (<code class="inline"><span class="i">$OSNAME</span></code>  if you use <code class="inline"><span class="w">English</span></code> ) contains an indication of the name of the operating system (not its release number) that your perl binary was built for.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-find-out-which-operating-system-I'm-running-under%3f
Experimental "%s" subs not enabled	A			Perl Diagnostics							<section class="prog__container"><p>(F) To use lexical subs, you must first enable them:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;experimental::lexical_subs&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;lexical_subs&#39;</span><span class="sc">;</span></li><li><span name="foo"></span>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> sub <span class="m">foo</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Experimental-%22%25s%22-subs-not-enabled
panic: attempt to call %s in %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) One of the file test operators entered a code branch that calls an ACL related-function, but that function is not available on this platform.  Earlier checks mean that it should not be possible to enter this branch on this platform.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-attempt-to-call-%25s-in-%25s
Perl %s required--this is only %s, stopped	A			Perl Diagnostics							<section class="prog__container"><p>(F) The module in question uses features of a version of Perl more recent than the currently running version.  How long has it been since you upgraded, anyway?  See <span href="http://perldoc.perl.org/functions/require.html">require</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Perl-%25s-required--this-is-only-%25s%2c-stopped
No such hook: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You specified a signal hook that was not recognized by Perl. Currently, Perl accepts <code class="inline"><span class="w">__DIE__</span></code>  and <code class="inline"><span class="w">__WARN__</span></code>  as valid signal hooks.</p></section>	http://perldoc.perl.org/perldiag.html#No-such-hook%3a-%25s
How do I debug my Perl programs?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Before you do anything else, you can help yourself by ensuring that you let Perl tell you about problem areas in your code. By turning on warnings and strictures, you can head off many problems before they get too big. You can find out more about these in <span href="http://perldoc.perl.org/strict.html">strict</span> and <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span><span class="sc">;</span></li></ol></pre><p>Beyond that, the simplest debugger is the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> function. Use it to look at values as you run your program:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;The value is [$value]\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/Data/Dumper.html">Data::Dumper</span> module can pretty-print Perl data structures:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Data::Dumper</span> <span class="q">qw( Dumper )</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;The hash is &quot;</span> . <span class="i">Dumper</span><span class="s">(</span> \\<span class="i">%hash</span> <span class="s">)</span> . <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Perl comes with an interactive debugger, which you can start with the <code class="inline">-d</code>  switch. It&#39;s fully explained in <span href="http://perldoc.perl.org/perldebug.html">perldebug</span>.</p><p>If you&#39;d like a graphical user interface and you have <span href="http://search.cpan.org/perldoc/Tk">Tk</span>, you can use <code class="inline"><span class="w">ptkdb</span></code> . It&#39;s on CPAN and available for free.</p><p>If you need something much more sophisticated and controllable, Leon Brocard&#39;s <span href="http://search.cpan.org/perldoc/Devel::ebug">Devel::ebug</span> (which you can call with the <code class="inline">-<span class="w">D</span></code>  switch as <code class="inline">-<span class="w">Debug</span></code> ) gives you the programmatic hooks into everything you need to write your own (without too much pain and suffering).</p><p>You can also use a commercial debugger such as Affrus (Mac OS X), Komodo from Activestate (Windows and Mac OS X), or EPIC (most platforms).</p></section>	http://perldoc.perl.org/perlfaq3.html#How-do-I-debug-my-Perl-programs%3f
patch (definition)	A			Perl Glossary							<section class="prog__container"><p>To fix by applying one, as it were. In the realm of hackerdom, a listing of the differences between two versions of a program as might be applied by the <b>patch</b>(1) program when you want to fix a bug or upgrade your old version.</p></section>	http://perldoc.perl.org/perlglossary.html#patch
cos (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>cos EXPR<br>cos</pre><p>Returns the cosine of EXPR (expressed in radians).  If EXPR is omitted, takes the cosine of <code class="inline"><span class="i">$_</span></code> .</p><p>For the inverse cosine operation, you may use the <code class="inline"><span class="i">Math::Trig::acos</span><span class="s">(</span><span class="s">)</span></code>  function, or use this relation:</p><pre class="verbatim"><ol><li><span name="acos"></span>    sub <span class="m">acos</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/atan2.html">atan2</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sqrt.html">sqrt</span><span class="s">(</span><span class="n">1</span> - <span class="i">$_</span>[<span class="n">0</span>] * <span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span><span class="cm">,</span> <span class="i">$_</span>[<span class="n">0</span>] <span class="s">)</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/cos.html
attribute (definition)	A			Perl Glossary							<section class="prog__container"><p>A new feature that allows the declaration of <b>variables</b> and <b>subroutines</b> with modifiers, as in <code class="inline"><span name="foo"></span>sub <span class="m">foo</span> <span class="co">:</span> <span class="w">locked</span> <span class="w">method</span></code> . Also another name for an <b>instance variable</b> of an <b>object</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#attribute
oops: oopsAV	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) An internal warning that the grammar is screwed up.</p></section>	http://perldoc.perl.org/perldiag.html#oops%3a-oopsAV
goto must have label	A			Perl Diagnostics							<section class="prog__container"><p>(F) Unlike with &quot;next&quot; or &quot;last&quot;, you&#39;re not allowed to goto an unspecified destination.  See <span href="http://perldoc.perl.org/functions/goto.html">goto</span>.</p></section>	http://perldoc.perl.org/perldiag.html#goto-must-have-label
ExtUtils::Command (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Command - utilities to replace common UNIX commands in Makefiles etc.</p> <pre class="verbatim"><ol><li>  perl -MExtUtils::Command -e cat files... &gt; destination</li><li>  perl -MExtUtils::Command -e mv source... destination</li><li>  perl -MExtUtils::Command -e cp source... destination</li><li>  perl -MExtUtils::Command -e touch files...</li><li>  perl -MExtUtils::Command -e rm_f files...</li><li>  perl -MExtUtils::Command -e rm_rf directories...</li><li>  perl -MExtUtils::Command -e mkpath directories...</li><li>  perl -MExtUtils::Command -e eqtime source destination</li><li>  perl -MExtUtils::Command -e test_f file</li><li>  perl -MExtUtils::Command -e test_d directory</li><li>  perl -MExtUtils::Command -e chmod mode files...</li><li>  ...</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Command.html
Source filters apply only to byte streams	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to activate a source filter (usually by loading a source filter module) within a string passed to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>.  This is not permitted under the <code class="inline"><span class="w">unicode_eval</span></code>  feature.  Consider using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/evalbytes.html">evalbytes</span></code> instead.  See <span href="http://perldoc.perl.org/feature.html">feature</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Source-filters-apply-only-to-byte-streams
AutoSplit (module)	A			Perl Standard Modules							<section class="prog__container"><p>AutoSplit - split a package for autoloading</p> <pre class="verbatim"><ol><li> <span class="i">autosplit</span><span class="s">(</span><span class="i">$file</span><span class="cm">,</span> <span class="i">$dir</span><span class="cm">,</span> <span class="i">$keep</span><span class="cm">,</span> <span class="i">$check</span><span class="cm">,</span> <span class="i">$modtime</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="i">autosplit_lib_modules</span><span class="s">(</span><span class="i">@modules</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/AutoSplit.html
Sys::Syslog (module)	A			Perl Standard Modules		[[Log::Log4perl]]\n[[Log::Dispatch]]\n[[Log::Report]]\n[[http://www.opengroup.org/onlinepubs/000095399/basedefs/syslog.h.html]]\n[[http://www.gnu.org/software/libc/manual/html_node/Syslog.html]]\n[[http://docs.sun.com/app/docs/doc/816-5168/syslog-3c?a=view]]\n[[http://developer.apple.com/documentation/Darwin/Reference/ManPages/man3/syslog.3.html]]\n[[http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?coll=0650&db=man&fname=3c+syslog]]\n[[http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm]]\n[[http://docs.hp.com/en/B2355-60130/syslog.3C.html]]\n[[http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM]]\n[[http://stratadoc.stratus.com/vos/15.1.1/r502-01/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r502-01&file=ch5r502-01bi.html]]\n[[http://www.faqs.org/rfcs/rfc3164.html]]\n[[http://www.faqs.org/rfcs/rfc3195.html]]\n[[http://lexington.pm.org/meetings/022001.html]]\n[[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wes/wes/windows_event_log.asp]]\n[[Unix::Syslog]]					<section class="prog__container"><p>Sys::Syslog - Perl interface to the UNIX syslog(3) calls</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Sys::Syslog</span><span class="sc">;</span>                        <span class="c"># all except setlogsock()</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Sys::Syslog</span> <span class="q">qw(:standard :macros)</span><span class="sc">;</span>  <span class="c"># standard functions &amp; macros</span></li><li></li><li>    <span class="i">openlog</span><span class="s">(</span><span class="i">$ident</span><span class="cm">,</span> <span class="i">$logopt</span><span class="cm">,</span> <span class="i">$facility</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># don&#39;t forget this</span></li><li>    <span class="i">syslog</span><span class="s">(</span><span class="i">$priority</span><span class="cm">,</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">@args</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$oldmask</span> = <span class="i">setlogmask</span><span class="s">(</span><span class="i">$mask_priority</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">closelog</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Sys/Syslog.html
ExtUtils::Constant::Utils (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Constant::Utils - helper functions for ExtUtils::Constant</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Constant::Utils</span> <span class="q">qw (C_stringify)</span><span class="sc">;</span></li><li>    <span class="i">$C_code</span> = <span class="w">C_stringify</span> <span class="i">$stuff</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Constant/Utils.html
Attempt to pack pointer to temporary value	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) You tried to pass a temporary value (like the result of a function, or a computed expression) to the &quot;p&quot; pack() template.  This means the result contains a pointer to a location that could become invalid anytime, even before the end of the current statement.  Use literals or global values as arguments to the &quot;p&quot; pack() template to avoid this warning.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-pack-pointer-to-temporary-value
each (function)	A			Perl Functions\nPerl Functions for real %HASHes							<section class="prog__container"><pre>each HASH<br>each ARRAY<br>each EXPR</pre><p>When called on a hash in list context, returns a 2-element list consisting of the key and value for the next element of a hash.  In Perl 5.12 and later only, it will also return the index and value for the next element of an array so that you can iterate over it; older Perls consider this a syntax error.  When called in scalar context, returns only the key (not the value) in a hash, or the index in an array.</p><p>Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.  Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> may be deleted without changing the order.  So long as a given hash is unmodified you may rely on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> to repeatedly return the same order as each other.  See <span href="http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks">Algorithmic Complexity Attacks in perlsec</span> for details on why hash order is randomized.  Aside from the guarantees provided here the exact details of Perl&#39;s hash algorithm and the hash traversal order are subject to change in any release of Perl.</p><p>After <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> has returned all entries from the hash or array, the next call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> returns the empty list in list context and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> in scalar context; the next call following <i>that</i> one restarts iteration. Each hash or array has its own internal iterator, accessed by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code>.  The iterator is implicitly reset when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> has reached the end as just described; it can be explicitly reset by calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> on the hash or array.  If you add or delete a hash&#39;s elements while iterating over it, the effect on the iterator is unspecified; for example, entries may be skipped or duplicated--so don&#39;t do that.  Exception: It is always safe to delete the item most recently returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code>, so the following code works properly:</p><pre class="verbatim"><ol><li>        while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%hash</span><span class="s">)</span> <span class="s">{</span></li><li>          <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$key</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>          <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$hash</span>{<span class="i">$key</span>}<span class="sc">;</span>   <span class="c"># This is safe</span></li><li>        <span class="s">}</span></li></ol></pre><p>Tied hashes may have a different ordering behaviour to perl&#39;s hash implementation.</p><p>This prints out your environment like the printenv(1) program, but in a different order:</p><pre class="verbatim"><ol><li>    while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span><span class="i">$value</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%ENV</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$key=$value\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> can take a scalar EXPR, which must hold a reference to an unblessed hash or array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> is considered highly experimental. The exact behaviour may change in a future version of Perl.</p><pre class="verbatim"><ol><li>    while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span><span class="i">$value</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">$hashref</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>As of Perl 5.18 you can use a bare <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> in a <code class="inline">while</code>  loop, which will set <code class="inline"><span class="i">$_</span></code>  on every iteration.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%ENV</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_=$ENV{$_}\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.012</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on arrays</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on scalars (experimental)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.018</span><span class="sc">;</span>&#09;<span class="c"># so each assigns to $_ in a lone while test</span></li></ol></pre><p>See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>.</p></section>	http://perldoc.perl.org/functions/each.html
ge (function)	A			Perl Functions							<section class="prog__container"><pre>ge</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/ge.html
How do I flush/unbuffer an output filehandle? Why must I do this?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You might like to read Mark Jason Dominus&#39;s &quot;Suffering From Buffering&quot; at <span href="http://perl.plover.com/FAQs/Buffering.html">http://perl.plover.com/FAQs/Buffering.html</span> .</p><p>Perl normally buffers output so it doesn&#39;t make a system call for every bit of output. By saving up output, it makes fewer expensive system calls. For instance, in this little bit of code, you want to print a dot to the screen for every line you process to watch the progress of your program. Instead of seeing a dot for every line, Perl buffers the output and you have a long wait before you see a row of 50 dots all at once:</p><pre class="verbatim"><ol><li>    <span class="c"># long wait, then row of dots all at once</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> ++<span class="i">$count</span> % <span class="n">50</span><span class="sc">;</span></li><li></li><li>        <span class="c">#... expensive line processing operations</span></li><li>    <span class="s">}</span></li></ol></pre><p>To get around this, you have to unbuffer the output filehandle, in this case, <code class="inline"><span class="w">STDOUT</span></code> . You can set the special variable <code class="inline"><span class="i">$|</span></code>  to a true value (mnemonic: making your filehandles &quot;piping hot&quot;):</p><pre class="verbatim"><ol><li>    <span class="i">$|</span>++<span class="sc">;</span></li><li></li><li>    <span class="c"># dot shown immediately</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> ++<span class="i">$count</span> % <span class="n">50</span><span class="sc">;</span></li><li></li><li>        <span class="c">#... expensive line processing operations</span></li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="i">$|</span></code>  is one of the per-filehandle special variables, so each filehandle has its own copy of its value. If you want to merge standard output and standard error for instance, you have to unbuffer each (although STDERR might be unbuffered by default):</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$previous_default</span> = <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># save previous default</span></li><li>        <span class="i">$|</span>++<span class="sc">;</span>                                   <span class="c"># autoflush STDOUT</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="w">STDERR</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$|</span>++<span class="sc">;</span>                                   <span class="c"># autoflush STDERR, to be sure</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$previous_default</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># restore previous default</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># now should alternate . and +</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="n">1</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span> <span class="n">1</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDOUT</span> <span class="q">&quot;.&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;+&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDOUT</span> <span class="q">&quot;\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> ++<span class="i">$count</span> % <span class="n">25</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Besides the <code class="inline"><span class="i">$|</span></code>  special variable, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code> to give your filehandle a <code class="inline"><span class="j">:</span><span class="w">unix</span></code>  layer, which is unbuffered:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span><span class="s">(</span> <span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&quot;:unix&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="n">1</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span> <span class="n">1</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;.&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> ++<span class="i">$count</span> % <span class="n">50</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>For more information on output layers, see the entries for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code> and <span href="http://perldoc.perl.org/open.html">open</span> in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>, and the <span href="http://perldoc.perl.org/PerlIO.html">PerlIO</span> module documentation.</p><p>If you are using <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span> or one of its subclasses, you can call the <code class="inline"><span class="w">autoflush</span></code>  method to change the settings of the filehandle:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Handle</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$io_fh</span> <span class="s">)</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="q">&quot;output.txt&quot;</span><span class="sc">;</span></li><li>    <span class="i">$io_fh</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span> objects also have a <code class="inline"><span class="w">flush</span></code>  method. You can flush the buffer any time you want without auto-buffering</p><pre class="verbatim"><ol><li>    <span class="i">$io_fh</span><span class="i">-&gt;flush</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-flush%2funbuffer-an-output-filehandle%3f-Why-must-I-do-this%3f
How do I remove consecutive pairs of characters?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You can use the substitution operator to find pairs of characters (or runs of characters) and replace them with a single instance. In this substitution, we find a character in <code class="inline">(.)</code>. The memory parentheses store the matched character in the back-reference <code class="inline">\\<span class="w">g1</span></code>  and we use that to require that the same thing immediately follow it. We replace that part of the string with the character in <code class="inline"><span class="i">$1</span></code> .</p><pre class="verbatim"><ol><li>    <span class="q">s/(.)\\g1/$1/g</span><span class="sc">;</span></li></ol></pre><p>We can also use the transliteration operator, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code>. In this example, the search list side of our <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code> contains nothing, but the <code class="inline"><span class="w">c</span></code>  option complements that so it contains everything. The replacement list also contains nothing, so the transliteration is almost a no-op since it won&#39;t do any replacements (or more exactly, replace the character with itself). However, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s</span></code> option squashes duplicated and consecutive characters in the string so a character does not show up next to itself</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$str</span> = <span class="q">&#39;Haarlem&#39;</span><span class="sc">;</span>   <span class="c"># in the Netherlands</span></li><li>    <span class="i">$str</span> =~ <span class="q">tr///cs</span><span class="sc">;</span>       <span class="c"># Now Harlem, like in New York</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-remove-consecutive-pairs-of-characters%3f
primary maintainer (definition)	A			Perl Glossary							<section class="prog__container"><p>The author that PAUSE allows to assign <b>co-maintainer</b> permissions to a <b>namespace</b>. A primary maintainer can give up this distinction by assigning it to another PAUSE author. See Camel chapter 19, “CPAN”.</p></section>	http://perldoc.perl.org/perlglossary.html#primary-maintainer
: Programming Tools	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section of the FAQ answers questions related to programmer tools and programming support.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq3-manpage%3a-Programming-Tools
panic: leave_scope inconsistency %u	A			Perl Diagnostics							<section class="prog__container"><p>(P) The savestack probably got out of sync.  At least, there was an invalid enum on the top of it.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-leave_scope-inconsistency-%25u
In '(?...)', the '(' and '?' must be adjacent in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The two-character sequence <code class="inline"><span class="q">&quot;(?&quot;</span></code>  in this context in a regular expression pattern should be an indivisible token, with nothing intervening between the <code class="inline"><span class="q">&quot;(&quot;</span></code>  and the <code class="inline"><span class="q">&quot;?&quot;</span></code> , but you separated them with whitespace.</p></section>	http://perldoc.perl.org/perldiag.html#In-'(%3f...)'%2c-the-'('-and-'%3f'-must-be-adjacent-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Sequence (?{...}) not terminated with ')'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The end of the perl code contained within the {...} must be followed immediately by a &#39;)&#39;.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%7b...%7d)-not-terminated-with-')'
msgrcv (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>msgrcv ID,VAR,SIZE,TYPE,FLAGS</pre><p>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE.  Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message.  This packing may be opened with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;l! a*&quot;</span><span class="s">)</span></code> . Taints the variable.  Returns true if successful, false  on error.  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span> and the documentation for <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::SysV::Msg</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#msgrcv">msgrcv in perlport</span>.</p></section>	http://perldoc.perl.org/functions/msgrcv.html
CPAN::Kwalify (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Kwalify - Interface between CPAN.pm and Kwalify.pm</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">CPAN::Kwalify</span><span class="sc">;</span></li><li>  <span class="i">validate</span><span class="s">(</span><span class="i">$schema_name</span><span class="cm">,</span> <span class="i">$data</span><span class="cm">,</span> <span class="i">$file</span><span class="cm">,</span> <span class="i">$doc</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/CPAN/Kwalify.html
Postfix dereference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::postderef) This warning is emitted if you use the experimental postfix dereference syntax.  Simply suppress the warning if you want to use the feature, but know that in doing so you are taking the risk of using an experimental feature which may change or be removed in a future Perl version:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::postderef&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;postderef&quot;</span><span class="cm">,</span> <span class="q">&quot;postderef_qq&quot;</span><span class="sc">;</span></li><li>    <span class="i">$ref</span><span class="i">-&gt;$</span>*<span class="sc">;</span></li><li>    <span class="i">$aref</span>-&gt;<span class="i">@*</span><span class="sc">;</span></li><li>    <span class="i">$aref</span>-&gt;<span class="i">@[</span><span class="i">@indices</span>]<span class="sc">;</span></li><li>    ... <span class="w">etc</span> ...</li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Postfix-dereference-is-experimental
panic: sv_insert, midend=%p, bigend=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) The sv_insert() routine was told to remove more string than there was string.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-sv_insert%2c-midend%3d%25p%2c-bigend%3d%25p
B<text>	A			Perl POD Formatting Codes							<section class="prog__container"><p>Used for switches (&quot;<code class="inline"><span class="w">perl&#39;s</span> <span class="w">B</span><span class="q">&lt;-n&gt;</span> switch</code> &quot;), programs (&quot;<code class="inline"><span class="w">some</span> <span class="w">systems</span> <span class="w">provide</span> <span class="w">a</span> <span class="w">B</span><span class="q">&lt;chfn&gt;</span> for <span class="w">that</span></code> &quot;), emphasis (&quot;<code class="inline"><span class="w">be</span> <span class="w">B</span><span class="q">&lt;careful!&gt;</span></code> &quot;), and so on (&quot;<code class="inline">and <span class="w">that</span> <span class="w">feature</span> <span class="w">is</span> <span class="w">known</span> <span class="w">as</span> <span class="w">B</span><span class="q">&lt;autovivification&gt;</span></code> &quot;).</p></section>	http://perldoc.perl.org/perlpod.html#B%3ctext%3e----bold-text
static scoping (definition)	A			Perl Glossary							<section class="prog__container"><p>No such thing. See <b>lexical scoping</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#static-scoping
TAP::Parser::ResultFactory (module)	A			Perl Standard Modules		[[TAP::Parser]]\n[[TAP::Parser::Result]]\n[[TAP::Parser::Grammar]]					<section class="prog__container"><p>TAP::Parser::ResultFactory - Factory for creating TAP::Parser output objects</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::ResultFactory</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$token</span>   = <span class="s">{</span>...<span class="s">}</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$factory</span> = <span class="w">TAP::Parser::ResultFactory</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span>  = <span class="i">$factory</span><span class="i">-&gt;make_result</span><span class="s">(</span> <span class="i">$token</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/ResultFactory.html
What's the difference between calling a function as &foo and foo()?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Calling a subroutine as <code class="inline"><span class="i">&amp;foo</span></code>  with no trailing parentheses ignores the prototype of <code class="inline"><span class="w">foo</span></code>  and passes it the current value of the argument list, <code class="inline"><span class="i">@_</span></code> . Here&#39;s an example; the <code class="inline"><span class="w">bar</span></code>  subroutine calls <code class="inline"><span class="i">&amp;foo</span></code> , which prints its arguments list:</p><pre class="verbatim"><ol><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Args in foo are: @_\\n&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li><span name="bar"></span>    sub <span class="m">bar</span> <span class="s">{</span> <span class="i">&amp;foo</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li>    <span class="i">bar</span><span class="s">(</span> <span class="q">&quot;a&quot;</span><span class="cm">,</span> <span class="q">&quot;b&quot;</span><span class="cm">,</span> <span class="q">&quot;c&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>When you call <code class="inline"><span class="w">bar</span></code>  with arguments, you see that <code class="inline"><span class="w">foo</span></code>  got the same <code class="inline"><span class="i">@_</span></code> :</p><pre class="verbatim"><ol><li>    <span class="w">Args</span> <span class="w">in</span> <span class="w">foo</span> <span class="w">are</span><span class="co">:</span> <span class="w">a</span> <span class="w">b</span> <span class="w">c</span></li></ol></pre><p>Calling the subroutine with trailing parentheses, with or without arguments, does not use the current <code class="inline"><span class="i">@_</span></code> . Changing the example to put parentheses after the call to <code class="inline"><span class="w">foo</span></code>  changes the program:</p><pre class="verbatim"><ol><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Args in foo are: @_\\n&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li><span name="bar"></span>    sub <span class="m">bar</span> <span class="s">{</span> <span class="i">&amp;foo</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li>    <span class="i">bar</span><span class="s">(</span> <span class="q">&quot;a&quot;</span><span class="cm">,</span> <span class="q">&quot;b&quot;</span><span class="cm">,</span> <span class="q">&quot;c&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Now the output shows that <code class="inline"><span class="w">foo</span></code>  doesn&#39;t get the <code class="inline"><span class="i">@_</span></code>  from its caller.</p><pre class="verbatim"><ol><li>    <span class="w">Args</span> <span class="w">in</span> <span class="w">foo</span> <span class="w">are</span><span class="co">:</span></li></ol></pre><p>However, using <code class="inline"><span class="i">&amp;</span></code>  in the call still overrides the prototype of <code class="inline"><span class="w">foo</span></code>  if present:</p><pre class="verbatim"><ol><li><span name="foo"></span>    sub <span class="m">foo ($$$)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Args infoo are: @_\\n&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li><span name="bar_1"></span>    sub <span class="m">bar_1</span> <span class="s">{</span> <span class="i">&amp;foo</span><span class="sc">;</span> <span class="s">}</span></li><li><span name="bar_2"></span>    sub <span class="m">bar_2</span> <span class="s">{</span> <span class="i">&amp;foo</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li><span name="bar_3"></span>    sub <span class="m">bar_3</span> <span class="s">{</span> <span class="i">foo</span><span class="s">(</span> <span class="i">$_</span>[<span class="n">0</span>]<span class="cm">,</span> <span class="i">$_</span>[<span class="n">1</span>]<span class="cm">,</span> <span class="i">$_</span>[<span class="n">2</span>] <span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li>    <span class="c"># sub bar_4 { foo(); }</span></li><li>    <span class="c"># bar_4 doesn&#39;t compile: &quot;Not enough arguments for main::foo at ...&quot;</span></li><li></li><li>    <span class="i">bar_1</span><span class="s">(</span> <span class="q">&quot;a&quot;</span><span class="cm">,</span> <span class="q">&quot;b&quot;</span><span class="cm">,</span> <span class="q">&quot;c&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Args in foo are: a b c</span></li><li></li><li>    <span class="i">bar_2</span><span class="s">(</span> <span class="q">&quot;a&quot;</span><span class="cm">,</span> <span class="q">&quot;b&quot;</span><span class="cm">,</span> <span class="q">&quot;c&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Args in foo are:</span></li><li></li><li>    <span class="i">bar_3</span><span class="s">(</span> <span class="q">&quot;a&quot;</span><span class="cm">,</span> <span class="q">&quot;b&quot;</span><span class="cm">,</span> <span class="q">&quot;c&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Args in foo are: a b c</span></li></ol></pre><p>The main use of the <code class="inline"><span class="i">@_</span></code>  pass-through feature is to write subroutines whose main job it is to call other subroutines for you. For further details, see <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#What's-the-difference-between-calling-a-function-as-%26foo-and-foo()%3f
How do I verify a credit card checksum?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Get the <span href="http://search.cpan.org/perldoc/Business::CreditCard">Business::CreditCard</span> module from CPAN.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-verify-a-credit-card-checksum%3f
${^WARNING_BITS} (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>The current set of warning checks enabled by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  pragma. It has the same scoping as the <code class="inline"><span class="i">$^H</span></code>  and <code class="inline"><span class="i">%^H</span></code>  variables.  The exact values are considered internal to the <span href="http://perldoc.perl.org/warnings.html">warnings</span> pragma and may change between versions of Perl.</p><p>This variable was added in Perl v5.6.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eWARNING_BITS%7d
hash (definition)	A			Perl Glossary							<section class="prog__container"><p>An unordered association of <b>key</b>/<b>value</b> pairs, stored such that you can easily use a string <b>key</b> to look up its associated data <b>value</b>. This glossary is like a hash, where the word to be defined is the key and the definition is the value. A hash is also sometimes septisyllabically called an “associative array”, which is a pretty good reason for simply calling it a “hash” instead.</p></section>	http://perldoc.perl.org/perlglossary.html#hash
Type of arg %d to %s must be %s (not %s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) This function requires the argument in that position to be of a certain type.  Arrays must be @NAME or <code class="inline"><span class="i">@</span>{<span class="w">EXPR</span>}</code> .  Hashes must be %NAME or <code class="inline"><span class="i">%</span>{<span class="w">EXPR</span>}</code> .  No implicit dereferencing is allowed--use the {EXPR} forms as an explicit dereference.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Type-of-arg-%25d-to-%25s-must-be-%25s-(not-%25s)
Pod::Perldoc::GetOptsOO (module)	A			Perl Standard Modules		[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::GetOptsOO - Customized option parser for Pod::Perldoc</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Perldoc::GetOptsOO</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">Pod::Perldoc::GetOptsOO::getopts</span><span class="s">(</span> <span class="i">$obj</span><span class="cm">,</span> \\<span class="i">@args</span><span class="cm">,</span> <span class="i">$truth</span> <span class="s">)</span></li><li>       or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;wrong usage&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/GetOptsOO.html
grep (definition)	A			Perl Glossary							<section class="prog__container"><p>Originally from the old Unix editor command for “Globally search for a Regular Expression and Print it”, now used in the general sense of any kind of search, especially text searches. Perl has a built-in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> function that searches a list for elements matching any given criterion, whereas the <b>grep</b>(1) program searches for lines matching a <b>regular expression</b> in one or more files.</p></section>	http://perldoc.perl.org/perlglossary.html#grep
status (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>value</b> returned to the parent <b>process</b> when one of its child processes dies. This value is placed in the special variable <code class="inline"><span class="i">$?</span></code> . Its upper eight <b>bits</b> are the exit status of the defunct process, and its lower eight bits identify the signal (if any) that the process died from. On Unix systems, this status value is the same as the status word returned by <i>wait</i>(2). See <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> in Camel chapter 27, “Functions”.</p></section>	http://perldoc.perl.org/perlglossary.html#status
iterator (definition)	A			Perl Glossary							<section class="prog__container"><p>A special programming gizmo that keeps track of where you are in something that you’re trying to iterate over. The <code class="inline">foreach</code>  loop in Perl contains an iterator; so does a hash, allowing you to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> through it.</p></section>	http://perldoc.perl.org/perlglossary.html#iterator
FindBin (module)	A			Perl Standard Modules							<section class="prog__container"><p>FindBin - Locate directory of original perl script</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FindBin</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="q">&quot;$FindBin::Bin/../lib&quot;</span><span class="sc">;</span></li><li></li><li> or</li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FindBin</span> <span class="q">qw($Bin)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="q">&quot;$Bin/../lib&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/FindBin.html
How do I tell the difference between errors from the shell and perl?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(answer contributed by brian d foy)</p><p>When you run a Perl script, something else is running the script for you, and that something else may output error messages. The script might emit its own warnings and error messages. Most of the time you cannot tell who said what.</p><p>You probably cannot fix the thing that runs perl, but you can change how perl outputs its warnings by defining a custom warning and die functions.</p><p>Consider this script, which has an error you may not notice immediately.</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/locl/bin/perl</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Hello World\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>I get an error when I run this from my shell (which happens to be bash). That may look like perl forgot it has a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print()</span></code> function, but my shebang line is not the path to perl, so the shell runs the script, and I get the error.</p><pre class="verbatim"><ol><li>    <span class="i">$ .</span>/<span class="w">test</span></li><li>    .<span class="q">/test: line 3: print: command not found</span></li></ol></pre><p>A quick and dirty fix involves a little bit of code, but this may be all you need to figure out the problem.</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl -w</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="i">$SIG</span>{<span class="w">__WARN__</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span><span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;Perl: &quot;</span><span class="cm">,</span> <span class="i">@_</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span></li><li>        <span class="i">$SIG</span>{<span class="w">__DIE__</span>}  = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span><span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;Perl: &quot;</span><span class="cm">,</span> <span class="i">@_</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span> <span class="n">1</span><span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$a</span> = <span class="n">1</span> + <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>    <span class="i">$x</span> / <span class="n">0</span><span class="sc">;</span></li><li><span name="__END__"></span>    __END__</li></ol></pre><p>The perl message comes out with &quot;Perl&quot; in front. The <code class="inline">BEGIN</code>  block works at compile time so all of the compilation errors and warnings get the &quot;Perl:&quot; prefix too.</p><pre class="verbatim"><ol><li>    <span class="j">Perl:</span> <span class="w">Useless</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">of</span> <span class="w">division</span> <span class="s">(</span><span class="q">/) in void context at ./</span><span class="w">test</span> <span class="w">line</span> <span class="n">9.</span></li><li>    <span class="w">Perl</span><span class="co">:</span> <span class="w">Name</span> <span class="q">&quot;main::a&quot;</span> <span class="w">used</span> <span class="w">only</span> <span class="w">once</span><span class="co">:</span> <span class="w">possible</span> <span class="w">typo</span> <span class="w">at</span> .<span class="q">/test line 8.</span></li><li>    <span class="q">    Perl: Name &quot;main::x&quot; used only once: possible typo at ./</span><span class="w">test</span> <span class="w">line</span> <span class="n">9.</span></li><li>    <span class="w">Perl</span><span class="co">:</span> <span class="w">Use</span> <span class="w">of</span> <span class="w">uninitialized</span> <span class="w">value</span> <span class="w">in</span> <span class="w">addition</span> <span class="s">(</span>+<span class="s">)</span> <span class="w">at</span> .<span class="q">/test line 8.</span></li><li>    <span class="q">    Perl: Use of uninitialized value in division (/</span><span class="s">)</span> <span class="w">at</span> .<span class="q">/test line 9.</span></li><li>    <span class="q">    Perl: Illegal division by zero at ./</span><span class="w">test</span> <span class="w">line</span> <span class="n">9.</span></li><li>    <span class="w">Perl</span><span class="co">:</span> <span class="w">Illegal</span> <span class="w">division</span> <span class="w">by</span> <span class="w">zero</span> <span class="w">at</span> -e <span class="w">line</span> <span class="n">3.</span></li></ol></pre><p>If I don&#39;t see that &quot;Perl:&quot;, it&#39;s not from perl.</p><p>You could also just know all the perl errors, and although there are some people who may know all of them, you probably don&#39;t. However, they all should be in the <span href="http://perldoc.perl.org/perldiag.html">perldiag</span> manpage. If you don&#39;t find the error in there, it probably isn&#39;t a perl error.</p><p>Looking up every message is not the easiest way, so let perl to do it for you. Use the diagnostics pragma with turns perl&#39;s normal messages into longer discussions on the topic.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">diagnostics</span><span class="sc">;</span></li></ol></pre><p>If you don&#39;t get a paragraph or two of expanded discussion, it might not be perl&#39;s message.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-tell-the-difference-between-errors-from-the-shell-and-perl%3f
PerlIO::via::QuotedPrint (module)	A			Perl Standard Modules		[[PerlIO::via]]\n[[MIME::QuotedPrint]]\n[[PerlIO::via::Base64]]\n[[PerlIO::via::MD5]]\n[[PerlIO::via::StripHTML]]\n[[PerlIO::via::Rotate]]					<section class="prog__container"><p>PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">PerlIO::via::QuotedPrint</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span><span class="cm">,</span> <span class="q">&#39;&lt;:via(QuotedPrint)&#39;</span><span class="cm">,</span> <span class="q">&#39;file.qp&#39;</span> <span class="s">)</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open file.qp for reading: $!\\n&quot;</span><span class="sc">;</span></li><li> </li><li> <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out</span><span class="cm">,</span> <span class="q">&#39;&gt;:via(QuotedPrint)&#39;</span><span class="cm">,</span> <span class="q">&#39;file.qp&#39;</span> <span class="s">)</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open file.qp for writing: $!\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/PerlIO/via/QuotedPrint.html
Possible unintended interpolation of $\ in regex	A			Perl Diagnostics							<section class="prog__container"><p>(W ambiguous) You said something like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/$\\/</span></code> in a regex. The regex <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/foo$\\s+bar/m</span></code> translates to: match the word &#39;foo&#39;, the output record separator (see <span href="http://perldoc.perl.org/perlvar.html#%24%5c">$\\ in perlvar</span>) and the letter &#39;s&#39; (one time or more) followed by the word &#39;bar&#39;.</p><p>If this is what you intended then you can silence the warning by using  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/${\\}/</span></code> (for example: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/foo${\\}s+bar/</span></code>).</p><p>If instead you intended to match the word &#39;foo&#39; at the end of the line followed by whitespace and the word &#39;bar&#39; on the next line then you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/$(?)\\/</span></code> (for example: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/foo$(?)\\s+bar/</span></code>).</p></section>	http://perldoc.perl.org/perldiag.html#Possible-unintended-interpolation-of-%24%5c-in-regex
Zero length \N{} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Named Unicode character escapes (<code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code> ) may return a zero-length sequence.  Such an escape was used in an extended character class, i.e. <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code> , which is not permitted.  Check that the correct escape has been used, and the correct charnames handler is in scope.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Zero-length-%5cN%7b%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Bad evalled substitution pattern	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;ve used the <code class="inline">/e</code> switch to evaluate the replacement for a substitution, but perl found a syntax error in the code to evaluate, most likely an unexpected right brace &#39;}&#39;.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-evalled-substitution-pattern
-S	A			Perl Command-Line Switches							<section class="prog__container"><p>makes Perl use the PATH environment variable to search for the program unless the name of the program contains path separators.</p><p>On some platforms, this also makes Perl append suffixes to the filename while searching for it.  For example, on Win32 platforms, the &quot;.bat&quot; and &quot;.cmd&quot; suffixes are appended if a lookup for the original name fails, and if the name does not already end in one of those suffixes.  If your Perl was compiled with <code class="inline"><span class="w">DEBUGGING</span></code>  turned on, using the <b>-Dp</b> switch to Perl shows how the search progresses.</p><p>Typically this is used to emulate <code class="inline"><span class="c">#!</span></code>  startup on platforms that don&#39;t support <code class="inline"><span class="c">#!</span></code> .  It&#39;s also convenient when debugging a script that uses <code class="inline"><span class="c">#!</span></code> , and is thus normally found by the shell&#39;s $PATH search mechanism.</p><p>This example works on many platforms that have a shell compatible with Bourne shell:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;exec /usr/bin/perl -wS $0 ${1+&quot;$@&quot;}&#39;</span></li><li>&#09;    if <span class="i">$running_under_some_shell</span><span class="sc">;</span></li></ol></pre><p>The system ignores the first line and feeds the program to <i>/bin/sh</i>, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter.  On some systems $0 doesn&#39;t always contain the full pathname, so the <b>-S</b> tells Perl to search for the program if necessary.  After Perl locates the program, it parses the lines and ignores them because the variable $running_under_some_shell is never true.  If the program will be interpreted by csh, you will need to replace <code class="inline"><span class="i">$</span>{<span class="n">1</span>+<span class="q">&quot;$@&quot;</span>}</code>  with <code class="inline"><span class="i">$*</span></code> , even though that doesn&#39;t understand embedded spaces (and such) in the argument list.  To start up <i>sh</i> rather than <i>csh</i>, some systems may have to replace the <code class="inline"><span class="c">#!</span></code>  line with a line containing just a colon, which will be politely ignored by Perl.  Other systems can&#39;t control that, and need a totally devious construct that will work under any of <i>csh</i>, <i>sh</i>, or Perl, such as the following:</p><pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;(exit $?0)&#39;</span> &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;exec perl -wS $0 ${1+&quot;$@&quot;}&#39;</span></li><li>&#09;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&#39;exec /usr/bin/perl -wS $0 $argv:q&#39;</span></li><li>&#09;&#09;if <span class="i">$running_under_some_shell</span><span class="sc">;</span></li></ol></pre><p>If the filename supplied contains directory separators (and so is an absolute or relative pathname), and if that file is not found, platforms that append file extensions will do so and try to look for the file with those extensions added, one by one.</p><p>On DOS-like platforms, if the program does not contain directory separators, it will first be searched for in the current directory before being searched for on the PATH.  On Unix platforms, the program will be searched for strictly on the PATH.</p></section>	http://perldoc.perl.org/perlrun.html#*-S*
cluster (definition)	A			Perl Glossary							<section class="prog__container"><p>A parenthesized <b>subpattern</b> used to group parts of a <b>regular expression</b> into a single <b>atom</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#cluster
Odd number of elements in hash assignment	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You specified an odd number of elements to initialize a hash, which is odd, because hashes come in key/value pairs.</p></section>	http://perldoc.perl.org/perldiag.html#Odd-number-of-elements-in-hash-assignment
minimalism (definition)	A			Perl Glossary							<section class="prog__container"><p>The belief that “small is beautiful”. Paradoxically, if you say something in a small language, it turns out big, and if you say it in a big language, it turns out small. Go figure.</p></section>	http://perldoc.perl.org/perlglossary.html#minimalism
Unexpected character in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ z ])</span></li></ol></pre><p>Within <code class="inline"><span class="s">(</span><span class="q">?[ ])</span></code> , no literal characters are allowed unless they are within an inner pair of square brackets, like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ z ] ])</span></li></ol></pre><p>Another possibility is that you forgot a backslash.  Perl isn&#39;t smart enough to figure out what you really meant.</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-character-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
How do I fetch an HTML file?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Use the libwww-perl distribution. The <span href="http://search.cpan.org/perldoc/LWP::Simple">LWP::Simple</span> module can fetch web resources and give their content back to you as a string:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">LWP::Simple</span> <span class="q">qw(get)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$html</span> = <span class="i">get</span><span class="s">(</span> <span class="q">&quot;<span href="http://www.example.com/index.html">http://www.example.com/index.html</span>&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>It can also store the resource directly in a file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">LWP::Simple</span> <span class="q">qw(getstore)</span><span class="sc">;</span></li><li></li><li>    <span class="i">getstore</span><span class="s">(</span> <span class="q">&quot;<span href="http://www.example.com/index.html">http://www.example.com/index.html</span>&quot;</span><span class="cm">,</span> <span class="q">&quot;foo.html&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you need to do something more complicated, you can use <span href="http://search.cpan.org/perldoc/LWP::UserAgent">LWP::UserAgent</span> module to create your own user-agent (e.g. browser) to get the job done. If you want to simulate an interactive web browser, you can use the <span href="http://search.cpan.org/perldoc/WWW::Mechanize">WWW::Mechanize</span> module.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-fetch-an-HTML-file%3f
default (function)	A			Perl Functions							<section class="prog__container"><pre>default</pre><p>These flow-control keywords related to the experimental switch feature are documented in <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/default.html
How can I get a binary version of Perl?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>See <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2fports%2f">CPAN Ports</span></p></section>	http://perldoc.perl.org/perlfaq2.html#How-can-I-get-a-binary-version-of-Perl%3f
IO layers (like '%s') unavailable	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your Perl has not been configured to have PerlIO, and therefore you cannot use IO layers.  To have PerlIO, Perl must be configured with &#39;useperlio&#39;.</p></section>	http://perldoc.perl.org/perldiag.html#IO-layers-(like-'%25s')-unavailable
interpolation (definition)	A			Perl Glossary							<section class="prog__container"><p>The insertion of a scalar or list value somewhere in the middle of another value, such that it appears to have been there all along. In Perl, variable interpolation happens in double-quoted strings and patterns, and list interpolation occurs when constructing the list of values to pass to a list operator or other such construct that takes a <i><code class="inline"><span class="w">LIST</span></code> </i>.</p></section>	http://perldoc.perl.org/perlglossary.html#interpolation
The 'unique' attribute may only be applied to 'our' variables	A			Perl Diagnostics							<section class="prog__container"><p>(F) This attribute was never supported on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span></code> declarations.</p></section>	http://perldoc.perl.org/perldiag.html#The-'unique'-attribute-may-only-be-applied-to-'our'-variables
I18N::LangTags::Detect (module)	A			Perl Standard Modules		[[I18N::LangTags]]\n[[Win32::Locale]]\n[[Locale::Maketext]]					<section class="prog__container"><p>I18N::LangTags::Detect - detect the user&#39;s language preferences</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::LangTags::Detect</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@user_wants</span> = <span class="i">I18N::LangTags::Detect::detect</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/I18N/LangTags/Detect.html
Binary "-" operator	A			Perl Operators\nPerl Additive Operators							<section class="prog__container">Binary &quot;-&quot; returns the difference of two numbers.</section>	http://perldoc.perl.org/perlop.html#Additive-Operators
delete (function)	A			Perl Functions\nPerl Functions for real %HASHes							<section class="prog__container"><pre>delete EXPR</pre><p>Given an expression that specifies an element or slice of a hash, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code> deletes the specified elements from that hash so that exists() on that element no longer returns true.  Setting a hash element to the undefined value does not remove its key, but deleting it does; see <span href="http://perldoc.perl.org/functions/exists.html">exists</span>.</p><p>In list context, returns the value or values deleted, or the last such element in scalar context.  The return list&#39;s length always matches that of the argument list: deleting non-existent elements returns the undefined value in their corresponding positions.</p><p>delete() may also be used on arrays and array slices, but its behavior is less straightforward.  Although exists() will return false for deleted entries, deleting array elements never changes indices of existing values; use shift() or splice() for that.  However, if any deleted elements fall at the end of an array, the array&#39;s size shrinks to the position of the highest element that still tests true for exists(), or to 0 if none do.  In other words, an array won&#39;t have trailing nonexistent elements after a delete.</p><p><b>WARNING:</b> Calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code> on array values is strongly discouraged.  The notion of deleting or checking the existence of Perl array elements is not conceptually coherent, and can lead to surprising behavior.</p><p>Deleting from <code class="inline"><span class="i">%ENV</span></code>  modifies the environment.  Deleting from a hash tied to a DBM file deletes the entry from the DBM file.  Deleting from a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tied.html">tied</span></code> hash or array may not necessarily return anything; it depends on the implementation of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tied.html">tied</span></code> package&#39;s DELETE method, which may do whatever it pleases.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="w">EXPR</span></code>  construct localizes the deletion to the current block at run time.  Until the block exits, elements locally deleted temporarily no longer exist.  See <span href="http://perldoc.perl.org/perlsub.html#Localized-deletion-of-elements-of-composite-types">Localized deletion of elements of composite types in perlsub</span>.</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="s">(</span><span class="w">foo</span> <span class="cm">=&gt;</span> <span class="n">11</span><span class="cm">,</span> <span class="w">bar</span> <span class="cm">=&gt;</span> <span class="n">22</span><span class="cm">,</span> <span class="w">baz</span> <span class="cm">=&gt;</span> <span class="n">33</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$scalar</span> = <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$hash</span>{<span class="w">foo</span>}<span class="sc">;</span>         <span class="c"># $scalar is 11</span></li><li>    <span class="i">$scalar</span> = <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@hash</span>{<span class="q">qw(foo bar)</span>}<span class="sc">;</span> <span class="c"># $scalar is 22</span></li><li>    <span class="i">@array</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@hash</span>{<span class="q">qw(foo baz)</span>}<span class="sc">;</span> <span class="c"># @array  is (undef,33)</span></li></ol></pre><p>The following (inefficiently) deletes all the values of %HASH and @ARRAY:</p><pre class="verbatim"><ol><li>    foreach <span class="i">$key</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%HASH</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$HASH</span>{<span class="i">$key</span>}<span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    foreach <span class="i">$index</span> <span class="s">(</span><span class="n">0</span> .. <span class="i">$#ARRAY</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$ARRAY</span>[<span class="i">$index</span>]<span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>And so do these:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@HASH</span>{<span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%HASH</span>}<span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@ARRAY</span>[<span class="n">0</span> .. <span class="i">$#ARRAY</span>]<span class="sc">;</span></li></ol></pre><p>But both are slower than assigning the empty list or undefining %HASH or @ARRAY, which is the customary  way to empty out an aggregate:</p><pre class="verbatim"><ol><li>    <span class="i">%HASH</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>     <span class="c"># completely empty %HASH</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%HASH</span><span class="sc">;</span>    <span class="c"># forget %HASH ever existed</span></li><li></li><li>    <span class="i">@ARRAY</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># completely empty @ARRAY</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">@ARRAY</span><span class="sc">;</span>   <span class="c"># forget @ARRAY ever existed</span></li></ol></pre><p>The EXPR can be arbitrarily complicated provided its final operation is an element or slice of an aggregate:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$ref</span>-&gt;[<span class="i">$x</span>][<span class="i">$y</span>]{<span class="i">$key</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@</span>{<span class="i">$ref</span>-&gt;[<span class="i">$x</span>][<span class="i">$y</span>]}{<span class="i">$key1</span><span class="cm">,</span> <span class="i">$key2</span><span class="cm">,</span> <span class="i">@morekeys</span>}<span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$ref</span>-&gt;[<span class="i">$x</span>][<span class="i">$y</span>][<span class="i">$index</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">@</span>{<span class="i">$ref</span>-&gt;[<span class="i">$x</span>][<span class="i">$y</span>]}[<span class="i">$index1</span><span class="cm">,</span> <span class="i">$index2</span><span class="cm">,</span> <span class="i">@moreindices</span>]<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/functions/delete.html
Can't call method "%s" on an undefined value	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used the syntax of a method call, but the slot filled by the object reference or package name contains an undefined value.  Something like this will reproduce the error:</p><pre class="verbatim"><ol><li>    <span class="i">$BADREF</span> = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>    <span class="w">process</span> <span class="i">$BADREF</span> <span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="sc">;</span></li><li>    <span class="i">$BADREF</span><span class="i">-&gt;process</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Can't-call-method-%22%25s%22-on-an-undefined-value
Tie::RefHash (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::RefHash - use references as hash keys</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5.004</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::RefHash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="w">HASHVARIABLE</span><span class="cm">,</span> <span class="q">&#39;Tie::RefHash&#39;</span><span class="cm">,</span> <span class="w">LIST</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="w">HASHVARIABLE</span><span class="cm">,</span> <span class="q">&#39;Tie::RefHash::Nestable&#39;</span><span class="cm">,</span> <span class="w">LIST</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="w">HASHVARIABLE</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/RefHash.html
I/O (definition)	A			Perl Glossary							<section class="prog__container"><p>Input from, or output to, a <b>file</b> or <b>device</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#I%2fO
Operation "%s" returns its argument for non-Unicode code point 0x%X	A			Perl Diagnostics							<section class="prog__container"><p>(S non_unicode) You performed an operation requiring Unicode rules on a code point that is not in Unicode, so what it should do is not defined.  Perl has chosen to have it do nothing, and warn you.</p><p>If the operation shown is &quot;ToFold&quot;, it means that case-insensitive matching in a regular expression was done on the code point.</p><p>If you know what you are doing you can turn off this warning by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;non_unicode&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Operation-%22%25s%22-returns-its-argument-for-non-Unicode-code-point-0x%25X
semaphore (definition)	A			Perl Glossary							<section class="prog__container"><p>A fancy kind of interlock that prevents multiple <b>threads</b> or <b>processes</b> from using up the same resources simultaneously.</p></section>	http://perldoc.perl.org/perlglossary.html#semaphore
Can't "last" outside a loop block	A			Perl Diagnostics							<section class="prog__container"><p>(F) A &quot;last&quot; statement was executed to break out of the current block, except that there&#39;s this itty bitty problem called there isn&#39;t a current block.  Note that an &quot;if&quot; or &quot;else&quot; block doesn&#39;t count as a &quot;loopish&quot; block, as doesn&#39;t a block given to sort(), map() or grep().  You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once.  See <span href="http://perldoc.perl.org/functions/last.html">last</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22last%22-outside-a-loop-block
TAP::Parser::Result (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::ResultFactory]]\n[[TAP::Parser::Result::Bailout]]\n[[TAP::Parser::Result::Comment]]\n[[TAP::Parser::Result::Plan]]\n[[TAP::Parser::Result::Pragma]]\n[[TAP::Parser::Result::Test]]\n[[TAP::Parser::Result::Unknown]]\n[[TAP::Parser::Result::Version]]\n[[TAP::Parser::Result::YAML]]					<section class="prog__container"><p>TAP::Parser::Result - Base class for TAP::Parser output objects</p> <pre class="verbatim"><ol><li>  <span class="c"># abstract class - not meant to be used directly</span></li><li>  <span class="c"># see TAP::Parser::ResultFactory for preferred usage</span></li><li></li><li>  <span class="c"># directly:</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Result</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$token</span>  = <span class="s">{</span>...<span class="s">}</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="w">TAP::Parser::Result</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="i">$token</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Result.html
scalar value (definition)	A			Perl Glossary							<section class="prog__container"><p>A value that happens to be a <b>scalar</b> as opposed to a <b>list</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#scalar-value
__SUB__ (function)	A			Perl Functions							<section class="prog__container"><pre>__SUB__</pre><p>A special token that returns a reference to the current subroutine, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> outside of a subroutine.</p><p>The behaviour of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/__SUB__.html">__SUB__</span></code> within a regex code block (such as <code class="inline"><span class="q">/(?{...})/</span></code> ) is subject to change.</p><p>This token is only available under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.16</span></code>  or the &quot;current_sub&quot; feature.  See <span href="http://perldoc.perl.org/feature.html">feature</span>.</p></section>	http://perldoc.perl.org/functions/__SUB__.html
Assigned value is not %s reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign a reference to a reference constructor, but the two references were not of the same type.  You cannot alias a scalar to an array, or an array to a hash; the two types must match.</p><pre class="verbatim"><ol><li>    \\<span class="i">$x</span> = \\<span class="i">@y</span><span class="sc">;</span>  <span class="c"># error</span></li><li>    \\<span class="i">@x</span> = \\<span class="i">%y</span><span class="sc">;</span>  <span class="c"># error</span></li><li>     <span class="i">$y</span> = <span class="s">[</span><span class="s">]</span><span class="sc">;</span></li><li>    \\<span class="i">$x</span> = <span class="i">$y</span><span class="sc">;</span>   <span class="c"># error; did you mean \\$y?</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Assigned-value-is-not-%25s-reference
IO::Handle (module)	A			Perl Standard Modules		[[perlfunc]]\n[[I/O Operators in perlop]]\n[[IO::File]]					<section class="prog__container"><p>IO::Handle - supply object methods for I/O handles</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Handle</span><span class="sc">;</span></li><li></li><li>    <span class="i">$io</span> = <span class="w">IO::Handle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$io</span><span class="i">-&gt;fdopen</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;r&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$io</span><span class="i">-&gt;getline</span><span class="sc">;</span></li><li>        <span class="i">$io</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$io</span> = <span class="w">IO::Handle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$io</span><span class="i">-&gt;fdopen</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;w&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$io</span><span class="i">-&gt;print</span><span class="s">(</span><span class="q">&quot;Some text\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># setvbuf is not available by default on Perls 5.8.0 and later.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Handle</span> <span class="q">&#39;_IOLBF&#39;</span><span class="sc">;</span></li><li>    <span class="i">$io</span><span class="i">-&gt;setvbuf</span><span class="s">(</span><span class="i">$buffer_var</span><span class="cm">,</span> <span class="w">_IOLBF</span><span class="cm">,</span> <span class="n">1024</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$io</span><span class="sc">;</span>       <span class="c"># automatically closes the file if it&#39;s open</span></li><li></li><li>    <span class="w">autoflush</span> <span class="w">STDOUT</span> <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Handle.html
getgrent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getgrent</pre>Get next group record.</section>	http://perldoc.perl.org/functions/getgrent.html
protocol (definition)	A			Perl Glossary							<section class="prog__container"><p>In networking, an agreed-upon way of sending messages back and forth so that neither correspondent will get too confused.</p></section>	http://perldoc.perl.org/perlglossary.html#protocol
TAP::Parser::Scheduler::Spinner (module)	A			Perl Standard Modules		[[TAP::Parser::Scheduler]]\n[[TAP::Parser::Scheduler::Job]]					<section class="prog__container"><p>TAP::Parser::Scheduler::Spinner - A no-op job.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Scheduler::Spinner</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Scheduler/Spinner.html
socket (definition)	A			Perl Glossary							<section class="prog__container"><p>An endpoint for network communication among multiple <b>processes</b> that works much like a telephone or a post office box. The most important thing about a socket is its <b>network address</b> (like a phone number). Different kinds of sockets have different kinds of addresses—some look like filenames, and some don’t.</p></section>	http://perldoc.perl.org/perlglossary.html#socket
Net::NNTP (module)	A			Perl Standard Modules		[[Net::Cmd]]\n[[IO::Socket::SSL]]					<section class="prog__container"><p>Net::NNTP - NNTP Client class</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::NNTP</span><span class="sc">;</span></li><li></li><li>    <span class="i">$nntp</span> = <span class="w">Net::NNTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;some.host.name&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$nntp</span><span class="i">-&gt;quit</span><span class="sc">;</span></li><li></li><li>    <span class="c"># start with SSL, e.g. nntps</span></li><li>    <span class="i">$nntp</span> = <span class="w">Net::NNTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;some.host.name&quot;</span><span class="cm">,</span> <span class="w">SSL</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># start with plain and upgrade to SSL</span></li><li>    <span class="i">$nntp</span> = <span class="w">Net::NNTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;some.host.name&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$nntp</span><span class="i">-&gt;starttls</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/NNTP.html
Text::Tabs (module)	A			Perl Standard Modules							<section class="prog__container"><p>Text::Tabs - expand and unexpand tabs like unix expand(1) and unexpand(1)</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Tabs</span><span class="sc">;</span></li><li></li><li>  <span class="i">$tabstop</span> = <span class="n">4</span><span class="sc">;</span>  <span class="c"># default = 8</span></li><li>  <span class="i">@lines_without_tabs</span> = <span class="i">expand</span><span class="s">(</span><span class="i">@lines_with_tabs</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">@lines_with_tabs</span> = <span class="i">unexpand</span><span class="s">(</span><span class="i">@lines_without_tabs</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Text/Tabs.html
-v	A			Perl Command-Line Switches							<section class="prog__container"><p>prints the version and patchlevel of your perl executable.</p></section>	http://perldoc.perl.org/perlrun.html#*-v*
Attempt to use reference as lvalue in substr	A			Perl Diagnostics							<section class="prog__container"><p>(W substr) You supplied a reference as the first argument to substr() used as an lvalue, which is pretty strange.  Perhaps you forgot to dereference it first.  See <span href="http://perldoc.perl.org/functions/substr.html">substr</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-use-reference-as-lvalue-in-substr
TAP::Parser (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser - Parse <span href="http://search.cpan.org/perldoc/Test::Harness::TAP">TAP</span> output</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">TAP::Parser</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="s">{</span> <span class="w">source</span> <span class="cm">=&gt;</span> <span class="i">$source</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    while <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="i">$parser</span><span class="i">-&gt;next</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$result</span><span class="i">-&gt;as_string</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser.html
Copy method did not return a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) The method which overloads &quot;=&quot; is buggy.  See <span href="http://perldoc.perl.org/overload.html#Copy-Constructor">Copy Constructor in overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Copy-method-did-not-return-a-reference
Reference to nonexistent named group in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used something like <code class="inline">\\k&#39;NAME&#39;</code> or <code class="inline">\\<span class="w">k</span><span class="q">&lt;NAME&gt;</span></code>  in your regular expression, but there is no corresponding named capturing parentheses such as <code class="inline">(?&#39;NAME&#39;...)</code> or <code class="inline"><span class="s">(</span><span class="q">?&lt;NAME&gt;...)</span></code> .  Check if the name has been spelled correctly both in the backreference and the declaration.</p><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Reference-to-nonexistent-named-group-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
IPC::Open2 (module)	A			Perl Standard Modules		[[IPC::Open3]]					<section class="prog__container"><p>IPC::Open2 - open a process for both reading and writing using open2()</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open2</span><span class="sc">;</span></li><li></li><li>    <span class="i">$pid</span> = <span class="i">open2</span><span class="s">(</span>\\<span class="i">*CHLD_OUT</span><span class="cm">,</span> \\<span class="i">*CHLD_IN</span><span class="cm">,</span> <span class="q">&#39;some cmd and args&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>      <span class="c"># or without using the shell</span></li><li>    <span class="i">$pid</span> = <span class="i">open2</span><span class="s">(</span>\\<span class="i">*CHLD_OUT</span><span class="cm">,</span> \\<span class="i">*CHLD_IN</span><span class="cm">,</span> <span class="q">&#39;some&#39;</span><span class="cm">,</span> <span class="q">&#39;cmd&#39;</span><span class="cm">,</span> <span class="q">&#39;and&#39;</span><span class="cm">,</span> <span class="q">&#39;args&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># or with handle autovivification</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$chld_out</span><span class="cm">,</span> <span class="i">$chld_in</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$pid</span> = <span class="i">open2</span><span class="s">(</span><span class="i">$chld_out</span><span class="cm">,</span> <span class="i">$chld_in</span><span class="cm">,</span> <span class="q">&#39;some cmd and args&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>      <span class="c"># or without using the shell</span></li><li>    <span class="i">$pid</span> = <span class="i">open2</span><span class="s">(</span><span class="i">$chld_out</span><span class="cm">,</span> <span class="i">$chld_in</span><span class="cm">,</span> <span class="q">&#39;some&#39;</span><span class="cm">,</span> <span class="q">&#39;cmd&#39;</span><span class="cm">,</span> <span class="q">&#39;and&#39;</span><span class="cm">,</span> <span class="q">&#39;args&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span> <span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$child_exit_status</span> = <span class="i">$?</span> &gt;&gt; <span class="n">8</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/Open2.html
prototype (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Miscellaneous functions							<section class="prog__container"><pre>prototype FUNCTION<br>prototype</pre><p>Returns the prototype of a function as a string (or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if the function has no prototype).  FUNCTION is a reference to, or the name of, the function whose prototype you want to retrieve.  If FUNCTION is omitted, $_ is used.</p><p>If FUNCTION is a string starting with <code class="inline"><span class="w">CORE::</span></code> , the rest is taken as a name for a Perl builtin.  If the builtin&#39;s arguments cannot be adequately expressed by a prototype (such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>), prototype() returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, because the builtin does not really behave like a Perl function.  Otherwise, the string describing the equivalent prototype is returned.</p></section>	http://perldoc.perl.org/functions/prototype.html
index (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>index STR,SUBSTR,POSITION<br>index STR,SUBSTR</pre><p>The index function searches for one string within another, but without the wildcard-like behavior of a full regular-expression pattern match. It returns the position of the first occurrence of SUBSTR in STR at or after POSITION.  If POSITION is omitted, starts searching from the beginning of the string.  POSITION before the beginning of the string or after its end is treated as if it were the beginning or the end, respectively.  POSITION and the return value are based at zero. If the substring is not found, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/index.html">index</span></code> returns -1.</p></section>	http://perldoc.perl.org/functions/index.html
Unsupported directory function "%s" called	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t support opendir() and readdir().</p></section>	http://perldoc.perl.org/perldiag.html#Unsupported-directory-function-%22%25s%22-called
TAP::Object (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Object - Base class that provides common functionality to all <code class="inline"><span class="w">TAP::</span>*</code>  modules</p> <pre class="verbatim"><ol><li><span name="package-TAP::Whatever"></span>    package <span class="i">TAP::Whatever</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;TAP::Object&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># new() implementation by TAP::Object</span></li><li><span name="_initialize"></span>    sub <span class="m">_initialize</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span> <span class="i">$self</span><span class="cm">,</span> <span class="i">@args</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c"># initialize your object</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$self</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># ... later ...</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$obj</span> = <span class="w">TAP::Whatever</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">@args</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Object.html
tie (function)	A			Perl Functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>tie VARIABLE,CLASSNAME,LIST</pre><p>This function binds a variable to a package class that will provide the implementation for the variable.  VARIABLE is the name of the variable to be enchanted.  CLASSNAME is the name of a class implementing objects of correct type.  Any additional arguments are passed to the appropriate constructor method of the class (meaning <code class="inline"><span class="w">TIESCALAR</span></code> , <code class="inline"><span class="w">TIEHANDLE</span></code> , <code class="inline"><span class="w">TIEARRAY</span></code> , or <code class="inline"><span class="w">TIEHASH</span></code> ).  Typically these are arguments such as might be passed to the <code class="inline"><span class="i">dbm_open</span><span class="s">(</span><span class="s">)</span></code>  function of C.  The object returned by the constructor is also returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function, which would be useful if you want to access other methods in CLASSNAME.</p><p>Note that functions such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> may return huge lists when used on large objects, like DBM files.  You may prefer to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> function to iterate over such.  Example:</p><pre class="verbatim"><ol><li>    <span class="c"># print out history file offsets</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">NDBM_File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span><span class="s">(</span><span class="i">%HIST</span><span class="cm">,</span> <span class="q">&#39;NDBM_File&#39;</span><span class="cm">,</span> <span class="q">&#39;/usr/lib/news/history&#39;</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%HIST</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$key</span><span class="cm">,</span> <span class="q">&#39; = &#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&#39;L&#39;</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span><span class="s">(</span><span class="i">%HIST</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>A class implementing a hash should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIEHASH</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span><span class="cm">,</span> <span class="w">value</span></li><li>    <span class="w">DELETE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">CLEAR</span> <span class="w">this</span></li><li>    <span class="w">EXISTS</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">FIRSTKEY</span> <span class="w">this</span></li><li>    <span class="w">NEXTKEY</span> <span class="w">this</span><span class="cm">,</span> <span class="w">lastkey</span></li><li>    <span class="w">SCALAR</span> <span class="w">this</span></li><li>    DESTROY <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>A class implementing an ordinary array should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIEARRAY</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span><span class="cm">,</span> <span class="w">value</span></li><li>    <span class="w">FETCHSIZE</span> <span class="w">this</span></li><li>    <span class="w">STORESIZE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">count</span></li><li>    <span class="w">CLEAR</span> <span class="w">this</span></li><li>    <span class="w">PUSH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">POP</span> <span class="w">this</span></li><li>    <span class="w">SHIFT</span> <span class="w">this</span></li><li>    <span class="w">UNSHIFT</span> <span class="w">this</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">SPLICE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">offset</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">EXTEND</span> <span class="w">this</span><span class="cm">,</span> <span class="w">count</span></li><li>    <span class="w">DELETE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">EXISTS</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/DESTROY.html">DESTROY</span> <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>A class implementing a filehandle should have the following methods:</p><pre class="verbatim"><ol><li>    TIEHANDLE classname, LIST</li><li>    READ this, scalar, length, offset</li><li>    READLINE this</li><li>    GETC this</li><li>    WRITE this, scalar, length, offset</li><li>    PRINT this, LIST</li><li>    PRINTF this, format, LIST</li><li>    BINMODE this</li><li>    EOF this</li><li>    FILENO this</li><li>    SEEK this, position, whence</li><li>    TELL this</li><li>    OPEN this, mode, LIST</li><li>    CLOSE this</li><li>    DESTROY this</li><li>    UNTIE this</li></ol></pre><p>A class implementing a scalar should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIESCALAR</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">value</span></li><li>    DESTROY <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>Not all methods indicated above need be implemented.  See <span href="http://perldoc.perl.org/perltie.html">perltie</span>, <span href="http://perldoc.perl.org/Tie/Hash.html">Tie::Hash</span>, <span href="http://perldoc.perl.org/Tie/Array.html">Tie::Array</span>, <span href="http://perldoc.perl.org/Tie/Scalar.html">Tie::Scalar</span>, and <span href="http://perldoc.perl.org/Tie/Handle.html">Tie::Handle</span>.</p><p>Unlike <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span></code>, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function will not <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> a module for you; you need to do that explicitly yourself.  See <span href="http://perldoc.perl.org/DB_File.html">DB_File</span> or the <i>Config</i> module for interesting <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> implementations.</p><p>For further details see <span href="http://perldoc.perl.org/perltie.html">perltie</span>, <span href="http://perldoc.perl.org/functions/tie.html#tied-VARIABLE">tied VARIABLE</span>.</p></section>	http://perldoc.perl.org/functions/tie.html
How do I shuffle an array randomly?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>If you either have Perl 5.8.0 or later installed, or if you have Scalar-List-Utils 1.03 or later installed, you can say:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::Util</span> <span class="q">&#39;shuffle&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="i">@shuffled</span> = <span class="i">shuffle</span><span class="s">(</span><span class="i">@list</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If not, you can use a Fisher-Yates shuffle.</p><pre class="verbatim"><ol><li><span name="fisher_yates_shuffle"></span>    sub <span class="m">fisher_yates_shuffle</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$deck</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span>  <span class="c"># $deck is a reference to an array</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">@$deck</span><span class="sc">;</span> <span class="c"># must not be empty!</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="i">@$deck</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>--<span class="i">$i</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$j</span> = <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span> <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="s">(</span><span class="i">$i</span>+<span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">@$deck</span>[<span class="i">$i</span><span class="cm">,</span><span class="i">$j</span>] = <span class="i">@$deck</span>[<span class="i">$j</span><span class="cm">,</span><span class="i">$i</span>]<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># shuffle my mpeg collection</span></li><li>    <span class="c">#</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@mpeg</span> = <span class="q">&lt;audio/*/*.mp3&gt;</span><span class="sc">;</span></li><li>    <span class="i">fisher_yates_shuffle</span><span class="s">(</span> \\<span class="i">@mpeg</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># randomize @mpeg in place</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">@mpeg</span><span class="sc">;</span></li></ol></pre><p>Note that the above implementation shuffles an array in place, unlike the <code class="inline"><span class="i">List::Util::shuffle</span><span class="s">(</span><span class="s">)</span></code>  which takes a list and returns a new shuffled list.</p><p>You&#39;ve probably seen shuffling algorithms that work using splice, randomly picking another element to swap the current element with</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span><span class="sc">;</span></li><li>    <span class="i">@new</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@old</span> = <span class="n">1</span> .. <span class="n">10</span><span class="sc">;</span>  <span class="c"># just a demo</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">@old</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@new</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span><span class="s">(</span><span class="i">@old</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="i">@old</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>This is bad because splice is already O(N), and since you do it N times, you just invented a quadratic algorithm; that is, O(N**2). This does not scale, although Perl is so efficient that you probably won&#39;t notice this until you have rather largish arrays.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-shuffle-an-array-randomly%3f
symbolic debugger (definition)	A			Perl Glossary							<section class="prog__container"><p>A program that lets you step through the <b>execution</b> of your program, stopping or printing things out here and there to see whether anything has gone wrong, and, if so, what. The “symbolic” part just means that you can talk to the debugger using the same symbols with which your program is written.</p></section>	http://perldoc.perl.org/perlglossary.html#symbolic-debugger
'%s' is an unknown bound type in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used <code class="inline">\\<span class="i">b</span><span class="s">{</span>...<span class="s">}</span></code>  or <code class="inline">\\<span class="i">B</span><span class="s">{</span>...<span class="s">}</span></code>  and the <code class="inline">...</code>  is not known to Perl.  The current valid ones are given in <span href="http://perldoc.perl.org/perlrebackslash.html#%5cb%7b%7d%2c-%5cb%2c-%5cB%7b%7d%2c-%5cB">\\b{}, \\b, \\B{}, \\B in perlrebackslash</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%25s'-is-an-unknown-bound-type-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
caller (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Keywords altering or affecting scoping of identifiers							<section class="prog__container"><pre>caller EXPR<br>caller</pre><p>Returns the context of the current pure perl subroutine call.  In scalar context, returns the caller&#39;s package name if there <i>is</i> a caller (that is, if we&#39;re in a subroutine or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>) and the undefined value otherwise.  caller never returns XS subs and they are skipped.  The next pure perl sub will appear instead of the XS sub in caller&#39;s return values.  In list context, caller returns</p><pre class="verbatim"><ol><li>    <span class="c"># 0         1          2</span></li><li>    <span class="s">(</span><span class="i">$package</span><span class="cm">,</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$line</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span><span class="sc">;</span></li></ol></pre><p>With EXPR, it returns some extra information that the debugger uses to print a stack trace.  The value of EXPR indicates how many call frames to go back before the current one.</p><pre class="verbatim"><ol><li>    <span class="c">#  0         1          2      3            4</span></li><li>    <span class="s">(</span><span class="i">$package</span><span class="cm">,</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$line</span><span class="cm">,</span> <span class="i">$subroutine</span><span class="cm">,</span> <span class="i">$hasargs</span><span class="cm">,</span></li><li></li><li>    <span class="c">#  5          6          7            8       9         10</span></li><li>    <span class="i">$wantarray</span><span class="cm">,</span> <span class="i">$evaltext</span><span class="cm">,</span> <span class="i">$is_require</span><span class="cm">,</span> <span class="i">$hints</span><span class="cm">,</span> <span class="i">$bitmask</span><span class="cm">,</span> <span class="i">$hinthash</span><span class="s">)</span></li><li>     = <span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span><span class="s">(</span><span class="i">$i</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Here, $subroutine is the function that the caller called (rather than the function containing the caller).  Note that $subroutine may be <code class="inline"><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span><span class="s">)</span></code>  if the frame is not a subroutine call, but an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>.  In such a case additional elements $evaltext and <code class="inline"><span class="i">$is_require</span></code>  are set: <code class="inline"><span class="i">$is_require</span></code>  is true if the frame is created by a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statement, $evaltext contains the text of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">EXPR</span></code>  statement.  In particular, for an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">BLOCK</span></code>  statement, $subroutine is <code class="inline"><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span><span class="s">)</span></code> , but $evaltext is undefined.  (Note also that each <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statement creates a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> frame inside an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">EXPR</span></code>  frame.)  $subroutine may also be <code class="inline"><span class="s">(</span><span class="w">unknown</span><span class="s">)</span></code>  if this particular subroutine happens to have been deleted from the symbol table. <code class="inline"><span class="i">$hasargs</span></code>  is true if a new instance of <code class="inline"><span class="i">@_</span></code>  was set up for the frame. <code class="inline"><span class="i">$hints</span></code>  and <code class="inline"><span class="i">$bitmask</span></code>  contain pragmatic hints that the caller was compiled with.  <code class="inline"><span class="i">$hints</span></code>  corresponds to <code class="inline"><span class="i">$^H</span></code> , and <code class="inline"><span class="i">$bitmask</span></code>  corresponds to <code class="inline"><span class="i">$</span>{<span class="w">^WARNING_BITS</span>}</code> .  The <code class="inline"><span class="i">$hints</span></code>  and <code class="inline"><span class="i">$bitmask</span></code>  values are subject to change between versions of Perl, and are not meant for external use.</p><p><code class="inline"><span class="i">$hinthash</span></code>  is a reference to a hash containing the value of <code class="inline"><span class="i">%^H</span></code>  when the caller was compiled, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if <code class="inline"><span class="i">%^H</span></code>  was empty.  Do not modify the values of this hash, as they are the actual values stored in the optree.</p><p>Furthermore, when called from within the DB package in list context, and with an argument, caller returns more detailed information: it sets the list variable <code class="inline"><span class="i">@DB::args</span></code>  to be the arguments with which the subroutine was invoked.</p><p>Be aware that the optimizer might have optimized call frames away before <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span></code> had a chance to get the information.  That means that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller(N)</span></code> might not return information about the call frame you expect it to, for <code class="inline"><span class="w">N</span> &gt; <span class="n">1</span></code> .  In particular, <code class="inline"><span class="i">@DB::args</span></code>  might have information from the previous time <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/caller.html">caller</span></code> was called.</p><p>Be aware that setting <code class="inline"><span class="i">@DB::args</span></code>  is <i>best effort</i>, intended for debugging or generating backtraces, and should not be relied upon.  In particular, as <code class="inline"><span class="i">@_</span></code>  contains aliases to the caller&#39;s arguments, Perl does not take a copy of <code class="inline"><span class="i">@_</span></code> , so <code class="inline"><span class="i">@DB::args</span></code>  will contain modifications the subroutine makes to <code class="inline"><span class="i">@_</span></code>  or its contents, not the original values at call time.  <code class="inline"><span class="i">@DB::args</span></code> , like <code class="inline"><span class="i">@_</span></code> , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values.  Finally, a side effect of the current implementation is that the effects of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> <span class="i">@_</span></code>  can <i>normally</i> be undone (but not <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span> <span class="i">@_</span></code>  or other splicing, <i>and</i> not if a reference to <code class="inline"><span class="i">@_</span></code>  has been taken, <i>and</i> subject to the caveat about reallocated elements), so <code class="inline"><span class="i">@DB::args</span></code>  is actually a hybrid of the current state and initial state of <code class="inline"><span class="i">@_</span></code> .  Buyer beware.</p></section>	http://perldoc.perl.org/functions/caller.html
Binary "/" operator	A			Perl Operators\nPerl Multiplicative Operators							<section class="prog__container">Binary &quot;/&quot; divides two numbers.</section>	http://perldoc.perl.org/perlop.html#Multiplicative-Operators
Maximal count of pending signals (%u) exceeded	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl aborted due to too high a number of signals pending.  This usually indicates that your operating system tried to deliver signals too fast (with a very high priority), starving the perl process from resources it would need to reach a point where it can process signals safely.  (See <span href="http://perldoc.perl.org/perlipc.html#Deferred-Signals-(Safe-Signals)">Deferred Signals (Safe Signals) in perlipc</span>.)</p></section>	http://perldoc.perl.org/perldiag.html#Maximal-count-of-pending-signals-(%25u)-exceeded
TAP::Parser::Result::Test (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Test - Test result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Test.html
standard output (definition)	A			Perl Glossary							<section class="prog__container"><p>The default output <b>stream</b> for your program, which if possible shouldn’t care where its data is going. Represented within a Perl program by the <b>filehandle</b> <code class="inline"><span class="w">STDOUT</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#standard-output
File::Spec::Cygwin (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Spec::Cygwin - methods for Cygwin file specs</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::Cygwin</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Cygwin.html
overloading (definition)	A			Perl Glossary							<section class="prog__container"><p>Giving additional meanings to a symbol or construct. Actually, all languages do overloading to one extent or another, since people are good at figuring out things from <b>context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#overloading
Test (module)	A			Perl Standard Modules		[[Test::Harness]]\n[[Test::Simple]]\n[[Test::More]]\n[[Devel::Cover]]\n[[Test::Builder]]\n[[Test::Unit]]\n[[Test::Inline]]\n[[SelfTest]]					<section class="prog__container"><p>Test - provides a simple framework for writing test scripts</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test</span><span class="sc">;</span></li><li></li><li>  <span class="c"># use a BEGIN block so we print our plan before MyModule is loaded</span></li><li>  BEGIN <span class="s">{</span> <span class="w">plan</span> <span class="w">tests</span> <span class="cm">=&gt;</span> <span class="n">14</span><span class="cm">,</span> <span class="w">todo</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="s">]</span> <span class="s">}</span></li><li></li><li>  <span class="c"># load your module...</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MyModule</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Helpful notes.  All note-lines must start with a &quot;#&quot;.</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;# I&#39;m testing MyModule version $MyModule::VERSION\\n&quot;</span><span class="sc">;</span></li><li></li><li>  <span class="i">ok</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span> <span class="c"># failure</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span> <span class="c"># success</span></li><li></li><li>  <span class="i">ok</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ok, expected failure (see todo list, above)</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span> <span class="c"># surprise success!</span></li><li></li><li>  <span class="i">ok</span><span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>             <span class="c"># failure: &#39;0&#39; ne &#39;1&#39;</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="q">&#39;broke&#39;</span><span class="cm">,</span><span class="q">&#39;fixed&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># failure: &#39;broke&#39; ne &#39;fixed&#39;</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="q">&#39;fixed&#39;</span><span class="cm">,</span><span class="q">&#39;fixed&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># success: &#39;fixed&#39; eq &#39;fixed&#39;</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="q">&#39;fixed&#39;</span><span class="cm">,</span><span class="q">qr/x/</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># success: &#39;fixed&#39; =~ qr/x/</span></li><li></li><li>  <span class="i">ok</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="n">1</span>+<span class="n">1</span> <span class="s">}</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># success: &#39;2&#39; eq &#39;2&#39;</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="n">1</span>+<span class="n">1</span> <span class="s">}</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># failure: &#39;2&#39; ne &#39;3&#39;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@list</span> = <span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="w">ok</span> <span class="i">@list</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="q">&quot;\\@list=&quot;</span>.<span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;,&#39;</span><span class="cm">,</span><span class="i">@list</span><span class="s">)</span><span class="sc">;</span>      <span class="c">#extra notes</span></li><li>  <span class="w">ok</span> <span class="q">&#39;segmentation fault&#39;</span><span class="cm">,</span> <span class="q">&#39;/(?i)success/&#39;</span><span class="sc">;</span>    <span class="c">#regex match</span></li><li></li><li>  <span class="i">skip</span><span class="s">(</span></li><li>    <span class="i">$^O</span> =~ <span class="q">m/MSWin/</span> ? <span class="q">&quot;Skip if MSWin&quot;</span> <span class="co">:</span> <span class="n">0</span><span class="cm">,</span>  <span class="c"># whether to skip</span></li><li>    <span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span>  <span class="c"># arguments just like for ok(...)</span></li><li>  <span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">skip</span><span class="s">(</span></li><li>    <span class="i">$^O</span> =~ <span class="q">m/MSWin/</span> ? <span class="n">0</span> <span class="co">:</span> <span class="q">&quot;Skip unless MSWin&quot;</span><span class="cm">,</span>  <span class="c"># whether to skip</span></li><li>    <span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span>  <span class="c"># arguments just like for ok(...)</span></li><li>  <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test.html
working directory (definition)	A			Perl Glossary							<section class="prog__container"><p>Your current <b>directory</b>, from which relative pathnames are interpreted by the <b>operating system</b>. The operating system knows your current directory because you told it with a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span></code>, or because you started out in the place where your parent <b>process</b> was when you were born.</p></section>	http://perldoc.perl.org/perlglossary.html#working-directory
CPAN::Nox (module)	A			Perl Standard Modules		[[CPAN]]					<section class="prog__container"><p>CPAN::Nox - Wrapper around CPAN.pm without using any XS module</p> <p>Interactive mode:</p><pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MCPAN::Nox</span> -e <span class="w">shell</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/CPAN/Nox.html
Attempt to access disallowed key '%s' in a restricted hash	A			Perl Diagnostics							<section class="prog__container"><p>(F) The failing code has attempted to get or set a key which is not in the current set of allowed keys of a restricted hash.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-access-disallowed-key-'%25s'-in-a-restricted-hash
BEGIN (function)	A			Perl Functions							<section class="prog__container"><pre>BEGIN</pre><p>These compile phase keywords are documented in <span href="http://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END">BEGIN, UNITCHECK, CHECK, INIT and END in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/BEGIN.html
IO::Uncompress::AnyUncompress (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]					<section class="prog__container"><p>IO::Uncompress::AnyUncompress - Uncompress gzip, zip, bzip2 or lzop file/buffer</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;</li><li></li><li>    my $status = anyuncompress $input =&gt; $output [,OPTS]</li><li>        or die &quot;anyuncompress failed: $AnyUncompressError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::AnyUncompress $input [OPTS] </li><li>        or die &quot;anyuncompress failed: $AnyUncompressError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $AnyUncompressError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/AnyUncompress.html
Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) Minima should be less than or equal to maxima.  If you really want your regexp to match something 0 times, just put {0}.</p></section>	http://perldoc.perl.org/perldiag.html#Quantifier-%7bn%2cm%7d-with-n-%3e-m-can't-match-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
progressive matching (definition)	A			Perl Glossary							<section class="prog__container"><p><b>Pattern matching</b>  matching&gt;that picks up where it left off before.</p></section>	http://perldoc.perl.org/perlglossary.html#progressive-matching
grep (function)	A			Perl Functions\nPerl Functions for list data							<section class="prog__container"><pre>grep BLOCK LIST<br>grep EXPR,LIST</pre><p>This is similar in spirit to, but not the same as, grep(1) and its relatives.  In particular, it is not limited to using regular expressions.</p><p>Evaluates the BLOCK or EXPR for each element of LIST (locally setting <code class="inline"><span class="i">$_</span></code>  to each element) and returns the list value consisting of those elements for which the expression evaluated to true.  In scalar context, returns the number of times the expression was true.</p><pre class="verbatim"><ol><li>    <span class="i">@foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span><span class="s">(</span>!<span class="q">/^#/</span><span class="cm">,</span> <span class="i">@bar</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># weed out comments</span></li></ol></pre><p>or equivalently,</p><pre class="verbatim"><ol><li>    <span class="i">@foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span>!<span class="q">/^#/</span><span class="s">}</span> <span class="i">@bar</span><span class="sc">;</span>    <span class="c"># weed out comments</span></li></ol></pre><p>Note that <code class="inline"><span class="i">$_</span></code>  is an alias to the list value, so it can be used to modify the elements of the LIST.  While this is useful and supported, it can cause bizarre results if the elements of LIST are not variables. Similarly, grep returns aliases into the original list, much as a for loop&#39;s index variable aliases the list elements.  That is, modifying an element of a list returned by grep (for example, in a <code class="inline">foreach</code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> or another <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code>) actually modifies the element in the original list. This is usually something to be avoided when writing clear code.</p><p>If <code class="inline"><span class="i">$_</span></code>  is lexical in the scope where the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> appears (because it has been declared with the deprecated <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span></code>  construct) then, in addition to being locally aliased to the list elements, <code class="inline"><span class="i">$_</span></code>  keeps being lexical inside the block; i.e., it can&#39;t be seen from the outside, avoiding any potential side-effects.</p><p>See also <span href="http://perldoc.perl.org/functions/map.html">map</span> for a list composed of the results of the BLOCK or EXPR.</p></section>	http://perldoc.perl.org/functions/grep.html
Can't localize lexical variable %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used local on a variable name that was previously declared as a lexical variable using &quot;my&quot; or &quot;state&quot;.  This is not allowed.  If you want to localize a package variable of the same name, qualify it with the package name.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-localize-lexical-variable-%25s
Ambiguous use of %c resolved as operator %c	A			Perl Diagnostics							<section class="prog__container"><p>(S ambiguous) <code class="inline"><span class="i">%</span></code> , <code class="inline"><span class="i">&amp;</span></code> , and <code class="inline"><span class="i">*</span></code>  are both infix operators (modulus, bitwise and, and multiplication) <i>and</i> initial special characters (denoting hashes, subroutines and typeglobs), and you said something like <code class="inline"><span class="i">*foo</span> * <span class="w">foo</span></code>  that might be interpreted as either of them.  We assumed you meant the infix operator, but please try to make it more clear -- in the example given, you might write <code class="inline"><span class="i">*foo</span> * <span class="i">foo</span><span class="s">(</span><span class="s">)</span></code>  if you really meant to multiply a glob by the result of calling a function.</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-use-of-%25c-resolved-as-operator-%25c
untie (function)	A			Perl Functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>untie VARIABLE</pre><p>Breaks the binding between a variable and a package. (See <span href="http://perldoc.perl.org/functions/untie.html#tie-VARIABLE%2cCLASSNAME%2cLIST">tie</span>.) Has no effect if the variable is not tied.</p></section>	http://perldoc.perl.org/functions/untie.html
Too few arguments for subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) A subroutine using a signature received fewer arguments than required by the signature.  The caller of the subroutine is presumably at fault. Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</p></section>	http://perldoc.perl.org/perldiag.html#Too-few-arguments-for-subroutine
How can I always keep my hash sorted?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>You can look into using the <code class="inline"><span class="w">DB_File</span></code>  module and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie()</span></code> using the <code class="inline"><span class="i">$DB_BTREE</span></code>  hash bindings as documented in <span href="http://perldoc.perl.org/DB_File.html#In-Memory-Databases">In Memory Databases in DB_File</span>. The <span href="http://search.cpan.org/perldoc/Tie::IxHash">Tie::IxHash</span> module from CPAN might also be instructive. Although this does keep your hash sorted, you might not like the slowdown you suffer from the tie interface. Are you sure you need to do this? :)</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-always-keep-my-hash-sorted%3f
defined (function)	A			Perl Functions\nPerl Miscellaneous functions							<section class="prog__container"><pre>defined EXPR<br>defined</pre><p>Returns a Boolean value telling whether EXPR has a value other than the undefined value <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  If EXPR is not present, <code class="inline"><span class="i">$_</span></code>  is checked.</p><p>Many operations return <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> to indicate failure, end of file, system error, uninitialized variable, and other exceptional conditions.  This function allows you to distinguish <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> from other values.  (A simple Boolean test will not distinguish among <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, zero, the empty string, and <code class="inline"><span class="q">&quot;0&quot;</span></code> , which are all equally false.)  Note that since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> is a valid scalar, its presence doesn&#39;t <i>necessarily</i> indicate an exceptional condition: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> when its argument is an empty array, <i>or</i> when the element to return happens to be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>You may also use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined(&amp;func)</span></code> to check whether subroutine <code class="inline"><span class="i">&amp;func</span></code>  has ever been defined.  The return value is unaffected by any forward declarations of <code class="inline"><span class="i">&amp;func</span></code> .  A subroutine that is not defined may still be callable: its package may have an <code class="inline">AUTOLOAD</code>  method that makes it spring into existence the first time that it is called; see <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p><p>Use of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> on aggregates (hashes and arrays) is deprecated.  It used to report whether memory for that aggregate had ever been allocated.  This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">@an_array</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;has array elements\\n&quot;</span> <span class="s">}</span></li><li>    if <span class="s">(</span><span class="i">%a_hash</span><span class="s">)</span>   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;has hash members\\n&quot;</span>   <span class="s">}</span></li></ol></pre><p>When used on a hash element, it tells you whether the value is defined, not whether the key exists in the hash.  Use <span href="http://perldoc.perl.org/functions/exists.html">exists</span> for the latter purpose.</p><p>Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> if <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$switch</span>{<span class="w">D</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$val\\n&quot;</span> while <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$val</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span><span class="s">(</span><span class="i">@ary</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t readlink $sym: $!&quot;</span></li><li>        unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$value</span> = <span class="l_k" href="http://perldoc.perl.org/functions/readlink.html">readlink</span> <span class="i">$sym</span><span class="s">)</span><span class="sc">;</span></li><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">&amp;$bar</span> ? <span class="i">&amp;$bar</span><span class="s">(</span><span class="i">@_</span><span class="s">)</span> <span class="co">:</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;No bar&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li>    <span class="i">$debugging</span> = <span class="n">0</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$debugging</span><span class="sc">;</span></li></ol></pre><p>Note:  Many folks tend to overuse <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> and are then surprised to discover that the number <code class="inline"><span class="n">0</span></code>  and <code class="inline"><span class="q">&quot;&quot;</span></code>  (the zero-length string) are, in fact, defined values.  For example, if you say</p><pre class="verbatim"><ol><li>    <span class="q">&quot;ab&quot;</span> =~ <span class="q">/a(.*)b/</span><span class="sc">;</span></li></ol></pre><p>The pattern match succeeds and <code class="inline"><span class="i">$1</span></code>  is defined, although it matched &quot;nothing&quot;.  It didn&#39;t really fail to match anything.  Rather, it matched something that happened to be zero characters long.  This is all very above-board and honest.  When a function returns an undefined value, it&#39;s an admission that it couldn&#39;t give you an honest answer.  So you should use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> only when questioning the integrity of what you&#39;re trying to do.  At other times, a simple comparison to <code class="inline"><span class="n">0</span></code>  or <code class="inline"><span class="q">&quot;&quot;</span></code>  is what you want.</p><p>See also <span href="http://perldoc.perl.org/functions/undef.html">undef</span>, <span href="http://perldoc.perl.org/functions/exists.html">exists</span>, <span href="http://perldoc.perl.org/functions/ref.html">ref</span>.</p></section>	http://perldoc.perl.org/functions/defined.html
Unexpected binary operator '%c' with no preceding operand in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ | \\p{Digit} ])</span></li></ol></pre><p>where the <code class="inline"><span class="q">&quot;|&quot;</span></code>  is a binary operator with an operand on the right, but no operand on the left.</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-binary-operator-'%25c'-with-no-preceding-operand-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
'X' outside of string	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had a (un)pack template that specified a relative position before the beginning of the string being (un)packed.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'X'-outside-of-string
Can't linearize anonymous symbol table	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl tried to calculate the method resolution order (MRO) of a package, but failed because the package stash has no name.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-linearize-anonymous-symbol-table
What is Perl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Perl is a high-level programming language with an eclectic heritage written by Larry Wall and a cast of thousands.</p><p>Perl&#39;s process, file, and text manipulation facilities make it particularly well-suited for tasks involving quick prototyping, system utilities, software tools, system management tasks, database access, graphical programming, networking, and web programming.</p><p>Perl derives from the ubiquitous C programming language and to a lesser extent from sed, awk, the Unix shell, and many other tools and languages.</p><p>These strengths make it especially popular with web developers and system administrators. Mathematicians, geneticists, journalists, managers and many other people also use Perl.</p></section>	http://perldoc.perl.org/perlfaq1.html#What-is-Perl%3f
What is variable suicide and how can I prevent it?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>This problem was fixed in perl 5.004_05, so preventing it means upgrading your version of perl. ;)</p><p>Variable suicide is when you (temporarily or permanently) lose the value of a variable. It is caused by scoping through my() and local() interacting with either closures or aliased foreach() iterator variables and subroutine arguments. It used to be easy to inadvertently lose a variable&#39;s value this way, but now it&#39;s much harder. Take this code:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f</span> = <span class="q">&#39;foo&#39;</span><span class="sc">;</span></li><li><span name="T"></span>    sub <span class="m">T</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">$i</span>++ &lt; <span class="n">3</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f</span> = <span class="i">$f</span><span class="sc">;</span> <span class="i">$f</span> .= <span class="q">&quot;bar&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$f</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span> <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">T</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Finally $f\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If you are experiencing variable suicide, that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f</span></code>  in the subroutine doesn&#39;t pick up a fresh copy of the <code class="inline"><span class="i">$f</span></code>  whose value is <code class="inline"><span class="q">&#39;foo&#39;</span></code> . The output shows that inside the subroutine the value of <code class="inline"><span class="i">$f</span></code>  leaks through when it shouldn&#39;t, as in this output:</p><pre class="verbatim"><ol><li>    <span class="w">foobar</span></li><li>    <span class="w">foobarbar</span></li><li>    <span class="w">foobarbarbar</span></li><li>    <span class="w">Finally</span> <span class="w">foo</span></li></ol></pre><p>The $f that has &quot;bar&quot; added to it three times should be a new <code class="inline"><span class="i">$f</span></code>  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f</span></code>  should create a new lexical variable each time through the loop. The expected output is:</p><pre class="verbatim"><ol><li>    <span class="w">foobar</span></li><li>    <span class="w">foobar</span></li><li>    <span class="w">foobar</span></li><li>    <span class="w">Finally</span> <span class="w">foo</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#What-is-variable-suicide-and-how-can-I-prevent-it%3f
Property '%s' is unknown in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The named property which you specified via <code class="inline">\\<span class="w">p</span></code>  or <code class="inline">\\<span class="w">P</span></code>  is not one known to Perl.  Perhaps you misspelled the name?  See <span href="http://perldoc.perl.org/perluniprops.html#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d">Properties accessible through \\p{} and \\P{} in perluniprops</span> for a complete list of available official properties.  If it is a <span href="http://perldoc.perl.org/perlunicode.html#User-Defined-Character-Properties">user-defined property</span> it must have been defined by the time the regular expression is compiled.</p></section>	http://perldoc.perl.org/perldiag.html#Property-'%25s'-is-unknown-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Bit vector size > 32 non-portable	A			Perl Diagnostics							<section class="prog__container"><p>(W portable) Using bit vector sizes larger than 32 is non-portable.</p></section>	http://perldoc.perl.org/perldiag.html#Bit-vector-size-%3e-32-non-portable
How do I close a process's filehandle without waiting for it to complete?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Assuming your system supports such things, just send an appropriate signal to the process (see <span href="http://perldoc.perl.org/functions/kill.html">kill</span>). It&#39;s common to first send a TERM signal, wait a little bit, and then send a KILL signal to finish it off.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-close-a-process's-filehandle-without-waiting-for-it-to-complete%3f
__LINE__ (function)	A			Perl Functions							<section class="prog__container"><pre>__LINE__</pre><p>A special token that compiles to the current line number.</p></section>	http://perldoc.perl.org/functions/__LINE__.html
Pod::Functions (module)	A			Perl Standard Modules							<section class="prog__container"><p>Pod::Functions - Group Perl&#39;s functions a la perlfunc.pod</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Functions</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@misc_ops</span> = <span class="i">@</span>{ <span class="i">$Kinds</span>{ <span class="q">&#39;Misc&#39;</span> } }<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$misc_dsc</span> = <span class="i">$Type_Description</span>{ <span class="q">&#39;Misc&#39;</span> }<span class="sc">;</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> /<span class="w">path</span>/<span class="w">to</span>/<span class="w">lib</span>/<span class="w">Pod</span>/<span class="w">Functions</span>.<span class="w">pm</span></li></ol></pre><p>This will print a grouped list of Perl&#39;s functions, like the  <span href="http://perldoc.perl.org/perlfunc.html#Perl-Functions-by-Category">Perl Functions by Category in perlfunc</span> section.</p></section>	http://perldoc.perl.org/Pod/Functions.html
SWASHNEW didn't return an HV ref	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something went wrong internally when Perl was trying to look up Unicode characters.</p></section>	http://perldoc.perl.org/perldiag.html#SWASHNEW-didn't-return-an-HV-ref
not (function)	A			Perl Functions							<section class="prog__container"><pre>not</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/not.html
Verb pattern '%s' may not have an argument in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a verb pattern that is not allowed an argument.  Remove the  argument or check that you are using the right verb.</p></section>	http://perldoc.perl.org/perldiag.html#Verb-pattern-'%25s'-may-not-have-an-argument-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Group name must start with a non-digit word character in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Group names must follow the rules for perl identifiers, meaning they must start with a non-digit word character.  A common cause of this error is using (?&amp;0) instead of (?0).  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Group-name-must-start-with-a-non-digit-word-character-in-regex%3b-marked-by--%3c---HERE-in-m%2f%25s%2f
Too few args to syscall	A			Perl Diagnostics							<section class="prog__container"><p>(F) There has to be at least one argument to syscall() to specify the system call to call, silly dilly.</p></section>	http://perldoc.perl.org/perldiag.html#Too-few-args-to-syscall
ExtUtils::MM (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM - OS adjusted ExtUtils::MakeMaker subclass</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::MM</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mm</span> = <span class="w">MM</span><span class="w">-&gt;new</span><span class="s">(</span>...<span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM.html
Attempt to bless into a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) The CLASSNAME argument to the bless() operator is expected to be the name of the package to bless the resulting object into.  You&#39;ve supplied instead a reference to something: perhaps you wrote</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> <span class="i">$self</span><span class="cm">,</span> <span class="i">$proto</span><span class="sc">;</span></li></ol></pre><p>when you intended</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> <span class="i">$self</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$proto</span><span class="s">)</span> || <span class="i">$proto</span><span class="sc">;</span></li></ol></pre><p>If you actually want to bless into the stringified version of the reference supplied, you need to stringify it yourself, for example by:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> <span class="i">$self</span><span class="cm">,</span> <span class="q">&quot;$proto&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-bless-into-a-reference
How can I make match national character sets?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Put <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span><span class="sc">;</span></code>  in your script. The \\w character class is taken from the current locale.</p><p>See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span> for details.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-make-%5cw-match-national-character-sets%3f
Why does using $&, $`, or $' slow my program down?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by Anno Siegel)</p><p>Once Perl sees that you need one of these variables anywhere in the program, it provides them on each and every pattern match. That means that on every pattern match the entire string will be copied, part of it to $`, part to $&amp;, and part to $&#39;. Thus the penalty is most severe with long strings and patterns that match often. Avoid $&amp;, $&#39;, and $` if you can, but if you can&#39;t, once you&#39;ve used them at all, use them at will because you&#39;ve already paid the price. Remember that some algorithms really appreciate them. As of the 5.005 release, the $&amp; variable is no longer &quot;expensive&quot; the way the other two are.</p><p>Since Perl 5.6.1 the special variables @- and @+ can functionally replace $`, $&amp; and $&#39;. These arrays contain pointers to the beginning and end of each match (see perlvar for the full story), so they give you essentially the same information, but without the risk of excessive string copying.</p><p>Perl 5.10 added three specials, <code class="inline"><span class="i">$</span>{<span class="w">^MATCH</span>}</code> , <code class="inline"><span class="i">$</span>{<span class="w">^PREMATCH</span>}</code> , and <code class="inline"><span class="i">$</span>{<span class="w">^POSTMATCH</span>}</code>  to do the same job but without the global performance penalty. Perl 5.10 only sets these variables if you compile or execute the regular expression with the <code class="inline">/p</code> modifier.</p></section>	http://perldoc.perl.org/perlfaq6.html#Why-does-using-%24%26%2c-%24%60%2c-or-%24'-slow-my-program-down%3f
Invalid separator character %s in PerlIO layer specification %s	A			Perl Diagnostics							<section class="prog__container"><p>(W layer) When pushing layers onto the Perl I/O system, something other than a colon or whitespace was seen between the elements of a layer list. If the previous attribute had a parenthesised parameter list, perhaps that list was terminated too soon.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-separator-character-%25s-in-PerlIO-layer-specification-%25s
execute (definition)	A			Perl Glossary							<section class="prog__container"><p>To run a <b>program</b> or <b>subroutine</b>. (Has nothing to do with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span></code> built-in, unless you’re trying to run a <b>signal handler</b>.)</p></section>	http://perldoc.perl.org/perlglossary.html#execute
delete argument is index/value array slice, use array slice	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used index/value array slice syntax (<code class="inline"><span class="i">%array</span>[...]</code> ) as the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code>.  You probably meant <code class="inline"><span class="i">@array</span>[...]</code>  with an @ symbol instead.</p></section>	http://perldoc.perl.org/perldiag.html#delete-argument-is-index%2fvalue-array-slice%2c-use-array-slice
For Loops	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Perl&#39;s C-style <code class="inline">for</code>  loop works like the corresponding <code class="inline">while</code>  loop; that means that this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$i</span> = <span class="n">1</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="n">10</span><span class="sc">;</span> <span class="i">$i</span>++<span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>is the same as this:</p><pre class="verbatim"><ol><li>    <span class="i">$i</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">$i</span> &lt; <span class="n">10</span><span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>        <span class="i">$i</span>++<span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>There is one minor difference: if variables are declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> in the initialization section of the <code class="inline">for</code> , the lexical scope of those variables is exactly the <code class="inline">for</code>  loop (the body of the loop and the control sections). </p><p>As a special case, if the test in the <code class="inline">for</code>  loop (or the corresponding <code class="inline">while</code>  loop) is empty, it is treated as true.  That is, both</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="sc">;</span><span class="sc">;</span><span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>and</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>are treated as infinite loops.</p><p>Besides the normal array index looping, <code class="inline">for</code>  can lend itself to many other interesting applications.  Here&#39;s one that avoids the problem you get into if you explicitly test for end-of-file on an interactive file descriptor causing your program to appear to hang.   </p><pre class="verbatim"><ol><li>    <span class="i">$on_a_tty</span> = -t <span class="w">STDIN</span> &amp;&amp; -t <span class="w">STDOUT</span><span class="sc">;</span></li><li><span name="prompt"></span>    sub <span class="m">prompt</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;yes? &quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$on_a_tty</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span> <span class="i">prompt</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span> <span class="i">prompt</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># do something</span></li><li>    <span class="s">}</span></li></ol></pre><p>Using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> (or the operator form, <code class="inline"><span class="q">&lt;EXPR&gt;</span></code> ) as the conditional of a <code class="inline">for</code>  loop is shorthand for the following.  This behaviour is the same as a <code class="inline">while</code>  loop conditional.  </p><pre class="verbatim"><ol><li>    for <span class="s">(</span> <span class="i">prompt</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span> <span class="i">$_</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">)</span><span class="sc">;</span> <span class="i">prompt</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># do something</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlsyn.html#For-Loops
xor (function)	A			Perl Functions							<section class="prog__container"><pre>xor</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/xor.html
Malformed UTF-8 string in '%c' format in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to unpack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-string-in-'%25c'-format-in-unpack
assertion botched: %s	A			Perl Diagnostics							<section class="prog__container"><p>(X) The malloc package that comes with Perl had an internal failure.</p></section>	http://perldoc.perl.org/perldiag.html#assertion-botched%3a-%25s
$( (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The real gid of this process.  If you are on a machine that supports membership in multiple groups simultaneously, gives a space separated list of groups you are in.  The first number is the one returned by <code class="inline"><span class="i">getgid</span><span class="s">(</span><span class="s">)</span></code> , and the subsequent ones by <code class="inline"><span class="i">getgroups</span><span class="s">(</span><span class="s">)</span></code> , one of which may be the same as the first number.</p><p>However, a value assigned to <code class="inline"><span class="i">$(</span></code>  must be a single number used to set the real gid.  So the value given by <code class="inline"><span class="i">$(</span></code>  should <i>not</i> be assigned back to <code class="inline"><span class="i">$(</span></code>  without being forced numeric, such as by adding zero.  Note that this is different to the effective gid (<code class="inline"><span class="i">$)</span></code> ) which does take a list.</p><p>You can change both the real gid and the effective gid at the same time by using <code class="inline"><span class="i">POSIX::setgid</span><span class="s">(</span><span class="s">)</span></code> .  Changes to <code class="inline"><span class="i">$(</span></code>  require a check to <code class="inline"><span class="i">$!</span></code>  to detect any possible errors after an attempted change.</p><p>Mnemonic: parentheses are used to <i>group</i> things.  The real gid is the group you <i>left</i>, if you&#39;re running setgid.</p></section>	http://perldoc.perl.org/perlvar.html#%24(
Use of chdir('') or chdir(undef) as chdir() deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) chdir() with no arguments is documented to change to $ENV{HOME} or $ENV{LOGDIR}.  chdir(undef) and chdir(&#39;&#39;) share this behavior, but that has been deprecated.  In future versions they will simply fail.</p><p>Be careful to check that what you pass to chdir() is defined and not blank, else you might find yourself in your home directory.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-chdir('')-or-chdir(undef)-as-chdir()-deprecated
TAP::Parser::Result::Comment (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::Comment - Comment result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/Comment.html
casemapping (definition)	A			Perl Glossary							<section class="prog__container"><p>The process of converting a string to one of the four Unicode <b>casemaps</b>; in Perl, it is implemented with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fc.html">fc</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ucfirst.html">ucfirst</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span></code> functions.</p></section>	http://perldoc.perl.org/perlglossary.html#casemapping
Pod::Find (module)	A			Perl Standard Modules		[[Pod::Parser]]\n[[Pod::Checker]]\n[[perldoc]]					<section class="prog__container"><p>Pod::Find - find POD documents in directory trees</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Find</span> <span class="q">qw(pod_find simplify_name)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%pods</span> = <span class="i">pod_find</span><span class="s">(</span><span class="s">{</span> -<span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> -<span class="w">inc</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li>  foreach<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%pods</span><span class="s">)</span> <span class="s">{</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;found library POD `$pods{$_}&#39; in $_\\n&quot;</span><span class="sc">;</span></li><li>  <span class="s">}</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;podname=&quot;</span><span class="cm">,</span><span class="i">simplify_name</span><span class="s">(</span><span class="q">&#39;a/b/c/mymodule.pod&#39;</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>  <span class="i">$location</span> = <span class="i">pod_where</span><span class="s">(</span> <span class="s">{</span> -<span class="w">inc</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span> <span class="q">&quot;Pod::Find&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Find.html
Recompile perl with DEBUGGING to use switch	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) You can&#39;t use the <b>-D</b> option unless the code to produce the desired output is compiled into Perl, which entails some overhead, which is why it&#39;s currently left out of your copy.</p></section>	http://perldoc.perl.org/perldiag.html#Recompile-perl-with-*-D*DEBUGGING-to-use-*-D*-switch
Unsupported function %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) This machine doesn&#39;t implement the indicated function, apparently. At least, Configure doesn&#39;t think so.</p></section>	http://perldoc.perl.org/perldiag.html#Unsupported-function-%25s
Why do some characters not uppercase or lowercase correctly?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>See the answer to the previous question.</p></section>	http://perldoc.perl.org/perlunifaq.html#Why-do-some-characters-not-uppercase-or-lowercase-correctly%3f
%^H (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>The <code class="inline"><span class="i">%^H</span></code>  hash provides the same scoping semantic as <code class="inline"><span class="i">$^H</span></code> .  This makes it useful for implementation of lexically scoped pragmas.  See <span href="http://perldoc.perl.org/perlpragma.html">perlpragma</span>.   All the entries are stringified when accessed at runtime, so only simple values can be accommodated.  This means no pointers to objects, for example.</p><p>When putting items into <code class="inline"><span class="i">%^H</span></code> , in order to avoid conflicting with other users of the hash there is a convention regarding which keys to use. A module should use only keys that begin with the module&#39;s name (the name of its main package) and a &quot;/&quot; character.  For example, a module <code class="inline"><span class="w">Foo::Bar</span></code>  should use keys such as <code class="inline"><span class="w">Foo::Bar</span>/<span class="w">baz</span></code> .</p><p>This variable was added in Perl v5.6.0.</p></section>	http://perldoc.perl.org/perlvar.html#%25%5eH
syntactic sugar (definition)	A			Perl Glossary							<section class="prog__container"><p>An alternative way of writing something more easily; a shortcut.</p></section>	http://perldoc.perl.org/perlglossary.html#syntactic-sugar
${^POSTMATCH} (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>This is similar to <code class="inline"><span class="i">$&#39;</span></code>  (<code class="inline"><span class="i">$POSTMATCH</span></code> ) except that it does not incur the performance penalty associated with that variable.</p><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above.</p><p>In Perl v5.18 and earlier, it is only guaranteed to return a defined value when the pattern was compiled or executed with the <code class="inline">/p</code> modifier.  In Perl v5.20, the <code class="inline">/p</code> modifier does nothing, so <code class="inline"><span class="i">$</span>{<span class="w">^POSTMATCH</span>}</code>  does the same thing as <code class="inline"><span class="i">$POSTMATCH</span></code> .</p><p>This variable was added in Perl v5.10.0.</p><p>This variable is read-only and dynamically-scoped.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5ePOSTMATCH%7d
recursion (definition)	A			Perl Glossary							<section class="prog__container"><p>The art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).</p></section>	http://perldoc.perl.org/perlglossary.html#recursion
Bareword "%s" refers to nonexistent package	A			Perl Diagnostics							<section class="prog__container"><p>(W bareword) You used a qualified bareword of the form <code class="inline"><span class="w">Foo::</span></code> , but the compiler saw no other uses of that namespace before that point.  Perhaps you need to predeclare a package?</p></section>	http://perldoc.perl.org/perldiag.html#Bareword-%22%25s%22-refers-to-nonexistent-package
Can I get a BNF/yacc/RE for the Perl language?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>There is no BNF, but you can paw your way through the yacc grammar in perly.y in the source distribution if you&#39;re particularly brave. The grammar relies on very smart tokenizing code, so be prepared to venture into toke.c as well.</p><p>In the words of Chaim Frenkel: &quot;Perl&#39;s grammar can not be reduced to BNF. The work of parsing perl is distributed between yacc, the lexer, smoke and mirrors.&quot;</p></section>	http://perldoc.perl.org/perlfaq7.html#Can-I-get-a-BNF%2fyacc%2fRE-for-the-Perl-language%3f
eof (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>eof FILEHANDLE<br>eof ()<br>eof</pre><p>Returns 1 if the next read on FILEHANDLE will return end of file <i>or</i> if FILEHANDLE is not open.  FILEHANDLE may be an expression whose value gives the real filehandle.  (Note that this function actually reads a character and then <code class="inline"><span class="w">ungetc</span></code> s it, so isn&#39;t useful in an interactive context.)  Do not read from a terminal file (or call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof(FILEHANDLE)</span></code> on it) after end-of-file is reached.  File types such as terminals may lose the end-of-file condition if you do.</p><p>An <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> without an argument uses the last file read.  Using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof()</span></code> with empty parentheses is different.  It refers to the pseudo file formed from the files listed on the command line and accessed via the <code class="inline">&lt;&gt;</code>  operator.  Since <code class="inline">&lt;&gt;</code>  isn&#39;t explicitly opened, as a normal filehandle is, an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof()</span></code> before <code class="inline">&lt;&gt;</code>  has been used will cause <code class="inline"><span class="i">@ARGV</span></code>  to be examined to determine if input is available.   Similarly, an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof()</span></code> after <code class="inline">&lt;&gt;</code>  has returned end-of-file will assume you are processing another <code class="inline"><span class="i">@ARGV</span></code>  list, and if you haven&#39;t set <code class="inline"><span class="i">@ARGV</span></code> , will read input from <code class="inline"><span class="w">STDIN</span></code> ; see <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>.</p><p>In a <code class="inline">while <span class="s">(</span>&lt;&gt;<span class="s">)</span></code>  loop, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof(ARGV)</span></code> can be used to detect the end of each file, whereas <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof()</span></code> will detect the end  of the very last file only.  Examples:</p><pre class="verbatim"><ol><li>    <span class="c"># reset line numbering on each input file</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/^\\s*#/</span><span class="sc">;</span>  <span class="c"># skip comments</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$.\\t$_&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">ARGV</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span>  <span class="c"># Not eof()!</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># insert dashes just before last line of last file</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span>  <span class="c"># check for end of last file</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;--------------\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>     <span class="c"># needed if we&#39;re reading from a terminal</span></li><li>    <span class="s">}</span></li></ol></pre><p>Practical hint: you almost never need to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> in Perl, because the input operators typically return <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> when they run out of data or  encounter an error.</p></section>	http://perldoc.perl.org/functions/eof.html
invocant (definition)	A			Perl Glossary							<section class="prog__container"><p>The agent on whose behalf a <b>method</b> is invoked. In a <b>class</b> method, the invocant is a package name. In an <b>instance</b> method, the invocant is an object reference.</p></section>	http://perldoc.perl.org/perlglossary.html#invocant
Tie::Hash::NamedCapture (module)	A			Perl Standard Modules		[[perlreapi]]\n[[re]]\n[[Pragmatic Modules in perlmodlib]]\n[[%+ in perlvar]]\n[[%- in perlvar]]					<section class="prog__container"><p>Tie::Hash::NamedCapture - Named regexp capture buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span><span class="cm">,</span> <span class="q">&quot;Tie::Hash::NamedCapture&quot;</span><span class="sc">;</span></li><li>    <span class="c"># %hash now behaves like %+</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span><span class="cm">,</span> <span class="q">&quot;Tie::Hash::NamedCapture&quot;</span><span class="cm">,</span> <span class="w">all</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="c"># %hash now access buffers from regexp in $qr like %-</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Hash/NamedCapture.html
No output file after > or>> on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl handles its own command line redirection, and found a &#39;&gt;&#39; or a &#39;&gt;&gt;&#39; on the command line, but can&#39;t find the name of the file to which to write data destined for stdout.</p></section>	http://perldoc.perl.org/perldiag.html#No-output-file-after-%3e-or%3e%3e-on-command-line
Sequence (? incomplete in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A regular expression ended with an incomplete extension (?.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f-incomplete-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
handler (definition)	A			Perl Glossary		[[callback]]					<section class="prog__container"><p>A <b>subroutine</b> or <b>method</b> that Perl calls when your program needs to respond to some internal event, such as a <b>signal</b>, or an encounter with an operator subject to <b>operator overloading</b>. </p></section>	http://perldoc.perl.org/perlglossary.html#handler
Hexadecimal float: unsupported long double format	A			Perl Diagnostics							<section class="prog__container"><p>(F) You have configured Perl to use long doubles but the internals of the long double format are unknown; therefore the hexadecimal float output is impossible.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-unsupported-long-double-format
App::Prove::State::Result (module)	A			Perl Standard Modules							<section class="prog__container"><p>App::Prove::State::Result - Individual test suite results.</p> <pre class="verbatim"><ol><li>    <span class="c"># Re-run failed tests</span></li><li>    <span class="i">$ prove</span> --<span class="w">state</span>=<span class="w">failed</span><span class="cm">,</span><span class="w">save</span> -<span class="w">rbv</span></li></ol></pre></section>	http://perldoc.perl.org/App/Prove/State/Result.html
Not an ARRAY reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to an array value, but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-an-ARRAY-reference
: System Interaction	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section of the Perl FAQ covers questions involving operating system interaction. Topics include interprocess communication (IPC), control over the user-interface (keyboard, screen and pointing devices), and most anything else not related to data manipulation.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq8-manpage%3a-System-Interaction
Unicode::Collate (module)	A			Perl Standard Modules							<section class="prog__container"><p>Unicode::Collate - Unicode Collation Algorithm</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::Collate</span><span class="sc">;</span></li><li></li><li>  <span class="c">#construct</span></li><li>  <span class="i">$Collator</span> = <span class="w">Unicode::Collate</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">%tailoring</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c">#sort</span></li><li>  <span class="i">@sorted</span> = <span class="i">$Collator</span><span class="i">-&gt;sort</span><span class="s">(</span><span class="i">@not_sorted</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c">#compare</span></li><li>  <span class="i">$result</span> = <span class="i">$Collator</span><span class="i">-&gt;cmp</span><span class="s">(</span><span class="i">$a</span><span class="cm">,</span> <span class="i">$b</span><span class="s">)</span><span class="sc">;</span> <span class="c"># returns 1, 0, or -1.</span></li></ol></pre><p><b>Note:</b> Strings in <code class="inline"><span class="i">@not_sorted</span></code> , <code class="inline"><span class="i">$a</span></code>  and <code class="inline"><span class="i">$b</span></code>  are interpreted according to Perl&#39;s Unicode support. See <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span>, <span href="http://perldoc.perl.org/perluniintro.html">perluniintro</span>, <span href="http://perldoc.perl.org/perlunitut.html">perlunitut</span>, <span href="http://perldoc.perl.org/perlunifaq.html">perlunifaq</span>, <span href="http://perldoc.perl.org/utf8.html">utf8</span>. Otherwise you can use <code class="inline"><span class="w">preprocess</span></code>  or should decode them before.</p></section>	http://perldoc.perl.org/Unicode/Collate.html
Can't find %s on PATH	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used the <b>-S</b> switch, but the script to execute could not be found in the PATH.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-%25s-on-PATH
seekdir() attempted on invalid dirhandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) The dirhandle you are doing a seekdir() on is either closed or not really a dirhandle.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#seekdir()-attempted-on-invalid-dirhandle-%25s
terminator (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>character</b> or <b>string</b> that marks the end of another string. The <code class="inline"><span class="i">$/</span></code>  variable contains the string that terminates a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> operation, which <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span></code> deletes from the end. Not to be confused with <b>delimiters</b> or <b>separators</b>. The period at the end of this sentence is a terminator.</p></section>	http://perldoc.perl.org/perlglossary.html#terminator
How can I hope to use regular expressions without creating illegible and unmaintainable code?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Three techniques can make regular expressions maintainable and understandable.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-hope-to-use-regular-expressions-without-creating-illegible-and-unmaintainable-code%3f
-V	A			Perl Command-Line Switches							<section class="prog__container"><p>prints summary of the major perl configuration values and the current values of @INC.</p></section>	http://perldoc.perl.org/perlrun.html#*-V*
Memoize::Storable (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::Storable - store Memoized data in Storable database</p> </section>	http://perldoc.perl.org/Memoize/Storable.html
How do I reset an each() operation part-way through?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> functions to reset <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code>. To simply reset the iterator used by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> without doing anything else, use one of them in void context:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span> <span class="c"># resets iterator, nothing else.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%hash</span><span class="sc">;</span> <span class="c"># resets iterator, nothing else.</span></li></ol></pre><p>See the documentation for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-reset-an-each()-operation-part-way-through%3f
-[mM] [ - ] module=arg[,arg]...	A			Perl Command-Line Switches							<section class="prog__container"><p><b>-m</b><i>module</i> executes <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> <i>module</i> <code class="inline"><span class="s">(</span><span class="s">)</span><span class="sc">;</span></code>  before executing your program.</p><p><b>-M</b><i>module</i> executes <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> <i>module</i> <code class="inline"><span class="sc">;</span></code>  before executing your program.  You can use quotes to add extra code after the module name, e.g., <code class="inline">&#39;-M<i>MODULE</i> qw(foo bar)&#39;</code>.</p><p>If the first character after the <b>-M</b> or <b>-m</b> is a dash (<b>-</b>) then the &#39;use&#39; is replaced with &#39;no&#39;.</p><p>A little builtin syntactic sugar means you can also say <b>-m<i>MODULE</i>=foo,bar</b> or <b>-M<i>MODULE</i>=foo,bar</b> as a shortcut for <b>&#39;-M<i>MODULE</i> qw(foo bar)&#39;</b>.  This avoids the need to use quotes when importing symbols.  The actual code generated by <b>-M<i>MODULE</i>=foo,bar</b> is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">module</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/,/</span><span class="cm">,</span><span class="q">q{foo,bar}</span><span class="s">)</span></code> .  Note that the <code class="inline">=</code>  form removes the distinction between <b>-m</b> and <b>-M</b>; that is, <b>-m<i>MODULE</i>=foo,bar</b> is the same as <b>-M<i>MODULE</i>=foo,bar</b>.</p><p>A consequence of this is that <b>-M<i>MODULE</i>=number</b> never does a version check, unless <code class="inline"><i>MODULE</i>::import()</code> itself is set up to do a version check, which could happen for example if <i>MODULE</i> inherits from <span href="http://perldoc.perl.org/Exporter.html">Exporter</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-%5bmM%5d*%5b*-*%5d_module%3darg%5b%2carg%5d..._
!=~ should be !~	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The non-matching operator is !~, not !=~.  !=~ will be interpreted as the != (numeric not equal) and ~ (1&#39;s complement) operators: probably not what you intended.</p></section>	http://perldoc.perl.org/perldiag.html#!%3d~-should-be-!~
Module::Load (module)	A			Perl Standard Modules							<section class="prog__container"><p>Module::Load - runtime require of both modules and files</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module::Load</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$module</span> = <span class="q">&#39;Data::Dumper&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="w">load</span> <span class="w">Data::Dumper</span><span class="sc">;</span>     <span class="c"># loads that module, but not import any functions</span></li><li>                         <span class="c"># -&gt; cannot use &#39;Dumper&#39; function</span></li><li></li><li>  <span class="w">load</span> <span class="q">&#39;Data::Dumper&#39;</span><span class="sc">;</span>   <span class="c"># ditto</span></li><li>  <span class="w">load</span> <span class="i">$module</span>           <span class="c"># tritto</span></li><li></li><li>  <span class="w">autoload</span> <span class="w">Data::Dumper</span><span class="sc">;</span> <span class="c"># loads that module and imports the default functions</span></li><li>                         <span class="c"># -&gt; can use &#39;Dumper&#39; function</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$script</span> = <span class="q">&#39;some/script.pl&#39;</span></li><li>  <span class="w">load</span> <span class="i">$script</span><span class="sc">;</span></li><li>  <span class="w">load</span> <span class="q">&#39;some/script.pl&#39;</span><span class="sc">;</span>  <span class="c"># use quotes because of punctuations</span></li><li></li><li>  <span class="w">load</span> <span class="w">thing</span><span class="sc">;</span>             <span class="c"># try &#39;thing&#39; first, then &#39;thing.pm&#39;</span></li><li></li><li>  <span class="w">load</span> <span class="w">CGI</span><span class="cm">,</span> <span class="q">&#39;:all&#39;</span><span class="sc">;</span>       <span class="c"># like &#39;use CGI qw[:standard]&#39;</span></li></ol></pre></section>	http://perldoc.perl.org/Module/Load.html
(Missing semicolon on previous line?)	A			Perl Diagnostics							<section class="prog__container"><p>(S syntax) This is an educated guess made in conjunction with the message &quot;%s found where operator expected&quot;.  Don&#39;t automatically put a semicolon on the previous line just because you saw this message.</p></section>	http://perldoc.perl.org/perldiag.html#(Missing-semicolon-on-previous-line%3f)
Use \x{...} for more than two hex characters in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a regular expression, you said something like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\xBEEF ] ])</span></li></ol></pre><p>Perl isn&#39;t sure if you meant this</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\x{BEEF} ] ])</span></li></ol></pre><p>or if you meant this</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\x{BE} E F ] ])</span></li></ol></pre><p>You need to add either braces or blanks to disambiguate.</p></section>	http://perldoc.perl.org/perldiag.html#Use-%5cx%7b...%7d-for-more-than-two-hex-characters-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
sed (definition)	A			Perl Glossary							<section class="prog__container"><p>A venerable Stream EDitor from which Perl derives some of its ideas.</p></section>	http://perldoc.perl.org/perlglossary.html#sed
Precedence problem: open %s should be open(%s)	A			Perl Diagnostics							<section class="prog__container"><p>(S precedence) The old irregular construct</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">FOO</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li></ol></pre><p>is now misinterpreted as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>because of the strict regularization of Perl 5&#39;s grammar into unary and list operators.  (The old open was a little of both.)  You must put parentheses around the filehandle, or use the new &quot;or&quot; operator instead of &quot;||&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Precedence-problem%3a-open-%25s-should-be-open(%25s)
instance variable (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>attribute</b> of an <b>object</b>; data stored with the particular object rather than with the class as a whole.</p></section>	http://perldoc.perl.org/perlglossary.html#instance-variable
Missing control char name in \c	A			Perl Diagnostics							<section class="prog__container"><p>(F) A double-quoted string ended with &quot;\\c&quot;, without the required control character name.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-control-char-name-in-%5cc
How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Perl can be used for almost any coding problem, even ones which require integrating specialist C code for extra speed. As with any tool it can be used well or badly. Perl has many strengths, and a few weaknesses, precisely which areas are good and bad is often a personal choice.</p><p>When choosing a language you should also be influenced by the <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f">resources</span>, <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpantesters.org%2f">testing culture</span> and <span href="http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fcommunity.html">community</span> which surrounds it.</p><p>For comparisons to a specific language it is often best to create a small project in both languages and compare the results, make sure to use all the <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f">resources</span> of each language, as a language is far more than just it&#39;s syntax.</p></section>	http://perldoc.perl.org/perlfaq1.html#How-does-Perl-compare-with-other-languages-like-Java%2c-Python%2c-REXX%2c-Scheme%2c-or-Tcl%3f
local (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Miscellaneous functions							<section class="prog__container"><pre>local EXPR</pre><p>You really probably want to be using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> instead, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> isn&#39;t what most people think of as &quot;local&quot;.  See <span href="http://perldoc.perl.org/perlsub.html#Private-Variables-via-my()">Private Variables via my() in perlsub</span> for details.</p><p>A local modifies the listed variables to be local to the enclosing block, file, or eval.  If more than one value is listed, the list must be placed in parentheses.  See <span href="http://perldoc.perl.org/perlsub.html#Temporary-Values-via-local()">Temporary Values via local() in perlsub</span> for details, including issues with tied arrays and hashes.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="w">EXPR</span></code>  construct can also be used to localize the deletion of array/hash elements to the current block. See <span href="http://perldoc.perl.org/perlsub.html#Localized-deletion-of-elements-of-composite-types">Localized deletion of elements of composite types in perlsub</span>.</p></section>	http://perldoc.perl.org/functions/local.html
Octal number > 037777777777 non-portable	A			Perl Diagnostics							<section class="prog__container"><p>(W portable) The octal number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span> for more on portability concerns.</p></section>	http://perldoc.perl.org/perldiag.html#Octal-number-%3e-037777777777-non-portable
static variable (definition)	A			Perl Glossary							<section class="prog__container"><p>No such thing. Just use a <b>lexical variable</b> in a scope larger than your <b>subroutine</b>, or declare it with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> instead of with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>.</p></section>	http://perldoc.perl.org/perlglossary.html#static-variable
fcntl is not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine apparently doesn&#39;t implement fcntl().  What is this, a PDP-11 or something?</p></section>	http://perldoc.perl.org/perldiag.html#fcntl-is-not-implemented
Where can I learn about linking C with Perl?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>If you want to call C from Perl, start with <span href="http://perldoc.perl.org/perlxstut.html">perlxstut</span>, moving on to <span href="http://perldoc.perl.org/perlxs.html">perlxs</span>, <span href="http://perldoc.perl.org/xsubpp.html">xsubpp</span>, and <span href="http://perldoc.perl.org/perlguts.html">perlguts</span>. If you want to call Perl from C, then read <span href="http://perldoc.perl.org/perlembed.html">perlembed</span>, <span href="http://perldoc.perl.org/perlcall.html">perlcall</span>, and <span href="http://perldoc.perl.org/perlguts.html">perlguts</span>. Don&#39;t forget that you can learn a lot from looking at how the authors of existing extension modules wrote their code and solved their problems.</p><p>You might not need all the power of XS. The Inline::C module lets you put C code directly in your Perl source. It handles all the magic to make it work. You still have to learn at least some of the perl API but you won&#39;t have to deal with the complexity of the XS support files.</p></section>	http://perldoc.perl.org/perlfaq3.html#Where-can-I-learn-about-linking-C-with-Perl%3f
How do I unescape a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>It depends just what you mean by &quot;escape&quot;. URL escapes are dealt with in <span href="http://perldoc.perl.org/perlfaq9.html">perlfaq9</span>. Shell escapes with the backslash (<code class="inline">\\</code> ) character are removed with</p><pre class="verbatim"><ol><li>    <span class="q">s/\\\\(.)/$1/g</span><span class="sc">;</span></li></ol></pre><p>This won&#39;t expand <code class="inline"><span class="q">&quot;\\n&quot;</span></code>  or <code class="inline"><span class="q">&quot;\\t&quot;</span></code>  or any other special escapes.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-unescape-a-string%3f
%s (...) interpreted as function	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You&#39;ve run afoul of the rule that says that any list operator followed by parentheses turns into a function, with all the list operators arguments found inside the parentheses.  See <span href="http://perldoc.perl.org/perlop.html#Terms-and-List-Operators-(Leftward)">Terms and List Operators (Leftward) in perlop</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-(...)-interpreted-as-function
setruid() not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign to <code class="inline"><span class="i">$&lt;</span></code> , and your operating system doesn&#39;t support the setruid() system call (or equivalent), or at least Configure didn&#39;t think so.</p></section>	http://perldoc.perl.org/perldiag.html#setruid()-not-implemented
Filehandle %s opened only for output	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You tried to read from a filehandle opened only for writing, If you intended it to be a read/write filehandle, you needed to open it with &quot;+&lt;&quot; or &quot;+&gt;&quot; or &quot;+&gt;&gt;&quot; instead of with &quot;&gt;&quot;.  If you intended only to read from the file, use &quot;&lt;&quot;.  See <span href="http://perldoc.perl.org/functions/open.html">open</span>.  Another possibility is that you attempted to open filedescriptor 0 (also known as STDIN) for output (maybe you closed STDIN earlier?).</p></section>	http://perldoc.perl.org/perldiag.html#Filehandle-%25s-opened-only-for-output
Value of %s can be "0"; test with defined()	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) In a conditional expression, you used &lt;HANDLE&gt;, &lt;*&gt; (glob), <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir()</span></code> as a boolean value.  Each of these constructs can return a value of &quot;0&quot;; that would make the conditional expression false, which is probably not what you intended.  When using these constructs in conditional expressions, test their values with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> operator.</p></section>	http://perldoc.perl.org/perldiag.html#Value-of-%25s-can-be-%220%22%3b-test-with-defined()
Warning: unable to close filehandle %s properly	A			Perl Diagnostics							<section class="prog__container"><p>(S) The implicit close() done by an open() got an error indication on the close().  This usually indicates your file system ran out of disk space.</p></section>	http://perldoc.perl.org/perldiag.html#Warning%3a-unable-to-close-filehandle-%25s-properly
file test operator (definition)	A			Perl Glossary							<section class="prog__container"><p>A built-in unary operator that you use to determine whether something is <b>true</b> about a file, such as <code class="inline"><span class="q">–o</span> <span class="q">$filename</span></code>  to test whether you’re the owner of the file.</p></section>	http://perldoc.perl.org/perlglossary.html#file-test-operator
manpage (definition)	A			Perl Glossary							<section class="prog__container"><p>A “page” from the manuals, typically accessed via the <i>man</i>(1) command. A manpage contains a SYNOPSIS, a DESCRIPTION, a list of BUGS, and so on, and is typically longer than a page. There are manpages documenting <b>commands</b>, <b>syscalls</b>, <b>library</b> <b>functions</b>, <b>devices</b>, <b>protocols</b>, <b>files</b>, and such. In this book, we call any piece of standard Perl documentation (like <span href="http://perldoc.perl.org/perlop.html">perlop</span> or <span href="http://perldoc.perl.org/perldelta.html">perldelta</span>) a manpage, no matter what format it’s installed in on your system.</p></section>	http://perldoc.perl.org/perlglossary.html#manpage
Died	A			Perl Diagnostics							<section class="prog__container"><p>(F) You passed die() an empty string (the equivalent of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;&quot;</span></code> ) or you called it with no args and <code class="inline"><span class="i">$@</span></code>  was empty.</p></section>	http://perldoc.perl.org/perldiag.html#Died
Thread (module)	A			Perl Standard Modules		[[threads]]\n[[threads::shared]]\n[[Thread::Queue]]\n[[Thread::Semaphore]]					<section class="prog__container"><p>Thread - Manipulate threads in Perl (for old code only)</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Thread</span> <span class="q">qw(:DEFAULT async yield)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$t</span> = <span class="w">Thread</span><span class="w">-&gt;new</span><span class="s">(</span>\\<span class="i">&amp;start_sub</span><span class="cm">,</span> <span class="i">@start_args</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$result</span> = <span class="i">$t</span><span class="i">-&gt;join</span><span class="sc">;</span></li><li>    <span class="i">$t</span><span class="i">-&gt;detach</span><span class="sc">;</span></li><li></li><li>    if <span class="s">(</span><span class="i">$t</span><span class="i">-&gt;done</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$t</span><span class="i">-&gt;join</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    if<span class="s">(</span><span class="i">$t</span><span class="i">-&gt;equal</span><span class="s">(</span><span class="i">$another_thread</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># ...</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">yield</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tid</span> = <span class="w">Thread</span><span class="w">-&gt;self</span><span class="w">-&gt;tid</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/lock.html">lock</span><span class="s">(</span><span class="i">$scalar</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/lock.html">lock</span><span class="s">(</span><span class="i">@array</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/lock.html">lock</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@list</span> = <span class="w">Thread</span><span class="w">-&gt;list</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Thread.html
NULL OP IN RUN	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) Some internal routine called run() with a null opcode pointer.</p></section>	http://perldoc.perl.org/perldiag.html#NULL-OP-IN-RUN
readpipe (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>readpipe EXPR<br>readpipe</pre><p>EXPR is executed as a system command. The collected standard output of the command is returned. In scalar context, it comes back as a single (potentially multi-line) string.  In list context, returns a list of lines (however you&#39;ve defined lines with <code class="inline"><span class="i">$/</span></code>  or <code class="inline"><span class="i">$INPUT_RECORD_SEPARATOR</span></code> ). This is the internal function implementing the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qx.html">qx/EXPR/</span></code> operator, but you can use it directly.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qx.html">qx/EXPR/</span></code> operator is discussed in more detail in <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>. If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p></section>	http://perldoc.perl.org/functions/readpipe.html
$[ used in %s (did you mean $] ?)	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You used <code class="inline"><span class="i">$[</span></code>  in a comparison, such as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$[</span> &gt; <span class="n">5.006</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;...</li><li>    <span class="s">}</span></li></ol></pre><p>You probably meant to use <code class="inline"><span class="i">$]</span></code>  instead.  <code class="inline"><span class="i">$[</span></code>  is the base for indexing arrays.  <code class="inline"><span class="i">$]</span></code>  is the Perl version number in decimal.</p></section>	http://perldoc.perl.org/perldiag.html#%24%5b-used-in-%25s-(did-you-mean-%24%5d-%3f)
GID (definition)	A			Perl Glossary							<section class="prog__container"><p>Group ID—in Unix, the numeric group ID that the <b>operating system</b> uses to identify you and members of your <b>group</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#GID
How can I do an atexit() or setjmp()/longjmp()? (Exception handling)	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>You can use the <code class="inline">END</code>  block to simulate <code class="inline"><span class="i">atexit</span><span class="s">(</span><span class="s">)</span></code> . Each package&#39;s <code class="inline">END</code>  block is called when the program or thread ends. See the <span href="http://perldoc.perl.org/perlmod.html">perlmod</span> manpage for more details about <code class="inline">END</code>  blocks.</p><p>For example, you can use this to make sure your filter program managed to finish its output without filling up the disk:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/END.html">END</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;stdout close failed: $!&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline">END</code>  block isn&#39;t called when untrapped signals kill the program, though, so if you use <code class="inline">END</code>  blocks you should also use</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">sigtrap</span> <span class="q">qw(die normal-signals)</span><span class="sc">;</span></li></ol></pre><p>Perl&#39;s exception-handling mechanism is its <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> operator. You can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> as <code class="inline"><span class="w">setjmp</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die()</span></code> as <code class="inline"><span class="w">longjmp</span></code> . For details of this, see the section on signals, especially the time-out handler for a blocking <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock()</span></code> in <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span> or the section on &quot;Signals&quot; in <i>Programming Perl</i>.</p><p>If exception handling is all you&#39;re interested in, use one of the many CPAN modules that handle exceptions, such as <span href="http://search.cpan.org/perldoc/Try::Tiny">Try::Tiny</span>.</p><p>If you want the <code class="inline"><span class="i">atexit</span><span class="s">(</span><span class="s">)</span></code>  syntax (and an <code class="inline"><span class="i">rmexit</span><span class="s">(</span><span class="s">)</span></code>  as well), try the <code class="inline"><span class="w">AtExit</span></code>  module available from CPAN.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-do-an-atexit()-or-setjmp()%2flongjmp()%3f-(Exception-handling)
Reversed %s= operator	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You wrote your assignment operator backwards.  The = must always come last, to avoid ambiguity with subsequent unary operators.</p></section>	http://perldoc.perl.org/perldiag.html#Reversed-%25s%3d-operator
pattern (definition)	A			Perl Glossary							<section class="prog__container"><p>A template used in <b>pattern matching</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#pattern
How can I open a pipe both to and from a command?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>The <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span> module (part of the standard perl distribution) is an easy-to-use approach that internally uses <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe()</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code> to do the job. Make sure you read the deadlock warnings in its documentation, though (see <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span>). See <span href="http://perldoc.perl.org/perlipc.html#Bidirectional-Communication-with-Another-Process">Bidirectional Communication with Another Process in perlipc</span> and <span href="http://perldoc.perl.org/perlipc.html#Bidirectional-Communication-with-Yourself">Bidirectional Communication with Yourself in perlipc</span></p><p>You may also use the <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span> module (part of the standard perl distribution), but be warned that it has a different order of arguments from <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span> (see <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>).</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-open-a-pipe-both-to-and-from-a-command%3f
syntax error at line %d: '%s' unexpected	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through the Bourne shell instead of Perl.  Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#syntax-error-at-line-%25d%3a-'%25s'-unexpected
How do I create a module?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p><span href="http://perldoc.perl.org/perlnewmod.html">perlnewmod</span> is a good place to start, ignore the bits about uploading to CPAN if you don&#39;t want to make your module publicly available.</p><p><span href="http://search.cpan.org/perldoc/ExtUtils::ModuleMaker">ExtUtils::ModuleMaker</span> and <span href="http://search.cpan.org/perldoc/Module::Starter">Module::Starter</span> are also good places to start. Many CPAN authors now use <span href="http://search.cpan.org/perldoc/Dist::Zilla">Dist::Zilla</span> to automate as much as possible.</p><p>Detailed documentation about modules can be found at: <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>, <span href="http://perldoc.perl.org/perlmodlib.html">perlmodlib</span>, <span href="http://perldoc.perl.org/perlmodstyle.html">perlmodstyle</span>.</p><p>If you need to include C code or C library interfaces use h2xs. h2xs will create the module distribution structure and the initial interface files. <span href="http://perldoc.perl.org/perlxs.html">perlxs</span> and <span href="http://perldoc.perl.org/perlxstut.html">perlxstut</span> explain the details.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-create-a-module%3f
Carp (module)	A			Perl Standard Modules		[[Carp::Always]]\n[[Carp::Clan]]					<section class="prog__container"><p>Carp - alternative warn and die for modules</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Carp</span><span class="sc">;</span></li><li></li><li>    <span class="c"># warn user (from perspective of caller)</span></li><li>    <span class="w">carp</span> <span class="q">&quot;string trimmed to 80 chars&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># die of errors (from perspective of caller)</span></li><li>    <span class="w">croak</span> <span class="q">&quot;We&#39;re outta here!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># die of errors with stack backtrace</span></li><li>    <span class="w">confess</span> <span class="q">&quot;not implemented&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># cluck, longmess and shortmess not exported by default</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Carp</span> <span class="q">qw(cluck longmess shortmess)</span><span class="sc">;</span></li><li>    <span class="w">cluck</span> <span class="q">&quot;This is how we got here!&quot;</span><span class="sc">;</span></li><li>    <span class="i">$long_message</span>   = <span class="i">longmess</span><span class="s">(</span> <span class="q">&quot;message from cluck() or confess()&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$short_message</span>  = <span class="i">shortmess</span><span class="s">(</span> <span class="q">&quot;message from carp() or croak()&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Carp.html
IO::File (module)	A			Perl Standard Modules		[[perlfunc]]\n[[I/O Operators in perlop]]\n[[IO::Handle]]\n[[IO::Seekable]]\n[[IO::Dir]]					<section class="prog__container"><p>IO::File - supply object methods for filehandles</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::File</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::File</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$fh</span><span class="i">-&gt;open</span><span class="s">(</span><span class="q">&quot;&lt; file&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::File</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;&gt; file&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;bar\\n&quot;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::File</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="cm">,</span> <span class="q">&quot;r&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$fh</span><span class="sc">;</span>       <span class="c"># automatically closes the file</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::File</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_APPEND</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;corge\\n&quot;</span><span class="sc">;</span></li><li></li><li>        <span class="i">$pos</span> = <span class="i">$fh</span><span class="i">-&gt;getpos</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;setpos</span><span class="s">(</span><span class="i">$pos</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$fh</span><span class="sc">;</span>       <span class="c"># automatically closes the file</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="w">autoflush</span> <span class="w">STDOUT</span> <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/File.html
(Do you need to predeclare %s?)	A			Perl Diagnostics							<section class="prog__container"><p>(S syntax) This is an educated guess made in conjunction with the message &quot;%s found where operator expected&quot;.  It often means a subroutine or module name is being referenced that hasn&#39;t been declared yet.  This may be because of ordering problems in your file, or because of a missing &quot;sub&quot;, &quot;package&quot;, &quot;require&quot;, or &quot;use&quot; statement.  If you&#39;re referencing something that isn&#39;t defined yet, you don&#39;t actually have to define the subroutine or package before the current location.  You can use an empty &quot;sub foo;&quot; or &quot;package FOO;&quot; to enter a &quot;forward&quot; declaration.</p></section>	http://perldoc.perl.org/perldiag.html#(Do-you-need-to-predeclare-%25s%3f)
Can't modify nonexistent substring	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal routine that does assignment to a substr() was handed a NULL.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-nonexistent-substring
read (function)	A			Perl Functions\nPerl Input and output functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>read FILEHANDLE,SCALAR,LENGTH,OFFSET<br>read FILEHANDLE,SCALAR,LENGTH</pre><p>Attempts to read LENGTH <i>characters</i> of data into variable SCALAR from the specified FILEHANDLE.  Returns the number of characters actually read, <code class="inline"><span class="n">0</span></code>  at end of file, or undef if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is also set).  SCALAR will be grown or shrunk  so that the last character actually read is the last character of the scalar after the read.</p><p>An OFFSET may be specified to place the read data at some place in the string other than the beginning.  A negative OFFSET specifies placement at that many characters counting backwards from the end of the string.  A positive OFFSET greater than the length of SCALAR results in the string being padded to the required size with <code class="inline"><span class="q">&quot;\\0&quot;</span></code>  bytes before the result of the read is appended.</p><p>The call is implemented in terms of either Perl&#39;s or your system&#39;s native fread(3) library function.  To get a true read(2) system call, see <span href="http://perldoc.perl.org/functions/read.html#sysread-FILEHANDLE%2cSCALAR%2cLENGTH%2cOFFSET">sysread</span>.</p><p>Note the <i>characters</i>: depending on the status of the filehandle, either (8-bit) bytes or characters are read.  By default, all filehandles operate on bytes, but for example if the filehandle has been opened with the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  I/O layer (see <span href="http://perldoc.perl.org/functions/open.html">open</span>, and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma, <span href="http://perldoc.perl.org/open.html">open</span>), the I/O will operate on UTF8-encoded Unicode characters, not bytes.  Similarly for the <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  pragma: in that case pretty much any characters can be read.</p></section>	http://perldoc.perl.org/functions/read.html
standard I/O (definition)	A			Perl Glossary							<section class="prog__container"><p>A standard C library for doing <b>buffered</b> input and output to the <b>operating system</b>. (The “standard” of standard I/O is at most marginally related to the “standard” of standard input and output.) In general, Perl relies on whatever implementation of standard I/O a given operating system supplies, so the buffering characteristics of a Perl program on one machine may not exactly match those on another machine. Normally this only influences efficiency, not semantics. If your standard I/O package is doing block buffering and you want it to <b>flush</b> the buffer more often, just set the <code class="inline"><span class="i">$|</span></code>  variable to a true value.</p></section>	http://perldoc.perl.org/perlglossary.html#standard-I%2fO
/a, d, l and u regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>These modifiers, all new in 5.14, affect which character-set rules (Unicode, etc.) are used, as described below in <span href="http://perldoc.perl.org/perlre.html#Character-set-modifiers">Character set modifiers</span>.</p></section>	http://perldoc.perl.org/perlre.html#*a%2c-d%2c-l-and-u*
Pod::ParseUtils (module)	A			Perl Standard Modules		[[pod2man]]\n[[pod2roff]]\n[[Pod::Parser]]\n[[Pod::Checker]]\n[[pod2html]]					<section class="prog__container"><p>Pod::ParseUtils - helpers for POD parsing and conversion</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::ParseUtils</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$list</span> = <span class="w">new</span> <span class="w">Pod::List</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$link</span> = <span class="w">Pod::Hyperlink</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;Pod::Parser&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/ParseUtils.html
What is a JAPH?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>(contributed by brian d foy)</p><p>JAPH stands for &quot;Just another Perl hacker,&quot;, which Randal Schwartz used to sign email and usenet messages starting in the late 1980s. He previously used the phrase with many subjects (&quot;Just another x hacker,&quot;), so to distinguish his JAPH, he started to write them as Perl programs:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Just another Perl hacker,&quot;</span><span class="sc">;</span></li></ol></pre><p>Other people picked up on this and started to write clever or obfuscated programs to produce the same output, spinning things quickly out of control while still providing hours of amusement for their creators and readers.</p><p>CPAN has several JAPH programs at <span href="http://www.cpan.org/misc/japh">http://www.cpan.org/misc/japh</span>.</p></section>	http://perldoc.perl.org/perlfaq1.html#What-is-a-JAPH%3f
Unary "~" operator	A			Perl Operators\nPerl Symbolic Unary Operators							<section class="prog__container">Unary &quot;~&quot; performs bitwise negation, that is, 1&#39;s complement. For example, 0666 &amp; ~ 027 is 0640. (See also Integer Arithmetic and Bitwise String Operators.) Note that the width of the result is platform-dependent: ~ 0 is 32 bits wide on a 32-bit platform, but 64 bits wide on a 64-bit platform, so if you are expecting a certain bit width, remember to use the &quot;&amp;&quot; operator to mask off the excess bits.</section>	http://perldoc.perl.org/perlop.html#Symbolic-Unary-Operators
Math::BigRat (module)	A			Perl Standard Modules		[[bigrat]]\n[[Math::BigFloat]]\n[[Math::BigInt]]\n[[Math::BigInt::FastCalc]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::Pari]]					<section class="prog__container"><p>Math::BigRat - Arbitrary big rational numbers</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::BigRat</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="w">Math::BigRat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;3/7&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="i">$x</span> += <span class="q">&#39;5/9&#39;</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="i">-&gt;bstr</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span> <span class="i">**</span> <span class="n">2</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$y</span> = <span class="w">Math::BigRat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;inf&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$y &quot;</span><span class="cm">,</span> <span class="s">(</span><span class="i">$y</span><span class="i">-&gt;is_inf</span> ? <span class="q">&#39;is&#39;</span> <span class="co">:</span> <span class="q">&#39;is not&#39;</span><span class="s">)</span> <span class="cm">,</span> <span class="q">&quot; infinity\\n&quot;</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">Math::BigRat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">144</span><span class="s">)</span><span class="sc">;</span> <span class="i">$z</span><span class="i">-&gt;bsqrt</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Math/BigRat.html
gmtime(%f) too small	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> with a number that was smaller than it can reliably handle and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> probably returned the wrong date.</p></section>	http://perldoc.perl.org/perldiag.html#gmtime(%25f)-too-small
lstat() on filehandle%s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You tried to do an lstat on a filehandle.  What did you mean by that?  lstat() makes sense only on filenames.  (Perl did a fstat() instead on the filehandle.)</p></section>	http://perldoc.perl.org/perldiag.html#lstat()-on-filehandle%25s
panic: restartop in %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Some internal routine requested a goto (or something like it), and didn&#39;t supply the destination.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-restartop-in-%25s
perl: warning: Non hex character in '$ENV{PERL_HASH_SEED}', seed only partially set	A			Perl Diagnostics							<section class="prog__container"><p>(S) PERL_HASH_SEED should match /^\\s*(?:0x)?[0-9a-fA-F]+\\s*\\z/ but it contained a non hex character.  This could mean you are not using the hash seed you think you are.</p></section>	http://perldoc.perl.org/perldiag.html#perl%3a-warning%3a-Non-hex-character-in-'%24ENV%7bPERL_HASH_SEED%7d'%2c-seed-only-partially-set
Label not found for "redo %s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You named a loop to restart, but you&#39;re not currently in a loop of that name, not even if you count where you were called from.  See <span href="http://perldoc.perl.org/functions/last.html">last</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Label-not-found-for-%22redo-%25s%22
chown (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>chown LIST</pre><p>Changes the owner (and group) of a list of files.  The first two elements of the list must be the <i>numeric</i> uid and gid, in that order.  A value of -1 in either position is interpreted by most systems to leave that value unchanged.  Returns the number of files successfully changed.</p><pre class="verbatim"><ol><li>    <span class="i">$cnt</span> = <span class="l_k" href="http://perldoc.perl.org/functions/chown.html">chown</span> <span class="i">$uid</span><span class="cm">,</span> <span class="i">$gid</span><span class="cm">,</span> <span class="q">&#39;foo&#39;</span><span class="cm">,</span> <span class="q">&#39;bar&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chown.html">chown</span> <span class="i">$uid</span><span class="cm">,</span> <span class="i">$gid</span><span class="cm">,</span> <span class="i">@filenames</span><span class="sc">;</span></li></ol></pre><p>On systems that support fchown(2), you may pass filehandles among the files.  On systems that don&#39;t support fchown(2), passing filehandles raises an exception.  Filehandles must be passed as globs or glob references to be recognized; barewords are considered filenames.</p><p>Here&#39;s an example that looks up nonnumeric uids in the passwd file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;User: &quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$user</span> = <span class="q">&lt;STDIN&gt;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Files: &quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$pattern</span> = <span class="q">&lt;STDIN&gt;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$login</span><span class="cm">,</span><span class="i">$pass</span><span class="cm">,</span><span class="i">$uid</span><span class="cm">,</span><span class="i">$gid</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getpwnam.html">getpwnam</span><span class="s">(</span><span class="i">$user</span><span class="s">)</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;$user not in passwd file&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ary</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="i">$pattern</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># expand filenames</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chown.html">chown</span> <span class="i">$uid</span><span class="cm">,</span> <span class="i">$gid</span><span class="cm">,</span> <span class="i">@ary</span><span class="sc">;</span></li></ol></pre><p>On most systems, you are not allowed to change the ownership of the file unless you&#39;re the superuser, although you should be able to change the group to any of your secondary groups.  On insecure systems, these restrictions may be relaxed, but this is not a portable assumption. On POSIX systems, you can detect this condition this way:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(sysconf _PC_CHOWN_RESTRICTED)</span><span class="sc">;</span></li><li>    <span class="i">$can_chown_giveaway</span> = not <span class="i">sysconf</span><span class="s">(</span><span class="w">_PC_CHOWN_RESTRICTED</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#chown">chown in perlport</span>.</p></section>	http://perldoc.perl.org/functions/chown.html
Memoize::Expire (module)	A			Perl Standard Modules		[[http://www.plover.com/~mjd/perl/Memoize/]]					<section class="prog__container"><p>Memoize::Expire - Plug-in module for automatic expiration of memoized values</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Memoize</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Memoize::Expire</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%cache</span> <span class="cm">=&gt;</span> <span class="q">&#39;Memoize::Expire&#39;</span><span class="cm">,</span></li><li>&#09;  &#09;     <span class="w">LIFETIME</span> <span class="cm">=&gt;</span> <span class="i">$lifetime</span><span class="cm">,</span>    <span class="c"># In seconds</span></li><li>&#09;&#09;     <span class="w">NUM_USES</span> <span class="cm">=&gt;</span> <span class="i">$n_uses</span><span class="sc">;</span></li><li></li><li>  <span class="w">memoize</span> <span class="q">&#39;function&#39;</span><span class="cm">,</span> <span class="w">SCALAR_CACHE</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="w">HASH</span> <span class="cm">=&gt;</span> \\<span class="i">%cache</span> <span class="s">]</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Memoize/Expire.html
Attempt to bless into a freed package	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> <span class="i">$foo</span></code>  with one argument after somehow causing the current package to be freed.  Perl cannot figure out what to do, so it throws up in hands in despair.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-bless-into-a-freed-package
Can't use 'defined(@array)' (Maybe you should just omit the defined()?)	A			Perl Diagnostics							<section class="prog__container"><p>(F) defined() is not useful on arrays because it checks for an undefined <i>scalar</i> value.  If you want to see if the array is empty, just use <code class="inline">if (@array) { # not empty }</code> for example.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-'defined(%40array)'-(Maybe-you-should-just-omit-the-defined()%3f)
How do I substitute case-insensitively on the LHS while preserving case on the RHS?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Here&#39;s a lovely Perlish solution by Larry Rosler. It exploits properties of bitwise xor on ASCII strings.</p><pre class="verbatim"><ol><li>    <span class="i">$_</span>= <span class="q">&quot;this is a TEsT case&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$old</span> = <span class="q">&#39;test&#39;</span><span class="sc">;</span></li><li>    <span class="i">$new</span> = <span class="q">&#39;success&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="q">s{(\\Q$old\\E)}</span></li><li>    <span class="q">    { uc $new | (uc $1 ^ $1) .</span></li><li>        <span class="q">        (uc(substr $1, -1) ^ substr $1, -1) x</span></li><li>        <span class="q">        (length($new) - length $1)</span></li><li>    <span class="q">    }egi</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li></ol></pre><p>And here it is as a subroutine, modeled after the above:</p><pre class="verbatim"><ol><li><span name="preserve_case"></span>    sub <span class="m">preserve_case</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$old</span><span class="cm">,</span> <span class="i">$new</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mask</span> = <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span> <span class="i">$old</span> ^ <span class="i">$old</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span> <span class="i">$new</span> | <span class="i">$mask</span> .</li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$mask</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span> x <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$new</span><span class="s">)</span> - <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$old</span><span class="s">)</span><span class="s">)</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$string</span> = <span class="q">&quot;this is a TEsT case&quot;</span><span class="sc">;</span></li><li>    <span class="i">$string</span> =~ <span class="q">s/(test)/preserve_case($1, &quot;success&quot;)/egi</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$string\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>This prints:</p><pre class="verbatim"><ol><li>    <span class="w">this</span> <span class="w">is</span> <span class="w">a</span> <span class="w">SUcCESS</span> case</li></ol></pre><p>As an alternative, to keep the case of the replacement word if it is longer than the original, you can use this code, by Jeff Pinyan:</p><pre class="verbatim"><ol><li><span name="preserve_case"></span>    sub <span class="m">preserve_case</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$from</span><span class="cm">,</span> <span class="i">$to</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$lf</span><span class="cm">,</span> <span class="i">$lt</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="cm">,</span> <span class="i">@_</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$lt</span> &lt; <span class="i">$lf</span><span class="s">)</span> <span class="s">{</span> <span class="i">$from</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$from</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$lt</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span> <span class="i">$from</span> .= <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$to</span><span class="cm">,</span> <span class="i">$lf</span> <span class="s">}</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span> <span class="i">$to</span> | <span class="s">(</span><span class="i">$from</span> ^ <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span> <span class="i">$from</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>This changes the sentence to &quot;this is a SUcCess case.&quot;</p><p>Just to show that C programmers can write C in any programming language, if you prefer a more C-like solution, the following script makes the substitution have the same case, letter by letter, as the original. (It also happens to run about 240% slower than the Perlish solution runs.) If the substitution has more characters than the string being substituted, the case of the last character is used for the rest of the substitution.</p><pre class="verbatim"><ol><li>    <span class="c"># Original by Nathan Torkington, massaged by Jeffrey Friedl</span></li><li>    <span class="c">#</span></li><li><span name="preserve_case"></span>    sub <span class="m">preserve_case</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$old</span><span class="cm">,</span> <span class="i">$new</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$state</span> = <span class="n">0</span><span class="sc">;</span> <span class="c"># 0 = no change; 1 = lc; 2 = uc</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$i</span><span class="cm">,</span> <span class="i">$oldlen</span><span class="cm">,</span> <span class="i">$newlen</span><span class="cm">,</span> <span class="i">$c</span><span class="s">)</span> = <span class="s">(</span><span class="n">0</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$old</span><span class="s">)</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="s">(</span><span class="i">$new</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$len</span> = <span class="i">$oldlen</span> &lt; <span class="i">$newlen</span> ? <span class="i">$oldlen</span> <span class="co">:</span> <span class="i">$newlen</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="i">$len</span><span class="sc">;</span> <span class="i">$i</span>++<span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$c</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$old</span><span class="cm">,</span> <span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="cm">,</span> <span class="i">$c</span> =~ <span class="q">/[\\W\\d_]/</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="i">$state</span> = <span class="n">0</span><span class="sc">;</span></li><li>            <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span> <span class="i">$c</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="i">$c</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="i">$state</span> = <span class="n">1</span><span class="sc">;</span></li><li>            <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$i</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="i">$state</span> = <span class="n">2</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>        <span class="c"># finish up with any remaining new (for when new is longer than old)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$newlen</span> &gt; <span class="i">$oldlen</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$state</span> == <span class="n">1</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$oldlen</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$oldlen</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="i">$state</span> == <span class="n">2</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$oldlen</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$new</span><span class="cm">,</span> <span class="i">$oldlen</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$new</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-substitute-case-insensitively-on-the-LHS-while-preserving-case-on-the-RHS%3f
: Data Manipulation	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section of the FAQ answers questions related to manipulating numbers, dates, strings, arrays, hashes, and miscellaneous data issues.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq4-manpage%3a-Data-Manipulation
Can I use Unicode in my Perl sources?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Yes, you can! If your sources are UTF-8 encoded, you can indicate that with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">utf8</span></code>  pragma.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">utf8</span><span class="sc">;</span></li></ol></pre><p>This doesn&#39;t do anything to your input, or to your output. It only influences the way your sources are read. You can use Unicode in string literals, in identifiers (but they still have to be &quot;word characters&quot; according to <code class="inline">\\<span class="w">w</span></code> ), and even in custom delimiters.</p></section>	http://perldoc.perl.org/perlunifaq.html#Can-I-use-Unicode-in-my-Perl-sources%3f
funny character (definition)	A			Perl Glossary							<section class="prog__container"><p>Someone like Larry, or one of his peculiar friends. Also refers to the strange prefixes that Perl requires as noun markers on its variables.</p></section>	http://perldoc.perl.org/perlglossary.html#funny-character
Why do I get weird spaces when I print an array of lines?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you are seeing spaces between the elements of your array when you print the array, you are probably interpolating the array in double quotes:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@animals</span> = <span class="q">qw(camel llama alpaca vicuna)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;animals are: @animals\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>It&#39;s the double quotes, not the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, doing this. Whenever you interpolate an array in a double quote context, Perl joins the elements with spaces (or whatever is in <code class="inline"><span class="i">$&quot;</span></code> , which is a space by default):</p><pre class="verbatim"><ol><li>    <span class="w">animals</span> <span class="w">are</span><span class="co">:</span> <span class="w">camel</span> <span class="w">llama</span> <span class="w">alpaca</span> <span class="w">vicuna</span></li></ol></pre><p>This is different than printing the array without the interpolation:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@animals</span> = <span class="q">qw(camel llama alpaca vicuna)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;animals are: &quot;</span><span class="cm">,</span> <span class="i">@animals</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Now the output doesn&#39;t have the spaces between the elements because the elements of <code class="inline"><span class="i">@animals</span></code>  simply become part of the list to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>:</p><pre class="verbatim"><ol><li>    <span class="w">animals</span> <span class="w">are</span><span class="co">:</span> <span class="w">camelllamaalpacavicuna</span></li></ol></pre><p>You might notice this when each of the elements of <code class="inline"><span class="i">@array</span></code>  end with a newline. You expect to print one element per line, but notice that every line after the first is indented:</p><pre class="verbatim"><ol><li>    <span class="w">this</span> <span class="w">is</span> <span class="w">a</span> <span class="w">line</span></li><li>     <span class="w">this</span> <span class="w">is</span> <span class="w">another</span> <span class="w">line</span></li><li>     <span class="w">this</span> <span class="w">is</span> <span class="w">the</span> <span class="w">third</span> <span class="w">line</span></li></ol></pre><p>That extra space comes from the interpolation of the array. If you don&#39;t want to put anything between your array elements, don&#39;t use the array in double quotes. You can send it to print without them:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">@lines</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#Why-do-I-get-weird-spaces-when-I-print-an-array-of-lines%3f
CPAN::Queue (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Queue - internal queue support for CPAN.pm</p> </section>	http://perldoc.perl.org/CPAN/Queue.html
indirect filehandle (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>expression</b> that evaluates to something that can be used as a <b>filehandle</b>: a <b>string</b> (filehandle name), a <b>typeglob</b>, a typeglob <b>reference</b>, or a low-level <b>IO</b> object.</p></section>	http://perldoc.perl.org/perlglossary.html#indirect-filehandle
Attempt to reload %s aborted.	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to load a file with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> that failed to compile once already.  Perl will not try to compile this file again unless you delete its entry from %INC.  See <span href="http://perldoc.perl.org/functions/require.html">require</span> and <span href="http://perldoc.perl.org/perlvar.html#%25INC">%INC in perlvar</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-reload-%25s-aborted.
How do I compute the difference of two arrays? How do I compute the intersection of two arrays?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use a hash. Here&#39;s code to do both and more. It assumes that each element is unique in a given array:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">@union</span><span class="cm">,</span> <span class="i">@intersection</span><span class="cm">,</span> <span class="i">@difference</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%count</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> <span class="s">(</span><span class="i">@array1</span><span class="cm">,</span> <span class="i">@array2</span><span class="s">)</span> <span class="s">{</span> <span class="i">$count</span>{<span class="i">$element</span>}++ <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%count</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@union</span><span class="cm">,</span> <span class="i">$element</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@</span>{ <span class="i">$count</span>{<span class="i">$element</span>} &gt; <span class="n">1</span> ? \\<span class="i">@intersection</span> <span class="co">:</span> \\<span class="i">@difference</span> }<span class="cm">,</span> <span class="i">$element</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that this is the <i>symmetric difference</i>, that is, all elements in either A or in B but not in both. Think of it as an xor operation.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-compute-the-difference-of-two-arrays%3f-How-do-I-compute-the-intersection-of-two-arrays%3f
Can't modify non-lvalue subroutine call	A			Perl Diagnostics							<section class="prog__container"><p>(F) Subroutines meant to be used in lvalue context should be declared as such.  See <span href="http://perldoc.perl.org/perlsub.html#Lvalue-subroutines">Lvalue subroutines in perlsub</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-non-lvalue-subroutine-call
Use of bare << to mean <<"" is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You are now encouraged to use the explicitly quoted form if you wish to use an empty line as the terminator of the here-document.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-bare-%3c%3c-to-mean-%3c%3c%22%22-is-deprecated
$. (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>Current line number for the last filehandle accessed.</p><p>Each filehandle in Perl counts the number of lines that have been read from it.  (Depending on the value of <code class="inline"><span class="i">$/</span></code> , Perl&#39;s idea of what constitutes a line may not match yours.)  When a line is read from a filehandle (via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline()</span></code> or <code class="inline">&lt;&gt;</code> ), or when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek()</span></code> is called on it, <code class="inline"><span class="i">$.</span></code>  becomes an alias to the line counter for that filehandle.</p><p>You can adjust the counter by assigning to <code class="inline"><span class="i">$.</span></code> , but this will not actually move the seek pointer.  <i>Localizing <code class="inline"><span class="i">$.</span></code>  will not localize the filehandle&#39;s line count</i>.  Instead, it will localize perl&#39;s notion of which filehandle <code class="inline"><span class="i">$.</span></code>  is currently aliased to.</p><p><code class="inline"><span class="i">$.</span></code>  is reset when the filehandle is closed, but <b>not</b> when an open filehandle is reopened without an intervening <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close()</span></code>.  For more details, see <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>.  Because <code class="inline">&lt;&gt;</code>  never does an explicit close, line numbers increase across <code class="inline"><span class="w">ARGV</span></code>  files (but see examples in <span href="http://perldoc.perl.org/functions/eof.html">eof</span>).</p><p>You can also use <code class="inline"><span class="w">HANDLE</span><span class="w">-&gt;input_line_number</span><span class="s">(</span><span class="w">EXPR</span><span class="s">)</span></code>  to access the line counter for a given filehandle without having to worry about which handle you last accessed.</p><p>Mnemonic: many programs use &quot;.&quot; to mean the current line number.</p></section>	http://perldoc.perl.org/perlvar.html#%24.
lt (function)	A			Perl Functions							<section class="prog__container"><pre>lt</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/lt.html
Time::HiRes (module)	A			Perl Standard Modules		[[BSD::Resource]]\n[[Time::TAI64]]\n[[sleep]]\n[[stat]]					<section class="prog__container"><p>Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::HiRes</span> <span class="q">qw( usleep ualarm gettimeofday tv_interval nanosleep</span></li><li>&#09;&#09;      <span class="q">clock_gettime clock_getres clock_nanosleep clock</span></li><li>                      <span class="q">stat lstat )</span><span class="sc">;</span></li><li></li><li>  <span class="w">usleep</span> <span class="s">(</span><span class="i">$microseconds</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="w">nanosleep</span> <span class="s">(</span><span class="i">$nanoseconds</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="w">ualarm</span> <span class="s">(</span><span class="i">$microseconds</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="w">ualarm</span> <span class="s">(</span><span class="i">$microseconds</span><span class="cm">,</span> <span class="i">$interval_microseconds</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$t0</span> = <span class="s">[</span><span class="w">gettimeofday</span><span class="s">]</span><span class="sc">;</span></li><li>  <span class="s">(</span><span class="i">$seconds</span><span class="cm">,</span> <span class="i">$microseconds</span><span class="s">)</span> = <span class="w">gettimeofday</span><span class="sc">;</span></li><li></li><li>  <span class="i">$elapsed</span> = <span class="w">tv_interval</span> <span class="s">(</span> <span class="i">$t0</span><span class="cm">,</span> <span class="s">[</span><span class="i">$seconds</span><span class="cm">,</span> <span class="i">$microseconds</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$elapsed</span> = <span class="w">tv_interval</span> <span class="s">(</span> <span class="i">$t0</span><span class="cm">,</span> <span class="s">[</span><span class="w">gettimeofday</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$elapsed</span> = <span class="w">tv_interval</span> <span class="s">(</span> <span class="i">$t0</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::HiRes</span> <span class="q">qw ( time alarm sleep )</span><span class="sc">;</span></li><li></li><li>  <span class="i">$now_fractions</span> = <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span> <span class="s">(</span><span class="i">$floating_seconds</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span> <span class="s">(</span><span class="i">$floating_seconds</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span> <span class="s">(</span><span class="i">$floating_seconds</span><span class="cm">,</span> <span class="i">$floating_interval</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::HiRes</span> <span class="q">qw( setitimer getitimer )</span><span class="sc">;</span></li><li></li><li>  <span class="w">setitimer</span> <span class="s">(</span><span class="i">$which</span><span class="cm">,</span> <span class="i">$floating_seconds</span><span class="cm">,</span> <span class="i">$floating_interval</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="w">getitimer</span> <span class="s">(</span><span class="i">$which</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::HiRes</span> <span class="q">qw( clock_gettime clock_getres clock_nanosleep</span></li><li>&#09;&#09;      <span class="q">ITIMER_REAL ITIMER_VIRTUAL ITIMER_PROF ITIMER_REALPROF )</span><span class="sc">;</span></li><li></li><li>  <span class="i">$realtime</span>   = <span class="i">clock_gettime</span><span class="s">(</span><span class="w">CLOCK_REALTIME</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$resolution</span> = <span class="i">clock_getres</span><span class="s">(</span><span class="w">CLOCK_REALTIME</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">clock_nanosleep</span><span class="s">(</span><span class="w">CLOCK_REALTIME</span><span class="cm">,</span> <span class="n">1.5e9</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">clock_nanosleep</span><span class="s">(</span><span class="w">CLOCK_REALTIME</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">(</span><span class="s">)</span>*<span class="n">1e9</span> + <span class="n">10e9</span><span class="cm">,</span> <span class="w">TIMER_ABSTIME</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ticktock</span> = <span class="i">clock</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::HiRes</span> <span class="q">qw( stat lstat )</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@stat</span> = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@stat</span> = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="w">FH</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@stat</span> = <span class="l_k" href="http://perldoc.perl.org/functions/lstat.html">lstat</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/HiRes.html
What happens if I add or remove keys from a hash while iterating over it?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The easy answer is &quot;Don&#39;t do that!&quot;</p><p>If you iterate through the hash with each(), you can delete the key most recently returned without worrying about it. If you delete or add other keys, the iterator may skip or double up on them since perl may rearrange the hash table. See the entry for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code> in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span>.</p></section>	http://perldoc.perl.org/perlfaq4.html#What-happens-if-I-add-or-remove-keys-from-a-hash-while-iterating-over-it%3f
assignment operator (definition)	A			Perl Glossary							<section class="prog__container"><p>Either a regular <b>assignment</b> or a compound <b>operator</b> composed of an ordinary assignment and some other operator, that changes the value of a variable in place; that is, relative to its old value. For example, <code class="inline"><span class="i">$a</span> += <span class="n">2</span></code>  adds <code class="inline"><span class="n">2</span></code>  to <code class="inline"><span class="i">$a</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#assignment-operator
Eval-group in insecure regular expression	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl detected tainted data when trying to compile a regular expression that contains the <code class="inline">(?{ ... })</code> zero-width assertion, which is unsafe.  See <span href="http://perldoc.perl.org/perlre.html#(%3f%7b-code-%7d)">(?{ code }) in perlre</span>, and <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Eval-group-in-insecure-regular-expression
Unrecognized signal name "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You specified a signal name to the kill() function that was not recognized.  Say <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span> -l</code>  in your shell to see the valid signal names on your system.</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-signal-name-%22%25s%22
Constant subroutine %s undefined	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You undefined a subroutine which had previously been eligible for inlining.  See <span href="http://perldoc.perl.org/perlsub.html#Constant-Functions">Constant Functions in perlsub</span> for commentary and workarounds.</p></section>	http://perldoc.perl.org/perldiag.html#Constant-subroutine-%25s-undefined
runtime pattern (definition)	A			Perl Glossary							<section class="prog__container"><p>A pattern that contains one or more variables to be interpolated before parsing the pattern as a <b>regular expression</b>, and that therefore cannot be analyzed at compile time, but must be reanalyzed each time the pattern match operator is evaluated. Runtime patterns are useful but expensive.</p></section>	http://perldoc.perl.org/perlglossary.html#runtime-pattern
panic: goto, type=%u, ix=%ld	A			Perl Diagnostics							<section class="prog__container"><p>(P) We popped the context stack to a context with the specified label, and then discovered it wasn&#39;t a context we know how to do a goto in.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-goto%2c-type%3d%25u%2c-ix%3d%25ld
O (module)	A			Perl Standard Modules							<section class="prog__container"><p>O - Generic interface to Perl Compiler backends</p> <pre class="verbatim"><ol><li>&#09;perl -MO=[-q,]Backend[,OPTIONS] foo.pl</li></ol></pre></section>	http://perldoc.perl.org/O.html
How can I tell whether a certain element is contained in a list or array?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(portions of this answer contributed by Anno Siegel and brian d foy)</p><p>Hearing the word &quot;in&quot; is an <i>in</i>dication that you probably should have used a hash, not a list or array, to store your data. Hashes are designed to answer this question quickly and efficiently. Arrays aren&#39;t.</p><p>That being said, there are several ways to approach this. In Perl 5.10 and later, you can use the smart match operator to check that an item is contained in an array or a hash:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$item</span> ~~ <span class="i">@array</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;The array contains $item&quot;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$item</span> ~~ <span class="i">%hash</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;The hash contains $item&quot;</span></li><li>    <span class="s">}</span></li></ol></pre><p>With earlier versions of Perl, you have to do a bit more work. If you are going to make this query many times over arbitrary string values, the fastest way is probably to invert the original array and maintain a hash whose keys are the first array&#39;s values:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@blues</span> = <span class="q">qw/azure cerulean teal turquoise lapis-lazuli/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%is_blue</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@blues</span><span class="s">)</span> <span class="s">{</span> <span class="i">$is_blue</span>{<span class="i">$_</span>} = <span class="n">1</span> <span class="s">}</span></li></ol></pre><p>Now you can check whether <code class="inline"><span class="i">$is_blue</span>{<span class="i">$some_color</span>}</code> . It might have been a good idea to keep the blues all in a hash in the first place.</p><p>If the values are all small integers, you could use a simple indexed array. This kind of an array will take up less space:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@primes</span> = <span class="s">(</span><span class="n">2</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">11</span><span class="cm">,</span> <span class="n">13</span><span class="cm">,</span> <span class="n">17</span><span class="cm">,</span> <span class="n">19</span><span class="cm">,</span> <span class="n">23</span><span class="cm">,</span> <span class="n">29</span><span class="cm">,</span> <span class="n">31</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@is_tiny_prime</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@primes</span><span class="s">)</span> <span class="s">{</span> <span class="i">$is_tiny_prime</span>[<span class="i">$_</span>] = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="c"># or simply  @istiny_prime[@primes] = (1) x @primes;</span></li></ol></pre><p>Now you check whether $is_tiny_prime[$some_number].</p><p>If the values in question are integers instead of strings, you can save quite a lot of space by using bit strings instead:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@articles</span> = <span class="s">(</span> <span class="n">1</span>..<span class="n">10</span><span class="cm">,</span> <span class="n">150</span>..<span class="n">2000</span><span class="cm">,</span> <span class="n">2017</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$read</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@articles</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$read</span><span class="cm">,</span><span class="i">$_</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span> = <span class="n">1</span> <span class="s">}</span></li></ol></pre><p>Now check whether <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec($read,$n,1)</span></code> is true for some <code class="inline"><span class="i">$n</span></code> .</p><p>These methods guarantee fast individual tests but require a re-organization of the original list or array. They only pay off if you have to test multiple values against the same array.</p><p>If you are testing only once, the standard module <span href="http://perldoc.perl.org/List/Util.html">List::Util</span> exports the function <code class="inline"><span class="w">first</span></code>  for this purpose. It works by stopping once it finds the element. It&#39;s written in C for speed, and its Perl equivalent looks like this subroutine:</p><pre class="verbatim"><ol><li><span name="first"></span>    sub <span class="m">first (&amp;@)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$code</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span><span class="i">@_</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">&amp;</span>{<span class="i">$code</span>}<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If speed is of little concern, the common idiom uses grep in scalar context (which returns the number of items that passed its condition) to traverse the entire list. This does have the benefit of telling you how many matches it found, though.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$is_there</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="i">$whatever</span><span class="cm">,</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>If you want to actually extract the matching elements, simply use grep in list context.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@matches</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="i">$_</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="i">$whatever</span><span class="cm">,</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-tell-whether-a-certain-element-is-contained-in-a-list-or-array%3f
Pod::Simple::HTMLBatch (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::HTMLBatch]]\n[[perlpod]]\n[[perlpodspec]]					<section class="prog__container"><p>Pod::Simple::HTMLBatch - convert several Pod files to several HTML files</p> <pre class="verbatim"><ol><li>  perl -MPod::Simple::HTMLBatch -e &#39;Pod::Simple::HTMLBatch::go&#39; in out</li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/HTMLBatch.html
Search pattern not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer couldn&#39;t find the final delimiter of a // or m{} construct.  Remember that bracketing delimiters count nesting level. Missing the leading <code class="inline"><span class="i">$</span></code>  from a variable <code class="inline"><span class="i">$m</span></code>  may cause this error.</p><p>Note that since Perl 5.10.0 a // can also be the <i>defined-or</i> construct, not just the empty search pattern.  Therefore code written in Perl 5.10.0 or later that uses the // as the <i>defined-or</i> can be misparsed by pre-5.10.0 Perls as a non-terminated search pattern.</p></section>	http://perldoc.perl.org/perldiag.html#Search-pattern-not-terminated
Test::Harness (module)	A			Perl Standard Modules		[[TAP::Harness]]					<section class="prog__container"><p>Test::Harness - Run Perl standard test scripts with statistics</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::Harness</span><span class="sc">;</span></li><li></li><li>  <span class="i">runtests</span><span class="s">(</span><span class="i">@test_files</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Harness.html
Hash::Util::FieldHash (module)	A			Perl Standard Modules							<section class="prog__container"><p>Hash::Util::FieldHash - Support for Inside-Out Classes</p> <pre class="verbatim"><ol><li>  <span class="c">### Create fieldhashes</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Hash::Util</span> <span class="q">qw(fieldhash fieldhashes)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Create a single field hash</span></li><li>  <span class="w">fieldhash</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%foo</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Create three at once...</span></li><li>  <span class="w">fieldhashes</span> \\ <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">%foo</span><span class="cm">,</span> <span class="i">%bar</span><span class="cm">,</span> <span class="i">%baz</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="c"># ...or any number</span></li><li>  <span class="w">fieldhashes</span> <span class="i">@hashrefs</span><span class="sc">;</span></li><li></li><li>  <span class="c">### Create an idhash and register it for garbage collection</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Hash::Util::FieldHash</span> <span class="q">qw(idhash register)</span><span class="sc">;</span></li><li>  <span class="w">idhash</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%name</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$object</span> = \\ <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$o</span> <span class="s">}</span><span class="sc">;</span></li><li>  <span class="c"># register the idhash for garbage collection with $object</span></li><li>  <span class="i">register</span><span class="s">(</span><span class="i">$object</span><span class="cm">,</span> \\ <span class="i">%name</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="c"># the following entry will be deleted when $object goes out of scope</span></li><li>  <span class="i">$name</span>{<span class="i">$object</span>} = <span class="q">&#39;John Doe&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="c">### Register an ordinary hash for garbage collection</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Hash::Util::FieldHash</span> <span class="q">qw(id register)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%name</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$object</span> = \\ <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$o</span> <span class="s">}</span><span class="sc">;</span></li><li>  <span class="c"># register the hash %name for garbage collection of $object&#39;s id</span></li><li>  <span class="w">register</span> <span class="i">$object</span><span class="cm">,</span> \\ <span class="i">%name</span><span class="sc">;</span></li><li>  <span class="c"># the following entry will be deleted when $object goes out of scope</span></li><li>  <span class="i">$name</span>{<span class="w">id</span> <span class="i">$object</span>} = <span class="q">&#39;John Doe&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Hash/Util/FieldHash.html
Deep recursion on subroutine "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W recursion) This subroutine has called itself (directly or indirectly) 100 times more than it has returned.  This probably indicates an infinite recursion, unless you&#39;re writing strange benchmark programs, in which case it indicates something else.</p><p>This threshold can be changed from 100, by recompiling the <i>perl</i> binary, setting the C pre-processor macro <code class="inline"><span class="w">PERL_SUB_DEPTH_WARN</span></code>  to the desired value.</p></section>	http://perldoc.perl.org/perldiag.html#Deep-recursion-on-subroutine-%22%25s%22
Invalid [] range "%s" in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The range specified in a character class had a minimum character greater than the maximum character.  One possibility is that you forgot the <code class="inline"><span class="s">{</span><span class="s">}</span></code>  from your ending <code class="inline">\\<span class="w">x</span><span class="s">{</span><span class="s">}</span></code>  - <code class="inline">\\<span class="w">x</span></code>  without the curly braces can go only up to <code class="inline"><span class="w">ff</span></code> .  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-%5b%5d-range-%22%25s%22-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Bad hash	A			Perl Diagnostics							<section class="prog__container"><p>(P) One of the internal hash routines was passed a null HV pointer.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-hash
Sequence ?P=... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A named reference of the form <code class="inline"><span class="s">(</span><span class="q">?P=...)</span></code>  was missing the final closing parenthesis after the name.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-%3fP%3d...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
cargo cult (definition)	A			Perl Glossary							<section class="prog__container"><p>Copying and pasting code without understanding it, while superstitiously believing in its value. This term originated from preindustrial cultures dealing with the detritus of explorers and colonizers of technologically advanced cultures. See <i>The Gods Must Be Crazy</i>.</p></section>	http://perldoc.perl.org/perlglossary.html#cargo-cult
Missing comma after first argument to %s function	A			Perl Diagnostics							<section class="prog__container"><p>(F) While certain functions allow you to specify a filehandle or an &quot;indirect object&quot; before the argument list, this ain&#39;t one of them.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-comma-after-first-argument-to-%25s-function
porter (definition)	A			Perl Glossary							<section class="prog__container"><p>Someone who “carries” software from one <b>platform</b> to another. Porting programs written in platform-dependent languages such as C can be difficult work, but porting programs like Perl is very much worth the agony.</p></section>	http://perldoc.perl.org/perlglossary.html#porter
system (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>system LIST<br>system PROGRAM LIST</pre><p>Does exactly the same thing as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">LIST</span></code> , except that a fork is done first and the parent process waits for the child process to exit.  Note that argument processing varies depending on the number of arguments.  If there is more than one argument in LIST, or if LIST is an array with more than one value, starts the program given by the first element of the list with arguments given by the rest of the list.  If there is only one scalar argument, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system&#39;s command shell for parsing (this is <code class="inline">/bin/sh -c</code> on Unix platforms, but varies on other platforms).  If there are no shell metacharacters in the argument, it is split into words and passed directly to <code class="inline"><span class="w">execvp</span></code> , which is more efficient.  On Windows, only the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code>  syntax will reliably avoid using the shell; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="i">LIST</span></code> , even with more than one element, will fall back to the shell if the first spawn fails.</p><p>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>).  To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles.</p><p>The return value is the exit status of the program as returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait</span></code> call.  To get the actual exit value, shift right by eight (see below).  See also <span href="http://perldoc.perl.org/functions/exec.html">exec</span>.  This is <i>not</i> what you want to use to capture the output from a command; for that you should use merely backticks or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qx.html">qx//</span></code>, as described in <span href="http://perldoc.perl.org/perlop.html#%60STRING%60">`STRING` in perlop</span>.  Return value of -1 indicates a failure to start the program or an error of the wait(2) system call (inspect $! for the reason).</p><p>If you&#39;d like to make <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> (and many other bits of Perl) die on error, have a look at the <span href="http://perldoc.perl.org/autodie.html">autodie</span> pragma.</p><p>Like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> allows you to lie to a program about its name if you use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code>  syntax.  Again, see <span href="http://perldoc.perl.org/functions/exec.html">exec</span>.</p><p>Since <code class="inline"><span class="w">SIGINT</span></code>  and <code class="inline"><span class="w">SIGQUIT</span></code>  are ignored during the execution of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>, if you expect your program to terminate on receipt of these signals you will need to arrange to do so yourself based on the return value.</p><pre class="verbatim"><ol><li>    <span class="i">@args</span> = <span class="s">(</span><span class="q">&quot;command&quot;</span><span class="cm">,</span> <span class="q">&quot;arg1&quot;</span><span class="cm">,</span> <span class="q">&quot;arg2&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="i">@args</span><span class="s">)</span> == <span class="n">0</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;system @args failed: $?&quot;</span></li></ol></pre><p>If you&#39;d like to manually inspect <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>&#39;s failure, you can check all possible failure modes by inspecting <code class="inline"><span class="i">$?</span></code>  like this:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$?</span> == <span class="n">-1</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;failed to execute: $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    elsif <span class="s">(</span><span class="i">$?</span> &amp; <span class="n">127</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;child died with signal %d, %s coredump\\n&quot;</span><span class="cm">,</span></li><li>            <span class="s">(</span><span class="i">$?</span> &amp; <span class="n">127</span><span class="s">)</span><span class="cm">,</span>  <span class="s">(</span><span class="i">$?</span> &amp; <span class="n">128</span><span class="s">)</span> ? <span class="q">&#39;with&#39;</span> <span class="co">:</span> <span class="q">&#39;without&#39;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    else <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;child exited with value %d\\n&quot;</span><span class="cm">,</span> <span class="i">$?</span> &gt;&gt; <span class="n">8</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Alternatively, you may inspect the value of <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code>  with the <code class="inline"><span class="w">W</span>*<span class="s">(</span><span class="s">)</span></code>  calls from the POSIX module.</p><p>When <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>&#39;s arguments are executed indirectly by the shell,  results and return codes are subject to its quirks. See <span href="http://perldoc.perl.org/perlop.html#%60STRING%60">`STRING` in perlop</span> and <span href="http://perldoc.perl.org/functions/exec.html">exec</span> for details.</p><p>Since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> does a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait</span></code> it may affect a <code class="inline"><span class="w">SIGCHLD</span></code>  handler.  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#system">system in perlport</span>.</p></section>	http://perldoc.perl.org/functions/system.html
eq (function)	A			Perl Functions							<section class="prog__container"><pre>eq</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/eq.html
Module name must be constant	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only a bare module name is allowed as the first argument to a &quot;use&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Module-name-must-be-constant
How do I ask the user for a password?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(This question has nothing to do with the web. See a different FAQ for that.)</p><p>There&#39;s an example of this in <span href="http://perldoc.perl.org/functions/crypt.html">crypt</span>). First, you put the terminal into &quot;no echo&quot; mode, then just read the password normally. You may do this with an old-style <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl()</span></code> function, POSIX terminal control (see <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> or its documentation the Camel Book), or a call to the <b>stty</b> program, with varying degrees of portability.</p><p>You can also do this for most systems using the <span href="http://search.cpan.org/perldoc/Term::ReadKey">Term::ReadKey</span> module from CPAN, which is easier to use and in theory more portable.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadKey</span><span class="sc">;</span></li><li></li><li>    <span class="i">ReadMode</span><span class="s">(</span><span class="q">&#39;noecho&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$password</span> = <span class="i">ReadLine</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-ask-the-user-for-a-password%3f
Verb pattern '%s' has a mandatory argument in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a verb pattern that requires an argument.  Supply an argument or check that you are using the right verb.</p></section>	http://perldoc.perl.org/perldiag.html#Verb-pattern-'%25s'-has-a-mandatory-argument-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
-a	A			Perl Command-Line Switches							<section class="prog__container"><p>turns on autosplit mode when used with a <b>-n</b> or <b>-p</b>.  An implicit split command to the @F array is done as the first thing inside the implicit while loop produced by the <b>-n</b> or <b>-p</b>.</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">ane</span> <span class="q">&#39;print pop(@F), &quot;\\n&quot;;&#39;</span></li></ol></pre><p>is equivalent to</p><pre class="verbatim"><ol><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="i">@F</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">&#39; &#39;</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span><span class="s">(</span><span class="i">@F</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>An alternate delimiter may be specified using <b>-F</b>.</p><p><b>-a</b> implicitly sets <b>-n</b>.</p></section>	http://perldoc.perl.org/perlrun.html#*-a*
umask not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t implement the umask function and you tried to use it to restrict permissions for yourself (EXPR &amp; 0700).</p></section>	http://perldoc.perl.org/perldiag.html#umask-not-implemented
when (function)	A			Perl Functions							<section class="prog__container"><pre>when</pre><p>These flow-control keywords related to the experimental switch feature are documented in <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/when.html
list value (definition)	A			Perl Glossary							<section class="prog__container"><p>An unnamed list of temporary scalar values that may be passed around within a program from any list-generating function to any function or construct that provides a <b>list context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#list-value
B::Concise (module)	A			Perl Standard Modules							<section class="prog__container"><p>B::Concise - Walk Perl syntax tree, printing concise info about ops</p> <pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Concise</span><span class="s">[</span><span class="cm">,</span><span class="w">OPTIONS</span><span class="s">]</span> <span class="w">foo</span>.<span class="w">pl</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">B::Concise</span> <span class="q">qw(set_style add_callback)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/B/Concise.html
TAP::Parser::Iterator::Stream (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::Iterator]]					<section class="prog__container"><p>TAP::Parser::Iterator::Stream - Iterator for filehandle-based TAP sources</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Iterator::Stream</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span> <span class="w">TEST</span><span class="cm">,</span> <span class="q">&#39;test.tap&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$it</span>   = <span class="w">TAP::Parser::Iterator::Stream</span><span class="w">-&gt;new</span><span class="s">(</span>\\<span class="i">*TEST</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span> = <span class="i">$it</span><span class="i">-&gt;next</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Iterator/Stream.html
Can't read CRTL environ	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning peculiar to VMS.  Perl tried to read an element of %ENV from the CRTL&#39;s internal environment array and discovered the array was missing.  You need to figure out where your CRTL misplaced its environ or define <i>PERL_ENV_TABLES</i> (see <span href="http://perldoc.perl.org/perlvms.html">perlvms</span>) so that environ is not searched.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-read-CRTL-environ
'%' may not be used in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t pack a string by supplying a checksum, because the checksumming process loses information, and you can&#39;t go the other way. See <span href="http://perldoc.perl.org/functions/unpack.html">unpack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%25'-may-not-be-used-in-pack
Encode::Alias (module)	A			Perl Standard Modules		[[Encode]]\n[[Encode::Supported]]					<section class="prog__container"><p>Encode::Alias - alias definitions to encodings</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode::Alias</span><span class="sc">;</span></li><li>  <span class="i">define_alias</span><span class="s">(</span> <span class="q">&quot;newName&quot;</span> <span class="cm">=&gt;</span> <span class="w">ENCODING</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">define_alias</span><span class="s">(</span> <span class="q">qr/.../</span> <span class="cm">=&gt;</span> <span class="w">ENCODING</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">define_alias</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="w">ENCODING</span> if ...<span class="sc">;</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Alias.html
Can't do waitpid with flags	A			Perl Diagnostics							<section class="prog__container"><p>(F) This machine doesn&#39;t have either waitpid() or wait4(), so only waitpid() without flags is emulated.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-waitpid-with-flags
Prototype mismatch: %s vs %s	A			Perl Diagnostics							<section class="prog__container"><p>(S prototype) The subroutine being declared or defined had previously been declared or defined with a different function prototype.</p></section>	http://perldoc.perl.org/perldiag.html#Prototype-mismatch%3a-%25s-vs-%25s
How can I tell whether there's a character waiting on a filehandle?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>The very first thing you should do is look into getting the Term::ReadKey extension from CPAN. As we mentioned earlier, it now even has limited support for non-portable (read: not open systems, closed, proprietary, not POSIX, not Unix, etc.) systems.</p><p>You should also check out the Frequently Asked Questions list in comp.unix.* for things like this: the answer is essentially the same. It&#39;s very system-dependent. Here&#39;s one solution that works on BSD systems:</p><pre class="verbatim"><ol><li><span name="key_ready"></span>    sub <span class="m">key_ready</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$rin</span><span class="cm">,</span> <span class="i">$nfd</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$rin</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$nfd</span> = <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$rin</span><span class="cm">,</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you want to find out how many characters are waiting, there&#39;s also the FIONREAD ioctl call to be looked at. The <i>h2ph</i> tool that comes with Perl tries to convert C include files to Perl code, which can be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>d. FIONREAD ends up defined as a function in the <i>sys/ioctl.ph</i> file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;sys/ioctl.ph&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$size</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;L&quot;</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="i">FIONREAD</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span> <span class="i">$size</span><span class="s">)</span>    or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Couldn&#39;t call ioctl: $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="i">$size</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;L&quot;</span><span class="cm">,</span> <span class="i">$size</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If <i>h2ph</i> wasn&#39;t installed or doesn&#39;t work for you, you can <i>grep</i> the include files by hand:</p><pre class="verbatim"><ol><li>    % grep FIONREAD /usr/include/*/*</li><li>    /usr/include/asm/ioctls.h:#define FIONREAD      0x541B</li></ol></pre><p>Or write a small C program using the editor of champions:</p><pre class="verbatim"><ol><li>    % cat &gt; fionread.c</li><li>    #include &lt;sys/ioctl.h&gt;</li><li>    main() {</li><li>        printf(&quot;%#08x\\n&quot;, FIONREAD);</li><li>    }</li><li>    ^D</li><li>    % cc -o fionread fionread.c</li><li>    % ./fionread</li><li>    0x4004667f</li></ol></pre><p>And then hard-code it, leaving porting as an exercise to your successor.</p><pre class="verbatim"><ol><li>    <span class="i">$FIONREAD</span> = <span class="n">0x4004667f</span><span class="sc">;</span>         <span class="c"># XXX: opsys dependent</span></li><li></li><li>    <span class="i">$size</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;L&quot;</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="i">$FIONREAD</span><span class="cm">,</span> <span class="i">$size</span><span class="s">)</span>     or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Couldn&#39;t call ioctl: $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="i">$size</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;L&quot;</span><span class="cm">,</span> <span class="i">$size</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>FIONREAD requires a filehandle connected to a stream, meaning that sockets, pipes, and tty devices work, but <i>not</i> files.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-tell-whether-there's-a-character-waiting-on-a-filehandle%3f
Insecure dependency in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to do something that the tainting mechanism didn&#39;t like. The tainting mechanism is turned on when you&#39;re running setuid or setgid, or when you specify <b>-T</b> to turn it on explicitly.  The tainting mechanism labels all data that&#39;s derived directly or indirectly from the user, who is considered to be unworthy of your trust.  If any such data is used in a &quot;dangerous&quot; operation, you get this error.  See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span> for more information.</p></section>	http://perldoc.perl.org/perldiag.html#Insecure-dependency-in-%25s
Lexing code attempted to stuff non-Latin-1 character into Latin-1 input	A			Perl Diagnostics							<section class="prog__container"><p>(F) An extension is attempting to insert text into the current parse (using <span href="http://perldoc.perl.org/perlapi.html#lex_stuff_pvn">lex_stuff_pvn</span> or similar), but tried to insert a character that couldn&#39;t be part of the current input.  This is an inherent pitfall of the stuffing mechanism, and one of the reasons to avoid it.  Where it is necessary to stuff, stuffing only plain ASCII is recommended.</p></section>	http://perldoc.perl.org/perldiag.html#Lexing-code-attempted-to-stuff-non-Latin-1-character-into-Latin-1-input
B::Deparse (module)	A			Perl Standard Modules							<section class="prog__container"><p>B::Deparse - Perl compiler backend to produce perl code</p> <p><b>perl</b> <b>-MO=Deparse</b>[<b>,-d</b>][<b>,-f</b><i>FILE</i>][<b>,-p</b>][<b>,-q</b>][<b>,-l</b>]         [<b>,-s</b><i>LETTERS</i>][<b>,-x</b><i>LEVEL</i>] <i>prog.pl</i></p></section>	http://perldoc.perl.org/B/Deparse.html
Can't do inplace edit: %s would not be unique	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) Your filesystem does not support filenames longer than 14 characters and Perl was unable to create a unique filename during inplace editing with the <b>-i</b> switch.  The file was ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-inplace-edit%3a-%25s-would-not-be-unique
Binary "," operator	A			Perl Operators\nPerl Comma Operator							<section class="prog__container">Binary &quot;,&quot; is the comma operator. In scalar context it evaluates its left argument, throws that value away, then evaluates its right argument and returns that value. This is just like C&#39;s comma operator.</section>	http://perldoc.perl.org/perlop.html#Comma-Operator
The Ellipsis Statement	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Beginning in Perl 5.12, Perl accepts an ellipsis, &quot;<code class="inline">...</code> &quot;, as a placeholder for code that you haven&#39;t implemented yet.  This form of ellipsis, the unimplemented statement, should not be confused with the binary flip-flop <code class="inline">...</code>  operator.  One is a statement and the other an operator.  (Perl doesn&#39;t usually confuse them because usually Perl can tell whether it wants an operator or a statement, but see below for exceptions.)</p><p>When Perl 5.12 or later encounters an ellipsis statement, it parses this without error, but if and when you should actually try to execute it, Perl throws an exception with the text <code class="inline"><span class="w">Unimplemented</span></code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.12</span><span class="sc">;</span></li><li><span name="unimplemented"></span>    sub <span class="m">unimplemented</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">unimplemented</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$@</span> =~ <span class="q">/^Unimplemented at /</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;I found an ellipsis!&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can only use the elliptical statement to stand in for a complete statement.  These examples of how the ellipsis works:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.12</span><span class="sc">;</span></li><li>    <span class="s">{</span> ... <span class="s">}</span></li><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    ...<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> ... <span class="s">}</span><span class="sc">;</span></li><li><span name="somemeth"></span>    sub <span class="m">somemeth</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$self</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        ...<span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="i">$x</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$n</span><span class="sc">;</span></li><li>        ...<span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;Hurrah!&quot;</span><span class="sc">;</span></li><li>        <span class="i">$n</span><span class="sc">;</span></li><li>    <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>The elliptical statement cannot stand in for an expression that is part of a larger statement, since the <code class="inline">...</code>  is also the three-dot version of the flip-flop operator (see <span href="http://perldoc.perl.org/perlop.html#Range-Operators">Range Operators in perlop</span>).</p><p>These examples of attempts to use an ellipsis are syntax errors:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.12</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> ...<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="q">&quot;/dev/passwd&quot;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> ...<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$condition</span> &amp;&amp; ... <span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;Howdy&quot;</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>There are some cases where Perl can&#39;t immediately tell the difference between an expression and a statement.  For instance, the syntax for a block and an anonymous hash reference constructor look the same unless there&#39;s something in the braces to give Perl a hint.  The ellipsis is a syntax error if Perl doesn&#39;t guess that the <code class="inline"><span class="s">{</span> ... <span class="s">}</span></code>  is a block.  In that case, it doesn&#39;t think the <code class="inline">...</code>  is an ellipsis because it&#39;s expecting an expression instead of a statement:</p><pre class="verbatim"><ol><li>    <span class="i">@transformed</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> ... <span class="s">}</span> <span class="i">@input</span><span class="sc">;</span>    <span class="c"># syntax error</span></li></ol></pre><p>Inside your block, you can use a <code class="inline"><span class="sc">;</span></code>  before the ellipsis to denote that the <code class="inline"><span class="s">{</span> ... <span class="s">}</span></code>  is a block and not a hash reference constructor.  Now the ellipsis works:</p><pre class="verbatim"><ol><li>    <span class="i">@transformed</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span><span class="sc">;</span> ... <span class="s">}</span> <span class="i">@input</span><span class="sc">;</span>   <span class="c"># &#39;;&#39; disambiguates</span></li></ol></pre><p>Note: Some folks colloquially refer to this bit of punctuation as a &quot;yada-yada&quot; or &quot;triple-dot&quot;, but its true name is actually an ellipsis.</p></section>	http://perldoc.perl.org/perlsyn.html#The-Ellipsis-Statement
No comma allowed after %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) A list operator that has a filehandle or &quot;indirect object&quot; is not allowed to have a comma between that and the following arguments. Otherwise it&#39;d be just another one of the arguments.</p><p>One possible cause for this is that you expected to have imported a constant to your name space with <b>use</b> or <b>import</b> while no such importing took place, it may for example be that your operating system does not support that particular constant.  Hopefully you did use an explicit import list for the constants you expect to see; please see <span href="http://perldoc.perl.org/functions/use.html">use</span> and <span href="http://perldoc.perl.org/functions/import.html">import</span>.  While an explicit import list would probably have caught this error earlier it naturally does not remedy the fact that your operating system still does not support that constant.  Maybe you have a typo in the constants of the symbol import list of <b>use</b> or <b>import</b> or in the constant name at the line where this error was triggered?</p></section>	http://perldoc.perl.org/perldiag.html#No-comma-allowed-after-%25s
readdir() attempted on invalid dirhandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) The dirhandle you&#39;re reading from is either closed or not really a dirhandle.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#readdir()-attempted-on-invalid-dirhandle-%25s
Undefined value assigned to typeglob	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) An undefined value was assigned to a typeglob, a la <code class="inline"><span class="i">*foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> .  This does nothing.  It&#39;s possible that you really mean <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">*foo</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-value-assigned-to-typeglob
typedef (definition)	A			Perl Glossary							<section class="prog__container"><p>A type definition in the C and C++ languages.</p></section>	http://perldoc.perl.org/perlglossary.html#typedef
Invalid escape in the specified encoding in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp)(F) The numeric escape (for example <code class="inline">\\<span class="w">xHH</span></code> ) of value &lt; 256 didn&#39;t correspond to a single character through the conversion from the encoding specified by the encoding pragma. The escape was replaced with REPLACEMENT CHARACTER (U+FFFD) instead, except within <code class="inline"><span class="s">(</span><span class="q">?[   ])</span></code> , where it is a fatal error. The &lt;-- HERE shows whereabouts in the regular expression the escape was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-escape-in-the-specified-encoding-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
recv (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>recv SOCKET,SCALAR,LENGTH,FLAGS</pre><p>Receives a message on a socket.  Attempts to receive LENGTH characters of data into variable SCALAR from the specified SOCKET filehandle. SCALAR will be grown or shrunk to the length actually read.  Takes the same flags as the system call of the same name.  Returns the address of the sender if SOCKET&#39;s protocol supports this; returns an empty string otherwise.  If there&#39;s an error, returns the undefined value. This call is actually implemented in terms of recvfrom(2) system call. See <span href="http://perldoc.perl.org/perlipc.html#UDP%3a-Message-Passing">UDP: Message Passing in perlipc</span> for examples.</p><p>Note the <i>characters</i>: depending on the status of the socket, either (8-bit) bytes or characters are received.  By default all sockets operate on bytes, but for example if the socket has been changed using binmode() to operate with the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  I/O layer (see the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma, <span href="http://perldoc.perl.org/open.html">open</span>), the I/O will operate on UTF8-encoded Unicode characters, not bytes.  Similarly for the <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  pragma: in that case pretty much any characters can be read.</p></section>	http://perldoc.perl.org/functions/recv.html
base class (definition)	A			Perl Glossary							<section class="prog__container"><p>A generic <b>object</b> type; that is, a <b>class</b> from which other, more specific classes are derived genetically by <b>inheritance</b>. Also called a “superclass” by people who respect their ancestors.</p></section>	http://perldoc.perl.org/perlglossary.html#base-class
UDP (definition)	A			Perl Glossary							<section class="prog__container"><p>User Datagram Protocol, the typical way to send <b>datagrams</b> over the Internet.</p></section>	http://perldoc.perl.org/perlglossary.html#UDP
Reallocation too large: %x	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t allocate more than 64K on an MS-DOS machine.</p></section>	http://perldoc.perl.org/perldiag.html#Reallocation-too-large%3a-%25x
\N in a character class must be a named character: \N{...} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The new (as of Perl 5.12) meaning of <code class="inline">\\<span class="w">N</span></code>  as <code class="inline">[^\\n]</code> is not valid in a bracketed character class, for the same reason that <code class="inline">.</code> in a character class loses its specialness: it matches almost everything, which is probably not what you want.</p></section>	http://perldoc.perl.org/perldiag.html#%5cN-in-a-character-class-must-be-a-named-character%3a-%5cN%7b...%7d-in-regex%3b--marked-by-%3c---HERE-in-m%2f%25s%2f
format (definition)	A			Perl Glossary							<section class="prog__container"><p>A specification of how many spaces and digits and things to put somewhere so that whatever you’re printing comes out nice and pretty.</p></section>	http://perldoc.perl.org/perlglossary.html#format
Your random numbers are not that random	A			Perl Diagnostics							<section class="prog__container"><p>(F) When trying to initialize the random seed for hashes, Perl could not get any randomness out of your system.  This usually indicates Something Very Wrong.</p></section>	http://perldoc.perl.org/perldiag.html#Your-random-numbers-are-not-that-random
loop control statement (definition)	A			Perl Glossary							<section class="prog__container"><p>Any statement within the body of a loop that can make a loop prematurely stop looping or skip an <b>iteration</b>. Generally, you shouldn’t try this on roller coasters.</p></section>	http://perldoc.perl.org/perlglossary.html#loop-control-statement
Binary "." operator	A			Perl Operators\nPerl Additive Operators							<section class="prog__container">Binary &quot;.&quot; concatenates two strings.</section>	http://perldoc.perl.org/perlop.html#Additive-Operators
data type (definition)	A			Perl Glossary							<section class="prog__container"><p>A set of possible values, together with all the operations that know how to deal with those values. For example, a numeric data type has a certain set of numbers that you can work with, as well as various mathematical operations that you can do on the numbers, but would make little sense on, say, a string such as <code class="inline"><span class="q">&quot;Kilroy&quot;</span></code> . Strings have their own operations, such as <b>concatenation</b>. Compound types made of a number of smaller pieces generally have operations to compose and decompose them, and perhaps to rearrange them. <b>Objects</b> that model things in the real world often have operations that correspond to real activities. For instance, if you model an elevator, your elevator object might have an <code class="inline"><span class="w">open_door</span></code>  <b>method</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#data-type
variable (definition)	A			Perl Glossary							<section class="prog__container"><p>A named storage location that can hold any of various kinds of <b>value</b>, as your program sees fit.</p></section>	http://perldoc.perl.org/perlglossary.html#variable
Compress::Raw::Zlib (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>Compress::Raw::Zlib - Low-Level Interface to zlib compression library</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Compress::Raw::Zlib</span> <span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$d</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="w">new</span> <span class="i">Compress::Raw::Zlib::Deflate</span><span class="s">(</span> <span class="s">[</span><span class="w">OPT</span><span class="s">]</span> <span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$d</span><span class="i">-&gt;deflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$d</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="i">$output</span> [<span class="cm">,</span> <span class="i">$flush_type</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;deflateReset</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="w">OPTS</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;deflateTune</span><span class="s">(</span><span class="w">OPTS</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;dict_adler</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;crc32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;adler32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;total_in</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;total_out</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;msg</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_Strategy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_Level</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_BufSize</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$i</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="w">new</span> <span class="i">Compress::Raw::Zlib::Inflate</span><span class="s">(</span> <span class="s">[</span><span class="w">OPT</span><span class="s">]</span> <span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$i</span><span class="i">-&gt;inflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span> [<span class="cm">,</span> <span class="i">$eof</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$i</span><span class="i">-&gt;inflateSync</span><span class="s">(</span><span class="i">$input</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;inflateReset</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;dict_adler</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;crc32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;adler32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;total_in</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;total_out</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;msg</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_BufSize</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$crc</span> = <span class="i">adler32</span><span class="s">(</span><span class="i">$buffer</span> [<span class="cm">,</span><span class="i">$crc</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$crc</span> = <span class="i">crc32</span><span class="s">(</span><span class="i">$buffer</span> [<span class="cm">,</span><span class="i">$crc</span>]<span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$crc</span> = <span class="i">crc32_combine</span><span class="s">(</span><span class="i">$crc1</span><span class="cm">,</span> <span class="i">$crc2</span><span class="cm">,</span> <span class="i">$len2</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$adler</span> = <span class="i">adler32_combine</span><span class="s">(</span><span class="i">$adler1</span><span class="cm">,</span> <span class="i">$adler2</span><span class="cm">,</span> <span class="i">$len2</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$version</span> = <span class="i">Compress::Raw::Zlib::zlib_version</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$flags</span> = <span class="i">Compress::Raw::Zlib::zlibCompileFlags</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Compress/Raw/Zlib.html
TAP::Parser::YAMLish::Writer (module)	A			Perl Standard Modules		[[YAML::Tiny]]\n[[YAML]]\n[[YAML::Syck]]\n[[Config::Tiny]]\n[[CSS::Tiny]]\n[[http://use.perl.org/~Alias/journal/29427]]					<section class="prog__container"><p>TAP::Parser::YAMLish::Writer - Write YAMLish data</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::YAMLish::Writer</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$data</span> = <span class="s">{</span></li><li>        <span class="w">one</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>        <span class="w">two</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="cm">,</span></li><li>        <span class="w">three</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">3</span> <span class="s">]</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$yw</span> = <span class="w">TAP::Parser::YAMLish::Writer</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>    </li><li>    <span class="c"># Write to an array...</span></li><li>    <span class="i">$yw</span><span class="i">-&gt;write</span><span class="s">(</span> <span class="i">$data</span><span class="cm">,</span> \\<span class="i">@some_array</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="c"># ...an open file handle...</span></li><li>    <span class="i">$yw</span><span class="i">-&gt;write</span><span class="s">(</span> <span class="i">$data</span><span class="cm">,</span> <span class="i">$some_file_handle</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="c"># ...a string ...</span></li><li>    <span class="i">$yw</span><span class="i">-&gt;write</span><span class="s">(</span> <span class="i">$data</span><span class="cm">,</span> \\<span class="i">$some_string</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="c"># ...or a closure</span></li><li>    <span class="i">$yw</span><span class="i">-&gt;write</span><span class="s">(</span> <span class="i">$data</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$line\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/YAMLish/Writer.html
Can't use %! because Errno.pm is not available	A			Perl Diagnostics							<section class="prog__container"><p>(F) The first time the <code class="inline"><span class="i">%!</span></code>  hash is used, perl automatically loads the Errno.pm module.  The Errno module is expected to tie the %! hash to provide symbolic names for <code class="inline"><span class="i">$!</span></code>  errno values.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-%25!-because-Errno.pm-is-not-available
getpwnam (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getpwnam NAME</pre></section>	http://perldoc.perl.org/functions/getpwnam.html
destroy (definition)	A			Perl Glossary							<section class="prog__container"><p>To deallocate the memory of a <b>referent</b> (first triggering its <code class="inline">DESTROY</code>  method, if it has one).</p></section>	http://perldoc.perl.org/perlglossary.html#destroy
$^V (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The revision, version, and subversion of the Perl interpreter, represented as a <span href="http://perldoc.perl.org/version.html">version</span> object.</p><p>This variable first appeared in perl v5.6.0; earlier versions of perl will see an undefined value.  Before perl v5.10.0 <code class="inline"><span class="i">$^V</span></code>  was represented as a v-string rather than a <span href="http://perldoc.perl.org/version.html">version</span> object.</p><p><code class="inline"><span class="i">$^V</span></code>  can be used to determine whether the Perl interpreter executing a script is in the right range of versions.  For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Hashes not randomized!\\n&quot;</span> if !<span class="i">$^V</span> or <span class="i">$^V</span> lt <span class="v">v5.8.1</span></li></ol></pre><p>While version objects overload stringification, to portably convert <code class="inline"><span class="i">$^V</span></code>  into its string representation, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf()</span></code>&#39;s <code class="inline"><span class="q">&quot;%vd&quot;</span></code>  conversion, which works for both v-strings or version objects:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;version is v%vd\\n&quot;</span><span class="cm">,</span> <span class="i">$^V</span><span class="sc">;</span>  <span class="c"># Perl&#39;s version</span></li></ol></pre><p>See the documentation of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">VERSION</span></code>  for a convenient way to fail if the running Perl interpreter is too old.</p><p>See also <code class="inline"><span class="i">$]</span></code>  for a decimal representation of the Perl version.</p><p>The main advantage of <code class="inline"><span class="i">$^V</span></code>  over <code class="inline"><span class="i">$]</span></code>  is that, for Perl v5.10.0 or later, it overloads operators, allowing easy comparison against other version representations (e.g. decimal, literal v-string, &quot;v1.2.3&quot;, or objects).  The disadvantage is that prior to v5.10.0, it was only a literal v-string, which can&#39;t be easily printed or compared.</p><p>Mnemonic: use ^V for a version object.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eV
Pod::Simple::PullParserEndToken (module)	A			Perl Standard Modules		[[Pod::Simple::PullParserToken]]\n[[Pod::Simple]]\n[[Pod::Simple::Subclassing]]					<section class="prog__container"><p>Pod::Simple::PullParserEndToken -- end-tokens from Pod::Simple::PullParser</p> <p>(See <span href="http://perldoc.perl.org/Pod/Simple/PullParser.html">Pod::Simple::PullParser</span>)</p></section>	http://perldoc.perl.org/Pod/Simple/PullParserEndToken.html
Foreach Loops	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>The <code class="inline">foreach</code>  loop iterates over a normal list value and sets the scalar variable VAR to be each element of the list in turn.  If the variable is preceded with the keyword <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, then it is lexically scoped, and is therefore visible only within the loop.  Otherwise, the variable is implicitly local to the loop and regains its former value upon exiting the loop.  If the variable was previously declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, it uses that variable instead of the global one, but it&#39;s still localized to the loop.  This implicit localization occurs <i>only</i> in a <code class="inline">foreach</code>  loop.  </p><p>The <code class="inline">foreach</code>  keyword is actually a synonym for the <code class="inline">for</code>  keyword, so you can use either.  If VAR is omitted, <code class="inline"><span class="i">$_</span></code>  is set to each value. </p><p>If any element of LIST is an lvalue, you can modify it by modifying VAR inside the loop.  Conversely, if any element of LIST is NOT an lvalue, any attempt to modify that element will fail.  In other words, the <code class="inline">foreach</code>  loop index variable is an implicit alias for each item in the list that you&#39;re looping over. </p><p>If any part of LIST is an array, <code class="inline">foreach</code>  will get very confused if you add or remove elements within the loop body, for example with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code>.   So don&#39;t do that. </p><p><code class="inline">foreach</code>  probably won&#39;t do what you expect if VAR is a tied or other special variable.   Don&#39;t do that either.</p><p>As of Perl 5.22, there is an experimental variant of this loop that accepts a variable preceded by a backslash for VAR, in which case the items in the LIST must be references.  The backslashed variable will become an alias to each referenced item in the LIST, which must be of the correct type. The variable needn&#39;t be a scalar in this case, and the backslash may be followed by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>.  To use this form, you must enable the <code class="inline"><span class="w">refaliasing</span></code>  feature via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span></code> .  (See <span href="http://perldoc.perl.org/feature.html">feature</span>.  See also <span href="http://perldoc.perl.org/perlref.html#Assigning-to-References">Assigning to References in perlref</span>.)</p><p>Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@ary</span><span class="s">)</span> <span class="s">{</span> <span class="q">s/foo/bar/</span> <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$elem</span> <span class="s">(</span><span class="i">@elements</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$elem</span> *= <span class="n">2</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="i">$count</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span><span class="s">(</span><span class="n">1</span>..<span class="n">10</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;BOOM&quot;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$count</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="n">1</span>..<span class="n">15</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Merry Christmas\\n&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$item</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/:[\\\\\\n:]*/</span><span class="cm">,</span> <span class="i">$ENV</span>{<span class="w">TERMCAP</span>}<span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Item: $item\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;refaliasing&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::refaliasing&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> \\<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span> <span class="s">(</span><span class="i">@array_of_hash_references</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># do something which each %hash</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s how a C programmer might code up a particular algorithm in Perl:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="i">@ary1</span><span class="sc">;</span> <span class="i">$i</span>++<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$j</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$j</span> &lt; <span class="i">@ary2</span><span class="sc">;</span> <span class="i">$j</span>++<span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$ary1</span>[<span class="i">$i</span>] &gt; <span class="i">$ary2</span>[<span class="i">$j</span>]<span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span><span class="sc">;</span> <span class="c"># can&#39;t go to outer :-(</span></li><li>            <span class="s">}</span></li><li>            <span class="i">$ary1</span>[<span class="i">$i</span>] += <span class="i">$ary2</span>[<span class="i">$j</span>]<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="c"># this is where that last takes me</span></li><li>    <span class="s">}</span></li></ol></pre><p>Whereas here&#39;s how a Perl programmer more comfortable with the idiom might do it:</p><pre class="verbatim"><ol><li>    <span class="j">OUTER:</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$wid</span> <span class="s">(</span><span class="i">@ary1</span><span class="s">)</span> <span class="s">{</span></li><li>    <span class="j">INNER:</span>   <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$jet</span> <span class="s">(</span><span class="i">@ary2</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">OUTER</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$wid</span> &gt; <span class="i">$jet</span><span class="sc">;</span></li><li>                <span class="i">$wid</span> += <span class="i">$jet</span><span class="sc">;</span></li><li>             <span class="s">}</span></li><li>          <span class="s">}</span></li></ol></pre><p>See how much easier this is?  It&#39;s cleaner, safer, and faster.  It&#39;s cleaner because it&#39;s less noisy.  It&#39;s safer because if code gets added between the inner and outer loops later on, the new code won&#39;t be accidentally executed.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> explicitly iterates the other loop rather than merely terminating the inner one.  And it&#39;s faster because Perl executes a <code class="inline">foreach</code>  statement more rapidly than it would the equivalent <code class="inline">for</code>  loop.</p><p>Perceptive Perl hackers may have noticed that a <code class="inline">for</code>  loop has a return value, and that this value can be captured by wrapping the loop in a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> block.  The reward for this discovery is this cautionary advice:  The return value of a <code class="inline">for</code>  loop is unspecified and may change without notice. Do not rely on it.</p></section>	http://perldoc.perl.org/perlsyn.html#Foreach-Loops
Thread::Queue (module)	A			Perl Standard Modules		[[http://www.cpanforum.com/dist/Thread-Queue]]\n[[threads]]\n[[threads::shared]]					<section class="prog__container"><p>Thread::Queue - Thread-safe queues</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">threads</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Thread::Queue</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$q</span> = <span class="w">Thread::Queue</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># A new empty queue</span></li><li></li><li>    <span class="c"># Worker thread</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$thr</span> = <span class="w">threads</span><span class="w">-&gt;create</span><span class="s">(</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span></li><li>            <span class="c"># Thread will loop until no more work</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$item</span> = <span class="i">$q</span><span class="i">-&gt;dequeue</span><span class="s">(</span><span class="s">)</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="c"># Do work on $item</span></li><li>                ...</li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Send work to the thread</span></li><li>    <span class="i">$q</span><span class="i">-&gt;enqueue</span><span class="s">(</span><span class="i">$item1</span><span class="cm">,</span> ...<span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Signal that there is no more work to be sent</span></li><li>    <span class="i">$q</span><span class="i">-&gt;end</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Join up with the thread when it finishes</span></li><li>    <span class="i">$thr</span><span class="i">-&gt;join</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    ...</li><li></li><li>    <span class="c"># Count of items in the queue</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$left</span> = <span class="i">$q</span><span class="i">-&gt;pending</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Non-blocking dequeue</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$item</span> = <span class="i">$q</span><span class="i">-&gt;dequeue_nb</span><span class="s">(</span><span class="s">)</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># Work on $item</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># Blocking dequeue with 5-second timeout</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$item</span> = <span class="i">$q</span><span class="i">-&gt;dequeue_timed</span><span class="s">(</span><span class="n">5</span><span class="s">)</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># Work on $item</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># Get the second item in the queue without dequeuing anything</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$item</span> = <span class="i">$q</span><span class="i">-&gt;peek</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Insert two items into the queue just behind the head</span></li><li>    <span class="i">$q</span><span class="i">-&gt;insert</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="i">$item1</span><span class="cm">,</span> <span class="i">$item2</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Extract the last two items on the queue</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$item1</span><span class="cm">,</span> <span class="i">$item2</span><span class="s">)</span> = <span class="i">$q</span><span class="i">-&gt;extract</span><span class="s">(</span><span class="n">-2</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Thread/Queue.html
semctl (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>semctl ID,SEMNUM,CMD,ARG</pre><p>Calls the System V IPC function semctl(2).  You&#39;ll probably have to say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span><span class="sc">;</span></li></ol></pre><p>first to get the correct constant definitions.  If CMD is IPC_STAT or GETALL, then ARG must be a variable that will hold the returned semid_ds structure or semaphore value array.  Returns like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code>: the undefined value for error, &quot;<code class="inline">0 but true</code>&quot; for zero, or the actual return value otherwise.  The ARG must consist of a vector of native short integers, which may be created with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack(&quot;s!&quot;,(0)x$nsem)</span></code>. See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span>, <code class="inline"><span class="w">IPC::SysV</span></code> , <code class="inline"><span class="w">IPC::Semaphore</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#semctl">semctl in perlport</span>.</p></section>	http://perldoc.perl.org/functions/semctl.html
Prototype not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;ve omitted the closing parenthesis in a function prototype definition.</p></section>	http://perldoc.perl.org/perldiag.html#Prototype-not-terminated
TAP::Formatter::Console::ParallelSession (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Console::ParallelSession - Harness output delegate for parallel console output</p> </section>	http://perldoc.perl.org/TAP/Formatter/Console/ParallelSession.html
shmread (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>shmread ID,VAR,POS,SIZE</pre></section>	http://perldoc.perl.org/functions/shmread.html
PAUSE (definition)	A			Perl Glossary							<section class="prog__container"><p>The Perl Authors Upload SErver (<span href="http://pause.perl.org">http://pause.perl.org</span>), the gateway for <b>modules</b> on their way to <b>CPAN</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#PAUSE
AnyDBM_File (module)	A			Perl Standard Modules		[[perldbmfilter]]					<section class="prog__container"><p>AnyDBM_File - provide framework for multiple DBMs</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">AnyDBM_File</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/AnyDBM_File.html
Devel::Peek (module)	A			Perl Standard Modules		[[perlguts]]\n[[perlguts]]					<section class="prog__container"><p>Devel::Peek - A data debugging tool for the XS programmer</p> <pre class="verbatim"><ol><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Devel::Peek</span><span class="sc">;</span></li><li>        <span class="i">Dump</span><span class="s">(</span> <span class="i">$a</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">Dump</span><span class="s">(</span> <span class="i">$a</span><span class="cm">,</span> <span class="n">5</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">Dump</span><span class="s">(</span> <span class="i">@a</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">Dump</span><span class="s">(</span> <span class="i">%h</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">DumpArray</span><span class="s">(</span> <span class="n">5</span><span class="cm">,</span> <span class="i">$a</span><span class="cm">,</span> <span class="i">$b</span><span class="cm">,</span> ... <span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="w">mstat</span> <span class="q">&quot;Point 5&quot;</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Devel::Peek</span> <span class="q">&#39;:opd=st&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Devel/Peek.html
DBM_Filter::int32 (module)	A			Perl Standard Modules		[[DBM_Filter]]\n[[perldbmfilter]]					<section class="prog__container"><p>DBM_Filter::int32 - filter for DBM_Filter</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, or ODBM_File</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;int32&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter/int32.html
CPAN::Distroprefs (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Distroprefs -- read and match distroprefs</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">CPAN::Distroprefs</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%info</span> = <span class="s">(</span>... <span class="w">distribution</span>/<span class="w">environment</span> <span class="w">info</span> ...<span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$finder</span> = <span class="w">CPAN::Distroprefs</span><span class="w">-&gt;find</span><span class="s">(</span><span class="i">$prefs_dir</span><span class="cm">,</span> \\<span class="i">%ext_map</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    while <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="i">$finder</span><span class="i">-&gt;next</span><span class="s">)</span> <span class="s">{</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$result</span><span class="i">-&gt;as_string</span> if <span class="i">$result</span><span class="i">-&gt;is_fatal</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span><span class="s">(</span><span class="i">$result</span><span class="i">-&gt;as_string</span><span class="s">)</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> if <span class="i">$result</span><span class="i">-&gt;is_warning</span><span class="sc">;</span></li><li></li><li>        for <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pref</span> <span class="s">(</span><span class="i">@</span>{ <span class="i">$result</span><span class="i">-&gt;prefs</span> }<span class="s">)</span> <span class="s">{</span></li><li>            if <span class="s">(</span><span class="i">$pref</span><span class="i">-&gt;matches</span><span class="s">(</span>\\<span class="i">%info</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$pref</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/CPAN/Distroprefs.html
NDBM_File (module)	A			Perl Standard Modules							<section class="prog__container"><p>NDBM_File - Tied access to ndbm files</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span>   <span class="c"># For O_RDWR, O_CREAT, etc.</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">NDBM_File</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span><span class="s">(</span><span class="i">%h</span><span class="cm">,</span> <span class="q">&#39;NDBM_File&#39;</span><span class="cm">,</span> <span class="q">&#39;filename&#39;</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0666</span><span class="s">)</span></li><li>    or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Couldn&#39;t tie NDBM file &#39;filename&#39;: $!; aborting&quot;</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Now read and change the hash</span></li><li>  <span class="i">$h</span>{<span class="w">newkey</span>} = <span class="w">newvalue</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$h</span>{<span class="w">oldkey</span>}<span class="sc">;</span></li><li>  ...</li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="i">%h</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/NDBM_File.html
Can't "next" outside a loop block	A			Perl Diagnostics							<section class="prog__container"><p>(F) A &quot;next&quot; statement was executed to reiterate the current block, but there isn&#39;t a current block.  Note that an &quot;if&quot; or &quot;else&quot; block doesn&#39;t count as a &quot;loopish&quot; block, as doesn&#39;t a block given to sort(), map() or grep().  You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once.  See <span href="http://perldoc.perl.org/functions/next.html">next</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22next%22-outside-a-loop-block
Parentheses missing around "%s" list	A			Perl Diagnostics							<section class="prog__container"><p>(W parenthesis) You said something like</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span> = <span class="i">@_</span><span class="sc">;</span></li></ol></pre><p>when you meant</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="i">$bar</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li></ol></pre><p>Remember that &quot;my&quot;, &quot;our&quot;, &quot;local&quot; and &quot;state&quot; bind tighter than comma.</p></section>	http://perldoc.perl.org/perldiag.html#Parentheses-missing-around-%22%25s%22-list
codepoint (definition)	A			Perl Glossary							<section class="prog__container"><p>The integer a computer uses to represent a given character. ASCII codepoints are in the range 0 to 127; Unicode codepoints are in the range 0 to 0x1F_FFFF; and Perl codepoints are in the range 0 to 2³²−1 or 0 to 2⁶⁴−1, depending on your native integer size. In Perl Culture, sometimes called <b>ordinals</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#codepoint
scope (definition)	A			Perl Glossary							<section class="prog__container"><p>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does <b>dynamic scoping</b> of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> <b>variables</b>, meaning that the rest of the <b>block</b>, and any <b>subroutines</b> that are called by the rest of the block, can see the variables that are local to the block. Perl does <b>lexical scoping</b> of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> variables, meaning that the rest of the block can see the variable, but other subroutines called by the block <i>cannot</i> see the variable.</p></section>	http://perldoc.perl.org/perlglossary.html#scope
%s: loadable library and perl binaries are mismatched (got handshake key %p, needed %p)	A			Perl Diagnostics							<section class="prog__container"><p>(P) A dynamic loading library <code class="inline">.<span class="w">so</span></code>  or <code class="inline">.<span class="w">dll</span></code>  was being loaded into the process that was built against a different build of perl than the said library was compiled against.  Reinstalling the XS module will likely fix this error.</p></section>	http://perldoc.perl.org/perldiag.html#%25s%3a-loadable-library-and-perl-binaries-are-mismatched-(got-handshake-key-%25p%2c-needed-%25p)
panic: scan_num, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) scan_num() got called on something that wasn&#39;t a number.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-scan_num%2c-%25s
Not a GLOB reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to a &quot;typeglob&quot; (that is, a symbol table entry that looks like <code class="inline"><span class="i">*foo</span></code> ), but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-GLOB-reference
Text::ParseWords (module)	A			Perl Standard Modules		[[Text::CSV]]					<section class="prog__container"><p>Text::ParseWords - parse text into an array of tokens or array of arrays</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::ParseWords</span><span class="sc">;</span></li><li>  <span class="i">@lists</span> = <span class="i">nested_quotewords</span><span class="s">(</span><span class="i">$delim</span><span class="cm">,</span> <span class="i">$keep</span><span class="cm">,</span> <span class="i">@lines</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">@words</span> = <span class="i">quotewords</span><span class="s">(</span><span class="i">$delim</span><span class="cm">,</span> <span class="i">$keep</span><span class="cm">,</span> <span class="i">@lines</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">@words</span> = <span class="i">shellwords</span><span class="s">(</span><span class="i">@lines</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">@words</span> = <span class="i">parse_line</span><span class="s">(</span><span class="i">$delim</span><span class="cm">,</span> <span class="i">$keep</span><span class="cm">,</span> <span class="i">$line</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">@words</span> = <span class="i">old_shellwords</span><span class="s">(</span><span class="i">@lines</span><span class="s">)</span><span class="sc">;</span> <span class="c"># DEPRECATED!</span></li></ol></pre></section>	http://perldoc.perl.org/Text/ParseWords.html
Useless use of /d modifier in transliteration operator	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You have used the /d modifier where the searchlist has the same length as the replacelist.  See <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more information about the /d modifier.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-%2fd-modifier-in-transliteration-operator
Use of my $_ is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::lexical_topic) Lexical $_ is an experimental feature and its behavior may change or even be removed in any future release of perl. See the explanation under <span href="http://perldoc.perl.org/perlvar.html#%24_">$_ in perlvar</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-my-%24_-is-experimental
Pod::Simple::XMLOutStream (module)	A			Perl Standard Modules		[[Pod::Simple::DumpAsXML]]\n[[Pod::Simple]]\n[[Pod::Simple::DumpAsXML]]\n[[Pod::SAX]]\n[[Pod::Simple::Subclassing]]\n[[Pod::PXML]]\n[[Pod::XML]]\n[[Pod::Simple]]\n[[Pod::Simple::Text]]\n[[Pod::Spell]]					<section class="prog__container"><p>Pod::Simple::XMLOutStream -- turn Pod into XML</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::XMLOutStream</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::XMLOutStream-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/XMLOutStream.html
How can I output my numbers with commas added?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy and Benjamin Goldberg)</p><p>You can use <span href="http://search.cpan.org/perldoc/Number::Format">Number::Format</span> to separate places in a number. It handles locale information for those of you who want to insert full stops instead (or anything else that they want to use, really).</p><p>This subroutine will add commas to your number:</p><pre class="verbatim"><ol><li><span name="commify"></span>    sub <span class="m">commify</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="q">s/^([-+]?\\d+)(\\d{3})/$1,$2/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>This regex from Benjamin Goldberg will add commas to numbers:</p><pre class="verbatim"><ol><li>    <span class="q">s/(^[-+]?\\d+?(?=(?&gt;(?:\\d{3})+)(?!\\d))|\\G\\d{3}(?=\\d))/$1,/g</span><span class="sc">;</span></li></ol></pre><p>It is easier to see with comments:</p><pre class="verbatim"><ol><li>    <span class="q">s/(</span></li><li>        <span class="q">        ^[-+]?             # beginning of number.</span></li><li>        <span class="q">        \\d+?               # first digits before first comma</span></li><li>        <span class="q">        (?=                # followed by, (but not included in the match) :</span></li><li>            <span class="q">            (?&gt;(?:\\d{3})+) # some positive multiple of three digits.</span></li><li>            <span class="q">            (?!\\d)         # an *exact* multiple, not x * 3 + 1 or whatever.</span></li><li>        <span class="q">        )</span></li><li>        <span class="q">        |                  # or:</span></li><li>        <span class="q">        \\G\\d{3}            # after the last group, get three digits</span></li><li>        <span class="q">        (?=\\d)             # but they have to have more digits after them.</span></li><li>    <span class="q">    )/$1,/xg</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-output-my-numbers-with-commas-added%3f
IPC (definition)	A			Perl Glossary							<section class="prog__container"><p>Interprocess Communication.</p></section>	http://perldoc.perl.org/perlglossary.html#IPC
%s matches null string many times in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) The pattern you&#39;ve specified would be an infinite loop if the regular expression engine didn&#39;t specifically check for that.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-matches-null-string-many-times-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
chdir (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>chdir EXPR<br>chdir FILEHANDLE<br>chdir DIRHANDLE<br>chdir</pre><p>Changes the working directory to EXPR, if possible.  If EXPR is omitted, changes to the directory specified by <code class="inline"><span class="i">$ENV</span>{<span class="w">HOME</span>}</code> , if set; if not, changes to the directory specified by <code class="inline"><span class="i">$ENV</span>{<span class="w">LOGDIR</span>}</code> .  (Under VMS, the variable <code class="inline"><span class="i">$ENV</span>{<span class="w">SYS</span><span class="i">$LOGIN</span>}</code>  is also checked, and used if it is set.)  If neither is set, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span></code> does nothing.  It returns true on success, false otherwise.  See the example under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>.</p><p>On systems that support fchdir(2), you may pass a filehandle or directory handle as the argument.  On systems that don&#39;t support fchdir(2), passing handles raises an exception.</p></section>	http://perldoc.perl.org/functions/chdir.html
Error converting file specification %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Because Perl may have to deal with file specifications in either VMS or Unix syntax, it converts them to a single form when it must operate on them directly.  Either you&#39;ve passed an invalid file specification to Perl, or you&#39;ve found a case the conversion routines don&#39;t handle.  Drat.</p></section>	http://perldoc.perl.org/perldiag.html#Error-converting-file-specification-%25s
split (function)	A			Perl Functions\nPerl Regular expressions and pattern matching							<section class="prog__container"><pre>split /PATTERN/,EXPR,LIMIT<br>split /PATTERN/,EXPR<br>split /PATTERN/<br>split</pre><p>Splits the string EXPR into a list of strings and returns the list in list context, or the size of the list in scalar context.</p><p>If only PATTERN is given, EXPR defaults to <code class="inline"><span class="i">$_</span></code> .</p><p>Anything in EXPR that matches PATTERN is taken to be a separator that separates the EXPR into substrings (called &quot;<i>fields</i>&quot;) that do <b>not</b> include the separator.  Note that a separator may be longer than one character or even have no characters at all (the empty string, which is a zero-width match).</p><p>The PATTERN need not be constant; an expression may be used to specify a pattern that varies at runtime.</p><p>If PATTERN matches the empty string, the EXPR is split at the match position (between characters).  As an example, the following:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">&#39;b&#39;</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>uses the &#39;b&#39; in &#39;abc&#39; as a separator to produce the output &#39;a:c&#39;. However, this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">&#39;&#39;</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>uses empty string matches as separators to produce the output &#39;a:b:c&#39;; thus, the empty string may be used to split EXPR into a list of its component characters.</p><p>As a special case for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code>, the empty pattern given in <span href="http://perldoc.perl.org/perlop.html#m%2fPATTERN%2fmsixpodualngc">match operator</span> syntax (<code class="inline"><span class="q">//</span></code> ) specifically matches the empty string, which is contrary to its usual interpretation as the last successful match.</p><p>If PATTERN is <code class="inline"><span class="q">/^/</span></code> , then it is treated as if it used the <span href="http://perldoc.perl.org/perlreref.html#OPERATORS">multiline modifier</span> (<code class="inline"><span class="q">/^/m</span></code> ), since it isn&#39;t much use otherwise.</p><p>As another special case, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> emulates the default behavior of the command line tool <b>awk</b> when the PATTERN is either omitted or a <i>literal string</i> composed of a single space character (such as <code class="inline"><span class="q">&#39; &#39;</span></code>  or <code class="inline"><span class="q">&quot;\\x20&quot;</span></code> , but not e.g. <code class="inline"><span class="q">/ /</span></code> ).  In this case, any leading whitespace in EXPR is removed before splitting occurs, and the PATTERN is instead treated as if it were <code class="inline"><span class="q">/\\s+/</span></code> ; in particular, this means that <i>any</i> contiguous whitespace (not just a single space character) is used as a separator.  However, this special treatment can be avoided by specifying the pattern <code class="inline"><span class="q">/ /</span></code>  instead of the string <code class="inline"><span class="q">&quot; &quot;</span></code> , thereby allowing only a single space character to be a separator.  In earlier Perls this special case was restricted to the use of a plain <code class="inline"><span class="q">&quot; &quot;</span></code>  as the pattern argument to split, in Perl 5.18.0 and later this special case is triggered by any expression which evaluates as the simple string <code class="inline"><span class="q">&quot; &quot;</span></code> .</p><p>If omitted, PATTERN defaults to a single space, <code class="inline"><span class="q">&quot; &quot;</span></code> , triggering the previously described <i>awk</i> emulation.</p><p>If LIMIT is specified and positive, it represents the maximum number of fields into which the EXPR may be split; in other words, LIMIT is one greater than the maximum number of times EXPR may be split.  Thus, the LIMIT value <code class="inline"><span class="n">1</span></code>  means that EXPR may be split a maximum of zero times, producing a maximum of one field (namely, the entire value of EXPR).  For instance:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;abc&#39;, and this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;a:bc&#39;, and each of these:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;a:b:c&#39;.</p><p>If LIMIT is negative, it is treated as if it were instead arbitrarily large; as many fields as possible are produced.</p><p>If LIMIT is omitted (or, equivalently, zero), then it is usually treated as if it were instead negative but with the exception that trailing empty fields are stripped (empty leading fields are always preserved); if all fields are empty, then all fields are considered to be trailing (and are thus stripped in this case).  Thus, the following:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">&#39;,&#39;</span><span class="cm">,</span> <span class="q">&#39;a,b,c,,,&#39;</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;a:b:c&#39;, but the following:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">&#39;,&#39;</span><span class="cm">,</span> <span class="q">&#39;a,b,c,,,&#39;</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;a:b:c:::&#39;.</p><p>In time-critical applications, it is worthwhile to avoid splitting into more fields than necessary.  Thus, when assigning to a list, if LIMIT is omitted (or zero), then LIMIT is treated as though it were one larger than the number of variables in the list; for the following, LIMIT is implicitly 3:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$login</span><span class="cm">,</span> <span class="i">$passwd</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/:/</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that splitting an EXPR that evaluates to the empty string always produces zero fields, regardless of the LIMIT specified.</p><p>An empty leading field is produced when there is a positive-width match at the beginning of EXPR.  For instance:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/ /</span><span class="cm">,</span> <span class="q">&#39; abc&#39;</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39;:abc&#39;.  However, a zero-width match at the beginning of EXPR never produces an empty field, so that:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39; abc&#39;</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39; :a:b:c&#39; (rather than &#39;: :a:b:c&#39;).</p><p>An empty trailing field, on the other hand, is produced when there is a match at the end of EXPR, regardless of the length of the match (of course, unless a non-zero LIMIT is given explicitly, such fields are removed, as in the last example).  Thus:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39;:&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="q">&#39; abc&#39;</span><span class="cm">,</span> <span class="n">-1</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>produces the output &#39; :a:b:c:&#39;.</p><p>If the PATTERN contains <span href="http://perldoc.perl.org/perlretut.html#Grouping-things-and-hierarchical-matching">capturing groups</span>, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per <span href="http://perldoc.perl.org/perlretut.html#Backreferences">backreferences</span>); if any group does not match, then it captures the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> value instead of a substring.  Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does <b>not</b> count towards the LIMIT.  Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/-|,/</span><span class="cm">,</span> <span class="q">&quot;1-10,20&quot;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span></li><li>    <span class="c"># (&#39;1&#39;, &#39;10&#39;, &#39;20&#39;)</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/(-|,)/</span><span class="cm">,</span> <span class="q">&quot;1-10,20&quot;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span></li><li>    <span class="c"># (&#39;1&#39;, &#39;-&#39;, &#39;10&#39;, &#39;,&#39;, &#39;20&#39;)</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/-|(,)/</span><span class="cm">,</span> <span class="q">&quot;1-10,20&quot;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span></li><li>    <span class="c"># (&#39;1&#39;, undef, &#39;10&#39;, &#39;,&#39;, &#39;20&#39;)</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/(-)|,/</span><span class="cm">,</span> <span class="q">&quot;1-10,20&quot;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span></li><li>    <span class="c"># (&#39;1&#39;, &#39;-&#39;, &#39;10&#39;, undef, &#39;20&#39;)</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">/(-)|(,)/</span><span class="cm">,</span> <span class="q">&quot;1-10,20&quot;</span><span class="cm">,</span> <span class="n">3</span><span class="s">)</span></li><li>    <span class="c"># (&#39;1&#39;, &#39;-&#39;, undef, &#39;10&#39;, undef, &#39;,&#39;, &#39;20&#39;)</span></li></ol></pre></section>	http://perldoc.perl.org/functions/split.html
Net::Ping (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::Ping - check a remote host for reachability</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Ping</span><span class="sc">;</span></li><li></li><li>    <span class="i">$p</span> = <span class="w">Net::Ping</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$host is alive.\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$p</span><span class="i">-&gt;ping</span><span class="s">(</span><span class="i">$host</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$p</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$p</span> = <span class="w">Net::Ping</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;icmp&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$p</span><span class="i">-&gt;bind</span><span class="s">(</span><span class="i">$my_addr</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Specify source interface of pings</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$host</span> <span class="s">(</span><span class="i">@host_array</span><span class="s">)</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$host is &quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;NOT &quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$p</span><span class="i">-&gt;ping</span><span class="s">(</span><span class="i">$host</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;reachable.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="i">$p</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$p</span> = <span class="w">Net::Ping</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;tcp&quot;</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Try connecting to the www port instead of the echo port</span></li><li>    <span class="i">$p</span><span class="i">-&gt;port_number</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/getservbyname.html">getservbyname</span><span class="s">(</span><span class="q">&quot;http&quot;</span><span class="cm">,</span> <span class="q">&quot;tcp&quot;</span><span class="s">)</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">$stop_time</span> &gt; <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">(</span><span class="s">)</span><span class="s">)</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$host not reachable &quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$p</span><span class="i">-&gt;ping</span><span class="s">(</span><span class="i">$host</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="s">(</span><span class="n">300</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">(</span><span class="i">$p</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Like tcp protocol, but with many hosts</span></li><li>    <span class="i">$p</span> = <span class="w">Net::Ping</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;syn&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$p</span><span class="i">-&gt;port_number</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/getservbyname.html">getservbyname</span><span class="s">(</span><span class="q">&quot;http&quot;</span><span class="cm">,</span> <span class="q">&quot;tcp&quot;</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$host</span> <span class="s">(</span><span class="i">@host_array</span><span class="s">)</span> <span class="s">{</span></li><li>      <span class="i">$p</span><span class="i">-&gt;ping</span><span class="s">(</span><span class="i">$host</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="s">(</span><span class="i">$host</span><span class="cm">,</span><span class="i">$rtt</span><span class="cm">,</span><span class="i">$ip</span><span class="s">)</span> = <span class="i">$p</span><span class="i">-&gt;ack</span><span class="s">)</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;HOST: $host [$ip] ACKed in $rtt seconds.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># High precision syntax (requires Time::HiRes)</span></li><li>    <span class="i">$p</span> = <span class="w">Net::Ping</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$p</span><span class="i">-&gt;hires</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$ret</span><span class="cm">,</span> <span class="i">$duration</span><span class="cm">,</span> <span class="i">$ip</span><span class="s">)</span> = <span class="i">$p</span><span class="i">-&gt;ping</span><span class="s">(</span><span class="i">$host</span><span class="cm">,</span> <span class="n">5.5</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span><span class="s">(</span><span class="q">&quot;$host [ip: $ip] is alive (packet return time: %.2f ms)\\n&quot;</span><span class="cm">,</span></li><li>            <span class="n">1000</span> * <span class="i">$duration</span><span class="s">)</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$ret</span><span class="sc">;</span></li><li>    <span class="i">$p</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># For backward compatibility</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$host is alive.\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">pingecho</span><span class="s">(</span><span class="i">$host</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/Ping.html
lvalue (definition)	A			Perl Glossary							<section class="prog__container"><p>Term used by language lawyers for a storage location you can assign a new <b>value</b> to, such as a <b>variable</b> or an element of an <b>array</b>. The “l” is short for “left”, as in the left side of an assignment, a typical place for lvalues. An <b>lvaluable</b> function or expression is one to which a value may be assigned, as in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span><span class="s">(</span><span class="i">$x</span><span class="s">)</span> = <span class="n">10</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#lvalue
The stat preceding %s wasn't an lstat	A			Perl Diagnostics							<section class="prog__container"><p>(F) It makes no sense to test the current stat buffer for symbolic linkhood if the last stat that wrote to the stat buffer already went past the symlink to get to the real file.  Use an actual filename instead.</p></section>	http://perldoc.perl.org/perldiag.html#The-stat-preceding-%25s-wasn't-an-lstat
Number too long	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl limits the representation of decimal numbers in programs to about 250 characters.  You&#39;ve exceeded that length.  Future versions of Perl are likely to eliminate this arbitrary limitation.  In the meantime, try using scientific notation (e.g. &quot;1e6&quot; instead of &quot;1_000_000&quot;).</p></section>	http://perldoc.perl.org/perldiag.html#Number-too-long
wrapper (definition)	A			Perl Glossary							<section class="prog__container"><p>A program or subroutine that runs some other program or subroutine for you, modifying some of its input or output to better suit your purposes.</p></section>	http://perldoc.perl.org/perlglossary.html#wrapper
Missing right brace on \%c{} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Missing right brace in <code class="inline">\\<span class="i">x</span><span class="s">{</span>...<span class="s">}</span></code> , <code class="inline">\\<span class="i">p</span><span class="s">{</span>...<span class="s">}</span></code> , <code class="inline">\\<span class="i">P</span><span class="s">{</span>...<span class="s">}</span></code> , or <code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Missing-right-brace-on-%5c%25c%7b%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
/n regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Prevent the grouping metacharacters <code class="inline"><span class="s">(</span><span class="s">)</span></code>  from capturing. This modifier, new in 5.22, will stop <code class="inline"><span class="i">$1</span></code> , <code class="inline"><span class="i">$2</span></code> , etc... from being filled in.</p><pre class="verbatim"><ol><li>  <span class="q">&quot;hello&quot;</span> =~ <span class="q">/(hi|hello)/</span><span class="sc">;</span>   <span class="c"># $1 is &quot;hello&quot;</span></li><li>  <span class="q">&quot;hello&quot;</span> =~ <span class="q">/(hi|hello)/</span><span class="w">n</span><span class="sc">;</span>  <span class="c"># $1 is undef</span></li></ol></pre><p>This is equivalent to putting <code class="inline">?:</code> at the beginning of every capturing group:</p><pre class="verbatim"><ol><li>  <span class="q">&quot;hello&quot;</span> =~ <span class="q">/(?:hi|hello)/</span><span class="sc">;</span> <span class="c"># $1 is undef</span></li></ol></pre><p><code class="inline"><span class="q">/n</span></code>  can be negated on a per-group basis. Alternatively, named captures may still be used.</p><pre class="verbatim"><ol><li>  <span class="q">&quot;hello&quot;</span> =~ <span class="q">/(?-n:(hi|hello))/</span><span class="w">n</span><span class="sc">;</span>   <span class="c"># $1 is &quot;hello&quot;</span></li><li>  <span class="q">&quot;hello&quot;</span> =~ <span class="q">/(?&lt;greet&gt;hi|hello)/</span><span class="w">n</span><span class="sc">;</span> <span class="c"># $1 is &quot;hello&quot;, $+{greet} is</span></li><li>                                    <span class="c"># &quot;hello&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/perlre.html#*n*
-p	A			Perl Command-Line Switches							<section class="prog__container"><p>causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like <i>sed</i>:</p><pre class="verbatim"><ol><li>  <span class="j">LINE:</span></li><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>&#09;...&#09;&#09;<span class="c"># your program goes here</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;-p destination: $!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file.  Note that the lines are printed automatically.  An error occurring during printing is treated as fatal.  To suppress printing use the <b>-n</b> switch.  A <b>-p</b> overrides a <b>-n</b> switch.</p><p><code class="inline">BEGIN</code>  and <code class="inline">END</code>  blocks may be used to capture control before or after the implicit loop, just as in <i>awk</i>.</p></section>	http://perldoc.perl.org/perlrun.html#*-p*
overload arg '%s' is invalid	A			Perl Diagnostics							<section class="prog__container"><p>(W overload) The <span href="http://perldoc.perl.org/overload.html">overload</span> pragma was passed an argument it did not recognize.  Did you mistype an operator?</p></section>	http://perldoc.perl.org/perldiag.html#overload-arg-'%25s'-is-invalid
How do I use a regular expression to strip C-style comments from a file?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>While this actually can be done, it&#39;s much harder than you&#39;d think. For example, this one-liner</p><pre class="verbatim"><ol><li>    perl -0777 -pe &#39;s{/\\*.*?\\*/}{}gs&#39; foo.c</li></ol></pre><p>will work in many but not all cases. You see, it&#39;s too simple-minded for certain kinds of C programs, in particular, those with what appear to be comments in quoted strings. For that, you&#39;d need something like this, created by Jeffrey Friedl and later modified by Fred Curtis.</p><pre class="verbatim"><ol><li>    <span class="i">$/</span> = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>    <span class="i">$_</span> = &lt;&gt;<span class="sc">;</span></li><li>    <span class="q">s#/\\*[^*]*\\*+([^/*][^*]*\\*+)*/|(&quot;(\\\\.|[^&quot;\\\\])*&quot;|&#39;(\\\\.|[^&#39;\\\\])*&#39;|.[^/&quot;&#39;\\\\]*)#defined $2 ? $2 : &quot;&quot;#gse</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li></ol></pre><p>This could, of course, be more legibly written with the <code class="inline">/x</code> modifier, adding whitespace and comments. Here it is expanded, courtesy of Fred Curtis.</p><pre class="verbatim"><ol><li>    <span class="q">s{</span></li><li>       <span class="q">       /\\*         ##  Start of /* ... */ comment</span></li><li>       <span class="q">       [^*]*\\*+    ##  Non-* followed by 1-or-more *&#39;s</span></li><li>       <span class="q">       (</span></li><li>         <span class="q">         [^/*][^*]*\\*+</span></li><li>       <span class="q">       )*          ##  0-or-more things which don&#39;t start with /</span></li><li>                   <span class="q">                   ##    but do end with &#39;*&#39;</span></li><li>       <span class="q">       /           ##  End of /* ... */ comment</span></li><li></li><li>     <span class="q">     |         ##     OR  various things which aren&#39;t comments:</span></li><li></li><li>       <span class="q">       (</span></li><li>         <span class="q">         &quot;           ##  Start of &quot; ... &quot; string</span></li><li>         <span class="q">         (</span></li><li>           <span class="q">           \\\\.           ##  Escaped char</span></li><li>         <span class="q">         |               ##    OR</span></li><li>           <span class="q">           [^&quot;\\\\]        ##  Non &quot;\\</span></li><li>         <span class="q">         )*</span></li><li>         <span class="q">         &quot;           ##  End of &quot; ... &quot; string</span></li><li></li><li>       <span class="q">       |         ##     OR</span></li><li></li><li>         <span class="q">         &#39;           ##  Start of &#39; ... &#39; string</span></li><li>         <span class="q">         (</span></li><li>           <span class="q">           \\\\.           ##  Escaped char</span></li><li>         <span class="q">         |               ##    OR</span></li><li>           <span class="q">           [^&#39;\\\\]        ##  Non &#39;\\</span></li><li>         <span class="q">         )*</span></li><li>         <span class="q">         &#39;           ##  End of &#39; ... &#39; string</span></li><li></li><li>       <span class="q">       |         ##     OR</span></li><li></li><li>         <span class="q">         .           ##  Anything other char</span></li><li>         <span class="q">         [^/&quot;&#39;\\\\]*   ##  Chars which doesn&#39;t start a comment, string or escape</span></li><li>       <span class="q">       )</span></li><li>     <span class="q">     }{defined $2 ? $2 : &quot;&quot;}gxse</span><span class="sc">;</span></li></ol></pre><p>A slight modification also removes C++ comments, possibly spanning multiple lines using a continuation character:</p><pre class="verbatim"><ol><li> <span class="q">s#/\\*[^*]*\\*+([^/*][^*]*\\*+)*/|//([^\\\\]|[^\\n][\\n]?)*?\\n|(&quot;(\\\\.|[^&quot;\\\\])*&quot;|&#39;(\\\\.|[^&#39;\\\\])*&#39;|.[^/&quot;&#39;\\\\]*)#defined $3 ? $3 : &quot;&quot;#gse</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-use-a-regular-expression-to-strip-C-style-comments-from-a-file%3f
sysread (function)	A			Perl Functions\nPerl Input and output functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>sysread FILEHANDLE,SCALAR,LENGTH,OFFSET<br>sysread FILEHANDLE,SCALAR,LENGTH</pre><p>Attempts to read LENGTH bytes of data into variable SCALAR from the specified FILEHANDLE, using the read(2).  It bypasses buffered IO, so mixing this with other kinds of reads, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> can cause confusion because the perlio or stdio layers usually buffers data.  Returns the number of bytes actually read, <code class="inline"><span class="n">0</span></code>  at end of file, or undef if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is also set).  SCALAR will be grown or shrunk so that the last byte actually read is the last byte of the scalar after the read.</p><p>An OFFSET may be specified to place the read data at some place in the string other than the beginning.  A negative OFFSET specifies placement at that many characters counting backwards from the end of the string.  A positive OFFSET greater than the length of SCALAR results in the string being padded to the required size with <code class="inline"><span class="q">&quot;\\0&quot;</span></code>  bytes before the result of the read is appended.</p><p>There is no syseof() function, which is ok, since eof() doesn&#39;t work well on device files (like ttys) anyway.  Use sysread() and check for a return value for 0 to decide whether you&#39;re done.</p><p>Note that if the filehandle has been marked as <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  Unicode characters are read instead of bytes (the LENGTH, OFFSET, and the return value of sysread() are in Unicode characters). The <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span>...<span class="s">)</span></code>  layer implicitly introduces the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  layer. See <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span>, <span href="http://perldoc.perl.org/functions/open.html">open</span>, and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma, <span href="http://perldoc.perl.org/open.html">open</span>.</p></section>	http://perldoc.perl.org/functions/sysread.html
I grabbed the sources and tried to compile but gdbm/dynamic loading/malloc/linking/... failed. How do I make it work?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>Read the <i>INSTALL</i> file, which is part of the source distribution. It describes in detail how to cope with most idiosyncrasies that the <code class="inline"><span class="w">Configure</span></code>  script can&#39;t work around for any given system or architecture.</p></section>	http://perldoc.perl.org/perlfaq2.html#I-grabbed-the-sources-and-tried-to-compile-but-gdbm%2fdynamic-loading%2fmalloc%2flinking%2f...-failed.-How-do-I-make-it-work%3f
How can I open a file with a leading ">" or trailing blanks?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by Brian McCauley)</p><p>The special two-argument form of Perl&#39;s open() function ignores trailing blanks in filenames and infers the mode from certain leading characters (or a trailing &quot;|&quot;). In older versions of Perl this was the only version of open() and so it is prevalent in old code and books.</p><p>Unless you have a particular reason to use the two-argument form you should use the three-argument form of open() which does not treat any characters in the filename as special.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;  file  &quot;</span><span class="sc">;</span>  <span class="c"># filename is &quot;   file   &quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="q">&quot;&gt;file&quot;</span><span class="sc">;</span>     <span class="c"># filename is &quot;&gt;file&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-open-a-file-with-a-leading-%22%3e%22-or-trailing-blanks%3f
printf (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>printf FILEHANDLE FORMAT, LIST<br>printf FILEHANDLE<br>printf FORMAT, LIST<br>printf</pre><p>Equivalent to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">FILEHANDLE</span> <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span><span class="s">(</span><span class="w">FORMAT</span><span class="cm">,</span> <span class="w">LIST</span><span class="s">)</span></code> , except that <code class="inline"><span class="i">$\\</span></code>  (the output record separator) is not appended.  The FORMAT and the LIST are actually parsed as a single list.  The first argument of the list will be interpreted as the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> format.  This means that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf(@_)</span></code> will use <code class="inline"><span class="i">$_</span>[<span class="n">0</span>]</code>  as the format.  See <span href="http://perldoc.perl.org/functions/printf.html#sprintf-FORMAT%2c-LIST">sprintf</span> for an explanation of the format argument.  If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code>  for <code class="inline"><span class="w">LC_NUMERIC</span></code>  Look for this throught pod is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the <code class="inline"><span class="w">LC_NUMERIC</span></code>  locale setting.  See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span> and <span href="http://perldoc.perl.org/POSIX.html">POSIX</span>.</p><p>For historical reasons, if you omit the list, <code class="inline"><span class="i">$_</span></code>  is used as the format; to use FILEHANDLE without a list, you must use a real filehandle like <code class="inline"><span class="w">FH</span></code> , not an indirect one like <code class="inline"><span class="i">$fh</span></code> .  However, this will rarely do what you want; if $_ contains formatting codes, they will be replaced with the empty string and a warning will be emitted if warnings are enabled.  Just use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> if you want to print the contents of $_.</p><p>Don&#39;t fall into the trap of using a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span></code> when a simple <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> would do.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> is more efficient and less error prone.</p></section>	http://perldoc.perl.org/functions/printf.html
Unbalanced context: %d more PUSHes than POPs	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The exit code detected an internal inconsistency in how many execution contexts were entered and left.</p></section>	http://perldoc.perl.org/perldiag.html#Unbalanced-context%3a-%25d-more-PUSHes-than-POPs
Transliteration pattern not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer couldn&#39;t find the interior delimiter of a tr/// or tr[][] or y/// or y[][] construct.  Missing the leading <code class="inline"><span class="i">$</span></code>  from variables <code class="inline"><span class="i">$tr</span></code>  or <code class="inline"><span class="i">$y</span></code>  may cause this error.</p></section>	http://perldoc.perl.org/perldiag.html#Transliteration-pattern-not-terminated
Socket (module)	A			Perl Standard Modules							<section class="prog__container"><p><code class="inline"><span class="w">Socket</span></code>  - networking constants and support functions</p> <p><code class="inline"><span class="w">Socket</span></code>  a low-level module used by, among other things, the <span href="http://perldoc.perl.org/IO/Socket.html">IO::Socket</span> family of modules. The following examples demonstrate some low-level uses but a practical program would likely use the higher-level API provided by <code class="inline"><span class="w">IO::Socket</span></code>  or similar instead.</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span> <span class="q">qw(PF_INET SOCK_STREAM pack_sockaddr_in inet_aton)</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/socket.html">socket</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$socket</span><span class="cm">,</span> <span class="w">PF_INET</span><span class="cm">,</span> <span class="w">SOCK_STREAM</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;socket: $!&quot;</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$port</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getservbyname.html">getservbyname</span> <span class="q">&quot;echo&quot;</span><span class="cm">,</span> <span class="q">&quot;tcp&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/connect.html">connect</span><span class="s">(</span><span class="i">$socket</span><span class="cm">,</span> <span class="i">pack_sockaddr_in</span><span class="s">(</span><span class="i">$port</span><span class="cm">,</span> <span class="i">inet_aton</span><span class="s">(</span><span class="q">&quot;localhost&quot;</span><span class="s">)</span><span class="s">)</span><span class="s">)</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;connect: $!&quot;</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$socket</span> <span class="q">&quot;Hello, world!\\n&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$socket&gt;</span><span class="sc">;</span></li></ol></pre><p>See also the <span href="http://perldoc.perl.org/Socket.html#EXAMPLES">EXAMPLES</span> section.</p></section>	http://perldoc.perl.org/Socket.html
Tie::Scalar (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars</p> <pre class="verbatim"><ol><li><span name="package-NewScalar"></span>    package <span class="i">NewScalar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Scalar</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::Scalar)</span><span class="sc">;</span></li><li></li><li><span name="FETCH"></span>    sub <span class="m">FETCH</span> <span class="s">{</span> ... <span class="s">}</span>&#09;&#09;<span class="c"># Provide a needed method</span></li><li><span name="TIESCALAR"></span>    sub <span class="m">TIESCALAR</span> <span class="s">{</span> ... <span class="s">}</span>&#09;<span class="c"># Overrides inherited method</span></li><li></li><li></li><li><span name="package-NewStdScalar"></span>    package <span class="i">NewStdScalar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Scalar</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::StdScalar)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># All methods provided by default, so define</span></li><li>    <span class="c"># only what needs be overridden</span></li><li><span name="FETCH-1"></span>    sub <span class="m">FETCH</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">$new_scalar</span><span class="cm">,</span> <span class="q">&#39;NewScalar&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">$new_std_scalar</span><span class="cm">,</span> <span class="q">&#39;NewStdScalar&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Scalar.html
Net::FTP (module)	A			Perl Standard Modules		[[Net::Netrc]]\n[[Net::Cmd]]\n[[IO::Socket::SSL]]\n[[http://www.ietf.org/rfc/rfc959.txt]]\n[[http://www.ietf.org/rfc/rfc2428.txt]]\n[[http://www.ietf.org/rfc/rfc4217.txt]]					<section class="prog__container"><p>Net::FTP - FTP Client class</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::FTP</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ftp</span> = <span class="w">Net::FTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;some.host.name&quot;</span><span class="cm">,</span> <span class="w">Debug</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="s">)</span></li><li>      or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot connect to some.host.name: $@&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ftp</span><span class="i">-&gt;login</span><span class="s">(</span><span class="q">&quot;anonymous&quot;</span><span class="cm">,</span><span class="q">&#39;-anonymous@&#39;</span><span class="s">)</span></li><li>      or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot login &quot;</span><span class="cm">,</span> <span class="i">$ftp</span><span class="i">-&gt;message</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ftp</span><span class="i">-&gt;cwd</span><span class="s">(</span><span class="q">&quot;/pub&quot;</span><span class="s">)</span></li><li>      or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot change working directory &quot;</span><span class="cm">,</span> <span class="i">$ftp</span><span class="i">-&gt;message</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ftp</span><span class="i">-&gt;get</span><span class="s">(</span><span class="q">&quot;that.file&quot;</span><span class="s">)</span></li><li>      or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;get failed &quot;</span><span class="cm">,</span> <span class="i">$ftp</span><span class="i">-&gt;message</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ftp</span><span class="i">-&gt;quit</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/FTP.html
Missing argument to -%c	A			Perl Diagnostics							<section class="prog__container"><p>(F) The argument to the indicated command line switch must follow immediately after the switch, without intervening spaces.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-argument-to--%25c
What's the difference between require and use?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Perl runs <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> statement at run-time. Once Perl loads, compiles, and runs the file, it doesn&#39;t do anything else. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statement is the same as a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> run at compile-time, but Perl also calls the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method for the loaded package. These two are the same:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MODULE</span> <span class="q">qw(import list)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">MODULE</span><span class="sc">;</span></li><li>        <span class="w">MODULE</span><span class="w">-&gt;import</span><span class="s">(</span><span class="w">import</span> <span class="w">list</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>However, you can suppress the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> by using an explicit, empty import list. Both of these still happen at compile-time:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MODULE</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">MODULE</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> will also call the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method, the actual value for <code class="inline"><span class="w">MODULE</span></code>  must be a bareword. That is, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> cannot load files by name, although <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> can:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&quot;$ENV{HOME}/lib/Foo.pm&quot;</span><span class="sc">;</span> <span class="c"># no @INC searching!</span></li></ol></pre><p>See the entry for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> for more details.</p></section>	http://perldoc.perl.org/perlfaq8.html#What's-the-difference-between-require-and-use%3f
Net::Netrc (module)	A			Perl Standard Modules		[[Net::Netrc]]\n[[Net::Cmd]]					<section class="prog__container"><p>Net::Netrc - OO interface to users netrc file</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Netrc</span><span class="sc">;</span></li><li></li><li>    <span class="i">$mach</span> = <span class="w">Net::Netrc</span><span class="w">-&gt;lookup</span><span class="s">(</span><span class="q">&#39;some.machine&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$login</span> = <span class="i">$mach</span><span class="i">-&gt;login</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$login</span><span class="cm">,</span> <span class="i">$password</span><span class="cm">,</span> <span class="i">$account</span><span class="s">)</span> = <span class="i">$mach</span><span class="i">-&gt;lpa</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/Netrc.html
CPAN::HandleConfig (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::HandleConfig - internal configuration handling for CPAN.pm</p> </section>	http://perldoc.perl.org/CPAN/HandleConfig.html
How do I install a module from CPAN?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The easiest way is to have a module also named CPAN do it for you by using the <code class="inline"><span class="w">cpan</span></code>  command that comes with Perl. You can give it a list of modules to install:</p><pre class="verbatim"><ol><li>    <span class="i">$ cpan</span> <span class="w">IO::Interactive</span> <span class="w">Getopt::Whatever</span></li></ol></pre><p>If you prefer <code class="inline"><span class="w">CPANPLUS</span></code> , it&#39;s just as easy:</p><pre class="verbatim"><ol><li>    <span class="i">$ cpanp</span> <span class="w">i</span> <span class="w">IO::Interactive</span> <span class="w">Getopt::Whatever</span></li></ol></pre><p>If you want to install a distribution from the current directory, you can tell <code class="inline"><span class="w">CPAN</span>.<span class="w">pm</span></code>  to install <code class="inline">.</code> (the full stop):</p><pre class="verbatim"><ol><li>    <span class="i">$ cpan</span> .</li></ol></pre><p>See the documentation for either of those commands to see what else you can do.</p><p>If you want to try to install a distribution by yourself, resolving all dependencies on your own, you follow one of two possible build paths.</p><p>For distributions that use <i>Makefile.PL</i>:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> <span class="w">Makefile</span>.<span class="w">PL</span></li><li>    <span class="i">$ make</span> <span class="w">test</span> <span class="w">install</span></li></ol></pre><p>For distributions that use <i>Build.PL</i>:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> <span class="w">Build</span>.<span class="w">PL</span></li><li>    <span class="i">$ .</span>/<span class="w">Build</span> <span class="w">test</span></li><li>    <span class="i">$ .</span>/<span class="w">Build</span> <span class="w">install</span></li></ol></pre><p>Some distributions may need to link to libraries or other third-party code and their build and installation sequences may be more complicated. Check any <i>README</i> or <i>INSTALL</i> files that you may find.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-install-a-module-from-CPAN%3f
Use of /g modifier is meaningless in split	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used the /g modifier on the pattern for a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> operator.  Since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> always tries to match the pattern repeatedly, the <code class="inline">/g</code> has no effect.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%2fg-modifier-is-meaningless-in-split
Config (module)	A			Perl Standard Modules							<section class="prog__container"><p>Config - access Perl configuration information</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Config</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$Config</span>{<span class="w">usethreads</span>}<span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;has thread support\\n&quot;</span></li><li>    <span class="s">}</span> </li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Config</span> <span class="q">qw(myconfig config_sh config_vars config_re)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">myconfig</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">config_sh</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">config_re</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">config_vars</span><span class="s">(</span><span class="q">qw(osname archname)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Config.html
PerlIO::scalar (module)	A			Perl Standard Modules							<section class="prog__container"><p>PerlIO::scalar - in-memory IO, scalar IO</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$scalar</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>   ...</li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span>  \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span>  \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&quot;</span><span class="cm">,</span> \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$scalar</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>   ...</li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;:scalar&quot;</span><span class="cm">,</span>  \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;:scalar&quot;</span><span class="cm">,</span>  \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;:scalar&quot;</span><span class="cm">,</span> \\<span class="i">$scalar</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/PerlIO/scalar.html
What if I don't encode?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Your text string will be sent using the bytes in Perl&#39;s internal format. In some cases, Perl will warn you that you&#39;re doing something wrong, with a friendly warning:</p><pre class="verbatim"><ol><li>    <span class="w">Wide</span> <span class="w">character</span> <span class="w">in</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">at</span> <span class="w">example</span>.<span class="w">pl</span> <span class="w">line</span> <span class="n">2.</span></li></ol></pre><p>Because the internal format is often UTF-8, these bugs are hard to spot, because UTF-8 is usually the encoding you wanted! But don&#39;t be lazy, and don&#39;t use the fact that Perl&#39;s internal format is UTF-8 to your advantage. Encode explicitly to avoid weird bugs, and to show to maintenance programmers that you thought this through.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-if-I-don't-encode%3f
Unknown regex modifier "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) Alphanumerics immediately following the closing delimiter of a regular expression pattern are interpreted by Perl as modifier flags for the regex.  One of the ones you specified is invalid.  One way this can happen is if you didn&#39;t put in white space between the end of the regex and a following alphanumeric operator:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$a</span> =~ <span class="q">/foo/</span><span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="i">$bar</span> == <span class="n">3</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="q">&quot;a&quot;</span></code>  is a valid modifier flag, but the <code class="inline"><span class="q">&quot;n&quot;</span></code>  is not, and raises this error.  Likely what was meant instead was:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$a</span> =~ <span class="q">/foo/</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="i">$bar</span> == <span class="n">3</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Unknown-regex-modifier-%22%25s%22
Attempt to clear deleted array	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) An array was assigned to when it was being freed. Freed values are not supposed to be visible to Perl code.  This can also happen if XS code calls <code class="inline"><span class="w">av_clear</span></code>  from a custom magic callback on the array.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-clear-deleted-array
Can't find %s character property "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used <code class="inline">\\<span class="w">p</span><span class="s">{</span><span class="s">}</span></code>  or <code class="inline">\\<span class="w">P</span><span class="s">{</span><span class="s">}</span></code>  but the character property by that name could not be found.  Maybe you misspelled the name of the property? See <span href="http://perldoc.perl.org/perluniprops.html#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d">Properties accessible through \\p{} and \\P{} in perluniprops</span> for a complete list of available official properties.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-%25s-character-property-%22%25s%22
$@ (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>The Perl syntax error message from the last <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> operator.  If <code class="inline"><span class="i">$@</span></code>  is the null string, the last <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> parsed and executed correctly (although the operations you invoked may have failed in the normal fashion).</p><p>Warning messages are not collected in this variable.  You can, however, set up a routine to process warnings by setting <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  as described in <span href="http://perldoc.perl.org/perlvar.html#%25SIG">%SIG</span>.</p><p>Mnemonic: Where was the syntax error &quot;at&quot;?</p></section>	http://perldoc.perl.org/perlvar.html#%24%40
Tie::SubstrHash (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::SubstrHash</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%myhash</span><span class="cm">,</span> <span class="q">&#39;Tie::SubstrHash&#39;</span><span class="cm">,</span> <span class="i">$key_len</span><span class="cm">,</span> <span class="i">$value_len</span><span class="cm">,</span> <span class="i">$table_size</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/SubstrHash.html
What's the difference between deep and shallow binding?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>In deep binding, lexical variables mentioned in anonymous subroutines are the same ones that were in scope when the subroutine was created. In shallow binding, they are whichever variables with the same names happen to be in scope when the subroutine is called. Perl always uses deep binding of lexical variables (i.e., those created with my()). However, dynamic variables (aka global, local, or package variables) are effectively shallowly bound. Consider this just one more reason not to use them. See the answer to <span href="http://perldoc.perl.org/perlfaq7.html#What&#39;s-a-closure%3f">What&#39;s a closure?</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#What's-the-difference-between-deep-and-shallow-binding%3f
open (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>open FILEHANDLE,EXPR<br>open FILEHANDLE,MODE,EXPR<br>open FILEHANDLE,MODE,EXPR,LIST<br>open FILEHANDLE,MODE,REFERENCE<br>open FILEHANDLE</pre><p>Opens the file whose filename is given by EXPR, and associates it with FILEHANDLE.</p><p>Simple examples to open a file for reading:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;input.txt&quot;</span><span class="s">)</span> </li><li>&#09;or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;cannot open &lt; input.txt: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>and for writing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> <span class="q">&quot;output.txt&quot;</span><span class="s">)</span> </li><li>&#09;or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;cannot open &gt; output.txt: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>(The following is a comprehensive reference to open(): for a gentler introduction you may consider <span href="http://perldoc.perl.org/perlopentut.html">perlopentut</span>.)</p><p>If FILEHANDLE is an undefined scalar variable (or array or hash element), a new filehandle is autovivified, meaning that the variable is assigned a reference to a newly allocated anonymous filehandle.  Otherwise if FILEHANDLE is an expression, its value is the real filehandle.  (This is considered a symbolic reference, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&quot;refs&quot;</span></code>  should <i>not</i> be in effect.)</p><p>If three (or more) arguments are specified, the open mode (including optional encoding) in the second argument are distinct from the filename in the third.  If MODE is <code class="inline">&lt;</code>  or nothing, the file is opened for input. If MODE is <code class="inline">&gt;</code>, the file is opened for output, with existing files first being truncated (&quot;clobbered&quot;) and nonexisting files newly created. If MODE is <code class="inline">&gt;&gt;</code> , the file is opened for appending, again being created if necessary.</p><p>You can put a <code class="inline">+</code>  in front of the <code class="inline">&gt;</code> or <code class="inline">&lt;</code>  to indicate that you want both read and write access to the file; thus <code class="inline">+&lt;</code>  is almost always preferred for read/write updates--the  <code class="inline">+&gt;</code> mode would clobber the file first.  You can&#39;t usually use either read-write mode for updating textfiles, since they have variable-length records.  See the <b>-i</b> switch in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for a better approach.  The file is created with permissions of <code class="inline"><span class="n">0666</span></code>  modified by the process&#39;s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> value.</p><p>These various prefixes correspond to the fopen(3) modes of <code class="inline"><span class="w">r</span></code> , <code class="inline"><span class="w">r</span>+</code> , <code class="inline"><span class="w">w</span></code> , <code class="inline"><span class="w">w</span>+</code> , <code class="inline"><span class="w">a</span></code> , and <code class="inline"><span class="w">a</span>+</code> .</p><p>In the one- and two-argument forms of the call, the mode and filename should be concatenated (in that order), preferably separated by white space.  You can--but shouldn&#39;t--omit the mode in these forms when that mode is <code class="inline">&lt;</code> .  It is always safe to use the two-argument form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> if the filename argument is a known literal.</p><p>For three or more arguments if MODE is <code class="inline">|-</code> , the filename is interpreted as a command to which output is to be piped, and if MODE is <code class="inline">-|</code> , the filename is interpreted as a command that pipes output to us.  In the two-argument (and one-argument) form, one should replace dash (<code class="inline">-</code> ) with the command. See <span href="http://perldoc.perl.org/perlipc.html#Using-open()-for-IPC">Using open() for IPC in perlipc</span> for more examples of this. (You are not allowed to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> to a command that pipes both in <i>and</i> out, but see <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span>, <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>, and <span href="http://perldoc.perl.org/perlipc.html#Bidirectional-Communication-with-Another-Process">Bidirectional Communication with Another Process in perlipc</span> for alternatives.)</p><p>In the form of pipe opens taking three or more arguments, if LIST is specified (extra arguments after the command name) then LIST becomes arguments to the command invoked if the platform supports it.  The meaning of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> with more than three arguments for non-pipe modes is not yet defined, but experimental &quot;layers&quot; may give extra LIST arguments meaning.</p><p>In the two-argument (and one-argument) form, opening <code class="inline">&lt;-</code>   or <code class="inline">-</code>  opens STDIN and opening <code class="inline">&gt;-</code>  opens STDOUT.</p><p>You may (and usually should) use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the handle that affect how the input and output are processed (see <span href="http://perldoc.perl.org/open.html">open</span> and <span href="http://perldoc.perl.org/PerlIO.html">PerlIO</span> for more details).  For example:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;:encoding(UTF-8)&quot;</span><span class="cm">,</span> <span class="q">&quot;filename&quot;</span><span class="s">)</span></li><li>    || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open UTF-8 encoded filename: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>opens the UTF8-encoded file containing Unicode characters; see <span href="http://perldoc.perl.org/perluniintro.html">perluniintro</span>.  Note that if layers are specified in the three-argument form, then default layers stored in ${^OPEN} (see <span href="http://perldoc.perl.org/perlvar.html">perlvar</span>; usually set by the <b>open</b> pragma or the switch <b>-CioD</b>) are ignored. Those layers will also be ignored if you specifying a colon with no name following it.  In that case the default layer for the operating system (:raw on Unix, :crlf on Windows) is used.</p><p>Open returns nonzero on success, the undefined value otherwise.  If the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> involved a pipe, the return value happens to be the pid of the subprocess.</p><p>If you&#39;re running Perl on a system that distinguishes between text files and binary files, then you should check out <span href="http://perldoc.perl.org/functions/binmode.html">binmode</span> for tips for dealing with this.  The key distinction between systems that need <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code> and those that don&#39;t is their text file formats.  Systems like Unix, Mac OS, and Plan 9, that end lines with a single character and encode that character in C as <code class="inline"><span class="q">&quot;\\n&quot;</span></code>  do not need <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span></code>.  The rest need it.</p><p>When opening a file, it&#39;s seldom a good idea to continue  if the request failed, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> is frequently used with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>.  Even if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> won&#39;t do what you want (say, in a CGI script, where you want to format a suitable error message (but there are modules that can help with that problem)) always check the return value from opening a file.</p><p>The filehandle will be closed when its reference count reaches zero. If it is a lexically scoped variable declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, that usually means the end of the enclosing scope.  However, this automatic close does not check for errors, so it is better to explicitly close filehandles, especially those used for writing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span><span class="s">(</span><span class="i">$handle</span><span class="s">)</span></li><li>       || <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;close failed: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>An older style is to use a bareword as the filehandle, as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;input.txt&quot;</span><span class="s">)</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;cannot open &lt; input.txt: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>Then you can use <code class="inline"><span class="w">FH</span></code>  as the filehandle, in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">FH</span></code>  and <code class="inline"><span class="q">&lt;FH&gt;</span></code>  and so on.  Note that it&#39;s a global variable, so this form is not recommended in new code.</p><p>As a shortcut a one-argument call takes the filename from the global scalar variable of the same name as the filehandle:</p><pre class="verbatim"><ol><li>    <span class="i">$ARTICLE</span> = <span class="n">100</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">ARTICLE</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t find article $ARTICLE: $!\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Here <code class="inline"><span class="i">$ARTICLE</span></code>  must be a global (package) scalar variable - not one declared with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>.</p><p>As a special case the three-argument form with a read/write mode and the third argument being <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tmp</span><span class="cm">,</span> <span class="q">&quot;+&gt;&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> ...</li></ol></pre><p>opens a filehandle to an anonymous temporary file.  Also using <code class="inline">+&lt;</code>  works for symmetry, but you really should consider writing something to the temporary file first.  You will need to seek() to do the reading.</p><p>Perl is built using PerlIO by default; Unless you&#39;ve changed this (such as building Perl with <code class="inline"><span class="w">Configure</span> -<span class="w">Uuseperlio</span></code> ), you can open filehandles directly to Perl scalars via:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> \\<span class="i">$variable</span><span class="s">)</span> || ..</li></ol></pre><p>To (re)open <code class="inline"><span class="w">STDOUT</span></code>  or <code class="inline"><span class="w">STDERR</span></code>  as an in-memory file, close it first:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">STDOUT</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> \\<span class="i">$variable</span><span class="s">)</span></li><li>&#09;or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open STDOUT: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>General examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">LOG</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;/usr/spool/news/twitlog&quot;</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># (log is reserved)</span></li><li>    <span class="c"># if the open fails, output is discarded</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dbase</span><span class="cm">,</span> <span class="q">&quot;+&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;dbase.mine&quot;</span><span class="s">)</span>      <span class="c"># open for update</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open &#39;dbase.mine&#39; for update: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dbase</span><span class="cm">,</span> <span class="q">&quot;+&lt;dbase.mine&quot;</span><span class="s">)</span>          <span class="c"># ditto</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open &#39;dbase.mine&#39; for update: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">ARTICLE</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="cm">,</span> <span class="q">&quot;caesar &lt;$article&quot;</span><span class="s">)</span>  <span class="c"># decrypt article</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t start caesar: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">ARTICLE</span><span class="cm">,</span> <span class="q">&quot;caesar &lt;$article |&quot;</span><span class="s">)</span>      <span class="c"># ditto</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t start caesar: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">EXTRACT</span><span class="cm">,</span> <span class="q">&quot;|sort &gt;Tmp$$&quot;</span><span class="s">)</span>            <span class="c"># $$ is our process id</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t start sort: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># in-memory files</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">MEMORY</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> \\<span class="i">$var</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open memory file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">MEMORY</span> <span class="q">&quot;foo!\\n&quot;</span><span class="sc">;</span>              <span class="c"># output will appear in $var</span></li><li></li><li>    <span class="c"># process argument list of files along with any includes</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$file</span> <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">process</span><span class="s">(</span><span class="i">$file</span><span class="cm">,</span> <span class="q">&quot;fh00&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="process"></span>    sub <span class="m">process</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$filename</span><span class="cm">,</span> <span class="i">$input</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="i">$input</span>++<span class="sc">;</span>    <span class="c"># this is a string increment</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;Can&#39;t open $filename: $!\\n&quot;</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;$input&gt;</span><span class="s">)</span> <span class="s">{</span>    <span class="c"># note use of indirection</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^#include &quot;(.*)&quot;/</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="i">process</span><span class="s">(</span><span class="i">$1</span><span class="cm">,</span> <span class="i">$input</span><span class="s">)</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="c">#...          # whatever</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perliol.html">perliol</span> for detailed info on PerlIO.</p><p>You may also, in the Bourne shell tradition, specify an EXPR beginning with <code class="inline">&gt;&amp;</code>, in which case the rest of the string is interpreted as the name of a filehandle (or file descriptor, if numeric) to be duped (as <code class="inline"><span class="i">dup</span><span class="s">(</span><span class="n">2</span><span class="s">)</span></code> ) and opened.  You may use <code class="inline"><span class="i">&amp;</span></code>  after <code class="inline">&gt;</code>, <code class="inline">&gt;&gt;</code> , <code class="inline">&lt;</code> , <code class="inline">+&gt;</code>, <code class="inline">+&gt;&gt;</code> , and <code class="inline">+&lt;</code> . The mode you specify should match the mode of the original filehandle. (Duping a filehandle does not take into account any existing contents of IO buffers.)  If you use the three-argument form, then you can pass either a number, the name of a filehandle, or the normal &quot;reference to a glob&quot;.</p><p>Here is a script that saves, redirects, and restores <code class="inline"><span class="w">STDOUT</span></code>  and <code class="inline"><span class="w">STDERR</span></code>  using various methods:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$oldout</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;STDOUT&quot;</span><span class="s">)</span>     or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t dup STDOUT: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">OLDERR</span><span class="cm">,</span>     <span class="q">&quot;&gt;&amp;&quot;</span><span class="cm">,</span> \\<span class="i">*STDERR</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t dup STDERR: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&quot;foo.out&quot;</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t redirect STDOUT: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDERR</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;STDOUT&quot;</span><span class="s">)</span>     or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t dup STDOUT: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span> <span class="w">STDERR</span><span class="sc">;</span> <span class="i">$|</span> = <span class="n">1</span><span class="sc">;</span>  <span class="c"># make unbuffered</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span> <span class="w">STDOUT</span><span class="sc">;</span> <span class="i">$|</span> = <span class="n">1</span><span class="sc">;</span>  <span class="c"># make unbuffered</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDOUT</span> <span class="q">&quot;stdout 1\\n&quot;</span><span class="sc">;</span>  <span class="c"># this works for</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;stderr 1\\n&quot;</span><span class="sc">;</span>  <span class="c"># subprocesses too</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;&quot;</span><span class="cm">,</span> <span class="i">$oldout</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t dup \\$oldout: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">STDERR</span><span class="cm">,</span> <span class="q">&quot;&gt;&amp;OLDERR&quot;</span><span class="s">)</span>    or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t dup OLDERR: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDOUT</span> <span class="q">&quot;stdout 2\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;stderr 2\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>If you specify <code class="inline"><span class="q">&#39;&lt;&amp;=X&#39;</span></code> , where <code class="inline"><span class="w">X</span></code>  is a file descriptor number or a filehandle, then Perl will do an equivalent of C&#39;s <code class="inline"><span class="w">fdopen</span></code>  of that file descriptor (and not call <code class="inline"><span class="i">dup</span><span class="s">(</span><span class="n">2</span><span class="s">)</span></code> ); this is more parsimonious of file descriptors.  For example:</p><pre class="verbatim"><ol><li>    <span class="c"># open for input, reusing the fileno of $fd</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FILEHANDLE</span><span class="cm">,</span> <span class="q">&quot;&lt;&amp;=$fd&quot;</span><span class="s">)</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FILEHANDLE</span><span class="cm">,</span> <span class="q">&quot;&lt;&amp;=&quot;</span><span class="cm">,</span> <span class="i">$fd</span><span class="s">)</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="c"># open for append, using the fileno of OLDFH</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&amp;=&quot;</span><span class="cm">,</span> <span class="w">OLDFH</span><span class="s">)</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&amp;=OLDFH&quot;</span><span class="s">)</span></li></ol></pre><p>Being parsimonious on filehandles is also useful (besides being parsimonious) for example when something is dependent on file descriptors, like for example locking using flock().  If you do just <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">A</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&amp;B&quot;</span><span class="s">)</span></code> , the filehandle A will not have the same file descriptor as B, and therefore flock(A) will not flock(B) nor vice versa.  But with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">A</span><span class="cm">,</span> <span class="q">&quot;&gt;&gt;&amp;=B&quot;</span><span class="s">)</span></code> , the filehandles will share the same underlying system file descriptor.</p><p>Note that under Perls older than 5.8.0, Perl uses the standard C library&#39;s&#39; fdopen() to implement the <code class="inline">=</code>  functionality.  On many Unix systems, fdopen() fails when file descriptors exceed a certain value, typically 255. For Perls 5.8.0 and later, PerlIO is (most often) the default.</p><p>You can see whether your Perl was built with PerlIO by running <code class="inline"><span class="w">perl</span> -<span class="w">V</span></code>  and looking for the <code class="inline"><span class="w">useperlio</span>=</code>  line.  If <code class="inline"><span class="w">useperlio</span></code>  is <code class="inline"><span class="w">define</span></code> , you have PerlIO; otherwise you don&#39;t.</p><p>If you open a pipe on the command <code class="inline">-</code>  (that is, specify either <code class="inline">|-</code>  or <code class="inline">-|</code>  with the one- or two-argument forms of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>),  an implicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> is done, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> returns twice: in the parent process it returns the pid of the child process, and in the child process it returns (a defined) <code class="inline"><span class="n">0</span></code> . Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined($pid)</span></code> or <code class="inline"><span class="q">//</span></code>  to determine whether the open was successful.</p><p>For example, use either</p><pre class="verbatim"><ol><li>    <span class="i">$child_pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FROM_KID</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="s">)</span> &#09;// <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t fork: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="i">$child_pid</span> = <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">TO_KID</span><span class="cm">,</span>   <span class="q">&quot;|-&quot;</span><span class="s">)</span> &#09;// <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t fork: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>followed by</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$child_pid</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="c"># am the parent:</span></li><li>&#09;<span class="c"># either write TO_KID or else read FROM_KID</span></li><li>&#09;...</li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span> <span class="i">$child_pid</span><span class="cm">,</span> <span class="n">0</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>&#09;<span class="c"># am the child; use STDIN/STDOUT normally</span></li><li>&#09;...</li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The filehandle behaves normally for the parent, but I/O to that filehandle is piped from/to the STDOUT/STDIN of the child process. In the child process, the filehandle isn&#39;t opened--I/O happens from/to the new STDOUT/STDIN.  Typically this is used like the normal piped open when you want to exercise more control over just how the pipe command gets executed, such as when running setuid and you don&#39;t want to have to scan shell commands for metacharacters.</p><p>The following blocks are more or less equivalent:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;|tr &#39;[a-z]&#39; &#39;[A-Z]&#39;&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;|-&quot;</span><span class="cm">,</span> <span class="q">&quot;tr &#39;[a-z]&#39; &#39;[A-Z]&#39;&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;|-&quot;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&#39;tr&#39;</span><span class="cm">,</span> <span class="q">&#39;[a-z]&#39;</span><span class="cm">,</span> <span class="q">&#39;[A-Z]&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;|-&quot;</span><span class="cm">,</span> <span class="q">&quot;tr&quot;</span><span class="cm">,</span> <span class="q">&#39;[a-z]&#39;</span><span class="cm">,</span> <span class="q">&#39;[A-Z]&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;cat -n &#39;$file&#39;|&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="cm">,</span> <span class="q">&quot;cat -n &#39;$file&#39;&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&quot;cat&quot;</span><span class="cm">,</span> <span class="q">&quot;-n&quot;</span><span class="cm">,</span> <span class="i">$file</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;-|&quot;</span><span class="cm">,</span> <span class="q">&quot;cat&quot;</span><span class="cm">,</span> <span class="q">&quot;-n&quot;</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The last two examples in each block show the pipe as &quot;list form&quot;, which is not yet supported on all platforms.  A good rule of thumb is that if your platform has a real <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code> (in other words, if your platform is Unix, including Linux and MacOS X), you can use the list form.  You would  want to use the list form of the pipe so you can pass literal arguments to the command without risk of the shell interpreting any shell metacharacters in them.  However, this also bars you from opening pipes to commands that intentionally contain shell metacharacters, such as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;|cat -n | expand -4 | lpr&quot;</span><span class="s">)</span></li><li>&#09;// <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open pipeline to lpr: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlipc.html#Safe-Pipe-Opens">Safe Pipe Opens in perlipc</span> for more examples of this.</p><p>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>).  To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles.</p><p>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor as determined by the value of <code class="inline"><span class="i">$^F</span></code> .  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p><p>Closing any piped filehandle causes the parent process to wait for the child to finish, then returns the status value in <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> .</p><p>The filename passed to the one- and two-argument forms of open() will have leading and trailing whitespace deleted and normal redirection characters honored.  This property, known as &quot;magic open&quot;, can often be used to good effect.  A user could specify a filename of <i>&quot;rsh cat file |&quot;</i>, or you could change certain filenames as needed:</p><pre class="verbatim"><ol><li>    <span class="i">$filename</span> =~ <span class="q">s/(.*\\.gz)\\s*$/gzip -dc &lt; $1|/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $filename: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>Use the three-argument form to open a file with arbitrary weird characters in it,</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span></li><li>&#09;|| <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open &lt; $file: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>otherwise it&#39;s necessary to protect any leading and trailing whitespace:</p><pre class="verbatim"><ol><li>    <span class="i">$file</span> =~ <span class="q">s#^(\\s)#./$1#</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="cm">,</span> <span class="q">&quot;&lt; $file\\0&quot;</span><span class="s">)</span></li><li>&#09;|| <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;open failed: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>(this may not work on some bizarre filesystems).  One should conscientiously choose between the <i>magic</i> and <i>three-argument</i> form of open():</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">IN</span><span class="cm">,</span> <span class="i">$ARGV</span>[<span class="n">0</span>]<span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open $ARGV[0]: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>will allow the user to specify an argument of the form <code class="inline"><span class="q">&quot;rsh cat file |&quot;</span></code> , but will not work on a filename that happens to have a trailing space, while</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">IN</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="i">$ARGV</span>[<span class="n">0</span>]<span class="s">)</span></li><li>&#09;|| <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open &lt; $ARGV[0]: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>will have exactly the opposite restrictions.</p><p>If you want a &quot;real&quot; C <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> (see <i>open(2)</i> on your system), then you should use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> function, which involves no such magic (but may use subtly different filemodes than Perl open(), which is mapped to C fopen()).  This is another way to protect your filenames from interpretation.  For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Handle</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span><span class="s">(</span><span class="w">HANDLE</span><span class="cm">,</span> <span class="i">$path</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span>|<span class="w">O_EXCL</span><span class="s">)</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;sysopen $path: $!&quot;</span><span class="sc">;</span></li><li>    <span class="i">$oldfh</span> = <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="w">HANDLE</span><span class="s">)</span><span class="sc">;</span> <span class="i">$|</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$oldfh</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">HANDLE</span> <span class="q">&quot;stuff $$\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="w">HANDLE</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;File contains: &quot;</span><span class="cm">,</span> <span class="q">&lt;HANDLE&gt;</span><span class="sc">;</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/functions/seek.html">seek</span> for some details about mixing reading and writing.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#open">open in perlport</span>.</p></section>	http://perldoc.perl.org/functions/open.html
associative array (definition)	A			Perl Glossary							<section class="prog__container"><p>See <b>hash</b>. Please. The term associative array is the old Perl 4 term for a <b>hash</b>. Some languages call it a dictionary.</p></section>	http://perldoc.perl.org/perlglossary.html#associative-array
Memoize::SDBM_File (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::SDBM_File - glue to provide EXISTS for SDBM_File for Storable use</p> </section>	http://perldoc.perl.org/Memoize/SDBM_File.html
Makefile (definition)	A			Perl Glossary							<section class="prog__container"><p>A file that controls the compilation of a program. Perl programs don’t usually need a <b>Makefile</b> because the Perl compiler has plenty of self-control.</p></section>	http://perldoc.perl.org/perlglossary.html#Makefile
Illegal octal digit %s ignored	A			Perl Diagnostics							<section class="prog__container"><p>(W digit) You may have tried to use an 8 or 9 in an octal number. Interpretation of the octal number stopped before the 8 or 9.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-octal-digit-%25s-ignored
fcntl (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>fcntl FILEHANDLE,FUNCTION,SCALAR</pre><p>Implements the fcntl(2) function.  You&#39;ll probably have to say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li></ol></pre><p>first to get the correct constant definitions.  Argument processing and value returned work just like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code> below. For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span><span class="s">(</span><span class="i">$filehandle</span><span class="cm">,</span> <span class="w">F_GETFL</span><span class="cm">,</span> <span class="i">$packed_return_buffer</span><span class="s">)</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t fcntl F_GETFL: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>You don&#39;t have to check for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> on the return from <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span></code>. Like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code>, it maps a <code class="inline"><span class="n">0</span></code>  return from the system call into <code class="inline"><span class="q">&quot;0 but true&quot;</span></code>  in Perl.  This string is true in boolean context and <code class="inline"><span class="n">0</span></code>  in numeric context.  It is also exempt from the normal <b>-w</b> warnings on improper numeric conversions.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span></code> raises an exception if used on a machine that doesn&#39;t implement fcntl(2).  See the Fcntl module or your fcntl(2) manpage to learn what functions are available on your system.</p><p>Here&#39;s an example of setting a filehandle named <code class="inline"><span class="w">REMOTE</span></code>  to be non-blocking at the system level.  You&#39;ll have to negotiate <code class="inline"><span class="i">$|</span></code>  on your own, though.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">qw(F_GETFL F_SETFL O_NONBLOCK)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$flags</span> = <span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span><span class="s">(</span><span class="w">REMOTE</span><span class="cm">,</span> <span class="w">F_GETFL</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span></li><li>                or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t get flags for the socket: $!\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$flags</span> = <span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span><span class="s">(</span><span class="w">REMOTE</span><span class="cm">,</span> <span class="w">F_SETFL</span><span class="cm">,</span> <span class="i">$flags</span> | <span class="w">O_NONBLOCK</span><span class="s">)</span></li><li>                or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t set flags for the socket: $!\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#fcntl">fcntl in perlport</span>.</p></section>	http://perldoc.perl.org/functions/fcntl.html
Pod::Text (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Text::Termcap]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::Text - Convert POD data to formatted ASCII text</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Text</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Text</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">sentence</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">width</span> <span class="cm">=&gt;</span> <span class="n">78</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.txt.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.txt&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Text.html
panic: top_env	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler attempted to do a goto, or something weird like that.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-top_env
relational operator (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that says whether a particular ordering relationship is <b>true</b> about a pair of <b>operands</b>. Perl has both numeric and string relational operators. See <b>collating sequence</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#relational-operator
Test::More (module)	A			Perl Standard Modules							<section class="prog__container"><p>Test::More - yet another framework for writing test scripts</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::More</span> <span class="w">tests</span> <span class="cm">=&gt;</span> <span class="n">23</span><span class="sc">;</span></li><li>  <span class="c"># or</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::More</span> <span class="w">skip_all</span> <span class="cm">=&gt;</span> <span class="i">$reason</span><span class="sc">;</span></li><li>  <span class="c"># or</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::More</span><span class="sc">;</span>   <span class="c"># see done_testing()</span></li><li></li><li>  <span class="i">require_ok</span><span class="s">(</span> <span class="q">&#39;Some::Module&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Various ways to say &quot;ok&quot;</span></li><li>  <span class="i">ok</span><span class="s">(</span><span class="i">$got</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="i">$expected</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="w">is</span>  <span class="s">(</span><span class="i">$got</span><span class="cm">,</span> <span class="i">$expected</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">isnt</span><span class="s">(</span><span class="i">$got</span><span class="cm">,</span> <span class="i">$expected</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Rather than print STDERR &quot;# here&#39;s what went wrong\\n&quot;</span></li><li>  <span class="i">diag</span><span class="s">(</span><span class="q">&quot;here&#39;s what went wrong&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="w">like</span>  <span class="s">(</span><span class="i">$got</span><span class="cm">,</span> <span class="q">qr/expected/</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">unlike</span><span class="s">(</span><span class="i">$got</span><span class="cm">,</span> <span class="q">qr/expected/</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">cmp_ok</span><span class="s">(</span><span class="i">$got</span><span class="cm">,</span> <span class="q">&#39;==&#39;</span><span class="cm">,</span> <span class="i">$expected</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">is_deeply</span><span class="s">(</span><span class="i">$got_complex_structure</span><span class="cm">,</span> <span class="i">$expected_complex_structure</span><span class="cm">,</span> <span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="j">SKIP:</span> <span class="s">{</span></li><li>      <span class="w">skip</span> <span class="i">$why</span><span class="cm">,</span> <span class="i">$how_many</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$have_some_feature</span><span class="sc">;</span></li><li></li><li>      <span class="i">ok</span><span class="s">(</span> <span class="i">foo</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span>       <span class="i">$test_name</span> <span class="s">)</span><span class="sc">;</span></li><li>      <span class="i">is</span><span class="s">(</span> <span class="i">foo</span><span class="s">(</span><span class="n">42</span><span class="s">)</span><span class="cm">,</span> <span class="n">23</span><span class="cm">,</span> <span class="i">$test_name</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">}</span><span class="sc">;</span></li><li></li><li>  <span class="j">TODO:</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$TODO</span> = <span class="i">$why</span><span class="sc">;</span></li><li></li><li>      <span class="i">ok</span><span class="s">(</span> <span class="i">foo</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span>       <span class="i">$test_name</span> <span class="s">)</span><span class="sc">;</span></li><li>      <span class="i">is</span><span class="s">(</span> <span class="i">foo</span><span class="s">(</span><span class="n">42</span><span class="s">)</span><span class="cm">,</span> <span class="n">23</span><span class="cm">,</span> <span class="i">$test_name</span> <span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">}</span><span class="sc">;</span></li><li></li><li>  <span class="i">can_ok</span><span class="s">(</span><span class="i">$module</span><span class="cm">,</span> <span class="i">@methods</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">isa_ok</span><span class="s">(</span><span class="i">$object</span><span class="cm">,</span> <span class="i">$class</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pass</span><span class="s">(</span><span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">fail</span><span class="s">(</span><span class="i">$test_name</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">BAIL_OUT</span><span class="s">(</span><span class="i">$why</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># UNIMPLEMENTED!!!</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@status</span> = <span class="w">Test::More::status</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test/More.html
$' (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The string following whatever was matched by the last successful pattern match (not counting any matches hidden within a BLOCK or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code> enclosed by the current BLOCK).  Example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="q">&#39;abcdefghi&#39;</span><span class="sc">;</span></li><li>    <span class="q">/def/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$`:$&amp;:$&#39;\\n&quot;</span><span class="sc">;</span>  &#09;<span class="c"># prints abc:def:ghi</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above for the serious performance implications of using this variable (even once) in your code.</p><p>This variable is read-only and dynamically-scoped.</p><p>Mnemonic: <code class="inline">&#39;</code> often follows a quoted string.</p></section>	http://perldoc.perl.org/perlvar.html#%24'
panic: unimplemented op %s (#%d) called	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler is screwed up and attempted to use an op that isn&#39;t permitted at run time.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-unimplemented-op-%25s-(%23%25d)-called
IPA (definition)	A			Perl Glossary							<section class="prog__container"><p>India Pale Ale. Also the International Phonetic Alphabet, the standard alphabet used for phonetic notation worldwide. Draws heavily on Unicode, including many combining characters.</p></section>	http://perldoc.perl.org/perlglossary.html#IPA
Found = in conditional, should be ==	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You said</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$foo</span> = <span class="n">123</span><span class="s">)</span></li></ol></pre><p>when you meant</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$foo</span> == <span class="n">123</span><span class="s">)</span></li></ol></pre><p>(or something like that).</p></section>	http://perldoc.perl.org/perldiag.html#Found-%3d-in-conditional%2c-should-be-%3d%3d
gdbm store returned %d, errno %d, key "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning from the GDBM_File extension that a store failed.</p></section>	http://perldoc.perl.org/perldiag.html#gdbm-store-returned-%25d%2c-errno-%25d%2c-key-%22%25s%22
How often are new versions of Perl released?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Recently, the plan has been to release a new version of Perl roughly every April, but getting the release right is more important than sticking rigidly to a calendar date, so the release date is somewhat flexible.  The historical release dates can be viewed at <span href="http://www.cpan.org/src/README.html">http://www.cpan.org/src/README.html</span>.</p><p>Even numbered minor versions (5.14, 5.16, 5.18) are production versions, and odd numbered minor versions (5.15, 5.17, 5.19) are development versions. Unless you want to try out an experimental feature, you probably never want to install a development version of Perl.</p><p>The Perl development team are called Perl 5 Porters, and their organization is described at <span href="http://perldoc.perl.org/perlpolicy.html">http://perldoc.perl.org/perlpolicy.html</span>. The organizational rules really just boil down to one: Larry is always right, even when he was wrong.</p></section>	http://perldoc.perl.org/perlfaq1.html#How-often-are-new-versions-of-Perl-released%3f
backward compatibility (definition)	A			Perl Glossary							<section class="prog__container"><p>Means you can still run your old program because we didn’t break any of the features or bugs it was relying on.</p></section>	http://perldoc.perl.org/perlglossary.html#backward-compatibility
ioctl (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>ioctl FILEHANDLE,FUNCTION,SCALAR</pre><p>Implements the ioctl(2) function.  You&#39;ll probably first have to say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&quot;sys/ioctl.ph&quot;</span><span class="sc">;</span>  <span class="c"># probably in</span></li><li>                             <span class="c"># $Config{archlib}/sys/ioctl.ph</span></li></ol></pre><p>to get the correct function definitions.  If <i>sys/ioctl.ph</i> doesn&#39;t exist or doesn&#39;t have the correct definitions you&#39;ll have to roll your own, based on your C header files such as <i>&lt;sys/ioctl.h&gt;</i>. (There is a Perl script called <b>h2ph</b> that comes with the Perl kit that may help you in this, but it&#39;s nontrivial.)  SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code> call.  (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value.  To guarantee this to be true, add a <code class="inline"><span class="n">0</span></code>  to the scalar before using it.)  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> functions may be needed to manipulate the values of structures used by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code>.</p><p>The return value of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span></code> (and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fcntl.html">fcntl</span></code>) is as follows:</p><pre class="verbatim"><ol><li>    if OS returns:      then Perl returns:</li><li>        -1               undefined value</li><li>         0              string &quot;0 but true&quot;</li><li>    anything else           that number</li></ol></pre><p>Thus Perl returns true on success and false on failure, yet you can still easily determine the actual value returned by the operating system:</p><pre class="verbatim"><ol><li>    <span class="i">$retval</span> = <span class="l_k" href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span><span class="s">(</span>...<span class="s">)</span> || <span class="n">-1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;System returned %d\\n&quot;</span><span class="cm">,</span> <span class="i">$retval</span><span class="sc">;</span></li></ol></pre><p>The special string <code class="inline"><span class="q">&quot;0 but true&quot;</span></code>  is exempt from <b>-w</b> complaints about improper numeric conversions.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#ioctl">ioctl in perlport</span>.</p></section>	http://perldoc.perl.org/functions/ioctl.html
How do I efficiently match many regular expressions at once?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you have Perl 5.10 or later, this is almost trivial. You just smart match against an array of regular expression objects:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@patterns</span> = <span class="s">(</span> <span class="q">qr/Fr.d/</span><span class="cm">,</span> <span class="q">qr/B.rn.y/</span><span class="cm">,</span> <span class="q">qr/W.lm./</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$string</span> ~~ <span class="i">@patterns</span> <span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>The smart match stops when it finds a match, so it doesn&#39;t have to try every expression.</p><p>Earlier than Perl 5.10, you have a bit of work to do. You want to avoid compiling a regular expression every time you want to match it. In this example, perl must recompile the regular expression for every iteration of the <code class="inline">foreach</code>  loop since it has no way to know what <code class="inline"><span class="i">$pattern</span></code>  will be:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@patterns</span> = <span class="q">qw( foo bar baz )</span><span class="sc">;</span></li><li></li><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;DATA&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$pattern</span> <span class="s">(</span> <span class="i">@patterns</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="q">/\\b$pattern\\b/i</span> <span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">LINE</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr//</span></code> operator showed up in perl 5.005. It compiles a regular expression, but doesn&#39;t apply it. When you use the pre-compiled version of the regex, perl does less work. In this example, I inserted a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> to turn each pattern into its pre-compiled form. The rest of the script is the same, but faster:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@patterns</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="q">qr/\\b$_\\b/i</span> <span class="s">}</span> <span class="q">qw( foo bar baz )</span><span class="sc">;</span></li><li></li><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$pattern</span> <span class="s">(</span> <span class="i">@patterns</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="q">/$pattern/</span> <span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">LINE</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>In some cases, you may be able to make several patterns into a single regular expression. Beware of situations that require backtracking though.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&#39;|&#39;</span><span class="cm">,</span> <span class="q">qw( foo bar baz )</span><span class="sc">;</span></li><li></li><li>    <span class="j">LINE:</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/\\b(?:$regex)\\b/i</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>For more details on regular expression efficiency, see <i>Mastering Regular Expressions</i> by Jeffrey Friedl. He explains how the regular expressions engine works and why some patterns are surprisingly inefficient. Once you understand how perl applies regular expressions, you can tune them for individual situations.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-efficiently-match-many-regular-expressions-at-once%3f
Binary "ge" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;ge&quot; returns true if the left argument is stringwise greater than or equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
atan2 (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>atan2 Y,X</pre><p>Returns the arctangent of Y/X in the range -PI to PI.</p><p>For the tangent operation, you may use the <code class="inline"><span class="w">Math::Trig::tan</span></code>  function, or use the familiar relation:</p><pre class="verbatim"><ol><li><span name="tan"></span>    sub <span class="m">tan</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/sin.html">sin</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span> / <span class="l_k" href="http://perldoc.perl.org/functions/cos.html">cos</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span>  <span class="s">}</span></li></ol></pre><p>The return value for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/atan2.html">atan2(0,0)</span></code> is implementation-defined; consult your atan2(3) manpage for more information.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#atan2">atan2 in perlport</span>.</p></section>	http://perldoc.perl.org/functions/atan2.html
How do I find yesterday's date?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>To do it correctly, you can use one of the <code class="inline"><span class="w">Date</span></code>  modules since they work with calendars instead of times. The <span href="http://search.cpan.org/perldoc/DateTime">DateTime</span> module makes it simple, and give you the same time of day, only the day before, despite daylight saving time changes:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DateTime</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$yesterday</span> = <span class="w">DateTime</span><span class="w">-&gt;now</span><span class="w">-&gt;subtract</span><span class="s">(</span> <span class="w">days</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Yesterday was $yesterday\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>You can also use the <span href="http://search.cpan.org/perldoc/Date::Calc">Date::Calc</span> module using its <code class="inline"><span class="w">Today_and_Now</span></code>  function.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Date::Calc</span> <span class="q">qw( Today_and_Now Add_Delta_DHMS )</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@date_time</span> = <span class="i">Add_Delta_DHMS</span><span class="s">(</span> <span class="i">Today_and_Now</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span> <span class="n">-1</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;@date_time\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Most people try to use the time rather than the calendar to figure out dates, but that assumes that days are twenty-four hours each. For most people, there are two days a year when they aren&#39;t: the switch to and from summer time throws this off. For example, the rest of the suggestions will be wrong sometimes:</p><p>Starting with Perl 5.10, <span href="http://perldoc.perl.org/Time/Piece.html">Time::Piece</span> and <span href="http://perldoc.perl.org/Time/Seconds.html">Time::Seconds</span> are part of the standard distribution, so you might think that you could do something like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Piece</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Seconds</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$yesterday</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span><span class="s">)</span> - <span class="w">ONE_DAY</span><span class="sc">;</span> <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Yesterday was $yesterday\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/Time/Piece.html">Time::Piece</span> module exports a new <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> that returns an object, and <span href="http://perldoc.perl.org/Time/Seconds.html">Time::Seconds</span> exports the <code class="inline"><span class="w">ONE_DAY</span></code>  constant that is a set number of seconds. This means that it always gives the time 24 hours ago, which is not always yesterday. This can cause problems around the end of daylight saving time when there&#39;s one day that is 25 hours long.</p><p>You have the same problem with <span href="http://perldoc.perl.org/Time/Local.html">Time::Local</span>, which will give the wrong answer for those same special cases:</p><pre class="verbatim"><ol><li>    <span class="c"># contributed by Gunnar Hjalmarsson</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Local</span><span class="sc">;</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$today</span> = <span class="w">timelocal</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span> <span class="s">)</span>[<span class="n">3</span>..<span class="n">5</span>]<span class="sc">;</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$d</span><span class="cm">,</span> <span class="i">$m</span><span class="cm">,</span> <span class="i">$y</span><span class="s">)</span> = <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span> <span class="i">$today</span>-<span class="n">86400</span> <span class="s">)</span>[<span class="n">3</span>..<span class="n">5</span>]<span class="sc">;</span> <span class="c"># WRONG</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;Yesterday: %d-%02d-%02d\\n&quot;</span><span class="cm">,</span> <span class="i">$y</span>+<span class="n">1900</span><span class="cm">,</span> <span class="i">$m</span>+<span class="n">1</span><span class="cm">,</span> <span class="i">$d</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-yesterday's-date%3f
Text::Abbrev (module)	A			Perl Standard Modules							<section class="prog__container"><p>Text::Abbrev - abbrev - create an abbreviation table from a list</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Abbrev</span><span class="sc">;</span></li><li>    <span class="w">abbrev</span> <span class="i">$hashref</span><span class="cm">,</span> <span class="w">LIST</span></li></ol></pre></section>	http://perldoc.perl.org/Text/Abbrev.html
Illegal binary digit %s ignored	A			Perl Diagnostics							<section class="prog__container"><p>(W digit) You may have tried to use a digit other than 0 or 1 in a binary number.  Interpretation of the binary number stopped before the offending digit.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-binary-digit-%25s-ignored
Binary "gt" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;gt&quot; returns true if the left argument is stringwise greater than the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
mojibake (definition)	A			Perl Glossary							<section class="prog__container"><p>When you speak one language and the computer thinks you’re speaking another. You’ll see odd translations when you send UTF‑8, for instance, but the computer thinks you sent Latin-1, showing all sorts of weird characters instead. The term is written 「文字化け」in Japanese and means “character rot”, an apt description. Pronounced [<code class="inline"><span class="w">modʑibake</span></code> ] in standard <b>IPA</b> phonetics, or approximately “moh-jee-bah-keh”.</p></section>	http://perldoc.perl.org/perlglossary.html#mojibake
NEXT (module)	A			Perl Standard Modules							<section class="prog__container"><p>NEXT.pm - Provide a pseudo-class NEXT (et al) that allows method redispatch</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">NEXT</span><span class="sc">;</span></li><li></li><li><span name="package-A"></span>    package <span class="i">A</span><span class="sc">;</span></li><li><span name="A::method"></span>    sub <span class="m">A::method</span>   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: A method\\n&quot;</span><span class="sc">;</span>   <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::method</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="A::DESTROY"></span>    sub <span class="m">A::DESTROY</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: A dtor\\n&quot;</span><span class="sc">;</span>     <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::DESTROY</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li></li><li><span name="package-B"></span>    package <span class="i">B</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">qw( A )</span><span class="sc">;</span></li><li><span name="B::AUTOLOAD"></span>    sub <span class="m">B::AUTOLOAD</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: B AUTOLOAD\\n&quot;</span><span class="sc">;</span> <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::AUTOLOAD</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="B::DESTROY"></span>    sub <span class="m">B::DESTROY</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: B dtor\\n&quot;</span><span class="sc">;</span>     <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::DESTROY</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li></li><li><span name="package-C"></span>    package <span class="i">C</span><span class="sc">;</span></li><li><span name="C::method"></span>    sub <span class="m">C::method</span>   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: C method\\n&quot;</span><span class="sc">;</span>   <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::method</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="C::AUTOLOAD"></span>    sub <span class="m">C::AUTOLOAD</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: C AUTOLOAD\\n&quot;</span><span class="sc">;</span> <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::AUTOLOAD</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="C::DESTROY"></span>    sub <span class="m">C::DESTROY</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: C dtor\\n&quot;</span><span class="sc">;</span>     <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::DESTROY</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li></li><li><span name="package-D"></span>    package <span class="i">D</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">qw( B C )</span><span class="sc">;</span></li><li><span name="D::method"></span>    sub <span class="m">D::method</span>   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: D method\\n&quot;</span><span class="sc">;</span>   <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::method</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="D::AUTOLOAD"></span>    sub <span class="m">D::AUTOLOAD</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: D AUTOLOAD\\n&quot;</span><span class="sc">;</span> <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::AUTOLOAD</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li><span name="D::DESTROY"></span>    sub <span class="m">D::DESTROY</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_[0]: D dtor\\n&quot;</span><span class="sc">;</span>     <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;NEXT::DESTROY</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$obj</span> = <span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> <span class="s">{</span><span class="s">}</span><span class="cm">,</span> <span class="q">&quot;D&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$obj</span><span class="i">-&gt;method</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># Calls D::method, A::method, C::method</span></li><li>    <span class="i">$obj</span><span class="i">-&gt;missing_method</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Calls D::AUTOLOAD, B::AUTOLOAD, C::AUTOLOAD</span></li><li></li><li>    <span class="c"># Clean-up calls D::DESTROY, B::DESTROY, A::DESTROY, C::DESTROY</span></li></ol></pre></section>	http://perldoc.perl.org/NEXT.html
use (function)	A			Perl Functions\nPerl Keywords altering or affecting scoping of identifiers\nPerl Keywords related to perl modules\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>use Module VERSION LIST<br>use Module VERSION<br>use Module LIST<br>use Module<br>use VERSION</pre><p>Imports some semantics into the current package from the named module, generally by aliasing certain subroutine or variable names into your package.  It is exactly equivalent to</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Module</span><span class="sc">;</span> <span class="w">Module</span><span class="w">-&gt;import</span><span class="s">(</span> <span class="w">LIST</span> <span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre><p>except that Module <i>must</i> be a bareword. The importation can be made conditional by using the <span href="http://perldoc.perl.org/if.html">if</span> module.</p><p>In the peculiar <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  form, VERSION may be either a positive decimal fraction such as 5.006, which will be compared to <code class="inline"><span class="i">$]</span></code> , or a v-string of the form v5.6.1, which will be compared to <code class="inline"><span class="i">$^V</span></code>  (aka $PERL_VERSION).  An exception is raised if VERSION is greater than the version of the current Perl interpreter; Perl will not attempt to parse the rest of the file.  Compare with <span href="http://perldoc.perl.org/functions/require.html">require</span>, which can do a similar check at run time. Symmetrically, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">VERSION</span></code>  allows you to specify that you want a version of Perl older than the specified one.</p><p>Specifying VERSION as a literal of the form v5.6.1 should generally be avoided, because it leads to misleading error messages under earlier versions of Perl (that is, prior to 5.6.0) that do not support this syntax.  The equivalent numeric version should be used instead.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.6.1</span><span class="sc">;</span>     <span class="c"># compile time version check</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">5.6.1</span><span class="sc">;</span>      <span class="c"># ditto</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.006_001</span><span class="sc">;</span>  <span class="c"># ditto; preferred for backwards compatibility</span></li></ol></pre><p>This is often useful if you need to check the current Perl version before <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code>ing library modules that won&#39;t work with older versions of Perl. (We try not to do this more than we have to.)</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  also lexically enables all features available in the requested version as defined by the <code class="inline"><span class="w">feature</span></code>  pragma, disabling any features not in the requested version&#39;s feature bundle.  See <span href="http://perldoc.perl.org/feature.html">feature</span>. Similarly, if the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code> .  Any explicit use of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">strict</span></code>  overrides <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code> , even if it comes before it.  Later use of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  will override all behavior of a previous <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code> , possibly removing the <code class="inline"><span class="w">strict</span></code>  and <code class="inline"><span class="w">feature</span></code>  added by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code> .  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  does not load the <i>feature.pm</i> or <i>strict.pm</i> files.</p><p>The <code class="inline">BEGIN</code>  forces the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> to happen at compile time.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> makes sure the module is loaded into memory if it hasn&#39;t been yet.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> is not a builtin; it&#39;s just an ordinary static method call into the <code class="inline"><span class="w">Module</span></code>  package to tell the module to import the list of features back into the current package.  The module can implement its <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method any way it likes, though most modules just choose to derive their <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method via inheritance from the <code class="inline"><span class="w">Exporter</span></code>  class that is defined in the <code class="inline"><span class="w">Exporter</span></code>  module.  See <span href="http://perldoc.perl.org/Exporter.html">Exporter</span>.  If no <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method can be found then the call is skipped, even if there is an AUTOLOAD method.</p><p>If you do not want to call the package&#39;s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method (for instance, to stop your namespace from being altered), explicitly supply the empty list:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>That is exactly equivalent to</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Module</span> <span class="s">}</span></li></ol></pre><p>If the VERSION argument is present between Module and LIST, then the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> will call the VERSION method in class Module with the given version as an argument.  The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable <code class="inline"><span class="i">$Module::VERSION</span></code> .</p><p>Again, there is a distinction between omitting LIST (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> called with no arguments) and an explicit empty LIST <code class="inline"><span class="s">(</span><span class="s">)</span></code>  (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> not called).  Note that there is no comma after VERSION!</p><p>Because this is a wide-open interface, pragmas (compiler directives) are also implemented this way.  Currently implemented pragmas are:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">constant</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">diagnostics</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">integer</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">sigtrap</span>  <span class="q">qw(SEGV BUS)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span>   <span class="q">qw(subs vars refs)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">subs</span>     <span class="q">qw(afunc blurfl)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span> <span class="q">qw(all)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span>     <span class="q">qw(stable _quicksort _mergesort)</span><span class="sc">;</span></li></ol></pre><p>Some of these pseudo-modules import semantics into the current block scope (like <code class="inline"><span class="w">strict</span></code>  or <code class="inline"><span class="w">integer</span></code> , unlike ordinary modules, which import symbols into the current package (which are effective through the end of the file).</p><p>Because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> takes effect at compile time, it doesn&#39;t respect the ordinary flow control of the code being compiled.  In particular, putting a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> inside the false branch of a conditional doesn&#39;t prevent it from being processed.  If a module or pragma only needs to be loaded  conditionally, this can be done using the <span href="http://perldoc.perl.org/if.html">if</span> pragma:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> if <span class="i">$]</span> &lt; <span class="n">5.008</span><span class="cm">,</span> <span class="q">&quot;utf8&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> if <span class="w">WANT_WARNINGS</span><span class="cm">,</span> <span class="w">warnings</span> <span class="cm">=&gt;</span> <span class="q">qw(all)</span><span class="sc">;</span></li></ol></pre><p>There&#39;s a corresponding <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span></code> declaration that unimports meanings imported by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code>, i.e., it calls <code class="inline"><span class="w">unimport</span> <span class="w">Module</span> <span class="w">LIST</span></code>  instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code>. It behaves just as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> does with VERSION, an omitted or empty LIST,  or no unimport method being found.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">integer</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">strict</span> <span class="q">&#39;refs&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span><span class="sc">;</span></li></ol></pre><p>Care should be taken when using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">VERSION</span></code>  form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span></code>.  It is <i>only</i> meant to be used to assert that the running Perl is of a earlier version than its argument and <i>not</i> to undo the feature-enabling side effects of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code> .</p><p>See <span href="http://perldoc.perl.org/perlmodlib.html">perlmodlib</span> for a list of standard modules and pragmas.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for the <code class="inline">-M</code>  and <code class="inline">-m</code> command-line options to Perl that give <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> functionality from the command-line.</p></section>	http://perldoc.perl.org/functions/use.html
How can I copy a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Use the <span href="http://perldoc.perl.org/File/Copy.html">File::Copy</span> module. It comes with Perl and can do a true copy across file systems, and it does its magic in a portable fashion.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Copy</span><span class="sc">;</span></li><li></li><li>    <span class="i">copy</span><span class="s">(</span> <span class="i">$original</span><span class="cm">,</span> <span class="i">$new_copy</span> <span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Copy failed: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>If you can&#39;t use <span href="http://perldoc.perl.org/File/Copy.html">File::Copy</span>, you&#39;ll have to do the work yourself: open the original file, open the destination file, then print to the destination file as you read the original. You also have to remember to copy the permissions, owner, and group to the new file.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-copy-a-file%3f
How do I sort an array by (anything)?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Supply a comparison function to sort() (described in <span href="http://perldoc.perl.org/functions/sort.html">sort</span>):</p><pre class="verbatim"><ol><li>    <span class="i">@list</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$a</span> &lt;=&gt; <span class="i">$b</span> <span class="s">}</span> <span class="i">@list</span><span class="sc">;</span></li></ol></pre><p>The default sort function is cmp, string comparison, which would sort <code class="inline"><span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">10</span><span class="s">)</span></code>  into <code class="inline"><span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="n">10</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span></code> . <code class="inline">&lt;=&gt;</code> , used above, is the numerical comparison operator.</p><p>If you have a complicated function needed to pull out the part you want to sort on, then don&#39;t do it inside the sort function. Pull it out first, because the sort BLOCK can be called many times for the same element. Here&#39;s an example of how to pull out the first word after the first number on each item, and then sort those words case-insensitively.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@idx</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@data</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$item</span><span class="sc">;</span></li><li>        <span class="s">(</span><span class="i">$item</span><span class="s">)</span> = <span class="q">/\\d+\\s*(\\S+)/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@idx</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="i">$item</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sorted</span> = <span class="i">@data</span>[ <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$idx</span>[<span class="i">$a</span>] <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$idx</span>[<span class="i">$b</span>] <span class="s">}</span> <span class="n">0</span> .. <span class="i">$#idx</span> ]<span class="sc">;</span></li></ol></pre><p>which could also be written this way, using a trick that&#39;s come to be known as the Schwartzian Transform:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sorted</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span>  <span class="s">{</span> <span class="i">$_</span>-&gt;[<span class="n">0</span>] <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$a</span>-&gt;[<span class="n">1</span>] <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$b</span>-&gt;[<span class="n">1</span>] <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span>  <span class="s">{</span> <span class="s">[</span> <span class="i">$_</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span> <span class="s">(</span><span class="q">/\\d+\\s*(\\S+)/</span><span class="s">)</span>[<span class="n">0</span>]<span class="s">)</span> <span class="s">]</span> <span class="s">}</span> <span class="i">@data</span><span class="sc">;</span></li></ol></pre><p>If you need to sort on several fields, the following paradigm is useful.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sorted</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span></li><li>        <span class="i">field1</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span> &lt;=&gt; <span class="i">field1</span><span class="s">(</span><span class="i">$b</span><span class="s">)</span> ||</li><li>        <span class="i">field2</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">field2</span><span class="s">(</span><span class="i">$b</span><span class="s">)</span> ||</li><li>        <span class="i">field3</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">field3</span><span class="s">(</span><span class="i">$b</span><span class="s">)</span></li><li>    <span class="s">}</span> <span class="i">@data</span><span class="sc">;</span></li></ol></pre><p>This can be conveniently combined with precalculation of keys as given above.</p><p>See the <i>sort</i> article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in <span href="http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz">http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz</span> for more about this approach.</p><p>See also the question later in <span href="http://perldoc.perl.org/perlfaq4.html">perlfaq4</span> on sorting hashes.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-sort-an-array-by-(anything)%3f
text (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>string</b> or <b>file</b> containing primarily printable characters.</p></section>	http://perldoc.perl.org/perlglossary.html#text
Who supports Perl? Who develops it? Why is it free?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>The original culture of the pre-populist Internet and the deeply-held beliefs of Perl&#39;s author, Larry Wall, gave rise to the free and open distribution policy of Perl. Perl is supported by its users. The core, the standard Perl library, the optional modules, and the documentation you&#39;re reading now were all written by volunteers.</p><p>The core development team (known as the Perl Porters) are a group of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via the <span href="http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f">archives</span> or read the <span href="http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html">faq</span>, or you can subscribe to the mailing list by sending perl5-porters-subscribe@perl.org a subscription request (an empty message with no subject is fine).</p><p>While the GNU project includes Perl in its distributions, there&#39;s no such thing as &quot;GNU Perl&quot;. Perl is not produced nor maintained by the Free Software Foundation. Perl&#39;s licensing terms are also more open than GNU software&#39;s tend to be.</p><p>You can get commercial support of Perl if you wish, although for most users the informal support will more than suffice. See the answer to &quot;Where can I buy a commercial version of Perl?&quot; for more information.</p></section>	http://perldoc.perl.org/perlfaq1.html#Who-supports-Perl%3f-Who-develops-it%3f-Why-is-it-free%3f
perl: warning: Setting locale failed.	A			Perl Diagnostics							<section class="prog__container"><p>(S) The whole warning message will look something like:</p><pre class="verbatim"><ol><li>&#09;perl: warning: Setting locale failed.</li><li>&#09;perl: warning: Please check that your locale settings:</li><li>&#09;        LC_ALL = &quot;En_US&quot;,</li><li>&#09;        LANG = (unset)</li><li>&#09;    are supported and installed on your system.</li><li>&#09;perl: warning: Falling back to the standard locale (&quot;C&quot;).</li></ol></pre><p>Exactly what were the failed locale settings varies.  In the above the settings were that the LC_ALL was &quot;En_US&quot; and the LANG had no value. This error means that Perl detected that you and/or your operating system supplier and/or system administrator have set up the so-called locale system but Perl could not use those settings.  This was not dead serious, fortunately: there is a &quot;default locale&quot; called &quot;C&quot; that Perl can and will use, and the script will be run.  Before you really fix the problem, however, you will get the same error message each time you run Perl.  How to really fix the problem can be found in <span href="http://perldoc.perl.org/perllocale.html">perllocale</span> section <b>LOCALE PROBLEMS</b>.</p></section>	http://perldoc.perl.org/perldiag.html#perl%3a-warning%3a-Setting-locale-failed.
panic: ck_grep, type=%u	A			Perl Diagnostics							<section class="prog__container"><p>(P) Failed an internal consistency check trying to compile a grep.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-ck_grep%2c-type%3d%25u
read() on unopened filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to read from a filehandle that was never opened.</p></section>	http://perldoc.perl.org/perldiag.html#read()-on-unopened-filehandle-%25s
%sseek() on unopened filehandle	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to use the seek() or sysseek() function on a filehandle that was either never opened or has since been closed.</p></section>	http://perldoc.perl.org/perldiag.html#%25sseek()-on-unopened-filehandle
ExtUtils::MM_QNX (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_QNX - QNX specific subclass of ExtUtils::MM_Unix</p> <pre class="verbatim"><ol><li>  <span class="w">Don&#39;t</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li><li>  <span class="w">Use</span> <span class="w">ExtUtils::MM</span> and <span class="w">let</span> <span class="w">it</span> <span class="w">choose</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_QNX.html
File::Spec::Epoc (module)	A			Perl Standard Modules		[[File::Spec]]\n[[File::Spec::Unix]]					<section class="prog__container"><p>File::Spec::Epoc - methods for Epoc file specs</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::Epoc</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Epoc.html
localtime(%f) too large	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> with a number that was larger than it can reliably handle and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> probably returned the wrong date.  This warning is also triggered with NaN (the special not-a-number value).</p></section>	http://perldoc.perl.org/perldiag.html#localtime(%25f)-too-large
How do I check a valid mail address?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>(partly contributed by Aaron Sherman)</p><p>This isn&#39;t as simple a question as it sounds. There are two parts:</p><p>a) How do I verify that an email address is correctly formatted?</p><p>b) How do I verify that an email address targets a valid recipient?</p><p>Without sending mail to the address and seeing whether there&#39;s a human on the other end to answer you, you cannot fully answer part <i>b</i>, but the <span href="http://search.cpan.org/perldoc/Email::Valid">Email::Valid</span> module will do both part <i>a</i> and part <i>b</i> as far as you can in real-time.</p><p>Our best advice for verifying a person&#39;s mail address is to have them enter their address twice, just as you normally do to change a password. This usually weeds out typos. If both versions match, send mail to that address with a personal message. If you get the message back and they&#39;ve followed your directions, you can be reasonably assured that it&#39;s real.</p><p>A related strategy that&#39;s less open to forgery is to give them a PIN (personal ID number). Record the address and PIN (best that it be a random one) for later processing. In the mail you send, include a link to your site with the PIN included. If the mail bounces, you know it&#39;s not valid. If they don&#39;t click on the link, either they forged the address or (assuming they got the message) following through wasn&#39;t important so you don&#39;t need to worry about it.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-check-a-valid-mail-address%3f
leftmost longest (definition)	A			Perl Glossary							<section class="prog__container"><p>The preference of the <b>regular expression</b> engine to match the leftmost occurrence of a <b>pattern</b>, then given a position at which a match will occur, the preference for the longest match (presuming the use of a <b>greedy</b> quantifier). See Camel chapter 5, “Pattern Matching” for <i>much</i> more on this subject.</p></section>	http://perldoc.perl.org/perlglossary.html#leftmost-longest
Don't know how to get file name	A			Perl Diagnostics							<section class="prog__container"><p>(P) <code class="inline"><span class="w">PerlIO_getname</span></code> , a perl internal I/O function specific to VMS, was somehow called on another platform.  This should not happen.</p></section>	http://perldoc.perl.org/perldiag.html#Don't-know-how-to-get-file-name
TAP::Parser::Result::YAML (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Result::YAML - YAML result token.</p> </section>	http://perldoc.perl.org/TAP/Parser/Result/YAML.html
Unsupported script encoding %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your program file begins with a Unicode Byte Order Mark (BOM) which declares it to be in a Unicode encoding that Perl cannot read.</p></section>	http://perldoc.perl.org/perldiag.html#Unsupported-script-encoding-%25s
Why doesn't glob("*.*") get all the files?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Because even on non-Unix ports, Perl&#39;s glob function follows standard Unix globbing semantics. You&#39;ll need <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob(&quot;*&quot;)</span></code> to get all (non-hidden) files. This makes glob() portable even to legacy systems. Your port may include proprietary globbing functions as well. Check its documentation for details.</p></section>	http://perldoc.perl.org/perlfaq5.html#Why-doesn't-glob(%22*.*%22)-get-all-the-files%3f
operator overloading (definition)	A			Perl Glossary							<section class="prog__container"><p>A kind of <b>overloading</b> that you can do on built-in <b>operators</b> to make them work on <b>objects</b> as if the objects were ordinary scalar values, but with the actual semantics supplied by the object class. This is set up with the overload <b>pragma</b>—see Camel chapter 13, “Overloading”.</p></section>	http://perldoc.perl.org/perlglossary.html#operator-overloading
Possible precedence issue with control flow operator	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) There is a possible problem with the mixing of a control flow operator (e.g. <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span></code>) and a low-precedence operator like <code class="inline">or</code> .  Consider:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$a</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="i">$b</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre><p>This is parsed as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$a</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="i">$b</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre><p>Which is effectively just:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$a</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre><p>Either use parentheses or the high-precedence variant of the operator.</p><p>Note this may be also triggered for constructs like:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Possible-precedence-issue-with-control-flow-operator
Exporter (module)	A			Perl Standard Modules							<section class="prog__container"><p>Exporter - Implements default import method for modules</p> <p>In module <i>YourModule.pm</i>:</p><pre class="verbatim"><ol><li><span name="package-YourModule"></span>  package <span class="i">YourModule</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Exporter</span><span class="sc">;</span></li><li>  <span class="i">@ISA</span> = <span class="q">qw(Exporter)</span><span class="sc">;</span></li><li>  <span class="i">@EXPORT_OK</span> = <span class="q">qw(munge frobnicate)</span><span class="sc">;</span>  <span class="c"># symbols to export on request</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li><span name="package-YourModule"></span>  package <span class="i">YourModule</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Exporter</span> <span class="q">&#39;import&#39;</span><span class="sc">;</span> <span class="c"># gives you Exporter&#39;s import() method directly</span></li><li>  <span class="i">@EXPORT_OK</span> = <span class="q">qw(munge frobnicate)</span><span class="sc">;</span>  <span class="c"># symbols to export on request</span></li></ol></pre><p>In other files which wish to use <code class="inline"><span class="w">YourModule</span></code> :</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">YourModule</span> <span class="q">qw(frobnicate)</span><span class="sc">;</span>      <span class="c"># import listed symbols</span></li><li>  <span class="w">frobnicate</span> <span class="s">(</span><span class="i">$left</span><span class="cm">,</span> <span class="i">$right</span><span class="s">)</span>          <span class="c"># calls YourModule::frobnicate</span></li></ol></pre><p>Take a look at <span href="http://perldoc.perl.org/Exporter.html#Good-Practices">Good Practices</span> for some variants you will like to use in modern Perl code.</p></section>	http://perldoc.perl.org/Exporter.html
pad (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for <b>scratchpad</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#pad
Aliasing via reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::refaliasing) This warning is emitted if you use a reference constructor on the left-hand side of an assignment to alias one variable to another.  Simply suppress the warning if you want to use the feature, but know that in doing so you are taking the risk of using an experimental feature which may change or be removed in a future Perl version:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::refaliasing&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;refaliasing&quot;</span><span class="sc">;</span></li><li>    \\<span class="i">$x</span> = \\<span class="i">$y</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Aliasing-via-reference-is-experimental
comment (definition)	A			Perl Glossary							<section class="prog__container"><p>A remark that doesn’t affect the meaning of the program. In Perl, a comment is introduced by a <code class="inline"><span class="c">#</span></code>  character and continues to the end of the line.</p></section>	http://perldoc.perl.org/perlglossary.html#comment
I18N::Collate (module)	A			Perl Standard Modules							<section class="prog__container"><p>I18N::Collate - compare 8-bit scalar data according to the current locale</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::Collate</span><span class="sc">;</span></li><li>    <span class="i">setlocale</span><span class="s">(</span><span class="w">LC_COLLATE</span><span class="cm">,</span> <span class="q">&#39;locale-of-your-choice&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s1</span> = <span class="w">I18N::Collate</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;scalar_data_1&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s2</span> = <span class="w">I18N::Collate</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;scalar_data_2&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/I18N/Collate.html
values (function)	A			Perl Functions\nPerl Functions for real %HASHes							<section class="prog__container"><pre>values HASH<br>values ARRAY<br>values EXPR</pre><p>In list context, returns a list consisting of all the values of the named hash.  In Perl 5.12 or later only, will also return a list of the values of an array; prior to that release, attempting to use an array argument will produce a syntax error.  In scalar context, returns the number of values.</p><p>Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.  Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> may be deleted without changing the order.  So long as a given hash is unmodified you may rely on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> to repeatedly return the same order as each other.  See <span href="http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks">Algorithmic Complexity Attacks in perlsec</span> for details on why hash order is randomized.  Aside from the guarantees provided here the exact details of Perl&#39;s hash algorithm and the hash traversal order are subject to change in any release of Perl.  Tied hashes may behave differently to Perl&#39;s hashes with respect to changes in order on insertion and deletion of items.</p><p>As a side effect, calling values() resets the HASH or ARRAY&#39;s internal iterator, see <span href="http://perldoc.perl.org/functions/each.html">each</span>.  (In particular, calling values() in void context resets the iterator with no other overhead.  Apart from resetting the iterator, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">@array</span></code>  in list context is the same as plain <code class="inline"><span class="i">@array</span></code> . (We recommend that you use void context <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">@array</span></code>  for this, but reasoned that taking <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">@array</span></code>  out would require more documentation than leaving it in.)</p><p>Note that the values are not copied, which means modifying them will modify the contents of the hash:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%hash</span><span class="s">)</span>      <span class="s">{</span> <span class="q">s/foo/bar/g</span> <span class="s">}</span>  <span class="c"># modifies %hash values</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@hash</span>{<span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span>}<span class="s">)</span> <span class="s">{</span> <span class="q">s/foo/bar/g</span> <span class="s">}</span>  <span class="c"># same</span></li></ol></pre><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> can take a scalar EXPR, which must hold a reference to an unblessed hash or array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> is considered highly experimental.  The exact behaviour may change in a future version of Perl.</p><pre class="verbatim"><ol><li>    for <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">$hashref</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    for <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">$obj</span><span class="i">-&gt;get_arrayref</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.012</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on arrays</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on scalars (experimental)</span></li></ol></pre><p>See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>.</p></section>	http://perldoc.perl.org/functions/values.html
syntax tree (definition)	A			Perl Glossary							<section class="prog__container"><p>An internal representation of your program wherein lower-level <b>constructs</b> dangle off the higher-level constructs enclosing them.</p></section>	http://perldoc.perl.org/perlglossary.html#syntax-tree
Pod::Simple::Search (module)	A			Perl Standard Modules							<section class="prog__container"><p>Pod::Simple::Search - find POD documents in directory trees</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Simple::Search</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$name2path</span> = <span class="w">Pod::Simple::Search</span><span class="w">-&gt;new</span><span class="w">-&gt;limit_glob</span><span class="s">(</span><span class="q">&#39;LWP::*&#39;</span><span class="s">)</span><span class="i">-&gt;survey</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Looky see what I found: &quot;</span><span class="cm">,</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&#39; &#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%$name2path</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;LWPUA docs = &quot;</span><span class="cm">,</span></li><li>    <span class="w">Pod::Simple::Search</span><span class="w">-&gt;new</span><span class="w">-&gt;find</span><span class="s">(</span><span class="q">&#39;LWP::UserAgent&#39;</span><span class="s">)</span> || <span class="q">&quot;?&quot;</span><span class="cm">,</span></li><li>    <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/Search.html
$^E (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>Error information specific to the current operating system.  At the moment, this differs from <code class="inline"><span class="i">$!</span></code>  under only VMS, OS/2, and Win32 (and for MacPerl).  On all other platforms, <code class="inline"><span class="i">$^E</span></code>  is always just the same as <code class="inline"><span class="i">$!</span></code> .</p><p>Under VMS, <code class="inline"><span class="i">$^E</span></code>  provides the VMS status value from the last system error.  This is more specific information about the last system error than that provided by <code class="inline"><span class="i">$!</span></code> .  This is particularly important when <code class="inline"><span class="i">$!</span></code>  is set to <b>EVMSERR</b>.</p><p>Under OS/2, <code class="inline"><span class="i">$^E</span></code>  is set to the error code of the last call to OS/2 API either via CRT, or directly from perl.</p><p>Under Win32, <code class="inline"><span class="i">$^E</span></code>  always returns the last error information reported by the Win32 call <code class="inline"><span class="i">GetLastError</span><span class="s">(</span><span class="s">)</span></code>  which describes the last error from within the Win32 API.  Most Win32-specific code will report errors via <code class="inline"><span class="i">$^E</span></code> .  ANSI C and Unix-like calls set <code class="inline"><span class="w">errno</span></code>  and so most portable Perl code will report errors via <code class="inline"><span class="i">$!</span></code> .</p><p>Caveats mentioned in the description of <code class="inline"><span class="i">$!</span></code>  generally apply to <code class="inline"><span class="i">$^E</span></code> , also.</p><p>This variable was added in Perl 5.003.</p><p>Mnemonic: Extra error explanation.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eE
TAP::Parser::IteratorFactory (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::SourceHandler]]\n[[TAP::Parser::SourceHandler::File]]\n[[TAP::Parser::SourceHandler::Perl]]\n[[TAP::Parser::SourceHandler::RawTAP]]\n[[TAP::Parser::SourceHandler::Handle]]\n[[TAP::Parser::SourceHandler::Executable]]					<section class="prog__container"><p>TAP::Parser::IteratorFactory - Figures out which SourceHandler objects to use for a given Source</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::IteratorFactory</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$factory</span> = <span class="w">TAP::Parser::IteratorFactory</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">{</span> <span class="i">%config</span> <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$iterator</span>  = <span class="i">$factory</span><span class="i">-&gt;make_iterator</span><span class="s">(</span> <span class="i">$filename</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/IteratorFactory.html
When shouldn't I program in Perl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>One good reason is when you already have an existing application written in another language that&#39;s all done (and done well), or you have an application language specifically designed for a certain task (e.g. prolog, make).</p><p>If you find that you need to speed up a specific part of a Perl application (not something you often need) you may want to use C, but you can access this from your Perl code with <span href="http://perldoc.perl.org/perlxs.html">perlxs</span>.</p></section>	http://perldoc.perl.org/perlfaq1.html#When-shouldn't-I-program-in-Perl%3f
IV (definition)	A			Perl Glossary							<section class="prog__container"><p>The integer four, not to be confused with six, Tom’s favorite editor. IV also means an internal Integer Value of the type a <b>scalar</b> can hold, not to be confused with an <b>NV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#IV
What is a "wide character"?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>This is a term used for characters occupying more than one byte.</p><p>The Perl warning &quot;Wide character in ...&quot; is caused by such a character. With no specified encoding layer, Perl tries to fit things into a single byte.  When it can&#39;t, it emits this warning (if warnings are enabled), and uses UTF-8 encoded data instead.</p><p>To avoid this warning and to avoid having different output encodings in a single stream, always specify an encoding explicitly, for example with a PerlIO layer:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="w">STDOUT</span><span class="cm">,</span> <span class="q">&quot;:encoding(UTF-8)&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlunifaq.html#What-is-a-%22wide-character%22%3f
getpwuid (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getpwuid UID</pre>Get passwd record given user ID.</section>	http://perldoc.perl.org/functions/getpwuid.html
port (definition)	A			Perl Glossary							<section class="prog__container"><p>The part of the address of a TCP or UDP socket that directs packets to the correct process after finding the right machine, something like the phone extension you give when you reach the company operator. Also the result of converting code to run on a different platform than originally intended, or the verb denoting this conversion.</p></section>	http://perldoc.perl.org/perlglossary.html#port
statement modifier (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>conditional</b> or <b>loop</b> that you put after the <b>statement</b> instead of before, if you know what we mean.</p></section>	http://perldoc.perl.org/perlglossary.html#statement-modifier
qx (function)	A			Perl Functions							<section class="prog__container"><pre>qx/STRING/</pre><p>Generalized quotes.  See <span href="http://perldoc.perl.org/perlop.html#Quote-Like-Operators">Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/qx.html
-w	A			Perl Command-Line Switches							<section class="prog__container"><p>prints warnings about dubious constructs, such as variable names mentioned only once and scalar variables used before being set; redefined subroutines; references to undefined filehandles; filehandles opened read-only that you are attempting to write on; values used as a number that don&#39;t <i>look</i> like numbers; using an array as though it were a scalar; if your subroutines recurse more than 100 deep; and innumerable other things.</p><p>This switch really just enables the global <code class="inline"><span class="i">$^W</span></code>  variable; normally, the lexically scoped <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  pragma is preferred. You can disable or promote into fatal errors specific warnings using <code class="inline"><span class="w">__WARN__</span></code>  hooks, as described in <span href="http://perldoc.perl.org/perlvar.html">perlvar</span> and <span href="http://perldoc.perl.org/functions/warn.html">warn</span>. See also <span href="http://perldoc.perl.org/perldiag.html">perldiag</span> and <span href="http://perldoc.perl.org/perltrap.html">perltrap</span>.  A fine-grained warning facility is also available if you want to manipulate entire classes of warnings; see <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-w*
Identifier too long	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl limits identifiers (names for variables, functions, etc.) to about 250 characters for simple names, and somewhat more for compound names (like <code class="inline"><span class="i">$A::B</span></code> ).  You&#39;ve exceeded Perl&#39;s limits.  Future versions of Perl are likely to eliminate these arbitrary limitations.</p></section>	http://perldoc.perl.org/perldiag.html#Identifier-too-long
Can't return outside a subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) The return statement was executed in mainline code, that is, where there was no subroutine call to return out of.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-return-outside-a-subroutine
Pod::Simple::RTF (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[RTF::Writer]]\n[[RTF::Cookbook]]\n[[RTF::Document]]\n[[RTF::Generator]]					<section class="prog__container"><p>Pod::Simple::RTF -- format Pod as RTF</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::RTF</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::RTF-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span> &gt; <span class="w">thingy</span>.<span class="w">rtf</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/RTF.html
typeglob (definition)	A			Perl Glossary							<section class="prog__container"><p>Use of a single identifier, prefixed with <code class="inline"><span class="i">*</span></code> . For example, <code class="inline"><span class="i">*name</span></code>  stands for any or all of <code class="inline"><span class="i">$name</span></code> , <code class="inline"><span class="i">@name</span></code> , <code class="inline"><span class="i">%name</span></code> , <code class="inline"><span class="i">&amp;name</span></code> , or just <code class="inline"><span class="w">name</span></code> . How you use it determines whether it is interpreted as all or only one of them. See “Typeglobs and Filehandles” in Camel chapter 2, “Bits and Pieces”.</p></section>	http://perldoc.perl.org/perlglossary.html#typeglob
(Did you mean $ or @ instead of %?)	A			Perl Diagnostics							<section class="prog__container"><p>(W) You probably said %hash{$key} when you meant $hash{$key} or @hash{@keys}.  On the other hand, maybe you just meant %hash and got carried away.</p></section>	http://perldoc.perl.org/perldiag.html#(Did-you-mean-%24-or-%40-instead-of-%25%3f)
Basic BLOCKs	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>A BLOCK by itself (labeled or not) is semantically equivalent to a loop that executes once.  Thus you can use any of the loop control statements in it to leave or restart the block.  (Note that this is <i>NOT</i> true in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval{}</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub{}</span></code>, or contrary to popular belief <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do{}</span></code> blocks, which do <i>NOT</i> count as loops.)  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block is optional.</p><p>The BLOCK construct can be used to emulate case structures.</p><pre class="verbatim"><ol><li>    <span class="j">SWITCH:</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^abc/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$abc</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^def/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$def</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^xyz/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$xyz</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="i">$nothing</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>You&#39;ll also find that <code class="inline">foreach</code>  loop used to create a topicalizer and a switch:</p><pre class="verbatim"><ol><li>    <span class="j">SWITCH:</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$var</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^abc/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$abc</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^def/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$def</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="q">/^xyz/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$xyz</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="i">$nothing</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Such constructs are quite frequently used, both because older versions of Perl had no official <code class="inline">switch</code>  statement, and also because the new version described immediately below remains experimental and can sometimes be confusing.</p></section>	http://perldoc.perl.org/perlsyn.html#Basic-BLOCKs
How do I multiply matrices?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/Math::Matrix">Math::Matrix</span> or <span href="http://search.cpan.org/perldoc/Math::MatrixReal">Math::MatrixReal</span> modules (available from CPAN) or the <span href="http://search.cpan.org/perldoc/PDL">PDL</span> extension (also available from CPAN).</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-multiply-matrices%3f
Operation "%s" returns its argument for UTF-16 surrogate U+%X	A			Perl Diagnostics							<section class="prog__container"><p>(S surrogate) You performed an operation requiring Unicode rules on a Unicode surrogate.  Unicode frowns upon the use of surrogates for anything but storing strings in UTF-16, but rules are (reluctantly) defined for the surrogates, and they are to do nothing for this operation.  Because the use of surrogates can be dangerous, Perl warns.</p><p>If the operation shown is &quot;ToFold&quot;, it means that case-insensitive matching in a regular expression was done on the code point.</p><p>If you know what you are doing you can turn off this warning by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;surrogate&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Operation-%22%25s%22-returns-its-argument-for-UTF-16-surrogate-U%2b%25X
Attempt to free temp prematurely: SV 0x%x	A			Perl Diagnostics							<section class="prog__container"><p>(S debugging) Mortalized values are supposed to be freed by the free_tmps() routine.  This indicates that something else is freeing the SV before the free_tmps() routine gets a chance, which means that the free_tmps() routine will be freeing an unreferenced scalar when it does try to free it.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-free-temp-prematurely%3a-SV-0x%25x
${^RE_DEBUG_FLAGS} (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The current value of the regex debugging flags.  Set to 0 for no debug output even when the <code class="inline"><span class="w">re</span> <span class="q">&#39;debug&#39;</span></code>  module is loaded.  See <span href="http://perldoc.perl.org/re.html">re</span> for details.</p><p>This variable was added in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eRE_DEBUG_FLAGS%7d
method resolution order (definition)	A			Perl Glossary							<section class="prog__container"><p>The path Perl takes through <code class="inline"><span class="i">@INC</span></code> . By default, this is a double depth first search, once looking for defined methods and once for <code class="inline">AUTOLOAD</code> . However, Perl lets you configure this with <code class="inline"><span class="w">mro</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#method-resolution-order
Params::Check (module)	A			Perl Standard Modules							<section class="prog__container"><p>Params::Check - A generic input parsing/checking mechanism.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Params::Check</span> <span class="q">qw[check allow last_error]</span><span class="sc">;</span></li><li></li><li><span name="fill_personal_info"></span>    sub <span class="m">fill_personal_info</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tmpl</span> = <span class="s">{</span></li><li>            <span class="w">firstname</span>   <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">required</span>   <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">defined</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">lastname</span>    <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">required</span>   <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">store</span> <span class="cm">=&gt;</span> \\<span class="i">$x</span> <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">gender</span>      <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">required</span>   <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span></li><li>                             <span class="w">allow</span>      <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qr/M/i</span><span class="cm">,</span> <span class="q">qr/F/i</span><span class="s">]</span><span class="cm">,</span></li><li>                           <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">married</span>     <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">allow</span>      <span class="cm">=&gt;</span> <span class="s">[</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="s">]</span> <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">age</span>         <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">default</span>    <span class="cm">=&gt;</span> <span class="n">21</span><span class="cm">,</span></li><li>                             <span class="w">allow</span>      <span class="cm">=&gt;</span> <span class="q">qr/^\\d+$/</span><span class="cm">,</span></li><li>                           <span class="s">}</span><span class="cm">,</span></li><li></li><li>            <span class="w">phone</span>       <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">allow</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span> if <span class="q">/$valid_re/</span> <span class="s">}</span><span class="cm">,</span></li><li>                                        <span class="q">&#39;1-800-PERL&#39;</span> <span class="s">]</span></li><li>                           <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">id_list</span>     <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">default</span>        <span class="cm">=&gt;</span> <span class="s">[</span><span class="s">]</span><span class="cm">,</span></li><li>                             <span class="w">strict_type</span>    <span class="cm">=&gt;</span> <span class="n">1</span></li><li>                           <span class="s">}</span><span class="cm">,</span></li><li>            <span class="w">employer</span>    <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">default</span> <span class="cm">=&gt;</span> <span class="q">&#39;NSA&#39;</span><span class="cm">,</span> <span class="w">no_override</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span></li><li>        <span class="s">}</span><span class="sc">;</span></li><li></li><li>        <span class="c">### check() returns a hashref of parsed args on success ###</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parsed_args</span> = <span class="i">check</span><span class="s">(</span> <span class="i">$tmpl</span><span class="cm">,</span> \\<span class="i">%hash</span><span class="cm">,</span> <span class="i">$VERBOSE</span> <span class="s">)</span></li><li>                            or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">qw[Could not parse arguments!]</span><span class="sc">;</span></li><li></li><li>        ... <span class="w">other</span> <span class="w">code</span> <span class="w">here</span> ...</li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ok</span> = <span class="i">allow</span><span class="s">(</span> <span class="i">$colour</span><span class="cm">,</span> <span class="s">[</span><span class="q">qw|blue green yellow|</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$error</span> = <span class="i">Params::Check::last_error</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Params/Check.html
lstat (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>lstat FILEHANDLE<br>lstat EXPR<br>lstat DIRHANDLE<br>lstat</pre><p>Does the same thing as the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> function (including setting the special <code class="inline"><span class="w">_</span></code>  filehandle) but stats a symbolic link instead of the file the symbolic link points to.  If symbolic links are unimplemented on your system, a normal <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> is done.  For much more detailed information, please see the documentation for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code>.</p><p>If EXPR is omitted, stats <code class="inline"><span class="i">$_</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#lstat">lstat in perlport</span>.</p></section>	http://perldoc.perl.org/functions/lstat.html
Target of goto is too deeply nested	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> to reach a label that was too deeply nested for Perl to reach.  Perl is doing you a favor by refusing.</p></section>	http://perldoc.perl.org/perldiag.html#Target-of-goto-is-too-deeply-nested
ExtUtils::MM_BeOS (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_BeOS - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM_BeOS</span><span class="sc">;</span>&#09;<span class="c"># Done internally by ExtUtils::MakeMaker if needed</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_BeOS.html
Character in 'W' format wrapped in pack	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) You said</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;U0W&quot;</span><span class="cm">,</span> <span class="i">$x</span><span class="s">)</span></li></ol></pre><p>where $x is either less than 0 or more than 255.  However, <code class="inline"><span class="w">U0</span></code> -mode expects all values to fall in the interval [0, 255], so Perl behaved as if you meant:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;U0W&quot;</span><span class="cm">,</span> <span class="i">$x</span> &amp; <span class="n">255</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Character-in-'W'-format-wrapped-in-pack
%%s[%s] in scalar context better written as $%s[%s]	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) In scalar context, you&#39;ve used an array index/value slice (indicated by %) to select a single element of an array.  Generally it&#39;s better to ask for a scalar value (indicated by $).  The difference is that <code class="inline"><span class="i">$foo</span>[<span class="i">&amp;bar</span>]</code>  always behaves like a scalar, both in the value it returns and when evaluating its argument, while <code class="inline"><span class="i">%foo</span>[<span class="i">&amp;bar</span>]</code>  provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.  When called in list context, it also returns the index (what <code class="inline"><span class="i">&amp;bar</span></code>  returns) in addition to the value.</p></section>	http://perldoc.perl.org/perldiag.html#%25%25s%5b%25s%5d-in-scalar-context-better-written-as-%24%25s%5b%25s%5d
Why do Perl operators have different precedence than C operators?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Actually, they don&#39;t. All C operators that Perl copies have the same precedence in Perl as they do in C. The problem is with operators that C doesn&#39;t have, especially functions that give a list context to everything on their right, eg. print, chmod, exec, and so on. Such functions are called &quot;list operators&quot; and appear as such in the precedence table in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p><p>A common mistake is to write:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="i">$file</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;snafu&quot;</span><span class="sc">;</span></li></ol></pre><p>This gets interpreted as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="s">(</span><span class="i">$file</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;snafu&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To avoid this problem, either put in extra parentheses or use the super low precedence <code class="inline">or</code>  operator:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="i">$file</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;snafu&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span> <span class="i">$file</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;snafu&quot;</span><span class="sc">;</span></li></ol></pre><p>The &quot;English&quot; operators (<code class="inline">and</code> , <code class="inline">or</code> , <code class="inline">xor</code> , and <code class="inline">not</code> ) deliberately have precedence lower than that of list operators for just such situations as the one above.</p><p>Another operator with surprising precedence is exponentiation. It binds more tightly even than unary minus, making <code class="inline"><span class="n">-2</span>**<span class="n">2</span></code>  produce a negative four and not a positive one. It is also right-associating, meaning that <code class="inline"><span class="n">2</span>**<span class="n">3</span>**<span class="n">2</span></code>  is two raised to the ninth power, not eight squared.</p><p>Although it has the same precedence as in C, Perl&#39;s <code class="inline">?:</code> operator produces an lvalue. This assigns $x to either $if_true or $if_false, depending on the trueness of $maybe:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$maybe</span> ? <span class="i">$if_true</span> <span class="co">:</span> <span class="i">$if_false</span><span class="s">)</span> = <span class="i">$x</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#Why-do-Perl-operators-have-different-precedence-than-C-operators%3f
term (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for a “terminal”—that is, a leaf node of a <b>syntax tree</b>. A thing that functions grammatically as an <b>operand</b> for the operators in an expression.</p></section>	http://perldoc.perl.org/perlglossary.html#term
splice (function)	A			Perl Functions\nPerl Functions for real @ARRAYs							<section class="prog__container"><pre>splice ARRAY,OFFSET,LENGTH,LIST<br>splice ARRAY,OFFSET,LENGTH<br>splice ARRAY,OFFSET<br>splice ARRAY<br>splice EXPR,OFFSET,LENGTH,LIST<br>splice EXPR,OFFSET,LENGTH<br>splice EXPR,OFFSET<br>splice EXPR</pre><p>Removes the elements designated by OFFSET and LENGTH from an array, and replaces them with the elements of LIST, if any.  In list context, returns the elements removed from the array.  In scalar context, returns the last element removed, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if no elements are removed.  The array grows or shrinks as necessary. If OFFSET is negative then it starts that far from the end of the array. If LENGTH is omitted, removes everything from OFFSET onward. If LENGTH is negative, removes the elements from OFFSET onward except for -LENGTH elements at the end of the array. If both OFFSET and LENGTH are omitted, removes everything.  If OFFSET is past the end of the array and a LENGTH was provided, Perl issues a warning, and splices at the end of the array.</p><p>The following equivalences hold (assuming <code class="inline"><span class="i">$#a</span> &gt;= <span class="i">$i</span></code>  )</p><pre class="verbatim"><ol><li>    push(@a,$x,$y)      splice(@a,@a,0,$x,$y)</li><li>    pop(@a)             splice(@a,-1)</li><li>    shift(@a)           splice(@a,0,1)</li><li>    unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)</li><li>    $a[$i] = $y         splice(@a,$i,1,$y)</li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code> can be used, for example, to implement n-ary queue processing:</p><pre class="verbatim"><ol><li><span name="nary_print"></span>    sub <span class="m">nary_print</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$n</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@next_n</span> = <span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span> <span class="i">@_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$n</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">q{ -- }</span><span class="cm">,</span> <span class="i">@next_n</span><span class="sc">;</span></li><li>      <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">nary_print</span><span class="s">(</span><span class="n">3</span><span class="cm">,</span> <span class="q">qw(a b c d e f g h)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># prints:</span></li><li>    <span class="c">#   a -- b -- c</span></li><li>    <span class="c">#   d -- e -- f</span></li><li>    <span class="c">#   g -- h</span></li></ol></pre><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code> can take scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code> is considered highly experimental. The exact behaviour may change in a future version of Perl.</p><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so push/pop/etc work on scalars (experimental)</span></li></ol></pre></section>	http://perldoc.perl.org/functions/splice.html
ExtUtils::MM_OS2 (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM_OS2</span><span class="sc">;</span> <span class="c"># Done internally by ExtUtils::MakeMaker if needed</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_OS2.html
Can't create pipe mailbox	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  The process is suffering from exhausted quotas or other plumbing problems.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-create-pipe-mailbox
Possible memory corruption: %s overflowed 3rd argument	A			Perl Diagnostics							<section class="prog__container"><p>(F) An ioctl() or fcntl() returned more than Perl was bargaining for. Perl guesses a reasonable buffer size, but puts a sentinel byte at the end of the buffer just in case.  This sentinel byte got clobbered, and Perl assumes that memory is now corrupted.  See <span href="http://perldoc.perl.org/functions/ioctl.html">ioctl</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Possible-memory-corruption%3a-%25s-overflowed-3rd-argument
magical increment (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>increment</b> operator that knows how to bump up ASCII alphabetics as well as numbers.</p></section>	http://perldoc.perl.org/perlglossary.html#magical-increment
How do I start a process in the background?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>There&#39;s not a single way to run code in the background so you don&#39;t have to wait for it to finish before your program moves on to other tasks. Process management depends on your particular operating system, and many of the techniques are covered in <span href="http://perldoc.perl.org/perlipc.html">perlipc</span>.</p><p>Several CPAN modules may be able to help, including <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span> or <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>, <span href="http://search.cpan.org/perldoc/IPC::Run">IPC::Run</span>, <span href="http://search.cpan.org/perldoc/Parallel::Jobs">Parallel::Jobs</span>, <span href="http://search.cpan.org/perldoc/Parallel::ForkManager">Parallel::ForkManager</span>, <span href="http://search.cpan.org/perldoc/POE">POE</span>, <span href="http://search.cpan.org/perldoc/Proc::Background">Proc::Background</span>, and <span href="http://search.cpan.org/perldoc/Win32::Process">Win32::Process</span>. There are many other modules you might use, so check those namespaces for other options too.</p><p>If you are on a Unix-like system, you might be able to get away with a system call where you put an <code class="inline"><span class="i">&amp;</span></code>  on the end of the command:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;cmd &amp;&quot;</span><span class="s">)</span></li></ol></pre><p>You can also try using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code>, as described in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> (although this is the same thing that many of the modules will do for you).</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-start-a-process-in-the-background%3f
Unterminated \g{...} pattern in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a regular expression, you had a <code class="inline">\\<span class="w">g</span></code>  that wasn&#39;t followed by a proper group reference.  In the case of <code class="inline">\\<span class="i">g</span><span class="s">{</span></code> , the closing brace is missing; otherwise the <code class="inline">\\<span class="w">g</span></code>  must be followed by an integer.  Fix the pattern and retry.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-%5cg%7b...%7d-pattern-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
say (function)	A			Perl Functions							<section class="prog__container"><pre>say FILEHANDLE LIST<br>say FILEHANDLE<br>say LIST<br>say</pre><p>Just like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, but implicitly appends a newline.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="i">LIST</span></code>  is simply an abbreviation for <code class="inline"><span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$\\</span> = <span class="q">&quot;\\n&quot;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">LIST</span> <span class="s">}</span></code> .  To use FILEHANDLE without a LIST to print the contents of <code class="inline"><span class="i">$_</span></code>  to it, you must use a real filehandle like <code class="inline"><span class="w">FH</span></code> , not an indirect one like <code class="inline"><span class="i">$fh</span></code> .</p><p>This keyword is available only when the <code class="inline"><span class="q">&quot;say&quot;</span></code>  feature is enabled, or when prefixed with <code class="inline"><span class="w">CORE::</span></code> ; see <span href="http://perldoc.perl.org/feature.html">feature</span>.  Alternately, include a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10</span></code>  or later to the current scope.</p></section>	http://perldoc.perl.org/functions/say.html
Hash::Util (module)	A			Perl Standard Modules		[[Scalar::Util]]\n[[List::Util]]\n[[Algorithmic Complexity Attacks in perlsec]]\n[[Hash::Util::FieldHash]]					<section class="prog__container"><p>Hash::Util - A selection of general-utility hash subroutines</p> <pre class="verbatim"><ol><li>  <span class="c"># Restricted hashes</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Hash::Util</span> <span class="q">qw(</span></li><li>                     <span class="q">fieldhash fieldhashes</span></li><li></li><li>                     <span class="q">all_keys</span></li><li>                     <span class="q">lock_keys unlock_keys</span></li><li>                     <span class="q">lock_value unlock_value</span></li><li>                     <span class="q">lock_hash unlock_hash</span></li><li>                     <span class="q">lock_keys_plus</span></li><li>                     <span class="q">hash_locked hash_unlocked</span></li><li>                     <span class="q">hashref_locked hashref_unlocked</span></li><li>                     <span class="q">hidden_keys legal_keys</span></li><li></li><li>                     <span class="q">lock_ref_keys unlock_ref_keys</span></li><li>                     <span class="q">lock_ref_value unlock_ref_value</span></li><li>                     <span class="q">lock_hashref unlock_hashref</span></li><li>                     <span class="q">lock_ref_keys_plus</span></li><li>                     <span class="q">hidden_ref_keys legal_ref_keys</span></li><li></li><li>                     <span class="q">hash_seed hash_value hv_store</span></li><li>                     <span class="q">bucket_stats bucket_info bucket_array</span></li><li>                     <span class="q">lock_hash_recurse unlock_hash_recurse</span></li><li></li><li>                     <span class="q">hash_traversal_mask</span></li><li>                   <span class="q">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">%hash</span> = <span class="s">(</span><span class="w">foo</span> <span class="cm">=&gt;</span> <span class="n">42</span><span class="cm">,</span> <span class="w">bar</span> <span class="cm">=&gt;</span> <span class="n">23</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="c"># Ways to restrict a hash</span></li><li>  <span class="i">lock_keys</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">lock_keys</span><span class="s">(</span><span class="i">%hash</span><span class="cm">,</span> <span class="i">@keyset</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">lock_keys_plus</span><span class="s">(</span><span class="i">%hash</span><span class="cm">,</span> <span class="i">@additional_keys</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Ways to inspect the properties of a restricted hash</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@legal</span> = <span class="i">legal_keys</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@hidden</span> = <span class="i">hidden_keys</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ref</span> = <span class="i">all_keys</span><span class="s">(</span><span class="i">%hash</span><span class="cm">,</span><span class="i">@keys</span><span class="cm">,</span><span class="i">@hidden</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$is_locked</span> = <span class="i">hash_locked</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Remove restrictions on the hash</span></li><li>  <span class="i">unlock_keys</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Lock individual values in a hash</span></li><li>  <span class="w">lock_value</span>  <span class="s">(</span><span class="i">%hash</span><span class="cm">,</span> <span class="q">&#39;foo&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">unlock_value</span><span class="s">(</span><span class="i">%hash</span><span class="cm">,</span> <span class="q">&#39;foo&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Ways to change the restrictions on both keys and values</span></li><li>  <span class="w">lock_hash</span>  <span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">unlock_hash</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$hashes_are_randomised</span> = <span class="i">hash_seed</span><span class="s">(</span><span class="s">)</span> != <span class="n">0</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$int_hash_value</span> = <span class="i">hash_value</span><span class="s">(</span> <span class="q">&#39;string&#39;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mask</span>= <span class="i">hash_traversal_mask</span><span class="s">(</span><span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">hash_traversal_mask</span><span class="s">(</span><span class="i">%hash</span><span class="cm">,</span><span class="n">1234</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Hash/Util.html
Negative '/' count in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) The length count obtained from a length/code unpack operation was negative.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Negative-'%2f'-count-in-unpack
Unexpected '(' with no preceding operator in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ \\p{Digit} ( \\p{Lao} + \\p{Thai} ) ])</span></li></ol></pre><p>There should be an operator before the <code class="inline"><span class="q">&quot;(&quot;</span></code> , as there&#39;s no indication as to how the digits are to be combined with the characters in the Lao and Thai scripts.</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-'('-with-no-preceding-operator-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Sys::Hostname (module)	A			Perl Standard Modules							<section class="prog__container"><p>Sys::Hostname - Try every conceivable way to get hostname</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Sys::Hostname</span><span class="sc">;</span></li><li>    <span class="i">$host</span> = <span class="w">hostname</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Sys/Hostname.html
scalar literal (definition)	A			Perl Glossary							<section class="prog__container"><p>A number or quoted <b>string</b>—an actual <b>value</b> in the text of your program, as opposed to a <b>variable</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#scalar-literal
ExtUtils::Constant::XS (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Constant::XS - generate C code for XS modules&#39; constants.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::Constant::XS</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Constant/XS.html
Missing ']' in prototype for %s : %s	A			Perl Diagnostics							<section class="prog__container"><p>(W illegalproto) A grouping was started with <code class="inline">[</code> but never closed with <code class="inline">]</code>.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-'%5d'-in-prototype-for-%25s-%3a-%25s
Which version of perl should I use?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Well, if you can, upgrade to the most recent, but certainly <code class="inline"><span class="v">5.8.1</span></code>  or newer. The tutorial and FAQ assume the latest release.</p><p>You should also check your modules, and upgrade them if necessary. For example, HTML::Entities requires version &gt;= 1.32 to function correctly, even though the changelog is silent about this.</p></section>	http://perldoc.perl.org/perlunifaq.html#Which-version-of-perl-should-I-use%3f
dynamic scoping (definition)	A			Perl Glossary							<section class="prog__container"><p>Dynamic scoping works over a <b>dynamic scope</b>, making variables visible throughout the rest of the <b>block</b> in which they are first used and in any <b>subroutines</b> that are called by the rest of the block. Dynamically scoped variables can have their values temporarily changed (and implicitly restored later) by a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> operator. (Compare <b>lexical scoping</b>.) Used more loosely to mean how a subroutine that is in the middle of calling another subroutine “contains” that subroutine at <b>runtime</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#dynamic-scoping
namespace (definition)	A			Perl Glossary							<section class="prog__container"><p>A domain of names. You needn’t worry about whether the names in one such domain have been used in another. See <b>package</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#namespace
panic: pad_reset curpad, %p!=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_reset-curpad%2c-%25p!%3d%25p
operator (definition)	A			Perl Glossary							<section class="prog__container"><p>A gizmo that transforms some number of input values to some number of output values, often built into a language with a special syntax or symbol. A given operator may have specific expectations about what <b>types</b> of data you give as its arguments (<b>operands</b>) and what type of data you want back from it.</p></section>	http://perldoc.perl.org/perlglossary.html#operator
y (function)	A			Perl Functions							<section class="prog__container"><pre>y///</pre><p>The transliteration operator.  Same as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code>.  See <span href="http://perldoc.perl.org/perlop.html#Quote-Like-Operators">Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/y.html
panic: magic_killbackrefs	A			Perl Diagnostics							<section class="prog__container"><p>(P) Failed an internal consistency check while trying to reset all weak references to an object.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-magic_killbackrefs
IO::Uncompress::Unzip (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Uncompress::Unzip - Read zip files/buffers</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::Unzip qw(unzip $UnzipError) ;</li><li></li><li>    my $status = unzip $input =&gt; $output [,OPTS]</li><li>        or die &quot;unzip failed: $UnzipError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::Unzip $input [OPTS] </li><li>        or die &quot;unzip failed: $UnzipError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $status = $z-&gt;inflateSync()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $UnzipError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/Unzip.html
END (function)	A			Perl Functions							<section class="prog__container"><pre>END</pre><p>These compile phase keywords are documented in <span href="http://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END">BEGIN, UNITCHECK, CHECK, INIT and END in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/END.html
"-T" is on the #! line, it must also be used on the command line	A			Perl Diagnostics							<section class="prog__container"><p>(X) The #! line (or local equivalent) in a Perl script contains the <b>-T</b> option (or the <b>-t</b> option), but Perl was not invoked with <b>-T</b> in its command line.  This is an error because, by the time Perl discovers a <b>-T</b> in a script, it&#39;s too late to properly taint everything from the environment.  So Perl gives up.</p><p>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the <b>-%c</b> option is a part of Perl&#39;s first argument: e.g. change <code class="inline"><span class="w">perl</span> -<span class="w">n</span> -<span class="i">%c</span></code>  to <code class="inline"><span class="w">perl</span> -<span class="i">%c</span> -<span class="w">n</span></code> .</p><p>If the Perl script is being executed as <code class="inline"><span class="w">perl</span> <span class="w">scriptname</span></code> , then the <b>-%c</b> option must appear on the command line: <code class="inline">perl -%c scriptname</code>.</p></section>	http://perldoc.perl.org/perldiag.html#%22-T%22-is-on-the-%23!-line%2c-it-must-also-be-used-on-the-command-line
How do I clear the screen?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>To clear the screen, you just have to print the special sequence that tells the terminal to clear the screen. Once you have that sequence, output it when you want to clear the screen.</p><p>You can use the <span href="http://search.cpan.org/perldoc/Term::ANSIScreen">Term::ANSIScreen</span> module to get the special sequence. Import the <code class="inline"><span class="w">cls</span></code>  function (or the <code class="inline"><span class="j">:</span><span class="w">screen</span></code>  tag):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIScreen</span> <span class="q">qw(cls)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$clear_screen</span> = <span class="i">cls</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$clear_screen</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/Term/Cap.html">Term::Cap</span> module can also get the special sequence if you want to deal with the low-level details of terminal control. The <code class="inline"><span class="w">Tputs</span></code>  method returns the string for the given capability:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::Cap</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$terminal</span> = <span class="w">Term::Cap</span><span class="w">-&gt;Tgetent</span><span class="s">(</span> <span class="s">{</span> <span class="w">OSPEED</span> <span class="cm">=&gt;</span> <span class="n">9600</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$clear_string</span> = <span class="i">$terminal</span><span class="i">-&gt;Tputs</span><span class="s">(</span><span class="q">&#39;cl&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$clear_screen</span><span class="sc">;</span></li></ol></pre><p>On Windows, you can use the <span href="http://search.cpan.org/perldoc/Win32::Console">Win32::Console</span> module. After creating an object for the output filehandle you want to affect, call the <code class="inline"><span class="w">Cls</span></code>  method:</p><pre class="verbatim"><ol><li>    <span class="w">Win32::Console</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$OUT</span> = <span class="w">Win32::Console</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">STD_OUTPUT_HANDLE</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$clear_string</span> = <span class="i">$OUT</span><span class="i">-&gt;Cls</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$clear_screen</span><span class="sc">;</span></li></ol></pre><p>If you have a command-line program that does the job, you can call it in backticks to capture whatever it outputs so you can use it later:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$clear_string</span> = <span class="q">`clear`</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$clear_string</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-clear-the-screen%3f
BSD (definition)	A			Perl Glossary							<section class="prog__container"><p>A psychoactive drug, popular in the ’80s, probably developed at UC Berkeley or thereabouts. Similar in many ways to the prescription-only medication called “System V”, but infinitely more useful. (Or, at least, more fun.) The full chemical name is “Berkeley Standard Distribution”.</p></section>	http://perldoc.perl.org/perlglossary.html#BSD
environment (definition)	A			Perl Glossary							<section class="prog__container"><p>The collective set of <b>environment variables</b> your <b>process</b> inherits from its parent. Accessed via <code class="inline"><span class="i">%ENV</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#environment
$% (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The current page number of the currently selected output channel.</p><p>Mnemonic: <code class="inline"><span class="i">%</span></code>  is page number in <b>nroff</b>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%25
endpwent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>endpwent</pre>Be done using passwd file.</section>	http://perldoc.perl.org/functions/endpwent.html
Can't "redo" outside a loop block	A			Perl Diagnostics							<section class="prog__container"><p>(F) A &quot;redo&quot; statement was executed to restart the current block, but there isn&#39;t a current block.  Note that an &quot;if&quot; or &quot;else&quot; block doesn&#39;t count as a &quot;loopish&quot; block, as doesn&#39;t a block given to sort(), map() or grep().  You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once.  See <span href="http://perldoc.perl.org/functions/redo.html">redo</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22redo%22-outside-a-loop-block
Ignoring zero length \N{} in character class in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) Named Unicode character escapes (<code class="inline">\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span></code> ) may return a zero-length sequence.  When such an escape is used in a character class its behavior is not well defined.  Check that the correct escape has been used, and the correct charname handler is in scope.</p></section>	http://perldoc.perl.org/perldiag.html#Ignoring-zero-length-%5cN%7b%7d-in-character-class-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
embedding (definition)	A			Perl Glossary							<section class="prog__container"><p>When something is contained in something else, particularly when that might be considered surprising: “I’ve embedded a complete Perl interpreter in my editor!”</p></section>	http://perldoc.perl.org/perlglossary.html#embedding
Corrupted regexp opcode %d > %d	A			Perl Diagnostics							<section class="prog__container"><p>(P) This is either an error in Perl, or, if you&#39;re using one, your <span href="http://perldoc.perl.org/perlreapi.html">custom regular expression engine</span>.  If not the latter, report the problem through the <span href="http://perldoc.perl.org/perlbug.html">perlbug</span> utility.</p></section>	http://perldoc.perl.org/perldiag.html#Corrupted-regexp-opcode-%25d-%3e-%25d
$_ (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The default input and pattern-searching space.  The following pairs are equivalent:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span>...<span class="s">}</span>    <span class="c"># equivalent only in while!</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$_</span> = &lt;&gt;<span class="s">)</span><span class="s">)</span> <span class="s">{</span>...<span class="s">}</span></li><li></li><li>    <span class="q">/^Subject:/</span></li><li>    <span class="i">$_</span> =~ <span class="q">/^Subject:/</span></li><li></li><li>    <span class="q">tr/a-z/A-Z/</span></li><li>    <span class="i">$_</span> =~ <span class="q">tr/a-z/A-Z/</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span></li></ol></pre><p>Here are the places where Perl will assume <code class="inline"><span class="i">$_</span></code>  even if you don&#39;t use it:</p><p><code class="inline"><span class="i">$_</span></code>  is by default a global variable.  However, as of perl v5.10.0, you can use a lexical version of <code class="inline"><span class="i">$_</span></code>  by declaring it in a file or in a block with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>.  Moreover, declaring <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$_</span></code>  restores the global <code class="inline"><span class="i">$_</span></code>  in the current scope.  Though this seemed like a good idea at the time it was introduced, lexical <code class="inline"><span class="i">$_</span></code>  actually causes more problems than it solves.  If you call a function that expects to be passed information via <code class="inline"><span class="i">$_</span></code> , it may or may not work, depending on how the function is written, there not being any easy way to solve this.  Just avoid lexical <code class="inline"><span class="i">$_</span></code> , unless you are feeling particularly masochistic.  For this reason lexical <code class="inline"><span class="i">$_</span></code>  is still experimental and will produce a warning unless warnings have been disabled.  As with other experimental features, the behavior of lexical <code class="inline"><span class="i">$_</span></code>  is subject to change without notice, including change into a fatal error.</p><p>Mnemonic: underline is understood in certain operations.</p></section>	http://perldoc.perl.org/perlvar.html#%24_
string context (definition)	A			Perl Glossary		[[context]]\n[[numeric context]]					<section class="prog__container"><p>The situation in which an expression is expected by its surroundings (the code calling it) to return a <b>string</b>. </p></section>	http://perldoc.perl.org/perlglossary.html#string-context
closedir() attempted on invalid dirhandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) The dirhandle you tried to close is either closed or not really a dirhandle.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#closedir()-attempted-on-invalid-dirhandle-%25s
Scalars leaked: %d	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) Something went wrong in Perl&#39;s internal bookkeeping of scalars: not all scalar variables were deallocated by the time Perl exited.  What this usually indicates is a memory leak, which is of course bad, especially if the Perl program is intended to be long-running.</p></section>	http://perldoc.perl.org/perldiag.html#Scalars-leaked%3a-%25d
Using just the first character returned by \N{} in character class in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) Named Unicode character escapes <code class="inline"><span class="s">(</span>\\<span class="i">N</span><span class="s">{</span>...<span class="s">}</span><span class="s">)</span></code>  may return a multi-character sequence.  Even though a character class is supposed to match just one character of input, perl will match the whole thing correctly, except when the class is inverted (<code class="inline">[^...]</code>), or the escape is the beginning or final end point of a range.  For these, what should happen isn&#39;t clear at all.  In these circumstances, Perl discards all but the first character of the returned sequence, which is not likely what you want.</p></section>	http://perldoc.perl.org/perldiag.html#Using-just-the-first-character-returned-by-%5cN%7b%7d-in-character-class-in--regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
ExtUtils::Miniperl (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::Miniperl - write the C code for perlmain.c</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Miniperl</span><span class="sc">;</span></li><li>    <span class="i">writemain</span><span class="s">(</span><span class="i">@directories</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># or</span></li><li>    <span class="i">writemain</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">@directories</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># or</span></li><li>    <span class="i">writemain</span><span class="s">(</span>\\<span class="i">$filename</span><span class="cm">,</span> <span class="i">@directories</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Miniperl.html
What's the difference between dynamic and lexical (static) scoping? Between local() and my()?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local($x)</span></code> saves away the old value of the global variable <code class="inline"><span class="i">$x</span></code>  and assigns a new value for the duration of the subroutine <i>which is visible in other functions called from that subroutine</i>. This is done at run-time, so is called dynamic scoping. local() always affects global variables, also called package variables or dynamic variables.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my($x)</span></code> creates a new variable that is only visible in the current subroutine. This is done at compile-time, so it is called lexical or static scoping. my() always affects private variables, also called lexical variables or (improperly) static(ly scoped) variables.</p><p>For instance:</p><pre class="verbatim"><ol><li><span name="visible"></span>    sub <span class="m">visible</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;var has value $var\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="dynamic"></span>    sub <span class="m">dynamic</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$var</span> = <span class="q">&#39;local&#39;</span><span class="sc">;</span>    <span class="c"># new temporary value for the still-global</span></li><li>        <span class="i">visible</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c">#   variable called $var</span></li><li>    <span class="s">}</span></li><li></li><li><span name="lexical"></span>    sub <span class="m">lexical</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span> = <span class="q">&#39;private&#39;</span><span class="sc">;</span>    <span class="c"># new private variable, $var</span></li><li>        <span class="i">visible</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># (invisible outside of sub scope)</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$var</span> = <span class="q">&#39;global&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="i">visible</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># prints global</span></li><li>    <span class="i">dynamic</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># prints local</span></li><li>    <span class="i">lexical</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># prints global</span></li></ol></pre><p>Notice how at no point does the value &quot;private&quot; get printed. That&#39;s because $var only has that value within the block of the lexical() function, and it is hidden from the called subroutine.</p><p>In summary, local() doesn&#39;t make what you think of as private, local variables. It gives a global variable a temporary value. my() is what you&#39;re looking for if you want private variables.</p><p>See <span href="http://perldoc.perl.org/perlsub.html#Private-Variables-via-my()">Private Variables via my() in perlsub</span> and <span href="http://perldoc.perl.org/perlsub.html#Temporary-Values-via-local()">Temporary Values via local() in perlsub</span> for excruciating details.</p></section>	http://perldoc.perl.org/perlfaq7.html#What's-the-difference-between-dynamic-and-lexical-(static)-scoping%3f-Between-local()-and-my()%3f
How do I do a in perl?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>First try</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="i">$gw_fh</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The statement <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="i">$gw_fh</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span></code>  doesn&#39;t change the current position, but it does clear the end-of-file condition on the handle, so that the next <code class="inline"><span class="q">&lt;$gw_fh&gt;</span></code>  makes Perl try again to read something.</p><p>If that doesn&#39;t work (it relies on features of your stdio implementation), then you need something more like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="sc">;</span><span class="sc">;</span><span class="s">)</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$curpos</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span><span class="s">(</span><span class="i">$gw_fh</span><span class="s">)</span><span class="sc">;</span> <span class="q">&lt;$gw_fh&gt;</span><span class="sc">;</span> <span class="i">$curpos</span> =<span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span><span class="s">(</span><span class="i">$gw_fh</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># search for some stuff and put it into files</span></li><li>      <span class="s">}</span></li><li>      <span class="c"># sleep for a while</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="i">$gw_fh</span><span class="cm">,</span> <span class="i">$curpos</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># seek to where we had been</span></li><li>    <span class="s">}</span></li></ol></pre><p>If this still doesn&#39;t work, look into the <code class="inline"><span class="w">clearerr</span></code>  method from <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>, which resets the error and end-of-file states on the handle.</p><p>There&#39;s also a <span href="http://search.cpan.org/perldoc/File::Tail">File::Tail</span> module from CPAN.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-do-a-tail--f-in-perl%3f
Character(s) in '%c' format wrapped in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(W unpack) You tried something like</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;s&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{1f3}b&quot;</span><span class="s">)</span></li></ol></pre><p>where the format expects to process a sequence of bytes (character with a value below 256), but some of the characters had a higher value.  Perl uses the character values modulus 256 instead, as if you had provided:</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;s&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{f3}b&quot;</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Character(s)-in-'%25c'-format-wrapped-in-unpack
newline (definition)	A			Perl Glossary							<section class="prog__container"><p>A single character that represents the end of a line, with the ASCII value of 012 octal under Unix (but 015 on a Mac), and represented by <code class="inline">\\<span class="w">n</span></code>  in Perl strings. For Windows machines writing text files, and for certain physical devices like terminals, the single newline gets automatically translated by your C library into a line feed and a carriage return, but normally, no translation is done.</p></section>	http://perldoc.perl.org/perlglossary.html#newline
Regexp modifier "%c" may appear a maximum of twice in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The regular expression pattern had too many occurrences of the specified modifier.  Remove the extraneous ones.</p></section>	http://perldoc.perl.org/perldiag.html#Regexp-modifier-%22%25c%22-may-appear-a-maximum-of-twice-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
RFC (definition)	A			Perl Glossary							<section class="prog__container"><p>Request For Comment, which despite the timid connotations is the name of a series of important standards documents.</p></section>	http://perldoc.perl.org/perlglossary.html#RFC
filehandle (definition)	A			Perl Glossary							<section class="prog__container"><p>An identifier (not necessarily related to the real name of a file) that represents a particular instance of opening a file, until you close it. If you’re going to open and close several different files in succession, it’s fine to open each of them with the same filehandle, so you don’t have to write out separate code to process each file.</p></section>	http://perldoc.perl.org/perlglossary.html#filehandle
${^RE_TRIE_MAXBUF} (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>Controls how certain regex optimisations are applied and how much memory they utilize.  This value by default is 65536 which corresponds to a 512kB temporary cache.  Set this to a higher value to trade memory for speed when matching large alternations.  Set it to a lower value if you want the optimisations to be as conservative of memory as possible but still occur, and set it to a negative value to prevent the optimisation and conserve the most memory. Under normal situations this variable should be of no interest to you.</p><p>This variable was added in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eRE_TRIE_MAXBUF%7d
type casting (definition)	A			Perl Glossary							<section class="prog__container"><p>Converting data from one type to another. C permits this. Perl does not need it. Nor want it.</p></section>	http://perldoc.perl.org/perlglossary.html#type-casting
LIFO (definition)	A			Perl Glossary		[[FIFO]]					<section class="prog__container"><p>Last In, First Out.  A LIFO is usually called a <b>stack</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#LIFO
getgrnam (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getgrnam NAME</pre>Get group record given group name.</section>	http://perldoc.perl.org/functions/getgrnam.html
Can't use global %s in "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to declare a magical variable as a lexical variable.  This is not allowed, because the magic can be tied to only one location (namely the global variable) and it would be incredibly confusing to have variables in your program that looked like magical variables but weren&#39;t.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-global-%25s-in-%22%25s%22
PerlIO (module)	A			Perl Standard Modules		[[binmode]]\n[[open]]\n[[perlunicode]]\n[[perliol]]\n[[Encode]]					<section class="prog__container"><p>PerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;:crlf&quot;</span><span class="cm">,</span> <span class="q">&quot;my.txt&quot;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># support platform-native and </span></li><li>                                 <span class="c"># CRLF text files</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="q">&quot;his.jpg&quot;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># portably open a binary file for reading</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="j">Shell:</span></li><li>    <span class="w">PERLIO</span>=<span class="w">perlio</span> <span class="w">perl</span> ....</li></ol></pre></section>	http://perldoc.perl.org/PerlIO.html
Is there an IDE or Windows Perl Editor?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Perl programs are just plain text, so any editor will do.</p><p>If you&#39;re on Unix, you already have an IDE--Unix itself. The Unix philosophy is the philosophy of several small tools that each do one thing and do it well. It&#39;s like a carpenter&#39;s toolbox.</p><p>If you want an IDE, check the following (in alphabetical order, not order of preference):</p><p>For editors: if you&#39;re on Unix you probably have vi or a vi clone already, and possibly an emacs too, so you may not need to download anything. In any emacs the cperl-mode (M-x cperl-mode) gives you perhaps the best available Perl editing mode in any editor.</p><p>If you are using Windows, you can use any editor that lets you work with plain text, such as NotePad or WordPad. Word processors, such as Microsoft Word or WordPerfect, typically do not work since they insert all sorts of behind-the-scenes information, although some allow you to save files as &quot;Text Only&quot;. You can also download text editors designed specifically for programming, such as Textpad ( <span href="http://www.textpad.com/">http://www.textpad.com/</span> ) and UltraEdit ( <span href="http://www.ultraedit.com/">http://www.ultraedit.com/</span> ), among others.</p><p>If you are using MacOS, the same concerns apply. MacPerl (for Classic environments) comes with a simple editor. Popular external editors are BBEdit ( <span href="http://www.barebones.com/products/bbedit/">http://www.barebones.com/products/bbedit/</span> ) or Alpha ( <span href="http://www.his.com/~jguyer/Alpha/Alpha8.html">http://www.his.com/~jguyer/Alpha/Alpha8.html</span> ). MacOS X users can use Unix editors as well.</p><p>or a vi clone such as</p><p>The following are Win32 multilanguage editor/IDEs that support Perl:</p><p>There is also a toyedit Text widget based editor written in Perl that is distributed with the Tk module on CPAN. The ptkdb ( <span href="http://ptkdb.sourceforge.net/">http://ptkdb.sourceforge.net/</span> ) is a Perl/Tk-based debugger that acts as a development environment of sorts. Perl Composer ( <span href="http://perlcomposer.sourceforge.net/">http://perlcomposer.sourceforge.net/</span> ) is an IDE for Perl/Tk GUI creation.</p><p>In addition to an editor/IDE you might be interested in a more powerful shell environment for Win32. Your options include</p><p>Cygwin is covered by the GNU General Public License (but that shouldn&#39;t matter for Perl use). Cygwin contains (in addition to the shell) a comprehensive set of standard Unix toolkit utilities.</p></section>	http://perldoc.perl.org/perlfaq3.html#Is-there-an-IDE-or-Windows-Perl-Editor%3f
How do I merge two hashes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Before you decide to merge two hashes, you have to decide what to do if both hashes contain keys that are the same and if you want to leave the original hashes as they were.</p><p>If you want to preserve the original hashes, copy one hash (<code class="inline"><span class="i">%hash1</span></code> ) to a new hash (<code class="inline"><span class="i">%new_hash</span></code> ), then add the keys from the other hash (<code class="inline"><span class="i">%hash2</span></code>  to the new hash. Checking that the key already exists in <code class="inline"><span class="i">%new_hash</span></code>  gives you a chance to decide what to do with the duplicates:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%new_hash</span> = <span class="i">%hash1</span><span class="sc">;</span> <span class="c"># make a copy; leave %hash1 alone</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key2</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash2</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$new_hash</span>{<span class="i">$key2</span>} <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Key [$key2] is in both hashes!&quot;</span><span class="sc">;</span></li><li>            <span class="c"># handle the duplicate (perhaps only warning)</span></li><li>            ...</li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>            <span class="i">$new_hash</span>{<span class="i">$key2</span>} = <span class="i">$hash2</span>{<span class="i">$key2</span>}<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you don&#39;t want to create a new hash, you can still use this looping technique; just change the <code class="inline"><span class="i">%new_hash</span></code>  to <code class="inline"><span class="i">%hash1</span></code> .</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key2</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash2</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash1</span>{<span class="i">$key2</span>} <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Key [$key2] is in both hashes!&quot;</span><span class="sc">;</span></li><li>            <span class="c"># handle the duplicate (perhaps only warning)</span></li><li>            ...</li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>            <span class="i">$hash1</span>{<span class="i">$key2</span>} = <span class="i">$hash2</span>{<span class="i">$key2</span>}<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>      <span class="s">}</span></li></ol></pre><p>If you don&#39;t care that one hash overwrites keys and values from the other, you could just use a hash slice to add one hash to another. In this case, values from <code class="inline"><span class="i">%hash2</span></code>  replace values from <code class="inline"><span class="i">%hash1</span></code>  when they have keys in common:</p><pre class="verbatim"><ol><li>    <span class="i">@hash1</span>{ <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash2</span> } = <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%hash2</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-merge-two-hashes%3f
Digest::SHA (module)	A			Perl Standard Modules		[[Digest]]\n[[Digest::SHA::PurePerl]]\n[[http://csrc.nist.gov/publications/drafts/fips180-4/Draft-FIPS180-4_Feb2011.pdf]]\n[[http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf]]					<section class="prog__container"><p>Digest::SHA - Perl extension for SHA-1/224/256/384/512</p> <p>In programs:</p><pre class="verbatim"><ol><li>&#09;&#09;<span class="c"># Functional interface</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::SHA</span> <span class="q">qw(sha1 sha1_hex sha1_base64 ...)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha1</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha1_hex</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha1_base64</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha256</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha384_hex</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">sha512_base64</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;&#09;<span class="c"># Object-oriented</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::SHA</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$sha</span> = <span class="w">Digest::SHA</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$alg</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;add</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># feed data into stream</span></li><li></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;addfile</span><span class="s">(</span><span class="i">*F</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;addfile</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;add_bits</span><span class="s">(</span><span class="i">$bits</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;add_bits</span><span class="s">(</span><span class="i">$data</span><span class="cm">,</span> <span class="i">$nbits</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$sha_copy</span> = <span class="i">$sha</span><span class="i">-&gt;clone</span><span class="sc">;</span>&#09;<span class="c"># make copy of digest object</span></li><li>&#09;<span class="i">$state</span> = <span class="i">$sha</span><span class="i">-&gt;getstate</span><span class="sc">;</span>&#09;<span class="c"># save current state to string</span></li><li>&#09;<span class="i">$sha</span><span class="i">-&gt;putstate</span><span class="s">(</span><span class="i">$state</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># restore previous $state</span></li><li></li><li>&#09;<span class="i">$digest</span> = <span class="i">$sha</span><span class="i">-&gt;digest</span><span class="sc">;</span>&#09;&#09;<span class="c"># compute digest</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">$sha</span><span class="i">-&gt;hexdigest</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">$sha</span><span class="i">-&gt;b64digest</span><span class="sc">;</span></li></ol></pre><p>From the command line:</p><pre class="verbatim"><ol><li>&#09;$ shasum files</li><li></li><li>&#09;$ shasum --help</li></ol></pre><span name="SYNOPSIS-(HMAC-SHA)"></span><h1>SYNOPSIS (HMAC-SHA)</h1><pre class="verbatim"><ol><li>&#09;&#09;<span class="c"># Functional interface only</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::SHA</span> <span class="q">qw(hmac_sha1 hmac_sha1_hex ...)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$digest</span> = <span class="i">hmac_sha1</span><span class="s">(</span><span class="i">$data</span><span class="cm">,</span> <span class="i">$key</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">hmac_sha224_hex</span><span class="s">(</span><span class="i">$data</span><span class="cm">,</span> <span class="i">$key</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$digest</span> = <span class="i">hmac_sha256_base64</span><span class="s">(</span><span class="i">$data</span><span class="cm">,</span> <span class="i">$key</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Digest/SHA.html
=over	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that this is the start of a list/indent region.  If there is any text following the &quot;=over&quot;, it must consist of only a nonzero positive numeral.  The semantics of this numeral is explained in the <span href="http://perldoc.perl.org/perlpodspec.html#About-%3dover...%3dback-Regions">About =over...=back Regions</span> section, further below.  Formatting codes are not expanded.  Examples:</p><pre class="verbatim"><ol><li>  =<span class="w">over</span> <span class="n">3</span></li><li></li><li>  =<span class="w">over</span> <span class="n">3.5</span></li><li></li><li>  =<span class="w">over</span></li></ol></pre></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dover%22
$, (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The output field separator for the print operator.  If defined, this value is printed between each of print&#39;s arguments.  Default is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>You cannot call <code class="inline"><span class="i">output_field_separator</span><span class="s">(</span><span class="s">)</span></code>  on a handle, only as a static method.  See <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p><p>Mnemonic: what is printed when there is a &quot;,&quot; in your print statement.</p></section>	http://perldoc.perl.org/perlvar.html#%24%2c
permission bits (definition)	A			Perl Glossary							<section class="prog__container"><p>Bits that the <b>owner</b> of a file sets or unsets to allow or disallow access to other people. These flag bits are part of the <b>mode</b> word returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> built-in when you ask about a file. On Unix systems, you can check the <i>ls</i>(1) manpage for more information.</p></section>	http://perldoc.perl.org/perlglossary.html#permission-bits
Invalid conversion in %s: "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W printf) Perl does not understand the given format conversion.  See <span href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-conversion-in-%25s%3a-%22%25s%22
F<filename>	A			Perl POD Formatting Codes							<section class="prog__container"><p>Typically displayed in italics.  Example: &quot;<code class="inline"><span class="w">F</span><span class="q">&lt;.cshrc&gt;</span></code> &quot;</p></section>	http://perldoc.perl.org/perlpod.html#F%3cfilename%3e----used-for-filenames
pattern matching (definition)	A			Perl Glossary							<section class="prog__container"><p>Taking a pattern, usually a <b>regular expression</b>, and trying the pattern various ways on a string to see whether there’s any way to make it fit. Often used to pick interesting tidbits out of a file.</p></section>	http://perldoc.perl.org/perlglossary.html#pattern-matching
variable interpolation (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>interpolation</b> of a scalar or array variable into a string.</p></section>	http://perldoc.perl.org/perlglossary.html#variable-interpolation
IO::Uncompress::Bunzip2 (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.bzip.org]]\n[[Compress::Bzip2]]					<section class="prog__container"><p>IO::Uncompress::Bunzip2 - Read bzip2 files/buffers</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::Bunzip2 qw(bunzip2 $Bunzip2Error) ;</li><li></li><li>    my $status = bunzip2 $input =&gt; $output [,OPTS]</li><li>        or die &quot;bunzip2 failed: $Bunzip2Error\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::Bunzip2 $input [OPTS] </li><li>        or die &quot;bunzip2 failed: $Bunzip2Error\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $Bunzip2Error ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/Bunzip2.html
B::Terse (module)	A			Perl Standard Modules							<section class="prog__container"><p>B::Terse - Walk Perl syntax tree, printing terse info about ops</p> <pre class="verbatim"><ol><li>&#09;<span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Terse</span><span class="s">[</span><span class="cm">,</span><span class="w">OPTIONS</span><span class="s">]</span> <span class="w">foo</span>.<span class="w">pl</span></li></ol></pre></section>	http://perldoc.perl.org/B/Terse.html
What if my question isn't answered in the FAQ?	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>Try the resources in <span href="http://perldoc.perl.org/perlfaq2.html">perlfaq2</span>.</p></section>	http://perldoc.perl.org/perlfaq.html#What-if-my-question-isn't-answered-in-the-FAQ%3f
How do I check whether input is ready on the keyboard?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>The easiest way to do this is to read a key in nonblocking mode with the <span href="http://search.cpan.org/perldoc/Term::ReadKey">Term::ReadKey</span> module from CPAN, passing it an argument of -1 to indicate not to block:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadKey</span><span class="sc">;</span></li><li></li><li>    <span class="i">ReadMode</span><span class="s">(</span><span class="q">&#39;cbreak&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$char</span> = <span class="i">ReadKey</span><span class="s">(</span><span class="n">-1</span><span class="s">)</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># input was waiting and it was $char</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="c"># no input was waiting</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">ReadMode</span><span class="s">(</span><span class="q">&#39;normal&#39;</span><span class="s">)</span><span class="sc">;</span>                  <span class="c"># restore normal tty settings</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-check-whether-input-is-ready-on-the-keyboard%3f
uc (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>uc EXPR<br>uc</pre><p>Returns an uppercased version of EXPR.  This is the internal function implementing the <code class="inline">\\<span class="w">U</span></code>  escape in double-quoted strings. It does not attempt to do titlecase mapping on initial letters.  See <span href="http://perldoc.perl.org/functions/ucfirst.html">ucfirst</span> for that.</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>This function behaves the same way under various pragma, such as in a locale, as <span href="http://perldoc.perl.org/functions/lc.html">lc</span> does.</p></section>	http://perldoc.perl.org/functions/uc.html
connect (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>connect SOCKET,NAME</pre><p>Attempts to connect to a remote socket, just like connect(2). Returns true if it succeeded, false otherwise.  NAME should be a packed address of the appropriate type for the socket.  See the examples in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p></section>	http://perldoc.perl.org/functions/connect.html
composer (definition)	A			Perl Glossary							<section class="prog__container"><p>A “constructor” for a <b>referent</b> that isn’t really an <b>object</b>, like an anonymous array or a hash (or a sonata, for that matter). For example, a pair of braces acts as a composer for a hash, and a pair of brackets acts as a composer for an array. See the section “Creating References” in Camel chapter 8, “References”.</p></section>	http://perldoc.perl.org/perlglossary.html#composer
Unary "!" operator	A			Perl Operators\nPerl Symbolic Unary Operators							<section class="prog__container">Unary &quot;!&quot; performs logical negation, that is, &quot;not&quot;. See also not for a lower precedence version of this.</section>	http://perldoc.perl.org/perlop.html#Symbolic-Unary-Operators
CPAN::Version (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Version - utility functions to compare CPAN versions</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">CPAN::Version</span><span class="sc">;</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;vgt</span><span class="s">(</span><span class="q">&quot;1.1&quot;</span><span class="cm">,</span><span class="q">&quot;1.1.1&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># 1 bc. 1.1 &gt; 1.001001</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;vlt</span><span class="s">(</span><span class="q">&quot;1.1&quot;</span><span class="cm">,</span><span class="q">&quot;1.1&quot;</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># 0 bc. 1.1 not &lt; 1.1</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;vcmp</span><span class="s">(</span><span class="q">&quot;1.1&quot;</span><span class="cm">,</span><span class="q">&quot;1.1.1&quot;</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># 1 bc. first is larger</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;vcmp</span><span class="s">(</span><span class="q">&quot;1.1.1&quot;</span><span class="cm">,</span><span class="q">&quot;1.1&quot;</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># -1 bc. first is smaller</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;readable</span><span class="s">(</span><span class="v">v1.2.3</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># &quot;v1.2.3&quot;</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;vstring</span><span class="s">(</span><span class="q">&quot;v1.2.3&quot;</span><span class="s">)</span><span class="sc">;</span>     <span class="c"># v1.2.3</span></li><li></li><li>  <span class="w">CPAN::Version</span><span class="w">-&gt;float2vv</span><span class="s">(</span><span class="n">1.002003</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># &quot;v1.2.3&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/CPAN/Version.html
sleep (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>sleep EXPR<br>sleep</pre><p>Causes the script to sleep for (integer) EXPR seconds, or forever if no  argument is given.  Returns the integer number of seconds actually slept.</p><p>May be interrupted if the process receives a signal such as <code class="inline"><span class="w">SIGALRM</span></code> .</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="w">ALARM</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Alarm!\\n&quot;</span> <span class="s">}</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="sc">;</span></li><li>    <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$@</span> unless <span class="i">$@</span> eq <span class="q">&quot;Alarm!\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>You probably cannot mix <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> calls, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> is often implemented using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span></code>.</p><p>On some older systems, it may sleep up to a full second less than what you requested, depending on how it counts seconds.  Most modern systems always sleep the full amount.  They may appear to sleep longer than that, however, because your process might not be scheduled right away in a busy multitasking system.</p><p>For delays of finer granularity than one second, the Time::HiRes module (from CPAN, and starting from Perl 5.8 part of the standard distribution) provides usleep().  You may also use Perl&#39;s four-argument version of select() leaving the first three arguments undefined, or you might be able to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> interface to access setitimer(2) if your system supports it.  See <span href="http://perldoc.perl.org/perlfaq8.html">perlfaq8</span> for details.</p><p>See also the POSIX module&#39;s <code class="inline"><span class="w">pause</span></code>  function.</p></section>	http://perldoc.perl.org/functions/sleep.html
exec (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>exec LIST<br>exec PROGRAM LIST</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> function executes a system command <i>and never returns</i>; use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> if you want it to return.  It fails and returns false only if the command does not exist <i>and</i> it is executed directly instead of via your system&#39;s command shell (see below).</p><p>Since it&#39;s a common mistake to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>, Perl warns you if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> is called in void context and if there is a following statement that isn&#39;t <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span></code> (if <code class="inline">-w</code>  is set--but you always do that, right?).  If you <i>really</i> want to follow an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> with some other statement, you can use one of these styles to avoid the warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">(</span><span class="q">&#39;foo&#39;</span><span class="s">)</span>   or <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;couldn&#39;t exec foo: $!&quot;</span><span class="sc">;</span></li><li>    <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">(</span><span class="q">&#39;foo&#39;</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;couldn&#39;t exec foo: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>If there is more than one argument in LIST, this calls execvp(3) with the arguments in LIST.  If there is only one element in LIST, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system&#39;s command shell for parsing (this is <code class="inline">/bin/sh -c</code> on Unix platforms, but varies on other platforms).  If there are no shell metacharacters in the argument, it is split into words and passed directly to <code class="inline"><span class="w">execvp</span></code> , which is more efficient.  Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&#39;/bin/echo&#39;</span><span class="cm">,</span> <span class="q">&#39;Your arguments are: &#39;</span><span class="cm">,</span> <span class="i">@ARGV</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&quot;sort $outfile | uniq&quot;</span><span class="sc">;</span></li></ol></pre><p>If you don&#39;t really want to execute the first argument, but want to lie to the program you are executing about its own name, you can specify the program you actually want to run as an &quot;indirect object&quot; (without a comma) in front of the LIST, as in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code> .  (This always forces interpretation of the LIST as a multivalued list, even if there is only a single scalar in the list.)  Example:</p><pre class="verbatim"><ol><li>    <span class="i">$shell</span> = <span class="q">&#39;/bin/csh&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">$shell</span> <span class="q">&#39;-sh&#39;</span><span class="sc">;</span>    <span class="c"># pretend it&#39;s a login shell</span></li></ol></pre><p>or, more directly,</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">{</span><span class="q">&#39;/bin/csh&#39;</span><span class="s">}</span> <span class="q">&#39;-sh&#39;</span><span class="sc">;</span>  <span class="c"># pretend it&#39;s a login shell</span></li></ol></pre><p>When the arguments get executed via the system shell, results are subject to its quirks and capabilities.  See <span href="http://perldoc.perl.org/perlop.html#%60STRING%60">`STRING` in perlop</span> for details.</p><p>Using an indirect object with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> is also more secure.  This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument.  That way you&#39;re safe from the shell expanding wildcards or splitting up words with whitespace in them.</p><pre class="verbatim"><ol><li>    <span class="i">@args</span> = <span class="s">(</span> <span class="q">&quot;echo surprise&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">@args</span><span class="sc">;</span>               <span class="c"># subject to shell escapes</span></li><li>                                <span class="c"># if @args == 1</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">{</span> <span class="i">$args</span>[<span class="n">0</span>] <span class="s">}</span> <span class="i">@args</span><span class="sc">;</span>  <span class="c"># safe even with one-arg list</span></li></ol></pre><p>The first version, the one without the indirect object, ran the <i>echo</i> program, passing it <code class="inline"><span class="q">&quot;surprise&quot;</span></code>  an argument.  The second version didn&#39;t; it tried to run a program named <i>&quot;echo surprise&quot;</i>, didn&#39;t find it, and set <code class="inline"><span class="i">$?</span></code>  to a non-zero value indicating failure.</p><p>On Windows, only the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code>  indirect object syntax will reliably avoid using the shell; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">LIST</span></code> , even with more than one element, will fall back to the shell if the first spawn fails.</p><p>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>). To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles to avoid lost output.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> will not call your <code class="inline">END</code>  blocks, nor will it invoke <code class="inline">DESTROY</code>  methods on your objects.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#exec">exec in perlport</span>.</p></section>	http://perldoc.perl.org/functions/exec.html
Invalid version object	A			Perl Diagnostics							<section class="prog__container"><p>(F) The internal structure of the version object was invalid. Perhaps the internals were modified directly in some way or an arbitrary reference was blessed into the &quot;version&quot; class.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-version-object
${^PREMATCH} (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>This is similar to <code class="inline"><span class="i">$`</span></code>  ($PREMATCH) except that it does not incur the performance penalty associated with that variable.</p><p>See <span href="http://perldoc.perl.org/perlvar.html#Performance-issues">Performance issues</span> above.</p><p>In Perl v5.18 and earlier, it is only guaranteed to return a defined value when the pattern was compiled or executed with the <code class="inline">/p</code> modifier.  In Perl v5.20, the <code class="inline">/p</code> modifier does nothing, so <code class="inline"><span class="i">$</span>{<span class="w">^PREMATCH</span>}</code>  does the same thing as <code class="inline"><span class="i">$PREMATCH</span></code> .</p><p>This variable was added in Perl v5.10.0.</p><p>This variable is read-only and dynamically-scoped.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5ePREMATCH%7d
atom (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>regular expression</b> component potentially matching a <b>substring</b> containing one or more characters and treated as an indivisible syntactic unit by any following <b>quantifier</b>. (Contrast with an <b>assertion</b> that matches something of <b>zero width</b> and may not be quantified.)</p></section>	http://perldoc.perl.org/perlglossary.html#atom
Redundant argument in %s	A			Perl Diagnostics							<section class="prog__container"><p>(W redundant) You called a function with more arguments than other arguments you supplied indicated would be needed.  Currently only emitted when a printf-type format required fewer arguments than were supplied, but might be used in the future for e.g. <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Redundant-argument-in-%25s
Eval-group not allowed, use re 'eval' in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A regular expression contained the <code class="inline">(?{ ... })</code> zero-width assertion, but that construct is only allowed when the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;eval&#39;</span></code>  pragma is in effect.  See <span href="http://perldoc.perl.org/perlre.html#(%3f%7b-code-%7d)">(?{ code }) in perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Eval-group-not-allowed%2c-use-re-'eval'-in-regex-m%2f%25s%2f
How do I cross-reference my Perl programs?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>The <span href="http://perldoc.perl.org/B/Xref.html">B::Xref</span> module can be used to generate cross-reference reports for Perl programs.</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Xref</span><span class="s">[</span><span class="cm">,</span><span class="w">OPTIONS</span><span class="s">]</span> <span class="w">scriptname</span>.<span class="w">plx</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq3.html#How-do-I-cross-reference-my-Perl-programs%3f
How do I pack arrays of doubles or floats for XS code?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The arrays.h/arrays.c code in the <span href="http://search.cpan.org/perldoc/PGPLOT">PGPLOT</span> module on CPAN does just this. If you&#39;re doing a lot of float or double processing, consider using the <span href="http://search.cpan.org/perldoc/PDL">PDL</span> module from CPAN instead--it makes number-crunching easy.</p><p>See <span href="http://search.cpan.org/dist/PGPLOT">http://search.cpan.org/dist/PGPLOT</span> for the code.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-pack-arrays-of-doubles-or-floats-for-XS-code%3f
$b (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>Special package variables when using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort()</span></code>, see <span href="http://perldoc.perl.org/functions/sort.html">sort</span>. Because of this specialness <code class="inline"><span class="i">$a</span></code>  and <code class="inline"><span class="i">$b</span></code>  don&#39;t need to be declared (using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vars</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our()</span></code>) even when using the <code class="inline"><span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code>  pragma.  Don&#39;t lexicalize them with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$a</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$b</span></code>  if you want to be able to use them in the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort()</span></code> comparison block or function.</p></section>	http://perldoc.perl.org/perlvar.html#%24b
first-come (definition)	A			Perl Glossary							<section class="prog__container"><p>The first <b>PAUSE</b> author to upload a <b>namespace</b> automatically becomes the <b>primary maintainer</b> for that namespace. The “first come” permissions distinguish a <b>primary maintainer</b> who was assigned that role from one who received it automatically.</p></section>	http://perldoc.perl.org/perlglossary.html#first-come
qr (function)	A			Perl Functions							<section class="prog__container"><pre>qr/STRING/</pre><p>Regexp-like quote.  See <span href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Regexp Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/qr.html
indexing (definition)	A			Perl Glossary							<section class="prog__container"><p>In olden days, the act of looking up a <b>key</b> in an actual index (such as a phone book). But now it&#39;s merely the act of using any kind of key or position to find the corresponding <b>value</b>, even if no index is involved. Things have degenerated to the point that Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/index.html">index</span></code> function merely locates the position (index) of one string in another.</p></section>	http://perldoc.perl.org/perlglossary.html#indexing
DBM_Filter::encode (module)	A			Perl Standard Modules		[[DBM_Filter]]\n[[perldbmfilter]]\n[[Encode]]					<section class="prog__container"><p>DBM_Filter::encode - filter for DBM_Filter</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, ODBM_File</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;encode&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;iso-8859-16&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter/encode.html
Net::protoent (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::protoent - by-name interface to Perl&#39;s built-in getproto*() functions</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::protoent</span><span class="sc">;</span></li><li> <span class="i">$p</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getprotobyname.html">getprotobyname</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="q">&#39;tcp&#39;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no proto&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;proto for %s is %d, aliases are %s\\n&quot;</span><span class="cm">,</span></li><li>    <span class="i">$p</span><span class="i">-&gt;name</span><span class="cm">,</span> <span class="i">$p</span><span class="i">-&gt;proto</span><span class="cm">,</span> <span class="q">&quot;@{$p-&gt;aliases}&quot;</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::protoent</span> <span class="q">qw(:FIELDS)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/getprotobyname.html">getprotobyname</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="q">&#39;tcp&#39;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no proto&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;proto for $p_name is $p_proto, aliases are @p_aliases\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/protoent.html
Memoize::ExpireTest (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::ExpireTest - test for Memoize expiration semantics</p> </section>	http://perldoc.perl.org/Memoize/ExpireTest.html
How can I free an array or hash so my program shrinks?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by Michael Carman)</p><p>You usually can&#39;t. Memory allocated to lexicals (i.e. my() variables) cannot be reclaimed or reused even if they go out of scope. It is reserved in case the variables come back into scope. Memory allocated to global variables can be reused (within your program) by using undef() and/or delete().</p><p>On most operating systems, memory allocated to a program can never be returned to the system. That&#39;s why long-running programs sometimes re- exec themselves. Some operating systems (notably, systems that use mmap(2) for allocating large chunks of memory) can reclaim memory that is no longer used, but on such systems, perl must be configured and compiled to use the OS&#39;s malloc, not perl&#39;s.</p><p>In general, memory allocation and de-allocation isn&#39;t something you can or should be worrying about much in Perl.</p><p>See also &quot;How can I make my Perl program take less memory?&quot;</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-free-an-array-or-hash-so-my-program-shrinks%3f
pod command (definition)	A			Perl Glossary							<section class="prog__container"><p>A sequence, such as <code class="inline"><span class="pd">=head1</span></code> , that denotes the start of a <b>pod</b> section.</p></section>	http://perldoc.perl.org/perlglossary.html#pod-command
tie (definition)	A			Perl Glossary							<section class="prog__container"><p>The bond between a magical variable and its implementation class. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function in Camel chapter 27, “Functions” and Camel chapter 14, “Tied Variables”.</p></section>	http://perldoc.perl.org/perlglossary.html#tie
getprotobynumber (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getprotobynumber NUMBER</pre>Get protocol record numeric protocol.</section>	http://perldoc.perl.org/functions/getprotobynumber.html
call by reference (definition)	A			Perl Glossary		[[call by value]]					<section class="prog__container"><p>An <b>argument</b>-passing mechanism in which the <b>formal arguments</b> refer directly to the <b>actual arguments</b>, and the <b>subroutine</b> can change the actual arguments by changing the formal arguments. That is, the formal argument is an <b>alias</b> for the actual argument. </p></section>	http://perldoc.perl.org/perlglossary.html#call-by-reference
v-string (definition)	A			Perl Glossary							<section class="prog__container"><p>A “version” or “vector” <b>string</b> specified with a <code class="inline"><span class="w">v</span></code>  followed by a series of decimal integers in dot notation, for instance, <code class="inline"><span class="v">v1.20.300.4000</span></code> . Each number turns into a <b>character</b> with the specified ordinal value. (The <code class="inline"><span class="w">v</span></code>  is optional when there are at least three integers.)</p></section>	http://perldoc.perl.org/perlglossary.html#v-string
evalbytes (function)	A			Perl Functions							<section class="prog__container"><pre>evalbytes EXPR<br>evalbytes</pre><p>This function is like <span href="http://perldoc.perl.org/functions/eval.html">eval</span> with a string argument, except it always parses its argument, or <code class="inline"><span class="i">$_</span></code>  if EXPR is omitted, as a string of bytes.  A string containing characters whose ordinal value exceeds 255 results in an error.  Source filters activated within the evaluated code apply to the code itself.</p><p>This function is only available under the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/evalbytes.html">evalbytes</span></code> feature, a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.16</span></code>  (or higher) declaration, or with a <code class="inline"><span class="w">CORE::</span></code>  prefix.  See <span href="http://perldoc.perl.org/feature.html">feature</span> for more information.</p></section>	http://perldoc.perl.org/functions/evalbytes.html
Might be a runaway multi-line %s string starting on line %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) An advisory indicating that the previous error may have been caused by a missing delimiter on a string or pattern, because it eventually ended earlier on the current line.</p></section>	http://perldoc.perl.org/perldiag.html#Might-be-a-runaway-multi-line-%25s-string-starting-on-line-%25d
exception handling (definition)	A			Perl Glossary							<section class="prog__container"><p>The way a program responds to an error. The exception-handling mechanism in Perl is the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> operator.</p></section>	http://perldoc.perl.org/perlglossary.html#exception-handling
App::Prove::State::Result::Test (module)	A			Perl Standard Modules							<section class="prog__container"><p>App::Prove::State::Result::Test - Individual test results.</p> <pre class="verbatim"><ol><li>    <span class="c"># Re-run failed tests</span></li><li>    <span class="i">$ prove</span> --<span class="w">state</span>=<span class="w">failed</span><span class="cm">,</span><span class="w">save</span> -<span class="w">rbv</span></li></ol></pre></section>	http://perldoc.perl.org/App/Prove/State/Result/Test.html
Invalid character in charnames alias definition; marked by <-- HERE in '%s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to create a custom alias for a character name, with the <code class="inline"><span class="j">:</span><span class="w">alias</span></code>  option to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span></code>  and the specified character in the indicated name isn&#39;t valid.  See <span href="http://perldoc.perl.org/charnames.html#CUSTOM-ALIASES">CUSTOM ALIASES in charnames</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-character-in-charnames-alias-definition%3b-marked-by-%3c---HERE-in-'%25s
Too late to run %s block	A			Perl Diagnostics							<section class="prog__container"><p>(W void) A CHECK or INIT block is being defined during run time proper, when the opportunity to run them has already passed.  Perhaps you are loading a file with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> when you should be using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> instead.  Or perhaps you should put the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> inside a BEGIN block.</p></section>	http://perldoc.perl.org/perldiag.html#Too-late-to-run-%25s-block
Sequence (?%s...) not recognized in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a regular expression extension that doesn&#39;t make sense. The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  This may happen when using the <code class="inline"><span class="s">(</span><span class="q">?^...)</span></code>  construct to tell Perl to use the default regular expression modifiers, and you redundantly specify a default modifier.  For other causes, see <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%25s...)-not-recognized-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Can't locate loadable object for module %s in @INC	A			Perl Diagnostics							<section class="prog__container"><p>(F) The module you loaded is trying to load an external library, like for example, <i>foo.so</i> or <i>bar.dll</i>, but the <span href="http://perldoc.perl.org/DynaLoader.html">DynaLoader</span> module was unable to locate this library.  See <span href="http://perldoc.perl.org/DynaLoader.html">DynaLoader</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-loadable-object-for-module-%25s-in-%40INC
Strings with code points over 0xFF may not be mapped into in-memory file handles	A			Perl Diagnostics							<section class="prog__container"><p>(W utf8) You tried to open a reference to a scalar for read or append where the scalar contained code points over 0xFF.  In-memory files model on-disk files and can only contain bytes.</p></section>	http://perldoc.perl.org/perldiag.html#Strings-with-code-points-over-0xFF-may-not-be-mapped-into-in-memory-file-handles
How can I access a dynamic variable while a similarly named lexical is in scope?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>If you know your package, you can just mention it explicitly, as in $Some_Pack::var. Note that the notation $::var is <b>not</b> the dynamic $var in the current package, but rather the one in the &quot;main&quot; package, as though you had written $main::var.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vars</span> <span class="q">&#39;$var&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$var</span> = <span class="q">&quot;global&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span>    <span class="i">$var</span> = <span class="q">&quot;lexical&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;lexical is $var\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;global  is $main::var\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Alternatively you can use the compiler directive our() to bring a dynamic variable into the current lexical scope.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5.006</span><span class="sc">;</span> <span class="c"># our() did not exist before 5.6</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vars</span> <span class="q">&#39;$var&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$var</span> = <span class="q">&quot;global&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span>    = <span class="q">&quot;lexical&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;lexical is $var\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$var</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;global  is $var\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-access-a-dynamic-variable-while-a-similarly-named-lexical-is-in-scope%3f
Argument list not closed for PerlIO layer "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W layer) When pushing a layer with arguments onto the Perl I/O system you forgot the ) that closes the argument list.  (Layers take care of transforming data between external and internal representations.)  Perl stopped parsing the layer list at this point and did not attempt to push this layer.  If your program didn&#39;t explicitly request the failing operation, it may be the result of the value of the environment variable PERLIO.</p></section>	http://perldoc.perl.org/perldiag.html#Argument-list-not-closed-for-PerlIO-layer-%22%25s%22
map (function)	A			Perl Functions\nPerl Functions for list data							<section class="prog__container"><pre>map BLOCK LIST<br>map EXPR,LIST</pre><p>Evaluates the BLOCK or EXPR for each element of LIST (locally setting <code class="inline"><span class="i">$_</span></code>  to each element) and returns the list value composed of the results of each such evaluation.  In scalar context, returns the total number of elements so generated.  Evaluates BLOCK or EXPR in list context, so each element of LIST may produce zero, one, or more elements in the returned value.</p><pre class="verbatim"><ol><li>    <span class="i">@chars</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/chr.html">chr</span><span class="cm">,</span> <span class="i">@numbers</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>translates a list of numbers to the corresponding characters.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@squares</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">$_</span> * <span class="i">$_</span> <span class="s">}</span> <span class="i">@numbers</span><span class="sc">;</span></li></ol></pre><p>translates a list of numbers to their squared values.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@squares</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">$_</span> &gt; <span class="n">5</span> ? <span class="s">(</span><span class="i">$_</span> * <span class="i">$_</span><span class="s">)</span> <span class="co">:</span> <span class="s">(</span><span class="s">)</span> <span class="s">}</span> <span class="i">@numbers</span><span class="sc">;</span></li></ol></pre><p>shows that number of returned elements can differ from the number of input elements.  To omit an element, return an empty list (). This could also be achieved by writing</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@squares</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">$_</span> * <span class="i">$_</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="i">$_</span> &gt; <span class="n">5</span> <span class="s">}</span> <span class="i">@numbers</span><span class="sc">;</span></li></ol></pre><p>which makes the intention more clear.</p><p>Map always returns a list, which can be assigned to a hash such that the elements become key/value pairs.  See <span href="http://perldoc.perl.org/perldata.html">perldata</span> for more details.</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">get_a_key_for</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="cm">=&gt;</span> <span class="i">$_</span> <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>is just a funny way to write</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    foreach <span class="s">(</span><span class="i">@array</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$hash</span>{<span class="i">get_a_key_for</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span>} = <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that <code class="inline"><span class="i">$_</span></code>  is an alias to the list value, so it can be used to modify the elements of the LIST.  While this is useful and supported, it can cause bizarre results if the elements of LIST are not variables. Using a regular <code class="inline">foreach</code>  loop for this purpose would be clearer in most cases.  See also <span href="http://perldoc.perl.org/functions/grep.html">grep</span> for an array composed of those items of the original list for which the BLOCK or EXPR evaluates to true.</p><p>If <code class="inline"><span class="i">$_</span></code>  is lexical in the scope where the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> appears (because it has been declared with the deprecated <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span></code>  construct), then, in addition to being locally aliased to the list elements, <code class="inline"><span class="i">$_</span></code>  keeps being lexical inside the block; that is, it can&#39;t be seen from the outside, avoiding any potential side-effects.</p><p><code class="inline">{</code> starts both hash references and blocks, so <code class="inline">map { ...</code> could be either the start of map BLOCK LIST or map EXPR, LIST.  Because Perl doesn&#39;t look ahead for the closing <code class="inline">}</code> it has to take a guess at which it&#39;s dealing with based on what it finds just after the <code class="inline">{</code>.  Usually it gets it right, but if it doesn&#39;t it won&#39;t realize something is wrong until it gets to the <code class="inline">}</code> and encounters the missing (or unexpected) comma.  The syntax error will be reported close to the <code class="inline">}</code>, but you&#39;ll need to change something near the <code class="inline">{</code> such as using a unary <code class="inline">+</code>  or semicolon to give Perl some help:</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span>  <span class="q">&quot;\\L$_&quot;</span> <span class="cm">=&gt;</span> <span class="n">1</span>  <span class="s">}</span> <span class="i">@array</span> <span class="c"># perl guesses EXPR. wrong</span></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> +<span class="q">&quot;\\L$_&quot;</span> <span class="cm">=&gt;</span> <span class="n">1</span>  <span class="s">}</span> <span class="i">@array</span> <span class="c"># perl guesses BLOCK. right</span></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span><span class="sc">;</span> <span class="q">&quot;\\L$_&quot;</span> <span class="cm">=&gt;</span> <span class="n">1</span>  <span class="s">}</span> <span class="i">@array</span> <span class="c"># this also works</span></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="s">(</span><span class="q">&quot;\\L$_&quot;</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="s">)</span> <span class="s">}</span> <span class="i">@array</span> <span class="c"># as does this</span></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span>  <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="cm">=&gt;</span> <span class="n">1</span>  <span class="s">}</span> <span class="i">@array</span> <span class="c"># and this.</span></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> +<span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="cm">,</span> <span class="i">@array</span> <span class="c"># this is EXPR and works!</span></li><li></li><li>    %<span class="w">hash</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span>  <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="cm">,</span> <span class="n">1</span> <span class="s">)</span><span class="cm">,</span>   <span class="i">@array</span> <span class="c"># evaluates to (1, @array)</span></li></ol></pre><p>or to force an anon hash constructor use <code class="inline">+{</code>:</p><pre class="verbatim"><ol><li>    <span class="i">@hashes</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> +<span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/lc.html">lc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span> <span class="i">@array</span> <span class="c"># EXPR, so needs</span></li><li>                                           <span class="c"># comma at end</span></li></ol></pre><p>to get a list of anonymous hashes each with only one entry apiece.</p></section>	http://perldoc.perl.org/functions/map.html
Too many arguments for subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) A subroutine using a signature received more arguments than required by the signature.  The caller of the subroutine is presumably at fault. Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</p></section>	http://perldoc.perl.org/perldiag.html#Too-many-arguments-for-subroutine
<> at require-statement should be quotes	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&lt;file&gt;</span></code>  when you should have written <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;file&#39;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#%3c%3e-at-require-statement-should-be-quotes
Number with no digits	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was looking for a number but found nothing that looked like a number.  This happens, for example with <code class="inline">\\<span class="w">o</span><span class="s">{</span><span class="s">}</span></code> , with no number between the braces.</p></section>	http://perldoc.perl.org/perldiag.html#Number-with-no-digits
POSIX syntax [%c %c] belongs inside character classes in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) The character class constructs [: :], [= =], and [. .]  go <i>inside</i> character classes, the [] are part of the construct, for example: /[012[:alpha:]345]/.  Note that [= =] and [. .] are not currently implemented; they are simply placeholders for future extensions and will cause fatal errors.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#POSIX-syntax-%5b%25c-%25c%5d-belongs-inside-character-classes-in-regex%3b-marked-by--%3c---HERE-in-m%2f%25s%2f
Why do regex character classes sometimes match only in the ASCII range?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Starting in Perl 5.14 (and partially in Perl 5.12), just put a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;unicode_strings&#39;</span></code>  near the beginning of your program. Within its lexical scope you shouldn&#39;t have this problem.  It also is automatically enabled under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;:5.12&#39;</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.12</span></code>  or using <code class="inline">-<span class="w">E</span></code>  on the command line for Perl 5.12 or higher.</p><p>The rationale for requiring this is to not break older programs that rely on the way things worked before Unicode came along.  Those older programs knew only about the ASCII character set, and so may not work properly for additional characters.  When a string is encoded in UTF-8, Perl assumes that the program is prepared to deal with Unicode, but when the string isn&#39;t, Perl assumes that only ASCII is wanted, and so those characters that are not ASCII characters aren&#39;t recognized as to what they would be in Unicode. <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&#39;unicode_strings&#39;</span></code>  tells Perl to treat all characters as Unicode, whether the string is encoded in UTF-8 or not, thus avoiding the problem.</p><p>However, on earlier Perls, or if you pass strings to subroutines outside the feature&#39;s scope, you can force Unicode rules by changing the encoding to UTF-8 by doing <code class="inline"><span class="i">utf8::upgrade</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span></code> . This can be used safely on any string, as it checks and does not change strings that have already been upgraded.</p><p>For a more detailed discussion, see <span href="http://search.cpan.org/perldoc/Unicode::Semantics">Unicode::Semantics</span> on CPAN.</p></section>	http://perldoc.perl.org/perlunifaq.html#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f
Malformed UTF-8 string in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to pack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-string-in-pack
named pipe (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>pipe</b> with a name embedded in the <b>filesystem</b> so that it can be accessed by two unrelated <b>processes</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#named-pipe
stat() on unopened filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to use the stat() function on a filehandle that was either never opened or has since been closed.</p></section>	http://perldoc.perl.org/perldiag.html#stat()-on-unopened-filehandle-%25s
Using /u for '%s' instead of /%s in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used a Unicode boundary (<code class="inline">\\<span class="i">b</span><span class="s">{</span>...<span class="s">}</span></code>  or <code class="inline">\\<span class="i">B</span><span class="s">{</span>...<span class="s">}</span></code> ) in a portion of a regular expression where the character set modifiers <code class="inline"><span class="q">/a</span></code>  or <code class="inline"><span class="q">/aa</span></code>  are in effect.  These two modifiers indicate an ASCII interpretation, and this doesn&#39;t make sense for a Unicode defintion. The generated regular expression will compile so that the boundary uses all of Unicode.  No other portion of the regular expression is affected.</p></section>	http://perldoc.perl.org/perldiag.html#Using-%2fu-for-'%25s'-instead-of-%2f%25s-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Why don't Perl one-liners work on my DOS/Mac/VMS system?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>The problem is usually that the command interpreters on those systems have rather different ideas about quoting than the Unix shells under which the one-liners were created. On some systems, you may have to change single-quotes to double ones, which you must <i>NOT</i> do on Unix or Plan9 systems. You might also have to change a single % to a %%.</p><p>For example:</p><pre class="verbatim"><ol><li>    # Unix (including Mac OS X)</li><li>    perl -e &#39;print &quot;Hello world\\n&quot;&#39;</li><li></li><li>    # DOS, etc.</li><li>    perl -e &quot;print \\&quot;Hello world\\n\\&quot;&quot;</li><li></li><li>    # Mac Classic</li><li>    print &quot;Hello world\\n&quot;</li><li>     (then Run &quot;Myscript&quot; or Shift-Command-R)</li><li></li><li>    # MPW</li><li>    perl -e &#39;print &quot;Hello world\\n&quot;&#39;</li><li></li><li>    # VMS</li><li>    perl -e &quot;print &quot;&quot;Hello world\\n&quot;&quot;&quot;</li></ol></pre><p>The problem is that none of these examples are reliable: they depend on the command interpreter. Under Unix, the first two often work. Under DOS, it&#39;s entirely possible that neither works. If 4DOS was the command shell, you&#39;d probably have better luck like this:</p><pre class="verbatim"><ol><li>  perl -e &quot;print &lt;Ctrl-x&gt;&quot;Hello world\\n&lt;Ctrl-x&gt;&quot;&quot;</li></ol></pre><p>Under the Mac, it depends which environment you are using. The MacPerl shell, or MPW, is much like Unix shells in its support for several quoting variants, except that it makes free use of the Mac&#39;s non-ASCII characters as control characters.</p><p>Using qq(), q(), and qx(), instead of &quot;double quotes&quot;, &#39;single quotes&#39;, and `backticks`, may make one-liners easier to write.</p><p>There is no general solution to all of this. It is a mess.</p><p>[Some of this answer was contributed by Kenneth Albanowski.]</p></section>	http://perldoc.perl.org/perlfaq3.html#Why-don't-Perl-one-liners-work-on-my-DOS%2fMac%2fVMS-system%3f
-t	A			Perl Command-Line Switches							<section class="prog__container"><p>Like <b>-T</b>, but taint checks will issue warnings rather than fatal errors.  These warnings can now be controlled normally with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">qw(taint)</span></code> .</p><p><b>Note: This is not a substitute for <code class="inline">-T</code> !</b> This is meant to be used <i>only</i> as a temporary development aid while securing legacy code: for real production code and for new secure code written from scratch, always use the real <b>-T</b>.</p></section>	http://perldoc.perl.org/perlrun.html#*-t*
$; (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The subscript separator for multidimensional array emulation.  If you refer to a hash element as</p><pre class="verbatim"><ol><li>    <span class="i">$foo</span>{<span class="i">$x</span><span class="cm">,</span><span class="i">$y</span><span class="cm">,</span><span class="i">$z</span>}</li></ol></pre><p>it really means</p><pre class="verbatim"><ol><li>    <span class="i">$foo</span>{<span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="i">$;</span><span class="cm">,</span> <span class="i">$x</span><span class="cm">,</span> <span class="i">$y</span><span class="cm">,</span> <span class="i">$z</span><span class="s">)</span>}</li></ol></pre><p>But don&#39;t put</p><pre class="verbatim"><ol><li>    <span class="i">@foo</span>{<span class="i">$x</span><span class="cm">,</span><span class="i">$y</span><span class="cm">,</span><span class="i">$z</span>}&#09;<span class="c"># a slice--note the @</span></li></ol></pre><p>which means</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$foo</span>{<span class="i">$x</span>}<span class="cm">,</span><span class="i">$foo</span>{<span class="i">$y</span>}<span class="cm">,</span><span class="i">$foo</span>{<span class="i">$z</span>}<span class="s">)</span></li></ol></pre><p>Default is &quot;\\034&quot;, the same as SUBSEP in <b>awk</b>.  If your keys contain binary data there might not be any safe value for <code class="inline"><span class="i">$;</span></code> .</p><p>Consider using &quot;real&quot; multidimensional arrays as described in <span href="http://perldoc.perl.org/perllol.html">perllol</span>.</p><p>Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3b
splice() offset past end of array	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You attempted to specify an offset that was past the end of the array passed to splice().  Splicing will instead commence at the end of the array, rather than past it.  If this isn&#39;t what you want, try explicitly pre-extending the array by assigning $#array = $offset. See <span href="http://perldoc.perl.org/functions/splice.html">splice</span>.</p></section>	http://perldoc.perl.org/perldiag.html#splice()-offset-past-end-of-array
Use of state $_ is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::lexical_topic) Lexical $_ is an experimental feature and its behavior may change or even be removed in any future release of perl. See the explanation under <span href="http://perldoc.perl.org/perlvar.html#%24_">$_ in perlvar</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-state-%24_-is-experimental
print() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re printing on got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#print()-on-closed-filehandle-%25s
Pern (definition)	A			Perl Glossary							<section class="prog__container"><p>What you get when you do <code class="inline"><span class="w">Perl</span>++</code>  twice. Doing it only once will curl your hair. You have to increment it eight times to shampoo your hair. Lather, rinse, iterate.</p></section>	http://perldoc.perl.org/perlglossary.html#Pern
Passing malformed UTF-8 to "%s" is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, utf8) This message indicates a bug either in the Perl core or in XS code.  Such code was trying to find out if a character, allegedly stored internally encoded as UTF-8, was of a given type, such as being punctuation or a digit.  But the character was not encoded in legal UTF-8.  The <code class="inline"><span class="i">%s</span></code>  is replaced by a string that can be used by knowledgeable people to determine what the type being checked against was.  If <code class="inline"><span class="w">utf8</span></code>  warnings are enabled, a further message is raised, giving details of the malformation.</p></section>	http://perldoc.perl.org/perldiag.html#Passing-malformed-UTF-8-to-%22%25s%22-is-deprecated
DB_File (module)	A			Perl Standard Modules		[[perl]]\n[[perldbmfilter]]					<section class="prog__container"><p>DB_File - Perl5 access to Berkeley DB version 1.x</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DB_File</span><span class="sc">;</span></li><li></li><li> <span class="s">[</span><span class="i">$X</span> =<span class="s">]</span> <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span>  <span class="q">&#39;DB_File&#39;</span><span class="cm">,</span> <span class="s">[</span><span class="i">$filename</span><span class="cm">,</span> <span class="i">$flags</span><span class="cm">,</span> <span class="i">$mode</span><span class="cm">,</span> <span class="i">$DB_HASH</span><span class="s">]</span> <span class="sc">;</span></li><li> <span class="s">[</span><span class="i">$X</span> =<span class="s">]</span> <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span>  <span class="q">&#39;DB_File&#39;</span><span class="cm">,</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$flags</span><span class="cm">,</span> <span class="i">$mode</span><span class="cm">,</span> <span class="i">$DB_BTREE</span> <span class="sc">;</span></li><li> <span class="s">[</span><span class="i">$X</span> =<span class="s">]</span> <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">@array</span><span class="cm">,</span> <span class="q">&#39;DB_File&#39;</span><span class="cm">,</span> <span class="i">$filename</span><span class="cm">,</span> <span class="i">$flags</span><span class="cm">,</span> <span class="i">$mode</span><span class="cm">,</span> <span class="i">$DB_RECNO</span> <span class="sc">;</span></li><li></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;del</span><span class="s">(</span><span class="i">$key</span> [<span class="cm">,</span> <span class="i">$flags</span>]<span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;put</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span> [<span class="cm">,</span> <span class="i">$flags</span>]<span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;get</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span> [<span class="cm">,</span> <span class="i">$flags</span>]<span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;seq</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="cm">,</span> <span class="i">$flags</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;sync</span><span class="s">(</span><span class="s">[</span><span class="i">$flags</span><span class="s">]</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;fd</span> <span class="sc">;</span></li><li></li><li> <span class="c"># BTREE only</span></li><li> <span class="i">$count</span> = <span class="i">$X</span><span class="i">-&gt;get_dup</span><span class="s">(</span><span class="i">$key</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">@list</span>  = <span class="i">$X</span><span class="i">-&gt;get_dup</span><span class="s">(</span><span class="i">$key</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">%list</span>  = <span class="i">$X</span><span class="i">-&gt;get_dup</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;find_dup</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$status</span> = <span class="i">$X</span><span class="i">-&gt;del_dup</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li> <span class="c"># RECNO only</span></li><li> <span class="i">$a</span> = <span class="i">$X</span><span class="i">-&gt;length</span><span class="sc">;</span></li><li> <span class="i">$a</span> = <span class="i">$X</span><span class="i">-&gt;pop</span> <span class="sc">;</span></li><li> <span class="i">$X</span><span class="i">-&gt;push</span><span class="s">(</span><span class="w">list</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$a</span> = <span class="i">$X</span><span class="i">-&gt;shift</span><span class="sc">;</span></li><li> <span class="i">$X</span><span class="i">-&gt;unshift</span><span class="s">(</span><span class="w">list</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">@r</span> = <span class="i">$X</span><span class="i">-&gt;splice</span><span class="s">(</span><span class="w">offset</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="cm">,</span> <span class="w">elements</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="c"># DBM Filters</span></li><li> <span class="i">$old_filter</span> = <span class="i">$db</span><span class="i">-&gt;filter_store_key</span>  <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span> <span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$old_filter</span> = <span class="i">$db</span><span class="i">-&gt;filter_store_value</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span> <span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$old_filter</span> = <span class="i">$db</span><span class="i">-&gt;filter_fetch_key</span>  <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span> <span class="s">)</span> <span class="sc">;</span></li><li> <span class="i">$old_filter</span> = <span class="i">$db</span><span class="i">-&gt;filter_fetch_value</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> ... <span class="s">}</span> <span class="s">)</span> <span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="i">%hash</span> <span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span> <span class="i">@array</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DB_File.html
How do I process each word on each line?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Use the split function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$word</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="c"># do something with $word here</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that this isn&#39;t really a word in the English sense; it&#39;s just chunks of consecutive non-whitespace characters.</p><p>To work with only alphanumeric sequences (including underscores), you might consider</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$word</span> <span class="s">(</span><span class="q">m/(\\w+)/g</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="c"># do something with $word here</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#How-do-I-process-each-word-on-each-line%3f
Can't remove %s: %s, skipping file	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) You requested an inplace edit without creating a backup file.  Perl was unable to remove the original file to replace it with the modified file.  The file was left unmodified.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-remove-%25s%3a-%25s%2c-skipping-file
closedir (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>closedir DIRHANDLE</pre><p>Closes a directory opened by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/opendir.html">opendir</span></code> and returns the success of that system call.</p></section>	http://perldoc.perl.org/functions/closedir.html
How do I create a class?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>In Perl, a class is just a package, and methods are just subroutines. Perl doesn&#39;t get more formal than that and lets you set up the package just the way that you like it (that is, it doesn&#39;t set up anything for you).</p><p>See also <span href="http://perldoc.perl.org/perlootut.html">perlootut</span>, a tutorial that covers class creation, and <span href="http://perldoc.perl.org/perlobj.html">perlobj</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-create-a-class%3f
ExtUtils::MakeMaker::Tutorial (module)	A			Perl Standard Modules		[[perlmodstyle]]\n[[perlnewmod]]\n[[ExtUtils::ModuleMaker]]\n[[Module::Install]]\n[[PAR]]					<section class="prog__container"><p>ExtUtils::MakeMaker::Tutorial - Writing a module with MakeMaker</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MakeMaker</span><span class="sc">;</span></li><li></li><li>    <span class="i">WriteMakefile</span><span class="s">(</span></li><li>        <span class="w">NAME</span>            <span class="cm">=&gt;</span> <span class="q">&#39;Your::Module&#39;</span><span class="cm">,</span></li><li>        <span class="w">VERSION_FROM</span>    <span class="cm">=&gt;</span> <span class="q">&#39;lib/Your/Module.pm&#39;</span></li><li>    <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MakeMaker/Tutorial.html
switch statement (definition)	A			Perl Glossary							<section class="prog__container"><p>A program technique that lets you evaluate an <b>expression</b> and then, based on the value of the expression, do a multiway branch to the appropriate piece of code for that value. Also called a “case structure”, named after the similar Pascal construct. Most switch statements in Perl are spelled <code class="inline">given</code> . See “The <code class="inline">given</code>  statement” in Camel chapter 4, “Statements and Declarations”.</p></section>	http://perldoc.perl.org/perlglossary.html#switch-statement
Invalid strict version format (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) A version number did not meet the &quot;strict&quot; criteria for versions. A &quot;strict&quot; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading &#39;v&#39; character and at least three components. The parenthesized text indicates which criteria were not met. See the <span href="http://perldoc.perl.org/version.html">version</span> module for more details on allowed version formats.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-strict-version-format-(%25s)
network address (definition)	A			Perl Glossary		[[port]]					<section class="prog__container"><p>The most important attribute of a socket, like your telephone’s telephone number. Typically an IP address. </p></section>	http://perldoc.perl.org/perlglossary.html#network-address
Semicolon seems to be missing	A			Perl Diagnostics							<section class="prog__container"><p>(W semicolon) A nearby syntax error was probably caused by a missing semicolon, or possibly some other missing operator, such as a comma.</p></section>	http://perldoc.perl.org/perldiag.html#Semicolon-seems-to-be-missing
pop on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#pop-on-reference-is-experimental
ExtUtils::MakeMaker::Config (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MakeMaker::Config - Wrapper around Config.pm</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MakeMaker::Config</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$Config</span>{<span class="w">installbin</span>}<span class="sc">;</span>  <span class="c"># or whatever</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MakeMaker/Config.html
null list (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>list value</b> with zero elements, represented in Perl by <code class="inline"><span class="s">(</span><span class="s">)</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#null-list
UID (definition)	A			Perl Glossary							<section class="prog__container"><p>A user ID. Often used in the context of <b>file</b> or <b>process</b> ownership.</p></section>	http://perldoc.perl.org/perlglossary.html#UID
interface (definition)	A			Perl Glossary							<section class="prog__container"><p>The services a piece of code promises to provide forever, in contrast to its <b>implementation</b>, which it should feel free to change whenever it likes.</p></section>	http://perldoc.perl.org/perlglossary.html#interface
destination: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error occurred during the implicit output invoked by the <code class="inline">-p</code>  command-line switch.  (This output goes to STDOUT unless you&#39;ve redirected it with select().)</p></section>	http://perldoc.perl.org/perldiag.html#-p-destination%3a-%25s
WYSIWYG (definition)	A			Perl Glossary							<section class="prog__container"><p>What You See Is What You Get. Usually used when something that appears on the screen matches how it will eventually look, like Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/format.html">format</span></code> declarations. Also used to mean the opposite of magic because everything works exactly as it appears, as in the three- argument form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>.</p></section>	http://perldoc.perl.org/perlglossary.html#WYSIWYG
metasymbol (definition)	A			Perl Glossary							<section class="prog__container"><p>Something we’d call a <b>metacharacter</b> except that it’s a sequence of more than one character. Generally, the first character in the sequence must be a true metacharacter to get the other characters in the metasymbol to misbehave along with it.</p></section>	http://perldoc.perl.org/perlglossary.html#metasymbol
Can't call method "%s" without a package or object reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used the syntax of a method call, but the slot filled by the object reference or package name contains an expression that returns a defined value which is neither an object reference nor a package name. Something like this will reproduce the error:</p><pre class="verbatim"><ol><li>    <span class="i">$BADREF</span> = <span class="n">42</span><span class="sc">;</span></li><li>    <span class="w">process</span> <span class="i">$BADREF</span> <span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="sc">;</span></li><li>    <span class="i">$BADREF</span><span class="i">-&gt;process</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Can't-call-method-%22%25s%22-without-a-package-or-object-reference
Unexpected ')' in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ ( \\p{Digit} + ) ])</span></li></ol></pre><p>The <code class="inline"><span class="q">&quot;)&quot;</span></code>  is out-of-place.  Something apparently was supposed to be combined with the digits, or the <code class="inline"><span class="q">&quot;+&quot;</span></code>  shouldn&#39;t be there, or something like that.  Perl can&#39;t figure out what was intended.</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-')'-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Useless (?%s) - use /%s modifier in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You have used an internal modifier such as (?o) that has no meaning unless applied to the entire regexp:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$string</span> =~ <span class="q">/(?o)$pattern/</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>must be written as</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$string</span> =~ <span class="q">/$pattern/o</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-(%3f%25s)---use-%2f%25s-modifier-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
=back	A			Perl POD Commands							<section class="prog__container"><p>This command indicates that this is the end of the region begun by the most recent &quot;=over&quot; command.  It permits no text after the &quot;=back&quot; command.</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dback%22
Switch condition not recognized in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The condition part of a (?(condition)if-clause|else-clause) construct is not known.  The condition must be one of the following:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">(</span><span class="n">2</span><span class="s">)</span> ...        <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="n">1</span><span class="w">st</span><span class="cm">,</span> <span class="n">2</span><span class="w">nd</span><span class="cm">,</span> <span class="w">etc</span>.<span class="cm">,</span> <span class="w">capture</span> <span class="i">matched</span></li><li> <span class="s">(</span><span class="q">&lt;NAME&gt;</span><span class="s">)</span> <span class="s">(</span><span class="q">&#39;NAME&#39;</span><span class="s">)</span>  <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">named</span> <span class="w">capture</span> <span class="i">matched</span></li><li> <span class="s">(</span><span class="q">?=...) (?</span>&lt;=...<span class="s">)</span>   <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">subpattern</span> <span class="i">matches</span></li><li> <span class="s">(</span><span class="q">?!...) (?</span>&lt;!...<span class="s">)</span>   <span class="w">true</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">subpattern</span> <span class="w">fails</span> <span class="w">to</span> <span class="i">match</span></li><li> <span class="s">(</span><span class="q">?{ CODE })        true if code returns a true value</span></li><li> <span class="q"> (R)                true if evaluating inside recursion</span></li><li> <span class="q"> (R1) (R2) ...      true if directly inside capture group 1, 2, etc.</span></li><li> <span class="q"> (R&amp;NAME)           true if directly inside named capture</span></li><li> <span class="q"> (DEFINE)           always false; for defining named subpatterns</span></li></ol></pre><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Switch-condition-not-recognized-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
POSIX (module)	A			Perl Standard Modules							<section class="prog__container"><p>POSIX - Perl interface to IEEE Std 1003.1</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(setsid)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(:errno_h :fcntl_h)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;EINTR is %d\\n&quot;</span><span class="cm">,</span> <span class="w">EINTR</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sess_id</span> = <span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fd</span> = <span class="i">POSIX::open</span><span class="s">(</span><span class="i">$path</span><span class="cm">,</span> <span class="w">O_CREAT</span>|<span class="w">O_EXCL</span>|<span class="w">O_WRONLY</span><span class="cm">,</span> <span class="n">0644</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="c"># note: that&#39;s a filedescriptor, *NOT* a filehandle</span></li></ol></pre></section>	http://perldoc.perl.org/POSIX.html
Unsupported socket function "%s" called	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t support the Berkeley socket mechanism, or at least that&#39;s what Configure thought.</p></section>	http://perldoc.perl.org/perldiag.html#Unsupported-socket-function-%22%25s%22-called
character class (definition)	A			Perl Glossary							<section class="prog__container"><p>A square-bracketed list of characters used in a <b>regular expression</b> to indicate that any character of the set may occur at a given point. Loosely, any predefined set of characters so used.</p></section>	http://perldoc.perl.org/perlglossary.html#character-class
Digest::MD5 (module)	A			Perl Standard Modules		[[Digest]]\n[[Digest::MD2]]\n[[Digest::SHA]]\n[[Digest::HMAC]]\n[[http://en.wikipedia.org/wiki/MD5]]					<section class="prog__container"><p>Digest::MD5 - Perl interface to the MD5 Algorithm</p> <pre class="verbatim"><ol><li> <span class="c"># Functional style</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::MD5</span> <span class="q">qw(md5 md5_hex md5_base64)</span><span class="sc">;</span></li><li></li><li> <span class="i">$digest</span> = <span class="i">md5</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$digest</span> = <span class="i">md5_hex</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$digest</span> = <span class="i">md5_base64</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="c"># OO style</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::MD5</span><span class="sc">;</span></li><li></li><li> <span class="i">$ctx</span> = <span class="w">Digest::MD5</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li></li><li> <span class="i">$ctx</span><span class="i">-&gt;add</span><span class="s">(</span><span class="i">$data</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$ctx</span><span class="i">-&gt;addfile</span><span class="s">(</span><span class="i">$file_handle</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="i">$digest</span> = <span class="i">$ctx</span><span class="i">-&gt;digest</span><span class="sc">;</span></li><li> <span class="i">$digest</span> = <span class="i">$ctx</span><span class="i">-&gt;hexdigest</span><span class="sc">;</span></li><li> <span class="i">$digest</span> = <span class="i">$ctx</span><span class="i">-&gt;b64digest</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Digest/MD5.html
${^TAINT} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>Reflects if taint mode is on or off.  1 for on (the program was run with <b>-T</b>), 0 for off, -1 when only taint warnings are enabled (i.e. with <b>-t</b> or <b>-TU</b>).</p><p>This variable is read-only.</p><p>This variable was added in Perl v5.8.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eTAINT%7d
Locale::Currency (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Currency - standard codes for currency identification</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Currency</span><span class="sc">;</span></li><li></li><li>    <span class="i">$curr</span> = <span class="i">code2currency</span><span class="s">(</span><span class="q">&#39;usd&#39;</span><span class="s">)</span><span class="sc">;</span>     <span class="c"># $curr gets &#39;US Dollar&#39;</span></li><li>    <span class="i">$code</span> = <span class="i">currency2code</span><span class="s">(</span><span class="q">&#39;Euro&#39;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># $code gets &#39;eur&#39;</span></li><li></li><li>    <span class="i">@codes</span>   = <span class="i">all_currency_codes</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@names</span>   = <span class="i">all_currency_names</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Currency.html
Attempt to free non-arena SV: 0x%x	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) All SV objects are supposed to be allocated from arenas that will be garbage collected on exit.  An SV was discovered to be outside any of those arenas.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-free-non-arena-SV%3a-0x%25x
increment (definition)	A			Perl Glossary							<section class="prog__container"><p>To increase the value of something by 1 (or by some other number, if so specified).</p></section>	http://perldoc.perl.org/perlglossary.html#increment
Time::tm (module)	A			Perl Standard Modules							<section class="prog__container"><p>Time::tm - internal object used by Time::gmtime and Time::localtime</p> <p>Don&#39;t use this module directly.</p></section>	http://perldoc.perl.org/Time/tm.html
TMTOWTDI (definition)	A			Perl Glossary							<section class="prog__container"><p>There’s More Than One Way To Do It, the Perl Motto. The notion that there can be more than one valid path to solving a programming problem in context. (This doesn’t mean that more ways are always better or that all possible paths are equally desirable—just that there need not be One True Way.)</p></section>	http://perldoc.perl.org/perlglossary.html#TMTOWTDI
setpgrp can't take arguments	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your system has the setpgrp() from BSD 4.2, which takes no arguments, unlike POSIX setpgid(), which takes a process ID and process group ID.</p></section>	http://perldoc.perl.org/perldiag.html#setpgrp-can't-take-arguments
RTFM (definition)	A			Perl Glossary							<section class="prog__container"><p>What you are told when someone thinks you should Read The Fine Manual.</p></section>	http://perldoc.perl.org/perlglossary.html#RTFM
Duplicate free() ignored	A			Perl Diagnostics							<section class="prog__container"><p>(S malloc) An internal routine called free() on something that had already been freed.</p></section>	http://perldoc.perl.org/perldiag.html#Duplicate-free()-ignored
LIST (definition)	A			Perl Glossary							<section class="prog__container"><p>A syntactic construct representing a comma- separated list of expressions, evaluated to produce a <b>list value</b>. Each <b>expression</b> in a <i><code class="inline"><span class="w">LIST</span></code> </i> is evaluated in <b>list context</b> and interpolated into the list value.</p></section>	http://perldoc.perl.org/perlglossary.html#LIST
What is Perl 6?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Perl 6 was <i>originally</i> described as the community&#39;s rewrite of Perl 5. Development started in 2002; syntax and design work continue to this day. As the language has evolved, it has become clear that it is a separate language, incompatible with Perl 5 but in the same language family.</p><p>Contrary to popular belief, Perl 6 and Perl 5 peacefully coexist with one another. Perl 6 has proven to be a fascinating source of ideas for those using Perl 5 (the <span href="http://search.cpan.org/perldoc/Moose">Moose</span> object system is a well-known example). There is overlap in the communities, and this overlap fosters the tradition of sharing and borrowing that have been instrumental to Perl&#39;s success. The current leading implementation of Perl 6 is Rakudo, and you can learn more about it at <span href="http://rakudo.org">http://rakudo.org</span>.</p><p>If you want to learn more about Perl 6, or have a desire to help in the crusade to make Perl a better place then read the Perl 6 developers page at <span href="http://www.perl6.org/">http://www.perl6.org/</span> and get involved.</p><p>&quot;We&#39;re really serious about reinventing everything that needs reinventing.&quot; --Larry Wall</p></section>	http://perldoc.perl.org/perlfaq1.html#What-is-Perl-6%3f
panic: frexp: %f	A			Perl Diagnostics							<section class="prog__container"><p>(P) The library function frexp() failed, making printf(&quot;%f&quot;) impossible.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-frexp%3a-%25f
Env (module)	A			Perl Standard Modules							<section class="prog__container"><p>Env - perl module that imports environment variables as scalars or arrays</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Env</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Env</span> <span class="q">qw(PATH HOME TERM)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Env</span> <span class="q">qw($SHELL @LD_LIBRARY_PATH)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Env.html
Where do I get the include files to do ioctl() or syscall()?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Historically, these would be generated by the <span href="http://perldoc.perl.org/h2ph.html">h2ph</span> tool, part of the standard perl distribution. This program converts <code class="inline"><span class="i">cpp</span><span class="s">(</span><span class="n">1</span><span class="s">)</span></code>  directives in C header files to files containing subroutine definitions, like <code class="inline"><span class="i">SYS_getitimer</span><span class="s">(</span><span class="s">)</span></code> , which you can use as arguments to your functions. It doesn&#39;t work perfectly, but it usually gets most of the job done. Simple files like <i>errno.h</i>, <i>syscall.h</i>, and <i>socket.h</i> were fine, but the hard ones like <i>ioctl.h</i> nearly always need to be hand-edited. Here&#39;s how to install the *.ph files:</p><pre class="verbatim"><ol><li>    <span class="n">1.</span> <span class="w">Become</span> <span class="w">the</span> <span class="w">super</span>-<span class="w">user</span></li><li>    <span class="n">2.</span> <span class="w">cd</span> /<span class="w">usr</span>/<span class="w">include</span></li><li>    <span class="n">3.</span> <span class="w">h2ph</span> *.<span class="w">h</span> *<span class="q">/*.h</span></li></ol></pre><p>If your system supports dynamic loading, for reasons of portability and sanity you probably ought to use <span href="http://perldoc.perl.org/h2xs.html">h2xs</span> (also part of the standard perl distribution). This tool converts C header files to Perl extensions. See <span href="http://perldoc.perl.org/perlxstut.html">perlxstut</span> for how to get started with <span href="http://perldoc.perl.org/h2xs.html">h2xs</span>.</p><p>If your system doesn&#39;t support dynamic loading, you still probably ought to use <span href="http://perldoc.perl.org/h2xs.html">h2xs</span>. See <span href="http://perldoc.perl.org/perlxstut.html">perlxstut</span> and <span href="http://perldoc.perl.org/ExtUtils/MakeMaker.html">ExtUtils::MakeMaker</span> for more information (in brief, just use <b>make perl</b> instead of a plain <b>make</b> to rebuild perl with a new static extension).</p></section>	http://perldoc.perl.org/perlfaq8.html#Where-do-I-get-the-include-files-to-do-ioctl()-or-syscall()%3f
hash table (definition)	A			Perl Glossary		[[bucket]]					<section class="prog__container"><p>A data structure used internally by Perl for implementing associative arrays (hashes) efficiently. </p></section>	http://perldoc.perl.org/perlglossary.html#hash-table
qualified (definition)	A			Perl Glossary							<section class="prog__container"><p>Possessing a complete name. The symbol <code class="inline"><span class="i">$Ent::moot</span></code>  is qualified; <code class="inline"><span class="i">$moot</span></code>  is unqualified. A fully qualified filename is specified from the top-level directory.</p></section>	http://perldoc.perl.org/perlglossary.html#qualified
How can I sleep() or alarm() for under a second?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If you want finer granularity than the 1 second that the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep()</span></code> function provides, the easiest way is to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select()</span></code> function as documented in <span href="http://perldoc.perl.org/functions/select.html">select</span>. Try the <span href="http://perldoc.perl.org/Time/HiRes.html">Time::HiRes</span> and the <span href="http://search.cpan.org/perldoc/BSD::Itimer">BSD::Itimer</span> modules (available from CPAN, and starting from Perl 5.8 <span href="http://perldoc.perl.org/Time/HiRes.html">Time::HiRes</span> is part of the standard distribution).</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-sleep()-or-alarm()-for-under-a-second%3f
built-in (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>function</b> that is predefined in the language. Even when hidden by <b>overriding</b>, you can always get at a built- in function by <b>qualifying</b> its name with the <code class="inline"><span class="w">CORE::</span></code>  pseudopackage.</p></section>	http://perldoc.perl.org/perlglossary.html#built-in
No error file after 2> or 2>> on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl handles its own command line redirection, and found a &#39;2&gt;&#39; or a &#39;2&gt;&gt;&#39; on the command line, but can&#39;t find the name of the file to which to write data destined for stderr.</p></section>	http://perldoc.perl.org/perldiag.html#No-error-file-after-2%3e-or-2%3e%3e-on-command-line
Smartmatch is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::smartmatch) This warning is emitted if you use the smartmatch (<code class="inline">~~</code> ) operator.  This is currently an experimental feature, and its details are subject to change in future releases of Perl.  Particularly, its current behavior is noticed for being unnecessarily complex and unintuitive, and is very likely to be overhauled.</p></section>	http://perldoc.perl.org/perldiag.html#Smartmatch-is-experimental
stringification (definition)	A			Perl Glossary							<section class="prog__container"><p>The process of producing a <b>string</b> representation of an abstract object.</p></section>	http://perldoc.perl.org/perlglossary.html#stringification
Argument "%s" treated as 0 in increment (++)	A			Perl Diagnostics							<section class="prog__container"><p>(W numeric) The indicated string was fed as an argument to the <code class="inline">++</code>  operator which expects either a number or a string matching <code class="inline"><span class="q">/^[a-zA-Z]*[0-9]*\\z/</span></code> .  See <span href="http://perldoc.perl.org/perlop.html#Auto-increment-and-Auto-decrement">Auto-increment and Auto-decrement in perlop</span> for details.</p></section>	http://perldoc.perl.org/perldiag.html#Argument-%22%25s%22-treated-as-0-in-increment-(%2b%2b)
setrgid() not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign to <code class="inline"><span class="i">$(</span></code> , and your operating system doesn&#39;t support the setrgid() system call (or equivalent), or at least Configure didn&#39;t think so.</p></section>	http://perldoc.perl.org/perldiag.html#setrgid()-not-implemented
unshift (function)	A			Perl Functions\nPerl Functions for real @ARRAYs							<section class="prog__container"><pre>unshift ARRAY,LIST<br>unshift EXPR,LIST</pre><p>Does the opposite of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code>.  Or the opposite of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, depending on how you look at it.  Prepends list to the front of the array and returns the new number of elements in the array.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span><span class="s">(</span><span class="i">@ARGV</span><span class="cm">,</span> <span class="q">&#39;-e&#39;</span><span class="s">)</span> unless <span class="i">$ARGV</span>[<span class="n">0</span>] =~ <span class="q">/^-/</span><span class="sc">;</span></li></ol></pre><p>Note the LIST is prepended whole, not one element at a time, so the prepended elements stay in the same order.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span></code> to do the reverse.</p><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code> is considered highly experimental.  The exact behaviour may change in a future version of Perl.</p><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so push/pop/etc work on scalars (experimental)</span></li></ol></pre></section>	http://perldoc.perl.org/functions/unshift.html
mprotect for COW string %p %u failed with %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) You compiled perl with <b>-D</b>PERL_DEBUG_READONLY_COW (see <span href="http://perldoc.perl.org/perlguts.html#Copy-on-Write">Copy on Write in perlguts</span>), but a shared string buffer could not be made read-only.</p></section>	http://perldoc.perl.org/perldiag.html#mprotect-for-COW-string-%25p-%25u-failed-with-%25d
How can I get the unique keys from two hashes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>First you extract the keys from the hashes into lists, then solve the &quot;removing duplicates&quot; problem described above. For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%seen</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span><span class="s">(</span><span class="i">%foo</span><span class="s">)</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span><span class="s">(</span><span class="i">%bar</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$seen</span>{<span class="i">$element</span>}++<span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@uniq</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%seen</span><span class="sc">;</span></li></ol></pre><p>Or more succinctly:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@uniq</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%</span>{<span class="s">{</span><span class="i">%foo</span><span class="cm">,</span><span class="i">%bar</span><span class="s">}</span>}<span class="sc">;</span></li></ol></pre><p>Or if you really want to save space:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%seen</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">(</span><span class="i">$key</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%foo</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$seen</span>{<span class="i">$key</span>}++<span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">(</span><span class="i">$key</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%bar</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$seen</span>{<span class="i">$key</span>}++<span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@uniq</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%seen</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-get-the-unique-keys-from-two-hashes%3f
&CORE::%s cannot be called directly	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to call a subroutine in the <code class="inline"><span class="w">CORE::</span></code>  namespace with <code class="inline"><span class="i">&amp;foo</span></code>  syntax or through a reference.  Some subroutines in this package cannot yet be called that way, but must be called as barewords.  Something like this will work:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span> <span class="i">*shove</span> = \\<span class="i">&amp;CORE::push</span><span class="sc">;</span> <span class="s">}</span></li><li>    <span class="w">shove</span> <span class="i">@array</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="sc">;</span> <span class="c"># pushes on to @array</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#%26CORE%3a%3a%25s-cannot-be-called-directly
discipline (definition)	A			Perl Glossary							<section class="prog__container"><p>Some people need this and some people avoid it. For Perl, it’s an old way to say <b>I/O layer</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#discipline
Standard Library (definition)	A			Perl Glossary		[[dual-lived]]					<section class="prog__container"><p>Everything that comes with the official <i>perl</i> distribution. Some vendor versions of <i>perl</i> change their distributions, leaving out some parts or including extras. </p></section>	http://perldoc.perl.org/perlglossary.html#Standard-Library
How do I change the Nth occurrence of something?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>You have to keep track of N yourself. For example, let&#39;s say you want to change the fifth occurrence of <code class="inline"><span class="q">&quot;whoever&quot;</span></code>  or <code class="inline"><span class="q">&quot;whomever&quot;</span></code>  into <code class="inline"><span class="q">&quot;whosoever&quot;</span></code>  or <code class="inline"><span class="q">&quot;whomsoever&quot;</span></code> , case insensitively. These all assume that $_ contains the string to be altered.</p><pre class="verbatim"><ol><li>    <span class="i">$count</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="q">s{((whom?)ever)}{</span></li><li>    <span class="q">    ++$count == 5       # is it the 5th?</span></li><li>        <span class="q">        ? &quot;${2}soever&quot;  # yes, swap</span></li><li>        <span class="q">        : $1            # renege and leave it there</span></li><li>        <span class="q">        }ige</span><span class="sc">;</span></li></ol></pre><p>In the more general case, you can use the <code class="inline">/g</code> modifier in a <code class="inline">while</code>  loop, keeping count of matches.</p><pre class="verbatim"><ol><li>    <span class="i">$WANT</span> = <span class="n">3</span><span class="sc">;</span></li><li>    <span class="i">$count</span> = <span class="n">0</span><span class="sc">;</span></li><li>    <span class="i">$_</span> = <span class="q">&quot;One fish two fish red fish blue fish&quot;</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="q">/(\\w+)\\s+fish\\b/gi</span><span class="s">)</span> <span class="s">{</span></li><li>        if <span class="s">(</span>++<span class="i">$count</span> == <span class="i">$WANT</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;The third fish is a $1 one.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>That prints out: <code class="inline"><span class="q">&quot;The third fish is a red one.&quot;</span></code>   You can also use a repetition count and repeated pattern like this:</p><pre class="verbatim"><ol><li>    <span class="q">/(?:\\w+\\s+fish\\s+){2}(\\w+)\\s+fish/i</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-change-the-Nth-occurrence-of-something%3f
Which version of Perl should I use?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>(contributed by brian d foy)</p><p>There is often a matter of opinion and taste, and there isn&#39;t any one answer that fits everyone. In general, you want to use either the current stable release, or the stable release immediately prior to that one. Currently, those are perl5.18.x and perl5.16.x, respectively.</p><p>Beyond that, you have to consider several things and decide which is best for you.</p></section>	http://perldoc.perl.org/perlfaq1.html#Which-version-of-Perl-should-I-use%3f
Can't use both '<' and '>' after type '%c' in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) A type cannot be forced to have both big-endian and little-endian byte-order at the same time, so this combination of modifiers is not allowed.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-both-'%3c'-and-'%3e'-after-type-'%25c'-in-%25s
Getopt::Std (module)	A			Perl Standard Modules							<section class="prog__container"><p>getopt, getopts - Process single-character switches with switch clustering</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Getopt::Std</span><span class="sc">;</span></li><li></li><li>    <span class="i">getopts</span><span class="s">(</span><span class="q">&#39;oif:&#39;</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># -o &amp; -i are boolean flags, -f takes an argument</span></li><li>&#09;&#09;      <span class="c"># Sets $opt_* as a side effect.</span></li><li>    <span class="i">getopts</span><span class="s">(</span><span class="q">&#39;oif:&#39;</span><span class="cm">,</span> \\<span class="i">%opts</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># options as above. Values in %opts</span></li><li>    <span class="i">getopt</span><span class="s">(</span><span class="q">&#39;oDI&#39;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># -o, -D &amp; -I take arg.</span></li><li>                      <span class="c"># Sets $opt_* as a side effect.</span></li><li>    <span class="i">getopt</span><span class="s">(</span><span class="q">&#39;oDI&#39;</span><span class="cm">,</span> \\<span class="i">%opts</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># -o, -D &amp; -I take arg.  Values in %opts</span></li></ol></pre></section>	http://perldoc.perl.org/Getopt/Std.html
Why do I sometimes get an "Argument list too long" when I use <*>?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>The <code class="inline">&lt;&gt;</code>  operator performs a globbing operation (see above). In Perl versions earlier than v5.6.0, the internal glob() operator forks csh(1) to do the actual glob expansion, but csh can&#39;t handle more than 127 items and so gives the error message <code class="inline"><span class="w">Argument</span> <span class="w">list</span> <span class="w">too</span> <span class="w">long</span></code> . People who installed tcsh as csh won&#39;t have this problem, but their users may be surprised by it.</p><p>To get around this, either upgrade to Perl v5.6.0 or later, do the glob yourself with readdir() and patterns, or use a module like <span href="http://perldoc.perl.org/File/Glob.html">File::Glob</span>, one that doesn&#39;t use the shell to do globbing.</p></section>	http://perldoc.perl.org/perlfaq5.html#Why-do-I-sometimes-get-an-%22Argument-list-too-long%22-when-I-use-%3c*%3e%3f
defined (definition)	A			Perl Glossary							<section class="prog__container"><p>Having a meaning. Perl thinks that some of the things people try to do are devoid of meaning; in particular, making use of variables that have never been given a <b>value</b> and performing certain operations on data that isn’t there. For example, if you try to read data past the end of a file, Perl will hand you back an undefined value. See also <b>false</b> and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> entry in Camel chapter 27, “Functions”.</p></section>	http://perldoc.perl.org/perlglossary.html#defined
Integer overflow in srand	A			Perl Diagnostics							<section class="prog__container"><p>(S overflow) The number you have passed to srand is too big to fit in your architecture&#39;s integer representation.  The number has been replaced with the largest integer supported (0xFFFFFFFF on 32-bit architectures).  This means you may be getting less randomness than you expect, because different random seeds above the maximum will return the same sequence of random numbers.</p></section>	http://perldoc.perl.org/perldiag.html#Integer-overflow-in-srand
keys on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#keys-on-reference-is-experimental
Pod::Perldoc::ToMan (module)	A			Perl Standard Modules		[[Pod::Man]]\n[[Pod::Perldoc]]\n[[Pod::Perldoc::ToNroff]]					<section class="prog__container"><p>Pod::Perldoc::ToMan - let Perldoc render Pod as man pages</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -o <span class="w">man</span> <span class="w">Some::Modulename</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToMan.html
$$ (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The process number of the Perl running this script.  Though you <i>can</i> set this variable, doing so is generally discouraged, although it can be invaluable for some testing purposes.  It will be reset automatically across <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code> calls.</p><p>Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl would emulate POSIX semantics on Linux systems using LinuxThreads, a partial implementation of POSIX Threads that has since been superseded by the Native POSIX Thread Library (NPTL).</p><p>LinuxThreads is now obsolete on Linux, and caching <code class="inline"><span class="i">getpid</span><span class="s">(</span><span class="s">)</span></code>  like this made embedding perl unnecessarily complex (since you&#39;d have to manually update the value of $$), so now <code class="inline"><span class="i">$$</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getppid.html">getppid()</span></code> will always return the same values as the underlying C library.</p><p>Debian GNU/kFreeBSD systems also used LinuxThreads up until and including the 6.0 release, but after that moved to FreeBSD thread semantics, which are POSIX-like.</p><p>To see if your system is affected by this discrepancy check if <code class="inline"><span class="w">getconf</span> <span class="w">GNU_LIBPTHREAD_VERSION</span> | <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> -<span class="q">q NPTL</span></code>  returns a false value.  NTPL threads preserve the POSIX semantics.</p><p>Mnemonic: same as shells.</p></section>	http://perldoc.perl.org/perlvar.html#%24%24
Pod::Escapes (module)	A			Perl Standard Modules		[[Pod::Browser]]\n[[Catalyst]]\n[[Pod::Checker]]\n[[Pod::Coverage]]\n[[perlpod]]\n[[perlpodspec]]\n[[Text::Unidecode]]					<section class="prog__container"><p>Pod::Escapes - for resolving Pod E&lt;...&gt; sequences</p> <pre class="verbatim"><ol><li>  use Pod::Escapes qw(e2char);</li><li>  ...la la la, parsing POD, la la la...</li><li>  $text = e2char($e_node-&gt;label);</li><li>  unless(defined $text) {</li><li>    print &quot;Unknown E sequence \\&quot;&quot;, $e_node-&gt;label, &quot;\\&quot;!&quot;;</li><li>  }</li><li>  ...else print/interpolate $text...</li></ol></pre></section>	http://perldoc.perl.org/Pod/Escapes.html
How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>As of perl5.6, open() autovivifies file and directory handles as references if you pass it an uninitialized scalar variable. You can then pass these references just like any other scalar, and use them in the place of named handles.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span>    <span class="i">$fh</span><span class="cm">,</span> <span class="i">$file_name</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$file_name</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;Hello World!\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">process_file</span><span class="s">(</span> <span class="i">$fh</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you like, you can store these filehandles in an array or a hash. If you access them directly, they aren&#39;t simple scalars and you need to give <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> a little help by placing the filehandle reference in braces. Perl can only figure it out on its own when the filehandle reference is a simple scalar.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@fhs</span> = <span class="s">(</span> <span class="i">$fh1</span><span class="cm">,</span> <span class="i">$fh2</span><span class="cm">,</span> <span class="i">$fh3</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span><span class="s">(</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt;= <span class="i">$#fhs</span><span class="sc">;</span> <span class="i">$i</span>++ <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span><span class="i">$fhs</span>[<span class="i">$i</span>]<span class="s">}</span> <span class="q">&quot;just another Perl answer, \\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Before perl5.6, you had to deal with various typeglob idioms which you may see in older code.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">FILE</span><span class="cm">,</span> <span class="q">&quot;&gt; $filename&quot;</span><span class="sc">;</span></li><li>    <span class="i">process_typeglob</span><span class="s">(</span>   <span class="i">*FILE</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">process_reference</span><span class="s">(</span> \\<span class="i">*FILE</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="process_typeglob"></span>    sub <span class="m">process_typeglob</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">*FH</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">FH</span>  <span class="q">&quot;Typeglob!&quot;</span> <span class="s">}</span></li><li><span name="process_reference"></span>    sub <span class="m">process_reference</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$fh</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;Reference!&quot;</span> <span class="s">}</span></li></ol></pre><p>If you want to create many anonymous handles, you should check out the Symbol or IO::Handle modules.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-make-a-filehandle-local-to-a-subroutine%3f-How-do-I-pass-filehandles-between-subroutines%3f-How-do-I-make-an-array-of-filehandles%3f
POSIX class [:%s:] unknown in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The class in the character class [: :] syntax is unknown.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered. Note that the POSIX character classes do <b>not</b> have the <code class="inline"><span class="w">is</span></code>  prefix the corresponding C interfaces have: in other words, it&#39;s <code class="inline">[[:print:]]</code>, not <code class="inline"><span class="w">isprint</span></code> .  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#POSIX-class-%5b%3a%25s%3a%5d-unknown-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Math::Complex (module)	A			Perl Standard Modules		[[Math::Trig]]					<section class="prog__container"><p>Math::Complex - complex numbers and associated mathematical functions</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Complex</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$z</span> = <span class="w">Math::Complex</span><span class="w">-&gt;make</span><span class="s">(</span><span class="n">5</span><span class="cm">,</span> <span class="n">6</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">$t</span> = <span class="n">4</span> - <span class="n">3</span>*<span class="w">i</span> + <span class="i">$z</span><span class="sc">;</span></li><li>&#09;<span class="i">$j</span> = <span class="i">cplxe</span><span class="s">(</span><span class="n">1</span><span class="cm">,</span> <span class="n">2</span>*<span class="w">pi</span>/<span class="n">3</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Math/Complex.html
send() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The socket you&#39;re sending to got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#send()-on-closed-socket-%25s
Unrecognized escape \%c in character class in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a backslash-character combination which is not recognized by Perl inside character classes.  This is a fatal error when the character class is used within <code class="inline"><span class="s">(</span><span class="q">?[ ])</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-escape-%5c%25c-in-character-class-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
How do I temporarily block warnings?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>If you are running Perl 5.6.0 or better, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  pragma allows fine control of what warnings are produced. See <span href="http://perldoc.perl.org/perllexwarn.html">perllexwarn</span> for more details.</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span><span class="sc">;</span>          <span class="c"># temporarily turn off warnings</span></li><li>        <span class="i">$x</span> = <span class="i">$y</span> + <span class="i">$z</span><span class="sc">;</span>         <span class="c"># I know these might be undef</span></li><li>    <span class="s">}</span></li></ol></pre><p>Additionally, you can enable and disable categories of warnings. You turn off the categories you want to ignore and you can still get other categories of warnings. See <span href="http://perldoc.perl.org/perllexwarn.html">perllexwarn</span> for the complete details, including the category names and hierarchy.</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;uninitialized&#39;</span><span class="sc">;</span></li><li>        <span class="i">$x</span> = <span class="i">$y</span> + <span class="i">$z</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you have an older version of Perl, the <code class="inline"><span class="i">$^W</span></code>  variable (documented in <span href="http://perldoc.perl.org/perlvar.html">perlvar</span>) controls runtime warnings for a block:</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$^W</span> = <span class="n">0</span><span class="sc">;</span>        <span class="c"># temporarily turn off warnings</span></li><li>        <span class="i">$x</span> = <span class="i">$y</span> + <span class="i">$z</span><span class="sc">;</span>         <span class="c"># I know these might be undef</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that like all the punctuation variables, you cannot currently use my() on <code class="inline"><span class="i">$^W</span></code> , only local().</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-temporarily-block-warnings%3f
@ARGV (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The array <code class="inline"><span class="i">@ARGV</span></code>  contains the command-line arguments intended for the script.  <code class="inline"><span class="i">$#ARGV</span></code>  is generally the number of arguments minus one, because <code class="inline"><span class="i">$ARGV</span>[<span class="n">0</span>]</code>  is the first argument, <i>not</i> the program&#39;s command name itself.  See <span href="http://perldoc.perl.org/perlvar.html#%240">$0</span> for the command name.</p></section>	http://perldoc.perl.org/perlvar.html#%40ARGV
: General Questions About Perl	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section of the FAQ answers very general, high-level questions about Perl.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq1-manpage%3a-General-Questions-About-Perl
dwimmer (definition)	A			Perl Glossary							<section class="prog__container"><p>DWIM is an acronym for “Do What I Mean”, the principle that something should just do what you want it to do without an undue amount of fuss. A bit of code that does “dwimming” is a “dwimmer”. Dwimming can require a great deal of behind-the-scenes magic, which (if it doesn’t stay properly behind the scenes) is called a <b>dweomer</b> instead.</p></section>	http://perldoc.perl.org/perlglossary.html#dwimmer
Binary ">" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;&gt;&quot; returns true if the left argument is numerically greater than the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
Subroutine %s redefined	A			Perl Diagnostics							<section class="prog__container"><p>(W redefine) You redefined a subroutine.  To suppress this warning, say</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;redefine&#39;</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;sub name { ... }&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Subroutine-%25s-redefined
Locale::Language (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Language - standard codes for language identification</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Language</span><span class="sc">;</span></li><li></li><li>   <span class="i">$lang</span> = <span class="i">code2language</span><span class="s">(</span><span class="q">&#39;en&#39;</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># $lang gets &#39;English&#39;</span></li><li>   <span class="i">$code</span> = <span class="i">language2code</span><span class="s">(</span><span class="q">&#39;French&#39;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># $code gets &#39;fr&#39;</span></li><li></li><li>   <span class="i">@codes</span>   = <span class="i">all_language_codes</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">@names</span>   = <span class="i">all_language_names</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Language.html
invocation (definition)	A			Perl Glossary							<section class="prog__container"><p>The act of calling up a deity, daemon, program, method, subroutine, or function to get it to do what you think it’s supposed to do.  We usually “call” subroutines but “invoke” methods, since it sounds cooler.</p></section>	http://perldoc.perl.org/perlglossary.html#invocation
$? (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>The status returned by the last pipe close, backtick (<code class="inline"><span class="q">``</span></code> ) command, successful call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid()</span></code>, or from the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> operator.  This is just the 16-bit status word returned by the traditional Unix <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait()</span></code> system call (or else is made up to look like it).  Thus, the exit value of the subprocess is really (<code class="inline"><span class="i">$?</span>&gt;&gt; <span class="n">8</span></code> ), and <code class="inline"><span class="i">$?</span> &amp; <span class="n">127</span></code>  gives which signal, if any, the process died from, and <code class="inline"><span class="i">$?</span> &amp; <span class="n">128</span></code>  reports whether there was a core dump.</p><p>Additionally, if the <code class="inline"><span class="w">h_errno</span></code>  variable is supported in C, its value is returned via <code class="inline"><span class="i">$?</span></code>  if any <code class="inline"><span class="w">gethost</span>*<span class="s">(</span><span class="s">)</span></code>  function fails.</p><p>If you have installed a signal handler for <code class="inline"><span class="w">SIGCHLD</span></code> , the value of <code class="inline"><span class="i">$?</span></code>  will usually be wrong outside that handler.</p><p>Inside an <code class="inline">END</code>  subroutine <code class="inline"><span class="i">$?</span></code>  contains the value that is going to be given to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit()</span></code>.  You can modify <code class="inline"><span class="i">$?</span></code>  in an <code class="inline">END</code>  subroutine to change the exit status of your program.  For example:</p><pre class="verbatim"><ol><li>    END <span class="s">{</span></li><li>&#09;<span class="i">$?</span> = <span class="n">1</span> if <span class="i">$?</span> == <span class="n">255</span><span class="sc">;</span>  <span class="c"># die would make it 255</span></li><li>    <span class="s">}</span></li></ol></pre><p>Under VMS, the pragma <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vmsish</span> <span class="q">&#39;status&#39;</span></code>  makes <code class="inline"><span class="i">$?</span></code>  reflect the actual VMS exit status, instead of the default emulation of POSIX status; see <span href="http://perldoc.perl.org/perlvms.html#%24%3f">$? in perlvms</span> for details.</p><p>Mnemonic: similar to <b>sh</b> and <b>ksh</b>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3f
Unmatched '%c' in POSIX class in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had something like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [:alnum] ])</span></li></ol></pre><p>There should be a second <code class="inline"><span class="q">&quot;:&quot;</span></code> , like this:</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [:alnum:] ])</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Unmatched-'%25c'-in-POSIX-class-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Bad symbol for array	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal request asked to add an array entry to something that wasn&#39;t a symbol table entry.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-symbol-for-array
Unknown open() mode '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The second argument of 3-argument open() is not among the list of valid modes: <code class="inline">&lt;</code> , <code class="inline">&gt;</code>, <code class="inline">&gt;&gt;</code> , <code class="inline">+&lt;</code> , <code class="inline">+&gt;</code>, <code class="inline">+&gt;&gt;</code> , <code class="inline">-|</code>, <code class="inline">|-</code>, <code class="inline">&lt;<span class="i">&amp;</span></code> , <code class="inline">&gt;&amp;</code>.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-open()-mode-'%25s'
IPC::Semaphore (module)	A			Perl Standard Modules		[[IPC::SysV]]\n[[Class::Struct]]\n[[semget]]\n[[semctl]]\n[[semop]]					<section class="prog__container"><p>IPC::Semaphore - SysV Semaphore IPC object class</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span> <span class="q">qw(IPC_PRIVATE S_IRUSR S_IWUSR IPC_CREAT)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Semaphore</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sem</span> = <span class="w">IPC::Semaphore</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">IPC_PRIVATE</span><span class="cm">,</span> <span class="n">10</span><span class="cm">,</span> <span class="w">S_IRUSR</span> | <span class="w">S_IWUSR</span> | <span class="w">IPC_CREAT</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sem</span><span class="i">-&gt;setall</span><span class="s">(</span> <span class="s">(</span><span class="n">0</span><span class="s">)</span> x <span class="n">10</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">@sem</span> = <span class="i">$sem</span><span class="i">-&gt;getall</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ncnt</span> = <span class="i">$sem</span><span class="i">-&gt;getncnt</span><span class="sc">;</span></li><li></li><li>    <span class="i">$zcnt</span> = <span class="i">$sem</span><span class="i">-&gt;getzcnt</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ds</span> = <span class="i">$sem</span><span class="i">-&gt;stat</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sem</span><span class="i">-&gt;remove</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/Semaphore.html
How do I capitalize all the words on one line?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Damian Conway&#39;s <span href="http://search.cpan.org/perldoc/Text::Autoformat">Text::Autoformat</span> handles all of the thinking for you.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Autoformat</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="q">&quot;Dr. Strangelove or: How I Learned to Stop &quot;</span>.</li><li>      <span class="q">&quot;Worrying and Love the Bomb&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$style</span> <span class="s">(</span><span class="q">qw( sentence title highlight )</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">autoformat</span><span class="s">(</span><span class="i">$x</span><span class="cm">,</span> <span class="s">{</span> <span class="w">case</span> <span class="cm">=&gt;</span> <span class="i">$style</span> <span class="s">}</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>How do you want to capitalize those words?</p><pre class="verbatim"><ol><li>    <span class="w">FRED</span> <span class="w">AND</span> <span class="w">BARNEY&#39;S</span> <span class="w">LODGE</span>        <span class="c"># all uppercase</span></li><li>    <span class="w">Fred</span> <span class="w">And</span> <span class="w">Barney&#39;s</span> <span class="w">Lodge</span>        <span class="c"># title case</span></li><li>    <span class="w">Fred</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">Barney&#39;s</span> <span class="w">Lodge</span>        <span class="c"># highlight case</span></li></ol></pre><p>It&#39;s not as easy a problem as it looks. How many words do you think are in there? Wait for it... wait for it.... If you answered 5 you&#39;re right. Perl words are groups of <code class="inline">\\<span class="w">w</span>+</code> , but that&#39;s not what you want to capitalize. How is Perl supposed to know not to capitalize that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s</span></code> after the apostrophe? You could try a regular expression:</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> =~ <span class="q">s/ (</span></li><li>                 <span class="q">                 (^\\w)    #at the beginning of the line</span></li><li>                   <span class="q">                   |      # or</span></li><li>                 <span class="q">                 (\\s\\w)   #preceded by whitespace</span></li><li>                   <span class="q">                   )</span></li><li>                <span class="q">                /\\U$1/xg</span><span class="sc">;</span></li><li></li><li>    <span class="i">$string</span> =~ <span class="q">s/([\\w&#39;]+)/\\u\\L$1/g</span><span class="sc">;</span></li></ol></pre><p>Now, what if you don&#39;t want to capitalize that &quot;and&quot;? Just use <span href="http://search.cpan.org/perldoc/Text::Autoformat">Text::Autoformat</span> and get on with the next problem. :)</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-capitalize-all-the-words-on-one-line%3f
Can't use an undefined value as %s reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) A value used as either a hard reference or a symbolic reference must be a defined value.  This helps to delurk some insidious errors.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-an-undefined-value-as-%25s-reference
Code point 0x%X is not Unicode, may not be portable	A			Perl Diagnostics							<section class="prog__container"><p>(S non_unicode) You had a code point above the Unicode maximum of U+10FFFF.</p><p>Perl allows strings to contain a superset of Unicode code points, up to the limit of what is storable in an unsigned integer on your system, but these may not be accepted by other languages/systems.  At one time, it was legal in some standards to have code points up to 0x7FFF_FFFF, but not higher.  Code points above 0xFFFF_FFFF require larger than a 32 bit word.</p></section>	http://perldoc.perl.org/perldiag.html#Code-point-0x%25X-is-not-Unicode%2c-may-not-be-portable
elsif (function)	A			Perl Functions							<section class="prog__container"><pre>elsif</pre><p>These flow-control keywords are documented in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/elsif.html
key (definition)	A			Perl Glossary							<section class="prog__container"><p>The string index to a <b>hash</b>, used to look up the <b>value</b> associated with that key.</p></section>	http://perldoc.perl.org/perlglossary.html#key
Binary ".." operator	A			Perl Operators\nPerl Range Operators							<section class="prog__container">Binary &quot;..&quot; is the range operator, which is really two different operators depending on the context. In list context, it returns a list of values counting (up by ones) from the left value to the right value. If the left value is greater than the right value then it returns the empty list. The range operator is useful for writing foreach ( 1.. 10 ) loops and for doing slice operations on arrays. In the current implementation, no temporary array is created when the range operator is used as the expression in foreach loops, but older versions of Perl might burn a lot of memory when you write something like this:</section>	http://perldoc.perl.org/perlop.html#Range-Operators
Stub found while resolving method "%s" overloading "%s" in package "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(P) Overloading resolution over @ISA tree may be broken by importation stubs.  Stubs should never be implicitly created, but explicit calls to <code class="inline"><span class="w">can</span></code>  may break this.</p></section>	http://perldoc.perl.org/perldiag.html#Stub-found-while-resolving-method-%22%25s%22-overloading-%22%25s%22-in-package-%22%25s%22
decrement (definition)	A			Perl Glossary							<section class="prog__container"><p>To subtract a value from a variable, as in “decrement <code class="inline"><span class="i">$x</span></code> ” (meaning to remove 1 from its value) or “decrement <code class="inline"><span class="i">$x</span></code>  by 3”.</p></section>	http://perldoc.perl.org/perlglossary.html#decrement
Binary "&&" operator	A			Perl Operators\nPerl C-style Logical And							<section class="prog__container">Binary &quot;&amp;&amp;&quot; performs a short-circuit logical AND operation. That is, if the left operand is false, the right operand is not even evaluated. Scalar or list context propagates down to the right operand if it is evaluated.</section>	http://perldoc.perl.org/perlop.html#C-style-Logical-And
autogeneration (definition)	A			Perl Glossary							<section class="prog__container"><p>A feature of <b>operator overloading</b> of <b>objects</b>, whereby the behavior of certain <b>operators</b> can be reasonably deduced using more fundamental operators. This assumes that the overloaded operators will often have the same relationships as the regular operators. See Camel chapter 13, “Overloading”.</p></section>	http://perldoc.perl.org/perlglossary.html#autogeneration
connect() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to do a connect on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/connect.html">connect</span>.</p></section>	http://perldoc.perl.org/perldiag.html#connect()-on-closed-socket-%25s
hard reference (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>scalar</b> <b>value</b> containing the actual address of a <b>referent</b>, such that the referent’s <b>reference</b> count accounts for it. (Some hard references are held internally, such as the implicit reference from one of a <b>typeglob</b>’s variable slots to its corresponding referent.) A hard reference is different from a <b>symbolic reference</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#hard-reference
Within []-length '%c' not allowed	A			Perl Diagnostics							<section class="prog__container"><p>(F) The count in the (un)pack template may be replaced by <code class="inline"><span class="s">[</span><span class="w">TEMPLATE</span><span class="s">]</span></code>  only if <code class="inline"><span class="w">TEMPLATE</span></code>  always matches the same amount of packed bytes that can be determined from the template alone.  This is not possible if it contains any of the codes @, /, U, u, w or a *-length.  Redesign the template.</p></section>	http://perldoc.perl.org/perldiag.html#Within-%5b%5d-length-'%25c'-not-allowed
Regexp modifiers "%c" and "%c" are mutually exclusive in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The regular expression pattern had more than one of these mutually exclusive modifiers.  Retain only the modifier that is supposed to be there.</p></section>	http://perldoc.perl.org/perldiag.html#Regexp-modifiers-%22%25c%22-and-%22%25c%22-are-mutually-exclusive-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
IO::Zlib (module)	A			Perl Standard Modules		[[perlfunc]]\n[[I/O Operators in perlop]]\n[[IO::Handle]]\n[[Compress::Zlib]]					<section class="prog__container"><p>IO::Zlib - IO:: style interface to <span href="http://perldoc.perl.org/Compress/Zlib.html">Compress::Zlib</span></p> <p>With any version of Perl 5 you can use the basic OO interface:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Zlib</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">new</span> <span class="w">IO::Zlib</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$fh</span><span class="i">-&gt;open</span><span class="s">(</span><span class="q">&quot;file.gz&quot;</span><span class="cm">,</span> <span class="q">&quot;rb&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::Zlib</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file.gz&quot;</span><span class="cm">,</span> <span class="q">&quot;wb9&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;bar\\n&quot;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">IO::Zlib</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file.gz&quot;</span><span class="cm">,</span> <span class="q">&quot;rb&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$fh</span><span class="sc">;</span>       <span class="c"># automatically closes the file</span></li><li>    <span class="s">}</span></li></ol></pre><p>With Perl 5.004 you can also use the TIEHANDLE interface to access compressed files just like ordinary files:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Zlib</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">*FILE</span><span class="cm">,</span> <span class="q">&#39;IO::Zlib&#39;</span><span class="cm">,</span> <span class="q">&quot;file.gz&quot;</span><span class="cm">,</span> <span class="q">&quot;wb&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">FILE</span> <span class="q">&quot;line 1\\nline2\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">*FILE</span><span class="cm">,</span> <span class="q">&#39;IO::Zlib&#39;</span><span class="cm">,</span> <span class="q">&quot;file.gz&quot;</span><span class="cm">,</span> <span class="q">&quot;rb&quot;</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="q">&lt;FILE&gt;</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;LINE: &quot;</span><span class="cm">,</span> <span class="i">$_</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Zlib.html
Buffer overflow in prime_env_iter: %s	A			Perl Diagnostics							<section class="prog__container"><p>(W internal) A warning peculiar to VMS.  While Perl was preparing to iterate over %ENV, it encountered a logical name or symbol definition which was too long, so it was truncated to the string shown.</p></section>	http://perldoc.perl.org/perldiag.html#Buffer-overflow-in-prime_env_iter%3a-%25s
list operator (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that does something with a list of values, such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code>. Usually used for named built-in operators (such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>) that do not require parentheses around their <b>argument</b> list.</p></section>	http://perldoc.perl.org/perlglossary.html#list-operator
shebang (definition)	A			Perl Glossary							<section class="prog__container"><p>Irish for the whole McGillicuddy. In Perl culture, a portmanteau of “sharp” and “bang”, meaning the <code class="inline"><span class="c">#!</span></code>  sequence that tells the system where to find the interpreter.</p></section>	http://perldoc.perl.org/perlglossary.html#shebang
Cannot compress %f in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried compressing an infinity or not-a-number as an unsigned integer with BER, which makes no sense.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-compress-%25f-in-pack
Sequence (?%c...) not implemented in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A proposed regular expression extension has the character reserved but has not yet been written.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%25c...)-not-implemented-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
I copied the Perl binary from one machine to another, but scripts don't work.	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>That&#39;s probably because you forgot libraries, or library paths differ. You really should build the whole distribution on the machine it will eventually live on, and then type <code class="inline"><span class="w">make</span> <span class="w">install</span></code> . Most other approaches are doomed to failure.</p><p>One simple way to check that things are in the right place is to print out the hard-coded <code class="inline"><span class="i">@INC</span></code>  that perl looks through for libraries:</p><pre class="verbatim"><ol><li>    <span class="i">% perl</span> -le <span class="q">&#39;print for @INC&#39;</span></li></ol></pre><p>If this command lists any paths that don&#39;t exist on your system, then you may need to move the appropriate libraries to these locations, or create symbolic links, aliases, or shortcuts appropriately. <code class="inline"><span class="i">@INC</span></code>  is also printed as part of the output of</p><pre class="verbatim"><ol><li>    <span class="i">% perl</span> -<span class="w">V</span></li></ol></pre><p>You might also want to check out <span href="http://perldoc.perl.org/perlfaq8.html#How-do-I-keep-my-own-module%2flibrary-directory%3f">How do I keep my own module/library directory? in perlfaq8</span>.</p></section>	http://perldoc.perl.org/perlfaq2.html#I-copied-the-Perl-binary-from-one-machine-to-another%2c-but-scripts-don't-work.
script (definition)	A			Perl Glossary							<section class="prog__container"><p>A text <b>file</b> that is a program intended to be <b>executed</b> directly rather than <b>compiled</b> to another form of file before <b>execution</b>.</p><p>Also, in the context of <b>Unicode</b>, a writing system for a particular language or group of languages, such as Greek, Bengali, or Tengwar.</p></section>	http://perldoc.perl.org/perlglossary.html#script
Locale::Maketext::Simple (module)	A			Perl Standard Modules		[[Locale::Maketext]]\n[[Locale::Maketext::Lexicon]]					<section class="prog__container"><p>Locale::Maketext::Simple - Simple interface to Locale::Maketext::Lexicon</p> <p>Minimal setup (looks for <i>auto/Foo/*.po</i> and <i>auto/Foo/*.mo</i>):</p><pre class="verbatim"><ol><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Maketext::Simple</span><span class="sc">;</span>&#09;<span class="c"># exports &#39;loc&#39;</span></li><li>    <span class="i">loc_lang</span><span class="s">(</span><span class="q">&#39;fr&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;&#09;<span class="c"># set language to French</span></li><li><span name="hello"></span>    sub <span class="m">hello</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">loc</span><span class="s">(</span><span class="q">&quot;Hello, [_1]!&quot;</span><span class="cm">,</span> <span class="q">&quot;World&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>More sophisticated example:</p><pre class="verbatim"><ol><li><span name="package-Foo::Bar"></span>    package <span class="i">Foo::Bar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Maketext::Simple</span> <span class="s">(</span></li><li>&#09;<span class="w">Class</span>&#09;    <span class="cm">=&gt;</span> <span class="q">&#39;Foo&#39;</span><span class="cm">,</span>&#09;    <span class="c"># search in auto/Foo/</span></li><li>&#09;<span class="w">Style</span>&#09;    <span class="cm">=&gt;</span> <span class="q">&#39;gettext&#39;</span><span class="cm">,</span>   <span class="c"># %1 instead of [_1]</span></li><li>&#09;<span class="w">Export</span>&#09;    <span class="cm">=&gt;</span> <span class="q">&#39;maketext&#39;</span><span class="cm">,</span>  <span class="c"># maketext() instead of loc()</span></li><li>&#09;<span class="w">Subclass</span>    <span class="cm">=&gt;</span> <span class="q">&#39;L10N&#39;</span><span class="cm">,</span>&#09;    <span class="c"># Foo::L10N instead of Foo::I18N</span></li><li>&#09;<span class="w">Decode</span>&#09;    <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span>&#09;    <span class="c"># decode entries to unicode-strings</span></li><li>&#09;<span class="w">Encoding</span>    <span class="cm">=&gt;</span> <span class="q">&#39;locale&#39;</span><span class="cm">,</span>    <span class="c"># but encode lexicons in current locale</span></li><li>&#09;&#09;&#09;&#09;    <span class="c"># (needs Locale::Maketext::Lexicon 0.36)</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li><span name="japh"></span>    sub <span class="m">japh</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">maketext</span><span class="s">(</span><span class="q">&quot;Just another %1 hacker&quot;</span><span class="cm">,</span> <span class="q">&quot;Perl&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Maketext/Simple.html
: General Perl Language Issues	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section deals with general Perl language issues that don&#39;t clearly fit into any of the other sections.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq7-manpage%3a-General-Perl-Language-Issues
PERL_SH_DIR too long	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to OS/2.  PERL_SH_DIR is the directory to find the <code class="inline"><span class="w">sh</span></code> -shell in.  See &quot;PERL_SH_DIR&quot; in <span href="http://perldoc.perl.org/perlos2.html">perlos2</span>.</p></section>	http://perldoc.perl.org/perldiag.html#PERL_SH_DIR-too-long
Binary "<<" operator	A			Perl Operators\nPerl Shift Operators							<section class="prog__container">Binary &quot;&lt;&lt;&quot; returns the value of its left argument shifted left by the number of bits specified by the right argument. Arguments should be integers. (See also Integer Arithmetic.)</section>	http://perldoc.perl.org/perlop.html#Shift-Operators
setprotoent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>setprotoent STAYOPEN</pre>Prepare protocols file for use.</section>	http://perldoc.perl.org/functions/setprotoent.html
Can't find label %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said to goto a label that isn&#39;t mentioned anywhere that it&#39;s possible for us to go to.  See <span href="http://perldoc.perl.org/functions/goto.html">goto</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-label-%25s
How do I read and write the serial port?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in <code class="inline"><span class="q">/dev</span></code> ; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following:</p><p>While trying to read from his caller-id box, the notorious Jamie Zawinski <code class="inline"><span class="q">&lt;jwz@netscape.com&gt;</span></code> , after much gnashing of teeth and fighting with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>, POSIX&#39;s <code class="inline"><span class="w">tcgetattr</span></code>  business, and various other functions that go bump in the night, finally came up with this:</p><pre class="verbatim"><ol><li><span name="open_modem"></span>    sub <span class="m">open_modem</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Open2</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$stty</span> = <span class="q">`/bin/stty -g`</span><span class="sc">;</span></li><li>        <span class="i">open2</span><span class="s">(</span> \\<span class="i">*MODEM_IN</span><span class="cm">,</span> \\<span class="i">*MODEM_OUT</span><span class="cm">,</span> <span class="q">&quot;cu -l$modem_device -s2400 2&gt;&amp;1&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="c"># starting cu hoses /dev/tty&#39;s stty settings, even when it has</span></li><li>        <span class="c"># been opened on a pipe...</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;/bin/stty $stty&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$_</span> = <span class="q">&lt;MODEM_IN&gt;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span> !<span class="q">m/^Connected/</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;$0: cu printed `$_&#39; instead of `Connected&#39;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-read-and-write-the-serial-port%3f
flush (definition)	A			Perl Glossary							<section class="prog__container"><p>The act of emptying a <b>buffer</b>, often before it’s full.</p></section>	http://perldoc.perl.org/perlglossary.html#flush
How do I handle linked lists?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Perl&#39;s arrays do not have a fixed size, so you don&#39;t need linked lists if you just want to add or remove items. You can use array operations such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code> to do that.</p><p>Sometimes, however, linked lists can be useful in situations where you want to &quot;shard&quot; an array so you have many small arrays instead of a single big array. You can keep arrays longer than Perl&#39;s largest array index, lock smaller arrays separately in threaded programs, reallocate less memory, or quickly insert elements in the middle of the chain.</p><p>Steve Lembark goes through the details in his YAPC::NA 2009 talk &quot;Perly Linked Lists&quot; ( <span href="http://www.slideshare.net/lembark/perly-linked-lists">http://www.slideshare.net/lembark/perly-linked-lists</span> ), although you can just use his <span href="http://search.cpan.org/perldoc/LinkedList::Single">LinkedList::Single</span> module.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-handle-linked-lists%3f
Why isn't my octal data interpreted correctly?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You&#39;re probably trying to convert a string to a number, which Perl only converts as a decimal number. When Perl converts a string to a number, it ignores leading spaces and zeroes, then assumes the rest of the digits are in base 10:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="q">&#39;0644&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$string</span> + <span class="n">0</span><span class="sc">;</span>  <span class="c"># prints 644</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$string</span> + <span class="n">44</span><span class="sc">;</span> <span class="c"># prints 688, certainly not octal!</span></li></ol></pre><p>This problem usually involves one of the Perl built-ins that has the same name a Unix command that uses octal numbers as arguments on the command line. In this example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span></code> on the command line knows that its first argument is octal because that&#39;s what it does:</p><pre class="verbatim"><ol><li>    <span class="i">%prompt</span>&gt; <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span> <span class="n">644</span> <span class="w">file</span></li></ol></pre><p>If you want to use the same literal digits (644) in Perl, you have to tell Perl to treat them as octal numbers either by prefixing the digits with a <code class="inline"><span class="n">0</span></code>  or using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span><span class="s">(</span>     <span class="n">0644</span><span class="cm">,</span> <span class="i">$filename</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># right, has leading zero</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span><span class="s">(</span><span class="n">644</span><span class="s">)</span><span class="cm">,</span> <span class="i">$filename</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># also correct</span></li></ol></pre><p>The problem comes in when you take your numbers from something that Perl thinks is a string, such as a command line argument in <code class="inline"><span class="i">@ARGV</span></code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span><span class="s">(</span> <span class="i">$ARGV</span>[<span class="n">0</span>]<span class="cm">,</span>      <span class="i">$filename</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># wrong, even if &quot;0644&quot;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chmod.html">chmod</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/oct.html">oct</span><span class="s">(</span><span class="i">$ARGV</span>[<span class="n">0</span>]<span class="s">)</span><span class="cm">,</span> <span class="i">$filename</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># correct, treat string as octal</span></li></ol></pre><p>You can always check the value you&#39;re using by printing it in octal notation to ensure it matches what you think it should be. Print it in octal  and decimal format:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;0%o %d&quot;</span><span class="cm">,</span> <span class="i">$number</span><span class="cm">,</span> <span class="i">$number</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#Why-isn't-my-octal-data-interpreted-correctly%3f
Warning: something's wrong	A			Perl Diagnostics							<section class="prog__container"><p>(W) You passed warn() an empty string (the equivalent of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;&quot;</span></code> ) or you called it with no args and <code class="inline"><span class="i">$@</span></code>  was empty.</p></section>	http://perldoc.perl.org/perldiag.html#Warning%3a-something's-wrong
No next::method '%s' found for %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next::method</span></code> found no further instances of this method name in the remaining packages of the MRO of this class.  If you don&#39;t want it throwing an exception, use <code class="inline"><span class="w">maybe::next::method</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next::can</span></code>.  See <span href="http://perldoc.perl.org/mro.html">mro</span>.</p></section>	http://perldoc.perl.org/perldiag.html#No-next%3a%3amethod-'%25s'-found-for-%25s
Why doesn't "my($foo) = <$fh>;" work right?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my()</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local()</span></code> give list context to the right hand side of <code class="inline">=</code> . The &lt;$fh&gt; read operation, like so many of Perl&#39;s functions and operators, can tell which context it was called in and behaves appropriately. In general, the scalar() function can help. This function does nothing to the data itself (contrary to popular myth) but rather tells its argument to behave in whatever its scalar fashion is. If that function doesn&#39;t have a defined scalar behavior, this of course doesn&#39;t help you (such as with sort()).</p><p>To enforce scalar context in this particular case, however, you need merely omit the parentheses:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span><span class="i">$foo</span><span class="s">)</span> = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span>        <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span><span class="i">$foo</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="q">&lt;$fh&gt;</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># ok</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$foo</span>  = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span>        <span class="c"># right</span></li></ol></pre><p>You should probably be using lexical variables anyway, although the issue is the same here:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$foo</span><span class="s">)</span> = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span>    <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span>  = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span>    <span class="c"># right</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq7.html#Why-doesn't-%22my(%24foo)-%3d-%3c%24fh%3e%3b%22-work-right%3f
Non-finite repeat count does nothing	A			Perl Diagnostics							<section class="prog__container"><p>(W numeric) You tried to execute the <span href="http://perldoc.perl.org/perlop.html#Multiplicative-Operators">x </span> repetition operator <code class="inline"><span class="w">Inf</span></code>  (or <code class="inline">-<span class="w">Inf</span></code> ) or <code class="inline"><span class="w">NaN</span></code>  times, which doesn&#39;t make sense.</p></section>	http://perldoc.perl.org/perldiag.html#Non-finite-repeat-count-does-nothing
Sequence "\c{" invalid	A			Perl Diagnostics							<section class="prog__container"><p>(F) These three characters may not appear in sequence in a double-quotish context.  This message is raised only on non-ASCII platforms (a different error message is output on ASCII ones).  If you were intending to specify a control character with this sequence, you&#39;ll have to use a different way to specify it.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-%22%5cc%7b%22-invalid
shmctl (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>shmctl ID,CMD,ARG</pre><p>Calls the System V IPC function shmctl.  You&#39;ll probably have to say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span><span class="sc">;</span></li></ol></pre><p>first to get the correct constant definitions.  If CMD is <code class="inline"><span class="w">IPC_STAT</span></code> , then ARG must be a variable that will hold the returned <code class="inline"><span class="w">shmid_ds</span></code>  structure.  Returns like ioctl: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> for error; &quot;<code class="inline"><span class="n">0</span></code>  but true&quot; for zero; and the actual return value otherwise. See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span> and <code class="inline"><span class="w">IPC::SysV</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#shmctl">shmctl in perlport</span>.</p></section>	http://perldoc.perl.org/functions/shmctl.html
operand (definition)	A			Perl Glossary		[[precedence]]					<section class="prog__container"><p>An <b>expression</b> that yields a <b>value</b> that an <b>operator</b> operates on. </p></section>	http://perldoc.perl.org/perlglossary.html#operand
%s found where operator expected	A			Perl Diagnostics							<section class="prog__container"><p>(S syntax) The Perl lexer knows whether to expect a term or an operator. If it sees what it knows to be a term when it was expecting to see an operator, it gives you this warning.  Usually it indicates that an operator or delimiter was omitted, such as a semicolon.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-found-where-operator-expected
Warning: unable to close filehandle %s properly: %s	A			Perl Diagnostics							<section class="prog__container"><p>(S io) An error occurred when Perl implicitly closed a filehandle.  This usually indicates your file system ran out of disk space.</p></section>	http://perldoc.perl.org/perldiag.html#Warning%3a-unable-to-close-filehandle-%25s-properly%3a-%25s
How do I read email?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/Email::Folder">Email::Folder</span> module, like so:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Email::Folder</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$folder</span> = <span class="w">Email::Folder</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;/path/to/email/folder&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$message</span> = <span class="i">$folder</span><span class="i">-&gt;next_message</span><span class="s">)</span> <span class="s">{</span></li><li>    <span class="c"># next_message returns Email::Simple objects, but we want</span></li><li>    <span class="c"># Email::MIME objects as they&#39;re more robust</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mime</span> = <span class="w">Email::MIME</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$message</span><span class="i">-&gt;as_string</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="s">}</span></li></ol></pre><p>There are different classes in the <span href="http://search.cpan.org/perldoc/Email::Folder">Email::Folder</span> namespace for supporting various mailbox types. Note that these modules are generally rather limited and only support <b>reading</b> rather than writing.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-read-email%3f
lexeme (definition)	A			Perl Glossary							<section class="prog__container"><p>Fancy term for a <b>token</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#lexeme
How do I find out my hostname, domainname, or IP address?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <span href="http://perldoc.perl.org/Net/Domain.html">Net::Domain</span> module, which is part of the Standard Library starting in Perl 5.7.3, can get you the fully qualified domain name (FQDN), the host name, or the domain name.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Domain</span> <span class="q">qw(hostname hostfqdn hostdomain)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$host</span> = <span class="i">hostfqdn</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/Sys/Hostname.html">Sys::Hostname</span> module, part of the Standard Library, can also get the hostname:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Sys::Hostname</span><span class="sc">;</span></li><li></li><li>    <span class="i">$host</span> = <span class="i">hostname</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Sys::Hostname::Long">Sys::Hostname::Long</span> module takes a different approach and tries harder to return the fully qualified hostname:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Sys::Hostname::Long</span> <span class="q">&#39;hostname_long&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$hostname</span> = <span class="i">hostname_long</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>To get the IP address, you can use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gethostbyname.html">gethostbyname</span></code> built-in function to turn the name into a number. To turn that number into the dotted octet form (a.b.c.d) that most people expect, use the <code class="inline"><span class="w">inet_ntoa</span></code>  function from the <span href="http://perldoc.perl.org/Socket.html">Socket</span> module, which also comes with perl.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$address</span> = <span class="i">inet_ntoa</span><span class="s">(</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/gethostbyname.html">gethostbyname</span><span class="s">(</span> <span class="i">$host</span> || <span class="q">&#39;localhost&#39;</span> <span class="s">)</span></li><li>    <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-find-out-my-hostname%2c-domainname%2c-or-IP-address%3f
last (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>last LABEL<br>last EXPR<br>last</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> command is like the <code class="inline"><span class="w">break</span></code>  statement in C (as used in loops); it immediately exits the loop in question.  If the LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">EXPR</span></code>  form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">LABEL</span></code> .  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block, if any, is not executed:</p><pre class="verbatim"><ol><li>    <span class="j">LINE:</span> while <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">LINE</span> if <span class="q">/^$/</span><span class="sc">;</span>  <span class="c"># exit when done with header</span></li><li>        <span class="c">#...</span></li><li>    <span class="s">}</span></li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> cannot be used to exit a block that returns a value such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span><span class="s">}</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.</p><p>Note that a block by itself is semantically identical to a loop that executes once.  Thus <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> can be used to effect an early exit out of such a block.</p><p>See also <span href="http://perldoc.perl.org/functions/continue.html">continue</span> for an illustration of how <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> work.</p><p>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>.</p></section>	http://perldoc.perl.org/functions/last.html
Pod::Parser (module)	A			Perl Standard Modules		[[Pod::InputObjects]]\n[[Pod::Select]]					<section class="prog__container"><p>Pod::Parser - base class for creating POD filters and translators</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Parser</span><span class="sc">;</span></li><li></li><li><span name="package-MyParser"></span>    package <span class="i">MyParser</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Pod::Parser)</span><span class="sc">;</span></li><li></li><li><span name="command"></span>    sub <span class="m">command</span> <span class="s">{</span> </li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$command</span><span class="cm">,</span> <span class="i">$paragraph</span><span class="cm">,</span> <span class="i">$line_num</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c">## Interpret the command and its text; sample actions might be:</span></li><li>        if <span class="s">(</span><span class="i">$command</span> eq <span class="q">&#39;head1&#39;</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>        elsif <span class="s">(</span><span class="i">$command</span> eq <span class="q">&#39;head2&#39;</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>        <span class="c">## ... other commands and their actions</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out_fh</span> = <span class="i">$parser</span><span class="i">-&gt;output_handle</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$expansion</span> = <span class="i">$parser</span><span class="i">-&gt;interpolate</span><span class="s">(</span><span class="i">$paragraph</span><span class="cm">,</span> <span class="i">$line_num</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out_fh</span> <span class="i">$expansion</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="verbatim"></span>    sub <span class="m">verbatim</span> <span class="s">{</span> </li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$paragraph</span><span class="cm">,</span> <span class="i">$line_num</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c">## Format verbatim paragraph; sample actions might be:</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out_fh</span> = <span class="i">$parser</span><span class="i">-&gt;output_handle</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out_fh</span> <span class="i">$paragraph</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="textblock"></span>    sub <span class="m">textblock</span> <span class="s">{</span> </li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$paragraph</span><span class="cm">,</span> <span class="i">$line_num</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c">## Translate/Format this block of text; sample actions might be:</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out_fh</span> = <span class="i">$parser</span><span class="i">-&gt;output_handle</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$expansion</span> = <span class="i">$parser</span><span class="i">-&gt;interpolate</span><span class="s">(</span><span class="i">$paragraph</span><span class="cm">,</span> <span class="i">$line_num</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out_fh</span> <span class="i">$expansion</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="interior_sequence"></span>    sub <span class="m">interior_sequence</span> <span class="s">{</span> </li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$seq_command</span><span class="cm">,</span> <span class="i">$seq_argument</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c">## Expand an interior sequence; sample actions might be:</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="q">&quot;*$seq_argument*&quot;</span>     if <span class="s">(</span><span class="i">$seq_command</span> eq <span class="q">&#39;B&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="q">&quot;`$seq_argument&#39;&quot;</span>     if <span class="s">(</span><span class="i">$seq_command</span> eq <span class="q">&#39;C&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="q">&quot;_${seq_argument}_&#39;&quot;</span>  if <span class="s">(</span><span class="i">$seq_command</span> eq <span class="q">&#39;I&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="c">## ... other sequence commands and their resulting text</span></li><li>    <span class="s">}</span></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="c">## Create a parser object and have it parse file whose name was</span></li><li>    <span class="c">## given on the command-line (use STDIN if no files were given).</span></li><li>    <span class="i">$parser</span> = <span class="w">new</span> <span class="i">MyParser</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="s">(</span>\\<span class="i">*STDIN</span><span class="s">)</span>  if <span class="s">(</span><span class="i">@ARGV</span> == <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    for <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span> <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Parser.html
stat (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>stat FILEHANDLE<br>stat EXPR<br>stat DIRHANDLE<br>stat</pre><p>Returns a 13-element list giving the status info for a file, either the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is  omitted, it stats <code class="inline"><span class="i">$_</span></code>  (not <code class="inline"><span class="w">_</span></code> !).  Returns the empty list if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> fails.  Typically used as follows:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$dev</span><span class="cm">,</span><span class="i">$ino</span><span class="cm">,</span><span class="i">$mode</span><span class="cm">,</span><span class="i">$nlink</span><span class="cm">,</span><span class="i">$uid</span><span class="cm">,</span><span class="i">$gid</span><span class="cm">,</span><span class="i">$rdev</span><span class="cm">,</span><span class="i">$size</span><span class="cm">,</span></li><li>       <span class="i">$atime</span><span class="cm">,</span><span class="i">$mtime</span><span class="cm">,</span><span class="i">$ctime</span><span class="cm">,</span><span class="i">$blksize</span><span class="cm">,</span><span class="i">$blocks</span><span class="s">)</span></li><li>           = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Not all fields are supported on all filesystem types.  Here are the meanings of the fields:</p><pre class="verbatim"><ol><li>  <span class="n">0</span> <span class="w">dev</span>      <span class="w">device</span> <span class="w">number</span> <span class="w">of</span> <span class="w">filesystem</span></li><li>  <span class="n">1</span> <span class="w">ino</span>      <span class="w">inode</span> <span class="w">number</span></li><li>  <span class="n">2</span> <span class="w">mode</span>     <span class="w">file</span> <span class="w">mode</span>  <span class="s">(</span><span class="w">type</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">permissions</span><span class="s">)</span></li><li>  <span class="n">3</span> <span class="w">nlink</span>    <span class="w">number</span> <span class="w">of</span> <span class="s">(</span><span class="w">hard</span><span class="s">)</span> <span class="w">links</span> <span class="w">to</span> <span class="w">the</span> <span class="w">file</span></li><li>  <span class="n">4</span> <span class="w">uid</span>      <span class="w">numeric</span> <span class="w">user</span> <span class="w">ID</span> <span class="w">of</span> <span class="w">file&#39;s</span> <span class="w">owner</span></li><li>  <span class="n">5</span> <span class="w">gid</span>      <span class="w">numeric</span> <span class="w">group</span> <span class="w">ID</span> <span class="w">of</span> <span class="w">file&#39;s</span> <span class="w">owner</span></li><li>  <span class="n">6</span> <span class="w">rdev</span>     <span class="w">the</span> <span class="w">device</span> <span class="w">identifier</span> <span class="s">(</span><span class="w">special</span> <span class="w">files</span> <span class="w">only</span><span class="s">)</span></li><li>  <span class="n">7</span> <span class="w">size</span>     <span class="w">total</span> <span class="w">size</span> <span class="w">of</span> <span class="w">file</span><span class="cm">,</span> <span class="w">in</span> <span class="w">bytes</span></li><li>  <span class="n">8</span> <span class="w">atime</span>    <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">access</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span> <span class="w">in</span> <span class="w">seconds</span> <span class="w">since</span> <span class="w">the</span> <span class="w">epoch</span></li><li>  <span class="n">9</span> <span class="w">mtime</span>    <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">modify</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span> <span class="w">in</span> <span class="w">seconds</span> <span class="w">since</span> <span class="w">the</span> <span class="w">epoch</span></li><li> <span class="n">10</span> <span class="w">ctime</span>    <span class="w">inode</span> <span class="w">change</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span> <span class="w">in</span> <span class="w">seconds</span> <span class="w">since</span> <span class="w">the</span> <span class="w">epoch</span> <span class="s">(</span><span class="i">*)</span></li><li> <span class="n">11</span> <span class="w">blksize</span>  <span class="w">preferred</span> <span class="w">I</span>/<span class="w">O</span> <span class="w">size</span> <span class="w">in</span> <span class="w">bytes</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">interacting</span> <span class="w">with</span> <span class="w">the</span></li><li>             <span class="w">file</span> <span class="s">(</span><span class="w">may</span> <span class="w">vary</span> <span class="w">from</span> <span class="w">file</span> <span class="w">to</span> <span class="w">file</span><span class="s">)</span></li><li> <span class="n">12</span> <span class="w">blocks</span>   <span class="w">actual</span> <span class="w">number</span> <span class="w">of</span> <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span>-<span class="w">specific</span> <span class="w">blocks</span> <span class="w">allocated</span></li><li>             <span class="w">on</span> <span class="w">disk</span> <span class="s">(</span><span class="w">often</span><span class="cm">,</span> <span class="w">but</span> <span class="l_k" href="http://perldoc.perl.org/functions/not.html">not</span> <span class="w">always</span><span class="cm">,</span> <span class="n">512</span> <span class="w">bytes</span> <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span><span class="s">)</span></li></ol></pre><p>(The epoch was at 00:00 January 1, 1970 GMT.)</p><p>(*) Not all fields are supported on all filesystem types.  Notably, the ctime field is non-portable.  In particular, you cannot expect it to be a &quot;creation time&quot;; see <span href="http://perldoc.perl.org/perlport.html#Files-and-Filesystems">Files and Filesystems in perlport</span> for details.</p><p>If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> is passed the special filehandle consisting of an underline, no stat is done, but the current contents of the stat structure from the last <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lstat.html">lstat</span></code>, or filetest are returned.  Example:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span>-x <span class="i">$file</span> &amp;&amp; <span class="s">(</span><span class="s">(</span><span class="i">$d</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="w">_</span><span class="s">)</span><span class="s">)</span> &amp;&amp; <span class="i">$d</span> &lt; <span class="n">0</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$file is executable NFS file\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>(This works on machines only for which the device number is negative under NFS.)</p><p>Because the mode contains both the file type and its permissions, you should mask off the file type portion and (s)printf using a <code class="inline"><span class="q">&quot;%o&quot;</span></code>  if you want to see the real permissions.</p><pre class="verbatim"><ol><li>    <span class="i">$mode</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="s">)</span>[<span class="n">2</span>]<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;Permissions are %04o\\n&quot;</span><span class="cm">,</span> <span class="i">$mode</span> &amp; <span class="n">07777</span><span class="sc">;</span></li></ol></pre><p>In scalar context, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> returns a boolean value indicating success or failure, and, if successful, sets the information associated with the special filehandle <code class="inline"><span class="w">_</span></code> .</p><p>The <span href="http://perldoc.perl.org/File/stat.html">File::stat</span> module provides a convenient, by-name access mechanism:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::stat</span><span class="sc">;</span></li><li>    <span class="i">$sb</span> = <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;File is %s, size is %s, perm %04o, mtime %s\\n&quot;</span><span class="cm">,</span></li><li>           <span class="i">$filename</span><span class="cm">,</span> <span class="i">$sb</span><span class="i">-&gt;size</span><span class="cm">,</span> <span class="i">$sb</span><span class="i">-&gt;mode</span> &amp; <span class="n">07777</span><span class="cm">,</span></li><li>           <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span> <span class="i">$sb</span><span class="i">-&gt;mtime</span><span class="sc">;</span></li></ol></pre><p>You can import symbolic mode constants (<code class="inline"><span class="w">S_IF</span>*</code> ) and functions (<code class="inline"><span class="w">S_IS</span>*</code> ) from the Fcntl module:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">&#39;:mode&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$mode</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="s">)</span>[<span class="n">2</span>]<span class="sc">;</span></li><li></li><li>    <span class="i">$user_rwx</span>      = <span class="s">(</span><span class="i">$mode</span> &amp; <span class="w">S_IRWXU</span><span class="s">)</span> &gt;&gt; <span class="n">6</span><span class="sc">;</span></li><li>    <span class="i">$group_read</span>    = <span class="s">(</span><span class="i">$mode</span> &amp; <span class="w">S_IRGRP</span><span class="s">)</span> &gt;&gt; <span class="n">3</span><span class="sc">;</span></li><li>    <span class="i">$other_execute</span> =  <span class="i">$mode</span> &amp; <span class="w">S_IXOTH</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;Permissions are %04o\\n&quot;</span><span class="cm">,</span> <span class="i">S_IMODE</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$is_setuid</span>     =  <span class="i">$mode</span> &amp; <span class="w">S_ISUID</span><span class="sc">;</span></li><li>    <span class="i">$is_directory</span>  =  <span class="i">S_ISDIR</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You could write the last two using the <code class="inline">-u</code>  and <code class="inline">-d</code>  operators. Commonly available <code class="inline"><span class="w">S_IF</span>*</code>  constants are:</p><pre class="verbatim"><ol><li>    <span class="c"># Permissions: read, write, execute, for user, group, others.</span></li><li></li><li>    <span class="w">S_IRWXU</span> <span class="w">S_IRUSR</span> <span class="w">S_IWUSR</span> <span class="w">S_IXUSR</span></li><li>    <span class="w">S_IRWXG</span> <span class="w">S_IRGRP</span> <span class="w">S_IWGRP</span> <span class="w">S_IXGRP</span></li><li>    <span class="w">S_IRWXO</span> <span class="w">S_IROTH</span> <span class="w">S_IWOTH</span> <span class="w">S_IXOTH</span></li><li></li><li>    <span class="c"># Setuid/Setgid/Stickiness/SaveText.</span></li><li>    <span class="c"># Note that the exact meaning of these is system-dependent.</span></li><li></li><li>    <span class="w">S_ISUID</span> <span class="w">S_ISGID</span> <span class="w">S_ISVTX</span> <span class="w">S_ISTXT</span></li><li></li><li>    <span class="c"># File types.  Not all are necessarily available on</span></li><li>    <span class="c"># your system.</span></li><li></li><li>    <span class="w">S_IFREG</span> <span class="w">S_IFDIR</span> <span class="w">S_IFLNK</span> <span class="w">S_IFBLK</span> <span class="w">S_IFCHR</span></li><li>    <span class="w">S_IFIFO</span> <span class="w">S_IFSOCK</span> <span class="w">S_IFWHT</span> <span class="w">S_ENFMT</span></li><li></li><li>    <span class="c"># The following are compatibility aliases for S_IRUSR,</span></li><li>    <span class="c"># S_IWUSR, and S_IXUSR.</span></li><li></li><li>    <span class="w">S_IREAD</span> <span class="w">S_IWRITE</span> <span class="w">S_IEXEC</span></li></ol></pre><p>and the <code class="inline"><span class="w">S_IF</span>*</code>  functions are</p><pre class="verbatim"><ol><li>    <span class="i">S_IMODE</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span>    <span class="w">the</span> <span class="w">part</span> <span class="w">of</span> <span class="i">$mode</span> <span class="w">containing</span> <span class="w">the</span> <span class="w">permission</span></li><li>                      <span class="w">bits</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">the</span> <span class="w">setuid</span>/<span class="w">setgid</span>/<span class="w">sticky</span> <span class="w">bits</span></li><li></li><li>    <span class="i">S_IFMT</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span>     <span class="w">the</span> <span class="w">part</span> <span class="w">of</span> <span class="i">$mode</span> <span class="w">containing</span> <span class="w">the</span> <span class="w">file</span> <span class="w">type</span></li><li>                      <span class="w">which</span> <span class="w">can</span> <span class="w">be</span> <span class="w">bit</span>-<span class="w">anded</span> <span class="w">with</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">example</span><span class="s">)</span></li><li>                      <span class="w">S_IFREG</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">with</span> <span class="w">the</span> <span class="w">following</span> <span class="w">functions</span></li><li></li><li>    <span class="c"># The operators -f, -d, -l, -b, -c, -p, and -S.</span></li><li></li><li>    <span class="i">S_ISREG</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISDIR</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISLNK</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span></li><li>    <span class="i">S_ISBLK</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISCHR</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISFIFO</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISSOCK</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span></li><li></li><li>    <span class="c"># No direct -X operator counterpart, but for the first one</span></li><li>    <span class="c"># the -g operator is often equivalent.  The ENFMT stands for</span></li><li>    <span class="c"># record flocking enforcement, a platform-dependent feature.</span></li><li></li><li>    <span class="i">S_ISENFMT</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span> <span class="i">S_ISWHT</span><span class="s">(</span><span class="i">$mode</span><span class="s">)</span></li></ol></pre><p>See your native chmod(2) and stat(2) documentation for more details about the <code class="inline"><span class="w">S_</span>*</code>  constants.  To get status info for a symbolic link instead of the target file behind the link, use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lstat.html">lstat</span></code> function.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#stat">stat in perlport</span>.</p></section>	http://perldoc.perl.org/functions/stat.html
Excessively long <> operator	A			Perl Diagnostics							<section class="prog__container"><p>(F) The contents of a &lt;&gt; operator may not exceed the maximum size of a Perl identifier.  If you&#39;re just trying to glob a long list of filenames, try using the glob() operator, or put the filenames into a variable and glob that.</p></section>	http://perldoc.perl.org/perldiag.html#Excessively-long-%3c%3e-operator
-W	A			Perl Command-Line Switches							<section class="prog__container"><p>Enables all warnings regardless of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span></code>  or <code class="inline"><span class="i">$^W</span></code> . See <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-W*
record (definition)	A			Perl Glossary							<section class="prog__container"><p>A set of related data values in a <b>file</b> or <b>stream</b>, often associated with a unique <b>key</b> field. In Unix, often commensurate with a <b>line</b>, or a blank-line–terminated set of lines (a “paragraph”). Each line of the <i>/etc/passwd</i> file is a record, keyed on login name, containing information about that user.</p></section>	http://perldoc.perl.org/perlglossary.html#record
list context (definition)	A			Perl Glossary							<section class="prog__container"><p>The situation in which an <b>expression</b> is expected by its surroundings (the code calling it) to return a list of values rather than a single value. Functions that want a <i><code class="inline"><span class="w">LIST</span></code> </i> of arguments tell those arguments that they should produce a list value. See also <b>context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#list-context
PerlIO layer ':win32' is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::win32_perlio) The <code class="inline"><span class="j">:</span><span class="w">win32</span></code>  PerlIO layer is experimental.  If you want to take the risk of using this layer, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::win32_perlio&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#PerlIO-layer-'%3awin32'-is-experimental
Useless (?-%s) - don't use /%s modifier in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You have used an internal modifier such as (?-o) that has no meaning unless removed from the entire regexp:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$string</span> =~ <span class="q">/(?-o)$pattern/o</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>must be written as</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$string</span> =~ <span class="q">/$pattern/</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-(%3f-%25s)---don't-use-%2f%25s-modifier-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
This Perl has not been built with support for randomized hash key traversal but something called Perl_hv_rand_set().	A			Perl Diagnostics							<section class="prog__container"><p>(F) Something has attempted to use an internal API call which depends on Perl being compiled with the default support for randomized hash key traversal, but this Perl has been compiled without it.  You should report this warning to the relevant upstream party, or recompile perl with default options.</p></section>	http://perldoc.perl.org/perldiag.html#This-Perl-has-not-been-built-with-support-for-randomized-hash-key-traversal-but-something-called-Perl_hv_rand_set().
return (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>return EXPR<br>return</pre><p>Returns from a subroutine, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">FILE</span></code>  with the value given in EXPR.  Evaluation of EXPR may be in list, scalar, or void context, depending on how the return value will be used, and the context may vary from one execution to the next (see <span href="http://perldoc.perl.org/functions/wantarray.html">wantarray</span>).  If no EXPR is given, returns an empty list in list context, the undefined value in scalar context, and (of course) nothing at all in void context.</p><p>(In the absence of an explicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span></code>, a subroutine, eval, or do FILE automatically returns the value of the last expression evaluated.)</p><p>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span></code>.</p></section>	http://perldoc.perl.org/functions/return.html
sem%s not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You don&#39;t have System V semaphore IPC on your system.</p></section>	http://perldoc.perl.org/perldiag.html#sem%25s-not-implemented
single inheritance (definition)	A			Perl Glossary		[[inheritance]]\n[[multiple inheritance]]					<section class="prog__container"><p>The features you got from your mother, if she told you that you don’t have a father.  In computer languages, the idea that <b>classes</b> reproduce asexually so that a given class can only have one direct ancestor or <b>base class</b>. Perl supplies no such restriction, though you may certainly program Perl that way if you like.</p></section>	http://perldoc.perl.org/perlglossary.html#single-inheritance
Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined()</span></code> is not usually right on hashes.</p><p>Although <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">%hash</span></code>  is false on a plain not-yet-used hash, it becomes true in several non-obvious circumstances, including iterators, weak references, stash names, even remaining true after <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%hash</span></code> . These things make <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">%hash</span></code>  fairly useless in practice, so it now generates a fatal error.</p><p>If a check for non-empty is what you wanted then just put it in boolean context (see <span href="http://perldoc.perl.org/perldata.html#Scalar-values">Scalar values in perldata</span>):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">%hash</span><span class="s">)</span> <span class="s">{</span></li><li>       <span class="c"># not empty</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you had <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">%Foo::Bar::QUUX</span></code>  to check whether such a package variable exists then that&#39;s never really been reliable, and isn&#39;t a good way to enquire about the features of a package, or whether it&#39;s loaded, etc.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-'defined(%25hash)'-(Maybe-you-should-just-omit-the-defined()%3f)
When should I decode or encode?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Whenever you&#39;re communicating text with anything that is external to your perl process, like a database, a text file, a socket, or another program. Even if the thing you&#39;re communicating with is also written in Perl.</p></section>	http://perldoc.perl.org/perlunifaq.html#When-should-I-decode-or-encode%3f
Can't locate object method "%s" via package "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called a method correctly, and it correctly indicated a package functioning as a class, but that package doesn&#39;t define that particular method, nor does any of its base classes.  See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-object-method-%22%25s%22-via-package-%22%25s%22
Can't open error file %s as stderr	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;2&gt;&#39; or &#39;2&gt;&gt;&#39; on the command line for writing.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-error-file-%25s-as-stderr
How can I make my hash remember the order I put elements into it?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/Tie::IxHash">Tie::IxHash</span> from CPAN.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::IxHash</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%myhash</span><span class="cm">,</span> <span class="q">&#39;Tie::IxHash&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span>=<span class="n">0</span><span class="sc">;</span> <span class="i">$i</span>&lt;<span class="n">20</span><span class="sc">;</span> <span class="i">$i</span>++<span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$myhash</span>{<span class="i">$i</span>} = <span class="n">2</span>*<span class="i">$i</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%myhash</span><span class="sc">;</span></li><li>    <span class="c"># @keys = (0,1,2,3,...)</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-make-my-hash-remember-the-order-I-put-elements-into-it%3f
Regexp modifier "%c" may not appear after the "-" in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Turning off the given modifier has the side effect of turning on another one.  Perl currently doesn&#39;t allow this.  Reword the regular expression to use the modifier you want to turn on (and place it before the minus), instead of the one you want to turn off.</p></section>	http://perldoc.perl.org/perldiag.html#Regexp-modifier-%22%25c%22-may-not-appear-after-the-%22-%22-in-regex%3b-marked-by-%3c----HERE-in-m%2f%25s%2f
array (definition)	A			Perl Glossary							<section class="prog__container"><p>An ordered sequence of <b>values</b>, stored such that you can easily access any of the values using an <i>integer subscript</i> that specifies the value’s <b>offset</b> in the sequence.</p></section>	http://perldoc.perl.org/perlglossary.html#array
function (definition)	A			Perl Glossary							<section class="prog__container"><p>Mathematically, a mapping of each of a set of input values to a particular output value. In computers, refers to a <b>subroutine</b> or <b>operator</b> that returns a <b>value</b>. It may or may not have input values (called <b>arguments</b>).</p></section>	http://perldoc.perl.org/perlglossary.html#function
How do I select a random line from a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Short of loading the file into a database or pre-indexing the lines in the file, there are a couple of things that you can do.</p><p>Here&#39;s a reservoir-sampling algorithm from the Camel Book:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="i">$.</span><span class="s">)</span> &lt; <span class="n">1</span> &amp;&amp; <span class="s">(</span><span class="i">$line</span> = <span class="i">$_</span><span class="s">)</span> while &lt;&gt;<span class="sc">;</span></li></ol></pre><p>This has a significant advantage in space over reading the whole file in. You can find a proof of this method in <i>The Art of Computer Programming</i>, Volume 2, Section 3.4.2, by Donald E. Knuth.</p><p>You can use the <span href="http://search.cpan.org/perldoc/File::Random">File::Random</span> module which provides a function for that algorithm:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Random</span> <span class="q">qw/random_line/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span> = <span class="i">random_line</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Another way is to use the <span href="http://perldoc.perl.org/Tie/File.html">Tie::File</span> module, which treats the entire file as an array. Simply access a random array element.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-select-a-random-line-from-a-file%3f
program generator (definition)	A			Perl Glossary		[[code generator]]					<section class="prog__container"><p>A system that algorithmically writes code for you in a high-level language. </p></section>	http://perldoc.perl.org/perlglossary.html#program-generator
platform (definition)	A			Perl Glossary							<section class="prog__container"><p>The entire hardware and software context in which a program runs. A program written in a platform-dependent language might break if you change any of the following: machine, operating system, libraries, compiler, or system configuration. The <i>perl</i> interpreter has to be <b>compiled</b> differently for each platform because it is implemented in C, but programs written in the Perl language are largely platform independent.</p></section>	http://perldoc.perl.org/perlglossary.html#platform
How do I extract selected columns from a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you know the columns that contain the data, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span></code> to extract a single column.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$column</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$line</span><span class="cm">,</span> <span class="i">$start_column</span><span class="cm">,</span> <span class="i">$length</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> if the columns are separated by whitespace or some other delimiter, as long as whitespace or the delimiter cannot appear as part of the data.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span>    = <span class="q">&#39; fred barney   betty   &#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@columns</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span> <span class="q">/\\s+/</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span></li><li>        <span class="c"># ( &#39;&#39;, &#39;fred&#39;, &#39;barney&#39;, &#39;betty&#39; );</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span>    = <span class="q">&#39;fred||barney||betty&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@columns</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span> <span class="q">/\\|/</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span></li><li>        <span class="c"># ( &#39;fred&#39;, &#39;&#39;, &#39;barney&#39;, &#39;&#39;, &#39;betty&#39; );</span></li></ol></pre><p>If you want to work with comma-separated values, don&#39;t do this since that format is a bit more complicated. Use one of the modules that handle that format, such as <span href="http://search.cpan.org/perldoc/Text::CSV">Text::CSV</span>, <span href="http://search.cpan.org/perldoc/Text::CSV_XS">Text::CSV_XS</span>, or <span href="http://search.cpan.org/perldoc/Text::CSV_PP">Text::CSV_PP</span>.</p><p>If you want to break apart an entire line of fixed columns, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> with the A (ASCII) format. By using a number after the format specifier, you can denote the column width. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> entries in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> for more details.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@fields</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span> <span class="i">$line</span><span class="cm">,</span> <span class="q">&quot;A8 A8 A8 A16 A4&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that spaces in the format argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> do not denote literal spaces. If you have space separated data, you may want <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> instead.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-extract-selected-columns-from-a-string%3f
Quantifier in {,} bigger than %d in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) There is currently a limit to the size of the min and max values of the {min,max} construct.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Quantifier-in-%7b%2c%7d-bigger-than-%25d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
command name (definition)	A			Perl Glossary							<section class="prog__container"><p>The name of the program currently executing, as typed on the command line. In C, the <b>command</b> name is passed to the program as the first command-line argument. In Perl, it comes in separately as <code class="inline"><span class="i">$0</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#command-name
(Did you mean &%s instead?)	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You probably referred to an imported subroutine &amp;FOO as $FOO or some such.</p></section>	http://perldoc.perl.org/perldiag.html#(Did-you-mean-%26%25s-instead%3f)
mode (definition)	A			Perl Glossary							<section class="prog__container"><p>In the context of the <i>stat</i>(2) syscall, refers to the field holding the <b>permission bits</b> and the type of the <b>file</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#mode
Binary "+" operator	A			Perl Operators\nPerl Additive Operators							<section class="prog__container">Binary &quot;+&quot; returns the sum of two numbers.</section>	http://perldoc.perl.org/perlop.html#Additive-Operators
header file (definition)	A			Perl Glossary							<section class="prog__container"><p>A file containing certain required definitions that you must include “ahead” of the rest of your program to do certain obscure operations. A C header file has a <i>.h</i> extension. Perl doesn’t really have header files, though historically Perl has sometimes used translated <i>.h</i> files with a <i>.ph</i> extension. See <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> in Camel chapter 27, “Functions”. (Header files have been superseded by the <b>module</b> mechanism.)</p></section>	http://perldoc.perl.org/perlglossary.html#header-file
flag (definition)	A			Perl Glossary							<section class="prog__container"><p>We tend to avoid this term because it means so many things. It may mean a command-line <b>switch</b> that takes no argument itself (such as Perl’s <code class="inline"><span class="q">–n</span></code>  and <code class="inline"><span class="q">–p</span></code>  flags) or, less frequently, a single-bit indicator (such as the <code class="inline"><span class="w">O_CREAT</span></code>  and <code class="inline"><span class="w">O_EXCL</span></code>  flags used in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>). Sometimes informally used to refer to certain regex modifiers.</p></section>	http://perldoc.perl.org/perlglossary.html#flag
Where can I learn about CGI or Web programming in Perl?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>For modules, get the CGI or LWP modules from CPAN. For textbooks, see the two especially dedicated to web stuff in the question on books. For problems and questions related to the web, like &quot;Why do I get 500 Errors&quot; or &quot;Why doesn&#39;t it run from the browser right when it runs fine on the command line&quot;, see the troubleshooting guides and references in <span href="http://perldoc.perl.org/perlfaq9.html">perlfaq9</span> or in the CGI MetaFAQ:</p><pre class="verbatim"><ol><li>    <span class="w">L</span><span class="q">&lt;<span href="http://www.perl.org/CGI_MetaFAQ.html">http://www.perl.org/CGI_MetaFAQ.html</span>&gt;</span></li></ol></pre><p>Looking in to <span href="http://search.cpan.org/perldoc/Plack">Plack</span> and modern Perl web frameworks is highly recommended, though; web programming in Perl has evolved a long way from the old days of simple CGI scripts.</p></section>	http://perldoc.perl.org/perlfaq3.html#Where-can-I-learn-about-CGI-or-Web-programming-in-Perl%3f
CPAN (definition)	A			Perl Glossary							<section class="prog__container"><p>The Comprehensive Perl Archive Network. (See the Camel Preface and Camel chapter 19, “CPAN” for details.)</p></section>	http://perldoc.perl.org/perlglossary.html#CPAN
YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!	A			Perl Diagnostics							<section class="prog__container"><p>(F) And you probably never will, because you probably don&#39;t have the sources to your kernel, and your vendor probably doesn&#39;t give a rip about what you want.  Your best bet is to put a setuid C wrapper around your script.</p></section>	http://perldoc.perl.org/perldiag.html#YOU-HAVEN'T-DISABLED-SET-ID-SCRIPTS-IN-THE-KERNEL-YET!
Negative repeat count does nothing	A			Perl Diagnostics							<section class="prog__container"><p>(W numeric) You tried to execute the <span href="http://perldoc.perl.org/perlop.html#Multiplicative-Operators">x </span> repetition operator fewer than 0 times, which doesn&#39;t make sense.</p></section>	http://perldoc.perl.org/perldiag.html#Negative-repeat-count-does-nothing
shmget (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>shmget KEY,SIZE,FLAGS</pre><p>Calls the System V IPC function shmget.  Returns the shared memory segment id, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> on error. See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span> and <code class="inline"><span class="w">IPC::SysV</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#shmget">shmget in perlport</span>.</p></section>	http://perldoc.perl.org/functions/shmget.html
EVAL without pos change exceeded limit in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a pattern that nested too many EVAL calls without consuming any text.  Restructure the pattern so that text is consumed.</p><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#EVAL-without-pos-change-exceeded-limit-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Data::Dumper doesn't restore the UTF8 flag; is it broken?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>No, Data::Dumper&#39;s Unicode abilities are as they should be. There have been some complaints that it should restore the UTF8 flag when the data is read again with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>. However, you should really not look at the flag, and nothing indicates that Data::Dumper should break this rule.</p><p>Here&#39;s what happens: when Perl reads in a string literal, it sticks to 8 bit encoding as long as it can. (But perhaps originally it was internally encoded as UTF-8, when you dumped it.) When it has to give that up because other characters are added to the text string, it silently upgrades the string to UTF-8.</p><p>If you properly encode your strings for output, none of this is of your concern, and you can just <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> dumped data as always.</p></section>	http://perldoc.perl.org/perlunifaq.html#Data%3a%3aDumper-doesn't-restore-the-UTF8-flag%3b-is-it-broken%3f
Pod::InputObjects (module)	A			Perl Standard Modules		[[Pod::Parser]]\n[[Pod::Parser]]\n[[Pod::Select]]					<section class="prog__container"><p>Pod::InputObjects - objects representing POD input paragraphs, commands, etc.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::InputObjects</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/InputObjects.html
Binary "cmp" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;cmp&quot; returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
Encode::EBCDIC (module)	A			Perl Standard Modules		[[Encode]]\n[[perlebcdic]]					<section class="prog__container"><p>Encode::EBCDIC - EBCDIC Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$posix_bc</span>  = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;posix-bc&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span> <span class="c"># loads Encode::EBCDIC implicitly</span></li><li>    <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;&quot;</span><span class="cm">,</span> <span class="i">$posix_bc</span><span class="s">)</span><span class="sc">;</span>          <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/EBCDIC.html
Operator or semicolon missing before %s	A			Perl Diagnostics							<section class="prog__container"><p>(S ambiguous) You used a variable or subroutine call where the parser was expecting an operator.  The parser has assumed you really meant to use an operator, but this is highly likely to be incorrect.  For example, if you say &quot;*foo *foo&quot; it will be interpreted as if you said &quot;*foo * &#39;foo&#39;&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Operator-or-semicolon-missing-before-%25s
Junk on end of regexp in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(P) The regular expression parser is confused.</p></section>	http://perldoc.perl.org/perldiag.html#Junk-on-end-of-regexp-in-regex-m%2f%25s%2f
ordinal (definition)	A			Perl Glossary							<section class="prog__container"><p>An abstract character’s integer value. Same thing as <b>codepoint</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#ordinal
Constant is not %s reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) A constant value (perhaps declared using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">constant</span></code>  pragma) is being dereferenced, but it amounts to the wrong type of reference. The message indicates the type of reference that was expected.  This usually indicates a syntax error in dereferencing the constant value. See <span href="http://perldoc.perl.org/perlsub.html#Constant-Functions">Constant Functions in perlsub</span> and <span href="http://perldoc.perl.org/constant.html">constant</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Constant-is-not-%25s-reference
POSIX (definition)	A			Perl Glossary							<section class="prog__container"><p>The Portable Operating System Interface specification.</p></section>	http://perldoc.perl.org/perlglossary.html#POSIX
How can I make my CGI script more efficient?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Beyond the normal measures described to make general Perl programs faster or smaller, a CGI program has additional issues. It may be run several times per second. Given that each time it runs it will need to be re-compiled and will often allocate a megabyte or more of system memory, this can be a killer. Compiling into C <b>isn&#39;t going to help you</b> because the process start-up overhead is where the bottleneck is.</p><p>There are three popular ways to avoid this overhead. One solution involves running the Apache HTTP server (available from <span href="http://www.apache.org/">http://www.apache.org/</span> ) with either of the mod_perl or mod_fastcgi plugin modules.</p><p>With mod_perl and the Apache::Registry module (distributed with mod_perl), httpd will run with an embedded Perl interpreter which pre-compiles your script and then executes it within the same address space without forking. The Apache extension also gives Perl access to the internal server API, so modules written in Perl can do just about anything a module written in C can. For more on mod_perl, see <span href="http://perl.apache.org/">http://perl.apache.org/</span></p><p>With the FCGI module (from CPAN) and the mod_fastcgi module (available from <span href="http://www.fastcgi.com/">http://www.fastcgi.com/</span> ) each of your Perl programs becomes a permanent CGI daemon process.</p><p>Finally, <span href="http://search.cpan.org/perldoc/Plack">Plack</span> is a Perl module and toolkit that contains PSGI middleware, helpers and adapters to web servers, allowing you to easily deploy scripts which can continue running, and provides flexibility with regards to which web server you use. It can allow existing CGI scripts to enjoy this flexibility and performance with minimal changes, or can be used along with modern Perl web frameworks to make writing and deploying web services with Perl a breeze.</p><p>These solutions can have far-reaching effects on your system and on the way you write your CGI programs, so investigate them with care.</p><p>See also <span href="http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/">http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/</span> .</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-make-my-CGI-script-more-efficient%3f
prototype (definition)	A			Perl Glossary							<section class="prog__container"><p>An optional part of a <b>subroutine</b> declaration telling the Perl compiler how many and what flavor of arguments may be passed as <b>actual arguments</b>, so you can write subroutine calls that parse much like built-in functions. (Or don’t parse, as the case may be.)</p></section>	http://perldoc.perl.org/perlglossary.html#prototype
panic: pad_swipe curpad, %p!=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_swipe-curpad%2c-%25p!%3d%25p
How can I convert my shell script to perl?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Learn Perl and rewrite it. Seriously, there&#39;s no simple converter. Things that are awkward to do in the shell are easy to do in Perl, and this very awkwardness is what would make a shell-&gt;perl converter nigh-on impossible to write. By rewriting it, you&#39;ll think about what you&#39;re really trying to do, and hopefully will escape the shell&#39;s pipeline datastream paradigm, which while convenient for some matters, causes many inefficiencies.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-convert-my-shell-script-to-perl%3f
$! (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>When referenced, <code class="inline"><span class="i">$!</span></code>  retrieves the current value of the C <code class="inline"><span class="w">errno</span></code>  integer variable. If <code class="inline"><span class="i">$!</span></code>  is assigned a numerical value, that value is stored in <code class="inline"><span class="w">errno</span></code> . When referenced as a string, <code class="inline"><span class="i">$!</span></code>  yields the system error string corresponding to <code class="inline"><span class="w">errno</span></code> .</p><p>Many system or library calls set <code class="inline"><span class="w">errno</span></code>  if they fail, to indicate the cause of failure.  They usually do <b>not</b> set <code class="inline"><span class="w">errno</span></code>  to zero if they succeed.  This means <code class="inline"><span class="w">errno</span></code> , hence <code class="inline"><span class="i">$!</span></code> , is meaningful only <i>immediately</i> after a <b>failure</b>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&lt;&quot;</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;&#09;<span class="c"># Here $! is meaningless.</span></li><li>&#09;&#09;...</li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>&#09;&#09;<span class="c"># ONLY here is $! meaningful.</span></li><li>&#09;&#09;...</li><li>&#09;&#09;<span class="c"># Already here $! might be meaningless.</span></li><li>    <span class="s">}</span></li><li>    <span class="c"># Since here we might have either success or failure,</span></li><li>    <span class="c"># $! is meaningless.</span></li></ol></pre><p>Here, <i>meaningless</i> means that <code class="inline"><span class="i">$!</span></code>  may be unrelated to the outcome of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> operator.  Assignment to <code class="inline"><span class="i">$!</span></code>  is similarly ephemeral. It can be used immediately before invoking the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die()</span></code> operator, to set the exit value, or to inspect the system error string corresponding to error <i>n</i>, or to restore <code class="inline"><span class="i">$!</span></code>  to a meaningful state.</p><p>Mnemonic: What just went bang?</p></section>	http://perldoc.perl.org/perlvar.html#%24!
Malformed UTF-8 string in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to unpack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-8-string-in-unpack
little-endian (definition)	A			Perl Glossary							<section class="prog__container"><p>From Swift: someone who eats eggs little end first. Also used of computers that store the least significant <b>byte</b> of a word at a lower byte address than the most significant byte. Often considered superior to big-endian machines. See also <b>big-endian</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#little-endian
fork (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>fork</pre><p>Does a fork(2) system call to create a new process running the same program at the same point.  It returns the child pid to the parent process, <code class="inline"><span class="n">0</span></code>  to the child process, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if the fork is unsuccessful.  File descriptors (and sometimes locks on those descriptors) are shared, while everything else is copied.  On most systems supporting fork(), great care has gone into making it extremely efficient (for example, using copy-on-write technology on data pages), making it the dominant paradigm for multitasking over the last few decades.</p><p>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>).  To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles to avoid duplicate output.</p><p>If you <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> without ever waiting on your children, you will accumulate zombies.  On some systems, you can avoid this by setting <code class="inline"><span class="i">$SIG</span>{<span class="w">CHLD</span>}</code>  to <code class="inline"><span class="q">&quot;IGNORE&quot;</span></code> .  See also <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for more examples of forking and reaping moribund children.</p><p>Note that if your forked child inherits system file descriptors like STDIN and STDOUT that are actually connected by a pipe or socket, even if you exit, then the remote server (such as, say, a CGI script or a backgrounded job launched from a remote shell) won&#39;t think you&#39;re done. You should reopen those to <i>/dev/null</i> if it&#39;s any issue.</p><p>On some platforms such as Windows, where the fork() system call is not available, Perl can be built to emulate fork() in the Perl interpreter. The emulation is designed, at the level of the Perl program, to be as compatible as possible with the &quot;Unix&quot; fork(). However it has limitations that have to be considered in code intended to be portable. See <span href="http://perldoc.perl.org/perlfork.html">perlfork</span> for more details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#fork">fork in perlport</span>.</p></section>	http://perldoc.perl.org/functions/fork.html
Corrupt malloc ptr 0x%x at 0x%x	A			Perl Diagnostics							<section class="prog__container"><p>(P) The malloc package that comes with Perl had an internal failure.</p></section>	http://perldoc.perl.org/perldiag.html#Corrupt-malloc-ptr-0x%25x-at-0x%25x
Illegal switch in PERL5OPT: -%c	A			Perl Diagnostics							<section class="prog__container"><p>(X) The PERL5OPT environment variable may only be used to set the following switches: <b>-[CDIMUdmtw]</b>.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-switch-in-PERL5OPT%3a--%25c
Net::servent (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::servent - by-name interface to Perl&#39;s built-in getserv*() functions</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::servent</span><span class="sc">;</span></li><li> <span class="i">$s</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getservbyname.html">getservbyname</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="q">&#39;ftp&#39;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no service&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;port for %s is %s, aliases are %s\\n&quot;</span><span class="cm">,</span></li><li>    <span class="i">$s</span><span class="i">-&gt;name</span><span class="cm">,</span> <span class="i">$s</span><span class="i">-&gt;port</span><span class="cm">,</span> <span class="q">&quot;@{$s-&gt;aliases}&quot;</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::servent</span> <span class="q">qw(:FIELDS)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/getservbyname.html">getservbyname</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> || <span class="q">&#39;ftp&#39;</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no service&quot;</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;port for $s_name is $s_port, aliases are @s_aliases\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/servent.html
ExtUtils::MM_DOS (module)	A			Perl Standard Modules		[[ExtUtils::MM_Unix]]\n[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_DOS - DOS specific subclass of ExtUtils::MM_Unix</p> <pre class="verbatim"><ol><li>  <span class="w">Don&#39;t</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li><li>  <span class="w">Use</span> <span class="w">ExtUtils::MM</span> and <span class="w">let</span> <span class="w">it</span> <span class="w">choose</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_DOS.html
How do I send email?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> and <span href="http://search.cpan.org/perldoc/Email::Sender::Simple">Email::Sender::Simple</span> modules, like so:</p><pre class="verbatim"><ol><li>  <span class="c"># first, create your message</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$message</span> = <span class="w">Email::MIME</span><span class="w">-&gt;create</span><span class="s">(</span></li><li>    <span class="w">header_str</span> <span class="cm">=&gt;</span> <span class="s">[</span></li><li>      <span class="w">From</span>    <span class="cm">=&gt;</span> <span class="q">&#39;you@example.com&#39;</span><span class="cm">,</span></li><li>      <span class="w">To</span>      <span class="cm">=&gt;</span> <span class="q">&#39;friend@example.com&#39;</span><span class="cm">,</span></li><li>      <span class="w">Subject</span> <span class="cm">=&gt;</span> <span class="q">&#39;Happy birthday!&#39;</span><span class="cm">,</span></li><li>    <span class="s">]</span><span class="cm">,</span></li><li>    <span class="w">attributes</span> <span class="cm">=&gt;</span> <span class="s">{</span></li><li>      <span class="w">encoding</span> <span class="cm">=&gt;</span> <span class="q">&#39;quoted-printable&#39;</span><span class="cm">,</span></li><li>      <span class="w">charset</span>  <span class="cm">=&gt;</span> <span class="q">&#39;utf-8&#39;</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="cm">,</span></li><li>    <span class="w">body_str</span> <span class="cm">=&gt;</span> <span class="q">&quot;Happy birthday to you!\\n&quot;</span><span class="cm">,</span></li><li>  <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Email::Sender::Simple</span> <span class="q">qw(sendmail)</span><span class="sc">;</span></li><li>  <span class="i">sendmail</span><span class="s">(</span><span class="i">$message</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>By default, <span href="http://search.cpan.org/perldoc/Email::Sender::Simple">Email::Sender::Simple</span> will try `sendmail` first, if it exists in your $PATH. This generally isn&#39;t the case. If there&#39;s a remote mail server you use to send mail, consider investigating one of the Transport classes. At time of writing, the available transports include:</p><p>Telling <span href="http://search.cpan.org/perldoc/Email::Sender::Simple">Email::Sender::Simple</span> to use your transport is straightforward.</p><pre class="verbatim"><ol><li>  <span class="i">sendmail</span><span class="s">(</span></li><li>    <span class="i">$message</span><span class="cm">,</span></li><li>    <span class="s">{</span></li><li>      <span class="w">transport</span> <span class="cm">=&gt;</span> <span class="i">$email_sender_transport_object</span><span class="cm">,</span></li><li>    <span class="s">}</span></li><li>  <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-send-email%3f
Can't get pipe mailbox device name	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  After creating a mailbox to act as a pipe, Perl can&#39;t retrieve its name for later use.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-get-pipe-mailbox-device-name
Is Perl difficult to learn?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>No, Perl is easy to start <span href="http://search.cpan.org/perldoc/http:#%2flearn.perl.org%2f">learning</span> --and easy to keep learning. It looks like most programming languages you&#39;re likely to have experience with, so if you&#39;ve ever written a C program, an awk script, a shell script, or even a BASIC program, you&#39;re already partway there.</p><p>Most tasks only require a small subset of the Perl language. One of the guiding mottos for Perl development is &quot;there&#39;s more than one way to do it&quot; (TMTOWTDI, sometimes pronounced &quot;tim toady&quot;). Perl&#39;s learning curve is therefore shallow (easy to learn) and long (there&#39;s a whole lot you can do if you really want).</p><p>Finally, because Perl is frequently (but not always, and certainly not by definition) an interpreted language, you can write your programs and test them without an intermediate compilation step, allowing you to experiment and test/debug quickly and easily. This ease of experimentation flattens the learning curve even more.</p><p>Things that make Perl easier to learn: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people&#39;s code. If there&#39;s something you need to do, then it&#39;s probably already been done, and a working example is usually available for free. Don&#39;t forget Perl modules, either. They&#39;re discussed in Part 3 of this FAQ, along with <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f">CPAN</span>, which is discussed in Part 2.</p></section>	http://perldoc.perl.org/perlfaq1.html#Is-Perl-difficult-to-learn%3f
panic: malloc, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something requested a negative number of bytes of malloc.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-malloc%2c-%25s
NULL regexp argument	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal pattern matching routines blew it big time.</p></section>	http://perldoc.perl.org/perldiag.html#NULL-regexp-argument
magical variables (definition)	A			Perl Glossary							<section class="prog__container"><p>Special variables that have side effects when you access them or assign to them. For example, in Perl, changing elements of the <code class="inline"><span class="i">%ENV</span></code>  array also changes the corresponding environment variables that subprocesses will use. Reading the <code class="inline"><span class="i">$!</span></code>  variable gives you the current system error number or message.</p></section>	http://perldoc.perl.org/perlglossary.html#magical-variables
Perl mongers (definition)	A			Perl Glossary							<section class="prog__container"><p>A Perl user group, taking the form of its name from the New York Perl mongers, the first Perl user group. Find one near you at <span href="http://www.pm.org">http://www.pm.org</span>.</p></section>	http://perldoc.perl.org/perlglossary.html#Perl-mongers
Substitution replacement not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer couldn&#39;t find the final delimiter of an s/// or s{}{} construct.  Remember that bracketing delimiters count nesting level. Missing the leading <code class="inline"><span class="i">$</span></code>  from variable <code class="inline"><span class="i">$s</span></code>  may cause this error.</p></section>	http://perldoc.perl.org/perldiag.html#Substitution-replacement-not-terminated
-E commandline	A			Perl Command-Line Switches							<section class="prog__container"><p>behaves just like <b>-e</b>, except that it implicitly enables all optional features (in the main compilation unit). See <span href="http://perldoc.perl.org/feature.html">feature</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-E*-_commandline_
Math::BigFloat (module)	A			Perl Standard Modules		[[Math::BigFloat]]\n[[Math::BigInt]]\n[[Math::BigInt::FastCalc]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::Pari]]\n[[bignum]]\n[[bigint]]\n[[bigrat]]					<section class="prog__container"><p>Math::BigFloat - Arbitrary size floating point math package</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::BigFloat</span><span class="sc">;</span></li><li></li><li> <span class="c"># Number creation</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$str</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># defaults to 0</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$y</span> = <span class="i">$x</span><span class="i">-&gt;copy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;&#09;<span class="c"># make a true copy</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$nan</span>  = <span class="w">Math::BigFloat</span><span class="w">-&gt;bnan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a NotANumber</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$zero</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;bzero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +0</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$inf</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;binf</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +inf</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$inf</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;binf</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a -inf</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$one</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;bone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +1</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mone</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;bone</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a -1</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pi</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;bpi</span><span class="s">(</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># PI to 100 digits</span></li><li></li><li> <span class="c"># the following examples compute their result to 100 digits accuracy:</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$cos</span>  = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="i">-&gt;bcos</span><span class="s">(</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># cosinus(1)</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sin</span>  = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="i">-&gt;bsin</span><span class="s">(</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># sinus(1)</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$atan</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="i">-&gt;batan</span><span class="s">(</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># arcus tangens(1)</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$atan2</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span>  <span class="n">1</span> <span class="s">)</span><span class="i">-&gt;batan2</span><span class="s">(</span> <span class="n">1</span> <span class="cm">,</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span> <span class="c"># batan(1)</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$atan2</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span>  <span class="n">1</span> <span class="s">)</span><span class="i">-&gt;batan2</span><span class="s">(</span> <span class="n">8</span> <span class="cm">,</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span> <span class="c"># batan(1/8)</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$atan2</span> = <span class="w">Math::BigFloat</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="n">-2</span> <span class="s">)</span><span class="i">-&gt;batan2</span><span class="s">(</span> <span class="n">1</span> <span class="cm">,</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span> <span class="c"># batan(-2)</span></li><li></li><li> <span class="c"># Testing</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_zero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if arg is +0</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_nan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if arg is NaN</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_one</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if arg is +1</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_one</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># true if arg is -1</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_odd</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if odd, false for even</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_even</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if even, false for odd</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_pos</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if &gt;= 0</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_neg</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># true if &lt;  0</span></li><li> <span class="i">$x</span><span class="i">-&gt;is_inf</span><span class="s">(</span><span class="w">sign</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># true if +inf, or -inf (default is &#39;+&#39;)</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bcmp</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># compare numbers (undef,&lt;0,=0,&gt;0)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bacmp</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># compare absolutely (undef,&lt;0,=0,&gt;0)</span></li><li> <span class="i">$x</span><span class="i">-&gt;sign</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return the sign, either +,- or NaN</span></li><li> <span class="i">$x</span><span class="i">-&gt;digit</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return the nth digit, counting from right</span></li><li> <span class="i">$x</span><span class="i">-&gt;digit</span><span class="s">(</span>-<span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return the nth digit, counting from left </span></li><li></li><li> <span class="c"># The following all modify their first argument. If you want to pre-</span></li><li> <span class="c"># serve $x, use $z = $x-&gt;copy()-&gt;bXXX($y); See under L&lt;/CAVEATS&gt; for</span></li><li> <span class="c"># necessary when mixing $a = $b assignments with non-overloaded math.</span></li><li></li><li> <span class="c"># set </span></li><li> <span class="i">$x</span><span class="i">-&gt;bzero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $i to 0</span></li><li> <span class="i">$x</span><span class="i">-&gt;bnan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $i to NaN</span></li><li> <span class="i">$x</span><span class="i">-&gt;bone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $x to +1</span></li><li> <span class="i">$x</span><span class="i">-&gt;bone</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $x to -1</span></li><li> <span class="i">$x</span><span class="i">-&gt;binf</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $x to inf</span></li><li> <span class="i">$x</span><span class="i">-&gt;binf</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># set $x to -inf</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bneg</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># negation</span></li><li> <span class="i">$x</span><span class="i">-&gt;babs</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># absolute value</span></li><li> <span class="i">$x</span><span class="i">-&gt;bnorm</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># normalize (no-op)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bnot</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># two&#39;s complement (bit wise not)</span></li><li> <span class="i">$x</span><span class="i">-&gt;binc</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># increment x by 1</span></li><li> <span class="i">$x</span><span class="i">-&gt;bdec</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># decrement x by 1</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;badd</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># addition (add $y to $x)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bsub</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># subtraction (subtract $y from $x)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bmul</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># multiplication (multiply $x by $y)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bdiv</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># divide, set $x to quotient</span></li><li>&#09;&#09;&#09; <span class="c"># return (quo,rem) or quo if scalar</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bmod</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># modulus ($x % $y)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bpow</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># power of arguments ($x ** $y)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bmodpow</span><span class="s">(</span><span class="i">$exp</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span> <span class="c"># modular exponentiation (($num**$exp) % $mod))</span></li><li> <span class="i">$x</span><span class="i">-&gt;blsft</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span> <span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># left shift by $y places in base $n</span></li><li> <span class="i">$x</span><span class="i">-&gt;brsft</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span> <span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># right shift by $y places in base $n</span></li><li>&#09;&#09;&#09; <span class="c"># returns (quo,rem) or quo if in scalar context</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;blog</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># logarithm of $x to base e (Euler&#39;s number)</span></li><li> <span class="i">$x</span><span class="i">-&gt;blog</span><span class="s">(</span><span class="i">$base</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># logarithm of $x to base $base (f.i. 2)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bexp</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># calculate e ** $x where e is Euler&#39;s number</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;band</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># bit-wise and</span></li><li> <span class="i">$x</span><span class="i">-&gt;bior</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># bit-wise inclusive or</span></li><li> <span class="i">$x</span><span class="i">-&gt;bxor</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># bit-wise exclusive or</span></li><li> <span class="i">$x</span><span class="i">-&gt;bnot</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># bit-wise not (two&#39;s complement)</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bsqrt</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># calculate square-root</span></li><li> <span class="i">$x</span><span class="i">-&gt;broot</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># $y&#39;th root of $x (e.g. $y == 3 =&gt; cubic root)</span></li><li> <span class="i">$x</span><span class="i">-&gt;bfac</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># factorial of $x (1*2*3*4*..$x)</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bround</span><span class="s">(</span><span class="i">$N</span><span class="s">)</span><span class="sc">;</span> &#09; <span class="c"># accuracy: preserve $N digits</span></li><li> <span class="i">$x</span><span class="i">-&gt;bfround</span><span class="s">(</span><span class="i">$N</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># precision: round to the $Nth digit</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bfloor</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return integer less or equal than $x</span></li><li> <span class="i">$x</span><span class="i">-&gt;bceil</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return integer greater or equal than $x</span></li><li> <span class="i">$x</span><span class="i">-&gt;bint</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>             <span class="c"># round towards zero</span></li><li></li><li>  <span class="c"># The following do not modify their arguments:</span></li><li></li><li> <span class="i">bgcd</span><span class="s">(</span><span class="i">@values</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># greatest common divisor</span></li><li> <span class="i">blcm</span><span class="s">(</span><span class="i">@values</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># lowest common multiplicator</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;bstr</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return string</span></li><li> <span class="i">$x</span><span class="i">-&gt;bsstr</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return string in scientific notation</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;as_int</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return $x as BigInt </span></li><li> <span class="i">$x</span><span class="i">-&gt;exponent</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return exponent as BigInt</span></li><li> <span class="i">$x</span><span class="i">-&gt;mantissa</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return mantissa as BigInt</span></li><li> <span class="i">$x</span><span class="i">-&gt;parts</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># return (mantissa,exponent) as BigInt</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09; <span class="c"># number of digits (w/o sign and &#39;.&#39;)</span></li><li> <span class="s">(</span><span class="i">$l</span><span class="cm">,</span><span class="i">$f</span><span class="s">)</span> = <span class="i">$x</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c"># number of digits, and length of fraction</span></li><li></li><li> <span class="i">$x</span><span class="i">-&gt;precision</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return P of $x (or global, if P of $x undef)</span></li><li> <span class="i">$x</span><span class="i">-&gt;precision</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># set P of $x to $n</span></li><li> <span class="i">$x</span><span class="i">-&gt;accuracy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return A of $x (or global, if A of $x undef)</span></li><li> <span class="i">$x</span><span class="i">-&gt;accuracy</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># set A $x to $n</span></li><li></li><li> <span class="c"># these get/set the appropriate global value for all BigFloat objects</span></li><li> <span class="w">Math::BigFloat</span><span class="w">-&gt;precision</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># Precision</span></li><li> <span class="w">Math::BigFloat</span><span class="w">-&gt;accuracy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># Accuracy</span></li><li> <span class="w">Math::BigFloat</span><span class="w">-&gt;round_mode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># rounding mode</span></li></ol></pre></section>	http://perldoc.perl.org/Math/BigFloat.html
Use of tainted arguments in %s is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(W taint, deprecated) You have supplied <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code> with multiple arguments and at least one of them is tainted.  This used to be allowed but will become a fatal error in a future version of perl.  Untaint your arguments.  See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-tainted-arguments-in-%25s-is-deprecated
multidimensional array (definition)	A			Perl Glossary							<section class="prog__container"><p>An array with multiple subscripts for finding a single element. Perl implements these using <b>references</b>—see Camel chapter 9, “Data Structures”.</p></section>	http://perldoc.perl.org/perlglossary.html#multidimensional-array
How can I access or change N characters of a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>You can access the first characters of a string with substr(). To get the first character, for example, start at position 0 and grab the string of length 1.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span> = <span class="q">&quot;Just another Perl Hacker&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$first_char</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>  <span class="c">#  &#39;J&#39;</span></li></ol></pre><p>To change part of a string, you can use the optional fourth argument which is the replacement string.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="n">13</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="q">&quot;Perl 5.8.0&quot;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can also use substr() as an lvalue.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="n">13</span><span class="cm">,</span> <span class="n">4</span> <span class="s">)</span> =  <span class="q">&quot;Perl 5.8.0&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-access-or-change-N-characters-of-a-string%3f
Integer overflow in version %d	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) Some portion of a version initialization is too large for the size of integers for your architecture.  This is not a warning because there is no rational reason for a version to try and use an element larger than typically 2**32.  This is usually caused by trying to use some odd mathematical operation as a version, like 100/9.</p></section>	http://perldoc.perl.org/perldiag.html#Integer-overflow-in-version-%25d
Operand with no preceding operator in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote something like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ \\p{Digit} \\p{Thai} ])</span></li></ol></pre><p>There are two operands, but no operator giving how you want to combine them.</p></section>	http://perldoc.perl.org/perldiag.html#Operand-with-no-preceding-operator-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
sysread() on unopened filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unopened) You tried to read from a filehandle that was never opened.</p></section>	http://perldoc.perl.org/perldiag.html#sysread()-on-unopened-filehandle-%25s
Locale::Maketext::GutsLoader (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Maketext::GutsLoader - Deprecated module to load Locale::Maketext utf8 code</p> <pre class="verbatim"><ol><li>  <span class="c"># Do this instead please</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Maketext</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Maketext/GutsLoader.html
Can't get filespec - stale stat buffer?	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning peculiar to VMS.  This arises because of the difference between access checks under VMS and under the Unix model Perl assumes. Under VMS, access checks are done by filename, rather than by bits in the stat buffer, so that ACLs and other protections can be taken into account.  Unfortunately, Perl assumes that the stat buffer contains all the necessary information, and passes it, instead of the filespec, to the access-checking routine.  It will try to retrieve the filespec using the device name and FID present in the stat buffer, but this works only if you haven&#39;t made a subsequent call to the CRTL stat() routine, because the device name is overwritten with each call.  If this warning appears, the name lookup failed, and the access-checking routine gave up and returned FALSE, just to be conservative.  (Note: The access-checking routine knows about the Perl <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> operator and file tests, so you shouldn&#39;t ever see this warning in response to a Perl command; it arises only if some internal code takes stat buffers lightly.)</p></section>	http://perldoc.perl.org/perldiag.html#Can't-get-filespec---stale-stat-buffer%3f
Can't "break" outside a given block	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="w">break</span></code> , but you&#39;re not inside a <code class="inline">given</code>  block.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22break%22-outside-a-given-block
tainted (definition)	A			Perl Glossary							<section class="prog__container"><p>Said of data derived from the grubby hands of a user, and thus unsafe for a secure program to rely on. Perl does taint checks if you run a <b>setuid</b> (or <b>setgid</b>) program, or if you use the <code class="inline"><span class="q">–T</span></code>  switch.</p></section>	http://perldoc.perl.org/perlglossary.html#tainted
How do I convert between numeric representations/bases/radixes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>As always with Perl there is more than one way to do it. Below are a few examples of approaches to making common conversions between number representations. This is intended to be representational rather than exhaustive.</p><p>Some of the examples later in <span href="http://perldoc.perl.org/perlfaq4.html">perlfaq4</span> use the <span href="http://search.cpan.org/perldoc/Bit::Vector">Bit::Vector</span> module from CPAN. The reason you might choose <span href="http://search.cpan.org/perldoc/Bit::Vector">Bit::Vector</span> over the perl built-in functions is that it works with numbers of ANY size, that it is optimized for speed on some operations, and for at least some programmers the notation might be familiar.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-convert-between-numeric-representations%2fbases%2fradixes%3f
byte (definition)	A			Perl Glossary							<section class="prog__container"><p>A piece of data worth eight <b>bits</b> in most places.</p></section>	http://perldoc.perl.org/perlglossary.html#byte
ExtUtils::MM_VOS (module)	A			Perl Standard Modules		[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_VOS - VOS specific subclass of ExtUtils::MM_Unix</p> <pre class="verbatim"><ol><li>  <span class="w">Don&#39;t</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li><li>  <span class="w">Use</span> <span class="w">ExtUtils::MM</span> and <span class="w">let</span> <span class="w">it</span> <span class="w">choose</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_VOS.html
Filehandle %s opened only for input	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You tried to write on a read-only filehandle.  If you intended it to be a read-write filehandle, you needed to open it with &quot;+&lt;&quot; or &quot;+&gt;&quot; or &quot;+&gt;&gt;&quot; instead of with &quot;&lt;&quot; or nothing.  If you intended only to write the file, use &quot;&gt;&quot; or &quot;&gt;&gt;&quot;.  See <span href="http://perldoc.perl.org/functions/open.html">open</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Filehandle-%25s-opened-only-for-input
How can I use Perl interactively?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>The typical approach uses the Perl debugger, described in the <i>perldebug(1)</i> manpage, on an &quot;empty&quot; program, like this:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">de</span> <span class="n">42</span></li></ol></pre><p>Now just type in any legal Perl code, and it will be immediately evaluated. You can also examine the symbol table, get stack backtraces, check variable values, set breakpoints, and other operations typically found in symbolic debuggers.</p><p>You can also use <span href="http://search.cpan.org/perldoc/Devel::REPL">Devel::REPL</span> which is an interactive shell for Perl, commonly known as a REPL - Read, Evaluate, Print, Loop. It provides various handy features.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-use-Perl-interactively%3f
ExtUtils::MY (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MY - ExtUtils::MakeMaker subclass for customization</p> <pre class="verbatim"><ol><li>  <span class="c"># in your Makefile.PL</span></li><li><span name="MY::whatever"></span>  sub <span class="m">MY::whatever</span> <span class="s">{</span></li><li>      ...</li><li>  <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MY.html
each on reference is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::autoderef) <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> with a scalar argument is experimental and may change or be removed in a future Perl version.  If you want to take the risk of using this feature, simply disable this warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::autoderef&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#each-on-reference-is-experimental
quantifier (definition)	A			Perl Glossary							<section class="prog__container"><p>A component of a <b>regular expression</b> specifying how many times the foregoing <b>atom</b> may occur.</p></section>	http://perldoc.perl.org/perlglossary.html#quantifier
=begin	A			Perl POD Commands							<section class="prog__container"><p>This marks the following paragraphs (until the matching &quot;=end formatname&quot;) as being for some special kind of processing.  Unless &quot;formatname&quot; begins with a colon, the contained non-command paragraphs are data paragraphs.  But if &quot;formatname&quot; <i>does</i> begin with a colon, then non-command paragraphs are ordinary paragraphs or data paragraphs.  This is discussed in detail in the section <span href="http://perldoc.perl.org/perlpodspec.html#About-Data-Paragraphs-and-%22%3dbegin%2f%3dend%22-Regions">About Data Paragraphs and =begin/=end Regions</span>.</p><p>It is advised that formatnames match the regexp <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m/\\A:?[-a-zA-Z0-9_]+\\z/</span></code>.  Everything following whitespace after the formatname is a parameter that may be used by the formatter when dealing with this region.  This parameter must not be repeated in the &quot;=end&quot; paragraph.  Implementors should anticipate future expansion in the semantics and syntax of the first parameter to &quot;=begin&quot;/&quot;=end&quot;/&quot;=for&quot;.</p></section>	http://perldoc.perl.org/perlpodspec.html#%22%3dbegin-formatname-parameter%22
Illegal number of bits in vec	A			Perl Diagnostics							<section class="prog__container"><p>(F) The number of bits in vec() (the third argument) must be a power of two from 1 to 32 (or 64, if your platform supports that).</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-number-of-bits-in-vec
In EBCDIC the v-string components cannot exceed 2147483647	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to EBCDIC.  Internally, v-strings are stored as Unicode code points, and encoded in EBCDIC as UTF-EBCDIC.  The UTF-EBCDIC encoding is limited to code points no larger than 2147483647 (0x7FFFFFFF).</p></section>	http://perldoc.perl.org/perldiag.html#In-EBCDIC-the-v-string-components-cannot-exceed-2147483647
class (definition)	A			Perl Glossary		[[inheritance]]					<section class="prog__container"><p>A user-defined <b>type</b>, implemented in Perl via a <b>package</b> that provides (either directly or by inheritance) <b>methods</b> (that is, <b>subroutines</b>) to handle <b>instances</b> of the class (its <b>objects</b>). </p></section>	http://perldoc.perl.org/perlglossary.html#class
inheritance (definition)	A			Perl Glossary							<section class="prog__container"><p>What you get from your ancestors, genetically or otherwise. If you happen to be a <b>class</b>, your ancestors are called <b>base classes</b> and your descendants are called <b>derived classes</b>. See <b>single inheritance</b> and <b>multiple inheritance</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#inheritance
Split loop	A			Perl Diagnostics							<section class="prog__container"><p>(P) The split was looping infinitely.  (Obviously, a split shouldn&#39;t iterate more times than there are characters of input, which is what happened.)  See <span href="http://perldoc.perl.org/functions/split.html">split</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Split-loop
endgrent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>endgrent</pre>Be done using group file.</section>	http://perldoc.perl.org/functions/endgrent.html
assertion (definition)	A			Perl Glossary							<section class="prog__container"><p>A component of a <b>regular expression</b> that must be true for the pattern to match but does not necessarily match any characters itself. Often used specifically to mean a <b>zero-width</b> assertion.</p></section>	http://perldoc.perl.org/perlglossary.html#assertion
Out of memory during request for %s	A			Perl Diagnostics							<section class="prog__container"><p>(X)(F) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request.</p><p>The request was judged to be small, so the possibility to trap it depends on the way perl was compiled.  By default it is not trappable. However, if compiled for this, Perl may use the contents of <code class="inline"><span class="i">$^M</span></code>  as an emergency pool after die()ing with this message.  In this case the error is trappable <i>once</i>, and the error message will include the line and file where the failed request happened.</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory-during-request-for-%25s
Method %s not permitted	A			Perl Diagnostics							<section class="prog__container"><p>See Server error.</p></section>	http://perldoc.perl.org/perldiag.html#Method-%25s-not-permitted
numification (definition)	A			Perl Glossary							<section class="prog__container"><p>(Sometimes spelled <i>nummification</i> and <i>nummify</i>.) Perl lingo for implicit conversion into a number; the related verb is <i>numify</i>. <i>Numification</i> is intended to rhyme with <i>mummification</i>, and <i>numify</i> with <i>mummify</i>. It is unrelated to English <i>numen</i>, <i>numina</i>, <i>numinous</i>. We originally forgot the extra <i>m</i> a long time ago, and some people got used to our funny spelling, and so just as with <code class="inline"><span class="w">HTTP_REFERER</span></code> ’s own missing letter, our weird spelling has stuck around.</p></section>	http://perldoc.perl.org/perlglossary.html#numification
Pod::PlainText (module)	A			Perl Standard Modules		[[Pod::Parser]]\n[[Pod::Parser]]\n[[Pod::Text::Termcap]]					<section class="prog__container"><p>Pod::PlainText - Convert POD data to formatted ASCII text</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::PlainText</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::PlainText</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">sentence</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">width</span> <span class="cm">=&gt;</span> <span class="n">78</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.txt.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.txt&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/PlainText.html
How do I test whether two arrays or hashes are equal?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>With Perl 5.10 and later, the smart match operator can give you the answer with the least amount of work:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">@array1</span> ~~ <span class="i">@array2</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;The arrays are the same&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">%hash1</span> ~~ <span class="i">%hash2</span> <span class="s">)</span> <span class="c"># doesn&#39;t check values!  {</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;The hash keys are the same&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The following code works for single-level arrays. It uses a stringwise comparison, and does not distinguish defined versus undefined empty strings. Modify if you have other needs.</p><pre class="verbatim"><ol><li>    <span class="i">$are_equal</span> = <span class="i">compare_arrays</span><span class="s">(</span>\\<span class="i">@frogs</span><span class="cm">,</span> \\<span class="i">@toads</span><span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="compare_arrays"></span>    sub <span class="m">compare_arrays</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$first</span><span class="cm">,</span> <span class="i">$second</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span><span class="sc">;</span>  <span class="c"># silence spurious -w undef complaints</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">0</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">@$first</span> == <span class="i">@$second</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt; <span class="i">@$first</span><span class="sc">;</span> <span class="i">$i</span>++<span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">0</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$first</span>-&gt;[<span class="i">$i</span>] <span class="l_k" href="http://perldoc.perl.org/functions/ne.html">ne</span> <span class="i">$second</span>-&gt;[<span class="i">$i</span>]<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module <span href="http://search.cpan.org/perldoc/FreezeThaw">FreezeThaw</span>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FreezeThaw</span> <span class="q">qw(cmpStr)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@a</span> = <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@b</span> = <span class="s">(</span> <span class="q">&quot;this&quot;</span><span class="cm">,</span> <span class="q">&quot;that&quot;</span><span class="cm">,</span> <span class="s">[</span> <span class="q">&quot;more&quot;</span><span class="cm">,</span> <span class="q">&quot;stuff&quot;</span> <span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;a and b contain %s arrays\\n&quot;</span><span class="cm">,</span></li><li>        <span class="i">cmpStr</span><span class="s">(</span>\\<span class="i">@a</span><span class="cm">,</span> \\<span class="i">@b</span><span class="s">)</span> == <span class="n">0</span></li><li>        ? <span class="q">&quot;the same&quot;</span></li><li>        <span class="co">:</span> <span class="q">&quot;different&quot;</span><span class="sc">;</span></li></ol></pre><p>This approach also works for comparing hashes. Here we&#39;ll demonstrate two different answers:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FreezeThaw</span> <span class="q">qw(cmpStr cmpStrHard)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%a</span> = <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%b</span> = <span class="s">(</span> <span class="q">&quot;this&quot;</span> <span class="cm">=&gt;</span> <span class="q">&quot;that&quot;</span><span class="cm">,</span> <span class="q">&quot;extra&quot;</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">&quot;more&quot;</span><span class="cm">,</span> <span class="q">&quot;stuff&quot;</span> <span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$a</span>{<span class="w">EXTRA</span>} = \\<span class="i">%b</span><span class="sc">;</span></li><li>    <span class="i">$b</span>{<span class="w">EXTRA</span>} = \\<span class="i">%a</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;a and b contain %s hashes\\n&quot;</span><span class="cm">,</span></li><li>    <span class="i">cmpStr</span><span class="s">(</span>\\<span class="i">%a</span><span class="cm">,</span> \\<span class="i">%b</span><span class="s">)</span> == <span class="n">0</span> ? <span class="q">&quot;the same&quot;</span> <span class="co">:</span> <span class="q">&quot;different&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;a and b contain %s hashes\\n&quot;</span><span class="cm">,</span></li><li>    <span class="i">cmpStrHard</span><span class="s">(</span>\\<span class="i">%a</span><span class="cm">,</span> \\<span class="i">%b</span><span class="s">)</span> == <span class="n">0</span> ? <span class="q">&quot;the same&quot;</span> <span class="co">:</span> <span class="q">&quot;different&quot;</span><span class="sc">;</span></li></ol></pre><p>The first reports that both those the hashes contain the same data, while the second reports that they do not. Which you prefer is left as an exercise to the reader.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-test-whether-two-arrays-or-hashes-are-equal%3f
postfix (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that follows its <b>operand</b>, as in <code class="inline"><span class="i">$x</span>++</code> .</p></section>	http://perldoc.perl.org/perlglossary.html#postfix
Why doesn't my sockets program work under System V (Solaris)? What does the error message "Protocol not supported" mean?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Some Sys-V based systems, notably Solaris 2.X, redefined some of the standard socket constants. Since these were constant across all architectures, they were often hardwired into perl code. The proper way to deal with this is to &quot;use Socket&quot; to get the correct values.</p><p>Note that even though SunOS and Solaris are binary compatible, these values are different. Go figure.</p></section>	http://perldoc.perl.org/perlfaq8.html#Why-doesn't-my-sockets-program-work-under-System-V-(Solaris)%3f-What-does-the-error-message-%22Protocol-not-supported%22-mean%3f
library (definition)	A			Perl Glossary							<section class="prog__container"><p>Generally, a collection of procedures. In ancient days, referred to a collection of subroutines in a <i>.pl</i> file. In modern times, refers more often to the entire collection of Perl <b>modules</b> on your system.</p></section>	http://perldoc.perl.org/perlglossary.html#library
Can't call mro_isa_changed_in() on anonymous symbol table	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl got confused as to whether a hash was a plain hash or a symbol table hash when trying to update @ISA caches.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-call-mro_isa_changed_in()-on-anonymous-symbol-table
panic: pad_free curpad, %p!=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pad_free-curpad%2c-%25p!%3d%25p
$^C (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>The current value of the flag associated with the <b>-c</b> switch. Mainly of use with <b>-MO=...</b> to allow code to alter its behavior when being compiled, such as for example to <code class="inline">AUTOLOAD</code>  at compile time rather than normal, deferred loading.  Setting <code class="inline"><span class="i">$^C</span> = <span class="n">1</span></code>  is similar to calling <code class="inline"><span class="w">B::minus_c</span></code> .</p><p>This variable was added in Perl v5.6.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eC
Binary "ne" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;ne&quot; returns true if the left argument is stringwise not equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
x (function)	A			Perl Functions							<section class="prog__container"><pre>x<br>xor</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/x.html
mprotect RW for %p %u failed with %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) You compiled perl with <b>-D</b>PERL_DEBUG_READONLY_OPS (see <span href="http://perldoc.perl.org/perlhacktips.html">perlhacktips</span>), but a read-only op tree could not be made mutable before freeing the ops.</p></section>	http://perldoc.perl.org/perldiag.html#mprotect-RW-for-%25p-%25u-failed-with-%25d
currently selected output channel (definition)	A			Perl Glossary							<section class="prog__container"><p>The last <b>filehandle</b> that was designated with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select(FILEHANDLE)</span></code>; <code class="inline"><span class="w">STDOUT</span></code> , if no filehandle has been selected.</p></section>	http://perldoc.perl.org/perlglossary.html#currently-selected-output-channel
when is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::smartmatch) <code class="inline">when</code>  depends on smartmatch, which is experimental.  Additionally, it has several special cases that may not be immediately obvious, and their behavior may change or even be removed in any future release of perl.  See the explanation under <span href="http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when">Experimental Details on given and when in perlsyn</span>.</p></section>	http://perldoc.perl.org/perldiag.html#when-is-experimental
length (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>length EXPR<br>length</pre><p>Returns the length in <i>characters</i> of the value of EXPR.  If EXPR is omitted, returns the length of <code class="inline"><span class="i">$_</span></code> .  If EXPR is undefined, returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>This function cannot be used on an entire array or hash to find out how many elements these have.  For that, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@array</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span></code> , respectively.</p><p>Like all Perl character operations, length() normally deals in logical characters, not physical bytes.  For how many bytes a string encoded as UTF-8 would take up, use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/length.html">length(Encode::encode_utf8(EXPR))</span></code> (you&#39;ll have to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span></code>  first).  See <span href="http://perldoc.perl.org/Encode.html">Encode</span> and <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span>.</p></section>	http://perldoc.perl.org/functions/length.html
I don't have a C compiler. How can I build my own Perl interpreter?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>For Windows, use a binary version of Perl, <span href="http://search.cpan.org/perldoc/http:#%2fstrawberryperl.com%2f">Strawberry Perl</span> and <span href="http://search.cpan.org/perldoc/http:#%2fwww.activestate.com%2factiveperl">ActivePerl</span> come with a bundled C compiler.</p><p>Otherwise if you really do want to build Perl, you need to get a binary version of <code class="inline"><span class="w">gcc</span></code>  for your system first. Use a search engine to find out how to do this for your operating system.</p></section>	http://perldoc.perl.org/perlfaq2.html#I-don't-have-a-C-compiler.-How-can-I-build-my-own-Perl-interpreter%3f
command-line arguments (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>values</b> you supply along with a program name when you tell a <b>shell</b> to execute a <b>command</b>. These values are passed to a Perl program through <code class="inline"><span class="i">@ARGV</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#command-line-arguments
I18N::LangTags (module)	A			Perl Standard Modules		[[I18N::LangTags::List]]\n[[http://www.ietf.org/rfc/rfc3066.txt]]\n[[http://www.ietf.org/rfc/rfc2277.txt]]\n[[http://www.ietf.org/rfc/rfc2231.txt]]\n[[http://www.ietf.org/rfc/rfc2482.txt]]\n[[http://www.perl.com/CPAN/modules/by-module/Locale/]]\n[[http://www.loc.gov/standards/iso639-2/php/code_list.php]]\n[[http://www.iana.org/assignments/language-tags]]					<section class="prog__container"><p>I18N::LangTags - functions for dealing with RFC3066-style language tags</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="i">I18N::LangTags</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>...or specify whichever of those functions you want to import, like so:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::LangTags</span> <span class="q">qw(implicate_supers similarity_language_tag)</span><span class="sc">;</span></li></ol></pre><p>All the exportable functions are listed below -- you&#39;re free to import only some, or none at all.  By default, none are imported.  If you say:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::LangTags</span> <span class="q">qw(:ALL)</span></li></ol></pre><p>...then all are exported.  (This saves you from having to use something less obvious like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::LangTags</span> <span class="q">qw(/./)</span></code> .)</p><p>If you don&#39;t import any of these functions, assume a <code class="inline"><span class="i">&amp;I18N::LangTags::</span></code>  in front of all the function names in the following examples.</p></section>	http://perldoc.perl.org/I18N/LangTags.html
$^N (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>The text matched by the used group most-recently closed (i.e. the group with the rightmost closing parenthesis) of the last successful search pattern.</p><p>This is primarily used inside <code class="inline">(?{...})</code> blocks for examining text recently matched.  For example, to effectively capture text to a variable (in addition to <code class="inline"><span class="i">$1</span></code> , <code class="inline"><span class="i">$2</span></code> , etc.), replace <code class="inline"><span class="s">(</span>...<span class="s">)</span></code>  with</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="q">?:(...)(?</span><span class="s">{</span> <span class="i">$var</span> = <span class="i">$^N</span> <span class="s">}</span><span class="s">)</span><span class="p">)</span></li></ol></pre><p>By setting and then using <code class="inline"><span class="i">$var</span></code>  in this way relieves you from having to worry about exactly which numbered set of parentheses they are.</p><p>This variable was added in Perl v5.8.0.</p><p>Mnemonic: the (possibly) Nested parenthesis that most recently closed.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eN
gethostent not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your C library apparently doesn&#39;t implement gethostent(), probably because if it did, it&#39;d feel morally obligated to return every hostname on the Internet.</p></section>	http://perldoc.perl.org/perldiag.html#gethostent-not-implemented
Illegal declaration of subroutine %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) A subroutine was not declared correctly.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-declaration-of-subroutine-%25s
panic: do_subst	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal pp_subst() routine was called with invalid operational data.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-do_subst
Can't use an array as a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use an array as a reference, as in <code class="inline"><span class="i">@foo</span>-&gt;[<span class="n">23</span>]</code>  or <code class="inline"><span class="i">@$ref</span>-&gt;[<span class="n">99</span>]</code> .  Versions of perl &lt;= 5.22.0 used to allow this syntax, but shouldn&#39;t have.  This was deprecated in perl 5.6.1.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-an-array-as-a-reference
Can't goto subroutine outside a subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) The deeply magical &quot;goto subroutine&quot; call can only replace one subroutine call for another.  It can&#39;t manufacture one out of whole cloth.  In general you should be calling it out of only an AUTOLOAD routine anyway.  See <span href="http://perldoc.perl.org/functions/goto.html">goto</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-goto-subroutine-outside-a-subroutine
How do I open a file without blocking?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If you&#39;re lucky enough to be using a system that supports non-blocking reads (most Unixish systems do), you need only to use the <code class="inline"><span class="w">O_NDELAY</span></code>  or <code class="inline"><span class="w">O_NONBLOCK</span></code>  flag from the <code class="inline"><span class="w">Fcntl</span></code>  module in conjunction with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen()</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;/foo/somefile&quot;</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_NDELAY</span>|<span class="w">O_CREAT</span><span class="cm">,</span> <span class="n">0644</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open /foo/somefile: $!&quot;</span><span class="co">:</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-open-a-file-without-blocking%3f
chr (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>chr NUMBER<br>chr</pre><p>Returns the character represented by that NUMBER in the character set. For example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chr.html">chr(65)</span></code> is <code class="inline"><span class="q">&quot;A&quot;</span></code>  in either ASCII or Unicode, and chr(0x263a) is a Unicode smiley face.</p><p>Negative values give the Unicode replacement character (chr(0xfffd)), except under the <span href="http://perldoc.perl.org/bytes.html">bytes</span> pragma, where the low eight bits of the value (truncated to an integer) are used.</p><p>If NUMBER is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>For the reverse, use <span href="http://perldoc.perl.org/functions/ord.html">ord</span>.</p><p>Note that characters from 128 to 255 (inclusive) are by default internally not encoded as UTF-8 for backward compatibility reasons.</p><p>See <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span> for more about Unicode.</p></section>	http://perldoc.perl.org/functions/chr.html
autoload (definition)	A			Perl Glossary							<section class="prog__container"><p>To load on demand. (Also called “lazy” loading.) Specifically, to call an <code class="inline">AUTOLOAD</code>  subroutine on behalf of an undefined subroutine.</p></section>	http://perldoc.perl.org/perlglossary.html#autoload
charnames alias definitions may not contain a sequence of multiple spaces	A			Perl Diagnostics							<section class="prog__container"><p>(F) You defined a character name which had multiple space characters in a row.  Change them to single spaces.  Usually these names are defined in the <code class="inline"><span class="j">:</span><span class="w">alias</span></code>  import argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span></code> , but they could be defined by a translator installed into <code class="inline"><span class="i">$^H</span>{<span class="w">charnames</span>}</code> .  See <span href="http://perldoc.perl.org/charnames.html#CUSTOM-ALIASES">CUSTOM ALIASES in charnames</span>.</p></section>	http://perldoc.perl.org/perldiag.html#charnames-alias-definitions-may-not-contain-a-sequence-of-multiple-spaces
bind (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>bind SOCKET,NAME</pre><p>Binds a network address to a socket, just as bind(2) does.  Returns true if it succeeded, false otherwise.  NAME should be a packed address of the appropriate type for the socket.  See the examples in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p></section>	http://perldoc.perl.org/functions/bind.html
/%s/ should probably be written as "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You have used a pattern where Perl expected to find a string, as in the first argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span></code>.  Perl will treat the true or false result of matching the pattern against $_ as the string, which is probably not what you had in mind.</p></section>	http://perldoc.perl.org/perldiag.html#%2f%25s%2f-should-probably-be-written-as-%22%25s%22
XS (definition)	A			Perl Glossary							<section class="prog__container"><p>An extraordinarily exported, expeditiously excellent, expressly eXternal Subroutine, executed in existing C or C++ or in an exciting extension language called (exasperatingly) XS.</p></section>	http://perldoc.perl.org/perlglossary.html#XS
Unterminated <> operator	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer saw a left angle bracket in a place where it was expecting a term, so it&#39;s looking for the corresponding right angle bracket, and not finding it.  Chances are you left some needed parentheses out earlier in the line, and you really meant a &quot;less than&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-%3c%3e-operator
Quantifier unexpected on zero-length expression in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You applied a regular expression quantifier in a place where it makes no sense, such as on a zero-width assertion.  Try putting the quantifier inside the assertion instead.  For example, the way to match &quot;abc&quot; provided that it is followed by three repetitions of &quot;xyz&quot; is <code class="inline"><span class="q">/abc(?=(?:xyz){3})/</span></code> , not <code class="inline"><span class="q">/abc(?=xyz){3}/</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Quantifier-unexpected-on-zero-length-expression-in-regex-m%2f%25s%2f
PV (definition)	A			Perl Glossary							<section class="prog__container"><p>A “pointer value”, which is Perl Internals Talk for a <code class="inline"><span class="w">char</span>*</code> .</p></section>	http://perldoc.perl.org/perlglossary.html#PV
Calling POSIX::%s() is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You called a function whose use is deprecated.  See the function&#39;s name in <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> for details.</p></section>	http://perldoc.perl.org/perldiag.html#Calling-POSIX%3a%3a%25s()-is-deprecated
IP (definition)	A			Perl Glossary							<section class="prog__container"><p>Internet Protocol, or Intellectual Property.</p></section>	http://perldoc.perl.org/perlglossary.html#IP
standard error (definition)	A			Perl Glossary							<section class="prog__container"><p>The default output <b>stream</b> for nasty remarks that don’t belong in <b>standard output</b>. Represented within a Perl program by the output&gt;  <b>filehandle</b> <code class="inline"><span class="w">STDERR</span></code> . You can use this stream explicitly, but the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span></code> built-ins write to your standard error stream automatically (unless trapped or otherwise intercepted).</p></section>	http://perldoc.perl.org/perlglossary.html#standard-error
panic: corrupt saved stack index %ld	A			Perl Diagnostics							<section class="prog__container"><p>(P) The savestack was requested to restore more localized values than there are in the savestack.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-corrupt-saved-stack-index-%25ld
break (function)	A			Perl Functions							<section class="prog__container"><pre>break</pre><p>Break out of a <code class="inline">given<span class="s">(</span><span class="s">)</span></code>  block.</p><p>This keyword is enabled by the <code class="inline"><span class="q">&quot;switch&quot;</span></code>  feature; see <span href="http://perldoc.perl.org/feature.html">feature</span> for more information on <code class="inline"><span class="q">&quot;switch&quot;</span></code> .  You can also access it by prefixing it with <code class="inline"><span class="w">CORE::</span></code> .  Alternatively, include a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10</span></code>  or later to the current scope.</p></section>	http://perldoc.perl.org/functions/break.html
Why can't I just open(FH, ">file.lock")?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>A common bit of code <b>NOT TO USE</b> is this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span><span class="s">(</span><span class="n">3</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> -e <span class="q">&#39;file.lock&#39;</span><span class="sc">;</span>    <span class="c"># PLEASE DO NOT USE</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lock</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&#39;file.lock&#39;</span><span class="sc">;</span> <span class="c"># THIS BROKEN CODE</span></li></ol></pre><p>This is a classic race condition: you take two steps to do something which must be done in one. That&#39;s why computer hardware provides an atomic test-and-set instruction. In theory, this &quot;ought&quot; to work:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;file.lock&quot;</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open  file.lock: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>except that lamentably, file creation (and deletion) is not atomic over NFS, so this won&#39;t work (at least, not every time) over the net. Various schemes involving link() have been suggested, but these tend to involve busy-wait, which is also less than desirable.</p></section>	http://perldoc.perl.org/perlfaq5.html#Why-can't-I-just-open(FH%2c-%22%3efile.lock%22)%3f
Switch (?(condition)... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You omitted to close a (?(condition)...) block somewhere in the pattern.  Add a closing parenthesis in the appropriate position.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Switch-(%3f(condition)...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Overloaded qr did not return a REGEXP	A			Perl Diagnostics							<section class="prog__container"><p>(F) An object with a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr</span></code> overload was used as part of a match, but the overloaded operation didn&#39;t return a compiled regexp.  See <span href="http://perldoc.perl.org/overload.html">overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Overloaded-qr-did-not-return-a-REGEXP
regular file (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>file</b> that’s not a <b>directory</b>, a <b>device</b>, a named <b>pipe</b> or <b>socket</b>, or a <b>symbolic link</b>. Perl uses the <code class="inline"><span class="q">–f</span></code>  file test operator to identify regular files. Sometimes called a “plain” file.</p></section>	http://perldoc.perl.org/perlglossary.html#regular-file
%s package attribute may clash with future reserved word: %s	A			Perl Diagnostics							<section class="prog__container"><p>(W reserved) A lowercase attribute name was used that had a package-specific handler.  That name might have a meaning to Perl itself some day, even though it doesn&#39;t yet.  Perhaps you should use a mixed-case attribute name, instead.  See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-package-attribute-may-clash-with-future-reserved-word%3a-%25s
Possible attempt to put comments in qw() list	A			Perl Diagnostics							<section class="prog__container"><p>(W qw) qw() lists contain items separated by whitespace; as with literal strings, comment characters are not ignored, but are instead treated as literal data.  (You may have used different delimiters than the parentheses shown here; braces are also frequently used.)</p><p>You probably wrote something like this:</p><pre class="verbatim"><ol><li>    <span class="i">@list</span> = <span class="q">qw(</span></li><li>&#09;<span class="q">a # a comment</span></li><li>        <span class="q">b # another comment</span></li><li>    <span class="q">)</span><span class="sc">;</span></li></ol></pre><p>when you should have written this:</p><pre class="verbatim"><ol><li>    <span class="i">@list</span> = <span class="q">qw(</span></li><li>&#09;<span class="q">a</span></li><li>        <span class="q">b</span></li><li>    <span class="q">)</span><span class="sc">;</span></li></ol></pre><p>If you really want comments, build your list the old-fashioned way, with quotes and commas:</p><pre class="verbatim"><ol><li>    <span class="i">@list</span> = <span class="s">(</span></li><li>        <span class="q">&#39;a&#39;</span><span class="cm">,</span>    <span class="c"># a comment</span></li><li>        <span class="q">&#39;b&#39;</span><span class="cm">,</span>    <span class="c"># another comment</span></li><li>    <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Possible-attempt-to-put-comments-in-qw()-list
How can I write() into a string?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you want to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> into a string, you just have to &lt;open&gt; a filehandle to a string, which Perl has been able to do since Perl 5.6:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">FH</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> \\<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span><span class="s">(</span> <span class="w">FH</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Since you want to be a good programmer, you probably want to use a lexical filehandle, even though formats are designed to work with bareword filehandles since the default format names take the filehandle name. However, you can control this with some Perl special per-filehandle variables: <code class="inline"><span class="i">$^</span></code> , which names the top-of-page format, and <code class="inline"><span class="i">$~</span></code>  which shows the line format. You have to change the default filehandle to set these variables:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> \\<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span><span class="sc">;</span></li><li></li><li>    <span class="s">{</span> <span class="c"># set per-filehandle variables</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$old_fh</span> = <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span> <span class="i">$fh</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$~</span> = <span class="q">&#39;ANIMAL&#39;</span><span class="sc">;</span></li><li>        <span class="i">$^</span> = <span class="q">&#39;ANIMAL_TOP&#39;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span> <span class="i">$old_fh</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    format ANIMAL_TOP =</li><li><span class="hh">     ID  Type    Name</span></li><li><span class="hh">    .</span></li><li></li><li><span class="hh">    format ANIMAL =</span></li><li><span class="hh">    @##   @&lt;&lt;&lt;    @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></li><li><span class="hh">    $id,  $type,  $name</span></li><li><span class="hh">    .</span></li></ol></pre><p>Although write can work with lexical or package variables, whatever variables you use have to scope in the format. That most likely means you&#39;ll want to localize some package variables:</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span> <span class="i">$id</span><span class="cm">,</span> <span class="i">$type</span><span class="cm">,</span> <span class="i">$name</span> <span class="s">)</span> = <span class="q">qw( 12 cat Buster )</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span><span class="s">(</span> <span class="i">$fh</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$string</span><span class="sc">;</span></li></ol></pre><p>There are also some tricks that you can play with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline</span></code> and the accumulator variable <code class="inline"><span class="i">$^A</span></code> , but you lose a lot of the value of formats since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline</span></code> won&#39;t handle paging and so on. You end up reimplementing formats when you use them.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-write()-into-a-string%3f
File::DosGlob (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::DosGlob - DOS like globbing and then some</p> <pre class="verbatim"><ol><li>    require 5.004;</li><li></li><li>    # override CORE::glob in current package</li><li>    use File::DosGlob &#39;glob&#39;;</li><li></li><li>    # override CORE::glob in ALL packages (use with extreme caution!)</li><li>    use File::DosGlob &#39;GLOBAL_glob&#39;;</li><li></li><li>    @perlfiles = glob  &quot;..\\\\pe?l/*.p?&quot;;</li><li>    print &lt;..\\\\pe?l/*.p?&gt;;</li><li></li><li>    # from the command line (overrides only in main::)</li><li>    &gt; perl -MFile::DosGlob=glob -e &quot;print &lt;../pe*/*p?&gt;&quot;</li></ol></pre></section>	http://perldoc.perl.org/File/DosGlob.html
listen (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>listen SOCKET,QUEUESIZE</pre><p>Does the same thing that the listen(2) system call does.  Returns true if it succeeded, false otherwise.  See the example in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p></section>	http://perldoc.perl.org/functions/listen.html
glob (definition)	A			Perl Glossary		[[fileglob]]\n[[typeglob]]					<section class="prog__container"><p>Strictly, the shell’s <code class="inline"><span class="i">*</span></code>  character, which will match a “glob” of characters when you’re trying to generate a list of filenames. Loosely, the act of using globs and similar symbols to do pattern matching. </p></section>	http://perldoc.perl.org/perlglossary.html#glob
require (function)	A			Perl Functions\nPerl Keywords related to perl modules							<section class="prog__container"><pre>require VERSION<br>require EXPR<br>require</pre><p>Demands a version of Perl specified by VERSION, or demands some semantics specified by EXPR or by <code class="inline"><span class="i">$_</span></code>  if EXPR is not supplied.</p><p>VERSION may be either a numeric argument such as 5.006, which will be compared to <code class="inline"><span class="i">$]</span></code> , or a literal of the form v5.6.1, which will be compared to <code class="inline"><span class="i">$^V</span></code>  (aka $PERL_VERSION).  An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with <span href="http://perldoc.perl.org/functions/use.html">use</span>, which can do a similar check at compile time.</p><p>Specifying VERSION as a literal of the form v5.6.1 should generally be avoided, because it leads to misleading error messages under earlier versions of Perl that do not support this syntax.  The equivalent numeric version should be used instead.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="v">v5.6.1</span><span class="sc">;</span>     <span class="c"># run time version check</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="v">5.6.1</span><span class="sc">;</span>      <span class="c"># ditto</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5.006_001</span><span class="sc">;</span>  <span class="c"># ditto; preferred for backwards</span></li><li>                          <span class="w">compatibility</span></li></ol></pre><p>Otherwise, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> demands that a library file be included if it hasn&#39;t already been included.  The file is included via the do-FILE mechanism, which is essentially just a variety of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> with the caveat that lexical variables in the invoking script will be invisible to the included code.  If it were implemented in pure Perl, it would have semantics similar to the following:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Carp</span> <span class="q">&#39;croak&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">version</span><span class="sc">;</span></li><li></li><li><span name="require"></span>    sub <span class="m">require</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$filename</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$version</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="w">version</span><span class="w">-&gt;parse</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span> <span class="s">}</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span> <span class="i">$version</span> &gt; <span class="i">$^V</span> <span class="s">)</span> <span class="s">{</span></li><li>               <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$vn</span> = <span class="i">$version</span><span class="i">-&gt;normal</span><span class="sc">;</span></li><li>               <span class="w">croak</span> <span class="q">&quot;Perl $vn required--this is only $^V, stopped&quot;</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$INC</span>{<span class="i">$filename</span>}<span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$INC</span>{<span class="i">$filename</span>}<span class="sc">;</span></li><li>            <span class="w">croak</span> <span class="q">&quot;Compilation failed in require&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$prefix</span> <span class="s">(</span><span class="i">@INC</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$prefix</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="c">#... do other stuff - see text below ....</span></li><li>            <span class="s">}</span></li><li>            <span class="c"># (see text below about possible appending of .pmc</span></li><li>            <span class="c"># suffix to $filename)</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$realfilename</span> = <span class="q">&quot;$prefix/$filename&quot;</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> ! -e <span class="i">$realfilename</span> || -d <span class="i">_</span> || -b <span class="i">_</span><span class="sc">;</span></li><li>            <span class="i">$INC</span>{<span class="i">$filename</span>} = <span class="i">$realfilename</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span><span class="s">(</span><span class="i">$realfilename</span><span class="s">)</span><span class="sc">;</span></li><li>                         <span class="c"># but run in caller&#39;s namespace</span></li><li></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span>!<span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$result</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="i">$INC</span>{<span class="i">$filename</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="sc">;</span></li><li>                <span class="w">croak</span> <span class="i">$@</span> ? <span class="q">&quot;$@Compilation failed in require&quot;</span></li><li>                         <span class="co">:</span> <span class="q">&quot;Can&#39;t locate $filename: $!\\n&quot;</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span>!<span class="i">$result</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="i">$INC</span>{<span class="i">$filename</span>}<span class="sc">;</span></li><li>                <span class="w">croak</span> <span class="q">&quot;$filename did not return true value&quot;</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="i">$!</span> = <span class="n">0</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$result</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="w">croak</span> <span class="q">&quot;Can&#39;t locate $filename in \\@INC ...&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that the file will not be included twice under the same specified name.</p><p>The file must return true as the last statement to indicate successful execution of any initialization code, so it&#39;s customary to end such a file with <code class="inline"><span class="n">1</span><span class="sc">;</span></code>  unless you&#39;re sure it&#39;ll return true otherwise.  But it&#39;s better just to put the <code class="inline"><span class="n">1</span><span class="sc">;</span></code> , in case you add more statements.</p><p>If EXPR is a bareword, the require assumes a &quot;<i>.pm</i>&quot; extension and replaces &quot;<i>::</i>&quot; with &quot;<i>/</i>&quot; in the filename for you, to make it easy to load standard modules.  This form of loading of modules does not risk altering your namespace.</p><p>In other words, if you try this:</p><pre class="verbatim"><ol><li>        <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Foo::Bar</span><span class="sc">;</span>     <span class="c"># a splendid bareword</span></li></ol></pre><p>The require function will actually look for the &quot;<i>Foo/Bar.pm</i>&quot; file in the directories specified in the <code class="inline"><span class="i">@INC</span></code>  array.</p><p>But if you try this:</p><pre class="verbatim"><ol><li>        <span class="i">$class</span> = <span class="q">&#39;Foo::Bar&#39;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="i">$class</span><span class="sc">;</span>       <span class="c"># $class is not a bareword</span></li><li>    <span class="c">#or</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&quot;Foo::Bar&quot;</span><span class="sc">;</span>   <span class="c"># not a bareword because of the &quot;&quot;</span></li></ol></pre><p>The require function will look for the &quot;<i>Foo::Bar</i>&quot; file in the @INC array and will complain about not finding &quot;<i>Foo::Bar</i>&quot; there.  In this case you can do:</p><pre class="verbatim"><ol><li>        <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;require $class&quot;</span><span class="sc">;</span></li></ol></pre><p>Now that you understand how <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> looks for files with a bareword argument, there is a little extra functionality going on behind the scenes.  Before <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> looks for a &quot;<i>.pm</i>&quot; extension, it will first look for a similar filename with a &quot;<i>.pmc</i>&quot; extension.  If this file is found, it will be loaded in place of any file ending in a &quot;<i>.pm</i>&quot; extension.</p><p>You can also insert hooks into the import facility by putting Perl code directly into the @INC array.  There are three forms of hooks: subroutine references, array references, and blessed objects.</p><p>Subroutine references are the simplest case.  When the inclusion system walks through @INC and encounters a subroutine, this subroutine gets called with two parameters, the first a reference to itself, and the second the name of the file to be included (e.g., &quot;<i>Foo/Bar.pm</i>&quot;).  The subroutine should return either nothing or else a list of up to four  values in the following order:</p><p>If an empty list, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, or nothing that matches the first 3 values above is returned, then <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles  will be ignored and processing will stop there.</p><p>If the hook is an array reference, its first element must be a subroutine reference.  This subroutine is called as above, but the first parameter is the array reference.  This lets you indirectly pass arguments to the subroutine.</p><p>In other words, you can write:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@INC</span><span class="cm">,</span> \\<span class="i">&amp;my_sub</span><span class="sc">;</span></li><li><span name="my_sub"></span>    sub <span class="m">my_sub</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$coderef</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>  <span class="c"># $coderef is \\&amp;my_sub</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>or:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@INC</span><span class="cm">,</span> <span class="s">[</span> \\<span class="i">&amp;my_sub</span><span class="cm">,</span> <span class="i">$x</span><span class="cm">,</span> <span class="i">$y</span><span class="cm">,</span> ... <span class="s">]</span><span class="sc">;</span></li><li><span name="my_sub"></span>    sub <span class="m">my_sub</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$arrayref</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="c"># Retrieve $x, $y, ...</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@parameters</span> = <span class="i">@$arrayref</span>[<span class="n">1</span>..<span class="i">$#$arrayref</span>]<span class="sc">;</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>If the hook is an object, it must provide an INC method that will be called as above, the first parameter being the object itself.  (Note that you must fully qualify the sub&#39;s name, as unqualified <code class="inline"><span class="w">INC</span></code>  is always forced into package <code class="inline"><span class="w">main</span></code> .)  Here is a typical code layout:</p><pre class="verbatim"><ol><li>    <span class="c"># In Foo.pm</span></li><li><span name="package-Foo"></span>    package <span class="i">Foo</span><span class="sc">;</span></li><li><span name="new"></span>    sub <span class="m">new</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="Foo::INC"></span>    sub <span class="m">Foo::INC</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$self</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        ...</li><li>    <span class="s">}</span></li><li></li><li>    <span class="c"># In the main program</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@INC</span><span class="cm">,</span> <span class="w">Foo</span><span class="w">-&gt;new</span><span class="s">(</span>...<span class="s">)</span><span class="sc">;</span></li></ol></pre><p>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded.  See <span href="http://perldoc.perl.org/perlvar.html#%25INC">%INC in perlvar</span>.</p><p>For a yet-more-powerful import facility, see <span href="http://perldoc.perl.org/functions/use.html">use</span> and <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>.</p></section>	http://perldoc.perl.org/functions/require.html
How can I split a [character]-delimited string except when inside [character]?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Several modules can handle this sort of parsing--<span href="http://perldoc.perl.org/Text/Balanced.html">Text::Balanced</span>, <span href="http://search.cpan.org/perldoc/Text::CSV">Text::CSV</span>, <span href="http://search.cpan.org/perldoc/Text::CSV_XS">Text::CSV_XS</span>, and <span href="http://perldoc.perl.org/Text/ParseWords.html">Text::ParseWords</span>, among others.</p><p>Take the example case of trying to split a string that is comma-separated into its different fields. You can&#39;t use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split(/,/)</span></code> because you shouldn&#39;t split if the comma is inside quotes. For example, take a data line like this:</p><pre class="verbatim"><ol><li>    <span class="w">SAR001</span><span class="cm">,</span><span class="q">&quot;&quot;</span><span class="cm">,</span><span class="q">&quot;Cimetrix, Inc&quot;</span><span class="cm">,</span><span class="q">&quot;Bob Smith&quot;</span><span class="cm">,</span><span class="q">&quot;CAM&quot;</span><span class="cm">,</span><span class="w">N</span><span class="cm">,</span><span class="n">8</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">0</span><span class="cm">,</span><span class="n">7</span><span class="cm">,</span><span class="q">&quot;Error, Core Dumped&quot;</span></li></ol></pre><p>Due to the restriction of the quotes, this is a fairly complex problem. Thankfully, we have Jeffrey Friedl, author of <i>Mastering Regular Expressions</i>, to handle these for us. He suggests (assuming your string is contained in <code class="inline"><span class="i">$text</span></code> ):</p><pre class="verbatim"><ol><li>     <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@new</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@new</span><span class="cm">,</span> <span class="i">$+</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="i">$text</span> =~ <span class="q">m{</span></li><li>         <span class="q">         &quot;([^\\&quot;\\\\]*(?:\\\\.[^\\&quot;\\\\]*)*)&quot;,? # groups the phrase inside the quotes</span></li><li>        <span class="q">        | ([^,]+),?</span></li><li>        <span class="q">        | ,</span></li><li>     <span class="q">     }gx</span><span class="sc">;</span></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@new</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$text</span><span class="cm">,</span><span class="n">-1</span><span class="cm">,</span><span class="n">1</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;,&#39;</span><span class="sc">;</span></li></ol></pre><p>If you want to represent quotation marks inside a quotation-mark-delimited field, escape them with backslashes (eg, <code class="inline"><span class="q">&quot;like \\&quot;this\\&quot;&quot;</span></code> .</p><p>Alternatively, the <span href="http://perldoc.perl.org/Text/ParseWords.html">Text::ParseWords</span> module (part of the standard Perl distribution) lets you say:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::ParseWords</span><span class="sc">;</span></li><li>    <span class="i">@new</span> = <span class="i">quotewords</span><span class="s">(</span><span class="q">&quot;,&quot;</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>For parsing or generating CSV, though, using <span href="http://search.cpan.org/perldoc/Text::CSV">Text::CSV</span> rather than implementing it yourself is highly recommended; you&#39;ll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-split-a-%5bcharacter%5d-delimited-string-except-when-inside-%5bcharacter%5d%3f
Arg too short for msgsnd	A			Perl Diagnostics							<section class="prog__container"><p>(F) msgsnd() requires a string at least as long as sizeof(long).</p></section>	http://perldoc.perl.org/perldiag.html#Arg-too-short-for-msgsnd
Non-string passed as bitmask	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) A number has been passed as a bitmask argument to select(). Use the vec() function to construct the file descriptor bitmasks for select.  See <span href="http://perldoc.perl.org/functions/select.html">select</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Non-string-passed-as-bitmask
How do I change, delete, or insert a line in a file, or append to the beginning of a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The basic idea of inserting, changing, or deleting a line from a text file involves reading and printing the file to the point you want to make the change, making the change, then reading and printing the rest of the file. Perl doesn&#39;t provide random access to lines (especially since the record input separator, <code class="inline"><span class="i">$/</span></code> , is mutable), although modules such as <span href="http://perldoc.perl.org/Tie/File.html">Tie::File</span> can fake it.</p><p>A Perl program to do these tasks takes the basic form of opening a file, printing its lines, then closing the file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span><span class="cm">,</span>  <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span>  <span class="i">$file</span>      <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t read old file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&quot;$file.new&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t write new file: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$out</span><span class="sc">;</span></li></ol></pre><p>Within that basic form, add the parts that you need to insert, change, or delete lines.</p><p>To prepend lines to the beginning, print those lines before you enter the loop that prints the existing lines.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span><span class="cm">,</span>  <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span>  <span class="i">$file</span>      <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t read old file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&quot;$file.new&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t write new file: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="q">&quot;# Add this line to the top\\n&quot;</span><span class="sc">;</span> <span class="c"># &lt;--- HERE&#39;S THE MAGIC</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$out</span><span class="sc">;</span></li></ol></pre><p>To change existing lines, insert the code to modify the lines inside the <code class="inline">while</code>  loop. In this case, the code finds all lowercased versions of &quot;perl&quot; and uppercases them. The happens for every line, so be sure that you&#39;re supposed to do that on every line!</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span><span class="cm">,</span>  <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span>  <span class="i">$file</span>      <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t read old file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&quot;$file.new&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t write new file: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="q">&quot;# Add this line to the top\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">s/\\b(perl)\\b/Perl/g</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$out</span><span class="sc">;</span></li></ol></pre><p>To change only a particular line, the input line number, <code class="inline"><span class="i">$.</span></code> , is useful. First read and print the lines up to the one you  want to change. Next, read the single line you want to change, change it, and print it. After that, read the rest of the lines and print those:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="c"># print the lines before the change</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$.</span> == <span class="n">4</span><span class="sc">;</span> <span class="c"># line number before change</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span> = <span class="q">&lt;$in&gt;</span><span class="sc">;</span></li><li>    <span class="i">$line</span> =~ <span class="q">s/\\b(perl)\\b/Perl/g</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$line</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span> <span class="c"># print the rest of the lines</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>To skip lines, use the looping controls. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> in this example skips comment lines, and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> stops all processing once it encounters either <code class="inline"><span name="__END__"></span>__END__</code>  or <code class="inline"><span name="__DATA__"></span>__DATA__</code> .</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/^\\s+#/</span><span class="sc">;</span>             <span class="c"># skip comment lines</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">/^__(END|DATA)__$/</span><span class="sc">;</span>  <span class="c"># stop at end of code marker</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Do the same sort of thing to delete a particular line by using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> to skip the lines you don&#39;t want to show up in the output. This example skips every fifth line:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="q">&lt;$in&gt;</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">$.</span> % <span class="n">5</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If, for some odd reason, you really want to see the whole file at once rather than processing line-by-line, you can slurp it in (as long as you can fit the whole thing in memory!):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in</span><span class="cm">,</span>  <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span>  <span class="i">$file</span>      <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t read old file: $!&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$out</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&quot;$file.new&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t write new file: $!&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$content</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span><span class="sc">;</span> <span class="q">&lt;$in&gt;</span> <span class="s">}</span><span class="sc">;</span> <span class="c"># slurp!</span></li><li></li><li>        <span class="c"># do your magic here</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$out</span> <span class="i">$content</span><span class="sc">;</span></li></ol></pre><p>Modules such as <span href="http://search.cpan.org/perldoc/Path::Tiny">Path::Tiny</span> and <span href="http://perldoc.perl.org/Tie/File.html">Tie::File</span> can help with that too. If you can, however, avoid reading the entire file at once. Perl won&#39;t give that memory back to the operating system until the process finishes.</p><p>You can also use Perl one-liners to modify a file in-place. The following changes all &#39;Fred&#39; to &#39;Barney&#39; in <i>inFile.txt</i>, overwriting the file with the new contents. With the <code class="inline">-p</code>  switch, Perl wraps a <code class="inline">while</code>  loop around the code you specify with <code class="inline">-e</code> , and <code class="inline">-<span class="w">i</span></code>  turns on in-place editing. The current line is in <code class="inline"><span class="i">$_</span></code> . With <code class="inline">-p</code> , Perl automatically prints the value of <code class="inline"><span class="i">$_</span></code>  at the end of the loop. See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for more details.</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">pi</span> -e <span class="q">&#39;s/Fred/Barney/&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>To make a backup of <code class="inline"><span class="w">inFile</span>.<span class="w">txt</span></code> , give <code class="inline">-<span class="w">i</span></code>  a file extension to add:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">pi</span>.<span class="w">bak</span> -e <span class="q">&#39;s/Fred/Barney/&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>To change only the fifth line, you can add a test checking <code class="inline"><span class="i">$.</span></code> , the input line number, then only perform the operation when the test passes:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">pi</span> -e <span class="q">&#39;s/Fred/Barney/ if $. == 5&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>To add lines before a certain line, you can add a line (or lines!) before Perl prints <code class="inline"><span class="i">$_</span></code> :</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">pi</span> -e <span class="q">&#39;print &quot;Put before third line\\n&quot; if $. == 3&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>You can even add a line to the beginning of a file, since the current line prints at the end of the loop:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">pi</span> -e <span class="q">&#39;print &quot;Put before first line\\n&quot; if $. == 1&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>To insert a line after one already in the file, use the <code class="inline">-<span class="w">n</span></code>  switch. It&#39;s just like <code class="inline">-p</code>  except that it doesn&#39;t print <code class="inline"><span class="i">$_</span></code>  at the end of the loop, so you have to do that yourself. In this case, print <code class="inline"><span class="i">$_</span></code>  first, then print the line that you want to add.</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">ni</span> -e <span class="q">&#39;print; print &quot;Put after fifth line\\n&quot; if $. == 5&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre><p>To delete lines, only print the ones that you want.</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">ni</span> -e <span class="q">&#39;print if /d/&#39;</span> <span class="w">inFile</span>.<span class="w">txt</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-change%2c-delete%2c-or-insert-a-line-in-a-file%2c-or-append-to-the-beginning-of-a-file%3f
Hexadecimal float: precision loss	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) The hexadecimal floating point had internally more digits than could be output.  This can be caused by unsupported long double formats, or by 64-bit integers not being available (needed to retrieve the digits under some configurations).</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-precision-loss
Statement unlikely to be reached	A			Perl Diagnostics							<section class="prog__container"><p>(W exec) You did an exec() with some statement after it other than a die().  This is almost always an error, because exec() never returns unless there was a failure.  You probably wanted to use system() instead, which does return.  To suppress this warning, put the exec() in a block by itself.</p></section>	http://perldoc.perl.org/perldiag.html#Statement-unlikely-to-be-reached
Unknown charname '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The name you used inside <code class="inline">\\<span class="w">N</span><span class="s">{</span><span class="s">}</span></code>  is unknown to Perl.  Check the spelling.  You can say <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span> <span class="q">&quot;:loose&quot;</span></code>  to not have to be so precise about spaces, hyphens, and capitalization on standard Unicode names.  (Any custom aliases that have been created must be specified exactly, regardless of whether <code class="inline"><span class="j">:</span><span class="w">loose</span></code>  is used or not.)  This error may also happen if the <code class="inline">\\<span class="w">N</span><span class="s">{</span><span class="s">}</span></code>  is not in the scope of the corresponding <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-charname-'%25s'
CPAN::Tarzip (module)	A			Perl Standard Modules							<section class="prog__container"><p>CPAN::Tarzip - internal handling of tar archives for CPAN.pm</p> </section>	http://perldoc.perl.org/CPAN/Tarzip.html
undef (function)	A			Perl Functions\nPerl Miscellaneous functions							<section class="prog__container"><pre>undef EXPR<br>undef</pre><p>Undefines the value of EXPR, which must be an lvalue.  Use only on a scalar value, an array (using <code class="inline"><span class="i">@</span></code> ), a hash (using <code class="inline"><span class="i">%</span></code> ), a subroutine (using <code class="inline"><span class="i">&amp;</span></code> ), or a typeglob (using <code class="inline"><span class="i">*</span></code> ).  Saying <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$hash</span>{<span class="i">$key</span>}</code>  will probably not do what you expect on most predefined variables or DBM list values, so don&#39;t do that; see <span href="http://perldoc.perl.org/functions/delete.html">delete</span>.  Always returns the undefined value.  You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter.  Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$bar</span>{<span class="q">&#39;blurfl&#39;</span>}<span class="sc">;</span>      <span class="c"># Compare to: delete $bar{&#39;blurfl&#39;};</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">@ary</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%hash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">&amp;mysub</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">*xyz</span><span class="sc">;</span>       <span class="c"># destroys $xyz, @xyz, %xyz, &amp;xyz, etc.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/wantarray.html">wantarray</span> ? <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$errmsg</span><span class="s">)</span> <span class="co">:</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">)</span> if <span class="i">$they_blew_it</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="n">0.25</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$a</span><span class="cm">,</span> <span class="i">$b</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$c</span><span class="s">)</span> = <span class="i">&amp;foo</span><span class="sc">;</span>       <span class="c"># Ignore third value returned</span></li></ol></pre><p>Note that this is a unary operator, not a list operator.</p></section>	http://perldoc.perl.org/functions/undef.html
Can't use a hash as a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use a hash as a reference, as in <code class="inline"><span class="i">%foo</span>-&gt;{<span class="q">&quot;bar&quot;</span>}</code>  or <code class="inline"><span class="i">%$ref</span>-&gt;{<span class="q">&quot;hello&quot;</span>}</code> .  Versions of perl &lt;= 5.22.0 used to allow this syntax, but shouldn&#39;t have.  This was deprecated in perl 5.6.1.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-a-hash-as-a-reference
Can't "goto" out of a pseudo block	A			Perl Diagnostics							<section class="prog__container"><p>(F) A &quot;goto&quot; statement was executed to jump out of what might look like a block, except that it isn&#39;t a proper block.  This usually occurs if you tried to jump out of a sort() block or subroutine, which is a no-no. See <span href="http://perldoc.perl.org/functions/goto.html">goto</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22goto%22-out-of-a-pseudo-block
IO::Socket::INET (module)	A			Perl Standard Modules		[[Socket]]\n[[IO::Socket]]					<section class="prog__container"><p>IO::Socket::INET - Object interface for AF_INET domain sockets</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Socket::INET</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Socket/INET.html
Use of \b{} for non-UTF-8 locale is wrong. Assuming a UTF-8 locale	A			Perl Diagnostics							<section class="prog__container"><p>(W locale)  You are matching a regular expression using locale rules, and a Unicode boundary is being matched, but the locale is not a Unicode one.  This doesn&#39;t make sense.  Perl will continue, assuming a Unicode (UTF-8) locale, but the results could well be wrong except if the locale happens to be ISO-8859-1 (Latin1) where this message is spurious and can be ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%5cb%7b%7d-for-non-UTF-8-locale-is-wrong.--Assuming-a-UTF-8-locale
How can I pull out lines between two patterns that are themselves on different lines?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>You can use Perl&#39;s somewhat exotic <code class="inline">..</code>  operator (documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>):</p><pre class="verbatim"><ol><li>    perl -ne &#39;print if /START/ .. /END/&#39; file1 file2 ...</li></ol></pre><p>If you wanted text and not lines, you would use</p><pre class="verbatim"><ol><li>    perl -0777 -ne &#39;print &quot;$1\\n&quot; while /START(.*?)END/gs&#39; file1 file2 ...</li></ol></pre><p>But if you want nested occurrences of <code class="inline"><span class="w">START</span></code>  through <code class="inline">END</code> , you&#39;ll run up against the problem described in the question in this section on matching balanced text.</p><p>Here&#39;s another example of using <code class="inline">..</code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in_header</span> =   <span class="n">1</span>  .. <span class="q">/^$/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$in_body</span>   = <span class="q">/^$/</span> .. <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span></li><li>    <span class="c"># now choose between them</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>        <span class="i">$.</span> = <span class="n">0</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span>    <span class="c"># fix $.</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-pull-out-lines-between-two-patterns-that-are-themselves-on-different-lines%3f
big-endian (definition)	A			Perl Glossary							<section class="prog__container"><p>From Swift: someone who eats eggs big end first. Also used of computers that store the most significant <b>byte</b> of a word at a lower byte address than the least significant byte. Often considered superior to little-endian machines. See also <b>little-endian</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#big-endian
-dt: MOD[=bar,baz]	A			Perl Command-Line Switches							<section class="prog__container"><p>runs the program under the control of a debugging, profiling, or tracing module installed as <code class="inline">Devel::<i>MOD</i></code>. E.g., <b>-d:DProf</b> executes the program using the <code class="inline"><span class="w">Devel::DProf</span></code>  profiler.  As with the <b>-M</b> flag, options may be passed to the <code class="inline">Devel::<i>MOD</i></code> package where they will be received and interpreted by the <code class="inline">Devel::<i>MOD</i>::import</code> routine.  Again, like <b>-M</b>, use -<b>-d:-<i>MOD</i></b> to call <code class="inline">Devel::<i>MOD</i>::unimport</code> instead of import.  The comma-separated list of options must follow a <code class="inline">=</code>  character.  If <b>t</b> is specified, it indicates to the debugger that threads will be used in the code being debugged.  See <span href="http://perldoc.perl.org/perldebug.html">perldebug</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-dt%3a*_MOD%5b%3dbar%2cbaz%5d_
syscall (function)	A			Perl Functions\nPerl Input and output functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>syscall NUMBER, LIST</pre><p>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call.  If unimplemented, raises an exception.  The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int.  If not, the pointer to the string value is passed.  You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string.  You can&#39;t use a string literal (or other read-only string) as an argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> because Perl has to assume that any string pointer might be written through.  If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add <code class="inline"><span class="n">0</span></code>  to them to force them to look like numbers.  This emulates the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syswrite.html">syswrite</span></code> function (or vice versa):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;syscall.ph&#39;</span><span class="sc">;</span>        <span class="c"># may need to run h2ph</span></li><li>    <span class="i">$s</span> = <span class="q">&quot;hi there\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span><span class="s">(</span><span class="i">&amp;SYS_write</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="cm">,</span> <span class="i">$s</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="i">$s</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that Perl supports passing of up to only 14 arguments to your syscall, which in practice should (usually) suffice.</p><p>Syscall returns whatever value returned by the system call it calls. If the system call fails, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> returns <code class="inline"><span class="n">-1</span></code>  and sets <code class="inline"><span class="i">$!</span></code>  (errno). Note that some system calls <i>can</i> legitimately return <code class="inline"><span class="n">-1</span></code> .  The proper way to handle such calls is to assign <code class="inline"><span class="i">$!</span>=<span class="n">0</span></code>  before the call, then check the value of <code class="inline"><span class="i">$!</span></code>  if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> returns <code class="inline"><span class="n">-1</span></code> .</p><p>There&#39;s a problem with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall(&amp;SYS_pipe)</span></code>: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end.  You can avoid this problem by using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span></code> instead.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#syscall">syscall in perlport</span>.</p></section>	http://perldoc.perl.org/functions/syscall.html
IO::Seekable (module)	A			Perl Standard Modules		[[perlfunc]]\n[[I/O Operators in perlop]]\n[[IO::Handle]]\n[[IO::File]]					<section class="prog__container"><p>IO::Seekable - supply seek based methods for I/O objects</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Seekable</span><span class="sc">;</span></li><li><span name="package-IO::Something"></span>    package <span class="i">IO::Something</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="q">qw(IO::Seekable)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Seekable.html
superuser (definition)	A			Perl Glossary							<section class="prog__container"><p>The person whom the <b>operating system</b> will let do almost anything. Typically your system administrator or someone pretending to be your system administrator. On Unix systems, the <b>root</b> user. On Windows systems, usually the Administrator user.</p></section>	http://perldoc.perl.org/perlglossary.html#superuser
signal handler (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>subroutine</b> that, instead of being content to be called in the normal fashion, sits around waiting for a bolt out of the blue before it will deign to <b>execute</b>. Under Perl, bolts out of the blue are called signals, and you send them with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/kill.html">kill</span></code> built-in. See the <code class="inline"><span class="i">%SIG</span></code>  hash in Camel chapter 25, “Special Names” and the section “Signals” in Camel chapter 15, “Interprocess Communication”.</p></section>	http://perldoc.perl.org/perlglossary.html#signal-handler
Scalar::Util (module)	A			Perl Standard Modules		[[List::Util]]					<section class="prog__container"><p>Scalar::Util - A selection of general-utility scalar subroutines</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Scalar::Util</span> <span class="q">qw(blessed dualvar isdual readonly refaddr reftype</span></li><li>                        <span class="q">tainted weaken isweak isvstring looks_like_number</span></li><li>                        <span class="q">set_prototype)</span><span class="sc">;</span></li><li>                        <span class="c"># and other useful utils appearing below</span></li></ol></pre></section>	http://perldoc.perl.org/Scalar/Util.html
Why doesn't open() return an error when a pipe open fails?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If the second argument to a piped <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> contains shell metacharacters, perl <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code>s, then <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec()</span></code>s a shell to decode the metacharacters and eventually run the desired program. If the program couldn&#39;t be run, it&#39;s the shell that gets the message, not Perl. All your Perl program can find out is whether the shell itself could be successfully started. You can still capture the shell&#39;s STDERR and check it for error messages. See <span href="http://perldoc.perl.org/perlfaq8.html#How-can-I-capture-STDERR-from-an-external-command%3f">How can I capture STDERR from an external command?</span> elsewhere in this document, or use the <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span> module.</p><p>If there are no shell metacharacters in the argument of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code>, Perl runs the command directly, without using the shell, and can correctly report whether the command started.</p></section>	http://perldoc.perl.org/perlfaq8.html#Why-doesn't-open()-return-an-error-when-a-pipe-open-fails%3f
variadic (definition)	A			Perl Glossary							<section class="prog__container"><p>Said of a <b>function</b> that happily receives an indeterminate number of <b>actual arguments</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#variadic
referent (definition)	A			Perl Glossary							<section class="prog__container"><p>Whatever a reference refers to, which may or may not have a name. Common types of referents include scalars, arrays, hashes, and subroutines.</p></section>	http://perldoc.perl.org/perlglossary.html#referent
Syntax error in (?[...]) in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl could not figure out what you meant inside this construct; this notifies you that it is giving up trying.</p></section>	http://perldoc.perl.org/perldiag.html#Syntax-error-in-(%3f%5b...%5d)-in-regex-m%2f%25s%2f
Constant(%s): Call to &{$^H{%s}} did not return a defined value	A			Perl Diagnostics							<section class="prog__container"><p>(F) The subroutine registered to handle constant overloading (see <span href="http://perldoc.perl.org/overload.html">overload</span>) or a custom charnames handler (see <span href="http://perldoc.perl.org/charnames.html#CUSTOM-TRANSLATORS">CUSTOM TRANSLATORS in charnames</span>) returned an undefined value.</p></section>	http://perldoc.perl.org/perldiag.html#Constant(%25s)%3a-Call-to-%26%7b%24%5eH%7b%25s%7d%7d-did-not-return-a-defined-value
panic: pp_iter, type=%u	A			Perl Diagnostics							<section class="prog__container"><p>(P) The foreach iterator got called in a non-loop context frame.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pp_iter%2c-type%3d%25u
Invalid hexadecimal number in \N{U+...} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The character constant represented by <code class="inline">...</code>  is not a valid hexadecimal number.  Either it is empty, or you tried to use a character other than 0 - 9 or A - F, a - f in a hexadecimal number.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-hexadecimal-number-in-%5cN%7bU%2b...%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
(Missing operator before %s?)	A			Perl Diagnostics							<section class="prog__container"><p>(S syntax) This is an educated guess made in conjunction with the message &quot;%s found where operator expected&quot;.  Often the missing operator is a comma.</p></section>	http://perldoc.perl.org/perldiag.html#(Missing-operator-before-%25s%3f)
synchronous (definition)	A			Perl Glossary							<section class="prog__container"><p>Programming in which the orderly sequence of events can be determined; that is, when things happen one after the other, not at the same time.</p></section>	http://perldoc.perl.org/perlglossary.html#synchronous
Missing argument in %s	A			Perl Diagnostics							<section class="prog__container"><p>(W missing) You called a function with fewer arguments than other arguments you supplied indicated would be needed.</p><p>Currently only emitted when a printf-type format required more arguments than were supplied, but might be used in the future for other cases where we can statically determine that arguments to functions are missing, e.g. for the <span href="http://perldoc.perl.org/functions/pack.html">pack</span> function.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-argument-in-%25s
Filter::Util::Call (module)	A			Perl Standard Modules							<section class="prog__container"><p>Filter::Util::Call - Perl Source Filter Utility Module</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Filter::Util::Call</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Filter/Util/Call.html
File::stat (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::stat - by-name interface to Perl&#39;s built-in stat() functions</p> <pre class="verbatim"><ol><li> use File::stat;</li><li> $st = stat($file) or die &quot;No $file: $!&quot;;</li><li> if ( ($st-&gt;mode &amp; 0111) &amp;&amp; $st-&gt;nlink &gt; 1) ) {</li><li>     print &quot;$file is executable with lotsa links\\n&quot;;</li><li> } </li><li></li><li> if ( -x $st ) {</li><li>     print &quot;$file is executable\\n&quot;;</li><li> }</li><li></li><li> use Fcntl &quot;S_IRUSR&quot;;</li><li> if ( $st-&gt;cando(S_IRUSR, 1) ) {</li><li>     print &quot;My effective uid can read $file\\n&quot;;</li><li> }</li><li></li><li> use File::stat qw(:FIELDS);</li><li> stat($file) or die &quot;No $file: $!&quot;;</li><li> if ( ($st_mode &amp; 0111) &amp;&amp; ($st_nlink &gt; 1) ) {</li><li>     print &quot;$file is executable with lotsa links\\n&quot;;</li><li> }</li></ol></pre></section>	http://perldoc.perl.org/File/stat.html
Binary "**" operator	A			Perl Operators\nPerl Exponentiation							<section class="prog__container">Binary &quot;**&quot; is the exponentiation operator. It binds even more tightly than unary minus, so -2 ** 4 is - ( 2 ** 4 ), not ( -2 ) ** 4. (This is implemented using C&#39;s pow ( 3 ) function, which actually works on doubles internally.)</section>	http://perldoc.perl.org/perlop.html#Exponentiation
Storable (module)	A			Perl Standard Modules		[[Clone]]					<section class="prog__container"><p>Storable - persistence for Perl data structures</p> <pre class="verbatim"><ol><li> use Storable;</li><li> store \\%table, &#39;file&#39;;</li><li> $hashref = retrieve(&#39;file&#39;);</li><li></li><li> use Storable qw(nstore store_fd nstore_fd freeze thaw dclone);</li><li></li><li> # Network order</li><li> nstore \\%table, &#39;file&#39;;</li><li> $hashref = retrieve(&#39;file&#39;);&#09;# There is NO nretrieve()</li><li></li><li> # Storing to and retrieving from an already opened file</li><li> store_fd \\@array, \\*STDOUT;</li><li> nstore_fd \\%table, \\*STDOUT;</li><li> $aryref = fd_retrieve(\\*SOCKET);</li><li> $hashref = fd_retrieve(\\*SOCKET);</li><li></li><li> # Serializing to memory</li><li> $serialized = freeze \\%table;</li><li> %table_clone = %{ thaw($serialized) };</li><li></li><li> # Deep (recursive) cloning</li><li> $cloneref = dclone($ref);</li><li></li><li> # Advisory locking</li><li> use Storable qw(lock_store lock_nstore lock_retrieve)</li><li> lock_store \\%table, &#39;file&#39;;</li><li> lock_nstore \\%table, &#39;file&#39;;</li><li> $hashref = lock_retrieve(&#39;file&#39;);</li></ol></pre></section>	http://perldoc.perl.org/Storable.html
Cannot convert a reference to %s to typeglob	A			Perl Diagnostics							<section class="prog__container"><p>(F) You manipulated Perl&#39;s symbol table directly, stored a reference in it, then tried to access that symbol via conventional Perl syntax. The access triggers Perl to autovivify that typeglob, but it there is no legal conversion from that type of reference to a typeglob.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-convert-a-reference-to-%25s-to-typeglob
How can I open a filehandle to a string?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by Peter J. Holzer, hjp-usenet2@hjp.at)</p><p>Since Perl 5.8.0 a file handle referring to a string can be created by calling open with a reference to that string instead of the filename. This file handle can then be used to read from or write to the string:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> \\<span class="i">$string</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Could not open string for writing&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;foo\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;bar\\n&quot;</span><span class="sc">;</span>    <span class="c"># $string now contains &quot;foo\\nbar\\n&quot;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> \\<span class="i">$string</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Could not open string for reading&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span>    <span class="c"># $x now contains &quot;foo\\n&quot;</span></li></ol></pre><p>With older versions of Perl, the <span href="http://search.cpan.org/perldoc/IO::String">IO::String</span> module provides similar functionality.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-open-a-filehandle-to-a-string%3f
Variable length lookbehind not implemented in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lookbehind is allowed only for subexpressions whose length is fixed and known at compile time.  For positive lookbehind, you can use the <code class="inline">\\<span class="w">K</span></code>  regex construct as a way to get the equivalent functionality.  See <span href="http://perldoc.perl.org/perlre.html#(%3f%3c%3dpattern)-%5cK">(?&lt;=pattern) \\K in perlre</span>.</p><p>There are non-obvious Unicode rules under <code class="inline">/i</code> that can match variably, but which you might not think could.  For example, the substring <code class="inline"><span class="q">&quot;ss&quot;</span></code>  can match the single character LATIN SMALL LETTER SHARP S.  There are other sequences of ASCII characters that can match single ligature characters, such as LATIN SMALL LIGATURE FFI matching <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr/ffi/i</span></code>. Starting in Perl v5.16, if you only care about ASCII matches, adding the <code class="inline"><span class="q">/aa</span></code>  modifier to the regex will exclude all these non-obvious matches, thus getting rid of this message.  You can also say <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">qw(/aa)</span></code>  to apply <code class="inline"><span class="q">/aa</span></code>  to all regular expressions compiled within its scope. See <span href="http://perldoc.perl.org/re.html">re</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Variable-length-lookbehind-not-implemented-in-regex-m%2f%25s%2f
autosplit (definition)	A			Perl Glossary							<section class="prog__container"><p>To split a string automatically, as the <i>–a</i> <b>switch</b> does when running under <i>–p</i> or <i>–n</i> in order to emulate <b>awk</b>. (See also the <code class="inline"><span class="w">AutoSplit</span></code>  module, which has nothing to do with the <code class="inline"><span class="q">–a</span></code>  switch but a lot to do with autoloading.)</p></section>	http://perldoc.perl.org/perlglossary.html#autosplit
panic: child pseudo-process was never scheduled	A			Perl Diagnostics							<section class="prog__container"><p>(P) A child pseudo-process in the ithreads implementation on Windows was not scheduled within the time period allowed and therefore was not able to initialize properly.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-child-pseudo-process-was-never-scheduled
Internal urp in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something went badly awry in the regular expression parser.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Internal-urp-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
string (definition)	A			Perl Glossary							<section class="prog__container"><p>A sequence of characters such as “He said !@#*&amp;%@#*?!”. A string does not have to be entirely printable.</p></section>	http://perldoc.perl.org/perlglossary.html#string
yacc (definition)	A			Perl Glossary							<section class="prog__container"><p>Yet Another Compiler Compiler. A parser generator without which Perl probably would not have existed. See the file <i>perly.y</i> in the Perl source distribution.</p></section>	http://perldoc.perl.org/perlglossary.html#yacc
Can't do inplace edit: %s is not a regular file	A			Perl Diagnostics							<section class="prog__container"><p>(S inplace) You tried to use the <b>-i</b> switch on a special file, such as a file in /dev, a FIFO or an uneditable directory.  The file was ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-do-inplace-edit%3a-%25s-is-not-a-regular-file
How do I find the user's mail address?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Ask them for it. There are so many email providers available that it&#39;s unlikely the local system has any idea how to determine a user&#39;s email address.</p><p>The exception is for organization-specific email (e.g. foo@yourcompany.com) where policy can be codified in your program. In that case, you could look at $ENV{USER}, $ENV{LOGNAME}, and getpwuid($&lt;) in scalar context, like so:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$user_name</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span><span class="s">(</span><span class="i">$&lt;</span><span class="s">)</span></li></ol></pre><p>But you still cannot make assumptions about whether this is correct, unless your policy says it is. You really are best off asking the user.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-find-the-user's-mail-address%3f
${^CHILD_ERROR_NATIVE} (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>The native status returned by the last pipe close, backtick (<code class="inline"><span class="q">``</span></code> ) command, successful call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid()</span></code>, or from the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> operator.  On POSIX-like systems this value can be decoded with the WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG and WIFCONTINUED functions provided by the <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module.</p><p>Under VMS this reflects the actual VMS exit status; i.e. it is the same as <code class="inline"><span class="i">$?</span></code>  when the pragma <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">vmsish</span> <span class="q">&#39;status&#39;</span></code>  is in effect.</p><p>This variable was added in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eCHILD_ERROR_NATIVE%7d
Locale::Maketext::Guts (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Maketext::Guts - Deprecated module to load Locale::Maketext utf8 code</p> <pre class="verbatim"><ol><li>  <span class="c"># Do this instead please</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Maketext</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Maketext/Guts.html
unpack (function)	A			Perl Functions\nPerl Functions for list data\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>unpack TEMPLATE,EXPR<br>unpack TEMPLATE</pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code> does the reverse of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code>: it takes a string and expands it out into a list of values. (In scalar context, it returns merely the first value produced.)</p><p>If EXPR is omitted, unpacks the <code class="inline"><span class="i">$_</span></code>  string. See <span href="http://perldoc.perl.org/perlpacktut.html">perlpacktut</span> for an introduction to this function.</p><p>The string is broken into chunks described by the TEMPLATE.  Each chunk is converted separately to a value.  Typically, either the string is a result of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code>, or the characters of the string represent a C structure of some kind.</p><p>The TEMPLATE has the same format as in the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span></code> function. Here&#39;s a subroutine that does substring:</p><pre class="verbatim"><ol><li><span name="substr"></span>    sub <span class="m">substr</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$what</span><span class="cm">,</span><span class="i">$where</span><span class="cm">,</span><span class="i">$howmuch</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;x$where a$howmuch&quot;</span><span class="cm">,</span> <span class="i">$what</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>and then there&#39;s</p><pre class="verbatim"><ol><li><span name="ordinal"></span>    sub <span class="m">ordinal</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;W&quot;</span><span class="cm">,</span><span class="i">$_</span>[<span class="n">0</span>]<span class="s">)</span><span class="sc">;</span> <span class="s">}</span> <span class="c"># same as ord()</span></li></ol></pre><p>In addition to fields allowed in pack(), you may prefix a field with a %&lt;number&gt; to indicate that you want a &lt;number&gt;-bit checksum of the items instead of the items themselves.  Default is a 16-bit checksum.  Checksum is calculated by summing numeric values of expanded values (for string fields the sum of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ord.html">ord($char)</span></code> is taken; for bit fields the sum of zeroes and ones).</p><p>For example, the following computes the same number as the System V sum program:</p><pre class="verbatim"><ol><li>    <span class="i">$checksum</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span><span class="sc">;</span>  <span class="c"># slurp!</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;%32W*&quot;</span><span class="cm">,</span>&lt;&gt;<span class="s">)</span> % <span class="n">65535</span><span class="sc">;</span></li><li>    <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>The following efficiently counts the number of set bits in a bit vector:</p><pre class="verbatim"><ol><li>    <span class="i">$setbits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;%32b*&quot;</span><span class="cm">,</span> <span class="i">$selectmask</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="w">p</span></code>  and <code class="inline"><span class="w">P</span></code>  formats should be used with care.  Since Perl has no way of checking whether the value passed to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack()</span></code> corresponds to a valid memory location, passing a pointer value that&#39;s not known to be valid is likely to have disastrous consequences.</p><p>If there are more pack codes or if the repeat count of a field or a group is larger than what the remainder of the input string allows, the result is not well defined: the repeat count may be decreased, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack()</span></code> may produce empty strings or zeros, or it may raise an exception. If the input string is longer than one described by the TEMPLATE, the remainder of that input string is ignored.</p><p>See <span href="http://perldoc.perl.org/functions/pack.html">pack</span> for more examples and notes.</p></section>	http://perldoc.perl.org/functions/unpack.html
normalization (definition)	A			Perl Glossary							<section class="prog__container"><p>Converting a text string into an alternate but equivalent <b>canonical</b> (or compatible) representation that can then be compared for equivalence. Unicode recognizes four different normalization forms: NFD, NFC, NFKD, and NFKC.</p></section>	http://perldoc.perl.org/perlglossary.html#normalization
HV (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for a “hash value” typedef, which holds Perl’s internal representation of a hash. The <code class="inline"><span class="w">HV</span></code>  type is a subclass of <b>SV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#HV
Useless use of "re" pragma	A			Perl Diagnostics							<section class="prog__container"><p>(W) You did <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span><span class="sc">;</span></code>  without any arguments.  That isn&#39;t very useful.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-%22re%22-pragma
Constant subroutine %s redefined	A			Perl Diagnostics							<section class="prog__container"><p>(W redefine)(S) You redefined a subroutine which had previously been eligible for inlining.  See <span href="http://perldoc.perl.org/perlsub.html#Constant-Functions">Constant Functions in perlsub</span> for commentary and workarounds.</p></section>	http://perldoc.perl.org/perldiag.html#Constant-subroutine-%25s-redefined
Too many arguments for %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The function requires fewer arguments than you specified.</p></section>	http://perldoc.perl.org/perldiag.html#Too-many-arguments-for-%25s
Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, regexp) You used a literal <code class="inline"><span class="q">&quot;{&quot;</span></code>  character in a regular expression pattern.  You should change to use <code class="inline"><span class="q">&quot;\\{&quot;</span></code>  instead, because a future version of Perl (tentatively v5.26) will consider this to be a syntax error.  If the pattern delimiters are also braces, any matching right brace (<code class="inline"><span class="q">&quot;}&quot;</span></code> ) should also be escaped to avoid confusing the parser, for example,</p><pre class="verbatim"><ol><li>    <span class="q">qr{abc\\{def\\}ghi}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Unescaped-left-brace-in-regex-is-deprecated%2c-passed-through-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
${^GLOBAL_PHASE} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>The current phase of the perl interpreter.</p><p>Possible values are:</p><p>Also note that there&#39;s no value for UNITCHECK-blocks.  That&#39;s because those are run for each compilation unit individually, and therefore is not a global interpreter phase.</p><p>Not every program has to go through each of the possible phases, but transition from one phase to another can only happen in the order described in the above list.</p><p>An example of all of the phases Perl code can see:</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;compile-time: ${^GLOBAL_PHASE}\\n&quot;</span> <span class="s">}</span></li><li></li><li>    INIT  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;init-time: ${^GLOBAL_PHASE}\\n&quot;</span> <span class="s">}</span></li><li></li><li>    CHECK <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;check-time: ${^GLOBAL_PHASE}\\n&quot;</span> <span class="s">}</span></li><li></li><li>    <span class="s">{</span></li><li><span name="package-Print::Phase"></span>        package <span class="i">Print::Phase</span><span class="sc">;</span></li><li></li><li><span name="new"></span>        sub <span class="m">new</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$class</span><span class="cm">,</span> <span class="i">$time</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span> \\<span class="i">$time</span><span class="cm">,</span> <span class="i">$class</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li><span name="DESTROY"></span>        sub <span class="m">DESTROY</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$self</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$$self: ${^GLOBAL_PHASE}\\n&quot;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li><span name="package-main"></span>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;run-time: ${^GLOBAL_PHASE}\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$runtime</span> = <span class="w">Print::Phase</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="q">&quot;lexical variables are garbage collected before END&quot;</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    END   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;end-time: ${^GLOBAL_PHASE}\\n&quot;</span> <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$destruct</span> = <span class="w">Print::Phase</span><span class="w">-&gt;new</span><span class="s">(</span></li><li>        <span class="q">&quot;package variables are garbage collected after END&quot;</span></li><li>    <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This will print out</p><pre class="verbatim"><ol><li>    <span class="w">compile</span>-<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="co">:</span> <span class="w">START</span></li><li>    <span class="w">check</span>-<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="co">:</span> CHECK</li><li>    <span class="w">init</span>-<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="co">:</span> INIT</li><li>    <span class="w">run</span>-<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="co">:</span> <span class="w">RUN</span></li><li>    <span class="w">lexical</span> <span class="w">variables</span> <span class="w">are</span> <span class="w">garbage</span> <span class="w">collected</span> <span class="w">before</span> END<span class="co">:</span> <span class="w">RUN</span></li><li>    <span class="w">end</span>-<span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="co">:</span> END</li><li><span name="package-variables"></span>    package <span class="i">variables</span> <span class="w">are</span> <span class="w">garbage</span> <span class="w">collected</span> <span class="w">after</span> END<span class="co">:</span> <span class="w">DESTRUCT</span></li></ol></pre><p>This variable was added in Perl 5.14.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eGLOBAL_PHASE%7d
q (function)	A			Perl Functions							<section class="prog__container"><pre>q/STRING/</pre>Singly quote a string.</section>	http://perldoc.perl.org/functions/q.html
Insecure $ENV{%s} while running %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t use system(), exec(), or a piped open in a setuid or setgid script if any of <code class="inline"><span class="i">$ENV</span>{<span class="w">PATH</span>}</code> , <code class="inline"><span class="i">$ENV</span>{<span class="w">IFS</span>}</code> , <code class="inline"><span class="i">$ENV</span>{<span class="w">CDPATH</span>}</code> , <code class="inline"><span class="i">$ENV</span>{<span class="w">ENV</span>}</code> , <code class="inline"><span class="i">$ENV</span>{<span class="w">BASH_ENV</span>}</code>  or <code class="inline"><span class="i">$ENV</span>{<span class="w">TERM</span>}</code>  are derived from data supplied (or potentially supplied) by the user.  The script must set the path to a known value, using trustworthy data.  See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Insecure-%24ENV%7b%25s%7d-while-running-%25s
IO::Compress::RawDeflate (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Compress::RawDeflate - Write RFC 1951 files/buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::RawDeflate</span> <span class="q">qw(rawdeflate $RawDeflateError)</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$status</span> = <span class="w">rawdeflate</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>] </li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;rawdeflate failed: $RawDeflateError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">new</span> <span class="w">IO::Compress::RawDeflate</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>]</li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;rawdeflate failed: $RawDeflateError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$z</span><span class="i">-&gt;print</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;printf</span><span class="s">(</span><span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;write</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;syswrite</span><span class="s">(</span><span class="i">$string</span> [<span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$offset</span>]<span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;tell</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;seek</span><span class="s">(</span><span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;binmode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;fileno</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;opened</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;input_line_number</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;newStream</span><span class="s">(</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$RawDeflateError</span> <span class="sc">;</span></li><li></li><li>    <span class="c"># IO::File mode</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$z</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="i">$z</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$z</span><span class="cm">,</span> <span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$z</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/RawDeflate.html
How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>You need to pass references to these objects. See <span href="http://perldoc.perl.org/perlsub.html#Pass-by-Reference">Pass by Reference in perlsub</span> for this particular question, and <span href="http://perldoc.perl.org/perlref.html">perlref</span> for information on references.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-pass%2freturn-a-%7bFunction%2c-FileHandle%2c-Array%2c-Hash%2c-Method%2c-Regex%7d%3f
Malformed PERLLIB_PREFIX	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to OS/2.  PERLLIB_PREFIX should be of the form</p><pre class="verbatim"><ol><li>    <span class="w">prefix1</span><span class="sc">;</span><span class="w">prefix2</span></li></ol></pre><p>or     prefix1 prefix2</p><p>with nonempty prefix1 and prefix2.  If <code class="inline"><span class="w">prefix1</span></code>  is indeed a prefix of a builtin library search path, prefix2 is substituted.  The error may appear if components are not found, or are too long.  See &quot;PERLLIB_PREFIX&quot; in <span href="http://perldoc.perl.org/perlos2.html">perlos2</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-PERLLIB_PREFIX
Why can't I use "C:\temp\foo" in DOS paths? Why doesn't `C:\temp\foo.exe` work?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Whoops!  You just put a tab and a formfeed into that filename! Remember that within double quoted strings (&quot;like\\this&quot;), the backslash is an escape character. The full list of these is in <span href="http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators">Quote and Quote-like Operators in perlop</span>. Unsurprisingly, you don&#39;t have a file called &quot;c:(tab)emp(formfeed)oo&quot; or &quot;c:(tab)emp(formfeed)oo.exe&quot; on your legacy DOS filesystem.</p><p>Either single-quote your strings, or (preferably) use forward slashes. Since all DOS and Windows versions since something like MS-DOS 2.0 or so have treated <code class="inline">/</code> and <code class="inline">\\</code>  the same in a path, you might as well use the one that doesn&#39;t clash with Perl--or the POSIX shell, ANSI C and C++, awk, Tcl, Java, or Python, just to mention a few. POSIX paths are more portable, too.</p></section>	http://perldoc.perl.org/perlfaq5.html#Why-can't-I-use-%22C%3a%5ctemp%5cfoo%22-in-DOS-paths%3f-Why-doesn't-%60C%3a%5ctemp%5cfoo.exe%60-work%3f
bundle (definition)	A			Perl Glossary							<section class="prog__container"><p>A group of related modules on <b>CPAN</b>. (Also sometimes refers to a group of command-line switches grouped into one <b>switch cluster</b>.)</p></section>	http://perldoc.perl.org/perlglossary.html#bundle
shared memory (definition)	A			Perl Glossary							<section class="prog__container"><p>A piece of <b>memory</b> accessible by two different <b>processes</b> who otherwise would not see each other’s memory.</p></section>	http://perldoc.perl.org/perlglossary.html#shared-memory
Illegal binary digit %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a digit other than 0 or 1 in a binary number.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-binary-digit-%25s
Can't load '%s' for module %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The module you tried to load failed to load a dynamic extension. This may either mean that you upgraded your version of perl to one that is incompatible with your old dynamic extensions (which is known to happen between major versions of perl), or (more likely) that your dynamic extension was built against an older version of the library that is installed on your system.  You may need to rebuild your old dynamic extensions.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-load-'%25s'-for-module-%25s
"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) (only under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;strict&#39;</span></code>  or within <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code> )</p><p>You specified a character that has the given plainer way of writing it, and which is also portable to platforms running with different character sets.</p></section>	http://perldoc.perl.org/perldiag.html#%22%25s%22-is-more-clearly-written-simply-as-%22%25s%22-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
File::Spec::Unix (module)	A			Perl Standard Modules		[[File::Spec]]					<section class="prog__container"><p>File::Spec::Unix - File::Spec for Unix, base for other File::Spec modules</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::Unix</span><span class="sc">;</span> <span class="c"># Done automatically by File::Spec</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Unix.html
$] (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The revision, version, and subversion of the Perl interpreter, represented as a decimal of the form 5.XXXYYY, where XXX is the version / 1e3 and YYY is the subversion / 1e6.  For example, Perl v5.10.1 would be &quot;5.010001&quot;.</p><p>This variable can be used to determine whether the Perl interpreter executing a script is in the right range of versions:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;No PerlIO!\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$]</span> <span class="l_k" href="http://perldoc.perl.org/functions/lt.html">lt</span> <span class="q">&#39;5.008&#39;</span><span class="sc">;</span></li></ol></pre><p>When comparing <code class="inline"><span class="i">$]</span></code> , string comparison operators are <b>highly recommended</b>.  The inherent limitations of binary floating point representation can sometimes lead to incorrect comparisons for some numbers on some architectures.</p><p>See also the documentation of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">VERSION</span></code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">VERSION</span></code>  for a convenient way to fail if the running Perl interpreter is too old.</p><p>See <span href="http://perldoc.perl.org/perlvar.html#%24%5eV">$^V</span> for a representation of the Perl version as a <span href="http://perldoc.perl.org/version.html">version</span> object, which allows more flexible string comparisons.</p><p>The main advantage of <code class="inline"><span class="i">$]</span></code>  over <code class="inline"><span class="i">$^V</span></code>  is that it works the same on any version of Perl.  The disadvantages are that it can&#39;t easily be compared to versions in other formats (e.g. literal v-strings, &quot;v1.2.3&quot; or version objects) and numeric comparisons can occasionally fail; it&#39;s good for string literal version checks and bad for comparing to a variable that hasn&#39;t been sanity-checked.</p><p>Mnemonic: Is this version of perl in the right bracket?</p></section>	http://perldoc.perl.org/perlvar.html#%24%5d
ioctl is not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine apparently doesn&#39;t implement ioctl(), which is pretty strange for a machine that supports C.</p></section>	http://perldoc.perl.org/perldiag.html#ioctl-is-not-implemented
word (definition)	A			Perl Glossary							<section class="prog__container"><p>In normal “computerese”, the piece of data of the size most efficiently handled by your computer, typically 32 bits or so, give or take a few powers of 2. In Perl culture, it more often refers to an alphanumeric <b>identifier</b> (including underscores), or to a string of nonwhitespace <b>characters</b> bounded by whitespace or string boundaries.</p></section>	http://perldoc.perl.org/perlglossary.html#word
GV (definition)	A			Perl Glossary							<section class="prog__container"><p>An internal “glob value” typedef, holding a <b>typeglob</b>. The <code class="inline"><span class="w">GV</span></code>  type is a subclass of <b>SV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#GV
No input file after < on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl handles its own command line redirection, and found a &#39;&lt;&#39; on the command line, but can&#39;t find the name of the file from which to read data for stdin.</p></section>	http://perldoc.perl.org/perldiag.html#No-input-file-after-%3c-on-command-line
Overloaded dereference did not return a reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) An object with an overloaded dereference operator was dereferenced, but the overloaded operation did not return a reference.  See <span href="http://perldoc.perl.org/overload.html">overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Overloaded-dereference-did-not-return-a-reference
Attribute::Handlers (module)	A			Perl Standard Modules							<section class="prog__container"><p>Attribute::Handlers - Simpler definition of attribute handlers</p> <pre class="verbatim"><ol><li><span name="package-MyClass"></span>    package <span class="i">MyClass</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5.006</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Attribute::Handlers</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;redefine&#39;</span><span class="sc">;</span></li><li></li><li></li><li><span name="Good"></span>    sub <span class="m">Good</span> <span class="co">:</span> <span class="q">ATTR(SCALAR)</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$package</span><span class="cm">,</span> <span class="i">$symbol</span><span class="cm">,</span> <span class="i">$referent</span><span class="cm">,</span> <span class="i">$attr</span><span class="cm">,</span> <span class="i">$data</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li></li><li>&#09;<span class="c"># Invoked for any scalar variable with a :Good attribute,</span></li><li>&#09;<span class="c"># provided the variable was declared in MyClass (or</span></li><li>&#09;<span class="c"># a derived class) or typed to MyClass.</span></li><li></li><li>&#09;<span class="c"># Do whatever to $referent here (executed in CHECK phase).</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li><span name="Bad"></span>    sub <span class="m">Bad</span> <span class="co">:</span> <span class="q">ATTR(SCALAR)</span> <span class="s">{</span></li><li>&#09;<span class="c"># Invoked for any scalar variable with a :Bad attribute,</span></li><li>&#09;<span class="c"># provided the variable was declared in MyClass (or</span></li><li>&#09;<span class="c"># a derived class) or typed to MyClass.</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li><span name="Good-1"></span>    sub <span class="m">Good</span> <span class="co">:</span> <span class="q">ATTR(ARRAY)</span> <span class="s">{</span></li><li>&#09;<span class="c"># Invoked for any array variable with a :Good attribute,</span></li><li>&#09;<span class="c"># provided the variable was declared in MyClass (or</span></li><li>&#09;<span class="c"># a derived class) or typed to MyClass.</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li><span name="Good-2"></span>    sub <span class="m">Good</span> <span class="co">:</span> <span class="q">ATTR(HASH)</span> <span class="s">{</span></li><li>&#09;<span class="c"># Invoked for any hash variable with a :Good attribute,</span></li><li>&#09;<span class="c"># provided the variable was declared in MyClass (or</span></li><li>&#09;<span class="c"># a derived class) or typed to MyClass.</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li><span name="Ugly"></span>    sub <span class="m">Ugly</span> <span class="co">:</span> <span class="q">ATTR(CODE)</span> <span class="s">{</span></li><li>&#09;<span class="c"># Invoked for any subroutine declared in MyClass (or a </span></li><li>&#09;<span class="c"># derived class) with an :Ugly attribute.</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li><span name="Omni"></span>    sub <span class="m">Omni</span> <span class="co">:</span> <span class="w">ATTR</span> <span class="s">{</span></li><li>&#09;<span class="c"># Invoked for any scalar, array, hash, or subroutine</span></li><li>&#09;<span class="c"># with an :Omni attribute, provided the variable or</span></li><li>&#09;<span class="c"># subroutine was declared in MyClass (or a derived class)</span></li><li>&#09;<span class="c"># or the variable was typed to MyClass.</span></li><li>&#09;<span class="c"># Use ref($_[2]) to determine what kind of referent it was.</span></li><li>&#09;...</li><li>    <span class="s">}</span></li><li></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Attribute::Handlers</span> <span class="w">autotie</span> <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">Cycle</span> <span class="cm">=&gt;</span> <span class="w">Tie::Cycle</span> <span class="s">}</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$next</span> <span class="co">:</span> <span class="q">Cycle([&#39;A&#39;..&#39;Z&#39;])</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Attribute/Handlers.html
ExtUtils::MM_Cygwin (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_Cygwin - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM_Cygwin</span><span class="sc">;</span> <span class="c"># Done internally by ExtUtils::MakeMaker if needed</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_Cygwin.html
binmode (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>binmode FILEHANDLE, LAYER<br>binmode FILEHANDLE</pre><p>Arranges for FILEHANDLE to be read or written in &quot;binary&quot; or &quot;text&quot; mode on systems where the run-time libraries distinguish between binary and text files.  If FILEHANDLE is an expression, the value is taken as the name of the filehandle.  Returns true on success, otherwise it returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> and sets <code class="inline"><span class="i">$!</span></code>  (errno).</p><p>On some systems (in general, DOS- and Windows-based systems) binmode() is necessary when you&#39;re not working with a text file.  For the sake of portability it is a good idea always to use it when appropriate, and never to use it when it isn&#39;t appropriate.  Also, people can set their I/O to be by default UTF8-encoded Unicode, not bytes.</p><p>In other words: regardless of platform, use binmode() on binary data, like images, for example.</p><p>If LAYER is present it is a single string, but may contain multiple directives.  The directives alter the behaviour of the filehandle. When LAYER is present, using binmode on a text file makes sense.</p><p>If LAYER is omitted or specified as <code class="inline"><span class="j">:</span><span class="w">raw</span></code>  the filehandle is made suitable for passing binary data.  This includes turning off possible CRLF translation and marking it as bytes (as opposed to Unicode characters). Note that, despite what may be implied in <i>&quot;Programming Perl&quot;</i> (the Camel, 3rd edition) or elsewhere, <code class="inline"><span class="j">:</span><span class="w">raw</span></code>  is <i>not</i> simply the inverse of <code class="inline"><span class="j">:</span><span class="w">crlf</span></code> . Other layers that would affect the binary nature of the stream are <i>also</i> disabled.  See <span href="http://perldoc.perl.org/PerlIO.html">PerlIO</span>, <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>, and the discussion about the PERLIO environment variable.</p><p>The <code class="inline"><span class="j">:</span><span class="w">bytes</span></code> , <code class="inline"><span class="j">:</span><span class="w">crlf</span></code> , <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , and any other directives of the form <code class="inline"><span class="j">:</span>...</code> , are called I/O <i>layers</i>.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> pragma can be used to establish default I/O layers.  See <span href="http://perldoc.perl.org/open.html">open</span>.</p><p><i>The LAYER parameter of the binmode() function is described as &quot;DISCIPLINE&quot; in &quot;Programming Perl, 3rd Edition&quot;.  However, since the publishing of this book, by many known as &quot;Camel III&quot;, the consensus of the naming of this functionality has moved from &quot;discipline&quot; to &quot;layer&quot;.  All documentation of this version of Perl therefore refers to &quot;layers&quot; rather than to &quot;disciplines&quot;.  Now back to the regularly scheduled documentation...</i></p><p>To mark FILEHANDLE as UTF-8, use <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  or <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code> . <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  just marks the data as UTF-8 without further checking, while <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code>  checks the data for actually being valid UTF-8.  More details can be found in <span href="http://perldoc.perl.org/PerlIO/encoding.html">PerlIO::encoding</span>.</p><p>In general, binmode() should be called after open() but before any I/O is done on the filehandle.  Calling binmode() normally flushes any pending buffered output data (and perhaps pending input data) on the handle.  An exception to this is the <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  layer that changes the default character encoding of the handle; see <span href="http://perldoc.perl.org/functions/open.html">open</span>. The <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  layer sometimes needs to be called in mid-stream, and it doesn&#39;t flush the stream.  The <code class="inline"><span class="j">:</span><span class="w">encoding</span></code>  also implicitly pushes on top of itself the <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  layer because internally Perl operates on UTF8-encoded Unicode characters.</p><p>The operating system, device drivers, C libraries, and Perl run-time system all conspire to let the programmer treat a single character (<code class="inline">\\<span class="w">n</span></code> ) as the line terminator, irrespective of external representation.  On many operating systems, the native text file representation matches the internal representation, but on some platforms the external representation of <code class="inline">\\<span class="w">n</span></code>  is made up of more than one character.</p><p>All variants of Unix, Mac OS (old and new), and Stream_LF files on VMS use a single character to end each line in the external representation of text (even though that single character is CARRIAGE RETURN on old, pre-Darwin flavors of Mac OS, and is LINE FEED on Unix and most VMS files).  In other systems like OS/2, DOS, and the various flavors of MS-Windows, your program sees a <code class="inline">\\<span class="w">n</span></code>  as a simple <code class="inline">\\<span class="w">cJ</span></code> , but what&#39;s stored in text files are the two characters <code class="inline">\\<span class="w">cM</span>\\<span class="w">cJ</span></code> .  That means that if you don&#39;t use binmode() on these systems, <code class="inline">\\<span class="w">cM</span>\\<span class="w">cJ</span></code>  sequences on disk will be converted to <code class="inline">\\<span class="w">n</span></code>  on input, and any <code class="inline">\\<span class="w">n</span></code>  in your program will be converted back to <code class="inline">\\<span class="w">cM</span>\\<span class="w">cJ</span></code>  on output.  This is what you want for text files, but it can be disastrous for binary files.</p><p>Another consequence of using binmode() (on some systems) is that special end-of-file markers will be seen as part of the data stream. For systems from the Microsoft family this means that, if your binary data contain <code class="inline">\\<span class="w">cZ</span></code> , the I/O subsystem will regard it as the end of the file, unless you use binmode().</p><p>binmode() is important not only for readline() and print() operations, but also when using read(), seek(), sysread(), syswrite() and tell() (see <span href="http://perldoc.perl.org/perlport.html">perlport</span> for more details).  See the <code class="inline"><span class="i">$/</span></code>  and <code class="inline"><span class="i">$\\</span></code>  variables in <span href="http://perldoc.perl.org/perlvar.html">perlvar</span> for how to manually set your input and output line-termination sequences.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#binmode">binmode in perlport</span>.</p></section>	http://perldoc.perl.org/functions/binmode.html
When I tried to run my script, I got this message. What does it mean?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>A complete list of Perl&#39;s error messages and warnings with explanatory text can be found in <span href="http://perldoc.perl.org/perldiag.html">perldiag</span>. You can also use the splain program (distributed with Perl) to explain the error messages:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> <span class="w">program</span> <span class="n">2</span>&gt;<span class="w">diag</span>.<span class="w">out</span></li><li>    <span class="w">splain</span> <span class="s">[</span>-<span class="w">v</span><span class="s">]</span> <span class="s">[</span>-p<span class="s">]</span> <span class="w">diag</span>.<span class="w">out</span></li></ol></pre><p>or change your program to explain the messages for you:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">diagnostics</span><span class="sc">;</span></li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">diagnostics</span> -<span class="w">verbose</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq3.html#When-I-tried-to-run-my-script%2c-I-got-this-message.-What-does-it-mean%3f
Encode::JP::H2Z (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::JP::H2Z -- internally used by Encode::JP::2022_JP*</p> </section>	http://perldoc.perl.org/Encode/JP/H2Z.html
parsing (definition)	A			Perl Glossary							<section class="prog__container"><p>The subtle but sometimes brutal art of attempting to turn your possibly malformed program into a valid <b>syntax tree</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#parsing
I still don't get locking. I just want to increment the number in the file. How can I do this?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>Didn&#39;t anyone ever tell you web-page hit counters were useless? They don&#39;t count number of hits, they&#39;re a waste of time, and they serve only to stroke the writer&#39;s vanity. It&#39;s better to pick a random number; they&#39;re more realistic.</p><p>Anyway, this is what you can do if you can&#39;t help yourself.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">qw(:DEFAULT :flock)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;numfile&quot;</span><span class="cm">,</span> <span class="w">O_RDWR</span>|<span class="w">O_CREAT</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open numfile: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/flock.html">flock</span> <span class="i">$fh</span><span class="cm">,</span> <span class="w">LOCK_EX</span>                        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t flock numfile: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$num</span> = <span class="q">&lt;$fh&gt;</span> || <span class="n">0</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$fh</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span>                            <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t rewind numfile: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/truncate.html">truncate</span> <span class="i">$fh</span><span class="cm">,</span> <span class="n">0</span>                           <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t truncate numfile: $!&quot;</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="i">$num</span>+<span class="n">1</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="s">)</span>                  <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t write numfile: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$fh</span>                                 <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t close numfile: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>Here&#39;s a much better web-page hit counter:</p><pre class="verbatim"><ol><li>    <span class="i">$hits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/int.html">int</span><span class="s">(</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="s">(</span><span class="s">)</span> - <span class="n">850_000_000</span><span class="s">)</span> / <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="n">1_000</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If the count doesn&#39;t impress your friends, then the code might. :-)</p></section>	http://perldoc.perl.org/perlfaq5.html#I-still-don't-get-locking.-I-just-want-to-increment-the-number-in-the-file.-How-can-I-do-this%3f
Can't represent character for Ox%X on this platform	A			Perl Diagnostics							<section class="prog__container"><p>(F) There is a hard limit to how big a character code point can be due to the fundamental properties of UTF-8, especially on EBCDIC platforms.  The given code point exceeds that.  The only work-around is to not use such a large code point.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-represent-character-for-Ox%25X-on-this-platform
'/' must follow a numeric type in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had an unpack template that contained a &#39;/&#39;, but this did not follow some unpack specification producing a numeric value. See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%2f'-must-follow-a-numeric-type-in-unpack
if (function)	A			Perl Functions							<section class="prog__container"><pre>if</pre><p>These flow-control keywords are documented in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/if.html
How do I validate input?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>There are many ways to ensure that values are what you expect or want to accept. Besides the specific examples that we cover in the perlfaq, you can also look at the modules with &quot;Assert&quot; and &quot;Validate&quot; in their names, along with other modules such as <span href="http://search.cpan.org/perldoc/Regexp::Common">Regexp::Common</span>.</p><p>Some modules have validation for particular types of input, such as <span href="http://search.cpan.org/perldoc/Business::ISBN">Business::ISBN</span>, <span href="http://search.cpan.org/perldoc/Business::CreditCard">Business::CreditCard</span>, <span href="http://search.cpan.org/perldoc/Email::Valid">Email::Valid</span>, and <span href="http://search.cpan.org/perldoc/Data::Validate::IP">Data::Validate::IP</span>.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-validate-input%3f
Ambiguous use of %s resolved as %s	A			Perl Diagnostics							<section class="prog__container"><p>(S ambiguous) You said something that may not be interpreted the way you thought.  Normally it&#39;s pretty easy to disambiguate it by supplying a missing quote, operator, parenthesis pair or declaration.</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-use-of-%25s-resolved-as-%25s
utime (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>utime LIST</pre><p>Changes the access and modification times on each file of a list of files.  The first two elements of the list must be the NUMERIC access and modification times, in that order.  Returns the number of files successfully changed.  The inode change time of each file is set to the current time.  For example, this code has the same effect as the Unix touch(1) command when the files <i>already exist</i> and belong to the user running the program:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl</span></li><li>    <span class="i">$atime</span> = <span class="i">$mtime</span> = <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/utime.html">utime</span> <span class="i">$atime</span><span class="cm">,</span> <span class="i">$mtime</span><span class="cm">,</span> <span class="i">@ARGV</span><span class="sc">;</span></li></ol></pre><p>Since Perl 5.8.0, if the first two elements of the list are <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>,  the utime(2) syscall from your C library is called with a null second argument.  On most systems, this will set the file&#39;s access and modification times to the current time (i.e., equivalent to the example above) and will work even on files you don&#39;t own provided you have write permission:</p><pre class="verbatim"><ol><li>    for <span class="i">$file</span> <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/utime.html">utime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span> <span class="i">$file</span><span class="s">)</span> </li><li>&#09;    || <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;couldn&#39;t touch $file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Under NFS this will use the time of the NFS server, not the time of the local machine.  If there is a time synchronization problem, the NFS server and local machine will have different times.  The Unix touch(1) command will in fact normally use this form instead of the one shown in the first example.</p><p>Passing only one of the first two elements as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> is equivalent to passing a 0 and will not have the effect  described when both are <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  This also triggers an uninitialized warning.</p><p>On systems that support futimes(2), you may pass filehandles among the files.  On systems that don&#39;t support futimes(2), passing filehandles raises an exception.  Filehandles must be passed as globs or glob references to be recognized; barewords are considered filenames.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#utime">utime in perlport</span>.</p></section>	http://perldoc.perl.org/functions/utime.html
log (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>log EXPR<br>log</pre><p>Returns the natural logarithm (base <i>e</i>) of EXPR.  If EXPR is omitted, returns the log of <code class="inline"><span class="i">$_</span></code> .  To get the log of another base, use basic algebra: The base-N log of a number is equal to the natural log of that number divided by the natural log of N.  For example:</p><pre class="verbatim"><ol><li><span name="log10"></span>    sub <span class="m">log10</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$n</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/log.html">log</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span>/<span class="l_k" href="http://perldoc.perl.org/functions/log.html">log</span><span class="s">(</span><span class="n">10</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>See also <span href="http://perldoc.perl.org/functions/exp.html">exp</span> for the inverse operation.</p></section>	http://perldoc.perl.org/functions/log.html
Binary "eq" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;eq&quot; returns true if the left argument is stringwise equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
How to contribute to the perlfaq	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>Review <span href="https://github.com/perl-doc-cats/perlfaq/wiki">https://github.com/perl-doc-cats/perlfaq/wiki</span>.  If you don&#39;t find your suggestion create an issue or pull request against <span href="https://github.com/perl-doc-cats/perlfaq">https://github.com/perl-doc-cats/perlfaq</span>.</p><p>Once approved, changes are merged into <span href="https://github.com/tpf/perlfaq">https://github.com/tpf/perlfaq</span>, the repository which drives <span href="http://learn.perl.org/faq/">http://learn.perl.org/faq/</span>, and they are distributed with the next Perl 5 release.</p></section>	http://perldoc.perl.org/perlfaq.html#How-to-contribute-to-the-perlfaq
perl: warning: strange setting in '$ENV{PERL_PERTURB_KEYS}': '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(S) Perl was run with the environment variable PERL_PERTURB_KEYS defined but containing an unexpected value.  The legal values of this setting are as follows.</p><pre class="verbatim"><ol><li>  <span class="w">Numeric</span> | <span class="w">String</span>        | <span class="w">Result</span></li><li>  --------+---------------+-----------------------------------------</li><li>  <span class="n">0</span>       | <span class="w">NO</span>            | <span class="w">Disables</span> <span class="w">key</span> <span class="w">traversal</span> <span class="w">randomization</span></li><li>  <span class="n">1</span>       | <span class="w">RANDOM</span>        | <span class="w">Enables</span> <span class="w">full</span> <span class="w">key</span> <span class="w">traversal</span> <span class="w">randomization</span></li><li>  <span class="n">2</span>       | <span class="w">DETERMINISTIC</span> | <span class="w">Enables</span> <span class="w">repeatable</span> <span class="w">key</span> <span class="w">traversal</span></li><li>          |               | <span class="w">randomization</span></li></ol></pre><p>Both numeric and string values are accepted, but note that string values are case sensitive.  The default for this setting is &quot;RANDOM&quot; or 1.</p></section>	http://perldoc.perl.org/perldiag.html#perl%3a-warning%3a-strange-setting-in-'%24ENV%7bPERL_PERTURB_KEYS%7d'%3a-'%25s'
Sort subroutine didn't return single value	A			Perl Diagnostics							<section class="prog__container"><p>(F) A sort comparison subroutine written in XS must return exactly one item.  See <span href="http://perldoc.perl.org/functions/sort.html">sort</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Sort-subroutine-didn't-return-single-value
Document contains no data	A			Perl Diagnostics							<section class="prog__container"><p>See Server error.</p></section>	http://perldoc.perl.org/perldiag.html#Document-contains-no-data
void context (definition)	A			Perl Glossary							<section class="prog__container"><p>A form of <b>scalar context</b> in which an <b>expression</b> is not expected to return any <b>value</b> at all and is evaluated for its <b>side effects</b> alone.</p></section>	http://perldoc.perl.org/perlglossary.html#void-context
Math::BigInt (module)	A			Perl Standard Modules		[[Math::BigFloat]]\n[[Math::BigRat]]\n[[Math::BigInt::FastCalc]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::Pari]]\n[[bignum]]\n[[bigint]]\n[[bigrat]]					<section class="prog__container"><p>Math::BigInt - Arbitrary size integer/float math package</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::BigInt</span><span class="sc">;</span></li><li></li><li>  <span class="c"># or make it faster with huge numbers: install (optional)</span></li><li>  <span class="c"># Math::BigInt::GMP and always use (it will fall back to</span></li><li>  <span class="c"># pure Perl if the GMP library is not installed):</span></li><li>  <span class="c"># (See also the L&lt;MATH LIBRARY&gt; section!)</span></li><li></li><li>  <span class="c"># will warn if Math::BigInt::GMP cannot be found</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::BigInt</span> <span class="w">lib</span> <span class="cm">=&gt;</span> <span class="q">&#39;GMP&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="c"># to suppress the warning use this:</span></li><li>  <span class="c"># use Math::BigInt try =&gt; &#39;GMP&#39;;</span></li><li></li><li>  <span class="c"># dies if GMP cannot be loaded:</span></li><li>  <span class="c"># use Math::BigInt only =&gt; &#39;GMP&#39;;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$str</span> = <span class="q">&#39;1234567890&#39;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@values</span> = <span class="s">(</span><span class="n">64</span><span class="cm">,</span><span class="n">74</span><span class="cm">,</span><span class="n">18</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$n</span> = <span class="n">1</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sign</span> = <span class="q">&#39;-&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="c"># Number creation&#09;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$str</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># defaults to 0</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$y</span> = <span class="i">$x</span><span class="i">-&gt;copy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;&#09;<span class="c"># make a true copy</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$nan</span>  = <span class="w">Math::BigInt</span><span class="w">-&gt;bnan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> &#09;<span class="c"># create a NotANumber</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$zero</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;bzero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +0</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$inf</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;binf</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +inf</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$inf</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;binf</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a -inf</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$one</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;bone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a +1</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mone</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;bone</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># create a -1</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pi</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;bpi</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># returns &#39;3&#39;</span></li><li>&#09;&#09;&#09;&#09;&#09;<span class="c"># see Math::BigFloat::bpi()</span></li><li></li><li>  <span class="i">$h</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;0x123&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># from hexadecimal</span></li><li>  <span class="i">$b</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;0b101&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># from binary</span></li><li>  <span class="i">$o</span> = <span class="w">Math::BigInt</span><span class="w">-&gt;from_oct</span><span class="s">(</span><span class="q">&#39;0101&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># from octal</span></li><li></li><li>  <span class="c"># Testing (don&#39;t modify their arguments)</span></li><li>  <span class="c"># (return true if the condition is met, otherwise false)</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;is_zero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># if $x is +0</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_nan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x is NaN</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_one</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x is +1</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_one</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># if $x is -1</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_odd</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x is odd</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_even</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># if $x is even</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_pos</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x &gt; 0</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_neg</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x &lt; 0</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_inf</span><span class="s">(</span><span class="i">$sign</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># if $x is +inf, or -inf (sign is default &#39;+&#39;)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;is_int</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># if $x is an integer (not a float)</span></li><li></li><li>  <span class="c"># comparing and digit/sign extraction</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bcmp</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># compare numbers (undef,&lt;0,=0,&gt;0)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bacmp</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># compare absolutely (undef,&lt;0,=0,&gt;0)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;sign</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># return the sign, either +,- or NaN</span></li><li>  <span class="i">$x</span><span class="i">-&gt;digit</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># return the nth digit, counting from right</span></li><li>  <span class="i">$x</span><span class="i">-&gt;digit</span><span class="s">(</span>-<span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># return the nth digit, counting from left</span></li><li></li><li>  <span class="c"># The following all modify their first argument. If you want to pre-</span></li><li>  <span class="c"># serve $x, use $z = $x-&gt;copy()-&gt;bXXX($y); See under L&lt;CAVEATS&gt; for</span></li><li>  <span class="c"># why this is necessary when mixing $a = $b assignments with non-over-</span></li><li>  <span class="c"># loaded math.</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bzero</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># set $x to 0</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bnan</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># set $x to NaN</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># set $x to +1</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bone</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># set $x to -1</span></li><li>  <span class="i">$x</span><span class="i">-&gt;binf</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># set $x to inf</span></li><li>  <span class="i">$x</span><span class="i">-&gt;binf</span><span class="s">(</span><span class="q">&#39;-&#39;</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># set $x to -inf</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bneg</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># negation</span></li><li>  <span class="i">$x</span><span class="i">-&gt;babs</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># absolute value</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bsgn</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># sign function (-1, 0, 1, or NaN)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bnorm</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># normalize (no-op in BigInt)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bnot</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># two&#39;s complement (bit wise not)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;binc</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># increment $x by 1</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bdec</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># decrement $x by 1</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;badd</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># addition (add $y to $x)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bsub</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># subtraction (subtract $y from $x)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bmul</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># multiplication (multiply $x by $y)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bdiv</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># divide, set $x to quotient</span></li><li>&#09;&#09;&#09;<span class="c"># return (quo,rem) or quo if scalar</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bmuladd</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span><span class="i">$z</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># $x = $x * $y + $z</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bmod</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># modulus (x % y)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bmodpow</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span> <span class="c"># modular exponentiation (($x ** $y) % $mod)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bmodinv</span><span class="s">(</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># modular multiplicative inverse</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bpow</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># power of arguments (x ** y)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;blsft</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># left shift in base 2</span></li><li>  <span class="i">$x</span><span class="i">-&gt;brsft</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># right shift in base 2</span></li><li>&#09;&#09;&#09;<span class="c"># returns (quo,rem) or quo if in sca-</span></li><li>&#09;&#09;&#09;<span class="c"># lar context</span></li><li>  <span class="i">$x</span><span class="i">-&gt;blsft</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># left shift by $y places in base $n</span></li><li>  <span class="i">$x</span><span class="i">-&gt;brsft</span><span class="s">(</span><span class="i">$y</span><span class="cm">,</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># right shift by $y places in base $n</span></li><li>&#09;&#09;&#09;<span class="c"># returns (quo,rem) or quo if in sca-</span></li><li>&#09;&#09;&#09;<span class="c"># lar context</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;band</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># bitwise and</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bior</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># bitwise inclusive or</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bxor</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># bitwise exclusive or</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bnot</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># bitwise not (two&#39;s complement)</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bsqrt</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># calculate square-root</span></li><li>  <span class="i">$x</span><span class="i">-&gt;broot</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># $y&#39;th root of $x (e.g. $y == 3 =&gt; cubic root)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bfac</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># factorial of $x (1*2*3*4*..$x)</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bnok</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># x over y (binomial coefficient n over k)</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;blog</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># logarithm of $x to base e (Euler&#39;s number)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;blog</span><span class="s">(</span><span class="i">$base</span><span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># logarithm of $x to base $base (f.i. 2)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bexp</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;<span class="c"># calculate e ** $x where e is Euler&#39;s number</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;round</span><span class="s">(</span><span class="i">$A</span><span class="cm">,</span><span class="i">$P</span><span class="cm">,</span><span class="i">$mode</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># round to accuracy or precision using</span></li><li>&#09;&#09;&#09;   <span class="c"># mode $mode</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bround</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;   <span class="c"># accuracy: preserve $n digits</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bfround</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09;   <span class="c"># $n &gt; 0: round $nth digits,</span></li><li>&#09;&#09;&#09;   <span class="c"># $n &lt; 0: round to the $nth digit after the</span></li><li>&#09;&#09;&#09;   <span class="c"># dot, no-op for BigInts</span></li><li></li><li>  <span class="c"># The following do not modify their arguments in BigInt (are no-ops),</span></li><li>  <span class="c"># but do so in BigFloat:</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;bfloor</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># round towards minus infinity</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bceil</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>             <span class="c"># round towards plus infinity</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bint</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>              <span class="c"># round towards zero</span></li><li></li><li>  <span class="c"># The following do not modify their arguments:</span></li><li></li><li>  <span class="c"># greatest common divisor (no OO style)</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$gcd</span> = <span class="i">Math::BigInt::bgcd</span><span class="s">(</span><span class="i">@values</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="c"># lowest common multiple (no OO style)</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lcm</span> = <span class="i">Math::BigInt::blcm</span><span class="s">(</span><span class="i">@values</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;   <span class="c"># return number of digits in number</span></li><li>  <span class="s">(</span><span class="i">$xl</span><span class="cm">,</span><span class="i">$f</span><span class="s">)</span> = <span class="i">$x</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c"># length of number and length of fraction</span></li><li>&#09;&#09;&#09;   <span class="c"># part, latter is always 0 digits long</span></li><li>&#09;&#09;&#09;   <span class="c"># for BigInts</span></li><li></li><li>  <span class="i">$x</span><span class="i">-&gt;exponent</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;  <span class="c"># return exponent as BigInt</span></li><li>  <span class="i">$x</span><span class="i">-&gt;mantissa</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;  <span class="c"># return (signed) mantissa as BigInt</span></li><li>  <span class="i">$x</span><span class="i">-&gt;parts</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;  <span class="c"># return (mantissa,exponent) as BigInt</span></li><li>  <span class="i">$x</span><span class="i">-&gt;copy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;  <span class="c"># make a true copy of $x (unlike $y = $x;)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;as_int</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;  <span class="c"># return as BigInt (in BigInt: same as copy())</span></li><li>  <span class="i">$x</span><span class="i">-&gt;numify</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;&#09;  <span class="c"># return as scalar (might overflow!)</span></li><li></li><li>  <span class="c"># conversion to string (do not modify their argument)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bstr</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># normalized string (e.g. &#39;3&#39;)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;bsstr</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># norm. string in scientific notation (e.g. &#39;3E0&#39;)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;as_hex</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># as signed hexadecimal string with prefixed 0x</span></li><li>  <span class="i">$x</span><span class="i">-&gt;as_bin</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># as signed binary string with prefixed 0b</span></li><li>  <span class="i">$x</span><span class="i">-&gt;as_oct</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09;      <span class="c"># as signed octal string with prefixed 0</span></li><li></li><li></li><li>  <span class="c"># precision and accuracy (see section about rounding for more)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;precision</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return P of $x (or global, if P of $x undef)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;precision</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># set P of $x to $n</span></li><li>  <span class="i">$x</span><span class="i">-&gt;accuracy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># return A of $x (or global, if A of $x undef)</span></li><li>  <span class="i">$x</span><span class="i">-&gt;accuracy</span><span class="s">(</span><span class="i">$n</span><span class="s">)</span><span class="sc">;</span>&#09; <span class="c"># set A $x to $n</span></li><li></li><li>  <span class="c"># Global methods</span></li><li>  <span class="w">Math::BigInt</span><span class="w">-&gt;precision</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># get/set global P for all BigInt objects</span></li><li>  <span class="w">Math::BigInt</span><span class="w">-&gt;accuracy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># get/set global A for all BigInt objects</span></li><li>  <span class="w">Math::BigInt</span><span class="w">-&gt;round_mode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># get/set global round mode, one of</span></li><li>&#09;&#09;&#09;       <span class="c"># &#39;even&#39;, &#39;odd&#39;, &#39;+inf&#39;, &#39;-inf&#39;, &#39;zero&#39;,</span></li><li>&#09;&#09;&#09;       <span class="c"># &#39;trunc&#39; or &#39;common&#39;</span></li><li>  <span class="w">Math::BigInt</span><span class="w">-&gt;config</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># return hash containing configuration</span></li></ol></pre></section>	http://perldoc.perl.org/Math/BigInt.html
What about binary data, like images?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Well, apart from a bare <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$fh</span></code> , you shouldn&#39;t treat them specially. (The binmode is needed because otherwise Perl may convert line endings on Win32 systems.)</p><p>Be careful, though, to never combine text strings with binary strings. If you need text in a binary stream, encode your text strings first using the appropriate encoding, then join them with binary strings. See also: &quot;What if I don&#39;t encode?&quot;.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-about-binary-data%2c-like-images%3f
Encode::TW (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::TW - Taiwan-based Chinese Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$big5</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;big5&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span> <span class="c"># loads Encode::TW implicitly</span></li><li>    <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;big5&quot;</span><span class="cm">,</span> <span class="i">$big5</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/TW.html
-h	A			Perl Command-Line Switches							<section class="prog__container"><p>prints a summary of the options.</p></section>	http://perldoc.perl.org/perlrun.html#*-h*
B::Xref (module)	A			Perl Standard Modules							<section class="prog__container"><p>B::Xref - Generates cross reference reports for Perl programs</p> <p>perl -MO=Xref[,OPTIONS] foo.pl</p></section>	http://perldoc.perl.org/B/Xref.html
cracker (definition)	A			Perl Glossary							<section class="prog__container"><p>Someone who breaks security on computer systems. A cracker may be a true <b>hacker</b> or only a <b>script kiddie</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#cracker
How do I strip blank space from the beginning/end of a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>A substitution can do this for you. For a single line, you want to replace all the leading or trailing whitespace with nothing. You can do that with a pair of substitutions:</p><pre class="verbatim"><ol><li>    <span class="q">s/^\\s+//</span><span class="sc">;</span></li><li>    <span class="q">s/\\s+$//</span><span class="sc">;</span></li></ol></pre><p>You can also write that as a single substitution, although it turns out the combined statement is slower than the separate ones. That might not matter to you, though:</p><pre class="verbatim"><ol><li>    <span class="q">s/^\\s+|\\s+$//g</span><span class="sc">;</span></li></ol></pre><p>In this regular expression, the alternation matches either at the beginning or the end of the string since the anchors have a lower precedence than the alternation. With the <code class="inline">/g</code> flag, the substitution makes all possible matches, so it gets both. Remember, the trailing newline matches the <code class="inline">\\s+</code>, and  the <code class="inline"><span class="i">$</span></code>  anchor can match to the absolute end of the string, so the newline disappears too. Just add the newline to the output, which has the added benefit of preserving &quot;blank&quot; (consisting entirely of whitespace) lines which the <code class="inline">^\\s+</code> would remove all by itself:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">s/^\\s+|\\s+$//g</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$_\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>For a multi-line string, you can apply the regular expression to each logical line in the string by adding the <code class="inline">/m</code> flag (for &quot;multi-line&quot;). With the <code class="inline">/m</code> flag, the <code class="inline"><span class="i">$</span></code>  matches <i>before</i> an embedded newline, so it doesn&#39;t remove it. This pattern still removes the newline at the end of the string:</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> =~ <span class="q">s/^\\s+|\\s+$//gm</span><span class="sc">;</span></li></ol></pre><p>Remember that lines consisting entirely of whitespace will disappear, since the first part of the alternation can match the entire string and replace it with nothing. If you need to keep embedded blank lines, you have to do a little more work. Instead of matching any whitespace (since that includes a newline), just match the other whitespace:</p><pre class="verbatim"><ol><li>    <span class="i">$string</span> =~ <span class="q">s/^[\\t\\f ]+|[\\t\\f ]+$//mg</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-strip-blank-space-from-the-beginning%2fend-of-a-string%3f
tr (function)	A			Perl Functions							<section class="prog__container"><pre>tr///</pre><p>The transliteration operator.  Same as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/y.html">y///</span></code>.  See <span href="http://perldoc.perl.org/perlop.html#Quote-Like-Operators">Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/tr.html
capturing (definition)	A			Perl Glossary							<section class="prog__container"><p>The use of parentheses around a <b>subpattern</b> in a <b>regular expression</b> to store the matched <b>substring</b> as a <b>backreference</b>. (Captured strings are also returned as a list in <b>list context</b>.) See Camel chapter 5, “Pattern Matching”.</p></section>	http://perldoc.perl.org/perlglossary.html#capturing
Operation "%s": no method found, %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) An attempt was made to perform an overloaded operation for which no handler was defined.  While some handlers can be autogenerated in terms of other handlers, there is no default handler for any operation, unless the <code class="inline"><span class="w">fallback</span></code>  overloading key is specified to be true.  See <span href="http://perldoc.perl.org/overload.html">overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Operation-%22%25s%22%3a-no-method-found%2c-%25s
possessive (definition)	A			Perl Glossary							<section class="prog__container"><p>Said of quantifiers and groups in patterns that refuse to give up anything once they’ve gotten their mitts on it. Catchier and easier to say than the even more formal <i>nonbacktrackable</i>.</p></section>	http://perldoc.perl.org/perlglossary.html#possessive
%SIG (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The hash <code class="inline"><span class="i">%SIG</span></code>  contains signal handlers for signals.  For example:</p><pre class="verbatim"><ol><li><span name="handler"></span>    sub <span class="m">handler</span> <span class="s">{</span>   <span class="c"># 1st argument is signal name</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$sig</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Caught a SIG$sig--shutting down\\n&quot;</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span><span class="s">(</span><span class="w">LOG</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="s">}</span></li><li></li><li>    <span class="i">$SIG</span>{<span class="q">&#39;INT&#39;</span>}  = \\<span class="i">&amp;handler</span><span class="sc">;</span></li><li>    <span class="i">$SIG</span>{<span class="q">&#39;QUIT&#39;</span>} = \\<span class="i">&amp;handler</span><span class="sc">;</span></li><li>    ...</li><li>    <span class="i">$SIG</span>{<span class="q">&#39;INT&#39;</span>}  = <span class="q">&#39;DEFAULT&#39;</span><span class="sc">;</span>   <span class="c"># restore default action</span></li><li>    <span class="i">$SIG</span>{<span class="q">&#39;QUIT&#39;</span>} = <span class="q">&#39;IGNORE&#39;</span><span class="sc">;</span>    <span class="c"># ignore SIGQUIT</span></li></ol></pre><p>Using a value of <code class="inline"><span class="q">&#39;IGNORE&#39;</span></code>  usually has the effect of ignoring the signal, except for the <code class="inline"><span class="w">CHLD</span></code>  signal.  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for more about this special case.</p><p>Here are some other examples:</p><pre class="verbatim"><ol><li>    <span class="i">$SIG</span>{<span class="q">&quot;PIPE&quot;</span>} = <span class="q">&quot;Plumber&quot;</span><span class="sc">;</span>   <span class="c"># assumes main::Plumber (not</span></li><li>&#09;&#09;&#09;&#09;<span class="c"># recommended)</span></li><li>    <span class="i">$SIG</span>{<span class="q">&quot;PIPE&quot;</span>} = \\<span class="i">&amp;Plumber</span><span class="sc">;</span>   <span class="c"># just fine; assume current</span></li><li>&#09;&#09;&#09;&#09;<span class="c"># Plumber</span></li><li>    <span class="i">$SIG</span>{<span class="q">&quot;PIPE&quot;</span>} = <span class="i">*Plumber</span><span class="sc">;</span>    <span class="c"># somewhat esoteric</span></li><li>    <span class="i">$SIG</span>{<span class="q">&quot;PIPE&quot;</span>} = <span class="i">Plumber</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># oops, what did Plumber()</span></li><li>&#09;&#09;&#09;&#09;<span class="c"># return??</span></li></ol></pre><p>Be sure not to use a bareword as the name of a signal handler, lest you inadvertently call it.</p><p>If your system has the <code class="inline"><span class="i">sigaction</span><span class="s">(</span><span class="s">)</span></code>  function then signal handlers are installed using it.  This means you get reliable signal handling.</p><p>The default delivery policy of signals changed in Perl v5.8.0 from immediate (also known as &quot;unsafe&quot;) to deferred, also known as &quot;safe signals&quot;.  See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for more information.</p><p>Certain internal hooks can be also set using the <code class="inline"><span class="i">%SIG</span></code>  hash.  The routine indicated by <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  is called when a warning message is about to be printed.  The warning message is passed as the first argument.  The presence of a <code class="inline"><span class="w">__WARN__</span></code>  hook causes the ordinary printing of warnings to <code class="inline"><span class="w">STDERR</span></code>  to be suppressed.  You can use this to save warnings in a variable, or turn warnings into fatal errors, like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="w">__WARN__</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$_</span>[<span class="n">0</span>] <span class="s">}</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="i">$proggie</span><span class="sc">;</span></li></ol></pre><p>As the <code class="inline"><span class="q">&#39;IGNORE&#39;</span></code>  hook is not supported by <code class="inline"><span class="w">__WARN__</span></code> , you can disable warnings using the empty subroutine:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="w">__WARN__</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span><span class="sc">;</span></li></ol></pre><p>The routine indicated by <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  is called when a fatal exception is about to be thrown.  The error message is passed as the first argument.  When a <code class="inline"><span class="w">__DIE__</span></code>  hook routine returns, the exception processing continues as it would have in the absence of the hook, unless the hook routine itself exits via a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="i">&amp;sub</span></code> , a loop exit, or a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die()</span></code>.  The <code class="inline"><span class="w">__DIE__</span></code>  handler is explicitly disabled during the call, so that you can die from a <code class="inline"><span class="w">__DIE__</span></code>  handler.  Similarly for <code class="inline"><span class="w">__WARN__</span></code> .</p><p>Due to an implementation glitch, the <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  hook is called even inside an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code>.  Do not use this to rewrite a pending exception in <code class="inline"><span class="i">$@</span></code> , or as a bizarre substitute for overriding <code class="inline"><span class="i">CORE::GLOBAL::die</span><span class="s">(</span><span class="s">)</span></code> .  This strange action at a distance may be fixed in a future release so that <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  is only called if your program is about to exit, as was the original intent.  Any other use is deprecated.</p><p><code class="inline"><span class="w">__DIE__</span></code> /<code class="inline"><span class="w">__WARN__</span></code>  handlers are very special in one respect: they may be called to report (probable) errors found by the parser.  In such a case the parser may be in inconsistent state, so any attempt to evaluate Perl code from such a handler will probably result in a segfault.  This means that warnings or errors that result from parsing Perl should be used with extreme caution, like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Carp</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$^S</span><span class="sc">;</span></li><li>    <span class="i">Carp::confess</span><span class="s">(</span><span class="q">&quot;Something wrong&quot;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">&amp;Carp::confess</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Something wrong, but could not load Carp to give &quot;</span></li><li>      . <span class="q">&quot;backtrace...\\n\\t&quot;</span></li><li>      . <span class="q">&quot;To see backtrace try starting Perl with -MCarp switch&quot;</span><span class="sc">;</span></li></ol></pre><p>Here the first line will load <code class="inline"><span class="w">Carp</span></code>  <i>unless</i> it is the parser who called the handler.  The second line will print backtrace and die if <code class="inline"><span class="w">Carp</span></code>  was available.  The third line will be executed only if <code class="inline"><span class="w">Carp</span></code>  was not available.</p><p>Having to even think about the <code class="inline"><span class="i">$^S</span></code>  variable in your exception handlers is simply wrong.  <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  as currently implemented invites grievous and difficult to track down errors.  Avoid it and use an <code class="inline">END<span class="s">{</span><span class="s">}</span></code>  or CORE::GLOBAL::die override instead.</p><p>See <span href="http://perldoc.perl.org/functions/die.html">die</span>, <span href="http://perldoc.perl.org/functions/warn.html">warn</span>, <span href="http://perldoc.perl.org/functions/eval.html">eval</span>, and <span href="http://perldoc.perl.org/warnings.html">warnings</span> for additional information.</p></section>	http://perldoc.perl.org/perlvar.html#%25SIG
scalar (definition)	A			Perl Glossary							<section class="prog__container"><p>A simple, singular value; a number, <b>string</b>, or <b>reference</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#scalar
Negative length	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to do a read/write/send/recv operation with a buffer length that is less than 0.  This is difficult to imagine.</p></section>	http://perldoc.perl.org/perldiag.html#Negative-length
corrupted regexp program	A			Perl Diagnostics							<section class="prog__container"><p>(P) The regular expression engine got passed a regexp program without a valid magic number.</p></section>	http://perldoc.perl.org/perldiag.html#corrupted-regexp-program
dump() better written as CORE::dump()	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You used the obsolescent <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump()</span></code> built-in function, without fully qualifying it as <code class="inline"><span class="i">CORE::dump</span><span class="s">(</span><span class="s">)</span></code> .  Maybe it&#39;s a typo.  See <span href="http://perldoc.perl.org/functions/dump.html">dump</span>.</p></section>	http://perldoc.perl.org/perldiag.html#dump()-better-written-as-CORE%3a%3adump()
reset (function)	A			Perl Functions\nPerl Miscellaneous functions							<section class="prog__container"><pre>reset EXPR<br>reset</pre><p>Generally used in a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block at the end of a loop to clear variables and reset <code class="inline"><span class="q">??</span></code>  searches so that they work again.  The expression is interpreted as a list of single characters (hyphens allowed for ranges).  All variables and arrays beginning with one of those letters are reset to their pristine state.  If the expression is omitted, one-match searches (<code class="inline"><span class="q">?pattern?</span></code> ) are reset to match again.   Only resets variables or searches in the current package.  Always returns 1.  Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/reset.html">reset</span> <span class="q">&#39;X&#39;</span><span class="sc">;</span>      <span class="c"># reset all X variables</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/reset.html">reset</span> <span class="q">&#39;a-z&#39;</span><span class="sc">;</span>    <span class="c"># reset lower case variables</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/reset.html">reset</span><span class="sc">;</span>          <span class="c"># just reset ?one-time? searches</span></li></ol></pre><p>Resetting <code class="inline"><span class="q">&quot;A-Z&quot;</span></code>  is not recommended because you&#39;ll wipe out your <code class="inline"><span class="i">@ARGV</span></code>  and <code class="inline"><span class="i">@INC</span></code>  arrays and your <code class="inline"><span class="i">%ENV</span></code>  hash.  Resets only package variables; lexical variables are unaffected, but they clean themselves up on scope exit anyway, so you&#39;ll probably want to use them instead. See <span href="http://perldoc.perl.org/functions/my.html">my</span>.</p></section>	http://perldoc.perl.org/functions/reset.html
constructor (definition)	A			Perl Glossary							<section class="prog__container"><p>Any <b>class method</b>, <b>instance</b>, or <b>subroutine</b> that composes, initializes, blesses, and returns an <b>object</b>. Sometimes we use the term loosely to mean a <b>composer</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#constructor
Can't fork, trying again in 5 seconds	A			Perl Diagnostics							<section class="prog__container"><p>(W pipe) A fork in a piped open failed with EAGAIN and will be retried after five seconds.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-fork%2c-trying-again-in-5-seconds
Field too wide in 'u' format in pack	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) Each line in an uuencoded string starts with a length indicator which can&#39;t encode values above 63.  So there is no point in asking for a line length bigger than that.  Perl will behave as if you specified <code class="inline"><span class="w">u63</span></code>  as the format.</p></section>	http://perldoc.perl.org/perldiag.html#Field-too-wide-in-'u'-format-in-pack
public domain (definition)	A			Perl Glossary							<section class="prog__container"><p>Something not owned by anybody. Perl is copyrighted and is thus <i>not</i> in the public domain—it’s just <b>freely available</b> and <b>freely redistributable</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#public-domain
How do I find matching/nesting anything?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>To find something between two single characters, a pattern like <code class="inline"><span class="q">/x([^x]*)x/</span></code>  will get the intervening bits in $1. For multiple ones, then something more like <code class="inline"><span class="q">/alpha(.*?)omega/</span></code>  would be needed. For nested patterns and/or balanced expressions, see the so-called <span href="http://perldoc.perl.org/perlre.html#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)">(?PARNO)</span> construct (available since perl 5.10). The CPAN module <span href="http://search.cpan.org/perldoc/Regexp::Common">Regexp::Common</span> can help to build such regular expressions (see in particular <span href="http://search.cpan.org/perldoc/Regexp::Common::balanced">Regexp::Common::balanced</span> and <span href="http://search.cpan.org/perldoc/Regexp::Common::delimited">Regexp::Common::delimited</span>).</p><p>More complex cases will require to write a parser, probably using a parsing module from CPAN, like <span href="http://search.cpan.org/perldoc/Regexp::Grammars">Regexp::Grammars</span>, <span href="http://search.cpan.org/perldoc/Parse::RecDescent">Parse::RecDescent</span>, <span href="http://search.cpan.org/perldoc/Parse::Yapp">Parse::Yapp</span>, <span href="http://perldoc.perl.org/Text/Balanced.html">Text::Balanced</span>, or <span href="http://search.cpan.org/perldoc/Marpa::R2">Marpa::R2</span>.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-matching%2fnesting-anything%3f
delete argument is key/value hash slice, use hash slice	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used key/value hash slice syntax (<code class="inline"><span class="i">%hash</span>{...}</code> ) as the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span></code>.  You probably meant <code class="inline"><span class="i">@hash</span>{...}</code>  with an @ symbol instead.</p></section>	http://perldoc.perl.org/perldiag.html#delete-argument-is-key%2fvalue-hash-slice%2c-use-hash-slice
Bad arg length for %s, is %u, should be %d	A			Perl Diagnostics							<section class="prog__container"><p>(F) You passed a buffer of the wrong size to one of msgctl(), semctl() or shmctl().  In C parlance, the correct sizes are, respectively, sizeof(struct msqid_ds *), sizeof(struct semid_ds *), and sizeof(struct shmid_ds *).</p></section>	http://perldoc.perl.org/perldiag.html#Bad-arg-length-for-%25s%2c-is-%25u%2c-should-be-%25d
Perls since %s too modern--this is %s, stopped	A			Perl Diagnostics							<section class="prog__container"><p>(F) The code you are trying to run claims it will not run on the version of Perl you are using because it is too new. Maybe the code needs to be updated, or maybe it is simply wrong and the version check should just be removed.</p></section>	http://perldoc.perl.org/perldiag.html#Perls-since-%25s-too-modern--this-is-%25s%2c-stopped
Can't msgrcv to read-only var	A			Perl Diagnostics							<section class="prog__container"><p>(F) The target of a msgrcv must be modifiable to be used as a receive buffer.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-msgrcv-to-read-only-var
close (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>close FILEHANDLE<br>close</pre><p>Closes the file or pipe associated with the filehandle, flushes the IO buffers, and closes the system file descriptor.  Returns true if those operations succeed and if no error was reported by any PerlIO layer.  Closes the currently selected filehandle if the argument is omitted.</p><p>You don&#39;t have to close FILEHANDLE if you are immediately going to do another <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> on it, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> closes it for you.  (See <span href="http://perldoc.perl.org/functions/close.html#open-FILEHANDLE">open</span>.)  However, an explicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span></code> on an input file resets the line counter (<code class="inline"><span class="i">$.</span></code> ), while the implicit close done by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> does not.</p><p>If the filehandle came from a piped open, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span></code> returns false if one of the other syscalls involved fails or if its program exits with non-zero status.  If the only problem was that the program exited non-zero, <code class="inline"><span class="i">$!</span></code>  will be set to <code class="inline"><span class="n">0</span></code> .  Closing a pipe also waits for the process executing on the pipe to exit--in case you wish to look at the output of the pipe afterwards--and implicitly puts the exit status value of that command into <code class="inline"><span class="i">$?</span></code>  and <code class="inline"><span class="i">$</span>{<span class="w">^CHILD_ERROR_NATIVE</span>}</code> .</p><p>If there are multiple threads running, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span></code> on a filehandle from a piped open returns true without waiting for the child process to terminate, if the filehandle is still open in another thread.</p><p>Closing the read end of a pipe before the process writing to it at the other end is done writing results in the writer receiving a SIGPIPE.  If the other end can&#39;t handle that, be sure to read all the data before closing the pipe.</p><p>Example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">OUTPUT</span><span class="cm">,</span> <span class="q">&#39;|sort &gt;foo&#39;</span><span class="s">)</span>  <span class="c"># pipe to sort</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t start sort: $!&quot;</span><span class="sc">;</span></li><li>    <span class="c">#...                        # print stuff to output</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">OUTPUT</span>                <span class="c"># wait for sort to finish</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$!</span> ? <span class="q">&quot;Error closing sort pipe: $!&quot;</span></li><li>                   <span class="co">:</span> <span class="q">&quot;Exit status $? from sort&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">INPUT</span><span class="cm">,</span> <span class="q">&#39;foo&#39;</span><span class="s">)</span>          <span class="c"># get sort&#39;s results</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open &#39;foo&#39; for input: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>FILEHANDLE may be an expression whose value can be used as an indirect filehandle, usually the real filehandle name or an autovivified handle.</p></section>	http://perldoc.perl.org/functions/close.html
lvalue attribute %s already-defined subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) Although <span href="http://perldoc.perl.org/attributes.html">attributes.pm</span> allows this, turning the lvalue attribute on or off on a Perl subroutine that is already defined does not always work properly.  It may or may not do what you want, depending on what code is inside the subroutine, with exact details subject to change between Perl versions.  Only do this if you really know what you are doing.</p></section>	http://perldoc.perl.org/perldiag.html#lvalue-attribute-%25s-already-defined-subroutine
directory (definition)	A			Perl Glossary							<section class="prog__container"><p>A special file that contains other files. Some <b>operating systems</b> call these “folders”, “drawers”, “catalogues”, or “catalogs”.</p></section>	http://perldoc.perl.org/perlglossary.html#directory
Unterminated attribute list	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer found something other than a simple identifier at the start of an attribute, and it wasn&#39;t a semicolon or the start of a block.  Perhaps you terminated the parameter list of the previous attribute too soon.  See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-attribute-list
File::Copy (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Copy - Copy files or filehandles</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Copy</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">copy</span><span class="s">(</span><span class="q">&quot;sourcefile&quot;</span><span class="cm">,</span><span class="q">&quot;destinationfile&quot;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Copy failed: $!&quot;</span><span class="sc">;</span></li><li>&#09;<span class="i">copy</span><span class="s">(</span><span class="q">&quot;Copy.pm&quot;</span><span class="cm">,</span>\\<span class="i">*STDOUT</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">move</span><span class="s">(</span><span class="q">&quot;/dev1/sourcefile&quot;</span><span class="cm">,</span><span class="q">&quot;/dev2/destinationfile&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Copy</span> <span class="q">&quot;cp&quot;</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$n</span> = <span class="w">FileHandle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;/a/file&quot;</span><span class="cm">,</span><span class="q">&quot;r&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">cp</span><span class="s">(</span><span class="i">$n</span><span class="cm">,</span><span class="q">&quot;x&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Copy.html
weak reference (definition)	A			Perl Glossary							<section class="prog__container"><p>A reference that doesn’t get counted normally. When all the normal references to data disappear, the data disappears. These are useful for circular references that would never disappear otherwise.</p></section>	http://perldoc.perl.org/perlglossary.html#weak-reference
Why can't a method included in this same file be found?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Some possible reasons: your inheritance is getting confused, you&#39;ve misspelled the method name, or the object is of the wrong type. Check out <span href="http://perldoc.perl.org/perlootut.html">perlootut</span> for details about any of the above cases. You may also use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span><span class="s">(</span><span class="i">$object</span><span class="s">)</span></code>  to find out the class <code class="inline"><span class="i">$object</span></code>  was blessed into.</p><p>Another possible reason for problems is that you&#39;ve used the indirect object syntax (eg, <code class="inline"><span class="w">find</span> <span class="w">Guru</span> <span class="q">&quot;Samy&quot;</span></code> ) on a class name before Perl has seen that such a package exists. It&#39;s wisest to make sure your packages are all defined before you start using them, which will be taken care of if you use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statement instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>. If not, make sure to use arrow notation (eg., <code class="inline"><span class="w">Guru</span><span class="w">-&gt;find</span><span class="s">(</span><span class="q">&quot;Samy&quot;</span><span class="s">)</span></code> ) instead. Object notation is explained in <span href="http://perldoc.perl.org/perlobj.html">perlobj</span>.</p><p>Make sure to read about creating modules in <span href="http://perldoc.perl.org/perlmod.html">perlmod</span> and the perils of indirect objects in <span href="http://perldoc.perl.org/perlobj.html#Method-Invocation">Method Invocation in perlobj</span>.</p></section>	http://perldoc.perl.org/perlfaq7.html#Why-can't-a-method-included-in-this-same-file-be-found%3f
No such pipe open	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  The internal routine my_pclose() tried to close a pipe which hadn&#39;t been opened.  This should have been caught earlier as an attempt to close an unopened filehandle.</p></section>	http://perldoc.perl.org/perldiag.html#No-such-pipe-open
polymorphism (definition)	A			Perl Glossary							<section class="prog__container"><p>The notion that you can tell an <b>object</b> to do something generic, and the object will interpret the command in different ways depending on its type. [&lt; Greek πολυ- + μορϕή, many forms.]</p></section>	http://perldoc.perl.org/perlglossary.html#polymorphism
Non-hex character in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a regular expression, there was a non-hexadecimal character where a hex one was expected, like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?[ [ \\xDG ] ])</span></li><li> <span class="q"> (?</span><span class="s">[</span> <span class="s">[</span> \\<span class="i">x</span><span class="s">{</span><span class="w">DEKA</span><span class="s">}</span> <span class="s">]</span> <span class="s">]</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Non-hex-character-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
pseudoliteral (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> X<code class="inline">that looks something like a <b>literal</b>, such as the output-grabbing operator, &lt;literal moreinfo=&quot;none&quot;</code>`&gt;<i><code class="inline"><span class="w">command</span></code> </i><code class="inline">`</code>.</p></section>	http://perldoc.perl.org/perlglossary.html#pseudoliteral
greedy (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>subpattern</b> whose <b>quantifier</b> wants to match as many things as possible.</p></section>	http://perldoc.perl.org/perlglossary.html#greedy
Can't ignore signal CHLD, forcing to default	A			Perl Diagnostics							<section class="prog__container"><p>(W signal) Perl has detected that it is being run with the SIGCHLD signal (sometimes known as SIGCLD) disabled.  Since disabling this signal will interfere with proper determination of exit status of child processes, Perl has reset the signal to its default value.  This situation typically indicates that the parent program under which Perl may be running (e.g. cron) is being very careless.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-ignore-signal-CHLD%2c-forcing-to-default
What is the difference between $array[1] and @array[1]?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The difference is the sigil, that special character in front of the array name. The <code class="inline"><span class="i">$</span></code>  sigil means &quot;exactly one item&quot;, while the <code class="inline"><span class="i">@</span></code>  sigil means &quot;zero or more items&quot;. The <code class="inline"><span class="i">$</span></code>  gets you a single scalar, while the <code class="inline"><span class="i">@</span></code>  gets you a list.</p><p>The confusion arises because people incorrectly assume that the sigil denotes the variable type.</p><p>The <code class="inline"><span class="i">$array</span>[<span class="n">1</span>]</code>  is a single-element access to the array. It&#39;s going to return the item in index 1 (or undef if there is no item there). If you intend to get exactly one element from the array, this is the form you should use.</p><p>The <code class="inline"><span class="i">@array</span>[<span class="n">1</span>]</code>  is an array slice, although it has only one index. You can pull out multiple elements simultaneously by specifying additional indices as a list, like <code class="inline"><span class="i">@array</span>[<span class="n">1</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">3</span><span class="cm">,</span><span class="n">0</span>]</code> .</p><p>Using a slice on the lefthand side of the assignment supplies list context to the righthand side. This can lead to unexpected results. For instance, if you want to read a single line from a filehandle, assigning to a scalar value is fine:</p><pre class="verbatim"><ol><li>    <span class="i">$array</span>[<span class="n">1</span>] = <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span></li></ol></pre><p>However, in list context, the line input operator returns all of the lines as a list. The first line goes into <code class="inline"><span class="i">@array</span>[<span class="n">1</span>]</code>  and the rest of the lines mysteriously disappear:</p><pre class="verbatim"><ol><li>    <span class="i">@array</span>[<span class="n">1</span>] = <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span>  <span class="c"># most likely not what you want</span></li></ol></pre><p>Either the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  pragma or the <b>-w</b> flag will warn you when you use an array slice with a single index.</p></section>	http://perldoc.perl.org/perlfaq4.html#What-is-the-difference-between-%24array%5b1%5d-and-%40array%5b1%5d%3f
bareword (definition)	A			Perl Glossary							<section class="prog__container"><p>A word sufficiently ambiguous to be deemed illegal under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&#39;subs&#39;</span></code> . In the absence of that stricture, a bareword is treated as if quotes were around it.</p></section>	http://perldoc.perl.org/perlglossary.html#bareword
$[ (variable)	A			Perl Variables\nPerl Deprecated and removed variables							<section class="prog__container"><p>This variable stores the index of the first element in an array, and of the first character in a substring.  The default is 0, but you could theoretically set it to 1 to make Perl behave more like <b>awk</b> (or Fortran) when subscripting and when evaluating the index() and substr() functions.</p><p>As of release 5 of Perl, assignment to <code class="inline"><span class="i">$[</span></code>  is treated as a compiler directive, and cannot influence the behavior of any other file. (That&#39;s why you can only assign compile-time constants to it.) Its use is highly discouraged.</p><p>Prior to Perl v5.10.0, assignment to <code class="inline"><span class="i">$[</span></code>  could be seen from outer lexical scopes in the same file, unlike other compile-time directives (such as <span href="http://perldoc.perl.org/strict.html">strict</span>).  Using local() on it would bind its value strictly to a lexical block.  Now it is always lexically scoped.</p><p>As of Perl v5.16.0, it is implemented by the <span href="http://perldoc.perl.org/arybase.html">arybase</span> module.  See <span href="http://perldoc.perl.org/arybase.html">arybase</span> for more details on its behaviour.</p><p>Under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.16</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">feature</span> <span class="q">&quot;array_base&quot;</span></code> , <code class="inline"><span class="i">$[</span></code>  no longer has any effect, and always contains 0.  Assigning 0 to it is permitted, but any other value will produce an error.</p><p>Mnemonic: [ begins subscripts.</p><p>Deprecated in Perl v5.12.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5b
Pod::Html (module)	A			Perl Standard Modules		[[perlpod]]					<section class="prog__container"><p>Pod::Html - module to convert pod files to HTML</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Html</span><span class="sc">;</span></li><li>    <span class="i">pod2html</span><span class="s">(</span><span class="s">[</span><span class="w">options</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Html.html
panic: memory wrap	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something tried to allocate either more memory than possible or a negative amount.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-memory-wrap
C<code>	A			Perl POD Formatting Codes							<section class="prog__container"><p>Renders code in a typewriter font, or gives some other indication that this represents program text (&quot;<code class="inline"><span class="w">C</span><span class="q">&lt;gmtime($^T)&gt;</span></code> &quot;) or some other form of computerese (&quot;<code class="inline"><span class="w">C</span><span class="q">&lt;drwxr-xr-x&gt;</span></code> &quot;).</p></section>	http://perldoc.perl.org/perlpod.html#C%3ccode%3e----code-text
scalar context (definition)	A			Perl Glossary		[[context]]\n[[list context]]					<section class="prog__container"><p>The situation in which an <b>expression</b> is expected by its surroundings (the code calling it) to return a single <b>value</b> rather than a <b>list</b> of values.  A scalar context sometimes imposes additional constraints on the return value—see <b>string context</b> and <b>numeric context</b>. Sometimes we talk about a <b>Boolean context</b> inside conditionals, but this imposes no additional constraints, since any scalar value, whether numeric or <b>string</b>, is already true or false.</p></section>	http://perldoc.perl.org/perlglossary.html#scalar-context
setgid (definition)	A			Perl Glossary							<section class="prog__container"><p>Same as <b>setuid</b>, only having to do with giving away <b>group</b> privileges.</p></section>	http://perldoc.perl.org/perlglossary.html#setgid
Pod::Simple::HTML (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::HTMLBatch]]					<section class="prog__container"><p>Pod::Simple::HTML - convert Pod to HTML</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::HTML</span> -e <span class="w">Pod::Simple::HTML::go</span> <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/HTML.html
Where can I buy a commercial version of Perl?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>Perl already <i>is</i> commercial software: it has a license that you can grab and carefully read to your manager. It is distributed in releases and comes in well-defined packages. There is a very large and supportive user community and an extensive literature.</p><p>If you still need commercial support <span href="http://search.cpan.org/perldoc/http:#%2fwww.activestate.com%2factiveperl">ActiveState</span> offers this.</p></section>	http://perldoc.perl.org/perlfaq2.html#Where-can-I-buy-a-commercial-version-of-Perl%3f
panic: %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal error.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-%25s
ne (function)	A			Perl Functions							<section class="prog__container"><pre>ne</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/ne.html
Can't modify %s in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You aren&#39;t allowed to assign to the item indicated, or otherwise try to change it, such as with an auto-increment.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-%25s-in-%25s
get%sname() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to get a socket or peer socket name on a closed socket.  Did you forget to check the return value of your socket() call?</p></section>	http://perldoc.perl.org/perldiag.html#get%25sname()-on-closed-socket-%25s
pipe (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>pipe READHANDLE,WRITEHANDLE</pre><p>Opens a pair of connected pipes like the corresponding system call. Note that if you set up a loop of piped processes, deadlock can occur unless you are very careful.  In addition, note that Perl&#39;s pipes use IO buffering, so you may need to set <code class="inline"><span class="i">$|</span></code>  to flush your WRITEHANDLE after each command, depending on the application.</p><p>Returns true on success.</p><p>See <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span>, <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>, and <span href="http://perldoc.perl.org/perlipc.html#Bidirectional-Communication-with-Another-Process">Bidirectional Communication with Another Process in perlipc</span> for examples of such things.</p><p>On systems that support a close-on-exec flag on files, that flag is set on all newly opened file descriptors whose <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span></code>s are <i>higher</i> than  the current value of $^F (by default 2 for <code class="inline"><span class="w">STDERR</span></code> ).  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p></section>	http://perldoc.perl.org/functions/pipe.html
Term::ReadLine (module)	A			Perl Standard Modules							<section class="prog__container"><p>Term::ReadLine - Perl interface to various <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> packages. If no real package is found, substitutes stubs instead of basic functions.</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadLine</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$term</span> = <span class="w">Term::ReadLine</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;Simple Perl calc&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$prompt</span> = <span class="q">&quot;Enter your arithmetic expression: &quot;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$OUT</span> = <span class="i">$term</span><span class="i">-&gt;OUT</span> || \\<span class="i">*STDOUT</span><span class="sc">;</span></li><li>  while <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="s">(</span><span class="i">$_</span> = <span class="i">$term</span><span class="i">-&gt;readline</span><span class="s">(</span><span class="i">$prompt</span><span class="s">)</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$res</span> = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$@</span> if <span class="i">$@</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$OUT</span> <span class="i">$res</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span> unless <span class="i">$@</span><span class="sc">;</span></li><li>    <span class="i">$term</span><span class="i">-&gt;addhistory</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> if <span class="q">/\\S/</span><span class="sc">;</span></li><li>  <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Term/ReadLine.html
Encode::KR (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::KR - Korean Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$euc_kr</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;euc-kr&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>   <span class="c"># loads Encode::KR implicitly</span></li><li>    <span class="i">$utf8</span>   = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;euc-kr&quot;</span><span class="cm">,</span> <span class="i">$euc_kr</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/KR.html
Compound Statements	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>In Perl, a sequence of statements that defines a scope is called a block. Sometimes a block is delimited by the file containing it (in the case of a required file, or the program as a whole), and sometimes a block is delimited by the extent of a string (in the case of an eval).</p><p>But generally, a block is delimited by curly brackets, also known as braces. We will call this syntactic construct a BLOCK.</p><p>The following compound statements may be used to control flow:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="w">BLOCK</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> ...</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> ... <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="w">BLOCK</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> ...</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> ... <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span> <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="w">EXPR</span><span class="sc">;</span> <span class="w">EXPR</span><span class="sc">;</span> <span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">VAR</span> <span class="s">(</span><span class="w">LIST</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">VAR</span> <span class="s">(</span><span class="w">LIST</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span><span class="w">EXPR</span><span class="sc">;</span> <span class="w">EXPR</span><span class="sc">;</span> <span class="w">EXPR</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="w">VAR</span> <span class="s">(</span><span class="w">LIST</span><span class="s">)</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="w">VAR</span> <span class="s">(</span><span class="w">LIST</span><span class="s">)</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">LABEL</span> <span class="w">BLOCK</span></li><li>    <span class="w">LABEL</span> <span class="w">BLOCK</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="w">BLOCK</span></li><li></li><li>    <span class="w">PHASE</span> <span class="w">BLOCK</span></li></ol></pre><p>The experimental <code class="inline">given</code>  statement is <i>not automatically enabled</i>; see <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements</span> below for how to do so, and the attendant caveats.</p><p>Unlike in C and Pascal, in Perl these are all defined in terms of BLOCKs, not statements.  This means that the curly brackets are <i>required</i>--no dangling statements allowed.  If you want to write conditionals without curly brackets, there are several other ways to do it.  The following all do the same thing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span>!<span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $FOO: $!&quot;</span> <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $FOO: $!&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="s">)</span>  || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $FOO: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">FOO</span><span class="s">)</span> ? <span class="s">(</span><span class="s">)</span> <span class="co">:</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t open $FOO: $!&quot;</span><span class="sc">;</span></li><li>        <span class="c"># a bit exotic, that last one</span></li></ol></pre><p>The <code class="inline">if</code>  statement is straightforward.  Because BLOCKs are always bounded by curly brackets, there is never any ambiguity about which <code class="inline">if</code>  an <code class="inline">else</code>  goes with.  If you use <code class="inline">unless</code>  in place of <code class="inline">if</code> , the sense of the test is reversed.  Like <code class="inline">if</code> , <code class="inline">unless</code>  can be followed by <code class="inline">else</code> .  <code class="inline">unless</code>  can even be followed by one or more <code class="inline">elsif</code>  statements, though you may want to think twice before using that particular language construct, as everyone reading your code will have to think at least twice before they can understand what&#39;s going on.</p><p>The <code class="inline">while</code>  statement executes the block as long as the expression is <span href="http://perldoc.perl.org/perlsyn.html#Truth-and-Falsehood">true</span>. The <code class="inline">until</code>  statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon.  The LABEL identifies the loop for the loop control statements <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code>. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop.  This may include dynamically looking back your call-stack at run time to find the LABEL.  Such desperate behavior triggers a warning if you use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  pragma or the <b>-w</b> flag.</p><p>If there is a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> BLOCK, it is always executed just before the conditional is about to be evaluated again.  Thus it can be used to increment a loop variable, even when the loop has been continued via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> statement.</p><p>When a block is preceding by a compilation phase keyword such as <code class="inline">BEGIN</code> , <code class="inline">END</code> , <code class="inline">INIT</code> , <code class="inline">CHECK</code> , or <code class="inline">UNITCHECK</code> , then the block will run only during the corresponding phase of execution.  See <span href="http://perldoc.perl.org/perlmod.html">perlmod</span> for more details.</p><p>Extension modules can also hook into the Perl parser to define new kinds of compound statements.  These are introduced by a keyword which the extension recognizes, and the syntax following the keyword is defined entirely by the extension.  If you are an implementor, see <span href="http://perldoc.perl.org/perlapi.html#PL_keyword_plugin">PL_keyword_plugin in perlapi</span> for the mechanism.  If you are using such a module, see the module&#39;s documentation for details of the syntax that it defines.</p></section>	http://perldoc.perl.org/perlsyn.html#Compound-Statements
-s	A			Perl Command-Line Switches							<section class="prog__container"><p>enables rudimentary switch parsing for switches on the command line after the program name but before any filename arguments (or before an argument of <b>--</b>).  Any switch found there is removed from @ARGV and sets the corresponding variable in the Perl program.  The following program prints &quot;1&quot; if the program is invoked with a <b>-xyz</b> switch, and &quot;abc&quot; if it is invoked with <b>-xyz=abc</b>.</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl -s</span></li><li>    if <span class="s">(</span><span class="i">$xyz</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$xyz\\n&quot;</span> <span class="s">}</span></li></ol></pre><p>Do note that a switch like <b>--help</b> creates the variable <code class="inline"><span class="i">$</span>{-<span class="w">help</span>}</code> , which is not compliant with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&quot;refs&quot;</span></code> .  Also, when using this option on a script with warnings enabled you may get a lot of spurious &quot;used only once&quot; warnings.</p></section>	http://perldoc.perl.org/perlrun.html#*-s*
panic: utf16_to_utf8: odd bytelen	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something tried to call utf16_to_utf8 with an odd (as opposed to even) byte length.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-utf16_to_utf8%3a-odd-bytelen
substring (definition)	A			Perl Glossary							<section class="prog__container"><p>A portion of a <b>string</b>, starting at a certain <b>character</b> position (<b>offset</b>) and proceeding for a certain number of characters.</p></section>	http://perldoc.perl.org/perlglossary.html#substring
App::Prove::State (module)	A			Perl Standard Modules							<section class="prog__container"><p>App::Prove::State - State storage for the <code class="inline"><span class="w">prove</span></code>  command.</p> <pre class="verbatim"><ol><li>    <span class="c"># Re-run failed tests</span></li><li>    <span class="i">$ prove</span> --<span class="w">state</span>=<span class="w">failed</span><span class="cm">,</span><span class="w">save</span> -<span class="w">rbv</span></li></ol></pre></section>	http://perldoc.perl.org/App/Prove/State.html
abs (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>abs VALUE<br>abs</pre><p>Returns the absolute value of its argument. If VALUE is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p></section>	http://perldoc.perl.org/functions/abs.html
Fatal VMS error (status=%d) at %s, line %d	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  Something untoward happened in a VMS system service or RTL routine; Perl&#39;s exit status should provide more details.  The filename in &quot;at %s&quot; and the line number in &quot;line %d&quot; tell you which section of the Perl source code is distressed.</p></section>	http://perldoc.perl.org/perldiag.html#Fatal-VMS-error-(status%3d%25d)-at-%25s%2c-line-%25d
What about the pragma?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Don&#39;t use it. It makes no sense to deal with bytes in a text string, and it makes no sense to deal with characters in a byte string. Do the proper conversions (by decoding/encoding), and things will work out well: you get character counts for decoded data, and byte counts for encoded data.</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">bytes</span></code>  is usually a failed attempt to do something useful. Just forget about it.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-about-the-use-bytes-pragma%3f
en passant (definition)	A			Perl Glossary							<section class="prog__container"><p>When you change a <b>value</b> as it is being copied. [From French “in passing”, as in the exotic pawn-capturing maneuver in chess.]</p></section>	http://perldoc.perl.org/perlglossary.html#en-passant
How do I decode encrypted password files?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>You spend lots and lots of money on dedicated hardware, but this is bound to get you talked about.</p><p>Seriously, you can&#39;t if they are Unix password files--the Unix password system employs one-way encryption. It&#39;s more like hashing than encryption. The best you can do is check whether something else hashes to the same string. You can&#39;t turn a hash back into the original string. Programs like Crack can forcibly (and intelligently) try to guess passwords, but don&#39;t (can&#39;t) guarantee quick success.</p><p>If you&#39;re worried about users selecting bad passwords, you should proactively check when they try to change their password (by modifying <i>passwd(1)</i>, for example).</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-decode-encrypted-password-files%3f
overriding (definition)	A			Perl Glossary							<section class="prog__container"><p>Hiding or invalidating some other definition of the same name. (Not to be confused with <b>overloading</b>, which adds definitions that must be disambiguated some other way.) To confuse the issue further, we use the word with two overloaded definitions: to describe how you can define your own <b>subroutine</b> to hide a built-in <b>function</b> of the same name (see the section “Overriding Built-in Functions” in Camel chapter 11, “Modules”), and to describe how you can define a replacement <b>method</b> in a <b>derived class</b> to hide a <b>base class</b>’s method of the same name (see Camel chapter 12, “Objects”).</p></section>	http://perldoc.perl.org/perlglossary.html#overriding
getc (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>getc FILEHANDLE<br>getc</pre><p>Returns the next character from the input file attached to FILEHANDLE, or the undefined value at end of file or if there was an error (in the latter case <code class="inline"><span class="i">$!</span></code>  is set).  If FILEHANDLE is omitted, reads from STDIN.  This is not particularly efficient.  However, it cannot be used by itself to fetch single characters without waiting for the user to hit enter.  For that, try something more like:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">$BSD_STYLE</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    else <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty&quot;</span><span class="cm">,</span> <span class="q">&#39;-icanon&#39;</span><span class="cm">,</span> <span class="q">&#39;eol&#39;</span><span class="cm">,</span> <span class="q">&quot;\\001&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$key</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getc.html">getc</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    if <span class="s">(</span><span class="i">$BSD_STYLE</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty -cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    else <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&#39;stty&#39;</span><span class="cm">,</span> <span class="q">&#39;icanon&#39;</span><span class="cm">,</span> <span class="q">&#39;eol&#39;</span><span class="cm">,</span> <span class="q">&#39;^@&#39;</span><span class="sc">;</span> <span class="c"># ASCII NUL</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre><p>Determination of whether $BSD_STYLE should be set is left as an exercise to the reader.</p><p>The <code class="inline"><span class="w">POSIX::getattr</span></code>  function can do this more portably on systems purporting POSIX compliance.  See also the <code class="inline"><span class="w">Term::ReadKey</span></code>  module from your nearest <span href="http://search.cpan.org/perldoc/http:#%2fwww.cpan.org">CPAN</span> site.</p></section>	http://perldoc.perl.org/functions/getc.html
Plain Old Comments (Not!)	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Perl can process line directives, much like the C preprocessor.  Using this, one can control Perl&#39;s idea of filenames and line numbers in error or warning messages (especially for strings that are processed with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval()</span></code>).  The syntax for this mechanism is almost the same as for most C preprocessors: it matches the regular expression</p><pre class="verbatim"><ol><li>    <span class="c"># example: &#39;# line 42 &quot;new_filename.plx&quot;&#39;</span></li><li>    <span class="q">/^\\#   \\s*</span></li><li>      <span class="q">      line \\s+ (\\d+)   \\s*</span></li><li>      <span class="q">      (?:\\s(&quot;?)([^&quot;]+)\\g2)? \\s*</span></li><li>     <span class="q">     $/x</span></li></ol></pre><p>with <code class="inline"><span class="i">$1</span></code>  being the line number for the next line, and <code class="inline"><span class="i">$3</span></code>  being the optional filename (specified with or without quotes).  Note that no whitespace may precede the <code class="inline"><span class="c">#</span></code> , unlike modern C preprocessors.</p><p>There is a fairly obvious gotcha included with the line directive: Debuggers and profilers will only show the last source line to appear at a particular line number in a given file.  Care should be taken not to cause line number collisions in code you&#39;d like to debug later.</p><p>Here are some examples that you should be able to type into your command shell:</p><pre class="verbatim"><ol><li>    <span class="i">% perl</span></li><li>    <span class="c"># line 200 &quot;bzzzt&quot;</span></li><li>    <span class="c"># the &#39;#&#39; on the previous line must be the first char on line</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&#39;foo&#39;</span><span class="sc">;</span></li><li><span name="__END__"></span>    __END__</li><li><span class="q">    foo at bzzzt line 201.</span></li><li></li><li><span class="q">    % perl</span></li><li><span class="q">    # line 200 &quot;bzzzt&quot;</span></li><li><span class="q">    eval qq[\\n#line 2001 &quot;&quot;\\ndie &#39;foo&#39;]; print $@;</span></li><li><span class="q">    __END__</span></li><li><span class="q">    foo at - line 2001.</span></li><li></li><li><span class="q">    % perl</span></li><li><span class="q">    eval qq[\\n#line 200 &quot;foo bar&quot;\\ndie &#39;foo&#39;]; print $@;</span></li><li><span class="q">    __END__</span></li><li><span class="q">    foo at foo bar line 200.</span></li><li></li><li><span class="q">    % perl</span></li><li><span class="q">    # line 345 &quot;goop&quot;</span></li><li><span class="q">    eval &quot;\\n#line &quot; . __LINE__ . &#39; &quot;&#39; . __FILE__ .&quot;\\&quot;\\ndie &#39;foo&#39;&quot;;</span></li><li><span class="q">    print $@;</span></li><li><span class="q">    __END__</span></li><li><span class="q">    foo at goop line 345.</span></li></ol></pre></section>	http://perldoc.perl.org/perlsyn.html#Plain-Old-Comments-(Not!)
-dt	A			Perl Command-Line Switches							<section class="prog__container"><p>runs the program under the Perl debugger.  See <span href="http://perldoc.perl.org/perldebug.html">perldebug</span>. If <b>t</b> is specified, it indicates to the debugger that threads will be used in the code being debugged.</p></section>	http://perldoc.perl.org/perlrun.html#*-dt*
Bad symbol for scalar	A			Perl Diagnostics							<section class="prog__container"><p>(P) An internal request asked to add a scalar entry to something that wasn&#39;t a symbol table entry.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-symbol-for-scalar
Which Perl blogs should I read?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/http:#%2fperlnews.org%2f">Perl News</span> covers some of the major events in the Perl world, <span href="http://search.cpan.org/perldoc/http:#%2fperlweekly.com%2f">Perl Weekly</span> is a weekly e-mail (and RSS feed) of hand-picked Perl articles.</p><p><span href="http://blogs.perl.org/">http://blogs.perl.org/</span> hosts many Perl blogs, there are also several blog aggregators: <span href="http://search.cpan.org/perldoc/http:#%2fperlsphere.net%2f">Perlsphere</span> and <span href="http://search.cpan.org/perldoc/http:#%2fironman.enlightenedperl.org%2f">IronMan</span> are two of them.</p></section>	http://perldoc.perl.org/perlfaq2.html#Which-Perl-blogs-should-I-read%3f
Premature end of script headers	A			Perl Diagnostics							<section class="prog__container"><p>See Server error.</p></section>	http://perldoc.perl.org/perldiag.html#Premature-end-of-script-headers
Undefined format "%s" called	A			Perl Diagnostics							<section class="prog__container"><p>(F) The format indicated doesn&#39;t seem to exist.  Perhaps it&#39;s really in another package?  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-format-%22%25s%22-called
core dump (definition)	A			Perl Glossary							<section class="prog__container"><p>The corpse of a <b>process</b>, in the form of a file left in the <b>working directory</b> of the process, usually as a result of certain kinds of fatal errors.</p></section>	http://perldoc.perl.org/perlglossary.html#core-dump
element (definition)	A			Perl Glossary							<section class="prog__container"><p>A basic building block. When you’re talking about an <b>array</b>, it’s one of the items that make up the array.</p></section>	http://perldoc.perl.org/perlglossary.html#element
ExtUtils::Install (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Install - install files from here to there</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Install</span><span class="sc">;</span></li><li></li><li>  <span class="i">install</span><span class="s">(</span><span class="s">{</span> <span class="q">&#39;blib/lib&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;some/install/dir&#39;</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">uninstall</span><span class="s">(</span><span class="i">$packlist</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">pm_to_blib</span><span class="s">(</span><span class="s">{</span> <span class="q">&#39;lib/Foo/Bar.pm&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;blib/lib/Foo/Bar.pm&#39;</span> <span class="s">}</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Install.html
Filehandle STDIN reopened as %s only for output	A			Perl Diagnostics							<section class="prog__container"><p>(W io) You opened for writing a filehandle that got the same filehandle id as STDIN.  This occurred because you closed STDIN previously.</p></section>	http://perldoc.perl.org/perldiag.html#Filehandle-STDIN-reopened-as-%25s-only-for-output
eclectic (definition)	A			Perl Glossary							<section class="prog__container"><p>Derived from many sources. Some would say <i>too</i> many.</p></section>	http://perldoc.perl.org/perlglossary.html#eclectic
/p regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Preserve the string matched such that ${^PREMATCH}, ${^MATCH}, and ${^POSTMATCH} are available for use after matching.</p><p>In Perl 5.20 and higher this is ignored. Due to a new copy-on-write mechanism, ${^PREMATCH}, ${^MATCH}, and ${^POSTMATCH} will be available after the match regardless of the modifier.</p></section>	http://perldoc.perl.org/perlre.html#*p*
How do I create a switch or case statement?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>In Perl 5.10, use the <code class="inline">given-when</code>  construct described in <span href="http://perldoc.perl.org/perlsyn.html">perlsyn</span>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span> <span class="s">(</span> <span class="i">$string</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">&#39;Fred&#39;</span> <span class="s">)</span>        <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;I found Fred!&quot;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">&#39;Barney&#39;</span> <span class="s">)</span>      <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;I found Barney!&quot;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span><span class="s">(</span> <span class="q">/Bamm-?Bamm/</span> <span class="s">)</span>  <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;I found Bamm-Bamm!&quot;</span> <span class="s">}</span></li><li>        <span class="i">default</span>               <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;I don&#39;t recognize the name!&quot;</span> <span class="s">}</span></li><li>    <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>If one wants to use pure Perl and to be compatible with Perl versions prior to 5.10, the general answer is to use <code class="inline">if-elsif-else</code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$variable_to_test</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span>    <span class="s">(</span><span class="q">/pat1/</span><span class="s">)</span>  <span class="s">{</span> <span class="s">}</span>     <span class="c"># do something</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="q">/pat2/</span><span class="s">)</span>  <span class="s">{</span> <span class="s">}</span>     <span class="c"># do something else</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="q">/pat3/</span><span class="s">)</span>  <span class="s">{</span> <span class="s">}</span>     <span class="c"># do something else</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span>            <span class="s">{</span> <span class="s">}</span>     <span class="c"># default</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s a simple example of a switch based on pattern matching, lined up in a way to make it look more like a switch statement. We&#39;ll do a multiway conditional based on the type of reference stored in $whatchamacallit:</p><pre class="verbatim"><ol><li>    <span class="j">SWITCH:</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span> <span class="i">$whatchamacallit</span><span class="s">)</span> <span class="s">{</span></li><li></li><li>        <span class="q">/^$/</span>           &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;not a reference&quot;</span><span class="sc">;</span></li><li></li><li>        <span class="q">/SCALAR/</span>       &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>                        <span class="i">print_scalar</span><span class="s">(</span><span class="i">$$ref</span><span class="s">)</span><span class="sc">;</span></li><li>                        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span></li><li>                      <span class="s">}</span><span class="sc">;</span></li><li></li><li>        <span class="q">/ARRAY/</span>        &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>                        <span class="i">print_array</span><span class="s">(</span><span class="i">@$ref</span><span class="s">)</span><span class="sc">;</span></li><li>                        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span></li><li>                      <span class="s">}</span><span class="sc">;</span></li><li></li><li>        <span class="q">/HASH/</span>        &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>                        <span class="i">print_hash</span><span class="s">(</span><span class="i">%$ref</span><span class="s">)</span><span class="sc">;</span></li><li>                        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span></li><li>                      <span class="s">}</span><span class="sc">;</span></li><li></li><li>        <span class="q">/CODE/</span>        &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>                        <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;can&#39;t print function ref&quot;</span><span class="sc">;</span></li><li>                        <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="j">SWITCH</span><span class="sc">;</span></li><li>                      <span class="s">}</span><span class="sc">;</span></li><li></li><li>        <span class="c"># DEFAULT</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;User defined type skipped&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="s">}</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlsyn.html">perlsyn</span> for other examples in this style.</p><p>Sometimes you should change the positions of the constant and the variable. For example, let&#39;s say you wanted to test which of many answers you were given, but in a case-insensitive way that also allows abbreviations. You can use the following technique if the strings all start with different characters or if you want to arrange the matches so that one takes precedence over another, as <code class="inline"><span class="q">&quot;SEND&quot;</span></code>  has precedence over <code class="inline"><span class="q">&quot;STOP&quot;</span></code>  here:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$answer</span> = &lt;&gt;<span class="s">)</span><span class="sc">;</span></li><li>    if    <span class="s">(</span><span class="q">&quot;SEND&quot;</span>  =~ <span class="q">/^\\Q$answer/i</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Action is send\\n&quot;</span>  <span class="s">}</span></li><li>    elsif <span class="s">(</span><span class="q">&quot;STOP&quot;</span>  =~ <span class="q">/^\\Q$answer/i</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Action is stop\\n&quot;</span>  <span class="s">}</span></li><li>    elsif <span class="s">(</span><span class="q">&quot;ABORT&quot;</span> =~ <span class="q">/^\\Q$answer/i</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Action is abort\\n&quot;</span> <span class="s">}</span></li><li>    elsif <span class="s">(</span><span class="q">&quot;LIST&quot;</span>  =~ <span class="q">/^\\Q$answer/i</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Action is list\\n&quot;</span>  <span class="s">}</span></li><li>    elsif <span class="s">(</span><span class="q">&quot;EDIT&quot;</span>  =~ <span class="q">/^\\Q$answer/i</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Action is edit\\n&quot;</span>  <span class="s">}</span></li></ol></pre><p>A totally different approach is to create a hash of function references.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%commands</span> = <span class="s">(</span></li><li>        <span class="q">&quot;happy&quot;</span> <span class="cm">=&gt;</span> \\<span class="i">&amp;joy</span><span class="cm">,</span></li><li>        <span class="q">&quot;sad&quot;</span><span class="cm">,</span>  <span class="cm">=&gt;</span> \\<span class="i">&amp;sullen</span><span class="cm">,</span></li><li>        <span class="q">&quot;done&quot;</span>  <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;See ya!&quot;</span> <span class="s">}</span><span class="cm">,</span></li><li>        <span class="q">&quot;mad&quot;</span>   <span class="cm">=&gt;</span> \\<span class="i">&amp;angry</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;How are you? &quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$string</span> = <span class="q">&lt;STDIN&gt;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$commands</span>{<span class="i">$string</span>}<span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$commands</span>{<span class="i">$string</span>}-&gt;<span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span> else <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;No such command: $string\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Starting from Perl 5.8, a source filter module, <code class="inline"><span class="w">Switch</span></code> , can also be used to get switch and case. Its use is now discouraged, because it&#39;s not fully compatible with the native switch of Perl 5.10, and because, as it&#39;s implemented as a source filter, it doesn&#39;t always work as intended when complex syntax is involved.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-create-a-switch-or-case-statement%3f
Badly placed ()'s	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl.  Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#Badly-placed-()'s
How do I timeout a slow event?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm()</span></code> function, probably in conjunction with a signal handler, as documented in <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span> and the section on &quot;Signals&quot; in the Camel. You may instead use the more flexible <span href="http://search.cpan.org/perldoc/Sys::AlarmCall">Sys::AlarmCall</span> module available from CPAN.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm()</span></code> function is not implemented on all versions of Windows. Check the documentation for your specific version of Perl.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-timeout-a-slow-event%3f
Pod::Simple::DumpAsXML (module)	A			Perl Standard Modules		[[Pod::Simple::XMLOutStream]]\n[[Pod::Simple::DumpAsText]]\n[[Pod::Simple]]\n[[Pod::Simple::DumpAsXML]]\n[[Pod::PXML]]\n[[Pod::XML]]\n[[Pod::SAX]]					<section class="prog__container"><p>Pod::Simple::DumpAsXML -- turn Pod into XML</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::DumpAsXML</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::DumpAsXML-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/DumpAsXML.html
hexadecimal (definition)	A			Perl Glossary							<section class="prog__container"><p>A number in base 16, “hex” for short. The digits for 10 through 15 are customarily represented by the letters <code class="inline"><span class="w">a</span></code>  through <code class="inline"><span class="w">f</span></code> . Hexadecimal constants in Perl start with <code class="inline"><span class="n">0</span>x</code> . See also the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/hex.html">hex</span></code> function in Camel chapter 27, “Functions”.</p></section>	http://perldoc.perl.org/perlglossary.html#hexadecimal
Expecting '(?flags:(?[...' in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code>  extended character class regular expression construct only allows character classes (including character class escapes like <code class="inline">\\<span class="w">d</span></code> ), operators, and parentheses.  The one exception is <code class="inline"><span class="s">(</span><span class="q">?flags:...)</span></code>  containing at least one flag and exactly one <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code>  construct. This allows a regular expression containing just <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code>  to be interpolated.  If you see this error message, then you probably have some other <code class="inline">(?...)</code> construct inside your character class.  See <span href="http://perldoc.perl.org/perlrecharclass.html#Extended-Bracketed-Character-Classes">Extended Bracketed Character Classes in perlrecharclass</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Expecting-'(%3fflags%3a(%3f%5b...'-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
The lexical_subs feature is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::lexical_subs) This warning is emitted if you declare a sub with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>.  Simply suppress the warning if you want to use the feature, but know that in doing so you are taking the risk of using an experimental feature which may change or be removed in a future Perl version:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::lexical_subs&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;lexical_subs&quot;</span><span class="sc">;</span></li><li><span name="foo"></span>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> sub <span class="m">foo</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#The-lexical_subs-feature-is-experimental
$^M (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>By default, running out of memory is an untrappable, fatal error. However, if suitably built, Perl can use the contents of <code class="inline"><span class="i">$^M</span></code>  as an emergency memory pool after <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die()</span></code>ing.  Suppose that your Perl were compiled with <code class="inline">-<span class="w">DPERL_EMERGENCY_SBRK</span></code>  and used Perl&#39;s malloc. Then</p><pre class="verbatim"><ol><li>    <span class="i">$^M</span> = <span class="q">&#39;a&#39;</span> x <span class="s">(</span><span class="n">1</span> &lt;&lt; <span class="n">16</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>would allocate a 64K buffer for use in an emergency.  See the <i>INSTALL</i> file in the Perl distribution for information on how to add custom C compilation flags when compiling perl.  To discourage casual use of this advanced feature, there is no <span href="http://perldoc.perl.org/English.html">English</span> long name for this variable.</p><p>This variable was added in Perl 5.004.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eM
Expecting close bracket in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You wrote something like</p><pre class="verbatim"><ol><li> <span class="s">(</span><span class="q">?13</span></li></ol></pre><p>to denote a capturing group of the form <span href="http://perldoc.perl.org/perlre.html#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)">(?PARNO)</span>, but omitted the <code class="inline"><span class="q">&quot;)&quot;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Expecting-close-bracket-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Unrecognized character %s; marked by <-- HERE after %s near column %d	A			Perl Diagnostics							<section class="prog__container"><p>(F) The Perl parser has no idea what to do with the specified character in your Perl script (or eval) near the specified column.  Perhaps you tried  to run a compressed script, a binary program, or a directory as a Perl program.</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-character-%25s%3b-marked-by-%3c---HERE-after-%25s-near-column-%25d
foldcase (definition)	A			Perl Glossary							<section class="prog__container"><p>The casemap used in Unicode when comparing or matching without regard to case. Comparing lower-, title-, or uppercase are all unreliable due to Unicode’s complex, one-to-many case mappings. Foldcase is a <b>lowercase</b> variant (using a partially decomposed <b>normalization</b> form for certain codepoints) created specifically to resolve this.</p></section>	http://perldoc.perl.org/perlglossary.html#foldcase
How do I traverse a directory tree?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <span href="http://perldoc.perl.org/File/Find.html">File::Find</span> module, which comes with Perl, does all of the hard work to traverse a directory structure. It comes with Perl. You simply call the <code class="inline"><span class="w">find</span></code>  subroutine with a callback subroutine and the directories you want to traverse:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Find</span><span class="sc">;</span></li><li></li><li>    <span class="i">find</span><span class="s">(</span> \\<span class="i">&amp;wanted</span><span class="cm">,</span> <span class="i">@directories</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="wanted"></span>    sub <span class="m">wanted</span> <span class="s">{</span></li><li>        <span class="c"># full path in $File::Find::name</span></li><li>        <span class="c"># just filename in $_</span></li><li>        ... <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">whatever</span> <span class="w">you</span> <span class="w">want</span> <span class="w">to</span> <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> ...</li><li>    <span class="s">}</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/File::Find::Closures">File::Find::Closures</span>, which you can download from CPAN, provides many ready-to-use subroutines that you can use with <span href="http://perldoc.perl.org/File/Find.html">File::Find</span>.</p><p>The <span href="http://search.cpan.org/perldoc/File::Finder">File::Finder</span>, which you can download from CPAN, can help you create the callback subroutine using something closer to the syntax of the <code class="inline"><span class="w">find</span></code>  command-line utility:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Find</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Finder</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$deep_dirs</span> = <span class="w">File::Finder</span><span class="w">-&gt;depth</span><span class="w">-&gt;type</span><span class="s">(</span><span class="q">&#39;d&#39;</span><span class="s">)</span><span class="i">-&gt;ls</span><span class="i">-&gt;exec</span><span class="s">(</span><span class="q">&#39;rmdir&#39;</span><span class="cm">,</span><span class="q">&#39;{}&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">find</span><span class="s">(</span> <span class="i">$deep_dirs</span><span class="i">-&gt;as_options</span><span class="cm">,</span> <span class="i">@places</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/File::Find::Rule">File::Find::Rule</span> module, which you can download from CPAN, has a similar interface, but does the traversal for you too:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Find::Rule</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@files</span> = <span class="w">File::Find::Rule</span><span class="w">-&gt;file</span><span class="s">(</span><span class="s">)</span></li><li>                             <span class="i">-&gt;name</span><span class="s">(</span> <span class="q">&#39;*.pm&#39;</span> <span class="s">)</span></li><li>                             <span class="i">-&gt;in</span><span class="s">(</span> <span class="i">@INC</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-traverse-a-directory-tree%3f
Unmatched ) in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) Unbackslashed parentheses must always be balanced in regular expressions.  If you&#39;re a vi user, the % key is valuable for finding the matching parenthesis.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unmatched-)-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Use of *glob{FILEHANDLE} is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You are now encouraged to use the shorter *glob{IO} form to access the filehandle slot within a typeglob.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-*glob%7bFILEHANDLE%7d-is-deprecated
link (definition)	A			Perl Glossary							<section class="prog__container"><p>Used as a noun, a name in a <b>directory</b> that represents a <b>file</b>. A given file can have multiple links to it. It’s like having the same phone number listed in the phone directory under different names. As a verb, to resolve a partially <b>compiled</b> file’s unresolved symbols into a (nearly) executable image. Linking can generally be static or dynamic, which has nothing to do with static or dynamic scoping.</p></section>	http://perldoc.perl.org/perlglossary.html#link
$) (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The effective gid of this process.  If you are on a machine that supports membership in multiple groups simultaneously, gives a space separated list of groups you are in.  The first number is the one returned by <code class="inline"><span class="i">getegid</span><span class="s">(</span><span class="s">)</span></code> , and the subsequent ones by <code class="inline"><span class="i">getgroups</span><span class="s">(</span><span class="s">)</span></code> , one of which may be the same as the first number.</p><p>Similarly, a value assigned to <code class="inline"><span class="i">$)</span></code>  must also be a space-separated list of numbers.  The first number sets the effective gid, and the rest (if any) are passed to <code class="inline"><span class="i">setgroups</span><span class="s">(</span><span class="s">)</span></code> .  To get the effect of an empty list for <code class="inline"><span class="i">setgroups</span><span class="s">(</span><span class="s">)</span></code> , just repeat the new effective gid; that is, to force an effective gid of 5 and an effectively empty <code class="inline"><span class="i">setgroups</span><span class="s">(</span><span class="s">)</span></code>  list, say <code class="inline"> <span class="i">$)</span> = <span class="q">&quot;5 5&quot;</span> </code> .</p><p>You can change both the effective gid and the real gid at the same time by using <code class="inline"><span class="i">POSIX::setgid</span><span class="s">(</span><span class="s">)</span></code>  (use only a single numeric argument). Changes to <code class="inline"><span class="i">$)</span></code>  require a check to <code class="inline"><span class="i">$!</span></code>  to detect any possible errors after an attempted change.</p><p><code class="inline"><span class="i">$&lt;</span></code> , <code class="inline"><span class="i">$&gt;</span></code> , <code class="inline"><span class="i">$(</span></code>  and <code class="inline"><span class="i">$)</span></code>  can be set only on machines that support the corresponding <i>set[re][ug]id()</i> routine.  <code class="inline"><span class="i">$(</span></code>  and <code class="inline"><span class="i">$)</span></code>  can be swapped only on machines supporting <code class="inline"><span class="i">setregid</span><span class="s">(</span><span class="s">)</span></code> .</p><p>Mnemonic: parentheses are used to <i>group</i> things.  The effective gid is the group that&#39;s <i>right</i> for you, if you&#39;re running setgid.</p></section>	http://perldoc.perl.org/perlvar.html#%24)
next (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>next LABEL<br>next EXPR<br>next</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> command is like the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> statement in C; it starts the next iteration of the loop:</p><pre class="verbatim"><ol><li>    <span class="j">LINE:</span> while <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">LINE</span> if <span class="q">/^#/</span><span class="sc">;</span>  <span class="c"># discard comments</span></li><li>        <span class="c">#...</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that if there were a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block on the above, it would get executed even on discarded lines.  If LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">EXPR</span></code>  form, available as of Perl 5.18.0, allows a label name to be computed at run time, being otherwise identical to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="j">LABEL</span></code> .</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> cannot be used to exit a block which returns a value such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span><span class="s">}</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.</p><p>Note that a block by itself is semantically identical to a loop that executes once.  Thus <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> will exit such a block early.</p><p>See also <span href="http://perldoc.perl.org/functions/continue.html">continue</span> for an illustration of how <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> work.</p><p>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>.</p></section>	http://perldoc.perl.org/functions/next.html
SelfLoader (module)	A			Perl Standard Modules							<section class="prog__container"><p>SelfLoader - load functions only on demand</p> <pre class="verbatim"><ol><li>    package FOOBAR;</li><li>    use SelfLoader;</li><li></li><li>    ... (initializing code)</li><li></li><li>    __DATA__</li><li>    sub {....</li></ol></pre></section>	http://perldoc.perl.org/SelfLoader.html
breakpoint (definition)	A			Perl Glossary							<section class="prog__container"><p>A spot in your program where you’ve told the debugger to stop <b>execution</b> so you can poke around and see whether anything is wrong yet.</p></section>	http://perldoc.perl.org/perlglossary.html#breakpoint
How do I make a system() exit on control-C?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>You can&#39;t. You need to imitate the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system()</span></code> call (see <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for sample code) and then have a signal handler for the INT signal that passes the signal on to the subprocess. Or you can check for it:</p><pre class="verbatim"><ol><li>    <span class="i">$rc</span> = <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="i">$cmd</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$rc</span> &amp; <span class="n">127</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;signal death&quot;</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-make-a-system()-exit-on-control-C%3f
Experimental subroutine signatures not enabled	A			Perl Diagnostics							<section class="prog__container"><p>(F) To use subroutine signatures, you must first enable them:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::signatures&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;signatures&quot;</span><span class="sc">;</span></li><li><span name="foo"></span>    sub <span class="m">foo ($left, $right)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Experimental-subroutine-signatures-not-enabled
I/O layer (definition)	A			Perl Glossary							<section class="prog__container"><p>One of the filters between the data and what you get as input or what you end up with as output.</p></section>	http://perldoc.perl.org/perlglossary.html#I%2fO-layer
Missing right curly or square bracket	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer counted more opening curly or square brackets than closing ones.  As a general rule, you&#39;ll find it&#39;s missing near the place you were last editing.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-right-curly-or-square-bracket
client (definition)	A			Perl Glossary							<section class="prog__container"><p>In networking, a <b>process</b> that initiates contact with a <b>server</b> process in order to exchange data and perhaps receive a service.</p></section>	http://perldoc.perl.org/perlglossary.html#client
dispatch (definition)	A			Perl Glossary							<section class="prog__container"><p>To send something to its correct destination. Often used metaphorically to indicate a transfer of programmatic control to a destination selected algorithmically, often by lookup in a table of function <b>references</b> or, in the case of object <b>methods</b>, by traversing the inheritance tree looking for the most specific definition for the method.</p></section>	http://perldoc.perl.org/perlglossary.html#dispatch
precedence (definition)	A			Perl Glossary							<section class="prog__container"><p>The rules of conduct that, in the absence of other guidance, determine what should happen first.  For example, in the absence of parentheses, you always do multiplication before addition.</p></section>	http://perldoc.perl.org/perlglossary.html#precedence
zero width (definition)	A			Perl Glossary							<section class="prog__container"><p>A subpattern <b>assertion</b> matching the <b>null string</b> between <b>characters</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#zero-width
To%s: illegal mapping '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to define a customized To-mapping for lc(), lcfirst, uc(), or ucfirst() (or their string-inlined versions), but you specified an illegal mapping. See <span href="http://perldoc.perl.org/perlunicode.html#User-Defined-Character-Properties">User-Defined Character Properties in perlunicode</span>.</p></section>	http://perldoc.perl.org/perldiag.html#To%25s%3a-illegal-mapping-'%25s'
Pod::Perldoc::ToRtf (module)	A			Perl Standard Modules		[[Pod::Simple::RTF]]\n[[Pod::Simple]]\n[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToRtf - let Perldoc render Pod as RTF</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -o <span class="w">rtf</span> <span class="w">Some::Modulename</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToRtf.html
TAP::Parser::Scheduler::Job (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Scheduler::Job - A single testing job.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Scheduler::Job</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Scheduler/Job.html
Binary "or" operator	A			Perl Operators\nPerl Logical or and Exclusive Or							<section class="prog__container">Binary &quot;or&quot; returns the logical disjunction of the two surrounding expressions. It&#39;s equivalent to || except for the very low precedence. This makes it useful for control flow:</section>	http://perldoc.perl.org/perlop.html#Logical-or-and-Exclusive-Or
What's an extension?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>An extension is a way of calling compiled C code from Perl. Reading <span href="http://perldoc.perl.org/perlxstut.html">perlxstut</span> is a good place to learn more about extensions.</p></section>	http://perldoc.perl.org/perlfaq7.html#What's-an-extension%3f
NaN (definition)	A			Perl Glossary							<section class="prog__container"><p>Not a number. The value Perl uses for certain invalid or inexpressible floating-point operations.</p></section>	http://perldoc.perl.org/perlglossary.html#NaN
Unsuccessful %s on filename containing newline	A			Perl Diagnostics							<section class="prog__container"><p>(W newline) A file operation was attempted on a filename, and that operation failed, PROBABLY because the filename contained a newline, PROBABLY because you forgot to chomp() it off.  See <span href="http://perldoc.perl.org/functions/chomp.html">chomp</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unsuccessful-%25s-on-filename-containing-newline
Use of freed value in iteration	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perhaps you modified the iterated array within the loop? This error is typically caused by code like the following:</p><pre class="verbatim"><ol><li>    <span class="i">@a</span> = <span class="s">(</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@a</span> = <span class="s">(</span><span class="s">)</span> for <span class="s">(</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="i">@a</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You are not supposed to modify arrays while they are being iterated over. For speed and efficiency reasons, Perl internally does not do full reference-counting of iterated items, hence deleting such an item in the middle of an iteration causes Perl to see a freed value.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-freed-value-in-iteration
Encode::Byte (module)	A			Perl Standard Modules		[[Encode]]					<section class="prog__container"><p>Encode::Byte - Single Byte Encodings</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span> </li><li>    <span class="i">$greek</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;iso-8859-7&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># loads Encode::Byte implicitly</span></li><li>    <span class="i">$utf8</span>  = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;iso-8859-7&quot;</span><span class="cm">,</span> <span class="i">$greek</span><span class="s">)</span><span class="sc">;</span> <span class="c"># ditto</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Byte.html
Switch Statements	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>    </p><p>Starting from Perl 5.10.1 (well, 5.10.0, but it didn&#39;t work right), you can say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;switch&quot;</span><span class="sc">;</span></li></ol></pre><p>to enable an experimental switch feature.  This is loosely based on an old version of a Perl 6 proposal, but it no longer resembles the Perl 6 construct.   You also get the switch feature whenever you declare that your code prefers to run under a version of Perl that is 5.10 or later.  For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.14</span><span class="sc">;</span></li></ol></pre><p>Under the &quot;switch&quot; feature, Perl gains the experimental keywords <code class="inline">given</code> , <code class="inline">when</code> , <code class="inline"><span class="w">default</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code>, and <code class="inline"><span class="w">break</span></code> . Starting from Perl 5.16, one can prefix the switch keywords with <code class="inline"><span class="w">CORE::</span></code>  to access the feature without a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span></code>  statement.  The keywords <code class="inline">given</code>  and <code class="inline">when</code>  are analogous to <code class="inline">switch</code>  and <code class="inline">case</code>  in other languages, so the code in the previous section could be rewritten as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10.1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$var</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^abc/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$abc</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^def/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$def</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^xyz/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$xyz</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="i">default</span>       <span class="s">{</span> <span class="i">$nothing</span> = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline">foreach</code>  is the non-experimental way to set a topicalizer. If you wish to use the highly experimental <code class="inline">given</code> , that could be written like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10.1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span> <span class="s">(</span><span class="i">$var</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^abc/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$abc</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^def/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$def</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">/^xyz/</span><span class="s">)</span> <span class="s">{</span> <span class="i">$xyz</span> = <span class="n">1</span> <span class="s">}</span></li><li>        <span class="i">default</span>       <span class="s">{</span> <span class="i">$nothing</span> = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>As of 5.14, that can also be written this way:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.14</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">$var</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$abc</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^abc/</span><span class="sc">;</span></li><li>        <span class="i">$def</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^def/</span><span class="sc">;</span></li><li>        <span class="i">$xyz</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^xyz/</span><span class="sc">;</span></li><li>        <span class="i">default</span> <span class="s">{</span> <span class="i">$nothing</span> = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Or if you don&#39;t care to play it safe, like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.14</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span> <span class="s">(</span><span class="i">$var</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$abc</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^abc/</span><span class="sc">;</span></li><li>        <span class="i">$def</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^def/</span><span class="sc">;</span></li><li>        <span class="i">$xyz</span> = <span class="n">1</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="q">/^xyz/</span><span class="sc">;</span></li><li>        <span class="i">default</span> <span class="s">{</span> <span class="i">$nothing</span> = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>The arguments to <code class="inline">given</code>  and <code class="inline">when</code>  are in scalar context, and <code class="inline">given</code>  assigns the <code class="inline"><span class="i">$_</span></code>  variable its topic value.</p><p>Exactly what the <i>EXPR</i> argument to <code class="inline">when</code>  does is hard to describe precisely, but in general, it tries to guess what you want done.  Sometimes it is interpreted as <code class="inline">$_ ~~ <i>EXPR</i></code>, and sometimes it is not.  It also behaves differently when lexically enclosed by a <code class="inline">given</code>  block than it does when dynamically enclosed by a <code class="inline">foreach</code>  loop.  The rules are far too difficult to understand to be described here.  See <span href="http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when">Experimental Details on given and when</span> later on.</p><p>Due to an unfortunate bug in how <code class="inline">given</code>  was implemented between Perl 5.10 and 5.16, under those implementations the version of <code class="inline"><span class="i">$_</span></code>  governed by <code class="inline">given</code>  is merely a lexically scoped copy of the original, not a dynamically scoped alias to the original, as it would be if it were a <code class="inline">foreach</code>  or under both the original and the current Perl 6 language specification.  This bug was fixed in Perl 5.18.  If you really want a lexical <code class="inline"><span class="i">$_</span></code> , specify that explicitly, but note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span></code>  is now deprecated and will warn unless warnings have been disabled:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span> = <span class="w">EXPR</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>If your code still needs to run on older versions, stick to <code class="inline">foreach</code>  for your topicalizer and you will be less unhappy.</p></section>	http://perldoc.perl.org/perlsyn.html#Switch-Statements
POSIX getpgrp can't take an argument	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your system has POSIX getpgrp(), which takes no argument, unlike the BSD version, which takes a pid.</p></section>	http://perldoc.perl.org/perldiag.html#POSIX-getpgrp-can't-take-an-argument
@INC (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The array <code class="inline"><span class="i">@INC</span></code>  contains the list of places that the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">EXPR</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> constructs look for their library files.  It initially consists of the arguments to any <b>-I</b> command-line switches, followed by the default Perl library, probably <i>/usr/local/lib/perl</i>, followed by &quot;.&quot;, to represent the current directory.  (&quot;.&quot; will not be appended if taint checks are enabled, either by <code class="inline">-T</code>  or by <code class="inline">-t</code> .)  If you need to modify this at runtime, you should use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span></code>  pragma to get the machine-dependent library properly loaded also:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="q">&#39;/mypath/libdir/&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SomeMod</span><span class="sc">;</span></li></ol></pre><p>You can also insert hooks into the file inclusion system by putting Perl code directly into <code class="inline"><span class="i">@INC</span></code> .  Those hooks may be subroutine references, array references or blessed objects.  See <span href="http://perldoc.perl.org/functions/require.html">require</span> for details.</p></section>	http://perldoc.perl.org/perlvar.html#%40INC
bless (definition)	A			Perl Glossary							<section class="prog__container"><p>In corporate life, to grant official approval to a thing, as in, “The VP of Engineering has blessed our WebCruncher project.” Similarly, in Perl, to grant official approval to a <b>referent</b> so that it can function as an <b>object</b>, such as a WebCruncher object. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span></code> function in Camel chapter 27, “Functions”.</p></section>	http://perldoc.perl.org/perlglossary.html#bless
Declarations	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>The only things you need to declare in Perl are report formats and subroutines (and sometimes not even subroutines).  A scalar variable holds the undefined value (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>) until it has been assigned a defined value, which is anything other than <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  When used as a number, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> is treated as <code class="inline"><span class="n">0</span></code> ; when used as a string, it is treated as the empty string, <code class="inline"><span class="q">&quot;&quot;</span></code> ; and when used as a reference that isn&#39;t being assigned to, it is treated as an error.  If you enable warnings, you&#39;ll be notified of an uninitialized value whenever you treat <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> as a string or a number.  Well, usually.  Boolean contexts, such as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$a</span><span class="s">)</span> <span class="s">{</span><span class="s">}</span></li></ol></pre><p>are exempt from warnings (because they care about truth rather than definedness).  Operators such as <code class="inline">++</code> , <code class="inline">--</code> , <code class="inline">+=</code> , <code class="inline">-=</code> , and <code class="inline">.=</code> , that operate on undefined variables such as:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$a</span><span class="sc">;</span></li><li>    <span class="i">$a</span>++<span class="sc">;</span></li></ol></pre><p>are also always exempt from such warnings.</p><p>A declaration can be put anywhere a statement can, but has no effect on the execution of the primary sequence of statements: declarations all take effect at compile time.  All declarations are typically put at the beginning or the end of the script.  However, if you&#39;re using lexically-scoped private variables created with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my()</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state()</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our()</span></code>, you&#39;ll have to make sure your format or subroutine definition is within the same block scope as the my if you expect to be able to access those private variables.</p><p>Declaring a subroutine allows a subroutine name to be used as if it were a list operator from that point forward in the program.  You can declare a subroutine without defining it by saying <code class="inline"><span name="name"></span>sub <span class="m">name</span></code> , thus: </p><pre class="verbatim"><ol><li>    sub <span class="m">myname</span><span class="sc">;</span></li><li>    <span class="i">$me</span> = <span class="i">myname</span> <span class="i">$0</span>             <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t get myname&quot;</span><span class="sc">;</span></li></ol></pre><p>A bare declaration like that declares the function to be a list operator, not a unary operator, so you have to be careful to use parentheses (or <code class="inline">or</code>  instead of <code class="inline">||</code>.)  The <code class="inline">||</code> operator binds too tightly to use after list operators; it becomes part of the last element.  You can always use parentheses around the list operators arguments to turn the list operator back into something that behaves more like a function call.  Alternatively, you can use the prototype <code class="inline"><span class="s">(</span><span class="i">$)</span></code>  to turn the subroutine into a unary operator:</p><pre class="verbatim"><ol><li>  sub <span class="m">myname ($)</span><span class="sc">;</span></li><li>  <span class="i">$me</span> = <span class="i">myname</span> <span class="i">$0</span>             || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t get myname&quot;</span><span class="sc">;</span></li></ol></pre><p>That now parses as you&#39;d expect, but you still ought to get in the habit of using parentheses in that situation.  For more on prototypes, see <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p><p>Subroutines declarations can also be loaded up with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> statement or both loaded and imported into your namespace with a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> statement. See <span href="http://perldoc.perl.org/perlmod.html">perlmod</span> for details on this.</p><p>A statement sequence may contain declarations of lexically-scoped variables, but apart from declaring a variable name, the declaration acts like an ordinary statement, and is elaborated within the sequence of statements as if it were an ordinary statement.  That means it actually has both compile-time and run-time effects.</p></section>	http://perldoc.perl.org/perlsyn.html#Declarations
IPC::Open3 (module)	A			Perl Standard Modules							<section class="prog__container"><p>IPC::Open3 - open a process for reading, writing, and error handling using open3()</p> <pre class="verbatim"><ol><li>    <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span>\\<span class="i">*CHLD_IN</span><span class="cm">,</span> \\<span class="i">*CHLD_OUT</span><span class="cm">,</span> \\<span class="i">*CHLD_ERR</span><span class="cm">,</span></li><li>&#09;&#09;    <span class="q">&#39;some cmd and args&#39;</span><span class="cm">,</span> <span class="q">&#39;optarg&#39;</span><span class="cm">,</span> ...<span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$wtr</span><span class="cm">,</span> <span class="i">$rdr</span><span class="cm">,</span> <span class="i">$err</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Symbol</span> <span class="q">&#39;gensym&#39;</span><span class="sc">;</span> <span class="i">$err</span> = <span class="w">gensym</span><span class="sc">;</span></li><li>    <span class="i">$pid</span> = <span class="i">open3</span><span class="s">(</span><span class="i">$wtr</span><span class="cm">,</span> <span class="i">$rdr</span><span class="cm">,</span> <span class="i">$err</span><span class="cm">,</span></li><li>&#09;&#09;    <span class="q">&#39;some cmd and args&#39;</span><span class="cm">,</span> <span class="q">&#39;optarg&#39;</span><span class="cm">,</span> ...<span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span><span class="s">(</span> <span class="i">$pid</span><span class="cm">,</span> <span class="n">0</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$child_exit_status</span> = <span class="i">$?</span> &gt;&gt; <span class="n">8</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/Open3.html
shell (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>command</b>-line <b>interpreter</b>. The program that interactively gives you a prompt, accepts one or more <b>lines</b> of input, and executes the programs you mentioned, feeding each of them their proper <b>arguments</b> and input data. Shells can also execute scripts containing such commands. Under Unix, typical shells include the Bourne shell (<i>/bin/sh</i>), the C shell (<i>/bin/csh</i>), and the Korn shell (<i>/bin/ksh</i>). Perl is not strictly a shell because it’s not interactive (although Perl programs can be interactive).</p></section>	http://perldoc.perl.org/perlglossary.html#shell
semget (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>semget KEY,NSEMS,FLAGS</pre><p>Calls the System V IPC function semget(2).  Returns the semaphore id, or the undefined value on error.  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span>, <code class="inline"><span class="w">IPC::SysV</span></code> , <code class="inline"><span class="w">IPC::SysV::Semaphore</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#semget">semget in perlport</span>.</p></section>	http://perldoc.perl.org/functions/semget.html
canonical (definition)	A			Perl Glossary							<section class="prog__container"><p>Reduced to a standard form to facilitate comparison.</p></section>	http://perldoc.perl.org/perlglossary.html#canonical
ExtUtils::Constant (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Constant - generate XS code to import C header constants</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Constant</span> <span class="q">qw (WriteConstants)</span><span class="sc">;</span></li><li>    <span class="i">WriteConstants</span><span class="s">(</span></li><li>        <span class="w">NAME</span> <span class="cm">=&gt;</span> <span class="q">&#39;Foo&#39;</span><span class="cm">,</span></li><li>        <span class="w">NAMES</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qw(FOO BAR BAZ)</span><span class="s">]</span><span class="cm">,</span></li><li>    <span class="s">)</span><span class="sc">;</span></li><li>    <span class="c"># Generates wrapper code to make the values of the constants FOO BAR BAZ</span></li><li>    <span class="c">#  available to perl</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Constant.html
Matched non-Unicode code point 0x%X against Unicode property; may not be portable	A			Perl Diagnostics							<section class="prog__container"><p>(S non_unicode) Perl allows strings to contain a superset of Unicode code points; each code point may be as large as what is storable in an unsigned integer on your system, but these may not be accepted by other languages/systems.  This message occurs when you matched a string containing such a code point against a regular expression pattern, and the code point was matched against a Unicode property, <code class="inline">\\<span class="i">p</span><span class="s">{</span>...<span class="s">}</span></code>  or <code class="inline">\\<span class="i">P</span><span class="s">{</span>...<span class="s">}</span></code> .  Unicode properties are only defined on Unicode code points, so the result of this match is undefined by Unicode, but Perl (starting in v5.20) treats non-Unicode code points as if they were typical unassigned Unicode ones, and matched this one accordingly.  Whether a given property matches these code points or not is specified in <span href="http://perldoc.perl.org/perluniprops.html#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d">Properties accessible through \\p{} and \\P{} in perluniprops</span>.</p><p>This message is suppressed (unless it has been made fatal) if it is immaterial to the results of the match if the code point is Unicode or not.  For example, the property <code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">ASCII_Hex_Digit</span><span class="s">}</span></code>  only can match the 22 characters <code class="inline"><span class="s">[</span><span class="n">0</span>-<span class="n">9</span><span class="w">A</span>-<span class="w">Fa</span>-f<span class="s">]</span></code> , so obviously all other code points, Unicode or not, won&#39;t match it.  (And <code class="inline">\\<span class="i">P</span><span class="s">{</span><span class="w">ASCII_Hex_Digit</span><span class="s">}</span></code>  will match every code point except these 22.)</p><p>Getting this message indicates that the outcome of the match arguably should have been the opposite of what actually happened.  If you think that is the case, you may wish to make the <code class="inline"><span class="w">non_unicode</span></code>  warnings category fatal; if you agree with Perl&#39;s decision, you may wish to turn off this category.</p><p>See <span href="http://perldoc.perl.org/perlunicode.html#Beyond-Unicode-code-points">Beyond Unicode code points in perlunicode</span> for more information.</p></section>	http://perldoc.perl.org/perldiag.html#Matched-non-Unicode-code-point-0x%25X-against-Unicode-property%3b-may-not-be-portable
CODE (definition)	A			Perl Glossary		[[CV]]					<section class="prog__container"><p>The word returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span></code> function when you apply it to a reference to a subroutine. </p></section>	http://perldoc.perl.org/perlglossary.html#CODE
subpattern (definition)	A			Perl Glossary							<section class="prog__container"><p>A component of a <b>regular expression</b> pattern.</p></section>	http://perldoc.perl.org/perlglossary.html#subpattern
regexp memory corruption	A			Perl Diagnostics							<section class="prog__container"><p>(P) The regular expression engine got confused by what the regular expression compiler gave it.</p></section>	http://perldoc.perl.org/perldiag.html#regexp-memory-corruption
owner (definition)	A			Perl Glossary							<section class="prog__container"><p>The one user (apart from the superuser) who has absolute control over a <b>file</b>. A file may also have a <b>group</b> of users who may exercise joint ownership if the real owner permits it. See <b>permission bits</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#owner
Unbalanced scopes: %d more ENTERs than LEAVEs	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) The exit code detected an internal inconsistency in how many blocks were entered and left.</p></section>	http://perldoc.perl.org/perldiag.html#Unbalanced-scopes%3a-%25d-more-ENTERs-than-LEAVEs
Net::SMTP (module)	A			Perl Standard Modules		[[Net::Cmd]]\n[[IO::Socket::SSL]]					<section class="prog__container"><p>Net::SMTP - Simple Mail Transfer Protocol Client</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::SMTP</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Constructors</span></li><li>    <span class="i">$smtp</span> = <span class="w">Net::SMTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;mailhost&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$smtp</span> = <span class="w">Net::SMTP</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;mailhost&#39;</span><span class="cm">,</span> <span class="w">Timeout</span> <span class="cm">=&gt;</span> <span class="n">60</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/SMTP.html
What is Plack and PSGI?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/PSGI">PSGI</span> is the Perl Web Server Gateway Interface Specification, it is a standard that many Perl web frameworks use, you should not need to understand it to build a web site, the part you might want to use is <span href="http://search.cpan.org/perldoc/Plack">Plack</span>.</p><p><span href="http://search.cpan.org/perldoc/Plack">Plack</span> is a set of tools for using the PSGI stack. It contains <span href="http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fsearch%3fq%3dplack%253A%253Amiddleware">middleware</span> components, a reference server and utilities for Web application frameworks. Plack is like Ruby&#39;s Rack or Python&#39;s Paste for WSGI.</p><p>You could build a web site using <span href="http://search.cpan.org/perldoc/Plack">Plack</span> and your own code, but for anything other than a very basic web site, using a web framework (that uses <span href="http://search.cpan.org/perldoc/Plack">Plack</span>) is a better option.</p></section>	http://perldoc.perl.org/perlfaq9.html#What-is-Plack-and-PSGI%3f
Null picture in formline	A			Perl Diagnostics							<section class="prog__container"><p>(F) The first argument to formline must be a valid format picture specification.  It was found to be empty, which probably means you supplied it an uninitialized value.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Null-picture-in-formline
$^L (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>What formats output as a form feed.  The default is <code class="inline">\\<span class="w">f</span></code> .</p><p>You cannot call <code class="inline"><span class="i">format_formfeed</span><span class="s">(</span><span class="s">)</span></code>  on a handle, only as a static method.  See <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eL
gmtime(%f) too large	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> with a number that was larger than it can reliably handle and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span></code> probably returned the wrong date.  This warning is also triggered with NaN (the special not-a-number value).</p></section>	http://perldoc.perl.org/perldiag.html#gmtime(%25f)-too-large
Can't modify reference to localized parenthesized array in list assignment	A			Perl Diagnostics							<section class="prog__container"><p>(F) Assigning to <code class="inline">\\<span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span><span class="i">@array</span><span class="s">)</span></code>  or <code class="inline">\\<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">@array</span><span class="s">)</span></code>  is not supported, as it is not clear exactly what it should do.  If you meant to make @array refer to some other array, use <code class="inline">\\<span class="i">@array</span> = \\<span class="i">@other_array</span></code> .  If you want to make the elements of @array aliases of the scalars referenced on the right-hand side, use <code class="inline">\\<span class="s">(</span><span class="i">@array</span><span class="s">)</span> = <span class="i">@scalar_refs</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-reference-to-localized-parenthesized-array-in-list-assignment
exec? I'm not *that* kind of operating system	A			Perl Diagnostics							<section class="prog__container"><p>(F) The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> function is not implemented on some systems, e.g., Symbian OS.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span>.</p></section>	http://perldoc.perl.org/perldiag.html#exec%3f-I'm-not-*that*-kind-of-operating-system
Experimental Details on given and when	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>As previously mentioned, the &quot;switch&quot; feature is considered highly experimental; it is subject to change with little notice.  In particular, <code class="inline">when</code>  has tricky behaviours that are expected to change to become less tricky in the future.  Do not rely upon its current (mis)implementation. Before Perl 5.18, <code class="inline">given</code>  also had tricky behaviours that you should still beware of if your code must run on older versions of Perl.</p><p>Here is a longer example of <code class="inline">given</code> :</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;:5.10&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span> <span class="s">(</span><span class="i">$foo</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&#39;$foo is undefined&#39;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&#39;$foo is the string &quot;foo&quot;&#39;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="s">[</span><span class="n">1</span><span class="cm">,</span><span class="n">3</span><span class="cm">,</span><span class="n">5</span><span class="cm">,</span><span class="n">7</span><span class="cm">,</span><span class="n">9</span><span class="s">]</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&#39;$foo is an odd digit&#39;</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span><span class="sc">;</span> <span class="c"># Fall through</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="i">$_</span> &lt; <span class="n">100</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&#39;$foo is numerically less than 100&#39;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span>\\<span class="i">&amp;complicated_check</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&#39;a complicated check for $foo is true&#39;</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="i">default</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">q(I don&#39;t know what to do with $foo)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Before Perl 5.18, <code class="inline">given<span class="s">(</span><span class="w">EXPR</span><span class="s">)</span></code>  assigned the value of <i>EXPR</i> to merely a lexically scoped <i><b>copy</b></i> (!) of <code class="inline"><span class="i">$_</span></code> , not a dynamically scoped alias the way <code class="inline">foreach</code>  does.  That made it similar to</p><pre class="verbatim"><ol><li>        <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span> = <span class="w">EXPR</span><span class="sc">;</span> ... <span class="s">}</span></li></ol></pre><p>except that the block was automatically broken out of by a successful <code class="inline">when</code>  or an explicit <code class="inline"><span class="w">break</span></code> .  Because it was only a copy, and because it was only lexically scoped, not dynamically scoped, you could not do the things with it that you are used to in a <code class="inline">foreach</code>  loop.  In particular, it did not work for arbitrary function calls if those functions might try to access $_.  Best stick to <code class="inline">foreach</code>  for that.</p><p>Most of the power comes from the implicit smartmatching that can sometimes apply.  Most of the time, <code class="inline">when<span class="s">(</span><span class="w">EXPR</span><span class="s">)</span></code>  is treated as an implicit smartmatch of <code class="inline"><span class="i">$_</span></code> , that is, <code class="inline"><span class="i">$_</span> ~~ <span class="w">EXPR</span></code> .  (See <span href="http://perldoc.perl.org/perlop.html#Smartmatch-Operator">Smartmatch Operator in perlop</span> for more information on smartmatching.) But when <i>EXPR</i> is one of the 10 exceptional cases (or things like them) listed below, it is used directly as a boolean.</p><p>In those 8 cases above, the value of EXPR is used directly as a boolean, so no smartmatching is done.  You may think of <code class="inline">when</code>  as a smartsmartmatch.</p><p>Furthermore, Perl inspects the operands of logical operators to decide whether to use smartmatching for each one by applying the above test to the operands:</p><p>These rules are complicated, but the goal is for them to do what you want (even if you don&#39;t quite understand why they are doing it).  For example:</p><pre class="verbatim"><ol><li>    when <span class="s">(</span><span class="q">/^\\d+$/</span> &amp;&amp; <span class="i">$_</span> &lt; <span class="n">75</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>will be treated as a boolean match because the rules say both a regex match and an explicit test on <code class="inline"><span class="i">$_</span></code>  will be treated as boolean.</p><p>Also:</p><pre class="verbatim"><ol><li>    when <span class="s">(</span><span class="s">[</span><span class="q">qw(foo bar)</span><span class="s">]</span> &amp;&amp; <span class="q">/baz/</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>will use smartmatching because only <i>one</i> of the operands is a boolean: the other uses smartmatching, and that wins.</p><p>Further:</p><pre class="verbatim"><ol><li>    when <span class="s">(</span><span class="s">[</span><span class="q">qw(foo bar)</span><span class="s">]</span> || <span class="q">/^baz/</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>will use smart matching (only the first operand is considered), whereas</p><pre class="verbatim"><ol><li>    when <span class="s">(</span><span class="q">/^baz/</span> || <span class="s">[</span><span class="q">qw(foo bar)</span><span class="s">]</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>will test only the regex, which causes both operands to be treated as boolean.  Watch out for this one, then, because an arrayref is always a true value, which makes it effectively redundant.  Not a good idea.</p><p>Tautologous boolean operators are still going to be optimized away.  Don&#39;t be tempted to write</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="q">&quot;bar&quot;</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>This will optimize down to <code class="inline"><span class="q">&quot;foo&quot;</span></code> , so <code class="inline"><span class="q">&quot;bar&quot;</span></code>  will never be considered (even though the rules say to use a smartmatch on <code class="inline"><span class="q">&quot;foo&quot;</span></code> ).  For an alternation like this, an array ref will work, because this will instigate smartmatching:</p><pre class="verbatim"><ol><li>    when <span class="s">(</span><span class="s">[</span><span class="q">qw(foo bar)</span><span class="s">]</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>This is somewhat equivalent to the C-style switch statement&#39;s fallthrough functionality (not to be confused with <i>Perl&#39;s</i> fallthrough functionality--see below), wherein the same block is used for several <code class="inline">case</code>  statements.</p><p>Another useful shortcut is that, if you use a literal array or hash as the argument to <code class="inline">given</code> , it is turned into a reference.  So <code class="inline">given<span class="s">(</span><span class="i">@foo</span><span class="s">)</span></code>  is the same as <code class="inline">given<span class="s">(</span>\\<span class="i">@foo</span><span class="s">)</span></code> , for example.</p><p><code class="inline"><span class="w">default</span></code>  behaves exactly like <code class="inline">when<span class="s">(</span><span class="n">1</span> == <span class="n">1</span><span class="s">)</span></code> , which is to say that it always matches.</p></section>	http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when
Cannot find encoding "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(S io) You tried to apply an encoding that did not exist to a filehandle, either with open() or binmode().</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-find-encoding-%22%25s%22
Tie::StdHandle (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::StdHandle - base class definitions for tied handles</p> <pre class="verbatim"><ol><li><span name="package-NewHandle"></span>    package <span class="i">NewHandle</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Handle</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::Handle)</span><span class="sc">;</span></li><li></li><li><span name="READ"></span>    sub <span class="m">READ</span> <span class="s">{</span> ... <span class="s">}</span>&#09;&#09;<span class="c"># Provide a needed method</span></li><li><span name="TIEHANDLE"></span>    sub <span class="m">TIEHANDLE</span> <span class="s">{</span> ... <span class="s">}</span>&#09;<span class="c"># Overrides inherited method</span></li><li></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">*FH</span><span class="cm">,</span> <span class="q">&#39;NewHandle&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/StdHandle.html
Useless use of \E	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You have a \\E in a double-quotish string without a <code class="inline">\\<span class="w">U</span></code> , <code class="inline">\\<span class="w">L</span></code>  or <code class="inline">\\<span class="w">Q</span></code>  preceding it.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-%5cE
property (definition)	A			Perl Glossary							<section class="prog__container"><p>See either <b>instance variable</b> or <b>character property</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#property
lvaluable (definition)	A			Perl Glossary							<section class="prog__container"><p>Able to serve as an <b>lvalue</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#lvaluable
File::Spec (module)	A			Perl Standard Modules		[[File::Spec::Unix]]\n[[File::Spec::Mac]]\n[[File::Spec::OS2]]\n[[File::Spec::Win32]]\n[[File::Spec::VMS]]\n[[File::Spec::Functions]]\n[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>File::Spec - portably perform operations on file names</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$x</span>=<span class="w">File::Spec</span><span class="w">-&gt;catfile</span><span class="s">(</span><span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="q">&#39;b&#39;</span><span class="cm">,</span> <span class="q">&#39;c&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>which returns &#39;a/b/c&#39; under Unix. Or:</p><pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec::Functions</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$x</span> = <span class="i">catfile</span><span class="s">(</span><span class="q">&#39;a&#39;</span><span class="cm">,</span> <span class="q">&#39;b&#39;</span><span class="cm">,</span> <span class="q">&#39;c&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec.html
do (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Keywords related to perl modules							<section class="prog__container"><pre>do BLOCK<br>do EXPR</pre><p>Uses the value of EXPR as a filename and executes the contents of the file as a Perl script.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="q">&#39;stat.pl&#39;</span><span class="sc">;</span></li></ol></pre><p>is largely like</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">`cat stat.pl`</span><span class="sc">;</span></li></ol></pre><p>except that it&#39;s more concise, runs no external processes, keeps track of the current filename for error messages, searches the <code class="inline"><span class="i">@INC</span></code>  directories, and updates <code class="inline"><span class="i">%INC</span></code>  if the file is found.  See <span href="http://perldoc.perl.org/perlvar.html#%40INC">@INC in perlvar</span> and <span href="http://perldoc.perl.org/perlvar.html#%25INC">%INC in perlvar</span> for these variables.  It also differs in that code evaluated with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">FILENAME</span></code>  cannot see lexicals in the enclosing scope; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">STRING</span></code>  does.  It&#39;s the same, however, in that it does reparse the file every time you call it, so you probably don&#39;t want to do this inside a loop.</p><p>If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> can read the file but cannot compile it, it returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> and sets an error message in <code class="inline"><span class="i">$@</span></code> .  If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> cannot read the file, it returns undef and sets <code class="inline"><span class="i">$!</span></code>  to the error.  Always check <code class="inline"><span class="i">$@</span></code>  first, as compilation could fail in a way that also sets <code class="inline"><span class="i">$!</span></code> .  If the file is successfully compiled, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> returns the value of the last expression evaluated.</p><p>Inclusion of library modules is better done with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> operators, which also do automatic error checking and raise an exception if there&#39;s a problem.</p><p>You might like to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> to read in a program configuration file.  Manual error checking can be done this way:</p><pre class="verbatim"><ol><li>    <span class="c"># read in config files: system first, then user</span></li><li>    for <span class="i">$file</span> <span class="s">(</span><span class="q">&quot;/share/prog/defaults.rc&quot;</span><span class="cm">,</span></li><li>               <span class="q">&quot;$ENV{HOME}/.someprogrc&quot;</span><span class="s">)</span></li><li>    <span class="s">{</span></li><li>        unless <span class="s">(</span><span class="i">$return</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="i">$file</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;couldn&#39;t parse $file: $@&quot;</span> if <span class="i">$@</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;couldn&#39;t do $file: $!&quot;</span>    unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$return</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;couldn&#39;t run $file&quot;</span>       unless <span class="i">$return</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/do.html
Malformed integer in [] in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) Between the brackets enclosing a numeric repeat count only digits are permitted.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-integer-in-%5b%5d-in-pack
%s() called too early to check prototype	A			Perl Diagnostics							<section class="prog__container"><p>(W prototype) You&#39;ve called a function that has a prototype before the parser saw a definition or declaration for it, and Perl could not check that the call conforms to the prototype.  You need to either add an early prototype declaration for the subroutine in question, or move the subroutine definition ahead of the call to get proper prototype checking.  Alternatively, if you are certain that you&#39;re calling the function correctly, you may put an ampersand before the name to avoid the warning.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%25s()-called-too-early-to-check-prototype
NULL regexp parameter	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal pattern matching routines are out of their gourd.</p></section>	http://perldoc.perl.org/perldiag.html#NULL-regexp-parameter
Archive::Tar::File (module)	A			Perl Standard Modules							<section class="prog__container"><p>Archive::Tar::File - a subclass for in-memory extracted file from Archive::Tar</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@items</span> = <span class="i">$tar</span><span class="i">-&gt;get_files</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$_</span><span class="i">-&gt;name</span><span class="cm">,</span> <span class="q">&#39; &#39;</span><span class="cm">,</span> <span class="i">$_</span><span class="i">-&gt;size</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span> for <span class="i">@items</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$object</span><span class="i">-&gt;get_content</span><span class="sc">;</span></li><li>    <span class="i">$object</span><span class="i">-&gt;replace_content</span><span class="s">(</span><span class="q">&#39;new content&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$object</span><span class="i">-&gt;rename</span><span class="s">(</span> <span class="q">&#39;new/full/path/to/file.c&#39;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Archive/Tar/File.html
-X (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>-X FILEHANDLE<br>-X EXPR<br>-X DIRHANDLE<br>-X</pre><p>A file test, where X is one of the letters listed below.  This unary operator takes one argument, either a filename, a filehandle, or a dirhandle,  and tests the associated file to see if something is true about it.  If the argument is omitted, tests <code class="inline"><span class="i">$_</span></code> , except for <code class="inline">-t</code> , which tests STDIN. Unless otherwise documented, it returns <code class="inline"><span class="n">1</span></code>  for true and <code class="inline"><span class="q">&#39;&#39;</span></code>  for false. If the file doesn&#39;t exist or can&#39;t be examined, it returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> and sets <code class="inline"><span class="i">$!</span></code>  (errno).  Despite the funny names, precedence is the same as any other named unary operator.  The operator may be any of:</p><pre class="verbatim"><ol><li>    -r  <span class="w">File</span> <span class="w">is</span> <span class="w">readable</span> <span class="w">by</span> <span class="w">effective</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    -w  <span class="w">File</span> <span class="w">is</span> <span class="w">writable</span> <span class="w">by</span> <span class="w">effective</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    -x  <span class="w">File</span> <span class="w">is</span> <span class="w">executable</span> <span class="w">by</span> <span class="w">effective</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    -o  <span class="w">File</span> <span class="w">is</span> <span class="w">owned</span> <span class="w">by</span> <span class="w">effective</span> <span class="w">uid</span>.</li><li></li><li>    -R  <span class="w">File</span> <span class="w">is</span> <span class="w">readable</span> <span class="w">by</span> <span class="w">real</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    -W  <span class="w">File</span> <span class="w">is</span> <span class="w">writable</span> <span class="w">by</span> <span class="w">real</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/-X.html">-X</span>  <span class="w">File</span> <span class="w">is</span> <span class="w">executable</span> <span class="w">by</span> <span class="w">real</span> <span class="w">uid</span>/<span class="w">gid</span>.</li><li>    -O  <span class="w">File</span> <span class="w">is</span> <span class="w">owned</span> <span class="w">by</span> <span class="w">real</span> <span class="w">uid</span>.</li><li></li><li>    -e  <span class="w">File</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span>.</li><li>    -z  <span class="w">File</span> <span class="w">has</span> <span class="w">zero</span> <span class="w">size</span> <span class="s">(</span><span class="w">is</span> <span class="w">empty</span><span class="s">)</span>.</li><li>    -s  <span class="w">File</span> <span class="w">has</span> <span class="w">nonzero</span> <span class="w">size</span> <span class="s">(</span><span class="w">returns</span> <span class="w">size</span> <span class="w">in</span> <span class="w">bytes</span><span class="s">)</span>.</li><li></li><li>    -f  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">plain</span> <span class="w">file</span>.</li><li>    -d  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">directory</span>.</li><li>    -l  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">symbolic</span> <span class="l_k" href="http://perldoc.perl.org/functions/link.html">link</span> <span class="s">(</span><span class="w">false</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">symlinks</span> <span class="w">aren&#39;t</span></li><li>        <span class="w">supported</span> <span class="w">by</span> <span class="w">the</span> <span class="w">file</span> <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">)</span>.</li><li>    -p  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">named</span> <span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span> <span class="s">(</span><span class="w">FIFO</span><span class="s">)</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">Filehandle</span> <span class="w">is</span> <span class="w">a</span> <span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span>.</li><li>    -S  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="l_k" href="http://perldoc.perl.org/functions/socket.html">socket</span>.</li><li>    -b  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">block</span> <span class="w">special</span> <span class="w">file</span>.</li><li>    -c  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="w">character</span> <span class="w">special</span> <span class="w">file</span>.</li><li>    -t  <span class="w">Filehandle</span> <span class="w">is</span> <span class="w">opened</span> <span class="w">to</span> <span class="w">a</span> <span class="w">tty</span>.</li><li></li><li>    -u  <span class="w">File</span> <span class="w">has</span> <span class="w">setuid</span> <span class="w">bit</span> <span class="w">set</span>.</li><li>    -g  <span class="w">File</span> <span class="w">has</span> <span class="w">setgid</span> <span class="w">bit</span> <span class="w">set</span>.</li><li>    -k  <span class="w">File</span> <span class="w">has</span> <span class="w">sticky</span> <span class="w">bit</span> <span class="w">set</span>.</li><li></li><li>    -T  <span class="w">File</span> <span class="w">is</span> <span class="w">an</span> <span class="w">ASCII</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">UTF</span>-<span class="n">8</span> <span class="w">text</span> <span class="w">file</span> <span class="s">(</span><span class="w">heuristic</span> <span class="w">guess</span><span class="s">)</span>.</li><li>    -B  <span class="w">File</span> <span class="w">is</span> <span class="w">a</span> <span class="q">&quot;binary&quot;</span> <span class="w">file</span> <span class="s">(</span><span class="w">opposite</span> <span class="w">of</span> -T<span class="s">)</span>.</li><li></li><li>    -M  <span class="w">Script</span> <span class="w">start</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span> <span class="w">minus</span> <span class="w">file</span> <span class="w">modification</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="cm">,</span> <span class="w">in</span> <span class="w">days</span>.</li><li>    -A  <span class="w">Same</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">access</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span>.</li><li>    -C  <span class="w">Same</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">inode</span> <span class="w">change</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span> <span class="s">(</span><span class="w">Unix</span><span class="cm">,</span> <span class="w">may</span> <span class="w">differ</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">other</span></li><li>&#09;<span class="w">platforms</span><span class="s">)</span></li></ol></pre><p>Example:</p><pre class="verbatim"><ol><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> unless -f <span class="i">$_</span><span class="sc">;</span>  <span class="c"># ignore specials</span></li><li>        <span class="c">#...</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that <code class="inline">-s/a/b/</code> does not do a negated substitution.  Saying <code class="inline">-<span class="l_k" href="http://perldoc.perl.org/functions/exp.html">exp</span><span class="s">(</span><span class="i">$foo</span><span class="s">)</span></code>  still works as expected, however: only single letters following a minus are interpreted as file tests.</p><p>These operators are exempt from the &quot;looks like a function rule&quot; described above.  That is, an opening parenthesis after the operator does not affect how much of the following code constitutes the argument.  Put the opening parentheses before the operator to separate it from code that follows (this applies only to operators with higher precedence than unary operators, of course):</p><pre class="verbatim"><ol><li>    -s<span class="s">(</span><span class="i">$file</span><span class="s">)</span> + <span class="n">1024</span>   <span class="c"># probably wrong; same as -s($file + 1024)</span></li><li>    <span class="s">(</span>-s <span class="i">$file</span><span class="s">)</span> + <span class="n">1024</span>  <span class="c"># correct</span></li></ol></pre><p>The interpretation of the file permission operators <code class="inline">-r</code> , <code class="inline">-R</code> , <code class="inline">-w</code> , <code class="inline">-W</code> , <code class="inline">-x</code> , and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/-X.html">-X</span></code> is by default based solely on the mode of the file and the uids and gids of the user.  There may be other reasons you can&#39;t actually read, write, or execute the file: for example network filesystem access controls, ACLs (access control lists), read-only filesystems, and unrecognized executable formats.  Note that the use of these six specific operators to verify if some operation is possible is usually a mistake, because it may be open to race conditions.</p><p>Also note that, for the superuser on the local filesystems, the <code class="inline">-r</code> , <code class="inline">-R</code> , <code class="inline">-w</code> , and <code class="inline">-W</code>  tests always return 1, and <code class="inline">-x</code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/-X.html">-X</span></code> return 1 if any execute bit is set in the mode.  Scripts run by the superuser may thus need to do a stat() to determine the actual mode of the file, or temporarily set their effective uid to something else.</p><p>If you are using ACLs, there is a pragma called <code class="inline"><span class="w">filetest</span></code>  that may produce more accurate results than the bare stat() mode bits. When under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">filetest</span> <span class="q">&#39;access&#39;</span></code>  the above-mentioned filetests test whether the permission can(not) be granted using the access(2) family of system calls.  Also note that the <code class="inline">-x</code>  and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/-X.html">-X</span></code> may under this pragma return true even if there are no execute permission bits set (nor any extra execute permission ACLs).  This strangeness is due to the underlying system calls&#39; definitions.  Note also that, due to the implementation of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">filetest</span> <span class="q">&#39;access&#39;</span></code> , the <code class="inline"><span class="w">_</span></code>  special filehandle won&#39;t cache the results of the file tests when this pragma is in effect.  Read the documentation for the <code class="inline"><span class="w">filetest</span></code>  pragma for more information.</p><p>The <code class="inline">-T</code>  and <code class="inline">-B</code>  switches work as follows.  The first block or so of the file is examined to see if it is valid UTF-8 that includes non-ASCII characters.  If, so it&#39;s a <code class="inline">-T</code>  file.  Otherwise, that same portion of the file is examined for odd characters such as strange control codes or characters with the high bit set.  If more than a third of the characters are strange, it&#39;s a <code class="inline">-B</code>  file; otherwise it&#39;s a <code class="inline">-T</code>  file. Also, any file containing a zero byte in the examined portion is considered a binary file.  (If executed within the scope of a <span href="http://perldoc.perl.org/perllocale.html">use locale</span> which includes <code class="inline"><span class="w">LC_CTYPE</span></code> , odd characters are anything that isn&#39;t a printable nor space in the current locale.)  If <code class="inline">-T</code>  or <code class="inline">-B</code>  is used on a filehandle, the current IO buffer is examined rather than the first block.  Both <code class="inline">-T</code>  and <code class="inline">-B</code>  return true on an empty file, or a file at EOF when testing a filehandle.  Because you have to read a file to do the <code class="inline">-T</code>  test, on most occasions you want to use a <code class="inline">-f</code>  against the file first, as in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> unless -f <span class="i">$file</span> &amp;&amp; -T <span class="i">$file</span></code> .</p><p>If any of the file tests (or either the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lstat.html">lstat</span></code> operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call.  (This doesn&#39;t work with <code class="inline">-t</code> , and you need to remember that lstat() and <code class="inline">-l</code>  leave values in the stat structure for the symbolic link, not the real file.)  (Also, if the stat buffer was filled by an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/lstat.html">lstat</span></code> call, <code class="inline">-T</code>  and <code class="inline">-B</code>  will reset it with the results of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span> <span class="w">_</span></code> ). Example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Can do.\\n&quot;</span> if -r <span class="i">$a</span> || -w <span class="i">_</span> || -x <span class="i">_</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Readable\\n&quot;</span> if -r <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Writable\\n&quot;</span> if -w <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Executable\\n&quot;</span> if -x <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Setuid\\n&quot;</span> if -u <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Setgid\\n&quot;</span> if -g <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Sticky\\n&quot;</span> if -k <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Text\\n&quot;</span> if -T <span class="i">_</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Binary\\n&quot;</span> if -B <span class="i">_</span><span class="sc">;</span></li></ol></pre><p>As of Perl 5.10.0, as a form of purely syntactic sugar, you can stack file test operators, in a way that <code class="inline">-f -w -x <span class="i">$file</span></code>  is equivalent to <code class="inline">-x <span class="i">$file</span> &amp;&amp; -w <span class="i">_</span> &amp;&amp; -f <span class="i">_</span></code> .  (This is only fancy syntax: if you use the return value of <code class="inline">-f <span class="i">$file</span></code>  as an argument to another filetest operator, no special magic will happen.)</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#-X">-X in perlport</span>.</p><p>To avoid confusing would-be users of your code with mysterious syntax errors, put something like this at the top of your script:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span><span class="sc">;</span>  <span class="c"># so filetest ops can stack</span></li></ol></pre></section>	http://perldoc.perl.org/functions/-X.html
Encode::Encoding (module)	A			Perl Standard Modules		[[perlmod]]\n[[enc2xs]]					<section class="prog__container"><p>Encode::Encoding - Encode Implementation Base Class</p> <pre class="verbatim"><ol><li><span name="package-Encode::MyEncoding"></span>  package <span class="i">Encode::MyEncoding</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">parent</span> <span class="q">qw(Encode::Encoding)</span><span class="sc">;</span></li><li></li><li>  <span class="w">__PACKAGE__</span><span class="w">-&gt;Define</span><span class="s">(</span><span class="q">qw(myCanonical myAlias)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Encoding.html
local (definition)	A			Perl Glossary							<section class="prog__container"><p>Not meaning the same thing everywhere. A global variable in Perl can be localized inside a <b>dynamic scope</b> via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> operator.</p></section>	http://perldoc.perl.org/perlglossary.html#local
feeping creaturism (definition)	A			Perl Glossary							<section class="prog__container"><p>A spoonerism of “creeping featurism”, noting the biological urge to add just one more feature to a program.</p></section>	http://perldoc.perl.org/perlglossary.html#feeping-creaturism
substr (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>substr EXPR,OFFSET,LENGTH,REPLACEMENT<br>substr EXPR,OFFSET,LENGTH<br>substr EXPR,OFFSET</pre><p>Extracts a substring out of EXPR and returns it.  First character is at offset zero.  If OFFSET is negative, starts that far back from the end of the string.  If LENGTH is omitted, returns everything through the end of the string.  If LENGTH is negative, leaves that many characters off the end of the string.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s</span> = <span class="q">&quot;The black cat climbed the green tree&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$color</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">5</span><span class="sc">;</span>      <span class="c"># black</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$middle</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">-11</span><span class="sc">;</span>    <span class="c"># black cat climbed the</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$end</span>    = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">14</span><span class="sc">;</span>        <span class="c"># climbed the green tree</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tail</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">-4</span><span class="sc">;</span>        <span class="c"># tree</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span>      = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">-4</span><span class="cm">,</span> <span class="n">2</span><span class="sc">;</span>     <span class="c"># tr</span></li></ol></pre><p>You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue.  If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it.  To keep the string the same length, you may need to pad or chop your value using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span></code>.</p><p>If OFFSET and LENGTH specify a substring that is partly outside the string, only the part within the string is returned.  If the substring is beyond either end of the string, substr() returns the undefined value and produces a warning.  When used as an lvalue, specifying a substring that is entirely outside the string raises an exception. Here&#39;s an example showing the behavior for boundary cases:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$name</span> = <span class="q">&#39;fred&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$name</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="q">&#39;dy&#39;</span><span class="sc">;</span>         <span class="c"># $name is now &#39;freddy&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$null</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$name</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">2</span><span class="sc">;</span>   <span class="c"># returns &quot;&quot; (no warning)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$oops</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$name</span><span class="cm">,</span> <span class="n">7</span><span class="sc">;</span>      <span class="c"># returns undef, with warning</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$name</span><span class="cm">,</span> <span class="n">7</span><span class="s">)</span> = <span class="q">&#39;gap&#39;</span><span class="sc">;</span>        <span class="c"># raises an exception</span></li></ol></pre><p>An alternative to using substr() as an lvalue is to specify the replacement string as the 4th argument.  This allows you to replace parts of the EXPR and return what was there before in one operation, just as you can with splice().</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s</span> = <span class="q">&quot;The black cat climbed the green tree&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span> <span class="i">$s</span><span class="cm">,</span> <span class="n">14</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="q">&quot;jumped from&quot;</span><span class="sc">;</span>    <span class="c"># climbed</span></li><li>    <span class="c"># $s is now &quot;The black cat jumped from the green tree&quot;</span></li></ol></pre><p>Note that the lvalue returned by the three-argument version of substr() acts as a &#39;magic bullet&#39;; each time it is assigned to, it remembers which part of the original string is being modified; for example:</p><pre class="verbatim"><ol><li>    <span class="i">$x</span> = <span class="q">&#39;1234&#39;</span><span class="sc">;</span></li><li>    for <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$x</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$_</span> = <span class="q">&#39;a&#39;</span><span class="sc">;</span>   <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span>    <span class="c"># prints 1a4</span></li><li>        <span class="i">$_</span> = <span class="q">&#39;xyz&#39;</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span>    <span class="c"># prints 1xyz4</span></li><li>        <span class="i">$x</span> = <span class="q">&#39;56789&#39;</span><span class="sc">;</span></li><li>        <span class="i">$_</span> = <span class="q">&#39;pq&#39;</span><span class="sc">;</span>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span>    <span class="c"># prints 5pq9</span></li><li>    <span class="s">}</span></li></ol></pre><p>With negative offsets, it remembers its position from the end of the string when the target string is modified:</p><pre class="verbatim"><ol><li>    <span class="i">$x</span> = <span class="q">&#39;1234&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$x</span><span class="cm">,</span> <span class="n">-3</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$_</span> = <span class="q">&#39;a&#39;</span><span class="sc">;</span>   <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$x</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span>    <span class="c"># prints 1a4, as above</span></li><li>        <span class="i">$x</span> = <span class="q">&#39;abcdefg&#39;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$_</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span>                <span class="c"># prints f</span></li><li>    <span class="s">}</span></li></ol></pre><p>Prior to Perl version 5.10, the result of using an lvalue multiple times was unspecified.  Prior to 5.16, the result with negative offsets was unspecified.</p></section>	http://perldoc.perl.org/functions/substr.html
%s syntax OK	A			Perl Diagnostics							<section class="prog__container"><p>(F) The final summary message when a <code class="inline"><span class="w">perl</span> -c</code>  succeeds.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-syntax-OK
Use of %s is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) The construct indicated is no longer recommended for use, generally because there&#39;s a better way to do it, and also because the old way has bad side effects.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%25s-is-deprecated
Too deeply nested ()-groups	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your template contains ()-groups with a ridiculously deep nesting level.</p></section>	http://perldoc.perl.org/perldiag.html#Too-deeply-nested-()-groups
unless (function)	A			Perl Functions							<section class="prog__container"><pre>unless</pre><p>These flow-control keywords are documented in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/unless.html
Memoize::AnyDBM_File (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::AnyDBM_File - glue to provide EXISTS for AnyDBM_File for Storable use</p> </section>	http://perldoc.perl.org/Memoize/AnyDBM_File.html
Should I use a web framework?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Yes. If you are building a web site with any level of interactivity (forms / users / databases), you will want to use a framework to make handling requests and responses easier.</p><p>If there is no interactivity then you may still want to look at using something like <span href="http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fmodule%2fTemplate">Template Toolkit</span> or <span href="http://search.cpan.org/perldoc/Plack::Middleware::TemplateToolkit">Plack::Middleware::TemplateToolkit</span> so maintenance of your HTML files (and other assets) is easier.</p></section>	http://perldoc.perl.org/perlfaq9.html#Should-I-use-a-web-framework%3f
Duplicate modifier '%c' after '%c' in %s	A			Perl Diagnostics							<section class="prog__container"><p>(W unpack) You have applied the same modifier more than once after a type in a pack template.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Duplicate-modifier-'%25c'-after-'%25c'-in-%25s
TAP::Formatter::Color (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Color - Run Perl test scripts with color</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Formatter::Color</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$harness</span> = <span class="w">TAP::Formatter::Color</span><span class="w">-&gt;new</span><span class="s">(</span> \\<span class="i">%args</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$harness</span><span class="i">-&gt;runtests</span><span class="s">(</span><span class="i">@tests</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Formatter/Color.html
srand (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>srand EXPR<br>srand</pre><p>Sets and returns the random number seed for the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span></code> operator.</p><p>The point of the function is to &quot;seed&quot; the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span></code> function so that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span></code> can produce a different sequence each time you run your program.  When called with a parameter, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> uses that for the seed; otherwise it (semi-)randomly chooses a seed.  In either case, starting with Perl 5.14, it returns the seed.  To signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so srand returns the seed</span></li></ol></pre><p>If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand()</span></code> is not called explicitly, it is called implicitly without a parameter at the first use of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span></code> operator. However, there are a few situations where programs are likely to want to call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code>.  One is for generating predictable results, generally for testing or debugging.  There, you use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand($seed)</span></code>, with the same <code class="inline"><span class="i">$seed</span></code>  each time.  Another case is that you may want to call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand()</span></code> after a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code> to avoid child processes sharing the same seed value as the parent (and consequently each other).</p><p>Do <b>not</b> call <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand()</span></code> (i.e., without an argument) more than once per process.  The internal state of the random number generator should contain more entropy than can be provided by any seed, so calling <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand()</span></code> again actually <i>loses</i> randomness.</p><p>Most implementations of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> take an integer and will silently truncate decimal numbers.  This means <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand(42)</span></code> will usually produce the same results as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand(42.1)</span></code>.  To be safe, always pass <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/srand.html">srand</span></code> an integer.</p><p>A typical use of the returned seed is for a test program which has too many combinations to test comprehensively in the time available to it each run.  It can test a random subset each time, and should there be a failure, log the seed used for that run so that it can later be used to reproduce the same results.</p><p><b><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand()</span></code> is not cryptographically secure.  You should not rely on it in security-sensitive situations.</b>  As of this writing, a number of third-party CPAN modules offer random number generators intended by their authors to be cryptographically secure, including: <span href="http://search.cpan.org/perldoc/Data::Entropy">Data::Entropy</span>, <span href="http://search.cpan.org/perldoc/Crypt::Random">Crypt::Random</span>, <span href="http://search.cpan.org/perldoc/Math::Random::Secure">Math::Random::Secure</span>, and <span href="http://search.cpan.org/perldoc/Math::TrulyRandom">Math::TrulyRandom</span>.</p></section>	http://perldoc.perl.org/functions/srand.html
Statement Modifiers	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>Any simple statement may optionally be followed by a <i>SINGLE</i> modifier, just before the terminating semicolon (or block ending).  The possible modifiers are:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="w">EXPR</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="w">EXPR</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="w">EXPR</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span> <span class="w">EXPR</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">LIST</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="w">LIST</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span> <span class="w">EXPR</span></li></ol></pre><p>The <code class="inline"><span class="w">EXPR</span></code>  following the modifier is referred to as the &quot;condition&quot;. Its truth or falsehood determines how the modifier will behave.</p><p><code class="inline">if</code>  executes the statement once <i>if</i> and only if the condition is true.  <code class="inline">unless</code>  is the opposite, it executes the statement <i>unless</i> the condition is true (that is, if the condition is false).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Basset hounds got long ears&quot;</span> if <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="i">$ear</span> &gt;= <span class="n">10</span><span class="sc">;</span></li><li>    <span class="i">go_outside</span><span class="s">(</span><span class="s">)</span> and <span class="i">play</span><span class="s">(</span><span class="s">)</span> unless <span class="i">$is_raining</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/for.html">for(each)</span></code> modifier is an iterator: it executes the statement once for each item in the LIST (with <code class="inline"><span class="i">$_</span></code>  aliased to each item in turn).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Hello $_!\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="q">qw(world Dolly nurse)</span><span class="sc">;</span></li></ol></pre><p><code class="inline">while</code>  repeats the statement <i>while</i> the condition is true. <code class="inline">until</code>  does the opposite, it repeats the statement <i>until</i> the condition is true (or while the condition is false):</p><pre class="verbatim"><ol><li>    <span class="c"># Both of these count from 0 to 10.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$i</span>++ while <span class="i">$i</span> &lt;= <span class="n">10</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$j</span>++ until <span class="i">$j</span> &gt;  <span class="n">10</span><span class="sc">;</span></li></ol></pre><p>The <code class="inline">while</code>  and <code class="inline">until</code>  modifiers have the usual &quot;<code class="inline">while</code>  loop&quot; semantics (conditional evaluated first), except when applied to a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code>-BLOCK (or to the Perl4 <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code>-SUBROUTINE statement), in which case the block executes once before the conditional is evaluated.</p><p>This is so that you can write loops like:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>        <span class="i">$line</span> = <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span></li><li>        ...</li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span> !<span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$line</span><span class="s">)</span> || <span class="i">$line</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&quot;.\\n&quot;</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/functions/do.html">do</span>.  Note also that the loop control statements described later will <i>NOT</i> work in this construct, because modifiers don&#39;t take loop labels.  Sorry.  You can always put another block inside of it (for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>) or around it (for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>) to do that sort of thing. For <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, just double the braces:   </p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$x</span> == <span class="i">$y</span><span class="sc">;</span></li><li>        <span class="c"># do something here</span></li><li>    <span class="s">}</span><span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span> <span class="i">$x</span>++ &gt; <span class="i">$z</span><span class="sc">;</span></li></ol></pre><p>For <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, you have to be more elaborate: </p><pre class="verbatim"><ol><li>    <span class="j">LOOP:</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$x</span> = <span class="i">$y</span>**<span class="n">2</span><span class="sc">;</span></li><li>                <span class="c"># do something here</span></li><li>            <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="i">$x</span>++ &lt;= <span class="i">$z</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p><b>NOTE:</b> The behaviour of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> modified with a statement modifier conditional or loop construct (for example, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> if ...</code> ) is <b>undefined</b>.  The value of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> variable may be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, any previously assigned value, or possibly anything else.  Don&#39;t rely on it.  Future versions of perl might do something different from the version of perl you try it out on.  Here be dragons. </p><p>The <code class="inline">when</code>  modifier is an experimental feature that first appeared in Perl 5.14.  To use it, you should include a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.14</span></code>  declaration. (Technically, it requires only the <code class="inline">switch</code>  feature, but that aspect of it was not available before 5.14.)  Operative only from within a <code class="inline">foreach</code>  loop or a <code class="inline">given</code>  block, it executes the statement only if the smartmatch <code class="inline">$_ ~~ <i>EXPR</i></code> is true.  If the statement executes, it is followed by a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> from inside a <code class="inline">foreach</code>  and <code class="inline"><span class="w">break</span></code>  from inside a <code class="inline">given</code> .</p><p>Under the current implementation, the <code class="inline">foreach</code>  loop can be anywhere within the <code class="inline">when</code>  modifier&#39;s dynamic scope, but must be within the <code class="inline">given</code>  block&#39;s lexical scope.  This restricted may be relaxed in a future release.  See <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements</span> below.</p></section>	http://perldoc.perl.org/perlsyn.html#Statement-Modifiers
\%d better written as $%d	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) Outside of patterns, backreferences live on as variables. The use of backslashes is grandfathered on the right-hand side of a substitution, but stylistically it&#39;s better to use the variable form because other Perl programmers will expect it, and it works better if there are more than 9 backreferences.</p></section>	http://perldoc.perl.org/perldiag.html#%5c%25d-better-written-as-%24%25d
Glob not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer saw a left angle bracket in a place where it was expecting a term, so it&#39;s looking for the corresponding right angle bracket, and not finding it.  Chances are you left some needed parentheses out earlier in the line, and you really meant a &quot;less than&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#Glob-not-terminated
$ARGV (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>Contains the name of the current file when reading from <code class="inline">&lt;&gt;</code> .</p></section>	http://perldoc.perl.org/perlvar.html#%24ARGV
group (definition)	A			Perl Glossary							<section class="prog__container"><p>A set of users of which you are a member. In some operating systems (like Unix), you can give certain file access permissions to other members of your group.</p></section>	http://perldoc.perl.org/perlglossary.html#group
FMTEYEWTK (definition)	A			Perl Glossary							<section class="prog__container"><p>Far More Than Everything You Ever Wanted To Know. An exhaustive treatise on one narrow topic, something of a super-<b>FAQ</b>. See Tom for far more.</p></section>	http://perldoc.perl.org/perlglossary.html#FMTEYEWTK
run phase (definition)	A			Perl Glossary		[[compile phase]]					<section class="prog__container"><p>Any time after Perl starts running your main program.  Run phase is mostly spent in <b>runtime</b> but may also be spent in <b>compile time</b> when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span></code> <i><code class="inline"><span class="w">FILE</span></code> </i>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code> <i><code class="inline"><span class="w">STRING</span></code> </i> operators are executed, or when a substitution uses the <code class="inline">/ee</code> modifier.</p></section>	http://perldoc.perl.org/perlglossary.html#run-phase
sv_upgrade from type %d down to type %d	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl tried to force the upgrade of an SV to a type which was actually inferior to its current type.</p></section>	http://perldoc.perl.org/perldiag.html#sv_upgrade-from-type-%25d-down-to-type-%25d
Digest::file (module)	A			Perl Standard Modules		[[Digest]]					<section class="prog__container"><p>Digest::file - Calculate digests of files</p> <pre class="verbatim"><ol><li>  <span class="c"># Poor mans &quot;md5sum&quot; command</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Digest::file</span> <span class="q">qw(digest_file_hex)</span><span class="sc">;</span></li><li>  for <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span></li><li>      <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">digest_file_hex</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="q">&quot;MD5&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;  $_\\n&quot;</span><span class="sc">;</span></li><li>  <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Digest/file.html
@F (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The array <code class="inline"><span class="i">@F</span></code>  contains the fields of each line read in when autosplit mode is turned on.  See <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for the <b>-a</b> switch.  This array is package-specific, and must be declared or given a full package name if not in package main when running under <code class="inline"><span class="w">strict</span> <span class="q">&#39;vars&#39;</span></code> .</p></section>	http://perldoc.perl.org/perlvar.html#%40F
How do I do fancy stuff with the keyboard/screen/mouse?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>How you access/control keyboards, screens, and pointing devices (&quot;mice&quot;) is system-dependent. Try the following modules:</p><p>Some of these specific cases are shown as examples in other answers in this section of the perlfaq.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-do-fancy-stuff-with-the-keyboard%2fscreen%2fmouse%3f
Can't %s %s-endian %ss on this platform	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your platform&#39;s byte-order is neither big-endian nor little-endian, or it has a very strange pointer size.  Packing and unpacking big- or little-endian floating point values and pointers may not be possible. See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%25s-%25s-endian-%25ss-on-this-platform
'%c' allowed only after types %s in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The modifiers &#39;!&#39;, &#39;&lt;&#39; and &#39;&gt;&#39; are allowed in pack() or unpack() only after certain types.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%25c'-allowed-only-after-types-%25s-in-%25s
Lexing code internal error (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexing code supplied by an extension violated the lexer&#39;s API in a detectable way.</p></section>	http://perldoc.perl.org/perldiag.html#Lexing-code-internal-error-(%25s)
Reference found where even-sized list expected	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You gave a single reference where Perl was expecting a list with an even number of elements (for assignment to a hash).  This usually means that you used the anon hash constructor when you meant to use parens.  In any case, a hash requires key/value <b>pairs</b>.</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="s">{</span> <span class="w">one</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">two</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="cm">,</span> <span class="s">}</span><span class="sc">;</span>&#09;<span class="c"># WRONG</span></li><li>    <span class="i">%hash</span> = <span class="s">[</span> <span class="q">qw/ an anon array /</span> <span class="s">]</span><span class="sc">;</span>&#09;<span class="c"># WRONG</span></li><li>    <span class="i">%hash</span> = <span class="s">(</span> <span class="w">one</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">two</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="cm">,</span> <span class="s">)</span><span class="sc">;</span>&#09;<span class="c"># right</span></li><li>    <span class="i">%hash</span> = <span class="q">qw( one 1 two 2 )</span><span class="sc">;</span>&#09;&#09;&#09;<span class="c"># also fine</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Reference-found-where-even-sized-list-expected
hacker (definition)	A			Perl Glossary							<section class="prog__container"><p>Someone who is brilliantly persistent in solving technical problems, whether these involve golfing, fighting orcs, or programming. Hacker is a neutral term, morally speaking. Good hackers are not to be confused with evil <b>crackers</b> or clueless <b>script kiddies</b>. If you confuse them, we will presume that you are either evil or clueless.</p></section>	http://perldoc.perl.org/perlglossary.html#hacker
Unknown warnings category '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error issued by the <code class="inline"><span class="w">warnings</span></code>  pragma.  You specified a warnings category that is unknown to perl at this point.</p><p>Note that if you want to enable a warnings category registered by a module (e.g. <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span> <span class="q">&#39;File::Find&#39;</span></code> ), you must have loaded this module first.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-warnings-category-'%25s'
/m regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Treat string as multiple lines.  That is, change &quot;^&quot; and &quot;$&quot; from matching the start of the string&#39;s first line and the end of its last line to matching the start and end of each line within the string.</p></section>	http://perldoc.perl.org/perlre.html#*m*
side effects (definition)	A			Perl Glossary							<section class="prog__container"><p>Something extra that happens when you evaluate an <b>expression</b>. Nowadays it can refer to almost anything. For example, evaluating a simple assignment statement typically has the “side effect” of assigning a value to a variable. (And you thought assigning the value was your primary intent in the first place!) Likewise, assigning a value to the special variable <code class="inline"><span class="i">$|</span></code>  (<code class="inline"><span class="i">$AUTOFLUSH</span></code> ) has the side effect of forcing a flush after every <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> on the currently selected filehandle.</p></section>	http://perldoc.perl.org/perlglossary.html#side-effects
Subroutine "%s" will not stay shared	A			Perl Diagnostics							<section class="prog__container"><p>(W closure) An inner (nested) <i>named</i> subroutine is referencing a &quot;my&quot; subroutine defined in an outer named subroutine.</p><p>When the inner subroutine is called, it will see the value of the outer subroutine&#39;s lexical subroutine as it was before and during the *first* call to the outer subroutine; in this case, after the first call to the outer subroutine is complete, the inner and outer subroutines will no longer share a common value for the lexical subroutine.  In other words, it will no longer be shared.  This will especially make a difference if the lexical subroutines accesses lexical variables declared in its surrounding scope.</p><p>This problem can usually be solved by making the inner subroutine anonymous, using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code>  syntax.  When inner anonymous subs that reference lexical subroutines in outer subroutines are created, they are automatically rebound to the current values of such lexical subs.</p></section>	http://perldoc.perl.org/perldiag.html#Subroutine-%22%25s%22-will-not-stay-shared
lookbehind (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>assertion</b> that peeks at the string to the left of the current match location.</p></section>	http://perldoc.perl.org/perlglossary.html#lookbehind
Locale::Maketext (module)	A			Perl Standard Modules		[[Locale::Maketext::TPJ13]]\n[[File::Findgrep]]\n[[Apache::MP3]]\n[[I18N::LangTags]]\n[[Win32::Locale]]\n[[http://sunsite.dk/RFC/rfc/rfc3066.html]]\n[[http://sunsite.dk/RFC/rfc/rfc2277.html]]\n[[ftp://prep.ai.mit.edu/pub/gnu/]]					<section class="prog__container"><p>Locale::Maketext - framework for localization</p> <pre class="verbatim"><ol><li><span name="package-MyProgram"></span>  package <span class="i">MyProgram</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MyProgram::L10N</span><span class="sc">;</span></li><li>   <span class="c"># ...which inherits from Locale::Maketext</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$lh</span> = <span class="w">MyProgram::L10N</span><span class="w">-&gt;get_handle</span><span class="s">(</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;What language?&quot;</span><span class="sc">;</span></li><li>  ...</li><li>  <span class="c"># And then any messages your program emits, like:</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="i">$lh</span><span class="i">-&gt;maketext</span><span class="s">(</span> <span class="q">&quot;Can&#39;t open file [_1]: [_2]\\n&quot;</span><span class="cm">,</span> <span class="i">$f</span><span class="cm">,</span> <span class="i">$!</span> <span class="s">)</span><span class="sc">;</span></li><li>  ...</li></ol></pre></section>	http://perldoc.perl.org/Locale/Maketext.html
How do I keep persistent data across program calls?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>For some specific applications, you can use one of the DBM modules. See <span href="http://perldoc.perl.org/AnyDBM_File.html">AnyDBM_File</span>. More generically, you should consult the <span href="http://search.cpan.org/perldoc/FreezeThaw">FreezeThaw</span> or <span href="http://perldoc.perl.org/Storable.html">Storable</span> modules from CPAN. Starting from Perl 5.8, <span href="http://perldoc.perl.org/Storable.html">Storable</span> is part of the standard distribution. Here&#39;s one example using <span href="http://perldoc.perl.org/Storable.html">Storable</span>&#39;s <code class="inline"><span class="w">store</span></code>  and <code class="inline"><span class="w">retrieve</span></code>  functions:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Storable</span><span class="sc">;</span></li><li>    <span class="i">store</span><span class="s">(</span>\\<span class="i">%hash</span><span class="cm">,</span> <span class="q">&quot;filename&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># later on...</span></li><li>    <span class="i">$href</span> = <span class="i">retrieve</span><span class="s">(</span><span class="q">&quot;filename&quot;</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># by ref</span></li><li>    <span class="i">%hash</span> = <span class="i">%</span>{ <span class="i">retrieve</span><span class="s">(</span><span class="q">&quot;filename&quot;</span><span class="s">)</span> }<span class="sc">;</span>   <span class="c"># direct to hash</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-keep-persistent-data-across-program-calls%3f
C preprocessor (definition)	A			Perl Glossary							<section class="prog__container"><p>The typical C compiler’s first pass, which processes lines beginning with <code class="inline"><span class="c">#</span></code>  for conditional compilation and macro definition, and does various manipulations of the program text based on the current definitions. Also known as <i>cpp</i>(1).</p></section>	http://perldoc.perl.org/perlglossary.html#C-preprocessor
dweomer (definition)	A			Perl Glossary							<section class="prog__container"><p>An enchantment, illusion, phantasm, or jugglery. Said when Perl’s magical <b>dwimmer</b> effects don’t do what you expect, but rather seem to be the product of arcane <i>dweomercraft</i>, sorcery, or wonder working. [From Middle English.]</p></section>	http://perldoc.perl.org/perlglossary.html#dweomer
PerlIO::via (module)	A			Perl Standard Modules							<section class="prog__container"><p>PerlIO::via - Helper class for PerlIO layers implemented in perl</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">PerlIO::via::Layer</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span><span class="q">&quot;&lt;:via(Layer)&quot;</span><span class="cm">,</span>...<span class="s">)</span><span class="sc">;</span></li><li></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Some::Other::Package</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$fh</span><span class="cm">,</span><span class="q">&quot;&gt;:via(Some::Other::Package)&quot;</span><span class="cm">,</span>...<span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/PerlIO/via.html
-F pattern	A			Perl Command-Line Switches							<section class="prog__container"><p>specifies the pattern to split on for <b>-a</b>. The pattern may be surrounded by <code class="inline"><span class="q">//</span></code> , <code class="inline"><span class="q">&quot;&quot;</span></code> , or <code class="inline"><span class="q">&#39;&#39;</span></code> , otherwise it will be put in single quotes. You can&#39;t use literal whitespace in the pattern.</p><p><b>-F</b> implicitly sets both <b>-a</b> and <b>-n</b>.</p></section>	http://perldoc.perl.org/perlrun.html#*-F*_pattern_
File::Basename (module)	A			Perl Standard Modules		[[File::Spec]]					<section class="prog__container"><p>File::Basename - Parse file paths into directory, filename and suffix.</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Basename</span><span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$name</span><span class="cm">,</span><span class="i">$path</span><span class="cm">,</span><span class="i">$suffix</span><span class="s">)</span> = <span class="i">fileparse</span><span class="s">(</span><span class="i">$fullname</span><span class="cm">,</span><span class="i">@suffixlist</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$name</span> = <span class="i">fileparse</span><span class="s">(</span><span class="i">$fullname</span><span class="cm">,</span><span class="i">@suffixlist</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$basename</span> = <span class="i">basename</span><span class="s">(</span><span class="i">$fullname</span><span class="cm">,</span><span class="i">@suffixlist</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$dirname</span>  = <span class="i">dirname</span><span class="s">(</span><span class="i">$fullname</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Basename.html
Reference to nonexistent group in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used something like <code class="inline">\\<span class="n">7</span></code>  in your regular expression, but there are not at least seven sets of capturing parentheses in the expression.  If you wanted to have the character with ordinal 7 inserted into the regular expression, prepend zeroes to make it three digits long: <code class="inline">\\<span class="n">007</span></code> </p><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Reference-to-nonexistent-group-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
$^S (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>Current state of the interpreter.</p><pre class="verbatim"><ol><li>&#09;<span class="i">$^S</span>         <span class="w">State</span></li><li>&#09;---------   -------------------------------------</li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span>       <span class="w">Parsing</span> <span class="w">module</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">main</span> <span class="w">program</span></li><li>&#09;<span class="w">true</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span>    <span class="w">Executing</span> <span class="w">an</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></li><li>&#09;<span class="w">false</span> <span class="s">(</span><span class="n">0</span><span class="s">)</span>   <span class="w">Otherwise</span></li></ol></pre><p>The first state may happen in <code class="inline"><span class="i">$SIG</span>{<span class="w">__DIE__</span>}</code>  and <code class="inline"><span class="i">$SIG</span>{<span class="w">__WARN__</span>}</code>  handlers.</p><p>The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> value does not indicate whether exceptions are being caught, since compilation of the main program does not catch exceptions.</p><p>This variable was added in Perl 5.004.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eS
loop (definition)	A			Perl Glossary							<section class="prog__container"><p>A construct that performs something repeatedly, like a roller coaster.</p></section>	http://perldoc.perl.org/perlglossary.html#loop
rename (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>rename OLDNAME,NEWNAME</pre><p>Changes the name of a file; an existing file NEWNAME will be clobbered.  Returns true for success, false otherwise.</p><p>Behavior of this function varies wildly depending on your system implementation.  For example, it will usually not work across file system boundaries, even though the system <i>mv</i> command sometimes compensates for this.  Other restrictions include whether it works on directories, open files, or pre-existing files.  Check <span href="http://perldoc.perl.org/perlport.html">perlport</span> and either the rename(2) manpage or equivalent system documentation for details.</p><p>For a platform independent <code class="inline"><span class="w">move</span></code>  function look at the <span href="http://perldoc.perl.org/File/Copy.html">File::Copy</span> module.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#rename">rename in perlport</span>.</p></section>	http://perldoc.perl.org/functions/rename.html
File::Find (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Find - Traverse a directory tree.</p> <pre class="verbatim"><ol><li>    use File::Find;</li><li>    find(\\&amp;wanted, @directories_to_search);</li><li>    sub wanted { ... }</li><li></li><li>    use File::Find;</li><li>    finddepth(\\&amp;wanted, @directories_to_search);</li><li>    sub wanted { ... }</li><li></li><li>    use File::Find;</li><li>    find({ wanted =&gt; \\&amp;process, follow =&gt; 1 }, &#39;.&#39;);</li></ol></pre></section>	http://perldoc.perl.org/File/Find.html
Can't use \%c to mean $%c in expression	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) In an ordinary expression, backslash is a unary operator that creates a reference to its argument.  The use of backslash to indicate a backreference to a matched substring is valid only as part of a regular expression pattern.  Trying to do this in ordinary Perl code produces a value that prints out looking like SCALAR(0xdecaf).  Use the $1 form instead.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-%5c%25c-to-mean-%24%25c-in-expression
IO::Select (module)	A			Perl Standard Modules							<section class="prog__container"><p>IO::Select - OO interface to the select system call</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Select</span><span class="sc">;</span></li><li></li><li>    <span class="i">$s</span> = <span class="w">IO::Select</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$s</span><span class="i">-&gt;add</span><span class="s">(</span>\\<span class="i">*STDIN</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$s</span><span class="i">-&gt;add</span><span class="s">(</span><span class="i">$some_handle</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ready</span> = <span class="i">$s</span><span class="i">-&gt;can_read</span><span class="s">(</span><span class="i">$timeout</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ready</span> = <span class="w">IO::Select</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">@handles</span><span class="s">)</span><span class="i">-&gt;can_read</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Select.html
Math::BigInt::Calc (module)	A			Perl Standard Modules		[[Math::BigInt]]\n[[Math::BigFloat]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::FastCalc]]\n[[Math::BigInt::Pari]]					<section class="prog__container"><p>Math::BigInt::Calc - Pure Perl module to support Math::BigInt</p> <p>This library provides support for big integer calculations. It is not intended to be used by other modules. Other modules which support the same API (see below) can also be used to support Math::BigInt, like Math::BigInt::GMP and Math::BigInt::Pari.</p></section>	http://perldoc.perl.org/Math/BigInt/Calc.html
IO::Dir (module)	A			Perl Standard Modules		[[File::stat]]					<section class="prog__container"><p>IO::Dir - supply object methods for directory handles</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Dir</span><span class="sc">;</span></li><li>    <span class="i">$d</span> = <span class="w">IO::Dir</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;.&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$d</span><span class="s">)</span> <span class="s">{</span></li><li>        while <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$_</span> = <span class="i">$d</span><span class="i">-&gt;read</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="i">something</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="i">$d</span><span class="i">-&gt;rewind</span><span class="sc">;</span></li><li>        while <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$_</span> = <span class="i">$d</span><span class="i">-&gt;read</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span> <span class="i">something_else</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$d</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%dir</span><span class="cm">,</span> <span class="q">&#39;IO::Dir&#39;</span><span class="cm">,</span> <span class="q">&quot;.&quot;</span><span class="sc">;</span></li><li>    foreach <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%dir</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$_</span><span class="cm">,</span> <span class="q">&quot; &quot;</span> <span class="cm">,</span> <span class="i">$dir</span>{<span class="i">$_</span>}<span class="i">-&gt;size</span><span class="cm">,</span><span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Dir.html
Pod::Simple::Text (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::TextContent]]\n[[Pod::Text]]					<section class="prog__container"><p>Pod::Simple::Text -- format Pod as plaintext</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::Text</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::Text-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/Text.html
How do I make a temporary file name?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If you don&#39;t need to know the name of the file, you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> in place of the file name. In Perl 5.8 or later, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open()</span></code> function creates an anonymous temporary file:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tmp</span><span class="cm">,</span> <span class="q">&#39;+&gt;&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="i">$!</span><span class="sc">;</span></li></ol></pre><p>Otherwise, you can use the File::Temp module.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Temp</span> <span class="q">qw/ tempfile tempdir /</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dir</span> = <span class="i">tempdir</span><span class="s">(</span> <span class="w">CLEANUP</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$filename</span><span class="s">)</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="w">DIR</span> <span class="cm">=&gt;</span> <span class="i">$dir</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># or if you don&#39;t need to know the filename</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> = <span class="i">tempfile</span><span class="s">(</span> <span class="w">DIR</span> <span class="cm">=&gt;</span> <span class="i">$dir</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The File::Temp has been a standard module since Perl 5.6.1. If you don&#39;t have a modern enough Perl installed, use the <code class="inline"><span class="w">new_tmpfile</span></code>  class method from the IO::File module to get a filehandle opened for reading and writing. Use it if you don&#39;t need to know the file&#39;s name:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> = <span class="w">IO::File</span><span class="w">-&gt;new_tmpfile</span><span class="s">(</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Unable to make new temporary file: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>If you&#39;re committed to creating a temporary file by hand, use the process ID and/or the current time-value. If you need to have many temporary files in one process, use a counter:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$temp_dir</span>  = <span class="w">File::Spec</span><span class="w">-&gt;tmpdir</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$file_base</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf</span> <span class="q">&quot;%d-%d-0000&quot;</span><span class="cm">,</span> <span class="i">$$</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$base_name</span> = <span class="w">File::Spec</span><span class="w">-&gt;catfile</span><span class="s">(</span><span class="i">$temp_dir</span><span class="cm">,</span> <span class="i">$file_base</span><span class="s">)</span><span class="sc">;</span></li><li></li><li><span name="temp_file"></span>        sub <span class="m">temp_file</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">0</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/until.html">until</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span><span class="s">)</span> || <span class="i">$count</span>++ &gt; <span class="n">100</span> <span class="s">)</span> <span class="s">{</span></li><li>                <span class="i">$base_name</span> =~ <span class="q">s/-(\\d+)$/&quot;-&quot; . (1 + $1)/e</span><span class="sc">;</span></li><li>                <span class="c"># O_EXCL is required for security reasons.</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$base_name</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_EXCL</span>|<span class="w">O_CREAT</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="s">(</span><span class="i">$fh</span><span class="cm">,</span> <span class="i">$base_name</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-make-a-temporary-file-name%3f
Format not terminated	A			Perl Diagnostics							<section class="prog__container"><p>(F) A format must be terminated by a line with a solitary dot.  Perl got to the end of your file without finding such a line.</p></section>	http://perldoc.perl.org/perldiag.html#Format-not-terminated
Hexadecimal float: mantissa overflow	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) The hexadecimal floating point literal had more bits in the mantissa (the part between the 0x and the exponent, also known as the fraction or the significand) than the floating point supports.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-mantissa-overflow
is-a (definition)	A			Perl Glossary							<section class="prog__container"><p>A relationship between two <b>objects</b> in which one object is considered to be a more specific version of the other, generic object: “A camel is a mammal.” Since the generic object really only exists in a Platonic sense, we usually add a little abstraction to the notion of objects and think of the relationship as being between a generic <b>base class</b> and a specific <b>derived class</b>. Oddly enough, Platonic classes don’t always have Platonic relationships—see <b>inheritance</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#is-a
gmtime (function)	A			Perl Functions\nPerl Time-related functions							<section class="prog__container"><pre>gmtime EXPR<br>gmtime</pre><p>Works just like <span href="http://perldoc.perl.org/functions/localtime.html">localtime</span> but the returned values are localized for the standard Greenwich time zone.</p><p>Note: When called in list context, $isdst, the last value returned by gmtime, is always <code class="inline"><span class="n">0</span></code> .  There is no Daylight Saving Time in GMT.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#gmtime">gmtime in perlport</span>.</p></section>	http://perldoc.perl.org/functions/gmtime.html
tokenizing (definition)	A			Perl Glossary							<section class="prog__container"><p>Splitting up a program text into <b>tokens</b>. Also known as “lexing”, in which case you get “lexemes” instead of tokens.</p></section>	http://perldoc.perl.org/perlglossary.html#tokenizing
Mandatory parameter follows optional parameter	A			Perl Diagnostics							<section class="prog__container"><p>(F) In a subroutine signature, you wrote something like &quot;$a = undef, $b&quot;, making an earlier parameter optional and a later one mandatory. Parameters are filled from left to right, so it&#39;s impossible for the caller to omit an earlier one and pass a later one.  If you want to act as if the parameters are filled from right to left, declare the rightmost optional and then shuffle the parameters around in the subroutine&#39;s body.</p></section>	http://perldoc.perl.org/perldiag.html#Mandatory-parameter-follows-optional-parameter
Digest (module)	A			Perl Standard Modules		[[Digest::Adler32]]\n[[Digest::CRC]]\n[[Digest::Haval256]]\n[[Digest::HMAC]]\n[[Digest::MD2]]\n[[Digest::MD4]]\n[[Digest::MD5]]\n[[Digest::SHA]]\n[[Digest::SHA1]]\n[[Digest::SHA2]]\n[[Digest::Whirlpool]]\n[[Digest::base]]\n[[MIME::Base64]]\n[[http://en.wikipedia.org/wiki/Cryptographic_hash_function]]					<section class="prog__container"><p>Digest - Modules that calculate message digests</p> <pre class="verbatim"><ol><li>  <span class="i">$md5</span>  = <span class="w">Digest</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;MD5&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$sha1</span> = <span class="w">Digest</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;SHA-1&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$sha256</span> = <span class="w">Digest</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;SHA-256&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$sha384</span> = <span class="w">Digest</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;SHA-384&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$sha512</span> = <span class="w">Digest</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;SHA-512&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="i">$hmac</span> = <span class="w">Digest</span><span class="w">-&gt;HMAC_MD5</span><span class="s">(</span><span class="i">$key</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Digest.html
continuation (definition)	A			Perl Glossary							<section class="prog__container"><p>The treatment of more than one physical <b>line</b> as a single logical line. <b>Makefile</b> lines are continued by putting a backslash before the <b>newline</b>. Mail headers, as defined by RFC 822, are continued by putting a space or tab <i>after</i> the newline. In general, lines in Perl do not need any form of continuation mark, because <b>whitespace</b> (including newlines) is gleefully ignored. Usually.</p></section>	http://perldoc.perl.org/perlglossary.html#continuation
subscript (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>value</b> that indicates the position of a particular <b>array</b> <b>element</b> in an array.</p></section>	http://perldoc.perl.org/perlglossary.html#subscript
unary operator (definition)	A			Perl Glossary							<section class="prog__container"><p>An operator with only one <b>operand</b>, like <code class="inline">!</code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span></code>. Unary operators are usually prefix operators; that is, they precede their operand. The <code class="inline">++</code>  and <code class="inline"><span class="q">––</span></code>  operators can be either prefix or postfix. (Their position <i>does</i> change their meanings.)</p></section>	http://perldoc.perl.org/perlglossary.html#unary-operator
Inconsistent hierarchy during C3 merge of class '%s': merging failed on parent '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) The method resolution order (MRO) of the given class is not C3-consistent, and you have enabled the C3 MRO for this class.  See the C3 documentation in <span href="http://perldoc.perl.org/mro.html">mro</span> for more information.</p></section>	http://perldoc.perl.org/perldiag.html#Inconsistent-hierarchy-during-C3-merge-of-class-'%25s'%3a-merging-failed-on--parent-'%25s'
getgrgid (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getgrgid GID</pre>Get group record given group user ID.</section>	http://perldoc.perl.org/functions/getgrgid.html
Unexpected constant lvalue entersub entry via type/targ %d:%d	A			Perl Diagnostics							<section class="prog__container"><p>(P) When compiling a subroutine call in lvalue context, Perl failed an internal consistency check.  It encountered a malformed op tree.</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-constant-lvalue-entersub-entry-via-type%2ftarg-%25d%3a%25d
Not a CODE reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to a code value (that is, a subroutine), but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See also <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-CODE-reference
Illegal declaration of anonymous subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) When using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span></code> keyword to construct an anonymous subroutine, you must always specify a block of code.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-declaration-of-anonymous-subroutine
ExtUtils::MM_Win32 (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_Win32 - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM_Win32</span><span class="sc">;</span> <span class="c"># Done internally by ExtUtils::MakeMaker if needed</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_Win32.html
Can't open input file %s as stdin	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;&lt;&#39; on the command line for reading.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-input-file-%25s-as-stdin
No setreuid available	A			Perl Diagnostics							<section class="prog__container"><p>(F) Configure didn&#39;t find anything resembling the setreuid() call for your system.</p></section>	http://perldoc.perl.org/perldiag.html#No-setreuid-available
How can I measure time under a second?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <span href="http://perldoc.perl.org/Time/HiRes.html">Time::HiRes</span> module (part of the standard distribution as of Perl 5.8) measures time with the <code class="inline"><span class="i">gettimeofday</span><span class="s">(</span><span class="s">)</span></code>  system call, which returns the time in microseconds since the epoch. If you can&#39;t install <span href="http://perldoc.perl.org/Time/HiRes.html">Time::HiRes</span> for older Perls and you are on a Unixish system, you may be able to call <code class="inline"><span class="i">gettimeofday</span><span class="s">(</span><span class="n">2</span><span class="s">)</span></code>  directly. See <span href="http://perldoc.perl.org/functions/syscall.html">syscall</span>.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-can-I-measure-time-under-a-second%3f
'@' outside of string with malformed UTF-8 in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had a template that specified an absolute position outside the string being unpacked.  The string being unpacked was also invalid UTF-8.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%40'-outside-of-string-with-malformed-UTF-8-in-unpack
IO::Compress::Gzip (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Compress::Gzip - Write RFC 1952 files/buffers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::Gzip</span> <span class="q">qw(gzip $GzipError)</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$status</span> = <span class="w">gzip</span> <span class="i">$input</span> <span class="cm">=&gt;</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>] </li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;gzip failed: $GzipError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$z</span> = <span class="w">new</span> <span class="w">IO::Compress::Gzip</span> <span class="i">$output</span> [<span class="cm">,</span><span class="w">OPTS</span>]</li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;gzip failed: $GzipError\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="i">$z</span><span class="i">-&gt;print</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;printf</span><span class="s">(</span><span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;write</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;syswrite</span><span class="s">(</span><span class="i">$string</span> [<span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$offset</span>]<span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;tell</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;eof</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;seek</span><span class="s">(</span><span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;binmode</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;fileno</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;opened</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;input_line_number</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$z</span><span class="i">-&gt;newStream</span><span class="s">(</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$z</span><span class="i">-&gt;close</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$GzipError</span> <span class="sc">;</span></li><li></li><li>    <span class="c"># IO::File mode</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$z</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="i">$z</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tell.html">tell</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span> <span class="i">$z</span><span class="cm">,</span> <span class="i">$position</span><span class="cm">,</span> <span class="i">$whence</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/binmode.html">binmode</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span> <span class="i">$z</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$z</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/Gzip.html
NO-BREAK SPACE in a charnames alias definition is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You defined a character name which contained a no-break space character.  Change it to a regular space.  Usually these names are defined in the <code class="inline"><span class="j">:</span><span class="w">alias</span></code>  import argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span></code> , but they could be defined by a translator installed into <code class="inline"><span class="i">$^H</span>{<span class="w">charnames</span>}</code> .  See <span href="http://perldoc.perl.org/charnames.html#CUSTOM-ALIASES">CUSTOM ALIASES in charnames</span>.</p></section>	http://perldoc.perl.org/perldiag.html#NO-BREAK-SPACE-in-a-charnames-alias-definition-is-deprecated
Filter::Simple (module)	A			Perl Standard Modules							<section class="prog__container"><p>Filter::Simple - Simplified source filtering</p> <pre class="verbatim"><ol><li> <span class="c"># in MyFilter.pm:</span></li><li></li><li><span name="package-MyFilter"></span>     package <span class="i">MyFilter</span><span class="sc">;</span></li><li></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Filter::Simple</span><span class="sc">;</span></li><li></li><li>     <span class="i">FILTER</span> <span class="s">{</span> ... <span class="s">}</span><span class="sc">;</span></li><li></li><li>     <span class="c"># or just:</span></li><li>     <span class="c">#</span></li><li>     <span class="c"># use Filter::Simple sub { ... };</span></li><li></li><li> <span class="c"># in user&#39;s code:</span></li><li></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">MyFilter</span><span class="sc">;</span></li><li></li><li>     <span class="c"># this code is filtered</span></li><li></li><li>     <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">MyFilter</span><span class="sc">;</span></li><li></li><li>     <span class="c"># this code is not</span></li></ol></pre></section>	http://perldoc.perl.org/Filter/Simple.html
symbolic reference (definition)	A			Perl Glossary							<section class="prog__container"><p>A variable whose value is the name of another variable or subroutine. By <b>dereferencing</b> the first variable, you can get at the second one. Symbolic references are illegal under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="q">&quot;refs&quot;</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#symbolic-reference
toolbox approach (definition)	A			Perl Glossary							<section class="prog__container"><p>The notion that, with a complete set of simple tools that work well together, you can build almost anything you want. Which is fine if you’re assembling a tricycle, but if you’re building a defranishizing comboflux regurgalator, you really want your own machine shop in which to build special tools. Perl is sort of a machine shop.</p></section>	http://perldoc.perl.org/perlglossary.html#toolbox-approach
sort (function)	A			Perl Functions\nPerl Functions for list data							<section class="prog__container"><pre>sort SUBNAME LIST<br>sort BLOCK LIST<br>sort LIST</pre><p>In list context, this sorts the LIST and returns the sorted list value. In scalar context, the behaviour of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort()</span></code> is undefined.</p><p>If SUBNAME or BLOCK is omitted, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>s in standard string comparison order.  If SUBNAME is specified, it gives the name of a subroutine that returns an integer less than, equal to, or greater than <code class="inline"><span class="n">0</span></code> , depending on how the elements of the list are to be ordered.  (The  <code class="inline">&lt;=&gt;</code>  and <code class="inline">cmp</code>  operators are extremely useful in such routines.) SUBNAME may be a scalar variable name (unsubscripted), in which case the value provides the name of (or a reference to) the actual subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort subroutine.</p><p>If the subroutine&#39;s prototype is <code class="inline"><span class="s">(</span><span class="i">$$</span><span class="s">)</span></code> , the elements to be compared are passed by reference in <code class="inline"><span class="i">@_</span></code> , as for a normal subroutine.  This is slower than unprototyped subroutines, where the elements to be compared are passed into the subroutine as the package global variables $a and $b (see example below).  Note that in the latter case, it is usually highly counter-productive to declare $a and $b as lexicals.</p><p>If the subroutine is an XSUB, the elements to be compared are pushed on to the stack, the way arguments are usually passed to XSUBs.  $a and $b are not set.</p><p>The values to be compared are always passed by reference and should not be modified.</p><p>You also cannot exit out of the sort block or subroutine using any of the loop control operators described in <span href="http://perldoc.perl.org/perlsyn.html">perlsyn</span> or with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code>.</p><p>When <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code>  (but not <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span> <span class="q">&#39;not_characters&#39;</span></code> ) is in effect, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">LIST</span></code>  sorts LIST according to the current collation locale.  See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span>.</p><p>sort() returns aliases into the original list, much as a for loop&#39;s index variable aliases the list elements.  That is, modifying an element of a list returned by sort() (for example, in a <code class="inline">foreach</code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code>) actually modifies the element in the original list.  This is usually something to be avoided when writing clear code.</p><p>Perl 5.6 and earlier used a quicksort algorithm to implement sort. That algorithm was not stable, so <i>could</i> go quadratic.  (A <i>stable</i> sort preserves the input order of elements that compare equal.  Although quicksort&#39;s run time is O(NlogN) when averaged over all arrays of length N, the time can be O(N**2), <i>quadratic</i> behavior, for some inputs.)  In 5.7, the quicksort implementation was replaced with a stable mergesort algorithm whose worst-case behavior is O(NlogN). But benchmarks indicated that for some inputs, on some platforms, the original quicksort was faster.  5.8 has a sort pragma for limited control of the sort.  Its rather blunt control of the underlying algorithm may not persist into future Perls, but the ability to characterize the input or output in implementation independent ways quite probably will.  See <span href="http://perldoc.perl.org/sort.html">the sort pragma</span>.</p><p>Examples:</p><pre class="verbatim"><ol><li>    <span class="c"># sort lexically</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># same thing, but with explicit sort routine</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$a</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$b</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># now case-insensitively</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">fc</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">fc</span><span class="s">(</span><span class="i">$b</span><span class="s">)</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># same thing in reversed order</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$b</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$a</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># sort numerically ascending</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$a</span> &lt;=&gt; <span class="i">$b</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># sort numerically descending</span></li><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$b</span> &lt;=&gt; <span class="i">$a</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li><li></li><li>    <span class="c"># this sorts the %age hash by value instead of key</span></li><li>    <span class="c"># using an in-line function</span></li><li>    <span class="i">@eldest</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$age</span>{<span class="i">$b</span>} &lt;=&gt; <span class="i">$age</span>{<span class="i">$a</span>} <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%age</span><span class="sc">;</span></li><li></li><li>    <span class="c"># sort using explicit subroutine name</span></li><li><span name="byage"></span>    sub <span class="m">byage</span> <span class="s">{</span></li><li>        <span class="i">$age</span>{<span class="i">$a</span>} &lt;=&gt; <span class="i">$age</span>{<span class="i">$b</span>}<span class="sc">;</span>  <span class="c"># presuming numeric</span></li><li>    <span class="s">}</span></li><li>    <span class="i">@sortedclass</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">byage</span> <span class="i">@class</span><span class="sc">;</span></li><li></li><li><span name="backwards"></span>    sub <span class="m">backwards</span> <span class="s">{</span> <span class="i">$b</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$a</span> <span class="s">}</span></li><li>    <span class="i">@harry</span>  = <span class="q">qw(dog cat x Cain Abel)</span><span class="sc">;</span></li><li>    <span class="i">@george</span> = <span class="q">qw(gone chased yz Punished Axed)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">@harry</span><span class="sc">;</span></li><li>        <span class="c"># prints AbelCaincatdogx</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">backwards</span> <span class="i">@harry</span><span class="sc">;</span></li><li>        <span class="c"># prints xdogcatCainAbel</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">@george</span><span class="cm">,</span> <span class="q">&#39;to&#39;</span><span class="cm">,</span> <span class="i">@harry</span><span class="sc">;</span></li><li>        <span class="c"># prints AbelAxedCainPunishedcatchaseddoggonetoxyz</span></li><li></li><li>    <span class="c"># inefficiently sort by descending numeric compare using</span></li><li>    <span class="c"># the first integer after the first = sign, or the</span></li><li>    <span class="c"># whole record case-insensitively otherwise</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@new</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span></li><li>        <span class="s">(</span><span class="i">$b</span> =~ <span class="q">/=(\\d+)/</span><span class="s">)</span>[<span class="n">0</span>] &lt;=&gt; <span class="s">(</span><span class="i">$a</span> =~ <span class="q">/=(\\d+)/</span><span class="s">)</span>[<span class="n">0</span>]</li><li>                            ||</li><li>                    <span class="i">fc</span><span class="s">(</span><span class="i">$a</span><span class="s">)</span>  <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span>  <span class="i">fc</span><span class="s">(</span><span class="i">$b</span><span class="s">)</span></li><li>    <span class="s">}</span> <span class="i">@old</span><span class="sc">;</span></li><li></li><li>    <span class="c"># same thing, but much more efficiently;</span></li><li>    <span class="c"># we&#39;ll build auxiliary indices instead</span></li><li>    <span class="c"># for speed</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@nums</span> = <span class="i">@caps</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="i">@old</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@nums</span><span class="cm">,</span> <span class="s">(</span> <span class="q">/=(\\d+)/</span> ? <span class="i">$1</span> <span class="co">:</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@caps</span><span class="cm">,</span> <span class="i">fc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@new</span> = <span class="i">@old</span>[ <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span></li><li>                           <span class="i">$nums</span>[<span class="i">$b</span>] &lt;=&gt; <span class="i">$nums</span>[<span class="i">$a</span>]</li><li>                                    ||</li><li>                           <span class="i">$caps</span>[<span class="i">$a</span>] <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$caps</span>[<span class="i">$b</span>]</li><li>                         <span class="s">}</span> <span class="n">0</span>..<span class="i">$#old</span></li><li>                  ]<span class="sc">;</span></li><li></li><li>    <span class="c"># same thing, but without any temps</span></li><li>    <span class="i">@new</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">$_</span>-&gt;[<span class="n">0</span>] <span class="s">}</span></li><li>           <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$b</span>-&gt;[<span class="n">1</span>] &lt;=&gt; <span class="i">$a</span>-&gt;[<span class="n">1</span>]</li><li>                           ||</li><li>                  <span class="i">$a</span>-&gt;[<span class="n">2</span>] <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$b</span>-&gt;[<span class="n">2</span>]</li><li>           <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="s">[</span><span class="i">$_</span><span class="cm">,</span> <span class="q">/=(\\d+)/</span><span class="cm">,</span> <span class="i">fc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="s">]</span> <span class="s">}</span> <span class="i">@old</span><span class="sc">;</span></li><li></li><li>    <span class="c"># using a prototype allows you to use any comparison subroutine</span></li><li>    <span class="c"># as a sort subroutine (including other package&#39;s subroutines)</span></li><li><span name="package-other"></span>    package <span class="i">other</span><span class="sc">;</span></li><li><span name="backwards-1"></span>    sub <span class="m">backwards ($$)</span> <span class="s">{</span> <span class="i">$_</span>[<span class="n">1</span>] <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="i">$_</span>[<span class="n">0</span>]<span class="sc">;</span> <span class="s">}</span>  <span class="c"># $a and $b are</span></li><li>                                             <span class="c"># not set here    </span></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li>    <span class="i">@new</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">other::backwards</span> <span class="i">@old</span><span class="sc">;</span></li><li></li><li>    <span class="c"># guarantee stability, regardless of algorithm</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="q">&#39;stable&#39;</span><span class="sc">;</span></li><li>    <span class="i">@new</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$a</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">5</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$b</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">5</span><span class="s">)</span> <span class="s">}</span> <span class="i">@old</span><span class="sc">;</span></li><li></li><li>    <span class="c"># force use of mergesort (not portable outside Perl 5.8)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="q">&#39;_mergesort&#39;</span><span class="sc">;</span>  <span class="c"># note discouraging _</span></li><li>    <span class="i">@new</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$a</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">5</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/cmp.html">cmp</span> <span class="l_k" href="http://perldoc.perl.org/functions/substr.html">substr</span><span class="s">(</span><span class="i">$b</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">5</span><span class="s">)</span> <span class="s">}</span> <span class="i">@old</span><span class="sc">;</span></li></ol></pre><p>Warning: syntactical care is required when sorting the list returned from a function.  If you want to sort the list returned by the function call <code class="inline"><span class="i">find_records</span><span class="s">(</span><span class="i">@key</span><span class="s">)</span></code> , you can use:</p><pre class="verbatim"><ol><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$a</span> cmp <span class="i">$b</span> <span class="s">}</span> <span class="w">find_records</span> <span class="i">@key</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> +<span class="i">find_records</span><span class="s">(</span><span class="i">@key</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">&amp;find_records</span><span class="s">(</span><span class="i">@key</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span><span class="s">(</span><span class="i">find_records</span><span class="s">(</span><span class="i">@key</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If instead you want to sort the array @key with the comparison routine <code class="inline"><span class="i">find_records</span><span class="s">(</span><span class="s">)</span></code>  then you can use:</p><pre class="verbatim"><ol><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">find_records</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span> <span class="i">@key</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="i">find_records</span><span class="s">(</span><span class="i">@key</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span><span class="s">(</span><span class="i">find_records</span> <span class="i">@key</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@contact</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span><span class="s">(</span><span class="i">find_records</span> <span class="s">(</span><span class="i">@key</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you&#39;re using strict, you <i>must not</i> declare $a and $b as lexicals.  They are package globals.  That means that if you&#39;re in the <code class="inline"><span class="w">main</span></code>  package and type</p><pre class="verbatim"><ol><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$b</span> &lt;=&gt; <span class="i">$a</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li></ol></pre><p>then <code class="inline"><span class="i">$a</span></code>  and <code class="inline"><span class="i">$b</span></code>  are <code class="inline"><span class="i">$main::a</span></code>  and <code class="inline"><span class="i">$main::b</span></code>  (or <code class="inline"><span class="i">$::a</span></code>  and <code class="inline"><span class="i">$::b</span></code> ), but if you&#39;re in the <code class="inline"><span class="w">FooPack</span></code>  package, it&#39;s the same as typing</p><pre class="verbatim"><ol><li>    <span class="i">@articles</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span><span class="i">$FooPack::b</span> &lt;=&gt; <span class="i">$FooPack::a</span><span class="s">}</span> <span class="i">@files</span><span class="sc">;</span></li></ol></pre><p>The comparison function is required to behave.  If it returns inconsistent results (sometimes saying <code class="inline"><span class="i">$x</span>[<span class="n">1</span>]</code>  is less than <code class="inline"><span class="i">$x</span>[<span class="n">2</span>]</code>  and sometimes saying the opposite, for example) the results are not well-defined.</p><p>Because <code class="inline">&lt;=&gt;</code>  returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> when either operand is <code class="inline"><span class="w">NaN</span></code>  (not-a-number), be careful when sorting with a comparison function like <code class="inline"><span class="i">$a</span> &lt;=&gt; <span class="i">$b</span></code>  any lists that might contain a <code class="inline"><span class="w">NaN</span></code> .  The following example takes advantage that <code class="inline"><span class="w">NaN</span> != <span class="w">NaN</span></code>  to eliminate any <code class="inline"><span class="w">NaN</span></code> s from the input list.</p><pre class="verbatim"><ol><li>    <span class="i">@result</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$a</span> &lt;=&gt; <span class="i">$b</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="i">$_</span> == <span class="i">$_</span> <span class="s">}</span> <span class="i">@input</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/functions/sort.html
Pod::Simple::DumpAsText (module)	A			Perl Standard Modules		[[Pod::Simple::DumpAsXML]]\n[[Pod::Simple]]					<section class="prog__container"><p>Pod::Simple::DumpAsText -- dump Pod-parsing events as text</p> <pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MPod::Simple::DumpAsText</span> -e \\</li><li>   <span class="q">&quot;exit Pod::Simple::DumpAsText-&gt;filter(shift)-&gt;any_errata_seen&quot;</span> \\</li><li>   <span class="w">thingy</span>.<span class="w">pod</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/DumpAsText.html
prefix (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> that precedes its <b>operand</b>, as in <code class="inline">++<span class="i">$x</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#prefix
Ambiguous use of %c{%s} resolved to %c%s	A			Perl Diagnostics							<section class="prog__container"><p>(W ambiguous) You wrote something like <code class="inline"><span class="i">@</span>{<span class="w">foo</span>}</code> , which might be asking for the variable <code class="inline"><span class="i">@foo</span></code> , or it might be calling a function named foo, and dereferencing it as an array reference.  If you wanted the variable, you can just write <code class="inline"><span class="i">@foo</span></code> .  If you wanted to call the function, write <code class="inline"><span class="i">@</span>{<span class="i">foo</span><span class="s">(</span><span class="s">)</span>}</code>  ... or you could just not have a variable and a function with the same name, and save yourself a lot of trouble.</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-use-of-%25c%7b%25s%7d-resolved-to-%25c%25s
How do I fetch/put an (S)FTP file?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p><span href="http://perldoc.perl.org/Net/FTP.html">Net::FTP</span>, and <span href="http://search.cpan.org/perldoc/Net::SFTP">Net::SFTP</span> allow you to interact with FTP and SFTP (Secure FTP) servers.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-fetch%2fput-an-(S)FTP-file%3f
character (definition)	A			Perl Glossary							<section class="prog__container"><p>The smallest individual element of a string. Computers store characters as integers, but Perl lets you operate on them as text. The integer used to represent a particular character is called that character’s <b>codepoint</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#character
TAP::Parser::Source (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::IteratorFactory]]\n[[TAP::Parser::SourceHandler]]					<section class="prog__container"><p>TAP::Parser::Source - a TAP source &amp; meta data about it</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Source</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$source</span> = <span class="w">TAP::Parser::Source</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>  <span class="i">$source</span><span class="i">-&gt;raw</span><span class="s">(</span> \\<span class="q">&#39;reference to raw TAP source&#39;</span> <span class="s">)</span></li><li>         <span class="i">-&gt;config</span><span class="s">(</span> \\<span class="i">%config</span> <span class="s">)</span></li><li>         <span class="i">-&gt;merge</span><span class="s">(</span> <span class="i">$boolean</span> <span class="s">)</span></li><li>         <span class="i">-&gt;switches</span><span class="s">(</span> \\<span class="i">@switches</span> <span class="s">)</span></li><li>         <span class="i">-&gt;test_args</span><span class="s">(</span> \\<span class="i">@args</span> <span class="s">)</span></li><li>         <span class="i">-&gt;assemble_meta</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> ... <span class="s">}</span> if <span class="i">$source</span><span class="i">-&gt;meta</span>-&gt;{<span class="w">is_file</span>}<span class="sc">;</span></li><li>  <span class="c"># see assemble_meta for a full list of data available</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Source.html
current package (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>package</b> in which the current statement is <b>compiled</b>. Scan backward in the text of your program through the current <b>lexical scope</b> or any enclosing lexical scopes until you find a package declaration. That’s your current package name.</p></section>	http://perldoc.perl.org/perlglossary.html#current-package
readlink (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>readlink EXPR<br>readlink</pre><p>Returns the value of a symbolic link, if symbolic links are implemented.  If not, raises an exception.  If there is a system error, returns the undefined value and sets <code class="inline"><span class="i">$!</span></code>  (errno).  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#readlink">readlink in perlport</span>.</p></section>	http://perldoc.perl.org/functions/readlink.html
socketpair (function)	A			Perl Functions\nPerl Low-level socket functions							<section class="prog__container"><pre>socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL</pre><p>Creates an unnamed pair of sockets in the specified domain, of the specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name.  If unimplemented, raises an exception. Returns true if successful.</p><p>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptors, as determined by the value of $^F.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p><p>Some systems defined <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span></code> in terms of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/socketpair.html">socketpair</span></code>, in which a call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span><span class="s">(</span><span class="w">Rdr</span><span class="cm">,</span> <span class="w">Wtr</span><span class="s">)</span></code>  is essentially:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/socketpair.html">socketpair</span><span class="s">(</span><span class="w">Rdr</span><span class="cm">,</span> <span class="w">Wtr</span><span class="cm">,</span> <span class="w">AF_UNIX</span><span class="cm">,</span> <span class="w">SOCK_STREAM</span><span class="cm">,</span> <span class="w">PF_UNSPEC</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/shutdown.html">shutdown</span><span class="s">(</span><span class="w">Rdr</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># no more writing for reader</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/shutdown.html">shutdown</span><span class="s">(</span><span class="w">Wtr</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># no more reading for writer</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for an example of socketpair use.  Perl 5.8 and later will emulate socketpair using IP sockets to localhost if your system implements sockets but not socketpair.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#socketpair">socketpair in perlport</span>.</p></section>	http://perldoc.perl.org/functions/socketpair.html
scratchpad (definition)	A			Perl Glossary							<section class="prog__container"><p>The area in which a particular invocation of a particular file or subroutine keeps some of its temporary values, including any lexically scoped variables.</p></section>	http://perldoc.perl.org/perlglossary.html#scratchpad
%+ (variable)	A			Perl Variables\nPerl Variables related to regular expressions							<section class="prog__container"><p>Similar to <code class="inline"><span class="i">@+</span></code> , the <code class="inline"><span class="i">%+</span></code>  hash allows access to the named capture buffers, should they exist, in the last successful match in the currently active dynamic scope.</p><p>For example, <code class="inline"><span class="i">$+</span>{<span class="w">foo</span>}</code>  is equivalent to <code class="inline"><span class="i">$1</span></code>  after the following match:</p><pre class="verbatim"><ol><li>    <span class="q">&#39;foo&#39;</span> =~ <span class="q">/(?&lt;foo&gt;foo)/</span><span class="sc">;</span></li></ol></pre><p>The keys of the <code class="inline"><span class="i">%+</span></code>  hash list only the names of buffers that have captured (and that are thus associated to defined values).</p><p>The underlying behaviour of <code class="inline"><span class="i">%+</span></code>  is provided by the <span href="http://perldoc.perl.org/Tie/Hash/NamedCapture.html">Tie::Hash::NamedCapture</span> module.</p><p><b>Note:</b> <code class="inline"><span class="i">%-</span></code>  and <code class="inline"><span class="i">%+</span></code>  are tied views into a common internal hash associated with the last successful regular expression.  Therefore mixing iterative access to them via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> may have unpredictable results. Likewise, if the last successful match changes, then the results may be surprising.</p><p>This variable was added in Perl v5.10.0.</p><p>This variable is read-only and dynamically-scoped.</p></section>	http://perldoc.perl.org/perlvar.html#%25%2b
How do I make sure users can't enter values into a form that causes my CGI script to do bad things?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You can&#39;t prevent people from sending your script bad data. Even if you add some client-side checks, people may disable them or bypass them completely. For instance, someone might use a module such as <span href="http://search.cpan.org/perldoc/LWP">LWP</span> to submit to your web site. If you want to prevent data that try to use SQL injection or other sorts of attacks (and you should want to), you have to not trust any data that enter your program.</p><p>The <span href="http://perldoc.perl.org/perlsec.html">perlsec</span> documentation has general advice about data security. If you are using the <span href="http://search.cpan.org/perldoc/DBI">DBI</span> module, use placeholder to fill in data. If you are running external programs with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code>, use the list forms. There are many other precautions that you should take, too many to list here, and most of them fall under the category of not using any data that you don&#39;t intend to use. Trust no one.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-make-sure-users-can't-enter-values-into-a-form-that-causes-my-CGI-script-to-do-bad-things%3f
getpwent (function)	A			Perl Functions\nPerl Fetching user and group info							<section class="prog__container"><pre>getpwent</pre>Get next passwd record.</section>	http://perldoc.perl.org/functions/getpwent.html
Math::BigInt::CalcEmu (module)	A			Perl Standard Modules		[[Math::BigInt]]\n[[Math::BigFloat]]\n[[Math::BigInt::GMP]]\n[[Math::BigInt::Pari]]					<section class="prog__container"><p>Math::BigInt::CalcEmu - Emulate low-level math with BigInt code</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::BigInt::CalcEmu</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Math/BigInt/CalcEmu.html
Pod::ParseLink (module)	A			Perl Standard Modules		[[Pod::Parser]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::ParseLink - Parse an L&lt;&gt; formatting code in POD text</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::ParseLink</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$text</span><span class="cm">,</span> <span class="i">$inferred</span><span class="cm">,</span> <span class="i">$name</span><span class="cm">,</span> <span class="i">$section</span><span class="cm">,</span> <span class="i">$type</span><span class="s">)</span> = <span class="w">parselink</span> <span class="s">(</span><span class="i">$link</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/ParseLink.html
How do I add the directory my program lives in to the module/library search path?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you know the directory already, you can add it to <code class="inline"><span class="i">@INC</span></code>  as you would for any other directory. You might &lt;use lib&gt; if you know the directory at compile time:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="i">$directory</span><span class="sc">;</span></li></ol></pre><p>The trick in this task is to find the directory. Before your script does anything else (such as a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span></code>), you can get the current working directory with the <code class="inline"><span class="w">Cwd</span></code>  module, which comes with Perl:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Cwd</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$directory</span> = <span class="w">cwd</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="i">$directory</span><span class="sc">;</span></li></ol></pre><p>You can do a similar thing with the value of <code class="inline"><span class="i">$0</span></code> , which holds the script name. That might hold a relative path, but <code class="inline"><span class="w">rel2abs</span></code>  can turn it into an absolute path. Once you have the</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec::Functions</span> <span class="q">qw(rel2abs)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Basename</span> <span class="q">qw(dirname)</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$path</span>   = <span class="i">rel2abs</span><span class="s">(</span> <span class="i">$0</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">$directory</span> = <span class="i">dirname</span><span class="s">(</span> <span class="i">$path</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">lib</span> <span class="i">$directory</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/FindBin.html">FindBin</span> module, which comes with Perl, might work. It finds the directory of the currently running script and puts it in <code class="inline"><span class="i">$Bin</span></code> , which you can then use to construct the right library path:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FindBin</span> <span class="q">qw($Bin)</span><span class="sc">;</span></li></ol></pre><p>You can also use <span href="http://search.cpan.org/perldoc/local::lib">local::lib</span> to do much of the same thing. Install modules using <span href="http://search.cpan.org/perldoc/local::lib">local::lib</span>&#39;s settings then use the module in your program:</p><pre class="verbatim"><ol><li>     <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">local::lib</span><span class="sc">;</span> <span class="c"># sets up a local lib at ~/perl5</span></li></ol></pre><p>See the <span href="http://search.cpan.org/perldoc/local::lib">local::lib</span> documentation for more details.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-add-the-directory-my-program-lives-in-to-the-module%2flibrary-search-path%3f
Can't bless non-reference value	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only hard references may be blessed.  This is how Perl &quot;enforces&quot; encapsulation of objects.  See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-bless-non-reference-value
panic: pp_split, pm=%p, s=%p	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something terrible went wrong in setting up for the split.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pp_split%2c-pm%3d%25p%2c-s%3d%25p
"use re 'strict'" is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::re_strict) The things that are different when a regular expression pattern is compiled under <code class="inline"><span class="q">&#39;strict&#39;</span></code>  are subject to change in future Perl releases in incompatible ways.  This means that a pattern that compiles today may not in a future Perl release.  This warning is to alert you to that risk.</p></section>	http://perldoc.perl.org/perldiag.html#%22use-re-'strict'%22-is-experimental
Can't find Unicode property definition "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(F) You may have tried to use <code class="inline">\\<span class="w">p</span></code>  which means a Unicode property (for example <code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">Lu</span><span class="s">}</span></code>  matches all uppercase letters).  If you did mean to use a Unicode property, see <span href="http://perldoc.perl.org/perluniprops.html#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d">Properties accessible through \\p{} and \\P{} in perluniprops</span> for a complete list of available properties.  If you didn&#39;t mean to use a Unicode property, escape the <code class="inline">\\<span class="w">p</span></code> , either by <code class="inline">\\\\<span class="w">p</span></code>  (just the <code class="inline">\\<span class="w">p</span></code> ) or by <code class="inline">\\<span class="w">Q</span>\\<span class="w">p</span></code>  (the rest of the string, or until <code class="inline">\\<span class="w">E</span></code> ).</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-Unicode-property-definition-%22%25s%22
"%s" may clash with future reserved word	A			Perl Diagnostics							<section class="prog__container"><p>(W) This warning may be due to running a perl5 script through a perl4 interpreter, especially if the word that is being warned about is &quot;use&quot; or &quot;my&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#%22%25s%22-may-clash-with-future-reserved-word
Initialization of state variables in list context currently forbidden	A			Perl Diagnostics							<section class="prog__container"><p>(F) Currently the implementation of &quot;state&quot; only permits the initialization of scalar variables in scalar context.  Re-write <code class="inline"><span class="w">state</span> <span class="s">(</span><span class="i">$a</span><span class="s">)</span> = <span class="n">42</span></code>  as <code class="inline"><span class="w">state</span> <span class="i">$a</span> = <span class="n">42</span></code>  to change from list to scalar context.  Constructions such as <code class="inline"><span class="w">state</span> <span class="s">(</span><span class="i">@a</span><span class="s">)</span> = <span class="i">foo</span><span class="s">(</span><span class="s">)</span></code>  will be supported in a future perl release.</p></section>	http://perldoc.perl.org/perldiag.html#Initialization-of-state-variables-in-list-context-currently-forbidden
Unary "-" operator	A			Perl Operators\nPerl Symbolic Unary Operators							<section class="prog__container">Unary &quot;-&quot; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that - bareword is equivalent to the string &quot;-bareword&quot;. If, however, the string begins with a non-alphabetic character (excluding &quot;+&quot; or &quot;-&quot; ), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning Argument &quot;the string&quot; isn&#39;t numeric in negation (-) at ....</section>	http://perldoc.perl.org/perlop.html#Symbolic-Unary-Operators
Too many )'s	A			Perl Diagnostics							<section class="prog__container"><p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p></section>	http://perldoc.perl.org/perldiag.html#Too-many-)'s
Test::Builder::Tester::Color (module)	A			Perl Standard Modules		[[Test::Builder::Tester]]\n[[Term::ANSIColor]]					<section class="prog__container"><p>Test::Builder::Tester::Color - turn on colour in Test::Builder::Tester</p> <pre class="verbatim"><ol><li>   <span class="w">When</span> <span class="w">running</span> <span class="w">a</span> <span class="w">test</span> <span class="w">script</span></li><li></li><li>     <span class="w">perl</span> -<span class="w">MTest::Builder::Tester::Color</span> <span class="w">test</span>.<span class="w">t</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Builder/Tester/Color.html
TAP::Parser::Iterator (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::Iterator::Array]]\n[[TAP::Parser::Iterator::Stream]]\n[[TAP::Parser::Iterator::Process]]					<section class="prog__container"><p>TAP::Parser::Iterator - Base class for TAP source iterators</p> <pre class="verbatim"><ol><li>  <span class="c"># to subclass:</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Iterator</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;TAP::Parser::Iterator&#39;</span><span class="sc">;</span></li><li><span name="_initialize"></span>  sub <span class="m">_initialize</span> <span class="s">{</span></li><li>    <span class="c"># see TAP::Object...</span></li><li>  <span class="s">}</span></li><li></li><li><span name="next_raw"></span>  sub <span class="m">next_raw</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="wait"></span>  sub <span class="m">wait</span>     <span class="s">{</span> ... <span class="s">}</span></li><li><span name="exit"></span>  sub <span class="m">exit</span>     <span class="s">{</span> ... <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Iterator.html
Compress::Raw::Bzip2 (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.bzip.org]]\n[[Compress::Bzip2]]					<section class="prog__container"><p>Compress::Raw::Bzip2 - Low-Level Interface to bzip2 compression library</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Compress::Raw::Bzip2</span> <span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$bz</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="w">new</span> <span class="w">Compress::Raw::Bzip2</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot create bzip2 object: $bzerno\\n&quot;</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$status</span> = <span class="i">$bz</span><span class="i">-&gt;bzdeflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$bz</span><span class="i">-&gt;bzflush</span><span class="s">(</span><span class="i">$output</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$bz</span><span class="i">-&gt;bzclose</span><span class="s">(</span><span class="i">$output</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$bz</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="w">new</span> <span class="w">Compress::Raw::Bunzip2</span> <span class="s">[</span><span class="w">OPTS</span><span class="s">]</span></li><li>        or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Cannot create bunzip2 object: $bzerno\\n&quot;</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$status</span> = <span class="i">$bz</span><span class="i">-&gt;bzinflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$version</span> = <span class="i">Compress::Raw::Bzip2::bzlibversion</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Compress/Raw/Bzip2.html
Insecure user-defined property %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl detected tainted data when trying to compile a regular expression that contains a call to a user-defined character property function, i.e. <code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">IsFoo</span><span class="s">}</span></code>  or <code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">InFoo</span><span class="s">}</span></code> . See <span href="http://perldoc.perl.org/perlunicode.html#User-Defined-Character-Properties">User-Defined Character Properties in perlunicode</span> and <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Insecure-user-defined-property-%25s
Symbol (module)	A			Perl Standard Modules							<section class="prog__container"><p>Symbol - manipulate Perl symbols and their names</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Symbol</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sym</span> = <span class="w">gensym</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$sym</span><span class="cm">,</span> <span class="q">&quot;filename&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$_</span> = <span class="q">&lt;$sym&gt;</span><span class="sc">;</span></li><li>    <span class="c"># etc.</span></li><li></li><li>    <span class="w">ungensym</span> <span class="i">$sym</span><span class="sc">;</span>      <span class="c"># no effect</span></li><li></li><li>    <span class="c"># replace *FOO{IO} handle but not $FOO, %FOO, etc.</span></li><li>    <span class="i">*FOO</span> = <span class="w">geniosym</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span><span class="q">&quot;x&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>              <span class="c"># &quot;main::x&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span><span class="q">&quot;x&quot;</span><span class="cm">,</span> <span class="q">&quot;FOO&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>       <span class="c"># &quot;FOO::x&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span><span class="q">&quot;BAR::x&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>         <span class="c"># &quot;BAR::x&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span><span class="q">&quot;BAR::x&quot;</span><span class="cm">,</span> <span class="q">&quot;FOO&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>  <span class="c"># &quot;BAR::x&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span><span class="q">&quot;STDOUT&quot;</span><span class="cm">,</span> <span class="q">&quot;FOO&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>  <span class="c"># &quot;main::STDOUT&quot; (global)</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span>\\<span class="i">*x</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>              <span class="c"># returns \\*x</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">qualify</span><span class="s">(</span>\\<span class="i">*x</span><span class="cm">,</span> <span class="q">&quot;FOO&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span>       <span class="c"># returns \\*x</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span> <span class="w">refs</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="s">{</span> <span class="w">qualify_to_ref</span> <span class="i">$fh</span> <span class="s">}</span> <span class="q">&quot;foo!\\n&quot;</span><span class="sc">;</span></li><li>    <span class="i">$ref</span> = <span class="w">qualify_to_ref</span> <span class="i">$name</span><span class="cm">,</span> <span class="i">$pkg</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Symbol</span> <span class="q">qw(delete_package)</span><span class="sc">;</span></li><li>    <span class="i">delete_package</span><span class="s">(</span><span class="q">&#39;Foo::Bar&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;deleted\\n&quot;</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$Foo::</span>{<span class="q">&#39;Bar::&#39;</span>}<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Symbol.html
indirection (definition)	A			Perl Glossary							<section class="prog__container"><p>If something in a program isn’t the value you’re looking for but indicates where the value is, that’s indirection. This can be done with either <b>symbolic references</b> or <b>hard</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#indirection
How do I reverse a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse()</span></code> in scalar context, as documented in <span href="http://perldoc.perl.org/functions/reverse.html">reverse</span>.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$reversed</span> = <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="i">$string</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-reverse-a-string%3f
$^ (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The name of the current top-of-page format for the currently selected output channel.  The default is the name of the filehandle with <code class="inline"><span class="w">_TOP</span></code>  appended.  For example, the default format top name for the <code class="inline"><span class="w">STDOUT</span></code>  filehandle is <code class="inline"><span class="w">STDOUT_TOP</span></code> .</p><p>Mnemonic: points to top of page.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5e
IO::Compress::Base (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]					<section class="prog__container"><p>IO::Compress::Base - Base Class for IO::Compress modules</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Compress::Base</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Compress/Base.html
Not a subroutine reference in overload table	A			Perl Diagnostics							<section class="prog__container"><p>(F) An attempt was made to specify an entry in an overloading table that doesn&#39;t somehow point to a valid subroutine.  See <span href="http://perldoc.perl.org/overload.html">overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-subroutine-reference-in-overload-table
panic: reference miscount on nsv in sv_replace() (%d != 1)	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal sv_replace() function was handed a new SV with a reference count other than 1.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-reference-miscount-on-nsv-in-sv_replace()-(%25d-!%3d-1)
shmwrite (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>shmwrite ID,STRING,POS,SIZE</pre><p>Reads or writes the System V shared memory segment ID starting at position POS for size SIZE by attaching to it, copying in/out, and detaching from it.  When reading, VAR must be a variable that will hold the data read.  When writing, if STRING is too long, only SIZE bytes are used; if STRING is too short, nulls are written to fill out SIZE bytes.  Return true if successful, false on error. shmread() taints the variable.  See also <span href="http://perldoc.perl.org/perlipc.html#SysV-IPC">SysV IPC in perlipc</span>, <code class="inline"><span class="w">IPC::SysV</span></code> , and the <code class="inline"><span class="w">IPC::Shareable</span></code>  module from CPAN.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#shmread">shmread in perlport</span> and <span href="http://perldoc.perl.org/perlport.html#shmwrite">shmwrite in perlport</span>.</p></section>	http://perldoc.perl.org/functions/shmwrite.html
What is really for?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <code class="inline">/o</code> option for regular expressions (documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span> and <span href="http://perldoc.perl.org/perlreref.html">perlreref</span>) tells Perl to compile the regular expression only once. This is only useful when the pattern contains a variable. Perls 5.6 and later handle this automatically if the pattern does not change.</p><p>Since the match operator <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m//</span></code>, the substitution operator <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code>, and the regular expression quoting operator <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/qr.html">qr//</span></code> are double-quotish constructs, you can interpolate variables into the pattern. See the answer to &quot;How can I quote a variable to use in a regex?&quot; for more details.</p><p>This example takes a regular expression from the argument list and prints the lines of input that match it:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pattern</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> <span class="i">@ARGV</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">m/$pattern/</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Versions of Perl prior to 5.6 would recompile the regular expression for each iteration, even if <code class="inline"><span class="i">$pattern</span></code>  had not changed. The <code class="inline">/o</code> would prevent this by telling Perl to compile the pattern the first time, then reuse that for subsequent iterations:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pattern</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span> <span class="i">@ARGV</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> &lt;&gt; <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">m/$pattern/o</span><span class="sc">;</span> <span class="c"># useful for Perl &lt; 5.6</span></li><li>    <span class="s">}</span></li></ol></pre><p>In versions 5.6 and later, Perl won&#39;t recompile the regular expression if the variable hasn&#39;t changed, so you probably don&#39;t need the <code class="inline">/o</code> option. It doesn&#39;t hurt, but it doesn&#39;t help either. If you want any version of Perl to compile the regular expression only once even if the variable changes (thus, only using its initial value), you still need the <code class="inline">/o</code>.</p><p>You can watch Perl&#39;s regular expression engine at work to verify for yourself if Perl is recompiling a regular expression. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;debug&#39;</span></code>  pragma (comes with Perl 5.005 and later) shows the details. With Perls before 5.6, you should see <code class="inline"><span class="w">re</span></code>  reporting that its compiling the regular expression on each iteration. With Perl 5.6 or later, you should only see <code class="inline"><span class="w">re</span></code>  report that for the first iteration.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;debug&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$regex</span> = <span class="q">&#39;Perl&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="q">qw(Perl Java Ruby Python)</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;-&quot;</span> x <span class="n">73</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;Trying $_...\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;\\t$_ is good!\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="q">m/$regex/</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq6.html#What-is-%2fo-really-for%3f
exists argument is not a subroutine name	A			Perl Diagnostics							<section class="prog__container"><p>(F) The argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span></code> for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;sub</span></code>  must be a subroutine name, and not a subroutine call.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">&amp;sub</span><span class="s">(</span><span class="s">)</span></code>  will generate this error.</p></section>	http://perldoc.perl.org/perldiag.html#exists-argument-is-not-a-subroutine-name
What is "the UTF8 flag"?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Please, unless you&#39;re hacking the internals, or debugging weirdness, don&#39;t think about the UTF8 flag at all. That means that you very probably shouldn&#39;t use <code class="inline"><span class="w">is_utf8</span></code> , <code class="inline"><span class="w">_utf8_on</span></code>  or <code class="inline"><span class="w">_utf8_off</span></code>  at all.</p><p>The UTF8 flag, also called SvUTF8, is an internal flag that indicates that the current internal representation is UTF-8. Without the flag, it is assumed to be ISO-8859-1. Perl converts between these automatically.  (Actually Perl usually assumes the representation is ASCII; see <span href="http://perldoc.perl.org/perlunifaq.html#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f">Why do regex character classes sometimes match only in the ASCII range?</span> above.)</p><p>One of Perl&#39;s internal formats happens to be UTF-8. Unfortunately, Perl can&#39;t keep a secret, so everyone knows about this. That is the source of much confusion. It&#39;s better to pretend that the internal format is some unknown encoding, and that you always have to encode and decode explicitly.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-is-%22the-UTF8-flag%22%3f
Ranges of digits should be from the same group in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) (only under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;strict&#39;</span></code>  or within <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code> )</p><p>Stricter rules help to find typos and other errors.  You included a range, and at least one of the end points is a decimal digit.  Under the stricter rules, when this happens, both end points should be digits in the same group of 10 consecutive digits.</p></section>	http://perldoc.perl.org/perldiag.html#Ranges-of-digits-should-be-from-the-same-group-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
crypt (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>crypt PLAINTEXT,SALT</pre><p>Creates a digest string exactly like the crypt(3) function in the C library (assuming that you actually have a version there that has not been extirpated as a potential munition).</p><p>crypt() is a one-way hash function.  The PLAINTEXT and SALT are turned into a short string, called a digest, which is returned.  The same PLAINTEXT and SALT will always return the same string, but there is no (known) way to get the original PLAINTEXT from the hash.  Small changes in the PLAINTEXT or SALT will result in large changes in the digest.</p><p>There is no decrypt function.  This function isn&#39;t all that useful for cryptography (for that, look for <i>Crypt</i> modules on your nearby CPAN mirror) and the name &quot;crypt&quot; is a bit of a misnomer.  Instead it is primarily used to check if two pieces of text are the same without having to transmit or store the text itself.  An example is checking if a correct password is given.  The digest of the password is stored, not the password itself.  The user types in a password that is crypt()&#39;d with the same salt as the stored digest.  If the two digests match, the password is correct.</p><p>When verifying an existing digest string you should use the digest as the salt (like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/crypt.html">crypt</span><span class="s">(</span><span class="i">$plain</span><span class="cm">,</span> <span class="i">$digest</span><span class="s">)</span> eq <span class="i">$digest</span></code> ).  The SALT used to create the digest is visible as part of the digest.  This ensures crypt() will hash the new string with the same salt as the digest. This allows your code to work with the standard <span href="http://perldoc.perl.org/functions/crypt.html">crypt</span> and with more exotic implementations.  In other words, assume nothing about the returned string itself nor about how many bytes  of SALT may matter.</p><p>Traditionally the result is a string of 13 bytes: two first bytes of the salt, followed by 11 bytes from the set <code class="inline">[./0-9A-Za-z]</code>, and only the first eight bytes of PLAINTEXT mattered.  But alternative hashing schemes (like MD5), higher level security schemes (like C2), and implementations on non-Unix platforms may produce different strings.</p><p>When choosing a new salt create a random two character string whose characters come from the set <code class="inline">[./0-9A-Za-z]</code> (like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&#39;&#39;</span><span class="cm">,</span> <span class="s">(</span><span class="q">&#39;.&#39;</span><span class="cm">,</span> <span class="q">&#39;/&#39;</span><span class="cm">,</span> <span class="n">0</span>..<span class="n">9</span><span class="cm">,</span> <span class="q">&#39;A&#39;</span>..<span class="q">&#39;Z&#39;</span><span class="cm">,</span> <span class="q">&#39;a&#39;</span>..<span class="q">&#39;z&#39;</span><span class="s">)</span>[<span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="n">64</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="n">64</span>]</code> ).  This set of characters is just a recommendation; the characters allowed in the salt depend solely on your system&#39;s crypt library, and Perl can&#39;t restrict what salts <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/crypt.html">crypt()</span></code> accepts.</p><p>Here&#39;s an example that makes sure that whoever runs this program knows their password:</p><pre class="verbatim"><ol><li>    <span class="i">$pwd</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span><span class="s">(</span><span class="i">$&lt;</span><span class="s">)</span><span class="s">)</span>[<span class="n">1</span>]<span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty -echo&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Password: &quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="s">(</span><span class="i">$word</span> = <span class="q">&lt;STDIN&gt;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty echo&quot;</span><span class="sc">;</span></li><li></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/crypt.html">crypt</span><span class="s">(</span><span class="i">$word</span><span class="cm">,</span> <span class="i">$pwd</span><span class="s">)</span> ne <span class="i">$pwd</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Sorry...\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> else <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;ok\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Of course, typing in your own password to whoever asks you for it is unwise.</p><p>The <span href="http://perldoc.perl.org/functions/crypt.html">crypt</span> function is unsuitable for hashing large quantities of data, not least of all because you can&#39;t get the information back.  Look at the <span href="http://perldoc.perl.org/Digest.html">Digest</span> module for more robust algorithms.</p><p>If using crypt() on a Unicode string (which <i>potentially</i> has characters with codepoints above 255), Perl tries to make sense of the situation by trying to downgrade (a copy of) the string back to an eight-bit byte string before calling crypt() (on that copy).  If that works, good.  If not, crypt() dies with <code class="inline"><span class="w">Wide</span> <span class="w">character</span> <span class="w">in</span> <span class="l_k" href="http://perldoc.perl.org/functions/crypt.html">crypt</span></code> .</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#crypt">crypt in perlport</span>.</p></section>	http://perldoc.perl.org/functions/crypt.html
Sequence \%s... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The regular expression expects a mandatory argument following the escape sequence and this has been omitted or incorrectly written.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-%5c%25s...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Perl_my_%s() not available	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your platform has very uncommon byte-order and integer size, so it was not possible to set up some or all fixed-width byte-order conversion functions.  This is only a problem when you&#39;re using the &#39;&lt;&#39; or &#39;&gt;&#39; modifiers in (un)pack templates.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Perl_my_%25s()-not-available
Attribute "locked" is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You have used the attributes pragma to modify the &quot;locked&quot; attribute on a code reference.  The :locked attribute is obsolete, has had no effect since 5005 threads were removed, and will be removed in a future release of Perl 5.</p></section>	http://perldoc.perl.org/perldiag.html#Attribute-%22locked%22-is-deprecated
-D number	A			Perl Command-Line Switches							<section class="prog__container"><p>sets debugging flags.  To watch how it executes your program, use <b>-Dtls</b>.  (This works only if debugging is compiled into your Perl.)  Another nice value is <b>-Dx</b>, which lists your compiled syntax tree.  And <b>-Dr</b> displays compiled regular expressions; the format of the output is explained in <span href="http://perldoc.perl.org/perldebguts.html">perldebguts</span>.</p><p>As an alternative, specify a number instead of list of letters (e.g., <b>-D14</b> is equivalent to <b>-Dtls</b>):</p><pre class="verbatim"><ol><li>        <span class="n">1</span>  <span class="w">p</span>  <span class="w">Tokenizing</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">parsing</span> <span class="s">(</span><span class="w">with</span> <span class="w">v</span><span class="cm">,</span> <span class="w">displays</span> <span class="w">parse</span> <span class="w">stack</span><span class="s">)</span></li><li>        <span class="n">2</span>  <span class="q">s  Stack snapshots (with v, displays all stacks)</span></li><li>        <span class="q">        4  l  Context (loop) stack processing</span></li><li>        <span class="q">        8  t  Trace execution</span></li><li>       <span class="q">       16  o  Method and overloading resolution</span></li><li>       <span class="q">       32  c  String/numeric conversions</span></li><li>       <span class="q">       64  P  Print profiling info, source file input state</span></li><li>      <span class="q">      128  m  Memory and SV</span> <span class="w">allocation</span></li><li>      <span class="n">256</span>  <span class="w">f</span>  <span class="w">Format</span> <span class="w">processing</span></li><li>      <span class="n">512</span>  <span class="w">r</span>  <span class="w">Regular</span> <span class="w">expression</span> <span class="w">parsing</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="w">execution</span></li><li>     <span class="n">1024</span>  x  <span class="w">Syntax</span> <span class="w">tree</span> <span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span></li><li>     <span class="n">2048</span>  <span class="w">u</span>  <span class="w">Tainting</span> <span class="w">checks</span></li><li>     <span class="n">4096</span>  <span class="w">U</span>  <span class="w">Unofficial</span><span class="cm">,</span> <span class="w">User</span> <span class="w">hacking</span> <span class="s">(</span><span class="w">reserved</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">private</span><span class="cm">,</span></li><li>              <span class="w">unreleased</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span><span class="s">)</span></li><li>     <span class="n">8192</span>  <span class="w">H</span>  <span class="w">Hash</span> <span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span> -- <span class="w">usurps</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span><span class="s">(</span><span class="s">)</span></li><li>    <span class="n">16384</span>  <span class="w">X</span>  <span class="w">Scratchpad</span> <span class="w">allocation</span></li><li>    <span class="n">32768</span>  <span class="w">D</span>  <span class="w">Cleaning</span> <span class="w">up</span></li><li>    <span class="n">65536</span>  <span class="w">S</span>  <span class="w">Op</span> <span class="w">slab</span> <span class="w">allocation</span></li><li>   <span class="n">131072</span>  <span class="w">T</span>  <span class="w">Tokenizing</span></li><li>   <span class="n">262144</span>  <span class="w">R</span>  <span class="w">Include</span> <span class="w">reference</span> <span class="w">counts</span> <span class="w">of</span> <span class="w">dumped</span> <span class="w">variables</span> <span class="s">(</span><span class="w">eg</span> <span class="l_k" href="http://perldoc.perl.org/functions/when.html">when</span></li><li>              <span class="w">using</span> -<span class="w">Ds</span><span class="s">)</span></li><li>   <span class="n">524288</span>  <span class="w">J</span>  <span class="w">show</span> <span class="q">s,t,P-debug (don&#39;t Jump over) on opcodes within</span></li><li>              <span class="q">              package DB</span></li><li>  <span class="q">  1048576  v  Verbose: use in conjunction with other flags</span></li><li>  <span class="q">  2097152  C  Copy On Write</span></li><li>  <span class="q">  4194304  A  Consistency checks on internal structures</span></li><li>  <span class="q">  8388608  q  quiet - currently only suppresses the &quot;EXECUTING&quot;</span></li><li>              <span class="q">              message</span></li><li> <span class="q"> 16777216  M  trace smart match resolution</span></li><li> <span class="q"> 33554432  B  dump suBroutine definitions,</span> <span class="w">including</span> <span class="w">special</span> <span class="w">Blocks</span></li><li>              <span class="w">like</span> <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span></li><li> <span class="n">67108864</span>  <span class="w">L</span>  <span class="w">trace</span> <span class="w">Locale</span>-<span class="w">related</span> <span class="w">info</span><span class="sc">;</span> <span class="w">what</span> <span class="w">gets</span> <span class="w">output</span> <span class="w">is</span> <span class="w">very</span></li><li>              <span class="w">subject</span> <span class="w">to</span> <span class="w">change</span></li></ol></pre><p>All these flags require <b>-DDEBUGGING</b> when you compile the Perl executable (but see <code class="inline"><span class="j">:</span><span class="w">opd</span></code>  in <span href="http://perldoc.perl.org/Devel/Peek.html">Devel::Peek</span> or <span href="http://perldoc.perl.org/re.html#&#39;debug&#39;-mode">&#39;debug&#39; mode in re</span> which may change this). See the <i>INSTALL</i> file in the Perl source distribution for how to do this.  This flag is automatically set if you include <b>-g</b> option when <code class="inline"><span class="w">Configure</span></code>  asks you about optimizer/debugger flags.</p><p>If you&#39;re just trying to get a print out of each line of Perl code as it executes, the way that <code class="inline"><span class="w">sh</span> -x</code>  provides for shell scripts, you can&#39;t use Perl&#39;s <b>-D</b> switch.  Instead do this</p><pre class="verbatim"><ol><li>  # If you have &quot;env&quot; utility</li><li>  env PERLDB_OPTS=&quot;NonStop=1 AutoTrace=1 frame=2&quot; perl -dS program</li><li></li><li>  # Bourne shell syntax</li><li>  $ PERLDB_OPTS=&quot;NonStop=1 AutoTrace=1 frame=2&quot; perl -dS program</li><li></li><li>  # csh syntax</li><li>  % (setenv PERLDB_OPTS &quot;NonStop=1 AutoTrace=1 frame=2&quot;; perl -dS program)</li></ol></pre><p>See <span href="http://perldoc.perl.org/perldebug.html">perldebug</span> for details and variations.</p></section>	http://perldoc.perl.org/perlrun.html#*-D*_number_
Internal inconsistency in tracking vforks	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning peculiar to VMS.  Perl keeps track of the number of times you&#39;ve called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code>, to determine whether the current call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> should affect the current script or a subprocess (see <span href="http://perldoc.perl.org/perlvms.html#exec-LIST">exec LIST in perlvms</span>).  Somehow, this count has become scrambled, so Perl is making a guess and treating this <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> as a request to terminate the Perl script and execute the specified command.</p></section>	http://perldoc.perl.org/perldiag.html#Internal-inconsistency-in-tracking-vforks
Can't use %s ref as %s ref	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;ve mixed up your reference types.  You have to dereference a reference of the type needed.  You can use the ref() function to test the type of the reference, if need be.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-%25s-ref-as-%25s-ref
Applying %s to %s will act on scalar(%s)	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) The pattern match (<code class="inline"><span class="q">//</span></code> ), substitution (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code>), and transliteration (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tr.html">tr///</span></code>) operators work on scalar values.  If you apply one of them to an array or a hash, it will convert the array or hash to a scalar value (the length of an array, or the population info of a hash) and then work on that scalar value.  This is probably not what you meant to do.  See <span href="http://perldoc.perl.org/functions/grep.html">grep</span> and <span href="http://perldoc.perl.org/functions/map.html">map</span> for alternatives.</p></section>	http://perldoc.perl.org/perldiag.html#Applying-%25s-to-%25s-will-act-on-scalar(%25s)
Can't locate package %s for @%s::ISA	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) The @ISA array contained the name of another package that doesn&#39;t seem to exist.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-package-%25s-for-%40%25s%3a%3aISA
exists argument is not a HASH or ARRAY element or a subroutine	A			Perl Diagnostics							<section class="prog__container"><p>(F) The argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span></code> must be a hash or array element or a subroutine with an ampersand, such as:</p><pre class="verbatim"><ol><li>    $foo{$bar}</li><li>    $ref-&gt;{&quot;susie&quot;}[12]</li><li>    &amp;do_something</li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#exists-argument-is-not-a-HASH-or-ARRAY-element-or-a-subroutine
declarator (definition)	A			Perl Glossary							<section class="prog__container"><p>Something that tells your program what sort of variable you’d like. Perl doesn’t require you to declare variables, but you can use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> to denote that you want something other than the default.</p></section>	http://perldoc.perl.org/perlglossary.html#declarator
Fcntl (module)	A			Perl Standard Modules							<section class="prog__container"><p>Fcntl - load the C Fcntl.h defines</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Fcntl</span> <span class="q">qw(:DEFAULT :flock)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Fcntl.html
combining character (definition)	A			Perl Glossary							<section class="prog__container"><p>Any character with the General Category of Combining Mark (<code class="inline">\\<span class="i">p</span><span class="s">{</span><span class="w">GC</span>=<span class="w">M</span><span class="s">}</span></code> ), which may be spacing or nonspacing. Some are even invisible. A sequence of combining characters following a grapheme base character together make up a single user-visible character called a <b>grapheme</b>. Most but not all diacritics are combining characters, and vice versa.</p></section>	http://perldoc.perl.org/perlglossary.html#combining-character
Slab leaked from cv %p	A			Perl Diagnostics							<section class="prog__container"><p>(S) If you see this message, then something is seriously wrong with the internal bookkeeping of op trees.  An op tree needed to be freed after a compilation error, but could not be found, so it was leaked instead.</p></section>	http://perldoc.perl.org/perldiag.html#Slab-leaked-from-cv-%25p
Not a subroutine reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl was trying to evaluate a reference to a code value (that is, a subroutine), but found a reference to something else instead.  You can use the ref() function to find out what kind of ref it really was.  See also <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Not-a-subroutine-reference
Pod::Text::Color (module)	A			Perl Standard Modules		[[Pod::Text]]\n[[Pod::Simple]]\n[[http://www.eyrie.org/~eagle/software/podlators/]]					<section class="prog__container"><p>Pod::Text::Color - Convert POD data to formatted color ASCII text</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Text::Color</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">Pod::Text::Color</span><span class="w">-&gt;new</span> <span class="s">(</span><span class="w">sentence</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="w">width</span> <span class="cm">=&gt;</span> <span class="n">78</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from STDIN and write to STDOUT.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Read POD from file.pod and write to file.txt.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span> <span class="s">(</span><span class="q">&#39;file.pod&#39;</span><span class="cm">,</span> <span class="q">&#39;file.txt&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Text/Color.html
Why don't my <<HERE documents work?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Here documents are found in <span href="http://perldoc.perl.org/perlop.html">perlop</span>. Check for these three things:</p><p>If you want to indent the text in the here document, you can do this:</p><pre class="verbatim"><ol><li>    <span class="c"># all in one</span></li><li>    <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$VAR</span> = <span class="h">&lt;&lt;HERE_TARGET</span><span class="s">)</span> =~ <span class="q">s/^\\s+//gm</span><span class="sc">;</span></li><li><span class="hh">        your text</span></li><li><span class="hh">        goes here</span></li><li><span class="hh">    HERE_TARGET</span></li></ol></pre><p>But the HERE_TARGET must still be flush against the margin. If you want that indented also, you&#39;ll have to quote in the indentation.</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$quote</span> = <span class="h">&lt;&lt;&#39;    FINIS&#39;</span><span class="s">)</span> =~ <span class="q">s/^\\s+//gm</span><span class="sc">;</span></li><li><span class="hh">            ...we will have peace, when you and all your works have</span></li><li><span class="hh">            perished--and the works of your dark master to whom you</span></li><li><span class="hh">            would deliver us. You are a liar, Saruman, and a corrupter</span></li><li><span class="hh">            of men&#39;s hearts. --Theoden in /usr/src/perl/taint.c</span></li><li><span class="hh">        FINIS</span></li><li><span class="hh">    $quote =~ s/\\s+--/\\n--/;</span></li></ol></pre><p>A nice general-purpose fixer-upper function for indented here documents follows. It expects to be called with a here document as its argument. It looks to see whether each line begins with a common substring, and if so, strips that substring off. Otherwise, it takes the amount of leading whitespace found on the first line and removes that much off each subsequent line.</p><pre class="verbatim"><ol><li><span name="fix"></span>    sub <span class="m">fix</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$_</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$white</span><span class="cm">,</span> <span class="i">$leader</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># common whitespace and common leading string</span></li><li>        if <span class="s">(</span><span class="q">/^\\s*(?:([^\\w\\s]+)(\\s*).*\\n)(?:\\s*\\g1\\g2?.*\\n)+$/</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="s">(</span><span class="i">$white</span><span class="cm">,</span> <span class="i">$leader</span><span class="s">)</span> = <span class="s">(</span><span class="i">$2</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/quotemeta.html">quotemeta</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span> else <span class="s">{</span></li><li>            <span class="s">(</span><span class="i">$white</span><span class="cm">,</span> <span class="i">$leader</span><span class="s">)</span> = <span class="s">(</span><span class="q">/^(\\s+)/</span><span class="cm">,</span> <span class="q">&#39;&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>        <span class="q">s/^\\s*?$leader(?:$white)?//gm</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$_</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>This works with leading special strings, dynamically determined:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$remember_the_main</span> = <span class="w">fix</span><span class="h">&lt;&lt;&#39;    MAIN_INTERPRETER_LOOP&#39;</span><span class="sc">;</span></li><li><span class="hh">    @@@ int</span></li><li><span class="hh">    @@@ runops() {</span></li><li><span class="hh">    @@@     SAVEI32(runlevel);</span></li><li><span class="hh">    @@@     runlevel++;</span></li><li><span class="hh">    @@@     while ( op = (*op-&gt;op_ppaddr)() );</span></li><li><span class="hh">    @@@     TAINT_NOT;</span></li><li><span class="hh">    @@@     return 0;</span></li><li><span class="hh">    @@@ }</span></li><li><span class="h">    MAIN_INTERPRETER_LOOP</span></li></ol></pre><p>Or with a fixed amount of leading whitespace, with remaining indentation correctly preserved:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$poem</span> = <span class="w">fix</span><span class="h">&lt;&lt;EVER_ON_AND_ON</span><span class="sc">;</span></li><li><span class="hh">       Now far ahead the Road has gone,</span></li><li><span class="hh">      And I must follow, if I can,</span></li><li><span class="hh">       Pursuing it with eager feet,</span></li><li><span class="hh">      Until it joins some larger way</span></li><li><span class="hh">       Where many paths and errands meet.</span></li><li><span class="hh">      And whither then? I cannot say.</span></li><li><span class="hh">        --Bilbo in /usr/src/perl/pp_ctl.c</span></li><li><span class="hh">    EVER_ON_AND_ON</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#Why-don't-my-%3c%3cHERE-documents-work%3f
bucket (definition)	A			Perl Glossary							<section class="prog__container"><p>A location in a <b>hash table</b> containing (potentially) multiple entries whose keys “hash” to the same hash value according to its hash function. (As internal policy, you don’t have to worry about it unless you’re into internals, or policy.)</p></section>	http://perldoc.perl.org/perlglossary.html#bucket
opendir (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>opendir DIRHANDLE,EXPR</pre><p>Opens a directory named EXPR for processing by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/telldir.html">telldir</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seekdir.html">seekdir</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rewinddir.html">rewinddir</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/closedir.html">closedir</span></code>.  Returns true if successful. DIRHANDLE may be an expression whose value can be used as an indirect dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined scalar variable (or array or hash element), the variable is assigned a reference to a new anonymous dirhandle; that is, it&#39;s autovivified. DIRHANDLEs have their own namespace separate from FILEHANDLEs.</p><p>See the example at <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code>.</p></section>	http://perldoc.perl.org/functions/opendir.html
indirect object (definition)	A			Perl Glossary							<section class="prog__container"><p>In English grammar, a short noun phrase between a verb and its direct object indicating the beneficiary or recipient of the action. In Perl, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDOUT</span> <span class="q">&quot;$foo\\n&quot;</span><span class="sc">;</span></code>  can be understood as “verb indirect-object object”, where <code class="inline"><span class="w">STDOUT</span></code>  is the recipient of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> action, and <code class="inline"><span class="q">&quot;$foo&quot;</span></code>  is the object being printed.  Similarly, when invoking a <b>method</b>, you might place the invocant in the dative slot between the method and its arguments:</p><pre class="verbatim"><ol><li>    <span class="i">$gollum</span> = <span class="w">new</span> <span class="w">Pathetic::Creature</span> <span class="q">&quot;Sméagol&quot;</span><span class="sc">;</span></li><li>    <span class="w">give</span> <span class="i">$gollum</span> <span class="q">&quot;Fisssssh!&quot;</span><span class="sc">;</span></li><li>    <span class="w">give</span> <span class="i">$gollum</span> <span class="q">&quot;Precious!&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlglossary.html#indirect-object
No such class field "%s" in variable %s of type %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to access a key from a hash through the indicated typed variable but that key is not allowed by the package of the same type. The indicated package has restricted the set of allowed keys using the <span href="http://perldoc.perl.org/fields.html">fields</span> pragma.</p></section>	http://perldoc.perl.org/perldiag.html#No-such-class-field-%22%25s%22-in-variable-%25s-of-type-%25s
How can I print out a word-frequency or line-frequency summary?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>To do this, you have to parse out each word in the input stream. We&#39;ll pretend that by word you mean chunk of alphabetics, hyphens, or apostrophes, rather than the non-whitespace chunk idea of a word given in the previous question:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">%seen</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="q">/(\\b[^\\W_\\d][\\w&#39;-]+\\b)/g</span> <span class="s">)</span> <span class="s">{</span>   <span class="c"># misses &quot;`sheep&#39;&quot;</span></li><li>            <span class="i">$seen</span>{<span class="i">$1</span>}++<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$word</span><span class="cm">,</span> <span class="i">$count</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%seen</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$count $word\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you wanted to do the same thing for lines, you wouldn&#39;t need a regular expression:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">%seen</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$seen</span>{<span class="i">$_</span>}++<span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$line</span><span class="cm">,</span> <span class="i">$count</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%seen</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$count $line&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>If you want these output in a sorted order, see <span href="http://perldoc.perl.org/perlfaq4.html">perlfaq4</span>: &quot;How do I sort a hash (optionally by value instead of key)?&quot;.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-print-out-a-word-frequency-or-line-frequency-summary%3f
PerlIO::encoding (module)	A			Perl Standard Modules		[[open]]\n[[Encode]]\n[[binmode]]\n[[perluniintro]]					<section class="prog__container"><p>PerlIO::encoding - encoding layer</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">PerlIO::encoding</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$f</span><span class="cm">,</span> <span class="q">&quot;&lt;:encoding(foo)&quot;</span><span class="cm">,</span> <span class="q">&quot;infoo&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$f</span><span class="cm">,</span> <span class="q">&quot;&gt;:encoding(bar)&quot;</span><span class="cm">,</span> <span class="q">&quot;outbar&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw(:fallbacks)</span><span class="sc">;</span></li><li>  <span class="i">$PerlIO::encoding::fallback</span> = <span class="w">FB_PERLQQ</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/PerlIO/encoding.html
uppercase (definition)	A			Perl Glossary							<section class="prog__container"><p>In Unicode, not just characters with the General Category of Uppercase Letter, but any character with the Uppercase property, including some Letter Numbers and Symbols. Not to be confused with <b>titlecase</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#uppercase
Can't locate auto/%s.al in @INC	A			Perl Diagnostics							<section class="prog__container"><p>(F) A function (or method) was called in a package which allows autoload, but there is no function to autoload.  Most probable causes are a misprint in a function/method name or a failure to <code class="inline"><span class="w">AutoSplit</span></code>  the file, say, by doing <code class="inline"><span class="w">make</span> <span class="w">install</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-auto%2f%25s.al-in-%40INC
Invalid version format (%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) A version number did not meet the &quot;lax&quot; criteria for versions. A &quot;lax&quot; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string.  If the v-string has fewer than three components, it must have a leading &#39;v&#39; character.  Otherwise, the leading &#39;v&#39; is optional.  Both decimal and dotted-decimal versions may have a trailing &quot;alpha&quot; component separated by an underscore character after a fractional or dotted-decimal component.  The parenthesized text indicates which criteria were not met.  See the <span href="http://perldoc.perl.org/version.html">version</span> module for more details on allowed version formats.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-version-format-(%25s)
Pod::Perldoc::ToPod (module)	A			Perl Standard Modules		[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToPod - let Perldoc render Pod as ... Pod!</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -<span class="w">opod</span> <span class="w">Some::Modulename</span></li></ol></pre><p>(That&#39;s currently the same as the following:)</p><pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -u <span class="w">Some::Modulename</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToPod.html
Encode::KR::2022_KR (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::KR::2022_KR -- internally used by Encode::KR</p> </section>	http://perldoc.perl.org/Encode/KR/2022_KR.html
compiler (definition)	A			Perl Glossary							<section class="prog__container"><p>Strictly speaking, a program that munches up another program and spits out yet another file containing the program in a “more executable” form, typically containing native machine instructions. The <i>perl</i> program is not a compiler by this definition, but it does contain a kind of compiler that takes a program and turns it into a more executable form (<b>syntax trees</b>) within the <i>perl</i> process itself, which the <b>interpreter</b> then interprets. There are, however, extension <b>modules</b> to get Perl to act more like a “real” compiler. See Camel chapter 16, “Compiling”.</p></section>	http://perldoc.perl.org/perlglossary.html#compiler
compilation unit (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>file</b> (or <b>string</b>, in the case of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>) that is currently being <b>compiled</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#compilation-unit
Missing right brace on \N{} or unescaped left brace after \N	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline">\\<span class="w">N</span></code>  has two meanings.</p><p>The traditional one has it followed by a name enclosed in braces, meaning the character (or sequence of characters) given by that name.  Thus <code class="inline">\\<span class="i">N</span><span class="s">{</span><span class="w">ASTERISK</span><span class="s">}</span></code>  is another way of writing <code class="inline"><span class="i">*</span></code> , valid in both double-quoted strings and regular expression patterns.  In patterns, it doesn&#39;t have the meaning an unescaped <code class="inline"><span class="i">*</span></code>  does.</p><p>Starting in Perl 5.12.0, <code class="inline">\\<span class="w">N</span></code>  also can have an additional meaning (only) in patterns, namely to match a non-newline character.  (This is short for <code class="inline">[^\\n]</code>, and like <code class="inline">.</code> but is not affected by the <code class="inline">/s</code> regex modifier.)</p><p>This can lead to some ambiguities.  When <code class="inline">\\<span class="w">N</span></code>  is not followed immediately by a left brace, Perl assumes the <code class="inline">[^\\n]</code> meaning.  Also, if the braces form a valid quantifier such as <code class="inline">\\<span class="i">N</span><span class="s">{</span><span class="n">3</span><span class="s">}</span></code>  or <code class="inline">\\<span class="w">N</span><span class="s">{</span><span class="n">5</span><span class="cm">,</span><span class="s">}</span></code> , Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively).  In all other case, where there is a <code class="inline">\\N{</code> and a matching <code class="inline">}</code>, Perl assumes that a character name is desired.</p><p>However, if there is no matching <code class="inline">}</code>, Perl doesn&#39;t know if it was mistakenly omitted, or if <code class="inline">[^\\n]{</code> was desired, and raises this error. If you meant the former, add the right brace; if you meant the latter, escape the brace with a backslash, like so: <code class="inline">\\N\\{</code></p></section>	http://perldoc.perl.org/perldiag.html#Missing-right-brace-on-%5cN%7b%7d-or-unescaped-left-brace-after-%5cN
Perl API version %s of %s does not match %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The XS module in question was compiled against a different incompatible version of Perl than the one that has loaded the XS module.</p></section>	http://perldoc.perl.org/perldiag.html#Perl-API-version-%25s-of-%25s-does-not-match-%25s
No package name allowed for variable %s in "our"	A			Perl Diagnostics							<section class="prog__container"><p>(F) Fully qualified variable names are not allowed in &quot;our&quot; declarations, because that doesn&#39;t make much sense under existing rules.  Such syntax is reserved for future extensions.</p></section>	http://perldoc.perl.org/perldiag.html#No-package-name-allowed-for-variable-%25s-in-%22our%22
Term::ANSIColor (module)	A			Perl Standard Modules		[[Term::ExtendedColor]]\n[[Win32::Console::ANSI]]\n[[http://www.ecma-international.org/publications/standards/Ecma-048.htm]]\n[[http://invisible-island.net/xterm/ctlseqs/ctlseqs.html]]\n[[http://www.eyrie.org/~eagle/software/ansicolor/]]					<section class="prog__container"><p>Term::ANSIColor - Color screen output using ANSI escape sequences</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">color</span><span class="s">(</span><span class="q">&#39;bold blue&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is bold blue.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">color</span><span class="s">(</span><span class="q">&#39;reset&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is normal.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colored</span><span class="s">(</span><span class="q">&quot;Yellow on magenta.&quot;</span><span class="cm">,</span> <span class="q">&#39;yellow on_magenta&#39;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is normal.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colored</span><span class="s">(</span><span class="s">[</span><span class="q">&#39;yellow on_magenta&#39;</span><span class="s">]</span><span class="cm">,</span> <span class="q">&#39;Yellow on magenta.&#39;</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colored</span><span class="s">(</span><span class="s">[</span><span class="q">&#39;red on_bright_yellow&#39;</span><span class="s">]</span><span class="cm">,</span> <span class="q">&#39;Red on bright yellow.&#39;</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colored</span><span class="s">(</span><span class="s">[</span><span class="q">&#39;bright_red on_black&#39;</span><span class="s">]</span><span class="cm">,</span> <span class="q">&#39;Bright red on black.&#39;</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Map escape sequences back to color names.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="n">1.04</span> <span class="q">qw(uncolor)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$names</span> = <span class="i">uncolor</span><span class="s">(</span><span class="q">&#39;01;31&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">q{ }</span><span class="cm">,</span> <span class="i">@</span>{<span class="i">$names</span>}<span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Strip all color escape sequences.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="n">2.01</span> <span class="q">qw(colorstrip)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colorstrip</span><span class="s">(</span><span class="q">&quot;\\e[1mThis is bold\\e[0m&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Determine whether a color is valid.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="n">2.02</span> <span class="q">qw(colorvalid)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$valid</span> = <span class="i">colorvalid</span><span class="s">(</span><span class="q">&#39;blue bold&#39;</span><span class="cm">,</span> <span class="q">&#39;on_magenta&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Color string is &quot;</span><span class="cm">,</span> <span class="i">$valid</span> ? <span class="q">&quot;valid\\n&quot;</span> <span class="co">:</span> <span class="q">&quot;invalid\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Create new aliases for colors.</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="n">4.00</span> <span class="q">qw(coloralias)</span><span class="sc">;</span></li><li>    <span class="i">coloralias</span><span class="s">(</span><span class="q">&#39;alert&#39;</span><span class="cm">,</span> <span class="q">&#39;red&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Alert is &quot;</span><span class="cm">,</span> <span class="i">coloralias</span><span class="s">(</span><span class="q">&#39;alert&#39;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">colored</span><span class="s">(</span><span class="q">&quot;This is in red.&quot;</span><span class="cm">,</span> <span class="q">&#39;alert&#39;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="q">qw(:constants)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">BOLD</span><span class="cm">,</span> <span class="w">BLUE</span><span class="cm">,</span> <span class="q">&quot;This text is in bold blue.\\n&quot;</span><span class="cm">,</span> <span class="w">RESET</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="q">qw(:constants)</span><span class="sc">;</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$Term::ANSIColor::AUTORESET</span> = <span class="n">1</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">BOLD</span> <span class="w">BLUE</span> <span class="q">&quot;This text is in bold blue.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is normal.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="n">2.00</span> <span class="q">qw(:pushpop)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">PUSHCOLOR</span> <span class="w">RED</span> <span class="w">ON_GREEN</span> <span class="q">&quot;This text is red on green.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">PUSHCOLOR</span> <span class="w">BRIGHT_BLUE</span> <span class="q">&quot;This text is bright blue on green.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">RESET</span> <span class="w">BRIGHT_BLUE</span> <span class="q">&quot;This text is just bright blue.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">POPCOLOR</span> <span class="q">&quot;Back to red on green.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">LOCALCOLOR</span> <span class="w">GREEN</span> <span class="w">ON_BLUE</span> <span class="q">&quot;This text is green on blue.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is red on green.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$Term::ANSIColor::AUTOLOCAL</span> = <span class="n">1</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">ON_BLUE</span> <span class="q">&quot;This text is red on blue.\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This text is red on green.\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">POPCOLOR</span> <span class="q">&quot;Back to whatever we started as.\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Term/ANSIColor.html
dbmclose (function)	A			Perl Functions\nPerl Input and output functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>dbmclose HASH</pre><p>[This function has been largely superseded by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span></code> function.]</p><p>Breaks the binding between a DBM file and a hash.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#dbmclose">dbmclose in perlport</span>.</p></section>	http://perldoc.perl.org/functions/dbmclose.html
panic: pp_match%s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal pp_match() routine was called with invalid operational data.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-pp_match%25s
How can I set up a footer format to be used with write()?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>There&#39;s no builtin way to do this, but <span href="http://perldoc.perl.org/perlform.html">perlform</span> has a couple of techniques to make it possible for the intrepid hacker.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-set-up-a-footer-format-to-be-used-with-write()%3f
SelectSaver (module)	A			Perl Standard Modules							<section class="prog__container"><p>SelectSaver - save and restore selected file handle</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SelectSaver</span><span class="sc">;</span></li><li></li><li>    <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$saver</span> = <span class="w">SelectSaver</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">FILEHANDLE</span><span class="s">)</span><span class="sc">;</span></li><li>       <span class="c"># FILEHANDLE is selected</span></li><li>    <span class="s">}</span></li><li>    <span class="c"># previous handle is selected</span></li><li></li><li>    <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$saver</span> = <span class="w">SelectSaver</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>       <span class="c"># new handle may be selected, or not</span></li><li>    <span class="s">}</span></li><li>    <span class="c"># previous handle is selected</span></li></ol></pre></section>	http://perldoc.perl.org/SelectSaver.html
: Files and Formats	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section deals with I/O and the &quot;f&quot; issues: filehandles, flushing, formats, and footers.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq5-manpage%3a-Files-and-Formats
Self-ties of arrays and hashes are not supported	A			Perl Diagnostics							<section class="prog__container"><p>(F) Self-ties are of arrays and hashes are not supported in the current implementation.</p></section>	http://perldoc.perl.org/perldiag.html#Self-ties-of-arrays-and-hashes-are-not-supported
Bad realloc() ignored	A			Perl Diagnostics							<section class="prog__container"><p>(S malloc) An internal routine called realloc() on something that had never been malloc()ed in the first place.  Mandatory, but can be disabled by setting the environment variable <code class="inline"><span class="w">PERL_BADFREE</span></code>  to 1.</p></section>	http://perldoc.perl.org/perldiag.html#Bad-realloc()-ignored
Insecure directory in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You can&#39;t use system(), exec(), or a piped open in a setuid or setgid script if <code class="inline"><span class="i">$ENV</span>{<span class="w">PATH</span>}</code>  contains a directory that is writable by the world.  Also, the PATH must not contain any relative directory. See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Insecure-directory-in-%25s
Invalid character in \N{...}; marked by <-- HERE in \N{%s}	A			Perl Diagnostics							<section class="prog__container"><p>(F) Only certain characters are valid for character names.  The indicated one isn&#39;t.  See <span href="http://perldoc.perl.org/charnames.html#CUSTOM-ALIASES">CUSTOM ALIASES in charnames</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-character-in-%5cN%7b...%7d%3b-marked-by-%3c---HERE-in-%5cN%7b%25s%7d
How do I select a random element from an array?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand()</span></code> function (see <span href="http://perldoc.perl.org/functions/rand.html">rand</span>):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$index</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="i">@array</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> = <span class="i">$array</span>[<span class="i">$index</span>]<span class="sc">;</span></li></ol></pre><p>Or, simply:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$element</span> = <span class="i">$array</span>[ <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> <span class="i">@array</span> ]<span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-select-a-random-element-from-an-array%3f
Compress::Zlib (module)	A			Perl Standard Modules		[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>Compress::Zlib - Interface to zlib compression library</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Compress::Zlib</span> <span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$d</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="i">deflateInit</span><span class="s">(</span> <span class="s">[</span><span class="w">OPT</span><span class="s">]</span> <span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$d</span><span class="i">-&gt;deflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$d</span><span class="i">-&gt;flush</span><span class="s">(</span><span class="s">[</span><span class="i">$flush_type</span><span class="s">]</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;deflateParams</span><span class="s">(</span><span class="w">OPTS</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;deflateTune</span><span class="s">(</span><span class="w">OPTS</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;dict_adler</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;crc32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;adler32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;total_in</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;total_out</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;msg</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_Strategy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_Level</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_BufSize</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$i</span><span class="cm">,</span> <span class="i">$status</span><span class="s">)</span> = <span class="i">inflateInit</span><span class="s">(</span> <span class="s">[</span><span class="w">OPT</span><span class="s">]</span> <span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$i</span><span class="i">-&gt;inflate</span><span class="s">(</span><span class="i">$input</span><span class="cm">,</span> <span class="i">$output</span> [<span class="cm">,</span> <span class="i">$eof</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$i</span><span class="i">-&gt;inflateSync</span><span class="s">(</span><span class="i">$input</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;dict_adler</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;crc32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;adler32</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;total_in</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;total_out</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$i</span><span class="i">-&gt;msg</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$d</span><span class="i">-&gt;get_BufSize</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$dest</span> = <span class="i">compress</span><span class="s">(</span><span class="i">$source</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$dest</span> = <span class="i">uncompress</span><span class="s">(</span><span class="i">$source</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$gz</span> = <span class="i">gzopen</span><span class="s">(</span><span class="i">$filename</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">filehandle</span><span class="cm">,</span> <span class="i">$mode</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$bytesread</span> = <span class="i">$gz</span><span class="i">-&gt;gzread</span><span class="s">(</span><span class="i">$buffer</span> [<span class="cm">,</span><span class="i">$size</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$bytesread</span> = <span class="i">$gz</span><span class="i">-&gt;gzreadline</span><span class="s">(</span><span class="i">$line</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$byteswritten</span> = <span class="i">$gz</span><span class="i">-&gt;gzwrite</span><span class="s">(</span><span class="i">$buffer</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$gz</span><span class="i">-&gt;gzflush</span><span class="s">(</span><span class="i">$flush</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$offset</span> = <span class="i">$gz</span><span class="i">-&gt;gztell</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$gz</span><span class="i">-&gt;gzseek</span><span class="s">(</span><span class="i">$offset</span><span class="cm">,</span> <span class="i">$whence</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$gz</span><span class="i">-&gt;gzclose</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$gz</span><span class="i">-&gt;gzeof</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$status</span> = <span class="i">$gz</span><span class="i">-&gt;gzsetparams</span><span class="s">(</span><span class="i">$level</span><span class="cm">,</span> <span class="i">$strategy</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$errstring</span> = <span class="i">$gz</span><span class="i">-&gt;gzerror</span><span class="s">(</span><span class="s">)</span> <span class="sc">;</span> </li><li>    <span class="i">$gzerrno</span></li><li></li><li>    <span class="i">$dest</span> = <span class="i">Compress::Zlib::memGzip</span><span class="s">(</span><span class="i">$buffer</span><span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$dest</span> = <span class="i">Compress::Zlib::memGunzip</span><span class="s">(</span><span class="i">$buffer</span><span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$crc</span> = <span class="i">adler32</span><span class="s">(</span><span class="i">$buffer</span> [<span class="cm">,</span><span class="i">$crc</span>]<span class="s">)</span> <span class="sc">;</span></li><li>    <span class="i">$crc</span> = <span class="i">crc32</span><span class="s">(</span><span class="i">$buffer</span> [<span class="cm">,</span><span class="i">$crc</span>]<span class="s">)</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$crc</span> = <span class="i">crc32_combine</span><span class="s">(</span><span class="i">$crc1</span><span class="cm">,</span> <span class="i">$crc2</span><span class="cm">,</span> <span class="i">$len2</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$adler</span> = <span class="i">adler32_combine</span><span class="s">(</span><span class="i">$adler1</span><span class="cm">,</span> <span class="i">$adler2</span><span class="cm">,</span> <span class="i">$len2</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$version</span> = <span class="i">Compress::Raw::Zlib::zlib_version</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Compress/Zlib.html
ExtUtils::MM_Win95 (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_Win95 - method to customize MakeMaker for Win9X</p> <pre class="verbatim"><ol><li>  <span class="w">You</span> <span class="w">should</span> not <span class="w">be</span> <span class="w">using</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_Win95.html
Tie::Array (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::Array - base class for tied arrays</p> <pre class="verbatim"><ol><li><span name="package-Tie::NewArray"></span>    package <span class="i">Tie::NewArray</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::Array</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="s">(</span><span class="q">&#39;Tie::Array&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># mandatory methods</span></li><li><span name="TIEARRAY"></span>    sub <span class="m">TIEARRAY</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="FETCH"></span>    sub <span class="m">FETCH</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="FETCHSIZE"></span>    sub <span class="m">FETCHSIZE</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li><span name="STORE"></span>    sub <span class="m">STORE</span> <span class="s">{</span> ... <span class="s">}</span>       <span class="c"># mandatory if elements writeable</span></li><li><span name="STORESIZE"></span>    sub <span class="m">STORESIZE</span> <span class="s">{</span> ... <span class="s">}</span>   <span class="c"># mandatory if elements can be added/deleted</span></li><li><span name="EXISTS"></span>    sub <span class="m">EXISTS</span> <span class="s">{</span> ... <span class="s">}</span>      <span class="c"># mandatory if exists() expected to work</span></li><li><span name="DELETE"></span>    sub <span class="m">DELETE</span> <span class="s">{</span> ... <span class="s">}</span>      <span class="c"># mandatory if delete() expected to work</span></li><li></li><li>    <span class="c"># optional methods - for efficiency</span></li><li><span name="CLEAR"></span>    sub <span class="m">CLEAR</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="PUSH"></span>    sub <span class="m">PUSH</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="POP"></span>    sub <span class="m">POP</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="SHIFT"></span>    sub <span class="m">SHIFT</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="UNSHIFT"></span>    sub <span class="m">UNSHIFT</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="SPLICE"></span>    sub <span class="m">SPLICE</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="EXTEND"></span>    sub <span class="m">EXTEND</span> <span class="s">{</span> ... <span class="s">}</span></li><li><span name="DESTROY"></span>    sub <span class="m">DESTROY</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li><span name="package-Tie::NewStdArray"></span>    package <span class="i">Tie::NewStdArray</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Tie::Array</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="s">(</span><span class="q">&#39;Tie::StdArray&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># all methods provided by default</span></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="i">$object</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">@somearray</span><span class="cm">,</span><span class="q">&#39;Tie::NewArray&#39;</span><span class="sc">;</span></li><li>    <span class="i">$object</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">@somearray</span><span class="cm">,</span><span class="q">&#39;Tie::StdArray&#39;</span><span class="sc">;</span></li><li>    <span class="i">$object</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">@somearray</span><span class="cm">,</span><span class="q">&#39;Tie::NewStdArray&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Array.html
How do I process an entire hash?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>There are a couple of ways that you can process an entire hash. You can get a list of keys, then go through each key, or grab a one key-value pair at a time.</p><p>To go through all of the keys, use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> function. This extracts all of the keys of the hash and gives them back to you as a list. You can then get the value through the particular key you&#39;re processing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$value</span> = <span class="i">$hash</span>{<span class="i">$key</span>}</li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>Once you have the list of keys, you can process that list before you process the hash elements. For instance, you can sort the keys so you can process them in lexical order:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$value</span> = <span class="i">$hash</span>{<span class="i">$key</span>}</li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>Or, you might want to only process some of the items. If you only want to deal with the keys that start with <code class="inline"><span class="j">text:</span></code> , you can select just those using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="q">/^text:/</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$value</span> = <span class="i">$hash</span>{<span class="i">$key</span>}</li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>If the hash is very large, you might not want to create a long list of keys. To save some memory, you can grab one key-value pair at a time using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code>, which returns a pair you haven&#39;t seen yet:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$key</span><span class="cm">,</span> <span class="i">$value</span> <span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span><span class="s">(</span> <span class="i">%hash</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> operator returns the pairs in apparently random order, so if ordering matters to you, you&#39;ll have to stick with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> method.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each()</span></code> operator can be a bit tricky though. You can&#39;t add or delete keys of the hash while you&#39;re using it without possibly skipping or re-processing some pairs after Perl internally rehashes all of the elements. Additionally, a hash has only one iterator, so if you mix <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> on the same hash, you risk resetting the iterator and messing up your processing. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> entry in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> for more details.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-process-an-entire-hash%3f
Perl %s required (did you mean %s?)--this is only %s, stopped	A			Perl Diagnostics							<section class="prog__container"><p>(F) The code you are trying to run has asked for a newer version of Perl than you are running.  Perhaps <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.10</span></code>  was written instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.010</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.10</span></code> .  Without the leading <code class="inline"><span class="w">v</span></code> , the number is interpreted as a decimal, with every three digits after the decimal point representing a part of the version number.  So 5.10 is equivalent to v5.100.</p></section>	http://perldoc.perl.org/perldiag.html#Perl-%25s-required-(did-you-mean-%25s%3f)--this-is-only-%25s%2c-stopped
panic: Sequence (?{...}): no code block found in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(P) While compiling a pattern that has embedded (?{}) or (??{}) code blocks, perl couldn&#39;t locate the code block that should have already been seen and compiled by perl before control passed to the regex compiler.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-Sequence-(%3f%7b...%7d)%3a-no-code-block-found-in-regex-m%2f%25s%2f
Can't "goto" into the middle of a foreach loop	A			Perl Diagnostics							<section class="prog__container"><p>(F) A &quot;goto&quot; statement was executed to jump into the middle of a foreach loop.  You can&#39;t get there from here.  See <span href="http://perldoc.perl.org/functions/goto.html">goto</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22goto%22-into-the-middle-of-a-foreach-loop
IO::Uncompress::RawInflate (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Uncompress::RawInflate - Read RFC 1951 files/buffers</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::RawInflate qw(rawinflate $RawInflateError) ;</li><li></li><li>    my $status = rawinflate $input =&gt; $output [,OPTS]</li><li>        or die &quot;rawinflate failed: $RawInflateError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::RawInflate $input [OPTS] </li><li>        or die &quot;rawinflate failed: $RawInflateError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $status = $z-&gt;inflateSync()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $RawInflateError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/RawInflate.html
How can I use a variable as a variable name?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Beginners often think they want to have a variable contain the name of a variable.</p><pre class="verbatim"><ol><li>    <span class="i">$fred</span>    = <span class="n">23</span><span class="sc">;</span></li><li>    <span class="i">$varname</span> = <span class="q">&quot;fred&quot;</span><span class="sc">;</span></li><li>    ++<span class="i">$$varname</span><span class="sc">;</span>         <span class="c"># $fred now 24</span></li></ol></pre><p>This works <i>sometimes</i>, but it is a very bad idea for two reasons.</p><p>The first reason is that this technique <i>only works on global variables</i>. That means that if $fred is a lexical variable created with my() in the above example, the code wouldn&#39;t work at all: you&#39;d accidentally access the global and skip right over the private lexical altogether. Global variables are bad because they can easily collide accidentally and in general make for non-scalable and confusing code.</p><p>Symbolic references are forbidden under the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span></code>  pragma. They are not true references and consequently are not reference-counted or garbage-collected.</p><p>The other reason why using a variable to hold the name of another variable is a bad idea is that the question often stems from a lack of understanding of Perl data structures, particularly hashes. By using symbolic references, you are just using the package&#39;s symbol-table hash (like <code class="inline"><span class="i">%main::</span></code> ) instead of a user-defined hash. The solution is to use your own hash or a real reference instead.</p><pre class="verbatim"><ol><li>    <span class="i">$USER_VARS</span>{<span class="q">&quot;fred&quot;</span>} = <span class="n">23</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$varname</span> = <span class="q">&quot;fred&quot;</span><span class="sc">;</span></li><li>    <span class="i">$USER_VARS</span>{<span class="i">$varname</span>}++<span class="sc">;</span>  <span class="c"># not $$varname++</span></li></ol></pre><p>There we&#39;re using the %USER_VARS hash instead of symbolic references. Sometimes this comes up in reading strings from the user with variable references and wanting to expand them to the values of your perl program&#39;s variables. This is also a bad idea because it conflates the program-addressable namespace and the user-addressable one. Instead of reading a string and expanding it to the actual contents of your program&#39;s own variables:</p><pre class="verbatim"><ol><li>    <span class="i">$str</span> = <span class="q">&#39;this has a $fred and $barney in it&#39;</span><span class="sc">;</span></li><li>    <span class="i">$str</span> =~ <span class="q">s/(\\$\\w+)/$1/eeg</span><span class="sc">;</span>          <span class="c"># need double eval</span></li></ol></pre><p>it would be better to keep a hash around like %USER_VARS and have variable references actually refer to entries in that hash:</p><pre class="verbatim"><ol><li>    <span class="i">$str</span> =~ <span class="q">s/\\$(\\w+)/$USER_VARS{$1}/g</span><span class="sc">;</span>   <span class="c"># no /e here at all</span></li></ol></pre><p>That&#39;s faster, cleaner, and safer than the previous approach. Of course, you don&#39;t need to use a dollar sign. You could use your own scheme to make it less confusing, like bracketed percent symbols, etc.</p><pre class="verbatim"><ol><li>    <span class="i">$str</span> = <span class="q">&#39;this has a %fred% and %barney% in it&#39;</span><span class="sc">;</span></li><li>    <span class="i">$str</span> =~ <span class="q">s/%(\\w+)%/$USER_VARS{$1}/g</span><span class="sc">;</span>   <span class="c"># no /e here at all</span></li></ol></pre><p>Another reason that folks sometimes think they want a variable to contain the name of a variable is that they don&#39;t know how to build proper data structures using hashes. For example, let&#39;s say they wanted two hashes in their program: %fred and %barney, and that they wanted to use another scalar variable to refer to those by name.</p><pre class="verbatim"><ol><li>    <span class="i">$name</span> = <span class="q">&quot;fred&quot;</span><span class="sc">;</span></li><li>    <span class="i">$$name</span>{<span class="w">WIFE</span>} = <span class="q">&quot;wilma&quot;</span><span class="sc">;</span>     <span class="c"># set %fred</span></li><li></li><li>    <span class="i">$name</span> = <span class="q">&quot;barney&quot;</span><span class="sc">;</span></li><li>    <span class="i">$$name</span>{<span class="w">WIFE</span>} = <span class="q">&quot;betty&quot;</span><span class="sc">;</span>    <span class="c"># set %barney</span></li></ol></pre><p>This is still a symbolic reference, and is still saddled with the problems enumerated above. It would be far better to write:</p><pre class="verbatim"><ol><li>    <span class="i">$folks</span>{<span class="q">&quot;fred&quot;</span>}{<span class="w">WIFE</span>}   = <span class="q">&quot;wilma&quot;</span><span class="sc">;</span></li><li>    <span class="i">$folks</span>{<span class="q">&quot;barney&quot;</span>}{<span class="w">WIFE</span>} = <span class="q">&quot;betty&quot;</span><span class="sc">;</span></li></ol></pre><p>And just use a multilevel hash to start with.</p><p>The only times that you absolutely <i>must</i> use symbolic references are when you really must refer to the symbol table. This may be because it&#39;s something that one can&#39;t take a real reference to, such as a format name. Doing so may also be important for method calls, since these always go through the symbol table for resolution.</p><p>In those cases, you would turn off <code class="inline"><span class="w">strict</span> <span class="q">&#39;refs&#39;</span></code>  temporarily so you can play around with the symbol table. For example:</p><pre class="verbatim"><ol><li>    <span class="i">@colors</span> = <span class="q">qw(red blue green yellow orange purple violet)</span><span class="sc">;</span></li><li>    for <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$name</span> <span class="s">(</span><span class="i">@colors</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">strict</span> <span class="q">&#39;refs&#39;</span><span class="sc">;</span>  <span class="c"># renege for the block</span></li><li>        <span class="i">*$name</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="q">&quot;&lt;FONT COLOR=&#39;$name&#39;&gt;@_&lt;/FONT&gt;&quot;</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>All those functions (red(), blue(), green(), etc.) appear to be separate, but the real code in the closure actually was compiled only once.</p><p>So, sometimes you might want to use symbolic references to manipulate the symbol table directly. This doesn&#39;t matter for formats, handles, and subroutines, because they are always global--you can&#39;t use my() on them. For scalars, arrays, and hashes, though--and usually for subroutines-- you probably only want to use hard references.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-can-I-use-a-variable-as-a-variable-name%3f
Integer overflow in format string for %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The indexes and widths specified in the format string of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf()</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sprintf.html">sprintf()</span></code> are too large.  The numbers must not overflow the size of integers for your architecture.</p></section>	http://perldoc.perl.org/perldiag.html#Integer-overflow-in-format-string-for-%25s
Version number must be a constant number	A			Perl Diagnostics							<section class="prog__container"><p>(P) The attempt to translate a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module</span> <span class="w">n</span>.<span class="w">n</span> <span class="w">LIST</span></code>  statement into its equivalent <code class="inline">BEGIN</code>  block found an internal inconsistency with the version number.</p></section>	http://perldoc.perl.org/perldiag.html#Version-number-must-be-a-constant-number
Memoize::NDBM_File (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::NDBM_File - glue to provide EXISTS for NDBM_File for Storable use</p> </section>	http://perldoc.perl.org/Memoize/NDBM_File.html
fileno (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>fileno FILEHANDLE</pre><p>Returns the file descriptor for a filehandle, or undefined if the filehandle is not open.  If there is no real file descriptor at the OS level, as can happen with filehandles connected to memory objects via <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> with a reference for the third argument, -1 is returned.</p><p>This is mainly useful for constructing bitmaps for <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span></code> and low-level POSIX tty-handling operations. If FILEHANDLE is an expression, the value is taken as an indirect filehandle, generally its name.</p><p>You can use this to find out whether two handles refer to the same underlying descriptor:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">THIS</span><span class="s">)</span> != <span class="n">-1</span> &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">THIS</span><span class="s">)</span> == <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">THAT</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;THIS and THAT are dups\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">THIS</span><span class="s">)</span> != <span class="n">-1</span> &amp;&amp; <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">THAT</span><span class="s">)</span> != <span class="n">-1</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;THIS and THAT have different &quot;</span> .</li><li>            <span class="q">&quot;underlying file descriptors\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;At least one of THIS and THAT does &quot;</span> .</li><li>            <span class="q">&quot;not have a real file descriptor\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The behavior of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span></code> on a directory handle depends on the operating system.  On a system with dirfd(3) or similar, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span></code> on a directory handle returns the underlying file descriptor associated with the handle; on systems with no such support, it returns the undefined value, and sets <code class="inline"><span class="i">$!</span></code>  (errno).</p></section>	http://perldoc.perl.org/functions/fileno.html
alphabetic (definition)	A			Perl Glossary							<section class="prog__container"><p>The sort of characters we put into words. In Unicode, this is all letters including all ideographs and certain diacritics, letter numbers like Roman numerals, and various combining marks.</p></section>	http://perldoc.perl.org/perlglossary.html#alphabetic
Assignment to both a list and a scalar	A			Perl Diagnostics							<section class="prog__container"><p>(F) If you assign to a conditional operator, the 2nd and 3rd arguments must either both be scalars or both be lists.  Otherwise Perl won&#39;t know which context to supply to the right side.</p></section>	http://perldoc.perl.org/perldiag.html#Assignment-to-both-a-list-and-a-scalar
distribution (definition)	A			Perl Glossary							<section class="prog__container"><p>A standard, bundled release of a system of software. The default usage implies source code is included. If that is not the case, it will be called a “binary-only” distribution.</p></section>	http://perldoc.perl.org/perlglossary.html#distribution
file descriptor (definition)	A			Perl Glossary							<section class="prog__container"><p>The little number the <b>operating system</b> uses to keep track of which opened <b>file</b> you’re talking about. Perl hides the file descriptor inside a <b>standard I/O</b> stream and then attaches the stream to a <b>filehandle</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#file-descriptor
Warning: Use of "%s" without parentheses is ambiguous	A			Perl Diagnostics							<section class="prog__container"><p>(S ambiguous) You wrote a unary operator followed by something that looks like a binary operator that could also have been interpreted as a term or unary operator.  For instance, if you know that the rand function has a default argument of 1.0, and you write</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span> + <span class="n">5</span><span class="sc">;</span></li></ol></pre><p>you may THINK you wrote the same thing as</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="s">)</span> + <span class="n">5</span><span class="sc">;</span></li></ol></pre><p>but in actual fact, you got</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/rand.html">rand</span><span class="s">(</span><span class="n">+5</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>So put in parentheses to say what you really mean.</p></section>	http://perldoc.perl.org/perldiag.html#Warning%3a-Use-of-%22%25s%22-without-parentheses-is-ambiguous
How do I profile my Perl programs?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by brian d foy, updated Fri Jul 25 12:22:26 PDT 2008)</p><p>The <code class="inline"><span class="w">Devel</span></code>  namespace has several modules which you can use to profile your Perl programs.</p><p>The <span href="http://search.cpan.org/perldoc/Devel::NYTProf">Devel::NYTProf</span> (New York Times Profiler) does both statement and subroutine profiling. It&#39;s available from CPAN and you also invoke it with the <code class="inline">-d</code>  switch:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -d<span class="co">:</span><span class="w">NYTProf</span> <span class="w">some_perl</span>.<span class="w">pl</span></li></ol></pre><p>It creates a database of the profile information that you can turn into reports. The <code class="inline"><span class="w">nytprofhtml</span></code>  command turns the data into an HTML report similar to the <span href="http://search.cpan.org/perldoc/Devel::Cover">Devel::Cover</span> report:</p><pre class="verbatim"><ol><li>    <span class="w">nytprofhtml</span></li></ol></pre><p>You might also be interested in using the <span href="http://perldoc.perl.org/Benchmark.html">Benchmark</span> to measure and compare code snippets.</p><p>You can read more about profiling in <i>Programming Perl</i>, chapter 20, or <i>Mastering Perl</i>, chapter 5.</p><p><span href="http://perldoc.perl.org/perldebguts.html">perldebguts</span> documents creating a custom debugger if you need to create a special sort of profiler. brian d foy describes the process in <i>The Perl Journal</i>, &quot;Creating a Perl Debugger&quot;, <span href="http://www.ddj.com/184404522">http://www.ddj.com/184404522</span> , and &quot;Profiling in Perl&quot; <span href="http://www.ddj.com/184404580">http://www.ddj.com/184404580</span> .</p><p>Perl.com has two interesting articles on profiling: &quot;Profiling Perl&quot;, by Simon Cozens, <span href="http://www.perl.com/lpt/a/850">http://www.perl.com/lpt/a/850</span> and &quot;Debugging and Profiling mod_perl Applications&quot;, by Frank Wiles, <span href="http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html">http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html</span> .</p><p>Randal L. Schwartz writes about profiling in &quot;Speeding up Your Perl Programs&quot; for <i>Unix Review</i>, <span href="http://www.stonehenge.com/merlyn/UnixReview/col49.html">http://www.stonehenge.com/merlyn/UnixReview/col49.html</span> , and &quot;Profiling in Template Toolkit via Overriding&quot; for <i>Linux Magazine</i>, <span href="http://www.stonehenge.com/merlyn/LinuxMag/col75.html">http://www.stonehenge.com/merlyn/LinuxMag/col75.html</span> .</p></section>	http://perldoc.perl.org/perlfaq3.html#How-do-I-profile-my-Perl-programs%3f
symbolic link (definition)	A			Perl Glossary							<section class="prog__container"><p>An alternate filename that points to the real <b>filename</b>, which in turn points to the real <b>file</b>. Whenever the <b>operating system</b> is trying to parse a <b>pathname</b> containing a symbolic link, it merely substitutes the new name and continues parsing.</p></section>	http://perldoc.perl.org/perlglossary.html#symbolic-link
listen() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to do a listen on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/listen.html">listen</span>.</p></section>	http://perldoc.perl.org/perldiag.html#listen()-on-closed-socket-%25s
stream (definition)	A			Perl Glossary							<section class="prog__container"><p>A flow of data into or out of a process as a steady sequence of bytes or characters, without the appearance of being broken up into packets. This is a kind of <b>interface</b>—the underlying <b>implementation</b> may well break your data up into separate packets for delivery, but this is hidden from you.</p></section>	http://perldoc.perl.org/perlglossary.html#stream
sethostent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>sethostent STAYOPEN</pre>Prepare hosts file for use.</section>	http://perldoc.perl.org/functions/sethostent.html
endservent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>endservent</pre><p>These routines are the same as their counterparts in the system C library.  In list context, the return values from the various get routines are as follows:</p><pre class="verbatim"><ol><li> <span class="c"># 0        1          2           3         4</span></li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$passwd</span><span class="cm">,</span>   <span class="i">$gid</span><span class="cm">,</span>       <span class="i">$members</span>  <span class="s">)</span> = <span class="w">getgr</span>*</li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$aliases</span><span class="cm">,</span>  <span class="i">$addrtype</span><span class="cm">,</span>  <span class="i">$net</span>      <span class="s">)</span> = <span class="w">getnet</span>*</li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$aliases</span><span class="cm">,</span>  <span class="i">$port</span><span class="cm">,</span>      <span class="i">$proto</span>    <span class="s">)</span> = <span class="w">getserv</span>*</li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$aliases</span><span class="cm">,</span>  <span class="i">$proto</span>                <span class="s">)</span> = <span class="w">getproto</span>*</li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$aliases</span><span class="cm">,</span>  <span class="i">$addrtype</span><span class="cm">,</span>  <span class="i">$length</span><span class="cm">,</span>  <span class="i">@addrs</span> <span class="s">)</span> = <span class="w">gethost</span>*</li><li> <span class="s">(</span> <span class="i">$name</span><span class="cm">,</span>   <span class="i">$passwd</span><span class="cm">,</span>   <span class="i">$uid</span><span class="cm">,</span>       <span class="i">$gid</span><span class="cm">,</span>     <span class="i">$quota</span><span class="cm">,</span></li><li> <span class="i">$comment</span><span class="cm">,</span>  <span class="i">$gcos</span><span class="cm">,</span>     <span class="i">$dir</span><span class="cm">,</span>       <span class="i">$shell</span><span class="cm">,</span>   <span class="i">$expire</span> <span class="s">)</span> = <span class="w">getpw</span>*</li><li> <span class="c"># 5        6          7           8         9</span></li></ol></pre><p>(If the entry doesn&#39;t exist, the return value is a single meaningless true value.)</p><p>The exact meaning of the $gcos field varies but it usually contains the real name of the user (as opposed to the login name) and other information pertaining to the user.  Beware, however, that in many system users are able to change this information and therefore it cannot be trusted and therefore the $gcos is tainted (see <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>).  The $passwd and $shell, user&#39;s encrypted password and login shell, are also tainted, for the same reason.</p><p>In scalar context, you get the name, unless the function was a lookup by name, in which case you get the other thing, whatever it is. (If the entry doesn&#39;t exist you get the undefined value.)  For example:</p><pre class="verbatim"><ol><li>    <span class="i">$uid</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/getpwnam.html">getpwnam</span><span class="s">(</span><span class="i">$name</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$name</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/getpwuid.html">getpwuid</span><span class="s">(</span><span class="i">$num</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$name</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/getpwent.html">getpwent</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$gid</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/getgrnam.html">getgrnam</span><span class="s">(</span><span class="i">$name</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$name</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/getgrgid.html">getgrgid</span><span class="s">(</span><span class="i">$num</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$name</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/getgrent.html">getgrent</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="c">#etc.</span></li></ol></pre><p>In <i>getpw*()</i> the fields $quota, $comment, and $expire are special in that they are unsupported on many systems.  If the $quota is unsupported, it is an empty scalar.  If it is supported, it usually encodes the disk quota.  If the $comment field is unsupported, it is an empty scalar.  If it is supported it usually encodes some administrative comment about the user.  In some systems the $quota field may be $change or $age, fields that have to do with password aging.  In some systems the $comment field may be $class.  The $expire field, if present, encodes the expiration period of the account or the password.  For the availability and the exact meaning of these fields in your system, please consult getpwnam(3) and your system&#39;s  <i>pwd.h</i> file.  You can also find out from within Perl what your $quota and $comment fields mean and whether you have the $expire field by using the <code class="inline"><span class="w">Config</span></code>  module and the values <code class="inline"><span class="w">d_pwquota</span></code> , <code class="inline"><span class="w">d_pwage</span></code> , <code class="inline"><span class="w">d_pwchange</span></code> , <code class="inline"><span class="w">d_pwcomment</span></code> , and <code class="inline"><span class="w">d_pwexpire</span></code> .  Shadow password files are supported only if your vendor has implemented them in the intuitive fashion that calling the regular C library routines gets the shadow versions if you&#39;re running under privilege or if there exists the shadow(3) functions as found in System V (this includes Solaris and Linux).  Those systems that implement a proprietary shadow password facility are unlikely to be supported.</p><p>The $members value returned by <i>getgr*()</i> is a space-separated list of the login names of the members of the group.</p><p>For the <i>gethost*()</i> functions, if the <code class="inline"><span class="w">h_errno</span></code>  variable is supported in C, it will be returned to you via <code class="inline"><span class="i">$?</span></code>  if the function call fails.  The <code class="inline"><span class="i">@addrs</span></code>  value returned by a successful call is a list of raw addresses returned by the corresponding library call.  In the Internet domain, each address is four bytes long; you can unpack it by saying something like:</p><pre class="verbatim"><ol><li>    <span class="s">(</span><span class="i">$a</span><span class="cm">,</span><span class="i">$b</span><span class="cm">,</span><span class="i">$c</span><span class="cm">,</span><span class="i">$d</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&#39;W4&#39;</span><span class="cm">,</span><span class="i">$addr</span>[<span class="n">0</span>]<span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The Socket library makes this slightly easier:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li>    <span class="i">$iaddr</span> = <span class="i">inet_aton</span><span class="s">(</span><span class="q">&quot;127.1&quot;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># or whatever address</span></li><li>    <span class="i">$name</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/gethostbyaddr.html">gethostbyaddr</span><span class="s">(</span><span class="i">$iaddr</span><span class="cm">,</span> <span class="w">AF_INET</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># or going the other way</span></li><li>    <span class="i">$straddr</span> = <span class="i">inet_ntoa</span><span class="s">(</span><span class="i">$iaddr</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>In the opposite way, to resolve a hostname to the IP address you can write this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span><span class="sc">;</span></li><li>    <span class="i">$packed_ip</span> = <span class="l_k" href="http://perldoc.perl.org/functions/gethostbyname.html">gethostbyname</span><span class="s">(</span><span class="q">&quot;www.perl.org&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$packed_ip</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$ip_address</span> = <span class="i">inet_ntoa</span><span class="s">(</span><span class="i">$packed_ip</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Make sure <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/gethostbyname.html">gethostbyname()</span></code> is called in SCALAR context and that its return value is checked for definedness.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getprotobynumber.html">getprotobynumber</span></code> function, even though it only takes one argument, has the precedence of a list operator, so beware:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/getprotobynumber.html">getprotobynumber</span> <span class="i">$number</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;icmp&#39;</span>   <span class="c"># WRONG</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/getprotobynumber.html">getprotobynumber</span><span class="s">(</span><span class="i">$number</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;icmp&#39;</span><span class="s">)</span>  <span class="c"># actually means this</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/getprotobynumber.html">getprotobynumber</span><span class="s">(</span><span class="i">$number</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;icmp&#39;</span>  <span class="c"># better this way</span></li></ol></pre><p>If you get tired of remembering which element of the return list contains which return value, by-name interfaces are provided in standard modules: <code class="inline"><span class="w">File::stat</span></code> , <code class="inline"><span class="w">Net::hostent</span></code> , <code class="inline"><span class="w">Net::netent</span></code> , <code class="inline"><span class="w">Net::protoent</span></code> , <code class="inline"><span class="w">Net::servent</span></code> , <code class="inline"><span class="w">Time::gmtime</span></code> , <code class="inline"><span class="w">Time::localtime</span></code> , and <code class="inline"><span class="w">User::grent</span></code> .  These override the normal built-ins, supplying versions that return objects with the appropriate names for each field.  For example:</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::stat</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">User::pwent</span><span class="sc">;</span></li><li>   <span class="i">$is_his</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="i">-&gt;uid</span> == <span class="i">pwent</span><span class="s">(</span><span class="i">$whoever</span><span class="s">)</span><span class="i">-&gt;uid</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Even though it looks as though they&#39;re the same method calls (uid), they aren&#39;t, because a <code class="inline"><span class="w">File::stat</span></code>  object is different from a <code class="inline"><span class="w">User::pwent</span></code>  object.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#getpwnam">getpwnam in perlport</span> to <span href="http://perldoc.perl.org/perlport.html#endservent">endservent in perlport</span>.</p></section>	http://perldoc.perl.org/functions/endservent.html
No DB::sub routine defined	A			Perl Diagnostics							<section class="prog__container"><p>(F) The currently executing code was compiled with the <b>-d</b> switch, but for some reason the current debugger (e.g. <i>perl5db.pl</i> or a <code class="inline"><span class="w">Devel::</span></code>  module) didn&#39;t define a <code class="inline"><span class="w">DB::sub</span></code>  routine to be called at the beginning of each ordinary subroutine call.</p></section>	http://perldoc.perl.org/perldiag.html#No-DB%3a%3asub-routine-defined
What's the difference between "perl" and "Perl"?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>&quot;Perl&quot; is the name of the language. Only the &quot;P&quot; is capitalized. The name of the interpreter (the program which runs the Perl script) is &quot;perl&quot; with a lowercase &quot;p&quot;.</p><p>You may or may not choose to follow this usage. But never write &quot;PERL&quot;, because perl is not an acronym.</p></section>	http://perldoc.perl.org/perlfaq1.html#What's-the-difference-between-%22perl%22-and-%22Perl%22%3f
IO::Uncompress::Base (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]					<section class="prog__container"><p>IO::Uncompress::Base - Base Class for IO::Uncompress modules</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Uncompress::Base</span> <span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/Base.html
How do I modify the shadow password file on a Unix system?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If perl was installed correctly and your shadow library was written properly, the <code class="inline"><span class="w">getpw</span>*<span class="s">(</span><span class="s">)</span></code>  functions described in <span href="http://perldoc.perl.org/perlfunc.html">perlfunc</span> should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see <i>passwd(1)</i> for specifics) and use <code class="inline"><span class="i">pwd_mkdb</span><span class="s">(</span><span class="n">8</span><span class="s">)</span></code>  to install it (see <i>pwd_mkdb(8)</i> for more details).</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-modify-the-shadow-password-file-on-a-Unix-system%3f
Offset outside string	A			Perl Diagnostics							<section class="prog__container"><p>(F)(W layer) You tried to do a read/write/send/recv/seek operation with an offset pointing outside the buffer.  This is difficult to imagine.  The sole exceptions to this are that zero padding will take place when going past the end of the string when either <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread()</span></code>ing a file, or when seeking past the end of a scalar opened for I/O (in anticipation of future reads and to imitate the behavior with real files).</p></section>	http://perldoc.perl.org/perldiag.html#Offset-outside-string
alternatives (definition)	A			Perl Glossary							<section class="prog__container"><p>A list of possible choices from which you may select only one, as in, “Would you like door A, B, or C?” Alternatives in regular expressions are separated with a single vertical bar: <code class="inline">|</code>. Alternatives in normal Perl expressions are separated with a double vertical bar: <code class="inline">||</code>. Logical alternatives in <b>Boolean</b> expressions are separated with either <code class="inline">||</code> or <code class="inline">or</code> .</p></section>	http://perldoc.perl.org/perlglossary.html#alternatives
Variable "%s" is not imported%s	A			Perl Diagnostics							<section class="prog__container"><p>(S misc) With &quot;use strict&quot; in effect, you referred to a global variable that you apparently thought was imported from another module, because something else of the same name (usually a subroutine) is exported by that module.  It usually means you put the wrong funny character on the front of your variable.</p></section>	http://perldoc.perl.org/perldiag.html#Variable-%22%25s%22-is-not-imported%25s
buffer (definition)	A			Perl Glossary							<section class="prog__container"><p>A temporary holding location for data. Data that are <b>Block buffering</b> means that the data is passed on to its destination whenever the buffer is full. <b>Line buffering</b> means that it’s passed on whenever a complete line is received. <b>Command buffering</b> means that it’s passed every time you do a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span></code> command (or equivalent). If your output is unbuffered, the system processes it one byte at a time without the use of a holding area. This can be rather inefficient.</p></section>	http://perldoc.perl.org/perlglossary.html#buffer
No DB::DB routine defined	A			Perl Diagnostics							<section class="prog__container"><p>(F) The currently executing code was compiled with the <b>-d</b> switch, but for some reason the current debugger (e.g. <i>perl5db.pl</i> or a <code class="inline"><span class="w">Devel::</span></code>  module) didn&#39;t define a routine to be called at the beginning of each statement.</p></section>	http://perldoc.perl.org/perldiag.html#No-DB%3a%3aDB-routine-defined
How do I print something out in color?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>In general, you don&#39;t, because you don&#39;t know whether the recipient has a color-aware display device. If you know that they have an ANSI terminal that understands color, you can use the <span href="http://perldoc.perl.org/Term/ANSIColor.html">Term::ANSIColor</span> module from CPAN:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">color</span><span class="s">(</span><span class="q">&quot;red&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;Stop!\\n&quot;</span><span class="cm">,</span> <span class="i">color</span><span class="s">(</span><span class="q">&quot;reset&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">color</span><span class="s">(</span><span class="q">&quot;green&quot;</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;Go!\\n&quot;</span><span class="cm">,</span> <span class="i">color</span><span class="s">(</span><span class="q">&quot;reset&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Or like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ANSIColor</span> <span class="q">qw(:constants)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">RED</span><span class="cm">,</span> <span class="q">&quot;Stop!\\n&quot;</span><span class="cm">,</span> <span class="w">RESET</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">GREEN</span><span class="cm">,</span> <span class="q">&quot;Go!\\n&quot;</span><span class="cm">,</span> <span class="w">RESET</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-print-something-out-in-color%3f
numeric context (definition)	A			Perl Glossary		[[context]]\n[[string context]]					<section class="prog__container"><p>The situation in which an expression is expected by its surroundings (the code calling it) to return a number. </p></section>	http://perldoc.perl.org/perlglossary.html#numeric-context
"use" not allowed in expression	A			Perl Diagnostics							<section class="prog__container"><p>(F) The &quot;use&quot; keyword is recognized and executed at compile time, and returns no useful value.  See <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%22use%22-not-allowed-in-expression
'P' must have an explicit size in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) The unpack format P must have an explicit size, not &quot;*&quot;.</p></section>	http://perldoc.perl.org/perldiag.html#'P'-must-have-an-explicit-size-in-unpack
ExtUtils::Packlist (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Packlist - manage .packlist files</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Packlist</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$pl</span><span class="s">)</span> = <span class="w">ExtUtils::Packlist</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;.packlist&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">$pl</span><span class="i">-&gt;read</span><span class="s">(</span><span class="q">&#39;/an/old/.packlist&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@missing_files</span> = <span class="i">$pl</span><span class="i">-&gt;validate</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">$pl</span><span class="i">-&gt;write</span><span class="s">(</span><span class="q">&#39;/a/new/.packlist&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>   <span class="i">$pl</span>-&gt;{<span class="q">&#39;/some/file/name&#39;</span>}++<span class="sc">;</span></li><li>      or</li><li>   <span class="i">$pl</span>-&gt;{<span class="q">&#39;/some/other/file/name&#39;</span>} = <span class="s">{</span> <span class="w">type</span> <span class="cm">=&gt;</span> <span class="q">&#39;file&#39;</span><span class="cm">,</span></li><li>                                      <span class="w">from</span> <span class="cm">=&gt;</span> <span class="q">&#39;/some/file&#39;</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Packlist.html
How do I create a static variable?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>(contributed by brian d foy)</p><p>In Perl 5.10, declare the variable with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>. The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code> declaration creates the lexical variable that persists between calls to the subroutine:</p><pre class="verbatim"><ol><li><span name="counter"></span>    sub <span class="m">counter</span> <span class="s">{</span> <span class="w">state</span> <span class="i">$count</span> = <span class="n">1</span><span class="sc">;</span> <span class="i">$count</span>++ <span class="s">}</span></li></ol></pre><p>You can fake a static variable by using a lexical variable which goes out of scope. In this example, you define the subroutine <code class="inline"><span class="w">counter</span></code> , and it uses the lexical variable <code class="inline"><span class="i">$count</span></code> . Since you wrap this in a BEGIN block, <code class="inline"><span class="i">$count</span></code>  is defined at compile-time, but also goes out of scope at the end of the BEGIN block. The BEGIN block also ensures that the subroutine and the value it uses is defined at compile-time so the subroutine is ready to use just like any other subroutine, and you can put this code in the same place as other subroutines in the program text (i.e. at the end of the code, typically). The subroutine <code class="inline"><span class="w">counter</span></code>  still has a reference to the data, and is the only way you can access the value (and each time you do, you increment the value). The data in chunk of memory defined by <code class="inline"><span class="i">$count</span></code>  is private to <code class="inline"><span class="w">counter</span></code> .</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">1</span><span class="sc">;</span></li><li><span name="counter"></span>        sub <span class="m">counter</span> <span class="s">{</span> <span class="i">$count</span>++ <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$start</span> = <span class="i">counter</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    .... <span class="c"># code that calls counter();</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$end</span> = <span class="i">counter</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>In the previous example, you created a function-private variable because only one function remembered its reference. You could define multiple functions while the variable is in scope, and each function can share the &quot;private&quot; variable. It&#39;s not really &quot;static&quot; because you can access it outside the function while the lexical variable is in scope, and even create references to it. In this example, <code class="inline"><span class="w">increment_count</span></code>  and <code class="inline"><span class="w">return_count</span></code>  share the variable. One function adds to the value and the other simply returns the value. They can both access <code class="inline"><span class="i">$count</span></code> , and since it has gone out of scope, there is no other way to access it.</p><pre class="verbatim"><ol><li>    BEGIN <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="n">1</span><span class="sc">;</span></li><li><span name="increment_count"></span>        sub <span class="m">increment_count</span> <span class="s">{</span> <span class="i">$count</span>++ <span class="s">}</span></li><li><span name="return_count"></span>        sub <span class="m">return_count</span>    <span class="s">{</span> <span class="i">$count</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>To declare a file-private variable, you still use a lexical variable. A file is also a scope, so a lexical variable defined in the file cannot be seen from any other file.</p><p>See <span href="http://perldoc.perl.org/perlsub.html#Persistent-Private-Variables">Persistent Private Variables in perlsub</span> for more information. The discussion of closures in <span href="http://perldoc.perl.org/perlref.html">perlref</span> may help you even though we did not use anonymous subroutines in this answer. See <span href="http://perldoc.perl.org/perlsub.html#Persistent-Private-Variables">Persistent Private Variables in perlsub</span> for details.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-create-a-static-variable%3f
ExtUtils::CBuilder (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::CBuilder - Compile and link C code for Perl modules</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::CBuilder</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$b</span> = <span class="w">ExtUtils::CBuilder</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">%options</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$obj_file</span> = <span class="i">$b</span><span class="i">-&gt;compile</span><span class="s">(</span><span class="w">source</span> <span class="cm">=&gt;</span> <span class="q">&#39;MyModule.c&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$lib_file</span> = <span class="i">$b</span><span class="i">-&gt;link</span><span class="s">(</span><span class="w">objects</span> <span class="cm">=&gt;</span> <span class="i">$obj_file</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/CBuilder.html
static method (definition)	A			Perl Glossary							<section class="prog__container"><p>No such thing. See <b>class method</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#static-method
Net::FTP::dataconn (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::FTP::dataconn - FTP Client data connection class</p> </section>	http://perldoc.perl.org/Net/FTP/dataconn.html
impatience (definition)	A			Perl Glossary		[[laziness]]\n[[hubris]]					<section class="prog__container"><p>The anger you feel when the computer is being lazy. This makes you write programs that don’t just react to your needs, but actually anticipate them. Or at least that pretend to. Hence, the second great virtue of a programmer. </p></section>	http://perldoc.perl.org/perlglossary.html#impatience
Method for operation %s not found in package %s during blessing	A			Perl Diagnostics							<section class="prog__container"><p>(F) An attempt was made to specify an entry in an overloading table that doesn&#39;t resolve to a valid subroutine.  See <span href="http://perldoc.perl.org/overload.html">overload</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Method-for-operation-%25s-not-found-in-package-%25s-during-blessing
pathname (definition)	A			Perl Glossary							<section class="prog__container"><p>A fully qualified filename such as <i>/usr/bin/perl</i>. Sometimes confused with <code class="inline"><span class="w">PATH</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#pathname
hubris (definition)	A			Perl Glossary		[[laziness]]\n[[impatience]]					<section class="prog__container"><p>Excessive pride, the sort of thing for which Zeus zaps you.  Also the quality that makes you write (and maintain) programs that other people won’t want to say bad things about. Hence, the third great virtue of a programmer. </p></section>	http://perldoc.perl.org/perlglossary.html#hubris
Pod::Simple (module)	A			Perl Standard Modules		[[Pod::Simple::Subclassing]]\n[[perlpod]]\n[[perlpodspec]]\n[[Pod::Escapes]]\n[[perldoc]]					<section class="prog__container"><pre class="verbatim"><ol><li> <span class="w">TODO</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple.html
Ambiguous call resolved as CORE::%s(), qualify as such or use &	A			Perl Diagnostics							<section class="prog__container"><p>(W ambiguous) A subroutine you have declared has the same name as a Perl keyword, and you have used the name without qualification for calling one or the other.  Perl decided to call the builtin because the subroutine is not imported.</p><p>To force interpretation as a subroutine call, either put an ampersand before the subroutine name, or qualify the name with its package. Alternatively, you can import the subroutine (or pretend that it&#39;s imported with the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">subs</span></code>  pragma).</p><p>To silently interpret it as the Perl operator, use the <code class="inline"><span class="w">CORE::</span></code>  prefix on the operator (e.g. <code class="inline"><span class="i">CORE::log</span><span class="s">(</span><span class="i">$x</span><span class="s">)</span></code> ) or declare the subroutine to be an object method (see <span href="http://perldoc.perl.org/perlsub.html#Subroutine-Attributes">Subroutine Attributes in perlsub</span> or <span href="http://perldoc.perl.org/attributes.html">attributes</span>).</p></section>	http://perldoc.perl.org/perldiag.html#Ambiguous-call-resolved-as-CORE%3a%3a%25s()%2c-qualify-as-such-or-use-%26
standard (definition)	A			Perl Glossary							<section class="prog__container"><p>Included in the official Perl distribution, as in a standard module, a standard tool, or a standard Perl <b>manpage</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#standard
Unknown error	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl was about to print an error message in <code class="inline"><span class="i">$@</span></code> , but the <code class="inline"><span class="i">$@</span></code>  variable did not exist, even after an attempt to create it.</p></section>	http://perldoc.perl.org/perldiag.html#Unknown-error
Can't use subscript on %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The compiler tried to interpret a bracketed expression as a subscript.  But to the left of the brackets was an expression that didn&#39;t look like a hash or array reference, or anything else subscriptable.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-subscript-on-%25s
untie attempted while %d inner references still exist	A			Perl Diagnostics							<section class="prog__container"><p>(W untie) A copy of the object returned from <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> (or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tied.html">tied</span></code>) was still valid when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span></code> was called.</p></section>	http://perldoc.perl.org/perldiag.html#untie-attempted-while-%25d-inner-references-still-exist
Time::Piece (module)	A			Perl Standard Modules		[[http://www.tondering.dk/claus/calendar.html]]					<section class="prog__container"><p>Time::Piece - Object Oriented time objects</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Piece</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$t</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Time is $t\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Year is &quot;</span><span class="cm">,</span> <span class="i">$t</span><span class="i">-&gt;year</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/Piece.html
Missing name in "%s sub"	A			Perl Diagnostics							<section class="prog__container"><p>(F) The syntax for lexically scoped subroutines requires that they have a name with which they can be found.</p></section>	http://perldoc.perl.org/perldiag.html#Missing-name-in-%22%25s-sub%22
readline (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>readline EXPR<br>readline</pre><p>Reads from the filehandle whose typeglob is contained in EXPR (or from <code class="inline"><span class="i">*ARGV</span></code>  if EXPR is not provided).  In scalar context, each call reads and returns the next line until end-of-file is reached, whereupon the subsequent call returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  In list context, reads until end-of-file is reached and returns a list of lines.  Note that the notion of &quot;line&quot; used here is whatever you may have defined with <code class="inline"><span class="i">$/</span></code>  or <code class="inline"><span class="i">$INPUT_RECORD_SEPARATOR</span></code> ).  See <span href="http://perldoc.perl.org/perlvar.html#%24%2f">$/ in perlvar</span>.</p><p>When <code class="inline"><span class="i">$/</span></code>  is set to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, when <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> is in scalar context (i.e., file slurp mode), and when an empty file is read, it returns <code class="inline"><span class="q">&#39;&#39;</span></code>  the first time, followed by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> subsequently.</p><p>This is the internal function implementing the <code class="inline"><span class="q">&lt;EXPR&gt;</span></code>  operator, but you can use it directly.  The <code class="inline"><span class="q">&lt;EXPR&gt;</span></code>  operator is discussed in more detail in <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>.</p><pre class="verbatim"><ol><li>    <span class="i">$line</span> = <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span></li><li>    <span class="i">$line</span> = <span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span><span class="s">(</span><span class="i">*STDIN</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># same thing</span></li></ol></pre><p>If <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> encounters an operating system error, <code class="inline"><span class="i">$!</span></code>  will be set with the corresponding error message.  It can be helpful to check <code class="inline"><span class="i">$!</span></code>  when you are reading from filehandles you don&#39;t trust, such as a tty or a socket.  The following example uses the operator form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> and dies if the result is not defined.</p><pre class="verbatim"><ol><li>    while <span class="s">(</span> ! <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span> <span class="i">$_</span> = <span class="q">&lt;$fh&gt;</span> <span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;readline failed: $!&quot;</span><span class="sc">;</span></li><li>        ...</li><li>    <span class="s">}</span></li></ol></pre><p>Note that you have can&#39;t handle <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readline.html">readline</span></code> errors that way with the <code class="inline"><span class="w">ARGV</span></code>  filehandle.  In that case, you have to open each element of <code class="inline"><span class="i">@ARGV</span></code>  yourself since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span></code> handles <code class="inline"><span class="w">ARGV</span></code>  differently.</p><pre class="verbatim"><ol><li>    foreach <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$arg</span> <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$arg</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&quot;Can&#39;t open $arg: $!&quot;</span><span class="sc">;</span></li><li></li><li>        while <span class="s">(</span> ! <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="s">(</span><span class="i">$fh</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span> <span class="i">$_</span> = <span class="q">&lt;$fh&gt;</span> <span class="s">)</span></li><li>                or <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;readline failed for $arg: $!&quot;</span><span class="sc">;</span></li><li>            ...</li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/functions/readline.html
Attempt to delete readonly key '%s' from a restricted hash	A			Perl Diagnostics							<section class="prog__container"><p>(F) The failing code attempted to delete a key whose value has been declared readonly from a restricted hash.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-delete-readonly-key-'%25s'-from-a-restricted-hash
architecture (definition)	A			Perl Glossary		[[platform]]\n[[operating system]]					<section class="prog__container"><p>The kind of computer you’re working on, where one “kind of computer” means all those computers sharing a compatible machine language. Since Perl programs are (typically) simple text files, not executable images, a Perl program is much less sensitive to the architecture it’s running on than programs in other languages, such as C, that are <b>compiled</b> into machine code. </p></section>	http://perldoc.perl.org/perlglossary.html#architecture
Fatal (module)	A			Perl Standard Modules		[[autodie]]\n[[IPC::System::Simple]]\n[[system()]]					<section class="prog__container"><p>Fatal - Replace functions with equivalents which succeed or die</p> <pre class="verbatim"><ol><li>    use Fatal qw(open close);</li><li></li><li>    open(my $fh, &quot;&lt;&quot;, $filename);  # No need to check errors!</li><li></li><li>    use File::Copy qw(move);</li><li>    use Fatal qw(move);</li><li></li><li>    move($file1, $file2); # No need to check errors!</li><li></li><li>    sub juggle { . . . }</li><li>    Fatal-&gt;import(&#39;juggle&#39;);</li></ol></pre><span name="BEST-PRACTICE"></span><h1>BEST PRACTICE</h1><p><b>Fatal has been obsoleted by the new <span href="http://perldoc.perl.org/autodie.html">autodie</span> pragma.</b> Please use <span href="http://perldoc.perl.org/autodie.html">autodie</span> in preference to <code class="inline"><span class="w">Fatal</span></code> .  <span href="http://perldoc.perl.org/autodie.html">autodie</span> supports lexical scoping, throws real exception objects, and provides much nicer error messages.</p><p>The use of <code class="inline"><span class="j">:</span><span class="w">void</span></code>  with Fatal is discouraged.</p></section>	http://perldoc.perl.org/Fatal.html
getservbyport (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getservbyport PORT,PROTO</pre>Get services record given numeric port.</section>	http://perldoc.perl.org/functions/getservbyport.html
implementation (definition)	A			Perl Glossary							<section class="prog__container"><p>How a piece of code actually goes about doing its job. Users of the code should not count on implementation details staying the same unless they are part of the published <b>interface</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#implementation
DBM_Filter::null (module)	A			Perl Standard Modules		[[DBM_Filter]]\n[[perldbmfilter]]					<section class="prog__container"><p>DBM_Filter::null - filter for DBM_Filter</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">SDBM_File</span><span class="sc">;</span> <span class="c"># or DB_File, GDBM_File, NDBM_File, or ODBM_File</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DBM_Filter</span> <span class="sc">;</span></li><li></li><li>    <span class="i">$db</span> = <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">%hash</span><span class="cm">,</span> ...</li><li>    <span class="i">$db</span><span class="i">-&gt;Filter_Push</span><span class="s">(</span><span class="q">&#39;null&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/DBM_Filter/null.html
Locale::Script (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Script - standard codes for script identification</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Script</span><span class="sc">;</span></li><li></li><li>   <span class="i">$script</span>  = <span class="i">code2script</span><span class="s">(</span><span class="q">&#39;phnx&#39;</span><span class="s">)</span><span class="sc">;</span>                     <span class="c"># &#39;Phoenician&#39;</span></li><li>   <span class="i">$code</span>    = <span class="i">script2code</span><span class="s">(</span><span class="q">&#39;Phoenician&#39;</span><span class="s">)</span><span class="sc">;</span>               <span class="c"># &#39;Phnx&#39;</span></li><li>   <span class="i">$code</span>    = <span class="i">script2code</span><span class="s">(</span><span class="q">&#39;Phoenician&#39;</span><span class="cm">,</span></li><li>                          <span class="w">LOCALE_CODE_NUMERIC</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># 115</span></li><li></li><li>   <span class="i">@codes</span>   = <span class="i">all_script_codes</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">@scripts</span> = <span class="i">all_script_names</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Script.html
${^OPEN} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>An internal variable used by PerlIO.  A string in two parts, separated by a <code class="inline">\\<span class="n">0</span></code>  byte, the first part describes the input layers, the second part describes the output layers.</p><p>This variable was added in Perl v5.8.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eOPEN%7d
DESTROY (function)	A			Perl Functions							<section class="prog__container"><pre>DESTROY</pre><p>This method keyword is documented in <span href="http://perldoc.perl.org/perlobj.html#Destructors">Destructors in perlobj</span>.</p></section>	http://perldoc.perl.org/functions/DESTROY.html
Can't x= to read-only value	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to repeat a constant value (often the undefined value) with an assignment operator, which implies modifying the value itself. Perhaps you need to copy the value to a temporary, and repeat that.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-x%3d-to-read-only-value
conditional (definition)	A			Perl Glossary							<section class="prog__container"><p>Something “iffy”. See <b>Boolean context</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#conditional
formline (function)	A			Perl Functions\nPerl Miscellaneous functions							<section class="prog__container"><pre>formline PICTURE,LIST</pre><p>This is an internal function used by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/format.html">format</span></code>s, though you may call it, too.  It formats (see <span href="http://perldoc.perl.org/perlform.html">perlform</span>) a list of values according to the contents of PICTURE, placing the output into the format output accumulator, <code class="inline"><span class="i">$^A</span></code>  (or <code class="inline"><span class="i">$ACCUMULATOR</span></code>  in English). Eventually, when a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> is done, the contents of <code class="inline"><span class="i">$^A</span></code>  are written to some filehandle.  You could also read <code class="inline"><span class="i">$^A</span></code>  and then set <code class="inline"><span class="i">$^A</span></code>  back to <code class="inline"><span class="q">&quot;&quot;</span></code> .  Note that a format typically does one <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline</span></code> per line of form, but the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline</span></code> function itself doesn&#39;t care how many newlines are embedded in the PICTURE.  This means that the <code class="inline">~</code>  and <code class="inline">~~</code>  tokens treat the entire PICTURE as a single line. You may therefore need to use multiple formlines to implement a single record format, just like the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/format.html">format</span></code> compiler.</p><p>Be careful if you put double quotes around the picture, because an <code class="inline"><span class="i">@</span></code>  character may be taken to mean the beginning of an array name. <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/formline.html">formline</span></code> always returns true.  See <span href="http://perldoc.perl.org/perlform.html">perlform</span> for other examples.</p><p>If you are trying to use this instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> to capture the output, you may find it easier to open a filehandle to a scalar (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&quot;&gt;&quot;</span><span class="cm">,</span> \\<span class="i">$output</span></code> ) and write to that instead.</p></section>	http://perldoc.perl.org/functions/formline.html
m (function)	A			Perl Functions							<section class="prog__container"><pre>m//</pre><p>The match operator.  See <span href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Regexp Quote-Like Operators in perlop</span>.</p></section>	http://perldoc.perl.org/functions/m.html
DB (module)	A			Perl Standard Modules							<section class="prog__container"><p>DB - programmatic interface to the Perl debugging API</p> <pre class="verbatim"><ol><li><span name="package-CLIENT"></span>    package <span class="i">CLIENT</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">DB</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="q">qw(DB)</span><span class="sc">;</span></li><li></li><li>    <span class="c"># these (inherited) methods can be called by the client</span></li><li></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;register</span><span class="s">(</span><span class="s">)</span>      <span class="c"># register a client package name</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;done</span><span class="s">(</span><span class="s">)</span>          <span class="c"># de-register from the debugging API</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;skippkg</span><span class="s">(</span><span class="q">&#39;hide::hide&#39;</span><span class="s">)</span>  <span class="c"># ask DB not to stop in this package</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;cont</span><span class="s">(</span><span class="s">[</span><span class="w">WHERE</span><span class="s">]</span><span class="s">)</span>       <span class="c"># run some more (until BREAK or </span></li><li>                                <span class="c"># another breakpointt)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;step</span><span class="s">(</span><span class="s">)</span>              <span class="c"># single step</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;next</span><span class="s">(</span><span class="s">)</span>              <span class="c"># step over</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;ret</span><span class="s">(</span><span class="s">)</span>               <span class="c"># return from current subroutine</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;backtrace</span><span class="s">(</span><span class="s">)</span>         <span class="c"># return the call stack description</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;ready</span><span class="s">(</span><span class="s">)</span>             <span class="c"># call when client setup is done</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;trace_toggle</span><span class="s">(</span><span class="s">)</span>      <span class="c"># toggle subroutine call trace mode</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;subs</span><span class="s">(</span><span class="s">[</span><span class="w">SUBS</span><span class="s">]</span><span class="s">)</span>        <span class="c"># return subroutine information</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;files</span><span class="s">(</span><span class="s">)</span>             <span class="c"># return list of all files known to DB</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;lines</span><span class="s">(</span><span class="s">)</span>             <span class="c"># return lines in currently loaded file</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;loadfile</span><span class="s">(</span><span class="w">FILE</span><span class="cm">,</span><span class="w">LINE</span><span class="s">)</span> <span class="c"># load a file and let other clients know</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;lineevents</span><span class="s">(</span><span class="s">)</span>        <span class="c"># return info on lines with actions</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;set_break</span><span class="s">(</span><span class="s">[</span><span class="w">WHERE</span><span class="s">]</span><span class="cm">,</span><span class="s">[</span><span class="w">COND</span><span class="s">]</span><span class="s">)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;set_tbreak</span><span class="s">(</span><span class="s">[</span><span class="w">WHERE</span><span class="s">]</span><span class="s">)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;clr_breaks</span><span class="s">(</span><span class="s">[</span><span class="w">LIST</span><span class="s">]</span><span class="s">)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;set_action</span><span class="s">(</span><span class="w">WHERE</span><span class="cm">,</span><span class="w">ACTION</span><span class="s">)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;clr_actions</span><span class="s">(</span><span class="s">[</span><span class="w">LIST</span><span class="s">]</span><span class="s">)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;evalcode</span><span class="s">(</span><span class="w">STRING</span><span class="s">)</span>  <span class="c"># eval STRING in executing code&#39;s context</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;prestop</span><span class="s">(</span><span class="s">[</span><span class="w">STRING</span><span class="s">]</span><span class="s">)</span> <span class="c"># execute in code context before stopping</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;poststop</span><span class="s">(</span><span class="s">[</span><span class="w">STRING</span><span class="s">]</span><span class="s">)</span><span class="c"># execute in code context before resuming</span></li><li></li><li>    <span class="c"># These methods will be called at the appropriate times.</span></li><li>    <span class="c"># Stub versions provided do nothing.</span></li><li>    <span class="c"># None of these can block.</span></li><li></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;init</span><span class="s">(</span><span class="s">)</span>          <span class="c"># called when debug API inits itself</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;stop</span><span class="s">(</span><span class="w">FILE</span><span class="cm">,</span><span class="w">LINE</span><span class="s">)</span> <span class="c"># when execution stops</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;idle</span><span class="s">(</span><span class="s">)</span>          <span class="c"># while stopped (can be a client event loop)</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;cleanup</span><span class="s">(</span><span class="s">)</span>       <span class="c"># just before exit</span></li><li>    <span class="w">CLIENT</span><span class="w">-&gt;output</span><span class="s">(</span><span class="w">LIST</span><span class="s">)</span>    <span class="c"># called to print any output that</span></li><li>                            <span class="c"># the API must show</span></li></ol></pre></section>	http://perldoc.perl.org/DB.html
JAPH (definition)	A			Perl Glossary							<section class="prog__container"><p>“Just Another Perl Hacker”, a clever but cryptic bit of Perl code that, when executed, evaluates to that string. Often used to illustrate a particular Perl feature, and something of an ongoing Obfuscated Perl Contest seen in USENET signatures.</p></section>	http://perldoc.perl.org/perlglossary.html#JAPH
-n	A			Perl Command-Line Switches							<section class="prog__container"><p>causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like <i>sed -n</i> or <i>awk</i>:</p><pre class="verbatim"><ol><li>  <span class="j">LINE:</span></li><li>    while <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>&#09;...&#09;&#09;<span class="c"># your program goes here</span></li><li>    <span class="s">}</span></li></ol></pre><p>Note that the lines are not printed by default.  See <span href="http://perldoc.perl.org/perlrun.html#-p">-p</span> to have lines printed.  If a file named by an argument cannot be opened for some reason, Perl warns you about it and moves on to the next file.</p><p>Also note that <code class="inline">&lt;&gt;</code>  passes command line arguments to <span href="http://perldoc.perl.org/functions/open.html">open</span>, which doesn&#39;t necessarily interpret them as file names. See  <span href="http://perldoc.perl.org/perlop.html">perlop</span> for possible security implications.</p><p>Here is an efficient way to delete all files that haven&#39;t been modified for at least a week:</p><pre class="verbatim"><ol><li>    <span class="w">find</span> . -<span class="w">mtime</span> +<span class="n">7</span> -<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> | <span class="w">perl</span> -<span class="w">nle</span> <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></li></ol></pre><p>This is faster than using the <b>-exec</b> switch of <i>find</i> because you don&#39;t have to start a process on every filename found.  It does suffer from the bug of mishandling newlines in pathnames, which you can fix if you follow the example under <b>-0</b>.</p><p><code class="inline">BEGIN</code>  and <code class="inline">END</code>  blocks may be used to capture control before or after the implicit program loop, just as in <i>awk</i>.</p></section>	http://perldoc.perl.org/perlrun.html#*-n*
Invalid type '%s' in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The given character is not a valid pack or unpack type. See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p><p>(W) The given character is not a valid pack or unpack type but used to be silently ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-type-'%25s'-in-%25s
method (definition)	A			Perl Glossary							<section class="prog__container"><p>A kind of action that an <b>object</b> can take if you tell it to. See Camel chapter 12, “Objects”.</p></section>	http://perldoc.perl.org/perlglossary.html#method
What is the difference between a list and an array?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>A list is a fixed collection of scalars. An array is a variable that holds a variable collection of scalars. An array can supply its collection for list operations, so list operations also work on arrays:</p><pre class="verbatim"><ol><li>    <span class="c"># slices</span></li><li>    <span class="s">(</span> <span class="q">&#39;dog&#39;</span><span class="cm">,</span> <span class="q">&#39;cat&#39;</span><span class="cm">,</span> <span class="q">&#39;bird&#39;</span> <span class="s">)</span>[<span class="n">2</span><span class="cm">,</span><span class="n">3</span>]<span class="sc">;</span></li><li>    <span class="i">@animals</span>[<span class="n">2</span><span class="cm">,</span><span class="n">3</span>]<span class="sc">;</span></li><li></li><li>    <span class="c"># iteration</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="q">qw( dog cat bird )</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="i">@animals</span> <span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@three</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> == <span class="n">3</span> <span class="s">}</span> <span class="q">qw( dog cat bird )</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@three</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> == <span class="n">3</span> <span class="s">}</span> <span class="i">@animals</span><span class="sc">;</span></li><li></li><li>    <span class="c"># supply an argument list</span></li><li>    <span class="i">wash_animals</span><span class="s">(</span> <span class="q">qw( dog cat bird )</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">wash_animals</span><span class="s">(</span> <span class="i">@animals</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Array operations, which change the scalars, rearrange them, or add or subtract some scalars, only work on arrays. These can&#39;t work on a list, which is fixed. Array operations include <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span></code>.</p><p>An array can also change its length:</p><pre class="verbatim"><ol><li>    <span class="i">$#animals</span> = <span class="n">1</span><span class="sc">;</span>  <span class="c"># truncate to two elements</span></li><li>    <span class="i">$#animals</span> = <span class="n">10000</span><span class="sc">;</span> <span class="c"># pre-extend to 10,001 elements</span></li></ol></pre><p>You can change an array element, but you can&#39;t change a list element:</p><pre class="verbatim"><ol><li>    <span class="i">$animals</span>[<span class="n">0</span>] = <span class="q">&#39;Rottweiler&#39;</span><span class="sc">;</span></li><li>    <span class="q">qw( dog cat bird )</span><span class="s">[</span><span class="n">0</span><span class="s">]</span> = <span class="q">&#39;Rottweiler&#39;</span><span class="sc">;</span> <span class="c"># syntax error!</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="i">@animals</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">s/^d/fr/</span><span class="sc">;</span>  <span class="c"># works fine</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="s">(</span> <span class="q">qw( dog cat bird )</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="q">s/^d/fr/</span><span class="sc">;</span>  <span class="c"># Error! Modification of read only value!</span></li><li>    <span class="s">}</span></li></ol></pre><p>However, if the list element is itself a variable, it appears that you can change a list element. However, the list element is the variable, not the data. You&#39;re not changing the list element, but something the list element refers to. The list element itself doesn&#39;t change: it&#39;s still the same variable.</p><p>You also have to be careful about context. You can assign an array to a scalar to get the number of elements in the array. This only works for arrays, though:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$count</span> = <span class="i">@animals</span><span class="sc">;</span>  <span class="c"># only works with arrays</span></li></ol></pre><p>If you try to do the same thing with what you think is a list, you get a quite different result. Although it looks like you have a list on the righthand side, Perl actually sees a bunch of scalars separated by a comma:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$scalar</span> = <span class="s">(</span> <span class="q">&#39;dog&#39;</span><span class="cm">,</span> <span class="q">&#39;cat&#39;</span><span class="cm">,</span> <span class="q">&#39;bird&#39;</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># $scalar gets bird</span></li></ol></pre><p>Since you&#39;re assigning to a scalar, the righthand side is in scalar context. The comma operator (yes, it&#39;s an operator!) in scalar context evaluates its lefthand side, throws away the result, and evaluates it&#39;s righthand side and returns the result. In effect, that list-lookalike assigns to <code class="inline"><span class="i">$scalar</span></code>  it&#39;s rightmost value. Many people mess this up because they choose a list-lookalike whose last element is also the count they expect:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$scalar</span> = <span class="s">(</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">3</span> <span class="s">)</span><span class="sc">;</span>  <span class="c"># $scalar gets 3, accidentally</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#What-is-the-difference-between-a-list-and-an-array%3f
What if I don't know which encoding was used?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Do whatever you can to find out, and if you have to: guess. (Don&#39;t forget to document your guess with a comment.)</p><p>You could open the document in a web browser, and change the character set or character encoding until you can visually confirm that all characters look the way they should.</p><p>There is no way to reliably detect the encoding automatically, so if people keep sending you data without charset indication, you may have to educate them.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-if-I-don't-know-which-encoding-was-used%3f
Got an error from DosAllocMem	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to OS/2.  Most probably you&#39;re using an obsolete version of Perl, and this should not happen anyway.</p></section>	http://perldoc.perl.org/perldiag.html#Got-an-error-from-DosAllocMem
Binary "le" operator	A			Perl Operators\nPerl Relational Operators							<section class="prog__container">Binary &quot;le&quot; returns true if the left argument is stringwise less than or equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Relational-Operators
Use of /c modifier is meaningless without /g	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used the /c modifier with a regex operand, but didn&#39;t use the /g modifier.  Currently, /c is meaningful only when /g is used.  (This may change in the future.)</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%2fc-modifier-is-meaningless-without-%2fg
associativity (definition)	A			Perl Glossary							<section class="prog__container"><p>Determines whether you do the left <b>operator</b> first or the right <b>operator</b> first when you have “A <b>operator</b> B <b>operator</b> C”, and the two operators are of the same precedence. Operators like <code class="inline">+</code>  are left associative, while operators like <code class="inline"><span class="i">**</span></code>  are right associative. See Camel chapter 3, “Unary and Binary Operators” for a list of operators and their associativity.</p></section>	http://perldoc.perl.org/perlglossary.html#associativity
How do I keep my own module/library directory?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>When you build modules, tell Perl where to install the modules.</p><p>If you want to install modules for your own use, the easiest way might be <span href="http://search.cpan.org/perldoc/local::lib">local::lib</span>, which you can download from CPAN. It sets various installation settings for you, and uses those same settings within your programs.</p><p>If you want more flexibility, you need to configure your CPAN client for your particular situation.</p><p>For <code class="inline"><span class="w">Makefile</span>.<span class="w">PL</span></code> -based distributions, use the INSTALL_BASE option when generating Makefiles:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> <span class="w">Makefile</span>.<span class="w">PL</span> <span class="w">INSTALL_BASE</span>=<span class="q">/mydir/perl</span></li></ol></pre><p>You can set this in your <code class="inline"><span class="w">CPAN</span>.<span class="w">pm</span></code>  configuration so modules automatically install in your private library directory when you use the CPAN.pm shell:</p><pre class="verbatim"><ol><li>    <span class="i">% cpan</span></li><li>    <span class="w">cpan</span>&gt; <span class="w">o</span> <span class="w">conf</span> <span class="w">makepl_arg</span> <span class="w">INSTALL_BASE</span>=<span class="q">/mydir/perl</span></li><li>    <span class="w">cpan</span>&gt; <span class="w">o</span> <span class="w">conf</span> <span class="w">commit</span></li></ol></pre><p>For <code class="inline"><span class="w">Build</span>.<span class="w">PL</span></code> -based distributions, use the --install_base option:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> <span class="w">Build</span>.<span class="w">PL</span> --<span class="w">install_base</span> <span class="q">/mydir/perl</span></li></ol></pre><p>You can configure <code class="inline"><span class="w">CPAN</span>.<span class="w">pm</span></code>  to automatically use this option too:</p><pre class="verbatim"><ol><li>    <span class="i">% cpan</span></li><li>    <span class="w">cpan</span>&gt; <span class="w">o</span> <span class="w">conf</span> <span class="w">mbuild_arg</span> <span class="q">&quot;--install_base /mydir/perl&quot;</span></li><li>    <span class="w">cpan</span>&gt; <span class="w">o</span> <span class="w">conf</span> <span class="w">commit</span></li></ol></pre><p>INSTALL_BASE tells these tools to put your modules into <i>/mydir/perl/lib/perl5</i>. See <span href="http://perldoc.perl.org/perlfaq8.html#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f">How do I add a directory to my include path (@INC) at runtime?</span> for details on how to run your newly installed modules.</p><p>There is one caveat with INSTALL_BASE, though, since it acts differently from the PREFIX and LIB settings that older versions of <span href="http://perldoc.perl.org/ExtUtils/MakeMaker.html">ExtUtils::MakeMaker</span> advocated. INSTALL_BASE does not support installing modules for multiple versions of Perl or different architectures under the same directory. You should consider whether you really want that and, if you do, use the older PREFIX and LIB settings. See the <span href="http://search.cpan.org/perldoc/ExtUtils::Makemaker">ExtUtils::Makemaker</span> documentation for more details.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-keep-my-own-module%2flibrary-directory%3f
How stable is Perl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>Production releases, which incorporate bug fixes and new functionality, are widely tested before release. Since the 5.000 release, we have averaged about one production release per year.</p><p>The Perl development team occasionally make changes to the internal core of the language, but all possible efforts are made toward backward compatibility.</p></section>	http://perldoc.perl.org/perlfaq1.html#How-stable-is-Perl%3f
length() used on %s (did you mean "scalar(%s)"?)	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You used length() on either an array or a hash when you probably wanted a count of the items.</p><p>Array size can be obtained by doing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="i">@array</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The number of items in a hash can be obtained by doing:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#length()-used-on-%25s-(did-you-mean-%22scalar(%25s)%22%3f)
setuid (definition)	A			Perl Glossary							<section class="prog__container"><p>Said of a program that runs with the privileges of its <b>owner</b> rather than (as is usually the case) the privileges of whoever is running it. Also describes the bit in the mode word (<b>permission bits</b>) that controls the feature. This bit must be explicitly set by the owner to enable this feature, and the program must be carefully written not to give away more privileges than it ought to.</p></section>	http://perldoc.perl.org/perlglossary.html#setuid
pod (definition)	A			Perl Glossary							<section class="prog__container"><p>The markup used to embed documentation into your Perl code. Pod stands for “Plain old documentation”. See Camel chapter 23, “Plain Old Documentation”.</p></section>	http://perldoc.perl.org/perlglossary.html#pod
bless (function)	A			Perl Functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>bless REF,CLASSNAME<br>bless REF</pre><p>This function tells the thingy referenced by REF that it is now an object in the CLASSNAME package.  If CLASSNAME is omitted, the current package is used.  Because a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span></code> is often the last thing in a constructor, it returns the reference for convenience.  Always use the two-argument version if a derived class might inherit the function doing the blessing. See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span> for more about the blessing (and blessings) of objects.</p><p>Consider always blessing objects in CLASSNAMEs that are mixed case. Namespaces with all lowercase names are considered reserved for Perl pragmata.  Builtin types have all uppercase names.  To prevent confusion, you may wish to avoid such package names as well.  Make sure that CLASSNAME is a true value.</p><p>See <span href="http://perldoc.perl.org/perlmod.html#Perl-Modules">Perl Modules in perlmod</span>.</p></section>	http://perldoc.perl.org/functions/bless.html
virtual (definition)	A			Perl Glossary		[[memory]]					<section class="prog__container"><p>Providing the appearance of something without the reality, as in: virtual memory is not real memory.  The opposite of “virtual” is “transparent”, which means providing the reality of something without the appearance, as in: Perl handles the variable-length UTF‑8 character encoding transparently.</p></section>	http://perldoc.perl.org/perlglossary.html#virtual
$: (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>The current set of characters after which a string may be broken to fill continuation fields (starting with <code class="inline">^</code>) in a format.  The default is &quot; \\n-&quot;, to break on a space, newline, or a hyphen.</p><p>You cannot call <code class="inline"><span class="i">format_line_break_characters</span><span class="s">(</span><span class="s">)</span></code>  on a handle, only as a static method.  See <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p><p>Mnemonic: a &quot;colon&quot; in poetry is a part of a line.</p></section>	http://perldoc.perl.org/perlvar.html#%24%3a
executable file (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>file</b> that is specially marked to tell the <b>operating system</b> that it’s okay to run this file as a program. Usually shortened to “executable”.</p></section>	http://perldoc.perl.org/perlglossary.html#executable-file
ASCII (definition)	A			Perl Glossary		[[Unicode]]					<section class="prog__container"><p>The American Standard Code for Information Interchange (a 7-bit character set adequate only for poorly representing English text). Often used loosely to describe the lowest 128 values of the various ISO-8859-X character sets, a bunch of mutually incompatible 8-bit codes best described as half ASCII. </p></section>	http://perldoc.perl.org/perlglossary.html#ASCII
How can I convince others to use Perl?	A			Perl FAQs\nPerl General Questions About Perl							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Appeal to their self interest! If Perl is new (and thus scary) to them, find something that Perl can do to solve one of their problems. That might mean that Perl either saves them something (time, headaches, money) or gives them something (flexibility, power, testability).</p><p>In general, the benefit of a language is closely related to the skill of the people using that language. If you or your team can be faster, better, and stronger through Perl, you&#39;ll deliver more value. Remember, people often respond better to what they get out of it. If you run into resistance, figure out what those people get out of the other choice and how Perl might satisfy that requirement.</p><p>You don&#39;t have to worry about finding or paying for Perl; it&#39;s freely available and several popular operating systems come with Perl. Community support in places such as Perlmonks ( <span href="http://www.perlmonks.com">http://www.perlmonks.com</span> ) and the various Perl mailing lists ( <span href="http://lists.perl.org">http://lists.perl.org</span> ) means that you can usually get quick answers to your problems.</p><p>Finally, keep in mind that Perl might not be the right tool for every job. You&#39;re a much better advocate if your claims are reasonable and grounded in reality. Dogmatically advocating anything tends to make people discount your message. Be honest about possible disadvantages to your choice of Perl since any choice has trade-offs.</p><p>You might find these links useful:</p></section>	http://perldoc.perl.org/perlfaq1.html#How-can-I-convince-others-to-use-Perl%3f
panic: INTERPCASEMOD, %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The lexer got into a bad state at a case modifier.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-INTERPCASEMOD%2c-%25s
"my" subroutine %s can't be in a package	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexically scoped subroutines aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front.</p></section>	http://perldoc.perl.org/perldiag.html#%22my%22-subroutine-%25s-can't-be-in-a-package
field (definition)	A			Perl Glossary							<section class="prog__container"><p>A single piece of numeric or string data that is part of a longer <b>string</b>, <b>record</b>, or <b>line</b>. Variable-width fields are usually split up by <b>separators</b> (so use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span></code> to extract the fields), while fixed-width fields are usually at fixed positions (so use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span></code>). <b>Instance variables</b> are also known as “fields”.</p></section>	http://perldoc.perl.org/perlglossary.html#field
How do I permute N elements of a list?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>Use the <span href="http://search.cpan.org/perldoc/List::Permutor">List::Permutor</span> module on CPAN. If the list is actually an array, try the <span href="http://search.cpan.org/perldoc/Algorithm::Permute">Algorithm::Permute</span> module (also on CPAN). It&#39;s written in XS code and is very efficient:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Algorithm::Permute</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@array</span> = <span class="q">&#39;a&#39;</span>..<span class="q">&#39;d&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$p_iterator</span> = <span class="w">Algorithm::Permute</span><span class="w">-&gt;new</span> <span class="s">(</span> \\<span class="i">@array</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@perm</span> = <span class="i">$p_iterator</span><span class="i">-&gt;next</span><span class="s">)</span> <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;next permutation: (@perm)\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>For even faster execution, you could do:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Algorithm::Permute</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@array</span> = <span class="q">&#39;a&#39;</span>..<span class="q">&#39;d&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="i">Algorithm::Permute::permute</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;next permutation: (@array)\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>Here&#39;s a little program that generates all permutations of all the words on each line of input. The algorithm embodied in the <code class="inline"><span class="i">permute</span><span class="s">(</span><span class="s">)</span></code>  function is discussed in Volume 4 (still unpublished) of Knuth&#39;s <i>The Art of Computer Programming</i> and will work on any list:</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl -n</span></li><li>    <span class="c"># Fischer-Krause ordered permutation generator</span></li><li></li><li><span name="permute"></span>    sub <span class="m">permute (&amp;@)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$code</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@idx</span> = <span class="n">0</span>..<span class="i">$#_</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span> <span class="i">$code</span>-&gt;<span class="s">(</span><span class="i">@_</span>[<span class="i">@idx</span>]<span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$p</span> = <span class="i">$#idx</span><span class="sc">;</span></li><li>            --<span class="i">$p</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="i">$idx</span>[<span class="i">$p</span>-<span class="n">1</span>] &gt; <span class="i">$idx</span>[<span class="i">$p</span>]<span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$q</span> = <span class="i">$p</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@idx</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="l_k" href="http://perldoc.perl.org/functions/splice.html">splice</span> <span class="i">@idx</span><span class="cm">,</span> <span class="i">$p</span><span class="sc">;</span></li><li>            ++<span class="i">$q</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="i">$idx</span>[<span class="i">$p</span>-<span class="n">1</span>] &gt; <span class="i">$idx</span>[<span class="i">$q</span>]<span class="sc">;</span></li><li>            <span class="i">@idx</span>[<span class="i">$p</span>-<span class="n">1</span><span class="cm">,</span><span class="i">$q</span>]=<span class="i">@idx</span>[<span class="i">$q</span><span class="cm">,</span><span class="i">$p</span>-<span class="n">1</span>]<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">permute</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;@_\\n&quot;</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Algorithm::Loops">Algorithm::Loops</span> module also provides the <code class="inline"><span class="w">NextPermute</span></code>  and <code class="inline"><span class="w">NextPermuteNum</span></code>  functions which efficiently find all unique permutations of an array, even if it contains duplicate values, modifying it in-place: if its elements are in reverse-sorted order then the array is reversed, making it sorted, and it returns false; otherwise the next permutation is returned.</p><p><code class="inline"><span class="w">NextPermute</span></code>  uses string order and <code class="inline"><span class="w">NextPermuteNum</span></code>  numeric order, so you can enumerate all the permutations of <code class="inline"><span class="n">0</span>..<span class="n">9</span></code>  like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Algorithm::Loops</span> <span class="q">qw(NextPermuteNum)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@list</span>= <span class="n">0</span>..<span class="n">9</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;@list\\n&quot;</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="w">NextPermuteNum</span> <span class="i">@list</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-permute-N-elements-of-a-list%3f
setservent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>setservent STAYOPEN</pre>Prepare services file for use.</section>	http://perldoc.perl.org/functions/setservent.html
Character following "\c" must be printable ASCII	A			Perl Diagnostics							<section class="prog__container"><p>(F) In <code class="inline">\\c<i>X</i></code>, <i>X</i> must be a printable (non-control) ASCII character.</p><p>Note that ASCII characters that don&#39;t map to control characters are discouraged, and will generate the warning (when enabled) <span href="http://perldoc.perl.org/perldiag.html#%5cc%25c%22-is-more-clearly-written-simply-as-%22%25s">\\c%c is more clearly written simply as %s</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Character-following-%22%5cc%22-must-be-printable-ASCII
ARGV (definition)	A			Perl Glossary							<section class="prog__container"><p>The name of the array containing the <b>argument</b> <b>vector</b> from the command line. If you use the empty <code class="inline">&lt;&gt;</code>  operator, <code class="inline"><span class="w">ARGV</span></code>  is the name of both the <b>filehandle</b> used to traverse the arguments and the <b>scalar</b> containing the name of the current input file.</p></section>	http://perldoc.perl.org/perlglossary.html#ARGV
Can't return %s to lvalue scalar context	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to return a complete array or hash from an lvalue subroutine, but you called the subroutine in a way that made Perl think you meant to return only one value.  You probably meant to write parentheses around the call to the subroutine, which tell Perl that the call should be in list context.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-return-%25s-to-lvalue-scalar-context
readdir (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>readdir DIRHANDLE</pre><p>Returns the next directory entry for a directory opened by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/opendir.html">opendir</span></code>. If used in list context, returns all the rest of the entries in the directory.  If there are no more entries, returns the undefined value in scalar context and the empty list in list context.</p><p>If you&#39;re planning to filetest the return values out of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code>, you&#39;d better prepend the directory in question.  Otherwise, because we didn&#39;t <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chdir.html">chdir</span></code> there, it would have been testing the wrong file.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/opendir.html">opendir</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dh</span><span class="cm">,</span> <span class="i">$some_dir</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t opendir $some_dir: $!&quot;</span><span class="sc">;</span></li><li>    <span class="i">@dots</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> <span class="q">/^\\./</span> &amp;&amp; -f <span class="q">&quot;$some_dir/$_&quot;</span> <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span><span class="s">(</span><span class="i">$dh</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/closedir.html">closedir</span> <span class="i">$dh</span><span class="sc">;</span></li></ol></pre><p>As of Perl 5.12 you can use a bare <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code> in a <code class="inline">while</code>  loop, which will set <code class="inline"><span class="i">$_</span></code>  on every iteration.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/opendir.html">opendir</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dh</span><span class="cm">,</span> <span class="i">$some_dir</span><span class="s">)</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li><li>    while<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span> <span class="i">$dh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$some_dir/$_\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/closedir.html">closedir</span> <span class="i">$dh</span><span class="sc">;</span></li></ol></pre><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious failures, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.012</span><span class="sc">;</span> <span class="c"># so readdir assigns to $_ in a lone while test</span></li></ol></pre></section>	http://perldoc.perl.org/functions/readdir.html
B::Showlex (module)	A			Perl Standard Modules		[[B::Showlex]]\n[[B::Concise]]					<section class="prog__container"><p>B::Showlex - Show lexical variables used in functions or files</p> <pre class="verbatim"><ol><li>&#09;<span class="w">perl</span> -<span class="w">MO</span>=<span class="w">Showlex</span><span class="s">[</span><span class="cm">,</span>-<span class="w">OPTIONS</span><span class="s">]</span><span class="s">[</span><span class="cm">,</span><span class="w">SUBROUTINE</span><span class="s">]</span> <span class="w">foo</span>.<span class="w">pl</span></li></ol></pre></section>	http://perldoc.perl.org/B/Showlex.html
IO (module)	A			Perl Standard Modules							<section class="prog__container"><p>IO - load various IO modules</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span> <span class="q">qw(Handle File)</span><span class="sc">;</span> <span class="c"># loads IO modules, here IO::Handle, IO::File</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span><span class="sc">;</span>                 <span class="c"># DEPRECATED</span></li></ol></pre></section>	http://perldoc.perl.org/IO.html
Unicode::Normalize (module)	A			Perl Standard Modules							<section class="prog__container"><p>Unicode::Normalize - Unicode Normalization Forms</p> <p>(1) using function names exported by default:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::Normalize</span><span class="sc">;</span></li><li></li><li>  <span class="i">$NFD_string</span>  = <span class="i">NFD</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form D</span></li><li>  <span class="i">$NFC_string</span>  = <span class="i">NFC</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form C</span></li><li>  <span class="i">$NFKD_string</span> = <span class="i">NFKD</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Normalization Form KD</span></li><li>  <span class="i">$NFKC_string</span> = <span class="i">NFKC</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Normalization Form KC</span></li></ol></pre><p>(2) using function names exported on request:</p><pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Unicode::Normalize</span> <span class="q">&#39;normalize&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="i">$NFD_string</span>  = <span class="i">normalize</span><span class="s">(</span><span class="q">&#39;D&#39;</span><span class="cm">,</span>  <span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form D</span></li><li>  <span class="i">$NFC_string</span>  = <span class="i">normalize</span><span class="s">(</span><span class="q">&#39;C&#39;</span><span class="cm">,</span>  <span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form C</span></li><li>  <span class="i">$NFKD_string</span> = <span class="i">normalize</span><span class="s">(</span><span class="q">&#39;KD&#39;</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form KD</span></li><li>  <span class="i">$NFKC_string</span> = <span class="i">normalize</span><span class="s">(</span><span class="q">&#39;KC&#39;</span><span class="cm">,</span> <span class="i">$string</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># Normalization Form KC</span></li></ol></pre></section>	http://perldoc.perl.org/Unicode/Normalize.html
How do I fork a daemon process?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>If by daemon process you mean one that&#39;s detached (disassociated from its tty), then the following process is reported to work on most Unixish systems. Non-Unix users should check their Your_OS::Process module for other solutions.</p><p>The <span href="http://search.cpan.org/perldoc/Proc::Daemon">Proc::Daemon</span> module, available from CPAN, provides a function to perform these actions for you.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-fork-a-daemon-process%3f
ord (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>ord EXPR<br>ord</pre><p>Returns the numeric value of the first character of EXPR. If EXPR is an empty string, returns 0.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> . (Note <i>character</i>, not byte.)</p><p>For the reverse, see <span href="http://perldoc.perl.org/functions/chr.html">chr</span>. See <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span> for more about Unicode.</p></section>	http://perldoc.perl.org/functions/ord.html
struct (definition)	A			Perl Glossary							<section class="prog__container"><p>C keyword introducing a structure definition or name.</p></section>	http://perldoc.perl.org/perlglossary.html#struct
gethostbyaddr (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>gethostbyaddr ADDR,ADDRTYPE</pre>Get host record given its address.</section>	http://perldoc.perl.org/functions/gethostbyaddr.html
block buffering (definition)	A			Perl Glossary							<section class="prog__container"><p>A method of making input and output efficient by passing one <b>block</b> at a time. By default, Perl does block buffering to disk files. See <b>buffer</b> and <b>command buffering</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#block-buffering
Can't goto subroutine from an eval-%s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The &quot;goto subroutine&quot; call can&#39;t be used to jump out of an eval &quot;string&quot; or block.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-goto-subroutine-from-an-eval-%25s
Had to create %s unexpectedly	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) A routine asked for a symbol from a symbol table that ought to have existed already, but for some reason it didn&#39;t, and had to be created on an emergency basis to prevent a core dump.</p></section>	http://perldoc.perl.org/perldiag.html#Had-to-create-%25s-unexpectedly
preprocessing (definition)	A			Perl Glossary		[[C preprocessor]]					<section class="prog__container"><p>What some helper <b>process</b> did to transform the incoming data into a form more suitable for the current process. Often done with an incoming <b>pipe</b>. </p></section>	http://perldoc.perl.org/perlglossary.html#preprocessing
Net::hostent (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::hostent - by-name interface to Perl&#39;s built-in gethost*() functions</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::hostent</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/hostent.html
File::Compare (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Compare - Compare files or filehandles</p> <pre class="verbatim"><ol><li>  &#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Compare</span><span class="sc">;</span></li><li></li><li>&#09;if <span class="s">(</span><span class="i">compare</span><span class="s">(</span><span class="q">&quot;file1&quot;</span><span class="cm">,</span><span class="q">&quot;file2&quot;</span><span class="s">)</span> == <span class="n">0</span><span class="s">)</span> <span class="s">{</span></li><li>&#09;    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;They&#39;re equal\\n&quot;</span><span class="sc">;</span></li><li>&#09;<span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/File/Compare.html
TAP::Base (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Base - Base class that provides common functionality to <span href="http://perldoc.perl.org/TAP/Parser.html">TAP::Parser</span> and <span href="http://perldoc.perl.org/TAP/Harness.html">TAP::Harness</span></p> <pre class="verbatim"><ol><li><span name="package-TAP::Whatever"></span>    package <span class="i">TAP::Whatever</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">&#39;TAP::Base&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="c"># ... later ...</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$thing</span> = <span class="w">TAP::Whatever</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    </li><li>    <span class="i">$thing</span><span class="i">-&gt;callback</span><span class="s">(</span> <span class="w">event</span> <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span></li><li>        <span class="c"># do something interesting</span></li><li>    <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Base.html
freeware (definition)	A			Perl Glossary							<section class="prog__container"><p>Historically, any software that you give away, particularly if you make the source code available as well. Now often called <b>open source software</b>. Recently there has been a trend to use the term in contradistinction to <b>open source software</b>, to refer only to free software released under the Free Software Foundation’s GPL (General Public License), but this is difficult to justify etymologically.</p></section>	http://perldoc.perl.org/perlglossary.html#freeware
runtime (definition)	A			Perl Glossary							<section class="prog__container"><p>The time when Perl is actually doing what your code says to do, as opposed to the earlier period of time when it was trying to figure out whether what you said made any sense whatsoever, which is <b>compile time</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#runtime
How do I find the day or week of the year?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The day of the year is in the list returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> function. Without an argument <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> uses the current time.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$day_of_year</span> = <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">)</span>[<span class="n">7</span>]<span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module can also format a date as the day of the year or week of the year.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw/strftime/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$day_of_year</span>  = <span class="w">strftime</span> <span class="q">&quot;%j&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$week_of_year</span> = <span class="w">strftime</span> <span class="q">&quot;%W&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li></ol></pre><p>To get the day of year for any date, use <span href="http://perldoc.perl.org/POSIX.html">POSIX</span>&#39;s <code class="inline"><span class="w">mktime</span></code>  to get a time in epoch seconds for the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code>.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw/mktime strftime/</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$week_of_year</span> = <span class="w">strftime</span> <span class="q">&quot;%W&quot;</span><span class="cm">,</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="s">(</span> <span class="i">mktime</span><span class="s">(</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">18</span><span class="cm">,</span> <span class="n">11</span><span class="cm">,</span> <span class="n">87</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>You can also use <span href="http://perldoc.perl.org/Time/Piece.html">Time::Piece</span>, which comes with Perl and provides a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> that returns an object:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Piece</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$day_of_year</span>  = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="i">-&gt;yday</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$week_of_year</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="i">-&gt;week</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Date::Calc">Date::Calc</span> module provides two functions to calculate these, too:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Date::Calc</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$day_of_year</span>  = <span class="i">Day_of_Year</span><span class="s">(</span>  <span class="n">1987</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="n">18</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$week_of_year</span> = <span class="i">Week_of_Year</span><span class="s">(</span> <span class="n">1987</span><span class="cm">,</span> <span class="n">12</span><span class="cm">,</span> <span class="n">18</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-the-day-or-week-of-the-year%3f
rindex (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>rindex STR,SUBSTR,POSITION<br>rindex STR,SUBSTR</pre><p>Works just like index() except that it returns the position of the <i>last</i> occurrence of SUBSTR in STR.  If POSITION is specified, returns the last occurrence beginning at or before that position.</p></section>	http://perldoc.perl.org/functions/rindex.html
lowercase (definition)	A			Perl Glossary							<section class="prog__container"><p>In Unicode, not just characters with the General Category of Lowercase Letter, but any character with the Lowercase property, including Modifier Letters, Letter Numbers, some Other Symbols, and one Combining Mark.</p></section>	http://perldoc.perl.org/perlglossary.html#lowercase
Unicode surrogate U+%X is illegal in UTF-8	A			Perl Diagnostics							<section class="prog__container"><p>(S surrogate) You had a UTF-16 surrogate in a context where they are not considered acceptable.  These code points, between U+D800 and U+DFFF (inclusive), are used by Unicode only for UTF-16.  However, Perl internally allows all unsigned integer code points (up to the size limit available on your platform), including surrogates.  But these can cause problems when being input or output, which is likely where this message came from.  If you really really know what you are doing you can turn off this warning by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;surrogate&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Unicode-surrogate-U%2b%25X-is-illegal-in-UTF-8
Binary "!~" operator	A			Perl Operators\nPerl Binding Operators							<section class="prog__container">Binary &quot;!~&quot; is just like &quot;=~&quot; except the return value is negated in the logical sense.</section>	http://perldoc.perl.org/perlop.html#Binding-Operators
IPC::SysV (module)	A			Perl Standard Modules		[[IPC::Msg]]\n[[IPC::Semaphore]]\n[[IPC::SharedMem]]\n[[ftok]]\n[[shmat]]\n[[shmdt]]					<section class="prog__container"><p>IPC::SysV - System V IPC constants and system calls</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span> <span class="q">qw(IPC_STAT IPC_PRIVATE)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/SysV.html
Archive::Tar (module)	A			Perl Standard Modules							<section class="prog__container"><p>Archive::Tar - module for manipulations of tar archives</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Archive::Tar</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tar</span> = <span class="w">Archive::Tar</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li></li><li>    <span class="i">$tar</span><span class="i">-&gt;read</span><span class="s">(</span><span class="q">&#39;origin.tgz&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;extract</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$tar</span><span class="i">-&gt;add_files</span><span class="s">(</span><span class="q">&#39;file/foo.pl&#39;</span><span class="cm">,</span> <span class="q">&#39;docs/README&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;add_data</span><span class="s">(</span><span class="q">&#39;file/baz.txt&#39;</span><span class="cm">,</span> <span class="q">&#39;This is the contents now&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$tar</span><span class="i">-&gt;rename</span><span class="s">(</span><span class="q">&#39;oldname&#39;</span><span class="cm">,</span> <span class="q">&#39;new/file/name&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;chown</span><span class="s">(</span><span class="q">&#39;/&#39;</span><span class="cm">,</span> <span class="q">&#39;root&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;chown</span><span class="s">(</span><span class="q">&#39;/&#39;</span><span class="cm">,</span> <span class="q">&#39;root:root&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;chmod</span><span class="s">(</span><span class="q">&#39;/tmp&#39;</span><span class="cm">,</span> <span class="q">&#39;1777&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$tar</span><span class="i">-&gt;write</span><span class="s">(</span><span class="q">&#39;files.tar&#39;</span><span class="s">)</span><span class="sc">;</span>                   <span class="c"># plain tar</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;write</span><span class="s">(</span><span class="q">&#39;files.tgz&#39;</span><span class="cm">,</span> <span class="w">COMPRESS_GZIP</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># gzip compressed</span></li><li>    <span class="i">$tar</span><span class="i">-&gt;write</span><span class="s">(</span><span class="q">&#39;files.tbz&#39;</span><span class="cm">,</span> <span class="w">COMPRESS_BZIP</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># bzip2 compressed</span></li></ol></pre></section>	http://perldoc.perl.org/Archive/Tar.html
%s does not define %s::VERSION--version check failed	A			Perl Diagnostics							<section class="prog__container"><p>(F) You said something like &quot;use Module 42&quot; but the Module did not define a <code class="inline"><span class="i">$VERSION</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#%25s-does-not-define-%25s%3a%3aVERSION--version-check-failed
line number (definition)	A			Perl Glossary							<section class="prog__container"><p>The number of lines read previous to this one, plus 1. Perl keeps a separate line number for each source or input file it opens. The current source file’s line number is represented by <code class="inline"><span class="w">__LINE__</span></code> . The current input line number (for the file that was most recently read via <code class="inline"><span class="q">&lt;FH&gt;</span></code> ) is represented by the <code class="inline"><span class="i">$.</span></code>  (<code class="inline"><span class="i">$INPUT_LINE_NUMBER</span></code> ) variable. Many error messages report both values, if available.</p></section>	http://perldoc.perl.org/perlglossary.html#line-number
How can I reliably rename a file?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>If your operating system supports a proper mv(1) utility or its functional equivalent, this works:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/rename.html">rename</span><span class="s">(</span><span class="i">$old</span><span class="cm">,</span> <span class="i">$new</span><span class="s">)</span> or <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&quot;mv&quot;</span><span class="cm">,</span> <span class="i">$old</span><span class="cm">,</span> <span class="i">$new</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>It may be more portable to use the <span href="http://perldoc.perl.org/File/Copy.html">File::Copy</span> module instead. You just copy to the new file to the new name (checking return values), then delete the old one. This isn&#39;t really the same semantically as a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rename.html">rename()</span></code>, which preserves meta-information like permissions, timestamps, inode info, etc.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-reliably-rename-a-file%3f
module (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>file</b> that defines a <b>package</b> of (almost) the same name, which can either <b>export</b> symbols or function as an <b>object</b> class. (A module’s main <i>.pm</i> file may also load in other files in support of the module.) See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> built-in.</p></section>	http://perldoc.perl.org/perlglossary.html#module
I lost track; what encoding is the internal format really?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>It&#39;s good that you lost track, because you shouldn&#39;t depend on the internal format being any specific encoding. But since you asked: by default, the internal format is either ISO-8859-1 (latin-1), or utf8, depending on the history of the string. On EBCDIC platforms, this may be different even.</p><p>Perl knows how it stored the string internally, and will use that knowledge when you <code class="inline"><span class="w">encode</span></code> . In other words: don&#39;t try to find out what the internal encoding for a certain string is, but instead just encode it into the encoding that you want.</p></section>	http://perldoc.perl.org/perlunifaq.html#I-lost-track%3b-what-encoding-is-the-internal-format-really%3f
Dumpvalue (module)	A			Perl Standard Modules							<section class="prog__container"><p>Dumpvalue - provides screen dump of Perl data.</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Dumpvalue</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dumper</span> = <span class="w">Dumpvalue</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>  <span class="i">$dumper</span><span class="i">-&gt;set</span><span class="s">(</span><span class="w">globPrint</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$dumper</span><span class="i">-&gt;dumpValue</span><span class="s">(</span>\\<span class="i">*::</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$dumper</span><span class="i">-&gt;dumpvars</span><span class="s">(</span><span class="q">&#39;main&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dump</span> = <span class="i">$dumper</span><span class="i">-&gt;stringify</span><span class="s">(</span><span class="i">$some_value</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Dumpvalue.html
Is it safe to return a reference to local or lexical data?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Yes. Perl&#39;s garbage collection system takes care of this so everything works out right.</p><pre class="verbatim"><ol><li><span name="makeone"></span>    sub <span class="m">makeone</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@a</span> = <span class="s">(</span> <span class="n">1</span> .. <span class="n">10</span> <span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> \\<span class="i">@a</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span> <span class="n">1</span> .. <span class="n">10</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@many</span><span class="cm">,</span> <span class="i">makeone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$many</span>[<span class="n">4</span>][<span class="n">5</span>]<span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;@many\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq3.html#Is-it-safe-to-return-a-reference-to-local-or-lexical-data%3f
Boolean (definition)	A			Perl Glossary							<section class="prog__container"><p>A value that is either <b>true</b> or <b>false</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#Boolean
Sequence (?&... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A named reference of the form <code class="inline"><span class="s">(</span><span class="q">?&amp;...)</span></code>  was missing the final closing parenthesis after the name.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%26...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
DESTROY created new reference to dead object '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(F) A DESTROY() method created a new reference to the object which is just being DESTROYed.  Perl is confused, and prefers to abort rather than to create a dangling reference.</p></section>	http://perldoc.perl.org/perldiag.html#DESTROY-created-new-reference-to-dead-object-'%25s'
or (function)	A			Perl Functions							<section class="prog__container"><pre>or</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/or.html
Binary "&" operator	A			Perl Operators\nPerl Bitwise And							<section class="prog__container">Binary &quot;&amp;&quot; returns its operands ANDed together bit by bit. Although no warning is currently raised, the result is not well defined when this operation is performed on operands that aren&#39;t either numbers (see Integer Arithmetic ) nor bitstrings (see Bitwise String Operators ).</section>	http://perldoc.perl.org/perlop.html#Bitwise-And
$* (variable)	A			Perl Variables\nPerl Deprecated and removed variables							<section class="prog__container"><p><code class="inline"><span class="i">$*</span></code>  was a variable that you could use to enable multiline matching. After a deprecation cycle, its magic was removed in Perl v5.10.0. Using it now triggers a warning: <code class="inline">$* is no longer supported</code>. You should use the <code class="inline">/s</code> and <code class="inline">/m</code> regexp modifiers instead.</p><p>Deprecated in Perl 5.</p><p>Removed in Perl v5.10.0.</p></section>	http://perldoc.perl.org/perlvar.html#%24*
data structure (definition)	A			Perl Glossary							<section class="prog__container"><p>How your various pieces of data relate to each other and what shape they make when you put them all together, as in a rectangular table or a triangular tree.</p></section>	http://perldoc.perl.org/perlglossary.html#data-structure
source filter (definition)	A			Perl Glossary							<section class="prog__container"><p>A special kind of <b>module</b> that does <b>preprocessing</b> on your script just before it gets to the <b>tokener</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#source-filter
Illegal character after '_' in prototype for %s : %s	A			Perl Diagnostics							<section class="prog__container"><p>(W illegalproto) An illegal character was found in a prototype declaration.  The &#39;_&#39; in a prototype must be followed by a &#39;;&#39;, indicating the rest of the parameters are optional, or one of &#39;@&#39; or &#39;%&#39;, since those two will accept 0 or more final parameters.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-character-after-'_'-in-prototype-for-%25s-%3a-%25s
Can't use anonymous symbol table for method lookup	A			Perl Diagnostics							<section class="prog__container"><p>(F) The internal routine that does method lookup was handed a symbol table that doesn&#39;t have a name.  Symbol tables can become anonymous for example by undefining stashes: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%Some::Package::</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-anonymous-symbol-table-for-method-lookup
Errno (module)	A			Perl Standard Modules							<section class="prog__container"><p>Errno - System errno constants</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Errno</span> <span class="q">qw(EINTR EIO :POSIX)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Errno.html
readline() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re reading from got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#readline()-on-closed-filehandle-%25s
pseudohash (definition)	A			Perl Glossary							<section class="prog__container"><p>Formerly, a reference to an array whose initial element happens to hold a reference to a hash. You used to be able to treat a pseudohash reference as either an array reference or a hash reference. Pseduohashes are no longer supported.</p></section>	http://perldoc.perl.org/perlglossary.html#pseudohash
-e commandline	A			Perl Command-Line Switches							<section class="prog__container"><p>may be used to enter one line of program.  If <b>-e</b> is given, Perl will not look for a filename in the argument list.  Multiple <b>-e</b> commands may be given to build up a multi-line script.  Make sure to use semicolons where you would in a normal program.</p></section>	http://perldoc.perl.org/perlrun.html#*-e*-_commandline_
rewinddir() attempted on invalid dirhandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W io) The dirhandle you tried to do a rewinddir() on is either closed or not really a dirhandle.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#rewinddir()-attempted-on-invalid-dirhandle-%25s
Assertion %s failed: file "%s", line %d	A			Perl Diagnostics							<section class="prog__container"><p>(X) A general assertion failed.  The file in question must be examined.</p></section>	http://perldoc.perl.org/perldiag.html#Assertion-%25s-failed%3a-file-%22%25s%22%2c-line-%25d
Character(s) in '%c' format wrapped in pack	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) You tried something like</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;u&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{1f3}b&quot;</span><span class="s">)</span></li></ol></pre><p>where the format expects to process a sequence of bytes (character with a value below 256), but some of the characters had a higher value.  Perl uses the character values modulus 256 instead, as if you had provided:</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;u&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{f3}b&quot;</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Character(s)-in-'%25c'-format-wrapped-in-pack
context (definition)	A			Perl Glossary							<section class="prog__container"><p>The surroundings or environment. The context given by the surrounding code determines what kind of data a particular <b>expression</b> is expected to return. The three primary contexts are <b>list context</b>, <b>scalar</b>, and <b>void context</b>. Scalar context is sometimes subdivided into <b>Boolean context</b>, <b>numeric context</b>, <b>string context</b>, and <b>void context</b>. There’s also a “don’t care” context (which is dealt with in Camel chapter 2, “Bits and Pieces”, if you care).</p></section>	http://perldoc.perl.org/perlglossary.html#context
Too many args to syscall	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl supports a maximum of only 14 args to syscall().</p></section>	http://perldoc.perl.org/perldiag.html#Too-many-args-to-syscall
%%s{%s} in scalar context better written as $%s{%s}	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) In scalar context, you&#39;ve used a hash key/value slice (indicated by %) to select a single element of a hash.  Generally it&#39;s better to ask for a scalar value (indicated by $).  The difference is that <code class="inline"><span class="i">$foo</span>{<span class="i">&amp;bar</span>}</code>  always behaves like a scalar, both in the value it returns and when evaluating its argument, while <code class="inline"><span class="i">@foo</span>{<span class="i">&amp;bar</span>}</code>  and provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.  When called in list context, it also returns the key in addition to the value.</p></section>	http://perldoc.perl.org/perldiag.html#%25%25s%7b%25s%7d-in-scalar-context-better-written-as-%24%25s%7b%25s%7d
Unexpected exit failure %d	A			Perl Diagnostics							<section class="prog__container"><p>(S) An uncaught die() was called when <code class="inline"><span class="w">PERL_EXIT_WARN</span></code>  was set in <code class="inline"><span class="w">PL_exit_flags</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-exit-failure-%25d
sysread() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to read from a closed filehandle.</p></section>	http://perldoc.perl.org/perldiag.html#sysread()-on-closed-filehandle-%25s
How can I use Perl's option from within a program?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p><code class="inline">-<span class="w">i</span></code>  sets the value of Perl&#39;s <code class="inline"><span class="i">$^I</span></code>  variable, which in turn affects the behavior of <code class="inline">&lt;&gt;</code> ; see <span href="http://perldoc.perl.org/perlrun.html">perlrun</span> for more details. By modifying the appropriate variables directly, you can get the same behavior within a larger program. For example:</p><pre class="verbatim"><ol><li>    <span class="c"># ...</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span><span class="i">$^I</span><span class="cm">,</span> <span class="i">@ARGV</span><span class="s">)</span> = <span class="s">(</span><span class="q">&#39;.orig&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="q">&quot;*.c&quot;</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span>&lt;&gt;<span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$.</span> == <span class="n">1</span><span class="s">)</span> <span class="s">{</span></li><li>                <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;This line should appear at the top of each file\\n&quot;</span><span class="sc">;</span></li><li>            <span class="s">}</span></li><li>            <span class="q">s/\\b(p)earl\\b/${1}erl/i</span><span class="sc">;</span>        <span class="c"># Correct typos, preserving case</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="w">ARGV</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof</span><span class="sc">;</span>              <span class="c"># Reset $.</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li>    <span class="c"># $^I and @ARGV return to their old values here</span></li></ol></pre><p>This block modifies all the <code class="inline">.c</code> files in the current directory, leaving a backup of the original data from each file in a new <code class="inline">.c.orig</code> file.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-use-Perl's--i-option-from-within-a-program%3f
How do I find the soundex value of a string?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>You can use the <code class="inline"><span class="w">Text::Soundex</span></code>  module. If you want to do fuzzy or close matching, you might also try the <span href="http://search.cpan.org/perldoc/String::Approx">String::Approx</span>, and <span href="http://search.cpan.org/perldoc/Text::Metaphone">Text::Metaphone</span>, and <span href="http://search.cpan.org/perldoc/Text::DoubleMetaphone">Text::DoubleMetaphone</span> modules.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-find-the-soundex-value-of-a-string%3f
How do I use an SQL database?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>The <span href="http://search.cpan.org/perldoc/DBI">DBI</span> module provides an abstract interface to most database servers and types, including Oracle, DB2, Sybase, mysql, Postgresql, ODBC, and flat files. The DBI module accesses each database type through a database driver, or DBD. You can see a complete list of available drivers on CPAN: <span href="http://www.cpan.org/modules/by-module/DBD/">http://www.cpan.org/modules/by-module/DBD/</span> . You can read more about DBI on <span href="http://dbi.perl.org/">http://dbi.perl.org/</span> .</p><p>Other modules provide more specific access: <span href="http://search.cpan.org/perldoc/Win32::ODBC">Win32::ODBC</span>, <span href="http://search.cpan.org/perldoc/Alzabo">Alzabo</span>, <code class="inline"><span class="w">iodbc</span></code> , and others found on CPAN Search: <span href="http://search.cpan.org/">http://search.cpan.org/</span> .</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-use-an-SQL-database%3f
: Obtaining and Learning about Perl	A			Perl FAQs\nPerl frequently asked questions about Perl							<section class="prog__container"><p>This section of the FAQ answers questions about where to find source and documentation for Perl, support, and related matters.</p></section>	http://perldoc.perl.org/perlfaq.html#the-perlfaq2-manpage%3a-Obtaining-and-Learning-about-Perl
How do I perform an operation on a series of integers?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>To call a function on each element in an array, and collect the results, use:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@results</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">my_func</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre><p>For example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@triple</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="n">3</span> * <span class="i">$_</span> <span class="s">}</span> <span class="i">@single</span><span class="sc">;</span></li></ol></pre><p>To call a function on each element of an array, but ignore the results:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$iterator</span> <span class="s">(</span><span class="i">@array</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">some_func</span><span class="s">(</span><span class="i">$iterator</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>To call a function on each integer in a (small) range, you <b>can</b> use:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@results</span> = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">some_func</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="s">}</span> <span class="s">(</span><span class="n">5</span> .. <span class="n">25</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>but you should be aware that in this form, the <code class="inline">..</code>  operator creates a list of all integers in the range, which can take a lot of memory for large ranges. However, the problem does not occur when using <code class="inline">..</code>  within a <code class="inline">for</code>  loop, because in that case the range operator is optimized to <i>iterate</i> over the range, without creating the entire list. So</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@results</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$i</span> <span class="s">(</span><span class="n">5</span> .. <span class="n">500_005</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@results</span><span class="cm">,</span> <span class="i">some_func</span><span class="s">(</span><span class="i">$i</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>or even</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span><span class="s">(</span><span class="i">@results</span><span class="cm">,</span> <span class="i">some_func</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="n">5</span> .. <span class="n">500_005</span><span class="sc">;</span></li></ol></pre><p>will not create an intermediate list of 500,000 integers.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-do-I-perform-an-operation-on-a-series-of-integers%3f
syscall (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>function</b> call directly to the <b>operating system</b>. Many of the important subroutines and functions you use aren’t direct system calls, but are built up in one or more layers above the system call level. In general, Perl programmers don’t need to worry about the distinction. However, if you do happen to know which Perl functions are really syscalls, you can predict which of these will set the <code class="inline"><span class="i">$!</span></code>  (<code class="inline"><span class="i">$ERRNO</span></code> ) variable on failure. Unfortunately, beginning programmers often confusingly employ the term “system call” to mean what happens when you call the Perl <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> function, which actually involves many syscalls. To avoid any confusion, we nearly always say “syscall” for something you could call indirectly via Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> function, and never for something you would call with Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#syscall
File::Spec::Win32 (module)	A			Perl Standard Modules		[[File::Spec]]\n[[File::Spec::Unix]]					<section class="prog__container"><p>File::Spec::Win32 - methods for Win32 file specs</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::Win32</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Win32.html
Bizarre copy of %s	A			Perl Diagnostics							<section class="prog__container"><p>(P) Perl detected an attempt to copy an internal value that is not copiable.</p></section>	http://perldoc.perl.org/perldiag.html#Bizarre-copy-of-%25s
Can't find string terminator %s anywhere before EOF	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl strings can stretch over multiple lines.  This message means that the closing delimiter was omitted.  Because bracketed quotes count nesting levels, the following is missing its final parenthesis:</p><pre class="verbatim"><ol><li>    print q(The character &#39;(&#39; starts a side comment.);</li></ol></pre><p>If you&#39;re getting this error from a here-document, you may have included unseen whitespace before or after your closing tag or there may not be a linebreak after it.  A good programmer&#39;s editor will have a way to help you find these characters (or lack of characters).  See <span href="http://perldoc.perl.org/perlop.html">perlop</span> for the full details on here-documents.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-find-string-terminator-%25s-anywhere-before-EOF
elseif (function)	A			Perl Functions							<section class="prog__container"><pre>elseif</pre><p>The &quot;else if&quot; keyword is spelled <code class="inline">elsif</code>  in Perl.  There&#39;s no <code class="inline"><span class="w">elif</span></code>  or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span></code>  either.  It does parse <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/elseif.html">elseif</span></code>, but only to warn you about not using it.</p><p>See the documentation for flow-control keywords in <span href="http://perldoc.perl.org/perlsyn.html#Compound-Statements">Compound Statements in perlsyn</span>.</p></section>	http://perldoc.perl.org/functions/elseif.html
What's MakeMaker?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <span href="http://perldoc.perl.org/ExtUtils/MakeMaker.html">ExtUtils::MakeMaker</span> module, better known simply as &quot;MakeMaker&quot;, turns a Perl script, typically called <code class="inline"><span class="w">Makefile</span>.<span class="w">PL</span></code> , into a Makefile. The Unix tool <code class="inline"><span class="w">make</span></code>  uses this file to manage dependencies and actions to process and install a Perl distribution.</p></section>	http://perldoc.perl.org/perlfaq3.html#What's-MakeMaker%3f
Out of memory for yacc stack	A			Perl Diagnostics							<section class="prog__container"><p>(F) The yacc parser wanted to grow its stack so it could continue parsing, but realloc() wouldn&#39;t give it more memory, virtual or otherwise.</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory-for-yacc-stack
IPC::Cmd (module)	A			Perl Standard Modules							<section class="prog__container"><p>IPC::Cmd - finding and running system commands made easy</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Cmd</span> <span class="q">qw[can_run run run_forked]</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$full_path</span> = <span class="i">can_run</span><span class="s">(</span><span class="q">&#39;wget&#39;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span> <span class="q">&#39;wget is not installed!&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="c">### commands can be arrayrefs or strings ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$cmd</span> = <span class="q">&quot;$full_path -b theregister.co.uk&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$cmd</span> = <span class="s">[</span><span class="i">$full_path</span><span class="cm">,</span> <span class="q">&#39;-b&#39;</span><span class="cm">,</span> <span class="q">&#39;theregister.co.uk&#39;</span><span class="s">]</span><span class="sc">;</span></li><li></li><li>    <span class="c">### in scalar context ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$buffer</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">run</span><span class="s">(</span> <span class="w">command</span> <span class="cm">=&gt;</span> <span class="i">$cmd</span><span class="cm">,</span></li><li>                    <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span></li><li>                    <span class="w">buffer</span>  <span class="cm">=&gt;</span> \\<span class="i">$buffer</span><span class="cm">,</span></li><li>                    <span class="w">timeout</span> <span class="cm">=&gt;</span> <span class="n">20</span> <span class="s">)</span></li><li>    <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;fetched webpage successfully: $buffer\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li></li><li>    <span class="c">### in list context ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$success</span><span class="cm">,</span> <span class="i">$error_message</span><span class="cm">,</span> <span class="i">$full_buf</span><span class="cm">,</span> <span class="i">$stdout_buf</span><span class="cm">,</span> <span class="i">$stderr_buf</span> <span class="s">)</span> =</li><li>            <span class="i">run</span><span class="s">(</span> <span class="w">command</span> <span class="cm">=&gt;</span> <span class="i">$cmd</span><span class="cm">,</span> <span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">0</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">$success</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;this is what the command printed:\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&quot;&quot;</span><span class="cm">,</span> <span class="i">@$full_buf</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c">### run_forked example ###</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$result</span> = <span class="i">run_forked</span><span class="s">(</span><span class="q">&quot;$full_path -q -O - theregister.co.uk&quot;</span><span class="cm">,</span> <span class="s">{</span><span class="q">&#39;timeout&#39;</span> <span class="cm">=&gt;</span> <span class="n">20</span><span class="s">}</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$result</span>-&gt;{<span class="q">&#39;exit_code&#39;</span>} <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="n">0</span> &amp;&amp; !<span class="i">$result</span>-&gt;{<span class="q">&#39;timeout&#39;</span>}<span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;this is what wget returned:\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$result</span>-&gt;{<span class="q">&#39;stdout&#39;</span>}<span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="c">### check for features</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;IPC::Open3 available: &quot;</span>  . <span class="w">IPC::Cmd</span><span class="w">-&gt;can_use_ipc_open3</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;IPC::Run available: &quot;</span>    . <span class="w">IPC::Cmd</span><span class="w">-&gt;can_use_ipc_run</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Can capture buffer: &quot;</span>    . <span class="w">IPC::Cmd</span><span class="w">-&gt;can_capture_buffer</span><span class="sc">;</span></li><li></li><li>    <span class="c">### don&#39;t have IPC::Cmd be verbose, ie don&#39;t print to stdout or</span></li><li>    <span class="c">### stderr when running commands -- default is &#39;0&#39;</span></li><li>    <span class="i">$IPC::Cmd::VERBOSE</span> = <span class="n">0</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/Cmd.html
Where can I get perl-mode or cperl-mode for emacs?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>Since Emacs version 19 patchlevel 22 or so, there have been both a perl-mode.el and support for the Perl debugger built in. These should come with the standard Emacs 19 distribution.</p><p>Note that the perl-mode of emacs will have fits with <code class="inline"><span class="q">&quot;main&#39;foo&quot;</span></code>  (single quote), and mess up the indentation and highlighting. You are probably using <code class="inline"><span class="q">&quot;main::foo&quot;</span></code>  in new Perl code anyway, so this shouldn&#39;t be an issue.</p><p>For CPerlMode, see <span href="http://www.emacswiki.org/cgi-bin/wiki/CPerlMode">http://www.emacswiki.org/cgi-bin/wiki/CPerlMode</span></p></section>	http://perldoc.perl.org/perlfaq3.html#Where-can-I-get-perl-mode-or-cperl-mode-for-emacs%3f
cmp (function)	A			Perl Functions							<section class="prog__container"><pre>cmp</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/cmp.html
%ENV (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The hash <code class="inline"><span class="i">%ENV</span></code>  contains your current environment.  Setting a value in <code class="inline"><span class="w">ENV</span></code>  changes the environment for any child processes you subsequently <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork()</span></code> off.</p><p>As of v5.18.0, both keys and values stored in <code class="inline"><span class="i">%ENV</span></code>  are stringified.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="i">$ENV</span>{<span class="q">&#39;bar&#39;</span>} = \\<span class="i">$foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/ref.html">ref</span> <span class="i">$ENV</span>{<span class="q">&#39;bar&#39;</span>} <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;Pre 5.18.0 Behaviour&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/say.html">say</span> <span class="q">&quot;Post 5.18.0 Behaviour&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Previously, only child processes received stringified values:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="i">$ENV</span>{<span class="q">&#39;bar&#39;</span>} = \\<span class="i">$foo</span><span class="sc">;</span></li><li></li><li>    <span class="c"># Always printed &#39;non ref&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="i">$^X</span><span class="cm">,</span> <span class="q">&#39;-e&#39;</span><span class="cm">,</span></li><li>           <span class="q">q/print ( ref $ENV{&#39;bar&#39;}  ? &#39;ref&#39; : &#39;non ref&#39; ) /</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>This happens because you can&#39;t really share arbitrary data structures with foreign processes.</p></section>	http://perldoc.perl.org/perlvar.html#%25ENV
ExtUtils::MM_MacOS (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_MacOS - once produced Makefiles for MacOS Classic</p> <pre class="verbatim"><ol><li>  <span class="c"># MM_MacOS no longer contains any code.  This is just a stub.</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_MacOS.html
Opcode (module)	A			Perl Standard Modules		[[ops]]\n[[Safe]]					<section class="prog__container"><p>Opcode - Disable named opcodes when compiling perl code</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Opcode</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Opcode.html
Reference to invalid group 0 in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used <code class="inline">\\<span class="w">g0</span></code>  or similar in a regular expression.  You may refer to capturing parentheses only with strictly positive integers (normal backreferences) or with strictly negative integers (relative backreferences).  Using 0 does not make sense.</p></section>	http://perldoc.perl.org/perldiag.html#Reference-to-invalid-group-0-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
List form of piped open not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) On some platforms, notably Windows, the three-or-more-arguments form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> does not support pipes, such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$pipe</span><span class="cm">,</span> <span class="q">&#39;|-&#39;</span><span class="cm">,</span> <span class="i">@args</span><span class="s">)</span></code> . Use the two-argument <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="i">$pipe</span><span class="cm">,</span> <span class="q">&#39;|prog arg1 arg2...&#39;</span><span class="s">)</span></code>  form instead.</p></section>	http://perldoc.perl.org/perldiag.html#List-form-of-piped-open-not-implemented
"state" subroutine %s can't be in a package	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexically scoped subroutines aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front.</p></section>	http://perldoc.perl.org/perldiag.html#%22state%22-subroutine-%25s-can't-be-in-a-package
ExtUtils::MM_UWIN (module)	A			Perl Standard Modules		[[ExtUtils::MM_Win32]]\n[[ExtUtils::MakeMaker]]					<section class="prog__container"><p>ExtUtils::MM_UWIN - U/WIN specific subclass of ExtUtils::MM_Unix</p> <pre class="verbatim"><ol><li>  <span class="w">Don&#39;t</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">this</span> <span class="w">module</span> <span class="w">directly</span>.</li><li>  <span class="w">Use</span> <span class="w">ExtUtils::MM</span> and <span class="w">let</span> <span class="w">it</span> <span class="w">choose</span>.</li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_UWIN.html
The bitwise feature is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::bitwise) This warning is emitted if you use bitwise operators (<code class="inline"><span class="i">&amp; |</span> ^ ~ <span class="i">&amp;.</span> |. ^. ~.</code> ) with the &quot;bitwise&quot; feature enabled. Simply suppress the warning if you want to use the feature, but know that in doing so you are taking the risk of using an experimental feature which may change or be removed in a future Perl version:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::bitwise&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;bitwise&quot;</span><span class="sc">;</span></li><li>    <span class="i">$x</span> |.= <span class="i">$y</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#The-bitwise-feature-is-experimental
null character (definition)	A			Perl Glossary							<section class="prog__container"><p>A character with the numeric value of zero. It’s used by C to terminate strings, but Perl allows strings to contain a null.</p></section>	http://perldoc.perl.org/perlglossary.html#null-character
File::Glob (module)	A			Perl Standard Modules		[[glob]]					<section class="prog__container"><p>File::Glob - Perl extension for BSD glob routine</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Glob</span> <span class="q">&#39;:bsd_glob&#39;</span><span class="sc">;</span></li><li></li><li>  <span class="i">@list</span> = <span class="i">bsd_glob</span><span class="s">(</span><span class="q">&#39;*.[ch]&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$homedir</span> = <span class="i">bsd_glob</span><span class="s">(</span><span class="q">&#39;~gnat&#39;</span><span class="cm">,</span> <span class="w">GLOB_TILDE</span> | <span class="w">GLOB_ERR</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="w">GLOB_ERROR</span><span class="s">)</span> <span class="s">{</span></li><li>    <span class="c"># an error occurred reading $homedir</span></li><li>  <span class="s">}</span></li><li></li><li>  <span class="c">## override the core glob (CORE::glob() does this automatically</span></li><li>  <span class="c">## by default anyway, since v5.6.0)</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Glob</span> <span class="q">&#39;:globally&#39;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sources</span> = <span class="q">&lt;*.{c,h,y}&gt;</span><span class="sc">;</span></li><li></li><li>  <span class="c">## override the core glob, forcing case sensitivity</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Glob</span> <span class="q">qw(:globally :case)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sources</span> = <span class="q">&lt;*.{c,h,y}&gt;</span><span class="sc">;</span></li><li></li><li>  <span class="c">## override the core glob forcing case insensitivity</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Glob</span> <span class="q">qw(:globally :nocase)</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sources</span> = <span class="q">&lt;*.{c,h,y}&gt;</span><span class="sc">;</span></li><li></li><li>  <span class="c">## glob on all files in home directory</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Glob</span> <span class="q">&#39;:globally&#39;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@sources</span> = <span class="q">&lt;~gnat/*&gt;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Glob.html
Memoize::ExpireFile (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize::ExpireFile - test for Memoize expiration semantics</p> </section>	http://perldoc.perl.org/Memoize/ExpireFile.html
No code specified for -%c	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl&#39;s <b>-e</b> and <b>-E</b> command-line options require an argument.  If you want to run an empty program, pass the empty string as a separate argument or run a program consisting of a single 0 or 1:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -e <span class="q">&quot;&quot;</span></li><li>    <span class="w">perl</span> -<span class="w">e0</span></li><li>    <span class="w">perl</span> -<span class="w">e1</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#No-code-specified-for--%25c
Can't call method "%s" on unblessed reference	A			Perl Diagnostics							<section class="prog__container"><p>(F) A method call must know in what package it&#39;s supposed to run.  It ordinarily finds this out from the object reference you supply, but you didn&#39;t supply an object reference in this case.  A reference isn&#39;t an object reference until it has been blessed.  See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-call-method-%22%25s%22-on-unblessed-reference
How can I check if a key exists in a multilevel hash?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The trick to this problem is avoiding accidental autovivification. If you want to check three keys deep, you might naïvely try this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="w">key1</span>}{<span class="w">key2</span>}{<span class="w">key3</span>} <span class="s">)</span> <span class="s">{</span></li><li>        ...<span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Even though you started with a completely empty hash, after that call to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span></code> you&#39;ve created the structure you needed to check for <code class="inline"><span class="w">key3</span></code> :</p><pre class="verbatim"><ol><li>    <span class="i">%hash</span> = <span class="s">(</span></li><li>              <span class="q">&#39;key1&#39;</span> <span class="cm">=&gt;</span> <span class="s">{</span></li><li>                          <span class="q">&#39;key2&#39;</span> <span class="cm">=&gt;</span> <span class="s">{</span><span class="s">}</span></li><li>                        <span class="s">}</span></li><li>            <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>That&#39;s autovivification. You can get around this in a few ways. The easiest way is to just turn it off. The lexical <code class="inline"><span class="w">autovivification</span></code>  pragma is available on CPAN. Now you don&#39;t add to the hash:</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">autovivification</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>{<span class="w">key1</span>}{<span class="w">key2</span>}{<span class="w">key3</span>} <span class="s">)</span> <span class="s">{</span></li><li>            ...<span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Data::Diver">Data::Diver</span> module on CPAN can do it for you too. Its <code class="inline"><span class="w">Dive</span></code>  subroutine can tell you not only if the keys exist but also get the value:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Data::Diver</span> <span class="q">qw(Dive)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@exists</span> = <span class="i">Dive</span><span class="s">(</span> \\<span class="i">%hash</span><span class="cm">,</span> <span class="q">qw(key1 key2 key3)</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span>  ! <span class="i">@exists</span>  <span class="s">)</span> <span class="s">{</span></li><li>        ...<span class="sc">;</span> <span class="c"># keys do not exist</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/elsif.html">elsif</span><span class="s">(</span>  ! <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$exists</span>[<span class="n">0</span>]  <span class="s">)</span> <span class="s">{</span></li><li>        ...<span class="sc">;</span> <span class="c"># keys exist but value is undef</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can easily do this yourself too by checking each level of the hash before you move onto the next level. This is essentially what <span href="http://search.cpan.org/perldoc/Data::Diver">Data::Diver</span> does for you:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span><span class="s">(</span> <span class="i">check_hash</span><span class="s">(</span> \\<span class="i">%hash</span><span class="cm">,</span> <span class="q">qw(key1 key2 key3)</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span></li><li>        ...<span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="check_hash"></span>    sub <span class="m">check_hash</span> <span class="s">{</span></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span> <span class="i">$hash</span><span class="cm">,</span> <span class="i">@keys</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="i">@keys</span><span class="sc">;</span></li><li></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="i">@keys</span> <span class="s">)</span> <span class="s">{</span></li><li>           <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/unless.html">unless</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/exists.html">exists</span> <span class="i">$hash</span>-&gt;{<span class="i">$key</span>} <span class="s">}</span><span class="sc">;</span></li><li>           <span class="i">$hash</span> = <span class="i">$hash</span>-&gt;{<span class="i">$key</span>}<span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li>       <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="n">1</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-check-if-a-key-exists-in-a-multilevel-hash%3f
IPC::SharedMem (module)	A			Perl Standard Modules		[[IPC::SysV]]\n[[Class::Struct]]					<section class="prog__container"><p>IPC::SharedMem - SysV Shared Memory IPC object class</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span> <span class="q">qw(IPC_PRIVATE S_IRUSR S_IWUSR)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SharedMem</span><span class="sc">;</span></li><li></li><li>    <span class="i">$shm</span> = <span class="w">IPC::SharedMem</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">IPC_PRIVATE</span><span class="cm">,</span> <span class="n">8</span><span class="cm">,</span> <span class="w">S_IRWXU</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$shm</span><span class="i">-&gt;write</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;S&quot;</span><span class="cm">,</span> <span class="n">4711</span><span class="s">)</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$data</span> = <span class="i">$shm</span><span class="i">-&gt;read</span><span class="s">(</span><span class="n">0</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ds</span> = <span class="i">$shm</span><span class="i">-&gt;stat</span><span class="sc">;</span></li><li></li><li>    <span class="i">$shm</span><span class="i">-&gt;remove</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/SharedMem.html
Usage: POSIX::%s(%s)	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called a POSIX function with incorrect arguments. See <span href="http://perldoc.perl.org/POSIX.html#FUNCTIONS">FUNCTIONS in POSIX</span> for more information.</p></section>	http://perldoc.perl.org/perldiag.html#Usage%3a-POSIX%3a%3a%25s(%25s)
Unrecognized escape \%c in character class passed through in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used a backslash-character combination which is not recognized by Perl inside character classes.  The character was understood literally, but this may change in a future version of Perl. The &lt;-- HERE shows whereabouts in the regular expression the escape was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Unrecognized-escape-%5c%25c-in-character-class-passed-through-in-regex%3b--marked-by-%3c---HERE-in-m%2f%25s%2f
localtime(%f) too small	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> with a number that was smaller than it can reliably handle and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span></code> probably returned the wrong date.</p></section>	http://perldoc.perl.org/perldiag.html#localtime(%25f)-too-small
one-liner (definition)	A			Perl Glossary							<section class="prog__container"><p>An entire computer program crammed into one line of text.</p></section>	http://perldoc.perl.org/perlglossary.html#one-liner
Hexadecimal number > 0xffffffff non-portable	A			Perl Diagnostics							<section class="prog__container"><p>(W portable) The hexadecimal number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems.  See <span href="http://perldoc.perl.org/perlport.html">perlport</span> for more on portability concerns.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-number-%3e-0xffffffff-non-portable
User::pwent (module)	A			Perl Standard Modules							<section class="prog__container"><p>User::pwent - by-name interface to Perl&#39;s built-in getpw*() functions</p> <pre class="verbatim"><ol><li> use User::pwent;</li><li> $pw = getpwnam(&#39;daemon&#39;)       || die &quot;No daemon user&quot;;</li><li> if ( $pw-&gt;uid == 1 &amp;&amp; $pw-&gt;dir =~ m#^/(bin|tmp)?\\z#s ) {</li><li>     print &quot;gid 1 on root dir&quot;;</li><li> }</li><li></li><li> $real_shell = $pw-&gt;shell || &#39;/bin/sh&#39;;</li><li></li><li> for (($fullname, $office, $workphone, $homephone) =</li><li>        split /\\s*,\\s*/, $pw-&gt;gecos)</li><li> {</li><li>    s/&amp;/ucfirst(lc($pw-&gt;name))/ge;</li><li> }</li><li></li><li> use User::pwent qw(:FIELDS);</li><li> getpwnam(&#39;daemon&#39;)             || die &quot;No daemon user&quot;;</li><li> if ( $pw_uid == 1 &amp;&amp; $pw_dir =~ m#^/(bin|tmp)?\\z#s ) {</li><li>     print &quot;gid 1 on root dir&quot;;</li><li> }</li><li></li><li> $pw = getpw($whoever);</li><li></li><li> use User::pwent qw/:DEFAULT pw_has/;</li><li> if (pw_has(qw[gecos expire quota])) { .... }</li><li> if (pw_has(&quot;name uid gid passwd&quot;))  { .... }</li><li> print &quot;Your struct pwd has: &quot;, scalar pw_has(), &quot;\\n&quot;;</li></ol></pre></section>	http://perldoc.perl.org/User/pwent.html
-0 [ octal/hexadecimal ]	A			Perl Command-Line Switches							<section class="prog__container"><p>specifies the input record separator (<code class="inline"><span class="i">$/</span></code> ) as an octal or hexadecimal number.  If there are no digits, the null character is the separator.  Other switches may precede or follow the digits.  For example, if you have a version of <i>find</i> which can print filenames terminated by the null character, you can say this:</p><pre class="verbatim"><ol><li>    <span class="w">find</span> . -<span class="w">name</span> <span class="q">&#39;*.orig&#39;</span> -<span class="w">print0</span> | <span class="w">perl</span> -<span class="w">n0e</span> <span class="l_k" href="http://perldoc.perl.org/functions/unlink.html">unlink</span></li></ol></pre><p>The special value 00 will cause Perl to slurp files in paragraph mode. Any value 0400 or above will cause Perl to slurp files whole, but by convention the value 0777 is the one normally used for this purpose.</p><p>You can also specify the separator character using hexadecimal notation: <b>-0x<i>HHH...</i></b>, where the <code class="inline"><i>H</i></code> are valid hexadecimal digits.  Unlike the octal form, this one may be used to specify any Unicode character, even those beyond 0xFF.  So if you <i>really</i> want a record separator of 0777, specify it as <b>-0x1FF</b>.  (This means that you cannot use the <b>-x</b> option with a directory name that consists of hexadecimal digits, or else Perl will think you have specified a hex number to <b>-0</b>.)</p></section>	http://perldoc.perl.org/perlrun.html#*-0*%5b_octal%2fhexadecimal_%5d
Can't "when" outside a topicalizer	A			Perl Diagnostics							<section class="prog__container"><p>(F) You have used a when() block that is neither inside a <code class="inline">foreach</code>  loop nor a <code class="inline">given</code>  block.  (Note that this error is issued on exit from the <code class="inline">when</code>  block, so you won&#39;t get the error if the match fails, or if you use an explicit <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code>.)</p></section>	http://perldoc.perl.org/perldiag.html#Can't-%22when%22-outside-a-topicalizer
panic: strxfrm() gets absurd - a => %u, ab => %u	A			Perl Diagnostics							<section class="prog__container"><p>(P) The interpreter&#39;s sanity check of the C function strxfrm() failed. In your current locale the returned transformation of the string &quot;ab&quot; is shorter than that of the string &quot;a&quot;, which makes no sense.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-strxfrm()-gets-absurd---a-%3d%3e-%25u%2c-ab-%3d%3e-%25u
How can I read a single character from a file? From the keyboard?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>You can use the builtin <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/getc.html">getc()</span></code> function for most filehandles, but it won&#39;t (easily) work on a terminal device. For STDIN, either use the Term::ReadKey module from CPAN or use the sample code in <span href="http://perldoc.perl.org/functions/getc.html">getc</span>.</p><p>If your system supports the portable operating system programming interface (POSIX), you can use the following code, which you&#39;ll note turns off echo processing as well.</p><pre class="verbatim"><ol><li>    <span class="c">#!/usr/bin/perl -w</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>    <span class="i">$|</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="s">(</span><span class="n">1</span>..<span class="n">4</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;gimme: &quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$got</span> = <span class="i">getone</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;--&gt; $got\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(:termios_h)</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$term</span><span class="cm">,</span> <span class="i">$oterm</span><span class="cm">,</span> <span class="i">$echo</span><span class="cm">,</span> <span class="i">$noecho</span><span class="cm">,</span> <span class="i">$fd_stdin</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fd_stdin</span> = <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>        <span class="i">$term</span>     = <span class="w">POSIX::Termios</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$term</span><span class="i">-&gt;getattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$oterm</span>     = <span class="i">$term</span><span class="i">-&gt;getlflag</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>        <span class="i">$echo</span>     = <span class="w">ECHO</span> | <span class="w">ECHOK</span> | <span class="w">ICANON</span><span class="sc">;</span></li><li>        <span class="i">$noecho</span>   = <span class="i">$oterm</span> &amp; ~<span class="i">$echo</span><span class="sc">;</span></li><li></li><li><span name="cbreak"></span>        sub <span class="m">cbreak</span> <span class="s">{</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setlflag</span><span class="s">(</span><span class="i">$noecho</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setcc</span><span class="s">(</span><span class="w">VTIME</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="cm">,</span> <span class="w">TCSANOW</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li><span name="cooked"></span>        sub <span class="m">cooked</span> <span class="s">{</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setlflag</span><span class="s">(</span><span class="i">$oterm</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setcc</span><span class="s">(</span><span class="w">VTIME</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">$term</span><span class="i">-&gt;setattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="cm">,</span> <span class="w">TCSANOW</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li></li><li><span name="getone"></span>        sub <span class="m">getone</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>            <span class="i">cbreak</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span><span class="s">(</span><span class="w">STDIN</span><span class="cm">,</span> <span class="i">$key</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="i">cooked</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$key</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/END.html">END</span> <span class="s">{</span> <span class="i">cooked</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li></ol></pre><p>The Term::ReadKey module from CPAN may be easier to use. Recent versions include also support for non-portable systems as well.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadKey</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$tty</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="q">&#39;/dev/tty&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Gimme a char: &quot;</span><span class="sc">;</span></li><li>    <span class="w">ReadMode</span> <span class="q">&quot;raw&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> = <span class="w">ReadKey</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$tty</span><span class="sc">;</span></li><li>    <span class="w">ReadMode</span> <span class="q">&quot;normal&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;\\nYou said %s, char number %03d\\n&quot;</span><span class="cm">,</span></li><li>        <span class="i">$key</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/ord.html">ord</span> <span class="i">$key</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-read-a-single-character-from-a-file%3f-From-the-keyboard%3f
Perl Books	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>There are many good <span href="http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fbooks%2flibrary.html">books on Perl</span>.</p></section>	http://perldoc.perl.org/perlfaq2.html#Perl-Books
compile time (definition)	A			Perl Glossary							<section class="prog__container"><p>The time when Perl is trying to make sense of your code, as opposed to when it thinks it knows what your code means and is merely trying to do what it thinks your code says to do, which is <b>runtime</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#compile-time
Assigning non-zero to $[ is no longer possible	A			Perl Diagnostics							<section class="prog__container"><p>(F) When the &quot;array_base&quot; feature is disabled (e.g., under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="v">v5.16</span><span class="sc">;</span></code> ) the special variable <code class="inline"><span class="i">$[</span></code> , which is deprecated, is now a fixed zero value.</p></section>	http://perldoc.perl.org/perldiag.html#Assigning-non-zero-to-%24%5b-is-no-longer-possible
Encode::MIME::Header (module)	A			Perl Standard Modules		[[Encode]]\n[[http://www.faqs.org/rfcs/rfc2047.html]]					<section class="prog__container"><p>Encode::MIME::Header -- MIME &#39;B&#39; and &#39;Q&#39; header encoding</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span></li><li>    <span class="i">$utf8</span>   = <span class="i">decode</span><span class="s">(</span><span class="q">&#39;MIME-Header&#39;</span><span class="cm">,</span> <span class="i">$header</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$header</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&#39;MIME-Header&#39;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/MIME/Header.html
Truth and Falsehood	A			Perl FAQs\nPerl perlsyn - Perl syntax							<section class="prog__container"><p>The number 0, the strings <code class="inline"><span class="q">&#39;0&#39;</span></code>  and <code class="inline"><span class="q">&quot;&quot;</span></code> , the empty list <code class="inline"><span class="s">(</span><span class="s">)</span></code> , and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> are all false in a boolean context.  All other values are true. Negation of a true value by <code class="inline">!</code>  or <code class="inline">not</code>  returns a special false value. When evaluated as a string it is treated as <code class="inline"><span class="q">&quot;&quot;</span></code> , but as a number, it is treated as 0.  Most Perl operators that return true or false behave this way.</p></section>	http://perldoc.perl.org/perlsyn.html#Truth-and-Falsehood
pop (function)	A			Perl Functions\nPerl Functions for real @ARRAYs							<section class="prog__container"><pre>pop ARRAY<br>pop EXPR<br>pop</pre><p>Pops and returns the last value of the array, shortening the array by one element.</p><p>Returns the undefined value if the array is empty, although this may also happen at other times.  If ARRAY is omitted, pops the <code class="inline"><span class="i">@ARGV</span></code>  array in the main program, but the <code class="inline"><span class="i">@_</span></code>  array in subroutines, just like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code>.</p><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> can take a scalar EXPR, which must hold a reference to an unblessed array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> is considered highly experimental. The exact behaviour may change in a future version of Perl.</p><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so push/pop/etc work on scalars (experimental)</span></li></ol></pre></section>	http://perldoc.perl.org/functions/pop.html
Is there a way to hide perl's command line from programs such as "ps"?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>First of all note that if you&#39;re doing this for security reasons (to avoid people seeing passwords, for example) then you should rewrite your program so that critical information is never given as an argument. Hiding the arguments won&#39;t make your program completely secure.</p><p>To actually alter the visible command line, you can assign to the variable $0 as documented in <span href="http://perldoc.perl.org/perlvar.html">perlvar</span>. This won&#39;t work on all operating systems, though. Daemon programs like sendmail place their state there, as in:</p><pre class="verbatim"><ol><li>    <span class="i">$0</span> = <span class="q">&quot;orcus [accepting connections]&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#Is-there-a-way-to-hide-perl's-command-line-from-programs-such-as-%22ps%22%3f
How can I use curses with Perl?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>The Curses module from CPAN provides a dynamically loadable object module interface to a curses library. A small demo can be found at the directory <span href="http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz">http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz</span> ; this program repeats a command and updates the screen as needed, rendering <b>rep ps axu</b> similar to <b>top</b>.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-use-curses-with-Perl%3f
Having more than one /%c regexp modifier is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated, regexp) You used the indicated regular expression pattern modifier at least twice in a string of modifiers.  It is deprecated to do this with this particular modifier, to allow future extensions to the Perl language.</p></section>	http://perldoc.perl.org/perldiag.html#Having-more-than-one-%2f%25c-regexp-modifier-is-deprecated
Exiting eval via %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exiting) You are exiting an eval by unconventional means, such as a goto, or a loop control statement.</p></section>	http://perldoc.perl.org/perldiag.html#Exiting-eval-via-%25s
truncate not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t implement a file truncation mechanism that Configure knows about.</p></section>	http://perldoc.perl.org/perldiag.html#truncate-not-implemented
sqrt (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>sqrt EXPR<br>sqrt</pre><p>Return the positive square root of EXPR.  If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .  Works only for non-negative operands unless you&#39;ve loaded the <code class="inline"><span class="w">Math::Complex</span></code>  module.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Math::Complex</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/sqrt.html">sqrt</span><span class="s">(</span><span class="n">-4</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># prints 2i</span></li></ol></pre></section>	http://perldoc.perl.org/functions/sqrt.html
code subpattern (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>regular expression</b> subpattern whose real purpose is to execute some Perl code—for example, the <code class="inline">(?{...})</code> and <code class="inline"><span class="s">(</span><span class="q">??</span><span class="s">{</span>...<span class="s">}</span><span class="s">)</span></code>  subpatterns.</p></section>	http://perldoc.perl.org/perlglossary.html#code-subpattern
thread (definition)	A			Perl Glossary							<section class="prog__container"><p>Like a forked process, but without <b>fork</b>’s inherent memory protection. A thread is lighter weight than a full process, in that a process could have multiple threads running around in it, all fighting over the same process’s memory space unless steps are taken to protect threads from one another.</p></section>	http://perldoc.perl.org/perlglossary.html#thread
Memoize (module)	A			Perl Standard Modules							<section class="prog__container"><p>Memoize - Make functions faster by trading space for time</p> <pre class="verbatim"><ol><li>        <span class="c"># This is the documentation for Memoize 1.03</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Memoize</span><span class="sc">;</span></li><li>&#09;<span class="i">memoize</span><span class="s">(</span><span class="q">&#39;slow_function&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="i">slow_function</span><span class="s">(</span><span class="w">arguments</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># Is faster than it was before</span></li></ol></pre><p>This is normally all you need to know.  However, many options are available:</p><pre class="verbatim"><ol><li>&#09;<span class="i">memoize</span><span class="s">(</span><span class="w">function</span><span class="cm">,</span> <span class="w">options</span>...<span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Options include:</p><pre class="verbatim"><ol><li>&#09;<span class="w">NORMALIZER</span> <span class="cm">=&gt;</span> <span class="w">function</span></li><li>&#09;<span class="w">INSTALL</span> <span class="cm">=&gt;</span> <span class="w">new_name</span></li><li></li><li>&#09;<span class="w">SCALAR_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;MEMORY&#39;</span></li><li>        <span class="w">SCALAR_CACHE</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">&#39;HASH&#39;</span><span class="cm">,</span> \\<span class="i">%cache_hash</span> <span class="s">]</span></li><li>&#09;<span class="w">SCALAR_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;FAULT&#39;</span></li><li>&#09;<span class="w">SCALAR_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;MERGE&#39;</span></li><li></li><li>&#09;<span class="w">LIST_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;MEMORY&#39;</span></li><li>        <span class="w">LIST_CACHE</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">&#39;HASH&#39;</span><span class="cm">,</span> \\<span class="i">%cache_hash</span> <span class="s">]</span></li><li>&#09;<span class="w">LIST_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;FAULT&#39;</span></li><li>&#09;<span class="w">LIST_CACHE</span> <span class="cm">=&gt;</span> <span class="q">&#39;MERGE&#39;</span></li></ol></pre></section>	http://perldoc.perl.org/Memoize.html
Can't reset %ENV on this system	A			Perl Diagnostics							<section class="prog__container"><p>(F) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/reset.html">reset(&#39;E&#39;)</span></code> or similar, which tried to reset all variables in the current package beginning with &quot;E&quot;.  In the main package, that includes %ENV.  Resetting %ENV is not supported on some systems, notably VMS.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-reset-%25ENV-on-this-system
given is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::smartmatch) <code class="inline">given</code>  depends on smartmatch, which is experimental, so its behavior may change or even be removed in any future release of perl.  See the explanation under <span href="http://perldoc.perl.org/perlsyn.html#Experimental-Details-on-given-and-when">Experimental Details on given and when in perlsyn</span>.</p></section>	http://perldoc.perl.org/perldiag.html#given-is-experimental
I18N::Langinfo (module)	A			Perl Standard Modules		[[perllocale]]\n[[localeconv in POSIX]]\n[[setlocale in POSIX]]					<section class="prog__container"><p>I18N::Langinfo - query locale information</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">I18N::Langinfo</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/I18N/Langinfo.html
No command into which to pipe on command line	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl handles its own command line redirection, and found a &#39;|&#39; at the end of the command line, so it doesn&#39;t know where you want to pipe the output from this command.</p></section>	http://perldoc.perl.org/perldiag.html#No-command-into-which-to-pipe-on-command-line
Can I use perl to run a telnet or ftp session?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Try the <span href="http://perldoc.perl.org/Net/FTP.html">Net::FTP</span>, <span href="http://search.cpan.org/perldoc/TCP::Client">TCP::Client</span>, and <span href="http://search.cpan.org/perldoc/Net::Telnet">Net::Telnet</span> modules (available from CPAN). <span href="http://www.cpan.org/scripts/netstuff/telnet.emul.shar">http://www.cpan.org/scripts/netstuff/telnet.emul.shar</span> will also help for emulating the telnet protocol, but <span href="http://search.cpan.org/perldoc/Net::Telnet">Net::Telnet</span> is quite probably easier to use.</p><p>If all you want to do is pretend to be telnet but don&#39;t need the initial telnet handshaking, then the standard dual-process approach will suffice:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Socket</span><span class="sc">;</span>             <span class="c"># new in 5.004</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$handle</span> = <span class="w">IO::Socket::INET</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;www.perl.com:80&#39;</span><span class="s">)</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t connect to port 80 on www.perl.com $!&quot;</span><span class="sc">;</span></li><li>    <span class="i">$handle</span><span class="i">-&gt;autoflush</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span>               <span class="c"># XXX: undef means failure</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/select.html">select</span><span class="s">(</span><span class="i">$handle</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="q">&lt;STDIN&gt;</span><span class="sc">;</span>    <span class="c"># everything from stdin to socket</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/else.html">else</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="q">&lt;$handle&gt;</span><span class="sc">;</span>  <span class="c"># everything from socket to stdout</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$handle</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#Can-I-use-perl-to-run-a-telnet-or-ftp-session%3f
What are and?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>These are alternate syntaxes for <code class="inline"><span class="i">decode</span><span class="s">(</span><span class="q">&#39;utf8&#39;</span><span class="cm">,</span> ...<span class="s">)</span></code>  and <code class="inline"><span class="i">encode</span><span class="s">(</span><span class="q">&#39;utf8&#39;</span><span class="cm">,</span> ...<span class="s">)</span></code> .</p></section>	http://perldoc.perl.org/perlunifaq.html#What-are-decode_utf8-and-encode_utf8%3f
delimiter (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>character</b> or <b>string</b> that sets bounds to an arbitrarily sized textual object, not to be confused with a <b>separator</b> or <b>terminator</b>. “To delimit” really just means “to surround” or “to enclose” (like these parentheses are doing).</p></section>	http://perldoc.perl.org/perlglossary.html#delimiter
Out of memory during %s extend	A			Perl Diagnostics							<section class="prog__container"><p>(X) An attempt was made to extend an array, a list, or a string beyond the largest possible memory allocation.</p></section>	http://perldoc.perl.org/perldiag.html#Out-of-memory-during-%25s-extend
Attempt to free unreferenced scalar: SV 0x%x	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) Perl went to decrement the reference count of a scalar to see if it would go to 0, and discovered that it had already gone to 0 earlier, and should have been freed, and in fact, probably was freed. This could indicate that SvREFCNT_dec() was called too many times, or that SvREFCNT_inc() was called too few times, or that the SV was mortalized when it shouldn&#39;t have been, or that memory has been corrupted.</p></section>	http://perldoc.perl.org/perldiag.html#Attempt-to-free-unreferenced-scalar%3a-SV-0x%25x
Experimental aliasing via reference not enabled	A			Perl Diagnostics							<section class="prog__container"><p>(F) To do aliasing via references, you must first enable the feature:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::refaliasing&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">feature</span> <span class="q">&quot;refaliasing&quot;</span><span class="sc">;</span></li><li>    \\<span class="i">$x</span> = \\<span class="i">$y</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Experimental-aliasing-via-reference-not-enabled
ExtUtils::MakeMaker (module)	A			Perl Standard Modules		[[Module::Build]]\n[[Module::Install]]\n[[ExtUtils::ModuleMaker]]\n[[Module::Starter]]\n[[CPAN::Meta]]\n[[CPAN::Meta::Spec]]\n[[File::ShareDir::Install]]\n[[File::ShareDir]]\n[[Dist::Zilla]]					<section class="prog__container"><p>ExtUtils::MakeMaker - Create a module Makefile</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MakeMaker</span><span class="sc">;</span></li><li></li><li>  <span class="i">WriteMakefile</span><span class="s">(</span></li><li>      <span class="w">NAME</span>              <span class="cm">=&gt;</span> <span class="q">&quot;Foo::Bar&quot;</span><span class="cm">,</span></li><li>      <span class="w">VERSION_FROM</span>      <span class="cm">=&gt;</span> <span class="q">&quot;lib/Foo/Bar.pm&quot;</span><span class="cm">,</span></li><li>  <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MakeMaker.html
More than one argument to '%s' open	A			Perl Diagnostics							<section class="prog__container"><p>(F) The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code> function has been asked to open multiple files.  This can happen if you are trying to open a pipe to a command that takes a list of arguments, but have forgotten to specify a piped open mode. See <span href="http://perldoc.perl.org/functions/open.html">open</span> for details.</p></section>	http://perldoc.perl.org/perldiag.html#More-than-one-argument-to-'%25s'-open
dump is not supported	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your machine doesn&#39;t support dump/undump.</p></section>	http://perldoc.perl.org/perldiag.html#dump-is-not-supported
file (definition)	A			Perl Glossary							<section class="prog__container"><p>A named collection of data, usually stored on disk in a <b>directory</b> in a <b>filesystem</b>. Roughly like a document, if you’re into office metaphors. In modern filesystems, you can actually give a file more than one name. Some files have special properties, like directories and devices.</p></section>	http://perldoc.perl.org/perlglossary.html#file
File::Spec::Functions (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Spec::Functions - portably perform operations on file names</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Spec::Functions</span><span class="sc">;</span></li><li>&#09;<span class="i">$x</span> = <span class="i">catfile</span><span class="s">(</span><span class="q">&#39;a&#39;</span><span class="cm">,</span><span class="q">&#39;b&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/Functions.html
Where can I learn about object-oriented Perl programming?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>A good place to start is <span href="http://perldoc.perl.org/perlootut.html">perlootut</span>, and you can use <span href="http://perldoc.perl.org/perlobj.html">perlobj</span> for reference.</p><p>A good book on OO on Perl is the &quot;Object-Oriented Perl&quot; by Damian Conway from Manning Publications, or &quot;Intermediate Perl&quot; by Randal Schwartz, brian d foy, and Tom Phoenix from O&#39;Reilly Media.</p></section>	http://perldoc.perl.org/perlfaq3.html#Where-can-I-learn-about-object-oriented-Perl-programming%3f
Can't get SYSGEN parameter value for MAXBUF	A			Perl Diagnostics							<section class="prog__container"><p>(P) An error peculiar to VMS.  Perl asked $GETSYI how big you want your mailbox buffers to be, and didn&#39;t get an answer.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-get-SYSGEN-parameter-value-for-MAXBUF
Binary "~~" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;~~&quot; does a smartmatch between its arguments. Smart matching is described in the next section.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
token (definition)	A			Perl Glossary							<section class="prog__container"><p>A morpheme in a programming language, the smallest unit of text with semantic significance.</p></section>	http://perldoc.perl.org/perlglossary.html#token
'x' outside of string in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had a pack template that specified a relative position after the end of the string being unpacked.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'x'-outside-of-string-in-unpack
The regex_sets feature is experimental	A			Perl Diagnostics							<section class="prog__container"><p>(S experimental::regex_sets) This warning is emitted if you use the syntax <code class="inline"><span class="s">(</span><span class="q">?[   ])</span></code>  in a regular expression. The details of this feature are subject to change. if you want to use it, but know that in doing so you are taking the risk of using an experimental feature which may change in a future Perl version, you can do this to silence the warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&quot;experimental::regex_sets&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#The-regex_sets-feature-is-experimental
panic: do_trans_%s	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal do_trans routines were called with invalid operational data.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-do_trans_%25s
How do I delete a directory tree?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>(contributed by brian d foy)</p><p>If you have an empty directory, you can use Perl&#39;s built-in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/rmdir.html">rmdir</span></code>. If the directory is not empty (so, no files or subdirectories), you either have to empty it yourself (a lot of work) or use a module to help you.</p><p>The <span href="http://perldoc.perl.org/File/Path.html">File::Path</span> module, which comes with Perl, has a <code class="inline"><span class="w">remove_tree</span></code>  which can take care of all of the hard work for you:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Path</span> <span class="q">qw(remove_tree)</span><span class="sc">;</span></li><li></li><li>    <span class="i">remove_tree</span><span class="s">(</span> <span class="i">@directories</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://perldoc.perl.org/File/Path.html">File::Path</span> module also has a legacy interface to the older <code class="inline"><span class="w">rmtree</span></code>  subroutine.</p></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-delete-a-directory-tree%3f
How do I decode or create those %-encodings on the web?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Most of the time you should not need to do this as your web framework, or if you are making a request, the <span href="http://search.cpan.org/perldoc/LWP">LWP</span> or other module would handle it for you.</p><p>To encode a string yourself, use the <span href="http://search.cpan.org/perldoc/URI::Escape">URI::Escape</span> module. The <code class="inline"><span class="w">uri_escape</span></code>  function returns the escaped string:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$original</span> = <span class="q">&quot;Colon : Hash # Percent %&quot;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$escaped</span> = <span class="i">uri_escape</span><span class="s">(</span> <span class="i">$original</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$escaped\\n&quot;</span><span class="sc">;</span> <span class="c"># &#39;Colon%20%3A%20Hash%20%23%20Percent%20%25&#39;</span></li></ol></pre><p>To decode the string, use the <code class="inline"><span class="w">uri_unescape</span></code>  function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$unescaped</span> = <span class="i">uri_unescape</span><span class="s">(</span> <span class="i">$escaped</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$unescaped</span><span class="sc">;</span> <span class="c"># back to original</span></li></ol></pre><p>Remember not to encode a full URI, you need to escape each component separately and then join them together.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-decode-or-create-those-%25-encodings-on-the-web%3f
Pod::Simple::PullParserTextToken (module)	A			Perl Standard Modules		[[Pod::Simple::PullParserToken]]\n[[Pod::Simple]]\n[[Pod::Simple::Subclassing]]					<section class="prog__container"><p>Pod::Simple::PullParserTextToken -- text-tokens from Pod::Simple::PullParser</p> <p>(See <span href="http://perldoc.perl.org/Pod/Simple/PullParser.html">Pod::Simple::PullParser</span>)</p></section>	http://perldoc.perl.org/Pod/Simple/PullParserTextToken.html
CV (definition)	A			Perl Glossary							<section class="prog__container"><p>In academia, a curriculum vitæ, a fancy kind of résumé. In Perl, an internal “code value” typedef holding a <b>subroutine</b>. The <code class="inline"><span class="w">CV</span></code>  type is a subclass of <b>SV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#CV
How do I set the time and date?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Assuming you&#39;re running under sufficient permissions, you should be able to set the system-wide date and time by running the <code class="inline"><span class="i">date</span><span class="s">(</span><span class="n">1</span><span class="s">)</span></code>  program. (There is no way to set the time and date on a per-process basis.)  This mechanism will work for Unix, MS-DOS, Windows, and NT; the VMS equivalent is <code class="inline"><span class="w">set</span> <span class="l_k" href="http://perldoc.perl.org/functions/time.html">time</span></code> .</p><p>However, if all you want to do is change your time zone, you can probably get away with setting an environment variable:</p><pre class="verbatim"><ol><li>    <span class="i">$ENV</span>{<span class="w">TZ</span>} = <span class="q">&quot;MST7MDT&quot;</span><span class="sc">;</span>           <span class="c"># Unixish</span></li><li>    <span class="i">$ENV</span>{<span class="q">&#39;SYS$TIMEZONE_DIFFERENTIAL&#39;</span>}=<span class="q">&quot;-5&quot;</span> <span class="c"># vms</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span><span class="s">(</span><span class="q">&#39;trn&#39;</span><span class="cm">,</span> <span class="q">&#39;comp.lang.perl.misc&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-set-the-time-and-date%3f
entering effective %s failed	A			Perl Diagnostics							<section class="prog__container"><p>(F) While under the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">filetest</span></code>  pragma, switching the real and effective uids or gids failed.</p></section>	http://perldoc.perl.org/perldiag.html#entering-effective-%25s-failed
Bareword found in conditional	A			Perl Diagnostics							<section class="prog__container"><p>(W bareword) The compiler found a bareword where it expected a conditional, which often indicates that an || or &amp;&amp; was parsed as part of the last argument of the previous construct, for example:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="w">FOO</span> || <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="sc">;</span></li></ol></pre><p>It may also indicate a misspelled constant that has been interpreted as a bareword:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">constant</span> <span class="i">TYPO</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="w">TYOP</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;foo&quot;</span> <span class="s">}</span></li></ol></pre><p>The <code class="inline"><span class="w">strict</span></code>  pragma is useful in avoiding such errors.</p></section>	http://perldoc.perl.org/perldiag.html#Bareword-found-in-conditional
Use of %s on a handle without * is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You used <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tied.html">tied</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span></code> on a scalar but that scalar happens to hold a typeglob, which means its filehandle will be tied.  If you mean to tie a handle, use an explicit * as in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">*$handle</span></code> .</p><p>This was a long-standing bug that was removed in Perl 5.16, as there was no way to tie the scalar itself when it held a typeglob, and no way to untie a scalar that had had a typeglob assigned to it.  If you see this message, you must be using an older version.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%25s-on-a-handle-without-*-is-deprecated
Magical list constants are not supported	A			Perl Diagnostics							<section class="prog__container"><p>(F) You assigned a magical array to a stash element, and then tried to use the subroutine from the same slot.  You are asking Perl to do something it cannot do, details subject to change between Perl versions.</p></section>	http://perldoc.perl.org/perldiag.html#Magical-list-constants-are-not-supported
Can't use '%c' in a group with different byte-order in %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You attempted to force a different byte-order on a type that is already inside a group with a byte-order modifier. For example you cannot force little-endianness on a type that is inside a big-endian group.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-'%25c'-in-a-group-with-different-byte-order-in-%25s
How can I compile my Perl program into byte code or C?	A			Perl FAQs\nPerl Programming Tools							<section class="prog__container"><p>(contributed by brian d foy)</p><p>In general, you can&#39;t do this. There are some things that may work for your situation though. People usually ask this question because they want to distribute their works without giving away the source code, and most solutions trade disk space for convenience. You probably won&#39;t see much of a speed increase either, since most solutions simply bundle a Perl interpreter in the final product (but see <span href="http://perldoc.perl.org/perlfaq3.html#How-can-I-make-my-Perl-program-run-faster%3f">How can I make my Perl program run faster?</span>).</p><p>The Perl Archive Toolkit ( <span href="http://par.perl.org/">http://par.perl.org/</span> ) is Perl&#39;s analog to Java&#39;s JAR. It&#39;s freely available and on CPAN ( <span href="http://search.cpan.org/dist/PAR/">http://search.cpan.org/dist/PAR/</span> ).</p><p>There are also some commercial products that may work for you, although you have to buy a license for them.</p><p>The Perl Dev Kit ( <span href="http://www.activestate.com/Products/Perl_Dev_Kit/">http://www.activestate.com/Products/Perl_Dev_Kit/</span> ) from ActiveState can &quot;Turn your Perl programs into ready-to-run executables for HP-UX, Linux, Solaris and Windows.&quot;</p><p>Perl2Exe ( <span href="http://www.indigostar.com/perl2exe.htm">http://www.indigostar.com/perl2exe.htm</span> ) is a command line program for converting perl scripts to executable files. It targets both Windows and Unix platforms.</p></section>	http://perldoc.perl.org/perlfaq3.html#How-can-I-compile-my-Perl-program-into-byte-code-or-C%3f
ExtUtils::Installed (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Installed - Inventory management of installed modules</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::Installed</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$inst</span><span class="s">)</span> = <span class="w">ExtUtils::Installed</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="w">skip_cwd</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">@modules</span><span class="s">)</span> = <span class="i">$inst</span><span class="i">-&gt;modules</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">@missing</span><span class="s">)</span> = <span class="i">$inst</span><span class="i">-&gt;validate</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$all_files</span> = <span class="i">$inst</span><span class="i">-&gt;files</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$files_below_usr_local</span> = <span class="i">$inst</span><span class="i">-&gt;files</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="cm">,</span> <span class="q">&quot;all&quot;</span><span class="cm">,</span> <span class="q">&quot;/usr/local&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$all_dirs</span> = <span class="i">$inst</span><span class="i">-&gt;directories</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$dirs_below_usr_local</span> = <span class="i">$inst</span><span class="i">-&gt;directory_tree</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="cm">,</span> <span class="q">&quot;prog&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$packlist</span> = <span class="i">$inst</span><span class="i">-&gt;packlist</span><span class="s">(</span><span class="q">&quot;DBI&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Installed.html
Useless use of %s with no values	A			Perl Diagnostics							<section class="prog__container"><p>(W syntax) You used the push() or unshift() function with no arguments apart from the array, like <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push(@x)</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift(@foo)</span></code>.  That won&#39;t usually have any effect on the array, so is completely useless.  It&#39;s possible in principle that push(@tied_array) could have some effect if the array is tied to a class which implements a PUSH method.  If so, you can write it as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push(@tied_array,())</span></code> to avoid this warning.</p></section>	http://perldoc.perl.org/perldiag.html#Useless-use-of-%25s-with-no-values
Sequence (?(%c... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A named reference of the form <code class="inline"><span class="s">(</span><span class="q">?(&#39;...&#39;)...)</span></code>  or <code class="inline"><span class="s">(</span><span class="q">?(&lt;...&gt;)...)</span></code>  was missing the final closing quote or angle bracket after the name.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f(%25c...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
File::Spec::OS2 (module)	A			Perl Standard Modules							<section class="prog__container"><p>File::Spec::OS2 - methods for OS/2 file specs</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">File::Spec::OS2</span><span class="sc">;</span> <span class="c"># Done internally by File::Spec if needed</span></li></ol></pre></section>	http://perldoc.perl.org/File/Spec/OS2.html
keys (function)	A			Perl Functions\nPerl Functions for real %HASHes							<section class="prog__container"><pre>keys HASH<br>keys ARRAY<br>keys EXPR</pre><p>Called in list context, returns a list consisting of all the keys of the named hash, or in Perl 5.12 or later only, the indices of an array.  Perl releases prior to 5.12 will produce a syntax error if you try to use an array argument.  In scalar context, returns the number of keys or indices.</p><p>Hash entries are returned in an apparently random order.  The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash.  Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> may be deleted without changing the order.  So long as a given hash is unmodified you may rely on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> to repeatedly return the same order as each other.  See <span href="http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks">Algorithmic Complexity Attacks in perlsec</span> for details on why hash order is randomized.  Aside from the guarantees provided here the exact details of Perl&#39;s hash algorithm and the hash traversal order are subject to change in any release of Perl.  Tied hashes may behave differently to Perl&#39;s hashes with respect to changes in order on insertion and deletion of items.</p><p>As a side effect, calling keys() resets the internal iterator of the HASH or ARRAY (see <span href="http://perldoc.perl.org/functions/each.html">each</span>).  In particular, calling keys() in void context resets the iterator with no other overhead.</p><p>Here is yet another way to print your environment:</p><pre class="verbatim"><ol><li>    <span class="i">@keys</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%ENV</span><span class="sc">;</span></li><li>    <span class="i">@values</span> = <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="i">%ENV</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="i">@keys</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span><span class="s">(</span><span class="i">@keys</span><span class="s">)</span><span class="cm">,</span> <span class="q">&#39;=&#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span><span class="s">(</span><span class="i">@values</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>or how about sorted by key:</p><pre class="verbatim"><ol><li>    foreach <span class="i">$key</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%ENV</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$key</span><span class="cm">,</span> <span class="q">&#39;=&#39;</span><span class="cm">,</span> <span class="i">$ENV</span>{<span class="i">$key</span>}<span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>The returned values are copies of the original keys in the hash, so modifying them will not affect the original hash.  Compare <span href="http://perldoc.perl.org/functions/values.html">values</span>.</p><p>To sort a hash by value, you&#39;ll need to use a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code> function. Here&#39;s a descending numeric sort of a hash by its values:</p><pre class="verbatim"><ol><li>    foreach <span class="i">$key</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span> <span class="s">{</span> <span class="i">$hash</span>{<span class="i">$b</span>} &lt;=&gt; <span class="i">$hash</span>{<span class="i">$a</span>} <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;%4d %s\\n&quot;</span><span class="cm">,</span> <span class="i">$hash</span>{<span class="i">$key</span>}<span class="cm">,</span> <span class="i">$key</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Used as an lvalue, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> allows you to increase the number of hash buckets allocated for the given hash.  This can gain you a measure of efficiency if you know the hash is going to get big.  (This is similar to pre-extending an array by assigning a larger number to $#array.)  If you say</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span> = <span class="n">200</span><span class="sc">;</span></li></ol></pre><p>then <code class="inline"><span class="i">%hash</span></code>  will have at least 200 buckets allocated for it--256 of them, in fact, since it rounds up to the next power of two.  These buckets will be retained even if you do <code class="inline"><span class="i">%hash</span> = <span class="s">(</span><span class="s">)</span></code> , use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%hash</span></code>  if you want to free the storage while <code class="inline"><span class="i">%hash</span></code>  is still in scope. You can&#39;t shrink the number of buckets allocated for the hash using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> in this way (but you needn&#39;t worry about doing this by accident, as trying has no effect).  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">@array</span></code>  in an lvalue context is a syntax error.</p><p>Starting with Perl 5.14, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> can take a scalar EXPR, which must contain a reference to an unblessed hash or array.  The argument will be dereferenced automatically.  This aspect of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> is considered highly experimental.  The exact behaviour may change in a future version of Perl.</p><pre class="verbatim"><ol><li>    for <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">$hashref</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li><li>    for <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">$obj</span><span class="i">-&gt;get_arrayref</span><span class="s">)</span> <span class="s">{</span> ... <span class="s">}</span></li></ol></pre><p>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work <i>only</i> on Perls of a recent vintage:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.012</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on arrays</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="n">5.014</span><span class="sc">;</span>&#09;<span class="c"># so keys/values/each work on scalars (experimental)</span></li></ol></pre><p>See also <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sort.html">sort</span></code>.</p></section>	http://perldoc.perl.org/functions/keys.html
'.' outside of string in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) The argument to a &#39;.&#39; in your template tried to move the working position to before the start of the packed string being built.</p></section>	http://perldoc.perl.org/perldiag.html#'.'-outside-of-string-in-pack
instance method (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>method</b> of an <b>object</b>, as opposed to a <b>class method</b>.</p><p>A <b>method</b> whose <b>invocant</b> is an <b>object</b>, not a <b>package</b> name. Every object of a class shares all the methods of that class, so an instance method applies to all instances of the class, rather than applying to a particular instance. Also see <b>class method</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#instance-method
msgsnd (function)	A			Perl Functions\nPerl System V interprocess communication functions							<section class="prog__container"><pre>msgsnd ID,MSG,FLAGS</pre><p>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID.  MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself.  This kind of packing can be achieved with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;l! a*&quot;</span><span class="cm">,</span> <span class="i">$type</span><span class="cm">,</span> <span class="i">$message</span><span class="s">)</span></code> .  Returns true if successful, false on error.  See also the <code class="inline"><span class="w">IPC::SysV</span></code>  and <code class="inline"><span class="w">IPC::SysV::Msg</span></code>  documentation.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#msgsnd">msgsnd in perlport</span>.</p></section>	http://perldoc.perl.org/functions/msgsnd.html
warning (definition)	A			Perl Glossary							<section class="prog__container"><p>A message printed to the <code class="inline"><span class="w">STDERR</span></code>  stream to the effect that something might be wrong but isn’t worth blowing up over. See <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span></code> in Camel chapter 27, “Functions” and the <code class="inline"><span class="w">warnings</span></code>  pragma in Camel chapter 28, “Pragmantic Modules”.</p></section>	http://perldoc.perl.org/perlglossary.html#warning
Cannot chr %f	A			Perl Diagnostics							<section class="prog__container"><p>(F) You passed an invalid number (like an infinity or not-a-number) to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chr.html">chr</span></code>.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-chr-%25f
memory (definition)	A			Perl Glossary							<section class="prog__container"><p>This always means your main memory, not your disk. Clouding the issue is the fact that your machine may implement <b>virtual</b> memory; that is, it will pretend that it has more memory than it really does, and it’ll use disk space to hold inactive bits. This can make it seem like you have a little more memory than you really do, but it’s not a substitute for real memory. The best thing that can be said about virtual memory is that it lets your performance degrade gradually rather than suddenly when you run out of real memory. But your program can die when you run out of virtual memory, too—if you haven’t thrashed your disk to death first.</p></section>	http://perldoc.perl.org/perlglossary.html#memory
Setting $/ to a reference to %s as a form of slurp is deprecated, treating as undef	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) You assigned a reference to a scalar to <code class="inline"><span class="i">$/</span></code>  where the referenced item is not a positive integer.  In older perls this <b>appeared</b> to work the same as setting it to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> but was in fact internally different, less efficient and with very bad luck could have resulted in your file being split by a stringified form of the reference.</p><p>In Perl 5.20.0 this was changed so that it would be <b>exactly</b> the same as setting <code class="inline"><span class="i">$/</span></code>  to undef, with the exception that this warning would be thrown.</p><p>You are recommended to change your code to set <code class="inline"><span class="i">$/</span></code>  to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> explicitly if you wish to slurp the file. In future versions of Perl assigning a reference to will throw a fatal error.</p></section>	http://perldoc.perl.org/perldiag.html#Setting-%24%2f-to-a-reference-to-%25s-as-a-form-of-slurp-is-deprecated%2c-treating-as-undef
Use of "goto" to jump into a construct is deprecated	A			Perl Diagnostics							<section class="prog__container"><p>(D deprecated) Using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> to jump from an outer scope into an inner scope is deprecated and should be avoided.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%22goto%22-to-jump-into-a-construct-is-deprecated
lookahead (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>assertion</b> that peeks at the string to the right of the current match location.</p></section>	http://perldoc.perl.org/perlglossary.html#lookahead
How can I match strings with multibyte characters?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>Starting from Perl 5.6 Perl has had some level of multibyte character support. Perl 5.8 or later is recommended. Supported multibyte character repertoires include Unicode, and legacy encodings through the Encode module. See <span href="http://perldoc.perl.org/perluniintro.html">perluniintro</span>, <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span>, and <span href="http://perldoc.perl.org/Encode.html">Encode</span>.</p><p>If you are stuck with older Perls, you can do Unicode with the <span href="http://search.cpan.org/perldoc/Unicode::String">Unicode::String</span> module, and character conversions using the <span href="http://search.cpan.org/perldoc/Unicode::Map8">Unicode::Map8</span> and <span href="http://search.cpan.org/perldoc/Unicode::Map">Unicode::Map</span> modules. If you are using Japanese encodings, you might try using the jperl 5.005_03.</p><p>Finally, the following set of approaches was offered by Jeffrey Friedl, whose article in issue #5 of The Perl Journal talks about this very matter.</p><p>Let&#39;s suppose you have some weird Martian encoding where pairs of ASCII uppercase letters encode single Martian letters (i.e. the two bytes &quot;CV&quot; make a single Martian letter, as do the two bytes &quot;SG&quot;, &quot;VS&quot;, &quot;XX&quot;, etc.). Other bytes represent single characters, just like ASCII.</p><p>So, the string of Martian &quot;I am CVSGXX!&quot; uses 12 bytes to encode the nine characters &#39;I&#39;, &#39; &#39;, &#39;a&#39;, &#39;m&#39;, &#39; &#39;, &#39;CV&#39;, &#39;SG&#39;, &#39;XX&#39;, &#39;!&#39;.</p><p>Now, say you want to search for the single character <code class="inline"><span class="q">/GX/</span></code> . Perl doesn&#39;t know about Martian, so it&#39;ll find the two bytes &quot;GX&quot; in the &quot;I am CVSGXX!&quot; string, even though that character isn&#39;t there: it just looks like it is because &quot;SG&quot; is next to &quot;XX&quot;, but there&#39;s no real &quot;GX&quot;. This is a big problem.</p><p>Here are a few ways, all painful, to deal with it:</p><pre class="verbatim"><ol><li>    <span class="c"># Make sure adjacent &quot;martian&quot; bytes are no longer adjacent.</span></li><li>    <span class="i">$martian</span> =~ <span class="q">s/([A-Z][A-Z])/ $1 /g</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;found GX!\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$martian</span> =~ <span class="q">/GX/</span><span class="sc">;</span></li></ol></pre><p>Or like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@chars</span> = <span class="i">$martian</span> =~ <span class="q">m/([A-Z][A-Z]|[^A-Z])/g</span><span class="sc">;</span></li><li>    <span class="c"># above is conceptually similar to:     my @chars = $text =~ m/(.)/g;</span></li><li>    <span class="c">#</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$char</span> <span class="s">(</span><span class="i">@chars</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;found GX!\\n&quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$char</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;GX&#39;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>Or like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="i">$martian</span> =~ <span class="q">m/\\G([A-Z][A-Z]|.)/gs</span><span class="s">)</span> <span class="s">{</span>  <span class="c"># \\G probably unneeded</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="s">(</span><span class="i">$1</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&#39;GX&#39;</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;found GX!\\n&quot;</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Here&#39;s another, slightly less painful, way to do it from Benjamin Goldberg, who uses a zero-width negative look-behind assertion.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;found GX!\\n&quot;</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span>    <span class="i">$martian</span> =~ <span class="q">m/</span></li><li>        <span class="q">        (?&lt;![A-Z])</span></li><li>        <span class="q">        (?:[A-Z][A-Z])*?</span></li><li>        <span class="q">        GX</span></li><li>        <span class="q">        /x</span><span class="sc">;</span></li></ol></pre><p>This succeeds if the &quot;martian&quot; character GX is in the string, and fails otherwise. If you don&#39;t like using (?&lt;!), a zero-width negative look-behind assertion, you can replace (?&lt;![A-Z]) with (?:^|[^A-Z]).</p><p>It does have the drawback of putting the wrong thing in $-[0] and $+[0], but this usually can be worked around.</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-match-strings-with-multibyte-characters%3f
typemap (definition)	A			Perl Glossary							<section class="prog__container"><p>A description of how C types may be transformed to and from Perl types within an <b>extension</b> module written in <b>XS</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#typemap
Exporter::Heavy (module)	A			Perl Standard Modules							<section class="prog__container"><p>Exporter::Heavy - Exporter guts</p> <p>(internal use only)</p></section>	http://perldoc.perl.org/Exporter/Heavy.html
Text::Wrap (module)	A			Perl Standard Modules		[[Text::WrapI18N]]\n[[Text::Format]]					<section class="prog__container"><p>Text::Wrap - line wrapping to form simple paragraphs</p> <p><b>Example 1</b></p><pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Wrap</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$initial_tab</span> = <span class="q">&quot;\\t&quot;</span><span class="sc">;</span>&#09;<span class="c"># Tab before first line</span></li><li>&#09;<span class="i">$subsequent_tab</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span>&#09;<span class="c"># All other lines flush left</span></li><li></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">wrap</span><span class="s">(</span><span class="i">$initial_tab</span><span class="cm">,</span> <span class="i">$subsequent_tab</span><span class="cm">,</span> <span class="i">@text</span><span class="s">)</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">fill</span><span class="s">(</span><span class="i">$initial_tab</span><span class="cm">,</span> <span class="i">$subsequent_tab</span><span class="cm">,</span> <span class="i">@text</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$lines</span> = <span class="i">wrap</span><span class="s">(</span><span class="i">$initial_tab</span><span class="cm">,</span> <span class="i">$subsequent_tab</span><span class="cm">,</span> <span class="i">@text</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">@paragraphs</span> = <span class="i">fill</span><span class="s">(</span><span class="i">$initial_tab</span><span class="cm">,</span> <span class="i">$subsequent_tab</span><span class="cm">,</span> <span class="i">@text</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p><b>Example 2</b></p><pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Wrap</span> <span class="q">qw(wrap $columns $huge)</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$columns</span> = <span class="n">132</span><span class="sc">;</span>&#09;&#09;<span class="c"># Wrap at 132 characters</span></li><li>&#09;<span class="i">$huge</span> = <span class="q">&#39;die&#39;</span><span class="sc">;</span></li><li>&#09;<span class="i">$huge</span> = <span class="q">&#39;wrap&#39;</span><span class="sc">;</span></li><li>&#09;<span class="i">$huge</span> = <span class="q">&#39;overflow&#39;</span><span class="sc">;</span></li></ol></pre><p><b>Example 3</b></p><pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Text::Wrap</span><span class="sc">;</span></li><li></li><li>&#09;<span class="i">$Text::Wrap::columns</span> = <span class="n">72</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">wrap</span><span class="s">(</span><span class="q">&#39;&#39;</span><span class="cm">,</span> <span class="q">&#39;&#39;</span><span class="cm">,</span> <span class="i">@text</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Text/Wrap.html
How do I print to more than one file at once?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>To connect one filehandle to several output filehandles, you can use the <span href="http://search.cpan.org/perldoc/IO::Tee">IO::Tee</span> or <span href="http://search.cpan.org/perldoc/Tie::FileHandle::Multiplex">Tie::FileHandle::Multiplex</span> modules.</p><p>If you only have to do this once, you can print individually to each filehandle.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span> <span class="s">(</span><span class="i">$fh1</span><span class="cm">,</span> <span class="i">$fh2</span><span class="cm">,</span> <span class="i">$fh3</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;whatever\\n&quot;</span> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq5.html#How-do-I-print-to-more-than-one-file-at-once%3f
%ENV is aliased to %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You&#39;re running under taint mode, and the <code class="inline"><span class="i">%ENV</span></code>  variable has been aliased to another hash, so it doesn&#39;t reflect anymore the state of the program&#39;s environment.  This is potentially insecure.</p></section>	http://perldoc.perl.org/perldiag.html#%25ENV-is-aliased-to-%25s
No dbm on this machine	A			Perl Diagnostics							<section class="prog__container"><p>(P) This is counted as an internal error, because every machine should supply dbm nowadays, because Perl comes with SDBM.  See <span href="http://perldoc.perl.org/SDBM_File.html">SDBM_File</span>.</p></section>	http://perldoc.perl.org/perldiag.html#No-dbm-on-this-machine
ExtUtils::Constant::Base (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::Constant::Base - base class for ExtUtils::Constant objects</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">ExtUtils::Constant::Base</span><span class="sc">;</span></li><li>    <span class="i">@ISA</span> = <span class="q">&#39;ExtUtils::Constant::Base&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/Constant/Base.html
actual arguments (definition)	A			Perl Glossary		[[argument]]\n[[formal arguments]]					<section class="prog__container"><p>The <b>scalar values</b> that you supply to a <b>function</b> or <b>subroutine</b> when you call it. For instance, when you call <code class="inline"><span class="i">power</span><span class="s">(</span><span class="q">&quot;puff&quot;</span><span class="s">)</span></code> , the string <code class="inline"><span class="q">&quot;puff&quot;</span></code>  is the actual argument. </p></section>	http://perldoc.perl.org/perlglossary.html#actual-arguments
Binary "==" operator	A			Perl Operators\nPerl Equality Operators							<section class="prog__container">Binary &quot;==&quot; returns true if the left argument is numerically equal to the right argument.</section>	http://perldoc.perl.org/perlop.html#Equality-Operators
alarm (function)	A			Perl Functions\nPerl Functions for processes and process groups							<section class="prog__container"><pre>alarm SECONDS<br>alarm</pre><p>Arranges to have a SIGALRM delivered to this process after the specified number of wallclock seconds has elapsed.  If SECONDS is not specified, the value stored in <code class="inline"><span class="i">$_</span></code>  is used.  (On some machines, unfortunately, the elapsed time may be up to one second less or more than you specified because of how seconds are counted, and process scheduling may delay the delivery of the signal even further.)</p><p>Only one timer may be counting at once.  Each call disables the previous timer, and an argument of <code class="inline"><span class="n">0</span></code>  may be supplied to cancel the previous timer without starting a new one.  The returned value is the amount of time remaining on the previous timer.</p><p>For delays of finer granularity than one second, the Time::HiRes module (from CPAN, and starting from Perl 5.8 part of the standard distribution) provides ualarm().  You may also use Perl&#39;s four-argument version of select() leaving the first three arguments undefined, or you might be able to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> interface to access setitimer(2) if your system supports it.  See <span href="http://perldoc.perl.org/perlfaq8.html">perlfaq8</span> for details.</p><p>It is usually a mistake to intermix <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> calls, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> may be internally implemented on your system with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span></code>.</p><p>If you want to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span></code> to time out a system call you need to use an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>/<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> pair.  You can&#39;t rely on the alarm causing the system call to fail with <code class="inline"><span class="i">$!</span></code>  set to <code class="inline"><span class="w">EINTR</span></code>  because Perl sets up signal handlers to restart system calls on some systems.  Using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>/<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code> always works, modulo the caveats given in <span href="http://perldoc.perl.org/perlipc.html#Signals">Signals in perlipc</span>.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$SIG</span>{<span class="w">ALRM</span>} = <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;alarm\\n&quot;</span> <span class="s">}</span><span class="sc">;</span> <span class="c"># NB: \\n required</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span> <span class="i">$timeout</span><span class="sc">;</span></li><li>        <span class="i">$nread</span> = <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span> <span class="w">SOCKET</span><span class="cm">,</span> <span class="i">$buffer</span><span class="cm">,</span> <span class="i">$size</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/alarm.html">alarm</span> <span class="n">0</span><span class="sc">;</span></li><li>    <span class="s">}</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$@</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> unless <span class="i">$@</span> eq <span class="q">&quot;alarm\\n&quot;</span><span class="sc">;</span>   <span class="c"># propagate unexpected errors</span></li><li>        <span class="c"># timed out</span></li><li>    <span class="s">}</span></li><li>    else <span class="s">{</span></li><li>        <span class="c"># didn&#39;t</span></li><li>    <span class="s">}</span></li></ol></pre><p>For more information see <span href="http://perldoc.perl.org/perlipc.html">perlipc</span>.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#alarm">alarm in perlport</span>.</p></section>	http://perldoc.perl.org/functions/alarm.html
IO::Uncompress::AnyInflate (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Uncompress::Inflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Uncompress::AnyInflate - Uncompress zlib-based (zip, gzip) file/buffer</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;</li><li></li><li>    my $status = anyinflate $input =&gt; $output [,OPTS]</li><li>        or die &quot;anyinflate failed: $AnyInflateError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::AnyInflate $input [OPTS] </li><li>        or die &quot;anyinflate failed: $AnyInflateError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $status = $z-&gt;inflateSync()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $AnyInflateError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/AnyInflate.html
TAP::Formatter::Session (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Formatter::Session - Abstract base class for harness output delegate</p> </section>	http://perldoc.perl.org/TAP/Formatter/Session.html
granularity (definition)	A			Perl Glossary							<section class="prog__container"><p>The size of the pieces you’re dealing with, mentally speaking.</p></section>	http://perldoc.perl.org/perlglossary.html#granularity
no UTC offset information; assuming local time is UTC	A			Perl Diagnostics							<section class="prog__container"><p>(S) A warning peculiar to VMS.  Perl was unable to find the local timezone offset, so it&#39;s assuming that local system time is equivalent to UTC.  If it&#39;s not, define the logical name <i>SYS$TIMEZONE_DIFFERENTIAL</i> to translate to the number of seconds which need to be added to UTC to get local time.</p></section>	http://perldoc.perl.org/perldiag.html#no-UTC-offset-information%3b-assuming-local-time-is-UTC
Use of /c modifier is meaningless in s///	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) You used the /c modifier in a substitution.  The /c modifier is not presently meaningful in substitutions.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%2fc-modifier-is-meaningless-in-s%2f%2f%2f
What machines support Perl? Where do I get it?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>The standard release of Perl (the one maintained by the Perl development team) is distributed only in source code form. You can find the latest releases at <span href="http://www.cpan.org/src/">http://www.cpan.org/src/</span>.</p><p>Perl builds and runs on a bewildering number of platforms. Virtually all known and current Unix derivatives are supported (perl&#39;s native platform), as are other systems like VMS, DOS, OS/2, Windows, QNX, BeOS, OS X, MPE/iX and the Amiga.</p><p>Binary distributions for some proprietary platforms can be found <span href="http://www.cpan.org/ports/">http://www.cpan.org/ports/</span> directory. Because these are not part of the standard distribution, they may and in fact do differ from the base perl port in a variety of ways. You&#39;ll have to check their respective release notes to see just what the differences are. These differences can be either positive (e.g. extensions for the features of the particular platform that are not supported in the source release of perl) or negative (e.g. might be based upon a less current source release of perl).</p></section>	http://perldoc.perl.org/perlfaq2.html#What-machines-support-Perl%3f-Where-do-I-get-it%3f
Unary "not" operator	A			Perl Operators\nPerl Logical Not							<section class="prog__container">Unary &quot;not&quot; returns the logical negation of the expression to its right. It&#39;s the equivalent of &quot;!&quot; except for the very low precedence.</section>	http://perldoc.perl.org/perlop.html#Logical-Not
How do I clear a package?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>Use this code, provided by Mark-Jason Dominus:</p><pre class="verbatim"><ol><li><span name="scrub_package"></span>    sub <span class="m">scrub_package</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">strict</span> <span class="q">&#39;refs&#39;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$pack</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Shouldn&#39;t delete main package&quot;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$pack</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&quot;&quot;</span> || <span class="i">$pack</span> <span class="l_k" href="http://perldoc.perl.org/functions/eq.html">eq</span> <span class="q">&quot;main&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$stash</span> = <span class="i">*</span>{<span class="i">$pack</span> . <span class="q">&#39;::&#39;</span>}{<span class="w">HASH</span>}<span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$name</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="i">$name</span> <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%$stash</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fullname</span> = <span class="i">$pack</span> . <span class="q">&#39;::&#39;</span> . <span class="i">$name</span><span class="sc">;</span></li><li>            <span class="c"># Get rid of everything with that name.</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$$fullname</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">@$fullname</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">%$fullname</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">&amp;$fullname</span><span class="sc">;</span></li><li>            <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">*$fullname</span><span class="sc">;</span></li><li>        <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>Or, if you&#39;re using a recent release of Perl, you can just use the Symbol::delete_package() function instead.</p></section>	http://perldoc.perl.org/perlfaq7.html#How-do-I-clear-a-package%3f
In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) The two-character sequence <code class="inline"><span class="q">&quot;(*&quot;</span></code>  in this context in a regular expression pattern should be an indivisible token, with nothing intervening between the <code class="inline"><span class="q">&quot;(&quot;</span></code>  and the <code class="inline"><span class="q">&quot;*&quot;</span></code> , but you separated them.</p></section>	http://perldoc.perl.org/perldiag.html#In-'(*VERB...)'%2c-the-'('-and-'*'-must-be-adjacent-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
FileHandle (module)	A			Perl Standard Modules		[[perlfunc]]\n[[I/O Operators in perlop]]					<section class="prog__container"><p>FileHandle - supply object methods for filehandles</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">FileHandle</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">FileHandle</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="i">$fh</span><span class="i">-&gt;open</span><span class="s">(</span><span class="q">&quot;&lt; file&quot;</span><span class="s">)</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">FileHandle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;&gt; FOO&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;bar\\n&quot;</span><span class="sc">;</span></li><li>        <span class="i">$fh</span><span class="i">-&gt;close</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">FileHandle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="cm">,</span> <span class="q">&quot;r&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$fh</span><span class="sc">;</span>       <span class="c"># automatically closes the file</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$fh</span> = <span class="w">FileHandle</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&quot;file&quot;</span><span class="cm">,</span> <span class="w">O_WRONLY</span>|<span class="w">O_APPEND</span><span class="s">)</span><span class="sc">;</span></li><li>    if <span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$fh</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$fh</span> <span class="q">&quot;corge\\n&quot;</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$fh</span><span class="sc">;</span>       <span class="c"># automatically closes the file</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="i">$pos</span> = <span class="i">$fh</span><span class="i">-&gt;getpos</span><span class="sc">;</span></li><li>    <span class="i">$fh</span><span class="i">-&gt;setpos</span><span class="s">(</span><span class="i">$pos</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fh</span><span class="i">-&gt;setvbuf</span><span class="s">(</span><span class="i">$buffer_var</span><span class="cm">,</span> <span class="w">_IOLBF</span><span class="cm">,</span> <span class="n">1024</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="s">(</span><span class="i">$readfh</span><span class="cm">,</span> <span class="i">$writefh</span><span class="s">)</span> = <span class="w">FileHandle::pipe</span><span class="sc">;</span></li><li></li><li>    <span class="w">autoflush</span> <span class="w">STDOUT</span> <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/FileHandle.html
sleep(%u) too large	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) You called <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> with a number that was larger than it can reliably handle and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sleep.html">sleep</span></code> probably slept for less time than requested.</p></section>	http://perldoc.perl.org/perldiag.html#sleep(%25u)-too-large
UNIVERSAL (module)	A			Perl Standard Modules							<section class="prog__container"><p>UNIVERSAL - base class for ALL classes (blessed references)</p> <pre class="verbatim"><ol><li>    <span class="i">$is_io</span>    = <span class="i">$fd</span><span class="i">-&gt;isa</span><span class="s">(</span><span class="q">&quot;IO::Handle&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$is_io</span>    = <span class="w">Class</span><span class="w">-&gt;isa</span><span class="s">(</span><span class="q">&quot;IO::Handle&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$does_log</span> = <span class="i">$obj</span><span class="i">-&gt;DOES</span><span class="s">(</span><span class="q">&quot;Logger&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$does_log</span> = <span class="w">Class</span><span class="w">-&gt;DOES</span><span class="s">(</span><span class="q">&quot;Logger&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sub</span>      = <span class="i">$obj</span><span class="i">-&gt;can</span><span class="s">(</span><span class="q">&quot;print&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$sub</span>      = <span class="w">Class</span><span class="w">-&gt;can</span><span class="s">(</span><span class="q">&quot;print&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sub</span>      = <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span> <span class="i">$ref</span><span class="i">-&gt;can</span><span class="s">(</span><span class="q">&quot;fandango&quot;</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="i">$ver</span>      = <span class="i">$obj</span><span class="i">-&gt;VERSION</span><span class="sc">;</span></li><li></li><li>    <span class="c"># but never do this!</span></li><li>    <span class="i">$is_io</span>    = <span class="i">UNIVERSAL::isa</span><span class="s">(</span><span class="i">$fd</span><span class="cm">,</span> <span class="q">&quot;IO::Handle&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$sub</span>      = <span class="i">UNIVERSAL::can</span><span class="s">(</span><span class="i">$obj</span><span class="cm">,</span> <span class="q">&quot;print&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/UNIVERSAL.html
Can't modify reference to parenthesized hash in list assignment	A			Perl Diagnostics							<section class="prog__container"><p>(F) Assigning to <code class="inline">\\<span class="s">(</span><span class="i">%hash</span><span class="s">)</span></code>  is not supported.  If you meant to make %hash refer to some other hash, use <code class="inline">\\<span class="i">%hash</span> = \\<span class="i">%other_hash</span></code> .  If you want to make the elements of %hash into aliases of the scalars referenced on the right-hand side, use a hash slice: <code class="inline">\\<span class="i">@hash</span>{<span class="i">@keys</span>} = <span class="i">@those_scalar_refs</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Can't-modify-reference-to-parenthesized-hash-in-list-assignment
switch (definition)	A			Perl Glossary							<section class="prog__container"><p>An option you give on a command line to influence the way your program works, usually introduced with a minus sign. The word is also used as a nickname for a <b>switch statement</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#switch
This Perl can't set CRTL environ elements (%s=%s)	A			Perl Diagnostics							<section class="prog__container"><p>(W internal) Warnings peculiar to VMS.  You tried to change or delete an element of the CRTL&#39;s internal environ array, but your copy of Perl wasn&#39;t built with a CRTL that contained the setenv() function.  You&#39;ll need to rebuild Perl with a CRTL that does, or redefine <i>PERL_ENV_TABLES</i> (see <span href="http://perldoc.perl.org/perlvms.html">perlvms</span>) so that the environ array isn&#39;t the target of the change to %ENV which produced the warning.</p></section>	http://perldoc.perl.org/perldiag.html#This-Perl-can't-set-CRTL-environ-elements-(%25s%3d%25s)
Can't upgrade %s (%d) to %d	A			Perl Diagnostics							<section class="prog__container"><p>(P) The internal sv_upgrade routine adds &quot;members&quot; to an SV, making it into a more specialized kind of SV.  The top several SV types are so specialized, however, that they cannot be interconverted.  This message indicates that such a conversion was attempted.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-upgrade-%25s-(%25d)-to-%25d
How can I take a string and turn it into epoch seconds?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>If it&#39;s a regular enough string that it always has the same format, you can split it up and pass the parts to <code class="inline"><span class="w">timelocal</span></code>  in the standard <span href="http://perldoc.perl.org/Time/Local.html">Time::Local</span> module. Otherwise, you should look into the <span href="http://search.cpan.org/perldoc/Date::Calc">Date::Calc</span>, <span href="http://search.cpan.org/perldoc/Date::Parse">Date::Parse</span>, and <span href="http://search.cpan.org/perldoc/Date::Manip">Date::Manip</span> modules from CPAN.</p></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-take-a-string-and-turn-it-into-epoch-seconds%3f
How can I match a locale-smart version of?	A			Perl FAQs\nPerl Regular Expressions							<section class="prog__container"><p>You can use the POSIX character class syntax <code class="inline"><span class="q">/[[:alpha:]]/</span></code>  documented in <span href="http://perldoc.perl.org/perlre.html">perlre</span>.</p><p>No matter which locale you are in, the alphabetic characters are the characters in \\w without the digits and the underscore. As a regex, that looks like <code class="inline"><span class="q">/[^\\W\\d_]/</span></code> . Its complement, the non-alphabetics, is then everything in \\W along with the digits and the underscore, or <code class="inline"><span class="q">/[\\W\\d_]/</span></code> .</p></section>	http://perldoc.perl.org/perlfaq6.html#How-can-I-match-a-locale-smart-version-of-%2f%5ba-zA-Z%5d%2f%3f
write() on closed filehandle %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now.  Check your control flow.</p></section>	http://perldoc.perl.org/perldiag.html#write()-on-closed-filehandle-%25s
Prototype after '%c' for %s : %s	A			Perl Diagnostics							<section class="prog__container"><p>(W illegalproto) A character follows % or @ in a prototype.  This is useless, since % and @ gobble the rest of the subroutine arguments.</p></section>	http://perldoc.perl.org/perldiag.html#Prototype-after-'%25c'-for-%25s-%3a-%25s
Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) (only under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;strict&#39;</span></code>  or within <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code> )</p><p>In a bracketed character class in a regular expression pattern, you had a range which has exactly one end of it specified using <code class="inline">\\<span class="w">N</span><span class="s">{</span><span class="s">}</span></code> , and the other end is specified using a non-portable mechanism.  Perl treats the range as a Unicode range, that is, all the characters in it are considered to be the Unicode characters, and which may be different code points on some platforms Perl runs on.  For example, <code class="inline"><span class="s">[</span>\\<span class="i">N</span><span class="s">{</span><span class="w">U</span>+<span class="n">06</span><span class="s">}</span>-\\<span class="w">x08</span><span class="s">]</span></code>  is treated as if you had instead said <code class="inline"><span class="s">[</span>\\<span class="i">N</span><span class="s">{</span><span class="w">U</span>+<span class="n">06</span><span class="s">}</span>-\\<span class="i">N</span><span class="s">{</span><span class="w">U</span>+<span class="n">08</span><span class="s">}</span><span class="s">]</span></code> , that is it matches the characters whose code points in Unicode are 6, 7, and 8. But that <code class="inline">\\<span class="w">x08</span></code>  might indicate that you meant something different, so the warning gets raised.</p></section>	http://perldoc.perl.org/perldiag.html#Both-or-neither-range-ends-should-be-Unicode-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Unexpected exit %u	A			Perl Diagnostics							<section class="prog__container"><p>(S) exit() was called or the script otherwise finished gracefully when <code class="inline"><span class="w">PERL_EXIT_WARN</span></code>  was set in <code class="inline"><span class="w">PL_exit_flags</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#Unexpected-exit-%25u
"no" not allowed in expression	A			Perl Diagnostics							<section class="prog__container"><p>(F) The &quot;no&quot; keyword is recognized and executed at compile time, and returns no useful value.  See <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>.</p></section>	http://perldoc.perl.org/perldiag.html#%22no%22-not-allowed-in-expression
Pod::Perldoc::ToTk (module)	A			Perl Standard Modules		[[Tk::Pod]]\n[[Pod::Perldoc]]					<section class="prog__container"><p>Pod::Perldoc::ToTk - let Perldoc use Tk::Pod to render Pod</p> <pre class="verbatim"><ol><li>  <span class="w">perldoc</span> -o <span class="w">tk</span> <span class="w">Some::Modulename</span> <span class="i">&amp;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToTk.html
reaping (definition)	A			Perl Glossary							<section class="prog__container"><p>The last rites performed by a parent <b>process</b> on behalf of a deceased child process so that it doesn’t remain a <b>zombie</b>.  See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/wait.html">wait</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/waitpid.html">waitpid</span></code> function calls.</p></section>	http://perldoc.perl.org/perlglossary.html#reaping
logical operator (definition)	A			Perl Glossary							<section class="prog__container"><p>Symbols representing the concepts “and”, “or”, “xor”, and “not”.</p></section>	http://perldoc.perl.org/perlglossary.html#logical-operator
getnetbyaddr (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>getnetbyaddr ADDR,ADDRTYPE</pre>Get network record given its address.</section>	http://perldoc.perl.org/functions/getnetbyaddr.html
Locale::Country (module)	A			Perl Standard Modules							<section class="prog__container"><p>Locale::Country - standard codes for country identification</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Locale::Country</span><span class="sc">;</span></li><li></li><li>   <span class="i">$country</span> = <span class="i">code2country</span><span class="s">(</span><span class="q">&#39;jp&#39;</span> <span class="s">[</span><span class="cm">,</span><span class="w">CODESET</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># $country gets &#39;Japan&#39;</span></li><li>   <span class="i">$code</span>    = <span class="i">country2code</span><span class="s">(</span><span class="q">&#39;Norway&#39;</span> <span class="s">[</span><span class="cm">,</span><span class="w">CODESET</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># $code gets &#39;no&#39;</span></li><li></li><li>   <span class="i">@codes</span>   = <span class="i">all_country_codes</span><span class="s">(</span> <span class="s">[</span><span class="w">CODESET</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">@names</span>   = <span class="i">all_country_names</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>   <span class="c"># semi-private routines</span></li><li>   <span class="i">Locale::Country::alias_code</span><span class="s">(</span><span class="q">&#39;uk&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;gb&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>   <span class="i">Locale::Country::rename_country</span><span class="s">(</span><span class="q">&#39;gb&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;Great Britain&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Locale/Country.html
Can't exec "%s": %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exec) A system(), exec(), or piped open call could not execute the named program for the indicated reason.  Typical reasons include: the permissions were wrong on the file, the file wasn&#39;t found in <code class="inline"><span class="i">$ENV</span>{<span class="w">PATH</span>}</code> , the executable in question was compiled for another architecture, or the #! line in a script points to an interpreter that can&#39;t be run for similar reasons.  (Or maybe your system doesn&#39;t support #! at all.)</p></section>	http://perldoc.perl.org/perldiag.html#Can't-exec-%22%25s%22%3a-%25s
How come exec() doesn't return?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>(contributed by brian d foy)</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> function&#39;s job is to turn your process into another command and never to return. If that&#39;s not what you want to do, don&#39;t use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code>. :)</p><p>If you want to run an external command and still keep your Perl process going, look at a piped <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-come-exec()-doesn't-return%3f
Execution of %s aborted due to compilation errors.	A			Perl Diagnostics							<section class="prog__container"><p>(F) The final summary message when a Perl compilation fails.</p></section>	http://perldoc.perl.org/perldiag.html#Execution-of-%25s-aborted-due-to-compilation-errors.
'%s' is not a code reference	A			Perl Diagnostics							<section class="prog__container"><p>(W overload) The second (fourth, sixth, ...) argument of overload::constant needs to be a code reference.  Either an anonymous subroutine, or a reference to a subroutine.</p></section>	http://perldoc.perl.org/perldiag.html#'%25s'-is-not-a-code-reference
Pod::Simple::PullParser (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::PullParserToken]]\n[[Pod::Simple::PullParserStartToken]]\n[[Pod::Simple::PullParserTextToken]]\n[[Pod::Simple::PullParserEndToken]]\n[[HTML::TokeParser]]					<section class="prog__container"><p>Pod::Simple::PullParser -- a pull-parser interface to parsing Pod</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">SomePodProcessor</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;set_source</span><span class="s">(</span> <span class="q">&quot;whatever.pod&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;run</span><span class="sc">;</span></li></ol></pre><p>Or:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">SomePodProcessor</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;set_source</span><span class="s">(</span> <span class="i">$some_filehandle_object</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;run</span><span class="sc">;</span></li></ol></pre><p>Or:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">SomePodProcessor</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;set_source</span><span class="s">(</span> \\<span class="i">$document_source</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;run</span><span class="sc">;</span></li></ol></pre><p>Or:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$parser</span> = <span class="w">SomePodProcessor</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;set_source</span><span class="s">(</span> \\<span class="i">@document_lines</span> <span class="s">)</span><span class="sc">;</span></li><li> <span class="i">$parser</span><span class="i">-&gt;run</span><span class="sc">;</span></li></ol></pre><p>And elsewhere:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5</span><span class="sc">;</span></li><li><span name="package-SomePodProcessor"></span> package <span class="i">SomePodProcessor</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">qw(Pod::Simple::PullParser)</span><span class="sc">;</span></li><li></li><li><span name="run"></span> sub <span class="m">run</span> <span class="s">{</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$self</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>  <span class="j">Token:</span></li><li>   while<span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$token</span> = <span class="i">$self</span><span class="i">-&gt;get_token</span><span class="s">)</span> <span class="s">{</span></li><li>     ...<span class="w">process</span> <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="w">token</span>...</li><li>   <span class="s">}</span></li><li> <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/PullParser.html
Cloning substitution context is unimplemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Creating a new thread inside the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code> operator is not supported.</p></section>	http://perldoc.perl.org/perldiag.html#Cloning-substitution-context-is-unimplemented
-X	A			Perl Command-Line Switches							<section class="prog__container"><p>Disables all warnings regardless of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span></code>  or <code class="inline"><span class="i">$^W</span></code> . See <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p></section>	http://perldoc.perl.org/perlrun.html#*-X*
setnetent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>setnetent STAYOPEN</pre>Prepare networks file for use.</section>	http://perldoc.perl.org/functions/setnetent.html
seteuid() not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to assign to <code class="inline"><span class="i">$&gt;</span></code> , and your operating system doesn&#39;t support the seteuid() system call (or equivalent), or at least Configure didn&#39;t think so.</p></section>	http://perldoc.perl.org/perldiag.html#seteuid()-not-implemented
Why don't my tied hashes make the defined/exists distinction?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>This depends on the tied hash&#39;s implementation of EXISTS(). For example, there isn&#39;t the concept of undef with hashes that are tied to DBM* files. It also means that exists() and defined() do the same thing with a DBM* file, and what they end up doing is not what they do with ordinary hashes.</p></section>	http://perldoc.perl.org/perlfaq4.html#Why-don't-my-tied-hashes-make-the-defined%2fexists-distinction%3f
XSLoader (module)	A			Perl Standard Modules		[[DynaLoader]]					<section class="prog__container"><p>XSLoader - Dynamically load C libraries into Perl code</p> <pre class="verbatim"><ol><li><span name="package-YourPackage"></span>    package <span class="i">YourPackage</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">XSLoader</span><span class="sc">;</span></li><li></li><li>    <span class="i">XSLoader::load</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/XSLoader.html
(?(DEFINE)....) does not allow branches in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used something like <code class="inline">(?(DEFINE)...|..)</code> which is illegal.  The most likely cause of this error is that you left out a parenthesis inside of the <code class="inline">....</code> part.</p><p>The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#(%3f(DEFINE)....)-does-not-allow-branches-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Unterminated verb pattern argument in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a pattern of the form <code class="inline">(*VERB:ARG)</code> but did not terminate the pattern with a <code class="inline">)</code>.  Fix the pattern and retry.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-verb-pattern-argument-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Count after length/code in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(F) You had an unpack template indicating a counted-length string, but you have also specified an explicit size for the string.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Count-after-length%2fcode-in-unpack
%s failed--call queue aborted	A			Perl Diagnostics							<section class="prog__container"><p>(F) An untrapped exception was raised while executing a UNITCHECK, CHECK, INIT, or END subroutine.  Processing of the remainder of the queue of such routines has been prematurely ended.</p></section>	http://perldoc.perl.org/perldiag.html#%25s-failed--call-queue-aborted
directory handle (definition)	A			Perl Glossary							<section class="prog__container"><p>A name that represents a particular instance of opening a directory to read it, until you close it. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/opendir.html">opendir</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#directory-handle
true (definition)	A			Perl Glossary							<section class="prog__container"><p>Any scalar value that doesn’t evaluate to 0 or <code class="inline"><span class="q">&quot;&quot;</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#true
Binary "*" operator	A			Perl Operators\nPerl Multiplicative Operators							<section class="prog__container">Binary &quot;*&quot; multiplies two numbers.</section>	http://perldoc.perl.org/perlop.html#Multiplicative-Operators
What character encodings does Perl support?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>To find out which character encodings your Perl supports, run:</p><pre class="verbatim"><ol><li>    <span class="w">perl</span> -<span class="w">MEncode</span> -le <span class="q">&quot;print for Encode-&gt;encodings(&#39;:all&#39;)&quot;</span></li></ol></pre></section>	http://perldoc.perl.org/perlunifaq.html#What-character-encodings-does-Perl-support%3f
__FILE__ (function)	A			Perl Functions							<section class="prog__container"><pre>__FILE__</pre><p>A special token that returns the name of the file in which it occurs.</p></section>	http://perldoc.perl.org/functions/__FILE__.html
B (module)	A			Perl Standard Modules							<section class="prog__container"><p>B - The Perl Compiler Backend</p> <pre class="verbatim"><ol><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">B</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/B.html
times not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) Your version of the C library apparently doesn&#39;t do times().  I suspect you&#39;re not running on Unix.</p></section>	http://perldoc.perl.org/perldiag.html#times-not-implemented
(?[...]) not valid in locale in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code>  cannot be used within the scope of a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">locale</span></code>  or with an <code class="inline"><span class="q">/l</span></code>  regular expression modifier, as that would require deferring to run-time the calculation of what it should evaluate to, and it is regex compile-time only.</p></section>	http://perldoc.perl.org/perldiag.html#(%3f%5b...%5d)-not-valid-in-locale-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
What are all these $@%&* punctuation signs, and how do I know when to use them?	A			Perl FAQs\nPerl General Perl Language Issues							<section class="prog__container"><p>They are type specifiers, as detailed in <span href="http://perldoc.perl.org/perldata.html">perldata</span>:</p><pre class="verbatim"><ol><li>    <span class="i">$ for</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span> <span class="s">(</span><span class="w">number</span><span class="cm">,</span> <span class="w">string</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="w">reference</span><span class="s">)</span></li><li>    <span class="i">@ for</span> <span class="w">arrays</span></li><li>    % <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">hashes</span> <span class="s">(</span><span class="w">associative</span> <span class="w">arrays</span><span class="s">)</span></li><li>    &amp; <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">subroutines</span> <span class="s">(</span><span class="w">aka</span> <span class="w">functions</span><span class="cm">,</span> <span class="w">procedures</span><span class="cm">,</span> <span class="w">methods</span><span class="s">)</span></li><li>    * <span class="l_k" href="http://perldoc.perl.org/functions/for.html">for</span> <span class="w">all</span> <span class="w">types</span> <span class="w">of</span> <span class="w">that</span> <span class="w">symbol</span> <span class="w">name</span>. <span class="w">In</span> <span class="w">version</span> <span class="n">4</span> <span class="w">you</span> <span class="w">used</span> <span class="w">them</span> <span class="w">like</span></li><li>      <span class="w">pointers</span><span class="cm">,</span> <span class="w">but</span> <span class="w">in</span> <span class="w">modern</span> <span class="w">perls</span> <span class="w">you</span> <span class="w">can</span> <span class="w">just</span> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">references</span>.</li></ol></pre><p>There are a couple of other symbols that you&#39;re likely to encounter that aren&#39;t really type specifiers:</p><pre class="verbatim"><ol><li>    &lt;&gt; are used for inputting a record from a filehandle.</li><li>    \\  takes a reference to something.</li></ol></pre><p>Note that &lt;FILE&gt; is <i>neither</i> the type specifier for files nor the name of the handle. It is the <code class="inline">&lt;&gt;</code>  operator applied to the handle FILE. It reads one line (well, record--see <span href="http://perldoc.perl.org/perlvar.html#%24%2f">$/ in perlvar</span>) from the handle FILE in scalar context, or <i>all</i> lines in list context. When performing open, close, or any other operation besides <code class="inline">&lt;&gt;</code>  on files, or even when talking about the handle, do <i>not</i> use the brackets. These are correct: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eof.html">eof(FH)</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seek.html">seek</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span></code>  and &quot;copying from STDIN to FILE&quot;.</p></section>	http://perldoc.perl.org/perlfaq7.html#What-are-all-these-%24%40%25%26*-punctuation-signs%2c-and-how-do-I-know-when-to-use-them%3f
Cannot pack %f with '%c'	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried converting an infinity or not-a-number to an integer, which makes no sense.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-pack-%25f-with-'%25c'
Encode::Unicode (module)	A			Perl Standard Modules		[[Encode]]\n[[Encode::Unicode::UTF7]]\n[[http://www.unicode.org/glossary/]]\n[[http://www.unicode.org/unicode/faq/utf_bom.html]]\n[[http://www.ietf.org/rfc/rfc2781.txt]]\n[[http://www.unicode.org/unicode/uni2book/u2.html]]					<section class="prog__container"><p>Encode::Unicode -- Various Unicode Transformation Formats</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Encode</span> <span class="q">qw/encode decode/</span><span class="sc">;</span></li><li>    <span class="i">$ucs2</span> = <span class="i">encode</span><span class="s">(</span><span class="q">&quot;UCS-2BE&quot;</span><span class="cm">,</span> <span class="i">$utf8</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$utf8</span> = <span class="i">decode</span><span class="s">(</span><span class="q">&quot;UCS-2BE&quot;</span><span class="cm">,</span> <span class="i">$ucs2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Encode/Unicode.html
pipeline (definition)	A			Perl Glossary							<section class="prog__container"><p>A series of <b>processes</b> all in a row, linked by <b>pipes</b>, where each passes its output stream to the next.</p></section>	http://perldoc.perl.org/perlglossary.html#pipeline
dump (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program\nPerl Miscellaneous functions							<section class="prog__container"><pre>dump LABEL<br>dump EXPR<br>dump</pre><p>This function causes an immediate core dump.  See also the <b>-u</b> command-line switch in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>, which does the same thing. Primarily this is so that you can use the <b>undump</b> program (not supplied) to turn your core dump into an executable binary after having initialized all your variables at the beginning of the program.  When the new binary is executed it will begin by executing a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span> <span class="j">LABEL</span></code>  (with all the restrictions that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/goto.html">goto</span></code> suffers). Think of it as a goto with an intervening core dump and reincarnation. If <code class="inline"><span class="w">LABEL</span></code>  is omitted, restarts the program from the top.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span> <span class="w">EXPR</span></code>  form, available starting in Perl 5.18.0, allows a name to be computed at run time, being otherwise identical to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span> <span class="w">LABEL</span></code> .</p><p><b>WARNING</b>: Any files opened at the time of the dump will <i>not</i> be open any more when the program is reincarnated, with possible resulting confusion by Perl.</p><p>This function is now largely obsolete, mostly because it&#39;s very hard to convert a core file into an executable.  That&#39;s why you should now invoke it as <code class="inline"><span class="i">CORE::dump</span><span class="s">(</span><span class="s">)</span></code> , if you don&#39;t want to be warned against a possible typo.</p><p>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dump.html">dump</span></code>.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#dump">dump in perlport</span>.</p></section>	http://perldoc.perl.org/functions/dump.html
How do I use MIME to make an attachment to a mail message?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p><span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> directly supports multipart messages. <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> objects themselves are parts and can be attached to other <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> objects. Consult the <span href="http://search.cpan.org/perldoc/Email::MIME">Email::MIME</span> documentation for more information, including all of the supported methods and examples of their use.</p></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-use-MIME-to-make-an-attachment-to-a-mail-message%3f
How do I automate an HTML form submission?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>If you are doing something complex, such as moving through many pages and forms or a web site, you can use <span href="http://search.cpan.org/perldoc/WWW::Mechanize">WWW::Mechanize</span>. See its documentation for all the details.</p><p>If you&#39;re submitting values using the GET method, create a URL and encode the form using the <code class="inline"><span class="w">query_form</span></code>  method:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">LWP::Simple</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">URI::URL</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$url</span> = <span class="i">url</span><span class="s">(</span><span class="q">&#39;L&lt;<span href="http://www.perl.com/cgi-bin/cpan_mod">http://www.perl.com/cgi-bin/cpan_mod</span>&#39;</span><span class="s">)</span>&gt;<span class="sc">;</span></li><li>    <span class="i">$url</span><span class="i">-&gt;query_form</span><span class="s">(</span><span class="w">module</span> <span class="cm">=&gt;</span> <span class="q">&#39;DB_File&#39;</span><span class="cm">,</span> <span class="w">readme</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$content</span> = <span class="i">get</span><span class="s">(</span><span class="i">$url</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you&#39;re using the POST method, create your own user agent and encode the content appropriately.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">HTTP::Request::Common</span> <span class="q">qw(POST)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">LWP::UserAgent</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$ua</span> = <span class="w">LWP::UserAgent</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$req</span> = <span class="w">POST</span> <span class="q">&#39;L&lt;<span href="http://www.perl.com/cgi-bin/cpan_mod">http://www.perl.com/cgi-bin/cpan_mod</span>&#39;</span>&gt;<span class="cm">,</span></li><li>                   <span class="s">[</span> <span class="w">module</span> <span class="cm">=&gt;</span> <span class="q">&#39;DB_File&#39;</span><span class="cm">,</span> <span class="w">readme</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">]</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$content</span> = <span class="i">$ua</span><span class="i">-&gt;request</span><span class="s">(</span><span class="i">$req</span><span class="s">)</span><span class="i">-&gt;as_string</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq9.html#How-do-I-automate-an-HTML-form-submission%3f
TAP::Parser::Iterator::Array (module)	A			Perl Standard Modules		[[TAP::Object]]\n[[TAP::Parser]]\n[[TAP::Parser::Iterator]]					<section class="prog__container"><p>TAP::Parser::Iterator::Array - Iterator for array-based TAP sources</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Iterator::Array</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@data</span> = <span class="s">(</span><span class="q">&#39;foo&#39;</span><span class="cm">,</span> <span class="q">&#39;bar&#39;</span><span class="cm">,</span> <span class="w">baz</span><span class="q">&#39;);</span></li><li>  <span class="q">  my $it   = TAP::Parser::Iterator::Array-&gt;new(\\@data);</span></li><li>  <span class="q">  my $line = $it-&gt;next;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Iterator/Array.html
Can't open output file %s as stdout	A			Perl Diagnostics							<section class="prog__container"><p>(F) An error peculiar to VMS.  Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;&gt;&#39; or &#39;&gt;&gt;&#39; on the command line for writing.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-open-output-file-%25s-as-stdout
'%s' trapped by operation mask	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use an operator from a Safe compartment in which it&#39;s disallowed.  See <span href="http://perldoc.perl.org/Safe.html">Safe</span>.</p></section>	http://perldoc.perl.org/perldiag.html#'%25s'-trapped-by-operation-mask
Hexadecimal float: internal error	A			Perl Diagnostics							<section class="prog__container"><p>(F) Something went horribly bad in hexadecimal float handling.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-internal-error
IO::Socket (module)	A			Perl Standard Modules		[[Socket]]\n[[IO::Handle]]\n[[IO::Socket::INET]]\n[[IO::Socket::UNIX]]					<section class="prog__container"><p>IO::Socket - Object interface to socket communications</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO::Socket</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IO/Socket.html
Tie::Handle (module)	A			Perl Standard Modules							<section class="prog__container"><p>Tie::Handle - base class definitions for tied handles</p> <pre class="verbatim"><ol><li><span name="package-NewHandle"></span>    package <span class="i">NewHandle</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="w">Tie::Handle</span><span class="sc">;</span></li><li></li><li>    <span class="i">@ISA</span> = <span class="q">qw(Tie::Handle)</span><span class="sc">;</span></li><li></li><li><span name="READ"></span>    sub <span class="m">READ</span> <span class="s">{</span> ... <span class="s">}</span>&#09;&#09;<span class="c"># Provide a needed method</span></li><li><span name="TIEHANDLE"></span>    sub <span class="m">TIEHANDLE</span> <span class="s">{</span> ... <span class="s">}</span>&#09;<span class="c"># Overrides inherited method</span></li><li></li><li></li><li><span name="package-main"></span>    package <span class="i">main</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span> <span class="i">*FH</span><span class="cm">,</span> <span class="q">&#39;NewHandle&#39;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Tie/Handle.html
charnames alias definitions may not contain trailing white-space	A			Perl Diagnostics							<section class="prog__container"><p>(F) You defined a character name which ended in a space character.  Remove the trailing space(s).  Usually these names are defined in the <code class="inline"><span class="j">:</span><span class="w">alias</span></code>  import argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">charnames</span></code> , but they could be defined by a translator installed into <code class="inline"><span class="i">$^H</span>{<span class="w">charnames</span>}</code> . See <span href="http://perldoc.perl.org/charnames.html#CUSTOM-ALIASES">CUSTOM ALIASES in charnames</span>.</p></section>	http://perldoc.perl.org/perldiag.html#charnames-alias-definitions-may-not-contain-trailing-white-space
asynchronous (definition)	A			Perl Glossary							<section class="prog__container"><p>Said of events or activities whose relative temporal ordering is indeterminate because too many things are going on at once. Hence, an asynchronous event is one you didn’t know when to expect.</p></section>	http://perldoc.perl.org/perlglossary.html#asynchronous
Non-octal character '%c'. Resolved as "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(W digit) In parsing an octal numeric constant, a character was unexpectedly encountered that isn&#39;t octal.  The resulting value is as indicated.</p></section>	http://perldoc.perl.org/perldiag.html#Non-octal-character-'%25c'.--Resolved-as-%22%25s%22
$| (variable)	A			Perl Variables\nPerl Variables related to filehandles							<section class="prog__container"><p>If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel.  Default is 0 (regardless of whether the channel is really buffered by the system or not; <code class="inline"><span class="i">$|</span></code>  tells you only whether you&#39;ve asked Perl explicitly to flush after each write).  STDOUT will typically be line buffered if output is to the terminal and block buffered otherwise.  Setting this variable is useful primarily when you are outputting to a pipe or socket, such as when you are running a Perl program under <b>rsh</b> and want to see the output as it&#39;s happening.  This has no effect on input buffering.  See <span href="http://perldoc.perl.org/functions/getc.html">getc</span> for that.  See <span href="http://perldoc.perl.org/functions/select.html">select</span> on how to select the output channel.  See also <span href="http://perldoc.perl.org/IO/Handle.html">IO::Handle</span>.</p><p>Mnemonic: when you want your pipes to be piping hot.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7c
What is the difference between and?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p>Because UTF-8 is one of Perl&#39;s internal formats, you can often just skip the encoding or decoding step, and manipulate the UTF8 flag directly.</p><p>Instead of <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code> , you can simply use <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , which skips the encoding step if the data was already represented as UTF8 internally. This is widely accepted as good behavior when you&#39;re writing, but it can be dangerous when reading, because it causes internal inconsistency when you have invalid byte sequences. Using <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  for input can sometimes result in security breaches, so please use <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code>  instead.</p><p>Instead of <code class="inline"><span class="w">decode</span></code>  and <code class="inline"><span class="w">encode</span></code> , you could use <code class="inline"><span class="w">_utf8_on</span></code>  and <code class="inline"><span class="w">_utf8_off</span></code> , but this is considered bad style. Especially <code class="inline"><span class="w">_utf8_on</span></code>  can be dangerous, for the same reason that <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  can.</p><p>There are some shortcuts for oneliners; see <span href="http://perldoc.perl.org/perlrun.html#-C-%5bnumber%2flist%5d">-C</span> in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>.</p></section>	http://perldoc.perl.org/perlunifaq.html#What-is-the-difference-between-%3aencoding-and-%3autf8%3f
home directory (definition)	A			Perl Glossary							<section class="prog__container"><p>The directory you are put into when you log in. On a Unix system, the name is often placed into <code class="inline"><span class="i">$ENV</span>{<span class="w">HOME</span>}</code>  or <code class="inline"><span class="i">$ENV</span>{<span class="w">LOGDIR</span>}</code>  by <i>login</i>, but you can also find it with <code class="inline"><span class="s">(</span><span class="w">get</span></code> <code class="inline"><span class="i">pwuid</span><span class="s">(</span><span class="i">$&lt;</span><span class="s">)</span><span class="p">)</span>[<span class="n">7</span>]</code> . (Some platforms do not have a concept of a home directory.)</p></section>	http://perldoc.perl.org/perlglossary.html#home-directory
class method (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>method</b> whose <b>invocant</b> is a <b>package</b> name, not an <b>object</b> reference. A method associated with the class as a whole. Also see <b>instance method</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#class-method
Use of := for an empty attribute list is not allowed	A			Perl Diagnostics							<section class="prog__container"><p>(F) The construction <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> <span class="co">:</span>= <span class="n">42</span></code>  used to parse as equivalent to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$x</span> <span class="co">:</span> = <span class="n">42</span></code>  (applying an empty attribute list to <code class="inline"><span class="i">$x</span></code> ). This construct was deprecated in 5.12.0, and has now been made a syntax error, so <code class="inline"><span class="j">:</span>=</code>  can be reclaimed as a new operator in the future.</p><p>If you need an empty attribute list, for example in a code generator, add a space before the <code class="inline">=</code> .</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-%3a%3d-for-an-empty-attribute-list-is-not-allowed
tell (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>tell FILEHANDLE<br>tell</pre><p>Returns the current position <i>in bytes</i> for FILEHANDLE, or -1 on error.  FILEHANDLE may be an expression whose value gives the name of the actual filehandle.  If FILEHANDLE is omitted, assumes the file last read.</p><p>Note the <i>in bytes</i>: even if the filehandle has been set to operate on characters (for example by using the <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">utf8</span><span class="s">)</span></code>  open layer), tell() will return byte offsets, not character offsets (because that would render seek() and tell() rather slow).</p><p>The return value of tell() for the standard streams like the STDIN depends on the operating system: it may return -1 or something else. tell() on pipes, fifos, and sockets usually returns -1.</p><p>There is no <code class="inline"><span class="w">systell</span></code>  function.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysseek.html">sysseek</span><span class="s">(</span><span class="w">FH</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span></code>  for that.</p><p>Do not use tell() (or other buffered I/O operations) on a filehandle that has been manipulated by sysread(), syswrite(), or sysseek(). Those functions ignore the buffering, while tell() does not.</p></section>	http://perldoc.perl.org/functions/tell.html
bind() on closed socket %s	A			Perl Diagnostics							<section class="prog__container"><p>(W closed) You tried to do a bind on a closed socket.  Did you forget to check the return value of your socket() call?  See <span href="http://perldoc.perl.org/functions/bind.html">bind</span>.</p></section>	http://perldoc.perl.org/perldiag.html#bind()-on-closed-socket-%25s
How can I do RPC in Perl?	A			Perl FAQs\nPerl Web, Email and Networking							<section class="prog__container"><p>Use one of the RPC modules( <span href="https://metacpan.org/search?q=RPC">https://metacpan.org/search?q=RPC</span> ).</p></section>	http://perldoc.perl.org/perlfaq9.html#How-can-I-do-RPC-in-Perl%3f
oops: oopsHV	A			Perl Diagnostics							<section class="prog__container"><p>(S internal) An internal warning that the grammar is screwed up.</p></section>	http://perldoc.perl.org/perldiag.html#oops%3a-oopsHV
application (definition)	A			Perl Glossary							<section class="prog__container"><p>A bigger, fancier sort of <b>program</b> with a fancier name so people don’t realize they are using a program.</p></section>	http://perldoc.perl.org/perlglossary.html#application
fork (definition)	A			Perl Glossary							<section class="prog__container"><p>To create a child <b>process</b> identical to the parent process at its moment of conception, at least until it gets ideas of its own. A thread with protected memory.</p></section>	http://perldoc.perl.org/perlglossary.html#fork
binary (definition)	A			Perl Glossary							<section class="prog__container"><p>Having to do with numbers represented in base 2. That means there’s basically two numbers: 0 and 1. Also used to describe a file of “nontext”, presumably because such a file makes full use of all the binary bits in its bytes. With the advent of <b>Unicode</b>, this distinction, already suspect, loses even more of its meaning.</p></section>	http://perldoc.perl.org/perlglossary.html#binary
IO::Uncompress::Inflate (module)	A			Perl Standard Modules		[[Compress::Zlib]]\n[[IO::Compress::Gzip]]\n[[IO::Uncompress::Gunzip]]\n[[IO::Compress::Deflate]]\n[[IO::Compress::RawDeflate]]\n[[IO::Uncompress::RawInflate]]\n[[IO::Compress::Bzip2]]\n[[IO::Uncompress::Bunzip2]]\n[[IO::Compress::Lzma]]\n[[IO::Uncompress::UnLzma]]\n[[IO::Compress::Xz]]\n[[IO::Uncompress::UnXz]]\n[[IO::Compress::Lzop]]\n[[IO::Uncompress::UnLzop]]\n[[IO::Compress::Lzf]]\n[[IO::Uncompress::UnLzf]]\n[[IO::Uncompress::AnyInflate]]\n[[IO::Uncompress::AnyUncompress]]\n[[IO::Compress::FAQ]]\n[[File::GlobMapper]]\n[[Archive::Zip]]\n[[Archive::Tar]]\n[[IO::Zlib]]\n[[http://www.faqs.org/rfcs/rfc1950.html]]\n[[http://www.faqs.org/rfcs/rfc1951.html]]\n[[http://www.faqs.org/rfcs/rfc1952.html]]\n[[http://www.zlib.org]]\n[[http://www.gzip.org]]					<section class="prog__container"><p>IO::Uncompress::Inflate - Read RFC 1950 files/buffers</p> <pre class="verbatim"><ol><li>    use IO::Uncompress::Inflate qw(inflate $InflateError) ;</li><li></li><li>    my $status = inflate $input =&gt; $output [,OPTS]</li><li>        or die &quot;inflate failed: $InflateError\\n&quot;;</li><li></li><li>    my $z = new IO::Uncompress::Inflate $input [OPTS] </li><li>        or die &quot;inflate failed: $InflateError\\n&quot;;</li><li></li><li>    $status = $z-&gt;read($buffer)</li><li>    $status = $z-&gt;read($buffer, $length)</li><li>    $status = $z-&gt;read($buffer, $length, $offset)</li><li>    $line = $z-&gt;getline()</li><li>    $char = $z-&gt;getc()</li><li>    $char = $z-&gt;ungetc()</li><li>    $char = $z-&gt;opened()</li><li></li><li>    $status = $z-&gt;inflateSync()</li><li></li><li>    $data = $z-&gt;trailingData()</li><li>    $status = $z-&gt;nextStream()</li><li>    $data = $z-&gt;getHeaderInfo()</li><li>    $z-&gt;tell()</li><li>    $z-&gt;seek($position, $whence)</li><li>    $z-&gt;binmode()</li><li>    $z-&gt;fileno()</li><li>    $z-&gt;eof()</li><li>    $z-&gt;close()</li><li></li><li>    $InflateError ;</li><li></li><li>    # IO::File mode</li><li></li><li>    &lt;$z&gt;</li><li>    read($z, $buffer);</li><li>    read($z, $buffer, $length);</li><li>    read($z, $buffer, $length, $offset);</li><li>    tell($z)</li><li>    seek($z, $position, $whence)</li><li>    binmode($z)</li><li>    fileno($z)</li><li>    eof($z)</li><li>    close($z)</li></ol></pre></section>	http://perldoc.perl.org/IO/Uncompress/Inflate.html
Binary "||" operator	A			Perl Operators\nPerl C-style Logical Or							<section class="prog__container">Binary &quot;||&quot; performs a short-circuit logical OR operation. That is, if the left operand is true, the right operand is not even evaluated. Scalar or list context propagates down to the right operand if it is evaluated.</section>	http://perldoc.perl.org/perlop.html#C-style-Logical-Or
Encode::Config (module)	A			Perl Standard Modules							<section class="prog__container"><p>Encode::Config -- internally used by Encode</p> </section>	http://perldoc.perl.org/Encode/Config.html
connection (definition)	A			Perl Glossary							<section class="prog__container"><p>In telephony, the temporary electrical circuit between the caller’s and the callee’s phone. In networking, the same kind of temporary circuit between a <b>client</b> and a <b>server</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#connection
UTF-16 surrogate U+%X	A			Perl Diagnostics							<section class="prog__container"><p>(S surrogate) You had a UTF-16 surrogate in a context where they are not considered acceptable.  These code points, between U+D800 and U+DFFF (inclusive), are used by Unicode only for UTF-16.  However, Perl internally allows all unsigned integer code points (up to the size limit available on your platform), including surrogates.  But these can cause problems when being input or output, which is likely where this message came from.  If you really really know what you are doing you can turn off this warning by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;surrogate&#39;</span><span class="sc">;</span></code> .</p></section>	http://perldoc.perl.org/perldiag.html#UTF-16-surrogate-U%2b%25X
Integer overflow in %s number	A			Perl Diagnostics							<section class="prog__container"><p>(S overflow) The hexadecimal, octal or binary number you have specified either as a literal or as an argument to hex() or oct() is too big for your architecture, and has been converted to a floating point number. On a 32-bit architecture the largest hexadecimal, octal or binary number representable without overflow is 0xFFFFFFFF, 037777777777, or 0b11111111111111111111111111111111 respectively.  Note that Perl transparently promotes all numbers to a floating point representation internally--subject to loss of precision errors in subsequent operations.</p></section>	http://perldoc.perl.org/perldiag.html#Integer-overflow-in-%25s-number
/Other Modifiers regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>There are a number of flags that can be found at the end of regular expression constructs that are <i>not</i> generic regular expression flags, but apply to the operation being performed, like matching or substitution (<code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m//</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/s.html">s///</span></code> respectively).</p><p>Flags described further in <span href="http://perldoc.perl.org/perlretut.html#Using-regular-expressions-in-Perl">Using regular expressions in Perl in perlretut</span> are:</p><pre class="verbatim"><ol><li>  <span class="w">c</span>  - <span class="w">keep</span> <span class="w">the</span> <span class="w">current</span> <span class="w">position</span> <span class="w">during</span> <span class="w">repeated</span> <span class="w">matching</span></li><li>  <span class="w">g</span>  - <span class="w">globally</span> <span class="w">match</span> <span class="w">the</span> <span class="w">pattern</span> <span class="w">repeatedly</span> <span class="w">in</span> <span class="w">the</span> <span class="w">string</span></li></ol></pre><p>Substitution-specific modifiers described in</p><p><span href="http://perldoc.perl.org/perlop.html#s%2fPATTERN%2fREPLACEMENT%2fmsixpodualngcer">s/PATTERN/REPLACEMENT/msixpodualngcer in perlop</span> are:</p><pre class="verbatim"><ol><li>  <span class="w">e</span>  - <span class="w">evaluate</span> <span class="w">the</span> <span class="w">right</span>-<span class="w">hand</span> <span class="w">side</span> <span class="w">as</span> <span class="w">an</span> <span class="w">expression</span></li><li>  <span class="w">ee</span> - <span class="w">evaluate</span> <span class="w">the</span> <span class="w">right</span> <span class="w">side</span> <span class="w">as</span> <span class="w">a</span> <span class="w">string</span> <span class="w">then</span> <span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="w">the</span> <span class="w">result</span></li><li>  <span class="w">o</span>  - <span class="w">pretend</span> <span class="w">to</span> <span class="w">optimize</span> <span class="w">your</span> <span class="w">code</span><span class="cm">,</span> <span class="w">but</span> <span class="w">actually</span> <span class="w">introduce</span> <span class="w">bugs</span></li><li>  <span class="w">r</span>  - <span class="w">perform</span> <span class="w">non</span>-<span class="w">destructive</span> <span class="w">substitution</span> <span class="l_k" href="http://perldoc.perl.org/functions/and.html">and</span> <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="w">the</span> <span class="w">new</span> <span class="w">value</span></li></ol></pre></section>	http://perldoc.perl.org/perlre.html#*Other-Modifiers*
Module::Load::Conditional (module)	A			Perl Standard Modules							<section class="prog__container"><p>Module::Load::Conditional - Looking up module information / loading at runtime</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Module::Load::Conditional</span> <span class="q">qw[can_load check_install requires]</span><span class="sc">;</span></li><li></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$use_list</span> = <span class="s">{</span></li><li>            <span class="w">CPANPLUS</span>        <span class="cm">=&gt;</span> <span class="n">0.05</span><span class="cm">,</span></li><li>            <span class="w">LWP</span>             <span class="cm">=&gt;</span> <span class="n">5.60</span><span class="cm">,</span></li><li>            <span class="q">&#39;Test::More&#39;</span>    <span class="cm">=&gt;</span> <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span><span class="cm">,</span></li><li>    <span class="s">}</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">can_load</span><span class="s">(</span> <span class="w">modules</span> <span class="cm">=&gt;</span> <span class="i">$use_list</span> <span class="s">)</span></li><li>            ? <span class="q">&#39;all modules loaded successfully&#39;</span></li><li>            <span class="co">:</span> <span class="q">&#39;failed to load required modules&#39;</span><span class="sc">;</span></li><li></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$rv</span> = <span class="i">check_install</span><span class="s">(</span> <span class="w">module</span> <span class="cm">=&gt;</span> <span class="q">&#39;LWP&#39;</span><span class="cm">,</span> <span class="w">version</span> <span class="cm">=&gt;</span> <span class="n">5.60</span> <span class="s">)</span></li><li>                or <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&#39;LWP is not installed!&#39;</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&#39;LWP up to date&#39;</span> if <span class="i">$rv</span>-&gt;{<span class="w">uptodate</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;LWP version is $rv-&gt;{version}\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;LWP is installed as file $rv-&gt;{file}\\n&quot;</span><span class="sc">;</span></li><li></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;LWP requires the following modules to be installed:\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span> <span class="q">&quot;\\n&quot;</span><span class="cm">,</span> <span class="i">requires</span><span class="s">(</span><span class="q">&#39;LWP&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c">### allow M::L::C to peek in your %INC rather than just</span></li><li>    <span class="c">### scanning @INC</span></li><li>    <span class="i">$Module::Load::Conditional::CHECK_INC_HASH</span> = <span class="n">1</span><span class="sc">;</span></li><li></li><li>    <span class="c">### reset the &#39;can_load&#39; cache</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span> <span class="i">$Module::Load::Conditional::CACHE</span><span class="sc">;</span></li><li></li><li>    <span class="c">### don&#39;t have Module::Load::Conditional issue warnings --</span></li><li>    <span class="c">### default is &#39;1&#39;</span></li><li>    <span class="i">$Module::Load::Conditional::VERBOSE</span> = <span class="n">0</span><span class="sc">;</span></li><li></li><li>    <span class="c">### The last error that happened during a call to &#39;can_load&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$err</span> = <span class="i">$Module::Load::Conditional::ERROR</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Module/Load/Conditional.html
assignment (definition)	A			Perl Glossary							<section class="prog__container"><p>An <b>operator</b> whose assigned mission in life is to change the value of a <b>variable</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#assignment
Cannot compress integer in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) An argument to pack(&quot;w&quot;,...) was too large to compress. The BER compressed integer format can only be used with positive integers, and you attempted to compress a very large number (&gt; 1e308). See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-compress-integer-in-pack
extension (definition)	A			Perl Glossary							<section class="prog__container"><p>A Perl module that also pulls in <b>compiled</b> C or C++ code. More generally, any experimental option that can be <b>compiled</b> into Perl, such as multithreading.</p></section>	http://perldoc.perl.org/perlglossary.html#extension
How can I find the Julian Day?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy and Dave Cross)</p><p>You can use the <span href="http://perldoc.perl.org/Time/Piece.html">Time::Piece</span> module, part of the Standard Library, which can convert a date/time to a Julian Day:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">MTime::Piece</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;print localtime-&gt;julian_day&#39;</span></li><li>    <span class="n">2455607.7959375</span></li></ol></pre><p>Or the modified Julian Day:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">MTime::Piece</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;print localtime-&gt;mjd&#39;</span></li><li>    <span class="n">55607.2961226851</span></li></ol></pre><p>Or even the day of the year (which is what some people think of as a Julian day):</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">MTime::Piece</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;print localtime-&gt;yday&#39;</span></li><li>    <span class="n">45</span></li></ol></pre><p>You can also do the same things with the <span href="http://search.cpan.org/perldoc/DateTime">DateTime</span> module:</p><pre class="verbatim"><ol><li>    <span class="i">$ perl</span> -<span class="w">MDateTime</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span><span class="q">&#39;print DateTime-&gt;today-&gt;jd&#39;</span></li><li>    <span class="n">2453401.5</span></li><li>    <span class="i">$ perl</span> -<span class="w">MDateTime</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span><span class="q">&#39;print DateTime-&gt;today-&gt;mjd&#39;</span></li><li>    <span class="n">53401</span></li><li>    <span class="i">$ perl</span> -<span class="w">MDateTime</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span><span class="q">&#39;print DateTime-&gt;today-&gt;doy&#39;</span></li><li>    <span class="n">31</span></li></ol></pre><p>You can use the <span href="http://search.cpan.org/perldoc/Time::JulianDay">Time::JulianDay</span> module available on CPAN. Ensure that you really want to find a Julian day, though, as many people have different ideas about Julian days (see <span href="http://www.hermetic.ch/cal_stud/jdn.htm">http://www.hermetic.ch/cal_stud/jdn.htm</span> for instance):</p><pre class="verbatim"><ol><li>    <span class="i">$  perl</span> -<span class="w">MTime::JulianDay</span> -<span class="l_k" href="http://perldoc.perl.org/functions/le.html">le</span> <span class="q">&#39;print local_julian_day( time )&#39;</span></li><li>    <span class="n">55608</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-find-the-Julian-Day%3f
Hexadecimal float: exponent underflow	A			Perl Diagnostics							<section class="prog__container"><p>(W overflow) The hexadecimal floating point has a smaller exponent than the floating point supports.</p></section>	http://perldoc.perl.org/perldiag.html#Hexadecimal-float%3a-exponent-underflow
Character in '%c' format wrapped in unpack	A			Perl Diagnostics							<section class="prog__container"><p>(W unpack) You tried something like</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;H&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{2a1}&quot;</span><span class="s">)</span></li></ol></pre><p>where the format expects to process a byte (a character with a value below 256), but a higher value was provided instead.  Perl uses the value modulus 256 instead, as if you had provided:</p><pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;H&quot;</span><span class="cm">,</span> <span class="q">&quot;\\x{a1}&quot;</span><span class="s">)</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Character-in-'%25c'-format-wrapped-in-unpack
capture variables (definition)	A			Perl Glossary							<section class="prog__container"><p>The variables—such as <code class="inline"><span class="i">$1</span></code>  and <code class="inline"><span class="i">$2</span></code> , and <code class="inline"><span class="i">%+</span></code>  and <code class="inline"><span class="i">%–</span> </code> —that hold the text remembered in a pattern match. See Camel chapter 5, “Pattern Matching”.</p></section>	http://perldoc.perl.org/perlglossary.html#capture-variables
Complex regular subexpression recursion limit (%d) exceeded	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) The regular expression engine uses recursion in complex situations where back-tracking is required.  Recursion depth is limited to 32766, or perhaps less in architectures where the stack cannot grow arbitrarily.  (&quot;Simple&quot; and &quot;medium&quot; situations are handled without recursion and are not subject to a limit.)  Try shortening the string under examination; looping in Perl code (e.g. with <code class="inline">while</code> ) rather than in the regular expression engine; or rewriting the regular expression so that it is simpler or backtracks less.  (See <span href="http://perldoc.perl.org/perlfaq2.html">perlfaq2</span> for information on <i>Mastering Regular Expressions</i>.)</p></section>	http://perldoc.perl.org/perldiag.html#Complex-regular-subexpression-recursion-limit-(%25d)-exceeded
code generator (definition)	A			Perl Glossary							<section class="prog__container"><p>A system that writes code for you in a low-level language, such as code to implement the backend of a compiler. See <b>program generator</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#code-generator
pos (function)	A			Perl Functions\nPerl Regular expressions and pattern matching							<section class="prog__container"><pre>pos SCALAR<br>pos</pre><p>Returns the offset of where the last <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m//g</span></code> search left off for the variable in question (<code class="inline"><span class="i">$_</span></code>  is used when the variable is not specified).  Note that 0 is a valid match offset.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> indicates that the search position is reset (usually due to match failure, but can also be because no match has yet been run on the scalar).</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> directly accesses the location used by the regexp engine to store the offset, so assigning to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> will change that offset, and so will also influence the <code class="inline">\\<span class="w">G</span></code>  zero-width assertion in regular expressions.  Both of these effects take place for the next match, so you can&#39;t affect the position with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> during the current match, such as in <code class="inline"><span class="s">(</span><span class="q">?{pos() = 5})</span></code>  or <code class="inline"><span class="q">s//pos() = 5/e</span></code> .</p><p>Setting <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> also resets the <i>matched with zero-length</i> flag, described under <span href="http://perldoc.perl.org/perlre.html#Repeated-Patterns-Matching-a-Zero-length-Substring">Repeated Patterns Matching a Zero-length Substring in perlre</span>.</p><p>Because a failed <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/m.html">m//gc</span></code> match doesn&#39;t reset the offset, the return from <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pos.html">pos</span></code> won&#39;t change either in this case.  See <span href="http://perldoc.perl.org/perlre.html">perlre</span> and <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p></section>	http://perldoc.perl.org/functions/pos.html
How do I add a directory to my include path (@INC) at runtime?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Here are the suggested ways of modifying your include path, including environment variables, run-time switches, and in-code statements:</p><p>The last is particularly useful because it knows about machine-dependent architectures. The <code class="inline"><span class="w">lib</span>.<span class="w">pm</span></code>  pragmatic module was first included with the 5.002 release of Perl.</p></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f
Net::Time (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::Time - time and daytime network client interface</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Time</span> <span class="q">qw(inet_time inet_daytime)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_time</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>          <span class="c"># use default host from Net::Config</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_time</span><span class="s">(</span><span class="q">&#39;localhost&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_time</span><span class="s">(</span><span class="q">&#39;localhost&#39;</span><span class="cm">,</span> <span class="q">&#39;tcp&#39;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_daytime</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>       <span class="c"># use default host from Net::Config</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_daytime</span><span class="s">(</span><span class="q">&#39;localhost&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">inet_daytime</span><span class="s">(</span><span class="q">&#39;localhost&#39;</span><span class="cm">,</span> <span class="q">&#39;tcp&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/Time.html
TAP::Parser::Scheduler (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Scheduler - Schedule tests during parallel testing</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Scheduler</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Scheduler.html
panic: del_backref	A			Perl Diagnostics							<section class="prog__container"><p>(P) Failed an internal consistency check while trying to reset a weak reference.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-del_backref
Explicit blessing to '' (assuming package main)	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You are blessing a reference to a zero length string.  This has the effect of blessing the reference into the package main.  This is usually not what you want.  Consider providing a default target package, e.g. bless($ref, $p || &#39;MyPackage&#39;);</p></section>	http://perldoc.perl.org/perldiag.html#Explicit-blessing-to-''-(assuming-package-main)
Test::Simple (module)	A			Perl Standard Modules		[[Test::More]]					<section class="prog__container"><p>Test::Simple - Basic utilities for writing tests.</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Test::Simple</span> <span class="w">tests</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="sc">;</span></li><li></li><li>  <span class="i">ok</span><span class="s">(</span> <span class="i">$foo</span> eq <span class="i">$bar</span><span class="cm">,</span> <span class="q">&#39;foo is bar&#39;</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Test/Simple.html
@_ (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>Within a subroutine the array <code class="inline"><span class="i">@_</span></code>  contains the parameters passed to that subroutine.  Inside a subroutine, <code class="inline"><span class="i">@_</span></code>  is the default array for the array operators <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/unshift.html">unshift</span></code>.</p><p>See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p></section>	http://perldoc.perl.org/perlvar.html#%40_
-U	A			Perl Command-Line Switches							<section class="prog__container"><p>allows Perl to do unsafe operations.  Currently the only &quot;unsafe&quot; operations are attempting to unlink directories while running as superuser and running setuid programs with fatal taint checks turned into warnings. Note that warnings must be enabled along with this option to actually <i>generate</i> the taint-check warnings.</p></section>	http://perldoc.perl.org/perlrun.html#*-U*
Sequence (?%c... not terminated in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) A named group of the form <code class="inline"><span class="s">(</span><span class="q">?&#39;...&#39;)</span></code>  or <code class="inline"><span class="s">(</span><span class="q">?&lt;...&gt;)</span></code>  was missing the final closing quote or angle bracket.  The &lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3f%25c...-not-terminated-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
IPC::Msg (module)	A			Perl Standard Modules		[[IPC::SysV]]\n[[Class::Struct]]					<section class="prog__container"><p>IPC::Msg - SysV Msg IPC object class</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::SysV</span> <span class="q">qw(IPC_PRIVATE S_IRUSR S_IWUSR)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IPC::Msg</span><span class="sc">;</span></li><li></li><li>    <span class="i">$msg</span> = <span class="w">IPC::Msg</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">IPC_PRIVATE</span><span class="cm">,</span> <span class="w">S_IRUSR</span> | <span class="w">S_IWUSR</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$msg</span><span class="i">-&gt;snd</span><span class="s">(</span><span class="i">$msgtype</span><span class="cm">,</span> <span class="i">$msgdata</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$msg</span><span class="i">-&gt;rcv</span><span class="s">(</span><span class="i">$buf</span><span class="cm">,</span> <span class="n">256</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$ds</span> = <span class="i">$msg</span><span class="i">-&gt;stat</span><span class="sc">;</span></li><li></li><li>    <span class="i">$msg</span><span class="i">-&gt;remove</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/IPC/Msg.html
TAP::Parser::Multiplexer (module)	A			Perl Standard Modules							<section class="prog__container"><p>TAP::Parser::Multiplexer - Multiplex multiple TAP::Parsers</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">TAP::Parser::Multiplexer</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$mux</span> = <span class="w">TAP::Parser::Multiplexer</span><span class="w">-&gt;new</span><span class="sc">;</span></li><li>    <span class="i">$mux</span><span class="i">-&gt;add</span><span class="s">(</span> <span class="i">$parser1</span><span class="cm">,</span> <span class="i">$stash1</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$mux</span><span class="i">-&gt;add</span><span class="s">(</span> <span class="i">$parser2</span><span class="cm">,</span> <span class="i">$stash2</span> <span class="s">)</span><span class="sc">;</span></li><li>    while <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span> <span class="i">$parser</span><span class="cm">,</span> <span class="i">$stash</span><span class="cm">,</span> <span class="i">$result</span> <span class="s">)</span> = <span class="i">$mux</span><span class="i">-&gt;next</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="c"># do stuff</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/TAP/Parser/Multiplexer.html
endprotoent (function)	A			Perl Functions\nPerl Fetching network info							<section class="prog__container"><pre>endprotoent</pre>Be done using protocols file.</section>	http://perldoc.perl.org/functions/endprotoent.html
Character in 'C' format wrapped in pack	A			Perl Diagnostics							<section class="prog__container"><p>(W pack) You said</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;C&quot;</span><span class="cm">,</span> <span class="i">$x</span><span class="s">)</span></li></ol></pre><p>where $x is either less than 0 or more than 255; the <code class="inline"><span class="q">&quot;C&quot;</span></code>  format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/pack.html">pack</span><span class="s">(</span><span class="q">&quot;C&quot;</span><span class="cm">,</span> <span class="i">$x</span> &amp; <span class="n">255</span><span class="s">)</span></li></ol></pre><p>If you actually want to pack Unicode codepoints, use the <code class="inline"><span class="q">&quot;U&quot;</span></code>  format instead.</p></section>	http://perldoc.perl.org/perldiag.html#Character-in-'C'-format-wrapped-in-pack
Can't call mro_method_changed_in() on anonymous symbol table	A			Perl Diagnostics							<section class="prog__container"><p>(F) An XS module tried to call <code class="inline"><span class="w">mro_method_changed_in</span></code>  on a hash that was not attached to the symbol table.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-call-mro_method_changed_in()-on-anonymous-symbol-table
No directory specified for -I	A			Perl Diagnostics							<section class="prog__container"><p>(F) The <b>-I</b> command-line switch requires a directory name as part of the <i>same</i> argument.  Use <b>-Ilib</b>, for instance.  <b>-I lib</b> won&#39;t work.</p></section>	http://perldoc.perl.org/perldiag.html#No-directory-specified-for--I
panic: utf16_to_utf8_reversed: odd bytelen	A			Perl Diagnostics							<section class="prog__container"><p>(P) Something tried to call utf16_to_utf8_reversed with an odd (as opposed to even) byte length.</p></section>	http://perldoc.perl.org/perldiag.html#panic%3a-utf16_to_utf8_reversed%3a-odd-bytelen
exp (function)	A			Perl Functions\nPerl Numeric functions							<section class="prog__container"><pre>exp EXPR<br>exp</pre><p>Returns <i>e</i> (the natural logarithm base) to the power of EXPR. If EXPR is omitted, gives <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exp.html">exp($_)</span></code>.</p></section>	http://perldoc.perl.org/functions/exp.html
Net::Domain (module)	A			Perl Standard Modules							<section class="prog__container"><p>Net::Domain - Attempt to evaluate the current host&#39;s internet name and domain</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Net::Domain</span> <span class="q">qw(hostname hostfqdn hostdomain domainname)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Net/Domain.html
What's the difference between and?	A			Perl FAQs\nPerl Perl Unicode FAQ							<section class="prog__container"><p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is the official standard. <code class="inline"><span class="w">utf8</span></code>  is Perl&#39;s way of being liberal in what it accepts. If you have to communicate with things that aren&#39;t so liberal, you may want to consider using <code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code> . If you have to communicate with things that are too liberal, you may have to use <code class="inline"><span class="w">utf8</span></code> . The full explanation is in <span href="http://perldoc.perl.org/Encode.html">Encode</span>.</p><p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is internally known as <code class="inline"><span class="w">utf</span>-<span class="n">8</span>-<span class="w">strict</span></code> . The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</p><p>For example, utf8 can be used for code points that don&#39;t exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see <span href="http://perldoc.perl.org/Encode.html#Handling-Malformed-Data">Handling Malformed Data in Encode</span> for more ways of dealing with this.)</p><p>Okay, if you insist: the &quot;internal format&quot; is utf8, not UTF-8. (When it&#39;s not some other encoding.)</p></section>	http://perldoc.perl.org/perlunifaq.html#What's-the-difference-between-UTF-8-and-utf8%3f
Sequence (?R) not terminated in regex m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) An <code class="inline">(?R)</code> or <code class="inline">(?0)</code> sequence in a regular expression was missing the final parenthesis.</p></section>	http://perldoc.perl.org/perldiag.html#Sequence-(%3fR)-not-terminated-in-regex-m%2f%25s%2f
lcfirst (function)	A			Perl Functions\nPerl Functions for SCALARs or strings							<section class="prog__container"><pre>lcfirst EXPR<br>lcfirst</pre><p>Returns the value of EXPR with the first character lowercased.  This is the internal function implementing the <code class="inline">\\<span class="w">l</span></code>  escape in double-quoted strings.</p><p>If EXPR is omitted, uses <code class="inline"><span class="i">$_</span></code> .</p><p>This function behaves the same way under various pragmata, such as in a locale, as <span href="http://perldoc.perl.org/functions/lc.html">lc</span> does.</p></section>	http://perldoc.perl.org/functions/lcfirst.html
Time::Local (module)	A			Perl Standard Modules							<section class="prog__container"><p>Time::Local - efficiently compute time from local and GMT time</p> <pre class="verbatim"><ol><li>    <span class="i">$time</span> = <span class="i">timelocal</span><span class="s">(</span> <span class="i">$sec</span><span class="cm">,</span> <span class="i">$min</span><span class="cm">,</span> <span class="i">$hour</span><span class="cm">,</span> <span class="i">$mday</span><span class="cm">,</span> <span class="i">$mon</span><span class="cm">,</span> <span class="i">$year</span> <span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$time</span> = <span class="i">timegm</span><span class="s">(</span> <span class="i">$sec</span><span class="cm">,</span> <span class="i">$min</span><span class="cm">,</span> <span class="i">$hour</span><span class="cm">,</span> <span class="i">$mday</span><span class="cm">,</span> <span class="i">$mon</span><span class="cm">,</span> <span class="i">$year</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/Local.html
link (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>link OLDFILE,NEWFILE</pre><p>Creates a new filename linked to the old filename.  Returns true for success, false otherwise.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#link">link in perlport</span>.</p></section>	http://perldoc.perl.org/functions/link.html
$^W (variable)	A			Perl Variables\nPerl Error Variables							<section class="prog__container"><p>The current value of the warning switch, initially true if <b>-w</b> was used, false otherwise, but directly modifiable.</p><p>See also <span href="http://perldoc.perl.org/warnings.html">warnings</span>.</p><p>Mnemonic: related to the <b>-w</b> switch.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eW
Pod::Simple::Debug (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[http://interglacial.com/tpj/21/]]					<section class="prog__container"><p>Pod::Simple::Debug -- put Pod::Simple into trace/debug mode</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Simple::Debug</span> <span class="s">(</span><span class="n">5</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># or some integer</span></li></ol></pre><p>Or:</p><pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$debuglevel</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Simple::Debug</span> <span class="s">(</span>\\<span class="i">$debuglevel</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li> ...<span class="w">some</span> <span class="w">stuff</span> <span class="w">that</span> <span class="w">uses</span> <span class="w">Pod::Simple</span> <span class="w">to</span> <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">stuff</span><span class="cm">,</span> <span class="w">but</span> <span class="w">which</span></li><li>  <span class="w">you</span> <span class="w">don&#39;t</span> <span class="w">want</span> <span class="w">debug</span> <span class="w">output</span> <span class="w">from</span>...</li><li></li><li> <span class="i">$debug_level</span> = <span class="n">4</span><span class="sc">;</span></li><li> ...<span class="w">some</span> <span class="w">stuff</span> <span class="w">that</span> <span class="w">uses</span> <span class="w">Pod::Simple</span> <span class="w">to</span> <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="w">stuff</span><span class="cm">,</span> <span class="w">but</span> <span class="w">which</span></li><li>  <span class="w">you</span> <span class="w">DO</span> <span class="w">want</span> <span class="w">debug</span> <span class="w">output</span> <span class="w">from</span>...</li><li></li><li> <span class="i">$debug_level</span> = <span class="n">0</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/Debug.html
Encode::MIME::Name (module)	A			Perl Standard Modules		[[I18N::Charset]]					<section class="prog__container"><p>Encode::MIME::NAME -- internally used by Encode</p> </section>	http://perldoc.perl.org/Encode/MIME/Name.html
Pod::Select (module)	A			Perl Standard Modules		[[Pod::Parser]]					<section class="prog__container"><p>Pod::Select, podselect() - extract selected sections of POD from input</p> <pre class="verbatim"><ol><li>    use Pod::Select;</li><li></li><li>    ## Select all the POD sections for each file in @filelist</li><li>    ## and print the result on standard output.</li><li>    podselect(@filelist);</li><li></li><li>    ## Same as above, but write to tmp.out</li><li>    podselect({-output =&gt; &quot;tmp.out&quot;}, @filelist):</li><li></li><li>    ## Select from the given filelist, only those POD sections that are</li><li>    ## within a 1st level section named any of: NAME, SYNOPSIS, OPTIONS.</li><li>    podselect({-sections =&gt; [&quot;NAME|SYNOPSIS&quot;, &quot;OPTIONS&quot;]}, @filelist):</li><li></li><li>    ## Select the &quot;DESCRIPTION&quot; section of the PODs from STDIN and write</li><li>    ## the result to STDERR.</li><li>    podselect({-output =&gt; &quot;&gt;&amp;STDERR&quot;, -sections =&gt; [&quot;DESCRIPTION&quot;]}, \\*STDIN);</li></ol></pre><p>or</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Pod::Select</span><span class="sc">;</span></li><li></li><li>    <span class="c">## Create a parser object for selecting POD sections from the input</span></li><li>    <span class="i">$parser</span> = <span class="w">new</span> <span class="i">Pod::Select</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c">## Select all the POD sections for each file in @filelist</span></li><li>    <span class="c">## and print the result to tmp.out.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span><span class="s">(</span><span class="q">&quot;&lt;&amp;STDIN&quot;</span><span class="cm">,</span> <span class="q">&quot;tmp.out&quot;</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="c">## Select from the given filelist, only those POD sections that are</span></li><li>    <span class="c">## within a 1st level section named any of: NAME, SYNOPSIS, OPTIONS.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;select</span><span class="s">(</span><span class="q">&quot;NAME|SYNOPSIS&quot;</span><span class="cm">,</span> <span class="q">&quot;OPTIONS&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    for <span class="s">(</span><span class="i">@filelist</span><span class="s">)</span> <span class="s">{</span> <span class="i">$parser</span><span class="i">-&gt;parse_from_file</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span></li><li></li><li>    <span class="c">## Select the &quot;DESCRIPTION&quot; and &quot;SEE ALSO&quot; sections of the PODs from</span></li><li>    <span class="c">## STDIN and write the result to STDERR.</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;select</span><span class="s">(</span><span class="q">&quot;DESCRIPTION&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;add_selection</span><span class="s">(</span><span class="q">&quot;SEE ALSO&quot;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$parser</span><span class="i">-&gt;parse_from_filehandle</span><span class="s">(</span>\\<span class="i">*STDIN</span><span class="cm">,</span> \\<span class="i">*STDERR</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Select.html
$^P (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>The internal variable for debugging support.  The meanings of the various bits are subject to change, but currently indicate:</p><p>Some bits may be relevant at compile-time only, some at run-time only.  This is a new mechanism and the details may change. See also <span href="http://perldoc.perl.org/perldebguts.html">perldebguts</span>.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eP
Binary "=~" operator	A			Perl Operators\nPerl Binding Operators							<section class="prog__container">Binary &quot;=~&quot; binds a scalar expression to a pattern match. Certain operations search or modify the string $_ by default. This operator makes that kind of operation work on some other string. The right argument is a search pattern, substitution, or transliteration. The left argument is what is supposed to be searched, substituted, or transliterated instead of the default $_. When used in scalar context, the return value generally indicates the success of the operation. The exceptions are substitution ( s/// ) and transliteration ( y/// ) with the /r (non-destructive) option, which cause the r eturn value to be the result of the substitution. Behavior in list context depends on the particular operator. See Regexp Quote-Like Operators for details and perlretut for examples using these operators.</section>	http://perldoc.perl.org/perlop.html#Binding-Operators
ExtUtils::MM_NW5 (module)	A			Perl Standard Modules							<section class="prog__container"><p>ExtUtils::MM_NW5 - methods to override UN*X behaviour in ExtUtils::MakeMaker</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">ExtUtils::MM_NW5</span><span class="sc">;</span> <span class="c"># Done internally by ExtUtils::MakeMaker if needed</span></li></ol></pre></section>	http://perldoc.perl.org/ExtUtils/MM_NW5.html
rewinddir (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>rewinddir DIRHANDLE</pre><p>Sets the current position to the beginning of the directory for the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code> routine on DIRHANDLE.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#rewinddir">rewinddir in perlport</span>.</p></section>	http://perldoc.perl.org/functions/rewinddir.html
shm%s not implemented	A			Perl Diagnostics							<section class="prog__container"><p>(F) You don&#39;t have System V shared memory IPC on your system.</p></section>	http://perldoc.perl.org/perldiag.html#shm%25s-not-implemented
Opening dirhandle %s also as a file	A			Perl Diagnostics							<section class="prog__container"><p>(D io, deprecated) You used open() to associate a filehandle to a symbol (glob or scalar) that already holds a dirhandle. Although legal, this idiom might render your code confusing and is deprecated.</p></section>	http://perldoc.perl.org/perldiag.html#Opening-dirhandle-%25s-also-as-a-file
\N{NAME} must be resolved by the lexer in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) When compiling a regex pattern, an unresolved named character or sequence was encountered.  This can happen in any of several ways that bypass the lexer, such as using single-quotish context, or an extra backslash in double-quotish:</p><pre class="verbatim"><ol><li>    <span class="i">$re</span> = <span class="q">&#39;\\N{SPACE}&#39;</span><span class="sc">;</span>&#09;<span class="c"># Wrong!</span></li><li>    <span class="i">$re</span> = <span class="q">&quot;\\\\N{SPACE}&quot;</span><span class="sc">;</span>&#09;<span class="c"># Wrong!</span></li><li>    <span class="q">/$re/</span><span class="sc">;</span></li></ol></pre><p>Instead, use double-quotes with a single backslash:</p><pre class="verbatim"><ol><li>    <span class="i">$re</span> = <span class="q">&quot;\\N{SPACE}&quot;</span><span class="sc">;</span>&#09;<span class="c"># ok</span></li><li>    <span class="q">/$re/</span><span class="sc">;</span></li></ol></pre><p>The lexer can be bypassed as well by creating the pattern from smaller components:</p><pre class="verbatim"><ol><li>    <span class="i">$re</span> = <span class="q">&#39;\\N&#39;</span><span class="sc">;</span></li><li>    <span class="q">/${re}{SPACE}/</span><span class="sc">;</span>&#09;<span class="c"># Wrong!</span></li></ol></pre><p>It&#39;s not a good idea to split a construct in the middle like this, and it doesn&#39;t work here.  Instead use the solution above.</p><p>Finally, the message also can happen under the <code class="inline">/x</code> regex modifier when the <code class="inline">\\<span class="w">N</span></code>  is separated by spaces from the <code class="inline">{</code>, in which case, remove the spaces.</p><pre class="verbatim"><ol><li>    <span class="q">/\\N {SPACE}/x</span><span class="sc">;</span>&#09;<span class="c"># Wrong!</span></li><li>    <span class="q">/\\N{SPACE}/x</span><span class="sc">;</span>&#09;<span class="c"># ok</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#%5cN%7bNAME%7d-must-be-resolved-by-the-lexer-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Exiting format via %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exiting) You are exiting a format by unconventional means, such as a goto, or a loop control statement.</p></section>	http://perldoc.perl.org/perldiag.html#Exiting-format-via-%25s
PERL_SIGNALS illegal: "%s"	A			Perl Diagnostics							<section class="prog__container"><p>(X) See <span href="http://perldoc.perl.org/perlrun.html#PERL_SIGNALS">PERL_SIGNALS in perlrun</span> for legal values.</p></section>	http://perldoc.perl.org/perldiag.html#PERL_SIGNALS-illegal%3a-%22%25s%22
__PACKAGE__ (function)	A			Perl Functions							<section class="prog__container"><pre>__PACKAGE__</pre><p>A special token that returns the name of the package in which it occurs.</p></section>	http://perldoc.perl.org/functions/__PACKAGE__.html
global destruction (definition)	A			Perl Glossary							<section class="prog__container"><p>The <b>garbage collection</b> of globals (and the running of any associated object destructors) that takes place when a Perl <b>interpreter</b> is being shut down. Global destruction should not be confused with the Apocalypse, except perhaps when it should.</p></section>	http://perldoc.perl.org/perlglossary.html#global-destruction
Range iterator outside integer range	A			Perl Diagnostics							<section class="prog__container"><p>(F) One (or both) of the numeric arguments to the range operator &quot;..&quot; are outside the range which can be represented by integers internally. One possible workaround is to force Perl to use magical string increment by prepending &quot;0&quot; to your numbers.</p></section>	http://perldoc.perl.org/perldiag.html#Range-iterator-outside-integer-range
no (function)	A			Perl Functions\nPerl Keywords related to perl modules							<section class="prog__container"><pre>no MODULE VERSION LIST<br>no MODULE VERSION<br>no MODULE LIST<br>no MODULE<br>no VERSION</pre><p>See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> function, of which <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span></code> is the opposite.</p></section>	http://perldoc.perl.org/functions/no.html
regular expression modifier (definition)	A			Perl Glossary							<section class="prog__container"><p>An option on a pattern or substitution, such as <code class="inline">/i</code> to render the pattern case- insensitive.</p></section>	http://perldoc.perl.org/perlglossary.html#regular-expression-modifier
DBM (definition)	A			Perl Glossary							<section class="prog__container"><p>Stands for “Database Management” routines, a set of routines that emulate an <b>associative array</b> using disk files. The routines use a dynamic hashing scheme to locate any entry with only two disk accesses. DBM files allow a Perl program to keep a persistent <b>hash</b> across multiple invocations. You can <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> your hash variables to various DBM implementations.</p></section>	http://perldoc.perl.org/perlglossary.html#DBM
Odd number of arguments for overload::constant	A			Perl Diagnostics							<section class="prog__container"><p>(W overload) The call to overload::constant contained an odd number of arguments.  The arguments should come in pairs.</p></section>	http://perldoc.perl.org/perldiag.html#Odd-number-of-arguments-for-overload%3a%3aconstant
Modification of a read-only value attempted	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried, directly or indirectly, to change the value of a constant.  You didn&#39;t, of course, try &quot;2 = 1&quot;, because the compiler catches that.  But an easy way to do the same thing is:</p><pre class="verbatim"><ol><li><span name="mod"></span>    sub <span class="m">mod</span> <span class="s">{</span> <span class="i">$_</span>[<span class="n">0</span>] = <span class="n">1</span> <span class="s">}</span></li><li>    <span class="i">mod</span><span class="s">(</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Another way is to assign to a substr() that&#39;s off the end of the string.</p><p>Yet another way is to assign to a <code class="inline">foreach</code>  loop <i>VAR</i> when <i>VAR</i> is aliased to a constant in the look <i>LIST</i>:</p><pre class="verbatim"><ol><li>    <span class="i">$x</span> = <span class="n">1</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$n</span> <span class="s">(</span><span class="i">$x</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="i">$n</span> *= <span class="n">2</span><span class="sc">;</span> <span class="c"># modifies the $x, but fails on attempt to</span></li><li>    <span class="s">}</span>            <span class="c"># modify the 2</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Modification-of-a-read-only-value-attempted
pid %x not a child	A			Perl Diagnostics							<section class="prog__container"><p>(W exec) A warning peculiar to VMS.  Waitpid() was asked to wait for a process which isn&#39;t a subprocess of the current process.  While this is fine from VMS&#39; perspective, it&#39;s probably not what you intended.</p></section>	http://perldoc.perl.org/perldiag.html#pid-%25x-not-a-child
Wide character (U+%X) in %s	A			Perl Diagnostics							<section class="prog__container"><p>(W locale) While in a single-byte locale (<i>i.e.</i>, a non-UTF-8 one), a multi-byte character was encountered.   Perl considers this character to be the specified Unicode code point.  Combining non-UTF-8 locales and Unicode is dangerous.  Almost certainly some characters will have two different representations.  For example, in the ISO 8859-7 (Greek) locale, the code point 0xC3 represents a Capital Gamma.  But so also does 0x393.  This will make string comparisons unreliable.</p><p>You likely need to figure out how this multi-byte character got mixed up with your single-byte locale (or perhaps you thought you had a UTF-8 locale, but Perl disagrees).</p></section>	http://perldoc.perl.org/perldiag.html#Wide-character-(U%2b%25X)-in-%25s
standard input (definition)	A			Perl Glossary							<section class="prog__container"><p>The default input <b>stream</b> for your program, which if possible shouldn’t care where its data is coming from. Represented within a Perl program by the <b>filehandle</b> <code class="inline"><span class="w">STDIN</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#standard-input
Pattern subroutine nesting without pos change exceeded limit in regex	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used a pattern that uses too many nested subpattern calls without consuming any text.  Restructure the pattern so text is consumed before the nesting limit is exceeded.</p></section>	http://perldoc.perl.org/perldiag.html#Pattern-subroutine-nesting-without-pos-change-exceeded-limit-in-regex
Smart matching a non-overloaded object breaks encapsulation	A			Perl Diagnostics							<section class="prog__container"><p>(F) You should not use the <code class="inline">~~</code>  operator on an object that does not overload it: Perl refuses to use the object&#39;s underlying structure for the smart match.</p></section>	http://perldoc.perl.org/perldiag.html#Smart-matching-a-non-overloaded-object-breaks-encapsulation
"state" variable %s can't be in a package	A			Perl Diagnostics							<section class="prog__container"><p>(F) Lexically scoped variables aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front.  Use local() if you want to localize a package variable.</p></section>	http://perldoc.perl.org/perldiag.html#%22state%22-variable-%25s-can't-be-in-a-package
What modules and extensions are available for Perl? What is CPAN?	A			Perl FAQs\nPerl Obtaining and Learning about Perl							<section class="prog__container"><p>CPAN stands for Comprehensive Perl Archive Network, a multi-gigabyte archive replicated on hundreds of machines all over the world. CPAN contains tens of thousands of modules and extensions, source code and documentation, designed for <i>everything</i> from commercial database interfaces to keyboard/screen control and running large web sites.</p><p>You can search CPAN on <span href="http://metacpan.org">http://metacpan.org</span> or <span href="http://search.cpan.org/">http://search.cpan.org/</span>.</p><p>The master web site for CPAN is <span href="http://www.cpan.org/">http://www.cpan.org/</span>, <span href="http://www.cpan.org/SITES.html">http://www.cpan.org/SITES.html</span> lists all mirrors.</p><p>See the CPAN FAQ at <span href="http://www.cpan.org/misc/cpan-faq.html">http://www.cpan.org/misc/cpan-faq.html</span> for answers to the most frequently asked questions about CPAN.</p><p>The <span href="http://search.cpan.org/perldoc/Task::Kensho">Task::Kensho</span> module has a list of recommended modules which you should review as a good starting point.</p></section>	http://perldoc.perl.org/perlfaq2.html#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f
call by value (definition)	A			Perl Glossary		[[call by reference]]					<section class="prog__container"><p>An <b>argument</b>-passing mechanism in which the <b>formal arguments</b> refer to a copy of the <b>actual arguments</b>, and the <b>subroutine</b> cannot change the actual arguments by changing the formal arguments. </p></section>	http://perldoc.perl.org/perlglossary.html#call-by-value
laziness (definition)	A			Perl Glossary		[[impatience]]\n[[hubris]]					<section class="prog__container"><p>The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful, and then document what you wrote so you don’t have to answer so many questions about it. Hence, the first great virtue of a programmer. Also hence, this book. </p></section>	http://perldoc.perl.org/perlglossary.html#laziness
Malformed UTF-16 surrogate	A			Perl Diagnostics							<section class="prog__container"><p>(F) Perl thought it was reading UTF-16 encoded character data but while doing it Perl met a malformed Unicode surrogate.</p></section>	http://perldoc.perl.org/perldiag.html#Malformed-UTF-16-surrogate
Can't use %s for loop variable	A			Perl Diagnostics							<section class="prog__container"><p>(P) The parser got confused when trying to parse a <code class="inline">foreach</code>  loop.</p></section>	http://perldoc.perl.org/perldiag.html#Can't-use-%25s-for-loop-variable
telldir (function)	A			Perl Functions\nPerl Input and output functions							<section class="prog__container"><pre>telldir DIRHANDLE</pre><p>Returns the current position of the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/readdir.html">readdir</span></code> routines on DIRHANDLE. Value may be given to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/seekdir.html">seekdir</span></code> to access a particular location in a directory.  <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/telldir.html">telldir</span></code> has the same caveats about possible directory compaction as the corresponding system library routine.</p></section>	http://perldoc.perl.org/functions/telldir.html
Exiting substitution via %s	A			Perl Diagnostics							<section class="prog__container"><p>(W exiting) You are exiting a substitution by unconventional means, such as a return, a goto, or a loop control statement.</p></section>	http://perldoc.perl.org/perldiag.html#Exiting-substitution-via-%25s
How can I remove duplicate elements from a list or array?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>(contributed by brian d foy)</p><p>Use a hash. When you think the words &quot;unique&quot; or &quot;duplicated&quot;, think &quot;hash keys&quot;.</p><p>If you don&#39;t care about the order of the elements, you could just create the hash then extract the keys. It&#39;s not important how you create that hash: just that you use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> to get the unique elements.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%hash</span>   = <span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span> <span class="s">{</span> <span class="i">$_</span><span class="cm">,</span> <span class="n">1</span> <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li><li>    <span class="c"># or a hash slice: @hash{ @array } = ();</span></li><li>    <span class="c"># or a foreach: $hash{$_} = 1 foreach ( @array );</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@unique</span> = <span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span> <span class="i">%hash</span><span class="sc">;</span></li></ol></pre><p>If you want to use a module, try the <code class="inline"><span class="w">uniq</span></code>  function from <span href="http://search.cpan.org/perldoc/List::MoreUtils">List::MoreUtils</span>. In list context it returns the unique elements, preserving their order in the list. In scalar context, it returns the number of unique elements.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::MoreUtils</span> <span class="q">qw(uniq)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@unique</span> = <span class="i">uniq</span><span class="s">(</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">7</span> <span class="s">)</span><span class="sc">;</span> <span class="c"># 1,2,3,4,5,6,7</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$unique</span> = <span class="i">uniq</span><span class="s">(</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">7</span> <span class="s">)</span><span class="sc">;</span> <span class="c"># 7</span></li></ol></pre><p>You can also go through each element and skip the ones you&#39;ve seen before. Use a hash to keep track. The first time the loop sees an element, that element has no key in <code class="inline"><span class="i">%Seen</span></code> . The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> statement creates the key and immediately uses its value, which is <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, so the loop continues to the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span></code> and increments the value for that key. The next time the loop sees that same element, its key exists in the hash <i>and</i> the value for that key is true (since it&#39;s not 0 or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>), so the next skips that iteration and the loop goes to the next element.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@unique</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%seen</span>   = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/foreach.html">foreach</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$elem</span> <span class="s">(</span> <span class="i">@array</span> <span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span> <span class="l_k" href="http://perldoc.perl.org/functions/if.html">if</span> <span class="i">$seen</span>{ <span class="i">$elem</span> }++<span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/push.html">push</span> <span class="i">@unique</span><span class="cm">,</span> <span class="i">$elem</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>You can write this more briefly using a grep, which does the same thing.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">%seen</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@unique</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span> ! <span class="i">$seen</span>{ <span class="i">$_</span> }++ <span class="s">}</span> <span class="i">@array</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq4.html#How-can-I-remove-duplicate-elements-from-a-list-or-array%3f
Getopt::Long (module)	A			Perl Standard Modules							<section class="prog__container"><p>Getopt::Long - Extended processing of command line options</p> <pre class="verbatim"><ol><li>  <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Getopt::Long</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$data</span>   = <span class="q">&quot;file.dat&quot;</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$length</span> = <span class="n">24</span><span class="sc">;</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$verbose</span><span class="sc">;</span></li><li>  <span class="w">GetOptions</span> <span class="s">(</span><span class="q">&quot;length=i&quot;</span> <span class="cm">=&gt;</span> \\<span class="i">$length</span><span class="cm">,</span>    <span class="c"># numeric</span></li><li>              <span class="q">&quot;file=s&quot;</span>   <span class="cm">=&gt;</span> \\<span class="i">$data</span><span class="cm">,</span>      <span class="c"># string</span></li><li>              <span class="q">&quot;verbose&quot;</span>  <span class="cm">=&gt;</span> \\<span class="i">$verbose</span><span class="s">)</span>   <span class="c"># flag</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span><span class="s">(</span><span class="q">&quot;Error in command line arguments\\n&quot;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Getopt/Long.html
Unterminated attribute parameter in attribute list	A			Perl Diagnostics							<section class="prog__container"><p>(F) The lexer saw an opening (left) parenthesis character while parsing an attribute list, but the matching closing (right) parenthesis character was not found.  You may need to add (or remove) a backslash character to get your parentheses to balance.  See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Unterminated-attribute-parameter-in-attribute-list
continue (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>continue BLOCK<br>continue</pre><p>When followed by a BLOCK, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> is actually a flow control statement rather than a function.  If there is a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> BLOCK attached to a BLOCK (typically in a <code class="inline">while</code>  or <code class="inline">foreach</code> ), it is always executed just before the conditional is about to be evaluated again, just like the third part of a <code class="inline">for</code>  loop in C.  Thus it can be used to increment a loop variable, even when the loop has been continued via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> statement (which is similar to the C <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> statement).</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> may appear within a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> behave as if they had been executed within the main block.  So will <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, but since it will execute a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block, it may be more entertaining.</p><pre class="verbatim"><ol><li>    while <span class="s">(</span><span class="w">EXPR</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="c">### redo always comes here</span></li><li>        <span class="w">do_something</span><span class="sc">;</span></li><li>    <span class="s">}</span> <span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span> <span class="s">{</span></li><li>        <span class="c">### next always comes here</span></li><li>        <span class="w">do_something_else</span><span class="sc">;</span></li><li>        <span class="c"># then back the top to re-check EXPR</span></li><li>    <span class="s">}</span></li><li>    <span class="c">### last always comes here</span></li></ol></pre><p>Omitting the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> section is equivalent to using an empty one, logically enough, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code> goes directly back to check the condition at the top of the loop.</p><p>When there is no BLOCK, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> is a function that falls through the current <code class="inline">when</code>  or <code class="inline"><span class="w">default</span></code>  block instead of iterating a dynamically enclosing <code class="inline">foreach</code>  or exiting a lexically enclosing <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/given.html">given</span></code>. In Perl 5.14 and earlier, this form of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> was only available when the <code class="inline"><span class="q">&quot;switch&quot;</span></code>  feature was enabled. See <span href="http://perldoc.perl.org/feature.html">feature</span> and <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements in perlsyn</span> for more information.</p></section>	http://perldoc.perl.org/functions/continue.html
$^I (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The current value of the inplace-edit extension.  Use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> to disable inplace editing.</p><p>Mnemonic: value of <b>-i</b> switch.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eI
right shift (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>bit shift</b> that divides a number by some power of 2.</p></section>	http://perldoc.perl.org/perlglossary.html#right-shift
Use of reference "%s" as array index	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) You tried to use a reference as an array index; this probably isn&#39;t what you mean, because references in numerical context tend to be huge numbers, and so usually indicates programmer error.</p><p>If you really do mean it, explicitly numify your reference, like so: <code class="inline"><span class="i">$array</span>[<span class="n">0</span>+<span class="i">$ref</span>]</code> .  This warning is not given for overloaded objects, however, because you can overload the numification and stringification operators and then you presumably know what you are doing.</p></section>	http://perldoc.perl.org/perldiag.html#Use-of-reference-%22%25s%22-as-array-index
Cannot compress negative numbers in pack	A			Perl Diagnostics							<section class="prog__container"><p>(F) An argument to pack(&quot;w&quot;,...) was negative.  The BER compressed integer format can only be used with positive integers.  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Cannot-compress-negative-numbers-in-pack
sigil (definition)	A			Perl Glossary							<section class="prog__container"><p>A glyph used in magic. Or, for Perl, the symbol in front of a variable name, such as <code class="inline"><span class="i">$</span></code> , <code class="inline"><span class="i">@</span></code> , and <code class="inline"><span class="i">%</span></code> .</p></section>	http://perldoc.perl.org/perlglossary.html#sigil
/i regular expression modifier	A			Perl Regular Expression Modifiers							<section class="prog__container"><p>Do case-insensitive pattern matching.</p><p>If locale matching rules are in effect, the case map is taken from the current locale for code points less than 255, and from Unicode rules for larger code points.  However, matches that would cross the Unicode rules/non-Unicode rules boundary (ords 255/256) will not succeed.  See <span href="http://perldoc.perl.org/perllocale.html">perllocale</span>.</p><p>There are a number of Unicode characters that match multiple characters under <code class="inline">/i</code>.  For example, <code class="inline"><span class="w">LATIN</span> <span class="w">SMALL</span> <span class="w">LIGATURE</span> <span class="w">FI</span></code>  should match the sequence <code class="inline"><span class="w">fi</span></code> .  Perl is not currently able to do this when the multiple characters are in the pattern and are split between groupings, or when one or more are quantified.  Thus</p><pre class="verbatim"><ol><li> <span class="q">&quot;\\N{LATIN SMALL LIGATURE FI}&quot;</span> =~ <span class="q">/fi/i</span><span class="sc">;</span>          <span class="c"># Matches</span></li><li> <span class="q">&quot;\\N{LATIN SMALL LIGATURE FI}&quot;</span> =~ <span class="q">/[fi][fi]/i</span><span class="sc">;</span>    <span class="c"># Doesn&#39;t match!</span></li><li> <span class="q">&quot;\\N{LATIN SMALL LIGATURE FI}&quot;</span> =~ <span class="q">/fi*/i</span><span class="sc">;</span>         <span class="c"># Doesn&#39;t match!</span></li><li></li><li> <span class="c"># The below doesn&#39;t match, and it isn&#39;t clear what $1 and $2 would</span></li><li> <span class="c"># be even if it did!!</span></li><li> <span class="q">&quot;\\N{LATIN SMALL LIGATURE FI}&quot;</span> =~ <span class="q">/(f)(i)/i</span><span class="sc">;</span>      <span class="c"># Doesn&#39;t match!</span></li></ol></pre><p>Perl doesn&#39;t match multiple characters in a bracketed character class unless the character that maps to them is explicitly mentioned, and it doesn&#39;t match them at all if the character class is inverted, which otherwise could be highly confusing.  See <span href="http://perldoc.perl.org/perlrecharclass.html#Bracketed-Character-Classes">Bracketed Character Classes in perlrecharclass</span>, and <span href="http://perldoc.perl.org/perlrecharclass.html#Negation">Negation in perlrecharclass</span>.</p></section>	http://perldoc.perl.org/perlre.html#*i*
cache (definition)	A			Perl Glossary							<section class="prog__container"><p>A data repository. Instead of computing expensive answers several times, compute it once and save the result.</p></section>	http://perldoc.perl.org/perlglossary.html#cache
:const is not permitted on named subroutines	A			Perl Diagnostics							<section class="prog__container"><p>(F) The &quot;const&quot; attribute causes an anonymous subroutine to be run and its value captured at the time that it is cloned.  Named subroutines are not cloned like this, so the attribute does not make sense on them.</p></section>	http://perldoc.perl.org/perldiag.html#%3aconst-is-not-permitted-on-named-subroutines
AV (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for “array value”, which refers to one of Perl’s internal data types that holds an <b>array</b>. The <code class="inline"><span class="w">AV</span></code>  type is a subclass of <b>SV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#AV
Why does defined() return true on empty arrays and hashes?	A			Perl FAQs\nPerl Data Manipulation							<section class="prog__container"><p>The short story is that you should probably only use defined on scalars or functions, not on aggregates (arrays and hashes). See <span href="http://perldoc.perl.org/functions/defined.html">defined</span> in the 5.004 release or later of Perl for more detail.</p></section>	http://perldoc.perl.org/perlfaq4.html#Why-does-defined()-return-true-on-empty-arrays-and-hashes%3f
Pod::Simple::SimpleTree (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[perllol]]\n[[The Tree subsubsection in XML::Parser]]					<section class="prog__container"><p>Pod::Simple::SimpleTree -- parse Pod into a simple parse tree</p> <pre class="verbatim"><ol><li>  <span class="i">% cat</span> <span class="w">ptest</span>.<span class="w">pod</span></li><li></li><li>  =<span class="w">head1</span> <span class="w">PIE</span></li><li></li><li>  <span class="w">I</span> <span class="w">like</span> <span class="w">B</span><span class="q">&lt;pie&gt;</span>!</li><li></li><li>  <span class="i">% perl</span> -<span class="w">MPod::Simple::SimpleTree</span> -<span class="w">MData::Dumper</span> -e \\</li><li>     <span class="q">&quot;print Dumper(Pod::Simple::SimpleTree-&gt;new-&gt;parse_file(shift)-&gt;root)&quot;</span> \\</li><li>     <span class="w">ptest</span>.<span class="w">pod</span></li><li></li><li>  <span class="i">$VAR1</span> = <span class="s">[</span></li><li>            <span class="q">&#39;Document&#39;</span><span class="cm">,</span></li><li>            <span class="s">{</span> <span class="q">&#39;start_line&#39;</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span></li><li>            <span class="s">[</span></li><li>              <span class="q">&#39;head1&#39;</span><span class="cm">,</span></li><li>              <span class="s">{</span> <span class="q">&#39;start_line&#39;</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span></li><li>              <span class="q">&#39;PIE&#39;</span></li><li>            <span class="s">]</span><span class="cm">,</span></li><li>            <span class="s">[</span></li><li>              <span class="q">&#39;Para&#39;</span><span class="cm">,</span></li><li>              <span class="s">{</span> <span class="q">&#39;start_line&#39;</span> <span class="cm">=&gt;</span> <span class="n">3</span> <span class="s">}</span><span class="cm">,</span></li><li>              <span class="q">&#39;I like &#39;</span><span class="cm">,</span></li><li>              <span class="s">[</span></li><li>                <span class="q">&#39;B&#39;</span><span class="cm">,</span></li><li>                <span class="s">{</span><span class="s">}</span><span class="cm">,</span></li><li>                <span class="q">&#39;pie&#39;</span></li><li>              <span class="s">]</span><span class="cm">,</span></li><li>              <span class="q">&#39;!&#39;</span></li><li>            <span class="s">]</span></li><li>          <span class="s">]</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Pod/Simple/SimpleTree.html
How can I read in an entire file all at once?	A			Perl FAQs\nPerl Files and Formats							<section class="prog__container"><p>The customary Perl approach for processing all the lines in a file is to do so one line at a time:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$input</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="i">$file</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open $file: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/while.html">while</span> <span class="s">(</span><span class="q">&lt;$input&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/chomp.html">chomp</span><span class="sc">;</span></li><li>        <span class="c"># do something with $_</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/close.html">close</span> <span class="i">$input</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t close $file: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>This is tremendously more efficient than reading the entire file into memory as an array of lines and then processing it one element at a time, which is often--if not almost always--the wrong approach. Whenever you see someone do this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@lines</span> = <span class="q">&lt;INPUT&gt;</span><span class="sc">;</span></li></ol></pre><p>You should think long and hard about why you need everything loaded at once. It&#39;s just not a scalable solution.</p><p>If you &quot;mmap&quot; the file with the File::Map module from CPAN, you can virtually load the entire file into a string without actually storing it in memory:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::Map</span> <span class="q">qw(map_file)</span><span class="sc">;</span></li><li></li><li>    <span class="w">map_file</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$string</span><span class="cm">,</span> <span class="i">$filename</span><span class="sc">;</span></li></ol></pre><p>Once mapped, you can treat <code class="inline"><span class="i">$string</span></code>  as you would any other string. Since you don&#39;t necessarily have to load the data, mmap-ing can be very fast and may not increase your memory footprint.</p><p>You might also find it more fun to use the standard <span href="http://perldoc.perl.org/Tie/File.html">Tie::File</span> module, or the <span href="http://perldoc.perl.org/DB_File.html">DB_File</span> module&#39;s <code class="inline"><span class="i">$DB_RECNO</span></code>  bindings, which allow you to tie an array to a file so that accessing an element of the array actually accesses the corresponding line in the file.</p><p>If you want to load the entire file, you can use the <span href="http://search.cpan.org/perldoc/Path::Tiny">Path::Tiny</span> module to do it in one simple and efficient step:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Path::Tiny</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$all_of_it</span> = <span class="i">path</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="i">-&gt;slurp</span><span class="sc">;</span> <span class="c"># entire file in scalar</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">@all_lines</span> = <span class="i">path</span><span class="s">(</span><span class="i">$filename</span><span class="s">)</span><span class="i">-&gt;lines</span><span class="sc">;</span> <span class="c"># one line per element</span></li></ol></pre><p>Or you can read the entire file contents into a scalar like this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span><span class="sc">;</span></li><li>    <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span> <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$fh</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="i">$file</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;can&#39;t open $file: $!&quot;</span><span class="sc">;</span></li><li>        <span class="i">$var</span> = <span class="q">&lt;$fh&gt;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p>That temporarily undefs your record separator, and will automatically close the file at block exit. If the file is already open, just use this:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="i">$/</span><span class="sc">;</span> <span class="q">&lt;$fh&gt;</span> <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>You can also use a localized <code class="inline"><span class="i">@ARGV</span></code>  to eliminate the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span></code>:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$var</span> = <span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span><span class="s">(</span> <span class="i">@ARGV</span><span class="cm">,</span> <span class="i">$/</span> <span class="s">)</span> = <span class="i">$file</span><span class="sc">;</span> &lt;&gt; <span class="s">}</span><span class="sc">;</span></li></ol></pre><p>For ordinary files you can also use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span></code> function.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/read.html">read</span><span class="s">(</span> <span class="i">$fh</span><span class="cm">,</span> <span class="i">$var</span><span class="cm">,</span> -s <span class="i">$fh</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>That third argument tests the byte size of the data on the <code class="inline"><span class="i">$fh</span></code>  filehandle and reads that many bytes into the buffer <code class="inline"><span class="i">$var</span></code> .</p></section>	http://perldoc.perl.org/perlfaq5.html#How-can-I-read-in-an-entire-file-all-at-once%3f
Empty \%c{} in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(F) <code class="inline">\\<span class="w">p</span></code>  and <code class="inline">\\<span class="w">P</span></code>  are used to introduce a named Unicode property, as described in <span href="http://perldoc.perl.org/perlunicode.html">perlunicode</span> and <span href="http://perldoc.perl.org/perlre.html">perlre</span>.  You used <code class="inline">\\<span class="w">p</span></code>  or <code class="inline">\\<span class="w">P</span></code>  in a regular expression without specifying the property name.</p></section>	http://perldoc.perl.org/perldiag.html#Empty-%5c%25c%7b%7d-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
Pod::Simple::Methody (module)	A			Perl Standard Modules		[[Pod::Simple]]\n[[Pod::Simple::Subclassing]]					<section class="prog__container"><p>Pod::Simple::Methody -- turn Pod::Simple events into method calls</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="n">5</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li><span name="package-SomePodFormatter"></span> package <span class="i">SomePodFormatter</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">base</span> <span class="q">qw(Pod::Simple::Methody)</span><span class="sc">;</span></li><li></li><li><span name="handle_text"></span> sub <span class="m">handle_text</span> <span class="s">{</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$self</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>   ...</li><li> <span class="s">}</span></li><li></li><li><span name="start_head1"></span> sub <span class="m">start_head1</span> <span class="s">{</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$self</span><span class="cm">,</span> <span class="i">$attrs</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>   ...</li><li> <span class="s">}</span></li><li><span name="end_head1"></span> sub <span class="m">end_head1</span> <span class="s">{</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span><span class="s">(</span><span class="i">$self</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span></li><li>   ...</li><li> <span class="s">}</span></li></ol></pre><p>...and start_/end_ methods for whatever other events you want to catch.</p></section>	http://perldoc.perl.org/Pod/Simple/Methody.html
Version string '%s' contains invalid data; ignoring: '%s'	A			Perl Diagnostics							<section class="prog__container"><p>(W misc) The version string contains invalid characters at the end, which are being ignored.</p></section>	http://perldoc.perl.org/perldiag.html#Version-string-'%25s'-contains-invalid-data%3b-ignoring%3a-'%25s'
linebreak (definition)	A			Perl Glossary							<section class="prog__container"><p>A <b>grapheme</b> consisting of either a carriage return followed by a line feed or any character with the Unicode Vertical Space <b>character property</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#linebreak
${^UTF8CACHE} (variable)	A			Perl Variables\nPerl Variables related to the interpreter state							<section class="prog__container"><p>This variable controls the state of the internal UTF-8 offset caching code. 1 for on (the default), 0 for off, -1 to debug the caching code by checking all its results against linear scans, and panicking on any discrepancy.</p><p>This variable was added in Perl v5.8.9.  It is subject to change or removal without notice, but is currently used to avoid recalculating the boundaries of multi-byte UTF-8-encoded characters.</p></section>	http://perldoc.perl.org/perlvar.html#%24%7b%5eUTF8CACHE%7d
No %s allowed while running setuid	A			Perl Diagnostics							<section class="prog__container"><p>(F) Certain operations are deemed to be too insecure for a setuid or setgid script to even be allowed to attempt.  Generally speaking there will be another way to do what you want that is, if not secure, at least securable.  See <span href="http://perldoc.perl.org/perlsec.html">perlsec</span>.</p></section>	http://perldoc.perl.org/perldiag.html#No-%25s-allowed-while-running-setuid
Pod::Perldoc::ToNroff (module)	A			Perl Standard Modules		[[Pod::Man]]\n[[Pod::Perldoc]]\n[[Pod::Perldoc::ToMan]]					<section class="prog__container"><p>Pod::Perldoc::ToNroff - let Perldoc convert Pod to nroff</p> <pre class="verbatim"><ol><li>  perldoc -o nroff -d something.3 Some::Modulename</li></ol></pre></section>	http://perldoc.perl.org/Pod/Perldoc/ToNroff.html
Time::Seconds (module)	A			Perl Standard Modules							<section class="prog__container"><p>Time::Seconds - a simple API to convert seconds to other date values</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Piece</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::Seconds</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$t</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li><li>    <span class="i">$t</span> += <span class="w">ONE_DAY</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$t2</span> = <span class="l_k" href="http://perldoc.perl.org/functions/localtime.html">localtime</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$s</span> = <span class="i">$t</span> - <span class="i">$t2</span><span class="sc">;</span></li><li>    </li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Difference is: &quot;</span><span class="cm">,</span> <span class="i">$s</span><span class="i">-&gt;days</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/Seconds.html
Can't locate PerlIO%s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You tried to use in open() a PerlIO layer that does not exist, e.g. open(FH, &quot;&gt;:nosuchlayer&quot;, &quot;somefile&quot;).</p></section>	http://perldoc.perl.org/perldiag.html#Can't-locate-PerlIO%25s
tied (function)	A			Perl Functions\nPerl Keywords related to classes and object-orientedness							<section class="prog__container"><pre>tied VARIABLE</pre><p>Returns a reference to the object underlying VARIABLE (the same value that was originally returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> call that bound the variable to a package.)  Returns the undefined value if VARIABLE isn&#39;t tied to a package.</p></section>	http://perldoc.perl.org/functions/tied.html
NV (definition)	A			Perl Glossary							<section class="prog__container"><p>Short for Nevada, no part of which will ever be confused with civilization. NV also means an internal floating- point Numeric Value of the type a <b>scalar</b> can hold, not to be confused with an <b>IV</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#NV
mkdir (function)	A			Perl Functions\nPerl Functions for filehandles, files, or directories							<section class="prog__container"><pre>mkdir FILENAME,MASK<br>mkdir FILENAME<br>mkdir</pre><p>Creates the directory specified by FILENAME, with permissions specified by MASK (as modified by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code>).  If it succeeds it returns true; otherwise it returns false and sets <code class="inline"><span class="i">$!</span></code>  (errno). MASK defaults to 0777 if omitted, and FILENAME defaults to <code class="inline"><span class="i">$_</span></code>  if omitted.</p><p>In general, it is better to create directories with a permissive MASK and let the user modify that with their <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> than it is to supply a restrictive MASK and give the user no way to be more permissive. The exceptions to this rule are when the file or directory should be kept private (mail files, for instance).  The perlfunc(1) entry on <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> discusses the choice of MASK in more detail.</p><p>Note that according to the POSIX 1003.1-1996 the FILENAME may have any number of trailing slashes.  Some operating and filesystems do not get this right, so Perl automatically removes all trailing slashes to keep everyone happy.</p><p>To recursively create a directory structure, look at the <code class="inline"><span class="w">make_path</span></code>  function of the <span href="http://perldoc.perl.org/File/Path.html">File::Path</span> module.</p></section>	http://perldoc.perl.org/functions/mkdir.html
Undefined subroutine &%s called	A			Perl Diagnostics							<section class="prog__container"><p>(F) The subroutine indicated hasn&#39;t been defined, or if it was, it has since been undefined.</p></section>	http://perldoc.perl.org/perldiag.html#Undefined-subroutine-%26%25s-called
reverse (function)	A			Perl Functions\nPerl Functions for SCALARs or strings\nPerl Functions for list data							<section class="prog__container"><pre>reverse LIST</pre><p>In list context, returns a list value consisting of the elements of LIST in the opposite order.  In scalar context, concatenates the elements of LIST and returns a string value with all characters in the opposite order.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/join.html">join</span><span class="s">(</span><span class="q">&quot;, &quot;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="q">&quot;world&quot;</span><span class="cm">,</span> <span class="q">&quot;Hello&quot;</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Hello, world</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="q">&quot;dlrow ,&quot;</span><span class="cm">,</span> <span class="q">&quot;olleH&quot;</span><span class="sc">;</span>    <span class="c"># Hello, world</span></li></ol></pre><p>Used without arguments in scalar context, reverse() reverses <code class="inline"><span class="i">$_</span></code> .</p><pre class="verbatim"><ol><li>    <span class="i">$_</span> = <span class="q">&quot;dlrow ,olleH&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span><span class="sc">;</span>                         <span class="c"># No output, list context</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span><span class="sc">;</span>                  <span class="c"># Hello, world</span></li></ol></pre><p>Note that reversing an array to itself (as in <code class="inline"><span class="i">@a</span> = <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="i">@a</span></code> ) will preserve non-existent elements whenever possible; i.e., for non-magical arrays or for tied arrays with <code class="inline"><span class="w">EXISTS</span></code>  and <code class="inline"><span class="w">DELETE</span></code>  methods.</p><p>This operator is also handy for inverting a hash, although there are some caveats.  If a value is duplicated in the original hash, only one of those can be represented as a key in the inverted hash.  Also, this has to unwind one hash and build a whole new one, which may take some time on a large hash, such as from a DBM file.</p><pre class="verbatim"><ol><li>    <span class="i">%by_name</span> = <span class="l_k" href="http://perldoc.perl.org/functions/reverse.html">reverse</span> <span class="i">%by_address</span><span class="sc">;</span>  <span class="c"># Invert the hash</span></li></ol></pre></section>	http://perldoc.perl.org/functions/reverse.html
lock (function)	A			Perl Functions							<section class="prog__container"><pre>lock THING</pre><p>This function places an advisory lock on a shared variable or referenced object contained in <i>THING</i> until the lock goes out of scope.</p><p>The value returned is the scalar itself, if the argument is a scalar, or a reference, if the argument is a hash, array or subroutine.</p><p>lock() is a &quot;weak keyword&quot; : this means that if you&#39;ve defined a function by this name (before any calls to it), that function will be called instead.  If you are not under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">threads::shared</span></code>  this does nothing. See <span href="http://perldoc.perl.org/threads/shared.html">threads::shared</span>.</p></section>	http://perldoc.perl.org/functions/lock.html
Format %s redefined	A			Perl Diagnostics							<section class="prog__container"><p>(W redefine) You redefined a format.  To suppress this warning, say</p><pre class="verbatim"><ol><li>    <span class="s">{</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/no.html">no</span> <span class="w">warnings</span> <span class="q">&#39;redefine&#39;</span><span class="sc">;</span></li><li>&#09;<span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="q">&quot;format NAME =...&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre></section>	http://perldoc.perl.org/perldiag.html#Format-%25s-redefined
redo (function)	A			Perl Functions\nPerl Keywords related to control flow of your perl program							<section class="prog__container"><pre>redo LABEL<br>redo EXPR<br>redo</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> command restarts the loop block without evaluating the conditional again.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/continue.html">continue</span></code> block, if any, is not executed.  If the LABEL is omitted, the command refers to the innermost enclosing loop.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="j">EXPR</span></code>  form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="j">LABEL</span></code> .  Programs that want to lie to themselves about what was just input  normally use this command:</p><pre class="verbatim"><ol><li>    <span class="c"># a simpleminded Pascal comment stripper</span></li><li>    <span class="c"># (warning: assumes no { or } in strings)</span></li><li>    <span class="j">LINE:</span> while <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>        while <span class="s">(</span><span class="q">s|({.*}.*){.*}|$1 |</span><span class="s">)</span> <span class="s">{</span><span class="s">}</span></li><li>        <span class="q">s|{.*}| |</span><span class="sc">;</span></li><li>        if <span class="s">(</span><span class="q">s|{.*| |</span><span class="s">)</span> <span class="s">{</span></li><li>            <span class="i">$front</span> = <span class="i">$_</span><span class="sc">;</span></li><li>            while <span class="s">(</span><span class="q">&lt;STDIN&gt;</span><span class="s">)</span> <span class="s">{</span></li><li>                if <span class="s">(</span><span class="q">/}/</span><span class="s">)</span> <span class="s">{</span>  <span class="c"># end of comment?</span></li><li>                    <span class="q">s|^|$front\\{|</span><span class="sc">;</span></li><li>                    <span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="j">LINE</span><span class="sc">;</span></li><li>                <span class="s">}</span></li><li>            <span class="s">}</span></li><li>        <span class="s">}</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="sc">;</span></li><li>    <span class="s">}</span></li></ol></pre><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> cannot be used to retry a block that returns a value such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span> <span class="s">{</span><span class="s">}</span></code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code> , or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/do.html">do</span> <span class="s">{</span><span class="s">}</span></code> , and should not be used to exit a grep() or map() operation.</p><p>Note that a block by itself is semantically identical to a loop that executes once.  Thus <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> inside such a block will effectively turn it into a looping construct.</p><p>See also <span href="http://perldoc.perl.org/functions/continue.html">continue</span> for an illustration of how <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/last.html">last</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/next.html">next</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code> work.</p><p>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span> <span class="s">(</span><span class="q">&quot;foo&quot;</span><span class="s">)</span>.<span class="q">&quot;bar&quot;</span></code>  will cause &quot;bar&quot; to be part of the argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/redo.html">redo</span></code>.</p></section>	http://perldoc.perl.org/functions/redo.html
Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in m/%s/	A			Perl Diagnostics							<section class="prog__container"><p>(W regexp) (only under <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">re</span> <span class="q">&#39;strict&#39;</span></code>  or within <code class="inline"><span class="s">(</span><span class="q">?[...])</span></code> )</p><p>Stricter rules help to find typos and other errors.  Perhaps you didn&#39;t even intend a range here, if the <code class="inline"><span class="q">&quot;-&quot;</span></code>  was meant to be some other character, or should have been escaped (like <code class="inline"><span class="q">&quot;\\-&quot;</span></code> ).  If you did intend a range, the one that was used is not portable between ASCII and EBCDIC platforms, and doesn&#39;t have an obvious meaning to a casual reader.</p><pre class="verbatim"><ol><li> <span class="s">[</span><span class="n">3</span>-<span class="n">7</span><span class="s">]</span>    <span class="c"># OK; Obvious and portable</span></li><li> <span class="s">[</span><span class="w">d</span>-g<span class="s">]</span>    <span class="c"># OK; Obvious and portable</span></li><li> <span class="s">[</span><span class="w">A</span>-<span class="w">Y</span><span class="s">]</span>    <span class="c"># OK; Obvious and portable</span></li><li> <span class="s">[</span><span class="w">A</span>-z<span class="s">]</span>    <span class="c"># WRONG; Not portable; not clear what is meant</span></li><li> <span class="s">[</span><span class="w">a</span>-<span class="w">Z</span><span class="s">]</span>    <span class="c"># WRONG; Not portable; not clear what is meant</span></li><li> <span class="s">[</span><span class="i">%-</span>.<span class="s">]</span>    <span class="c"># WRONG; Not portable; not clear what is meant</span></li><li> <span class="s">[</span>\\<span class="w">x41</span>-<span class="w">Z</span><span class="s">]</span> <span class="c"># WRONG; Not portable; not obvious to non-geek</span></li></ol></pre><p>(You can force portability by specifying a Unicode range, which means that the endpoints are specified by <span href="http://perldoc.perl.org/perlrecharclass.html#Character-Ranges">\\N{...} </span>, but the meaning may still not be obvious.) The stricter rules require that ranges that start or stop with an ASCII character that is not a control have all their endpoints be the literal character, and not some escape sequence (like <code class="inline"><span class="q">&quot;\\x41&quot;</span></code> ), and the ranges must be all digits, or all uppercase letters, or all lowercase letters.</p></section>	http://perldoc.perl.org/perldiag.html#Ranges-of-ASCII-printables-should-be-some-subset-of-%220-9%22%2c-%22A-Z%22%2c-or-%22a-z%22-in-regex%3b-marked-by-%3c---HERE-in-m%2f%25s%2f
casefolding (definition)	A			Perl Glossary							<section class="prog__container"><p>Comparing or matching a string case-insensitively. In Perl, it is implemented with the <code class="inline">/i</code> pattern modifier, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fc.html">fc</span></code> function, and the <code class="inline">\\<span class="w">F</span></code>  double-quote translation escape.</p></section>	http://perldoc.perl.org/perlglossary.html#casefolding
FIFO (definition)	A			Perl Glossary		[[LIFO]]					<section class="prog__container"><p>First In, First Out.  Also a nickname for a <b>named pipe</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#FIFO
$^T (variable)	A			Perl Variables\nPerl General Variables							<section class="prog__container"><p>The time at which the program began running, in seconds since the epoch (beginning of 1970).  The values returned by the <b>-M</b>, <b>-A</b>, and <b>-C</b> filetests are based on this value.</p></section>	http://perldoc.perl.org/perlvar.html#%24%5eT
Time::gmtime (module)	A			Perl Standard Modules							<section class="prog__container"><p>Time::gmtime - by-name interface to Perl&#39;s built-in gmtime() function</p> <pre class="verbatim"><ol><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::gmtime</span><span class="sc">;</span></li><li> <span class="i">$gm</span> = <span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;The day in Greenwich is %s\\n&quot;</span><span class="cm">,</span> </li><li>    <span class="s">(</span><span class="q">qw(Sun Mon Tue Wed Thu Fri Sat Sun)</span><span class="s">)</span>[ <span class="i">$gm</span><span class="i">-&gt;wday</span><span class="s">(</span><span class="s">)</span> ]<span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::gmtime</span> <span class="q">qw(:FIELDS)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/gmtime.html">gmtime</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;The day in Greenwich is %s\\n&quot;</span><span class="cm">,</span> </li><li>    <span class="s">(</span><span class="q">qw(Sun Mon Tue Wed Thu Fri Sat Sun)</span><span class="s">)</span>[ <span class="i">$tm_wday</span> ]<span class="sc">;</span></li><li></li><li> <span class="i">$now</span> = <span class="i">gmctime</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Time::gmtime</span><span class="sc">;</span></li><li> <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">File::stat</span><span class="sc">;</span></li><li> <span class="i">$date_string</span> = <span class="i">gmctime</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/stat.html">stat</span><span class="s">(</span><span class="i">$file</span><span class="s">)</span><span class="i">-&gt;mtime</span><span class="s">)</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/Time/gmtime.html
Illegal octal digit %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) You used an 8 or 9 in an octal number.</p></section>	http://perldoc.perl.org/perldiag.html#Illegal-octal-digit-%25s
reference (definition)	A			Perl Glossary							<section class="prog__container"><p>Where you look to find a pointer to information somewhere else. (See <b>indirection</b>.) References come in two flavors: <b>symbolic references</b> and <b>hard references</b>.</p></section>	http://perldoc.perl.org/perlglossary.html#reference
vec (function)	A			Perl Functions\nPerl Functions for fixed length data or records							<section class="prog__container"><pre>vec EXPR,OFFSET,BITS</pre><p>Treats the string in EXPR as a bit vector made up of elements of width BITS and returns the value of the element specified by OFFSET as an unsigned integer.  BITS therefore specifies the number of bits that are reserved for each element in the bit vector.  This must be a power of two from 1 to 32 (or 64, if your platform supports that).</p><p>If BITS is 8, &quot;elements&quot; coincide with bytes of the input string.</p><p>If BITS is 16 or more, bytes of the input string are grouped into chunks of size BITS/8, and each group is converted to a number as with pack()/unpack() with big-endian formats <code class="inline"><span class="w">n</span></code> /<code class="inline"><span class="w">N</span></code>  (and analogously for BITS==64).  See <span href="http://perldoc.perl.org/functions/pack.html">pack</span> for details.</p><p>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups.  Bits of a byte are numbered in a little-endian-ish way, as in <code class="inline"><span class="n">0x01</span></code> , <code class="inline"><span class="n">0x02</span></code> , <code class="inline"><span class="n">0x04</span></code> , <code class="inline"><span class="n">0x08</span></code> , <code class="inline"><span class="n">0x10</span></code> , <code class="inline"><span class="n">0x20</span></code> , <code class="inline"><span class="n">0x40</span></code> , <code class="inline"><span class="n">0x80</span></code> .  For example, breaking the single input byte <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/chr.html">chr(0x36)</span></code> into two groups gives a list <code class="inline"><span class="s">(</span><span class="n">0x6</span><span class="cm">,</span> <span class="n">0x3</span><span class="s">)</span></code> ; breaking it into 4 groups gives <code class="inline"><span class="s">(</span><span class="n">0x2</span><span class="cm">,</span> <span class="n">0x1</span><span class="cm">,</span> <span class="n">0x3</span><span class="cm">,</span> <span class="n">0x0</span><span class="s">)</span></code> .</p><p><code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span></code> may also be assigned to, in which case parentheses are needed to give the expression the correct precedence as in</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$image</span><span class="cm">,</span> <span class="i">$max_x</span> * <span class="i">$x</span> + <span class="i">$y</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">3</span><span class="sc">;</span></li></ol></pre><p>If the selected element is outside the string, the value 0 is returned. If an element off the end of the string is written to, Perl will first extend the string with sufficiently many zero bytes.   It is an error to try to write off the beginning of the string (i.e., negative OFFSET).</p><p>If the string happens to be encoded as UTF-8 internally (and thus has the UTF8 flag set), this is ignored by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span></code>, and it operates on the internal byte string, not the conceptual character string, even if you only have characters with values less than 256.</p><p>Strings created with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span></code> can also be manipulated with the logical operators <code class="inline">|</code>, <code class="inline"><span class="i">&amp;</span></code> , <code class="inline">^</code>, and <code class="inline">~</code> .  These operators will assume a bit vector operation is desired when both operands are strings. See <span href="http://perldoc.perl.org/perlop.html#Bitwise-String-Operators">Bitwise String Operators in perlop</span>.</p><p>The following code will build up an ASCII string saying <code class="inline"><span class="q">&#39;PerlPerlPerl&#39;</span></code> . The comments show the string after each step.  Note that this code works in the same way on big-endian or little-endian machines.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$foo</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span>  <span class="n">0</span><span class="cm">,</span> <span class="n">32</span><span class="s">)</span> = <span class="n">0x5065726C</span><span class="sc">;</span> <span class="c"># &#39;Perl&#39;</span></li><li></li><li>    <span class="c"># $foo eq &quot;Perl&quot; eq &quot;\\x50\\x65\\x72\\x6C&quot;, 32 bits</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># prints 80 == 0x50 == ord(&#39;P&#39;)</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span>  <span class="n">2</span><span class="cm">,</span> <span class="n">16</span><span class="s">)</span> = <span class="n">0x5065</span><span class="sc">;</span> <span class="c"># &#39;PerlPe&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span>  <span class="n">3</span><span class="cm">,</span> <span class="n">16</span><span class="s">)</span> = <span class="n">0x726C</span><span class="sc">;</span> <span class="c"># &#39;PerlPerl&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span>  <span class="n">8</span><span class="cm">,</span>  <span class="n">8</span><span class="s">)</span> = <span class="n">0x50</span><span class="sc">;</span>   <span class="c"># &#39;PerlPerlP&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span>  <span class="n">9</span><span class="cm">,</span>  <span class="n">8</span><span class="s">)</span> = <span class="n">0x65</span><span class="sc">;</span>   <span class="c"># &#39;PerlPerlPe&#39;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">20</span><span class="cm">,</span>  <span class="n">4</span><span class="s">)</span> = <span class="n">2</span><span class="sc">;</span>      <span class="c"># &#39;PerlPerlPe&#39;   . &quot;\\x02&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">21</span><span class="cm">,</span>  <span class="n">4</span><span class="s">)</span> = <span class="n">7</span><span class="sc">;</span>      <span class="c"># &#39;PerlPerlPer&#39;</span></li><li>                                   <span class="c"># &#39;r&#39; is &quot;\\x72&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">45</span><span class="cm">,</span>  <span class="n">2</span><span class="s">)</span> = <span class="n">3</span><span class="sc">;</span>      <span class="c"># &#39;PerlPerlPer&#39;  . &quot;\\x0c&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">93</span><span class="cm">,</span>  <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span>      <span class="c"># &#39;PerlPerlPer&#39;  . &quot;\\x2c&quot;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$foo</span><span class="cm">,</span> <span class="n">94</span><span class="cm">,</span>  <span class="n">1</span><span class="s">)</span> = <span class="n">1</span><span class="sc">;</span>      <span class="c"># &#39;PerlPerlPerl&#39;</span></li><li>                                   <span class="c"># &#39;l&#39; is &quot;\\x6c&quot;</span></li></ol></pre><p>To transform a bit vector into a string or list of 0&#39;s and 1&#39;s, use these:</p><pre class="verbatim"><ol><li>    <span class="i">$bits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;b*&quot;</span><span class="cm">,</span> <span class="i">$vector</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">@bits</span> = <span class="l_k" href="http://perldoc.perl.org/functions/split.html">split</span><span class="s">(</span><span class="q">//</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;b*&quot;</span><span class="cm">,</span> <span class="i">$vector</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If you know the exact length in bits, it can be used in place of the <code class="inline"><span class="i">*</span></code> .</p><p>Here is an example to illustrate how the bits actually fall in place:</p><pre class="verbatim"><ol><li>  <span class="c">#!/usr/bin/perl -wl</span></li><li></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="h">&lt;&lt;&#39;EOT&#39;</span><span class="sc">;</span></li><li><span class="hh">                                    0         1         2         3</span></li><li><span class="hh">                     unpack(&quot;V&quot;,$_) 01234567890123456789012345678901</span></li><li><span class="hh">  ------------------------------------------------------------------</span></li><li><span class="hh">  EOT</span></li><li></li><li><span class="hh">  for $w (0..3) {</span></li><li><span class="hh">      $width = 2**$w;</span></li><li><span class="hh">      for ($shift=0; $shift &lt; $width; ++$shift) {</span></li><li><span class="hh">          for ($off=0; $off &lt; 32/$width; ++$off) {</span></li><li><span class="hh">              $str = pack(&quot;B*&quot;, &quot;0&quot;x32);</span></li><li><span class="hh">              $bits = (1&lt;&lt;$shift);</span></li><li><span class="hh">              vec($str, $off, $width) = $bits;</span></li><li><span class="hh">              $res = unpack(&quot;b*&quot;,$str);</span></li><li><span class="hh">              $val = unpack(&quot;V&quot;, $str);</span></li><li><span class="hh">              write;</span></li><li><span class="hh">          }</span></li><li><span class="hh">      }</span></li><li><span class="hh">  }</span></li><li></li><li><span class="hh">  format STDOUT =</span></li><li><span class="hh">  vec($_,@#,@#) = @&lt;&lt; == @######### @&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></li><li><span class="hh">  $off, $width, $bits, $val, $res</span></li><li><span class="hh">  .</span></li><li><span class="hh">  __END__</span></li></ol></pre><p>Regardless of the machine architecture on which it runs, the  example above should print the following table:</p><pre class="verbatim"><ol><li>                                    <span class="n">0</span>         <span class="n">1</span>         <span class="n">2</span>         <span class="n">3</span></li><li>                     <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&quot;V&quot;</span><span class="cm">,</span><span class="i">$_</span><span class="s">)</span> <span class="n">01234567890123456789012345678901</span></li><li>  ------------------------------------------------------------------</li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">1</span> <span class="n">10000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">2</span> <span class="n">01000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">4</span> <span class="n">00100000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">8</span> <span class="n">00010000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">16</span> <span class="n">00001000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">32</span> <span class="n">00000100000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">64</span> <span class="n">00000010000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">128</span> <span class="n">00000001000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">8</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">256</span> <span class="n">00000000100000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">9</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">512</span> <span class="n">00000000010000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">10</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">1024</span> <span class="n">00000000001000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">11</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">2048</span> <span class="n">00000000000100000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">12</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">4096</span> <span class="n">00000000000010000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">13</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">8192</span> <span class="n">00000000000001000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">14</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">16384</span> <span class="n">00000000000000100000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">15</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">32768</span> <span class="n">00000000000000010000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">16</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">65536</span> <span class="n">00000000000000001000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">17</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==     <span class="n">131072</span> <span class="n">00000000000000000100000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">18</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==     <span class="n">262144</span> <span class="n">00000000000000000010000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">19</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==     <span class="n">524288</span> <span class="n">00000000000000000001000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">20</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">1048576</span> <span class="n">00000000000000000000100000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">21</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">2097152</span> <span class="n">00000000000000000000010000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">22</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">4194304</span> <span class="n">00000000000000000000001000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">23</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">8388608</span> <span class="n">00000000000000000000000100000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">24</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">16777216</span> <span class="n">00000000000000000000000010000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">25</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">33554432</span> <span class="n">00000000000000000000000001000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">26</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">67108864</span> <span class="n">00000000000000000000000000100000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">27</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==  <span class="n">134217728</span> <span class="n">00000000000000000000000000010000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">28</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==  <span class="n">268435456</span> <span class="n">00000000000000000000000000001000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">29</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   ==  <span class="n">536870912</span> <span class="n">00000000000000000000000000000100</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">30</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   == <span class="n">1073741824</span> <span class="n">00000000000000000000000000000010</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">31</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span> = <span class="n">1</span>   == <span class="n">2147483648</span> <span class="n">00000000000000000000000000000001</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">1</span> <span class="n">10000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">4</span> <span class="n">00100000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">16</span> <span class="n">00001000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">64</span> <span class="n">00000010000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">256</span> <span class="n">00000000100000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">1024</span> <span class="n">00000000001000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">4096</span> <span class="n">00000000000010000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">16384</span> <span class="n">00000000000000100000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">8</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">65536</span> <span class="n">00000000000000001000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">9</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==     <span class="n">262144</span> <span class="n">00000000000000000010000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">10</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">1048576</span> <span class="n">00000000000000000000100000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">11</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">4194304</span> <span class="n">00000000000000000000001000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">12</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">16777216</span> <span class="n">00000000000000000000000010000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">13</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">67108864</span> <span class="n">00000000000000000000000000100000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">14</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   ==  <span class="n">268435456</span> <span class="n">00000000000000000000000000001000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">15</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">1</span>   == <span class="n">1073741824</span> <span class="n">00000000000000000000000000000010</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==          <span class="n">2</span> <span class="n">01000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==          <span class="n">8</span> <span class="n">00010000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==         <span class="n">32</span> <span class="n">00000100000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==        <span class="n">128</span> <span class="n">00000001000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==        <span class="n">512</span> <span class="n">00000000010000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==       <span class="n">2048</span> <span class="n">00000000000100000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==       <span class="n">8192</span> <span class="n">00000000000001000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==      <span class="n">32768</span> <span class="n">00000000000000010000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">8</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==     <span class="n">131072</span> <span class="n">00000000000000000100000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">9</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==     <span class="n">524288</span> <span class="n">00000000000000000001000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">10</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==    <span class="n">2097152</span> <span class="n">00000000000000000000010000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">11</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==    <span class="n">8388608</span> <span class="n">00000000000000000000000100000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">12</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==   <span class="n">33554432</span> <span class="n">00000000000000000000000001000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">13</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==  <span class="n">134217728</span> <span class="n">00000000000000000000000000010000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">14</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   ==  <span class="n">536870912</span> <span class="n">00000000000000000000000000000100</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span><span class="n">15</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span> = <span class="n">2</span>   == <span class="n">2147483648</span> <span class="n">00000000000000000000000000000001</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">1</span> <span class="n">10000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==         <span class="n">16</span> <span class="n">00001000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">256</span> <span class="n">00000000100000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==       <span class="n">4096</span> <span class="n">00000000000010000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">65536</span> <span class="n">00000000000000001000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==    <span class="n">1048576</span> <span class="n">00000000000000000000100000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">16777216</span> <span class="n">00000000000000000000000010000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">1</span>   ==  <span class="n">268435456</span> <span class="n">00000000000000000000000000001000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==          <span class="n">2</span> <span class="n">01000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==         <span class="n">32</span> <span class="n">00000100000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==        <span class="n">512</span> <span class="n">00000000010000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==       <span class="n">8192</span> <span class="n">00000000000001000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==     <span class="n">131072</span> <span class="n">00000000000000000100000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==    <span class="n">2097152</span> <span class="n">00000000000000000000010000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==   <span class="n">33554432</span> <span class="n">00000000000000000000000001000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">2</span>   ==  <span class="n">536870912</span> <span class="n">00000000000000000000000000000100</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==          <span class="n">4</span> <span class="n">00100000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==         <span class="n">64</span> <span class="n">00000010000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==       <span class="n">1024</span> <span class="n">00000000001000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==      <span class="n">16384</span> <span class="n">00000000000000100000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==     <span class="n">262144</span> <span class="n">00000000000000000010000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==    <span class="n">4194304</span> <span class="n">00000000000000000000001000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   ==   <span class="n">67108864</span> <span class="n">00000000000000000000000000100000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">4</span>   == <span class="n">1073741824</span> <span class="n">00000000000000000000000000000010</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==          <span class="n">8</span> <span class="n">00010000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==        <span class="n">128</span> <span class="n">00000001000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==       <span class="n">2048</span> <span class="n">00000000000100000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==      <span class="n">32768</span> <span class="n">00000000000000010000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">4</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==     <span class="n">524288</span> <span class="n">00000000000000000001000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">5</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==    <span class="n">8388608</span> <span class="n">00000000000000000000000100000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">6</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   ==  <span class="n">134217728</span> <span class="n">00000000000000000000000000010000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">7</span><span class="cm">,</span> <span class="n">4</span><span class="s">)</span> = <span class="n">8</span>   == <span class="n">2147483648</span> <span class="n">00000000000000000000000000000001</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">1</span>   ==          <span class="n">1</span> <span class="n">10000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">1</span>   ==        <span class="n">256</span> <span class="n">00000000100000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">1</span>   ==      <span class="n">65536</span> <span class="n">00000000000000001000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">1</span>   ==   <span class="n">16777216</span> <span class="n">00000000000000000000000010000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">2</span>   ==          <span class="n">2</span> <span class="n">01000000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">2</span>   ==        <span class="n">512</span> <span class="n">00000000010000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">2</span>   ==     <span class="n">131072</span> <span class="n">00000000000000000100000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">2</span>   ==   <span class="n">33554432</span> <span class="n">00000000000000000000000001000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">4</span>   ==          <span class="n">4</span> <span class="n">00100000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">4</span>   ==       <span class="n">1024</span> <span class="n">00000000001000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">4</span>   ==     <span class="n">262144</span> <span class="n">00000000000000000010000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">4</span>   ==   <span class="n">67108864</span> <span class="n">00000000000000000000000000100000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">8</span>   ==          <span class="n">8</span> <span class="n">00010000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">8</span>   ==       <span class="n">2048</span> <span class="n">00000000000100000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">8</span>   ==     <span class="n">524288</span> <span class="n">00000000000000000001000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">8</span>   ==  <span class="n">134217728</span> <span class="n">00000000000000000000000000010000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">16</span>  ==         <span class="n">16</span> <span class="n">00001000000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">16</span>  ==       <span class="n">4096</span> <span class="n">00000000000010000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">16</span>  ==    <span class="n">1048576</span> <span class="n">00000000000000000000100000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">16</span>  ==  <span class="n">268435456</span> <span class="n">00000000000000000000000000001000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">32</span>  ==         <span class="n">32</span> <span class="n">00000100000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">32</span>  ==       <span class="n">8192</span> <span class="n">00000000000001000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">32</span>  ==    <span class="n">2097152</span> <span class="n">00000000000000000000010000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">32</span>  ==  <span class="n">536870912</span> <span class="n">00000000000000000000000000000100</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">64</span>  ==         <span class="n">64</span> <span class="n">00000010000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">64</span>  ==      <span class="n">16384</span> <span class="n">00000000000000100000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">64</span>  ==    <span class="n">4194304</span> <span class="n">00000000000000000000001000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">64</span>  == <span class="n">1073741824</span> <span class="n">00000000000000000000000000000010</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">128</span> ==        <span class="n">128</span> <span class="n">00000001000000000000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">128</span> ==      <span class="n">32768</span> <span class="n">00000000000000010000000000000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">128</span> ==    <span class="n">8388608</span> <span class="n">00000000000000000000000100000000</span></li><li>  <span class="l_k" href="http://perldoc.perl.org/functions/vec.html">vec</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span> <span class="n">3</span><span class="cm">,</span> <span class="n">8</span><span class="s">)</span> = <span class="n">128</span> == <span class="n">2147483648</span> <span class="n">00000000000000000000000000000001</span></li></ol></pre></section>	http://perldoc.perl.org/functions/vec.html
truncating (definition)	A			Perl Glossary							<section class="prog__container"><p>Emptying a file of existing contents, either automatically when opening a file for writing or explicitly via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/truncate.html">truncate</span></code> function.</p></section>	http://perldoc.perl.org/perlglossary.html#truncating
Invalid %s attribute: %s	A			Perl Diagnostics							<section class="prog__container"><p>(F) The indicated attribute for a subroutine or variable was not recognized by Perl or by a user-supplied handler.  See <span href="http://perldoc.perl.org/attributes.html">attributes</span>.</p></section>	http://perldoc.perl.org/perldiag.html#Invalid-%25s-attribute%3a-%25s
List::Util::XS (module)	A			Perl Standard Modules		[[Scalar::Util]]\n[[List::Util]]\n[[List::MoreUtils]]					<section class="prog__container"><p>List::Util::XS - Indicate if List::Util was compiled with a C compiler</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">List::Util::XS</span> <span class="n">1.20</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/List/Util/XS.html
Variable "%s" will not stay shared	A			Perl Diagnostics							<section class="prog__container"><p>(W closure) An inner (nested) <i>named</i> subroutine is referencing a lexical variable defined in an outer named subroutine.</p><p>When the inner subroutine is called, it will see the value of the outer subroutine&#39;s variable as it was before and during the *first* call to the outer subroutine; in this case, after the first call to the outer subroutine is complete, the inner and outer subroutines will no longer share a common value for the variable.  In other words, the variable will no longer be shared.</p><p>This problem can usually be solved by making the inner subroutine anonymous, using the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span><span class="s">}</span></code>  syntax.  When inner anonymous subs that reference variables in outer subroutines are created, they are automatically rebound to the current values of such variables.</p></section>	http://perldoc.perl.org/perldiag.html#Variable-%22%25s%22-will-not-stay-shared
How do I read just one key without waiting for a return key?	A			Perl FAQs\nPerl System Interaction							<section class="prog__container"><p>Controlling input buffering is a remarkably system-dependent matter. On many systems, you can just use the <b>stty</b> command as shown in <span href="http://perldoc.perl.org/functions/getc.html">getc</span>, but as you see, that&#39;s already getting you into portability snags.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/open.html">open</span><span class="s">(</span><span class="w">TTY</span><span class="cm">,</span> <span class="q">&quot;+&lt;/dev/tty&quot;</span><span class="s">)</span> <span class="l_k" href="http://perldoc.perl.org/functions/or.html">or</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;no tty: $!&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty  cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1&quot;</span><span class="sc">;</span></li><li>    <span class="i">$key</span> = <span class="l_k" href="http://perldoc.perl.org/functions/getc.html">getc</span><span class="s">(</span><span class="w">TTY</span><span class="s">)</span><span class="sc">;</span>        <span class="c"># perhaps this works</span></li><li>    <span class="c"># OR ELSE</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span><span class="s">(</span><span class="w">TTY</span><span class="cm">,</span> <span class="i">$key</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># probably this does</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span> <span class="q">&quot;stty -cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1&quot;</span><span class="sc">;</span></li></ol></pre><p>The <span href="http://search.cpan.org/perldoc/Term::ReadKey">Term::ReadKey</span> module from CPAN offers an easy-to-use interface that should be more efficient than shelling out to <b>stty</b> for each key. It even includes limited support for Windows.</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Term::ReadKey</span><span class="sc">;</span></li><li>    <span class="i">ReadMode</span><span class="s">(</span><span class="q">&#39;cbreak&#39;</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$key</span> = <span class="i">ReadKey</span><span class="s">(</span><span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">ReadMode</span><span class="s">(</span><span class="q">&#39;normal&#39;</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>However, using the code requires that you have a working C compiler and can use it to build and install a CPAN module. Here&#39;s a solution using the standard <span href="http://perldoc.perl.org/POSIX.html">POSIX</span> module, which is already on your system (assuming your system supports POSIX).</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">HotKey</span><span class="sc">;</span></li><li>    <span class="i">$key</span> = <span class="i">readkey</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>And here&#39;s the <code class="inline"><span class="w">HotKey</span></code>  module, which hides the somewhat mystifying calls to manipulate the POSIX termios structures.</p><pre class="verbatim"><ol><li>    <span class="c"># HotKey.pm</span></li><li><span name="package-HotKey"></span>    package <span class="i">HotKey</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">strict</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">warnings</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">parent</span> <span class="q">&#39;Exporter&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span> <span class="i">@EXPORT</span> = <span class="q">qw(cbreak cooked readkey)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(:termios_h)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="s">(</span><span class="i">$term</span><span class="cm">,</span> <span class="i">$oterm</span><span class="cm">,</span> <span class="i">$echo</span><span class="cm">,</span> <span class="i">$noecho</span><span class="cm">,</span> <span class="i">$fd_stdin</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fd_stdin</span> = <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDIN</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$term</span>     = <span class="w">POSIX::Termios</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$term</span><span class="i">-&gt;getattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="i">$oterm</span>     = <span class="i">$term</span><span class="i">-&gt;getlflag</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$echo</span>     = <span class="w">ECHO</span> | <span class="w">ECHOK</span> | <span class="w">ICANON</span><span class="sc">;</span></li><li>    <span class="i">$noecho</span>   = <span class="i">$oterm</span> &amp; ~<span class="i">$echo</span><span class="sc">;</span></li><li></li><li><span name="cbreak"></span>    sub <span class="m">cbreak</span> <span class="s">{</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setlflag</span><span class="s">(</span><span class="i">$noecho</span><span class="s">)</span><span class="sc">;</span>  <span class="c"># ok, so i don&#39;t want echo either</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setcc</span><span class="s">(</span><span class="w">VTIME</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="cm">,</span> <span class="w">TCSANOW</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="cooked"></span>    sub <span class="m">cooked</span> <span class="s">{</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setlflag</span><span class="s">(</span><span class="i">$oterm</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setcc</span><span class="s">(</span><span class="w">VTIME</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">$term</span><span class="i">-&gt;setattr</span><span class="s">(</span><span class="i">$fd_stdin</span><span class="cm">,</span> <span class="w">TCSANOW</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li><span name="readkey"></span>    sub <span class="m">readkey</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$key</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span></li><li>        <span class="i">cbreak</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/sysread.html">sysread</span><span class="s">(</span><span class="w">STDIN</span><span class="cm">,</span> <span class="i">$key</span><span class="cm">,</span> <span class="n">1</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="i">cooked</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="i">$key</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/END.html">END</span> <span class="s">{</span> <span class="i">cooked</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span></li><li></li><li>    <span class="n">1</span><span class="sc">;</span></li></ol></pre></section>	http://perldoc.perl.org/perlfaq8.html#How-do-I-read-just-one-key-without-waiting-for-a-return-key%3f
^ operator	R	Binary "^" operator										
gethostbyaddr sub	R	gethostbyaddr (function)										
Version string '' contains invalid data; ignoring: ''	R	Version string '%s' contains invalid data; ignoring: '%s'										
vec	R	vec (function)										
implementation	R	implementation (definition)										
formline function	R	formline (function)										
What are and	R	What are and?										
hash	R	hash (definition)										
y function	R	y (function)										
PerlIO::scalar library	R	PerlIO::scalar (module)										
List Util library	R	List::Util (module)										
Module::Load::Conditional module	R	Module::Load::Conditional (module)										
embedding	R	embedding (definition)										
TAP Parser Multiplexer package	R	TAP::Parser::Multiplexer (module)										
How can I always keep my hash sorted	R	How can I always keep my hash sorted?										
${^UTF8CACHE}	R	${^UTF8CACHE} (variable)										
ExtUtils::MM_VMS library	R	ExtUtils::MM_VMS (module)										
File::Spec::Functions	R	File::Spec::Functions (module)										
IO::Compress::RawDeflate package	R	IO::Compress::RawDeflate (module)										
ExtUtils MY library	R	ExtUtils::MY (module)										
File Spec Win32 module	R	File::Spec::Win32 (module)										
How can I free an array or hash so my program shrinks	R	How can I free an array or hash so my program shrinks?										
PerlIO::encoding module	R	PerlIO::encoding (module)										
wait	R	wait (function)										
access a dynamic variable while a similarly named lexical is in scope	R	How can I access a dynamic variable while a similarly named lexical is in scope?										
Encode::Symbol package	R	Encode::Symbol (module)										
send() on closed socket 	R	send() on closed socket %s										
scalar context	R	scalar context (definition)										
setpgrp method	R	setpgrp (function)										
setprotoent method	R	setprotoent (function)										
ExtUtils::Command::MM library	R	ExtUtils::Command::MM (module)										
sysopen routine	R	sysopen (function)										
process an entire hash?	R	How do I process an entire hash?										
MIME Base64 library	R	MIME::Base64 (module)										
bytecode	R	bytecode (definition)										
keep persistent data across program calls?	R	How do I keep persistent data across program calls?										
open a file with a leading > or trailing blanks	R	How can I open a file with a leading ">" or trailing blanks?										
<=	R	Binary "<=" operator										
msgget sub	R	msgget (function)										
END method	R	END (function)										
Net::Netrc	R	Net::Netrc (module)										
Binary x	R	Binary "x" operator										
Unmatched '[' in POSIX class in regex; marked by <-- HERE in m//	R	Unmatched '[' in POSIX class in regex; marked by <-- HERE in m/%s/										
lookbehind definition	R	lookbehind (definition)										
IPA definition	R	IPA (definition)										
GV definition	R	GV (definition)										
TAP::Formatter::Session library	R	TAP::Formatter::Session (module)										
File Fetch library	R	File::Fetch (module)										
quote a variable to use in a regex	R	How can I quote a variable to use in a regex?										
Math BigInt CalcEmu library	R	Math::BigInt::CalcEmu (module)										
log routine	R	log (function)										
define topic	R	topic (definition)										
getpwnam returned invalid UIC %#o for user ""	R	getpwnam returned invalid UIC %#o for user "%s"										
atan2 function	R	atan2 (function)										
getlogin routine	R	getlogin (function)										
Where can I get information on Perl	R	Where can I get information on Perl?										
Module Loaded library	R	Module::Loaded (module)										
syswrite function	R	syswrite (function)										
first-come	R	first-come (definition)										
define dereference	R	dereference (definition)										
How can I measure time under a second	R	How can I measure time under a second?										
compute the difference of two arrays? How do I compute the intersection of two arrays?	R	How do I compute the difference of two arrays? How do I compute the intersection of two arrays?										
setsockopt function	R	setsockopt (function)										
find the day or week of the year?	R	How do I find the day or week of the year?										
autogeneration	R	autogeneration (definition)										
__DATA__	R	__DATA__ (function)										
define literal	R	literal (definition)										
shmwrite sub	R	shmwrite (function)										
grapheme definition	R	grapheme (definition)										
Pod Escapes	R	Pod::Escapes (module)										
ExtUtils Constant	R	ExtUtils::Constant (module)										
splice func	R	splice (function)										
TAP Object library	R	TAP::Object (module)										
IPC Open2	R	IPC::Open2 (module)										
Attempt to free temp prematurely: SV 0x	R	Attempt to free temp prematurely: SV 0x%x										
TAP Formatter Console ParallelSession module	R	TAP::Formatter::Console::ParallelSession (module)										
<=> operator	R	Binary "<=>" operator										
numeric context definition	R	numeric context (definition)										
CV	R	CV (definition)										
Can't use string ("") as  ref while "strict refs" in use	R	Can't use string ("%s"...) as %s ref while "strict refs" in use										
Digest::file module	R	Digest::file (module)										
overloading definition	R	overloading (definition)										
list operator definition	R	list operator (definition)										
-p switch	R	-p										
ExtUtils ParseXS package	R	ExtUtils::ParseXS (module)										
Can't open input file  as stdin	R	Can't open input file %s as stdin										
File Glob package	R	File::Glob (module)										
rand method	R	rand (function)										
semctl routine	R	semctl (function)										
verify a credit card checksum	R	How do I verify a credit card checksum?										
define pod	R	pod (definition)										
exception handling definition	R	exception handling (definition)										
define application	R	application (definition)										
namespace	R	namespace (definition)										
lock routine	R	lock (function)										
File Path	R	File::Path (module)										
-dt option	R	-dt										
IO Uncompress Bunzip2 library	R	IO::Uncompress::Bunzip2 (module)										
App::Prove::State::Result::Test library	R	App::Prove::State::Result::Test (module)										
while func	R	while (function)										
How do I close a file descriptor by number	R	How do I close a file descriptor by number?										
text contains non-breaking spaces pod	R	S<text>										
push routine	R	push (function)										
Pod Simple DumpAsText package	R	Pod::Simple::DumpAsText (module)										
for method	R	for (function)										
reserved words	R	reserved words (definition)										
binary operator definition	R	binary operator (definition)										
dbmopen function	R	dbmopen (function)										
IO Uncompress Inflate	R	IO::Uncompress::Inflate (module)										
Ill-formed CRTL environ value ""	R	Ill-formed CRTL environ value "%s"										
File::Path package	R	File::Path (module)										
TAP Parser Aggregator	R	TAP::Parser::Aggregator (module)										
lock subroutine	R	lock (function)										
semctl func	R	semctl (function)										
Test::Builder::Module module	R	Test::Builder::Module (module)										
define loop control statement	R	loop control statement (definition)										
Missing braces on \N{} in regex; marked by <-- HERE in m//	R	Missing braces on \N{} in regex; marked by <-- HERE in m/%s/										
Binary * operator	R	Binary "*" operator										
TAP::Formatter::Console::ParallelSession	R	TAP::Formatter::Console::ParallelSession (module)										
Encode::CN package	R	Encode::CN (module)										
list context	R	list context (definition)										
pack arrays of doubles or floats for XS code	R	How do I pack arrays of doubles or floats for XS code?										
Memoize NDBM_File module	R	Memoize::NDBM_File (module)										
define object	R	object (definition)										
Need exactly 3 octal digits in regex; marked by <-- HERE in m//	R	Need exactly 3 octal digits in regex; marked by <-- HERE in m/%s/										
shmctl method	R	shmctl (function)										
vec sub	R	vec (function)										
Encode::JP::JIS7	R	Encode::JP::JIS7 (module)										
getpwent func	R	getpwent (function)										
Modification of non-creatable array value attempted, 	R	Modification of non-creatable array value attempted, %s										
$OUTPUT_FIELD_SEPARATOR	R	$, (variable)										
block definition	R	block (definition)										
bit definition	R	bit (definition)										
y	R	y (function)										
Pod Perldoc ToNroff package	R	Pod::Perldoc::ToNroff (module)										
wantarray	R	wantarray (function)										
data structure	R	data structure (definition)										
opendir sub	R	opendir (function)										
STDERR definition	R	STDERR (definition)										
gmtime() too large	R	gmtime(%f) too large										
TAP Object	R	TAP::Object (module)										
CPAN library	R	CPAN (module)										
always keep my hash sorted	R	How can I always keep my hash sorted?										
select subroutine	R	select (function)										
PAUSE definition	R	PAUSE (definition)										
exit routine	R	exit (function)										
wrong with using backticks in a void context?	R	What's wrong with using backticks in a void context?										
Net::servent	R	Net::servent (module)										
substr func	R	substr (function)										
flush definition	R	flush (definition)										
-V switch	R	-V										
Eval-group not allowed at runtime, use re 'eval' in regex m//	R	Eval-group not allowed at runtime, use re 'eval' in regex m/%s/										
lcfirst routine	R	lcfirst (function)										
Memoize::NDBM_File module	R	Memoize::NDBM_File (module)										
Class::Struct	R	Class::Struct (module)										
recursion definition	R	recursion (definition)										
define distribution	R	distribution (definition)										
How do I change the Nth occurrence of something	R	How do I change the Nth occurrence of something?										
Tie Hash module	R	Tie::Hash (module)										
readpipe routine	R	readpipe (function)										
define identifier	R	identifier (definition)										
-u flag	R	-u										
Sys::Syslog module	R	Sys::Syslog (module)										
Encode::MIME::Name package	R	Encode::MIME::Name (module)										
Cannot convert a reference to  to typeglob	R	Cannot convert a reference to %s to typeglob										
File Compare	R	File::Compare (module)										
${^PREMATCH}	R	${^PREMATCH} (variable)										
ExtUtils::MM_Win32	R	ExtUtils::MM_Win32 (module)										
Encode GSM0338 module	R	Encode::GSM0338 (module)										
Scalar::Util	R	Scalar::Util (module)										
C definition	R	C (definition)										
Data::Dumper package	R	Data::Dumper (module)										
TAP::Parser::Iterator::Stream package	R	TAP::Parser::Iterator::Stream (module)										
FileCache	R	FileCache (module)										
readpipe subroutine	R	readpipe (function)										
parent class (definition)	R	base class										
owner	R	owner (definition)										
How can I do RPC in Perl	R	How can I do RPC in Perl?										
Pod::Checker	R	Pod::Checker (module)										
getservbyname subroutine	R	getservbyname (function)										
ge subroutine	R	ge (function)										
difference between perl and Perl	R	What's the difference between "perl" and "Perl"?										
symbol table definition	R	symbol table (definition)										
getc sub	R	getc (function)										
define left shift	R	left shift (definition)										
Data Dumper library	R	Data::Dumper (module)										
qw function	R	qw (function)										
Pod Perldoc BaseTo	R	Pod::Perldoc::BaseTo (module)										
TAP::Parser::Iterator::Stream library	R	TAP::Parser::Iterator::Stream (module)										
printf sub	R	printf (function)										
define umask	R	umask (definition)										
shebang definition	R	shebang (definition)										
associative array	R	associative array (definition)										
tainted definition	R	tainted (definition)										
define codepoint	R	codepoint (definition)										
(?(DEFINE)....) does not allow branches in regex; marked by <-- HERE in m//	R	(?(DEFINE)....) does not allow branches in regex; marked by <-- HERE in m/%s/										
C formatting code	R	C<code>										
find the day or week of the year	R	How do I find the day or week of the year?										
$a	R	$b (variable)										
chown	R	chown (function)										
Pod Perldoc ToXml package	R	Pod::Perldoc::ToXml (module)										
define decrement	R	decrement (definition)										
Encode::MIME::Header	R	Encode::MIME::Header (module)										
syscall definition	R	syscall (definition)										
keyword	R	keyword (definition)										
Pod ParseUtils module	R	Pod::ParseUtils (module)										
code generator definition	R	code generator (definition)										
define return value	R	return value (definition)										
exit subroutine	R	exit (function)										
I copied the Perl binary from one machine to another but scripts dont work	R	I copied the Perl binary from one machine to another, but scripts don't work.										
getnetbyname function	R	getnetbyname (function)										
write expect in Perl	R	How can I write expect in Perl?										
define WYSIWYG	R	WYSIWYG (definition)										
define dweomer	R	dweomer (definition)										
hope to use regular expressions without creating illegible and unmaintainable code?	R	How can I hope to use regular expressions without creating illegible and unmaintainable code?										
flush/unbuffer an output filehandle? Why must I do this?	R	How do I flush/unbuffer an output filehandle? Why must I do this?										
tell the difference between errors from the shell and perl?	R	How do I tell the difference between errors from the shell and perl?										
Reversed = operator	R	Reversed %s= operator										
Net SMTP library	R	Net::SMTP (module)										
Tie::Handle package	R	Tie::Handle (module)										
cmp method	R	cmp (function)										
Binary !~ operator	R	Binary "!~" operator										
In '(?...)', the '(' and '?' must be adjacent in regex; marked by <-- HERE in m//	R	In '(?...)', the '(' and '?' must be adjacent in regex; marked by <-- HERE in m/%s/										
fc routine	R	fc (function)										
sem not implemented	R	sem%s not implemented										
How can I reliably rename a file	R	How can I reliably rename a file?										
Module::Load::Conditional	R	Module::Load::Conditional (module)										
-a option	R	-a										
co-maintainer definition	R	co-maintainer (definition)										
preprocessing	R	preprocessing (definition)										
-0 flag	R	-0 [ octal/hexadecimal ]										
Test Builder Tester Color library	R	Test::Builder::Tester::Color (module)										
say sub	R	say (function)										
Tie Handle	R	Tie::Handle (module)										
Encode GSM0338 package	R	Encode::GSM0338 (module)										
List Util XS module	R	List::Util::XS (module)										
getpriority subroutine	R	getpriority (function)										
define inheritance	R	inheritance (definition)										
Net FTP dataconn module	R	Net::FTP::dataconn (module)										
lvalue modifier	R	lvalue modifier (definition)										
log func	R	log (function)										
fc method	R	fc (function)										
Encode JP JIS7 package	R	Encode::JP::JIS7 (module)										
$PROCESS_ID	R	$$ (variable)										
static definition	R	static (definition)										
callback definition	R	callback (definition)										
Compress Zlib module	R	Compress::Zlib (module)										
Test Builder Tester package	R	Test::Builder::Tester (module)										
associativity definition	R	associativity (definition)										
difference between "delete" and "undef" with hashes?	R	What's the difference between "delete" and "undef" with hashes?										
mkdir routine	R	mkdir (function)										
ExtUtils::Embed package	R	ExtUtils::Embed (module)										
define XSUB	R	XSUB (definition)										
taint mode	R	taint mode (definition)										
Pod::Perldoc module	R	Pod::Perldoc (module)										
IO Uncompress Unzip module	R	IO::Uncompress::Unzip (module)										
DB_File library	R	DB_File (module)										
wantarray routine	R	wantarray (function)										
tr subroutine	R	tr (function)										
eq function	R	eq (function)										
HANDLE->autoflush( EXPR )	R	$| (variable)										
print() on closed filehandle 	R	print() on closed filehandle %s										
telldir method	R	telldir (function)										
define token	R	token (definition)										
static scoping definition	R	static scoping (definition)										
DB module	R	DB (module)										
semget method	R	semget (function)										
open a pipe both to and from a command	R	How can I open a pipe both to and from a command?										
TAP Formatter Console module	R	TAP::Formatter::Console (module)										
IO::Compress::RawDeflate	R	IO::Compress::RawDeflate (module)										
$^T	R	$^T (variable)										
getpwent	R	getpwent (function)										
multiply matrices	R	How do I multiply matrices?										
pod L	R	L<name>										
Term ANSIColor package	R	Term::ANSIColor (module)										
IO Compress Bzip2	R	IO::Compress::Bzip2 (module)										
chown func	R	chown (function)										
Test Harness package	R	Test::Harness (module)										
ExtUtils::Liblist package	R	ExtUtils::Liblist (module)										
: loadable library and perl binaries are mismatched (got handshake key , needed )	R	%s: loadable library and perl binaries are mismatched (got handshake key %p, needed %p)										
Locale::Language package	R	Locale::Language (module)										
Thread::Semaphore library	R	Thread::Semaphore (module)										
RTFM definition	R	RTFM (definition)										
Pod::Simple::XHTML package	R	Pod::Simple::XHTML (module)										
getprotoent function	R	getprotoent (function)										
${^GLOBAL_PHASE}	R	${^GLOBAL_PHASE} (variable)										
TAP Parser Scheduler Spinner	R	TAP::Parser::Scheduler::Spinner (module)										
granularity	R	granularity (definition)										
Test Builder module	R	Test::Builder (module)										
no	R	no (function)										
lstat subroutine	R	lstat (function)										
TAP Parser Iterator Array	R	TAP::Parser::Iterator::Array (module)										
ExtUtils MM_NW5 package	R	ExtUtils::MM_NW5 (module)										
\N{} in inverted character class or as a range end-point is restricted to one character in regex; marked by <-- HERE in m//	R	\N{} in inverted character class or as a range end-point is restricted to one character in regex; marked by <-- HERE in m/%s/										
IO library	R	IO (module)										
-F option	R	-F pattern										
Warning: unable to close filehandle properly: %s	R	Warning: unable to close filehandle %s properly: %s										
IO Compress Deflate	R	IO::Compress::Deflate (module)										
define truncating	R	truncating (definition)										
RV	R	RV (definition)										
IO::Dir	R	IO::Dir (module)										
How do I copy an entire directory	R	How do I copy an entire directory?										
object	R	object (definition)										
make the Perl equivalent of a C structureC++ classhash or array of hashes or arrays	R	How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?										
How can I make my Perl program run faster	R	How can I make my Perl program run faster?										
ExtUtils Liblist package	R	ExtUtils::Liblist (module)										
Search Dict module	R	Search::Dict (module)										
ExtUtils::MM_UWIN module	R	ExtUtils::MM_UWIN (module)										
return sub	R	return (function)										
Buffer overflow in prime_env_iter: 	R	Buffer overflow in prime_env_iter: %s										
find out if I'm running interactively or not?	R	How do I find out if I'm running interactively or not?										
IO Compress Base module	R	IO::Compress::Base (module)										
ord subroutine	R	ord (function)										
chr func	R	chr (function)										
msgrcv routine	R	msgrcv (function)										
Filter::Util::Call package	R	Filter::Util::Call (module)										
$OFS (variable)	R	$, (variable)										
How can I make my Perl program take less memory	R	How can I make my Perl program take less memory?										
$PERL_VERSION (variable)	R	$^V (variable)										
define TMTOWTDI	R	TMTOWTDI (definition)										
class method	R	class method (definition)										
syscall function	R	syscall (function)										
User::pwent package	R	User::pwent (module)										
goto routine	R	goto (function)										
File::Spec::Cygwin package	R	File::Spec::Cygwin (module)										
close func	R	close (function)										
grep definition	R	grep (definition)										
exit func	R	exit (function)										
define reserved words	R	reserved words (definition)										
$FORMAT_LINES_PER_PAGE	R	$= (variable)										
Digest SHA module	R	Digest::SHA (module)										
TAP Parser ResultFactory package	R	TAP::Parser::ResultFactory (module)										
Net hostent library	R	Net::hostent (module)										
File Spec Win32 package	R	File::Spec::Win32 (module)										
Tie RefHash library	R	Tie::RefHash (module)										
IO Uncompress Gunzip library	R	IO::Uncompress::Gunzip (module)										
Pod::Perldoc::ToText module	R	Pod::Perldoc::ToText (module)										
reset method	R	reset (function)										
Pod::Simple::LinkSection module	R	Pod::Simple::LinkSection (module)										
pod bold text	R	B<text>										
Pod::Parser	R	Pod::Parser (module)										
Binary > operator	R	Binary ">" operator										
SelectSaver	R	SelectSaver (module)										
Locale Currency module	R	Locale::Currency (module)										
sprintf function	R	sprintf (function)										
Why does Perl let me delete readonly files Why does clobber protected files Isnt this a bug in Perl	R	Why does Perl let me delete read-only files? Why does clobber protected files? Isn't this a bug in Perl?										
TAP::Parser::Iterator::Array package	R	TAP::Parser::Iterator::Array (module)										
-t option	R	-t										
IO Compress RawDeflate package	R	IO::Compress::RawDeflate (module)										
Illegal switch in PERL5OPT: -	R	Illegal switch in PERL5OPT: -%c										
say routine	R	say (function)										
PerlIO via QuotedPrint package	R	PerlIO::via::QuotedPrint (module)										
push subroutine	R	push (function)										
msgget	R	msgget (function)										
IO::Compress::Gzip library	R	IO::Compress::Gzip (module)										
sin function	R	sin (function)										
character	R	character (definition)										
Test Builder Tester Color	R	Test::Builder::Tester::Color (module)										
What if I dont encode	R	What if I don't encode?										
TAP::Formatter::Color library	R	TAP::Formatter::Color (module)										
loop control statement definition	R	loop control statement (definition)										
-x option	R	-x directory										
I18N::Collate	R	I18N::Collate (module)										
tell method	R	tell (function)										
getc func	R	getc (function)										
ExtUtils ParseXS library	R	ExtUtils::ParseXS (module)										
ExtUtils::Constant::Base package	R	ExtUtils::Constant::Base (module)										
Useless use of (?-p) in regex; marked by <-- HERE in m//	R	Useless use of (?-p) in regex; marked by <-- HERE in m/%s/										
Search::Dict package	R	Search::Dict (module)										
IO::Uncompress::Base	R	IO::Uncompress::Base (module)										
Encode::Unicode module	R	Encode::Unicode (module)										
ExtUtils testlib	R	ExtUtils::testlib (module)										
User grent library	R	User::grent (module)										
Pod Simple PullParserStartToken	R	Pod::Simple::PullParserStartToken (module)										
ExtUtils MM_Unix library	R	ExtUtils::MM_Unix (module)										
Non-octal character ''. Resolved as ""	R	Non-octal character '%c'. Resolved as "%s"										
Net POP3 package	R	Net::POP3 (module)										
Can't use  for loop variable	R	Can't use %s for loop variable										
IO package	R	IO (module)										
filter definition	R	filter (definition)										
> operator	R	Binary ">" operator										
little-endian definition	R	little-endian (definition)										
Pod::Perldoc::BaseTo	R	Pod::Perldoc::BaseTo (module)										
matching	R	matching (definition)										
TAP::Formatter::Console::ParallelSession module	R	TAP::Formatter::Console::ParallelSession (module)										
File::Spec::Cygwin library	R	File::Spec::Cygwin (module)										
when sub	R	when (function)										
ExtUtils MM_VMS	R	ExtUtils::MM_VMS (module)										
CHECK func	R	CHECK (function)										
TAP::Parser::Result::YAML	R	TAP::Parser::Result::YAML (module)										
How do I pack arrays of doubles or floats for XS code	R	How do I pack arrays of doubles or floats for XS code?										
Tie::Scalar library	R	Tie::Scalar (module)										
Pod Simple PullParserStartToken library	R	Pod::Simple::PullParserStartToken (module)										
PerlIO encoding library	R	PerlIO::encoding (module)										
IO Zlib	R	IO::Zlib (module)										
fcntl method	R	fcntl (function)										
study func	R	study (function)										
define unary operator	R	unary operator (definition)										
Pern definition	R	Pern (definition)										
IO::Compress::Base package	R	IO::Compress::Base (module)										
map method	R	map (function)										
use sub	R	use (function)										
TAP Parser Result Comment module	R	TAP::Parser::Result::Comment (module)										
$^O	R	$^O (variable)										
telldir routine	R	telldir (function)										
-d: MOD[=bar,baz]	R	-dt: MOD[=bar,baz]										
Unknown Unicode option value 	R	Unknown Unicode option value %d										
mojibake definition	R	mojibake (definition)										
msgctl method	R	msgctl (function)										
define null list	R	null list (definition)										
DBM_Filter compress package	R	DBM_Filter::compress (module)										
TAP::Parser::YAMLish::Writer module	R	TAP::Parser::YAMLish::Writer (module)										
socketph and where do I get it	R	What is socket.ph and where do I get it?										
ExtUtils::MM_VOS package	R	ExtUtils::MM_VOS (module)										
runtime definition	R	runtime (definition)										
dynamic scoping definition	R	dynamic scoping (definition)										
or method	R	or (function)										
local sub	R	local (function)										
ExtUtils testlib module	R	ExtUtils::testlib (module)										
Can't use  ref as  ref	R	Can't use %s ref as %s ref										
Params Check library	R	Params::Check (module)										
How do I read and write the serial port	R	How do I read and write the serial port?										
substitution definition	R	substitution (definition)										
ExtUtils MM_DOS package	R	ExtUtils::MM_DOS (module)										
untie sub	R	untie (function)										
Term::Complete library	R	Term::Complete (module)										
Modification of non-creatable hash value attempted, 	R	Modification of non-creatable hash value attempted, %s										
lc subroutine	R	lc (function)										
Encode::JP::H2Z	R	Encode::JP::H2Z (module)										
superclass	R	superclass (definition)										
Module::Load library	R	Module::Load (module)										
regular file definition	R	regular file (definition)										
IO::Socket package	R	IO::Socket (module)										
-S switch	R	-S										
ExtUtils::MakeMaker package	R	ExtUtils::MakeMaker (module)										
state method	R	state (function)										
Pod Text Overstrike library	R	Pod::Text::Overstrike (module)										
getsockname	R	getsockname (function)										
Unary -	R	Unary "-" operator										
Test::Builder::Tester library	R	Test::Builder::Tester (module)										
File Spec	R	File::Spec (module)										
environment definition	R	environment (definition)										
eof sub	R	eof (function)										
decode encrypted password files?	R	How do I decode encrypted password files?										
topic	R	topic (definition)										
getprotobynumber subroutine	R	getprotobynumber (function)										
sqrt sub	R	sqrt (function)										
endnetent subroutine	R	endnetent (function)										
split method	R	split (function)										
make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?	R	How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?										
Applying  to  will act on scalar()	R	Applying %s to %s will act on scalar(%s)										
fc subroutine	R	fc (function)										
Binary .	R	Binary "." operator										
DESTROY func	R	DESTROY (function)										
MIME QuotedPrint package	R	MIME::QuotedPrint (module)										
$POSTMATCH (variable)	R	$' (variable)										
Argument list not closed for PerlIO layer ""	R	Argument list not closed for PerlIO layer "%s"										
Whats wrong with always quoting $vars	R	What's wrong with always quoting "$vars"?										
listen func	R	listen (function)										
le operator	R	Binary "le" operator										
untie attempted while  inner references still exist	R	untie attempted while %d inner references still exist										
variable interpolation definition	R	variable interpolation (definition)										
endpwent func	R	endpwent (function)										
getsockname routine	R	getsockname (function)										
create a switch or case statement	R	How do I create a switch or case statement?										
IO::Compress::Gzip package	R	IO::Compress::Gzip (module)										
__PACKAGE__	R	__PACKAGE__ (function)										
operand definition	R	operand (definition)										
!= operator	R	Binary "!=" operator										
uc function	R	uc (function)										
$FORMAT_LINES_LEFT (variable)	R	$- (variable)										
system func	R	system (function)										
rewinddir func	R	rewinddir (function)										
atomic operation definition	R	atomic operation (definition)										
getpwnam routine	R	getpwnam (function)										
ExtUtils::MM_Unix	R	ExtUtils::MM_Unix (module)										
syntax tree	R	syntax tree (definition)										
Scalar Util module	R	Scalar::Util (module)										
readlink	R	readlink (function)										
$DEBUGGING	R	$^D (variable)										
getsockopt func	R	getsockopt (function)										
$?	R	$? (variable)										
fileno method	R	fileno (function)										
How do I skip some return values	R	How do I skip some return values?										
IO::Uncompress::Unzip package	R	IO::Uncompress::Unzip (module)										
List Util XS package	R	List::Util::XS (module)										
alarm function	R	alarm (function)										
TAP Parser Result Pragma package	R	TAP::Parser::Result::Pragma (module)										
endnetent	R	endnetent (function)										
User::pwent	R	User::pwent (module)										
progressive matching definition	R	progressive matching (definition)										
goto subroutine	R	goto (function)										
used for filenames pod	R	F<filename>										
IO Uncompress Base package	R	IO::Uncompress::Base (module)										
namespace definition	R	namespace (definition)										
Pod::Simple::HTMLBatch library	R	Pod::Simple::HTMLBatch (module)										
Encode::GSM0338 module	R	Encode::GSM0338 (module)										
substr routine	R	substr (function)										
pop function	R	pop (function)										
and subroutine	R	and (function)										
Use of  is deprecated	R	Use of %s is deprecated										
getpgrp routine	R	getpgrp (function)										
Pod Perldoc ToTk module	R	Pod::Perldoc::ToTk (module)										
X formatting code	R	X<topic name>										
define destroy	R	destroy (definition)										
define minimalism	R	minimalism (definition)										
Can't find string terminator  anywhere before EOF	R	Can't find string terminator %s anywhere before EOF										
Pod::Simple	R	Pod::Simple (module)										
modifier definition	R	modifier (definition)										
How do I check a valid mail address	R	How do I check a valid mail address?										
-M [ - ] 'module ...'	R	-[mM] [ - ] module=arg[,arg]...										
eq operator	R	Binary "eq" operator										
Sys::Syslog library	R	Sys::Syslog (module)										
STDIO	R	STDIO (definition)										
use method	R	use (function)										
ExtUtils::MakeMaker	R	ExtUtils::MakeMaker (module)										
associative array definition	R	associative array (definition)										
Unexpected binary operator '' with no preceding operand in regex; marked by <-- HERE in m//	R	Unexpected binary operator '%c' with no preceding operand in regex; marked by <-- HERE in m/%s/										
getprotobyname sub	R	getprotobyname (function)										
IPC::Open2	R	IPC::Open2 (module)										
IO::Uncompress::Inflate library	R	IO::Uncompress::Inflate (module)										
Memoize::Storable package	R	Memoize::Storable (module)										
assignment operator definition	R	assignment operator (definition)										
symlink subroutine	R	symlink (function)										
semop sub	R	semop (function)										
mojibake	R	mojibake (definition)										
=back pod	R	=back										
interpolation	R	interpolation (definition)										
List Util XS	R	List::Util::XS (module)										
How stable is Perl	R	How stable is Perl?										
keys method	R	keys (function)										
Locale::Maketext::Simple	R	Locale::Maketext::Simple (module)										
pack sub	R	pack (function)										
UDP definition	R	UDP (definition)										
gt operator	R	Binary "gt" operator										
-t flag	R	-t										
Net::Ping package	R	Net::Ping (module)										
shmwrite function	R	shmwrite (function)										
File::Spec::Cygwin	R	File::Spec::Cygwin (module)										
Does Perl have a Year 2000 or 2038 problem Is Perl Y2K compliant	R	Does Perl have a Year 2000 or 2038 problem? Is Perl Y2K compliant?										
define overriding	R	overriding (definition)										
socketpair method	R	socketpair (function)										
Sys Syslog package	R	Sys::Syslog (module)										
How can I output Roman numerals	R	How can I output Roman numerals?										
Pod::Simple::HTML	R	Pod::Simple::HTML (module)										
IO::Pipe	R	IO::Pipe (module)										
ExtUtils::MM_UWIN package	R	ExtUtils::MM_UWIN (module)										
reset func	R	reset (function)										
ExtUtils::MM_Any module	R	ExtUtils::MM_Any (module)										
getprotobyname routine	R	getprotobyname (function)										
Encode CJKConstants package	R	Encode::CJKConstants (module)										
ordinal	R	ordinal (definition)										
Pod::Simple::Search	R	Pod::Simple::Search (module)										
define sandbox	R	sandbox (definition)										
$^X	R	$^X (variable)										
Test Harness module	R	Test::Harness (module)										
Binary != operator	R	Binary "!=" operator										
stack	R	stack (definition)										
-n flag	R	-n										
crypt routine	R	crypt (function)										
X pod code	R	X<topic name>										
gethostent routine	R	gethostent (function)										
Invalid [] range "" in regex; marked by <-- HERE in m//	R	Invalid [] range "%s" in regex; marked by <-- HERE in m/%s/										
eq sub	R	eq (function)										
ucfirst routine	R	ucfirst (function)										
/i modifier	R	/i regular expression modifier										
Net NNTP library	R	Net::NNTP (module)										
unpack function	R	unpack (function)										
manipulate arrays of bits?	R	How do I manipulate arrays of bits?										
unshift func	R	unshift (function)										
Devel::SelfStubber package	R	Devel::SelfStubber (module)										
Memoize::ExpireFile library	R	Memoize::ExpireFile (module)										
UTF-16 surrogate U+	R	UTF-16 surrogate U+%X										
endpwent	R	endpwent (function)										
regular expression modifier	R	regular expression modifier (definition)										
sprintf routine	R	sprintf (function)										
not sub	R	not (function)										
Pod Simple PullParserEndToken library	R	Pod::Simple::PullParserEndToken (module)										
ExtUtils::CBuilder module	R	ExtUtils::CBuilder (module)										
subclass definition	R	subclass (definition)										
Encode::KR package	R	Encode::KR (module)										
getservbyport	R	getservbyport (function)										
Locale::Maketext::Guts package	R	Locale::Maketext::Guts (module)										
IPC Cmd package	R	IPC::Cmd (module)										
Errno	R	Errno (module)										
ExtUtils::Packlist library	R	ExtUtils::Packlist (module)										
 is aliased to 	R	%ENV is aliased to %s										
continuation	R	continuation (definition)										
Pod Select library	R	Pod::Select (module)										
circumfix operator definition	R	circumfix operator (definition)										
Which web framework should I use	R	Which web framework should I use?										
Pod Perldoc ToTk	R	Pod::Perldoc::ToTk (module)										
define server	R	server (definition)										
Net::FTP module	R	Net::FTP (module)										
pipe definition	R	pipe (definition)										
Pod Simple TextContent module	R	Pod::Simple::TextContent (module)										
fcntl sub	R	fcntl (function)										
pod a hyperlink	R	L<name>										
FAQ definition	R	FAQ (definition)										
 General Questions About Perl	R	: General Questions About Perl										
constructor	R	constructor (definition)										
define regular expression	R	regular expression (definition)										
-V option	R	-V										
TAP Parser ResultFactory library	R	TAP::Parser::ResultFactory (module)										
define pseudofunction	R	pseudofunction (definition)										
${^OPEN}	R	${^OPEN} (variable)										
count the number of occurrences of a substring within a string	R	How can I count the number of occurrences of a substring within a string?										
DBM_Filter utf8	R	DBM_Filter::utf8 (module)										
Can't rename  to : , skipping file	R	Can't rename %s to %s: %s, skipping file										
Pod Simple DumpAsXML library	R	Pod::Simple::DumpAsXML (module)										
freely redistributable definition	R	freely redistributable (definition)										
find out which operating system Im running under	R	How do I find out which operating system I'm running under?										
define algorithm	R	algorithm (definition)										
Not enough arguments for 	R	Not enough arguments for %s										
%^H	R	%^H (variable)										
is-a	R	is-a (definition)										
system sub	R	system (function)										
Tie::StdHandle library	R	Tie::StdHandle (module)										
$,	R	$, (variable)										
Pod::Text package	R	Pod::Text (module)										
define bucket	R	bucket (definition)										
ge operator	R	Binary "ge" operator										
check if a key exists in a multilevel hash?	R	How can I check if a key exists in a multilevel hash?										
state routine	R	state (function)										
Test Builder Tester	R	Test::Builder::Tester (module)										
Precedence problem: open  should be open()	R	Precedence problem: open %s should be open(%s)										
seek sub	R	seek (function)										
Pod::Simple::PullParserStartToken	R	Pod::Simple::PullParserStartToken (module)										
sort function	R	sort (function)										
Sys Hostname library	R	Sys::Hostname (module)										
${^POSTMATCH}	R	${^POSTMATCH} (variable)										
F formatting code	R	F<filename>										
define dual-lived	R	dual-lived (definition)										
ARGVOUT	R	ARGVOUT (variable)										
Regexp out of space in regex m//	R	Regexp out of space in regex m/%s/										
Unicode definition	R	Unicode (definition)										
ExtUtils Packlist module	R	ExtUtils::Packlist (module)										
O module	R	O (module)										
Locale Maketext module	R	Locale::Maketext (module)										
instance data	R	instance data (definition)										
pack function	R	pack (function)										
TAP Parser Result Version package	R	TAP::Parser::Result::Version (module)										
get the screen size?	R	How do I get the screen size?										
DBM_Filter utf8 module	R	DBM_Filter::utf8 (module)										
Encode::KR library	R	Encode::KR (module)										
chomp func	R	chomp (function)										
define prototype	R	prototype (definition)										
process/modify each element of an array?	R	How do I process/modify each element of an array?										
Tie::Scalar	R	Tie::Scalar (module)										
define typeglob	R	typeglob (definition)										
JAPH definition	R	JAPH (definition)										
define address operator	R	address operator (definition)										
Tie Handle module	R	Tie::Handle (module)										
socket func	R	socket (function)										
Memoize ExpireFile	R	Memoize::ExpireFile (module)										
IO Socket library	R	IO::Socket (module)										
=cut pod	R	=cut										
scratchpad definition	R	scratchpad (definition)										
define reaping	R	reaping (definition)										
Time HiRes	R	Time::HiRes (module)										
define formal arguments	R	formal arguments (definition)										
ExtUtils::MM_VOS module	R	ExtUtils::MM_VOS (module)										
zero width	R	zero width (definition)										
syntactic sugar	R	syntactic sugar (definition)										
Test Builder Module library	R	Test::Builder::Module (module)										
${^RE_TRIE_MAXBUF}	R	${^RE_TRIE_MAXBUF} (variable)										
endservent subroutine	R	endservent (function)										
C preprocessor	R	C preprocessor (definition)										
$WARNING	R	$^W (variable)										
Getopt Long module	R	Getopt::Long (module)										
IO::Uncompress::Unzip library	R	IO::Uncompress::Unzip (module)										
IO::Pipe package	R	IO::Pipe (module)										
Unmatched ( in regex; marked by <-- HERE in m/%s/	R	Unmatched ) in regex; marked by <-- HERE in m/%s/										
pull out lines between two patterns that are themselves on different lines?	R	How can I pull out lines between two patterns that are themselves on different lines?										
-d: option	R	-dt: MOD[=bar,baz]										
@INC	R	@INC (variable)										
Cannot copy to 	R	Cannot copy to %s										
Encode Config	R	Encode::Config (module)										
ExtUtils::Constant::Utils	R	ExtUtils::Constant::Utils (module)										
endnetent function	R	endnetent (function)										
English package	R	English (module)										
tell whether there's a character waiting on a filehandle?	R	How can I tell whether there's a character waiting on a filehandle?										
sleep func	R	sleep (function)										
lt function	R	lt (function)										
define grep	R	grep (definition)										
default func	R	default (function)										
Pod Simple package	R	Pod::Simple (module)										
Ambiguous use of  resolved as operator 	R	Ambiguous use of %c resolved as operator %c										
getservbyname sub	R	getservbyname (function)										
add the directory my program lives in to the modulelibrary search path	R	How do I add the directory my program lives in to the module/library search path?										
TAP::Parser::Result::Plan	R	TAP::Parser::Result::Plan (module)										
Locale::Maketext::GutsLoader	R	Locale::Maketext::GutsLoader (module)										
STDIO definition	R	STDIO (definition)										
Tie::File package	R	Tie::File (module)										
define IP	R	IP (definition)										
copy an entire directory	R	How do I copy an entire directory?										
<= operator	R	Binary "<=" operator										
define STDERR	R	STDERR (definition)										
read a single character from a file? From the keyboard?	R	How can I read a single character from a file? From the keyboard?										
endgrent method	R	endgrent (function)										
How do I strip blank space from the beginningend of a string	R	How do I strip blank space from the beginning/end of a string?										
ExtUtils::MM_NW5 module	R	ExtUtils::MM_NW5 (module)										
difference between dynamic and lexical (static) scoping? Between local() and my()?	R	What's the difference between dynamic and lexical (static) scoping? Between local() and my()?										
How can I make match national character sets	R	How can I make match national character sets?										
CPAN::Version	R	CPAN::Version (module)										
Net Time module	R	Net::Time (module)										
keys function	R	keys (function)										
IO Seekable library	R	IO::Seekable (module)										
DB_File package	R	DB_File (module)										
Test::More package	R	Test::More (module)										
TAP Formatter Session	R	TAP::Formatter::Session (module)										
Encode MIME Header	R	Encode::MIME::Header (module)										
Illegal hexadecimal digit  ignored	R	Illegal hexadecimal digit %s ignored										
symbolic debugger definition	R	symbolic debugger (definition)										
setuid definition	R	setuid (definition)										
TAP Parser Iterator Array library	R	TAP::Parser::Iterator::Array (module)										
qw subroutine	R	qw (function)										
Encode::TW library	R	Encode::TW (module)										
ExtUtils MM_Any package	R	ExtUtils::MM_Any (module)										
evalbytes routine	R	evalbytes (function)										
Bizarre copy of 	R	Bizarre copy of %s										
DBM_Filter utf8 package	R	DBM_Filter::utf8 (module)										
Pod Simple Checker	R	Pod::Simple::Checker (module)										
Pod Simple Search	R	Pod::Simple::Search (module)										
Why cant I get the output of a command with system	R	Why can't I get the output of a command with system()?										
File::Find	R	File::Find (module)										
make a filehandle local to a subroutine How do I pass filehandles between subroutines How do I make an array of filehandles	R	How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?										
rand function	R	rand (function)										
Regexp modifier "" may not appear after the "-" in regex; marked by <-- HERE in m//	R	Regexp modifier "%c" may not appear after the "-" in regex; marked by <-- HERE in m/%s/										
List Util	R	List::Util (module)										
Parse::CPAN::Meta package	R	Parse::CPAN::Meta (module)										
define shebang	R	shebang (definition)										
Tie::Scalar module	R	Tie::Scalar (module)										
access or change N characters of a string?	R	How can I access or change N characters of a string?										
, operator	R	Binary "," operator										
Term ReadLine	R	Term::ReadLine (module)										
Pod::Simple::TextContent module	R	Pod::Simple::TextContent (module)										
Encode::GSM0338 library	R	Encode::GSM0338 (module)										
Usage: Win32::()	R	Usage: Win32::%s(%s)										
lexer	R	lexer (definition)										
Filehandle  reopened as  only for input	R	Filehandle %s reopened as %s only for input										
How can I determine if a string is a text string or a binary string	R	How can I determine if a string is a text string or a binary string?										
Thread::Queue library	R	Thread::Queue (module)										
When I tried to run my script I got this message What does it mean	R	When I tried to run my script, I got this message. What does it mean?										
ExtUtils::Miniperl package	R	ExtUtils::Miniperl (module)										
hard reference definition	R	hard reference (definition)										
pos routine	R	pos (function)										
define Perl mongers	R	Perl mongers (definition)										
sort routine	R	sort (function)										
make my CGI script more efficient?	R	How can I make my CGI script more efficient?										
File::Temp	R	File::Temp (module)										
Unicode Normalize module	R	Unicode::Normalize (module)										
type casting definition	R	type casting (definition)										
Net::Cmd package	R	Net::Cmd (module)										
Memoize SDBM_File	R	Memoize::SDBM_File (module)										
seek func	R	seek (function)										
Unary ~ operator	R	Unary "~" operator										
getnetent func	R	getnetent (function)										
ExtUtils Manifest module	R	ExtUtils::Manifest (module)										
getgrnam sub	R	getgrnam (function)										
TAP::Formatter::File	R	TAP::Formatter::File (module)										
panic: pad_swipe curpad, !=	R	panic: pad_swipe curpad, %p!=%p										
ExtUtils testlib package	R	ExtUtils::testlib (module)										
Where can I learn about objectoriented Perl programming	R	Where can I learn about object-oriented Perl programming?										
AutoSplit	R	AutoSplit (module)										
Encode Config module	R	Encode::Config (module)										
TAP::Parser::Result::Version	R	TAP::Parser::Result::Version (module)										
define typedef	R	typedef (definition)										
PerlIO library	R	PerlIO (module)										
Encode MIME Header library	R	Encode::MIME::Header (module)										
Encode::MIME::Header module	R	Encode::MIME::Header (module)										
Too many arguments for 	R	Too many arguments for %s										
HANDLE->format_top_name(EXPR)	R	$^ (variable)										
Exiting format via 	R	Exiting format via %s										
process each word on each line?	R	How do I process each word on each line?										
Net NNTP	R	Net::NNTP (module)										
crossreference my Perl programs	R	How do I cross-reference my Perl programs?										
symbol	R	symbol (definition)										
Test Simple library	R	Test::Simple (module)										
Pod Simple LinkSection package	R	Pod::Simple::LinkSection (module)										
SDBM_File	R	SDBM_File (module)										
Net::Domain module	R	Net::Domain (module)										
Out of memory during request for 	R	Out of memory during request for %s										
open a filehandle to a string?	R	How can I open a filehandle to a string?										
ExtUtils::MM_Any	R	ExtUtils::MM_Any (module)										
How can I copy a file	R	How can I copy a file?										
IO Socket	R	IO::Socket (module)										
Locale Country module	R	Locale::Country (module)										
lvalue attribute  already-defined subroutine	R	lvalue attribute %s already-defined subroutine										
Unrecognized escape \ passed through in regex; marked by <-- HERE in m//	R	Unrecognized escape \%s passed through in regex; marked by <-- HERE in m/%s/										
Argument "" isn't numeric	R	Argument "%s" isn't numeric%s										
define list	R	list (definition)										
index function	R	index (function)										
How can I do an atexit or setjmplongjmp Exception handling	R	How can I do an atexit() or setjmp()/longjmp()? (Exception handling)										
-h flag	R	-h										
make my Perl program run faster	R	How can I make my Perl program run faster?										
subclass (definition)	R	derived class										
strip blank space from the beginningend of a string	R	How do I strip blank space from the beginning/end of a string?										
close method	R	close (function)										
Pod Simple PullParserTextToken	R	Pod::Simple::PullParserTextToken (module)										
chroot method	R	chroot (function)										
bless definition	R	bless (definition)										
cache definition	R	cache (definition)										
How do I processmodify each element of an array	R	How do I process/modify each element of an array?										
App::Prove::State::Result::Test	R	App::Prove::State::Result::Test (module)										
operand	R	operand (definition)										
TAP Formatter Console ParallelSession library	R	TAP::Formatter::Console::ParallelSession (module)										
file test operator definition	R	file test operator (definition)										
TAP Formatter File module	R	TAP::Formatter::File (module)										
Wide character (U+) in 	R	Wide character (U+%X) in %s										
-s switch	R	-s										
get to work on [MS-DOS,NT,...]?	R	How can I get to work on [MS-DOS,NT,...]?										
ord func	R	ord (function)										
msgsnd method	R	msgsnd (function)										
backward compatibility definition	R	backward compatibility (definition)										
$NR (variable)	R	$. (variable)										
define slice	R	slice (definition)										
line buffering definition	R	line buffering (definition)										
find matching/nesting anything?	R	How do I find matching/nesting anything?										
Archive Tar File library	R	Archive::Tar::File (module)										
getgrnam function	R	getgrnam (function)										
CPAN::FirstTime module	R	CPAN::FirstTime (module)										
ExtUtils::Manifest library	R	ExtUtils::Manifest (module)										
File::Copy library	R	File::Copy (module)										
TAP Parser Iterator package	R	TAP::Parser::Iterator (module)										
${^WIN32_SLOPPY_STAT}	R	${^WIN32_SLOPPY_STAT} (variable)										
define current working directory	R	current working directory (definition)										
print routine	R	print (function)										
my routine	R	my (function)										
rindex method	R	rindex (function)										
print function	R	print (function)										
Module::CoreList library	R	Module::CoreList (module)										
lstat sub	R	lstat (function)										
Pod Simple HTML	R	Pod::Simple::HTML (module)										
Pod Simple PullParser package	R	Pod::Simple::PullParser (module)										
Binary ~~	R	Binary "~~" operator										
-x flag	R	-x directory										
pod X	R	X<topic name>										
last method	R	last (function)										
each sub	R	each (function)										
Time::HiRes library	R	Time::HiRes (module)										
TAP::Parser::Result::Comment module	R	TAP::Parser::Result::Comment (module)										
Undefined sort subroutine "" called	R	Undefined sort subroutine "%s" called										
Pod Escapes package	R	Pod::Escapes (module)										
How can I passreturn a Function FileHandle Array Hash Method Regex	R	How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?										
ExtUtils MM_Darwin	R	ExtUtils::MM_Darwin (module)										
while method	R	while (function)										
use an SQL database	R	How do I use an SQL database?										
print to more than one file at once?	R	How do I print to more than one file at once?										
permission bits	R	permission bits (definition)										
TAP::Formatter::Console package	R	TAP::Formatter::Console (module)										
pattern matching	R	pattern matching (definition)										
Memoize::SDBM_File library	R	Memoize::SDBM_File (module)										
App::Prove module	R	App::Prove (module)										
codepoint definition	R	codepoint (definition)										
ExtUtils::MM package	R	ExtUtils::MM (module)										
Filter::Util::Call	R	Filter::Util::Call (module)										
Text::Wrap library	R	Text::Wrap (module)										
Encode::Byte library	R	Encode::Byte (module)										
panic: do_trans_	R	panic: do_trans_%s										
le func	R	le (function)										
cmp sub	R	cmp (function)										
ExtUtils::MM_AIX package	R	ExtUtils::MM_AIX (module)										
semop	R	semop (function)										
Exiting subroutine via 	R	Exiting subroutine via %s										
$LAST_REGEXP_CODE_RESULT	R	$^R (variable)										
invocation	R	invocation (definition)										
Binary << operator	R	Binary "<<" operator										
ExtUtils MM_Win95 package	R	ExtUtils::MM_Win95 (module)										
%OS_ERROR	R	%! (variable)										
Unicode Collate	R	Unicode::Collate (module)										
environment variable	R	environment variable (definition)										
readpipe func	R	readpipe (function)										
IO::Socket::INET module	R	IO::Socket::INET (module)										
dispatch definition	R	dispatch (definition)										
Pod::Select module	R	Pod::Select (module)										
IO Dir	R	IO::Dir (module)										
IO::Select	R	IO::Select (module)										
Class Struct library	R	Class::Struct (module)										
create a class?	R	How do I create a class?										
list value definition	R	list value (definition)										
IO Pipe module	R	IO::Pipe (module)										
setpgrp	R	setpgrp (function)										
switch statement definition	R	switch statement (definition)										
send	R	send (function)										
sqrt routine	R	sqrt (function)										
-i	R	-i [ extension ]										
iterator definition	R	iterator (definition)										
Pod::Perldoc::ToXml	R	Pod::Perldoc::ToXml (module)										
Pod::Simple::PullParserToken module	R	Pod::Simple::PullParserToken (module)										
readpipe method	R	readpipe (function)										
expression definition	R	expression (definition)										
current package definition	R	current package (definition)										
Pod::Simple::SimpleTree library	R	Pod::Simple::SimpleTree (module)										
Encode JP H2Z	R	Encode::JP::H2Z (module)										
define tainted	R	tainted (definition)										
endprotoent subroutine	R	endprotoent (function)										
/a, d, l and u	R	/a, d, l and u regular expression modifier										
readdir sub	R	readdir (function)										
define namespace	R	namespace (definition)										
prototype definition	R	prototype (definition)										
if	R	if (function)										
getppid	R	getppid (function)										
__END__	R	__END__ (function)										
dual-lived	R	dual-lived (definition)										
TAP::Formatter::Console module	R	TAP::Formatter::Console (module)										
ExtUtils Constant Utils library	R	ExtUtils::Constant::Utils (module)										
Whats a closure	R	What's a closure?										
Character in '' format wrapped in unpack	R	Character in '%c' format wrapped in unpack										
CPAN Nox package	R	CPAN::Nox (module)										
TAP Formatter Color module	R	TAP::Formatter::Color (module)										
TAP::Formatter::Session package	R	TAP::Formatter::Session (module)										
$WARNING (variable)	R	$^W (variable)										
Use of  in printf format not supported	R	Use of %s in printf format not supported										
Unary ! operator	R	Unary "!" operator										
require subroutine	R	require (function)										
Net::Config module	R	Net::Config (module)										
Math::BigInt::Calc	R	Math::BigInt::Calc (module)										
IPC SysV	R	IPC::SysV (module)										
autoload	R	autoload (definition)										
Unknown "re" subpragma '' (known ones are: )	R	Unknown "re" subpragma '%s' (known ones are: %s)										
Net FTP module	R	Net::FTP (module)										
define thread	R	thread (definition)										
define terminator	R	terminator (definition)										
HV definition	R	HV (definition)										
Benchmark library	R	Benchmark (module)										
MIME::Base64 module	R	MIME::Base64 (module)										
Where can I get Perl macros for vi	R	Where can I get Perl macros for vi?										
Binary |	R	Binary "|" operator										
scalar subroutine	R	scalar (function)										
splice routine	R	splice (function)										
Net SMTP module	R	Net::SMTP (module)										
use MIME to make an attachment to a mail message	R	How do I use MIME to make an attachment to a mail message?										
getpeername routine	R	getpeername (function)										
Insecure user-defined property 	R	Insecure user-defined property %s										
Pod::Perldoc::ToPod module	R	Pod::Perldoc::ToPod (module)										
Encode TW package	R	Encode::TW (module)										
getppid routine	R	getppid (function)										
backward compatibility	R	backward compatibility (definition)										
pod =item command	R	=item										
$ERRNO (variable)	R	$! (variable)										
TAP::Parser::Result::Pragma package	R	TAP::Parser::Result::Pragma (module)										
Config::Extensions	R	Config::Extensions (module)										
define reference	R	reference (definition)										
define encapsulation	R	encapsulation (definition)										
Sys::Hostname package	R	Sys::Hostname (module)										
next function	R	next (function)										
Memoize::NDBM_File package	R	Memoize::NDBM_File (module)										
element definition	R	element (definition)										
Tie RefHash	R	Tie::RefHash (module)										
How do I redefine a builtin function operator or method	R	How do I redefine a builtin function, operator, or method?										
Unbalanced string table refcount: () for ""	R	Unbalanced string table refcount: (%d) for "%s"										
define rvalue	R	rvalue (definition)										
architecture definition	R	architecture (definition)										
Net::Cmd	R	Net::Cmd (module)										
Binary xor	R	Binary "xor" operator										
for func	R	for (function)										
Text Abbrev package	R	Text::Abbrev (module)										
sysread routine	R	sysread (function)										
Scalar::Util library	R	Scalar::Util (module)										
Socket module	R	Socket (module)										
define typemap	R	typemap (definition)										
BLOCK definition	R	BLOCK (definition)										
select func	R	select (function)										
given function	R	given (function)										
-C switch	R	-C [ number/list ]										
compilation unit definition	R	compilation unit (definition)										
elseif subroutine	R	elseif (function)										
Expecting '(?flags:(?[...' in regex; marked by <-- HERE in m//	R	Expecting '(?flags:(?[...' in regex; marked by <-- HERE in m/%s/										
ExtUtils MM_UWIN module	R	ExtUtils::MM_UWIN (module)										
ExtUtils::Install library	R	ExtUtils::Install (module)										
define first-come	R	first-come (definition)										
TAP Formatter Base library	R	TAP::Formatter::Base (module)										
define case	R	case (definition)										
In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <-- HERE in m//	R	In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <-- HERE in m/%s/										
"the UTF8 flag"?	R	What is "the UTF8 flag"?										
define big-endian	R	big-endian (definition)										
IPC Open2 package	R	IPC::Open2 (module)										
socket.ph and where do I get it?	R	What is socket.ph and where do I get it?										
TAP Formatter File	R	TAP::Formatter::File (module)										
xor func	R	xor (function)										
Net::Ping	R	Net::Ping (module)										
Pod Simple Debug	R	Pod::Simple::Debug (module)										
B::Terse library	R	B::Terse (module)										
-e flag	R	-e commandline										
system routine	R	system (function)										
DBM_Filter encode package	R	DBM_Filter::encode (module)										
File DosGlob library	R	File::DosGlob (module)										
void context definition	R	void context (definition)										
method	R	method (definition)										
$CHILD_ERROR (variable)	R	$? (variable)										
values func	R	values (function)										
Test Builder library	R	Test::Builder (module)										
Pod::Text::Termcap module	R	Pod::Text::Termcap (module)										
define operand	R	operand (definition)										
MIME::Base64	R	MIME::Base64 (module)										
Errno library	R	Errno (module)										
kill method	R	kill (function)										
skip some return values?	R	How do I skip some return values?										
use a regular expression to strip Cstyle comments from a file	R	How do I use a regular expression to strip C-style comments from a file?										
single inheritance definition	R	single inheritance (definition)										
Exiting eval via 	R	Exiting eval via %s										
tell routine	R	tell (function)										
gethostbyname routine	R	gethostbyname (function)										
define casefolding	R	casefolding (definition)										
Term::Cap library	R	Term::Cap (module)										
ExtUtils Mkbootstrap package	R	ExtUtils::Mkbootstrap (module)										
integer	R	integer (definition)										
Can't modify reference to  in  assignment	R	Can't modify reference to %s in %s assignment										
Encode::KR::2022_KR library	R	Encode::KR::2022_KR (module)										
Encode::CJKConstants package	R	Encode::CJKConstants (module)										
$NR	R	$. (variable)										
reaping definition	R	reaping (definition)										
class	R	class (definition)										
alias	R	alias (definition)										
when routine	R	when (function)										
TAP::Formatter::Base module	R	TAP::Formatter::Base (module)										
Pod InputObjects library	R	Pod::InputObjects (module)										
cmp operator	R	Binary "cmp" operator										
send email?	R	How do I send email?										
File Copy library	R	File::Copy (module)										
redo func	R	redo (function)										
-c switch	R	-c										
define alphabetic	R	alphabetic (definition)										
How can I capture STDERR from an external command	R	How can I capture STDERR from an external command?										
primary maintainer	R	primary maintainer (definition)										
Binary or	R	Binary "or" operator										
Thread Semaphore	R	Thread::Semaphore (module)										
Encode::MIME::Name module	R	Encode::MIME::Name (module)										
define data type	R	data type (definition)										
IO Compress Gzip package	R	IO::Compress::Gzip (module)										
-d switch	R	-dt										
tie subroutine	R	tie (function)										
caller function	R	caller (function)										
Text::Tabs	R	Text::Tabs (module)										
B Debug module	R	B::Debug (module)										
qualified	R	qualified (definition)										
Text::Wrap module	R	Text::Wrap (module)										
Net Ping package	R	Net::Ping (module)										
How do I efficiently match many regular expressions at once	R	How do I efficiently match many regular expressions at once?										
defined function	R	defined (function)										
reverse a string	R	How do I reverse a string?										
How can I output my numbers with commas added	R	How can I output my numbers with commas added?										
B Xref	R	B::Xref (module)										
ExtUtils Mksymlists package	R	ExtUtils::Mksymlists (module)										
x sub	R	x (function)										
Pod::Simple::PullParserEndToken	R	Pod::Simple::PullParserEndToken (module)										
How can I manipulate fixedrecordlength files	R	How can I manipulate fixed-record-length files?										
IO::Uncompress::AnyUncompress package	R	IO::Uncompress::AnyUncompress (module)										
Encode Byte package	R	Encode::Byte (module)										
oct func	R	oct (function)										
Module CoreList package	R	Module::CoreList (module)										
platform	R	platform (definition)										
procedure	R	procedure (definition)										
cluster definition	R	cluster (definition)										
-M option	R	-[mM] [ - ] module=arg[,arg]...										
File stat package	R	File::stat (module)										
octal	R	octal (definition)										
Global symbol "" requires explicit package name (did you forget to declare "my "?)	R	Global symbol "%s" requires explicit package name (did you forget to declare "my %s"?)										
each func	R	each (function)										
conditional definition	R	conditional (definition)										
PerlIO via QuotedPrint	R	PerlIO::via::QuotedPrint (module)										
IO::Compress::Deflate module	R	IO::Compress::Deflate (module)										
define delimiter	R	delimiter (definition)										
fork func	R	fork (function)										
Opcode	R	Opcode (module)										
IO Compress Gzip module	R	IO::Compress::Gzip (module)										
ExtUtils::MM_VMS module	R	ExtUtils::MM_VMS (module)										
define implementation	R	implementation (definition)										
select a random line from a file	R	How do I select a random line from a file?										
next subroutine	R	next (function)										
unshift function	R	unshift (function)										
Text Tabs package	R	Text::Tabs (module)										
pumpking	R	pumpking (definition)										
join routine	R	join (function)										
define pseudoliteral	R	pseudoliteral (definition)										
panic: malloc, 	R	panic: malloc, %s										
do method	R	do (function)										
C pod code	R	C<code>										
ioctl	R	ioctl (function)										
TAP::Parser::YAMLish::Writer	R	TAP::Parser::YAMLish::Writer (module)										
local subroutine	R	local (function)										
reverse a string?	R	How do I reverse a string?										
Binary le	R	Binary "le" operator										
waitpid routine	R	waitpid (function)										
IPC::Cmd library	R	IPC::Cmd (module)										
File Fetch	R	File::Fetch (module)										
Binary cmp	R	Binary "cmp" operator										
Hash::Util::FieldHash module	R	Hash::Util::FieldHash (module)										
Locale::Language module	R	Locale::Language (module)										
sysseek func	R	sysseek (function)										
read routine	R	read (function)										
sigil definition	R	sigil (definition)										
Unary \ operator	R	Unary "\" operator										
line definition	R	line (definition)										
Reallocation too large: 	R	Reallocation too large: %x										
Pod::Perldoc::ToRtf module	R	Pod::Perldoc::ToRtf (module)										
ExtUtils MM_Win32	R	ExtUtils::MM_Win32 (module)										
prefix	R	prefix (definition)										
Math BigInt Calc package	R	Math::BigInt::Calc (module)										
CPAN::Kwalify module	R	CPAN::Kwalify (module)										
cos func	R	cos (function)										
rename subroutine	R	rename (function)										
Matched non-Unicode code point 0x against Unicode property; may not be portable	R	Matched non-Unicode code point 0x%X against Unicode property; may not be portable										
Encode::Config package	R	Encode::Config (module)										
define primary maintainer	R	primary maintainer (definition)										
Lexing code internal error ()	R	Lexing code internal error (%s)										
Invalid character in \N{...}; marked by <-- HERE in \N{}	R	Invalid character in \N{...}; marked by <-- HERE in \N{%s}										
You need to quote ""	R	You need to quote "%s"										
Illegal character \ (carriage return)	R	Illegal character \%o (carriage return)										
CPAN Distroprefs module	R	CPAN::Distroprefs (module)										
${^UNICODE}	R	${^UNICODE} (variable)										
File Path module	R	File::Path (module)										
link definition	R	link (definition)										
define arithmetical operator	R	arithmetical operator (definition)										
s subroutine	R	s (function)										
fileno sub	R	fileno (function)										
File Basename package	R	File::Basename (module)										
List Util module	R	List::Util (module)										
select a random line from a file?	R	How do I select a random line from a file?										
Time Seconds package	R	Time::Seconds (module)										
exp sub	R	exp (function)										
decode or create those %-encodings on the web?	R	How do I decode or create those %-encodings on the web?										
connect subroutine	R	connect (function)										
TAP Parser Scheduler	R	TAP::Parser::Scheduler (module)										
IO::Handle->output_record_separator( EXPR )	R	$\ (variable)										
a hyperlink pod	R	L<name>										
How can I make my CGI script more efficient	R	How can I make my CGI script more efficient?										
shift subroutine	R	shift (function)										
our routine	R	our (function)										
errno	R	errno (definition)										
state	R	state (function)										
Why do setuid perl scripts complain about kernel problems	R	Why do setuid perl scripts complain about kernel problems?										
$RS (variable)	R	$/ (variable)										
TAP Parser Iterator Process package	R	TAP::Parser::Iterator::Process (module)										
define bytecode	R	bytecode (definition)										
declarecreate a structure	R	How do I declare/create a structure?										
ExtUtils::Manifest	R	ExtUtils::Manifest (module)										
taint mode definition	R	taint mode (definition)										
ExtUtils::MM_Any library	R	ExtUtils::MM_Any (module)										
__PACKAGE__ routine	R	__PACKAGE__ (function)										
require routine	R	require (function)										
File Find	R	File::Find (module)										
send function	R	send (function)										
PerlIO via package	R	PerlIO::via (module)										
SelfLoader	R	SelfLoader (module)										
Do I alwaysnever have to quote my strings or use semicolons and commas	R	Do I always/never have to quote my strings or use semicolons and commas?										
How do I send email	R	How do I send email?										
goto function	R	goto (function)										
Module Loaded module	R	Module::Loaded (module)										
Pod Perldoc GetOptsOO library	R	Pod::Perldoc::GetOptsOO (module)										
symlink	R	symlink (function)										
file definition	R	file (definition)										
TAP::Parser::Aggregator library	R	TAP::Parser::Aggregator (module)										
CPAN Tarzip module	R	CPAN::Tarzip (module)										
getpgrp method	R	getpgrp (function)										
get a random number between X and Y	R	How do I get a random number between X and Y?										
gmtime() failed	R	gmtime(%f) failed										
Pod::Html package	R	Pod::Html (module)										
Binary **	R	Binary "**" operator										
Pod::Simple::PullParserTextToken library	R	Pod::Simple::PullParserTextToken (module)										
seekdir routine	R	seekdir (function)										
efficiently match many regular expressions at once?	R	How do I efficiently match many regular expressions at once?										
sqrt method	R	sqrt (function)										
file	R	file (definition)										
implementation definition	R	implementation (definition)										
TAP Parser library	R	TAP::Parser (module)										
IO Pipe	R	IO::Pipe (module)										
while function	R	while (function)										
match strings with multibyte characters?	R	How can I match strings with multibyte characters?										
qr sub	R	qr (function)										
Use of literal control characters in variable names is deprecated	R	Use of literal non-graphic characters in variable names is deprecated										
reset an each operation partway through	R	How do I reset an each() operation part-way through?										
Locale Maketext Guts package	R	Locale::Maketext::Guts (module)										
$PID (variable)	R	$$ (variable)										
File::Fetch package	R	File::Fetch (module)										
Locale::Maketext::GutsLoader library	R	Locale::Maketext::GutsLoader (module)										
define pad	R	pad (definition)										
link method	R	link (function)										
endservent method	R	endservent (function)										
declaration	R	declaration (definition)										
define actual arguments	R	actual arguments (definition)										
ExtUtils Constant XS module	R	ExtUtils::Constant::XS (module)										
ExtUtils MM_BeOS library	R	ExtUtils::MM_BeOS (module)										
Locale::Maketext::GutsLoader package	R	Locale::Maketext::GutsLoader (module)										
semget routine	R	semget (function)										
Why do Perl operators have different precedence than C operators	R	Why do Perl operators have different precedence than C operators?										
getlogin	R	getlogin (function)										
Should I use a web framework	R	Should I use a web framework?										
Module Load Conditional module	R	Module::Load::Conditional (module)										
IPC::Semaphore module	R	IPC::Semaphore (module)										
setsockopt sub	R	setsockopt (function)										
Pod Simple Text library	R	Pod::Simple::Text (module)										
Devel::SelfStubber library	R	Devel::SelfStubber (module)										
ExtUtils MakeMaker FAQ module	R	ExtUtils::MakeMaker::FAQ (module)										
=begin pod command	R	=begin										
quotemeta subroutine	R	quotemeta (function)										
literal	R	literal (definition)										
define Boolean	R	Boolean (definition)										
Encode CJKConstants	R	Encode::CJKConstants (module)										
Junk on end of regexp in regex m//	R	Junk on end of regexp in regex m/%s/										
Math Trig package	R	Math::Trig (module)										
value	R	value (definition)										
CPAN::Debug	R	CPAN::Debug (module)										
Pod::Text module	R	Pod::Text (module)										
chomp sub	R	chomp (function)										
default method	R	default (function)										
Test Builder Tester library	R	Test::Builder::Tester (module)										
rmdir sub	R	rmdir (function)										
SelectSaver module	R	SelectSaver (module)										
$^R	R	$^R (variable)										
Net::hostent	R	Net::hostent (module)										
polymorphism	R	polymorphism (definition)										
pod =end command	R	=end										
eq func	R	eq (function)										
Tie Memoize module	R	Tie::Memoize (module)										
Encode::Byte module	R	Encode::Byte (module)										
How do I find out my hostname domainname or IP address	R	How do I find out my hostname, domainname, or IP address?										
Can't find label 	R	Can't find label %s										
>>	R	Binary ">>" operator										
msgsnd func	R	msgsnd (function)										
eof subroutine	R	eof (function)										
umask definition	R	umask (definition)										
How do I find matchingnesting anything	R	How do I find matching/nesting anything?										
m	R	m (function)										
LIST definition	R	LIST (definition)										
open a pipe both to and from a command?	R	How can I open a pipe both to and from a command?										
autoincrement definition	R	autoincrement (definition)										
File::Spec::Mac package	R	File::Spec::Mac (module)										
Pod Parser package	R	Pod::Parser (module)										
Pod Perldoc ToText	R	Pod::Perldoc::ToText (module)										
define pattern	R	pattern (definition)										
Pod::Text	R	Pod::Text (module)										
define call by value	R	call by value (definition)										
How do I process each word on each line	R	How do I process each word on each line?										
B Debug	R	B::Debug (module)										
I18N LangTags List module	R	I18N::LangTags::List (module)										
I18N::LangTags	R	I18N::LangTags (module)										
shmctl function	R	shmctl (function)										
B Concise module	R	B::Concise (module)										
Use of reference "" as array index	R	Use of reference "%s" as array index										
TAP::Formatter::Console::ParallelSession library	R	TAP::Formatter::Console::ParallelSession (module)										
Attempt to free nonexistent shared string ''	R	Attempt to free nonexistent shared string '%s'%s										
Memoize::ExpireTest module	R	Memoize::ExpireTest (module)										
IO::Zlib package	R	IO::Zlib (module)										
Tie::SubstrHash module	R	Tie::SubstrHash (module)										
Math Complex library	R	Math::Complex (module)										
foreach subroutine	R	foreach (function)										
pattern matching definition	R	pattern matching (definition)										
manpage	R	manpage (definition)										
panic: pad_free curpad, !=	R	panic: pad_free curpad, %p!=%p										
define discipline	R	discipline (definition)										
Can't use 'defined()' (Maybe you should just omit the defined()?)	R	Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)										
fork routine	R	fork (function)										
define regex	R	regex (definition)										
Pod Simple SimpleTree	R	Pod::Simple::SimpleTree (module)										
invocant	R	invocant (definition)										
join subroutine	R	join (function)										
semop method	R	semop (function)										
CPAN Kwalify	R	CPAN::Kwalify (module)										
write subroutine	R	write (function)										
extract selected columns from a string	R	How do I extract selected columns from a string?										
abs func	R	abs (function)										
opendir subroutine	R	opendir (function)										
Compress Raw Bzip2	R	Compress::Raw::Bzip2 (module)										
Non-hex character in regex; marked by <-- HERE in m//	R	Non-hex character in regex; marked by <-- HERE in m/%s/										
umask routine	R	umask (function)										
Pod::Perldoc::ToTk library	R	Pod::Perldoc::ToTk (module)										
indirect object definition	R	indirect object (definition)										
refcnt_dec: fd 	R	refcnt_inc: fd %d%s										
flock function	R	flock (function)										
define dangling statement	R	dangling statement (definition)										
modify the shadow password file on a Unix system	R	How do I modify the shadow password file on a Unix system?										
B pod code	R	B<text>										
run phase definition	R	run phase (definition)										
TAP::Parser::Result::Unknown library	R	TAP::Parser::Result::Unknown (module)										
define tokenizing	R	tokenizing (definition)										
IO::Socket	R	IO::Socket (module)										
-h option	R	-h										
Invalid separator character  in attribute list	R	Invalid separator character %s in attribute list										
character property	R	character property (definition)										
say function	R	say (function)										
msgsnd sub	R	msgsnd (function)										
List::Util::XS library	R	List::Util::XS (module)										
$SUBSEP	R	$; (variable)										
Ambiguous use of  resolved as 	R	Ambiguous use of %s resolved as %s										
How do I find the current century or millennium	R	How do I find the current century or millennium?										
IO::Uncompress::Inflate module	R	IO::Uncompress::Inflate (module)										
Unicode::UCD	R	Unicode::UCD (module)										
define public domain	R	public domain (definition)										
strip blank space from the beginning/end of a string?	R	How do I strip blank space from the beginning/end of a string?										
Encode CN package	R	Encode::CN (module)										
chr method	R	chr (function)										
recv subroutine	R	recv (function)										
-X switch	R	-X										
Compress Raw Zlib	R	Compress::Raw::Zlib (module)										
setpgrp sub	R	setpgrp (function)										
connect sub	R	connect (function)										
check a valid mail address?	R	How do I check a valid mail address?										
Invalid version format ()	R	Invalid version format (%s)										
ordinal definition	R	ordinal (definition)										
vector	R	vector (definition)										
compile phase definition	R	compile phase (definition)										
return subroutine	R	return (function)										
TAP Parser Result Comment package	R	TAP::Parser::Result::Comment (module)										
IO::Compress::Bzip2 module	R	IO::Compress::Bzip2 (module)										
Term Complete module	R	Term::Complete (module)										
IO Zlib library	R	IO::Zlib (module)										
each routine	R	each (function)										
IO Select package	R	IO::Select (module)										
B::Concise library	R	B::Concise (module)										
Net Config	R	Net::Config (module)										
App::Prove::State::Result library	R	App::Prove::State::Result (module)										
define defined	R	defined (definition)										
substitution	R	substitution (definition)										
What is a wide character	R	What is a "wide character"?										
opendir function	R	opendir (function)										
DataDumper doesnt restore the UTF8 flag is it broken	R	Data::Dumper doesn't restore the UTF8 flag; is it broken?										
ExtUtils::CBuilder library	R	ExtUtils::CBuilder (module)										
ExtUtils MY package	R	ExtUtils::MY (module)										
store a multidimensional array in a DBM file?	R	How can I store a multidimensional array in a DBM file?										
fileglob definition	R	fileglob (definition)										
Assigned value is not  reference	R	Assigned value is not %s reference										
freeware	R	freeware (definition)										
Net::Time package	R	Net::Time (module)										
TAP::Parser::YAMLish::Writer library	R	TAP::Parser::YAMLish::Writer (module)										
open a filehandle to a string	R	How can I open a filehandle to a string?										
shift	R	shift (function)										
CPAN::Tarzip package	R	CPAN::Tarzip (module)										
slurp definition	R	slurp (definition)										
App::Prove library	R	App::Prove (module)										
destructor definition	R	destructor (definition)										
IO::Uncompress::Base library	R	IO::Uncompress::Base (module)										
compile my Perl program into byte code or C?	R	How can I compile my Perl program into byte code or C?										
$FORMAT_FORMFEED (variable)	R	$^L (variable)										
Term Complete package	R	Term::Complete (module)										
oct method	R	oct (function)										
Pod Simple SimpleTree module	R	Pod::Simple::SimpleTree (module)										
unary operator definition	R	unary operator (definition)										
define co-maintainer	R	co-maintainer (definition)										
What is the difference between $array1 and array1	R	What is the difference between $array[1] and @array[1]?										
IPC::Msg	R	IPC::Msg (module)										
TAP::Parser::Result::Plan package	R	TAP::Parser::Result::Plan (module)										
File::Glob library	R	File::Glob (module)										
ExtUtils MM_Cygwin module	R	ExtUtils::MM_Cygwin (module)										
Bad name after 	R	Bad name after %s										
TAP::Parser::Result::Version library	R	TAP::Parser::Result::Version (module)										
DBM_Filter int32	R	DBM_Filter::int32 (module)										
$"	R	$" (variable)										
TAP Parser Aggregator package	R	TAP::Parser::Aggregator (module)										
setgrent sub	R	setgrent (function)										
How do I process an entire hash	R	How do I process an entire hash?										
File DosGlob package	R	File::DosGlob (module)										
make sure users cant enter values into a form that causes my CGI script to do bad things	R	How do I make sure users can't enter values into a form that causes my CGI script to do bad things?										
,	R	Binary "," operator										
my method	R	my (function)										
Devel SelfStubber library	R	Devel::SelfStubber (module)										
HANDLE->format_name(EXPR) (variable)	R	$~ (variable)										
FileHandle library	R	FileHandle (module)										
Zero length \N{} in regex; marked by <-- HERE in m//	R	Zero length \N{} in regex; marked by <-- HERE in m/%s/										
Encode MIME Name library	R	Encode::MIME::Name (module)										
break	R	break (function)										
How do I fork a daemon process	R	How do I fork a daemon process?										
ExtUtils MM_QNX library	R	ExtUtils::MM_QNX (module)										
Pod::Man	R	Pod::Man (module)										
string context definition	R	string context (definition)										
tell whether a certain element is contained in a list or array?	R	How can I tell whether a certain element is contained in a list or array?										
import sub	R	import (function)										
Pod::Simple library	R	Pod::Simple (module)										
IPC::SharedMem library	R	IPC::SharedMem (module)										
IO::Compress::Deflate library	R	IO::Compress::Deflate (module)										
Unicode	R	Unicode (definition)										
chmod subroutine	R	chmod (function)										
indirection definition	R	indirection (definition)										
floating point	R	floating point (definition)										
list value	R	list value (definition)										
metasymbol definition	R	metasymbol (definition)										
define pod command	R	pod command (definition)										
Pod Simple XMLOutStream library	R	Pod::Simple::XMLOutStream (module)										
-D	R	-D number										
Archive::Tar::File library	R	Archive::Tar::File (module)										
define service	R	service (definition)										
Math BigInt package	R	Math::BigInt (module)										
Time gmtime module	R	Time::gmtime (module)										
Invalid hexadecimal number in \N{U+...}	R	Invalid hexadecimal number in \N{U+...} in regex; marked by <-- HERE in m/%s/										
$INPUT_LINE_NUMBER	R	$. (variable)										
define lexer	R	lexer (definition)										
vec routine	R	vec (function)										
%	R	Binary "%" operator										
panic: strxfrm() gets absurd - a => , ab => 	R	panic: strxfrm() gets absurd - a => %u, ab => %u										
Pod Text library	R	Pod::Text (module)										
determine whether a scalar is a number/whole/integer/float?	R	How do I determine whether a scalar is a number/whole/integer/float?										
HANDLE->format_lines_left(EXPR)	R	$- (variable)										
composer definition	R	composer (definition)										
TAP Formatter File Session library	R	TAP::Formatter::File::Session (module)										
semctl function	R	semctl (function)										
garbage collection	R	garbage collection (definition)										
Why do I sometimes get an Argument list too long when I use <>	R	Why do I sometimes get an "Argument list too long" when I use <*>?										
standard definition	R	standard (definition)										
IO Compress Deflate module	R	IO::Compress::Deflate (module)										
Filter Simple package	R	Filter::Simple (module)										
File::DosGlob library	R	File::DosGlob (module)										
package function	R	package (function)										
indirect filehandle	R	indirect filehandle (definition)										
shmread function	R	shmread (function)										
get a file's timestamp in perl?	R	How do I get a file's timestamp in perl?										
Pod::ParseLink	R	Pod::ParseLink (module)										
srand method	R	srand (function)										
if func	R	if (function)										
STDIO (definition)	R	standard I/O										
shmctl func	R	shmctl (function)										
TAP Object package	R	TAP::Object (module)										
Memoize::ExpireFile	R	Memoize::ExpireFile (module)										
 Regular Expressions	R	: Regular Expressions										
TAP Parser YAMLish Writer module	R	TAP::Parser::YAMLish::Writer (module)										
-m option	R	-[mM] [ - ] module=arg[,arg]...										
little-endian	R	little-endian (definition)										
term	R	term (definition)										
assertion	R	assertion (definition)										
int sub	R	int (function)										
HANDLE->format_name(EXPR)	R	$~ (variable)										
ExtUtils Miniperl library	R	ExtUtils::Miniperl (module)										
Unary +	R	Unary "+" operator										
telldir sub	R	telldir (function)										
How do I convert between numeric representationsbasesradixes	R	How do I convert between numeric representations/bases/radixes?										
ref func	R	ref (function)										
Pod ParseLink module	R	Pod::ParseLink (module)										
getpwent routine	R	getpwent (function)										
~~	R	Binary "~~" operator										
my subroutine	R	my (function)										
Archive Tar File module	R	Archive::Tar::File (module)										
getpeername function	R	getpeername (function)										
bareword definition	R	bareword (definition)										
Sequence (?&... not terminated in regex; marked by <-- HERE in m//	R	Sequence (?&... not terminated in regex; marked by <-- HERE in m/%s/										
Pod::Simple::HTMLBatch module	R	Pod::Simple::HTMLBatch (module)										
__PACKAGE__ subroutine	R	__PACKAGE__ (function)										
Term::Cap	R	Term::Cap (module)										
-u option	R	-u										
"my " used in sort comparison	R	"my %s" used in sort comparison										
Type of arg  to &CORE:: must be 	R	Type of arg %d to &CORE::%s must be %s										
Term ANSIColor	R	Term::ANSIColor (module)										
make my hash remember the order I put elements into it	R	How can I make my hash remember the order I put elements into it?										
PerlIO::via package	R	PerlIO::via (module)										
Config::Extensions package	R	Config::Extensions (module)										
find the first array element for which a condition is true?	R	How do I find the first array element for which a condition is true?										
$INPLACE_EDIT (variable)	R	$^I (variable)										
oo	R	Where can I learn about object-oriented Perl programming?										
PV	R	PV (definition)										
LIST	R	LIST (definition)										
scalar value definition	R	scalar value (definition)										
CPAN Debug package	R	CPAN::Debug (module)										
XSLoader	R	XSLoader (module)										
IO::Handle	R	IO::Handle (module)										
IO Handle library	R	IO::Handle (module)										
CPAN::Queue package	R	CPAN::Queue (module)										
offset definition	R	offset (definition)										
What mailing lists are there for Perl	R	What mailing lists are there for Perl?										
Compress::Raw::Zlib library	R	Compress::Raw::Zlib (module)										
chown subroutine	R	chown (function)										
Switch (?(condition)... contains too many branches in regex; marked by <-- HERE in m//	R	Switch (?(condition)... contains too many branches in regex; marked by <-- HERE in m/%s/										
use curses with Perl	R	How can I use curses with Perl?										
indirect filehandle definition	R	indirect filehandle (definition)										
$GID	R	$( (variable)										
setpriority func	R	setpriority (function)										
Pod::Simple::Text module	R	Pod::Simple::Text (module)										
continue func	R	continue (function)										
getsockopt subroutine	R	getsockopt (function)										
@LAST_MATCH_START (variable)	R	@- (variable)										
set the time and date	R	How do I set the time and date?										
exit	R	exit (function)										
warn routine	R	warn (function)										
define matching	R	matching (definition)										
define BSD	R	BSD (definition)										
PerlIO::via::QuotedPrint library	R	PerlIO::via::QuotedPrint (module)										
indirect object slot definition	R	indirect object slot (definition)										
ExtUtils::Constant::XS library	R	ExtUtils::Constant::XS (module)										
write	R	write (function)										
gethostbyname method	R	gethostbyname (function)										
Data::Dumper	R	Data::Dumper (module)										
Hash Util library	R	Hash::Util (module)										
How do I select a random line from a file	R	How do I select a random line from a file?										
lock function	R	lock (function)										
pos subroutine	R	pos (function)										
Pod::Simple::XMLOutStream	R	Pod::Simple::XMLOutStream (module)										
getpgrp	R	getpgrp (function)										
$^I	R	$^I (variable)										
=item pod command	R	=item										
bind subroutine	R	bind (function)										
wantarray func	R	wantarray (function)										
expand tabs in a string	R	How do I expand tabs in a string?										
Pod Html module	R	Pod::Html (module)										
getc method	R	getc (function)										
ExtUtils MM_MacOS library	R	ExtUtils::MM_MacOS (module)										
log method	R	log (function)										
WYSIWYG definition	R	WYSIWYG (definition)										
gethostbyaddr func	R	gethostbyaddr (function)										
struct	R	struct (definition)										
instance variable	R	instance variable (definition)										
instance definition	R	instance (definition)										
dbmopen method	R	dbmopen (function)										
import subroutine	R	import (function)										
STDERR	R	STDERR (definition)										
getnetbyaddr sub	R	getnetbyaddr (function)										
IO::Compress::RawDeflate library	R	IO::Compress::RawDeflate (module)										
pos method	R	pos (function)										
define source filter	R	source filter (definition)										
Unicode UCD module	R	Unicode::UCD (module)										
$PROCESS_ID (variable)	R	$$ (variable)										
How do I ask the user for a password	R	How do I ask the user for a password?										
call backticks without shell processing	R	How can I call backticks without shell processing?										
define associative array	R	associative array (definition)										
File Fetch module	R	File::Fetch (module)										
statement definition	R	statement (definition)										
define backward compatibility	R	backward compatibility (definition)										
~~ operator	R	Binary "~~" operator										
CPAN Nox module	R	CPAN::Nox (module)										
Scalar value @{} better written as ${}	R	Scalar value @%s{%s} better written as $%s{%s}										
rename routine	R	rename (function)										
Encode KR package	R	Encode::KR (module)										
Compress::Zlib	R	Compress::Zlib (module)										
interpreter	R	interpreter (definition)										
rand sub	R	rand (function)										
errno definition	R	errno (definition)										
Memoize Expire module	R	Memoize::Expire (module)										
foreach sub	R	foreach (function)										
slurp	R	slurp (definition)										
multidimensional array definition	R	multidimensional array (definition)										
oct	R	oct (function)										
Tie::StdHandle	R	Tie::StdHandle (module)										
getsockopt	R	getsockopt (function)										
=head1 pod command	R	=head1,										
Pod::Text::Overstrike package	R	Pod::Text::Overstrike (module)										
Devel::Peek module	R	Devel::Peek (module)										
untie function	R	untie (function)										
Locale::Currency library	R	Locale::Currency (module)										
Unary not operator	R	Unary "not" operator										
ExtUtils::MM_MacOS package	R	ExtUtils::MM_MacOS (module)										
File::Spec::Unix	R	File::Spec::Unix (module)										
rmdir	R	rmdir (function)										
Pod Perldoc ToNroff module	R	Pod::Perldoc::ToNroff (module)										
ExtUtils::MakeMaker::FAQ library	R	ExtUtils::MakeMaker::FAQ (module)										
Locale::Currency	R	Locale::Currency (module)										
lcfirst func	R	lcfirst (function)										
TAP::Base library	R	TAP::Base (module)										
find out my hostname, domainname, or IP address?	R	How do I find out my hostname, domainname, or IP address?										
define readable	R	readable (definition)										
$^M	R	$^M (variable)										
profile my Perl programs	R	How do I profile my Perl programs?										
App Prove State module	R	App::Prove::State (module)										
bind function	R	bind (function)										
TAP Formatter Base	R	TAP::Formatter::Base (module)										
wantarray subroutine	R	wantarray (function)										
the UTF8 flag	R	What is "the UTF8 flag"?										
IO layers (like '') unavailable	R	IO layers (like '%s') unavailable										
B package	R	B (module)										
define RV	R	RV (definition)										
times subroutine	R	times (function)										
File Spec Unix module	R	File::Spec::Unix (module)										
Math::BigInt::Calc package	R	Math::BigInt::Calc (module)										
lt operator	R	Binary "lt" operator										
parse tree	R	parse tree (definition)										
scalar func	R	scalar (function)										
Tie::Hash::NamedCapture	R	Tie::Hash::NamedCapture (module)										
E pod code	R	E<escape>										
ExtUtils::Installed library	R	ExtUtils::Installed (module)										
Prototype '' overridden by attribute 'prototype()' in 	R	Prototype '%s' overridden by attribute 'prototype(%s)' in %s										
IO Socket package	R	IO::Socket (module)										
IO Compress Deflate package	R	IO::Compress::Deflate (module)										
get the screen size	R	How do I get the screen size?										
default function	R	default (function)										
IO::Socket::INET package	R	IO::Socket::INET (module)										
Constant(): $^H{} is not defined	R	Constant(%s): $^H{%s} is not defined										
Can't take sqrt of 	R	Can't take sqrt of %g										
recv routine	R	recv (function)										
Pod::Text::Termcap package	R	Pod::Text::Termcap (module)										
Module Load Conditional package	R	Module::Load::Conditional (module)										
$OSNAME	R	$^O (variable)										
AnyDBM_File library	R	AnyDBM_File (module)										
wrong with using backticks in a void context	R	What's wrong with using backticks in a void context?										
Tie File library	R	Tie::File (module)										
Text Tabs module	R	Text::Tabs (module)										
IO Uncompress AnyUncompress	R	IO::Uncompress::AnyUncompress (module)										
bit shift definition	R	bit shift (definition)										
define method resolution order	R	method resolution order (definition)										
Regexp modifier "/%c" may appear a maximum of twice	R	Regexp modifier "%c" may appear a maximum of twice in regex; marked by <-- HERE in m/%s/										
chr sub	R	chr (function)										
Encode::Encoding package	R	Encode::Encoding (module)										
XS	R	XS (definition)										
Test::Simple package	R	Test::Simple (module)										
App::Prove::State library	R	App::Prove::State (module)										
define global destruction	R	global destruction (definition)										
=~	R	Binary "=~" operator										
untie subroutine	R	untie (function)										
pod C	R	C<code>										
PerlIO encoding module	R	PerlIO::encoding (module)										
values method	R	values (function)										
or sub	R	or (function)										
IO Uncompress AnyInflate library	R	IO::Uncompress::AnyInflate (module)										
define linebreak	R	linebreak (definition)										
Can't open output file  as stdout	R	Can't open output file %s as stdout										
Compress Zlib	R	Compress::Zlib (module)										
IO::Socket::UNIX library	R	IO::Socket::UNIX (module)										
IO::Socket module	R	IO::Socket (module)										
define granularity	R	granularity (definition)										
quantifier definition	R	quantifier (definition)										
source filter definition	R	source filter (definition)										
-X option	R	-X										
man	R	man (definition)										
put a password on my web pages?	R	How do I put a password on my web pages?										
Pod::Simple module	R	Pod::Simple (module)										
define dynamic scoping	R	dynamic scoping (definition)										
q function	R	q (function)										
IO Socket UNIX module	R	IO::Socket::UNIX (module)										
Net::protoent module	R	Net::protoent (module)										
left shift definition	R	left shift (definition)										
Recursive inheritance detected in package ''	R	Recursive inheritance detected in package '%s'										
start a process in the background	R	How do I start a process in the background?										
ExtUtils::Command	R	ExtUtils::Command (module)										
IO::Uncompress::AnyInflate	R	IO::Uncompress::AnyInflate (module)										
exploit definition	R	exploit (definition)										
File::Spec::VMS	R	File::Spec::VMS (module)										
define declarator	R	declarator (definition)										
Unary \	R	Unary "\" operator										
capturing definition	R	capturing (definition)										
sprintf subroutine	R	sprintf (function)										
-a flag	R	-a										
B module	R	B (module)										
is-a definition	R	is-a (definition)										
alphabetic	R	alphabetic (definition)										
skip some return values	R	How do I skip some return values?										
getprotobynumber method	R	getprotobynumber (function)										
Pod Parser library	R	Pod::Parser (module)										
Fatal library	R	Fatal (module)										
ExtUtils MM_NW5 library	R	ExtUtils::MM_NW5 (module)										
return function	R	return (function)										
sysread func	R	sysread (function)										
TAP::Parser::Result::Unknown module	R	TAP::Parser::Result::Unknown (module)										
actual arguments definition	R	actual arguments (definition)										
Pod::Simple::TextContent library	R	Pod::Simple::TextContent (module)										
IO::Uncompress::Base package	R	IO::Uncompress::Base (module)										
$SUBSEP (variable)	R	$; (variable)										
IO::Compress::Bzip2 library	R	IO::Compress::Bzip2 (module)										
File Path library	R	File::Path (module)										
msgrcv subroutine	R	msgrcv (function)										
define breakpoint	R	breakpoint (definition)										
IO Uncompress RawInflate module	R	IO::Uncompress::RawInflate (module)										
closedir	R	closedir (function)										
How do I handle circular lists	R	How do I handle circular lists?										
logical operator definition	R	logical operator (definition)										
define GID	R	GID (definition)										
Pod::Simple::RTF package	R	Pod::Simple::RTF (module)										
IO File module	R	IO::File (module)										
slice definition	R	slice (definition)										
Opcode package	R	Opcode (module)										
x subroutine	R	x (function)										
Filter Simple library	R	Filter::Simple (module)										
trinary definition	R	trinary (definition)										
pop func	R	pop (function)										
int	R	int (function)										
text definition	R	text (definition)										
shutdown function	R	shutdown (function)										
Tie File	R	Tie::File (module)										
CPAN::Kwalify	R	CPAN::Kwalify (module)										
zero width definition	R	zero width (definition)										
define uppercase	R	uppercase (definition)										
DBM_Filter::compress	R	DBM_Filter::compress (module)										
-d:	R	-dt: MOD[=bar,baz]										
ask the user for a password	R	How do I ask the user for a password?										
Encode::KR	R	Encode::KR (module)										
rename func	R	rename (function)										
-x	R	-x directory										
executable file definition	R	executable file (definition)										
TAP Formatter Session library	R	TAP::Formatter::Session (module)										
magical increment definition	R	magical increment (definition)										
glob sub	R	glob (function)										
How do I do a in perl	R	How do I do a in perl?										
split subroutine	R	split (function)										
$INPUT_LINE_NUMBER (variable)	R	$. (variable)										
User::grent library	R	User::grent (module)										
Math::Trig module	R	Math::Trig (module)										
AutoLoader module	R	AutoLoader (module)										
automate an HTML form submission	R	How do I automate an HTML form submission?										
TAP::Parser package	R	TAP::Parser (module)										
Illegal declaration of subroutine 	R	Illegal declaration of subroutine %s										
getc	R	getc (function)										
define associativity	R	associativity (definition)										
clear a package?	R	How do I clear a package?										
Pod Perldoc BaseTo library	R	Pod::Perldoc::BaseTo (module)										
hash table definition	R	hash table (definition)										
chmod routine	R	chmod (function)										
endian definition	R	endian (definition)										
qq	R	qq (function)										
-u switch	R	-u										
Text Tabs	R	Text::Tabs (module)										
IPC Open3 package	R	IPC::Open3 (module)										
AutoSplit package	R	AutoSplit (module)										
TAP::Parser::Aggregator package	R	TAP::Parser::Aggregator (module)										
SelfLoader module	R	SelfLoader (module)										
v-string definition	R	v-string (definition)										
How do I temporarily block warnings	R	How do I temporarily block warnings?										
avoid zombies on a Unix system?	R	How do I avoid zombies on a Unix system?										
How do I match a regular expression thats in a variable	R	How do I match a regular expression that's in a variable?										
IO Socket UNIX package	R	IO::Socket::UNIX (module)										
define process	R	process (definition)										
endpwent method	R	endpwent (function)										
TAP::Harness library	R	TAP::Harness (module)										
umask function	R	umask (function)										
package sub	R	package (function)										
case definition	R	case (definition)										
Tie::Hash module	R	Tie::Hash (module)										
overriding	R	overriding (definition)										
symlink sub	R	symlink (function)										
Thread	R	Thread (module)										
PerlIO::via library	R	PerlIO::via (module)										
File::Copy package	R	File::Copy (module)										
Redundant argument in 	R	Redundant argument in %s										
Encode JP H2Z library	R	Encode::JP::H2Z (module)										
Attribute prototype() discards earlier prototype attribute in same sub	R	Attribute prototype(%s) discards earlier prototype attribute in same sub										
${^ENCODING}	R	${^ENCODING} (variable)										
compiler	R	compiler (definition)										
define block	R	block (definition)										
No code specified for -	R	No code specified for -%c										
Perl_my_() not available	R	Perl_my_%s() not available										
stat func	R	stat (function)										
Dumpvalue package	R	Dumpvalue (module)										
program generator definition	R	program generator (definition)										
Binary gt	R	Binary "gt" operator										
format routine	R	format (function)										
Term::Complete module	R	Term::Complete (module)										
define TCP	R	TCP (definition)										
use func	R	use (function)										
lcfirst sub	R	lcfirst (function)										
ExtUtils MM_Win95 library	R	ExtUtils::MM_Win95 (module)										
-X sub	R	-X (function)										
ExtUtils::MM_VMS package	R	ExtUtils::MM_VMS (module)										
qx	R	qx (function)										
do an atexit() or setjmp()/longjmp()? (Exception handling)	R	How can I do an atexit() or setjmp()/longjmp()? (Exception handling)										
metacharacter	R	metacharacter (definition)										
readdir routine	R	readdir (function)										
Term::Cap package	R	Term::Cap (module)										
DESTROY sub	R	DESTROY (function)										
Tie::Array	R	Tie::Array (module)										
Pod::Simple::PullParserStartToken library	R	Pod::Simple::PullParserStartToken (module)										
Where can I learn about linking C with Perl	R	Where can I learn about linking C with Perl?										
C	R	C (definition)										
Config Extensions library	R	Config::Extensions (module)										
tied sub	R	tied (function)										
tied function	R	tied (function)										
Net FTP dataconn	R	Net::FTP::dataconn (module)										
Memoize::NDBM_File	R	Memoize::NDBM_File (module)										
&&	R	Binary "&&" operator										
getgrnam subroutine	R	getgrnam (function)										
semget function	R	semget (function)										
lock func	R	lock (function)										
Pod Perldoc ToChecker package	R	Pod::Perldoc::ToChecker (module)										
grep func	R	grep (function)										
define laziness	R	laziness (definition)										
accessor methods definition	R	accessor methods (definition)										
loop label definition	R	loop label (definition)										
data type definition	R	data type (definition)										
Hash::Util library	R	Hash::Util (module)										
Getopt::Std	R	Getopt::Std (module)										
Pod Functions module	R	Pod::Functions (module)										
I18N LangTags List package	R	I18N::LangTags::List (module)										
ExtUtils::MM_Win32 module	R	ExtUtils::MM_Win32 (module)										
remove duplicate elements from a list or array	R	How can I remove duplicate elements from a list or array?										
int routine	R	int (function)										
SIG handler "" not defined	R	SIG%s handler "%s" not defined										
collating sequence	R	collating sequence (definition)										
Unmatched ( in regex; marked by <-- HERE in m//	R	Unmatched ) in regex; marked by <-- HERE in m/%s/										
getsockopt function	R	getsockopt (function)										
syswrite sub	R	syswrite (function)										
$FORMAT_TOP_NAME	R	$^ (variable)										
manipulate arrays of bits	R	How do I manipulate arrays of bits?										
topic definition	R	topic (definition)										
socketpair func	R	socketpair (function)										
rand func	R	rand (function)										
ExtUtils::ParseXS package	R	ExtUtils::ParseXS (module)										
stat structure definition	R	stat structure (definition)										
Binary >	R	Binary ">" operator										
Operator or semicolon missing before 	R	Operator or semicolon missing before %s										
Tie Handle library	R	Tie::Handle (module)										
check if a key exists in a multilevel hash	R	How can I check if a key exists in a multilevel hash?										
module definition	R	module (definition)										
Bareword "" not allowed while "strict subs" in use	R	Bareword "%s" not allowed while "strict subs" in use										
define syscall	R	syscall (definition)										
elseif method	R	elseif (function)										
join sub	R	join (function)										
TAP::Parser::Grammar library	R	TAP::Parser::Grammar (module)										
Term ReadLine library	R	Term::ReadLine (module)										
wrong with always quoting "$vars"?	R	What's wrong with always quoting "$vars"?										
awk	R	awk (definition)										
pod =for	R	=for										
TAP::Parser::Result::Test module	R	TAP::Parser::Result::Test (module)										
derived class definition	R	derived class (definition)										
shutdown func	R	shutdown (function)										
How come exec doesnt return	R	How come exec() doesn't return?										
HANDLE->format_lines_left(EXPR) (variable)	R	$- (variable)										
flock sub	R	flock (function)										
select a random element from an array	R	How do I select a random element from an array?										
Time Seconds library	R	Time::Seconds (module)										
define typed lexical	R	typed lexical (definition)										
escape sequence definition	R	escape sequence (definition)										
join	R	join (function)										
Unicode UCD	R	Unicode::UCD (module)										
Math BigFloat package	R	Math::BigFloat (module)										
grep routine	R	grep (function)										
hash table	R	hash table (definition)										
Memoize Expire library	R	Memoize::Expire (module)										
TAP::Formatter::Console::Session package	R	TAP::Formatter::Console::Session (module)										
find which modules are installed on my system?	R	How do I find which modules are installed on my system?										
TMTOWTDI	R	TMTOWTDI (definition)										
=pod pod	R	=pod										
keys subroutine	R	keys (function)										
syscall routine	R	syscall (function)										
DBM_Filter::encode	R	DBM_Filter::encode (module)										
Hash::Util::FieldHash	R	Hash::Util::FieldHash (module)										
Exporter::Heavy	R	Exporter::Heavy (module)										
getnetbyaddr	R	getnetbyaddr (function)										
Why do I get weird spaces when I print an array of lines	R	Why do I get weird spaces when I print an array of lines?										
Unterminated \g{...} pattern in regex; marked by <-- HERE in m//	R	Unterminated \g{...} pattern in regex; marked by <-- HERE in m/%s/										
device	R	device (definition)										
CPAN::Version library	R	CPAN::Version (module)										
Pod::Perldoc::BaseTo library	R	Pod::Perldoc::BaseTo (module)										
IPC::Open2 library	R	IPC::Open2 (module)										
How do I debug my Perl programs	R	How do I debug my Perl programs?										
untie routine	R	untie (function)										
gethostbyaddr	R	gethostbyaddr (function)										
troff	R	troff (definition)										
datagram	R	datagram (definition)										
How can I quote a variable to use in a regex	R	How can I quote a variable to use in a regex?										
Net hostent module	R	Net::hostent (module)										
Net FTP dataconn library	R	Net::FTP::dataconn (module)										
$.	R	$. (variable)										
=for pod	R	=for										
token definition	R	token (definition)										
shutdown	R	shutdown (function)										
Math::BigInt::CalcEmu module	R	Math::BigInt::CalcEmu (module)										
read function	R	read (function)										
anonymous	R	anonymous (definition)										
How can I open a filehandle to a string	R	How can I open a filehandle to a string?										
invocation definition	R	invocation (definition)										
-I	R	-I directory										
define type	R	type (definition)										
Net POP3 library	R	Net::POP3 (module)										
Safe package	R	Safe (module)										
Sys::Syslog package	R	Sys::Syslog (module)										
Pod::Simple::PullParserToken library	R	Pod::Simple::PullParserToken (module)										
Pod Functions	R	Pod::Functions (module)										
define destructor	R	destructor (definition)										
=~ operator	R	Binary "=~" operator										
continue function	R	continue (function)										
fc function	R	fc (function)										
(Missing operator before ?)	R	(Missing operator before %s?)										
Class::Struct library	R	Class::Struct (module)										
discipline definition	R	discipline (definition)										
script	R	script (definition)										
User::pwent library	R	User::pwent (module)										
sethostent function	R	sethostent (function)										
Devel PPPort library	R	Devel::PPPort (module)										
Illegal octal digit  ignored	R	Illegal octal digit %s ignored										
IPC::Open3 module	R	IPC::Open3 (module)										
glob routine	R	glob (function)										
Digest base module	R	Digest::base (module)										
exception	R	exception (definition)										
Can I get a BNFyaccRE for the Perl language	R	Can I get a BNF/yacc/RE for the Perl language?										
m modifier	R	/m regular expression modifier										
%+	R	%+ (variable)										
linebreak	R	linebreak (definition)										
More than one argument to '' open	R	More than one argument to '%s' open										
TAP::Parser::Result::Test library	R	TAP::Parser::Result::Test (module)										
TAP Parser Multiplexer	R	TAP::Parser::Multiplexer (module)										
$ERRNO	R	$! (variable)										
PERL_SIGNALS illegal: ""	R	PERL_SIGNALS illegal: "%s"										
IO File library	R	IO::File (module)										
define binary	R	binary (definition)										
alternatives	R	alternatives (definition)										
-w flag	R	-w										
Binary cmp operator	R	Binary "cmp" operator										
Math BigFloat library	R	Math::BigFloat (module)										
define environment variable	R	environment variable (definition)										
eof	R	eof (function)										
define mro	R	mro (definition)										
lstat routine	R	lstat (function)										
TAP::Formatter::Console	R	TAP::Formatter::Console (module)										
define titlecase	R	titlecase (definition)										
time	R	time (function)										
know how many entries are in a hash?	R	How can I know how many entries are in a hash?										
FileHandle	R	FileHandle (module)										
atan2 routine	R	atan2 (function)										
Pod::Simple::SimpleTree module	R	Pod::Simple::SimpleTree (module)										
not subroutine	R	not (function)										
Text::Abbrev module	R	Text::Abbrev (module)										
setpwent method	R	setpwent (function)										
-h switch	R	-h										
msgget func	R	msgget (function)										
vec func	R	vec (function)										
pseudohash definition	R	pseudohash (definition)										
built-in definition	R	built-in (definition)										
Encode::Symbol	R	Encode::Symbol (module)										
POSIX module	R	POSIX (module)										
-dt switch	R	-dt										
I18N::LangTags::List	R	I18N::LangTags::List (module)										
List::Util::XS	R	List::Util::XS (module)										
File Spec Win32 library	R	File::Spec::Win32 (module)										
ioctl function	R	ioctl (function)										
IO Compress Base library	R	IO::Compress::Base (module)										
warn sub	R	warn (function)										
DBM_Filter compress	R	DBM_Filter::compress (module)										
ExtUtils MM_BeOS	R	ExtUtils::MM_BeOS (module)										
RFC definition	R	RFC (definition)										
utime function	R	utime (function)										
Thread Semaphore package	R	Thread::Semaphore (module)										
Unbalanced tmps:  more allocs than frees	R	Unbalanced tmps: %d more allocs than frees										
rmdir func	R	rmdir (function)										
hide the source for my Perl program	R	How can I hide the source for my Perl program?										
refcnt_inc: fd 	R	refcnt_inc: fd %d%s										
define directive	R	directive (definition)										
msgrcv	R	msgrcv (function)										
ExtUtils::MM_Cygwin	R	ExtUtils::MM_Cygwin (module)										
sleep routine	R	sleep (function)										
IO Compress Gzip library	R	IO::Compress::Gzip (module)										
Binary <=>	R	Binary "<=>" operator										
lcfirst function	R	lcfirst (function)										
Pod Simple Text package	R	Pod::Simple::Text (module)										
How do I check whether input is ready on the keyboard	R	How do I check whether input is ready on the keyboard?										
split a characterdelimited string except when inside character	R	How can I split a [character]-delimited string except when inside [character]?										
write function	R	write (function)										
define FIFO	R	FIFO (definition)										
alarm method	R	alarm (function)										
matching definition	R	matching (definition)										
fcntl func	R	fcntl (function)										
Pod Text Termcap library	R	Pod::Text::Termcap (module)										
How do I handle binary data correctly	R	How do I handle binary data correctly?										
Malformed prototype for : 	R	Malformed prototype for %s: %s										
socket routine	R	socket (function)										
How do I find out which operating system Im running under	R	How do I find out which operating system I'm running under?										
numeric context	R	numeric context (definition)										
chown method	R	chown (function)										
CHECK routine	R	CHECK (function)										
ref method	R	ref (function)										
string	R	string (definition)										
Using /u for '' instead of / in regex; marked by <-- HERE in m//	R	Using /u for '%s' instead of /%s in regex; marked by <-- HERE in m/%s/										
sysread	R	sysread (function)										
define autovivification	R	autovivification (definition)										
Binary ge	R	Binary "ge" operator										
setpgrp routine	R	setpgrp (function)										
element	R	element (definition)										
IO::Uncompress::Gunzip package	R	IO::Uncompress::Gunzip (module)										
Config module	R	Config (module)										
TAP Parser Scheduler Job package	R	TAP::Parser::Scheduler::Job (module)										
define subclass	R	subclass (definition)										
Time tm library	R	Time::tm (module)										
titlecase definition	R	titlecase (definition)										
Unicode::Normalize	R	Unicode::Normalize (module)										
Can't use \ to mean $ in expression	R	Can't use \%c to mean $%c in expression										
TAP Parser Iterator library	R	TAP::Parser::Iterator (module)										
define environment	R	environment (definition)										
Time::gmtime	R	Time::gmtime (module)										
CPAN Version module	R	CPAN::Version (module)										
ne method	R	ne (function)										
prefix definition	R	prefix (definition)										
Exporter Heavy module	R	Exporter::Heavy (module)										
Net::POP3 package	R	Net::POP3 (module)										
define fatal error	R	fatal error (definition)										
open method	R	open (function)										
Pod::Simple::RTF	R	Pod::Simple::RTF (module)										
Pod::ParseUtils module	R	Pod::ParseUtils (module)										
Unexpected exit failure 	R	Unexpected exit failure %d										
getservent sub	R	getservent (function)										
copy a file?	R	How can I copy a file?										
Tie::Handle	R	Tie::Handle (module)										
continue sub	R	continue (function)										
ExtUtils Installed library	R	ExtUtils::Installed (module)										
continue	R	continue (function)										
Test::Harness module	R	Test::Harness (module)										
Encode JP JIS7 library	R	Encode::JP::JIS7 (module)										
Devel::SelfStubber module	R	Devel::SelfStubber (module)										
msgsnd function	R	msgsnd (function)										
Encode Guess	R	Encode::Guess (module)										
@ARGV	R	@ARGV (variable)										
write a GUI (X, Tk, Gtk, etc.) in Perl?	R	How can I write a GUI (X, Tk, Gtk, etc.) in Perl?										
alarm sub	R	alarm (function)										
-e switch	R	-e commandline										
TAP Parser Result Version	R	TAP::Parser::Result::Version (module)										
taint checks definition	R	taint checks (definition)										
Pod Checker library	R	Pod::Checker (module)										
IO::Uncompress::Bunzip2 module	R	IO::Uncompress::Bunzip2 (module)										
library	R	library (definition)										
__PACKAGE__ function	R	__PACKAGE__ (function)										
B Showlex library	R	B::Showlex (module)										
define member data	R	member data (definition)										
$MATCH (variable)	R	$& (variable)										
TAP::Harness	R	TAP::Harness (module)										
define true	R	true (definition)										
until	R	until (function)										
handler	R	handler (definition)										
HANDLE->format_lines_per_page(EXPR) (variable)	R	$= (variable)										
IO Seekable	R	IO::Seekable (module)										
Locale Maketext Simple module	R	Locale::Maketext::Simple (module)										
qr routine	R	qr (function)										
syntax definition	R	syntax (definition)										
Warning: unable to close filehandle properly: 	R	Warning: unable to close filehandle %s properly: %s										
S pod code	R	S<text>										
TAP::Parser::Result::Bailout	R	TAP::Parser::Result::Bailout (module)										
Pod::Find	R	Pod::Find (module)										
stringification definition	R	stringification (definition)										
Boolean context definition	R	Boolean context (definition)										
capture variables	R	capture variables (definition)										
getprotoent method	R	getprotoent (function)										
define bit shift	R	bit shift (definition)										
shmwrite func	R	shmwrite (function)										
setpwent function	R	setpwent (function)										
endgrent sub	R	endgrent (function)										
core dump definition	R	core dump (definition)										
endservent sub	R	endservent (function)										
quotemeta	R	quotemeta (function)										
Boolean	R	Boolean (definition)										
utime func	R	utime (function)										
msgget routine	R	msgget (function)										
panic: leave_scope inconsistency 	R	panic: leave_scope inconsistency %u										
Digest library	R	Digest (module)										
Encode Encoding	R	Encode::Encoding (module)										
scalar context definition	R	scalar context (definition)										
define pattern matching	R	pattern matching (definition)										
big-endian	R	big-endian (definition)										
Time Piece package	R	Time::Piece (module)										
define subscript	R	subscript (definition)										
Math BigInt Calc library	R	Math::BigInt::Calc (module)										
truncate	R	truncate (function)										
How can I hide the source for my Perl program	R	How can I hide the source for my Perl program?										
change the Nth occurrence of something?	R	How do I change the Nth occurrence of something?										
define indirection	R	indirection (definition)										
ExtUtils::Constant::Base	R	ExtUtils::Constant::Base (module)										
opendir	R	opendir (function)										
define construct	R	construct (definition)										
refcnt: fd 	R	refcnt_inc: fd %d%s										
Maximal count of pending signals () exceeded	R	Maximal count of pending signals (%u) exceeded										
modifier	R	modifier (definition)										
panic: attempt to call  in 	R	panic: attempt to call %s in %s										
pod =head1	R	=head1,										
match strings with multibyte characters	R	How can I match strings with multibyte characters?										
I18N LangTags Detect module	R	I18N::LangTags::Detect (module)										
glue language	R	glue language (definition)										
Encode::Unicode::UTF7 module	R	Encode::Unicode::UTF7 (module)										
TAP::Parser::Scheduler::Spinner package	R	TAP::Parser::Scheduler::Spinner (module)										
Artistic License	R	Artistic License (definition)										
leftmost longest	R	leftmost longest (definition)										
define syntactic sugar	R	syntactic sugar (definition)										
Tie::Hash package	R	Tie::Hash (module)										
TAP Parser Source	R	TAP::Parser::Source (module)										
ExtUtils CBuilder library	R	ExtUtils::CBuilder (module)										
Binary ,	R	Binary "," operator										
ExtUtils CBuilder Platform Windows module	R	ExtUtils::CBuilder::Platform::Windows (module)										
IPC Msg module	R	IPC::Msg (module)										
Encode::Unicode	R	Encode::Unicode (module)										
Makefile definition	R	Makefile (definition)										
endprotoent	R	endprotoent (function)										
perform an operation on a series of integers	R	How do I perform an operation on a series of integers?										
statement modifier	R	statement modifier (definition)										
Pod::Simple::XHTML	R	Pod::Simple::XHTML (module)										
IO::Poll module	R	IO::Poll (module)										
TAP::Base package	R	TAP::Base (module)										
How can I get a binary version of Perl	R	How can I get a binary version of Perl?										
Binary or operator	R	Binary "or" operator										
CPAN HandleConfig library	R	CPAN::HandleConfig (module)										
descriptor (definition)	R	file descriptor										
Can't  -endian  on this platform	R	Can't %s %s-endian %ss on this platform										
Pod::Simple::RTF library	R	Pod::Simple::RTF (module)										
Test Simple package	R	Test::Simple (module)										
END routine	R	END (function)										
our method	R	our (function)										
Tie File module	R	Tie::File (module)										
Unicode non-character U+ is illegal for open interchange	R	Unicode non-character U+%X is illegal for open interchange										
cos routine	R	cos (function)										
use Perl interactively	R	How can I use Perl interactively?										
define scope	R	scope (definition)										
TMTOWTDI definition	R	TMTOWTDI (definition)										
subclass	R	subclass (definition)										
Pod::Escapes module	R	Pod::Escapes (module)										
define expression	R	expression (definition)										
print func	R	print (function)										
socket method	R	socket (function)										
File::Spec::Win32	R	File::Spec::Win32 (module)										
Tie Array	R	Tie::Array (module)										
B::Xref library	R	B::Xref (module)										
lexical variable	R	lexical variable (definition)										
dual-lived definition	R	dual-lived (definition)										
IO::Dir package	R	IO::Dir (module)										
ExtUtils MM_VOS	R	ExtUtils::MM_VOS (module)										
How can I match a localesmart version of	R	How can I match a locale-smart version of?										
Memoize ExpireFile library	R	Memoize::ExpireFile (module)										
TAP::Parser::IteratorFactory module	R	TAP::Parser::IteratorFactory (module)										
fork function	R	fork (function)										
subpattern definition	R	subpattern (definition)										
find which modules are installed on my system	R	How do I find which modules are installed on my system?										
BEGIN	R	BEGIN (function)										
NDBM_File	R	NDBM_File (module)										
Encode CN HZ package	R	Encode::CN::HZ (module)										
synchronous definition	R	synchronous (definition)										
header file definition	R	header file (definition)										
study sub	R	study (function)										
Tie StdHandle module	R	Tie::StdHandle (module)										
How can I store a multidimensional array in a DBM file	R	How can I store a multidimensional array in a DBM file?										
Slab leaked from cv 	R	Slab leaked from cv %p										
pop	R	pop (function)										
string definition	R	string (definition)										
I18N Langinfo	R	I18N::Langinfo (module)										
atom definition	R	atom (definition)										
caller sub	R	caller (function)										
Test More library	R	Test::More (module)										
glob subroutine	R	glob (function)										
Im having trouble matching over more than one line Whats wrong	R	I'm having trouble matching over more than one line. What's wrong?										
define GV	R	GV (definition)										
rename function	R	rename (function)										
Why dont my tied hashes make the definedexists distinction	R	Why don't my tied hashes make the defined/exists distinction?										
Nested quantifiers in regex; marked by <-- HERE in m//	R	Nested quantifiers in regex; marked by <-- HERE in m/%s/										
qq sub	R	qq (function)										
find the Julian Day?	R	How can I find the Julian Day?										
DirHandle	R	DirHandle (module)										
exit method	R	exit (function)										
handler definition	R	handler (definition)										
Opening dirhandle  also as a file	R	Opening dirhandle %s also as a file										
a character escape pod	R	E<escape>										
use curses with Perl?	R	How can I use curses with Perl?										
map routine	R	map (function)										
SelfLoader library	R	SelfLoader (module)										
structure definition	R	structure (definition)										
cos	R	cos (function)										
ExtUtils Command library	R	ExtUtils::Command (module)										
argument definition	R	argument (definition)										
get a binary version of Perl	R	How can I get a binary version of Perl?										
porter	R	porter (definition)										
@F	R	@F (variable)										
define signal	R	signal (definition)										
Binary ==	R	Binary "==" operator										
TAP Parser Result Plan	R	TAP::Parser::Result::Plan (module)										
Time localtime package	R	Time::localtime (module)										
Encode::CJKConstants module	R	Encode::CJKConstants (module)										
. operator	R	Binary "." operator										
Encode EBCDIC library	R	Encode::EBCDIC (module)										
TAP Parser YAMLish Reader	R	TAP::Parser::YAMLish::Reader (module)										
method definition	R	method (definition)										
ExtUtils Command MM package	R	ExtUtils::Command::MM (module)										
File::Path library	R	File::Path (module)										
setuid	R	setuid (definition)										
mortal	R	mortal (definition)										
ExtUtils::MM_MacOS	R	ExtUtils::MM_MacOS (module)										
define offset	R	offset (definition)										
wantarray sub	R	wantarray (function)										
Stub found while resolving method "" overloading "" in package ""	R	Stub found while resolving method "%s" overloading "%s" in package "%s"										
CPAN::Nox module	R	CPAN::Nox (module)										
tie func	R	tie (function)										
not operator	R	Unary "not" operator										
tied	R	tied (function)										
define side effects	R	side effects (definition)										
Module CoreList module	R	Module::CoreList (module)										
Tie StdHandle package	R	Tie::StdHandle (module)										
Pod Simple Debug library	R	Pod::Simple::Debug (module)										
Memoize::NDBM_File library	R	Memoize::NDBM_File (module)										
Pod::InputObjects package	R	Pod::InputObjects (module)										
xor subroutine	R	xor (function)										
instance method	R	instance method (definition)										
IO::Handle->format_formfeed(EXPR)	R	$^L (variable)										
IO::Uncompress::AnyInflate module	R	IO::Uncompress::AnyInflate (module)										
ExtUtils::MM library	R	ExtUtils::MM (module)										
le subroutine	R	le (function)										
define ARGV	R	ARGV (definition)										
IO module	R	IO (module)										
setsockopt func	R	setsockopt (function)										
casefolding definition	R	casefolding (definition)										
Makefile	R	Makefile (definition)										
ExtUtils MakeMaker Tutorial package	R	ExtUtils::MakeMaker::Tutorial (module)										
$EFFECTIVE_GROUP_ID (variable)	R	$) (variable)										
SelectSaver package	R	SelectSaver (module)										
for routine	R	for (function)										
syntactic sugar definition	R	syntactic sugar (definition)										
shutdown sub	R	shutdown (function)										
pipe routine	R	pipe (function)										
Archive::Tar library	R	Archive::Tar (module)										
trigger	R	trigger (definition)										
getc subroutine	R	getc (function)										
freely available definition	R	freely available (definition)										
Plack and PSGI?	R	What is Plack and PSGI?										
context	R	context (definition)										
Pod::Text::Color package	R	Pod::Text::Color (module)										
determine whether a scalar is a numberwholeintegerfloat	R	How do I determine whether a scalar is a number/whole/integer/float?										
$^P	R	$^P (variable)										
define list value	R	list value (definition)										
define casemapping	R	casemapping (definition)										
Pod Select module	R	Pod::Select (module)										
How does Perl compare with other languages like Java Python REXX Scheme or Tcl	R	How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?										
our function	R	our (function)										
How can I tell if a variable is tainted	R	How can I tell if a variable is tainted?										
TAP::Parser module	R	TAP::Parser (module)										
code generator	R	code generator (definition)										
TAP::Parser::Result::Bailout module	R	TAP::Parser::Result::Bailout (module)										
define cargo cult	R	cargo cult (definition)										
IO Poll module	R	IO::Poll (module)										
Cannot chr 	R	Cannot chr %f										
Missing name in " sub"	R	Missing name in "%s sub"										
shm not implemented	R	shm%s not implemented										
define hacker	R	hacker (definition)										
Dumpvalue	R	Dumpvalue (module)										
elsif routine	R	elsif (function)										
push func	R	push (function)										
CPAN module	R	CPAN (module)										
Cannot printf  with ''	R	Cannot printf %f with '%c'										
PerlIO scalar package	R	PerlIO::scalar (module)										
x func	R	x (function)										
print out a word-frequency or line-frequency summary?	R	How can I print out a word-frequency or line-frequency summary?										
App Prove module	R	App::Prove (module)										
symbolic link	R	symbolic link (definition)										
dbmclose subroutine	R	dbmclose (function)										
given subroutine	R	given (function)										
Pod::Find package	R	Pod::Find (module)										
sysopen	R	sysopen (function)										
lstat method	R	lstat (function)										
define regular expression modifier	R	regular expression modifier (definition)										
define is-a	R	is-a (definition)										
define whitespace	R	whitespace (definition)										
To: illegal mapping ''	R	To%s: illegal mapping '%s'										
dump method	R	dump (function)										
uc func	R	uc (function)										
tr sub	R	tr (function)										
fetch/put an (S)FTP file?	R	How do I fetch/put an (S)FTP file?										
IO::Poll library	R	IO::Poll (module)										
IPC::Open3 library	R	IPC::Open3 (module)										
AUTOLOAD func	R	AUTOLOAD (function)										
Trailing \ in regex m//	R	Trailing \ in regex m/%s/										
Pod::Perldoc::ToChecker package	R	Pod::Perldoc::ToChecker (module)										
How can I take a string and turn it into epoch seconds	R	How can I take a string and turn it into epoch seconds?										
localtime subroutine	R	localtime (function)										
define assignment	R	assignment (definition)										
IO Socket INET	R	IO::Socket::INET (module)										
ExtUtils Install	R	ExtUtils::Install (module)										
Safe module	R	Safe (module)										
pointer	R	pointer (definition)										
Net hostent	R	Net::hostent (module)										
ExtUtils::MM_QNX module	R	ExtUtils::MM_QNX (module)										
read a single character from a file From the keyboard	R	How can I read a single character from a file? From the keyboard?										
IO::Handle->output_record_separator( EXPR ) (variable)	R	$\ (variable)										
TAP::Formatter::Base library	R	TAP::Formatter::Base (module)										
Pod Simple Methody module	R	Pod::Simple::Methody (module)										
waitpid function	R	waitpid (function)										
keys func	R	keys (function)										
-U switch	R	-U										
sub method	R	sub (function)										
chdir function	R	chdir (function)										
values sub	R	values (function)										
each method	R	each (function)										
pseudoliteral	R	pseudoliteral (definition)										
Symbol package	R	Symbol (module)										
__FILE__ function	R	__FILE__ (function)										
dbmclose	R	dbmclose (function)										
Math::BigInt::CalcEmu	R	Math::BigInt::CalcEmu (module)										
Subroutine "&" is not available	R	Subroutine "&%s" is not available										
seek	R	seek (function)										
-dt flag	R	-dt										
How do I flushunbuffer an output filehandle Why must I do this	R	How do I flush/unbuffer an output filehandle? Why must I do this?										
when func	R	when (function)										
How do I print out or copy a recursive data structure	R	How do I print out or copy a recursive data structure?										
Math::BigInt::CalcEmu package	R	Math::BigInt::CalcEmu (module)										
How do I randomly update a binary file	R	How do I randomly update a binary file?										
matching (definition)	R	pattern matching										
composer	R	composer (definition)										
join method	R	join (function)										
Math Trig	R	Math::Trig (module)										
pod =item	R	=item										
IPC::SysV module	R	IPC::SysV (module)										
serialization definition	R	serialization (definition)										
I18N::Collate module	R	I18N::Collate (module)										
shell definition	R	shell (definition)										
ExtUtils Manifest package	R	ExtUtils::Manifest (module)										
define octal	R	octal (definition)										
Unmatched ) in regex; marked by <-- HERE in m//	R	Unmatched ) in regex; marked by <-- HERE in m/%s/										
Config::Extensions library	R	Config::Extensions (module)										
File stat	R	File::stat (module)										
fileno function	R	fileno (function)										
Unexpected '(' with no preceding operator in regex; marked by <-- HERE in m//	R	Unexpected '(' with no preceding operator in regex; marked by <-- HERE in m/%s/										
seekdir subroutine	R	seekdir (function)										
File::stat module	R	File::stat (module)										
dump func	R	dump (function)										
shmget subroutine	R	shmget (function)										
character property definition	R	character property (definition)										
define pragma	R	pragma (definition)										
delimiter definition	R	delimiter (definition)										
Pod Man module	R	Pod::Man (module)										
index	R	index (function)										
Ranges of digits should be from the same group in regex; marked by <-- HERE in m//	R	Ranges of digits should be from the same group in regex; marked by <-- HERE in m/%s/										
ExtUtils::MM_Cygwin library	R	ExtUtils::MM_Cygwin (module)										
Text Wrap library	R	Text::Wrap (module)										
lookbehind	R	lookbehind (definition)										
IPC SysV module	R	IPC::SysV (module)										
fork method	R	fork (function)										
File::Spec::Functions package	R	File::Spec::Functions (module)										
Why isnt my octal data interpreted correctly	R	Why isn't my octal data interpreted correctly?										
getsockopt sub	R	getsockopt (function)										
iterator	R	iterator (definition)										
Pod::Html library	R	Pod::Html (module)										
getlogin sub	R	getlogin (function)										
define constructor	R	constructor (definition)										
wait routine	R	wait (function)										
find out which operating system I'm running under?	R	How do I find out which operating system I'm running under?										
MIME::Base64 library	R	MIME::Base64 (module)										
word	R	word (definition)										
ExtUtils MM_Win32 package	R	ExtUtils::MM_Win32 (module)										
Variable "" is not imported	R	Variable "%s" is not imported%s										
Math BigRat module	R	Math::BigRat (module)										
Tie::Memoize module	R	Tie::Memoize (module)										
Locale::Language	R	Locale::Language (module)										
write a GUI X Tk Gtk etc in Perl	R	How can I write a GUI (X, Tk, Gtk, etc.) in Perl?										
Encode JP	R	Encode::JP (module)										
Malformed UTF-8 character immediately after ''	R	Malformed UTF-8 character immediately after '%s'										
IPC Open3 library	R	IPC::Open3 (module)										
command-line arguments definition	R	command-line arguments (definition)										
Time Local	R	Time::Local (module)										
B Concise	R	B::Concise (module)										
How do I profile my Perl programs	R	How do I profile my Perl programs?										
$REAL_GROUP_ID (variable)	R	$( (variable)										
look up a hash element by value	R	How do I look up a hash element by value?										
shell	R	shell (definition)										
UNITCHECK routine	R	UNITCHECK (function)										
$LAST_SUBMATCH_RESULT (variable)	R	$^N (variable)										
=begin pod	R	=begin										
getnetbyname subroutine	R	getnetbyname (function)										
application definition	R	application (definition)										
interpolation definition	R	interpolation (definition)										
Pod Simple Debug module	R	Pod::Simple::Debug (module)										
hex func	R	hex (function)										
Pod Text Termcap package	R	Pod::Text::Termcap (module)										
gmtime	R	gmtime (function)										
define attribute	R	attribute (definition)										
splice	R	splice (function)										
shuffle an array randomly	R	How do I shuffle an array randomly?										
Locale::Maketext library	R	Locale::Maketext (module)										
=end pod command	R	=end										
$EXTENDED_OS_ERROR	R	$^E (variable)										
shmread func	R	shmread (function)										
trap control characterssignals	R	How do I trap control characters/signals?										
Time Piece module	R	Time::Piece (module)										
define fork	R	fork (definition)										
autovivification	R	autovivification (definition)										
read just one key without waiting for a return key?	R	How do I read just one key without waiting for a return key?										
endgrent routine	R	endgrent (function)										
srand func	R	srand (function)										
B::Deparse package	R	B::Deparse (module)										
substr function	R	substr (function)										
-V: flag	R	-V: configvar										
Which version of Perl should I use	R	Which version of Perl should I use?										
time routine	R	time (function)										
log function	R	log (function)										
open a file without blocking	R	How do I open a file without blocking?										
Socket library	R	Socket (module)										
text	R	text (definition)										
here document	R	here document (definition)										
define continuation	R	continuation (definition)										
infix	R	infix (definition)										
What machines support Perl Where do I get it	R	What machines support Perl? Where do I get it?										
push sub	R	push (function)										
define cluster	R	cluster (definition)										
B Showlex package	R	B::Showlex (module)										
Regexp modifier "" may not appear twice in regex; marked by <-- HERE in m//	R	Regexp modifier "%c" may not appear twice in regex; marked by <-- HERE in m/%s/										
close routine	R	close (function)										
Pod::Simple::PullParserEndToken package	R	Pod::Simple::PullParserEndToken (module)										
Encode JP package	R	Encode::JP (module)										
format func	R	format (function)										
do approximate matching?	R	How can I do approximate matching?										
remove consecutive pairs of characters	R	How do I remove consecutive pairs of characters?										
glue language definition	R	glue language (definition)										
Locale::Maketext package	R	Locale::Maketext (module)										
clear the screen?	R	How do I clear the screen?										
Devel::PPPort	R	Devel::PPPort (module)										
Binary >>	R	Binary ">>" operator										
IO Socket UNIX library	R	IO::Socket::UNIX (module)										
ExtUtils Liblist	R	ExtUtils::Liblist (module)										
define warning	R	warning (definition)										
Integer overflow in version 	R	Integer overflow in version %d										
%ERRNO (variable)	R	%! (variable)										
length() used on  (did you mean "scalar()"?)	R	length() used on %s (did you mean "scalar(%s)"?)										
flock func	R	flock (function)										
Archive Tar module	R	Archive::Tar (module)										
CPAN Nox	R	CPAN::Nox (module)										
Encode Unicode package	R	Encode::Unicode (module)										
.	R	Binary "." operator										
Pod Simple DumpAsText	R	Pod::Simple::DumpAsText (module)										
portable definition	R	portable (definition)										
scalar routine	R	scalar (function)										
-c option	R	-c										
Net::Domain package	R	Net::Domain (module)										
File::GlobMapper library	R	File::GlobMapper (module)										
shuffle an array randomly?	R	How do I shuffle an array randomly?										
IO::Zlib module	R	IO::Zlib (module)										
Net::SMTP library	R	Net::SMTP (module)										
setgrent method	R	setgrent (function)										
getc function	R	getc (function)										
define pseudohash	R	pseudohash (definition)										
File::Basename module	R	File::Basename (module)										
TAP Parser YAMLish Reader package	R	TAP::Parser::YAMLish::Reader (module)										
define substitution	R	substitution (definition)										
TAP::Parser::Multiplexer module	R	TAP::Parser::Multiplexer (module)										
expand function calls in a string	R	How do I expand function calls in a string?										
Pod Simple PullParserTextToken module	R	Pod::Simple::PullParserTextToken (module)										
CPAN::HandleConfig	R	CPAN::HandleConfig (module)										
do approximate matching	R	How can I do approximate matching?										
destructor	R	destructor (definition)										
ExtUtils Install module	R	ExtUtils::Install (module)										
Setting $/ to a reference to  as a form of slurp is deprecated, treating as undef	R	Setting $/ to a reference to %s as a form of slurp is deprecated, treating as undef										
define lexeme	R	lexeme (definition)										
Pod Simple Methody package	R	Pod::Simple::Methody (module)										
redefine a builtin function operator or method	R	How do I redefine a builtin function, operator, or method?										
semctl sub	R	semctl (function)										
define switch statement	R	switch statement (definition)										
getgrnam method	R	getgrnam (function)										
print something out in color?	R	How do I print something out in color?										
exists sub	R	exists (function)										
home directory definition	R	home directory (definition)										
unless subroutine	R	unless (function)										
ExtUtils MM_Win95	R	ExtUtils::MM_Win95 (module)										
B::Deparse	R	B::Deparse (module)										
instance data (definition)	R	instance variable										
Goto undefined subroutine	R	Goto undefined subroutine%s										
Perl?	R	What is Perl?										
make a temporary file name	R	How do I make a temporary file name?										
Pod Simple DumpAsText module	R	Pod::Simple::DumpAsText (module)										
Encode JP H2Z package	R	Encode::JP::H2Z (module)										
closedir() attempted on invalid dirhandle 	R	closedir() attempted on invalid dirhandle %s										
shebang	R	shebang (definition)										
link subroutine	R	link (function)										
read sub	R	read (function)										
IO::Socket::UNIX	R	IO::Socket::UNIX (module)										
Pod::PlainText library	R	Pod::PlainText (module)										
App Prove package	R	App::Prove (module)										
define modulus	R	modulus (definition)										
unescape a string?	R	How do I unescape a string?										
Pod Simple library	R	Pod::Simple (module)										
App::Prove package	R	App::Prove (module)										
TAP::Parser::Multiplexer	R	TAP::Parser::Multiplexer (module)										
find out my hostname domainname or IP address	R	How do I find out my hostname, domainname, or IP address?										
times func	R	times (function)										
TAP Parser Result Plan module	R	TAP::Parser::Result::Plan (module)										
 matches null string many times in regex; marked by <-- HERE in m//	R	%s matches null string many times in regex; marked by <-- HERE in m/%s/										
How can I sleep or alarm for under a second	R	How can I sleep() or alarm() for under a second?										
recv sub	R	recv (function)										
define capture variables	R	capture variables (definition)										
waitpid sub	R	waitpid (function)										
Test::Simple	R	Test::Simple (module)										
codepoint	R	codepoint (definition)										
panic: corrupt saved stack index 	R	panic: corrupt saved stack index %ld										
actual arguments	R	actual arguments (definition)										
return value	R	return value (definition)										
sub sub	R	sub (function)										
ioctl sub	R	ioctl (function)										
abs routine	R	abs (function)										
Fatal	R	Fatal (module)										
system method	R	system (function)										
porter definition	R	porter (definition)										
dump subroutine	R	dump (function)										
define greedy	R	greedy (definition)										
How do I pad a string with blanks or pad a number with zeroes	R	How do I pad a string with blanks or pad a number with zeroes?										
lcfirst method	R	lcfirst (function)										
IO::Dir module	R	IO::Dir (module)										
Net::netent	R	Net::netent (module)										
lvalue definition	R	lvalue (definition)										
EOF	R	EOF (definition)										
L formatting code	R	L<name>										
Attribute::Handlers library	R	Attribute::Handlers (module)										
define filename	R	filename (definition)										
Exporter package	R	Exporter (module)										
Test::Builder module	R	Test::Builder (module)										
Math BigInt CalcEmu	R	Math::BigInt::CalcEmu (module)										
ExtUtils::MM_AIX library	R	ExtUtils::MM_AIX (module)										
Can't load '' for module 	R	Can't load '%s' for module %s										
source filter	R	source filter (definition)										
Compress::Raw::Bzip2 module	R	Compress::Raw::Bzip2 (module)										
watch expression	R	watch expression (definition)										
define closure	R	closure (definition)										
sqrt func	R	sqrt (function)										
define hard reference	R	hard reference (definition)										
Unknown regex modifier ""	R	Unknown regex modifier "%s"										
int func	R	int (function)										
Pod Perldoc ToMan module	R	Pod::Perldoc::ToMan (module)										
monger	R	monger (definition)										
typed lexical	R	typed lexical (definition)										
Lookbehind longer than  not implemented in regex m//	R	Lookbehind longer than %d not implemented in regex m/%s/										
NEXT package	R	NEXT (module)										
getnetent function	R	getnetent (function)										
File::Find module	R	File::Find (module)										
define atomic operation	R	atomic operation (definition)										
__SUB__ sub	R	__SUB__ (function)										
Missing comma after first argument to  function	R	Missing comma after first argument to %s function										
Which magazines have Perl content	R	Which magazines have Perl content?										
Module Loaded package	R	Module::Loaded (module)										
mro definition	R	mro (definition)										
How do I define methods for every classobject	R	How do I define methods for every class/object?										
Binary / operator	R	Binary "/" operator										
debug my Perl programs?	R	How do I debug my Perl programs?										
fetch an HTML file?	R	How do I fetch an HTML file?										
define open source software	R	open source software (definition)										
empty subclass test	R	empty subclass test (definition)										
Pod::Simple::Text library	R	Pod::Simple::Text (module)										
vec method	R	vec (function)										
Pod::Simple::SimpleTree package	R	Pod::Simple::SimpleTree (module)										
Unicode surrogate U+ is illegal in UTF-8	R	Unicode surrogate U+%X is illegal in UTF-8										
<	R	Binary "<" operator										
All I want to do is append a small amount of text to the end of a file Do I still have to use locking	R	All I want to do is append a small amount of text to the end of a file. Do I still have to use locking?										
Time tm package	R	Time::tm (module)										
ExtUtils::Embed library	R	ExtUtils::Embed (module)										
define static	R	static (definition)										
getgrgid func	R	getgrgid (function)										
Math::BigRat package	R	Math::BigRat (module)										
binmode routine	R	binmode (function)										
__SUB__ func	R	__SUB__ (function)										
array context definition	R	array context (definition)										
redo method	R	redo (function)										
ref subroutine	R	ref (function)										
Archive::Tar module	R	Archive::Tar (module)										
false definition	R	false (definition)										
TAP Parser Source module	R	TAP::Parser::Source (module)										
ExtUtils::MakeMaker::Tutorial	R	ExtUtils::MakeMaker::Tutorial (module)										
'' resolved to '\o{}'	R	'%s' resolved to '\o{%s}%d'										
anonymous definition	R	anonymous (definition)										
$FORMAT_NAME (variable)	R	$~ (variable)										
scratchpad	R	scratchpad (definition)										
environment	R	environment (definition)										
open a file with a leading ">" or trailing blanks?	R	How can I open a file with a leading ">" or trailing blanks?										
symlink func	R	symlink (function)										
hacker	R	hacker (definition)										
IO::Compress::Zip	R	IO::Compress::Zip (module)										
$^	R	$^ (variable)										
comment	R	comment (definition)										
IO::Compress::Base library	R	IO::Compress::Base (module)										
mode definition	R	mode (definition)										
TAP::Parser::Scheduler	R	TAP::Parser::Scheduler (module)										
-e option	R	-e commandline										
Pod Text Color module	R	Pod::Text::Color (module)										
define text	R	text (definition)										
caller	R	caller (function)										
difference between require and use?	R	What's the difference between require and use?										
TAP::Formatter::File package	R	TAP::Formatter::File (module)										
Pod Simple PullParser library	R	Pod::Simple::PullParser (module)										
App Prove State library	R	App::Prove::State (module)										
named pipe	R	named pipe (definition)										
Tie Scalar	R	Tie::Scalar (module)										
arithmetical operator	R	arithmetical operator (definition)										
CPAN Distroprefs package	R	CPAN::Distroprefs (module)										
Test module	R	Test (module)										
rmdir routine	R	rmdir (function)										
define role	R	role (definition)										
How can I convince others to use Perl	R	How can I convince others to use Perl?										
send func	R	send (function)										
IO::Uncompress::Unzip module	R	IO::Uncompress::Unzip (module)										
Time tm	R	Time::tm (module)										
Storable package	R	Storable (module)										
scalar variable definition	R	scalar variable (definition)										
unpack method	R	unpack (function)										
Unbalanced context:  more PUSHes than POPs	R	Unbalanced context: %d more PUSHes than POPs										
Pod::Perldoc::BaseTo module	R	Pod::Perldoc::BaseTo (module)										
sort subroutine	R	sort (function)										
ExtUtils::testlib package	R	ExtUtils::testlib (module)										
() on unopened filehandle	R	%sseek() on unopened filehandle										
declare/create a structure?	R	How do I declare/create a structure?										
define value	R	value (definition)										
define Unix	R	Unix (definition)										
define indirect object	R	indirect object (definition)										
uc method	R	uc (function)										
CODE	R	CODE (definition)										
MIME Base64 package	R	MIME::Base64 (module)										
Tie::Hash library	R	Tie::Hash (module)										
ExtUtils::Constant package	R	ExtUtils::Constant (module)										
define directory handle	R	directory handle (definition)										
Devel SelfStubber package	R	Devel::SelfStubber (module)										
How do I create a switch or case statement	R	How do I create a switch or case statement?										
Memoize SDBM_File library	R	Memoize::SDBM_File (module)										
IO Uncompress AnyUncompress module	R	IO::Uncompress::AnyUncompress (module)										
dup() a filehandle in Perl?	R	How do I dup() a filehandle in Perl?										
TAP::Parser::Result::YAML package	R	TAP::Parser::Result::YAML (module)										
Group name must start with a non-digit word character in regex; marked by <-- HERE in m//	R	Group name must start with a non-digit word character in regex; marked by <-- HERE in m/%s/										
%[] in scalar context better written as $[]	R	%%s[%s] in scalar context better written as $%s[%s]										
${^UTF8LOCALE}	R	${^UTF8LOCALE} (variable)										
local method	R	local (function)										
define loop label	R	loop label (definition)										
IO::Select library	R	IO::Select (module)										
sysseek method	R	sysseek (function)										
TAP Formatter Console Session package	R	TAP::Formatter::Console::Session (module)										
sprintf method	R	sprintf (function)										
connection	R	connection (definition)										
tie method	R	tie (function)										
Compress::Zlib package	R	Compress::Zlib (module)										
reformat a paragraph	R	How do I reformat a paragraph?										
le routine	R	le (function)										
Parse::CPAN::Meta module	R	Parse::CPAN::Meta (module)										
I18N LangTags library	R	I18N::LangTags (module)										
declaration definition	R	declaration (definition)										
define methods for every class/object?	R	How do I define methods for every class/object?										
eq subroutine	R	eq (function)										
symbolic reference	R	symbolic reference (definition)										
Pod Perldoc ToNroff library	R	Pod::Perldoc::ToNroff (module)										
IO Uncompress AnyUncompress package	R	IO::Uncompress::AnyUncompress (module)										
Pod Text Overstrike	R	Pod::Text::Overstrike (module)										
bytecode definition	R	bytecode (definition)										
TAP::Parser::ResultFactory	R	TAP::Parser::ResultFactory (module)										
tokener	R	tokener (definition)										
Compress Raw Bzip2 package	R	Compress::Raw::Bzip2 (module)										
getpwuid sub	R	getpwuid (function)										
Net::FTP::dataconn package	R	Net::FTP::dataconn (module)										
ExtUtils::Install	R	ExtUtils::Install (module)										
perlcom Perl Mongers pmorg perlorg cpanorg	R	What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?										
attribute	R	attribute (definition)										
mprotect RW for   failed with 	R	mprotect RW for %p %u failed with %d										
ExtUtils MM_AIX module	R	ExtUtils::MM_AIX (module)										
DBM_Filter::null library	R	DBM_Filter::null (module)										
Encode JP H2Z module	R	Encode::JP::H2Z (module)										
Math BigRat library	R	Math::BigRat (module)										
mprotect RW for COW string   failed with 	R	mprotect RW for COW string %p %u failed with %d										
ExtUtils Miniperl module	R	ExtUtils::Miniperl (module)										
No such class 	R	No such class %s										
Perl 6	R	What is Perl 6?										
English library	R	English (module)										
List::Util library	R	List::Util (module)										
$FORMAT_LINES_LEFT	R	$- (variable)										
Tie RefHash module	R	Tie::RefHash (module)										
perl.com? Perl Mongers? pm.org? perl.org? cpan.org?	R	What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?										
CPAN FirstTime package	R	CPAN::FirstTime (module)										
mprotect for   failed with 	R	mprotect for %p %u failed with %d										
NEXT	R	NEXT (module)										
Digest MD5	R	Digest::MD5 (module)										
do subroutine	R	do (function)										
Use of inherited AUTOLOAD for non-method () is deprecated	R	Use of inherited AUTOLOAD for non-method %s() is deprecated										
dbmclose function	R	dbmclose (function)										
Can't find  on PATH, '.' not in PATH	R	Can't find %s on PATH, '.' not in PATH										
term definition	R	term (definition)										
switch cluster definition	R	switch cluster (definition)										
delete subroutine	R	delete (function)										
eq method	R	eq (function)										
define instance variable	R	instance variable (definition)										
output my numbers with commas added	R	How can I output my numbers with commas added?										
scalar literal	R	scalar literal (definition)										
define operating system	R	operating system (definition)										
readlink function	R	readlink (function)										
length method	R	length (function)										
File::Basename	R	File::Basename (module)										
adopt or take over a module already on CPAN	R	How do I adopt or take over a module already on CPAN?										
warning definition	R	warning (definition)										
IO Socket INET module	R	IO::Socket::INET (module)										
Env library	R	Env (module)										
IPC::Semaphore library	R	IPC::Semaphore (module)										
Pod Simple HTMLBatch package	R	Pod::Simple::HTMLBatch (module)										
fetch an HTML file	R	How do I fetch an HTML file?										
gethostbyname func	R	gethostbyname (function)										
current package	R	current package (definition)										
recv func	R	recv (function)										
IO Compress RawDeflate	R	IO::Compress::RawDeflate (module)										
scalar literal definition	R	scalar literal (definition)										
File DosGlob	R	File::DosGlob (module)										
IO::Pipe library	R	IO::Pipe (module)										
MIME::QuotedPrint library	R	MIME::QuotedPrint (module)										
qr function	R	qr (function)										
rmdir function	R	rmdir (function)										
utime subroutine	R	utime (function)										
virtual definition	R	virtual (definition)										
getpriority method	R	getpriority (function)										
ExtUtils::testlib library	R	ExtUtils::testlib (module)										
Unquoted string "" may clash with future reserved word	R	Unquoted string "%s" may clash with future reserved word										
CPAN::Distroprefs library	R	CPAN::Distroprefs (module)										
timeout a slow event?	R	How do I timeout a slow event?										
Encode::JP package	R	Encode::JP (module)										
msgctl subroutine	R	msgctl (function)										
Text::Abbrev package	R	Text::Abbrev (module)										
msgget method	R	msgget (function)										
Binary >> operator	R	Binary ">>" operator										
define v-string	R	v-string (definition)										
%LAST_MATCH_START	R	%- (variable)										
Locale::Maketext::GutsLoader module	R	Locale::Maketext::GutsLoader (module)										
compiler definition	R	compiler (definition)										
Pod Perldoc ToText library	R	Pod::Perldoc::ToText (module)										
convert between numeric representationsbasesradixes	R	How do I convert between numeric representations/bases/radixes?										
Test Builder Module package	R	Test::Builder::Module (module)										
$EUID	R	$> (variable)										
panic: ck_grep, type=	R	panic: ck_grep, type=%u										
Text ParseWords	R	Text::ParseWords (module)										
stat	R	stat (function)										
Digest::MD5 package	R	Digest::MD5 (module)										
Undefined format "" called	R	Undefined format "%s" called										
sin method	R	sin (function)										
Regexp modifiers "" and "" are mutually exclusive in regex; marked by <-- HERE in m//	R	Regexp modifiers "%c" and "%c" are mutually exclusive in regex; marked by <-- HERE in m/%s/										
Pod::Man package	R	Pod::Man (module)										
PerlIO via module	R	PerlIO::via (module)										
RTFM	R	RTFM (definition)										
What is variable suicide and how can I prevent it	R	What is variable suicide and how can I prevent it?										
TAP::Parser::Result::Pragma library	R	TAP::Parser::Result::Pragma (module)										
Encode Symbol	R	Encode::Symbol (module)										
CPAN::FirstTime package	R	CPAN::FirstTime (module)										
sqrt function	R	sqrt (function)										
setpriority function	R	setpriority (function)										
Where can I post questions	R	Where can I post questions?										
Net::servent library	R	Net::servent (module)										
Term::ANSIColor library	R	Term::ANSIColor (module)										
ord	R	ord (function)										
Encode::GSM0338	R	Encode::GSM0338 (module)										
sethostent subroutine	R	sethostent (function)										
define platform	R	platform (definition)										
warn method	R	warn (function)										
TAP Parser Iterator module	R	TAP::Parser::Iterator (module)										
chop function	R	chop (function)										
How do I redirect to another page	R	How do I redirect to another page?										
indirection	R	indirection (definition)										
Unexpected ')' in regex; marked by <-- HERE in m//	R	Unexpected ')' in regex; marked by <-- HERE in m/%s/										
catch accesses to undefined variables, functions, or methods?	R	How can I catch accesses to undefined variables, functions, or methods?										
pod a null (zero-effect) formatting code	R	Z<>										
msgrcv sub	R	msgrcv (function)										
define lexical scoping	R	lexical scoping (definition)										
?: operator	R	Ternary "?:" operator										
Can't use '' after -mname	R	Can't use '%c' after -mname										
define handler	R	handler (definition)										
shmread routine	R	shmread (function)										
pop routine	R	pop (function)										
PerlIO::via::QuotedPrint	R	PerlIO::via::QuotedPrint (module)										
eclectic definition	R	eclectic (definition)										
B::Showlex library	R	B::Showlex (module)										
operator overloading	R	operator overloading (definition)										
Binary *	R	Binary "*" operator										
ExtUtils::MakeMaker::Config module	R	ExtUtils::MakeMaker::Config (module)										
$FORMAT_LINE_BREAK_CHARACTERS	R	$: (variable)										
$PERL_VERSION	R	$^V (variable)										
accept() on closed socket 	R	accept() on closed socket %s										
TAP::Parser::Iterator::Process library	R	TAP::Parser::Iterator::Process (module)										
S formatting code	R	S<text>										
traverse a directory tree	R	How do I traverse a directory tree?										
TAP Parser Result Bailout module	R	TAP::Parser::Result::Bailout (module)										
$BASETIME	R	$^T (variable)										
given func	R	given (function)										
associativity	R	associativity (definition)										
ExtUtils Liblist module	R	ExtUtils::Liblist (module)										
MakeMaker?	R	What's MakeMaker?										
ord method	R	ord (function)										
goto	R	goto (function)										
Tie::File library	R	Tie::File (module)										
make a system() exit on control-C?	R	How do I make a system() exit on control-C?										
File GlobMapper	R	File::GlobMapper (module)										
keys routine	R	keys (function)										
capture STDERR from an external command?	R	How can I capture STDERR from an external command?										
split sub	R	split (function)										
ExtUtils Miniperl	R	ExtUtils::Miniperl (module)										
Text ParseWords module	R	Text::ParseWords (module)										
define character class	R	character class (definition)										
pos function	R	pos (function)										
IO::Socket::INET library	R	IO::Socket::INET (module)										
Property '' is unknown in regex; marked by <-- HERE in m//	R	Property '%s' is unknown in regex; marked by <-- HERE in m/%s/										
pod =encoding command	R	=encoding										
Digest MD5 package	R	Digest::MD5 (module)										
find the user's mail address?	R	How do I find the user's mail address?										
study	R	study (function)										
define magic	R	magic (definition)										
IO Uncompress Base library	R	IO::Uncompress::Base (module)										
IO::Handle->output_field_separator( EXPR ) (variable)	R	$, (variable)										
Filter::Simple package	R	Filter::Simple (module)										
XSLoader package	R	XSLoader (module)										
Encode::JP::JIS7 module	R	Encode::JP::JIS7 (module)										
undef sub	R	undef (function)										
chr routine	R	chr (function)										
-X flag	R	-X										
=cut pod command	R	=cut										
ExtUtils::MM_DOS	R	ExtUtils::MM_DOS (module)										
File::DosGlob module	R	File::DosGlob (module)										
network address	R	network address (definition)										
pipeline definition	R	pipeline (definition)										
chr	R	chr (function)										
bucket	R	bucket (definition)										
ExtUtils::MM_QNX package	R	ExtUtils::MM_QNX (module)										
syscall method	R	syscall (function)										
keep my own modulelibrary directory	R	How do I keep my own module/library directory?										
compute the difference of two arrays How do I compute the intersection of two arrays	R	How do I compute the difference of two arrays? How do I compute the intersection of two arrays?										
typeglob definition	R	typeglob (definition)										
currently selected output channel	R	currently selected output channel (definition)										
CPAN::Debug package	R	CPAN::Debug (module)										
ExtUtils MM_VOS module	R	ExtUtils::MM_VOS (module)										
CODE definition	R	CODE (definition)										
utime method	R	utime (function)										
label definition	R	label (definition)										
pod used for filenames	R	F<filename>										
shutdown() on closed socket 	R	shutdown() on closed socket %s										
Net::NNTP	R	Net::NNTP (module)										
Module::Load	R	Module::Load (module)										
Math::Trig package	R	Math::Trig (module)										
transliterate	R	transliterate (definition)										
merge two hashes	R	How do I merge two hashes?										
MakeMaker	R	What's MakeMaker?										
Exporter module	R	Exporter (module)										
Config package	R	Config (module)										
close a processs filehandle without waiting for it to complete	R	How do I close a process's filehandle without waiting for it to complete?										
umask method	R	umask (function)										
getprotoent func	R	getprotoent (function)										
TAP Parser Result Bailout	R	TAP::Parser::Result::Bailout (module)										
goto sub	R	goto (function)										
Scalar::Util package	R	Scalar::Util (module)										
TAP::Parser::Result	R	TAP::Parser::Result (module)										
ExtUtils::MM_OS2 library	R	ExtUtils::MM_OS2 (module)										
protocol definition	R	protocol (definition)										
evalbytes sub	R	evalbytes (function)										
Pod::Perldoc::ToRtf	R	Pod::Perldoc::ToRtf (module)										
UNITCHECK sub	R	UNITCHECK (function)										
Pod::Simple::Debug module	R	Pod::Simple::Debug (module)										
define SV	R	SV (definition)										
time function	R	time (function)										
File::Compare module	R	File::Compare (module)										
log	R	log (function)										
my func	R	my (function)										
readline method	R	readline (function)										
untie method	R	untie (function)										
Pod::Simple::PullParserToken	R	Pod::Simple::PullParserToken (module)										
Pod::PlainText	R	Pod::PlainText (module)										
Locale Maketext Guts	R	Locale::Maketext::Guts (module)										
Net::netent module	R	Net::netent (module)										
%ERRNO	R	%! (variable)										
How can I check if a key exists in a multilevel hash	R	How can I check if a key exists in a multilevel hash?										
B::Debug library	R	B::Debug (module)										
substring definition	R	substring (definition)										
Getopt::Std library	R	Getopt::Std (module)										
TAP Formatter Color library	R	TAP::Formatter::Color (module)										
open sub	R	open (function)										
rewinddir routine	R	rewinddir (function)										
Unary - operator	R	Unary "-" operator										
DirHandle library	R	DirHandle (module)										
Tie Hash NamedCapture module	R	Tie::Hash::NamedCapture (module)										
define autoload	R	autoload (definition)										
alarm func	R	alarm (function)										
not routine	R	not (function)										
define label	R	label (definition)										
Math::Trig	R	Math::Trig (module)										
$EXCEPTIONS_BEING_CAUGHT	R	$^S (variable)										
lowercase	R	lowercase (definition)										
File::Fetch module	R	File::Fetch (module)										
DBM_Filter module	R	DBM_Filter (module)										
pack routine	R	pack (function)										
socketpair routine	R	socketpair (function)										
define interface	R	interface (definition)										
time subroutine	R	time (function)										
What is perlcom Perl Mongers pmorg perlorg cpanorg	R	What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?										
What if I dont decode	R	What if I don't decode?										
How do I parse a mail header	R	How do I parse a mail header?										
lc function	R	lc (function)										
DESTROY created new reference to dead object ''	R	DESTROY created new reference to dead object '%s'										
define dispatch	R	dispatch (definition)										
define fileglob	R	fileglob (definition)										
Net::Time module	R	Net::Time (module)										
sin sub	R	sin (function)										
decode a MIMEBASE64 string	R	How do I decode a MIME/BASE64 string?										
define parse tree	R	parse tree (definition)										
Tie::RefHash module	R	Tie::RefHash (module)										
seekdir sub	R	seekdir (function)										
shmread	R	shmread (function)										
device definition	R	device (definition)										
flag	R	flag (definition)										
DBM_Filter::int32	R	DBM_Filter::int32 (module)										
Pod::Simple::PullParser package	R	Pod::Simple::PullParser (module)										
setnetent func	R	setnetent (function)										
END	R	END (function)										
ExtUtils::ParseXS module	R	ExtUtils::ParseXS (module)										
lock a file	R	How can I lock a file?										
study routine	R	study (function)										
%-	R	%- (variable)										
eval method	R	eval (function)										
File Spec Unix package	R	File::Spec::Unix (module)										
getgrgid function	R	getgrgid (function)										
listen routine	R	listen (function)										
int method	R	int (function)										
IPC::SharedMem module	R	IPC::SharedMem (module)										
Ternary ?:	R	Ternary "?:" operator										
endhostent sub	R	endhostent (function)										
Encode::JP	R	Encode::JP (module)										
Time::localtime module	R	Time::localtime (module)										
define term	R	term (definition)										
current working directory (definition)	R	working directory										
Exporter library	R	Exporter (module)										
ExtUtils::Constant::Base module	R	ExtUtils::Constant::Base (module)										
PerlIO package	R	PerlIO (module)										
Getopt::Long library	R	Getopt::Long (module)										
connect() on closed socket 	R	connect() on closed socket %s										
call by value definition	R	call by value (definition)										
make a temporary file name?	R	How do I make a temporary file name?										
Locale '' may not work well.	R	Locale '%s' may not work well.%s										
TAP::Parser::Scheduler library	R	TAP::Parser::Scheduler (module)										
Where can I learn about CGI or Web programming in Perl	R	Where can I learn about CGI or Web programming in Perl?										
mkdir sub	R	mkdir (function)										
Encode::EBCDIC library	R	Encode::EBCDIC (module)										
IPC Msg	R	IPC::Msg (module)										
Attribute Handlers library	R	Attribute::Handlers (module)										
File::Spec::Unix module	R	File::Spec::Unix (module)										
How do I find the day or week of the year	R	How do I find the day or week of the year?										
setgrent func	R	setgrent (function)										
eval sub	R	eval (function)										
command buffering definition	R	command buffering (definition)										
subroutine definition	R	subroutine (definition)										
dbmclose sub	R	dbmclose (function)										
The  function is unimplemented	R	The %s function is unimplemented										
procedure definition	R	procedure (definition)										
ucfirst subroutine	R	ucfirst (function)										
IPC::SharedMem package	R	IPC::SharedMem (module)										
endgrent	R	endgrent (function)										
y sub	R	y (function)										
EOF definition	R	EOF (definition)										
Encode::Config library	R	Encode::Config (module)										
setservent	R	setservent (function)										
pack subroutine	R	pack (function)										
Memoize SDBM_File package	R	Memoize::SDBM_File (module)										
syntax error in file  at line , next 2 tokens ""	R	syntax error in file %s at line %d, next 2 tokens "%s"										
-E flag	R	-E commandline										
TAP::Harness package	R	TAP::Harness (module)										
remove HTML from a string?	R	How do I remove HTML from a string?										
exec method	R	exec (function)										
Time Piece library	R	Time::Piece (module)										
CPAN::Tarzip module	R	CPAN::Tarzip (module)										
-X func	R	-X (function)										
UID definition	R	UID (definition)										
Pod Perldoc ToMan	R	Pod::Perldoc::ToMan (module)										
Pod::Functions	R	Pod::Functions (module)										
bit string definition	R	bit string (definition)										
send sub	R	send (function)										
define EOF	R	EOF (definition)										
preprocessing definition	R	preprocessing (definition)										
__DATA__ method	R	__DATA__ (function)										
define scalar context	R	scalar context (definition)										
atan2 subroutine	R	atan2 (function)										
Term ReadLine package	R	Term::ReadLine (module)										
TAP Parser Result package	R	TAP::Parser::Result (module)										
Pod::Simple::Debug package	R	Pod::Simple::Debug (module)										
and operator	R	Binary "and" operator										
undef method	R	undef (function)										
ge func	R	ge (function)										
TAP::Parser::Result::Test	R	TAP::Parser::Result::Test (module)										
ExtUtils MakeMaker FAQ	R	ExtUtils::MakeMaker::FAQ (module)										
whitespace definition	R	whitespace (definition)										
-V: switch	R	-V: configvar										
IO::File package	R	IO::File (module)										
pod =cut	R	=cut										
define scalar variable	R	scalar variable (definition)										
command-line arguments	R	command-line arguments (definition)										
How do I remove consecutive pairs of characters	R	How do I remove consecutive pairs of characters?										
Net::netent package	R	Net::netent (module)										
chomp	R	chomp (function)										
__FILE__ sub	R	__FILE__ (function)										
read in a file by paragraphs	R	How can I read in a file by paragraphs?										
until method	R	until (function)										
capitalize all the words on one line	R	How do I capitalize all the words on one line?										
setpwent func	R	setpwent (function)										
fatal error	R	fatal error (definition)										
my	R	my (function)										
data type	R	data type (definition)										
getservbyname function	R	getservbyname (function)										
Unary not	R	Unary "not" operator										
yacc definition	R	yacc (definition)										
open subroutine	R	open (function)										
if method	R	if (function)										
grep method	R	grep (function)										
Regexp modifier "/%c" may not appear twice	R	Regexp modifier "%c" may not appear twice in regex; marked by <-- HERE in m/%s/										
File::Spec::OS2 package	R	File::Spec::OS2 (module)										
callback	R	callback (definition)										
Compress::Zlib module	R	Compress::Zlib (module)										
Locale::Script library	R	Locale::Script (module)										
ExtUtils MM_Cygwin library	R	ExtUtils::MM_Cygwin (module)										
How do I multiply matrices	R	How do I multiply matrices?										
redo sub	R	redo (function)										
Net Ping library	R	Net::Ping (module)										
reliably rename a file?	R	How can I reliably rename a file?										
Opcode module	R	Opcode (module)										
shmget	R	shmget (function)										
Math BigInt FastCalc module	R	Math::BigInt::FastCalc (module)										
$)	R	$) (variable)										
CHECK	R	CHECK (function)										
sleep sub	R	sleep (function)										
read and write the serial port?	R	How do I read and write the serial port?										
operator	R	operator (definition)										
How can I convert my shell script to perl	R	How can I convert my shell script to perl?										
Encode::Guess package	R	Encode::Guess (module)										
do fancy stuff with the keyboardscreenmouse	R	How do I do fancy stuff with the keyboard/screen/mouse?										
study subroutine	R	study (function)										
Pod::Simple::HTML package	R	Pod::Simple::HTML (module)										
$MATCH	R	$& (variable)										
command name	R	command name (definition)										
$OS_ERROR (variable)	R	$! (variable)										
sort a hash (optionally by value instead of key)?	R	How do I sort a hash (optionally by value instead of key)?										
$:	R	$: (variable)										
Net Config module	R	Net::Config (module)										
Pod::Perldoc::ToMan package	R	Pod::Perldoc::ToMan (module)										
compile my Perl program into byte code or C	R	How can I compile my Perl program into byte code or C?										
Malformed UTF-8 character ()	R	Malformed UTF-8 character (%s)										
discipline	R	discipline (definition)										
make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?	R	How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?										
syntax	R	syntax (definition)										
DBM_Filter::null package	R	DBM_Filter::null (module)										
IO Handle	R	IO::Handle (module)										
glob failed ()	R	glob failed (%s)										
capturing	R	capturing (definition)										
$$	R	$$ (variable)										
Sequence (?R) not terminated in regex m//	R	Sequence (?R) not terminated in regex m/%s/										
List Util package	R	List::Util (module)										
TAP::Parser::Iterator::Process	R	TAP::Parser::Iterator::Process (module)										
ExtUtils::MM_Cygwin package	R	ExtUtils::MM_Cygwin (module)										
panic: yylex, 	R	panic: yylex, %s										
TAP Parser Result Comment	R	TAP::Parser::Result::Comment (module)										
PerlIO module	R	PerlIO (module)										
getpriority func	R	getpriority (function)										
Regexp modifier "/" may appear a maximum of twice	R	Regexp modifier "%c" may appear a maximum of twice in regex; marked by <-- HERE in m/%s/										
endprotoent sub	R	endprotoent (function)										
buffer definition	R	buffer (definition)										
Pod::Functions package	R	Pod::Functions (module)										
MIME QuotedPrint	R	MIME::QuotedPrint (module)										
msgctl routine	R	msgctl (function)										
Pod::Escapes library	R	Pod::Escapes (module)										
clear the screen	R	How do I clear the screen?										
Encode Encoder module	R	Encode::Encoder (module)										
B::Debug module	R	B::Debug (module)										
formline method	R	formline (function)										
<=>	R	Binary "<=>" operator										
define prefix	R	prefix (definition)										
define false	R	false (definition)										
getservbyport method	R	getservbyport (function)										
Math::Trig library	R	Math::Trig (module)										
File::Basename library	R	File::Basename (module)										
ExtUtils::MM module	R	ExtUtils::MM (module)										
TAP::Parser::Scheduler::Spinner library	R	TAP::Parser::Scheduler::Spinner (module)										
Net FTP dataconn package	R	Net::FTP::dataconn (module)										
Reference to invalid group 0 in regex; marked by <-- HERE in m//	R	Reference to invalid group 0 in regex; marked by <-- HERE in m/%s/										
line number definition	R	line number (definition)										
ExtUtils::MM_VOS	R	ExtUtils::MM_VOS (module)										
Compress Raw Zlib module	R	Compress::Raw::Zlib (module)										
STDIN (definition)	R	standard input										
TAP Parser YAMLish Reader library	R	TAP::Parser::YAMLish::Reader (module)										
IO::Uncompress::Unzip	R	IO::Uncompress::Unzip (module)										
AnyDBM_File package	R	AnyDBM_File (module)										
getsockopt method	R	getsockopt (function)										
reset subroutine	R	reset (function)										
gethostbyaddr function	R	gethostbyaddr (function)										
Digest base	R	Digest::base (module)										
 General Perl Language Issues	R	: General Perl Language Issues										
Term Complete	R	Term::Complete (module)										
Unsupported script encoding 	R	Unsupported script encoding %s										
Binary <	R	Binary "<" operator										
What character encodings does Perl support	R	What character encodings does Perl support?										
close function	R	close (function)										
Where do I get the include files to do ioctl or syscall	R	Where do I get the include files to do ioctl() or syscall()?										
Can't stat script ""	R	Can't stat script "%s"										
DESTROY routine	R	DESTROY (function)										
IPC::SharedMem	R	IPC::SharedMem (module)										
construct	R	construct (definition)										
parent class definition	R	parent class (definition)										
next routine	R	next (function)										
endhostent func	R	endhostent (function)										
distribution definition	R	distribution (definition)										
telldir	R	telldir (function)										
i modifier	R	/i regular expression modifier										
Internal disaster in regex; marked by <-- HERE in m//	R	Internal disaster in regex; marked by <-- HERE in m/%s/										
cmp function	R	cmp (function)										
crypt sub	R	crypt (function)										
setprotoent subroutine	R	setprotoent (function)										
SV definition	R	SV (definition)										
times function	R	times (function)										
opendir func	R	opendir (function)										
TAP::Parser::YAMLish::Writer package	R	TAP::Parser::YAMLish::Writer (module)										
msgctl sub	R	msgctl (function)										
Pod Perldoc ToText module	R	Pod::Perldoc::ToText (module)										
'' allowed only after types  in 	R	'%c' allowed only after types %s in %s										
Pod::Simple::XMLOutStream package	R	Pod::Simple::XMLOutStream (module)										
pathname definition	R	pathname (definition)										
Can't locate object method "" via package "" (perhaps you forgot to load ""?)	R	Can't locate object method "%s" via package "%s" (perhaps you forgot to load "%s"?)										
$INPLACE_EDIT	R	$^I (variable)										
die method	R	die (function)										
DBM_Filter::null module	R	DBM_Filter::null (module)										
ExtUtils::Command::MM module	R	ExtUtils::Command::MM (module)										
lstat() on filehandle	R	lstat() on filehandle%s										
Pod Perldoc GetOptsOO module	R	Pod::Perldoc::GetOptsOO (module)										
compilation unit	R	compilation unit (definition)										
standard output definition	R	standard output (definition)										
ord function	R	ord (function)										
until subroutine	R	until (function)										
Digest base library	R	Digest::base (module)										
TAP Parser Scheduler Spinner module	R	TAP::Parser::Scheduler::Spinner (module)										
escape sequence	R	escape sequence (definition)										
Tie Scalar package	R	Tie::Scalar (module)										
Math::BigInt	R	Math::BigInt (module)										
Pod Simple Checker package	R	Pod::Simple::Checker (module)										
Test Builder Module	R	Test::Builder::Module (module)										
Time::tm library	R	Time::tm (module)										
exec sub	R	exec (function)										
Pod Html	R	Pod::Html (module)										
TAP::Formatter::File module	R	TAP::Formatter::File (module)										
TAP Parser Result YAML library	R	TAP::Parser::Result::YAML (module)										
binmode method	R	binmode (function)										
role	R	role (definition)										
ExtUtils MM_MacOS package	R	ExtUtils::MM_MacOS (module)										
wait function	R	wait (function)										
a, d, l and u modifier	R	/a, d, l and u regular expression modifier										
pod definition	R	pod (definition)										
xor method	R	xor (function)										
Pod Simple PullParserStartToken module	R	Pod::Simple::PullParserStartToken (module)										
CPAN::Nox library	R	CPAN::Nox (module)										
define NaN	R	NaN (definition)										
: Command not found	R	%s: Command not found										
Encode::Symbol library	R	Encode::Symbol (module)										
execute	R	execute (definition)										
greedy	R	greedy (definition)										
: Undefined variable	R	%s: Undefined variable										
getnetbyname sub	R	getnetbyname (function)										
Can I do task in Perl	R	Can I do [task] in Perl?										
Tie::Memoize	R	Tie::Memoize (module)										
extension definition	R	extension (definition)										
define compilation unit	R	compilation unit (definition)										
Test Builder	R	Test::Builder (module)										
setpriority method	R	setpriority (function)										
close a file descriptor by number	R	How do I close a file descriptor by number?										
IO Compress Deflate library	R	IO::Compress::Deflate (module)										
IPC::Cmd	R	IPC::Cmd (module)										
__DATA__ routine	R	__DATA__ (function)										
Pod Perldoc ToRtf package	R	Pod::Perldoc::ToRtf (module)										
truncate method	R	truncate (function)										
Attribute Handlers	R	Attribute::Handlers (module)										
define device	R	device (definition)										
ExtUtils MakeMaker	R	ExtUtils::MakeMaker (module)										
What is Perl	R	What is Perl?										
Pod Simple PullParser module	R	Pod::Simple::PullParser (module)										
How can I translate tildes ~ in a filename	R	How can I translate tildes (~) in a filename?										
Locale::Maketext::Simple library	R	Locale::Maketext::Simple (module)										
ExtUtils::MM_BeOS module	R	ExtUtils::MM_BeOS (module)										
TAP Formatter File Session	R	TAP::Formatter::File::Session (module)										
close	R	close (function)										
Digest	R	Digest (module)										
one-liner	R	one-liner (definition)										
(Did you mean & instead?)	R	(Did you mean &%s instead?)										
TAP Parser Result Test module	R	TAP::Parser::Result::Test (module)										
ne operator	R	Binary "ne" operator										
sysread sub	R	sysread (function)										
Pod::Usage module	R	Pod::Usage (module)										
getprotoent subroutine	R	getprotoent (function)										
endgrent function	R	endgrent (function)										
compile time definition	R	compile time (definition)										
IO Handle package	R	IO::Handle (module)										
test whether two arrays or hashes are equal?	R	How do I test whether two arrays or hashes are equal?										
Pod::Perldoc library	R	Pod::Perldoc (module)										
How do I expand tabs in a string	R	How do I expand tabs in a string?										
block	R	block (definition)										
crypt func	R	crypt (function)										
Encode KR 2022_KR module	R	Encode::KR::2022_KR (module)										
Cwd	R	Cwd (module)										
Locale Script module	R	Locale::Script (module)										
mortal definition	R	mortal (definition)										
$a (variable)	R	$b (variable)										
state function	R	state (function)										
Encode Byte	R	Encode::Byte (module)										
IPC::Open3	R	IPC::Open3 (module)										
Net::Ping library	R	Net::Ping (module)										
m function	R	m (function)										
Memoize::Expire package	R	Memoize::Expire (module)										
File::Spec::VMS library	R	File::Spec::VMS (module)										
define indexing	R	indexing (definition)										
gt function	R	gt (function)										
entering effective  failed	R	entering effective %s failed										
getsockopt() on closed socket 	R	getsockopt() on closed socket %s										
Tie SubstrHash	R	Tie::SubstrHash (module)										
How do I declarecreate a structure	R	How do I declare/create a structure?										
wide character	R	What is a "wide character"?										
Can't do inplace edit:  would not be unique	R	Can't do inplace edit: %s would not be unique										
define export	R	export (definition)										
ExtUtils::Constant::Utils library	R	ExtUtils::Constant::Utils (module)										
ExtUtils MM_VOS library	R	ExtUtils::MM_VOS (module)										
Perl API version  of  does not match 	R	Perl API version %s of %s does not match %s										
array	R	array (definition)										
-d: switch	R	-dt: MOD[=bar,baz]										
IPC Msg library	R	IPC::Msg (module)										
TAP Parser Result Bailout library	R	TAP::Parser::Result::Bailout (module)										
sysread() on unopened filehandle 	R	sysread() on unopened filehandle %s										
Unknown PerlIO layer ""	R	Unknown PerlIO layer "%s"										
Pod Simple PullParserEndToken	R	Pod::Simple::PullParserEndToken (module)										
readlink func	R	readlink (function)										
Pod::Simple::SimpleTree	R	Pod::Simple::SimpleTree (module)										
tie sub	R	tie (function)										
exit status	R	exit status (definition)										
define virtual	R	virtual (definition)										
Tie::Handle library	R	Tie::Handle (module)										
define signal handler	R	signal handler (definition)										
read and write the serial port	R	How do I read and write the serial port?										
Scalar::Util module	R	Scalar::Util (module)										
wrong with using grep in a void context	R	What's wrong with using grep in a void context?										
oct function	R	oct (function)										
nybble	R	nybble (definition)										
$LIST_SEPARATOR	R	$" (variable)										
Method for operation  not found in package  during blessing	R	Method for operation %s not found in package %s during blessing										
Locale Script package	R	Locale::Script (module)										
getpwnam subroutine	R	getpwnam (function)										
Tie::Hash::NamedCapture library	R	Tie::Hash::NamedCapture (module)										
CPAN Debug module	R	CPAN::Debug (module)										
$PREMATCH (variable)	R	$` (variable)										
IO Pipe library	R	IO::Pipe (module)										
backreference definition	R	backreference (definition)										
This Perl can't reset CRTL environ elements (%s)	R	This Perl can't set CRTL environ elements (%s=%s)										
ExtUtils MM_MacOS module	R	ExtUtils::MM_MacOS (module)										
die sub	R	die (function)										
qw	R	qw (function)										
ref routine	R	ref (function)										
s modifier	R	/s regular expression modifier										
not method	R	not (function)										
create a module?	R	How do I create a module?										
concatenation	R	concatenation (definition)										
use a regular expression to strip C-style comments from a file?	R	How do I use a regular expression to strip C-style comments from a file?										
>= operator	R	Binary ">=" operator										
define leftmost longest	R	leftmost longest (definition)										
ExtUtils MakeMaker module	R	ExtUtils::MakeMaker (module)										
__END__ routine	R	__END__ (function)										
escape sequence (definition)	R	metasymbol										
Memoize Storable module	R	Memoize::Storable (module)										
Params::Check	R	Params::Check (module)										
quotemeta func	R	quotemeta (function)										
truncate func	R	truncate (function)										
send subroutine	R	send (function)										
int subroutine	R	int (function)										
regex (definition)	R	regular expression										
How do I traverse a directory tree	R	How do I traverse a directory tree?										
getgrent subroutine	R	getgrent (function)										
Pod::Simple::HTMLBatch package	R	Pod::Simple::HTMLBatch (module)										
panic: scan_num, 	R	panic: scan_num, %s										
feeping creaturism	R	feeping creaturism (definition)										
IV definition	R	IV (definition)										
CPAN::Queue module	R	CPAN::Queue (module)										
use a variable as a variable name	R	How can I use a variable as a variable name?										
Unix definition	R	Unix (definition)										
difference between dynamic and lexical static scoping Between local and my	R	What's the difference between dynamic and lexical (static) scoping? Between local() and my()?										
|| operator	R	Binary "||" operator										
cracker	R	cracker (definition)										
Tie::File	R	Tie::File (module)										
Locale Country package	R	Locale::Country (module)										
read method	R	read (function)										
Warning: Use of "" without parentheses is ambiguous	R	Warning: Use of "%s" without parentheses is ambiguous										
increment definition	R	increment (definition)										
filename	R	filename (definition)										
warning	R	warning (definition)										
seekdir	R	seekdir (function)										
Pod::Simple::HTMLBatch	R	Pod::Simple::HTMLBatch (module)										
Which version of perl should I use	R	Which version of perl should I use?										
ge sub	R	ge (function)										
eval function	R	eval (function)										
lexeme definition	R	lexeme (definition)										
Net NNTP package	R	Net::NNTP (module)										
$=	R	$= (variable)										
Encode MIME Header package	R	Encode::MIME::Header (module)										
grep function	R	grep (function)										
Compress::Raw::Zlib	R	Compress::Raw::Zlib (module)										
setsockopt	R	setsockopt (function)										
TAP Parser package	R	TAP::Parser (module)										
else function	R	else (function)										
Test Builder Tester Color module	R	Test::Builder::Tester::Color (module)										
Name "::" used only once: possible typo	R	Name "%s::%s" used only once: possible typo										
rindex subroutine	R	rindex (function)										
Pod::Parser library	R	Pod::Parser (module)										
Params::Check module	R	Params::Check (module)										
Digest MD5 library	R	Digest::MD5 (module)										
overload arg '' is invalid	R	overload arg '%s' is invalid										
TAP Formatter Console package	R	TAP::Formatter::Console (module)										
Hash::Util	R	Hash::Util (module)										
and func	R	and (function)										
How can I use a filehandle indirectly	R	How can I use a filehandle indirectly?										
lc	R	lc (function)										
Unicode::Collate module	R	Unicode::Collate (module)										
$EFFECTIVE_USER_ID	R	$> (variable)										
freeware definition	R	freeware (definition)										
How do I tell the difference between errors from the shell and perl	R	How do I tell the difference between errors from the shell and perl?										
Pod::ParseUtils library	R	Pod::ParseUtils (module)										
lock a file?	R	How can I lock a file?										
define magical increment	R	magical increment (definition)										
$OUTPUT_AUTOFLUSH (variable)	R	$| (variable)										
else method	R	else (function)										
.. operator	R	Binary ".." operator										
(Do you need to predeclare ?)	R	(Do you need to predeclare %s?)										
IO Compress Base	R	IO::Compress::Base (module)										
for (function)	R	For Loops										
-M	R	-[mM] [ - ] module=arg[,arg]...										
rindex function	R	rindex (function)										
typedef definition	R	typedef (definition)										
IO Compress RawDeflate library	R	IO::Compress::RawDeflate (module)										
TAP::Parser::Iterator library	R	TAP::Parser::Iterator (module)										
PATH	R	PATH (definition)										
index method	R	index (function)										
output Roman numerals	R	How can I output Roman numerals?										
socket function	R	socket (function)										
How do I fetch an HTML file	R	How do I fetch an HTML file?										
ExtUtils MY	R	ExtUtils::MY (module)										
Memoize AnyDBM_File package	R	Memoize::AnyDBM_File (module)										
merge two hashes?	R	How do I merge two hashes?										
pointer definition	R	pointer (definition)										
-D switch	R	-D number										
read email?	R	How do I read email?										
Binary ~~ operator	R	Binary "~~" operator										
shmctl	R	shmctl (function)										
IO Zlib package	R	IO::Zlib (module)										
TAP Formatter Console ParallelSession	R	TAP::Formatter::Console::ParallelSession (module)										
Memoize Storable library	R	Memoize::Storable (module)										
host definition	R	host (definition)										
User pwent module	R	User::pwent (module)										
CPAN HandleConfig	R	CPAN::HandleConfig (module)										
Memoize::ExpireFile module	R	Memoize::ExpireFile (module)										
File::Spec module	R	File::Spec (module)										
hex method	R	hex (function)										
Can't use "my " in sort comparison	R	Can't use "my %s" in sort comparison										
Thread Queue	R	Thread::Queue (module)										
ExtUtils::MM_OS2 package	R	ExtUtils::MM_OS2 (module)										
How do I fetchput an SFTP file	R	How do I fetch/put an (S)FTP file?										
HANDLE->input_line_number( EXPR ) (variable)	R	$. (variable)										
Pod Simple DumpAsXML	R	Pod::Simple::DumpAsXML (module)										
I18N Collate module	R	I18N::Collate (module)										
Binary ..	R	Binary ".." operator										
Pod Perldoc ToRtf	R	Pod::Perldoc::ToRtf (module)										
Devel Peek library	R	Devel::Peek (module)										
waitpid method	R	waitpid (function)										
descriptor definition	R	descriptor (definition)										
ioctl method	R	ioctl (function)										
instance data definition	R	instance data (definition)										
TAP Formatter File Session module	R	TAP::Formatter::File::Session (module)										
Net FTP library	R	Net::FTP (module)										
autosplit definition	R	autosplit (definition)										
TAP::Parser::Result::Unknown package	R	TAP::Parser::Result::Unknown (module)										
Pod::Perldoc::ToNroff	R	Pod::Perldoc::ToNroff (module)										
address operator	R	address operator (definition)										
How can I lock a file	R	How can I lock a file?										
Tie::StdHandle package	R	Tie::StdHandle (module)										
CHECK function	R	CHECK (function)										
define compile	R	compile (definition)										
Tie Hash NamedCapture	R	Tie::Hash::NamedCapture (module)										
Encode::MIME::Name library	R	Encode::MIME::Name (module)										
..	R	Binary ".." operator										
Time::HiRes	R	Time::HiRes (module)										
Time::HiRes module	R	Time::HiRes (module)										
wait method	R	wait (function)										
Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m//	R	Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m/%s/										
IO Uncompress Base module	R	IO::Uncompress::Base (module)										
pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?	R	How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?										
endhostent routine	R	endhostent (function)										
define sed	R	sed (definition)										
Error converting file specification 	R	Error converting file specification %s										
Sequence (? incomplete in regex; marked by <-- HERE in m//	R	Sequence (? incomplete in regex; marked by <-- HERE in m/%s/										
CPAN HandleConfig module	R	CPAN::HandleConfig (module)										
$FORMAT_NAME	R	$~ (variable)										
Getopt::Long package	R	Getopt::Long (module)										
STDERR (definition)	R	standard error										
define stack	R	stack (definition)										
define global	R	global (definition)										
$EVAL_ERROR (variable)	R	$@ (variable)										
define default	R	default (definition)										
Encode Alias module	R	Encode::Alias (module)										
File Spec Epoc	R	File::Spec::Epoc (module)										
encapsulation definition	R	encapsulation (definition)										
define UID	R	UID (definition)										
Text ParseWords package	R	Text::ParseWords (module)										
msgsnd routine	R	msgsnd (function)										
$ARGV	R	$ARGV (variable)										
measure time under a second	R	How can I measure time under a second?										
print sub	R	print (function)										
__SUB__ routine	R	__SUB__ (function)										
Encode::Encoding module	R	Encode::Encoding (module)										
B Debug package	R	B::Debug (module)										
BEGIN sub	R	BEGIN (function)										
define grapheme	R	grapheme (definition)										
sandbox definition	R	sandbox (definition)										
endprotoent function	R	endprotoent (function)										
combining character	R	combining character (definition)										
ExtUtils::MM_NW5	R	ExtUtils::MM_NW5 (module)										
current working directory	R	current working directory (definition)										
free an array or hash so my program shrinks?	R	How can I free an array or hash so my program shrinks?										
until routine	R	until (function)										
I18N::Langinfo library	R	I18N::Langinfo (module)										
File Path package	R	File::Path (module)										
Encode JP library	R	Encode::JP (module)										
File::Fetch	R	File::Fetch (module)										
abs method	R	abs (function)										
Constant is not  reference	R	Constant is not %s reference										
Pod Simple PullParserEndToken package	R	Pod::Simple::PullParserEndToken (module)										
bit shift	R	bit shift (definition)										
Pod Text Overstrike package	R	Pod::Text::Overstrike (module)										
ExtUtils::MY	R	ExtUtils::MY (module)										
dump function	R	dump (function)										
TAP Parser Result Test package	R	TAP::Parser::Result::Test (module)										
Pod::Perldoc::ToNroff module	R	Pod::Perldoc::ToNroff (module)										
PerlIO via QuotedPrint module	R	PerlIO::via::QuotedPrint (module)										
SelectSaver library	R	SelectSaver (module)										
ExtUtils::Mkbootstrap	R	ExtUtils::Mkbootstrap (module)										
localtime function	R	localtime (function)										
Test::Builder::Tester::Color module	R	Test::Builder::Tester::Color (module)										
breakpoint definition	R	breakpoint (definition)										
times sub	R	times (function)										
sleep method	R	sleep (function)										
socketpair function	R	socketpair (function)										
getppid function	R	getppid (function)										
ucfirst func	R	ucfirst (function)										
standard output	R	standard output (definition)										
Binary &&	R	Binary "&&" operator										
define extension	R	extension (definition)										
Net SMTP package	R	Net::SMTP (module)										
avoid zombies on a Unix system	R	How do I avoid zombies on a Unix system?										
define exception handling	R	exception handling (definition)										
No next::method '' found for 	R	No next::method '%s' found for %s										
Useless use of greediness modifier '' in regex; marked by <-- HERE in m//	R	Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%s/										
Unary !	R	Unary "!" operator										
msg not implemented	R	msg%s not implemented										
define hash	R	hash (definition)										
setprotoent func	R	setprotoent (function)										
alarm	R	alarm (function)										
listen subroutine	R	listen (function)										
-U flag	R	-U										
IO Dir module	R	IO::Dir (module)										
record definition	R	record (definition)										
gethostent method	R	gethostent (function)										
What modules and extensions are available for Perl What is CPAN	R	What modules and extensions are available for Perl? What is CPAN?										
TAP Parser Result Version module	R	TAP::Parser::Result::Version (module)										
given	R	given (function)										
use a reference as a hash key?	R	How can I use a reference as a hash key?										
broadcast	R	broadcast (definition)										
Pod::Select library	R	Pod::Select (module)										
Constant() unknown	R	Constant(%s) unknown										
semop routine	R	semop (function)										
IO::Uncompress::RawInflate package	R	IO::Uncompress::RawInflate (module)										
Memoize ExpireTest module	R	Memoize::ExpireTest (module)										
CPAN Version	R	CPAN::Version (module)										
PerlIO::scalar package	R	PerlIO::scalar (module)										
CPAN Distroprefs	R	CPAN::Distroprefs (module)										
an index entry pod	R	X<topic name>										
endhostent	R	endhostent (function)										
IO Uncompress RawInflate package	R	IO::Uncompress::RawInflate (module)										
sethostent method	R	sethostent (function)										
define cracker	R	cracker (definition)										
Pod Man package	R	Pod::Man (module)										
define bit	R	bit (definition)										
$PROGRAM_NAME	R	$0 (variable)										
ExtUtils MM_Win95 module	R	ExtUtils::MM_Win95 (module)										
Pod Simple Text module	R	Pod::Simple::Text (module)										
msgrcv func	R	msgrcv (function)										
connect	R	connect (function)										
find the soundex value of a string	R	How do I find the soundex value of a string?										
Encode::Byte package	R	Encode::Byte (module)										
Pod::Parser module	R	Pod::Parser (module)										
Pod::Simple::Methody library	R	Pod::Simple::Methody (module)										
dangling statement	R	dangling statement (definition)										
define empty subclass test	R	empty subclass test (definition)										
Locale::Country	R	Locale::Country (module)										
getlogin subroutine	R	getlogin (function)										
${^RE_DEBUG_FLAGS}	R	${^RE_DEBUG_FLAGS} (variable)										
Tie::Hash::NamedCapture package	R	Tie::Hash::NamedCapture (module)										
Memoize::Expire	R	Memoize::Expire (module)										
scalar sub	R	scalar (function)										
\N{NAME} must be resolved by the lexer in regex; marked by <-- HERE in m//	R	\N{NAME} must be resolved by the lexer in regex; marked by <-- HERE in m/%s/										
define glue language	R	glue language (definition)										
ExtUtils::Mksymlists package	R	ExtUtils::Mksymlists (module)										
getpwent function	R	getpwent (function)										
 defines neither package nor VERSION--version check failed	R	%s defines neither package nor VERSION--version check failed										
define one-liner	R	one-liner (definition)										
abs subroutine	R	abs (function)										
buffer	R	buffer (definition)										
Config Extensions module	R	Config::Extensions (module)										
TAP::Parser::YAMLish::Reader package	R	TAP::Parser::YAMLish::Reader (module)										
ExtUtils ParseXS	R	ExtUtils::ParseXS (module)										
or func	R	or (function)										
IO Socket INET library	R	IO::Socket::INET (module)										
lvalue	R	lvalue (definition)										
split a [character]-delimited string except when inside [character]?	R	How can I split a [character]-delimited string except when inside [character]?										
define FMTEYEWTK	R	FMTEYEWTK (definition)										
Text::Balanced package	R	Text::Balanced (module)										
__END__ method	R	__END__ (function)										
Time HiRes module	R	Time::HiRes (module)										
panic: pp_match	R	panic: pp_match%s										
Pod Perldoc ToTk library	R	Pod::Perldoc::ToTk (module)										
kill	R	kill (function)										
postfix	R	postfix (definition)										
Artistic License definition	R	Artistic License (definition)										
-W flag	R	-W										
fileno subroutine	R	fileno (function)										
pad a string with blanks or pad a number with zeroes?	R	How do I pad a string with blanks or pad a number with zeroes?										
TAP Parser Aggregator library	R	TAP::Parser::Aggregator (module)										
fc sub	R	fc (function)										
Term::ReadLine package	R	Term::ReadLine (module)										
Malformed UTF-8 string in '' format in unpack	R	Malformed UTF-8 string in '%c' format in unpack										
Encode::Guess library	R	Encode::Guess (module)										
check whether input is ready on the keyboard	R	How do I check whether input is ready on the keyboard?										
User::grent package	R	User::grent (module)										
IO::Socket::UNIX module	R	IO::Socket::UNIX (module)										
Net Time package	R	Net::Time (module)										
TAP::Base	R	TAP::Base (module)										
unpack sub	R	unpack (function)										
Constant subroutine  undefined	R	Constant subroutine %s undefined										
$EVAL_ERROR	R	$@ (variable)										
getprotobyname method	R	getprotobyname (function)										
Pod Perldoc ToXml library	R	Pod::Perldoc::ToXml (module)										
IO::Uncompress::Inflate	R	IO::Uncompress::Inflate (module)										
keys sub	R	keys (function)										
File Spec Mac module	R	File::Spec::Mac (module)										
How do I make sure users cant enter values into a form that causes my CGI script to do bad things	R	How do I make sure users can't enter values into a form that causes my CGI script to do bad things?										
Useless use of  with no values	R	Useless use of %s with no values										
adopt or take over a module already on CPAN?	R	How do I adopt or take over a module already on CPAN?										
define directory	R	directory (definition)										
parent class	R	parent class (definition)										
gmtime method	R	gmtime (function)										
-dt: switch	R	-dt: MOD[=bar,baz]										
Pod Simple DumpAsXML module	R	Pod::Simple::DumpAsXML (module)										
setservent func	R	setservent (function)										
Getopt Std	R	Getopt::Std (module)										
Can't locate package  for @::ISA	R	Can't locate package %s for @%s::ISA										
Variable "" is not available	R	Variable "%s" is not available										
ExtUtils::Mksymlists module	R	ExtUtils::Mksymlists (module)										
Test::More library	R	Test::More (module)										
Pod::Perldoc::ToChecker library	R	Pod::Perldoc::ToChecker (module)										
$EXCEPTIONS_BEING_CAUGHT (variable)	R	$^S (variable)										
Pod Perldoc ToChecker	R	Pod::Perldoc::ToChecker (module)										
Pod InputObjects package	R	Pod::InputObjects (module)										
getpwent subroutine	R	getpwent (function)										
WYSIWYG	R	WYSIWYG (definition)										
No such class field "" in variable  of type 	R	No such class field "%s" in variable %s of type %s										
qw func	R	qw (function)										
semctl	R	semctl (function)										
-V flag	R	-V										
Tie::Handle module	R	Tie::Handle (module)										
Binary - operator	R	Binary "-" operator										
root definition	R	root (definition)										
AnyDBM_File module	R	AnyDBM_File (module)										
troff definition	R	troff (definition)										
quantifier	R	quantifier (definition)										
IO::Uncompress::AnyInflate package	R	IO::Uncompress::AnyInflate (module)										
-n switch	R	-n										
Filter Util Call library	R	Filter::Util::Call (module)										
Params Check module	R	Params::Check (module)										
IO::Uncompress::AnyUncompress module	R	IO::Uncompress::AnyUncompress (module)										
Sys::Syslog	R	Sys::Syslog (module)										
Out of memory during  extend	R	Out of memory during %s extend										
convert between numeric representations/bases/radixes?	R	How do I convert between numeric representations/bases/radixes?										
Text::Abbrev	R	Text::Abbrev (module)										
IPC Semaphore module	R	IPC::Semaphore (module)										
IPC::SysV library	R	IPC::SysV (module)										
define standard input	R	standard input (definition)										
chdir method	R	chdir (function)										
Pod::Simple::DumpAsXML module	R	Pod::Simple::DumpAsXML (module)										
break routine	R	break (function)										
TAP::Parser::Result::Comment package	R	TAP::Parser::Result::Comment (module)										
CPAN Tarzip package	R	CPAN::Tarzip (module)										
define minicpan	R	minicpan (definition)										
do fancy stuff with the keyboard/screen/mouse?	R	How do I do fancy stuff with the keyboard/screen/mouse?										
Encode Unicode	R	Encode::Unicode (module)										
make my hash remember the order I put elements into it?	R	How can I make my hash remember the order I put elements into it?										
Tie::Memoize package	R	Tie::Memoize (module)										
How can I use Perls option from within a program	R	How can I use Perl's option from within a program?										
Memoize::AnyDBM_File package	R	Memoize::AnyDBM_File (module)										
telldir func	R	telldir (function)										
Pod::Simple::PullParser	R	Pod::Simple::PullParser (module)										
define compiler	R	compiler (definition)										
B library	R	B (module)										
 Files and Formats	R	: Files and Formats										
File::Spec::Epoc package	R	File::Spec::Epoc (module)										
shutdown subroutine	R	shutdown (function)										
File Spec VMS	R	File::Spec::VMS (module)										
How do I modify the shadow password file on a Unix system	R	How do I modify the shadow password file on a Unix system?										
cmp subroutine	R	cmp (function)										
ExtUtils::Installed	R	ExtUtils::Installed (module)										
ask the user for a password?	R	How do I ask the user for a password?										
Binary le operator	R	Binary "le" operator										
Net netent package	R	Net::netent (module)										
AV	R	AV (definition)										
file test operator	R	file test operator (definition)										
Archive Tar File package	R	Archive::Tar::File (module)										
tell if a variable is tainted?	R	How can I tell if a variable is tainted?										
ExtUtils::Constant::Utils package	R	ExtUtils::Constant::Utils (module)										
Term Cap	R	Term::Cap (module)										
Tie StdHandle	R	Tie::StdHandle (module)										
do a in perl?	R	How do I do a in perl?										
App Prove State Result Test package	R	App::Prove::State::Result::Test (module)										
format function	R	format (function)										
 System Interaction	R	: System Interaction										
Invalid negative number () in chr	R	Invalid negative number (%s) in chr										
Binary <=> operator	R	Binary "<=>" operator										
define accessor methods	R	accessor methods (definition)										
split func	R	split (function)										
Symbol	R	Symbol (module)										
How can I get to work on MSDOSNT	R	How can I get to work on [MS-DOS,NT,...]?										
import method	R	import (function)										
Math::BigRat module	R	Math::BigRat (module)										
Net POP3	R	Net::POP3 (module)										
gethostbyaddr method	R	gethostbyaddr (function)										
Net::FTP::dataconn	R	Net::FTP::dataconn (module)										
getservent routine	R	getservent (function)										
context definition	R	context (definition)										
define bareword	R	bareword (definition)										
IO Uncompress Bunzip2 package	R	IO::Uncompress::Bunzip2 (module)										
exists method	R	exists (function)										
Filter::Simple	R	Filter::Simple (module)										
getpwnam sub	R	getpwnam (function)										
List::Util package	R	List::Util (module)										
syscall func	R	syscall (function)										
Test::Harness library	R	Test::Harness (module)										
IO Seekable package	R	IO::Seekable (module)										
localtime sub	R	localtime (function)										
$OFS	R	$, (variable)										
warn	R	warn (function)										
exception handling	R	exception handling (definition)										
find the current century or millennium	R	How do I find the current century or millennium?										
dbmopen func	R	dbmopen (function)										
Pod Perldoc ToChecker module	R	Pod::Perldoc::ToChecker (module)										
listen sub	R	listen (function)										
getprotobynumber function	R	getprotobynumber (function)										
Pod::Perldoc::ToPod library	R	Pod::Perldoc::ToPod (module)										
Test More package	R	Test::More (module)										
define library	R	library (definition)										
I/O	R	I/O (definition)										
Net Config library	R	Net::Config (module)										
CPAN::Queue	R	CPAN::Queue (module)										
UNITCHECK	R	UNITCHECK (function)										
Devel Peek	R	Devel::Peek (module)										
shmread sub	R	shmread (function)										
(in cleanup) 	R	(in cleanup) %s										
use routine	R	use (function)										
TAP::Parser::Iterator::Process package	R	TAP::Parser::Iterator::Process (module)										
timeout a slow event	R	How do I timeout a slow event?										
UNIVERSAL library	R	UNIVERSAL (module)										
shmget method	R	shmget (function)										
What about the pragma	R	What about the pragma?										
ExtUtils CBuilder package	R	ExtUtils::CBuilder (module)										
define pointer	R	pointer (definition)										
combining character definition	R	combining character (definition)										
prototype subroutine	R	prototype (function)										
Pod::Perldoc::ToText	R	Pod::Perldoc::ToText (module)										
Locale Maketext package	R	Locale::Maketext (module)										
Illegal octal digit 	R	Illegal octal digit %s										
FileHandle module	R	FileHandle (module)										
each subroutine	R	each (function)										
Time tm module	R	Time::tm (module)										
Hash Util FieldHash library	R	Hash::Util::FieldHash (module)										
interface definition	R	interface (definition)										
stringification	R	stringification (definition)										
Module Load package	R	Module::Load (module)										
select	R	select (function)										
Tie Hash package	R	Tie::Hash (module)										
do (anything)?	R	How do I do (anything)?										
How do I clear the screen	R	How do I clear the screen?										
FindBin module	R	FindBin (module)										
B::Terse package	R	B::Terse (module)										
gt subroutine	R	gt (function)										
Unterminated \g... pattern in regex; marked by <-- HERE in m//	R	Unterminated \g{...} pattern in regex; marked by <-- HERE in m/%s/										
Do I need to recompile XS modules when there is a change in the C library	R	Do I need to recompile XS modules when there is a change in the C library?										
Tie RefHash package	R	Tie::RefHash (module)										
TAP::Parser::Result::Plan library	R	TAP::Parser::Result::Plan (module)										
Syntax error in (?[...]) in regex m//	R	Syntax error in (?[...]) in regex m/%s/										
cmp func	R	cmp (function)										
Pod Simple RTF	R	Pod::Simple::RTF (module)										
prototype function	R	prototype (function)										
modify the shadow password file on a Unix system?	R	How do I modify the shadow password file on a Unix system?										
reverse sub	R	reverse (function)										
Devel SelfStubber	R	Devel::SelfStubber (module)										
Locale::Maketext::Guts library	R	Locale::Maketext::Guts (module)										
Exiting substitution via 	R	Exiting substitution via %s										
endprotoent routine	R	endprotoent (function)										
Compress::Raw::Bzip2 package	R	Compress::Raw::Bzip2 (module)										
subscript	R	subscript (definition)										
Binary >= operator	R	Binary ">=" operator										
octal definition	R	octal (definition)										
ExtUtils Miniperl package	R	ExtUtils::Miniperl (module)										
define assignment operator	R	assignment operator (definition)										
flock method	R	flock (function)										
 "\x" does not map to Unicode	R	%s "\x%X" does not map to Unicode										
waitpid subroutine	R	waitpid (function)										
Unexpected exit 	R	Unexpected exit %u										
UNIVERSAL package	R	UNIVERSAL (module)										
do	R	do (function)										
No such hook: 	R	No such hook: %s										
define declaration	R	declaration (definition)										
DynaLoader library	R	DynaLoader (module)										
-t switch	R	-t										
__LINE__ function	R	__LINE__ (function)										
CPAN::Tarzip	R	CPAN::Tarzip (module)										
define derived class	R	derived class (definition)										
Net::SMTP	R	Net::SMTP (module)										
Filter Simple	R	Filter::Simple (module)										
Unicode Collate package	R	Unicode::Collate (module)										
panic: frexp: 	R	panic: frexp: %f										
oct routine	R	oct (function)										
define infix	R	infix (definition)										
Locale Country	R	Locale::Country (module)										
Encode Alias	R	Encode::Alias (module)										
define standard error	R	standard error (definition)										
endprotoent method	R	endprotoent (function)										
wait func	R	wait (function)										
Possible memory corruption:  overflowed 3rd argument	R	Possible memory corruption: %s overflowed 3rd argument										
File Spec VMS library	R	File::Spec::VMS (module)										
Net::FTP library	R	Net::FTP (module)										
syswrite routine	R	syswrite (function)										
Math::Complex library	R	Math::Complex (module)										
Verb pattern '' has a mandatory argument in regex; marked by <-- HERE in m//	R	Verb pattern '%s' has a mandatory argument in regex; marked by <-- HERE in m/%s/										
CPAN Version library	R	CPAN::Version (module)										
>	R	Binary ">" operator										
ExtUtils::MakeMaker::FAQ package	R	ExtUtils::MakeMaker::FAQ (module)										
-C flag	R	-C [ number/list ]										
TAP Base library	R	TAP::Base (module)										
CPAN package	R	CPAN (module)										
File Spec OS2 library	R	File::Spec::OS2 (module)										
pod italic text	R	I<text>										
Encode TW module	R	Encode::TW (module)										
B Terse package	R	B::Terse (module)										
Warning: unable to close filehandle  properly	R	Warning: unable to close filehandle %s properly										
rename method	R	rename (function)										
sqrt subroutine	R	sqrt (function)										
cluster	R	cluster (definition)										
IPC::Msg library	R	IPC::Msg (module)										
B::Xref package	R	B::Xref (module)										
Encode KR 2022_KR library	R	Encode::KR::2022_KR (module)										
defined definition	R	defined (definition)										
pod =back	R	=back										
readline sub	R	readline (function)										
=pod pod command	R	=pod										
lookahead definition	R	lookahead (definition)										
Time::localtime package	R	Time::localtime (module)										
AV definition	R	AV (definition)										
CPAN Nox library	R	CPAN::Nox (module)										
ne func	R	ne (function)										
pod =pod command	R	=pod										
ExtUtils Command package	R	ExtUtils::Command (module)										
Pod::Usage package	R	Pod::Usage (module)										
really for?	R	What is really for?										
uc routine	R	uc (function)										
Pod::Simple::Checker module	R	Pod::Simple::Checker (module)										
ExtUtils CBuilder module	R	ExtUtils::CBuilder (module)										
pack method	R	pack (function)										
DBM_Filter null module	R	DBM_Filter::null (module)										
Pod Simple Methody	R	Pod::Simple::Methody (module)										
File::stat	R	File::stat (module)										
format method	R	format (function)										
state subroutine	R	state (function)										
Binary x operator	R	Binary "x" operator										
true	R	true (definition)										
my sub	R	my (function)										
Compress Raw Bzip2 module	R	Compress::Raw::Bzip2 (module)										
getpriority	R	getpriority (function)										
Socket	R	Socket (module)										
ExtUtils::Mkbootstrap library	R	ExtUtils::Mkbootstrap (module)										
when	R	when (function)										
Whats an extension	R	What's an extension?										
${^WARNING_BITS}	R	${^WARNING_BITS} (variable)										
Config library	R	Config (module)										
CPAN::Kwalify library	R	CPAN::Kwalify (module)										
define current package	R	current package (definition)										
weak reference	R	weak reference (definition)										
Tie Array package	R	Tie::Array (module)										
mro	R	mro (definition)										
BEGIN func	R	BEGIN (function)										
pop subroutine	R	pop (function)										
shmget routine	R	shmget (function)										
-M flag	R	-[mM] [ - ] module=arg[,arg]...										
Net protoent library	R	Net::protoent (module)										
TAP::Parser::Result::Pragma	R	TAP::Parser::Result::Pragma (module)										
switch statement	R	switch statement (definition)										
ASCII definition	R	ASCII (definition)										
getsockname func	R	getsockname (function)										
How can I open a pipe both to and from a command	R	How can I open a pipe both to and from a command?										
Thread::Queue	R	Thread::Queue (module)										
list operator	R	list operator (definition)										
DBM_Filter::int32 library	R	DBM_Filter::int32 (module)										
lexical scoping definition	R	lexical scoping (definition)										
hex	R	hex (function)										
dwimmer definition	R	dwimmer (definition)										
TAP Formatter Session module	R	TAP::Formatter::Session (module)										
TAP::Formatter::Session	R	TAP::Formatter::Session (module)										
backtracking	R	backtracking (definition)										
Time::Local module	R	Time::Local (module)										
fatal error definition	R	fatal error (definition)										
semaphore definition	R	semaphore (definition)										
FIFO	R	FIFO (definition)										
Math BigInt	R	Math::BigInt (module)										
$UID (variable)	R	$< (variable)										
accept	R	accept (function)										
Passing malformed UTF-8 to "" is deprecated	R	Passing malformed UTF-8 to "%s" is deprecated										
getgrent sub	R	getgrent (function)										
convert my shell script to perl	R	How can I convert my shell script to perl?										
host	R	host (definition)										
I grabbed the sources and tried to compile but gdbmdynamic loadingmalloclinking failed How do I make it work	R	I grabbed the sources and tried to compile but gdbm/dynamic loading/malloc/linking/... failed. How do I make it work?										
a null (zero-effect) formatting code pod	R	Z<>										
Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m//	R	Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%s/										
Pod Perldoc GetOptsOO package	R	Pod::Perldoc::GetOptsOO (module)										
pod command definition	R	pod command (definition)										
POSIX class [::] unknown in regex; marked by <-- HERE in m//	R	POSIX class [:%s:] unknown in regex; marked by <-- HERE in m/%s/										
mode	R	mode (definition)										
AUTOLOAD routine	R	AUTOLOAD (function)										
match a locale-smart version of?	R	How can I match a locale-smart version of?										
== operator	R	Binary "==" operator										
Encode KR	R	Encode::KR (module)										
getnetent method	R	getnetent (function)										
ARGV definition	R	ARGV (definition)										
Binary %	R	Binary "%" operator										
Pod::Simple::Text package	R	Pod::Simple::Text (module)										
PerlIO::encoding library	R	PerlIO::encoding (module)										
bless routine	R	bless (function)										
ExtUtils::testlib	R	ExtUtils::testlib (module)										
Tie::RefHash	R	Tie::RefHash (module)										
- on unopened filehandle 	R	-%s on unopened filehandle %s										
quotemeta routine	R	quotemeta (function)										
lc sub	R	lc (function)										
truncate sub	R	truncate (function)										
IO Uncompress Inflate package	R	IO::Uncompress::Inflate (module)										
remove HTML from a string	R	How do I remove HTML from a string?										
TAP::Parser::Result::Version module	R	TAP::Parser::Result::Version (module)										
TAP::Parser::Grammar module	R	TAP::Parser::Grammar (module)										
-V: option	R	-V: configvar										
Encode::JP::H2Z package	R	Encode::JP::H2Z (module)										
foreach function	R	foreach (function)										
Unrecognized escape \ passed through	R	Unrecognized escape \%c passed through										
scalar definition	R	scalar (definition)										
TAP::Parser::Result::Plan module	R	TAP::Parser::Result::Plan (module)										
IO Handle module	R	IO::Handle (module)										
map subroutine	R	map (function)										
How do I create a static variable	R	How do I create a static variable?										
TAP::Parser::Scheduler::Job library	R	TAP::Parser::Scheduler::Job (module)										
getnetbyname	R	getnetbyname (function)										
unless method	R	unless (function)										
Encode::JP::H2Z module	R	Encode::JP::H2Z (module)										
 Web Email and Networking	R	: Web, Email and Networking										
standard I/O	R	standard I/O (definition)										
cargo cult definition	R	cargo cult (definition)										
Why dont my <<HERE documents work	R	Why don't my <<HERE documents work?										
mro (definition)	R	method resolution order										
Digest::base	R	Digest::base (module)										
I18N::Langinfo package	R	I18N::Langinfo (module)										
magic definition	R	magic (definition)										
PerlIO::via	R	PerlIO::via (module)										
define lvalue	R	lvalue (definition)										
impatience definition	R	impatience (definition)										
Pod PlainText package	R	Pod::PlainText (module)										
IO Compress Bzip2 module	R	IO::Compress::Bzip2 (module)										
define stringification	R	stringification (definition)										
Thread::Queue module	R	Thread::Queue (module)										
Pod::Simple::DumpAsXML library	R	Pod::Simple::DumpAsXML (module)										
pseudofunction	R	pseudofunction (definition)										
English module	R	English (module)										
default routine	R	default (function)										
File Compare package	R	File::Compare (module)										
readline subroutine	R	readline (function)										
ExtUtils::MM_Any package	R	ExtUtils::MM_Any (module)										
Pod::Simple::PullParserStartToken package	R	Pod::Simple::PullParserStartToken (module)										
or operator	R	Binary "or" operator										
get the unique keys from two hashes	R	How can I get the unique keys from two hashes?										
Net::hostent package	R	Net::hostent (module)										
Compress::Raw::Zlib package	R	Compress::Raw::Zlib (module)										
TAP::Parser::Result::Bailout library	R	TAP::Parser::Result::Bailout (module)										
do sub	R	do (function)										
big-endian definition	R	big-endian (definition)										
FindBin library	R	FindBin (module)										
What is really for	R	What is really for?										
How can I comment out a large block of Perl code	R	How can I comment out a large block of Perl code?										
/x modifier	R	/x regular expression modifier										
&& operator	R	Binary "&&" operator										
-m flag	R	-[mM] [ - ] module=arg[,arg]...										
How can I make a filehandle local to a subroutine How do I pass filehandles between subroutines How do I make an array of filehandles	R	How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?										
getpwuid func	R	getpwuid (function)										
Type of argument to  must be unblessed hashref or arrayref	R	Type of argument to %s must be unblessed hashref or arrayref										
switching effective  is not implemented	R	switching effective %s is not implemented										
Unsupported function 	R	Unsupported function %s										
evalbytes	R	evalbytes (function)										
CHECK sub	R	CHECK (function)										
Invalid separator character  in PerlIO layer specification 	R	Invalid separator character %s in PerlIO layer specification %s										
I changed directory modified my environment in a perl script How come the change disappeared when I exited the script How do I get my changes to be visible	R	I {changed directory, modified my environment} in a perl script. How come the change disappeared when I exited the script? How do I get my changes to be visible?										
Locale Maketext GutsLoader	R	Locale::Maketext::GutsLoader (module)										
AUTOLOAD	R	AUTOLOAD (function)										
Socket package	R	Socket (module)										
pod Z	R	Z<>										
App Prove State Result Test module	R	App::Prove::State::Result::Test (module)										
Test::Harness	R	Test::Harness (module)										
runtime pattern	R	runtime pattern (definition)										
File Spec Epoc module	R	File::Spec::Epoc (module)										
define CV	R	CV (definition)										
Attribute Handlers module	R	Attribute::Handlers (module)										
Can't reset  on this system	R	Can't reset %ENV on this system										
"state " used in sort comparison	R	"state %s" used in sort comparison										
kill function	R	kill (function)										
TAP::Parser::ResultFactory library	R	TAP::Parser::ResultFactory (module)										
Pod Simple HTMLBatch library	R	Pod::Simple::HTMLBatch (module)										
Module Load	R	Module::Load (module)										
define LIST	R	LIST (definition)										
last func	R	last (function)										
Module::CoreList module	R	Module::CoreList (module)										
Time::Seconds package	R	Time::Seconds (module)										
define datagram	R	datagram (definition)										
parse a mail header?	R	How do I parse a mail header?										
App::Prove::State::Result::Test module	R	App::Prove::State::Result::Test (module)										
toolbox approach definition	R	toolbox approach (definition)										
sleep() or alarm() for under a second?	R	How can I sleep() or alarm() for under a second?										
File stat module	R	File::stat (module)										
Encode::CN::HZ library	R	Encode::CN::HZ (module)										
alphabetic definition	R	alphabetic (definition)										
expand tabs in a string?	R	How do I expand tabs in a string?										
tied func	R	tied (function)										
pumpking definition	R	pumpking (definition)										
bucket definition	R	bucket (definition)										
CPAN::Queue library	R	CPAN::Queue (module)										
splice function	R	splice (function)										
xor operator	R	Binary "xor" operator										
flock routine	R	flock (function)										
sleep subroutine	R	sleep (function)										
sandbox	R	sandbox (definition)										
do RPC in Perl?	R	How can I do RPC in Perl?										
structure (definition)	R	data structure										
delete method	R	delete (function)										
extension	R	extension (definition)										
unshift method	R	unshift (function)										
Text Balanced module	R	Text::Balanced (module)										
method resolution order	R	method resolution order (definition)										
define patch	R	patch (definition)										
while	R	while (function)										
Memoize SDBM_File module	R	Memoize::SDBM_File (module)										
compile phase	R	compile phase (definition)										
IO Uncompress Gunzip package	R	IO::Uncompress::Gunzip (module)										
add a directory to my include path (@INC) at runtime?	R	How do I add a directory to my include path (@INC) at runtime?										
Can't find an opnumber for ""	R	Can't find an opnumber for "%s"										
Compress Raw Zlib package	R	Compress::Raw::Zlib (module)										
$LAST_REGEXP_CODE_RESULT (variable)	R	$^R (variable)										
local function	R	local (function)										
Why cant a method included in this same file be found	R	Why can't a method included in this same file be found?										
sysseek function	R	sysseek (function)										
TAP::Parser::Result module	R	TAP::Parser::Result (module)										
zombie definition	R	zombie (definition)										
send method	R	send (function)										
setpriority subroutine	R	setpriority (function)										
Pod Text Color	R	Pod::Text::Color (module)										
ExtUtils::ParseXS	R	ExtUtils::ParseXS (module)										
socket sub	R	socket (function)										
or function	R	or (function)										
base class	R	base class (definition)										
ExtUtils::MM_AIX module	R	ExtUtils::MM_AIX (module)										
return method	R	return (function)										
Text::Tabs library	R	Text::Tabs (module)										
Invalid range "" in transliteration operator	R	Invalid range "%s" in transliteration operator										
B::Showlex package	R	B::Showlex (module)										
formline routine	R	formline (function)										
GID definition	R	GID (definition)										
Can't use string ("%s") as %s ref while "strict refs" in use	R	Can't use string ("%s"...) as %s ref while "strict refs" in use										
ucfirst method	R	ucfirst (function)										
Pod Simple Debug package	R	Pod::Simple::Debug (module)										
I18N LangTags Detect package	R	I18N::LangTags::Detect (module)										
setpwent	R	setpwent (function)										
Hash Util FieldHash	R	Hash::Util::FieldHash (module)										
IO::Compress::Base module	R	IO::Compress::Base (module)										
ExtUtils MM_OS2	R	ExtUtils::MM_OS2 (module)										
Unrecognized escape \ in character class passed through in regex; marked by <-- HERE in m//	R	Unrecognized escape \%c in character class passed through in regex; marked by <-- HERE in m/%s/										
CPAN FirstTime	R	CPAN::FirstTime (module)										
network address definition	R	network address (definition)										
File::Spec::Win32 module	R	File::Spec::Win32 (module)										
Missing argument to -	R	Missing argument to -%c										
ExtUtils MM module	R	ExtUtils::MM (module)										
Archive::Tar::File package	R	Archive::Tar::File (module)										
File::Spec::OS2 module	R	File::Spec::OS2 (module)										
caller routine	R	caller (function)										
exec routine	R	exec (function)										
<< operator	R	Binary "<<" operator										
Net::NNTP library	R	Net::NNTP (module)										
define root	R	root (definition)										
if function	R	if (function)										
binmode sub	R	binmode (function)										
Pod::Man library	R	Pod::Man (module)										
TAP Parser Result Unknown package	R	TAP::Parser::Result::Unknown (module)										
ExtUtils Installed package	R	ExtUtils::Installed (module)										
define string	R	string (definition)										
ExtUtils::MM_Win95 package	R	ExtUtils::MM_Win95 (module)										
App Prove State Result library	R	App::Prove::State::Result (module)										
script kiddie	R	script kiddie (definition)										
Constant(): Call to &{$^H{}} did not return a defined value	R	Constant(%s): Call to &{$^H{%s}} did not return a defined value										
I/O layer	R	I/O layer (definition)										
getppid method	R	getppid (function)										
Test::Builder::Module package	R	Test::Builder::Module (module)										
pod	R	pod (definition)										
local routine	R	local (function)										
-l	R	-l [ octnum ]										
$OLD_PERL_VERSION	R	$] (variable)										
rindex func	R	rindex (function)										
variable suicide and how can I prevent it?	R	What is variable suicide and how can I prevent it?										
write method	R	write (function)										
Text::Balanced	R	Text::Balanced (module)										
TAP::Formatter::Base package	R	TAP::Formatter::Base (module)										
B::Concise package	R	B::Concise (module)										
Encode::Alias module	R	Encode::Alias (module)										
Pod ParseLink package	R	Pod::ParseLink (module)										
find out if Im running interactively or not	R	How do I find out if I'm running interactively or not?										
Time Local module	R	Time::Local (module)										
IO Compress Bzip2 package	R	IO::Compress::Bzip2 (module)										
Pod::Man module	R	Pod::Man (module)										
program (definition)	R	script										
difference between a list and an array?	R	What is the difference between a list and an array?										
endhostent method	R	endhostent (function)										
make sure users can't enter values into a form that causes my CGI script to do bad things?	R	How do I make sure users can't enter values into a form that causes my CGI script to do bad things?										
terminator	R	terminator (definition)										
(?[...]) not valid in locale in regex; marked by <-- HERE in m//	R	(?[...]) not valid in locale in regex; marked by <-- HERE in m/%s/										
statement	R	statement (definition)										
copy a file	R	How can I copy a file?										
Time::tm package	R	Time::tm (module)										
Scalar Util library	R	Scalar::Util (module)										
directive definition	R	directive (definition)										
rename sub	R	rename (function)										
How can I compare two dates and find the difference	R	How can I compare two dates and find the difference?										
Pod::PlainText package	R	Pod::PlainText (module)										
scalar variable	R	scalar variable (definition)										
getnetbyname method	R	getnetbyname (function)										
connect routine	R	connect (function)										
symlink function	R	symlink (function)										
side effects definition	R	side effects (definition)										
How do I put a password on my web pages	R	How do I put a password on my web pages?										
socketpair sub	R	socketpair (function)										
Missing right brace on \N{}	R	Missing right brace on \N{} or unescaped left brace after \N										
Module::Loaded module	R	Module::Loaded (module)										
define serialization	R	serialization (definition)										
-U option	R	-U										
getnetbyaddr routine	R	getnetbyaddr (function)										
Pod::Perldoc::ToText package	R	Pod::Perldoc::ToText (module)										
Pod Simple XHTML module	R	Pod::Simple::XHTML (module)										
mkdir subroutine	R	mkdir (function)										
! operator	R	Unary "!" operator										
type definition	R	type (definition)										
closedir function	R	closedir (function)										
pod =encoding	R	=encoding										
define array	R	array (definition)										
write func	R	write (function)										
O package	R	O (module)										
Unrecognized character ; marked by <-- HERE after  near column 	R	Unrecognized character %s; marked by <-- HERE after %s near column %d										
$GID (variable)	R	$( (variable)										
$0	R	$0 (variable)										
qx func	R	qx (function)										
Pod Simple RTF library	R	Pod::Simple::RTF (module)										
delete routine	R	delete (function)										
time func	R	time (function)										
lexeme	R	lexeme (definition)										
define vector	R	vector (definition)										
B Showlex	R	B::Showlex (module)										
TAP::Parser::Iterator module	R	TAP::Parser::Iterator (module)										
values	R	values (function)										
B Deparse package	R	B::Deparse (module)										
set up a footer format to be used with write()?	R	How can I set up a footer format to be used with write()?										
Argument "" treated as 0 in increment (++)	R	Argument "%s" treated as 0 in increment (++)										
F pod code	R	F<filename>										
define cache	R	cache (definition)										
Memoize NDBM_File package	R	Memoize::NDBM_File (module)										
define preprocessing	R	preprocessing (definition)										
AUTOLOAD method	R	AUTOLOAD (function)										
Can't take log of 	R	Can't take log of %g										
-T option	R	-T										
define architecture	R	architecture (definition)										
File::Copy module	R	File::Copy (module)										
Pod Perldoc ToMan package	R	Pod::Perldoc::ToMan (module)										
FileCache library	R	FileCache (module)										
sysseek subroutine	R	sysseek (function)										
Within []-length '' not allowed	R	Within []-length '%c' not allowed										
monger definition	R	monger (definition)										
decode encrypted password files	R	How do I decode encrypted password files?										
File::Glob package	R	File::Glob (module)										
ExtUtils::Manifest package	R	ExtUtils::Manifest (module)										
our subroutine	R	our (function)										
IPC::Cmd module	R	IPC::Cmd (module)										
TAP Parser Result library	R	TAP::Parser::Result (module)										
Where can I get perlmode or cperlmode for emacs	R	Where can I get perl-mode or cperl-mode for emacs?										
define methods for every classobject	R	How do I define methods for every class/object?										
define interpreter	R	interpreter (definition)										
Module::Loaded package	R	Module::Loaded (module)										
Integer overflow in version	R	Integer overflow in version %d										
concatenation definition	R	concatenation (definition)										
push function	R	push (function)										
-p flag	R	-p										
Archive Tar	R	Archive::Tar (module)										
Ambiguous use of {} resolved to 	R	Ambiguous use of %c{%s} resolved to %c%s										
TAP Formatter File Session package	R	TAP::Formatter::File::Session (module)										
What is the difference between a list and an array	R	What is the difference between a list and an array?										
readline() on closed filehandle 	R	readline() on closed filehandle %s										
tie definition	R	tie (definition)										
qq function	R	qq (function)										
select method	R	select (function)										
How do I merge two hashes	R	How do I merge two hashes?										
Class::Struct module	R	Class::Struct (module)										
Encode Byte library	R	Encode::Byte (module)										
define STDIO	R	STDIO (definition)										
our sub	R	our (function)										
define lexical analysis	R	lexical analysis (definition)										
Pod Simple RTF package	R	Pod::Simple::RTF (module)										
shmctl subroutine	R	shmctl (function)										
DBM_Filter::utf8	R	DBM_Filter::utf8 (module)										
DBM_Filter null library	R	DBM_Filter::null (module)										
PerlIO::via module	R	PerlIO::via (module)										
$EGID (variable)	R	$) (variable)										
Pod::Perldoc::ToNroff package	R	Pod::Perldoc::ToNroff (module)										
Archive::Tar package	R	Archive::Tar (module)										
foreach (function)	R	Foreach Loops										
side effects	R	side effects (definition)										
__SUB__ subroutine	R	__SUB__ (function)										
service definition	R	service (definition)										
define property	R	property (definition)										
Too late to run  block	R	Too late to run %s block										
IO Poll package	R	IO::Poll (module)										
import routine	R	import (function)										
Pod::Simple::Text	R	Pod::Simple::Text (module)										
Filter Util Call	R	Filter::Util::Call (module)										
IO::Compress::Zip module	R	IO::Compress::Zip (module)										
chroot subroutine	R	chroot (function)										
crypt	R	crypt (function)										
I18N LangTags List	R	I18N::LangTags::List (module)										
Net::Netrc module	R	Net::Netrc (module)										
define iterator	R	iterator (definition)										
Pod Simple XHTML	R	Pod::Simple::XHTML (module)										
Allocation too large: 	R	Allocation too large: %x										
getpeername sub	R	getpeername (function)										
asynchronous	R	asynchronous (definition)										
map func	R	map (function)										
TAP::Parser::Iterator::Stream	R	TAP::Parser::Iterator::Stream (module)										
How can I write a GUI X Tk Gtk etc in Perl	R	How can I write a GUI (X, Tk, Gtk, etc.) in Perl?										
chop func	R	chop (function)										
Memoize::AnyDBM_File	R	Memoize::AnyDBM_File (module)										
Getopt Long package	R	Getopt::Long (module)										
How do I add a directory to my include path INC at runtime	R	How do I add a directory to my include path (@INC) at runtime?										
readline function	R	readline (function)										
stat function	R	stat (function)										
foreach func	R	foreach (function)										
PerlIO via QuotedPrint library	R	PerlIO::via::QuotedPrint (module)										
Locale::Country library	R	Locale::Country (module)										
English	R	English (module)										
Pod::InputObjects	R	Pod::InputObjects (module)										
instance	R	instance (definition)										
IO Uncompress AnyInflate package	R	IO::Uncompress::AnyInflate (module)										
set the time and date?	R	How do I set the time and date?										
setservent routine	R	setservent (function)										
Net::FTP::dataconn module	R	Net::FTP::dataconn (module)										
define impatience	R	impatience (definition)										
library definition	R	library (definition)										
"state" subroutine  can't be in a package	R	"state" subroutine %s can't be in a package										
Can't modify  in 	R	Can't modify %s in %s										
unshift	R	unshift (function)										
File Glob module	R	File::Glob (module)										
Math BigRat	R	Math::BigRat (module)										
define comment	R	comment (definition)										
warn func	R	warn (function)										
eq routine	R	eq (function)										
circumfix operator	R	circumfix operator (definition)										
getlogin function	R	getlogin (function)										
exists function	R	exists (function)										
Digest SHA library	R	Digest::SHA (module)										
define concatenation	R	concatenation (definition)										
count the number of occurrences of a substring within a string?	R	How can I count the number of occurrences of a substring within a string?										
Reference to nonexistent or unclosed group in regex; marked by <-- HERE in m//	R	Reference to nonexistent or unclosed group in regex; marked by <-- HERE in m/%s/										
tr function	R	tr (function)										
create a class	R	How do I create a class?										
Time::HiRes package	R	Time::HiRes (module)										
chdir	R	chdir (function)										
Encode CN HZ	R	Encode::CN::HZ (module)										
Pod Checker module	R	Pod::Checker (module)										
TAP::Parser::Scheduler::Spinner module	R	TAP::Parser::Scheduler::Spinner (module)										
define garbage collection	R	garbage collection (definition)										
$+	R	$+ (variable)										
protocol	R	protocol (definition)										
execute bit definition	R	execute bit (definition)										
FMTEYEWTK definition	R	FMTEYEWTK (definition)										
Thread module	R	Thread (module)										
Filter Util Call module	R	Filter::Util::Call (module)										
convert my shell script to perl?	R	How can I convert my shell script to perl?										
FileCache module	R	FileCache (module)										
POSIX package	R	POSIX (module)										
Exporter::Heavy module	R	Exporter::Heavy (module)										
print method	R	print (function)										
define context	R	context (definition)										
Net::hostent library	R	Net::hostent (module)										
break sub	R	break (function)										
ExtUtils Constant Utils package	R	ExtUtils::Constant::Utils (module)										
printf subroutine	R	printf (function)										
$&	R	$& (variable)										
Pod::Perldoc::ToChecker module	R	Pod::Perldoc::ToChecker (module)										
Variable "" will not stay shared	R	Variable "%s" will not stay shared										
terminator definition	R	terminator (definition)										
Tie Memoize package	R	Tie::Memoize (module)										
Assertion  failed: file "", line 	R	Assertion %s failed: file "%s", line %d										
hide the source for my Perl program?	R	How can I hide the source for my Perl program?										
chmod	R	chmod (function)										
Locale Language library	R	Locale::Language (module)										
compile definition	R	compile (definition)										
algorithm definition	R	algorithm (definition)										
fcntl subroutine	R	fcntl (function)										
B Debug library	R	B::Debug (module)										
"our" variable  redeclared	R	"our" variable %s redeclared										
pipe sub	R	pipe (function)										
B Xref library	R	B::Xref (module)										
listen	R	listen (function)										
member data definition	R	member data (definition)										
while (function)	R	For Loops										
define nybble	R	nybble (definition)										
Binary ge operator	R	Binary "ge" operator										
TAP Formatter Console	R	TAP::Formatter::Console (module)										
lstat function	R	lstat (function)										
Sys Syslog	R	Sys::Syslog (module)										
flush	R	flush (definition)										
Missing braces on \N{}	R	Missing braces on \N{} in regex; marked by <-- HERE in m/%s/										
localtime() too small	R	localtime(%f) too small										
until func	R	until (function)										
q	R	q (function)										
Test::Builder::Tester module	R	Test::Builder::Tester (module)										
grep subroutine	R	grep (function)										
lt routine	R	lt (function)										
IO Compress Gzip	R	IO::Compress::Gzip (module)										
define flag	R	flag (definition)										
"\c" is more clearly written simply as ""	R	"\c%c" is more clearly written simply as "%s"										
Encode Symbol package	R	Encode::Symbol (module)										
untie	R	untie (function)										
SelfLoader package	R	SelfLoader (module)										
Net::NNTP module	R	Net::NNTP (module)										
Quantifier follows nothing in regex; marked by <-- HERE in m//	R	Quantifier follows nothing in regex; marked by <-- HERE in m/%s/										
Pod::Simple::PullParserStartToken module	R	Pod::Simple::PullParserStartToken (module)										
minicpan	R	minicpan (definition)										
getnetent	R	getnetent (function)										
flag definition	R	flag (definition)										
break func	R	break (function)										
Module::Load::Conditional library	R	Module::Load::Conditional (module)										
Text Balanced package	R	Text::Balanced (module)										
Encode module	R	Encode (module)										
__DATA__ function	R	__DATA__ (function)										
Undefined subroutine & called	R	Undefined subroutine &%s called										
ExtUtils::MM_Win32 library	R	ExtUtils::MM_Win32 (module)										
Binary == operator	R	Binary "==" operator										
bit string	R	bit string (definition)										
times	R	times (function)										
ExtUtils::MM_BeOS library	R	ExtUtils::MM_BeOS (module)										
undef routine	R	undef (function)										
TAP::Parser::Iterator::Array module	R	TAP::Parser::Iterator::Array (module)										
define class	R	class (definition)										
getpwuid method	R	getpwuid (function)										
Pod::Simple::Checker library	R	Pod::Simple::Checker (module)										
Perl 6?	R	What is Perl 6?										
remove duplicate elements from a list or array?	R	How can I remove duplicate elements from a list or array?										
chroot	R	chroot (function)										
define slurp	R	slurp (definition)										
DB_File	R	DB_File (module)										
ge routine	R	ge (function)										
IO Uncompress RawInflate library	R	IO::Uncompress::RawInflate (module)										
reset sub	R	reset (function)										
awk definition	R	awk (definition)										
Binary /	R	Binary "/" operator										
funny character definition	R	funny character (definition)										
Pod::Simple::PullParserTextToken	R	Pod::Simple::PullParserTextToken (module)										
socketpair	R	socketpair (function)										
Can't do inplace edit:  is not a regular file	R	Can't do inplace edit: %s is not a regular file										
owner definition	R	owner (definition)										
CHECK subroutine	R	CHECK (function)										
endservent	R	endservent (function)										
Unexpected constant lvalue entersub entry via type/targ :	R	Unexpected constant lvalue entersub entry via type/targ %d:%d										
Term::Cap module	R	Term::Cap (module)										
!=	R	Binary "!=" operator										
Filehandle  opened only for output	R	Filehandle %s opened only for output										
exp func	R	exp (function)										
Locale Currency	R	Locale::Currency (module)										
opendir routine	R	opendir (function)										
LIFO	R	LIFO (definition)										
sub	R	sub (function)										
shmread subroutine	R	shmread (function)										
__FILE__	R	__FILE__ (function)										
-l switch	R	-l [ octnum ]										
Text::Balanced module	R	Text::Balanced (module)										
ExtUtils::CBuilder::Platform::Windows library	R	ExtUtils::CBuilder::Platform::Windows (module)										
How do I sort a hash optionally by value instead of key	R	How do I sort a hash (optionally by value instead of key)?										
TAP::Formatter::Color package	R	TAP::Formatter::Color (module)										
I18N Langinfo package	R	I18N::Langinfo (module)										
closure?	R	What's a closure?										
Math BigInt library	R	Math::BigInt (module)										
Unknown charname ''	R	Unknown charname '%s'										
next sub	R	next (function)										
Module::Load::Conditional package	R	Module::Load::Conditional (module)										
ExtUtils Constant Utils	R	ExtUtils::Constant::Utils (module)										
How do I select a random element from an array	R	How do I select a random element from an array?										
get the unique keys from two hashes?	R	How can I get the unique keys from two hashes?										
binmode() on closed filehandle 	R	binmode() on closed filehandle %s										
File Spec package	R	File::Spec (module)										
superuser definition	R	superuser (definition)										
refcnt: fd %d%s	R	refcnt_inc: fd %d%s										
define instance method	R	instance method (definition)										
File::DosGlob	R	File::DosGlob (module)										
make match national character sets?	R	How can I make match national character sets?										
comment out a large block of Perl code	R	How can I comment out a large block of Perl code?										
accept routine	R	accept (function)										
getpgrp func	R	getpgrp (function)										
readdir subroutine	R	readdir (function)										
$[ used in  (did you mean $] ?)	R	$[ used in %s (did you mean $] ?)										
define bind	R	bind (definition)										
Encode Byte module	R	Encode::Byte (module)										
qr subroutine	R	qr (function)										
working directory	R	working directory (definition)										
getservent function	R	getservent (function)										
times routine	R	times (function)										
__SUB__ function	R	__SUB__ (function)										
TAP Parser Source package	R	TAP::Parser::Source (module)										
perform an operation on a series of integers?	R	How do I perform an operation on a series of integers?										
shift func	R	shift (function)										
How do I do anything	R	How do I do (anything)?										
substr	R	substr (function)										
ExtUtils Constant XS library	R	ExtUtils::Constant::XS (module)										
Memoize AnyDBM_File module	R	Memoize::AnyDBM_File (module)										
ExtUtils::testlib module	R	ExtUtils::testlib (module)										
pull out lines between two patterns that are themselves on different lines	R	How can I pull out lines between two patterns that are themselves on different lines?										
Archive::Tar	R	Archive::Tar (module)										
define working directory	R	working directory (definition)										
unless function	R	unless (function)										
bind func	R	bind (function)										
getservbyname	R	getservbyname (function)										
CPAN Queue	R	CPAN::Queue (module)										
Invalid hexadecimal number in \N{U+...} in regex; marked by <-- HERE in m//	R	Invalid hexadecimal number in \N{U+...} in regex; marked by <-- HERE in m/%s/										
TAP Base	R	TAP::Base (module)										
$-	R	$- (variable)										
first-come definition	R	first-come (definition)										
assignment definition	R	assignment (definition)										
Net Cmd library	R	Net::Cmd (module)										
Locale::Maketext::Simple module	R	Locale::Maketext::Simple (module)										
Fcntl	R	Fcntl (module)										
accept function	R	accept (function)										
Filter::Util::Call library	R	Filter::Util::Call (module)										
Text Balanced library	R	Text::Balanced (module)										
File Basename	R	File::Basename (module)										
gethostbyname	R	gethostbyname (function)										
sin subroutine	R	sin (function)										
trap control characters/signals?	R	How do I trap control characters/signals?										
match a regular expression thats in a variable	R	How do I match a regular expression that's in a variable?										
Insecure dependency in 	R	Insecure dependency in %s										
IPA	R	IPA (definition)										
NEXT module	R	NEXT (module)										
Wide character in 	R	Wide character in %s										
read in an entire file all at once	R	How can I read in an entire file all at once?										
pod =pod	R	=pod										
loop label	R	loop label (definition)										
do a in perl	R	How do I do a in perl?										
ExtUtils Command MM	R	ExtUtils::Command::MM (module)										
read email	R	How do I read email?										
Time localtime library	R	Time::localtime (module)										
panic: realloc, 	R	panic: realloc, %s										
IO::Uncompress::Inflate package	R	IO::Uncompress::Inflate (module)										
File Spec Win32	R	File::Spec::Win32 (module)										
Pod::Simple::PullParserEndToken module	R	Pod::Simple::PullParserEndToken (module)										
Unicode Normalize package	R	Unicode::Normalize (module)										
state func	R	state (function)										
B::Debug package	R	B::Debug (module)										
Digest file library	R	Digest::file (module)										
Memoize package	R	Memoize (module)										
define increment	R	increment (definition)										
PerlIO scalar library	R	PerlIO::scalar (module)										
int function	R	int (function)										
unlink subroutine	R	unlink (function)										
Unbalanced scopes:  more ENTERs than LEAVEs	R	Unbalanced scopes: %d more ENTERs than LEAVEs										
File Glob library	R	File::Glob (module)										
rewinddir sub	R	rewinddir (function)										
-a switch	R	-a										
dangling statement definition	R	dangling statement (definition)										
Net::NNTP package	R	Net::NNTP (module)										
STDOUT definition	R	STDOUT (definition)										
 found where operator expected	R	%s found where operator expected										
How can I do approximate matching	R	How can I do approximate matching?										
pp	R	pp (definition)										
Devel PPPort module	R	Devel::PPPort (module)										
close() on unopened filehandle 	R	close() on unopened filehandle %s										
Useless (?-) - don't use / modifier in regex; marked by <-- HERE in m//	R	Useless (?-%s) - don't use /%s modifier in regex; marked by <-- HERE in m/%s/										
chdir subroutine	R	chdir (function)										
define block buffering	R	block buffering (definition)										
Pod Simple HTMLBatch	R	Pod::Simple::HTMLBatch (module)										
Pod::Perldoc::ToRtf library	R	Pod::Perldoc::ToRtf (module)										
Why do some characters not uppercase or lowercase correctly	R	Why do some characters not uppercase or lowercase correctly?										
Test Builder Tester module	R	Test::Builder::Tester (module)										
decrement definition	R	decrement (definition)										
else subroutine	R	else (function)										
null character	R	null character (definition)										
-w option	R	-w										
umask sub	R	umask (function)										
Digest::SHA package	R	Digest::SHA (module)										
select function	R	select (function)										
Module::CoreList	R	Module::CoreList (module)										
Is there a way to hide perls command line from programs such as ps	R	Is there a way to hide perl's command line from programs such as "ps"?										
Plack and PSGI	R	What is Plack and PSGI?										
 failed--call queue aborted	R	%s failed--call queue aborted										
Lost precision when   by 1	R	Lost precision when %s %f by 1										
TAP Parser Multiplexer library	R	TAP::Parser::Multiplexer (module)										
sysopen sub	R	sysopen (function)										
Pod::Text::Overstrike module	R	Pod::Text::Overstrike (module)										
chr subroutine	R	chr (function)										
UNITCHECK method	R	UNITCHECK (function)										
evalbytes method	R	evalbytes (function)										
return	R	return (function)										
define parameter	R	parameter (definition)										
panic: fold_constants JMPENV_PUSH returned 	R	panic: fold_constants JMPENV_PUSH returned %d										
hope to use regular expressions without creating illegible and unmaintainable code	R	How can I hope to use regular expressions without creating illegible and unmaintainable code?										
getprotoent routine	R	getprotoent (function)										
recv method	R	recv (function)										
rename	R	rename (function)										
XSUB definition	R	XSUB (definition)										
canonical	R	canonical (definition)										
pod =head1 command	R	=head1,										
IO::Poll package	R	IO::Poll (module)										
syscall subroutine	R	syscall (function)										
qr	R	qr (function)										
require sub	R	require (function)										
stat routine	R	stat (function)										
write into a string	R	How can I write() into a string?										
Test More module	R	Test::More (module)										
do an atexit or setjmplongjmp Exception handling	R	How can I do an atexit() or setjmp()/longjmp()? (Exception handling)										
define variable interpolation	R	variable interpolation (definition)										
glob function	R	glob (function)										
processmodify each element of an array	R	How do I process/modify each element of an array?										
__LINE__ func	R	__LINE__ (function)										
Variable length lookbehind not implemented in regex m//	R	Variable length lookbehind not implemented in regex m/%s/										
ExtUtils::CBuilder::Platform::Windows	R	ExtUtils::CBuilder::Platform::Windows (module)										
TAP Parser Result Pragma	R	TAP::Parser::Result::Pragma (module)										
-S option	R	-S										
shift method	R	shift (function)										
Why doesnt open return an error when a pipe open fails	R	Why doesn't open() return an error when a pipe open fails?										
define relational operator	R	relational operator (definition)										
static variable definition	R	static variable (definition)										
Pod Simple Checker module	R	Pod::Simple::Checker (module)										
Pod Simple RTF module	R	Pod::Simple::RTF (module)										
Net::SMTP package	R	Net::SMTP (module)										
How do I handle linked lists	R	How do I handle linked lists?										
shmwrite	R	shmwrite (function)										
pod =begin command	R	=begin										
Math::BigFloat library	R	Math::BigFloat (module)										
When should I decode or encode	R	When should I decode or encode?										
"" may clash with future reserved word	R	"%s" may clash with future reserved word										
ExtUtils MM_Darwin library	R	ExtUtils::MM_Darwin (module)										
When shouldnt I program in Perl	R	When shouldn't I program in Perl?										
define right shift	R	right shift (definition)										
Tie Hash NamedCapture package	R	Tie::Hash::NamedCapture (module)										
Can't find Unicode property definition ""	R	Can't find Unicode property definition "%s"										
binary	R	binary (definition)										
flock() on closed filehandle 	R	flock() on closed filehandle %s										
Digest::base module	R	Digest::base (module)										
caller subroutine	R	caller (function)										
x operator	R	Binary "x" operator										
tied subroutine	R	tied (function)										
semop func	R	semop (function)										
Pod Perldoc module	R	Pod::Perldoc (module)										
find out my current or calling package?	R	How can I find out my current or calling package?										
invocant definition	R	invocant (definition)										
getppid sub	R	getppid (function)										
Filter Simple module	R	Filter::Simple (module)										
Unicode::UCD module	R	Unicode::UCD (module)										
atan2 func	R	atan2 (function)										
How do I start a process in the background	R	How do I start a process in the background?										
conditional	R	conditional (definition)										
App Prove library	R	App::Prove (module)										
seek function	R	seek (function)										
endprotoent func	R	endprotoent (function)										
destroy definition	R	destroy (definition)										
inheritance definition	R	inheritance (definition)										
${^MATCH}	R	${^MATCH} (variable)										
symbolic link definition	R	symbolic link (definition)										
Pod Select package	R	Pod::Select (module)										
TAP Base package	R	TAP::Base (module)										
length subroutine	R	length (function)										
hubris definition	R	hubris (definition)										
Can't remove : , skipping file	R	Can't remove %s: %s, skipping file										
define multidimensional array	R	multidimensional array (definition)										
p modifier	R	/p regular expression modifier										
Net Cmd module	R	Net::Cmd (module)										
Can't goto subroutine from an eval-	R	Can't goto subroutine from an eval-%s										
TAP Parser Result module	R	TAP::Parser::Result (module)										
Pod Simple LinkSection module	R	Pod::Simple::LinkSection (module)										
How do I find the users mail address	R	How do I find the user's mail address?										
Tie::Memoize library	R	Tie::Memoize (module)										
define line	R	line (definition)										
Pod Simple PullParserStartToken package	R	Pod::Simple::PullParserStartToken (module)										
Time Seconds module	R	Time::Seconds (module)										
unpack	R	unpack (function)										
getpwnam function	R	getpwnam (function)										
ternary	R	ternary (definition)										
$REAL_GROUP_ID	R	$( (variable)										
Sequence \... not terminated in regex; marked by <-- HERE in m//	R	Sequence \%s... not terminated in regex; marked by <-- HERE in m/%s/										
Term::ReadLine module	R	Term::ReadLine (module)										
How do I find yesterdays date	R	How do I find yesterday's date?										
chr function	R	chr (function)										
shared memory	R	shared memory (definition)										
Data Dumper	R	Data::Dumper (module)										
define hubris	R	hubris (definition)										
binmode	R	binmode (function)										
define soft reference	R	soft reference (definition)										
cmp routine	R	cmp (function)										
Encode::TW package	R	Encode::TW (module)										
Net::Config library	R	Net::Config (module)										
TAP::Parser::Scheduler package	R	TAP::Parser::Scheduler (module)										
I dont have a C compiler How can I build my own Perl interpreter	R	I don't have a C compiler. How can I build my own Perl interpreter?										
How can I hope to use regular expressions without creating illegible and unmaintainable code	R	How can I hope to use regular expressions without creating illegible and unmaintainable code?										
define PAUSE	R	PAUSE (definition)										
File Spec Unix library	R	File::Spec::Unix (module)										
expression	R	expression (definition)										
newline	R	newline (definition)										
Invalid quantifier in {,} in regex; marked by <-- HERE in m//	R	Invalid quantifier in {,} in regex; marked by <-- HERE in m/%s/										
Encode CN library	R	Encode::CN (module)										
File::Spec::Epoc	R	File::Spec::Epoc (module)										
App Prove State Result Test library	R	App::Prove::State::Result::Test (module)										
port	R	port (definition)										
How do I validate input	R	How do I validate input?										
pipe function	R	pipe (function)										
 Programming Tools	R	: Programming Tools										
srand subroutine	R	srand (function)										
getgrent func	R	getgrent (function)										
race condition definition	R	race condition (definition)										
Tie::Array module	R	Tie::Array (module)										
Net::Netrc package	R	Net::Netrc (module)										
ExtUtils::MM_Darwin package	R	ExtUtils::MM_Darwin (module)										
endnetent sub	R	endnetent (function)										
TAP Parser Result Unknown module	R	TAP::Parser::Result::Unknown (module)										
telldir subroutine	R	telldir (function)										
setnetent function	R	setnetent (function)										
DBM	R	DBM (definition)										
define port	R	port (definition)										
Net::Domain	R	Net::Domain (module)										
How do I make a system exit on controlC	R	How do I make a system() exit on control-C?										
application	R	application (definition)										
Memoize::Storable	R	Memoize::Storable (module)										
Pod Functions library	R	Pod::Functions (module)										
Memoize::ExpireTest library	R	Memoize::ExpireTest (module)										
-l flag	R	-l [ octnum ]										
exec definition	R	exec (definition)										
call by value	R	call by value (definition)										
ioctl func	R	ioctl (function)										
Unknown verb pattern '' in regex; marked by <-- HERE in m//	R	Unknown verb pattern '%s' in regex; marked by <-- HERE in m/%s/										
binmode subroutine	R	binmode (function)										
crypt function	R	crypt (function)										
Can't exec 	R	Can't exec %s										
$PERLDB	R	$^P (variable)										
free an array or hash so my program shrinks	R	How can I free an array or hash so my program shrinks?										
Unterminated verb pattern argument in regex; marked by <-- HERE in m//	R	Unterminated verb pattern argument in regex; marked by <-- HERE in m/%s/										
sleep	R	sleep (function)										
an extension?	R	What's an extension?										
User pwent	R	User::pwent (module)										
Cwd package	R	Cwd (module)										
How do I find which modules are installed on my system	R	How do I find which modules are installed on my system?										
define zombie	R	zombie (definition)										
substitute caseinsensitively on the LHS while preserving case on the RHS	R	How do I substitute case-insensitively on the LHS while preserving case on the RHS?										
tell subroutine	R	tell (function)										
-T flag	R	-T										
-M [ - ] module	R	-[mM] [ - ] module=arg[,arg]...										
TAP::Parser::Result::Unknown	R	TAP::Parser::Result::Unknown (module)										
define symbol table	R	symbol table (definition)										
public domain definition	R	public domain (definition)										
IO Uncompress Bunzip2 module	R	IO::Uncompress::Bunzip2 (module)										
@LAST_MATCH_END (variable)	R	@+ (variable)										
getgrgid subroutine	R	getgrgid (function)										
%SIG	R	%SIG (variable)										
define asynchronous	R	asynchronous (definition)										
ExtUtils::MakeMaker::Tutorial package	R	ExtUtils::MakeMaker::Tutorial (module)										
TAP::Formatter::Console::ParallelSession package	R	TAP::Formatter::Console::ParallelSession (module)										
Pod::Simple::Methody module	R	Pod::Simple::Methody (module)										
-X method	R	-X (function)										
Net Ping module	R	Net::Ping (module)										
How do I remove HTML from a string	R	How do I remove HTML from a string?										
Pod Simple PullParserToken	R	Pod::Simple::PullParserToken (module)										
define descriptor	R	descriptor (definition)										
$LIST_SEPARATOR (variable)	R	$" (variable)										
How do I print to more than one file at once	R	How do I print to more than one file at once?										
Illegal character in prototype for  : 	R	Illegal character in prototype for %s : %s										
I18N LangTags module	R	I18N::LangTags (module)										
Ambiguous use of - resolved as -&()	R	Ambiguous use of -%s resolved as -&%s()										
ExtUtils::MM_QNX	R	ExtUtils::MM_QNX (module)										
tokenizing	R	tokenizing (definition)										
CPAN::FirstTime library	R	CPAN::FirstTime (module)										
File::Spec::OS2 library	R	File::Spec::OS2 (module)										
How can I make the Perl equivalent of a C structureC++ classhash or array of hashes or arrays	R	How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?										
debug my Perl programs	R	How do I debug my Perl programs?										
reverse function	R	reverse (function)										
ExtUtils::CBuilder::Platform::Windows module	R	ExtUtils::CBuilder::Platform::Windows (module)										
define NFS	R	NFS (definition)										
Test::More	R	Test::More (module)										
code subpattern	R	code subpattern (definition)										
reset routine	R	reset (function)										
hash definition	R	hash (definition)										
$EFFECTIVE_USER_ID (variable)	R	$> (variable)										
panic: goto, type=, ix=	R	panic: goto, type=%u, ix=%ld										
ExtUtils MM_Darwin package	R	ExtUtils::MM_Darwin (module)										
loop definition	R	loop (definition)										
What about binary data like images	R	What about binary data, like images?										
setpriority routine	R	setpriority (function)										
Math::BigFloat module	R	Math::BigFloat (module)										
Net FTP package	R	Net::FTP (module)										
-0	R	-0 [ octal/hexadecimal ]										
TAP::Parser::Result::YAML library	R	TAP::Parser::Result::YAML (module)										
Invalid mro name: ''	R	Invalid mro name: '%s'										
ExtUtils::MakeMaker library	R	ExtUtils::MakeMaker (module)										
pumpkin definition	R	pumpkin (definition)										
redirect to another page?	R	How do I redirect to another page?										
global	R	global (definition)										
Binary ne	R	Binary "ne" operator										
IO::Socket library	R	IO::Socket (module)										
define setuid	R	setuid (definition)										
define callback	R	callback (definition)										
ExtUtils::MY library	R	ExtUtils::MY (module)										
Pod Parser	R	Pod::Parser (module)										
File Spec Cygwin library	R	File::Spec::Cygwin (module)										
setsockopt() on closed socket 	R	setsockopt() on closed socket %s										
/ operator	R	Binary "/" operator										
Encode::JP library	R	Encode::JP (module)										
Net hostent package	R	Net::hostent (module)										
umask subroutine	R	umask (function)										
B::Xref	R	B::Xref (module)										
IO::Socket::UNIX package	R	IO::Socket::UNIX (module)										
gmtime routine	R	gmtime (function)										
qw routine	R	qw (function)										
$*	R	$* (variable)										
endhostent subroutine	R	endhostent (function)										
rewinddir function	R	rewinddir (function)										
ExtUtils Install package	R	ExtUtils::Install (module)										
Unknown process  sent message to prime_env_iter: 	R	Unknown process %x sent message to prime_env_iter: %s										
getnetbyname func	R	getnetbyname (function)										
Text::Wrap	R	Text::Wrap (module)										
define magical variables	R	magical variables (definition)										
getgrgid sub	R	getgrgid (function)										
subpattern	R	subpattern (definition)										
Unrecognized escape \ in character class in regex; marked by <-- HERE in m//	R	Unrecognized escape \%c in character class in regex; marked by <-- HERE in m/%s/										
mkdir	R	mkdir (function)										
script kiddie definition	R	script kiddie (definition)										
TCP	R	TCP (definition)										
define indirect filehandle	R	indirect filehandle (definition)										
Time::tm module	R	Time::tm (module)										
TAP Parser Result Test	R	TAP::Parser::Result::Test (module)										
define stat structure	R	stat structure (definition)										
TAP::Parser::Source module	R	TAP::Parser::Source (module)										
Time::Local	R	Time::Local (module)										
mprotect for COW string   failed with 	R	mprotect for COW string %p %u failed with %d										
Corrupt malloc ptr 0x at 0x	R	Corrupt malloc ptr 0x%x at 0x%x										
define currently selected output channel	R	currently selected output channel (definition)										
Quantifier in {,} bigger than  in regex; marked by <-- HERE in m//	R	Quantifier in {,} bigger than %d in regex; marked by <-- HERE in m/%s/										
encapsulation	R	encapsulation (definition)										
TAP::Formatter::Color module	R	TAP::Formatter::Color (module)										
gdbm store returned , errno , key ""	R	gdbm store returned %d, errno %d, key "%s"										
Pod::Simple::DumpAsText library	R	Pod::Simple::DumpAsText (module)										
define hash table	R	hash table (definition)										
ExtUtils Liblist library	R	ExtUtils::Liblist (module)										
Why arent my random numbers random	R	Why aren't my random numbers random?										
define embedding	R	embedding (definition)										
sort a hash optionally by value instead of key	R	How do I sort a hash (optionally by value instead of key)?										
Text::Abbrev library	R	Text::Abbrev (module)										
shmwrite routine	R	shmwrite (function)										
FMTEYEWTK	R	FMTEYEWTK (definition)										
read() on unopened filehandle 	R	read() on unopened filehandle %s										
key definition	R	key (definition)										
TAP::Parser::IteratorFactory	R	TAP::Parser::IteratorFactory (module)										
IPC::SysV package	R	IPC::SysV (module)										
pipe func	R	pipe (function)										
sysread method	R	sysread (function)										
 syntax OK	R	%s syntax OK										
How do I close a processs filehandle without waiting for it to complete	R	How do I close a process's filehandle without waiting for it to complete?										
Locale::Currency package	R	Locale::Currency (module)										
__PACKAGE__ method	R	__PACKAGE__ (function)										
key	R	key (definition)										
define anonymous	R	anonymous (definition)										
Net::netent library	R	Net::netent (module)										
ExtUtils::MakeMaker::Tutorial library	R	ExtUtils::MakeMaker::Tutorial (module)										
TAP Object module	R	TAP::Object (module)										
 has too many errors	R	%s has too many errors										
IO Select module	R	IO::Select (module)										
Pod::Text::Color library	R	Pod::Text::Color (module)										
Params Check	R	Params::Check (module)										
prevent addition of unwanted keys into a hash?	R	How can I prevent addition of unwanted keys into a hash?										
O library	R	O (module)										
getpriority function	R	getpriority (function)										
Pod ParseUtils	R	Pod::ParseUtils (module)										
exists subroutine	R	exists (function)										
accept sub	R	accept (function)										
\	R	Unary "\" operator										
What is socketph and where do I get it	R	What is socket.ph and where do I get it?										
die	R	die (function)										
define feeping creaturism	R	feeping creaturism (definition)										
How can I split a characterdelimited string except when inside character	R	How can I split a [character]-delimited string except when inside [character]?										
Can't do ("") on non-UTF-8 locale; resolved to "".	R	Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".										
define static variable	R	static variable (definition)										
-d flag	R	-dt										
Pod Perldoc ToPod library	R	Pod::Perldoc::ToPod (module)										
Binary . operator	R	Binary "." operator										
How do I permute N elements of a list	R	How do I permute N elements of a list?										
Search::Dict	R	Search::Dict (module)										
else sub	R	else (function)										
Text::Balanced library	R	Text::Balanced (module)										
Pod::Parser package	R	Pod::Parser (module)										
How do I clear a package	R	How do I clear a package?										
@LAST_MATCH_START	R	@- (variable)										
Time::Piece	R	Time::Piece (module)										
: Expression syntax	R	%s: Expression syntax										
IO Zlib module	R	IO::Zlib (module)										
DynaLoader package	R	DynaLoader (module)										
END sub	R	END (function)										
define line number	R	line number (definition)										
Pod::Text library	R	Pod::Text (module)										
function definition	R	function (definition)										
Encode GSM0338	R	Encode::GSM0338 (module)										
Useless use of  in void context	R	Useless use of %s in void context										
$OUTPUT_FIELD_SEPARATOR (variable)	R	$, (variable)										
rindex sub	R	rindex (function)										
binary definition	R	binary (definition)										
Possible unintended interpolation of  in string	R	Possible unintended interpolation of %s in string										
setpgrp function	R	setpgrp (function)										
Pod Simple Text	R	Pod::Simple::Text (module)										
cracker definition	R	cracker (definition)										
ExtUtils Packlist	R	ExtUtils::Packlist (module)										
define program	R	program (definition)										
CPAN::Distroprefs	R	CPAN::Distroprefs (module)										
Perl	R	What is Perl?										
ExtUtils Install library	R	ExtUtils::Install (module)										
IO Uncompress Inflate library	R	IO::Uncompress::Inflate (module)										
getnetbyaddr subroutine	R	getnetbyaddr (function)										
$LAST_PAREN_MATCH	R	$+ (variable)										
Class Struct package	R	Class::Struct (module)										
sysread function	R	sysread (function)										
autoload definition	R	autoload (definition)										
pod command	R	pod command (definition)										
How can I tell whether a certain element is contained in a list or array	R	How can I tell whether a certain element is contained in a list or array?										
formline sub	R	formline (function)										
$OUTPUT_RECORD_SEPARATOR (variable)	R	$\ (variable)										
close subroutine	R	close (function)										
autosplit	R	autosplit (definition)										
Pod::Simple::XHTML module	R	Pod::Simple::XHTML (module)										
Devel PPPort	R	Devel::PPPort (module)										
CPAN Kwalify library	R	CPAN::Kwalify (module)										
DirHandle module	R	DirHandle (module)										
POSIX syntax [= =] is reserved for future extensions in regex; marked by <-- HERE in m//	R	POSIX syntax [= =] is reserved for future extensions in regex; marked by <-- HERE in m/%s/										
Tie Handle package	R	Tie::Handle (module)										
How do I crossreference my Perl programs	R	How do I cross-reference my Perl programs?										
Memoize::ExpireTest	R	Memoize::ExpireTest (module)										
difference between delete and undef with hashes	R	What's the difference between "delete" and "undef" with hashes?										
send routine	R	send (function)										
TAP Parser Iterator Process module	R	TAP::Parser::Iterator::Process (module)										
difference between a list and an array	R	What is the difference between a list and an array?										
program generator	R	program generator (definition)										
MIME QuotedPrint module	R	MIME::QuotedPrint (module)										
Encode::CN::HZ package	R	Encode::CN::HZ (module)										
define connection	R	connection (definition)										
use a filehandle indirectly?	R	How can I use a filehandle indirectly?										
%LAST_PAREN_MATCH	R	%+ (variable)										
PerlIO::scalar	R	PerlIO::scalar (module)										
ExtUtils::MM_Cygwin module	R	ExtUtils::MM_Cygwin (module)										
TAP Parser Grammar library	R	TAP::Parser::Grammar (module)										
Locale::Maketext::Guts module	R	Locale::Maketext::Guts (module)										
define C	R	C (definition)										
chroot func	R	chroot (function)										
exists routine	R	exists (function)										
Net servent package	R	Net::servent (module)										
define glob	R	glob (definition)										
TAP Parser Result Bailout package	R	TAP::Parser::Result::Bailout (module)										
install a module from CPAN	R	How do I install a module from CPAN?										
Pod::Find library	R	Pod::Find (module)										
ge method	R	ge (function)										
kill routine	R	kill (function)										
format definition	R	format (definition)										
fc func	R	fc (function)										
tie function	R	tie (function)										
define funny character	R	funny character (definition)										
File::Spec library	R	File::Spec (module)										
How do I use an SQL database	R	How do I use an SQL database?										
directory	R	directory (definition)										
getgrnam func	R	getgrnam (function)										
Encode::TW module	R	Encode::TW (module)										
endservent func	R	endservent (function)										
server	R	server (definition)										
output my numbers with commas added?	R	How can I output my numbers with commas added?										
difference between deep and shallow binding?	R	What's the difference between deep and shallow binding?										
listen function	R	listen (function)										
shmctl sub	R	shmctl (function)										
socket subroutine	R	socket (function)										
-i flag	R	-i [ extension ]										
Memoize ExpireTest package	R	Memoize::ExpireTest (module)										
statement modifier definition	R	statement modifier (definition)										
How do I set CPU limits	R	How do I set CPU limits?										
formline subroutine	R	formline (function)										
IO::Uncompress::Gunzip library	R	IO::Uncompress::Gunzip (module)										
LIFO definition	R	LIFO (definition)										
Test::Simple module	R	Test::Simple (module)										
get a random number between X and Y?	R	How do I get a random number between X and Y?										
m routine	R	m (function)										
How do I install a module from CPAN	R	How do I install a module from CPAN?										
define CPAN	R	CPAN (definition)										
AnyDBM_File	R	AnyDBM_File (module)										
m method	R	m (function)										
Whats the difference between delete and undef with hashes	R	What's the difference between "delete" and "undef" with hashes?										
IO Socket UNIX	R	IO::Socket::UNIX (module)										
Encode package	R	Encode (module)										
CPAN::Kwalify package	R	CPAN::Kwalify (module)										
@_	R	@_ (variable)										
pos sub	R	pos (function)										
pod code text	R	C<code>										
Thread library	R	Thread (module)										
Pod::Perldoc::ToNroff library	R	Pod::Perldoc::ToNroff (module)										
define bundle	R	bundle (definition)										
dispatch	R	dispatch (definition)										
relational operator definition	R	relational operator (definition)										
ExtUtils MM_VMS module	R	ExtUtils::MM_VMS (module)										
IP definition	R	IP (definition)										
exp function	R	exp (function)										
$`	R	$` (variable)										
Devel::PPPort module	R	Devel::PPPort (module)										
IO::Uncompress::RawInflate library	R	IO::Uncompress::RawInflate (module)										
define dwimmer	R	dwimmer (definition)										
Pod Perldoc BaseTo module	R	Pod::Perldoc::BaseTo (module)										
open routine	R	open (function)										
define monger	R	monger (definition)										
define autogeneration	R	autogeneration (definition)										
Net Netrc module	R	Net::Netrc (module)										
TAP::Parser::Result::Bailout package	R	TAP::Parser::Result::Bailout (module)										
$EFFECTIVE_GROUP_ID	R	$) (variable)										
set CPU limits	R	How do I set CPU limits?										
find out my current or calling package	R	How can I find out my current or calling package?										
Where are modules installed	R	Where are modules installed?										
Encode::Encoder module	R	Encode::Encoder (module)										
Thread package	R	Thread (module)										
Net::Cmd library	R	Net::Cmd (module)										
quotemeta function	R	quotemeta (function)										
define RFC	R	RFC (definition)										
ExtUtils::Packlist package	R	ExtUtils::Packlist (module)										
How do I open a file without blocking	R	How do I open a file without blocking?										
virtual	R	virtual (definition)										
readlink method	R	readlink (function)										
ExtUtils Embed package	R	ExtUtils::Embed (module)										
redefine a builtin function, operator, or method?	R	How do I redefine a builtin function, operator, or method?										
tie routine	R	tie (function)										
tainted	R	tainted (definition)										
Invalid module name  with - option: contains single ':'	R	Invalid module name %s with -%c option: contains single ':'										
identifier	R	identifier (definition)										
$LAST_SUBMATCH_RESULT	R	$^N (variable)										
ExtUtils::MM_VOS library	R	ExtUtils::MM_VOS (module)										
TAP::Formatter::Base	R	TAP::Formatter::Base (module)										
B Terse	R	B::Terse (module)										
Pod::Select package	R	Pod::Select (module)										
Encode KR 2022_KR package	R	Encode::KR::2022_KR (module)										
File::Spec::Unix library	R	File::Spec::Unix (module)										
setgid definition	R	setgid (definition)										
Tie Memoize	R	Tie::Memoize (module)										
fork a daemon process?	R	How do I fork a daemon process?										
formal arguments	R	formal arguments (definition)										
**	R	Binary "**" operator										
Search::Dict module	R	Search::Dict (module)										
Devel Peek module	R	Devel::Peek (module)										
Cannot compress  in pack	R	Cannot compress %f in pack										
use the perlfaq	R	How to use the perlfaq										
sub function	R	sub (function)										
File DosGlob module	R	File::DosGlob (module)										
How do I shuffle an array randomly	R	How do I shuffle an array randomly?										
define iteration	R	iteration (definition)										
Test::Builder::Tester	R	Test::Builder::Tester (module)										
TAP Formatter File library	R	TAP::Formatter::File (module)										
localtime() too large	R	localtime(%f) too large										
Net Time	R	Net::Time (module)										
Code point 0x is not Unicode, may not be portable	R	Code point 0x%X is not Unicode, may not be portable										
IPC SharedMem module	R	IPC::SharedMem (module)										
Memoize::AnyDBM_File module	R	Memoize::AnyDBM_File (module)										
TAP::Parser	R	TAP::Parser (module)										
true definition	R	true (definition)										
$< > ($1, $2, ...)	R	$< > ($1, $2, ...) (variable)										
tied method	R	tied (function)										
define capturing	R	capturing (definition)										
passreturn a Function FileHandle Array Hash Method Regex	R	How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?										
ExtUtils MM_VMS library	R	ExtUtils::MM_VMS (module)										
and sub	R	and (function)										
one-liner definition	R	one-liner (definition)										
Attempt to delete disallowed key '' from a restricted hash	R	Attempt to delete disallowed key '%s' from a restricted hash										
File::Compare package	R	File::Compare (module)										
Module Load Conditional library	R	Module::Load::Conditional (module)										
goto func	R	goto (function)										
command buffering	R	command buffering (definition)										
sub subroutine	R	sub (function)										
grep sub	R	grep (function)										
Binary !=	R	Binary "!=" operator										
truncating definition	R	truncating (definition)										
-c flag	R	-c										
Digest::base package	R	Digest::base (module)										
ExtUtils::Constant library	R	ExtUtils::Constant (module)										
standard error	R	standard error (definition)										
command definition	R	command (definition)										
bold text pod	R	B<text>										
TAP Parser Result Test library	R	TAP::Parser::Result::Test (module)										
Unmatched '' in POSIX class in regex; marked by <-- HERE in m//	R	Unmatched '%c' in POSIX class in regex; marked by <-- HERE in m/%s/										
define character property	R	character property (definition)										
redirect to another page	R	How do I redirect to another page?										
profile my Perl programs?	R	How do I profile my Perl programs?										
prototype sub	R	prototype (function)										
AutoSplit module	R	AutoSplit (module)										
DBM_Filter::null	R	DBM_Filter::null (module)										
temporarily block warnings	R	How do I temporarily block warnings?										
Use \x{...} for more than two hex characters in regex; marked by <-- HERE in m//	R	Use \x{...} for more than two hex characters in regex; marked by <-- HERE in m/%s/										
check a valid mail address	R	How do I check a valid mail address?										
log sub	R	log (function)										
How do I find out if Im running interactively or not	R	How do I find out if I'm running interactively or not?										
pack arrays of doubles or floats for XS code?	R	How do I pack arrays of doubles or floats for XS code?										
Exporter	R	Exporter (module)										
Binary ne operator	R	Binary "ne" operator										
IO::Handle->input_record_separator( EXPR )	R	$/ (variable)										
Net::POP3 library	R	Net::POP3 (module)										
endhostent function	R	endhostent (function)										
switch	R	switch (definition)										
delete function	R	delete (function)										
AutoLoader	R	AutoLoader (module)										
File::Temp library	R	File::Temp (module)										
getpwuid function	R	getpwuid (function)										
syswrite subroutine	R	syswrite (function)										
access or change N characters of a string	R	How can I access or change N characters of a string?										
Pod::Text::Color	R	Pod::Text::Color (module)										
Getopt::Std package	R	Getopt::Std (module)										
Using just the first character returned by \N{} in character class in regex; marked by <-- HERE in m//	R	Using just the first character returned by \N{} in character class in regex; marked by <-- HERE in m/%s/										
endian	R	endian (definition)										
Why dont Perl oneliners work on my DOSMacVMS system	R	Why don't Perl one-liners work on my DOS/Mac/VMS system?										
ExtUtils::MM_Unix library	R	ExtUtils::MM_Unix (module)										
Devel Peek package	R	Devel::Peek (module)										
binary operator	R	binary operator (definition)										
TAP::Parser::Scheduler::Spinner	R	TAP::Parser::Scheduler::Spinner (module)										
ExtUtils MM_QNX module	R	ExtUtils::MM_QNX (module)										
race condition	R	race condition (definition)										
parameter	R	parameter (definition)										
ExtUtils::CBuilder package	R	ExtUtils::CBuilder (module)										
ExtUtils Command	R	ExtUtils::Command (module)										
How do I trap control characterssignals	R	How do I trap control characters/signals?										
define symbol	R	symbol (definition)										
$FORMAT_LINE_BREAK_CHARACTERS (variable)	R	$: (variable)										
-i option	R	-i [ extension ]										
setpgrp subroutine	R	setpgrp (function)										
define lexical variable	R	lexical variable (definition)										
Test::Builder::Module	R	Test::Builder::Module (module)										
shmget func	R	shmget (function)										
say	R	say (function)										
open source software definition	R	open source software (definition)										
How do I decode encrypted password files	R	How do I decode encrypted password files?										
ExtUtils MM_NW5 module	R	ExtUtils::MM_NW5 (module)										
What if my question isnt answered in the FAQ	R	What if my question isn't answered in the FAQ?										
glob func	R	glob (function)										
destination: 	R	destination: %s										
__LINE__ sub	R	__LINE__ (function)										
define parsing	R	parsing (definition)										
length function	R	length (function)										
Sys::Hostname	R	Sys::Hostname (module)										
Digest::base library	R	Digest::base (module)										
Pod::Simple::HTML module	R	Pod::Simple::HTML (module)										
IO::Socket::INET	R	IO::Socket::INET (module)										
null list	R	null list (definition)										
static method	R	static method (definition)										
TAP Harness	R	TAP::Harness (module)										
Pod::Checker library	R	Pod::Checker (module)										
>=	R	Binary ">=" operator										
Pod::Simple::PullParserEndToken library	R	Pod::Simple::PullParserEndToken (module)										
define setgid	R	setgid (definition)										
transliterate definition	R	transliterate (definition)										
Pod::Perldoc::BaseTo package	R	Pod::Perldoc::BaseTo (module)										
atan2 sub	R	atan2 (function)										
How do I adopt or take over a module already on CPAN	R	How do I adopt or take over a module already on CPAN?										
NV	R	NV (definition)										
ExtUtils::MM_UWIN library	R	ExtUtils::MM_UWIN (module)										
File Find library	R	File::Find (module)										
getprotobyname func	R	getprotobyname (function)										
Pod Simple DumpAsText library	R	Pod::Simple::DumpAsText (module)										
IO::Uncompress::Base module	R	IO::Uncompress::Base (module)										
I18N::LangTags library	R	I18N::LangTags (module)										
Attribute::Handlers	R	Attribute::Handlers (module)										
unlink function	R	unlink (function)										
IO Compress Zip module	R	IO::Compress::Zip (module)										
App::Prove::State module	R	App::Prove::State (module)										
No  allowed while running setuid	R	No %s allowed while running setuid										
define core dump	R	core dump (definition)										
TAP Parser IteratorFactory library	R	TAP::Parser::IteratorFactory (module)										
HANDLE->format_top_name(EXPR) (variable)	R	$^ (variable)										
length	R	length (function)										
ExtUtils MM_UWIN package	R	ExtUtils::MM_UWIN (module)										
PATH definition	R	PATH (definition)										
Pod::Simple::PullParserTextToken package	R	Pod::Simple::PullParserTextToken (module)										
stat method	R	stat (function)										
freely redistributable	R	freely redistributable (definition)										
unlink	R	unlink (function)										
Parsing code internal error ()	R	Parsing code internal error (%s)										
granularity definition	R	granularity (definition)										
closedir subroutine	R	closedir (function)										
export	R	export (definition)										
split	R	split (function)										
handle binary data correctly?	R	How do I handle binary data correctly?										
link routine	R	link (function)										
Can't make loaded symbols global on this platform while loading 	R	Can't make loaded symbols global on this platform while loading %s										
Pod Simple XMLOutStream	R	Pod::Simple::XMLOutStream (module)										
Is it safe to return a reference to local or lexical data	R	Is it safe to return a reference to local or lexical data?										
Why doesnt glob get all the files	R	Why doesn't glob("*.*") get all the files?										
Invalid  attribute: 	R	Invalid %s attribute: %s										
define compile time	R	compile time (definition)										
B Terse module	R	B::Terse (module)										
Bareword "" refers to nonexistent package	R	Bareword "%s" refers to nonexistent package										
Benchmark	R	Benchmark (module)										
hexadecimal	R	hexadecimal (definition)										
Net Domain library	R	Net::Domain (module)										
endservent function	R	endservent (function)										
define binary operator	R	binary operator (definition)										
Sys Syslog library	R	Sys::Syslog (module)										
Encode KR library	R	Encode::KR (module)										
switch definition	R	switch (definition)										
File::Temp package	R	File::Temp (module)										
IO::Uncompress::Bunzip2 library	R	IO::Uncompress::Bunzip2 (module)										
define host	R	host (definition)										
FileHandle package	R	FileHandle (module)										
lexical analysis	R	lexical analysis (definition)										
map sub	R	map (function)										
/p	R	/p regular expression modifier										
Pod::Simple::Checker package	R	Pod::Simple::Checker (module)										
exp routine	R	exp (function)										
File Spec OS2	R	File::Spec::OS2 (module)										
Can't open : 	R	Can't open %s: %s										
Net protoent module	R	Net::protoent (module)										
Pod Simple PullParserTextToken library	R	Pod::Simple::PullParserTextToken (module)										
our	R	our (function)										
Pern	R	Pern (definition)										
Pod Simple XMLOutStream package	R	Pod::Simple::XMLOutStream (module)										
Unsuccessful  on filename containing newline	R	Unsuccessful %s on filename containing newline										
Encode Encoding package	R	Encode::Encoding (module)										
define IPC	R	IPC (definition)										
read() on closed filehandle 	R	read() on closed filehandle %s										
length func	R	length (function)										
endgrent func	R	endgrent (function)										
symbol definition	R	symbol (definition)										
ExtUtils MM_Unix module	R	ExtUtils::MM_Unix (module)										
Encode::Symbol module	R	Encode::Symbol (module)										
-W option	R	-W										
I still dont get locking I just want to increment the number in the file How can I do this	R	I still don't get locking. I just want to increment the number in the file. How can I do this?										
group	R	group (definition)										
gmtime function	R	gmtime (function)										
$FORMAT_PAGE_NUMBER (variable)	R	$% (variable)										
define code generator	R	code generator (definition)										
Pod Perldoc ToTk package	R	Pod::Perldoc::ToTk (module)										
syswrite func	R	syswrite (function)										
IPC Cmd	R	IPC::Cmd (module)										
eof routine	R	eof (function)										
whitespace	R	whitespace (definition)										
What is Plack and PSGI	R	What is Plack and PSGI?										
Can't use an undefined value as  reference	R	Can't use an undefined value as %s reference										
Devel::PPPort library	R	Devel::PPPort (module)										
__FILE__ subroutine	R	__FILE__ (function)										
TAP::Parser::Multiplexer library	R	TAP::Parser::Multiplexer (module)										
Label not found for "redo "	R	Label not found for "redo %s"										
Binary || operator	R	Binary "||" operator										
chroot function	R	chroot (function)										
How do I automate an HTML form submission	R	How do I automate an HTML form submission?										
$REAL_USER_ID	R	$< (variable)										
assertion definition	R	assertion (definition)										
E formatting code	R	E<escape>										
Pod Simple XHTML package	R	Pod::Simple::XHTML (module)										
Can't open error file  as stderr	R	Can't open error file %s as stderr										
Text Wrap module	R	Text::Wrap (module)										
Time::Seconds library	R	Time::Seconds (module)										
-X function	R	-X (function)										
How can I find out my current or calling package	R	How can I find out my current or calling package?										
Can't upgrade  () to 	R	Can't upgrade %s (%d) to %d										
IO Select library	R	IO::Select (module)										
translate tildes (~) in a filename?	R	How can I translate tildes (~) in a filename?										
Execution of  aborted due to compilation errors.	R	Execution of %s aborted due to compilation errors.										
How do I add the directory my program lives in to the modulelibrary search path	R	How do I add the directory my program lives in to the module/library search path?										
IO::Handle->format_formfeed(EXPR) (variable)	R	$^L (variable)										
permute N elements of a list	R	How do I permute N elements of a list?										
use Perls option from within a program	R	How can I use Perl's option from within a program?										
srand sub	R	srand (function)										
define data structure	R	data structure (definition)										
IO Compress Zip	R	IO::Compress::Zip (module)										
ExtUtils::Mksymlists	R	ExtUtils::Mksymlists (module)										
format subroutine	R	format (function)										
Encode Unicode module	R	Encode::Unicode (module)										
Boolean context	R	Boolean context (definition)										
define list operator	R	list operator (definition)										
-E	R	-E commandline										
IO definition	R	IO (definition)										
ExtUtils MM_DOS module	R	ExtUtils::MM_DOS (module)										
define static method	R	static method (definition)										
regex	R	regex (definition)										
!~ operator	R	Binary "!~" operator										
IO Poll library	R	IO::Poll (module)										
code text pod	R	C<code>										
man definition	R	man (definition)										
define ASCII	R	ASCII (definition)										
Pod Text Termcap module	R	Pod::Text::Termcap (module)										
Encode::Guess module	R	Encode::Guess (module)										
define composer	R	composer (definition)										
open function	R	open (function)										
chown function	R	chown (function)										
chown routine	R	chown (function)										
getpwuid subroutine	R	getpwuid (function)										
$^E	R	$^E (variable)										
environment variable definition	R	environment variable (definition)										
Encode Encoding library	R	Encode::Encoding (module)										
readpipe function	R	readpipe (function)										
ExtUtils::Constant	R	ExtUtils::Constant (module)										
IO::Seekable module	R	IO::Seekable (module)										
Tie Scalar library	R	Tie::Scalar (module)										
Pod InputObjects	R	Pod::InputObjects (module)										
Test::Builder::Tester::Color	R	Test::Builder::Tester::Color (module)										
How do I reformat a paragraph	R	How do I reformat a paragraph?										
parameter (definition)	R	argument										
File::Path module	R	File::Path (module)										
endpwent subroutine	R	endpwent (function)										
Binary lt operator	R	Binary "lt" operator										
vec subroutine	R	vec (function)										
switch cluster	R	switch cluster (definition)										
Whats the difference between calling a function as foo and foo	R	What's the difference between calling a function as &foo and foo()?										
Process terminated by SIG	R	Process terminated by SIG%s										
DBM_Filter::int32 package	R	DBM_Filter::int32 (module)										
-M switch	R	-[mM] [ - ] module=arg[,arg]...										
untie func	R	untie (function)										
export definition	R	export (definition)										
-X routine	R	-X (function)										
PerlIO	R	PerlIO (module)										
character class definition	R	character class (definition)										
define yacc	R	yacc (definition)										
no subroutine	R	no (function)										
%ENV	R	%ENV (variable)										
byte definition	R	byte (definition)										
stream definition	R	stream (definition)										
use MIME to make an attachment to a mail message?	R	How do I use MIME to make an attachment to a mail message?										
Can't call method "" on an undefined value	R	Can't call method "%s" on an undefined value										
lstat func	R	lstat (function)										
elsif method	R	elsif (function)										
__END__ function	R	__END__ (function)										
garbage collection definition	R	garbage collection (definition)										
B::Terse	R	B::Terse (module)										
use a filehandle indirectly	R	How can I use a filehandle indirectly?										
reaping	R	reaping (definition)										
Parse CPAN Meta package	R	Parse::CPAN::Meta (module)										
an extension	R	What's an extension?										
greedy definition	R	greedy (definition)										
| operator	R	Binary "|" operator										
ExtUtils::MakeMaker module	R	ExtUtils::MakeMaker (module)										
-F switch	R	-F pattern										
Pod Man library	R	Pod::Man (module)										
set a file's timestamp in perl?	R	How do I set a file's timestamp in perl?										
pragma	R	pragma (definition)										
What if I dont know which encoding was used	R	What if I don't know which encoding was used?										
bind sub	R	bind (function)										
Binary ** operator	R	Binary "**" operator										
pod =over command	R	=over										
ExtUtils::MM_DOS module	R	ExtUtils::MM_DOS (module)										
Math::BigRat	R	Math::BigRat (module)										
TAP::Formatter::File::Session	R	TAP::Formatter::File::Session (module)										
Attribute::Handlers package	R	Attribute::Handlers (module)										
call by reference definition	R	call by reference (definition)										
B Concise package	R	B::Concise (module)										
IPC Semaphore package	R	IPC::Semaphore (module)										
Is there an IDE or Windows Perl Editor	R	Is there an IDE or Windows Perl Editor?										
define LIFO	R	LIFO (definition)										
ucfirst function	R	ucfirst (function)										
script definition	R	script (definition)										
closedir sub	R	closedir (function)										
TAP Parser Scheduler package	R	TAP::Parser::Scheduler (module)										
Cwd library	R	Cwd (module)										
ExtUtils MM_Any module	R	ExtUtils::MM_Any (module)										
ExtUtils::MakeMaker::Tutorial module	R	ExtUtils::MakeMaker::Tutorial (module)										
'' is not a code reference	R	'%s' is not a code reference										
Subroutine "" will not stay shared	R	Subroutine "%s" will not stay shared										
Config::Extensions module	R	Config::Extensions (module)										
Tie::SubstrHash package	R	Tie::SubstrHash (module)										
INIT sub	R	INIT (function)										
Carp library	R	Carp (module)										
Invalid  attributes: 	R	Invalid %s attributes: %s										
Encode::JP::JIS7 package	R	Encode::JP::JIS7 (module)										
manipulate fixedrecordlength files	R	How can I manipulate fixed-record-length files?										
Pod Man	R	Pod::Man (module)										
sin routine	R	sin (function)										
define record	R	record (definition)										
Encode::Alias library	R	Encode::Alias (module)										
ExtUtils::MakeMaker::Config library	R	ExtUtils::MakeMaker::Config (module)										
print to more than one file at once	R	How do I print to more than one file at once?										
sort an array by anything	R	How do I sort an array by (anything)?										
-v flag	R	-v										
__LINE__ routine	R	__LINE__ (function)										
%LAST_PAREN_MATCH (variable)	R	%+ (variable)										
$!	R	$! (variable)										
ExtUtils MakeMaker library	R	ExtUtils::MakeMaker (module)										
Invalid type '' in 	R	Invalid type '%s' in %s										
Encode::CN::HZ	R	Encode::CN::HZ (module)										
Binary % operator	R	Binary "%" operator										
define Unicode	R	Unicode (definition)										
STDOUT	R	STDOUT (definition)										
working directory definition	R	working directory (definition)										
Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in m//	R	Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in m/%s/										
panic: 	R	panic: %s										
define PATH	R	PATH (definition)										
Tie::File module	R	Tie::File (module)										
glob method	R	glob (function)										
I18N Collate package	R	I18N::Collate (module)										
I18N::Collate library	R	I18N::Collate (module)										
define endian	R	endian (definition)										
find the current century or millennium?	R	How do I find the current century or millennium?										
Digest SHA	R	Digest::SHA (module)										
TAP Parser Iterator Array module	R	TAP::Parser::Iterator::Array (module)										
TAP::Object module	R	TAP::Object (module)										
readdir func	R	readdir (function)										
TAP Parser Scheduler module	R	TAP::Parser::Scheduler (module)										
Is there a prettyprinter formatter for Perl	R	Is there a pretty-printer (formatter) for Perl?										
impatience	R	impatience (definition)										
sed definition	R	sed (definition)										
Errno package	R	Errno (module)										
define status	R	status (definition)										
casemapping	R	casemapping (definition)										
Safe library	R	Safe (module)										
parse a mail header	R	How do I parse a mail header?										
gethostent sub	R	gethostent (function)										
Pod::Functions library	R	Pod::Functions (module)										
binmode function	R	binmode (function)										
chroot sub	R	chroot (function)										
ExtUtils MakeMaker Tutorial	R	ExtUtils::MakeMaker::Tutorial (module)										
AutoLoader package	R	AutoLoader (module)										
variable	R	variable (definition)										
IO::Handle->output_field_separator( EXPR )	R	$, (variable)										
Binary >=	R	Binary ">=" operator										
ExtUtils::Liblist module	R	ExtUtils::Liblist (module)										
$ORS	R	$\ (variable)										
 does not define ::VERSION--version check failed	R	%s does not define %s::VERSION--version check failed										
push method	R	push (function)										
define pp	R	pp (definition)										
Pod::Perldoc::GetOptsOO library	R	Pod::Perldoc::GetOptsOO (module)										
semget sub	R	semget (function)										
define scalar value	R	scalar value (definition)										
Perl mongers definition	R	Perl mongers (definition)										
Term Cap module	R	Term::Cap (module)										
-F	R	-F pattern										
use an SQL database?	R	How do I use an SQL database?										
hard reference	R	hard reference (definition)										
How do I make a temporary file name	R	How do I make a temporary file name?										
File Temp package	R	File::Temp (module)										
Digest::MD5 module	R	Digest::MD5 (module)										
Encode Symbol module	R	Encode::Symbol (module)										
Locale::Script module	R	Locale::Script (module)										
parameter definition	R	parameter (definition)										
Encode::Alias package	R	Encode::Alias (module)										
File::Spec::Unix package	R	File::Spec::Unix (module)										
define flush	R	flush (definition)										
DBM_Filter encode module	R	DBM_Filter::encode (module)										
IO::Zlib library	R	IO::Zlib (module)										
process each word on each line	R	How do I process each word on each line?										
TAP::Formatter::File::Session library	R	TAP::Formatter::File::Session (module)										
Pod Simple XHTML library	R	Pod::Simple::XHTML (module)										
s	R	s (function)										
File Copy module	R	File::Copy (module)										
Text Balanced	R	Text::Balanced (module)										
Binary xor operator	R	Binary "xor" operator										
lexer definition	R	lexer (definition)										
__FILE__ routine	R	__FILE__ (function)										
join func	R	join (function)										
$^N	R	$^N (variable)										
Net::protoent library	R	Net::protoent (module)										
PV definition	R	PV (definition)										
App Prove State Result	R	App::Prove::State::Result (module)										
$>	R	$> (variable)										
ExtUtils::MM_AIX	R	ExtUtils::MM_AIX (module)										
Module::Loaded	R	Module::Loaded (module)										
stat sub	R	stat (function)										
define HV	R	HV (definition)										
Locale::Maketext module	R	Locale::Maketext (module)										
semctl method	R	semctl (function)										
printf func	R	printf (function)										
How do I decode or create those encodings on the web	R	How do I decode or create those %-encodings on the web?										
readable definition	R	readable (definition)										
Pod::Perldoc::ToTk package	R	Pod::Perldoc::ToTk (module)										
Exiting pseudo-block via 	R	Exiting pseudo-block via %s										
field definition	R	field (definition)										
Warning: unable to close filehandle  properly: 	R	Warning: unable to close filehandle %s properly: %s										
$EGID	R	$) (variable)										
close a file descriptor by number?	R	How do I close a file descriptor by number?										
What does it mean that regexes are greedy How can I get around it	R	What does it mean that regexes are greedy? How can I get around it?										
Math::BigInt module	R	Math::BigInt (module)										
Net servent library	R	Net::servent (module)										
ref sub	R	ref (function)										
define procedure	R	procedure (definition)										
$SYSTEM_FD_MAX	R	$^F (variable)										
Pod Perldoc package	R	Pod::Perldoc (module)										
xor function	R	xor (function)										
dynamic scoping	R	dynamic scoping (definition)										
directory handle definition	R	directory handle (definition)										
Why does using $ $` or $ slow my program down	R	Why does using $&, $`, or $' slow my program down?										
TAP::Parser::Source library	R	TAP::Parser::Source (module)										
'' is an unknown bound type in regex; marked by <-- HERE in m//	R	'%s' is an unknown bound type in regex; marked by <-- HERE in m/%s/										
Devel::Peek package	R	Devel::Peek (module)										
define man	R	man (definition)										
options definition	R	options (definition)										
Net Config package	R	Net::Config (module)										
CPAN::Distroprefs module	R	CPAN::Distroprefs (module)										
How do I use a regular expression to strip Cstyle comments from a file	R	How do I use a regular expression to strip C-style comments from a file?										
require method	R	require (function)										
telldir function	R	telldir (function)										
define toolbox approach	R	toolbox approach (definition)										
IO::Compress::Bzip2	R	IO::Compress::Bzip2 (module)										
Search Dict library	R	Search::Dict (module)										
endgrent subroutine	R	endgrent (function)										
operating system	R	operating system (definition)										
DBM_Filter compress module	R	DBM_Filter::compress (module)										
uc subroutine	R	uc (function)										
refcnt_dec: fd %d%s	R	refcnt_inc: fd %d%s										
How do I timeout a slow event	R	How do I timeout a slow event?										
define bless	R	bless (definition)										
chop sub	R	chop (function)										
tr	R	tr (function)										
=end pod	R	=end										
stack definition	R	stack (definition)										
Config	R	Config (module)										
Term::ANSIColor module	R	Term::ANSIColor (module)										
fc	R	fc (function)										
pipeline	R	pipeline (definition)										
B Showlex module	R	B::Showlex (module)										
TAP Parser Iterator Stream package	R	TAP::Parser::Iterator::Stream (module)										
SDBM_File library	R	SDBM_File (module)										
ExtUtils::Miniperl module	R	ExtUtils::Miniperl (module)										
multiply matrices?	R	How do I multiply matrices?										
Module::Load module	R	Module::Load (module)										
Pod Parser module	R	Pod::Parser (module)										
static scoping	R	static scoping (definition)										
How can I write expect in Perl	R	How can I write expect in Perl?										
seek routine	R	seek (function)										
ExtUtils::Packlist module	R	ExtUtils::Packlist (module)										
Pod::Simple::TextContent package	R	Pod::Simple::TextContent (module)										
Encode CN	R	Encode::CN (module)										
define newline	R	newline (definition)										
IO::Select module	R	IO::Select (module)										
Pod::Perldoc::GetOptsOO module	R	Pod::Perldoc::GetOptsOO (module)										
compile	R	compile (definition)										
define substring	R	substring (definition)										
IO::Compress::Zip package	R	IO::Compress::Zip (module)										
-l option	R	-l [ octnum ]										
define command buffering	R	command buffering (definition)										
Text::Tabs module	R	Text::Tabs (module)										
Unmatched right  bracket	R	Unmatched right %s bracket										
index sub	R	index (function)										
Plain Old Comments Not	R	Plain Old Comments (Not!)										
Pod::ParseLink package	R	Pod::ParseLink (module)										
Scalar Util package	R	Scalar::Util (module)										
evalbytes subroutine	R	evalbytes (function)										
define null character	R	null character (definition)										
abs sub	R	abs (function)										
Test::Builder::Tester::Color package	R	Test::Builder::Tester::Color (module)										
Pod Text Termcap	R	Pod::Text::Termcap (module)										
Thread::Semaphore package	R	Thread::Semaphore (module)										
status definition	R	status (definition)										
-n option	R	-n										
dbmopen routine	R	dbmopen (function)										
Pod::Simple::DumpAsText package	R	Pod::Simple::DumpAsText (module)										
TAP Parser Iterator Process	R	TAP::Parser::Iterator::Process (module)										
NDBM_File library	R	NDBM_File (module)										
-V:	R	-V: configvar										
sysseek routine	R	sysseek (function)										
port definition	R	port (definition)										
Sys Hostname package	R	Sys::Hostname (module)										
ExtUtils MM_Unix	R	ExtUtils::MM_Unix (module)										
How can I read in an entire file all at once	R	How can I read in an entire file all at once?										
seekdir func	R	seekdir (function)										
values subroutine	R	values (function)										
File::Copy	R	File::Copy (module)										
Text Wrap package	R	Text::Wrap (module)										
Term Complete library	R	Term::Complete (module)										
Pod::Perldoc::ToXml module	R	Pod::Perldoc::ToXml (module)										
Attempt to access disallowed key '' in a restricted hash	R	Attempt to access disallowed key '%s' in a restricted hash										
Pod::Perldoc::GetOptsOO	R	Pod::Perldoc::GetOptsOO (module)										
pod =back command	R	=back										
pad definition	R	pad (definition)										
-f flag	R	-f										
Pod::PlainText module	R	Pod::PlainText (module)										
How do I keep persistent data across program calls	R	How do I keep persistent data across program calls?										
POSIX syntax [. .] is reserved for future extensions in regex; marked by <-- HERE in m//	R	POSIX syntax [. .] is reserved for future extensions in regex; marked by <-- HERE in m/%s/										
import definition	R	import (definition)										
IO File	R	IO::File (module)										
require func	R	require (function)										
setgrent function	R	setgrent (function)										
Pod Usage package	R	Pod::Usage (module)										
define field	R	field (definition)										
syntax tree definition	R	syntax tree (definition)										
Why dont wordboundary searches with work for me	R	Why don't word-boundary searches with work for me?										
create a module	R	How do I create a module?										
unshift sub	R	unshift (function)										
define client	R	client (definition)										
IO Socket module	R	IO::Socket (module)										
index routine	R	index (function)										
Data::Dumper library	R	Data::Dumper (module)										
line buffering	R	line buffering (definition)										
undef function	R	undef (function)										
DB_File module	R	DB_File (module)										
lt func	R	lt (function)										
length routine	R	length (function)										
IO Poll	R	IO::Poll (module)										
Encode::MIME::Header library	R	Encode::MIME::Header (module)										
$EXECUTABLE_NAME (variable)	R	$^X (variable)										
IO::Uncompress::RawInflate	R	IO::Uncompress::RawInflate (module)										
Scalar Util	R	Scalar::Util (module)										
role definition	R	role (definition)										
define network address	R	network address (definition)										
Text::ParseWords library	R	Text::ParseWords (module)										
Illegal pattern in regex; marked by <-- HERE in m//	R	Illegal pattern in regex; marked by <-- HERE in m/%s/										
ExtUtils Mksymlists library	R	ExtUtils::Mksymlists (module)										
syscall sub	R	syscall (function)										
Encode JP JIS7 module	R	Encode::JP::JIS7 (module)										
identifier definition	R	identifier (definition)										
Can't use string (""...) as  ref while "strict refs" in use	R	Can't use string ("%s"...) as %s ref while "strict refs" in use										
@LAST_MATCH_END	R	@+ (variable)										
operator definition	R	operator (definition)										
define string context	R	string context (definition)										
IO Dir library	R	IO::Dir (module)										
address operator definition	R	address operator (definition)										
Encode TW library	R	Encode::TW (module)										
Pod Text Color library	R	Pod::Text::Color (module)										
Memoize Expire package	R	Memoize::Expire (module)										
@-	R	@- (variable)										
ExtUtils::Constant::Base library	R	ExtUtils::Constant::Base (module)										
define type casting	R	type casting (definition)										
convince others to use Perl	R	How can I convince others to use Perl?										
Other Modifiers modifier	R	/Other Modifiers regular expression modifier										
Env package	R	Env (module)										
foldcase	R	foldcase (definition)										
take a string and turn it into epoch seconds?	R	How can I take a string and turn it into epoch seconds?										
atom	R	atom (definition)										
FIFO definition	R	FIFO (definition)										
Carp package	R	Carp (module)										
scalar function	R	scalar (function)										
ExtUtils Mkbootstrap library	R	ExtUtils::Mkbootstrap (module)										
fileno routine	R	fileno (function)										
define C preprocessor	R	C preprocessor (definition)										
primary maintainer definition	R	primary maintainer (definition)										
PerlIO::via::QuotedPrint module	R	PerlIO::via::QuotedPrint (module)										
define script kiddie	R	script kiddie (definition)										
pod =over	R	=over										
User::grent	R	User::grent (module)										
Unix	R	Unix (definition)										
TAP Formatter Color package	R	TAP::Formatter::Color (module)										
IPC Open2 module	R	IPC::Open2 (module)										
elseif routine	R	elseif (function)										
define I/O layer	R	I/O layer (definition)										
Net servent module	R	Net::servent (module)										
always keep my hash sorted?	R	How can I always keep my hash sorted?										
define freely redistributable	R	freely redistributable (definition)										
define syntax tree	R	syntax tree (definition)										
CPAN FirstTime module	R	CPAN::FirstTime (module)										
File::Spec::Mac module	R	File::Spec::Mac (module)										
-dt: option	R	-dt: MOD[=bar,baz]										
ExtUtils::Command package	R	ExtUtils::Command (module)										
Can't make list assignment to  on this system	R	Can't make list assignment to %ENV on this system										
wantarray method	R	wantarray (function)										
$BASETIME (variable)	R	$^T (variable)										
Net::Ping module	R	Net::Ping (module)										
Test More	R	Test::More (module)										
Thread Semaphore module	R	Thread::Semaphore (module)										
lcfirst subroutine	R	lcfirst (function)										
find the soundex value of a string?	R	How do I find the soundex value of a string?										
What is the difference between and	R	What is the difference between and?										
Locale Script	R	Locale::Script (module)										
undef	R	undef (function)										
open func	R	open (function)										
Sequence ?P=... not terminated in regex; marked by <-- HERE in m//	R	Sequence ?P=... not terminated in regex; marked by <-- HERE in m/%s/										
while subroutine	R	while (function)										
define symbolic reference	R	symbolic reference (definition)										
getpeername	R	getpeername (function)										
endpwent function	R	endpwent (function)										
PerlIO::via::QuotedPrint package	R	PerlIO::via::QuotedPrint (module)										
getprotobynumber routine	R	getprotobynumber (function)										
difference between "perl" and "Perl"?	R	What's the difference between "perl" and "Perl"?										
TAP::Object	R	TAP::Object (module)										
s routine	R	s (function)										
define switch	R	switch (definition)										
weak reference definition	R	weak reference (definition)										
IO Uncompress Unzip	R	IO::Uncompress::Unzip (module)										
last	R	last (function)										
Binary <= operator	R	Binary "<=" operator										
Regexp modifiers "/" and "/" are mutually exclusive	R	Regexp modifiers "%c" and "%c" are mutually exclusive in regex; marked by <-- HERE in m/%s/										
$^W	R	$^W (variable)										
IPC definition	R	IPC (definition)										
next	R	next (function)										
$RS	R	$/ (variable)										
File Temp library	R	File::Temp (module)										
IPC::Msg module	R	IPC::Msg (module)										
$/	R	$/ (variable)										
slice	R	slice (definition)										
__DATA__ sub	R	__DATA__ (function)										
sysopen func	R	sysopen (function)										
Math BigInt CalcEmu module	R	Math::BigInt::CalcEmu (module)										
Quantifier {n,m} with n > m can't match in regex	R	Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%s/										
ExtUtils MakeMaker FAQ package	R	ExtUtils::MakeMaker::FAQ (module)										
reset function	R	reset (function)										
Term::ReadLine	R	Term::ReadLine (module)										
last sub	R	last (function)										
comment definition	R	comment (definition)										
chomp routine	R	chomp (function)										
Which Perl blogs should I read	R	Which Perl blogs should I read?										
define command-line arguments	R	command-line arguments (definition)										
ExtUtils Manifest library	R	ExtUtils::Manifest (module)										
FindBin	R	FindBin (module)										
-m switch	R	-[mM] [ - ] module=arg[,arg]...										
define list context	R	list context (definition)										
How do I expand function calls in a string	R	How do I expand function calls in a string?										
Encode GSM0338 library	R	Encode::GSM0338 (module)										
select a random element from an array?	R	How do I select a random element from an array?										
formal arguments definition	R	formal arguments (definition)										
define trigger	R	trigger (definition)										
utime routine	R	utime (function)										
reliably rename a file	R	How can I reliably rename a file?										
Pod::Text::Termcap	R	Pod::Text::Termcap (module)										
-p option	R	-p										
Prototype after '' for  : 	R	Prototype after '%c' for %s : %s										
extract URLs	R	How do I extract URLs?										
subroutine	R	subroutine (definition)										
Pod::Usage	R	Pod::Usage (module)										
dump routine	R	dump (function)										
Pod::Perldoc::ToPod	R	Pod::Perldoc::ToPod (module)										
getnetbyaddr method	R	getnetbyaddr (function)										
How can I use curses with Perl	R	How can I use curses with Perl?										
Reference to nonexistent group in regex; marked by <-- HERE in m//	R	Reference to nonexistent group in regex; marked by <-- HERE in m/%s/										
getgrgid routine	R	getgrgid (function)										
property	R	property (definition)										
/p modifier	R	/p regular expression modifier										
wrong with always quoting $vars	R	What's wrong with always quoting "$vars"?										
/x	R	/x regular expression modifier										
TAP::Parser::Result::Pragma module	R	TAP::Parser::Result::Pragma (module)										
How come when I open a file readwrite it wipes it out	R	How come when I open a file read-write it wipes it out?										
Term ANSIColor module	R	Term::ANSIColor (module)										
define executable file	R	executable file (definition)										
Switch (?(condition)... not terminated in regex; marked by <-- HERE in m//	R	Switch (?(condition)... not terminated in regex; marked by <-- HERE in m/%s/										
function	R	function (definition)										
/s modifier	R	/s regular expression modifier										
fetchput an SFTP file	R	How do I fetch/put an (S)FTP file?										
patch definition	R	patch (definition)										
Test	R	Test (module)										
INIT function	R	INIT (function)										
Pod::Simple::HTML library	R	Pod::Simple::HTML (module)										
TAP Parser IteratorFactory package	R	TAP::Parser::IteratorFactory (module)										
IO Socket INET package	R	IO::Socket::INET (module)										
App::Prove::State::Result	R	App::Prove::State::Result (module)										
getc routine	R	getc (function)										
IO Uncompress Base	R	IO::Uncompress::Base (module)										
eof function	R	eof (function)										
Env module	R	Env (module)										
funny character	R	funny character (definition)										
define single inheritance	R	single inheritance (definition)										
How do I create a class	R	How do I create a class?										
ExtUtils MM_Darwin module	R	ExtUtils::MM_Darwin (module)										
ExtUtils MM_Unix package	R	ExtUtils::MM_Unix (module)										
install a module from CPAN?	R	How do I install a module from CPAN?										
lock sub	R	lock (function)										
semop subroutine	R	semop (function)										
else	R	else (function)										
arithmetical operator definition	R	arithmetical operator (definition)										
TAP Parser Result YAML module	R	TAP::Parser::Result::YAML (module)										
Test package	R	Test (module)										
recv	R	recv (function)										
panic: ck_split, type=	R	panic: ck_split, type=%u										
printf() on closed filehandle 	R	printf() on closed filehandle %s										
label	R	label (definition)										
unlink routine	R	unlink (function)										
File::Find package	R	File::Find (module)										
platform definition	R	platform (definition)										
dump	R	dump (function)										
magical variables	R	magical variables (definition)										
crypt subroutine	R	crypt (function)										
standard error definition	R	standard error (definition)										
IO Uncompress Unzip package	R	IO::Uncompress::Unzip (module)										
NEXT library	R	NEXT (module)										
-X subroutine	R	-X (function)										
Tie::Scalar package	R	Tie::Scalar (module)										
comment out a large block of Perl code?	R	How can I comment out a large block of Perl code?										
Regexp modifier "" may appear a maximum of twice in regex; marked by <-- HERE in m//	R	Regexp modifier "%c" may appear a maximum of twice in regex; marked by <-- HERE in m/%s/										
getservent func	R	getservent (function)										
getgrnam	R	getgrnam (function)										
How can I remove duplicate elements from a list or array	R	How can I remove duplicate elements from a list or array?										
token	R	token (definition)										
dbmclose routine	R	dbmclose (function)										
each function	R	each (function)										
Setting $/ to  reference is forbidden	R	Setting $/ to %s reference is forbidden										
TAP::Parser::Iterator package	R	TAP::Parser::Iterator (module)										
bless func	R	bless (function)										
regular file	R	regular file (definition)										
y routine	R	y (function)										
Tie Array library	R	Tie::Array (module)										
shmwrite subroutine	R	shmwrite (function)										
invalid option -D, use -D'' to see choices	R	invalid option -D%c, use -D'' to see choices										
superclass definition	R	superclass (definition)										
numification definition	R	numification (definition)										
Prototype mismatch:  vs 	R	Prototype mismatch: %s vs %s										
recursion	R	recursion (definition)										
ExtUtils Constant library	R	ExtUtils::Constant (module)										
NFS definition	R	NFS (definition)										
endpwent sub	R	endpwent (function)										
ExtUtils::MM_NW5 package	R	ExtUtils::MM_NW5 (module)										
^	R	Binary "^" operator										
print something out in color	R	How do I print something out in color?										
Can't call method "" on unblessed reference	R	Can't call method "%s" on unblessed reference										
Errno module	R	Errno (module)										
study function	R	study (function)										
define here document	R	here document (definition)										
flushunbuffer an output filehandle Why must I do this	R	How do I flush/unbuffer an output filehandle? Why must I do this?										
B Concise library	R	B::Concise (module)										
INIT func	R	INIT (function)										
Can't execute 	R	Can't execute %s										
CPAN::Nox package	R	CPAN::Nox (module)										
Digest::file	R	Digest::file (module)										
getnetbyname routine	R	getnetbyname (function)										
B::Debug	R	B::Debug (module)										
MIME::Base64 package	R	MIME::Base64 (module)										
qr method	R	qr (function)										
write sub	R	write (function)										
en passant	R	en passant (definition)										
Net::hostent module	R	Net::hostent (module)										
define home directory	R	home directory (definition)										
CPAN Tarzip library	R	CPAN::Tarzip (module)										
ExtUtils Manifest	R	ExtUtils::Manifest (module)										
readdir	R	readdir (function)										
MIME Base64 module	R	MIME::Base64 (module)										
Text ParseWords library	R	Text::ParseWords (module)										
make my Perl program run faster?	R	How can I make my Perl program run faster?										
ExtUtils::MM_Win95 library	R	ExtUtils::MM_Win95 (module)										
CPAN::Version package	R	CPAN::Version (module)										
Memoize::AnyDBM_File library	R	Memoize::AnyDBM_File (module)										
Math::BigInt package	R	Math::BigInt (module)										
here document definition	R	here document (definition)										
 never introduced	R	%s never introduced										
IV	R	IV (definition)										
$REAL_USER_ID (variable)	R	$< (variable)										
match a localesmart version of	R	How can I match a locale-smart version of?										
ge function	R	ge (function)										
code subpattern definition	R	code subpattern (definition)										
Text::Wrap package	R	Text::Wrap (module)										
Pod Simple HTML library	R	Pod::Simple::HTML (module)										
How do I find the first array element for which a condition is true	R	How do I find the first array element for which a condition is true?										
Archive Tar File	R	Archive::Tar::File (module)										
ExtUtils Constant XS package	R	ExtUtils::Constant::XS (module)										
IPC::Open2 package	R	IPC::Open2 (module)										
accept func	R	accept (function)										
Binary + operator	R	Binary "+" operator										
tr func	R	tr (function)										
TAP Formatter File package	R	TAP::Formatter::File (module)										
match XML HTML or other nasty ugly things with a regex	R	How do I match XML, HTML, or other nasty, ugly things with a regex?										
panic: INTERPCASEMOD, 	R	panic: INTERPCASEMOD, %s										
 Data Manipulation	R	: Data Manipulation										
Why does passing a subroutine an undefined element in a hash create it	R	Why does passing a subroutine an undefined element in a hash create it?										
Locale Maketext library	R	Locale::Maketext (module)										
define JAPH	R	JAPH (definition)										
fcntl	R	fcntl (function)										
msgrcv function	R	msgrcv (function)										
delete the last N lines from a file?	R	How do I delete the last N lines from a file?										
define freeware	R	freeware (definition)										
Tie::StdHandle module	R	Tie::StdHandle (module)										
Pod::Simple::LinkSection library	R	Pod::Simple::LinkSection (module)										
zombie	R	zombie (definition)										
HANDLE->format_page_number(EXPR) (variable)	R	$% (variable)										
XSLoader module	R	XSLoader (module)										
compile time	R	compile time (definition)										
measure time under a second?	R	How can I measure time under a second?										
: not found	R	%s: not found										
formline func	R	formline (function)										
How can I print out a wordfrequency or linefrequency summary	R	How can I print out a word-frequency or line-frequency summary?										
File Spec Cygwin module	R	File::Spec::Cygwin (module)										
sethostent sub	R	sethostent (function)										
How can I access a dynamic variable while a similarly named lexical is in scope	R	How can I access a dynamic variable while a similarly named lexical is in scope?										
sysseek sub	R	sysseek (function)										
Value of CLI symbol "" too long	R	Value of CLI symbol "%s" too long										
qr func	R	qr (function)										
Scalars leaked: 	R	Scalars leaked: %d										
elsif func	R	elsif (function)										
Encode::MIME::Header package	R	Encode::MIME::Header (module)										
qx sub	R	qx (function)										
srand	R	srand (function)										
$PERLDB (variable)	R	$^P (variable)										
Pod Simple PullParserToken package	R	Pod::Simple::PullParserToken (module)										
STDOUT (definition)	R	standard output										
Binary & operator	R	Binary "&" operator										
__LINE__ subroutine	R	__LINE__ (function)										
find the users mail address	R	How do I find the user's mail address?										
if sub	R	if (function)										
member data (definition)	R	instance variable										
TAP::Base module	R	TAP::Base (module)										
Module::CoreList package	R	Module::CoreList (module)										
DBM definition	R	DBM (definition)										
define conditional	R	conditional (definition)										
pseudofunction definition	R	pseudofunction (definition)										
client definition	R	client (definition)										
IPC SysV package	R	IPC::SysV (module)										
Math BigInt Calc module	R	Math::BigInt::Calc (module)										
q method	R	q (function)										
defined routine	R	defined (function)										
Encode::Unicode::UTF7 library	R	Encode::Unicode::UTF7 (module)										
TAP Parser Result YAML	R	TAP::Parser::Result::YAML (module)										
DBM_Filter::utf8 library	R	DBM_Filter::utf8 (module)										
start a process in the background?	R	How do I start a process in the background?										
Text::Tabs package	R	Text::Tabs (module)										
pumpkin	R	pumpkin (definition)										
Pod ParseUtils package	R	Pod::ParseUtils (module)										
Pod::Simple::LinkSection	R	Pod::Simple::LinkSection (module)										
I18N Collate library	R	I18N::Collate (module)										
Encode::Alias	R	Encode::Alias (module)										
base class definition	R	base class (definition)										
make my Perl program take less memory	R	How can I make my Perl program take less memory?										
autoincrement	R	autoincrement (definition)										
define package	R	package (definition)										
Net Netrc package	R	Net::Netrc (module)										
Invalid escape in the specified encoding in regex; marked by <-- HERE in m//	R	Invalid escape in the specified encoding in regex; marked by <-- HERE in m/%s/										
getnetbyaddr function	R	getnetbyaddr (function)										
POSIX syntax [ ] belongs inside character classes in regex; marked by <-- HERE in m//	R	POSIX syntax [%c %c] belongs inside character classes in regex; marked by <-- HERE in m/%s/										
setnetent sub	R	setnetent (function)										
TAP::Formatter::File library	R	TAP::Formatter::File (module)										
getpwuid	R	getpwuid (function)										
CPAN Queue package	R	CPAN::Queue (module)										
getservbyname routine	R	getservbyname (function)										
automate an HTML form submission?	R	How do I automate an HTML form submission?										
match a regular expression that's in a variable?	R	How do I match a regular expression that's in a variable?										
-dt:	R	-dt: MOD[=bar,baz]										
Digest file module	R	Digest::file (module)										
lexical scoping	R	lexical scoping (definition)										
Benchmark package	R	Benchmark (module)										
IO Compress Base package	R	IO::Compress::Base (module)										
handle linked lists	R	How do I handle linked lists?										
TAP Parser Iterator Stream module	R	TAP::Parser::Iterator::Stream (module)										
defined subroutine	R	defined (function)										
eclectic	R	eclectic (definition)										
ExtUtils::Liblist	R	ExtUtils::Liblist (module)										
Test::Builder package	R	Test::Builder (module)										
index subroutine	R	index (function)										
ExtUtils MM_MacOS	R	ExtUtils::MM_MacOS (module)										
gethostbyname sub	R	gethostbyname (function)										
pod S	R	S<text>										
Thread::Semaphore module	R	Thread::Semaphore (module)										
File Compare library	R	File::Compare (module)										
IO Select	R	IO::Select (module)										
Test::Builder library	R	Test::Builder (module)										
shared memory definition	R	shared memory (definition)										
Unrecognized switch: - (-h will show valid options)	R	Unrecognized switch: -%s (-h will show valid options)										
vector definition	R	vector (definition)										
< operator	R	Binary "<" operator										
getsockname sub	R	getsockname (function)										
setprotoent	R	setprotoent (function)										
Encode Encoder package	R	Encode::Encoder (module)										
currently selected output channel definition	R	currently selected output channel (definition)										
define tokener	R	tokener (definition)										
getservent method	R	getservent (function)										
elsif function	R	elsif (function)										
Can't reopen input pipe (name: ) in binary mode	R	Can't reopen input pipe (name: %s) in binary mode										
-e	R	-e commandline										
Use of  on a handle without * is deprecated	R	Use of %s on a handle without * is deprecated										
Encode::Config	R	Encode::Config (module)										
panic: die 	R	panic: die %s										
Pod::Simple::DumpAsText	R	Pod::Simple::DumpAsText (module)										
Unicode::UCD library	R	Unicode::UCD (module)										
UNIVERSAL module	R	UNIVERSAL (module)										
define code subpattern	R	code subpattern (definition)										
define local	R	local (definition)										
$UID	R	$< (variable)										
while sub	R	while (function)										
formline	R	formline (function)										
gt func	R	gt (function)										
UNITCHECK function	R	UNITCHECK (function)										
Net::Time	R	Net::Time (module)										
lvaluable	R	lvaluable (definition)										
character definition	R	character (definition)										
Exporter Heavy package	R	Exporter::Heavy (module)										
Test::Builder::Module library	R	Test::Builder::Module (module)										
autovivification definition	R	autovivification (definition)										
define compile phase	R	compile phase (definition)										
TAP::Parser::Result::Test package	R	TAP::Parser::Result::Test (module)										
setprotoent routine	R	setprotoent (function)										
define built-in	R	built-in (definition)										
test whether two arrays or hashes are equal	R	How do I test whether two arrays or hashes are equal?										
ExtUtils::Command library	R	ExtUtils::Command (module)										
connection definition	R	connection (definition)										
define en passant	R	en passant (definition)										
ExtUtils MM_BeOS module	R	ExtUtils::MM_BeOS (module)										
Pod::Perldoc::ToMan	R	Pod::Perldoc::ToMan (module)										
Memoize ExpireTest	R	Memoize::ExpireTest (module)										
INIT routine	R	INIT (function)										
Fatal module	R	Fatal (module)										
define execute	R	execute (definition)										
decrement	R	decrement (definition)										
Tie::SubstrHash	R	Tie::SubstrHash (module)										
TAP::Parser::ResultFactory package	R	TAP::Parser::ResultFactory (module)										
CPAN Debug library	R	CPAN::Debug (module)										
define null string	R	null string (definition)										
I formatting code	R	I<text>										
cos method	R	cos (function)										
define variable	R	variable (definition)										
BLOCK	R	BLOCK (definition)										
put a password on my web pages	R	How do I put a password on my web pages?										
How do I compute the difference of two arrays How do I compute the intersection of two arrays	R	How do I compute the difference of two arrays? How do I compute the intersection of two arrays?										
Perl  required--this is only , stopped	R	Perl %s required--this is only %s, stopped										
No group ending character '' found in template	R	No group ending character '%c' found in template										
I18N LangTags Detect library	R	I18N::LangTags::Detect (module)										
define filehandle	R	filehandle (definition)										
Net netent module	R	Net::netent (module)										
Pod::Simple::PullParser library	R	Pod::Simple::PullParser (module)										
ucfirst	R	ucfirst (function)										
Encode Config package	R	Encode::Config (module)										
dbmopen sub	R	dbmopen (function)										
set a files timestamp in perl	R	How do I set a file's timestamp in perl?										
TAP::Parser::IteratorFactory package	R	TAP::Parser::IteratorFactory (module)										
Can I use Unicode in my Perl sources	R	Can I use Unicode in my Perl sources?										
precedence definition	R	precedence (definition)										
connect func	R	connect (function)										
Digest::SHA	R	Digest::SHA (module)										
DBM_Filter::int32 module	R	DBM_Filter::int32 (module)										
ExtUtils::MakeMaker::Config	R	ExtUtils::MakeMaker::Config (module)										
else routine	R	else (function)										
Binary -	R	Binary "-" operator										
Pod::Simple::DumpAsText module	R	Pod::Simple::DumpAsText (module)										
TAP Parser Result Comment library	R	TAP::Parser::Result::Comment (module)										
Net::FTP package	R	Net::FTP (module)										
link function	R	link (function)										
exec subroutine	R	exec (function)										
Digest file	R	Digest::file (module)										
Pod::Checker package	R	Pod::Checker (module)										
assignment operator	R	assignment operator (definition)										
relational operator	R	relational operator (definition)										
Net Netrc library	R	Net::Netrc (module)										
Encode::Unicode package	R	Encode::Unicode (module)										
Term::Complete	R	Term::Complete (module)										
cross-reference my Perl programs?	R	How do I cross-reference my Perl programs?										
Can't coerce  to  in 	R	Can't coerce %s to %s in %s										
Pod Simple Search package	R	Pod::Simple::Search (module)										
getlogin func	R	getlogin (function)										
eval	R	eval (function)										
DBM_Filter package	R	DBM_Filter (module)										
How can I know how many entries are in a hash	R	How can I know how many entries are in a hash?										
$\	R	$\ (variable)										
s sub	R	s (function)										
TAP::Parser::Iterator::Array	R	TAP::Parser::Iterator::Array (module)										
extract URLs?	R	How do I extract URLs?										
File::Spec::Epoc library	R	File::Spec::Epoc (module)										
print out or copy a recursive data structure	R	How do I print out or copy a recursive data structure?										
I18N::LangTags::List module	R	I18N::LangTags::List (module)										
IPC Open2 library	R	IPC::Open2 (module)										
$COMPILING	R	$^C (variable)										
Boolean definition	R	Boolean (definition)										
Net::servent package	R	Net::servent (module)										
DBM_Filter encode library	R	DBM_Filter::encode (module)										
Opening filehandle  also as a directory	R	Opening filehandle %s also as a directory										
TAP Parser Scheduler library	R	TAP::Parser::Scheduler (module)										
getservbyport subroutine	R	getservbyport (function)										
Encode::JP::JIS7 library	R	Encode::JP::JIS7 (module)										
Ternary ?: operator	R	Ternary "?:" operator										
Had to create  unexpectedly	R	Had to create %s unexpectedly										
Encode CN HZ library	R	Encode::CN::HZ (module)										
define operator	R	operator (definition)										
ExtUtils MakeMaker package	R	ExtUtils::MakeMaker (module)										
randomly update a binary file?	R	How do I randomly update a binary file?										
This Perl can't set CRTL environ elements (=)	R	This Perl can't set CRTL environ elements (%s=%s)										
IPC SysV library	R	IPC::SysV (module)										
define BLOCK	R	BLOCK (definition)										
ExtUtils::MM_Win95 module	R	ExtUtils::MM_Win95 (module)										
File::Spec::Mac library	R	File::Spec::Mac (module)										
define autosplit	R	autosplit (definition)										
Pod Checker package	R	Pod::Checker (module)										
chop subroutine	R	chop (function)										
DBM_Filter encode	R	DBM_Filter::encode (module)										
Pod Usage	R	Pod::Usage (module)										
Text Abbrev module	R	Text::Abbrev (module)										
rindex routine	R	rindex (function)										
Devel::SelfStubber	R	Devel::SelfStubber (module)										
XSLoader library	R	XSLoader (module)										
Calling POSIX::() is deprecated	R	Calling POSIX::%s() is deprecated										
Binary .. operator	R	Binary ".." operator										
Math::Complex package	R	Math::Complex (module)										
Term::Complete package	R	Term::Complete (module)										
thread definition	R	thread (definition)										
endpwent routine	R	endpwent (function)										
Invalid character in charnames alias definition; marked by <-- HERE in '	R	Invalid character in charnames alias definition; marked by <-- HERE in '%s										
multidimensional array	R	multidimensional array (definition)										
chmod sub	R	chmod (function)										
Tie::RefHash library	R	Tie::RefHash (module)										
Bizarre SvTYPE []	R	Bizarre SvTYPE [%d]										
panic: pad_alloc, !=	R	panic: pad_alloc, %p!=%p										
IO Uncompress AnyUncompress library	R	IO::Uncompress::AnyUncompress (module)										
Memoize library	R	Memoize (module)										
Can't emulate - on #! line	R	Can't emulate -%s on #! line										
% operator	R	Binary "%" operator										
How do I substitute caseinsensitively on the LHS while preserving case on the RHS	R	How do I substitute case-insensitively on the LHS while preserving case on the RHS?										
CPAN::Debug library	R	CPAN::Debug (module)										
pod =cut command	R	=cut										
TAP::Parser::IteratorFactory library	R	TAP::Parser::IteratorFactory (module)										
ExtUtils Constant Base package	R	ExtUtils::Constant::Base (module)										
endnetent method	R	endnetent (function)										
validate input	R	How do I validate input?										
I18N::LangTags package	R	I18N::LangTags (module)										
type casting	R	type casting (definition)										
How do I decode a MIMEBASE64 string	R	How do I decode a MIME/BASE64 string?										
exit sub	R	exit (function)										
bless sub	R	bless (function)										
atan2	R	atan2 (function)										
HV	R	HV (definition)										
ExtUtils MakeMaker Config package	R	ExtUtils::MakeMaker::Config (module)										
App::Prove::State package	R	App::Prove::State (module)										
Digest SHA package	R	Digest::SHA (module)										
$ORS (variable)	R	$\ (variable)										
GID	R	GID (definition)										
||	R	Binary "||" operator										
File::Spec::VMS package	R	File::Spec::VMS (module)										
chomp method	R	chomp (function)										
DBM_Filter utf8 library	R	DBM_Filter::utf8 (module)										
pod an index entry	R	X<topic name>										
getservbyname func	R	getservbyname (function)										
define canonical	R	canonical (definition)										
capitalize all the words on one line?	R	How do I capitalize all the words on one line?										
Attempt to delete readonly key '' from a restricted hash	R	Attempt to delete readonly key '%s' from a restricted hash										
ExtUtils::MM_DOS package	R	ExtUtils::MM_DOS (module)										
Compress Zlib library	R	Compress::Zlib (module)										
split routine	R	split (function)										
Encode::Unicode::UTF7 package	R	Encode::Unicode::UTF7 (module)										
Deep recursion on anonymous subroutine	R	Deep recursion on subroutine "%s"										
define mode	R	mode (definition)										
Pod ParseLink	R	Pod::ParseLink (module)										
Pod Select	R	Pod::Select (module)										
Net Cmd	R	Net::Cmd (module)										
error	R	error (definition)										
User pwent library	R	User::pwent (module)										
ExtUtils::CBuilder	R	ExtUtils::CBuilder (module)										
panic: Sequence (?{...}): no code block found in regex m//	R	panic: Sequence (?{...}): no code block found in regex m/%s/										
IO::Handle library	R	IO::Handle (module)										
TAP Parser Grammar module	R	TAP::Parser::Grammar (module)										
-s flag	R	-s										
ExtUtils Constant package	R	ExtUtils::Constant (module)										
ExtUtils::MM_BeOS package	R	ExtUtils::MM_BeOS (module)										
TAP Parser Source library	R	TAP::Parser::Source (module)										
sysread() on closed filehandle 	R	sysread() on closed filehandle %s										
Time::tm	R	Time::tm (module)										
DBM_Filter int32 package	R	DBM_Filter::int32 (module)										
indirect object slot	R	indirect object slot (definition)										
ExtUtils::Install module	R	ExtUtils::Install (module)										
& operator	R	Binary "&" operator										
Encode::KR::2022_KR	R	Encode::KR::2022_KR (module)										
define filter	R	filter (definition)										
Why doesnt  work the way I want it to	R	Why doesn't & work the way I want it to?										
gethostent func	R	gethostent (function)										
IO::Uncompress::Gunzip module	R	IO::Uncompress::Gunzip (module)										
execute definition	R	execute (definition)										
dbmclose method	R	dbmclose (function)										
&	R	Binary "&" operator										
Encode::KR::2022_KR module	R	Encode::KR::2022_KR (module)										
variable interpolation	R	variable interpolation (definition)										
App Prove State Result Test	R	App::Prove::State::Result::Test (module)										
How do I set the time and date	R	How do I set the time and date?										
CPAN Version package	R	CPAN::Version (module)										
IO::Compress::Deflate	R	IO::Compress::Deflate (module)										
Pod::Html	R	Pod::Html (module)										
IO Uncompress Gunzip	R	IO::Uncompress::Gunzip (module)										
multiple inheritance	R	multiple inheritance (definition)										
TAP::Parser::Result::Comment	R	TAP::Parser::Result::Comment (module)										
Pod Text module	R	Pod::Text (module)										
NDBM_File package	R	NDBM_File (module)										
Pod::Perldoc::ToXml package	R	Pod::Perldoc::ToXml (module)										
() on unopened 	R	%s() on unopened %s										
IO::Compress::Gzip	R	IO::Compress::Gzip (module)										
define pipe	R	pipe (definition)										
rewinddir method	R	rewinddir (function)										
() called too early to check prototype	R	%s() called too early to check prototype										
How can I read a single character from a file From the keyboard	R	How can I read a single character from a file? From the keyboard?										
seek subroutine	R	seek (function)										
rewinddir subroutine	R	rewinddir (function)										
Encode::CJKConstants library	R	Encode::CJKConstants (module)										
ExtUtils::Installed package	R	ExtUtils::Installed (module)										
output Roman numerals?	R	How can I output Roman numerals?										
define taint mode	R	taint mode (definition)										
$b	R	$b (variable)										
link func	R	link (function)										
Test::Builder::Tester package	R	Test::Builder::Tester (module)										
File::Basename package	R	File::Basename (module)										
Net::POP3 module	R	Net::POP3 (module)										
Encode EBCDIC	R	Encode::EBCDIC (module)										
define mojibake	R	mojibake (definition)										
v-string	R	v-string (definition)										
IPC Open3	R	IPC::Open3 (module)										
Time::Piece library	R	Time::Piece (module)										
static method definition	R	static method (definition)										
DBM_Filter compress library	R	DBM_Filter::compress (module)										
ExtUtils Constant Base library	R	ExtUtils::Constant::Base (module)										
Both or neither range ends should be Unicode in regex; marked by <-- HERE in m//	R	Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%s/										
redo routine	R	redo (function)										
Memoize::Storable library	R	Memoize::Storable (module)										
define taint checks	R	taint checks (definition)										
distribution	R	distribution (definition)										
$FORMAT_LINES_PER_PAGE (variable)	R	$= (variable)										
Encode Unicode library	R	Encode::Unicode (module)										
atan2 method	R	atan2 (function)										
Can't fork: 	R	Can't fork: %s										
delete	R	delete (function)										
dbmopen subroutine	R	dbmopen (function)										
Pod Simple TextContent package	R	Pod::Simple::TextContent (module)										
global destruction	R	global destruction (definition)										
define broadcast	R	broadcast (definition)										
How do I change delete or insert a line in a file or append to the beginning of a file	R	How do I change, delete, or insert a line in a file, or append to the beginning of a file?										
Pod::Simple::Search package	R	Pod::Simple::Search (module)										
group definition	R	group (definition)										
$EXTENDED_OS_ERROR (variable)	R	$^E (variable)										
Locale Maketext Guts module	R	Locale::Maketext::Guts (module)										
-I switch	R	-I directory										
ExtUtils Mksymlists module	R	ExtUtils::Mksymlists (module)										
localtime func	R	localtime (function)										
lock method	R	lock (function)										
Module Load module	R	Module::Load (module)										
Binary and	R	Binary "and" operator										
gethostbyname function	R	gethostbyname (function)										
File::GlobMapper module	R	File::GlobMapper (module)										
elseif sub	R	elseif (function)										
srand routine	R	srand (function)										
Digest package	R	Digest (module)										
TAP::Parser::Result package	R	TAP::Parser::Result (module)										
setservent sub	R	setservent (function)										
ExtUtils::Install package	R	ExtUtils::Install (module)										
sort func	R	sort (function)										
pad	R	pad (definition)										
splice subroutine	R	splice (function)										
Ambiguous use of {[...]} resolved to [...]	R	Ambiguous use of %c{%s{...}} resolved to %c%s{...}										
define socket	R	socket (definition)										
length sub	R	length (function)										
Locale::Country package	R	Locale::Country (module)										
Locale Maketext Simple	R	Locale::Maketext::Simple (module)										
Type of arg  to  must be  (not )	R	Type of arg %d to %s must be %s (not %s)										
$OSNAME (variable)	R	$^O (variable)										
parse tree (definition)	R	syntax tree										
$CHILD_ERROR	R	$? (variable)										
clear a package	R	How do I clear a package?										
IP	R	IP (definition)										
exec function	R	exec (function)										
delete sub	R	delete (function)										
Multidimensional syntax  not supported	R	Multidimensional syntax %s not supported										
foreach	R	foreach (function)										
define invocation	R	invocation (definition)										
define multiple inheritance	R	multiple inheritance (definition)										
Tie Hash library	R	Tie::Hash (module)										
Regexp modifier "/" may not appear twice	R	Regexp modifier "%c" may not appear twice in regex; marked by <-- HERE in m/%s/										
/s	R	/s regular expression modifier										
Encode Unicode UTF7 library	R	Encode::Unicode::UTF7 (module)										
Test Simple	R	Test::Simple (module)										
Text::ParseWords package	R	Text::ParseWords (module)										
DBM_Filter::compress library	R	DBM_Filter::compress (module)										
wrong with using grep in a void context?	R	What's wrong with using grep in a void context?										
Filehandle  opened only for input	R	Filehandle %s opened only for input										
sethostent	R	sethostent (function)										
getpeername method	R	getpeername (function)										
capture STDERR from an external command	R	How can I capture STDERR from an external command?										
xor sub	R	xor (function)										
instance variable definition	R	instance variable (definition)										
Encode KR 2022_KR	R	Encode::KR::2022_KR (module)										
variadic definition	R	variadic (definition)										
How can I count the number of occurrences of a substring within a string	R	How can I count the number of occurrences of a substring within a string?										
Unknown Unicode option letter ''	R	Unknown Unicode option letter '%c'										
Can't locate PerlIO	R	Can't locate PerlIO%s										
getlogin method	R	getlogin (function)										
Unsupported socket function "" called	R	Unsupported socket function "%s" called										
convert from encoding FOO to encoding BAR	R	How do I convert from encoding FOO to encoding BAR?										
getsockopt routine	R	getsockopt (function)										
superclass (definition)	R	base class										
architecture	R	architecture (definition)										
class definition	R	class (definition)										
Encode::CN module	R	Encode::CN (module)										
laziness definition	R	laziness (definition)										
open source software	R	open source software (definition)										
@ARG (variable)	R	@_ (variable)										
Getopt::Long module	R	Getopt::Long (module)										
TAP::Formatter::File::Session module	R	TAP::Formatter::File::Session (module)										
NFS	R	NFS (definition)										
ExtUtils Constant Base module	R	ExtUtils::Constant::Base (module)										
define element	R	element (definition)										
IO::Uncompress::AnyInflate library	R	IO::Uncompress::AnyInflate (module)										
-x switch	R	-x directory										
laziness	R	laziness (definition)										
truncating	R	truncating (definition)										
execute bit	R	execute bit (definition)										
multiple inheritance definition	R	multiple inheritance (definition)										
Encode Encoder	R	Encode::Encoder (module)										
manipulate fixed-record-length files?	R	How can I manipulate fixed-record-length files?										
Time::localtime	R	Time::localtime (module)										
ExtUtils::MakeMaker::Config package	R	ExtUtils::MakeMaker::Config (module)										
error definition	R	error (definition)										
wrapper	R	wrapper (definition)										
field	R	field (definition)										
gethostbyaddr routine	R	gethostbyaddr (function)										
>> operator	R	Binary ">>" operator										
$#	R	$# (variable)										
alias definition	R	alias (definition)										
-D option	R	-D number										
Filter::Simple library	R	Filter::Simple (module)										
define runtime	R	runtime (definition)										
exception definition	R	exception (definition)										
TAP::Parser::Result::YAML module	R	TAP::Parser::Result::YAML (module)										
subscript definition	R	subscript (definition)										
setprotoent sub	R	setprotoent (function)										
ord routine	R	ord (function)										
Sequence (?...) not recognized in regex; marked by <-- HERE in m//	R	Sequence (?%s...) not recognized in regex; marked by <-- HERE in m/%s/										
ExtUtils Installed	R	ExtUtils::Installed (module)										
define file test operator	R	file test operator (definition)										
IO::Uncompress::Bunzip2 package	R	IO::Uncompress::Bunzip2 (module)										
floating point definition	R	floating point (definition)										
I18N::LangTags::Detect package	R	I18N::LangTags::Detect (module)										
User grent	R	User::grent (module)										
Pod::Perldoc package	R	Pod::Perldoc (module)										
TAP::Formatter::Color	R	TAP::Formatter::Color (module)										
stat structure	R	stat structure (definition)										
oct subroutine	R	oct (function)										
Encode CN module	R	Encode::CN (module)										
rvalue definition	R	rvalue (definition)										
Pod::Perldoc	R	Pod::Perldoc (module)										
sysopen function	R	sysopen (function)										
setsockopt method	R	setsockopt (function)										
I18N::LangTags::List package	R	I18N::LangTags::List (module)										
Memoize::Storable module	R	Memoize::Storable (module)										
Whats the difference between and	R	What's the difference between and?										
msgctl function	R	msgctl (function)										
Getopt Std module	R	Getopt::Std (module)										
lt method	R	lt (function)										
How do I test whether two arrays or hashes are equal	R	How do I test whether two arrays or hashes are equal?										
SDBM_File module	R	SDBM_File (module)										
ExtUtils::Liblist library	R	ExtUtils::Liblist (module)										
IO::Dir library	R	IO::Dir (module)										
__END__ func	R	__END__ (function)										
define semaphore	R	semaphore (definition)										
$OS_ERROR	R	$! (variable)										
Perls since  too modern--this is , stopped	R	Perls since %s too modern--this is %s, stopped										
ExtUtils MM_Cygwin package	R	ExtUtils::MM_Cygwin (module)										
Thread Queue module	R	Thread::Queue (module)										
define memory	R	memory (definition)										
Unknown warnings category ''	R	Unknown warnings category '%s'										
define bit string	R	bit string (definition)										
Pod Perldoc ToRtf library	R	Pod::Perldoc::ToRtf (module)										
&CORE:: cannot be called directly	R	&CORE::%s cannot be called directly										
titlecase	R	titlecase (definition)										
gt sub	R	gt (function)										
patch	R	patch (definition)										
public domain	R	public domain (definition)										
List::Util::XS module	R	List::Util::XS (module)										
Memoize Expire	R	Memoize::Expire (module)										
get to work on MSDOSNT	R	How can I get to work on [MS-DOS,NT,...]?										
Ill-formed message in prime_env_iter: ||	R	Ill-formed message in prime_env_iter: |%s|										
Math::BigFloat package	R	Math::BigFloat (module)										
define syntax	R	syntax (definition)										
empty subclass test definition	R	empty subclass test (definition)										
readline	R	readline (function)										
eval func	R	eval (function)										
Net::Cmd module	R	Net::Cmd (module)										
-C option	R	-C [ number/list ]										
How do I print something out in color	R	How do I print something out in color?										
List::Util module	R	List::Util (module)										
ioctl routine	R	ioctl (function)										
getpeername subroutine	R	getpeername (function)										
printf method	R	printf (function)										
setgid	R	setgid (definition)										
CPAN Kwalify package	R	CPAN::Kwalify (module)										
foreach method	R	foreach (function)										
define watch expression	R	watch expression (definition)										
hex subroutine	R	hex (function)										
Pod::InputObjects library	R	Pod::InputObjects (module)										
TAP::Parser::Result::Comment library	R	TAP::Parser::Result::Comment (module)										
Why is int broken	R	Why is int() broken?										
qx function	R	qx (function)										
MIME::QuotedPrint	R	MIME::QuotedPrint (module)										
~ operator	R	Unary "~" operator										
B	R	B (module)										
readdir function	R	readdir (function)										
keyword (definition)	R	reserved words										
$[	R	$[ (variable)										
default definition	R	default (definition)										
 had compilation errors.	R	%s had compilation errors.										
determine if a string is a text string or a binary string?	R	How can I determine if a string is a text string or a binary string?										
ExtUtils Constant XS	R	ExtUtils::Constant::XS (module)										
Bad plugin affecting keyword ''	R	Bad plugin affecting keyword '%s'										
Binary and operator	R	Binary "and" operator										
tell whether a certain element is contained in a list or array	R	How can I tell whether a certain element is contained in a list or array?										
ExtUtils ParseXS module	R	ExtUtils::ParseXS (module)										
File Spec Cygwin package	R	File::Spec::Cygwin (module)										
Locale Language	R	Locale::Language (module)										
define Boolean context	R	Boolean context (definition)										
scalar method	R	scalar (function)										
parsing definition	R	parsing (definition)										
Standard Library definition	R	Standard Library (definition)										
define module	R	module (definition)										
TAP Parser Scheduler Job	R	TAP::Parser::Scheduler::Job (module)										
I18N::LangTags module	R	I18N::LangTags (module)										
define exec	R	exec (definition)										
Digest::SHA module	R	Digest::SHA (module)										
bless function	R	bless (function)										
lowercase definition	R	lowercase (definition)										
Pod::Perldoc::ToMan library	R	Pod::Perldoc::ToMan (module)										
TAP Harness module	R	TAP::Harness (module)										
Encode	R	Encode (module)										
panic: pad_reset curpad, !=	R	panic: pad_reset curpad, %p!=%p										
ExtUtils MM_Win32 module	R	ExtUtils::MM_Win32 (module)										
Net FTP	R	Net::FTP (module)										
Net::servent module	R	Net::servent (module)										
Pod::Perldoc::ToTk module	R	Pod::Perldoc::ToTk (module)										
Encode::CN::HZ module	R	Encode::CN::HZ (module)										
bless method	R	bless (function)										
Net::FTP	R	Net::FTP (module)										
File::Temp module	R	File::Temp (module)										
getpeername func	R	getpeername (function)										
Where can I buy a commercial version of Perl	R	Where can I buy a commercial version of Perl?										
ExtUtils MM_QNX	R	ExtUtils::MM_QNX (module)										
define little-endian	R	little-endian (definition)										
fork sub	R	fork (function)										
define mortal	R	mortal (definition)										
IO Seekable module	R	IO::Seekable (module)										
get a binary version of Perl?	R	How can I get a binary version of Perl?										
define RTFM	R	RTFM (definition)										
Tie Array module	R	Tie::Array (module)										
How do I do fancy stuff with the keyboardscreenmouse	R	How do I do fancy stuff with the keyboard/screen/mouse?										
define array context	R	array context (definition)										
taint checks	R	taint checks (definition)										
TAP Formatter Console Session module	R	TAP::Formatter::Console::Session (module)										
Time localtime module	R	Time::localtime (module)										
TAP Harness library	R	TAP::Harness (module)										
TAP::Parser library	R	TAP::Parser (module)										
panic: INTERPCONCAT, 	R	panic: INTERPCONCAT, %s										
$^L	R	$^L (variable)										
Pod::Simple::DumpAsXML package	R	Pod::Simple::DumpAsXML (module)										
filename definition	R	filename (definition)										
header file	R	header file (definition)										
__PACKAGE__ func	R	__PACKAGE__ (function)										
call backticks without shell processing?	R	How can I call backticks without shell processing?										
App::Prove::State::Result package	R	App::Prove::State::Result (module)										
Text Tabs library	R	Text::Tabs (module)										
fcntl function	R	fcntl (function)										
Regexp modifiers "/%c" and "/%c" are mutually exclusive	R	Regexp modifiers "%c" and "%c" are mutually exclusive in regex; marked by <-- HERE in m/%s/										
TAP Parser	R	TAP::Parser (module)										
MIME::QuotedPrint package	R	MIME::QuotedPrint (module)										
alternatives definition	R	alternatives (definition)										
substr sub	R	substr (function)										
ExtUtils::MM_Unix package	R	ExtUtils::MM_Unix (module)										
TAP Formatter Session package	R	TAP::Formatter::Session (module)										
Digest file package	R	Digest::file (module)										
Params::Check library	R	Params::Check (module)										
ExtUtils MM_Win32 library	R	ExtUtils::MM_Win32 (module)										
define porter	R	porter (definition)										
link sub	R	link (function)										
How can I catch accesses to undefined variables functions or methods	R	How can I catch accesses to undefined variables, functions, or methods?										
filesystem definition	R	filesystem (definition)										
Thread Semaphore library	R	Thread::Semaphore (module)										
handle linked lists?	R	How do I handle linked lists?										
select sub	R	select (function)										
"my" variable  can't be in a package	R	"my" variable %s can't be in a package										
scalar value	R	scalar value (definition)										
use	R	use (function)										
array context	R	array context (definition)										
ExtUtils Installed module	R	ExtUtils::Installed (module)										
system function	R	system (function)										
App Prove State Result module	R	App::Prove::State::Result (module)										
Encode Symbol library	R	Encode::Symbol (module)										
Math BigFloat module	R	Math::BigFloat (module)										
Constant subroutine  redefined	R	Constant subroutine %s redefined										
Useless localization of 	R	Useless localization of %s										
handle circular lists	R	How do I handle circular lists?										
import func	R	import (function)										
named pipe definition	R	named pipe (definition)										
panic: sv_insert, midend=, bigend=	R	panic: sv_insert, midend=%p, bigend=%p										
Is Perl difficult to learn	R	Is Perl difficult to learn?										
ExtUtils::MM_NW5 library	R	ExtUtils::MM_NW5 (module)										
Time::Local package	R	Time::Local (module)										
TAP Formatter Console Session library	R	TAP::Formatter::Console::Session (module)										
tell if a variable is tainted	R	How can I tell if a variable is tainted?										
define escape sequence	R	escape sequence (definition)										
lvalue modifier definition	R	lvalue modifier (definition)										
Tie::Hash	R	Tie::Hash (module)										
Hash Util FieldHash module	R	Hash::Util::FieldHash (module)										
STDIN definition	R	STDIN (definition)										
define stream	R	stream (definition)										
call my systems unique C functions from Perl	R	How can I call my system's unique C functions from Perl?										
Time Piece	R	Time::Piece (module)										
find matchingnesting anything	R	How do I find matching/nesting anything?										
Math::BigInt::FastCalc module	R	Math::BigInt::FastCalc (module)										
Time::Local library	R	Time::Local (module)										
dereference definition	R	dereference (definition)										
How can I pull out lines between two patterns that are themselves on different lines	R	How can I pull out lines between two patterns that are themselves on different lines?										
uc	R	uc (function)										
if subroutine	R	if (function)										
define quantifier	R	quantifier (definition)										
Encode MIME Name module	R	Encode::MIME::Name (module)										
TAP::Formatter::Console::Session	R	TAP::Formatter::Console::Session (module)										
grapheme	R	grapheme (definition)										
Math::BigInt::Calc library	R	Math::BigInt::Calc (module)										
convert from encoding FOO to encoding BAR?	R	How do I convert from encoding FOO to encoding BAR?										
ExtUtils::Mksymlists library	R	ExtUtils::Mksymlists (module)										
difference between calling a function as foo and foo	R	What's the difference between calling a function as &foo and foo()?										
operator overloading definition	R	operator overloading (definition)										
splice method	R	splice (function)										
getnetent sub	R	getnetent (function)										
false	R	false (definition)										
decode a MIME/BASE64 string?	R	How do I decode a MIME/BASE64 string?										
Pod Simple Checker library	R	Pod::Simple::Checker (module)										
dereference	R	dereference (definition)										
reverse subroutine	R	reverse (function)										
getservent	R	getservent (function)										
delimiter	R	delimiter (definition)										
unpack func	R	unpack (function)										
Net Ping	R	Net::Ping (module)										
crypt method	R	crypt (function)										
Encode Encoding module	R	Encode::Encoding (module)										
Tie::Array package	R	Tie::Array (module)										
define interpolation	R	interpolation (definition)										
Dumpvalue library	R	Dumpvalue (module)										
Math::BigFloat	R	Math::BigFloat (module)										
check whether input is ready on the keyboard?	R	How do I check whether input is ready on the keyboard?										
readpipe	R	readpipe (function)										
Pod Simple PullParserEndToken module	R	Pod::Simple::PullParserEndToken (module)										
struct definition	R	struct (definition)										
define assertion	R	assertion (definition)										
IO Uncompress Gunzip module	R	IO::Uncompress::Gunzip (module)										
getpwent method	R	getpwent (function)										
File Spec Functions module	R	File::Spec::Functions (module)										
mkdir func	R	mkdir (function)										
IO::Handle->format_line_break_characters EXPR (variable)	R	$: (variable)										
kill func	R	kill (function)										
Don't know how to handle magic of type \	R	Don't know how to handle magic of type \%o										
Method  not permitted	R	Method %s not permitted										
hex function	R	hex (function)										
Sys Hostname	R	Sys::Hostname (module)										
really for	R	What is really for?										
sub routine	R	sub (function)										
DynaLoader module	R	DynaLoader (module)										
scope	R	scope (definition)										
magic	R	magic (definition)										
$INPUT_RECORD_SEPARATOR (variable)	R	$/ (variable)										
define static scoping	R	static scoping (definition)										
readline routine	R	readline (function)										
BSD	R	BSD (definition)										
RFC	R	RFC (definition)										
separator definition	R	separator (definition)										
Encode Unicode UTF7	R	Encode::Unicode::UTF7 (module)										
TAP Formatter Console library	R	TAP::Formatter::Console (module)										
define key	R	key (definition)										
define shared memory	R	shared memory (definition)										
pseudoliteral definition	R	pseudoliteral (definition)										
change delete or insert a line in a file or append to the beginning of a file	R	How do I change, delete, or insert a line in a file, or append to the beginning of a file?										
next method	R	next (function)										
Pod Perldoc ToPod module	R	Pod::Perldoc::ToPod (module)										
root	R	root (definition)										
qw sub	R	qw (function)										
keep persistent data across program calls	R	How do I keep persistent data across program calls?										
warn function	R	warn (function)										
Binary | operator	R	Binary "|" operator										
typed lexical definition	R	typed lexical (definition)										
waitpid	R	waitpid (function)										
Compress::Raw::Bzip2 library	R	Compress::Raw::Bzip2 (module)										
How do I unescape a string	R	How do I unescape a string?										
sleep or alarm for under a second	R	How can I sleep() or alarm() for under a second?										
exploit	R	exploit (definition)										
Tie SubstrHash library	R	Tie::SubstrHash (module)										
define transliterate	R	transliterate (definition)										
=over pod	R	=over										
$^H	R	$^H (variable)										
sysseek	R	sysseek (function)										
Unexpected character in regex; marked by <-- HERE in m//	R	Unexpected character in regex; marked by <-- HERE in m/%s/										
ExtUtils::MM	R	ExtUtils::MM (module)										
Memoize ExpireFile package	R	Memoize::ExpireFile (module)										
No such signal: SIG	R	No such signal: SIG%s										
File::GlobMapper package	R	File::GlobMapper (module)										
Net::protoent package	R	Net::protoent (module)										
magical variables definition	R	magical variables (definition)										
IPC Cmd library	R	IPC::Cmd (module)										
DBM_Filter::encode module	R	DBM_Filter::encode (module)										
** operator	R	Binary "**" operator										
File Spec Mac	R	File::Spec::Mac (module)										
watch expression definition	R	watch expression (definition)										
ExtUtils MM_AIX library	R	ExtUtils::MM_AIX (module)										
__LINE__ method	R	__LINE__ (function)										
make my CGI script more efficient	R	How can I make my CGI script more efficient?										
format sub	R	format (function)										
pod F	R	F<filename>										
rand	R	rand (function)										
$^C	R	$^C (variable)										
define void context	R	void context (definition)										
tokenizing definition	R	tokenizing (definition)										
Why cant my script read from STDIN after I gave it EOF ^D on Unix ^Z on MSDOS	R	Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?										
process an entire hash	R	How do I process an entire hash?										
Encode::CN library	R	Encode::CN (module)										
IO Pipe package	R	IO::Pipe (module)										
Encode MIME Header module	R	Encode::MIME::Header (module)										
-d	R	-dt										
ExtUtils::Embed	R	ExtUtils::Embed (module)										
TAP Parser Scheduler Spinner library	R	TAP::Parser::Scheduler::Spinner (module)										
define ternary	R	ternary (definition)										
ExtUtils MM package	R	ExtUtils::MM (module)										
Encode TW	R	Encode::TW (module)										
==	R	Binary "==" operator										
B::Deparse module	R	B::Deparse (module)										
POSIX definition	R	POSIX (definition)										
symbol table	R	symbol table (definition)										
Pod Simple HTMLBatch module	R	Pod::Simple::HTMLBatch (module)										
qx subroutine	R	qx (function)										
Operation "" returns its argument for non-Unicode code point 0x	R	Operation "%s" returns its argument for non-Unicode code point 0x%X										
ExtUtils::MY module	R	ExtUtils::MY (module)										
Locale::Currency module	R	Locale::Currency (module)										
ExtUtils::MM_VMS	R	ExtUtils::MM_VMS (module)										
die function	R	die (function)										
Term ANSIColor library	R	Term::ANSIColor (module)										
Parse::CPAN::Meta	R	Parse::CPAN::Meta (module)										
-m [ - ] module	R	-[mM] [ - ] module=arg[,arg]...										
Term Cap package	R	Term::Cap (module)										
INIT subroutine	R	INIT (function)										
How do I extract selected columns from a string	R	How do I extract selected columns from a string?										
define errno	R	errno (definition)										
IO::Uncompress::AnyUncompress library	R	IO::Uncompress::AnyUncompress (module)										
bit	R	bit (definition)										
pop sub	R	pop (function)										
define portable	R	portable (definition)										
List::Util	R	List::Util (module)										
Dumpvalue module	R	Dumpvalue (module)										
Pod Perldoc ToChecker library	R	Pod::Perldoc::ToChecker (module)										
TAP Parser ResultFactory	R	TAP::Parser::ResultFactory (module)										
TAP::Parser::Scheduler::Job module	R	TAP::Parser::Scheduler::Job (module)										
How can I expand variables in text strings	R	How can I expand variables in text strings?										
B Deparse module	R	B::Deparse (module)										
I pod code	R	I<text>										
runtime	R	runtime (definition)										
ExtUtils::MM_Darwin module	R	ExtUtils::MM_Darwin (module)										
right shift definition	R	right shift (definition)										
type	R	type (definition)										
sub func	R	sub (function)										
Pod Simple PullParserTextToken package	R	Pod::Simple::PullParserTextToken (module)										
msgctl	R	msgctl (function)										
redo subroutine	R	redo (function)										
gmtime subroutine	R	gmtime (function)										
setservent subroutine	R	setservent (function)										
serialization	R	serialization (definition)										
listen method	R	listen (function)										
ExtUtils::MM_Unix module	R	ExtUtils::MM_Unix (module)										
File Spec Functions library	R	File::Spec::Functions (module)										
write routine	R	write (function)										
setsockopt subroutine	R	setsockopt (function)										
Unrecognized signal name ""	R	Unrecognized signal name "%s"										
TAP::Formatter::Console library	R	TAP::Formatter::Console (module)										
kill subroutine	R	kill (function)										
TAP Parser Scheduler Job module	R	TAP::Parser::Scheduler::Job (module)										
Tie Memoize library	R	Tie::Memoize (module)										
getnetent routine	R	getnetent (function)										
define byte	R	byte (definition)										
define standard	R	standard (definition)										
import function	R	import (function)										
TAP Parser YAMLish Writer library	R	TAP::Parser::YAMLish::Writer (module)										
null string definition	R	null string (definition)										
Compress::Raw::Zlib module	R	Compress::Raw::Zlib (module)										
gethostent subroutine	R	gethostent (function)										
caller method	R	caller (function)										
EVAL without pos change exceeded limit in regex; marked by <-- HERE in m//	R	EVAL without pos change exceeded limit in regex; marked by <-- HERE in m/%s/										
values function	R	values (function)										
soft reference	R	soft reference (definition)										
msgget subroutine	R	msgget (function)										
$OUTPUT_AUTOFLUSH	R	$| (variable)										
defined method	R	defined (function)										
Pod::Perldoc::ToXml library	R	Pod::Perldoc::ToXml (module)										
pipe subroutine	R	pipe (function)										
Time HiRes library	R	Time::HiRes (module)										
NaN	R	NaN (definition)										
-I flag	R	-I directory										
chmod func	R	chmod (function)										
TAP::Harness module	R	TAP::Harness (module)										
define separator	R	separator (definition)										
bind definition	R	bind (definition)										
precedence	R	precedence (definition)										
IO Uncompress Unzip library	R	IO::Uncompress::Unzip (module)										
pattern definition	R	pattern (definition)										
qq routine	R	qq (function)										
Tie::SubstrHash library	R	Tie::SubstrHash (module)										
shift routine	R	shift (function)										
PODs Embedded Documentation	R	PODs: Embedded Documentation										
lvaluable definition	R	lvaluable (definition)										
ne sub	R	ne (function)										
fileno func	R	fileno (function)										
fileno	R	fileno (function)										
use a variable as a variable name?	R	How can I use a variable as a variable name?										
Binary &	R	Binary "&" operator										
define troff	R	troff (definition)										
reverse	R	reverse (function)										
ExtUtils Packlist package	R	ExtUtils::Packlist (module)										
Sys::Hostname module	R	Sys::Hostname (module)										
Binary +	R	Binary "+" operator										
endservent routine	R	endservent (function)										
Attribute Handlers package	R	Attribute::Handlers (module)										
minicpan definition	R	minicpan (definition)										
File Spec VMS package	R	File::Spec::VMS (module)										
define permission bits	R	permission bits (definition)										
define referent	R	referent (definition)										
unless func	R	unless (function)										
How do I find the soundex value of a string	R	How do I find the soundex value of a string?										
File::Compare	R	File::Compare (module)										
Why do regex character classes sometimes match only in the ASCII range	R	Why do regex character classes sometimes match only in the ASCII range?										
define pumpking	R	pumpking (definition)										
Digest::MD5 library	R	Digest::MD5 (module)										
File Basename module	R	File::Basename (module)										
Hash Util	R	Hash::Util (module)										
IPC::Open2 module	R	IPC::Open2 (module)										
getnetbyaddr func	R	getnetbyaddr (function)										
How do I capitalize all the words on one line	R	How do I capitalize all the words on one line?										
Locale Country library	R	Locale::Country (module)										
/m modifier	R	/m regular expression modifier										
msgsnd	R	msgsnd (function)										
rvalue	R	rvalue (definition)										
IPC::SysV	R	IPC::SysV (module)										
-D flag	R	-D number										
Unicode::Collate package	R	Unicode::Collate (module)										
define subroutine	R	subroutine (definition)										
Using !~ with  doesn't make sense	R	Using !~ with %s doesn't make sense										
Can't call method "" without a package or object reference	R	Can't call method "%s" without a package or object reference										
evalbytes function	R	evalbytes (function)										
Illegal binary digit 	R	Illegal binary digit %s										
Encode Guess module	R	Encode::Guess (module)										
define struct	R	struct (definition)										
File GlobMapper library	R	File::GlobMapper (module)										
when function	R	when (function)										
ExtUtils Packlist library	R	ExtUtils::Packlist (module)										
exp method	R	exp (function)										
User grent package	R	User::grent (module)										
How can I use a variable as a variable name	R	How can I use a variable as a variable name?										
semaphore	R	semaphore (definition)										
Test::More module	R	Test::More (module)										
TAP Formatter Base module	R	TAP::Formatter::Base (module)										
semget func	R	semget (function)										
getprotobynumber	R	getprotobynumber (function)										
I18N::Langinfo	R	I18N::Langinfo (module)										
panic: sv_chop 	R	panic: sv_chop %s										
%{} in scalar context better written as ${}	R	%%s{%s} in scalar context better written as $%s{%s}										
ExtUtils::MM_Win95	R	ExtUtils::MM_Win95 (module)										
ExtUtils MM_QNX package	R	ExtUtils::MM_QNX (module)										
chmod method	R	chmod (function)										
Can't use '' in a group with different byte-order in 	R	Can't use '%c' in a group with different byte-order in %s										
determine if a string is a text string or a binary string	R	How can I determine if a string is a text string or a binary string?										
Module CoreList	R	Module::CoreList (module)										
Search::Dict library	R	Search::Dict (module)										
Pod Usage library	R	Pod::Usage (module)										
How do I look up a hash element by value	R	How do I look up a hash element by value?										
Encode JP module	R	Encode::JP (module)										
Memoize AnyDBM_File	R	Memoize::AnyDBM_File (module)										
define statement	R	statement (definition)										
call my system's unique C functions from Perl?	R	How can I call my system's unique C functions from Perl?										
Pod::Perldoc::GetOptsOO package	R	Pod::Perldoc::GetOptsOO (module)										
TAP::Parser::YAMLish::Reader library	R	TAP::Parser::YAMLish::Reader (module)										
How do I manipulate arrays of bits	R	How do I manipulate arrays of bits?										
Params::Check package	R	Params::Check (module)										
umask func	R	umask (function)										
Use of -l on filehandle	R	Use of -l on filehandle%s										
ord sub	R	ord (function)										
How do I verify a credit card checksum	R	How do I verify a credit card checksum?										
sort an array by (anything)?	R	How do I sort an array by (anything)?										
define invocant	R	invocant (definition)										
Binary eq operator	R	Binary "eq" operator										
Use of tainted arguments in  is deprecated	R	Use of tainted arguments in %s is deprecated										
ternary definition	R	ternary (definition)										
tell whether theres a character waiting on a filehandle	R	How can I tell whether there's a character waiting on a filehandle?										
ExtUtils::MY package	R	ExtUtils::MY (module)										
Pod Simple TextContent library	R	Pod::Simple::TextContent (module)										
unlink method	R	unlink (function)										
Encode Guess library	R	Encode::Guess (module)										
Pod::Text::Overstrike library	R	Pod::Text::Overstrike (module)										
Encode EBCDIC module	R	Encode::EBCDIC (module)										
IO::Compress::Bzip2 package	R	IO::Compress::Bzip2 (module)										
Pod Perldoc ToRtf module	R	Pod::Perldoc::ToRtf (module)										
Math::BigInt library	R	Math::BigInt (module)										
Net POP3 module	R	Net::POP3 (module)										
getnetent subroutine	R	getnetent (function)										
Whats MakeMaker	R	What's MakeMaker?										
Locale::Maketext::Guts	R	Locale::Maketext::Guts (module)										
Net Domain module	R	Net::Domain (module)										
Net netent	R	Net::netent (module)										
remove consecutive pairs of characters?	R	How do I remove consecutive pairs of characters?										
ExtUtils MM_Any	R	ExtUtils::MM_Any (module)										
TAP Formatter Console ParallelSession package	R	TAP::Formatter::Console::ParallelSession (module)										
null list definition	R	null list (definition)										
Z formatting code	R	Z<>										
$PREMATCH	R	$` (variable)										
package routine	R	package (function)										
How do I create a module	R	How do I create a module?										
CPAN FirstTime library	R	CPAN::FirstTime (module)										
Encode Config library	R	Encode::Config (module)										
define lookbehind	R	lookbehind (definition)										
canonical definition	R	canonical (definition)										
line	R	line (definition)										
readline func	R	readline (function)										
Unicode::Collate library	R	Unicode::Collate (module)										
IPC SharedMem library	R	IPC::SharedMem (module)										
getpgrp subroutine	R	getpgrp (function)										
elseif func	R	elseif (function)										
=for pod command	R	=for										
The stat preceding  wasn't an lstat	R	The stat preceding %s wasn't an lstat										
I18N LangTags List library	R	I18N::LangTags::List (module)										
PerlIO scalar module	R	PerlIO::scalar (module)										
getgrent method	R	getgrent (function)										
defined func	R	defined (function)										
difference between $array1 and array1	R	What is the difference between $array[1] and @array[1]?										
Unsupported directory function "" called	R	Unsupported directory function "%s" called										
Can't find  on PATH	R	Can't find %s on PATH										
chdir sub	R	chdir (function)										
DBM_Filter::utf8 module	R	DBM_Filter::utf8 (module)										
define DBM	R	DBM (definition)										
find yesterday's date?	R	How do I find yesterday's date?										
Symbol library	R	Symbol (module)										
define numeric context	R	numeric context (definition)										
UDP	R	UDP (definition)										
Archive::Tar::File module	R	Archive::Tar::File (module)										
left shift	R	left shift (definition)										
Having more than one / regexp modifier is deprecated	R	Having more than one /%c regexp modifier is deprecated										
Tie Hash NamedCapture library	R	Tie::Hash::NamedCapture (module)										
metasymbol	R	metasymbol (definition)										
Can't check filesystem of script "" for nosuid	R	Can't check filesystem of script "%s" for nosuid										
FAQ	R	FAQ (definition)										
contribute to the perlfaq	R	How to contribute to the perlfaq										
Hash Util module	R	Hash::Util (module)										
qx routine	R	qx (function)										
interface	R	interface (definition)										
use Perl interactively?	R	How can I use Perl interactively?										
connect function	R	connect (function)										
access a dynamic variable while a similarly named lexical is in scope?	R	How can I access a dynamic variable while a similarly named lexical is in scope?										
process	R	process (definition)										
B::Concise module	R	B::Concise (module)										
ExtUtils::Command::MM	R	ExtUtils::Command::MM (module)										
PerlIO via	R	PerlIO::via (module)										
Term Cap library	R	Term::Cap (module)										
define collating sequence	R	collating sequence (definition)										
Test Simple module	R	Test::Simple (module)										
Pod Perldoc	R	Pod::Perldoc (module)										
uppercase	R	uppercase (definition)										
Pod Simple SimpleTree library	R	Pod::Simple::SimpleTree (module)										
x function	R	x (function)										
$FORMAT_PAGE_NUMBER	R	$% (variable)										
Math BigInt FastCalc	R	Math::BigInt::FastCalc (module)										
Label not found for "next "	R	Label not found for "next %s"										
Encode::TW	R	Encode::TW (module)										
tied routine	R	tied (function)										
Pod::Perldoc::ToMan module	R	Pod::Perldoc::ToMan (module)										
GV	R	GV (definition)										
TAP::Parser::Source package	R	TAP::Parser::Source (module)										
sleep function	R	sleep (function)										
ExtUtils MakeMaker Config module	R	ExtUtils::MakeMaker::Config (module)										
File Spec Mac library	R	File::Spec::Mac (module)										
print	R	print (function)										
program	R	program (definition)										
regular expression	R	regular expression (definition)										
Pod Simple TextContent	R	Pod::Simple::TextContent (module)										
block buffering	R	block buffering (definition)										
Net::Time library	R	Net::Time (module)										
Memoize::Expire library	R	Memoize::Expire (module)										
What are Perl 4 Perl 5 or Perl 6	R	What are Perl 4, Perl 5, or Perl 6?										
msgsnd subroutine	R	msgsnd (function)										
Filehandle STDIN reopened as  only for output	R	Filehandle STDIN reopened as %s only for output										
=back pod command	R	=back										
define UDP	R	UDP (definition)										
ExtUtils MM_UWIN	R	ExtUtils::MM_UWIN (module)										
Locale Language module	R	Locale::Language (module)										
getpwnam method	R	getpwnam (function)										
Standard Library	R	Standard Library (definition)										
gt method	R	gt (function)										
parse tree definition	R	parse tree (definition)										
shmwrite method	R	shmwrite (function)										
Encode CJKConstants library	R	Encode::CJKConstants (module)										
Encode Unicode UTF7 module	R	Encode::Unicode::UTF7 (module)										
Can't locate loadable object for module  in @INC	R	Can't locate loadable object for module %s in @INC										
pod =end	R	=end										
IPC Open3 module	R	IPC::Open3 (module)										
getservbyport function	R	getservbyport (function)										
index func	R	index (function)										
Use "" instead of ""	R	Use "%s" instead of "%s"										
x modifier	R	/x regular expression modifier										
BEGIN routine	R	BEGIN (function)										
Tie Scalar module	R	Tie::Scalar (module)										
Encode::JP::H2Z library	R	Encode::JP::H2Z (module)										
TAP Parser Iterator Stream	R	TAP::Parser::Iterator::Stream (module)										
newline definition	R	newline (definition)										
"" subroutine & masks earlier declaration in same 	R	"%s" subroutine &%s masks earlier declaration in same %s										
Locale Maketext Simple library	R	Locale::Maketext::Simple (module)										
UNIVERSAL	R	UNIVERSAL (module)										
File Spec VMS module	R	File::Spec::VMS (module)										
Module name required with - option	R	Module name required with -%c option										
define eclectic	R	eclectic (definition)										
Data Dumper module	R	Data::Dumper (module)										
define metacharacter	R	metacharacter (definition)										
Pod::Simple::Search module	R	Pod::Simple::Search (module)										
unless	R	unless (function)										
lexical variable definition	R	lexical variable (definition)										
Search Dict package	R	Search::Dict (module)										
print out or copy a recursive data structure?	R	How do I print out or copy a recursive data structure?										
make my Perl program take less memory?	R	How can I make my Perl program take less memory?										
chop routine	R	chop (function)										
count the number of lines in a file	R	How do I count the number of lines in a file?										
Tie::RefHash package	R	Tie::RefHash (module)										
Attempt to free non-arena SV: 0x	R	Attempt to free non-arena SV: 0x%x										
Missing right brace on \{} in regex; marked by <-- HERE in m//	R	Missing right brace on \%c{} in regex; marked by <-- HERE in m/%s/										
File::Spec::Win32 package	R	File::Spec::Win32 (module)										
Net::POP3	R	Net::POP3 (module)										
autogeneration definition	R	autogeneration (definition)										
TAP::Parser::Result library	R	TAP::Parser::Result (module)										
$EXECUTABLE_NAME	R	$^X (variable)										
Encode::Encoding	R	Encode::Encoding (module)										
and method	R	and (function)										
perlunitut isnt really a Unicode tutorial is it	R	perlunitut isn't really a Unicode tutorial, is it?										
sort method	R	sort (function)										
pos func	R	pos (function)										
continue routine	R	continue (function)										
Whats the difference between require and use	R	What's the difference between require and use?										
Benchmark module	R	Benchmark (module)										
infix definition	R	infix (definition)										
getsockname subroutine	R	getsockname (function)										
s function	R	s (function)										
CORE:: is not a keyword	R	CORE::%s is not a keyword										
wantarray function	R	wantarray (function)										
gethostbyaddr subroutine	R	gethostbyaddr (function)										
"my" subroutine  can't be in a package	R	"my" subroutine %s can't be in a package										
rand subroutine	R	rand (function)										
command name definition	R	command name (definition)										
Locale::Script package	R	Locale::Script (module)										
getpriority sub	R	getpriority (function)										
toolbox approach	R	toolbox approach (definition)										
panic: unimplemented op  (#) called	R	panic: unimplemented op %s (#%d) called										
soft reference (definition)	R	symbolic reference										
User::grent module	R	User::grent (module)										
Where do I send bug reports	R	Where do I send bug reports?										
overriding definition	R	overriding (definition)										
Test library	R	Test (module)										
IO::Seekable library	R	IO::Seekable (module)										
Locale::Maketext	R	Locale::Maketext (module)										
getservbyport sub	R	getservbyport (function)										
capture variables definition	R	capture variables (definition)										
Pod Simple LinkSection library	R	Pod::Simple::LinkSection (module)										
define IV	R	IV (definition)										
$%	R	$% (variable)										
Z pod code	R	Z<>										
shutdown routine	R	shutdown (function)										
ExtUtils::Manifest module	R	ExtUtils::Manifest (module)										
Tie File package	R	Tie::File (module)										
word definition	R	word (definition)										
Can't chdir to 	R	Can't chdir to %s										
dbmopen	R	dbmopen (function)										
static variable	R	static variable (definition)										
Experimental "" subs not enabled	R	Experimental "%s" subs not enabled										
leaving effective  failed	R	leaving effective %s failed										
Net::Config	R	Net::Config (module)										
Pod::Simple::RTF module	R	Pod::Simple::RTF (module)										
Tie SubstrHash package	R	Tie::SubstrHash (module)										
ExtUtils::Installed module	R	ExtUtils::Installed (module)										
Pod Html package	R	Pod::Html (module)										
define combining character	R	combining character (definition)										
superuser	R	superuser (definition)										
$OLD_PERL_VERSION (variable)	R	$] (variable)										
Sys Hostname module	R	Sys::Hostname (module)										
modulus definition	R	modulus (definition)										
ExtUtils CBuilder Platform Windows library	R	ExtUtils::CBuilder::Platform::Windows (module)										
How do I dup a filehandle in Perl	R	How do I dup() a filehandle in Perl?										
Memoize::SDBM_File package	R	Memoize::SDBM_File (module)										
setpriority sub	R	setpriority (function)										
open	R	open (function)										
Sequence (?... not terminated in regex; marked by <-- HERE in m//	R	Sequence (?%c... not terminated in regex; marked by <-- HERE in m/%s/										
do function	R	do (function)										
or routine	R	or (function)										
Encode Unicode UTF7 package	R	Encode::Unicode::UTF7 (module)										
Corrupted regexp opcode  > 	R	Corrupted regexp opcode %d > %d										
define logical operator	R	logical operator (definition)										
rindex	R	rindex (function)										
operating system definition	R	operating system (definition)										
$~	R	$~ (variable)										
getprotobyname function	R	getprotobyname (function)										
ExtUtils MM_VOS package	R	ExtUtils::MM_VOS (module)										
__LINE__	R	__LINE__ (function)										
Getopt Std library	R	Getopt::Std (module)										
prototype routine	R	prototype (function)										
ExtUtils MM_DOS library	R	ExtUtils::MM_DOS (module)										
fileglob	R	fileglob (definition)										
argument	R	argument (definition)										
define switch cluster	R	switch cluster (definition)										
-dt: flag	R	-dt: MOD[=bar,baz]										
add the directory my program lives in to the module/library search path?	R	How do I add the directory my program lives in to the module/library search path?										
I18N Collate	R	I18N::Collate (module)										
__FILE__ method	R	__FILE__ (function)										
Locale Maketext GutsLoader module	R	Locale::Maketext::GutsLoader (module)										
getprotobynumber func	R	getprotobynumber (function)										
Encode Alias library	R	Encode::Alias (module)										
AUTOLOAD subroutine	R	AUTOLOAD (function)										
waitpid func	R	waitpid (function)										
B Xref module	R	B::Xref (module)										
Carp module	R	Carp (module)										
Pod Checker	R	Pod::Checker (module)										
bundle	R	bundle (definition)										
Pod::Text::Termcap library	R	Pod::Text::Termcap (module)										
Can't use bareword ("") as  ref while "strict refs" in use	R	Can't use bareword ("%s") as %s ref while "strict refs" in use										
Encode Encoder library	R	Encode::Encoder (module)										
DBM_Filter::encode package	R	DBM_Filter::encode (module)										
define link	R	link (definition)										
read subroutine	R	read (function)										
readdir method	R	readdir (function)										
getsockname method	R	getsockname (function)										
Insecure $ENV{} while running 	R	Insecure $ENV{%s} while running %s										
Encode::CN	R	Encode::CN (module)										
I18N::LangTags::Detect	R	I18N::LangTags::Detect (module)										
ne subroutine	R	ne (function)										
How do I extract URLs	R	How do I extract URLs?										
pack	R	pack (function)										
ExtUtils MM_Cygwin	R	ExtUtils::MM_Cygwin (module)										
Pod Simple HTML package	R	Pod::Simple::HTML (module)										
hacker definition	R	hacker (definition)										
block buffering definition	R	block buffering (definition)										
pathname	R	pathname (definition)										
Encode Guess package	R	Encode::Guess (module)										
define STDOUT	R	STDOUT (definition)										
Pod Escapes module	R	Pod::Escapes (module)										
Pod Find package	R	Pod::Find (module)										
Math::Complex module	R	Math::Complex (module)										
global definition	R	global (definition)										
TAP::Parser::Multiplexer package	R	TAP::Parser::Multiplexer (module)										
How can I read in a file by paragraphs	R	How can I read in a file by paragraphs?										
%!	R	%! (variable)										
define hexadecimal	R	hexadecimal (definition)										
null string	R	null string (definition)										
Verb pattern '' may not have an argument in regex; marked by <-- HERE in m//	R	Verb pattern '%s' may not have an argument in regex; marked by <-- HERE in m/%s/										
pod E	R	E<escape>										
$LAST_PAREN_MATCH (variable)	R	$+ (variable)										
en passant definition	R	en passant (definition)										
splice sub	R	splice (function)										
Locale Currency library	R	Locale::Currency (module)										
Pod Simple Search module	R	Pod::Simple::Search (module)										
Too late for "-" option	R	Too late for "-%s" option										
ExtUtils::MM_Darwin	R	ExtUtils::MM_Darwin (module)										
opendir method	R	opendir (function)										
$POSTMATCH	R	$' (variable)										
Thread::Semaphore	R	Thread::Semaphore (module)										
options	R	options (definition)										
m sub	R	m (function)										
File Spec Mac package	R	File::Spec::Mac (module)										
define exploit	R	exploit (definition)										
Pod::Text::Color module	R	Pod::Text::Color (module)										
quotemeta sub	R	quotemeta (function)										
filter	R	filter (definition)										
define character	R	character (definition)										
dweomer definition	R	dweomer (definition)										
Math::BigInt::FastCalc library	R	Math::BigInt::FastCalc (module)										
elsif	R	elsif (function)										
TAP::Parser::Aggregator	R	TAP::Parser::Aggregator (module)										
tell sub	R	tell (function)										
File Temp	R	File::Temp (module)										
File Spec Functions package	R	File::Spec::Functions (module)										
Pod Usage module	R	Pod::Usage (module)										
How do I match XML HTML or other nasty ugly things with a regex	R	How do I match XML, HTML, or other nasty, ugly things with a regex?										
change, delete, or insert a line in a file, or append to the beginning of a file?	R	How do I change, delete, or insert a line in a file, or append to the beginning of a file?										
%INC	R	%INC (variable)										
Binary =~ operator	R	Binary "=~" operator										
Pod::Simple::XHTML library	R	Pod::Simple::XHTML (module)										
Storable library	R	Storable (module)										
for	R	for (function)										
Integer overflow in format string for 	R	Integer overflow in format string for %s										
File::Spec::OS2	R	File::Spec::OS2 (module)										
$DEBUGGING (variable)	R	$^D (variable)										
utime	R	utime (function)										
get a files timestamp in perl	R	How do I get a file's timestamp in perl?										
TAP::Parser::Iterator::Array library	R	TAP::Parser::Iterator::Array (module)										
Time gmtime	R	Time::gmtime (module)										
Fcntl package	R	Fcntl (module)										
goto method	R	goto (function)										
define normalization	R	normalization (definition)										
Memoize	R	Memoize (module)										
@ARG	R	@_ (variable)										
Attribute::Handlers module	R	Attribute::Handlers (module)										
CHECK method	R	CHECK (function)										
Binary gt operator	R	Binary "gt" operator										
I18N::LangTags::List library	R	I18N::LangTags::List (module)										
getpgrp sub	R	getpgrp (function)										
File Glob	R	File::Glob (module)										
getservbyport routine	R	getservbyport (function)										
Net::Domain library	R	Net::Domain (module)										
Pod InputObjects module	R	Pod::InputObjects (module)										
define argument	R	argument (definition)										
getprotoent sub	R	getprotoent (function)										
What is the UTF8 flag	R	What is "the UTF8 flag"?										
Cwd module	R	Cwd (module)										
unpack routine	R	unpack (function)										
syswrite method	R	syswrite (function)										
delete a directory tree?	R	How do I delete a directory tree?										
Can't locate 	R	Can't locate %s										
Binary <=	R	Binary "<=" operator										
setnetent method	R	setnetent (function)										
Attempt to free unreferenced scalar: SV 0x	R	Attempt to free unreferenced scalar: SV 0x%x										
Text::ParseWords	R	Text::ParseWords (module)										
Pod::Simple::LinkSection package	R	Pod::Simple::LinkSection (module)										
define Pern	R	Pern (definition)										
get() on closed socket 	R	get%sname() on closed socket %s										
system	R	system (function)										
declarator	R	declarator (definition)										
False [] range "" in regex; marked by <-- HERE in m//	R	False [] range "%s" in regex; marked by <-- HERE in m/%s/										
Math BigFloat	R	Math::BigFloat (module)										
$^A	R	$^A (variable)										
File::Spec package	R	File::Spec (module)										
list definition	R	list (definition)										
panic: return, type=	R	panic: return, type=%u										
IO::Poll	R	IO::Poll (module)										
know how many entries are in a hash	R	How can I know how many entries are in a hash?										
File::GlobMapper	R	File::GlobMapper (module)										
Encode::Encoder package	R	Encode::Encoder (module)										
Math Complex package	R	Math::Complex (module)										
Unicode Collate module	R	Unicode::Collate (module)										
ExtUtils::Constant module	R	ExtUtils::Constant (module)										
HANDLE->input_line_number( EXPR )	R	$. (variable)										
 package attribute may clash with future reserved word: 	R	%s package attribute may clash with future reserved word: %s										
Cannot pack  with ''	R	Cannot pack %f with '%c'										
make match national character sets	R	How can I make match national character sets?										
UID	R	UID (definition)										
HANDLE->autoflush( EXPR ) (variable)	R	$| (variable)										
list context definition	R	list context (definition)										
-0 option	R	-0 [ octal/hexadecimal ]										
define possessive	R	possessive (definition)										
static	R	static (definition)										
Memoize NDBM_File	R	Memoize::NDBM_File (module)										
msgrcv method	R	msgrcv (function)										
backtracking definition	R	backtracking (definition)										
TAP Parser Result Plan library	R	TAP::Parser::Result::Plan (module)										
Net protoent	R	Net::protoent (module)										
bareword	R	bareword (definition)										
exp	R	exp (function)										
Pod PlainText library	R	Pod::PlainText (module)										
Encode::EBCDIC	R	Encode::EBCDIC (module)										
Can't locate auto/.al in @INC	R	Can't locate auto/%s.al in @INC										
setpwent subroutine	R	setpwent (function)										
define shell	R	shell (definition)										
traverse a directory tree?	R	How do I traverse a directory tree?										
call by reference	R	call by reference (definition)										
define standard output	R	standard output (definition)										
pack func	R	pack (function)										
\ operator	R	Unary "\" operator										
state sub	R	state (function)										
msgctl func	R	msgctl (function)										
Memoize Storable package	R	Memoize::Storable (module)										
ExtUtils::MakeMaker::FAQ	R	ExtUtils::MakeMaker::FAQ (module)										
bundle definition	R	bundle (definition)										
unpack subroutine	R	unpack (function)										
B Xref package	R	B::Xref (module)										
NDBM_File module	R	NDBM_File (module)										
sysopen subroutine	R	sysopen (function)										
define exit status	R	exit status (definition)										
map	R	map (function)										
Operand with no preceding operator in regex; marked by <-- HERE in m//	R	Operand with no preceding operator in regex; marked by <-- HERE in m/%s/										
compare two dates and find the difference?	R	How can I compare two dates and find the difference?										
How do I keep my own modulelibrary directory	R	How do I keep my own module/library directory?										
ExtUtils::Mkbootstrap module	R	ExtUtils::Mkbootstrap (module)										
nybble definition	R	nybble (definition)										
minimalism	R	minimalism (definition)										
Can't locate object method "" via package ""	R	Can't locate object method "%s" via package "%s"										
How do I determine whether a scalar is a numberwholeintegerfloat	R	How do I determine whether a scalar is a number/whole/integer/float?										
sv_upgrade from type  down to type 	R	sv_upgrade from type %d down to type %d										
define XS	R	XS (definition)										
say subroutine	R	say (function)										
ExtUtils::MM_Win32 package	R	ExtUtils::MM_Win32 (module)										
Hash::Util::FieldHash library	R	Hash::Util::FieldHash (module)										
Test::Builder::Tester::Color library	R	Test::Builder::Tester::Color (module)										
signal definition	R	signal (definition)										
byte	R	byte (definition)										
readlink subroutine	R	readlink (function)										
TAP Parser IteratorFactory	R	TAP::Parser::IteratorFactory (module)										
\C is deprecated in regex; marked by <-- HERE in m//	R	\C is deprecated in regex; marked by <-- HERE in m/%s/										
setgrent routine	R	setgrent (function)										
Getopt Long	R	Getopt::Long (module)										
standard input	R	standard input (definition)										
/m	R	/m regular expression modifier										
case	R	case (definition)										
syswrite	R	syswrite (function)										
Pod Simple Search library	R	Pod::Simple::Search (module)										
sethostent func	R	sethostent (function)										
Pod ParseUtils library	R	Pod::ParseUtils (module)										
File GlobMapper package	R	File::GlobMapper (module)										
ExtUtils::Constant::XS	R	ExtUtils::Constant::XS (module)										
Can I use Perl regular expressions to match balanced text	R	Can I use Perl regular expressions to match balanced text?										
ExtUtils CBuilder Platform Windows	R	ExtUtils::CBuilder::Platform::Windows (module)										
return func	R	return (function)										
cos function	R	cos (function)										
Term::ANSIColor package	R	Term::ANSIColor (module)										
lstat	R	lstat (function)										
File Spec Functions	R	File::Spec::Functions (module)										
CPAN Queue module	R	CPAN::Queue (module)										
Thread Queue package	R	Thread::Queue (module)										
read func	R	read (function)										
Pod::ParseLink module	R	Pod::ParseLink (module)										
<<	R	Binary "<<" operator										
trigger definition	R	trigger (definition)										
ASCII	R	ASCII (definition)										
indirect object	R	indirect object (definition)										
TAP::Parser::Iterator	R	TAP::Parser::Iterator (module)										
regex definition	R	regex (definition)										
say func	R	say (function)										
Memoize module	R	Memoize (module)										
$^F	R	$^F (variable)										
CPAN::FirstTime	R	CPAN::FirstTime (module)										
referent	R	referent (definition)										
File::Spec	R	File::Spec (module)										
setservent function	R	setservent (function)										
localtime method	R	localtime (function)										
wrapper definition	R	wrapper (definition)										
Perl mongers	R	Perl mongers (definition)										
IO Compress Bzip2 library	R	IO::Compress::Bzip2 (module)										
Binary <<	R	Binary "<<" operator										
Fatal package	R	Fatal (module)										
Can't exec "": 	R	Can't exec "%s": %s										
App::Prove::State::Result module	R	App::Prove::State::Result (module)										
How do I set a files timestamp in perl	R	How do I set a file's timestamp in perl?										
Math Complex	R	Math::Complex (module)										
define filesystem	R	filesystem (definition)										
MIME Base64	R	MIME::Base64 (module)										
define recursion	R	recursion (definition)										
unescape a string	R	How do I unescape a string?										
/	R	Binary "/" operator										
mkdir function	R	mkdir (function)										
CPAN::Debug module	R	CPAN::Debug (module)										
POSIX library	R	POSIX (module)										
elseif function	R	elseif (function)										
difference between deep and shallow binding	R	What's the difference between deep and shallow binding?										
define manpage	R	manpage (definition)										
Operation "": no method found, 	R	Operation "%s": no method found, %s										
ne function	R	ne (function)										
Net Netrc	R	Net::Netrc (module)										
BEGIN function	R	BEGIN (function)										
File::stat package	R	File::stat (module)										
File Copy	R	File::Copy (module)										
Locale Maketext	R	Locale::Maketext (module)										
'' trapped by operation mask	R	'%s' trapped by operation mask										
Getopt Long library	R	Getopt::Long (module)										
and routine	R	and (function)										
syswrite() on closed filehandle 	R	syswrite() on closed filehandle %s										
Pod Simple XMLOutStream module	R	Pod::Simple::XMLOutStream (module)										
No comma allowed after 	R	No comma allowed after %s										
ExtUtils Command MM module	R	ExtUtils::Command::MM (module)										
Time::localtime library	R	Time::localtime (module)										
write() into a string?	R	How can I write() into a string?										
Pod Simple module	R	Pod::Simple (module)										
ExtUtils Command module	R	ExtUtils::Command (module)										
Switch condition not recognized in regex; marked by <-- HERE in m//	R	Switch condition not recognized in regex; marked by <-- HERE in m/%s/										
=encoding pod command	R	=encoding										
ExtUtils::MM_DOS library	R	ExtUtils::MM_DOS (module)										
How do I reset an each operation partway through	R	How do I reset an each() operation part-way through?										
Can't open output pipe (name: )	R	Can't open output pipe (name: %s)										
Whats the difference between deep and shallow binding	R	What's the difference between deep and shallow binding?										
define header file	R	header file (definition)										
define PV	R	PV (definition)										
foreach routine	R	foreach (function)										
define function	R	function (definition)										
m subroutine	R	m (function)										
alarm routine	R	alarm (function)										
Encode EBCDIC package	R	Encode::EBCDIC (module)										
setnetent routine	R	setnetent (function)										
Pod::Select	R	Pod::Select (module)										
q func	R	q (function)										
leftmost longest definition	R	leftmost longest (definition)										
Hash::Util package	R	Hash::Util (module)										
Missing argument in 	R	Missing argument in %s										
minimalism definition	R	minimalism (definition)										
ExtUtils MakeMaker FAQ library	R	ExtUtils::MakeMaker::FAQ (module)										
Illegal character after '_' in prototype for  : 	R	Illegal character after '_' in prototype for %s : %s										
App::Prove::State::Result::Test package	R	App::Prove::State::Result::Test (module)										
How can I call backticks without shell processing	R	How can I call backticks without shell processing?										
TAP::Parser::Scheduler module	R	TAP::Parser::Scheduler (module)										
verify a credit card checksum?	R	How do I verify a credit card checksum?										
Devel::Peek library	R	Devel::Peek (module)										
How can I set up a footer format to be used with write	R	How can I set up a footer format to be used with write()?										
Tie SubstrHash module	R	Tie::SubstrHash (module)										
TAP Parser Iterator Process library	R	TAP::Parser::Iterator::Process (module)										
setpwent routine	R	setpwent (function)										
typedef	R	typedef (definition)										
DirHandle package	R	DirHandle (module)										
Encode::JP module	R	Encode::JP (module)										
Safe	R	Safe (module)										
runtime pattern definition	R	runtime pattern (definition)										
IO::File	R	IO::File (module)										
pod a character escape	R	E<escape>										
semget subroutine	R	semget (function)										
undef subroutine	R	undef (function)										
typeglob	R	typeglob (definition)										
Pod::Functions module	R	Pod::Functions (module)										
tr routine	R	tr (function)										
Pod Perldoc ToText package	R	Pod::Perldoc::ToText (module)										
This Perl can't reset CRTL environ elements ()	R	This Perl can't set CRTL environ elements (%s=%s)										
Digest module	R	Digest (module)										
lookahead	R	lookahead (definition)										
__DATA__ func	R	__DATA__ (function)										
line number	R	line number (definition)										
getpriority routine	R	getpriority (function)										
define postfix	R	postfix (definition)										
Reference to nonexistent named group in regex; marked by <-- HERE in m//	R	Reference to nonexistent named group in regex; marked by <-- HERE in m/%s/										
add a directory to my include path INC at runtime	R	How do I add a directory to my include path (@INC) at runtime?										
Locale Maketext Simple package	R	Locale::Maketext::Simple (module)										
I18N LangTags package	R	I18N::LangTags (module)										
semget	R	semget (function)										
package subroutine	R	package (function)										
IO Uncompress RawInflate	R	IO::Uncompress::RawInflate (module)										
Pod ParseLink library	R	Pod::ParseLink (module)										
$|	R	$| (variable)										
reverse routine	R	reverse (function)										
XS definition	R	XS (definition)										
File Find package	R	File::Find (module)										
Pod::Simple::XMLOutStream library	R	Pod::Simple::XMLOutStream (module)										
Time::Seconds module	R	Time::Seconds (module)										
$@	R	$@ (variable)										
IO File package	R	IO::File (module)										
printf function	R	printf (function)										
Pod PlainText module	R	Pod::PlainText (module)										
Why does defined return true on empty arrays and hashes	R	Why does defined() return true on empty arrays and hashes?										
portable	R	portable (definition)										
memory	R	memory (definition)										
regular expression modifier definition	R	regular expression modifier (definition)										
or subroutine	R	or (function)										
__SUB__ method	R	__SUB__ (function)										
List Util XS library	R	List::Util::XS (module)										
Locale::Script	R	Locale::Script (module)										
Digest::MD5	R	Digest::MD5 (module)										
PerlIO encoding package	R	PerlIO::encoding (module)										
ExtUtils::Command::MM package	R	ExtUtils::Command::MM (module)										
Character(s) in '' format wrapped in unpack	R	Character(s) in '%c' format wrapped in unpack										
Pod Simple	R	Pod::Simple (module)										
le sub	R	le (function)										
File::Spec::Epoc module	R	File::Spec::Epoc (module)										
define line buffering	R	line buffering (definition)										
I lost track what encoding is the internal format really	R	I lost track; what encoding is the internal format really?										
How can I find the Julian Day	R	How can I find the Julian Day?										
File::Path	R	File::Path (module)										
Whats the difference between perl and Perl	R	What's the difference between "perl" and "Perl"?										
SV	R	SV (definition)										
END subroutine	R	END (function)										
How do I get a random number between X and Y	R	How do I get a random number between X and Y?										
recv function	R	recv (function)										
CPAN::HandleConfig library	R	CPAN::HandleConfig (module)										
IO::Uncompress::AnyUncompress	R	IO::Uncompress::AnyUncompress (module)										
 (...) interpreted as function	R	%s (...) interpreted as function										
define tie	R	tie (definition)										
B Terse library	R	B::Terse (module)										
CPAN HandleConfig package	R	CPAN::HandleConfig (module)										
Math BigRat package	R	Math::BigRat (module)										
?:	R	Ternary "?:" operator										
How can I make my hash remember the order I put elements into it	R	How can I make my hash remember the order I put elements into it?										
possessive	R	possessive (definition)										
File::Glob	R	File::Glob (module)										
getgrent routine	R	getgrent (function)										
srand function	R	srand (function)										
Unicode::Normalize module	R	Unicode::Normalize (module)										
TAP::Parser::ResultFactory module	R	TAP::Parser::ResultFactory (module)										
ExtUtils Mkbootstrap	R	ExtUtils::Mkbootstrap (module)										
handle circular lists?	R	How do I handle circular lists?										
system subroutine	R	system (function)										
IPC SharedMem	R	IPC::SharedMem (module)										
translate tildes ~ in a filename	R	How can I translate tildes (~) in a filename?										
record	R	record (definition)										
define protocol	R	protocol (definition)										
ExtUtils::MM_UWIN	R	ExtUtils::MM_UWIN (module)										
TAP Parser Scheduler Spinner package	R	TAP::Parser::Scheduler::Spinner (module)										
Useless (?) - use / modifier in regex; marked by <-- HERE in m//	R	Useless (?%s) - use /%s modifier in regex; marked by <-- HERE in m/%s/										
Unicode::Normalize package	R	Unicode::Normalize (module)										
How can I use Perl interactively	R	How can I use Perl interactively?										
unexec of  into  failed!	R	unexec of %s into %s failed!										
Pod::Simple::Checker	R	Pod::Simple::Checker (module)										
Encode KR module	R	Encode::KR (module)										
TAP::Formatter::File::Session package	R	TAP::Formatter::File::Session (module)										
B::Concise	R	B::Concise (module)										
Term ReadLine module	R	Term::ReadLine (module)										
define integer	R	integer (definition)										
BEGIN subroutine	R	BEGIN (function)										
pp definition	R	pp (definition)										
$]	R	$] (variable)										
Pod Escapes library	R	Pod::Escapes (module)										
ExtUtils Mkbootstrap module	R	ExtUtils::Mkbootstrap (module)										
y func	R	y (function)										
substr subroutine	R	substr (function)										
Why doesnt my$foo = <$fh> work right	R	Why doesn't "my($foo) = <$fh>;" work right?										
join function	R	join (function)										
ucfirst sub	R	ucfirst (function)										
Unicode Collate library	R	Unicode::Collate (module)										
Pod::Usage library	R	Pod::Usage (module)										
-W switch	R	-W										
-f option	R	-f										
global destruction definition	R	global destruction (definition)										
Ive read perlembed perlguts etc but I cant embed perl in my C program what am I doing wrong	R	I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?										
open a file without blocking?	R	How do I open a file without blocking?										
define method	R	method (definition)										
IO::Zlib	R	IO::Zlib (module)										
object definition	R	object (definition)										
accept method	R	accept (function)										
File::Find library	R	File::Find (module)										
q routine	R	q (function)										
pod text contains non-breaking spaces	R	S<text>										
${^CHILD_ERROR_NATIVE}	R	${^CHILD_ERROR_NATIVE} (variable)										
IO::Uncompress::Bunzip2	R	IO::Uncompress::Bunzip2 (module)										
define command name	R	command name (definition)										
pod =begin	R	=begin										
ExtUtils MY module	R	ExtUtils::MY (module)										
ExtUtils::MM_OS2	R	ExtUtils::MM_OS2 (module)										
Time gmtime package	R	Time::gmtime (module)										
 did not return a true value	R	%s did not return a true value										
return routine	R	return (function)										
pragma definition	R	pragma (definition)										
Data::Dumper module	R	Data::Dumper (module)										
Can't return  from lvalue subroutine	R	Can't return %s from lvalue subroutine										
What does bad interpreter mean	R	What does "bad interpreter" mean?										
$^S	R	$^S (variable)										
Pod::Checker module	R	Pod::Checker (module)										
getservent subroutine	R	getservent (function)										
prototype method	R	prototype (function)										
Can't do inplace edit on : 	R	Can't do inplace edit on %s: %s										
Time::Piece module	R	Time::Piece (module)										
close a process's filehandle without waiting for it to complete?	R	How do I close a process's filehandle without waiting for it to complete?										
chop method	R	chop (function)										
lock	R	lock (function)										
Whats wrong with using grep in a void context	R	What's wrong with using grep in a void context?										
define symbolic link	R	symbolic link (definition)										
write expect in Perl?	R	How can I write expect in Perl?										
Math Trig module	R	Math::Trig (module)										
ioctl subroutine	R	ioctl (function)										
require function	R	require (function)										
service	R	service (definition)										
array definition	R	array (definition)										
/a, d, l and u modifier	R	/a, d, l and u regular expression modifier										
Are Perl regexes DFAs or NFAs Are they POSIX compliant	R	Are Perl regexes DFAs or NFAs? Are they POSIX compliant?										
Exporter Heavy library	R	Exporter::Heavy (module)										
Malformed UTF-8 returned by \N{} immediately after ''	R	Malformed UTF-8 returned by \N{%s} immediately after '%s'										
reverse func	R	reverse (function)										
Locale Language package	R	Locale::Language (module)										
asynchronous definition	R	asynchronous (definition)										
prevent addition of unwanted keys into a hash	R	How can I prevent addition of unwanted keys into a hash?										
reference	R	reference (definition)										
File Spec Epoc package	R	File::Spec::Epoc (module)										
Pod Text package	R	Pod::Text (module)										
Pod Perldoc ToPod package	R	Pod::Perldoc::ToPod (module)										
Unknown switch condition (?(...)) in regex; marked by <-- HERE in m//	R	Unknown switch condition (?(...)) in regex; marked by <-- HERE in m/%s/										
define pipeline	R	pipeline (definition)										
pid  not a child	R	pid %x not a child										
ExtUtils::Miniperl	R	ExtUtils::Miniperl (module)										
define awk	R	awk (definition)										
IO Dir package	R	IO::Dir (module)										
Math BigInt Calc	R	Math::BigInt::Calc (module)										
ExtUtils MM_Any library	R	ExtUtils::MM_Any (module)										
Encode MIME Name package	R	Encode::MIME::Name (module)										
Pod::Text::Overstrike	R	Pod::Text::Overstrike (module)										
sqrt	R	sqrt (function)										
Pod::Escapes	R	Pod::Escapes (module)										
class method definition	R	class method (definition)										
Storable	R	Storable (module)										
IO::Compress::Base	R	IO::Compress::Base (module)										
File::Spec::VMS module	R	File::Spec::VMS (module)										
How do I avoid zombies on a Unix system	R	How do I avoid zombies on a Unix system?										
Format  redefined	R	Format %s redefined										
Exporter::Heavy library	R	Exporter::Heavy (module)										
each	R	each (function)										
Can't use both '<' and '>' after type '' in 	R	Can't use both '<' and '>' after type '%c' in %s										
File::Glob module	R	File::Glob (module)										
expand variables in text strings	R	How can I expand variables in text strings?										
chomp function	R	chomp (function)										
seekdir function	R	seekdir (function)										
Pod::Simple::XMLOutStream module	R	Pod::Simple::XMLOutStream (module)										
literal definition	R	literal (definition)										
flock	R	flock (function)										
magical increment	R	magical increment (definition)										
File::Spec::Mac	R	File::Spec::Mac (module)										
ExtUtils::MM_QNX library	R	ExtUtils::MM_QNX (module)										
instance method definition	R	instance method (definition)										
App Prove State	R	App::Prove::State (module)										
decode or create those encodings on the web	R	How do I decode or create those %-encodings on the web?										
no function	R	no (function)										
ExtUtils::MM_Darwin library	R	ExtUtils::MM_Darwin (module)										
!	R	Unary "!" operator										
TAP Parser module	R	TAP::Parser (module)										
italic text pod	R	I<text>										
socket definition	R	socket (definition)										
gt routine	R	gt (function)										
How can I call my systems unique C functions from Perl	R	How can I call my system's unique C functions from Perl?										
IO::Seekable	R	IO::Seekable (module)										
reformat a paragraph?	R	How do I reformat a paragraph?										
shutdown method	R	shutdown (function)										
Whats wrong with using backticks in a void context	R	What's wrong with using backticks in a void context?										
shmget function	R	shmget (function)										
iteration	R	iteration (definition)										
temporarily block warnings?	R	How do I temporarily block warnings?										
DB	R	DB (module)										
Pod Simple PullParserToken library	R	Pod::Simple::PullParserToken (module)										
ExtUtils::ParseXS library	R	ExtUtils::ParseXS (module)										
Class::Struct package	R	Class::Struct (module)										
DESTROY	R	DESTROY (function)										
CPAN::Tarzip library	R	CPAN::Tarzip (module)										
closedir routine	R	closedir (function)										
How can I write into a string	R	How can I write() into a string?										
le method	R	le (function)										
sethostent routine	R	sethostent (function)										
Math::BigInt::CalcEmu library	R	Math::BigInt::CalcEmu (module)										
Memoize::SDBM_File module	R	Memoize::SDBM_File (module)										
abs function	R	abs (function)										
$SYSTEM_FD_MAX (variable)	R	$^F (variable)										
sigil	R	sigil (definition)										
keys	R	keys (function)										
define named pipe	R	named pipe (definition)										
panic: last, type=	R	panic: last, type=%u										
define overloading	R	overloading (definition)										
Pod Find	R	Pod::Find (module)										
Tie::Array library	R	Tie::Array (module)										
TAP::Object package	R	TAP::Object (module)										
Net Time library	R	Net::Time (module)										
TAP::Parser::Result::Version package	R	TAP::Parser::Result::Version (module)										
NaN definition	R	NaN (definition)										
Locale::Maketext::Simple package	R	Locale::Maketext::Simple (module)										
built-in	R	built-in (definition)										
overloading	R	overloading (definition)										
rewinddir	R	rewinddir (function)										
chroot routine	R	chroot (function)										
File::Spec::Cygwin module	R	File::Spec::Cygwin (module)										
Locale::Language library	R	Locale::Language (module)										
Pod Text Overstrike module	R	Pod::Text::Overstrike (module)										
Locale Currency package	R	Locale::Currency (module)										
* operator	R	Binary "*" operator										
=encoding pod	R	=encoding										
Why cant I use Ctempfoo in DOS paths Why doesnt `Ctempfooexe` work	R	Why can't I use "C:\temp\foo" in DOS paths? Why doesn't `C:\temp\foo.exe` work?										
I18N LangTags Detect	R	I18N::LangTags::Detect (module)										
localtime	R	localtime (function)										
Ambiguous use of %c{%s[...]} resolved to %c%s[...]	R	Ambiguous use of %c{%s{...}} resolved to %c%s{...}										
permission bits definition	R	permission bits (definition)										
|	R	Binary "|" operator										
ExtUtils::Command module	R	ExtUtils::Command (module)										
wait sub	R	wait (function)										
elsif sub	R	elsif (function)										
sin func	R	sin (function)										
return value definition	R	return value (definition)										
App::Prove	R	App::Prove (module)										
Invalid strict version format ()	R	Invalid strict version format (%s)										
readlink routine	R	readlink (function)										
$FORMAT_TOP_NAME (variable)	R	$^ (variable)										
Test Builder package	R	Test::Builder (module)										
Test::Simple library	R	Test::Simple (module)										
Integer overflow in  number	R	Integer overflow in %s number										
__PACKAGE__ sub	R	__PACKAGE__ (function)										
Fcntl library	R	Fcntl (module)										
TAP::Formatter::Console::Session library	R	TAP::Formatter::Console::Session (module)										
Compress Raw Bzip2 library	R	Compress::Raw::Bzip2 (module)										
ExtUtils Constant module	R	ExtUtils::Constant (module)										
module	R	module (definition)										
memory definition	R	memory (definition)										
Unterminated verb pattern in regex; marked by <-- HERE in m//	R	Unterminated verb pattern in regex; marked by <-- HERE in m/%s/										
Ambiguous use of {{...}} resolved to {...}	R	Ambiguous use of %c{%s{...}} resolved to %c%s{...}										
DBM_Filter null package	R	DBM_Filter::null (module)										
bind() on closed socket 	R	bind() on closed socket %s										
define synchronous	R	synchronous (definition)										
local definition	R	local (definition)										
Pod PlainText	R	Pod::PlainText (module)										
Encode::KR::2022_KR package	R	Encode::KR::2022_KR (module)										
alarm subroutine	R	alarm (function)										
given method	R	given (function)										
B Deparse	R	B::Deparse (module)										
difference between require and use	R	What's the difference between require and use?										
TAP::Parser::YAMLish::Reader	R	TAP::Parser::YAMLish::Reader (module)										
How can I compile my Perl program into byte code or C	R	How can I compile my Perl program into byte code or C?										
define progressive matching	R	progressive matching (definition)										
PerlIO scalar	R	PerlIO::scalar (module)										
Encode::MIME::Name	R	Encode::MIME::Name (module)										
assignment	R	assignment (definition)										
define import	R	import (definition)										
progressive matching	R	progressive matching (definition)										
Pod Perldoc ToNroff	R	Pod::Perldoc::ToNroff (module)										
Compress::Zlib library	R	Compress::Zlib (module)										
CV definition	R	CV (definition)										
define modifier	R	modifier (definition)										
telldir() attempted on invalid dirhandle 	R	telldir() attempted on invalid dirhandle %s										
Test Harness	R	Test::Harness (module)										
File GlobMapper module	R	File::GlobMapper (module)										
defined sub	R	defined (function)										
PerlIO encoding	R	PerlIO::encoding (module)										
define command	R	command (definition)										
INIT	R	INIT (function)										
App Prove	R	App::Prove (module)										
DBM_Filter	R	DBM_Filter (module)										
IPC Semaphore	R	IPC::Semaphore (module)										
panic: reference miscount on nsv in sv_replace() ( != 1)	R	panic: reference miscount on nsv in sv_replace() (%d != 1)										
truncate subroutine	R	truncate (function)										
@+	R	@+ (variable)										
How do I delete a directory tree	R	How do I delete a directory tree?										
ExtUtils MM_DOS	R	ExtUtils::MM_DOS (module)										
directive	R	directive (definition)										
Locale::Country module	R	Locale::Country (module)										
Unicode::UCD package	R	Unicode::UCD (module)										
File Fetch package	R	File::Fetch (module)										
IO::File module	R	IO::File (module)										
TAP::Formatter::Session module	R	TAP::Formatter::Session (module)										
qq subroutine	R	qq (function)										
Math BigInt FastCalc library	R	Math::BigInt::FastCalc (module)										
eof method	R	eof (function)										
CPAN Tarzip	R	CPAN::Tarzip (module)										
setservent method	R	setservent (function)										
difference between calling a function as &foo and foo()?	R	What's the difference between calling a function as &foo and foo()?										
yacc	R	yacc (definition)										
-T switch	R	-T										
no func	R	no (function)										
IO::Handle module	R	IO::Handle (module)										
How do I perform an operation on a series of integers	R	How do I perform an operation on a series of integers?										
Locale Maketext GutsLoader library	R	Locale::Maketext::GutsLoader (module)										
expand variables in text strings?	R	How can I expand variables in text strings?										
right shift	R	right shift (definition)										
define trinary	R	trinary (definition)										
Whats the difference between dynamic and lexical static scoping Between local and my	R	What's the difference between dynamic and lexical (static) scoping? Between local() and my()?										
read in a file by paragraphs?	R	How can I read in a file by paragraphs?										
Digest MD5 module	R	Digest::MD5 (module)										
XSUB	R	XSUB (definition)										
Math::Complex	R	Math::Complex (module)										
semop function	R	semop (function)										
define pathname	R	pathname (definition)										
command	R	command (definition)										
Net::FTP::dataconn library	R	Net::FTP::dataconn (module)										
dup a filehandle in Perl	R	How do I dup() a filehandle in Perl?										
stat subroutine	R	stat (function)										
CPAN::HandleConfig package	R	CPAN::HandleConfig (module)										
dbmclose func	R	dbmclose (function)										
delete func	R	delete (function)										
look up a hash element by value?	R	How do I look up a hash element by value?										
Math BigInt module	R	Math::BigInt (module)										
Symbol module	R	Symbol (module)										
Encode Alias package	R	Encode::Alias (module)										
Can't use global  in ""	R	Can't use global %s in "%s"										
ExtUtils::MM_MacOS module	R	ExtUtils::MM_MacOS (module)										
=over pod command	R	=over										
MIME QuotedPrint library	R	MIME::QuotedPrint (module)										
signal handler definition	R	signal handler (definition)										
IO::Select package	R	IO::Select (module)										
Thread Queue library	R	Thread::Queue (module)										
delete the last N lines from a file	R	How do I delete the last N lines from a file?										
file descriptor definition	R	file descriptor (definition)										
Encode::Encoder	R	Encode::Encoder (module)										
$ACCUMULATOR	R	$^A (variable)										
until sub	R	until (function)										
User grent module	R	User::grent (module)										
status	R	status (definition)										
not func	R	not (function)										
change the Nth occurrence of something	R	How do I change the Nth occurrence of something?										
Unicode UCD library	R	Unicode::UCD (module)										
Class Struct module	R	Class::Struct (module)										
handle binary data correctly	R	How do I handle binary data correctly?										
L pod code	R	L<name>										
Filter::Simple module	R	Filter::Simple (module)										
I/O layer definition	R	I/O layer (definition)										
ExtUtils::Constant::XS module	R	ExtUtils::Constant::XS (module)										
set CPU limits?	R	How do I set CPU limits?										
filesystem	R	filesystem (definition)										
Math BigInt FastCalc package	R	Math::BigInt::FastCalc (module)										
no sub	R	no (function)										
study method	R	study (function)										
rewinddir() attempted on invalid dirhandle 	R	rewinddir() attempted on invalid dirhandle %s										
$PROGRAM_NAME (variable)	R	$0 (variable)										
sysopen method	R	sysopen (function)										
Devel PPPort package	R	Devel::PPPort (module)										
How can I prevent addition of unwanted keys into a hash	R	How can I prevent addition of unwanted keys into a hash?										
Math::BigInt::FastCalc	R	Math::BigInt::FastCalc (module)										
define NV	R	NV (definition)										
Net protoent package	R	Net::protoent (module)										
ref	R	ref (function)										
fork definition	R	fork (definition)										
\N in a character class must be a named character: \N{...} in regex; marked by <-- HERE in m//	R	\N in a character class must be a named character: \N{...} in regex; marked by <-- HERE in m/%s/										
Memoize NDBM_File library	R	Memoize::NDBM_File (module)										
TAP::Parser::Grammar package	R	TAP::Parser::Grammar (module)										
Non-octal character in regex; marked by <-- HERE in m//	R	Non-octal character in regex; marked by <-- HERE in m/%s/										
unlink sub	R	unlink (function)										
TAP Parser Grammar package	R	TAP::Parser::Grammar (module)										
ExtUtils::Constant::Utils module	R	ExtUtils::Constant::Utils (module)										
times method	R	times (function)										
pos	R	pos (function)										
Invalid \0 character in  for : \0	R	Invalid \0 character in %s for %s: %s\0%s										
Math Trig library	R	Math::Trig (module)										
copy an entire directory?	R	How do I copy an entire directory?										
Can I write useful Perl programs on the command line	R	Can I write useful Perl programs on the command line?										
TCP definition	R	TCP (definition)										
define instance	R	instance (definition)										
eof func	R	eof (function)										
App Prove State package	R	App::Prove::State (module)										
How can I get the unique keys from two hashes	R	How can I get the unique keys from two hashes?										
lc method	R	lc (function)										
define freely available	R	freely available (definition)										
No package name allowed for variable  in "our"	R	No package name allowed for variable %s in "our"										
and function	R	and (function)										
Binary < operator	R	Binary "<" operator										
algorithm	R	algorithm (definition)										
Memoize Storable	R	Memoize::Storable (module)										
File Basename library	R	File::Basename (module)										
How do I count the number of lines in a file	R	How do I count the number of lines in a file?										
setpwent sub	R	setpwent (function)										
define call by reference	R	call by reference (definition)										
Encode::Config module	R	Encode::Config (module)										
Pod Text	R	Pod::Text (module)										
CPAN Distroprefs library	R	CPAN::Distroprefs (module)										
JAPH?	R	What is a JAPH?										
"state" variable  can't be in a package	R	"state" variable %s can't be in a package										
Encode CJKConstants module	R	Encode::CJKConstants (module)										
ExtUtils::Packlist	R	ExtUtils::Packlist (module)										
Unicode::Collate	R	Unicode::Collate (module)										
member data	R	member data (definition)										
numification	R	numification (definition)										
TAP Parser IteratorFactory module	R	TAP::Parser::IteratorFactory (module)										
AutoSplit library	R	AutoSplit (module)										
Who supports Perl Who develops it Why is it free	R	Who supports Perl? Who develops it? Why is it free?										
Internal urp in regex; marked by <-- HERE in m//	R	Internal urp in regex; marked by <-- HERE in m/%s/										
-m	R	-[mM] [ - ] module=arg[,arg]...										
possessive definition	R	possessive (definition)										
Text::ParseWords module	R	Text::ParseWords (module)										
DynaLoader	R	DynaLoader (module)										
Pod Find library	R	Pod::Find (module)										
define wrapper	R	wrapper (definition)										
not function	R	not (function)										
/Other Modifiers modifier	R	/Other Modifiers regular expression modifier										
eval routine	R	eval (function)										
File::Fetch library	R	File::Fetch (module)										
Parse CPAN Meta library	R	Parse::CPAN::Meta (module)										
Pod::InputObjects module	R	Pod::InputObjects (module)										
standard I/O definition	R	standard I/O (definition)										
define statement modifier	R	statement modifier (definition)										
ExtUtils::MM_MacOS library	R	ExtUtils::MM_MacOS (module)										
Hash::Util module	R	Hash::Util (module)										
dweomer	R	dweomer (definition)										
current working directory definition	R	current working directory (definition)										
DBM_Filter int32 library	R	DBM_Filter::int32 (module)										
chmod function	R	chmod (function)										
Net::SMTP module	R	Net::SMTP (module)										
gethostent function	R	gethostent (function)										
__FILE__ func	R	__FILE__ (function)										
File Find module	R	File::Find (module)										
Pod Simple SimpleTree package	R	Pod::Simple::SimpleTree (module)										
take a string and turn it into epoch seconds	R	How can I take a string and turn it into epoch seconds?										
Binary !~	R	Binary "!~" operator										
I18N Langinfo library	R	I18N::Langinfo (module)										
Exporter Heavy	R	Exporter::Heavy (module)										
Memoize AnyDBM_File library	R	Memoize::AnyDBM_File (module)										
constructor definition	R	constructor (definition)										
unless routine	R	unless (function)										
Encode::Guess	R	Encode::Guess (module)										
Module Loaded	R	Module::Loaded (module)										
IO::Compress::Deflate package	R	IO::Compress::Deflate (module)										
Deep recursion on subroutine ""	R	Deep recursion on subroutine "%s"										
How do I convert from encoding FOO to encoding BAR	R	How do I convert from encoding FOO to encoding BAR?										
dump sub	R	dump (function)										
define script	R	script (definition)										
write() on closed filehandle 	R	write() on closed filehandle %s										
Does Perl have a round function What about ceil and floor Trig functions	R	Does Perl have a round() function? What about ceil() and floor()? Trig functions?										
!~	R	Binary "!~" operator										
push	R	push (function)										
CPAN Kwalify module	R	CPAN::Kwalify (module)										
How do I read email	R	How do I read email?										
-d: flag	R	-dt: MOD[=bar,baz]										
substring	R	substring (definition)										
Math Complex module	R	Math::Complex (module)										
trinary	R	trinary (definition)										
define pumpkin	R	pumpkin (definition)										
declarator definition	R	declarator (definition)										
TAP Formatter Color	R	TAP::Formatter::Color (module)										
time method	R	time (function)										
-E switch	R	-E commandline										
Pod::ParseUtils package	R	Pod::ParseUtils (module)										
file descriptor	R	file descriptor (definition)										
program definition	R	program (definition)										
Can't represent character for Ox on this platform	R	Can't represent character for Ox%X on this platform										
postfix definition	R	postfix (definition)										
ExtUtils MM_OS2 library	R	ExtUtils::MM_OS2 (module)										
continue method	R	continue (function)										
$PID	R	$$ (variable)										
Eval-group not allowed, use re 'eval' in regex m//	R	Eval-group not allowed, use re 'eval' in regex m/%s/										
find the Julian Day	R	How can I find the Julian Day?										
lt subroutine	R	lt (function)										
keep my own module/library directory?	R	How do I keep my own module/library directory?										
Math::BigInt::Calc module	R	Math::BigInt::Calc (module)										
accept subroutine	R	accept (function)										
Sys Syslog module	R	Sys::Syslog (module)										
How can I use a reference as a hash key	R	How can I use a reference as a hash key?										
endnetent routine	R	endnetent (function)										
use Perl's option from within a program?	R	How can I use Perl's option from within a program?										
ExtUtils MakeMaker Tutorial module	R	ExtUtils::MakeMaker::Tutorial (module)										
define run phase	R	run phase (definition)										
IO::Handle->format_line_break_characters EXPR	R	$: (variable)										
TAP Parser Result Unknown	R	TAP::Parser::Result::Unknown (module)										
TAP Parser Result YAML package	R	TAP::Parser::Result::YAML (module)										
// should probably be written as ""	R	/%s/ should probably be written as "%s"										
B formatting code	R	B<text>										
define base class	R	base class (definition)										
x routine	R	x (function)										
exit function	R	exit (function)										
DESTROY function	R	DESTROY (function)										
define weak reference	R	weak reference (definition)										
Encode JP JIS7	R	Encode::JP::JIS7 (module)										
Test Harness library	R	Test::Harness (module)										
Sequence (?(... not terminated in regex; marked by <-- HERE in m//	R	Sequence (?(%c... not terminated in regex; marked by <-- HERE in m/%s/										
File Copy package	R	File::Copy (module)										
IO::File library	R	IO::File (module)										
$(	R	$( (variable)										
define AV	R	AV (definition)										
File Spec library	R	File::Spec (module)										
Binary ||	R	Binary "||" operator										
getservbyname method	R	getservbyname (function)										
qq method	R	qq (function)										
Can't localize lexical variable 	R	Can't localize lexical variable %s										
reset	R	reset (function)										
How do I read just one key without waiting for a return key	R	How do I read just one key without waiting for a return key?										
perl: warning: strange setting in '$ENV{PERL_PERTURB_KEYS}': ''	R	perl: warning: strange setting in '$ENV{PERL_PERTURB_KEYS}': '%s'										
offset	R	offset (definition)										
Binary && operator	R	Binary "&&" operator										
tell func	R	tell (function)										
closedir method	R	closedir (function)										
Can I use perl to run a telnet or ftp session	R	Can I use perl to run a telnet or ftp session?										
Pod::ParseLink library	R	Pod::ParseLink (module)										
Archive Tar package	R	Archive::Tar (module)										
Search Dict	R	Search::Dict (module)										
Encode::Encoding library	R	Encode::Encoding (module)										
I18N::LangTags::Detect module	R	I18N::LangTags::Detect (module)										
Pod Simple DumpAsXML package	R	Pod::Simple::DumpAsXML (module)										
What is Perl 6	R	What is Perl 6?										
bless subroutine	R	bless (function)										
close sub	R	close (function)										
pipe method	R	pipe (function)										
ExtUtils MM_AIX	R	ExtUtils::MM_AIX (module)										
TAP::Object library	R	TAP::Object (module)										
oct sub	R	oct (function)										
y subroutine	R	y (function)										
bind method	R	bind (function)										
File Spec module	R	File::Spec (module)										
Module::Load package	R	Module::Load (module)										
-0 switch	R	-0 [ octal/hexadecimal ]										
find the first array element for which a condition is true	R	How do I find the first array element for which a condition is true?										
Pod Perldoc ToXml module	R	Pod::Perldoc::ToXml (module)										
setnetent	R	setnetent (function)										
define error	R	error (definition)										
Encode library	R	Encode (module)										
Usage: POSIX::()	R	Usage: POSIX::%s(%s)										
 Obtaining and Learning about Perl	R	: Obtaining and Learning about Perl										
q sub	R	q (function)										
readable	R	readable (definition)										
panic: pp_iter, type=	R	panic: pp_iter, type=%u										
__END__ subroutine	R	__END__ (function)										
exp subroutine	R	exp (function)										
construct definition	R	construct (definition)										
exit status definition	R	exit status (definition)										
symlink method	R	symlink (function)										
run phase	R	run phase (definition)										
DBM_Filter::compress module	R	DBM_Filter::compress (module)										
Pod Simple LinkSection	R	Pod::Simple::LinkSection (module)										
find yesterdays date	R	How do I find yesterday's date?										
lc func	R	lc (function)										
Pod::Simple::PullParserToken package	R	Pod::Simple::PullParserToken (module)										
Attempt to reload  aborted.	R	Attempt to reload %s aborted.										
define precedence	R	precedence (definition)										
${^LAST_FH}	R	${^LAST_FH} (variable)										
File Spec OS2 module	R	File::Spec::OS2 (module)										
%LAST_MATCH_START (variable)	R	%- (variable)										
Term::ReadLine library	R	Term::ReadLine (module)										
-f switch	R	-f										
Term::ANSIColor	R	Term::ANSIColor (module)										
iteration definition	R	iteration (definition)										
Time::Seconds	R	Time::Seconds (module)										
pad a string with blanks or pad a number with zeroes	R	How do I pad a string with blanks or pad a number with zeroes?										
define format	R	format (definition)										
select routine	R	select (function)										
define metasymbol	R	metasymbol (definition)										
loop control statement	R	loop control statement (definition)										
Sequence (?#... not terminated in regex m//	R	Sequence (?#... not terminated in regex m/%s/										
Time::Piece package	R	Time::Piece (module)										
Module CoreList library	R	Module::CoreList (module)										
filehandle definition	R	filehandle (definition)										
How do I get the screen size	R	How do I get the screen size?										
Text Wrap	R	Text::Wrap (module)										
Storable module	R	Storable (module)										
-I option	R	-I directory										
__SUB__	R	__SUB__ (function)										
s method	R	s (function)										
pattern	R	pattern (definition)										
pod =for command	R	=for										
Encode CN HZ module	R	Encode::CN::HZ (module)										
getgrent	R	getgrent (function)										
define POSIX	R	POSIX (definition)										
define FAQ	R	FAQ (definition)										
Thread::Queue package	R	Thread::Queue (module)										
FindBin package	R	FindBin (module)										
typemap	R	typemap (definition)										
q subroutine	R	q (function)										
getsockname function	R	getsockname (function)										
Can't use subscript on 	R	Can't use subscript on %s										
cargo cult	R	cargo cult (definition)										
Expecting close bracket in regex; marked by <-- HERE in m//	R	Expecting close bracket in regex; marked by <-- HERE in m/%s/										
abs	R	abs (function)										
IO Compress RawDeflate module	R	IO::Compress::RawDeflate (module)										
ExtUtils MM library	R	ExtUtils::MM (module)										
AutoLoader library	R	AutoLoader (module)										
Module Load Conditional	R	Module::Load::Conditional (module)										
sed	R	sed (definition)										
ExtUtils MakeMaker Config	R	ExtUtils::MakeMaker::Config (module)										
CPAN::HandleConfig module	R	CPAN::HandleConfig (module)										
AUTOLOAD sub	R	AUTOLOAD (function)										
Parentheses missing around "" list	R	Parentheses missing around "%s" list										
CPAN::Version module	R	CPAN::Version (module)										
Can't find  character property ""	R	Can't find %s character property "%s"										
IO Uncompress AnyInflate module	R	IO::Uncompress::AnyInflate (module)										
signal	R	signal (definition)										
Net::Config package	R	Net::Config (module)										
Missing ']' in prototype for  : 	R	Missing ']' in prototype for %s : %s										
File Spec Cygwin	R	File::Spec::Cygwin (module)										
store a multidimensional array in a DBM file	R	How can I store a multidimensional array in a DBM file?										
sysread subroutine	R	sysread (function)										
closedir func	R	closedir (function)										
App::Prove::State	R	App::Prove::State (module)										
Unicode::Normalize library	R	Unicode::Normalize (module)										
setprotoent function	R	setprotoent (function)										
gethostbyname subroutine	R	gethostbyname (function)										
Pod Functions package	R	Pod::Functions (module)										
-w switch	R	-w										
Tie StdHandle library	R	Tie::StdHandle (module)										
Locale Script library	R	Locale::Script (module)										
ExtUtils MM_OS2 package	R	ExtUtils::MM_OS2 (module)										
Config Extensions	R	Config::Extensions (module)										
m func	R	m (function)										
-F flag	R	-F pattern										
ExtUtils testlib library	R	ExtUtils::testlib (module)										
$ARG (variable)	R	$_ (variable)										
Pod Perldoc library	R	Pod::Perldoc (module)										
Text Abbrev	R	Text::Abbrev (module)										
define symbolic debugger	R	symbolic debugger (definition)										
Perl folding rules are not up-to-date for 0x; please use the perlbug utility to report; in regex; marked by <-- HERE in m//	R	Perl folding rules are not up-to-date for 0x%X; please use the perlbug utility to report; in regex; marked by <-- HERE in m/%s/										
binmode func	R	binmode (function)										
Pod::Simple::Methody package	R	Pod::Simple::Methody (module)										
co-maintainer	R	co-maintainer (definition)										
package func	R	package (function)										
List::Util::XS package	R	List::Util::XS (module)										
define standard I/O	R	standard I/O (definition)										
Unary ~	R	Unary "~" operator										
define IO	R	IO (definition)										
create a switch or case statement?	R	How do I create a switch or case statement?										
PerlIO via library	R	PerlIO::via (module)										
define sigil	R	sigil (definition)										
Archive::Tar::File	R	Archive::Tar::File (module)										
use function	R	use (function)										
property definition	R	property (definition)										
freely available	R	freely available (definition)										
unshift routine	R	unshift (function)										
Pod Find module	R	Pod::Find (module)										
panic: pp_split, pm=, s=	R	panic: pp_split, pm=%p, s=%p										
ExtUtils::MakeMaker::FAQ module	R	ExtUtils::MakeMaker::FAQ (module)										
How do I get a files timestamp in perl	R	How do I get a file's timestamp in perl?										
null character definition	R	null character (definition)										
Subroutine  redefined	R	Subroutine %s redefined										
TAP Parser Result Pragma module	R	TAP::Parser::Result::Pragma (module)										
inheritance	R	inheritance (definition)										
Math::BigInt::FastCalc package	R	Math::BigInt::FastCalc (module)										
chop	R	chop (function)										
Compress Zlib package	R	Compress::Zlib (module)										
END function	R	END (function)										
Text Abbrev library	R	Text::Abbrev (module)										
How often are new versions of Perl released	R	How often are new versions of Perl released?										
elsif subroutine	R	elsif (function)										
DBM_Filter::compress package	R	DBM_Filter::compress (module)										
package definition	R	package (definition)										
create a static variable	R	How do I create a static variable?										
getgrnam routine	R	getgrnam (function)										
define superuser	R	superuser (definition)										
TAP Formatter Console Session	R	TAP::Formatter::Console::Session (module)										
define class method	R	class method (definition)										
Complex regular subexpression recursion limit () exceeded	R	Complex regular subexpression recursion limit (%d) exceeded										
Is there a way to automatically decode or encode	R	Is there a way to automatically decode or encode?										
readpipe sub	R	readpipe (function)										
Digest::file package	R	Digest::file (module)										
ref function	R	ref (function)										
define parent class	R	parent class (definition)										
TAP Parser YAMLish Reader module	R	TAP::Parser::YAMLish::Reader (module)										
define Standard Library	R	Standard Library (definition)										
Why cant I just openFH >filelock	R	Why can't I just open(FH, ">file.lock")?										
seekdir method	R	seekdir (function)										
Time::gmtime library	R	Time::gmtime (module)										
keyword definition	R	keyword (definition)										
single inheritance	R	single inheritance (definition)										
Module Load library	R	Module::Load (module)										
read just one key without waiting for a return key	R	How do I read just one key without waiting for a return key?										
do func	R	do (function)										
ExtUtils MakeMaker Tutorial library	R	ExtUtils::MakeMaker::Tutorial (module)										
break subroutine	R	break (function)										
reserved words definition	R	reserved words (definition)										
Insecure directory in 	R	Insecure directory in %s										
$SUBSCRIPT_SEPARATOR (variable)	R	$; (variable)										
Exporter::Heavy package	R	Exporter::Heavy (module)										
truncate function	R	truncate (function)										
casefolding	R	casefolding (definition)										
synchronous	R	synchronous (definition)										
IO::Compress::Zip library	R	IO::Compress::Zip (module)										
How do I use MIME to make an attachment to a mail message	R	How do I use MIME to make an attachment to a mail message?										
Time Seconds	R	Time::Seconds (module)										
B::Showlex	R	B::Showlex (module)										
AUTOLOAD function	R	AUTOLOAD (function)										
compare two dates and find the difference	R	How can I compare two dates and find the difference?										
IPC	R	IPC (definition)										
DESTROY method	R	DESTROY (function)										
tell function	R	tell (function)										
Unary + operator	R	Unary "+" operator										
last subroutine	R	last (function)										
Pod::Escapes package	R	Pod::Escapes (module)										
Net servent	R	Net::servent (module)										
Pod::Simple::Search library	R	Pod::Simple::Search (module)										
Character(s) in '' format wrapped in pack	R	Character(s) in '%c' format wrapped in pack										
stream	R	stream (definition)										
thread	R	thread (definition)										
Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m//	R	Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%s/										
$^V	R	$^V (variable)										
define backtracking	R	backtracking (definition)										
B::Deparse library	R	B::Deparse (module)										
broadcast definition	R	broadcast (definition)										
ExtUtils Embed	R	ExtUtils::Embed (module)										
fork a daemon process	R	How do I fork a daemon process?										
Encode MIME Name	R	Encode::MIME::Name (module)										
I put a regular expression into $ but it didnt work Whats wrong	R	I put a regular expression into $/ but it didn't work. What's wrong?										
printf	R	printf (function)										
getgrent function	R	getgrent (function)										
character class	R	character class (definition)										
directory handle	R	directory handle (definition)										
time sub	R	time (function)										
INIT method	R	INIT (function)										
File Temp module	R	File::Temp (module)										
exec func	R	exec (function)										
ExtUtils MM_NW5	R	ExtUtils::MM_NW5 (module)										
signal handler	R	signal handler (definition)										
qw method	R	qw (function)										
B::Showlex module	R	B::Showlex (module)										
TAP Parser Iterator Array package	R	TAP::Parser::Iterator::Array (module)										
standard input definition	R	standard input (definition)										
ExtUtils::Mkbootstrap package	R	ExtUtils::Mkbootstrap (module)										
tokener definition	R	tokener (definition)										
breakpoint	R	breakpoint (definition)										
define variadic	R	variadic (definition)										
define autoincrement	R	autoincrement (definition)										
DBM_Filter int32 module	R	DBM_Filter::int32 (module)										
qx method	R	qx (function)										
CPAN Queue library	R	CPAN::Queue (module)										
metacharacter definition	R	metacharacter (definition)										
void context	R	void context (definition)										
IO::Seekable package	R	IO::Seekable (module)										
Invalid conversion in : ""	R	Invalid conversion in %s: "%s"										
Why am I getting long decimals eg 199499999999999 instead of the numbers I should be getting eg 1995	R	Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?										
TAP Parser Result Unknown library	R	TAP::Parser::Result::Unknown (module)										
method resolution order definition	R	method resolution order (definition)										
uc sub	R	uc (function)										
map function	R	map (function)										
File Spec OS2 package	R	File::Spec::OS2 (module)										
linebreak definition	R	linebreak (definition)										
Encode::Unicode::UTF7	R	Encode::Unicode::UTF7 (module)										
-D letters	R	-D number										
local func	R	local (function)										
Pod::Simple::TextContent	R	Pod::Simple::TextContent (module)										
vec function	R	vec (function)										
define circumfix operator	R	circumfix operator (definition)										
tell the difference between errors from the shell and perl	R	How do I tell the difference between errors from the shell and perl?										
redo	R	redo (function)										
unlink func	R	unlink (function)										
Time::gmtime module	R	Time::gmtime (module)										
Time HiRes package	R	Time::HiRes (module)										
quotemeta method	R	quotemeta (function)										
Pod::Perldoc::ToPod package	R	Pod::Perldoc::ToPod (module)										
"wide character"?	R	What is a "wide character"?										
die routine	R	die (function)										
ExtUtils Mksymlists	R	ExtUtils::Mksymlists (module)										
define operator overloading	R	operator overloading (definition)										
Pod Simple PullParserToken module	R	Pod::Simple::PullParserToken (module)										
normalization	R	normalization (definition)										
TAP Parser Result Version library	R	TAP::Parser::Result::Version (module)										
indexing definition	R	indexing (definition)										
IO::Compress::Gzip module	R	IO::Compress::Gzip (module)										
Time localtime	R	Time::localtime (module)										
chown sub	R	chown (function)										
default sub	R	default (function)										
Hash Util package	R	Hash::Util (module)										
difference between $array[1] and @array[1]?	R	What is the difference between $array[1] and @array[1]?										
value definition	R	value (definition)										
TAP Parser Multiplexer module	R	TAP::Parser::Multiplexer (module)										
getgrgid	R	getgrgid (function)										
IO Uncompress AnyInflate	R	IO::Uncompress::AnyInflate (module)										
evalbytes func	R	evalbytes (function)										
Binary ^	R	Binary "^" operator										
filehandle	R	filehandle (definition)										
Can't declare  in ""	R	Can't declare %s in "%s"										
IO Compress Zip library	R	IO::Compress::Zip (module)										
Pod::Simple package	R	Pod::Simple (module)										
Pod::Html module	R	Pod::Html (module)										
$'	R	$' (variable)										
manpage definition	R	manpage (definition)										
$OUTPUT_RECORD_SEPARATOR	R	$\ (variable)										
ExtUtils CBuilder Platform Windows package	R	ExtUtils::CBuilder::Platform::Windows (module)										
Hash::Util::FieldHash package	R	Hash::Util::FieldHash (module)										
-d option	R	-dt										
PerlIO::encoding	R	PerlIO::encoding (module)										
Getopt Std package	R	Getopt::Std (module)										
TAP::Parser::YAMLish::Reader module	R	TAP::Parser::YAMLish::Reader (module)										
__END__ sub	R	__END__ (function)										
continue subroutine	R	continue (function)										
given routine	R	given (function)										
for each	R	foreach loops										
Binary ^ operator	R	Binary "^" operator										
UNITCHECK subroutine	R	UNITCHECK (function)										
Digest::file library	R	Digest::file (module)										
getprotobyname	R	getprotobyname (function)										
Pod Perldoc ToMan library	R	Pod::Perldoc::ToMan (module)										
Opcode library	R	Opcode (module)										
directory definition	R	directory (definition)										
for subroutine	R	for (function)										
ExtUtils::Embed module	R	ExtUtils::Embed (module)										
package method	R	package (function)										
TAP::Parser::Iterator::Stream module	R	TAP::Parser::Iterator::Stream (module)										
define instance data	R	instance data (definition)										
reference definition	R	reference (definition)										
DBM_Filter::utf8 package	R	DBM_Filter::utf8 (module)										
Pod::Perldoc::ToRtf package	R	Pod::Perldoc::ToRtf (module)										
setgrent subroutine	R	setgrent (function)										
exists	R	exists (function)										
define exception	R	exception (definition)										
TAP Parser Iterator	R	TAP::Parser::Iterator (module)										
/n	R	/n regular expression modifier										
gmtime func	R	gmtime (function)										
mkdir method	R	mkdir (function)										
IPC Cmd module	R	IPC::Cmd (module)										
Inconsistent hierarchy during C3 merge of class '': merging failed on parent ''	R	Inconsistent hierarchy during C3 merge of class '%s': merging failed on parent '%s'										
IPC::Semaphore package	R	IPC::Semaphore (module)										
TAP Parser Aggregator module	R	TAP::Parser::Aggregator (module)										
derived class	R	derived class (definition)										
I18N LangTags	R	I18N::LangTags (module)										
$FORMAT_FORMFEED	R	$^L (variable)										
DB package	R	DB (module)										
define alternatives	R	alternatives (definition)										
Fatal VMS error (status=) at , line 	R	Fatal VMS error (status=%d) at %s, line %d										
hex routine	R	hex (function)										
n modifier	R	/n regular expression modifier										
Memoize ExpireTest library	R	Memoize::ExpireTest (module)										
Params Check package	R	Params::Check (module)										
define lowercase	R	lowercase (definition)										
sort sub	R	sort (function)										
User pwent package	R	User::pwent (module)										
TAP Parser ResultFactory module	R	TAP::Parser::ResultFactory (module)										
Math::BigRat library	R	Math::BigRat (module)										
Quantifier unexpected on zero-length expression in regex m//	R	Quantifier unexpected on zero-length expression in regex m/%s/										
validate input?	R	How do I validate input?										
indexing	R	indexing (definition)										
IO Uncompress Inflate module	R	IO::Uncompress::Inflate (module)										
IO Uncompress Bunzip2	R	IO::Uncompress::Bunzip2 (module)										
Pod Perldoc ToXml	R	Pod::Perldoc::ToXml (module)										
How do I reverse a string	R	How do I reverse a string?										
UNITCHECK func	R	UNITCHECK (function)										
for sub	R	for (function)										
BEGIN method	R	BEGIN (function)										
hex sub	R	hex (function)										
use a reference as a hash key	R	How can I use a reference as a hash key?										
catch accesses to undefined variables functions or methods	R	How can I catch accesses to undefined variables, functions, or methods?										
TAP Formatter Base package	R	TAP::Formatter::Base (module)										
Tie::Hash::NamedCapture module	R	Tie::Hash::NamedCapture (module)										
CPAN Debug	R	CPAN::Debug (module)										
pop method	R	pop (function)										
Net Cmd package	R	Net::Cmd (module)										
How can I match strings with multibyte characters	R	How can I match strings with multibyte characters?										
Binary , operator	R	Binary "," operator										
DBM_Filter library	R	DBM_Filter (module)										
utime sub	R	utime (function)										
define STDIN	R	STDIN (definition)										
MIME::QuotedPrint module	R	MIME::QuotedPrint (module)										
say method	R	say (function)										
define floating point	R	floating point (definition)										
How do I delete the last N lines from a file	R	How do I delete the last N lines from a file?										
logical operator	R	logical operator (definition)										
symbolic reference definition	R	symbolic reference (definition)										
redo function	R	redo (function)										
What are all these $ punctuation signs and how do I know when to use them	R	What are all these $@%&* punctuation signs, and how do I know when to use them?										
gethostent	R	gethostent (function)										
kill sub	R	kill (function)										
Net SMTP	R	Net::SMTP (module)										
Filter::Util::Call module	R	Filter::Util::Call (module)										
IO::Uncompress::Gunzip	R	IO::Uncompress::Gunzip (module)										
ExtUtils::Miniperl library	R	ExtUtils::Miniperl (module)										
sleep() too large	R	sleep(%u) too large										
$<	R	$< (variable)										
Scalar value @[] better written as $[]	R	Scalar value @%s[%s] better written as $%s[%s]										
"" is more clearly written simply as "" in regex; marked by <-- HERE in m//	R	"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in m/%s/										
break function	R	break (function)										
What good is in a regular expression	R	What good is in a regular expression?										
Locale Maketext Guts library	R	Locale::Maketext::Guts (module)										
permute N elements of a list?	R	How do I permute N elements of a list?										
Data Dumper package	R	Data::Dumper (module)										
closure definition	R	closure (definition)										
seekdir() attempted on invalid dirhandle 	R	seekdir() attempted on invalid dirhandle %s										
getppid subroutine	R	getppid (function)										
Getopt::Long	R	Getopt::Long (module)										
define word	R	word (definition)										
Math BigInt CalcEmu package	R	Math::BigInt::CalcEmu (module)										
Encode::CJKConstants	R	Encode::CJKConstants (module)										
shift sub	R	shift (function)										
variable suicide and how can I prevent it	R	What is variable suicide and how can I prevent it?										
Empty \{} in regex; marked by <-- HERE in m//	R	Empty \%c{} in regex; marked by <-- HERE in m/%s/										
define scalar	R	scalar (definition)										
What is a JAPH	R	What is a JAPH?										
define polymorphism	R	polymorphism (definition)										
Binary lt	R	Binary "lt" operator										
$EUID (variable)	R	$> (variable)										
quote a variable to use in a regex?	R	How can I quote a variable to use in a regex?										
for function	R	for (function)										
given sub	R	given (function)										
x method	R	x (function)										
getprotoent	R	getprotoent (function)										
parsing	R	parsing (definition)										
File::Spec::Win32 library	R	File::Spec::Win32 (module)										
Net::protoent	R	Net::protoent (module)										
IPC::Semaphore	R	IPC::Semaphore (module)										
IPC SharedMem package	R	IPC::SharedMem (module)										
Pod Simple PullParser	R	Pod::Simple::PullParser (module)										
loop	R	loop (definition)										
CPAN::Distroprefs package	R	CPAN::Distroprefs (module)										
Encode::Byte	R	Encode::Byte (module)										
TAP::Parser::Iterator::Process module	R	TAP::Parser::Iterator::Process (module)										
Archive Tar library	R	Archive::Tar (module)										
Ignoring zero length \N{} in character class in regex; marked by <-- HERE in m//	R	Ignoring zero length \N{} in character class in regex; marked by <-- HERE in m/%s/										
Parse CPAN Meta	R	Parse::CPAN::Meta (module)										
ExtUtils MakeMaker Config library	R	ExtUtils::MakeMaker::Config (module)										
convince others to use Perl?	R	How can I convince others to use Perl?										
when method	R	when (function)										
msgget function	R	msgget (function)										
END func	R	END (function)										
define alias	R	alias (definition)										
How can I tell whether theres a character waiting on a filehandle	R	How can I tell whether there's a character waiting on a filehandle?										
truncate routine	R	truncate (function)										
define CODE	R	CODE (definition)										
exists func	R	exists (function)										
tr method	R	tr (function)										
print out a wordfrequency or linefrequency summary	R	How can I print out a word-frequency or line-frequency summary?										
define options	R	options (definition)										
data structure definition	R	data structure (definition)										
/i	R	/i regular expression modifier										
Undefined top format "" called	R	Undefined top format "%s" called										
File::Spec::Functions module	R	File::Spec::Functions (module)										
Ambiguous call resolved as CORE::(), qualify as such or use &	R	Ambiguous call resolved as CORE::%s(), qualify as such or use &										
unary operator	R	unary operator (definition)										
define lvalue modifier	R	lvalue modifier (definition)										
sort	R	sort (function)										
$COMPILING (variable)	R	$^C (variable)										
define Artistic License	R	Artistic License (definition)										
File stat library	R	File::stat (module)										
Why doesnt my sockets program work under System V Solaris What does the error message Protocol not supported mean	R	Why doesn't my sockets program work under System V (Solaris)? What does the error message "Protocol not supported" mean?										
ExtUtils MM_OS2 module	R	ExtUtils::MM_OS2 (module)										
Pod::Perldoc::ToChecker	R	Pod::Perldoc::ToChecker (module)										
reset an each() operation part-way through?	R	How do I reset an each() operation part-way through?										
Test::Builder	R	Test::Builder (module)										
connect method	R	connect (function)										
File Spec Epoc library	R	File::Spec::Epoc (module)										
count the number of lines in a file?	R	How do I count the number of lines in a file?										
ExtUtils Embed module	R	ExtUtils::Embed (module)										
normalization definition	R	normalization (definition)										
SDBM_File package	R	SDBM_File (module)										
next func	R	next (function)										
ExtUtils MM_BeOS package	R	ExtUtils::MM_BeOS (module)										
exit status (definition)	R	status										
TAP Parser Result Pragma library	R	TAP::Parser::Result::Pragma (module)										
pod B	R	B<text>										
define IPA	R	IPA (definition)										
define subpattern	R	subpattern (definition)										
setsockopt routine	R	setsockopt (function)										
\ better written as $	R	\%d better written as $%d										
prototype func	R	prototype (function)										
I18N::Collate package	R	I18N::Collate (module)										
I18N Langinfo module	R	I18N::Langinfo (module)										
DB library	R	DB (module)										
Hash Util FieldHash package	R	Hash::Util::FieldHash (module)										
client	R	client (definition)										
server definition	R	server (definition)										
DBM_Filter null	R	DBM_Filter::null (module)										
casemapping definition	R	casemapping (definition)										
getservbyport func	R	getservbyport (function)										
if routine	R	if (function)										
TAP Parser Grammar	R	TAP::Parser::Grammar (module)										
$_	R	$_ (variable)										
delete a directory tree	R	How do I delete a directory tree?										
rand routine	R	rand (function)										
-v option	R	-v										
pod I	R	I<text>										
IO::Handle package	R	IO::Handle (module)										
Might be a runaway multi-line  string starting on line 	R	Might be a runaway multi-line %s string starting on line %d										
randomly update a binary file	R	How do I randomly update a binary file?										
Pod::ParseUtils	R	Pod::ParseUtils (module)										
Pod::Find module	R	Pod::Find (module)										
Unicode UCD package	R	Unicode::UCD (module)										
glob definition	R	glob (definition)										
wait subroutine	R	wait (function)										
HANDLE->format_page_number(EXPR)	R	$% (variable)										
break method	R	break (function)										
Cannot find encoding ""	R	Cannot find encoding "%s"										
ExtUtils Embed library	R	ExtUtils::Embed (module)										
Pod::Simple::Debug library	R	Pod::Simple::Debug (module)										
-s option	R	-s										
File Compare module	R	File::Compare (module)										
Memoize::ExpireFile package	R	Memoize::ExpireFile (module)										
IO Compress Zip package	R	IO::Compress::Zip (module)										
=head1 pod	R	=head1,										
variadic	R	variadic (definition)										
$;	R	$; (variable)										
values routine	R	values (function)										
Test::Harness package	R	Test::Harness (module)										
setpgrp func	R	setpgrp (function)										
TAP Harness package	R	TAP::Harness (module)										
ExtUtils MM	R	ExtUtils::MM (module)										
Time Local library	R	Time::Local (module)										
NV definition	R	NV (definition)										
Pod::Perldoc::ToText library	R	Pod::Perldoc::ToText (module)										
gmtime() too small	R	gmtime(%f) too small										
endnetent func	R	endnetent (function)										
getpwuid routine	R	getpwuid (function)										
soft reference definition	R	soft reference (definition)										
$^D	R	$^D (variable)										
Unicode Normalize library	R	Unicode::Normalize (module)										
hexadecimal definition	R	hexadecimal (definition)										
read	R	read (function)										
bind routine	R	bind (function)										
define Makefile	R	Makefile (definition)										
die func	R	die (function)										
Pod Html library	R	Pod::Html (module)										
socketpair subroutine	R	socketpair (function)										
chomp subroutine	R	chomp (function)										
process definition	R	process (definition)										
Memoize::Expire module	R	Memoize::Expire (module)										
setnetent subroutine	R	setnetent (function)										
$INPUT_RECORD_SEPARATOR	R	$/ (variable)										
Encode::GSM0338 package	R	Encode::GSM0338 (module)										
rmdir method	R	rmdir (function)										
y method	R	y (function)										
TAP Parser Iterator Stream library	R	TAP::Parser::Iterator::Stream (module)										
Digest base package	R	Digest::base (module)										
DBM_Filter::encode library	R	DBM_Filter::encode (module)										
I/O definition	R	I/O (definition)										
-i switch	R	-i [ extension ]										
getprotobynumber sub	R	getprotobynumber (function)										
Pod::Perldoc::ToTk	R	Pod::Perldoc::ToTk (module)										
ExtUtils Constant Base	R	ExtUtils::Constant::Base (module)										
getpgrp function	R	getpgrp (function)										
define buffer	R	buffer (definition)										
Duplicate modifier '' after '' in 	R	Duplicate modifier '%c' after '%c' in %s										
Pod Text Color package	R	Pod::Text::Color (module)										
Label not found for "last "	R	Label not found for "last %s"										
while routine	R	while (function)										
Binary eq	R	Binary "eq" operator										
referent definition	R	referent (definition)										
File::Compare library	R	File::Compare (module)										
gmtime sub	R	gmtime (function)										
interpreter definition	R	interpreter (definition)										
qualified definition	R	qualified (definition)										
C preprocessor definition	R	C preprocessor (definition)										
typemap definition	R	typemap (definition)										
default subroutine	R	default (function)										
Memoize ExpireFile module	R	Memoize::ExpireFile (module)										
polymorphism definition	R	polymorphism (definition)										
Pod Simple HTML module	R	Pod::Simple::HTML (module)										
setpriority	R	setpriority (function)										
Pod::Simple::Methody	R	Pod::Simple::Methody (module)										
embedding definition	R	embedding (definition)										
log subroutine	R	log (function)										
Time Local package	R	Time::Local (module)										
Parse CPAN Meta module	R	Parse::CPAN::Meta (module)										
ExtUtils MM_AIX package	R	ExtUtils::MM_AIX (module)										
Test Builder Module module	R	Test::Builder::Module (module)										
define group	R	group (definition)										
lc routine	R	lc (function)										
atomic operation	R	atomic operation (definition)										
TAP::Parser::Scheduler::Job package	R	TAP::Parser::Scheduler::Job (module)										
sprintf sub	R	sprintf (function)										
ExtUtils MM_UWIN library	R	ExtUtils::MM_UWIN (module)										
Unbalanced saves:  more saves than restores	R	Unbalanced saves: %d more saves than restores										
define scalar literal	R	scalar literal (definition)										
Fcntl module	R	Fcntl (module)										
attribute definition	R	attribute (definition)										
shmread method	R	shmread (function)										
$ARG	R	$_ (variable)										
I18N::LangTags::Detect library	R	I18N::LangTags::Detect (module)										
Memoize::ExpireTest package	R	Memoize::ExpireTest (module)										
Can't resolve method "" overloading "" in package ""	R	Can't resolve method "%s" overloading "%s" in package "%s"										
until function	R	until (function)										
s func	R	s (function)										
define numification	R	numification (definition)										
define execute bit	R	execute bit (definition)										
accessor methods	R	accessor methods (definition)										
regular expression definition	R	regular expression (definition)										
TAP::Parser::Source	R	TAP::Parser::Source (module)										
define scratchpad	R	scratchpad (definition)										
TAP Parser Result Plan package	R	TAP::Parser::Result::Plan (module)										
IPC Semaphore library	R	IPC::Semaphore (module)										
IO::Handle->input_record_separator( EXPR ) (variable)	R	$/ (variable)										
stat() on unopened filehandle 	R	stat() on unopened filehandle %s										
define race condition	R	race condition (definition)										
Locale Maketext GutsLoader package	R	Locale::Maketext::GutsLoader (module)										
feeping creaturism definition	R	feeping creaturism (definition)										
Test Builder Tester Color package	R	Test::Builder::Tester::Color (module)										
HANDLE->format_lines_per_page(EXPR)	R	$= (variable)										
print subroutine	R	print (function)										
Sequence (?...) not implemented in regex; marked by <-- HERE in m//	R	Sequence (?%c...) not implemented in regex; marked by <-- HERE in m/%s/										
define owner	R	owner (definition)										
else func	R	else (function)										
readdir() attempted on invalid dirhandle 	R	readdir() attempted on invalid dirhandle %s										
ExtUtils::MM_BeOS	R	ExtUtils::MM_BeOS (module)										
Encode::EBCDIC package	R	Encode::EBCDIC (module)										
setgrent	R	setgrent (function)										
panic: restartop in 	R	panic: restartop in %s										
lexical analysis definition	R	lexical analysis (definition)										
fcntl routine	R	fcntl (function)										
User::pwent module	R	User::pwent (module)										
*	R	Binary "*" operator										
datagram definition	R	datagram (definition)										
Use of uninitialized value	R	Use of uninitialized value%s										
/Other Modifiers	R	/Other Modifiers regular expression modifier										
extract selected columns from a string?	R	How do I extract selected columns from a string?										
define file	R	file (definition)										
continuation definition	R	continuation (definition)										
ExtUtils MM_VMS package	R	ExtUtils::MM_VMS (module)										
use subroutine	R	use (function)										
B::Terse module	R	B::Terse (module)										
TAP Parser YAMLish Writer package	R	TAP::Parser::YAMLish::Writer (module)										
IO::Pipe module	R	IO::Pipe (module)										
getpwent sub	R	getpwent (function)										
symlink routine	R	symlink (function)										
pseudohash	R	pseudohash (definition)										
How can I open a file with a leading > or trailing blanks	R	How can I open a file with a leading ">" or trailing blanks?										
What happens if I add or remove keys from a hash while iterating over it	R	What happens if I add or remove keys from a hash while iterating over it?										
define regular file	R	regular file (definition)										
TAP Parser YAMLish Writer	R	TAP::Parser::YAMLish::Writer (module)										
semctl subroutine	R	semctl (function)										
Perl  required (did you mean ?)--this is only , stopped	R	Perl %s required (did you mean %s?)--this is only %s, stopped										
ExtUtils::Constant::XS package	R	ExtUtils::Constant::XS (module)										
list	R	list (definition)										
Module::Loaded library	R	Module::Loaded (module)										
Memoize::SDBM_File	R	Memoize::SDBM_File (module)										
define superclass	R	superclass (definition)										
define lvaluable	R	lvaluable (definition)										
Operation "" returns its argument for UTF-16 surrogate U+	R	Operation "%s" returns its argument for UTF-16 surrogate U+%X										
=item pod	R	=item										
create a static variable?	R	How do I create a static variable?										
Unicode Normalize	R	Unicode::Normalize (module)										
FileCache package	R	FileCache (module)										
tell	R	tell (function)										
IPC::Cmd package	R	IPC::Cmd (module)										
match XML, HTML, or other nasty, ugly things with a regex?	R	How do I match XML, HTML, or other nasty, ugly things with a regex?										
getppid func	R	getppid (function)										
caller func	R	caller (function)										
ne routine	R	ne (function)										
"" variable  masks earlier declaration in same 	R	"%s" variable %s masks earlier declaration in same %s										
B Deparse library	R	B::Deparse (module)										
~	R	Unary "~" operator										
do RPC in Perl	R	How can I do RPC in Perl?										
System V  is not implemented on this machine	R	System V %s is not implemented on this machine										
executable file	R	executable file (definition)										
my function	R	my (function)										
variable definition	R	variable (definition)										
Unknown open() mode ''	R	Unknown open() mode '%s'										
cos subroutine	R	cos (function)										
IPC::Msg package	R	IPC::Msg (module)										
define indirect object slot	R	indirect object slot (definition)										
eval subroutine	R	eval (function)										
modulus	R	modulus (definition)										
chdir func	R	chdir (function)										
Sys::Hostname library	R	Sys::Hostname (module)										
reverse method	R	reverse (function)										
warn subroutine	R	warn (function)										
Compress Raw Zlib library	R	Compress::Raw::Zlib (module)										
our func	R	our (function)										
Digest::SHA library	R	Digest::SHA (module)										
last routine	R	last (function)										
define qualified	R	qualified (definition)										
cache	R	cache (definition)										
I18N::Langinfo module	R	I18N::Langinfo (module)										
Net::Netrc library	R	Net::Netrc (module)										
Pod Perldoc BaseTo package	R	Pod::Perldoc::BaseTo (module)										
shmctl routine	R	shmctl (function)										
PerlIO::encoding package	R	PerlIO::encoding (module)										
Filter Util Call package	R	Filter::Util::Call (module)										
getprotobyname subroutine	R	getprotobyname (function)										
-E option	R	-E commandline										
How can I access or change N characters of a string	R	How can I access or change N characters of a string?										
Net netent library	R	Net::netent (module)										
seek method	R	seek (function)										
IPC Msg package	R	IPC::Msg (module)										
TAP::Parser::Aggregator module	R	TAP::Parser::Aggregator (module)										
TAP::Parser::Scheduler::Job	R	TAP::Parser::Scheduler::Job (module)										
TAP Parser Scheduler Job library	R	TAP::Parser::Scheduler::Job (module)										
IO::Compress::RawDeflate module	R	IO::Compress::RawDeflate (module)										
define file descriptor	R	file descriptor (definition)										
Illegal binary digit  ignored	R	Illegal binary digit %s ignored										
unless sub	R	unless (function)										
Encode::Unicode library	R	Encode::Unicode (module)										
%OS_ERROR (variable)	R	%! (variable)										
Encode::KR module	R	Encode::KR (module)										
Config Extensions package	R	Config::Extensions (module)										
home directory	R	home directory (definition)										
last function	R	last (function)										
increment	R	increment (definition)										
Parse::CPAN::Meta library	R	Parse::CPAN::Meta (module)										
Unmatched [ in regex; marked by <-- HERE in m//	R	Unmatched [ in regex; marked by <-- HERE in m/%s/										
no routine	R	no (function)										
shift function	R	shift (function)										
Value of  can be "0"; test with defined()	R	Value of %s can be "0"; test with defined()										
define program generator	R	program generator (definition)										
hubris	R	hubris (definition)										
Net NNTP module	R	Net::NNTP (module)										
assertion botched: 	R	assertion botched: %s										
die subroutine	R	die (function)										
-X	R	-X (function)										
do anything	R	How do I do (anything)?										
fork subroutine	R	fork (function)										
-C	R	-C [ number/list ]										
TAP::Parser::Grammar	R	TAP::Parser::Grammar (module)										
substr method	R	substr (function)										
IPC::Open3 package	R	IPC::Open3 (module)										
printf routine	R	printf (function)										
substitute case-insensitively on the LHS while preserving case on the RHS?	R	How do I substitute case-insensitively on the LHS while preserving case on the RHS?										
undef func	R	undef (function)										
File::DosGlob package	R	File::DosGlob (module)										
split function	R	split (function)										
listen() on closed socket 	R	listen() on closed socket %s										
make a system exit on controlC	R	How do I make a system() exit on control-C?										
Out of memory during "large" request for 	R	Out of memory during "large" request for %s										
backreference	R	backreference (definition)										
Getopt::Std module	R	Getopt::Std (module)										
Carp	R	Carp (module)										
ExtUtils::MM_OS2 module	R	ExtUtils::MM_OS2 (module)										
define lookahead	R	lookahead (definition)										
require	R	require (function)										
chdir routine	R	chdir (function)										
integer definition	R	integer (definition)										
Pod::Simple::DumpAsXML	R	Pod::Simple::DumpAsXML (module)										
PAUSE	R	PAUSE (definition)										
flock subroutine	R	flock (function)										
cos sub	R	cos (function)										
Binary =~	R	Binary "=~" operator										
TAP Parser Result	R	TAP::Parser::Result (module)										
Pod Simple Methody library	R	Pod::Simple::Methody (module)										
PerlIO::scalar module	R	PerlIO::scalar (module)										
shmget sub	R	shmget (function)										
unshift subroutine	R	unshift (function)										
descriptor	R	descriptor (definition)										
Pod Perldoc ToPod	R	Pod::Perldoc::ToPod (module)										
Env	R	Env (module)										
string context	R	string context (definition)										
define backreference	R	backreference (definition)										
sin	R	sin (function)										
define structure	R	structure (definition)										
ExtUtils Command MM library	R	ExtUtils::Command::MM (module)										
File::Spec::Functions library	R	File::Spec::Functions (module)										
define zero width	R	zero width (definition)										
File Spec Unix	R	File::Spec::Unix (module)										
ioctl() on unopened 	R	ioctl() on unopened %s										
lt sub	R	lt (function)										
Encode::EBCDIC module	R	Encode::EBCDIC (module)										
Pod Perldoc GetOptsOO	R	Pod::Perldoc::GetOptsOO (module)										
Time::gmtime package	R	Time::gmtime (module)										
File::stat library	R	File::stat (module)										
le function	R	le (function)										
collating sequence definition	R	collating sequence (definition)										
localtime() failed	R	localtime(%f) failed										
ExtUtils CBuilder	R	ExtUtils::CBuilder (module)										
separator	R	separator (definition)										
do routine	R	do (function)										
Tie Hash	R	Tie::Hash (module)										
xor routine	R	xor (function)										
localtime routine	R	localtime (function)										
uppercase definition	R	uppercase (definition)										
CPAN definition	R	CPAN (definition)										
$SUBSCRIPT_SEPARATOR	R	$; (variable)										
define I/O	R	I/O (definition)										
lcfirst	R	lcfirst (function)										
Devel::PPPort package	R	Devel::PPPort (module)										
TAP::Formatter::Console::Session module	R	TAP::Formatter::Console::Session (module)										
Pod::Simple::PullParser module	R	Pod::Simple::PullParser (module)										
Compress::Raw::Bzip2	R	Compress::Raw::Bzip2 (module)										
define runtime pattern	R	runtime pattern (definition)										
TAP Base module	R	TAP::Base (module)										
App Prove State Result package	R	App::Prove::State::Result (module)										
Net Domain	R	Net::Domain (module)										
Can't return  to lvalue scalar context	R	Can't return %s to lvalue scalar context										
getgrgid method	R	getgrgid (function)										
define keyword	R	keyword (definition)										
efficiently match many regular expressions at once	R	How do I efficiently match many regular expressions at once?										
Bad arg length for , is , should be 	R	Bad arg length for %s, is %u, should be %d										
/n modifier	R	/n regular expression modifier										
scope definition	R	scope (definition)										
set up a footer format to be used with write	R	How can I set up a footer format to be used with write()?										
Class Struct	R	Class::Struct (module)										
__DATA__ subroutine	R	__DATA__ (function)										
Time gmtime library	R	Time::gmtime (module)										
Devel SelfStubber module	R	Devel::SelfStubber (module)										
STDIN	R	STDIN (definition)										
Devel::Peek	R	Devel::Peek (module)										
RV definition	R	RV (definition)										
How do I sort an array by anything	R	How do I sort an array by (anything)?										
standard	R	standard (definition)										
Can't open perl script "": 	R	Can't open perl script "%s": %s										
B::Xref module	R	B::Xref (module)										
qq func	R	qq (function)										
'' is not an overloadable type	R	'%s' is not an overloadable type										
ExtUtils Constant Utils module	R	ExtUtils::Constant::Utils (module)										
Net Domain package	R	Net::Domain (module)										
BSD definition	R	BSD (definition)										
foldcase definition	R	foldcase (definition)										
Pod::Simple::PullParserTextToken module	R	Pod::Simple::PullParserTextToken (module)										
readlink sub	R	readlink (function)										
$ACCUMULATOR (variable)	R	$^A (variable)										
when subroutine	R	when (function)										
ExtUtils::CBuilder::Platform::Windows package	R	ExtUtils::CBuilder::Platform::Windows (module)										
oop	R	Where can I learn about object-oriented Perl programming?										
CPAN::Nox	R	CPAN::Nox (module)										
define atom	R	atom (definition)										
no method	R	no (function)										
send email	R	How do I send email?										
core dump	R	core dump (definition)										
-v switch	R	-v										
Pod::Simple::Debug	R	Pod::Simple::Debug (module)										
${^TAINT}	R	${^TAINT} (variable)										
sprintf func	R	sprintf (function)										
syntax error at line : '' unexpected	R	syntax error at line %d: '%s' unexpected										
define ordinal	R	ordinal (definition)										
read in an entire file all at once?	R	How can I read in an entire file all at once?										
IO::Uncompress::RawInflate module	R	IO::Uncompress::RawInflate (module)										
rmdir subroutine	R	rmdir (function)										
getpwnam func	R	getpwnam (function)										
expand function calls in a string?	R	How do I expand function calls in a string?										
getpwnam	R	getpwnam (function)										
DESTROY subroutine	R	DESTROY (function)										
define loop	R	loop (definition)										
elseif	R	elseif (function)										
sprintf	R	sprintf (function)										
destroy	R	destroy (definition)										
O	R	O (module)										
-S flag	R	-S										
Unterminated \g... pattern in regex; marked by <-- HERE in m/%s/	R	Unterminated \g{...} pattern in regex; marked by <-- HERE in m/%s/										
Possible precedence problem on bitwise  operator	R	Possible precedence problem on bitwise %s operator										
Encode::Encoder library	R	Encode::Encoder (module)										
dwimmer	R	dwimmer (definition)										
define foldcase	R	foldcase (definition)										
structure	R	structure (definition)										
Bad filehandle: 	R	Bad filehandle: %s										
symbolic debugger	R	symbolic debugger (definition)										
ne	D								*[[ne (function)]], <pre>ne</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "ne" operator]], Binary &quot;ne&quot; returns true if the left argument is stringwise not equal to the right argument..			
scalar	D								*[[scalar (function)]], <pre>scalar EXPR</pre><p>Forces EXPR to be interpreted in scalar context and returns the value of EXPR.</p><pre class="verbatim"><ol><li>    <span class="i">@counts</span> = <span class="s">(</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@a</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@b</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span> <span class="i">@c</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>There is no equivalent operator to force an expression to be interpolated in list context because in practice, this is never needed.  If you really wanted to do so, however, you could use the construction <code class="inline"><span class="i">@</span>{<span class="s">[</span> <span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span> <span class="s">]</span>}</code> , but usually a simple <code class="inline"><span class="s">(</span><span class="w">some</span> <span class="w">expression</span><span class="s">)</span></code>  suffices.</p><p>Because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span></code> is a unary operator, if you accidentally use a parenthesized list for the EXPR, this behaves as a scalar comma expression, evaluating all but the last element in void context and returning the final element evaluated in scalar context.  This is seldom what you want.</p><p>The following single statement:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/scalar.html">scalar</span><span class="s">(</span><span class="i">&amp;foo</span><span class="cm">,</span><span class="i">$bar</span><span class="s">)</span><span class="s">)</span><span class="cm">,</span><span class="i">$baz</span><span class="sc">;</span></li></ol></pre><p>is the moral equivalent of these two:</p><pre class="verbatim"><ol><li>    <span class="i">&amp;foo</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span><span class="s">(</span><span class="l_k" href="http://perldoc.perl.org/functions/uc.html">uc</span><span class="s">(</span><span class="i">$bar</span><span class="s">)</span><span class="cm">,</span><span class="i">$baz</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>See <span href="http://perldoc.perl.org/perlop.html">perlop</span> for more details on unary operators and the comma operator.</p>.\\n*[[scalar (definition)]], <p>A simple, singular value; a number, <b>string</b>, or <b>reference</b>.</p>.			
pipe	D								*[[pipe (function)]], <pre>pipe READHANDLE,WRITEHANDLE</pre><p>Opens a pair of connected pipes like the corresponding system call. Note that if you set up a loop of piped processes, deadlock can occur unless you are very careful.  In addition, note that Perl&#39;s pipes use IO buffering, so you may need to set <code class="inline"><span class="i">$|</span></code>  to flush your WRITEHANDLE after each command, depending on the application.</p><p>Returns true on success.</p><p>See <span href="http://perldoc.perl.org/IPC/Open2.html">IPC::Open2</span>, <span href="http://perldoc.perl.org/IPC/Open3.html">IPC::Open3</span>, and <span href="http://perldoc.perl.org/perlipc.html#Bidirectional-Communication-with-Another-Process">Bidirectional Communication with Another Process in perlipc</span> for examples of such things.</p><p>On systems that support a close-on-exec flag on files, that flag is set on all newly opened file descriptors whose <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span></code>s are <i>higher</i> than  the current value of $^F (by default 2 for <code class="inline"><span class="w">STDERR</span></code> ).  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p>.\\n*[[pipe (definition)]], <p>A direct <b>connection</b> that carries the output of one <b>process</b> to the input of another without an intermediate temporary file. Once the pipe is set up, the two processes in question can read and write as if they were talking to a normal file, with some caveats.</p>.			
le	D								*[[le (function)]], <pre>le</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "le" operator]], Binary &quot;le&quot; returns true if the left argument is stringwise less than or equal to the right argument..			
not	D								*[[not (function)]], <pre>not</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Unary "not" operator]], Unary &quot;not&quot; returns the logical negation of the expression to its right. It&#39;s the equivalent of &quot;!&quot; except for the very low precedence..			
closure	D								*[[What's a closure?]], <p>Closures are documented in <span href="http://perldoc.perl.org/perlref.html">perlref</span>.</p><p><i>Closure</i> is a computer science term with a precise but hard-to-explain meaning. Usually, closures are implemented in Perl as anonymous subroutines with lasting references to lexical variables outside their own scopes. These lexicals magically refer to the variables that were around when the subroutine was defined (deep binding).</p><p>Closures are most often used in programming languages where you can have the return value of a function be itself a function, as you can in Perl. Note that some languages provide anonymous functions but are not capable of providing proper closures: the Python language, for example. For more information on closures, check out any textbook on functional programming. Scheme is a language that not only supports but encourages closures.</p><p>Here&#39;s a classic non-closure function-generating function:</p><pre class="verbatim"><ol><li><span name="add_function_generator"></span>    sub <span class="m">add_function_generator</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> + <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$add_sub</span> = <span class="i">add_function_generator</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$sum</span> = <span class="i">$add_sub</span>-&gt;<span class="s">(</span><span class="n">4</span><span class="cm">,</span><span class="n">5</span><span class="s">)</span><span class="sc">;</span>                <span class="c"># $sum is 9 now.</span></li></ol></pre><p>The anonymous subroutine returned by add_function_generator() isn&#39;t technically a closure because it refers to no lexicals outside its own scope. Using a closure gives you a <i>function template</i> with some customization slots left out to be filled later.</p><p>Contrast this with the following make_adder() function, in which the returned anonymous function contains a reference to a lexical variable outside the scope of that function itself. Such a reference requires that Perl return a proper closure, thus locking in for all time the value that the lexical had when the function was created.</p><pre class="verbatim"><ol><li><span name="make_adder"></span>    sub <span class="m">make_adder</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$addpiece</span> = <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="sc">;</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/return.html">return</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/shift.html">shift</span><span class="s">(</span><span class="s">)</span> + <span class="i">$addpiece</span> <span class="s">}</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f1</span> = <span class="i">make_adder</span><span class="s">(</span><span class="n">20</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$f2</span> = <span class="i">make_adder</span><span class="s">(</span><span class="n">555</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Now <code class="inline"><span class="i">$f1</span>-&gt;<span class="s">(</span><span class="i">$n</span><span class="s">)</span></code>  is always 20 plus whatever $n you pass in, whereas <code class="inline"><span class="i">$f2</span>-&gt;<span class="s">(</span><span class="i">$n</span><span class="s">)</span></code>  is always 555 plus whatever $n you pass in. The $addpiece in the closure sticks around.</p><p>Closures are often used for less esoteric purposes. For example, when you want to pass in a bit of code into a function:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$line</span><span class="sc">;</span></li><li>    <span class="i">timeout</span><span class="s">(</span> <span class="n">30</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/sub.html">sub</span> <span class="s">{</span> <span class="i">$line</span> = <span class="q">&lt;STDIN&gt;</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span></li></ol></pre><p>If the code to execute had been passed in as a string, <code class="inline"><span class="q">&#39;$line = &lt;STDIN&gt;&#39;</span></code> , there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller&#39;s scope.</p><p>Another use for a closure is to make a variable <i>private</i> to a named subroutine, e.g. a counter that gets initialized at creation time of the sub and can only be modified from within the sub. This is sometimes used with a BEGIN block in package files to make sure a variable doesn&#39;t get meddled with during the lifetime of the package:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/BEGIN.html">BEGIN</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$id</span> = <span class="n">0</span><span class="sc">;</span></li><li><span name="next_id"></span>        sub <span class="m">next_id</span> <span class="s">{</span> ++<span class="i">$id</span> <span class="s">}</span></li><li>    <span class="s">}</span></li></ol></pre><p>This is discussed in more detail in <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>; see the entry on <i>Persistent Private Variables</i>.</p>.\\n*[[closure (definition)]], <p>An <b>anonymous</b> subroutine that, when a reference to it is generated at runtime, keeps track of the identities of externally visible <b>lexical variables</b>, even after those lexical variables have supposedly gone out of <b>scope</b>. They’re called “closures” because this sort of behavior gives mathematicians a sense of closure.</p>.			
difference between and?	D								*[[What is the difference between and?]], <p>Because UTF-8 is one of Perl&#39;s internal formats, you can often just skip the encoding or decoding step, and manipulate the UTF8 flag directly.</p><p>Instead of <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code> , you can simply use <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , which skips the encoding step if the data was already represented as UTF8 internally. This is widely accepted as good behavior when you&#39;re writing, but it can be dangerous when reading, because it causes internal inconsistency when you have invalid byte sequences. Using <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  for input can sometimes result in security breaches, so please use <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code>  instead.</p><p>Instead of <code class="inline"><span class="w">decode</span></code>  and <code class="inline"><span class="w">encode</span></code> , you could use <code class="inline"><span class="w">_utf8_on</span></code>  and <code class="inline"><span class="w">_utf8_off</span></code> , but this is considered bad style. Especially <code class="inline"><span class="w">_utf8_on</span></code>  can be dangerous, for the same reason that <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  can.</p><p>There are some shortcuts for oneliners; see <span href="http://perldoc.perl.org/perlrun.html#-C-%5bnumber%2flist%5d">-C</span> in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>.</p>.\\n*[[What's the difference between and?]], <p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is the official standard. <code class="inline"><span class="w">utf8</span></code>  is Perl&#39;s way of being liberal in what it accepts. If you have to communicate with things that aren&#39;t so liberal, you may want to consider using <code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code> . If you have to communicate with things that are too liberal, you may have to use <code class="inline"><span class="w">utf8</span></code> . The full explanation is in <span href="http://perldoc.perl.org/Encode.html">Encode</span>.</p><p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is internally known as <code class="inline"><span class="w">utf</span>-<span class="n">8</span>-<span class="w">strict</span></code> . The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</p><p>For example, utf8 can be used for code points that don&#39;t exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see <span href="http://perldoc.perl.org/Encode.html#Handling-Malformed-Data">Handling Malformed Data in Encode</span> for more ways of dealing with this.)</p><p>Okay, if you insist: the &quot;internal format&quot; is utf8, not UTF-8. (When it&#39;s not some other encoding.)</p>.			
grep	D								*[[grep (function)]], <pre>grep BLOCK LIST<br>grep EXPR,LIST</pre><p>This is similar in spirit to, but not the same as, grep(1) and its relatives.  In particular, it is not limited to using regular expressions.</p><p>Evaluates the BLOCK or EXPR for each element of LIST (locally setting <code class="inline"><span class="i">$_</span></code>  to each element) and returns the list value consisting of those elements for which the expression evaluated to true.  In scalar context, returns the number of times the expression was true.</p><pre class="verbatim"><ol><li>    <span class="i">@foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span><span class="s">(</span>!<span class="q">/^#/</span><span class="cm">,</span> <span class="i">@bar</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># weed out comments</span></li></ol></pre><p>or equivalently,</p><pre class="verbatim"><ol><li>    <span class="i">@foo</span> = <span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span> <span class="s">{</span>!<span class="q">/^#/</span><span class="s">}</span> <span class="i">@bar</span><span class="sc">;</span>    <span class="c"># weed out comments</span></li></ol></pre><p>Note that <code class="inline"><span class="i">$_</span></code>  is an alias to the list value, so it can be used to modify the elements of the LIST.  While this is useful and supported, it can cause bizarre results if the elements of LIST are not variables. Similarly, grep returns aliases into the original list, much as a for loop&#39;s index variable aliases the list elements.  That is, modifying an element of a list returned by grep (for example, in a <code class="inline">foreach</code> , <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/map.html">map</span></code> or another <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code>) actually modifies the element in the original list. This is usually something to be avoided when writing clear code.</p><p>If <code class="inline"><span class="i">$_</span></code>  is lexical in the scope where the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> appears (because it has been declared with the deprecated <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span> <span class="i">$_</span></code>  construct) then, in addition to being locally aliased to the list elements, <code class="inline"><span class="i">$_</span></code>  keeps being lexical inside the block; i.e., it can&#39;t be seen from the outside, avoiding any potential side-effects.</p><p>See also <span href="http://perldoc.perl.org/functions/map.html">map</span> for a list composed of the results of the BLOCK or EXPR.</p>.\\n*[[grep (definition)]], <p>Originally from the old Unix editor command for “Globally search for a Regular Expression and Print it”, now used in the general sense of any kind of search, especially text searches. Perl has a built-in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/grep.html">grep</span></code> function that searches a list for elements matching any given criterion, whereas the <b>grep</b>(1) program searches for lines matching a <b>regular expression</b> in one or more files.</p>.			
endian (definition)	D								*[[little-endian]], From Swift: someone who eats eggs little end first. Also used of computers that store the least significant of a word at a lower byte address than the most significant byte. Often considered superior to big-endian machines. See also..\\n*[[big-endian]], From Swift: someone who eats eggs big end first. Also used of computers that store the most significant of a word at a lower byte address than the least significant byte. Often considered superior to little-endian machines. See also..			
or	D								*[[or (function)]], <pre>or</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "or" operator]], Binary &quot;or&quot; returns the logical disjunction of the two surrounding expressions. It&#39;s equivalent to || except for the very low precedence. This makes it useful for control flow:.			
IO	D								*[[IO (definition)]], <p>An internal I/O object. Can also mean <b>indirect object</b>.</p>.\\n*[[IO (module)]], <p>IO - load various IO modules</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span> <span class="q">qw(Handle File)</span><span class="sc">;</span> <span class="c"># loads IO modules, here IO::Handle, IO::File</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span><span class="sc">;</span>                 <span class="c"># DEPRECATED</span></li></ol></pre>.\\n*[[IO (module)]], <p>IO - load various IO modules</p> <pre class="verbatim"><ol><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span> <span class="q">qw(Handle File)</span><span class="sc">;</span> <span class="c"># loads IO modules, here IO::Handle, IO::File</span></li><li>   <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">IO</span><span class="sc">;</span>                 <span class="c"># DEPRECATED</span></li></ol></pre>.			
error (definition)	D								*[[exception]], A fancy term for an error. See..\\n*[[fatal error]], An uncaught, which causes termination of the after printing a message on your stream. Errors that happen inside an are not fatal. Instead, the terminates after placing the exception message in the ( ) variable. You can try to provoke a fatal error with the operator (known as throwing or raising an exception), but this may be caught by a dynamically enclosing. If not caught, the becomes a fatal error..			
eq	D								*[[eq (function)]], <pre>eq</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "eq" operator]], Binary &quot;eq&quot; returns true if the left argument is stringwise equal to the right argument..			
prototype	D								*[[prototype (function)]], <pre>prototype FUNCTION<br>prototype</pre><p>Returns the prototype of a function as a string (or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if the function has no prototype).  FUNCTION is a reference to, or the name of, the function whose prototype you want to retrieve.  If FUNCTION is omitted, $_ is used.</p><p>If FUNCTION is a string starting with <code class="inline"><span class="w">CORE::</span></code> , the rest is taken as a name for a Perl builtin.  If the builtin&#39;s arguments cannot be adequately expressed by a prototype (such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>), prototype() returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, because the builtin does not really behave like a Perl function.  Otherwise, the string describing the equivalent prototype is returned.</p>.\\n*[[prototype (definition)]], <p>An optional part of a <b>subroutine</b> declaration telling the Perl compiler how many and what flavor of arguments may be passed as <b>actual arguments</b>, so you can write subroutine calls that parse much like built-in functions. (Or don’t parse, as the case may be.)</p>.			
exec	D								*[[exec (function)]], <pre>exec LIST<br>exec PROGRAM LIST</pre><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> function executes a system command <i>and never returns</i>; use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> if you want it to return.  It fails and returns false only if the command does not exist <i>and</i> it is executed directly instead of via your system&#39;s command shell (see below).</p><p>Since it&#39;s a common mistake to use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> instead of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code>, Perl warns you if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> is called in void context and if there is a following statement that isn&#39;t <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/warn.html">warn</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exit.html">exit</span></code> (if <code class="inline">-w</code>  is set--but you always do that, right?).  If you <i>really</i> want to follow an <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> with some other statement, you can use one of these styles to avoid the warning:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">(</span><span class="q">&#39;foo&#39;</span><span class="s">)</span>   or <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;couldn&#39;t exec foo: $!&quot;</span><span class="sc">;</span></li><li>    <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">(</span><span class="q">&#39;foo&#39;</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">STDERR</span> <span class="q">&quot;couldn&#39;t exec foo: $!&quot;</span><span class="sc">;</span></li></ol></pre><p>If there is more than one argument in LIST, this calls execvp(3) with the arguments in LIST.  If there is only one element in LIST, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system&#39;s command shell for parsing (this is <code class="inline">/bin/sh -c</code> on Unix platforms, but varies on other platforms).  If there are no shell metacharacters in the argument, it is split into words and passed directly to <code class="inline"><span class="w">execvp</span></code> , which is more efficient.  Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&#39;/bin/echo&#39;</span><span class="cm">,</span> <span class="q">&#39;Your arguments are: &#39;</span><span class="cm">,</span> <span class="i">@ARGV</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="q">&quot;sort $outfile | uniq&quot;</span><span class="sc">;</span></li></ol></pre><p>If you don&#39;t really want to execute the first argument, but want to lie to the program you are executing about its own name, you can specify the program you actually want to run as an &quot;indirect object&quot; (without a comma) in front of the LIST, as in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code> .  (This always forces interpretation of the LIST as a multivalued list, even if there is only a single scalar in the list.)  Example:</p><pre class="verbatim"><ol><li>    <span class="i">$shell</span> = <span class="q">&#39;/bin/csh&#39;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">$shell</span> <span class="q">&#39;-sh&#39;</span><span class="sc">;</span>    <span class="c"># pretend it&#39;s a login shell</span></li></ol></pre><p>or, more directly,</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">{</span><span class="q">&#39;/bin/csh&#39;</span><span class="s">}</span> <span class="q">&#39;-sh&#39;</span><span class="sc">;</span>  <span class="c"># pretend it&#39;s a login shell</span></li></ol></pre><p>When the arguments get executed via the system shell, results are subject to its quirks and capabilities.  See <span href="http://perldoc.perl.org/perlop.html#%60STRING%60">`STRING` in perlop</span> for details.</p><p>Using an indirect object with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> is also more secure.  This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument.  That way you&#39;re safe from the shell expanding wildcards or splitting up words with whitespace in them.</p><pre class="verbatim"><ol><li>    <span class="i">@args</span> = <span class="s">(</span> <span class="q">&quot;echo surprise&quot;</span> <span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">@args</span><span class="sc">;</span>               <span class="c"># subject to shell escapes</span></li><li>                                <span class="c"># if @args == 1</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="s">{</span> <span class="i">$args</span>[<span class="n">0</span>] <span class="s">}</span> <span class="i">@args</span><span class="sc">;</span>  <span class="c"># safe even with one-arg list</span></li></ol></pre><p>The first version, the one without the indirect object, ran the <i>echo</i> program, passing it <code class="inline"><span class="q">&quot;surprise&quot;</span></code>  an argument.  The second version didn&#39;t; it tried to run a program named <i>&quot;echo surprise&quot;</i>, didn&#39;t find it, and set <code class="inline"><span class="i">$?</span></code>  to a non-zero value indicating failure.</p><p>On Windows, only the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">PROGRAM</span> <span class="w">LIST</span></code>  indirect object syntax will reliably avoid using the shell; <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span> <span class="i">LIST</span></code> , even with more than one element, will fall back to the shell if the first spawn fails.</p><p>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>). To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles to avoid lost output.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/exec.html">exec</span></code> will not call your <code class="inline">END</code>  blocks, nor will it invoke <code class="inline">DESTROY</code>  methods on your objects.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#exec">exec in perlport</span>.</p>.\\n*[[exec (definition)]], <p>To throw away the current <b>process</b>’s program and replace it with another, without exiting the process or relinquishing any resources held (apart from the old memory image).</p>.			
ARGV	D								*[[ARGV (definition)]], <p>The name of the array containing the <b>argument</b> <b>vector</b> from the command line. If you use the empty <code class="inline">&lt;&gt;</code>  operator, <code class="inline"><span class="w">ARGV</span></code>  is the name of both the <b>filehandle</b> used to traverse the arguments and the <b>scalar</b> containing the name of the current input file.</p>.\\n*[[ARGV (variable)]], <p>The special filehandle that iterates over command-line filenames in <code class="inline"><span class="i">@ARGV</span></code> .  Usually written as the null filehandle in the angle operator <code class="inline">&lt;&gt;</code> .  Note that currently <code class="inline"><span class="w">ARGV</span></code>  only has its magical effect within the <code class="inline">&lt;&gt;</code>  operator; elsewhere it is just a plain filehandle corresponding to the last file opened by <code class="inline">&lt;&gt;</code> .  In particular, passing <code class="inline">\\<span class="i">*ARGV</span></code>  as a parameter to a function that expects a filehandle may not cause your function to automatically read the contents of all the files in <code class="inline"><span class="i">@ARGV</span></code> .</p>.			
defined	D								*[[defined (function)]], <pre>defined EXPR<br>defined</pre><p>Returns a Boolean value telling whether EXPR has a value other than the undefined value <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.  If EXPR is not present, <code class="inline"><span class="i">$_</span></code>  is checked.</p><p>Many operations return <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> to indicate failure, end of file, system error, uninitialized variable, and other exceptional conditions.  This function allows you to distinguish <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> from other values.  (A simple Boolean test will not distinguish among <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>, zero, the empty string, and <code class="inline"><span class="q">&quot;0&quot;</span></code> , which are all equally false.)  Note that since <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> is a valid scalar, its presence doesn&#39;t <i>necessarily</i> indicate an exceptional condition: <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span></code> returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> when its argument is an empty array, <i>or</i> when the element to return happens to be <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>You may also use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined(&amp;func)</span></code> to check whether subroutine <code class="inline"><span class="i">&amp;func</span></code>  has ever been defined.  The return value is unaffected by any forward declarations of <code class="inline"><span class="i">&amp;func</span></code> .  A subroutine that is not defined may still be callable: its package may have an <code class="inline">AUTOLOAD</code>  method that makes it spring into existence the first time that it is called; see <span href="http://perldoc.perl.org/perlsub.html">perlsub</span>.</p><p>Use of <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> on aggregates (hashes and arrays) is deprecated.  It used to report whether memory for that aggregate had ever been allocated.  This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</p><pre class="verbatim"><ol><li>    if <span class="s">(</span><span class="i">@an_array</span><span class="s">)</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;has array elements\\n&quot;</span> <span class="s">}</span></li><li>    if <span class="s">(</span><span class="i">%a_hash</span><span class="s">)</span>   <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;has hash members\\n&quot;</span>   <span class="s">}</span></li></ol></pre><p>When used on a hash element, it tells you whether the value is defined, not whether the key exists in the hash.  Use <span href="http://perldoc.perl.org/functions/exists.html">exists</span> for the latter purpose.</p><p>Examples:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> if <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$switch</span>{<span class="w">D</span>}<span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;$val\\n&quot;</span> while <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$val</span> = <span class="l_k" href="http://perldoc.perl.org/functions/pop.html">pop</span><span class="s">(</span><span class="i">@ary</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;Can&#39;t readlink $sym: $!&quot;</span></li><li>        unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span><span class="s">(</span><span class="i">$value</span> = <span class="l_k" href="http://perldoc.perl.org/functions/readlink.html">readlink</span> <span class="i">$sym</span><span class="s">)</span><span class="sc">;</span></li><li><span name="foo"></span>    sub <span class="m">foo</span> <span class="s">{</span> <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">&amp;$bar</span> ? <span class="i">&amp;$bar</span><span class="s">(</span><span class="i">@_</span><span class="s">)</span> <span class="co">:</span> <span class="l_k" href="http://perldoc.perl.org/functions/die.html">die</span> <span class="q">&quot;No bar&quot;</span><span class="sc">;</span> <span class="s">}</span></li><li>    <span class="i">$debugging</span> = <span class="n">0</span> unless <span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span> <span class="i">$debugging</span><span class="sc">;</span></li></ol></pre><p>Note:  Many folks tend to overuse <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> and are then surprised to discover that the number <code class="inline"><span class="n">0</span></code>  and <code class="inline"><span class="q">&quot;&quot;</span></code>  (the zero-length string) are, in fact, defined values.  For example, if you say</p><pre class="verbatim"><ol><li>    <span class="q">&quot;ab&quot;</span> =~ <span class="q">/a(.*)b/</span><span class="sc">;</span></li></ol></pre><p>The pattern match succeeds and <code class="inline"><span class="i">$1</span></code>  is defined, although it matched &quot;nothing&quot;.  It didn&#39;t really fail to match anything.  Rather, it matched something that happened to be zero characters long.  This is all very above-board and honest.  When a function returns an undefined value, it&#39;s an admission that it couldn&#39;t give you an honest answer.  So you should use <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> only when questioning the integrity of what you&#39;re trying to do.  At other times, a simple comparison to <code class="inline"><span class="n">0</span></code>  or <code class="inline"><span class="q">&quot;&quot;</span></code>  is what you want.</p><p>See also <span href="http://perldoc.perl.org/functions/undef.html">undef</span>, <span href="http://perldoc.perl.org/functions/exists.html">exists</span>, <span href="http://perldoc.perl.org/functions/ref.html">ref</span>.</p>.\\n*[[defined (definition)]], <p>Having a meaning. Perl thinks that some of the things people try to do are devoid of meaning; in particular, making use of variables that have never been given a <b>value</b> and performing certain operations on data that isn’t there. For example, if you try to read data past the end of a file, Perl will hand you back an undefined value. See also <b>false</b> and the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/defined.html">defined</span></code> entry in Camel chapter 27, “Functions”.</p>.			
bind	D								*[[bind (function)]], <pre>bind SOCKET,NAME</pre><p>Binds a network address to a socket, just as bind(2) does.  Returns true if it succeeded, false otherwise.  NAME should be a packed address of the appropriate type for the socket.  See the examples in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p>.\\n*[[bind (definition)]], <p>To assign a specific <b>network address</b> to a <b>socket</b>.</p>.			
default	D								*[[default (function)]], <pre>default</pre><p>These flow-control keywords related to the experimental switch feature are documented in <span href="http://perldoc.perl.org/perlsyn.html#Switch-Statements">Switch Statements in perlsyn</span>.</p>.\\n*[[default (definition)]], <p>A <b>value</b> chosen for you if you don’t supply a value of your own.</p>.			
socket	D								*[[socket (function)]], <pre>socket SOCKET,DOMAIN,TYPE,PROTOCOL</pre><p>Opens a socket of the specified kind and attaches it to filehandle SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name.  You should <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">Socket</span></code>  first to get the proper definitions imported.  See the examples in <span href="http://perldoc.perl.org/perlipc.html#Sockets%3a-Client%2fServer-Communication">Sockets: Client/Server Communication in perlipc</span>.</p><p>On systems that support a close-on-exec flag on files, the flag will be set for the newly opened file descriptor, as determined by the value of $^F.  See <span href="http://perldoc.perl.org/perlvar.html#%24%5eF">$^F in perlvar</span>.</p>.\\n*[[socket (definition)]], <p>An endpoint for network communication among multiple <b>processes</b> that works much like a telephone or a post office box. The most important thing about a socket is its <b>network address</b> (like a phone number). Different kinds of sockets have different kinds of addresses—some look like filenames, and some don’t.</p>.			
lt	D								*[[lt (function)]], <pre>lt</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "lt" operator]], Binary &quot;lt&quot; returns true if the left argument is stringwise less than the right argument..			
and	D								*[[and (function)]], <pre>and</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "and" operator]], Binary &quot;and&quot; returns the logical conjunction of the two surrounding expressions. It&#39;s equivalent to &amp;&amp; except for the very low precedence. This means that it short-circuits: the right expression is evaluated only if the left expression is true..			
ge	D								*[[ge (function)]], <pre>ge</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "ge" operator]], Binary &quot;ge&quot; returns true if the left argument is stringwise greater than or equal to the right argument..			
type (definition)	D								*[[data type]], A set of possible values, together with all the operations that know how to deal with those values. For example, a numeric data type has a certain set of numbers that you can work with, as well as various mathematical operations that you can do on the numbers, but would make little sense on, say, a string such as. Strings have their own operations, such as. Compound types made of a number of smaller pieces generally have operations to compose and decompose them, and perhaps to rearrange them. that model things in the real world often have operations that correspond to real activities. For instance, if you model an elevator, your elevator object might have an..\\n*[[class]], A generic type; that is, a from which other, more specific classes are derived genetically by. Also called a “superclass” by people who respect their ancestors..			
x	D								*[[x (function)]], <pre>x<br>xor</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "x" operator]], Binary &quot;x&quot; is the repetition operator. In scalar context or if the left operand is not enclosed in parentheses, it returns a string consisting of the left operand repeated the number of times specified by the right operand. In list context, if the left operand is enclosed in parentheses or is a list formed by qw/ STRING /, it repeats the list. If the right operand is zero or negative (raising a warning on negative), it returns an empty string or an empty list, depending on the context..			
+ operator	D								*[[Unary "+" operator]], Unary &quot;+&quot; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under Terms and List Operators (Leftward).).\\n*[[Binary "+" operator]], Binary &quot;+&quot; returns the sum of two numbers..			
local	D								*[[local (function)]], <pre>local EXPR</pre><p>You really probably want to be using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code> instead, because <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> isn&#39;t what most people think of as &quot;local&quot;.  See <span href="http://perldoc.perl.org/perlsub.html#Private-Variables-via-my()">Private Variables via my() in perlsub</span> for details.</p><p>A local modifies the listed variables to be local to the enclosing block, file, or eval.  If more than one value is listed, the list must be placed in parentheses.  See <span href="http://perldoc.perl.org/perlsub.html#Temporary-Values-via-local()">Temporary Values via local() in perlsub</span> for details, including issues with tied arrays and hashes.</p><p>The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/delete.html">delete</span> <span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span> <span class="w">EXPR</span></code>  construct can also be used to localize the deletion of array/hash elements to the current block. See <span href="http://perldoc.perl.org/perlsub.html#Localized-deletion-of-elements-of-composite-types">Localized deletion of elements of composite types in perlsub</span>.</p>.\\n*[[local (definition)]], <p>Not meaning the same thing everywhere. A global variable in Perl can be localized inside a <b>dynamic scope</b> via the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> operator.</p>.			
-	D								*[[Unary "-" operator]], Unary &quot;-&quot; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that - bareword is equivalent to the string &quot;-bareword&quot;. If, however, the string begins with a non-alphabetic character (excluding &quot;+&quot; or &quot;-&quot; ), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning Argument &quot;the string&quot; isn&#39;t numeric in negation (-) at .....\\n*[[Binary "-" operator]], Binary &quot;-&quot; returns the difference of two numbers..			
modifier (definition)	D								*[[statement modifier]], A or that you put after the instead of before, if you know what we mean..\\n*[[regular expression]], A single entity with various interpretations, like an elephant. To a computer scientist, it’s a grammar for a little language in which some strings are legal and others aren’t. To normal people, it’s a pattern you can use to find what you’re looking for when it varies from case to case. Perl’s regular expressions are far from regular in the theoretical sense, but in regular use they work quite well. Here’s a regular expression:. This will match strings like “ ” and “ ”. See Camel chapter 5, “Pattern Matching”..\\n*[[lvalue]], Term used by language lawyers for a storage location you can assign a new to, such as a or an element of an. The “l” is short for “left”, as in the left side of an assignment, a typical place for lvalues. An function or expression is one to which a value may be assigned, as in..			
POSIX	D								*[[POSIX (definition)]], <p>The Portable Operating System Interface specification.</p>.\\n*[[POSIX (module)]], <p>POSIX - Perl interface to IEEE Std 1003.1</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(setsid)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(:errno_h :fcntl_h)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;EINTR is %d\\n&quot;</span><span class="cm">,</span> <span class="w">EINTR</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sess_id</span> = <span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fd</span> = <span class="i">POSIX::open</span><span class="s">(</span><span class="i">$path</span><span class="cm">,</span> <span class="w">O_CREAT</span>|<span class="w">O_EXCL</span>|<span class="w">O_WRONLY</span><span class="cm">,</span> <span class="n">0644</span><span class="s">)</span><span class="sc">;</span></li><li>	<span class="c"># note: that&#39;s a filedescriptor, *NOT* a filehandle</span></li></ol></pre>.\\n*[[POSIX (module)]], <p>POSIX - Perl interface to IEEE Std 1003.1</p> <pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(setsid)</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">POSIX</span> <span class="q">qw(:errno_h :fcntl_h)</span><span class="sc">;</span></li><li></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/printf.html">printf</span> <span class="q">&quot;EINTR is %d\\n&quot;</span><span class="cm">,</span> <span class="w">EINTR</span><span class="sc">;</span></li><li></li><li>    <span class="i">$sess_id</span> = <span class="i">POSIX::setsid</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span></li><li></li><li>    <span class="i">$fd</span> = <span class="i">POSIX::open</span><span class="s">(</span><span class="i">$path</span><span class="cm">,</span> <span class="w">O_CREAT</span>|<span class="w">O_EXCL</span>|<span class="w">O_WRONLY</span><span class="cm">,</span> <span class="n">0644</span><span class="s">)</span><span class="sc">;</span></li><li>	<span class="c"># note: that&#39;s a filedescriptor, *NOT* a filehandle</span></li></ol></pre>.			
glob	D								*[[glob (function)]], <pre>glob EXPR<br>glob</pre><p>In list context, returns a (possibly empty) list of filename expansions on the value of EXPR such as the standard Unix shell <i>/bin/csh</i> would do.  In scalar context, glob iterates through such filename expansions, returning undef when the list is exhausted.  This is the internal function implementing the <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator, but you can use it directly.  If EXPR is omitted, <code class="inline"><span class="i">$_</span></code>  is used.  The <code class="inline"><span class="q">&lt;*.c&gt;</span></code>  operator is discussed in more detail in <span href="http://perldoc.perl.org/perlop.html#I%2fO-Operators">I/O Operators in perlop</span>.</p><p>Note that <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code> splits its arguments on whitespace and treats each segment as separate pattern.  As such, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="q">&quot;*.c *.h&quot;</span><span class="s">)</span></code>   matches all files with a <i>.c</i> or <i>.h</i> extension.  The expression <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span><span class="s">(</span><span class="q">&quot;.* *&quot;</span><span class="s">)</span></code>  matches all files in the current working directory. If you want to glob filenames that might contain whitespace, you&#39;ll have to use extra quotes around the spacey filename to protect it. For example, to glob filenames that have an <code class="inline"><span class="w">e</span></code>  followed by a space followed by an <code class="inline"><span class="w">f</span></code> , use either of:</p><pre class="verbatim"><ol><li>    <span class="i">@spacies</span> = <span class="q">&lt;&quot;*e f*&quot;&gt;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&#39;&quot;*e f*&quot;&#39;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">q(&quot;*e f*&quot;)</span><span class="sc">;</span></li></ol></pre><p>If you had to get a variable through, you could do this:</p><pre class="verbatim"><ol><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&quot;&#39;*${var}e f*&#39;&quot;</span><span class="sc">;</span></li><li>    <span class="i">@spacies</span> = <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">qq(&quot;*${var}e f*&quot;)</span><span class="sc">;</span></li></ol></pre><p>If non-empty braces are the only wildcard characters used in the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span></code>, no filenames are matched, but potentially many strings are returned.  For example, this produces nine strings, one for each pairing of fruits and colors:</p><pre class="verbatim"><ol><li>    <span class="i">@many</span> =  <span class="l_k" href="http://perldoc.perl.org/functions/glob.html">glob</span> <span class="q">&quot;{apple,tomato,cherry}={green,yellow,red}&quot;</span><span class="sc">;</span></li></ol></pre><p>This operator is implemented using the standard <code class="inline"><span class="w">File::Glob</span></code>  extension.  See <span href="http://perldoc.perl.org/File/Glob.html">File::Glob</span> for details, including <code class="inline"><span class="w">bsd_glob</span></code>  which does not treat whitespace as a pattern separator.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#glob">glob in perlport</span>.</p>.\\n*[[glob (definition)]], <p>Strictly, the shell’s <code class="inline"><span class="i">*</span></code>  character, which will match a “glob” of characters when you’re trying to generate a list of filenames. Loosely, the act of using globs and similar symbols to do pattern matching. </p>.			
link	D								*[[link (function)]], <pre>link OLDFILE,NEWFILE</pre><p>Creates a new filename linked to the old filename.  Returns true for success, false otherwise.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#link">link in perlport</span>.</p>.\\n*[[link (definition)]], <p>Used as a noun, a name in a <b>directory</b> that represents a <b>file</b>. A given file can have multiple links to it. It’s like having the same phone number listed in the phone directory under different names. As a verb, to resolve a partially <b>compiled</b> file’s unresolved symbols into a (nearly) executable image. Linking can generally be static or dynamic, which has nothing to do with static or dynamic scoping.</p>.			
syscall	D								*[[syscall (function)]], <pre>syscall NUMBER, LIST</pre><p>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call.  If unimplemented, raises an exception.  The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int.  If not, the pointer to the string value is passed.  You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string.  You can&#39;t use a string literal (or other read-only string) as an argument to <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> because Perl has to assume that any string pointer might be written through.  If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add <code class="inline"><span class="n">0</span></code>  to them to force them to look like numbers.  This emulates the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syswrite.html">syswrite</span></code> function (or vice versa):</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span> <span class="q">&#39;syscall.ph&#39;</span><span class="sc">;</span>        <span class="c"># may need to run h2ph</span></li><li>    <span class="i">$s</span> = <span class="q">&quot;hi there\\n&quot;</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span><span class="s">(</span><span class="i">&amp;SYS_write</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/fileno.html">fileno</span><span class="s">(</span><span class="w">STDOUT</span><span class="s">)</span><span class="cm">,</span> <span class="i">$s</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span> <span class="i">$s</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>Note that Perl supports passing of up to only 14 arguments to your syscall, which in practice should (usually) suffice.</p><p>Syscall returns whatever value returned by the system call it calls. If the system call fails, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> returns <code class="inline"><span class="n">-1</span></code>  and sets <code class="inline"><span class="i">$!</span></code>  (errno). Note that some system calls <i>can</i> legitimately return <code class="inline"><span class="n">-1</span></code> .  The proper way to handle such calls is to assign <code class="inline"><span class="i">$!</span>=<span class="n">0</span></code>  before the call, then check the value of <code class="inline"><span class="i">$!</span></code>  if <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> returns <code class="inline"><span class="n">-1</span></code> .</p><p>There&#39;s a problem with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall(&amp;SYS_pipe)</span></code>: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end.  You can avoid this problem by using <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/pipe.html">pipe</span></code> instead.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#syscall">syscall in perlport</span>.</p>.\\n*[[syscall (definition)]], <p>A <b>function</b> call directly to the <b>operating system</b>. Many of the important subroutines and functions you use aren’t direct system calls, but are built up in one or more layers above the system call level. In general, Perl programmers don’t need to worry about the distinction. However, if you do happen to know which Perl functions are really syscalls, you can predict which of these will set the <code class="inline"><span class="i">$!</span></code>  (<code class="inline"><span class="i">$ERRNO</span></code> ) variable on failure. Unfortunately, beginning programmers often confusingly employ the term “system call” to mean what happens when you call the Perl <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> function, which actually involves many syscalls. To avoid any confusion, we nearly always say “syscall” for something you could call indirectly via Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/syscall.html">syscall</span></code> function, and never for something you would call with Perl’s <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/system.html">system</span></code> function.</p>.			
tie	D								*[[tie (function)]], <pre>tie VARIABLE,CLASSNAME,LIST</pre><p>This function binds a variable to a package class that will provide the implementation for the variable.  VARIABLE is the name of the variable to be enchanted.  CLASSNAME is the name of a class implementing objects of correct type.  Any additional arguments are passed to the appropriate constructor method of the class (meaning <code class="inline"><span class="w">TIESCALAR</span></code> , <code class="inline"><span class="w">TIEHANDLE</span></code> , <code class="inline"><span class="w">TIEARRAY</span></code> , or <code class="inline"><span class="w">TIEHASH</span></code> ).  Typically these are arguments such as might be passed to the <code class="inline"><span class="i">dbm_open</span><span class="s">(</span><span class="s">)</span></code>  function of C.  The object returned by the constructor is also returned by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function, which would be useful if you want to access other methods in CLASSNAME.</p><p>Note that functions such as <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/keys.html">keys</span></code> and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/values.html">values</span></code> may return huge lists when used on large objects, like DBM files.  You may prefer to use the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span></code> function to iterate over such.  Example:</p><pre class="verbatim"><ol><li>    <span class="c"># print out history file offsets</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span> <span class="w">NDBM_File</span><span class="sc">;</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span><span class="s">(</span><span class="i">%HIST</span><span class="cm">,</span> <span class="q">&#39;NDBM_File&#39;</span><span class="cm">,</span> <span class="q">&#39;/usr/lib/news/history&#39;</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">0</span><span class="s">)</span><span class="sc">;</span></li><li>    while <span class="s">(</span><span class="s">(</span><span class="i">$key</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span> = <span class="l_k" href="http://perldoc.perl.org/functions/each.html">each</span> <span class="i">%HIST</span><span class="s">)</span> <span class="s">{</span></li><li>        <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="i">$key</span><span class="cm">,</span> <span class="q">&#39; = &#39;</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/unpack.html">unpack</span><span class="s">(</span><span class="q">&#39;L&#39;</span><span class="cm">,</span><span class="i">$val</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\\n&quot;</span><span class="sc">;</span></li><li>    <span class="s">}</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/untie.html">untie</span><span class="s">(</span><span class="i">%HIST</span><span class="s">)</span><span class="sc">;</span></li></ol></pre><p>A class implementing a hash should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIEHASH</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span><span class="cm">,</span> <span class="w">value</span></li><li>    <span class="w">DELETE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">CLEAR</span> <span class="w">this</span></li><li>    <span class="w">EXISTS</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">FIRSTKEY</span> <span class="w">this</span></li><li>    <span class="w">NEXTKEY</span> <span class="w">this</span><span class="cm">,</span> <span class="w">lastkey</span></li><li>    <span class="w">SCALAR</span> <span class="w">this</span></li><li>    DESTROY <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>A class implementing an ordinary array should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIEARRAY</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span><span class="cm">,</span> <span class="w">value</span></li><li>    <span class="w">FETCHSIZE</span> <span class="w">this</span></li><li>    <span class="w">STORESIZE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">count</span></li><li>    <span class="w">CLEAR</span> <span class="w">this</span></li><li>    <span class="w">PUSH</span> <span class="w">this</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">POP</span> <span class="w">this</span></li><li>    <span class="w">SHIFT</span> <span class="w">this</span></li><li>    <span class="w">UNSHIFT</span> <span class="w">this</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">SPLICE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">offset</span><span class="cm">,</span> <span class="l_k" href="http://perldoc.perl.org/functions/length.html">length</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">EXTEND</span> <span class="w">this</span><span class="cm">,</span> <span class="w">count</span></li><li>    <span class="w">DELETE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="w">EXISTS</span> <span class="w">this</span><span class="cm">,</span> <span class="w">key</span></li><li>    <span class="l_k" href="http://perldoc.perl.org/functions/DESTROY.html">DESTROY</span> <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>A class implementing a filehandle should have the following methods:</p><pre class="verbatim"><ol><li>    TIEHANDLE classname, LIST</li><li>    READ this, scalar, length, offset</li><li>    READLINE this</li><li>    GETC this</li><li>    WRITE this, scalar, length, offset</li><li>    PRINT this, LIST</li><li>    PRINTF this, format, LIST</li><li>    BINMODE this</li><li>    EOF this</li><li>    FILENO this</li><li>    SEEK this, position, whence</li><li>    TELL this</li><li>    OPEN this, mode, LIST</li><li>    CLOSE this</li><li>    DESTROY this</li><li>    UNTIE this</li></ol></pre><p>A class implementing a scalar should have the following methods:</p><pre class="verbatim"><ol><li>    <span class="w">TIESCALAR</span> <span class="w">classname</span><span class="cm">,</span> <span class="w">LIST</span></li><li>    <span class="w">FETCH</span> <span class="w">this</span><span class="cm">,</span></li><li>    <span class="w">STORE</span> <span class="w">this</span><span class="cm">,</span> <span class="w">value</span></li><li>    DESTROY <span class="w">this</span></li><li>    <span class="w">UNTIE</span> <span class="w">this</span></li></ol></pre><p>Not all methods indicated above need be implemented.  See <span href="http://perldoc.perl.org/perltie.html">perltie</span>, <span href="http://perldoc.perl.org/Tie/Hash.html">Tie::Hash</span>, <span href="http://perldoc.perl.org/Tie/Array.html">Tie::Array</span>, <span href="http://perldoc.perl.org/Tie/Scalar.html">Tie::Scalar</span>, and <span href="http://perldoc.perl.org/Tie/Handle.html">Tie::Handle</span>.</p><p>Unlike <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/dbmopen.html">dbmopen</span></code>, the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function will not <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> a module for you; you need to do that explicitly yourself.  See <span href="http://perldoc.perl.org/DB_File.html">DB_File</span> or the <i>Config</i> module for interesting <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> implementations.</p><p>For further details see <span href="http://perldoc.perl.org/perltie.html">perltie</span>, <span href="http://perldoc.perl.org/functions/tie.html#tied-VARIABLE">tied VARIABLE</span>.</p>.\\n*[[tie (definition)]], <p>The bond between a magical variable and its implementation class. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/tie.html">tie</span></code> function in Camel chapter 27, “Functions” and Camel chapter 14, “Tied Variables”.</p>.			
+	D								*[[Unary "+" operator]], Unary &quot;+&quot; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under Terms and List Operators (Leftward).).\\n*[[Binary "+" operator]], Binary &quot;+&quot; returns the sum of two numbers..			
package	D								*[[package (function)]], <pre>package NAMESPACE<br>package NAMESPACE VERSION<br>package NAMESPACE BLOCK<br>package NAMESPACE VERSION BLOCK</pre><p>Declares the BLOCK or the rest of the compilation unit as being in the given namespace.  The scope of the package declaration is either the supplied code BLOCK or, in the absence of a BLOCK, from the declaration itself through the end of current scope (the enclosing block, file, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/eval.html">eval</span></code>).  That is, the forms without a BLOCK are operative through the end of the current scope, just like the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, and <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code> operators. All unqualified dynamic identifiers in this scope will be in the given namespace, except where overridden by another <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/package.html">package</span></code> declaration or when they&#39;re one of the special identifiers that qualify into <code class="inline"><span class="w">main::</span></code> , like <code class="inline"><span class="w">STDOUT</span></code> , <code class="inline"><span class="w">ARGV</span></code> , <code class="inline"><span class="w">ENV</span></code> , and the punctuation variables.</p><p>A package statement affects dynamic variables only, including those you&#39;ve used <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/local.html">local</span></code> on, but <i>not</i> lexically-scoped variables, which are created with <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/my.html">my</span></code>, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/state.html">state</span></code>, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/our.html">our</span></code>.  Typically it would be the first  declaration in a file included by <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/require.html">require</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code>.  You can switch into a package in more than one place, since this only determines which default  symbol table the compiler uses for the rest of that block.  You can refer to identifiers in other packages than the current one by prefixing the identifier with the package name and a double colon, as in <code class="inline"><span class="i">$SomePack::var</span></code>  or <code class="inline"><span class="w">ThatPack::INPUT_HANDLE</span></code> .  If package name is omitted, the <code class="inline"><span class="w">main</span></code>  package as assumed.  That is, <code class="inline"><span class="i">$::sail</span></code>  is equivalent to <code class="inline"><span class="i">$main::sail</span></code>  (as well as to <code class="inline"><span class="i">$main&#39;sail</span></code> , still seen in ancient code, mostly from Perl 4).</p><p>If VERSION is provided, <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/package.html">package</span></code> sets the <code class="inline"><span class="i">$VERSION</span></code>  variable in the given namespace to a <span href="http://perldoc.perl.org/version.html">version</span> object with the VERSION provided.  VERSION must be a &quot;strict&quot; style version number as defined by the <span href="http://perldoc.perl.org/version.html">version</span> module: a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading &#39;v&#39; character and at least three components.  You should set <code class="inline"><span class="i">$VERSION</span></code>  only once per package.</p><p>See <span href="http://perldoc.perl.org/perlmod.html#Packages">Packages in perlmod</span> for more information about packages, modules, and classes.  See <span href="http://perldoc.perl.org/perlsub.html">perlsub</span> for other scoping issues.</p>.\\n*[[package (definition)]], <p>A <b>namespace</b> for global <b>variables</b>, <b>subroutines</b>, and the like, such that they can be kept separate from like-named <b>symbols</b> in other namespaces. In a sense, only the package is global, since the symbols in the package’s symbol table are only accessible from code <b>compiled</b> outside the package by naming the package. But in another sense, all package symbols are also globals—they’re just well-organized globals.</p>.			
import	D								*[[import (function)]], <pre>import LIST</pre><p>There is no builtin <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> function.  It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module.  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> function calls the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/import.html">import</span></code> method for the package used.  See also <span href="http://perldoc.perl.org/functions/use.html">use</span>, <span href="http://perldoc.perl.org/perlmod.html">perlmod</span>, and <span href="http://perldoc.perl.org/Exporter.html">Exporter</span>.</p>.\\n*[[import (definition)]], <p>To gain access to symbols that are exported from another module. See <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/use.html">use</span></code> in Camel chapter 27, “Functions”.</p>.			
JAPH	D								*[[What is a JAPH?]], <p>(contributed by brian d foy)</p><p>JAPH stands for &quot;Just another Perl hacker,&quot;, which Randal Schwartz used to sign email and usenet messages starting in the late 1980s. He previously used the phrase with many subjects (&quot;Just another x hacker,&quot;), so to distinguish his JAPH, he started to write them as Perl programs:</p><pre class="verbatim"><ol><li>    <span class="l_k" href="http://perldoc.perl.org/functions/print.html">print</span> <span class="q">&quot;Just another Perl hacker,&quot;</span><span class="sc">;</span></li></ol></pre><p>Other people picked up on this and started to write clever or obfuscated programs to produce the same output, spinning things quickly out of control while still providing hours of amusement for their creators and readers.</p><p>CPAN has several JAPH programs at <span href="http://www.cpan.org/misc/japh">http://www.cpan.org/misc/japh</span>.</p>.\\n*[[JAPH (definition)]], <p>“Just Another Perl Hacker”, a clever but cryptic bit of Perl code that, when executed, evaluates to that string. Often used to illustrate a particular Perl feature, and something of an ongoing Obfuscated Perl Contest seen in USENET signatures.</p>.			
- operator	D								*[[Unary "-" operator]], Unary &quot;-&quot; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that - bareword is equivalent to the string &quot;-bareword&quot;. If, however, the string begins with a non-alphabetic character (excluding &quot;+&quot; or &quot;-&quot; ), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning Argument &quot;the string&quot; isn&#39;t numeric in negation (-) at .....\\n*[[Binary "-" operator]], Binary &quot;-&quot; returns the difference of two numbers..			
fork	D								*[[fork (function)]], <pre>fork</pre><p>Does a fork(2) system call to create a new process running the same program at the same point.  It returns the child pid to the parent process, <code class="inline"><span class="n">0</span></code>  to the child process, or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code> if the fork is unsuccessful.  File descriptors (and sometimes locks on those descriptors) are shared, while everything else is copied.  On most systems supporting fork(), great care has gone into making it extremely efficient (for example, using copy-on-write technology on data pages), making it the dominant paradigm for multitasking over the last few decades.</p><p>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see <span href="http://perldoc.perl.org/perlport.html">perlport</span>).  To be safe, you may need to set <code class="inline"><span class="i">$|</span></code>  ($AUTOFLUSH in English) or call the <code class="inline"><span class="i">autoflush</span><span class="s">(</span><span class="s">)</span></code>  method of <code class="inline"><span class="w">IO::Handle</span></code>  on any open handles to avoid duplicate output.</p><p>If you <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/fork.html">fork</span></code> without ever waiting on your children, you will accumulate zombies.  On some systems, you can avoid this by setting <code class="inline"><span class="i">$SIG</span>{<span class="w">CHLD</span>}</code>  to <code class="inline"><span class="q">&quot;IGNORE&quot;</span></code> .  See also <span href="http://perldoc.perl.org/perlipc.html">perlipc</span> for more examples of forking and reaping moribund children.</p><p>Note that if your forked child inherits system file descriptors like STDIN and STDOUT that are actually connected by a pipe or socket, even if you exit, then the remote server (such as, say, a CGI script or a backgrounded job launched from a remote shell) won&#39;t think you&#39;re done. You should reopen those to <i>/dev/null</i> if it&#39;s any issue.</p><p>On some platforms such as Windows, where the fork() system call is not available, Perl can be built to emulate fork() in the Perl interpreter. The emulation is designed, at the level of the Perl program, to be as compatible as possible with the &quot;Unix&quot; fork(). However it has limitations that have to be considered in code intended to be portable. See <span href="http://perldoc.perl.org/perlfork.html">perlfork</span> for more details.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#fork">fork in perlport</span>.</p>.\\n*[[fork (definition)]], <p>To create a child <b>process</b> identical to the parent process at its moment of conception, at least until it gets ideas of its own. A thread with protected memory.</p>.			
cmp	D								*[[cmp (function)]], <pre>cmp</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "cmp" operator]], Binary &quot;cmp&quot; returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument..			
bless	D								*[[bless (function)]], <pre>bless REF,CLASSNAME<br>bless REF</pre><p>This function tells the thingy referenced by REF that it is now an object in the CLASSNAME package.  If CLASSNAME is omitted, the current package is used.  Because a <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span></code> is often the last thing in a constructor, it returns the reference for convenience.  Always use the two-argument version if a derived class might inherit the function doing the blessing. See <span href="http://perldoc.perl.org/perlobj.html">perlobj</span> for more about the blessing (and blessings) of objects.</p><p>Consider always blessing objects in CLASSNAMEs that are mixed case. Namespaces with all lowercase names are considered reserved for Perl pragmata.  Builtin types have all uppercase names.  To prevent confusion, you may wish to avoid such package names as well.  Make sure that CLASSNAME is a true value.</p><p>See <span href="http://perldoc.perl.org/perlmod.html#Perl-Modules">Perl Modules in perlmod</span>.</p>.\\n*[[bless (definition)]], <p>In corporate life, to grant official approval to a thing, as in, “The VP of Engineering has blessed our WebCruncher project.” Similarly, in Perl, to grant official approval to a <b>referent</b> so that it can function as an <b>object</b>, such as a WebCruncher object. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/bless.html">bless</span></code> function in Camel chapter 27, “Functions”.</p>.			
difference between and	D								*[[What is the difference between and?]], <p>Because UTF-8 is one of Perl&#39;s internal formats, you can often just skip the encoding or decoding step, and manipulate the UTF8 flag directly.</p><p>Instead of <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code> , you can simply use <code class="inline"><span class="j">:</span><span class="w">utf8</span></code> , which skips the encoding step if the data was already represented as UTF8 internally. This is widely accepted as good behavior when you&#39;re writing, but it can be dangerous when reading, because it causes internal inconsistency when you have invalid byte sequences. Using <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  for input can sometimes result in security breaches, so please use <code class="inline"><span class="j">:</span><span class="i">encoding</span><span class="s">(</span><span class="w">UTF</span>-<span class="n">8</span><span class="s">)</span></code>  instead.</p><p>Instead of <code class="inline"><span class="w">decode</span></code>  and <code class="inline"><span class="w">encode</span></code> , you could use <code class="inline"><span class="w">_utf8_on</span></code>  and <code class="inline"><span class="w">_utf8_off</span></code> , but this is considered bad style. Especially <code class="inline"><span class="w">_utf8_on</span></code>  can be dangerous, for the same reason that <code class="inline"><span class="j">:</span><span class="w">utf8</span></code>  can.</p><p>There are some shortcuts for oneliners; see <span href="http://perldoc.perl.org/perlrun.html#-C-%5bnumber%2flist%5d">-C</span> in <span href="http://perldoc.perl.org/perlrun.html">perlrun</span>.</p>.\\n*[[What's the difference between and?]], <p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is the official standard. <code class="inline"><span class="w">utf8</span></code>  is Perl&#39;s way of being liberal in what it accepts. If you have to communicate with things that aren&#39;t so liberal, you may want to consider using <code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code> . If you have to communicate with things that are too liberal, you may have to use <code class="inline"><span class="w">utf8</span></code> . The full explanation is in <span href="http://perldoc.perl.org/Encode.html">Encode</span>.</p><p><code class="inline"><span class="w">UTF</span>-<span class="n">8</span></code>  is internally known as <code class="inline"><span class="w">utf</span>-<span class="n">8</span>-<span class="w">strict</span></code> . The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</p><p>For example, utf8 can be used for code points that don&#39;t exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see <span href="http://perldoc.perl.org/Encode.html#Handling-Malformed-Data">Handling Malformed Data in Encode</span> for more ways of dealing with this.)</p><p>Okay, if you insist: the &quot;internal format&quot; is utf8, not UTF-8. (When it&#39;s not some other encoding.)</p>.			
xor	D								*[[xor (function)]], <pre>xor</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "xor" operator]], Binary &quot;xor&quot; returns the exclusive-OR of the two surrounding expressions. It cannot short-circuit (of course)..			
format	D								*[[format (function)]], <pre>format</pre><p>Declare a picture format for use by the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/write.html">write</span></code> function.  For example:</p><pre class="verbatim"><ol><li>    format Something =</li><li>        Test: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||| @&gt;&gt;&gt;&gt;&gt;</li><li>              $str,     $%,    &#39;$&#39; . int($num)</li><li>    .</li><li></li><li>    $str = &quot;widget&quot;;</li><li>    $num = $cost/$quantity;</li><li>    $~ = &#39;Something&#39;;</li><li>    write;</li></ol></pre><p>See <span href="http://perldoc.perl.org/perlform.html">perlform</span> for many details and examples.</p>.\\n*[[format (definition)]], <p>A specification of how many spaces and digits and things to put somewhere so that whatever you’re printing comes out nice and pretty.</p>.			
gt	D								*[[gt (function)]], <pre>gt</pre><p>These operators are documented in <span href="http://perldoc.perl.org/perlop.html">perlop</span>.</p>.\\n*[[Binary "gt" operator]], Binary &quot;gt&quot; returns true if the left argument is stringwise greater than the right argument..			
CPAN	D								*[[CPAN (definition)]], <p>The Comprehensive Perl Archive Network. (See the Camel Preface and Camel chapter 19, “CPAN” for details.)</p>.\\n*[[CPAN (module)]], <p>CPAN - query, download and build perl modules from CPAN sites</p> <p>Interactive mode:</p><pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MCPAN</span> -e <span class="w">shell</span></li></ol></pre><p>--or--</p><pre class="verbatim"><ol><li>  <span class="w">cpan</span></li></ol></pre><p>Basic commands:</p><pre class="verbatim"><ol><li>  <span class="c"># Modules:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">Acme::Meta</span>                       <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span><span class="w">-&gt;install</span><span class="s">(</span><span class="q">&quot;Acme::Meta&quot;</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># in perl</span></li><li></li><li>  <span class="c"># Distributions:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">NWCLARK</span>/<span class="w">Acme</span>-<span class="w">Meta</span>-<span class="n">0.02</span>.<span class="w">tar</span>.<span class="w">gz</span>    <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span>-&gt;</li><li>    <span class="w">install</span><span class="s">(</span><span class="q">&quot;NWCLARK/Acme-Meta-0.02.tar.gz&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># in perl</span></li><li></li><li>  <span class="c"># module objects:</span></li><li></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># same thing</span></li><li></li><li>  <span class="c"># distribution objects:</span></li><li></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="i">-&gt;distribution</span><span class="sc">;</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>         <span class="c"># same thing</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Distribution&quot;</span><span class="cm">,</span></li><li>                            <span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># same thing</span></li></ol></pre>.\\n*[[CPAN (module)]], <p>CPAN - query, download and build perl modules from CPAN sites</p> <p>Interactive mode:</p><pre class="verbatim"><ol><li>  <span class="w">perl</span> -<span class="w">MCPAN</span> -e <span class="w">shell</span></li></ol></pre><p>--or--</p><pre class="verbatim"><ol><li>  <span class="w">cpan</span></li></ol></pre><p>Basic commands:</p><pre class="verbatim"><ol><li>  <span class="c"># Modules:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">Acme::Meta</span>                       <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span><span class="w">-&gt;install</span><span class="s">(</span><span class="q">&quot;Acme::Meta&quot;</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># in perl</span></li><li></li><li>  <span class="c"># Distributions:</span></li><li></li><li>  <span class="w">cpan</span>&gt; <span class="w">install</span> <span class="w">NWCLARK</span>/<span class="w">Acme</span>-<span class="w">Meta</span>-<span class="n">0.02</span>.<span class="w">tar</span>.<span class="w">gz</span>    <span class="c"># in the shell</span></li><li></li><li>  <span class="w">CPAN::Shell</span>-&gt;</li><li>    <span class="w">install</span><span class="s">(</span><span class="q">&quot;NWCLARK/Acme-Meta-0.02.tar.gz&quot;</span><span class="s">)</span><span class="sc">;</span>    <span class="c"># in perl</span></li><li></li><li>  <span class="c"># module objects:</span></li><li></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span></li><li>  <span class="i">$mo</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="sc">;</span>      <span class="c"># same thing</span></li><li></li><li>  <span class="c"># distribution objects:</span></li><li></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Module&quot;</span><span class="cm">,</span><span class="i">$mod</span><span class="s">)</span><span class="i">-&gt;distribution</span><span class="sc">;</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expandany</span><span class="s">(</span><span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>         <span class="c"># same thing</span></li><li>  <span class="i">$do</span> = <span class="w">CPAN::Shell</span><span class="w">-&gt;expand</span><span class="s">(</span><span class="q">&quot;Distribution&quot;</span><span class="cm">,</span></li><li>                            <span class="i">$distro</span><span class="s">)</span><span class="sc">;</span>            <span class="c"># same thing</span></li></ol></pre>.			
umask	D								*[[umask (function)]], <pre>umask EXPR<br>umask</pre><p>Sets the umask for the process to EXPR and returns the previous value. If EXPR is omitted, merely returns the current umask.</p><p>The Unix permission <code class="inline"><span class="w">rwxr</span>-x---</code>  is represented as three sets of three bits, or three octal digits: <code class="inline"><span class="n">0750</span></code>  (the leading 0 indicates octal and isn&#39;t one of the digits).  The <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> value is such a number representing disabled permissions bits.  The permission (or &quot;mode&quot;) values you pass <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/mkdir.html">mkdir</span></code> or <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> are modified by your umask, so even if you tell <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> to create a file with permissions <code class="inline"><span class="n">0777</span></code> , if your umask is <code class="inline"><span class="n">0022</span></code> , then the file will actually be created with permissions <code class="inline"><span class="n">0755</span></code> .  If your <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> were <code class="inline"><span class="n">0027</span></code>  (group can&#39;t write; others can&#39;t read, write, or execute), then passing <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code> <code class="inline"><span class="n">0666</span></code>  would create a file with mode <code class="inline"><span class="n">0640</span></code>  (because  <code class="inline"><span class="n">0666</span> &amp;~ <span class="n">027</span></code>  is <code class="inline"><span class="n">0640</span></code> ).</p><p>Here&#39;s some advice: supply a creation mode of <code class="inline"><span class="n">0666</span></code>  for regular files (in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/sysopen.html">sysopen</span></code>) and one of <code class="inline"><span class="n">0777</span></code>  for directories (in <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/mkdir.html">mkdir</span></code>) and executable files.  This gives users the freedom of choice: if they want protected files, they might choose process umasks of <code class="inline"><span class="n">022</span></code> , <code class="inline"><span class="n">027</span></code> , or even the particularly antisocial mask of <code class="inline"><span class="n">077</span></code> . Programs should rarely if ever make policy decisions better left to the user.  The exception to this is when writing files that should be kept private: mail files, web browser cookies, <i>.rhosts</i> files, and so on.</p><p>If umask(2) is not implemented on your system and you are trying to restrict access for <i>yourself</i> (i.e., <code class="inline"><span class="s">(</span><span class="w">EXPR</span> <span class="i">&amp; 0700</span><span class="s">)</span> &gt; <span class="n">0</span></code> ),  raises an exception.  If umask(2) is not implemented and you are not trying to restrict access for yourself, returns <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/undef.html">undef</span></code>.</p><p>Remember that a umask is a number, usually given in octal; it is <i>not</i> a string of octal digits.  See also <span href="http://perldoc.perl.org/functions/oct.html">oct</span>, if all you have is a string.</p><p>Portability issues: <span href="http://perldoc.perl.org/perlport.html#umask">umask in perlport</span>.</p>.\\n*[[umask (definition)]], <p>A mask of those <b>permission bits</b> that should be forced off when creating files or directories, in order to establish a policy of whom you’ll ordinarily deny access to. See the <code class="inline"><span class="l_k" href="http://perldoc.perl.org/functions/umask.html">umask</span></code> function.</p>.			
