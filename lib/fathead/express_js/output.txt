express	A										<section class="prog__container"><p>Creates an Express application. The express() function is a top-level function exported by the express module.</p><pre><code>var express = require('express');\nvar app = express();\n</code></pre></section>	http://expressjs.com/en/api.html#express
app	A										<section class="prog__container"><p>The app object conventionally denotes the Express application.Create it by calling the top-level express() function exported by the Express module:</p><pre><code>var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('hello world');\n});\n\napp.listen(3000);\n</code></pre></section>	http://expressjs.com/en/api.html#app
req	A										<section class="prog__container"><p>The req object represents the HTTP request and has properties for therequest query string, parameters, body, HTTP headers, and so on. In this documentation and by convention,the object is always referred to as req (and the HTTP response is res) but its actual name is determinedby the parameters to the callback function in which you’re working.</p><pre><code>app.get('/user/:id', function(req, res) {\n  res.send('user ' + req.params.id);\n});\n</code></pre></section>	http://expressjs.com/en/api.html#req
res	A										<section class="prog__container"><p>The res object represents the HTTP response that an Express app sends when it gets an HTTP request.</p><pre><code>app.get('/user/:id', function(req, res){\n  res.send('user ' + req.params.id);\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res
router	A										<section class="prog__container"><p>A router object is an isolated instance of middleware and routes. You can think of itas a “mini-application,” capable only of performing middleware and routingfunctions. Every Express application has a built-in app router.</p><pre><code>// invoked for any requests passed to this router\nrouter.use(function(req, res, next) {\n  // .. some logic here .. like any other middleware\n  next();\n});\n\n// will handle any request that ends in /events\n// depends on where the router is "use()'d"\nrouter.get('/events', function(req, res, next) {\n  // ..\n});\n</code></pre></section>	http://expressjs.com/en/api.html#router
express.static	A										<section class="prog__container"><p>This is the only built-in middleware function in Express.It serves static files and is based on serve-static.</p><pre><code>fn(res, path, stat)\n</code></pre></section>	http://expressjs.com/en/api.html#express.static
express.router	A										<section class="prog__container"><p>Creates a new router object.</p><pre><code>var router = express.Router([options]);\n</code></pre></section>	http://expressjs.com/en/api.html#express.router
app.locals	A										<section class="prog__container"><p>The app.locals object has properties that are local variables within the application.</p><pre><code>app.locals.title\n// => 'My App'\n\napp.locals.email\n// => 'me@myapp.com'\n</code></pre></section>	http://expressjs.com/en/api.html#app.locals
app.mountpath	A										<section class="prog__container"><p>The app.mountpath property contains one or more path patterns on which a sub-app was mounted.</p><pre><code>var express = require('express');\n\nvar app = express(); // the main app\nvar admin = express(); // the sub app\n\nadmin.get('/', function (req, res) {\n  console.log(admin.mountpath); // /admin\n  res.send('Admin Homepage');\n});\n\napp.use('/admin', admin); // mount the sub app\n</code></pre></section>	http://expressjs.com/en/api.html#app.mountpath
app.onmount	A										<section class="prog__container"><p>The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.</p><pre><code>var admin = express();\n\nadmin.on('mount', function (parent) {\n  console.log('Admin Mounted');\n  console.log(parent); // refers to the parent app\n});\n\nadmin.get('/', function (req, res) {\n  res.send('Admin Homepage');\n});\n\napp.use('/admin', admin);\n</code></pre></section>	http://expressjs.com/en/api.html#app.onmount
app.all	A										<section class="prog__container"><p>This method is like the standard app.METHOD() methods,except it matches all HTTP verbs.</p><pre><code>app.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...')\n  next() // pass control to the next handler\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.all
app.delete.method	A										<section class="prog__container"><p>Routes HTTP DELETE requests to the specified path with the specified callback functions.For more information, see the routing guide.</p><pre><code>app.delete('/', function (req, res) {\n  res.send('DELETE request to homepage');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.delete.method
app.disable	A										<section class="prog__container"><p>Sets the Boolean setting name to false, where name is one of the properties from the app settings table.Calling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo').</p><pre><code>app.disable('trust proxy');\napp.get('trust proxy');\n// => false\n</code></pre></section>	http://expressjs.com/en/api.html#app.disable
app.disabled	A										<section class="prog__container"><p>Returns true if the Boolean setting name is disabled (false), where name is one of the properties fromthe app settings table.</p><pre><code>app.disabled('trust proxy');\n// => true\n\napp.enable('trust proxy');\napp.disabled('trust proxy');\n// => false\n</code></pre></section>	http://expressjs.com/en/api.html#app.disabled
app.enable	A										<section class="prog__container"><p>Sets the Boolean setting name to true, where name is one of the properties from the app settings table.Calling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo').</p><pre><code>app.enable('trust proxy');\napp.get('trust proxy');\n// => true\n</code></pre></section>	http://expressjs.com/en/api.html#app.enable
app.enabled	A										<section class="prog__container"><p>Returns true if the setting name is enabled (true), where name is one of theproperties from the app settings table.</p><pre><code>app.enabled('trust proxy');\n// => false\n\napp.enable('trust proxy');\napp.enabled('trust proxy');\n// => true\n</code></pre></section>	http://expressjs.com/en/api.html#app.enabled
app.engine	A										<section class="prog__container"><p>Registers the given template engine callback as ext.</p><pre><code>app.engine('pug', require('pug').__express);\n</code></pre></section>	http://expressjs.com/en/api.html#app.engine
app.get	A										<section class="prog__container"><p>Returns the value of name app setting, where name is one of strings in theapp settings table. For example:</p><pre><code>app.get('title');\n// => undefined\n\napp.set('title', 'My Site');\napp.get('title');\n// => "My Site"\n</code></pre></section>	http://expressjs.com/en/api.html#app.get
app.get.method	A										<section class="prog__container"><p>Routes HTTP GET requests to the specified path with the specified callback functions.</p><pre><code>app.get('/', function (req, res) {\n  res.send('GET request to homepage');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.get.method
app.listen	A										<section class="prog__container"><p>Starts a UNIX socket and listens for connections on the given path.This method is identical to Node’s http.Server.listen().</p><pre><code>var express = require('express');\nvar app = express();\napp.listen('/tmp/sock');\n</code></pre></section>	http://expressjs.com/en/api.html#app.listen
app.METHOD	A										<section class="prog__container"><p>Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET,PUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(),app.post(), app.put(), and so on. See Routing methods below for the complete list.</p><pre><code>app.param('user', function(req, res, next, id) {\n\n  // try to get the user details from the User model and attach it to the request object\n  User.find(id, function(err, user) {\n    if (err) {\n      next(err);\n    } else if (user) {\n      req.user = user;\n      next();\n    } else {\n      next(new Error('failed to load user'));\n    }\n  });\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.METHOD
app.param	A										<section class="prog__container"><p>Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order.</p><pre><code>app.param('user', function(req, res, next, id) {\n\n  // try to get the user details from the User model and attach it to the request object\n  User.find(id, function(err, user) {\n    if (err) {\n      next(err);\n    } else if (user) {\n      req.user = user;\n      next();\n    } else {\n      next(new Error('failed to load user'));\n    }\n  });\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.param
app.path	A										<section class="prog__container"><p>Returns the canonical path of the app, a string.</p><pre><code>var app = express()\n  , blog = express()\n  , blogAdmin = express();\n\napp.use('/blog', blog);\nblog.use('/admin', blogAdmin);\n\nconsole.log(app.path()); // ''\nconsole.log(blog.path()); // '/blog'\nconsole.log(blogAdmin.path()); // '/blog/admin'\n</code></pre></section>	http://expressjs.com/en/api.html#app.path
app.post.method	A										<section class="prog__container"><p>Routes HTTP POST requests to the specified path with the specified callback functions.For more information, see the routing guide.</p><pre><code>app.post('/', function (req, res) {\n  res.send('POST request to homepage');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.post.method
app.put.method	A										<section class="prog__container"><p>Routes HTTP PUT requests to the specified path with the specified callback functions.</p><pre><code>app.put('/', function (req, res) {\n  res.send('PUT request to homepage');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.put.method
app.render	A										<section class="prog__container"><p>Returns the rendered HTML of a view via the callback function. It accepts an optional parameterthat is an object containing local variables for the view. It is like res.render(),except it cannot send the rendered view to the client on its own.</p><pre><code>app.render('email', function(err, html){\n  // ...\n});\n\napp.render('email', { name: 'Tobi' }, function(err, html){\n  // ...\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.render
app.route	A										<section class="prog__container"><p>Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware.Use app.route() to avoid duplicate route names (and thus typo errors).</p><pre><code>var app = express();\n\napp.route('/events')\n.all(function(req, res, next) {\n  // runs for all HTTP verbs first\n  // think of it as route specific middleware!\n})\n.get(function(req, res, next) {\n  res.json(...);\n})\n.post(function(req, res, next) {\n  // maybe add a new event...\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.route
app.set	A										<section class="prog__container"><p>Assigns setting name to value, where name is one of the properties fromthe app settings table.</p><pre><code>app.set('title', 'My Site');\napp.get('title'); // "My Site"\n</code></pre></section>	http://expressjs.com/en/api.html#app.set
app.use	A										<section class="prog__container"><p>Mounts the specified middleware function or functionsat the specified path:the middleware function is executed when the base of the requested path matches path.</p><pre><code>app.use(function (req, res, next) {\n  console.log('Time: %d', Date.now());\n  next();\n});\n</code></pre></section>	http://expressjs.com/en/api.html#app.use
req.app	A										<section class="prog__container"><p>This property holds a reference to the instance of the Express application that is using the middleware.</p><pre><code>//index.js\napp.get('/viewdirectory', require('./mymiddleware.js'))\n</code></pre></section>	http://expressjs.com/en/api.html#req.app
req.baseUrl	A										<section class="prog__container"><p>The URL path on which a router instance was mounted.</p><pre><code>var greet = express.Router();\n\ngreet.get('/jp', function (req, res) {\n  console.log(req.baseUrl); // /greet\n  res.send('Konichiwa!');\n});\n\napp.use('/greet', greet); // load the router on '/greet'\n</code></pre></section>	http://expressjs.com/en/api.html#req.baseUrl
req.body	A										<section class="prog__container"><p>Contains key-value pairs of data submitted in the request body.By default, it is undefined, and is populated when you use body-parsing middleware suchas body-parser and multer.</p><pre><code>var app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer'); // v1.0.5\nvar upload = multer(); // for parsing multipart/form-data\n\napp.use(bodyParser.json()); // for parsing application/json\napp.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', upload.array(), function (req, res, next) {\n  console.log(req.body);\n  res.json(req.body);\n});\n</code></pre></section>	http://expressjs.com/en/api.html#req.body
req.cookies	A										<section class="prog__container"><p>When using cookie-parser middleware, this property is an object thatcontains cookies sent by the request. If the request contains no cookies, it defaults to {}.</p><pre><code>// Cookie: name=tj\nreq.cookies.name\n// => "tj"\n</code></pre></section>	http://expressjs.com/en/api.html#req.cookies
req.fresh	A										<section class="prog__container"><p>Indicates whether the request is “fresh.” It is the opposite of req.stale.</p><pre><code>req.fresh\n// => true\n</code></pre></section>	http://expressjs.com/en/api.html#req.fresh
req.hostname	A										<section class="prog__container"><p>Contains the hostname derived from the Host HTTP header.</p><pre><code>// Host: "example.com:3000"\nreq.hostname\n// => "example.com"\n</code></pre></section>	http://expressjs.com/en/api.html#req.hostname
req.ip	A										<section class="prog__container"><p>Contains the remote IP address of the request.</p><pre><code>req.ip\n// => "127.0.0.1"\n</code></pre></section>	http://expressjs.com/en/api.html#req.ip
req.ips	A										<section class="prog__container"><p>When the trust proxy setting does not evaluate to false,this property contains an array of IP addressesspecified in the X-Forwarded-For request header. Otherwise, it contains anempty array. This header can be set by the client or by the proxy.</p><pre><code>// GET /search?q=something\nreq.originalUrl\n// => "/search?q=something"\n</code></pre></section>	http://expressjs.com/en/api.html#req.ips
req.method	A										<section class="prog__container"><p>Contains a string corresponding to the HTTP method of the request:GET, POST, PUT, and so on.</p><pre><code>// GET /search?q=something\nreq.originalUrl\n// => "/search?q=something"\n</code></pre></section>	http://expressjs.com/en/api.html#req.method
req.originalUrl	A										<section class="prog__container"><p>Contains a string corresponding to the HTTP method of the request:GET, POST, PUT, and so on.</p><pre><code>// GET /search?q=something\nreq.originalUrl\n// => "/search?q=something"\n</code></pre></section>	http://expressjs.com/en/api.html#req.originalUrl
req.params	A										<section class="prog__container"><p>This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}.</p><pre><code>// GET /user/tj\nreq.params.name\n// => "tj"\n</code></pre></section>	http://expressjs.com/en/api.html#req.params
req.path	A										<section class="prog__container"><p>Contains the path part of the request URL.</p><pre><code>// example.com/users?sort=desc\nreq.path\n// => "/users"\n</code></pre></section>	http://expressjs.com/en/api.html#req.path
req.protocol	A										<section class="prog__container"><p>Contains the request protocol string: either http or (for TLS requests) https.</p><pre><code>req.protocol\n// => "http"\n</code></pre></section>	http://expressjs.com/en/api.html#req.protocol
req.query	A										<section class="prog__container"><p>This property is an object containing a property for each query string parameter in the route.If there is no query string, it is the empty object, {}.</p><pre><code>// GET /search?q=tobi+ferret\nreq.query.q\n// => "tobi ferret"\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nreq.query.order\n// => "desc"\n\nreq.query.shoe.color\n// => "blue"\n\nreq.query.shoe.type\n// => "converse"\n</code></pre></section>	http://expressjs.com/en/api.html#req.query
req.route	A										<section class="prog__container"><p>Contains the currently-matched route, a string. For example:</p><pre><code>app.get('/user/:id?', function userIdHandler(req, res) {\n  console.log(req.route);\n  res.send('GET');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#req.route
req.secure	A										<section class="prog__container"><p>A Boolean property that is true if a TLS connection is established. Equivalent to:</p><pre><code>'https' == req.protocol;\n</code></pre></section>	http://expressjs.com/en/api.html#req.secure
req.signedCookies	A										<section class="prog__container"><p>When using cookie-parser middleware, this propertycontains signed cookies sent by the request, unsigned and ready for use. Signed cookies residein a different object to show developer intent; otherwise, a malicious attack could be placed onreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”or encrypted; but simply prevents tampering (because the secret used to sign is private).</p><pre><code>// Cookie: user=tobi.CP7AWaXDfAKIRfH49dQzKJx7sKzzSoPq7/AcBBRVwlI3\nreq.signedCookies.user\n// => "tobi"\n</code></pre></section>	http://expressjs.com/en/api.html#req.signedCookies
req.stale	A										<section class="prog__container"><p>Indicates whether the request is “stale,” and is the opposite of req.fresh.For more information, see req.fresh.</p><pre><code>req.stale\n// => true\n</code></pre></section>	http://expressjs.com/en/api.html#req.stale
req.subdomains	A										<section class="prog__container"><p>An array of subdomains in the domain name of the request.</p><pre><code>// Host: "tobi.ferrets.example.com"\nreq.subdomains\n// => ["ferrets", "tobi"]\n</code></pre></section>	http://expressjs.com/en/api.html#req.subdomains
req.xhr	A										<section class="prog__container"><p>A Boolean property that is true if the request’s X-Requested-With header field is“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery.</p><pre><code>req.xhr\n// => true\n</code></pre></section>	http://expressjs.com/en/api.html#req.xhr
req.accepts	A										<section class="prog__container"><p>Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.The method returns the best match, or if none of the specified content types is acceptable, returnsfalse (in which case, the application should respond with 406 "Not Acceptable").</p><pre><code>// Accept: text/html\nreq.accepts('html');\n// => "html"\n\n// Accept: text/*, application/json\nreq.accepts('html');\n// => "html"\nreq.accepts('text/html');\n// => "text/html"\nreq.accepts(['json', 'text']);\n// => "json"\nreq.accepts('application/json');\n// => "application/json"\n\n// Accept: text/*, application/json\nreq.accepts('image/png');\nreq.accepts('png');\n// => undefined\n\n// Accept: text/*;q=.5, application/json\nreq.accepts(['html', 'json']);\n// => "json"\n</code></pre></section>	http://expressjs.com/en/api.html#req.accepts
req.acceptsCharsets	A										<section class="prog__container"><p>Returns the first accepted charset of the specified character sets,based on the request’s Accept-Charset HTTP header field.If none of the specified charsets is accepted, returns false.</p><pre><code>req.get('Content-Type');\n// => "text/plain"\n\nreq.get('content-type');\n// => "text/plain"\n\nreq.get('Something');\n// => undefined\n</code></pre></section>	http://expressjs.com/en/api.html#req.acceptsCharsets
req.acceptsEncodings	A										<section class="prog__container"><p>Returns the first accepted encoding of the specified encodings,based on the request’s Accept-Encoding HTTP header field.If none of the specified encodings is accepted, returns false.</p><pre><code>req.get('Content-Type');\n// => "text/plain"\n\nreq.get('content-type');\n// => "text/plain"\n\nreq.get('Something');\n// => undefined\n</code></pre></section>	http://expressjs.com/en/api.html#req.acceptsEncodings
req.acceptsLanguages	A										<section class="prog__container"><p>Returns the first accepted language of the specified languages,based on the request’s Accept-Language HTTP header field.If none of the specified languages is accepted, returns false.</p><pre><code>req.get('Content-Type');\n// => "text/plain"\n\nreq.get('content-type');\n// => "text/plain"\n\nreq.get('Something');\n// => undefined\n</code></pre></section>	http://expressjs.com/en/api.html#req.acceptsLanguages
req.get	A										<section class="prog__container"><p>Returns the specified HTTP request header field (case-insensitive match).The Referrer and Referer fields are interchangeable.</p><pre><code>req.get('Content-Type');\n// => "text/plain"\n\nreq.get('content-type');\n// => "text/plain"\n\nreq.get('Something');\n// => undefined\n</code></pre></section>	http://expressjs.com/en/api.html#req.get
req.is	A										<section class="prog__container"><p>Returns true if the incoming request’s “Content-Type” HTTP header fieldmatches the MIME type specified by the type parameter.Returns false otherwise.</p><pre><code>// With Content-Type: text/html; charset=utf-8\nreq.is('html');\nreq.is('text/html');\nreq.is('text/*');\n// => true\n\n// When Content-Type is application/json\nreq.is('json');\nreq.is('application/json');\nreq.is('application/*');\n// => true\n\nreq.is('html');\n// => false\n</code></pre></section>	http://expressjs.com/en/api.html#req.is
req.param	A										<section class="prog__container"><p>Returns true if the incoming request’s “Content-Type” HTTP header fieldmatches the MIME type specified by the type parameter.Returns false otherwise.</p><pre><code>// ?name=tobi\nreq.param('name')\n// => "tobi"\n\n// POST name=tobi\nreq.param('name')\n// => "tobi"\n\n// /user/tobi for /user/:name\nreq.param('name')\n// => "tobi"\n</code></pre></section>	http://expressjs.com/en/api.html#req.param
req.range	A										<section class="prog__container"><p>Range header parser.</p><pre><code>// parse header from request\nvar range = req.range(1000)\n\n// the type of the range\nif (range.type === 'bytes') {\n  // the ranges\n  range.forEach(function (r) {\n    // do something with r.start and r.end\n  })\n}\n</code></pre></section>	http://expressjs.com/en/api.html#req.range
res.app	A										<section class="prog__container"><p>This property holds a reference to the instance of the Express application that is using the middleware.</p><pre><code>app.get('/', function (req, res) {\n  console.log(res.headersSent); // false\n  res.send('OK');\n  console.log(res.headersSent); // true\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.app
res.headersSent	A										<section class="prog__container"><p>Boolean property that indicates if the app sent HTTP headers for the response.</p><pre><code>app.get('/', function (req, res) {\n  console.log(res.headersSent); // false\n  res.send('OK');\n  console.log(res.headersSent); // true\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.headersSent
res.locals	A										<section class="prog__container"><p>An object that contains response local variables scoped to the request, and therefore available only tothe view(s) rendered during that request / response cycle (if any). Otherwise,this property is identical to app.locals.</p><pre><code>app.use(function(req, res, next){\n  res.locals.user = req.user;\n  res.locals.authenticated = ! req.user.anonymous;\n  next();\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.locals
res.append	A										<section class="prog__container"><p>An object that contains response local variables scoped to the request, and therefore available only tothe view(s) rendered during that request / response cycle (if any). Otherwise,this property is identical to app.locals.</p><pre><code>res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\nres.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\nres.append('Warning', '199 Miscellaneous warning');\n</code></pre></section>	http://expressjs.com/en/api.html#res.append
res.attachment	A										<section class="prog__container"><p>Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,then it sets the Content-Type based on the extension name via res.type(),and sets the Content-Disposition “filename=” parameter.</p><pre><code>res.attachment();\n// Content-Disposition: attachment\n\nres.attachment('path/to/logo.png');\n// Content-Disposition: attachment; filename="logo.png"\n// Content-Type: image/png\n</code></pre></section>	http://expressjs.com/en/api.html#res.attachment
res.cookie	A										<section class="prog__container"><p>Sets cookie name to value. The value parameter may be a string or object converted to JSON.</p><pre><code>res.cookie('name', 'tobi', { domain: '.example.com', path: '/admin', secure: true });\nres.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });\n</code></pre></section>	http://expressjs.com/en/api.html#res.cookie
res.clearCookie	A										<section class="prog__container"><p>Clears the cookie specified by name. For details about the options object, see res.cookie().</p><pre><code>res.cookie('name', 'tobi', { path: '/admin' });\nres.clearCookie('name', { path: '/admin' });\n</code></pre></section>	http://expressjs.com/en/api.html#res.clearCookie
res.download	A										<section class="prog__container"><p>Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.By default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).Override this default with the filename parameter.</p><pre><code>res.download('/report-12345.pdf');\n\nres.download('/report-12345.pdf', 'report.pdf');\n\nres.download('/report-12345.pdf', 'report.pdf', function(err){\n  if (err) {\n    // Handle error, but keep in mind the response may be partially-sent\n    // so check res.headersSent\n  } else {\n    // decrement a download credit, etc.\n  }\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.download
res.end	A										<section class="prog__container"><p>Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse.</p><pre><code>res.end();\nres.status(404).end();\n</code></pre></section>	http://expressjs.com/en/api.html#res.end
res.format	A										<section class="prog__container"><p>Performs content-negotiation on the Accept HTTP header on the request object, when present.It uses req.accepts() to select a handler for the request, based on the acceptabletypes ordered by their quality values. If the header is not specified, the first callback is invoked.When no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback.</p><pre><code>res.format({\n  'text/plain': function(){\n    res.send('hey');\n  },\n\n  'text/html': function(){\n    res.send('<p>hey</p>');\n  },\n\n  'application/json': function(){\n    res.send({ message: 'hey' });\n  },\n\n  'default': function() {\n    // log the request and respond with 406\n    res.status(406).send('Not Acceptable');\n  }\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.format
res.get	A										<section class="prog__container"><p>Returns the HTTP response header specified by field.The match is case-insensitive.</p><pre><code>res.get('Content-Type');\n// => "text/plain"\n</code></pre></section>	http://expressjs.com/en/api.html#res.get
res.json	A										<section class="prog__container"><p>Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to aJSON string using JSON.stringify().</p><pre><code>res.json(null);\nres.json({ user: 'tobi' });\nres.status(500).json({ error: 'message' });\n</code></pre></section>	http://expressjs.com/en/api.html#res.json
res.jsonp	A										<section class="prog__container"><p>Sends a JSON response with JSONP support. This method is identical to res.json(),except that it opts-in to JSONP callback support.</p><pre><code>res.jsonp(null);\n// => null\n\nres.jsonp({ user: 'tobi' });\n// => { "user": "tobi" }\n\nres.status(500).jsonp({ error: 'message' });\n// => { "error": "message" }\n</code></pre></section>	http://expressjs.com/en/api.html#res.jsonp
res.links	A										<section class="prog__container"><p>Joins the links provided as properties of the parameter to populate the response’sLink HTTP header field.</p><pre><code>res.links({\n  next: 'http://api.example.com/users?page=2',\n  last: 'http://api.example.com/users?page=5'\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.links
res.location	A										<section class="prog__container"><p>Sets the response Location HTTP header to the specified path parameter.</p><pre><code>res.location('/foo/bar');\nres.location('http://example.com');\nres.location('back');\n</code></pre></section>	http://expressjs.com/en/api.html#res.location
res.redirect	A										<section class="prog__container"><p>Redirects to the URL derived from the specified path, with specified status, a positive integerthat corresponds to an HTTP status code .If not specified, status defaults to “302 “Found”.</p><pre><code>res.redirect('/foo/bar');\nres.redirect('http://example.com');\nres.redirect(301, 'http://example.com');\nres.redirect('../login');\n</code></pre></section>	http://expressjs.com/en/api.html#res.redirect
res.render	A										<section class="prog__container"><p>Renders a view and sends the rendered HTML string to the client.Optional parameters:</p><pre><code>// send the rendered view to the client\nres.render('index');\n\n// if a callback is specified, the rendered HTML string has to be sent explicitly\nres.render('index', function(err, html) {\n  res.send(html);\n});\n\n// pass a local variable to the view\nres.render('user', { name: 'Tobi' }, function(err, html) {\n  // ...\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.render
res.send	A										<section class="prog__container"><p>Sends the HTTP response.</p><pre><code>res.send(new Buffer('whoop'));\nres.send({ some: 'json' });\nres.send('<p>some html</p>');\nres.status(404).send('Sorry, we cannot find that!');\nres.status(500).send({ error: 'something blew up' });\n</code></pre></section>	http://expressjs.com/en/api.html#res.send
res.sendFile	A										<section class="prog__container"><p>Sends the HTTP response.</p><pre><code>app.get('/file/:name', function (req, res, next) {\n\n  var options = {\n    root: __dirname + '/public/',\n    dotfiles: 'deny',\n    headers: {\n        'x-timestamp': Date.now(),\n        'x-sent': true\n    }\n  };\n\n  var fileName = req.params.name;\n  res.sendFile(fileName, options, function (err) {\n    if (err) {\n      next(err);\n    } else {\n      console.log('Sent:', fileName);\n    }\n  });\n\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.sendFile
res.sendStatus	A										<section class="prog__container"><p>Sets the response HTTP status code to statusCode and send its string representation as the response body.</p><pre><code>res.sendStatus(200); // equivalent to res.status(200).send('OK')\nres.sendStatus(403); // equivalent to res.status(403).send('Forbidden')\nres.sendStatus(404); // equivalent to res.status(404).send('Not Found')\nres.sendStatus(500); // equivalent to res.status(500).send('Internal Server Error')\n</code></pre></section>	http://expressjs.com/en/api.html#res.sendStatus
res.set	A										<section class="prog__container"><p>Sets the response’s HTTP header field to value.To set multiple fields at once, pass an object as the parameter.</p><pre><code>res.set('Content-Type', 'text/plain');\n\nres.set({\n  'Content-Type': 'text/plain',\n  'Content-Length': '123',\n  'ETag': '12345'\n});\n</code></pre></section>	http://expressjs.com/en/api.html#res.set
res.status	A										<section class="prog__container"><p>Sets the HTTP status for the response.It is a chainable alias of Node’s response.statusCode.</p><pre><code>res.status(403).end();\nres.status(400).send('Bad Request');\nres.status(404).sendFile('/absolute/path/to/404.png');\n</code></pre></section>	http://expressjs.com/en/api.html#res.status
res.type	A										<section class="prog__container"><p>Sets the Content-Type HTTP header to the MIME type as determined bymime.lookup() for the specified type.If type contains the “/” character, then it sets the Content-Type to type.</p><pre><code>res.type('.html');              // => 'text/html'\nres.type('html');               // => 'text/html'\nres.type('json');               // => 'application/json'\nres.type('application/json');   // => 'application/json'\nres.type('png');                // => image/png:\n</code></pre></section>	http://expressjs.com/en/api.html#res.type
res.vary	A										<section class="prog__container"><p>Adds the field to the Vary response header, if it is not there already.</p><pre><code>res.vary('User-Agent').render('docs');\n</code></pre></section>	http://expressjs.com/en/api.html#res.vary
router.all	A										<section class="prog__container"><p>This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs).</p><pre><code>router.all('*', requireAuthentication, loadUser);\n</code></pre></section>	http://expressjs.com/en/api.html#router.all
router.METHOD	A										<section class="prog__container"><p>The router.METHOD() methods provide the routing functionality in Express,where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,in lowercase. Thus, the actual methods are router.get(), router.post(),router.put(), and so on.</p><pre><code>router.get('/', function(req, res){\n  res.send('hello world');\n});\n</code></pre></section>	http://expressjs.com/en/api.html#router.METHOD
router.param	A										<section class="prog__container"><p>Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below).</p><pre><code>router.param('user', function(req, res, next, id) {\n\n  // try to get the user details from the User model and attach it to the request object\n  User.find(id, function(err, user) {\n    if (err) {\n      next(err);\n    } else if (user) {\n      req.user = user;\n      next();\n    } else {\n      next(new Error('failed to load user'));\n    }\n  });\n});\n</code></pre></section>	http://expressjs.com/en/api.html#router.param
router.route	A										<section class="prog__container"><p>Returns an instance of a single route which you can then use to handle HTTP verbswith optional middleware. Use router.route() to avoid duplicate route naming andthus typing errors.</p><pre><code>var router = express.Router();\n\nrouter.param('user_id', function(req, res, next, id) {\n  // sample user, would actually fetch from DB, etc...\n  req.user = {\n    id: id,\n    name: 'TJ'\n  };\n  next();\n});\n\nrouter.route('/users/:user_id')\n.all(function(req, res, next) {\n  // runs for all HTTP verbs first\n  // think of it as route specific middleware!\n  next();\n})\n.get(function(req, res, next) {\n  res.json(req.user);\n})\n.put(function(req, res, next) {\n  // just an example of maybe updating the user\n  req.user.name = req.params.name;\n  // save user ... etc\n  res.json(req.user);\n})\n.post(function(req, res, next) {\n  next(new Error('not implemented'));\n})\n.delete(function(req, res, next) {\n  next(new Error('not implemented'));\n});\n</code></pre></section>	http://expressjs.com/en/api.html#router.route
router.use	A										<section class="prog__container"><p>Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”.</p><pre><code>var express = require('express');\nvar app = express();\nvar router = express.Router();\n\n// simple logger for this router's requests\n// all requests to this router will first hit this middleware\nrouter.use(function(req, res, next) {\n  console.log('%s %s %s', req.method, req.url, req.path);\n  next();\n});\n\n// this will only be invoked if the path starts with /bar from the mount point\nrouter.use('/bar', function(req, res, next) {\n  // ... maybe some additional /bar logging ...\n  next();\n});\n\n// always invoked\nrouter.use(function(req, res, next) {\n  res.send('Hello World');\n});\n\napp.use('/foo', router);\n\napp.listen(3000);\n</code></pre></section>	http://expressjs.com/en/api.html#router.use
