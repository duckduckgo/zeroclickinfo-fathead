Buffer	D								*[[Buffer(buffer_class_buffer)]] The Buffer class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.\n*[[Buffer(buffer)]] Used to handle binary data. See the buffer section.			
clearImmediate	A										<section class="prog__container"><p id='obj.desc'><code>clearImmediate</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#clearimmediate
clearInterval	A										<section class="prog__container"><p id='obj.desc'><code>clearInterval</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#clearinterval
clearTimeout	A										<section class="prog__container"><p id='obj.desc'><code>clearTimeout</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#cleartimeout
global	A										<section class="prog__container"><p id='obj.desc'>In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&apos;re in the global scope <code>var something</code> will define a global\nvariable. In Node.js this is different. The top-level scope is not the global\nscope; <code>var something</code> inside an Node.js module will be local to that module.</p></section>	http://nodejs.org/api/all.html#globals_global
setImmediate	A										<section class="prog__container"><p id='obj.desc'><code>setImmediate</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#setimmediate
setInterval	A										<section class="prog__container"><p id='obj.desc'><code>setInterval</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#setinterval
setTimeout	A										<section class="prog__container"><p id='obj.desc'><code>setTimeout</code> is described in the timers section.</p></section>	http://nodejs.org/api/all.html#settimeout
process	A										<section class="prog__container"><p id='obj.desc'>The <code>process</code> object is a <code>global</code> that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using <code>require()</code>.</p></section>	http://nodejs.org/api/all.html#process
process.abort	A										<section class="prog__container"><p id='obj.desc'>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\ngenerate a core file.</p><pre><code>process.abort()</code></pre></section>	http://nodejs.org/api/all.html#process_abort
process abort	R	process.abort										http://nodejs.org/api/all.html#process_abort
process.chdir	A										<section class="prog__container"><p id='obj.desc'>The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).</p><p>The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).</p><pre><code class="lang-js">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(`New directory: ${process.cwd()}`);\n}\ncatch (err) {\n  console.log(`chdir: ${err}`);\n}\n</code></pre><pre><code>process.chdir(directory)</code></pre></section>	http://nodejs.org/api/all.html#process_chdir_directory
process chdir	R	process.chdir										http://nodejs.org/api/all.html#process_chdir_directory
process.cpuUsage	A										<section class="prog__container"><p id='obj.desc'>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.</p><p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\nargument to the function, to get a diff reading.</p><pre><code class="lang-js">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</code></pre><pre><code>process.cpuUsage([previousValue])</code></pre></section>	http://nodejs.org/api/all.html#process_cpuusage_previousvalue
process cpuUsage	R	process.cpuUsage										http://nodejs.org/api/all.html#process_cpuusage_previousvalue
process.cwd	A										<section class="prog__container"><p id='obj.desc'>The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.</p><p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.</p><pre><code class="lang-js">console.log(`Current directory: ${process.cwd()}`);\n</code></pre><pre><code>process.cwd()</code></pre></section>	http://nodejs.org/api/all.html#process_cwd
process cwd	R	process.cwd										http://nodejs.org/api/all.html#process_cwd
process.disconnect	A										<section class="prog__container"><p id='obj.desc'>If the Node.js process is spawned with an IPC channel (see the Child Process\nand Cluster documentation), the <code>process.disconnect()</code> method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.</p><pre><code>process.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#process_disconnect
process disconnect	R	process.disconnect										http://nodejs.org/api/all.html#process_disconnect
process.emitWarning	A										<section class="prog__container"><p id='obj.desc'>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<code>process.on(&apos;warning&apos;)</code> event.</p><p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<code>process.on(&apos;warning&apos;)</code> event.</p><pre><code class="lang-js">// Emit a warning using a string...\nprocess.emitWarning(&apos;Something happened!&apos;);\n// Emits: (node: 56338) Warning: Something happened!\n</code></pre><p>null</p><pre><code class="lang-js">// Emit a warning using a string and a name...\nprocess.emitWarning(&apos;Something Happened!&apos;, &apos;CustomWarning&apos;);\n// Emits: (node:56338) CustomWarning: Something Happened!\n</code></pre><p>In each of the previous examples, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the\n<code>process.on(&apos;warning&apos;)</code> event.</p><pre><code class="lang-js">process.on(&apos;warning&apos;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.stack);\n});\n</code></pre><p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\n<code>process.on(&apos;warning&apos;)</code> event handler unmodified (and the optional <code>name</code>\nand <code>ctor</code> arguments will be ignored):</p><pre><code class="lang-js">// Emit a warning using an Error object...\nconst myWarning = new Error(&apos;Warning! Something happened!&apos;);\nmyWarning.name = &apos;CustomWarning&apos;;\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) CustomWarning: Warning! Something Happened!\n</code></pre><pre><code>process.emitWarning(warning[, name][, ctor])</code></pre></section>	http://nodejs.org/api/all.html#process_emitwarning_warning_name_ctor
process emitWarning	R	process.emitWarning										http://nodejs.org/api/all.html#process_emitwarning_warning_name_ctor
process.exit	A										<section class="prog__container"><p id='obj.desc'>The <code>process.exit()</code> method instructs Node.js to terminate the process as\nquickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,\nexit uses either the &apos;success&apos; code <code>0</code> or the value of <code>process.exitCode</code> if\nspecified.</p><p>To exit with a &apos;failure&apos; code:</p><pre><code class="lang-js">process.exit(1);\n</code></pre><p>For instance, the following example illustrates a <em>misuse</em> of the\n<code>process.exit()</code> method that could lead to data printed to stdout being\ntruncated and lost:</p><pre><code class="lang-js">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</code></pre><p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:</p><pre><code class="lang-js">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</code></pre><pre><code>process.exit([code])</code></pre></section>	http://nodejs.org/api/all.html#process_exit_code
process exit	R	process.exit										http://nodejs.org/api/all.html#process_exit_code
process.getegid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)</p><p>The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)</p><pre><code class="lang-js">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</code></pre><pre><code>process.getegid()</code></pre></section>	http://nodejs.org/api/all.html#process_getegid
process getegid	R	process.getegid										http://nodejs.org/api/all.html#process_getegid
process.geteuid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See geteuid(2).)</p><p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See geteuid(2).)</p><pre><code class="lang-js">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</code></pre><pre><code>process.geteuid()</code></pre></section>	http://nodejs.org/api/all.html#process_geteuid
process geteuid	R	process.geteuid										http://nodejs.org/api/all.html#process_geteuid
process.getgid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See getgid(2).)</p><p>The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See getgid(2).)</p><pre><code class="lang-js">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</code></pre><pre><code>process.getgid()</code></pre></section>	http://nodejs.org/api/all.html#process_getgid
process getgid	R	process.getgid										http://nodejs.org/api/all.html#process_getgid
process.getgroups	A										<section class="prog__container"><p id='obj.desc'>The <code>process.getgroups()</code> method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.</p><pre><code>process.getgroups()</code></pre></section>	http://nodejs.org/api/all.html#process_getgroups
process getgroups	R	process.getgroups										http://nodejs.org/api/all.html#process_getgroups
process.getuid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See getuid(2).)</p><p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See getuid(2).)</p><pre><code class="lang-js">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</code></pre><pre><code>process.getuid()</code></pre></section>	http://nodejs.org/api/all.html#process_getuid
process getuid	R	process.getuid										http://nodejs.org/api/all.html#process_getuid
process.hrtime	A										<section class="prog__container"><p id='obj.desc'>The <code>process.hrtime()</code> method returns the current high-resolution real time in a\n<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must\nbe the result of a previous <code>process.hrtime()</code> call (and therefore, a real time\nin a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff\nwith the current time. These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals.</p><p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for\ncalculating an amount of time passed between calls:</p><pre><code class="lang-js">var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);\n</code></pre><pre><code>process.hrtime([time])</code></pre></section>	http://nodejs.org/api/all.html#process_hrtime_time
process hrtime	R	process.hrtime										http://nodejs.org/api/all.html#process_hrtime_time
process.initgroups	A										<section class="prog__container"><p id='obj.desc'>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have <code>root</code>\naccess or the <code>CAP_SETGID</code> capability.</p><p>Note that care must be taken when dropping privileges. Example:</p><pre><code class="lang-js">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&apos;bnoordhuis&apos;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</code></pre><pre><code>process.initgroups(user, extra_group)</code></pre></section>	http://nodejs.org/api/all.html#process_initgroups_user_extra_group
process initgroups	R	process.initgroups										http://nodejs.org/api/all.html#process_initgroups_user_extra_group
process.kill	A										<section class="prog__container"><p id='obj.desc'>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\n<code>pid</code>.</p><p>For example:</p><pre><code class="lang-js">process.on(&apos;SIGHUP&apos;, () =&gt; {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);\n</code></pre><pre><code>process.kill(pid[, signal])</code></pre></section>	http://nodejs.org/api/all.html#process_kill_pid_signal
process kill	R	process.kill										http://nodejs.org/api/all.html#process_kill_pid_signal
process.memoryUsage	A										<section class="prog__container"><p id='obj.desc'>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\nof the Node.js process measured in bytes.</p><p>For example, the code:</p><pre><code class="lang-js">console.log(process.memoryUsage());\n</code></pre><p>Will generate:</p><pre><code class="lang-js">{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n</code></pre><pre><code>process.memoryUsage()</code></pre></section>	http://nodejs.org/api/all.html#process_memoryusage
process memoryUsage	R	process.memoryUsage										http://nodejs.org/api/all.html#process_memoryusage
process.nextTick	A										<section class="prog__container"><p id='obj.desc'>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.</p><p>This is <em>not</em> a simple alias to <code>setTimeout(fn, 0)</code>. It is much more\nefficient.  It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.</p><pre><code class="lang-js">console.log(&apos;start&apos;);\nprocess.nextTick(() =&gt; {\n  console.log(&apos;nextTick callback&apos;);\n});\nconsole.log(&apos;scheduled&apos;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n</code></pre><p>This is important when developing APIs in order to give users the opportunity\nto assign event handlers <em>after</em> an object has been constructed but before any\nI/O has occurred:</p><pre><code class="lang-js">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</code></pre><p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:</p><pre><code class="lang-js">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}\n</code></pre><p>This API is hazardous because in the following case:</p><pre><code class="lang-js">maybeSync(true, () =&gt; {\n  foo();\n});\nbar();\n</code></pre><p>The following approach is much better:</p><pre><code class="lang-js">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}\n</code></pre><pre><code>process.nextTick(callback[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#process_nexttick_callback_args
process nextTick	R	process.nextTick										http://nodejs.org/api/all.html#process_nexttick_callback_args
process.send	A										<section class="prog__container"><p id='obj.desc'>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\nused to send messages to the parent process. Messages will be received as a\n<code>&apos;message&apos;</code> event on the parent&apos;s <code>ChildProcess</code> object.</p><pre><code>process.send(message[, sendHandle[, options]][, callback])</code></pre></section>	http://nodejs.org/api/all.html#process_send_message_sendhandle_options_callback
process send	R	process.send										http://nodejs.org/api/all.html#process_send_message_sendhandle_options_callback
process.setegid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.</p><p>The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.</p><pre><code class="lang-js">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre><pre><code>process.setegid(id)</code></pre></section>	http://nodejs.org/api/all.html#process_setegid_id
process setegid	R	process.setegid										http://nodejs.org/api/all.html#process_setegid_id
process.seteuid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\nstring.  If a username is specified, the method blocks while resolving the\nassociated numeric ID.</p><p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\nstring.  If a username is specified, the method blocks while resolving the\nassociated numeric ID.</p><pre><code class="lang-js">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre><pre><code>process.seteuid(id)</code></pre></section>	http://nodejs.org/api/all.html#process_seteuid_id
process seteuid	R	process.seteuid										http://nodejs.org/api/all.html#process_seteuid_id
process.setgid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.</p><p>The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.</p><pre><code class="lang-js">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre><pre><code>process.setgid(id)</code></pre></section>	http://nodejs.org/api/all.html#process_setgid_id
process setgid	R	process.setgid										http://nodejs.org/api/all.html#process_setgid_id
process.setgroups	A										<section class="prog__container"><p id='obj.desc'>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\nNode.js process. This is a privileged operation that requires the Node.js process\nto have <code>root</code> or the <code>CAP_SETGID</code> capability.</p><pre><code>process.setgroups(groups)</code></pre></section>	http://nodejs.org/api/all.html#process_setgroups_groups
process setgroups	R	process.setgroups										http://nodejs.org/api/all.html#process_setgroups_groups
process.setuid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.setuid(id)</code> method sets the user identity of the process. (See\nsetuid(2).)  The <code>id</code> can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.</p><p>The <code>process.setuid(id)</code> method sets the user identity of the process. (See\nsetuid(2).)  The <code>id</code> can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.</p><pre><code class="lang-js">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre><pre><code>process.setuid(id)</code></pre></section>	http://nodejs.org/api/all.html#process_setuid_id
process setuid	R	process.setuid										http://nodejs.org/api/all.html#process_setuid_id
process.umask	A										<section class="prog__container"><p id='obj.desc'>The <code>process.umask()</code> method sets or returns the Node.js process&apos;s file mode\ncreation mask. Child processes inherit the mask from the parent process. The old\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\nmask.</p><p>The <code>process.umask()</code> method sets or returns the Node.js process&apos;s file mode\ncreation mask. Child processes inherit the mask from the parent process. The old\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\nmask.</p><pre><code class="lang-js">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</code></pre><pre><code>process.umask([mask])</code></pre></section>	http://nodejs.org/api/all.html#process_umask_mask
process umask	R	process.umask										http://nodejs.org/api/all.html#process_umask_mask
process.uptime	A										<section class="prog__container"><p id='obj.desc'>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\nprocess has been running.</p><pre><code>process.uptime()</code></pre></section>	http://nodejs.org/api/all.html#process_uptime
process uptime	R	process.uptime										http://nodejs.org/api/all.html#process_uptime
process.arch	A										<section class="prog__container"><p id='obj.desc'>The <code>process.arch</code> property returns a String identifying the processor\narchitecture that the Node.js process is currently running on. For instance\n<code>&apos;arm&apos;</code>, <code>&apos;ia32&apos;</code>, or <code>&apos;x64&apos;</code>.</p><p>The <code>process.arch</code> property returns a String identifying the processor\narchitecture that the Node.js process is currently running on. For instance\n<code>&apos;arm&apos;</code>, <code>&apos;ia32&apos;</code>, or <code>&apos;x64&apos;</code>.</p><pre><code class="lang-js">console.log(`This processor architecture is ${process.arch}`);\n</code></pre></section>	http://nodejs.org/api/all.html#process_arch
process arch	R	process.arch										http://nodejs.org/api/all.html#process_arch
process.argv	A										<section class="prog__container"><p id='obj.desc'>The <code>process.argv</code> property returns an array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe <code>process.execPath</code>. See <code>process.argv0</code> if access to the original value of\n<code>argv[0]</code> is needed.  The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command line\narguments.</p><p>For example, assuming the following script for <code>process-args.js</code>:</p><pre><code class="lang-js">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</code></pre><p>Launching the Node.js process as:</p><pre><code class="lang-console">$ node process-2.js one two=three four\n</code></pre><p>Would generate the output:</p><pre><code class="lang-text">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</code></pre></section>	http://nodejs.org/api/all.html#process_argv
process argv	R	process.argv										http://nodejs.org/api/all.html#process_argv
process.argv0	A										<section class="prog__container"><p id='obj.desc'>The <code>process.argv0</code> property stores a read-only copy of the original value of\n<code>argv[0]</code> passed when Node.js starts.</p><p>The <code>process.argv0</code> property stores a read-only copy of the original value of\n<code>argv[0]</code> passed when Node.js starts.</p><pre><code class="lang-console">$ bash -c &apos;exec -a customArgv0 ./node&apos;\n&gt; process.argv[0]\n&apos;/Volumes/code/external/node/out/Release/node&apos;\n&gt; process.argv0\n&apos;customArgv0&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#process_argv0
process argv0	R	process.argv0										http://nodejs.org/api/all.html#process_argv0
process.channel	A										<section class="prog__container"><p id='obj.desc'>If the Node.js process was spawned with an IPC channel (see the\nChild Process documentation), the <code>process.channel</code>\nproperty is a reference to the IPC channel. If no IPC channel exists, this\nproperty is <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#process_channel
process channel	R	process.channel										http://nodejs.org/api/all.html#process_channel
process.config	A										<section class="prog__container"><p id='obj.desc'>The <code>process.config</code> property returns an Object containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\nrunning the <code>./configure</code> script.</p><p>An example of the possible output looks like:</p><pre><code class="lang-js">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: &apos;Release&apos;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &apos;x64&apos;,\n     node_install_npm: &apos;true&apos;,\n     node_prefix: &apos;&apos;,\n     node_shared_cares: &apos;false&apos;,\n     node_shared_http_parser: &apos;false&apos;,\n     node_shared_libuv: &apos;false&apos;,\n     node_shared_zlib: &apos;false&apos;,\n     node_use_dtrace: &apos;false&apos;,\n     node_use_openssl: &apos;true&apos;,\n     node_shared_openssl: &apos;false&apos;,\n     strict_aliasing: &apos;true&apos;,\n     target_arch: &apos;x64&apos;,\n     v8_use_snapshot: &apos;true&apos;\n   }\n}\n</code></pre></section>	http://nodejs.org/api/all.html#process_config
process config	R	process.config										http://nodejs.org/api/all.html#process_config
process.connected	A										<section class="prog__container"><p id='obj.desc'>If the Node.js process is spawned with an IPC channel (see the Child Process\nand Cluster documentation), the <code>process.connected</code> property will return\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\n<code>process.disconnect()</code> is called.</p></section>	http://nodejs.org/api/all.html#process_connected
process connected	R	process.connected										http://nodejs.org/api/all.html#process_connected
process.env	A										<section class="prog__container"><p id='obj.desc'>The <code>process.env</code> property returns an object containing the user environment.\nSee environ(7).</p><p>An example of this object looks like:</p><pre><code class="lang-js">{\n  TERM: &apos;xterm-256color&apos;,\n  SHELL: &apos;/usr/local/bin/bash&apos;,\n  USER: &apos;maciej&apos;,\n  PATH: &apos;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;,\n  PWD: &apos;/Users/maciej&apos;,\n  EDITOR: &apos;vim&apos;,\n  SHLVL: &apos;1&apos;,\n  HOME: &apos;/Users/maciej&apos;,\n  LOGNAME: &apos;maciej&apos;,\n  _: &apos;/usr/local/bin/node&apos;\n}\n</code></pre><p>It is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:</p><pre><code class="lang-console">$ node -e &apos;process.env.foo = &quot;bar&quot;&apos; &amp;&amp; echo $foo\n</code></pre><p>While the following will:</p><pre><code class="lang-js">process.env.foo = &apos;bar&apos;;\nconsole.log(process.env.foo);\n</code></pre><p>Example:</p><pre><code class="lang-js">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &apos;null&apos;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &apos;undefined&apos;\n</code></pre><p>Example:</p><pre><code class="lang-js">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</code></pre><p>Example:</p><pre><code class="lang-js">process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n</code></pre></section>	http://nodejs.org/api/all.html#process_env
process env	R	process.env										http://nodejs.org/api/all.html#process_env
process.execArgv	A										<section class="prog__container"><p id='obj.desc'>The <code>process.execArgv</code> property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the <code>process.argv</code> property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.</p><p>For example:</p><pre><code class="lang-console">$ node --harmony script.js --version\n</code></pre><p>Results in <code>process.execArgv</code>:</p><pre><code class="lang-js">[&apos;--harmony&apos;]\n</code></pre><p>And <code>process.argv</code>:</p><pre><code class="lang-js">[&apos;/usr/local/bin/node&apos;, &apos;script.js&apos;, &apos;--version&apos;]\n</code></pre></section>	http://nodejs.org/api/all.html#process_execargv
process execArgv	R	process.execArgv										http://nodejs.org/api/all.html#process_execargv
process.execPath	A										<section class="prog__container"><p id='obj.desc'>The <code>process.execPath</code> property returns the absolute pathname of the executable\nthat started the Node.js process.</p><p>For example:</p><pre><code class="lang-js">&apos;/usr/local/bin/node&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#process_execpath
process execPath	R	process.execPath										http://nodejs.org/api/all.html#process_execpath
process.exitCode	A										<section class="prog__container"><p id='obj.desc'>A number which will be the process exit code, when the process either\nexits gracefully, or is exited via <code>process.exit()</code> without specifying\na code.</p></section>	http://nodejs.org/api/all.html#process_exitcode
process exitCode	R	process.exitCode										http://nodejs.org/api/all.html#process_exitcode
process.mainModule	A										<section class="prog__container"><p id='obj.desc'>The <code>process.mainModule</code> property provides an alternative way of retrieving\n<code>require.main</code>. The difference is that if the main module changes at\nruntime, <code>require.main</code> may still refer to the original main module in\nmodules that were required before the change occurred. Generally, it&apos;s\nsafe to assume that the two refer to the same module.</p></section>	http://nodejs.org/api/all.html#process_mainmodule
process mainModule	R	process.mainModule										http://nodejs.org/api/all.html#process_mainmodule
process.pid	A										<section class="prog__container"><p id='obj.desc'>The <code>process.pid</code> property returns the PID of the process.</p><p>The <code>process.pid</code> property returns the PID of the process.</p><pre><code class="lang-js">console.log(`This process is pid ${process.pid}`);\n</code></pre></section>	http://nodejs.org/api/all.html#process_pid
process pid	R	process.pid										http://nodejs.org/api/all.html#process_pid
process.platform	A										<section class="prog__container"><p id='obj.desc'>The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running. For instance\n<code>&apos;darwin&apos;</code>, <code>&apos;freebsd&apos;</code>, <code>&apos;linux&apos;</code>, <code>&apos;sunos&apos;</code> or <code>&apos;win32&apos;</code></p><p>The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running. For instance\n<code>&apos;darwin&apos;</code>, <code>&apos;freebsd&apos;</code>, <code>&apos;linux&apos;</code>, <code>&apos;sunos&apos;</code> or <code>&apos;win32&apos;</code></p><pre><code class="lang-js">console.log(`This platform is ${process.platform}`);\n</code></pre></section>	http://nodejs.org/api/all.html#process_platform
process platform	R	process.platform										http://nodejs.org/api/all.html#process_platform
process.release	A										<section class="prog__container"><p id='obj.desc'>The <code>process.release</code> property returns an Object containing metadata related to\nthe current release, including URLs for the source tarball and headers-only\ntarball.</p><p>For example:</p><pre><code class="lang-js">{\n  name: &apos;node&apos;,\n  lts: &apos;Argon&apos;,\n  sourceUrl: &apos;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&apos;,\n  headersUrl: &apos;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&apos;,\n  libUrl: &apos;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&apos;\n}\n</code></pre></section>	http://nodejs.org/api/all.html#process_release
process release	R	process.release										http://nodejs.org/api/all.html#process_release
process.stderr	A										<section class="prog__container"><p id='obj.desc'>The <code>process.stderr</code> property returns a Writable stream equivalent to or\nassociated with <code>stderr</code> (fd <code>2</code>).</p></section>	http://nodejs.org/api/all.html#process_stderr
process stderr	R	process.stderr										http://nodejs.org/api/all.html#process_stderr
process.stdin	A										<section class="prog__container"><p id='obj.desc'>The <code>process.stdin</code> property returns a Readable stream equivalent to or\nassociated with <code>stdin</code> (fd <code>0</code>).</p><p>For example:</p><pre><code class="lang-js">process.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;readable&apos;, () =&gt; {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&apos;end&apos;, () =&gt; {\n  process.stdout.write(&apos;end&apos;);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#process_stdin
process stdin	R	process.stdin										http://nodejs.org/api/all.html#process_stdin
process.stdout	A										<section class="prog__container"><p id='obj.desc'>The <code>process.stdout</code> property returns a Writable stream equivalent to or\nassociated with <code>stdout</code> (fd <code>1</code>).</p><p>For example:</p><pre><code class="lang-js">console.log = (msg) =&gt; {\n  process.stdout.write(`${msg}\n`);\n};\n</code></pre></section>	http://nodejs.org/api/all.html#process_stdout
process stdout	R	process.stdout										http://nodejs.org/api/all.html#process_stdout
process.stdout.stdout`	A										<section class="prog__container"><p id='obj.desc'>The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting\nto TTYs (terminals) on OS X as a workaround for the operating system&apos;s small,\n1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p><p>For instance:</p><pre><code class="lang-console">$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre></section>	http://nodejs.org/api/all.html#process_stdout_stdout
process stdout stdout`	R	process.stdout stdout`										http://nodejs.org/api/all.html#process_stdout_stdout
process.title	A										<section class="prog__container"><p id='obj.desc'>The <code>process.title</code> property returns the current process title (i.e. returns\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\nthe current value of <code>ps</code>.</p></section>	http://nodejs.org/api/all.html#process_title
process title	R	process.title										http://nodejs.org/api/all.html#process_title
process.version	A										<section class="prog__container"><p id='obj.desc'>The <code>process.version</code> property returns the Node.js version string.</p><p>The <code>process.version</code> property returns the Node.js version string.</p><pre><code class="lang-js">console.log(`Version: ${process.version}`);\n</code></pre></section>	http://nodejs.org/api/all.html#process_version
process version	R	process.version										http://nodejs.org/api/all.html#process_version
process.versions	A										<section class="prog__container"><p id='obj.desc'>The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies.</p><p>The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies.</p><pre><code class="lang-js">console.log(process.versions);\n</code></pre><p>Will generate output similar to:</p><pre><code class="lang-js">{\n  http_parser: &apos;2.3.0&apos;,\n  node: &apos;1.1.1&apos;,\n  v8: &apos;4.1.0.14&apos;,\n  uv: &apos;1.3.0&apos;,\n  zlib: &apos;1.2.8&apos;,\n  ares: &apos;1.10.0-DEV&apos;,\n  modules: &apos;43&apos;,\n  icu: &apos;55.1&apos;,\n  openssl: &apos;1.0.1k&apos;,\n  unicode: &apos;8.0&apos;,\n  cldr: &apos;29.0&apos;,\n  tz: &apos;2016b&apos; }\n</code></pre></section>	http://nodejs.org/api/all.html#process_versions
process versions	R	process.versions										http://nodejs.org/api/all.html#process_versions
\_\_dirname	A										<section class="prog__container"><p id='obj.desc'>The name of the directory that the currently executing script resides in.</p><p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p><pre><code class="lang-js">console.log(__dirname);\n// Prints: /Users/mjr\n</code></pre></section>	http://nodejs.org/api/all.html#globals_dirname
\_\_filename	A										<section class="prog__container"><p id='obj.desc'>The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.</p><p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p><pre><code class="lang-js">console.log(__filename);\n// Prints: /Users/mjr/example.js\n</code></pre></section>	http://nodejs.org/api/all.html#globals_filename
exports	A										<section class="prog__container"><p id='obj.desc'>A reference to the <code>module.exports</code> that is shorter to type.\nSee module system documentation for details on when to use <code>exports</code> and\nwhen to use <code>module.exports</code>.</p></section>	http://nodejs.org/api/all.html#globals_exports
module	D								*[[module(module_module)]] Node.js has a simple module loading system.  In Node.js, files and modules are in one-to-one correspondence  each file is treated as a separate module .\n*[[module(globals_module)]] A reference to the current module. In particular module.exports is used for defining what a module exports and makes available through require  .			
require	A										<section class="prog__container"><p id='obj.desc'>To require modules. See the Modules section.  <code>require</code> isn&apos;t actually a\nglobal but rather local to each module.</p></section>	http://nodejs.org/api/all.html#globals_require
require.resolve	A										<section class="prog__container"><p id='obj.desc'>Use the internal <code>require()</code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.</p></section>	http://nodejs.org/api/all.html#globals_require_resolve
require resolve	R	require.resolve										http://nodejs.org/api/all.html#globals_require_resolve
require.cache	A										<section class="prog__container"><p id='obj.desc'>Modules are cached in this object when they are required. By deleting a key\nvalue from this object, the next <code>require</code> will reload the module. Note that\nthis does not apply to native addons, for which reloading will result in an\nError.</p></section>	http://nodejs.org/api/all.html#globals_require_cache
require cache	R	require.cache										http://nodejs.org/api/all.html#globals_require_cache
require.extensions	A										<section class="prog__container"><p id='obj.desc'>Instruct <code>require</code> on how to handle certain file extensions.</p><p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p><pre><code class="lang-js">require.extensions[&apos;.sjs&apos;] = require.extensions[&apos;.js&apos;];\n</code></pre></section>	http://nodejs.org/api/all.html#globals_require_extensions
require extensions	R	require.extensions										http://nodejs.org/api/all.html#globals_require_extensions
addons	A										<section class="prog__container"><p id='obj.desc'>Node.js Addons are dynamically-linked shared objects, written in C or C++, that\ncan be loaded into Node.js using the <code>require()</code> function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.</p></section>	http://nodejs.org/api/all.html#addons_addons
addons.js	A										<section class="prog__container"><p id='obj.desc'>Each of the examples illustrated in this document make direct use of the\nNode.js and V8 APIs for implementing Addons. It is important to understand\nthat the V8 API can, and has, changed dramatically from one V8 release to the\nnext (and one major Node.js release to the next). With each change, Addons may\nneed to be updated and recompiled in order to continue functioning. The Node.js\nrelease schedule is designed to minimize the frequency and impact of such\nchanges but there is little that Node.js can do currently to ensure stability\nof the V8 APIs.</p></section>	http://nodejs.org/api/all.html#addons_addons_js
addons js	R	addons.js										http://nodejs.org/api/all.html#addons_addons_js
assert	A										<section class="prog__container"><p id='obj.desc'>The <code>assert</code> module provides a simple set of assertion tests that can be used to\ntest invariants. The module is intended for internal use by Node.js, but can be\nused in application code via <code>require(&apos;assert&apos;)</code>. However, <code>assert</code> is not a\ntesting framework, and is not intended to be used as a general purpose assertion\nlibrary.</p><p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#assert_assert
assert.assert	A										<section class="prog__container"><p id='obj.desc'>An alias of <code>assert.ok()</code> .</p><p>An alias of <code>assert.ok()</code> .</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert(true);\n// OK\nassert(1);\n// OK\nassert(false);\n// throws &quot;AssertionError: false == true&quot;\nassert(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert(false, &apos;it\&apos;s false&apos;);\n// throws &quot;AssertionError: it&apos;s false&quot;\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_assert_value_message
assert assert	R	assert.assert										http://nodejs.org/api/all.html#assert_assert_assert_value_message
assert.deepEqual	A										<section class="prog__container"><p id='obj.desc'>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\nPrimitive values are compared with the equal comparison operator ( <code>==</code> ).</p><p>Only enumerable &quot;own&quot; properties are considered. The <code>deepEqual()</code>\nimplementation does not test object prototypes, attached symbols, or\nnon-enumerable properties. This can lead to some potentially surprising\nresults. For example, the following example does not throw an <code>AssertionError</code>\nbecause the properties on the <code>Error</code> object are non-enumerable:</p><pre><code class="lang-js">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(Error(&apos;a&apos;), Error(&apos;b&apos;));\n</code></pre><p>&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare evaluated also:</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n// values of b are different\n\nassert.deepEqual(obj1, obj3);\n// OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\n// Prototypes are ignored\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_deepequal_actual_expected_message
assert deepEqual	R	assert.deepEqual										http://nodejs.org/api/all.html#assert_assert_deepequal_actual_expected_message
assert.deepStrictEqual	A										<section class="prog__container"><p id='obj.desc'>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,\nprimitive values are compared using the strict equality operator ( <code>===</code> ).\nSecond, object comparisons include a strict equality check of their prototypes.</p><p>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,\nprimitive values are compared using the strict equality operator ( <code>===</code> ).\nSecond, object comparisons include a strict equality check of their prototypes.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.deepEqual({a:1}, {a:&apos;1&apos;});\n// OK, because 1 == &apos;1&apos;\n\nassert.deepStrictEqual({a:1}, {a:&apos;1&apos;});\n// AssertionError: { a: 1 } deepStrictEqual { a: &apos;1&apos; }\n// because 1 !== &apos;1&apos; using strict equality\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_deepstrictequal_actual_expected_message
assert deepStrictEqual	R	assert.deepStrictEqual										http://nodejs.org/api/all.html#assert_assert_deepstrictequal_actual_expected_message
assert.doesNotThrow	A										<section class="prog__container"><p id='obj.desc'>Asserts that the function <code>block</code> does not throw an error. See\n<code>assert.throws()</code> for more details.</p><p>The following, for instance, will throw the <code>TypeError</code> because there is no\nmatching error type in the assertion:</p><pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&apos;Wrong value&apos;);\n  },\n  SyntaxError\n);\n</code></pre><p>However, the following will result in an <code>AssertionError</code> with the message\n&apos;Got unwanted exception (TypeError)..&apos;:</p><pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&apos;Wrong value&apos;);\n  },\n  TypeError\n);\n</code></pre><p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>\nparameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>\nmessage:</p><pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&apos;Wrong value&apos;);\n  },\n  TypeError,\n  &apos;Whoops&apos;\n);\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_doesnotthrow_block_error_message
assert doesNotThrow	R	assert.doesNotThrow										http://nodejs.org/api/all.html#assert_assert_doesnotthrow_block_error_message
assert.equal	A										<section class="prog__container"><p id='obj.desc'>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\nusing the equal comparison operator ( <code>==</code> ).</p><p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\nusing the equal comparison operator ( <code>==</code> ).</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, &apos;1&apos;);\n// OK, 1 == &apos;1&apos;\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({a: {b: 1}}, {a: {b: 1}});\n//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_equal_actual_expected_message
assert equal	R	assert.equal										http://nodejs.org/api/all.html#assert_assert_equal_actual_expected_message
assert.fail	A										<section class="prog__container"><p id='obj.desc'>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as\nthe values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.\nOtherwise, the error message is the value of <code>message</code>.</p><p>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as\nthe values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.\nOtherwise, the error message is the value of <code>message</code>.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.fail(1, 2, undefined, &apos;&gt;&apos;);\n// AssertionError: 1 &gt; 2\n\nassert.fail(1, 2, &apos;whoops&apos;, &apos;&gt;&apos;);\n// AssertionError: whoops\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_fail_actual_expected_message_operator
assert fail	R	assert.fail										http://nodejs.org/api/all.html#assert_assert_fail_actual_expected_message_operator
assert.ifError	A										<section class="prog__container"><p id='obj.desc'>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>\nargument in callbacks.</p><p>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>\nargument in callbacks.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.ifError(0);\n// OK\nassert.ifError(1);\n// Throws 1\nassert.ifError(&apos;error&apos;);\n// Throws &apos;error&apos;\nassert.ifError(new Error());\n// Throws Error\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_iferror_value
assert ifError	R	assert.ifError										http://nodejs.org/api/all.html#assert_assert_iferror_value
assert.notDeepEqual	A										<section class="prog__container"><p id='obj.desc'>Tests for any deep inequality. Opposite of <code>assert.deepEqual()</code>.</p><p>Tests for any deep inequality. Opposite of <code>assert.deepEqual()</code>.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK, obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK, obj1 and obj2 are not deeply equal\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_notdeepequal_actual_expected_message
assert notDeepEqual	R	assert.notDeepEqual										http://nodejs.org/api/all.html#assert_assert_notdeepequal_actual_expected_message
assert.notDeepStrictEqual	A										<section class="prog__container"><p id='obj.desc'>Tests for deep strict inequality. Opposite of <code>assert.deepStrictEqual()</code>.</p><p>Tests for deep strict inequality. Opposite of <code>assert.deepStrictEqual()</code>.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.notDeepEqual({a:1}, {a:&apos;1&apos;});\n// AssertionError: { a: 1 } notDeepEqual { a: &apos;1&apos; }\n\nassert.notDeepStrictEqual({a:1}, {a:&apos;1&apos;});\n// OK\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_notdeepstrictequal_actual_expected_message
assert notDeepStrictEqual	R	assert.notDeepStrictEqual										http://nodejs.org/api/all.html#assert_assert_notdeepstrictequal_actual_expected_message
assert.notEqual	A										<section class="prog__container"><p id='obj.desc'>Tests shallow, coercive inequality with the not equal comparison operator\n( <code>!=</code> ).</p><p>Tests shallow, coercive inequality with the not equal comparison operator\n( <code>!=</code> ).</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, &apos;1&apos;);\n// AssertionError: 1 != &apos;1&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_notequal_actual_expected_message
assert notEqual	R	assert.notEqual										http://nodejs.org/api/all.html#assert_assert_notequal_actual_expected_message
assert.notStrictEqual	A										<section class="prog__container"><p id='obj.desc'>Tests strict inequality as determined by the strict not equal operator\n( <code>!==</code> ).</p><p>Tests strict inequality as determined by the strict not equal operator\n( <code>!==</code> ).</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError: 1 !== 1\n\nassert.notStrictEqual(1, &apos;1&apos;);\n// OK\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_notstrictequal_actual_expected_message
assert notStrictEqual	R	assert.notStrictEqual										http://nodejs.org/api/all.html#assert_assert_notstrictequal_actual_expected_message
assert.ok	A										<section class="prog__container"><p id='obj.desc'>Tests if <code>value</code> is truthy. It is equivalent to\n<code>assert.equal(!!value, true, message)</code>.</p><p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is <code>undefined</code>, a default error message is assigned.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\nassert.ok(false);\n// throws &quot;AssertionError: false == true&quot;\nassert.ok(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert.ok(false, &apos;it\&apos;s false&apos;);\n// throws &quot;AssertionError: it&apos;s false&quot;\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_ok_value_message
assert ok	R	assert.ok										http://nodejs.org/api/all.html#assert_assert_ok_value_message
assert.strictEqual	A										<section class="prog__container"><p id='obj.desc'>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p><p>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\n\nassert.strictEqual(1, 2);\n// AssertionError: 1 === 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual(1, &apos;1&apos;);\n// AssertionError: 1 === &apos;1&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_strictequal_actual_expected_message
assert strictEqual	R	assert.strictEqual										http://nodejs.org/api/all.html#assert_assert_strictequal_actual_expected_message
assert.throws	A										<section class="prog__container"><p id='obj.desc'>Expects the function <code>block</code> to throw an error.</p><p>Validate instanceof using constructor:</p><pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&apos;Wrong value&apos;);\n  },\n  Error\n);\n</code></pre><p>Validate error message using <code>RegExp</code>:</p><pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&apos;Wrong value&apos;);\n  },\n  /value/\n);\n</code></pre><p>Custom error validation:</p><pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&apos;Wrong value&apos;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &apos;unexpected error&apos;\n);\n</code></pre><p>Note that <code>error</code> can not be a string. If a string is provided as the second\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\n<code>message</code> instead. This can lead to easy-to-miss mistakes:</p><pre><code class="lang-js">// THIS IS A MISTAKE! DO NOT DO THIS!\nassert.throws(myFunction, &apos;missing foo&apos;, &apos;did not throw with expected message&apos;);\n\n// Do this instead.\nassert.throws(myFunction, /missing foo/, &apos;did not throw with expected message&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#assert_assert_throws_block_error_message
assert throws	R	assert.throws										http://nodejs.org/api/all.html#assert_assert_throws_block_error_message
buffer	A										<section class="prog__container"><p id='obj.desc'>Prior to the introduction of <code>TypedArray</code> in ECMAScript 2015 (ES6), the\nJavaScript language had no mechanism for reading or manipulating streams\nof binary data. The <code>Buffer</code> class was introduced as part of the Node.js\nAPI to make it possible to interact with octet streams in the context of things\nlike TCP streams and file system operations.</p><p>Examples:</p><pre><code class="lang-js">// Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing ASCII bytes [0x74, 0x65, 0x73, 0x74].\nconst buf5 = Buffer.from(&apos;test&apos;);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf6 = Buffer.from(&apos;t&#xE9;st&apos;, &apos;utf8&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#buffer_buffer
buffer.transcode	A										<section class="prog__container"><p id='obj.desc'>Re-encodes the given <code>Buffer</code> instance from one character encoding to another.\nReturns a new <code>Buffer</code> instance.</p><p>The transcoding process will use substitution characters if a given byte\nsequence cannot be adequately represented in the target encoding. For instance:</p><pre><code class="lang-js">const buffer = require(&apos;buffer&apos;);\n\nconst newBuf = buffer.transcode(Buffer.from(&apos;&#x20AC;&apos;), &apos;utf8&apos;, &apos;ascii&apos;);\nconsole.log(newBuf.toString(&apos;ascii&apos;));\n// Prints: &apos;?&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buffer_transcode_source_fromenc_toenc
buffer transcode	R	buffer.transcode										http://nodejs.org/api/all.html#buffer_buffer_transcode_source_fromenc_toenc
buffer.INSPECT_MAX_BYTES	A										<section class="prog__container"><p id='obj.desc'>Returns the maximum number of bytes that will be returned when\n<code>buf.inspect()</code> is called. This can be overridden by user modules. See\n<code>util.inspect()</code> for more details on <code>buf.inspect()</code> behavior.</p></section>	http://nodejs.org/api/all.html#buffer_buffer_inspect_max_bytes
buffer INSPECT_MAX_BYTES	R	buffer.INSPECT_MAX_BYTES										http://nodejs.org/api/all.html#buffer_buffer_inspect_max_bytes
buffer.kMaxLength	A										<section class="prog__container"><p id='obj.desc'>On 32-bit architectures, this value is <code>(2^30)-1</code> (~1GB).\nOn 64-bit architectures, this value is <code>(2^31)-1</code> (~2GB).</p></section>	http://nodejs.org/api/all.html#buffer_buffer_kmaxlength
buffer kMaxLength	R	buffer.kMaxLength										http://nodejs.org/api/all.html#buffer_buffer_kmaxlength
Buffer.compare	D								*[[Buffer.compare(buffer_compare_buf1_buf2)]] Compares buf1 to buf2 typically for the purpose of sorting arrays of Buffer instances. This is equivalent to calling buf1.compare buf2 .\n*[[Buffer.compare(buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend)]] Compares buf with target and returns a number indicating whether buf comes before, after, or is the same as target in sort order. Comparison is based on the actual sequence of bytes in each Buffer.			
Buffer compare	R	Buffer.compare										http://nodejs.org/api/all.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer.copy	A										<section class="prog__container"><p id='obj.desc'>Copies data from a region of <code>buf</code> to a region in <code>target</code> even if the <code>target</code>\nmemory region overlaps with <code>buf</code>.</p><p>Example: Create two <code>Buffer</code> instances, <code>buf1</code> and <code>buf2</code>, and copy <code>buf1</code> from\nbyte 16 through byte 19 into <code>buf2</code>, starting at the 8th byte in <code>buf2</code></p><pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill(&apos;!&apos;);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &apos;a&apos;\n  buf1[i] = i + 97;\n}\n\nbuf1.copy(buf2, 8, 16, 20);\n\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, 25));\n</code></pre><p>Example: Create a single <code>Buffer</code> and copy data from one region to an\noverlapping region within the same <code>Buffer</code></p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &apos;a&apos;\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\n// Prints: efghijghijklmnopqrstuvwxyz\nconsole.log(buf.toString());\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend
Buffer copy	R	Buffer.copy										http://nodejs.org/api/all.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend
Buffer.entries	A										<section class="prog__container"><p id='obj.desc'>Creates and returns an iterator of <code>[index, byte]</code> pairs from the contents of\n<code>buf</code>.</p><p>Example: Log the entire contents of a <code>Buffer</code></p><pre><code class="lang-js">const buf = Buffer.from(&apos;buffer&apos;);\n\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\nfor (const pair of buf.entries()) {\n  console.log(pair);\n}\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_entries
Buffer entries	R	Buffer.entries										http://nodejs.org/api/all.html#buffer_buf_entries
Buffer.equals	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if both <code>buf</code> and <code>otherBuffer</code> have exactly the same bytes,\n<code>false</code> otherwise.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from(&apos;ABC&apos;);\nconst buf2 = Buffer.from(&apos;414243&apos;, &apos;hex&apos;);\nconst buf3 = Buffer.from(&apos;ABCD&apos;);\n\n// Prints: true\nconsole.log(buf1.equals(buf2));\n\n// Prints: false\nconsole.log(buf1.equals(buf3));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_equals_otherbuffer
Buffer equals	R	Buffer.equals										http://nodejs.org/api/all.html#buffer_buf_equals_otherbuffer
Buffer.fill	A										<section class="prog__container"><p id='obj.desc'>Fills <code>buf</code> with the specified <code>value</code>. If the <code>offset</code> and <code>end</code> are not given,\nthe entire <code>buf</code> will be filled. This is meant to be a small simplification to\nallow the creation and filling of a <code>Buffer</code> to be done on a single line.</p><p>Example: Fill a <code>Buffer</code> with the ASCII character <code>&apos;h&apos;</code></p><pre><code class="lang-js">const b = Buffer.allocUnsafe(50).fill(&apos;h&apos;);\n\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\nconsole.log(b.toString());\n</code></pre><p>Example: Fill a <code>Buffer</code> with a two-byte character</p><pre><code class="lang-js">// Prints: &lt;Buffer c8 a2 c8&gt;\nconsole.log(Buffer.allocUnsafe(3).fill(&apos;\u0222&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_fill_value_offset_end_encoding
Buffer fill	R	Buffer.fill										http://nodejs.org/api/all.html#buffer_buf_fill_value_offset_end_encoding
Buffer.indexOf	A										<section class="prog__container"><p id='obj.desc'>If <code>value</code> is:</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;this is a buffer&apos;);\n\n// Prints: 0\nconsole.log(buf.indexOf(&apos;this&apos;));\n\n// Prints: 2\nconsole.log(buf.indexOf(&apos;is&apos;));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&apos;a buffer&apos;)));\n\n// Prints: 8\n// (97 is the decimal ASCII value for &apos;a&apos;)\nconsole.log(buf.indexOf(97));\n\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from(&apos;a buffer example&apos;)));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&apos;a buffer example&apos;).slice(0, 8)));\n\n\nconst utf16Buffer = Buffer.from(&apos;\u039a\u0391\u03a3\u03a3\u0395&apos;, &apos;ucs2&apos;);\n\n// Prints: 4\nconsole.log(utf16Buffer.indexOf(&apos;\u03a3&apos;, 0, &apos;ucs2&apos;));\n\n// Prints: 6\nconsole.log(utf16Buffer.indexOf(&apos;\u03a3&apos;, -4, &apos;ucs2&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_indexof_value_byteoffset_encoding
Buffer indexOf	R	Buffer.indexOf										http://nodejs.org/api/all.html#buffer_buf_indexof_value_byteoffset_encoding
Buffer.includes	A										<section class="prog__container"><p id='obj.desc'>Equivalent to <code>buf.indexOf() !== -1</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;this is a buffer&apos;);\n\n// Prints: true\nconsole.log(buf.includes(&apos;this&apos;));\n\n// Prints: true\nconsole.log(buf.includes(&apos;is&apos;));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&apos;a buffer&apos;)));\n\n// Prints: true\n// (97 is the decimal ASCII value for &apos;a&apos;)\nconsole.log(buf.includes(97));\n\n// Prints: false\nconsole.log(buf.includes(Buffer.from(&apos;a buffer example&apos;)));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&apos;a buffer example&apos;).slice(0, 8)));\n\n// Prints: false\nconsole.log(buf.includes(&apos;this&apos;, 4));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_includes_value_byteoffset_encoding
Buffer includes	R	Buffer.includes										http://nodejs.org/api/all.html#buffer_buf_includes_value_byteoffset_encoding
Buffer.keys	A										<section class="prog__container"><p id='obj.desc'>Creates and returns an iterator of <code>buf</code> keys (indices).</p><p>Example:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;buffer&apos;);\n\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\nfor (const key of buf.keys()) {\n  console.log(key);\n}\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_keys
Buffer keys	R	Buffer.keys										http://nodejs.org/api/all.html#buffer_buf_keys
Buffer.lastIndexOf	A										<section class="prog__container"><p id='obj.desc'>Identical to <code>buf.indexOf()</code>, except <code>buf</code> is searched from back to front\ninstead of front to back.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;this buffer is a buffer&apos;);\n\n// Prints: 0\nconsole.log(buf.lastIndexOf(&apos;this&apos;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(&apos;buffer&apos;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from(&apos;buffer&apos;)));\n\n// Prints: 15\n// (97 is the decimal ASCII value for &apos;a&apos;)\nconsole.log(buf.lastIndexOf(97));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(Buffer.from(&apos;yolo&apos;)));\n\n// Prints: 5\nconsole.log(buf.lastIndexOf(&apos;buffer&apos;, 5));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(&apos;buffer&apos;, 4));\n\n\nconst utf16Buffer = Buffer.from(&apos;\u039a\u0391\u03a3\u03a3\u0395&apos;, &apos;ucs2&apos;);\n\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf(&apos;\u03a3&apos;, undefined, &apos;ucs2&apos;));\n\n// Prints: 4\nconsole.log(utf16Buffer.lastIndexOf(&apos;\u03a3&apos;, -5, &apos;ucs2&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_lastindexof_value_byteoffset_encoding
Buffer lastIndexOf	R	Buffer.lastIndexOf										http://nodejs.org/api/all.html#buffer_buf_lastindexof_value_byteoffset_encoding
Buffer.readDoubleBE	A										<section class="prog__container"><p id='obj.desc'>Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&apos;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readdoublebe_offset_noassert
Buffer readDoubleBE	R	Buffer.readDoubleBE										http://nodejs.org/api/all.html#buffer_buf_readdoublebe_offset_noassert
Buffer.readDoubleLE	A										<section class="prog__container"><p id='obj.desc'>Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&apos;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readdoublele_offset_noassert
Buffer readDoubleLE	R	Buffer.readDoubleLE										http://nodejs.org/api/all.html#buffer_buf_readdoublele_offset_noassert
Buffer.readFloatBE	A										<section class="prog__container"><p id='obj.desc'>Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&apos;t do this!\nconsole.log(buf.readFloatLE(1, true));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readfloatbe_offset_noassert
Buffer readFloatBE	R	Buffer.readFloatBE										http://nodejs.org/api/all.html#buffer_buf_readfloatbe_offset_noassert
Buffer.readFloatLE	A										<section class="prog__container"><p id='obj.desc'>Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&apos;t do this!\nconsole.log(buf.readFloatLE(1, true));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readfloatle_offset_noassert
Buffer readFloatLE	R	Buffer.readFloatLE										http://nodejs.org/api/all.html#buffer_buf_readfloatle_offset_noassert
Buffer.readInt8	A										<section class="prog__container"><p id='obj.desc'>Reads a signed 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([-1, 5]);\n\n// Prints: -1\nconsole.log(buf.readInt8(0));\n\n// Prints: 5\nconsole.log(buf.readInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt8(2));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readint8_offset_noassert
Buffer readInt8	R	Buffer.readInt8										http://nodejs.org/api/all.html#buffer_buf_readint8_offset_noassert
Buffer.readInt16BE	A										<section class="prog__container"><p id='obj.desc'>Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readint16be_offset_noassert
Buffer readInt16BE	R	Buffer.readInt16BE										http://nodejs.org/api/all.html#buffer_buf_readint16be_offset_noassert
Buffer.readInt16LE	A										<section class="prog__container"><p id='obj.desc'>Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readint16le_offset_noassert
Buffer readInt16LE	R	Buffer.readInt16LE										http://nodejs.org/api/all.html#buffer_buf_readint16le_offset_noassert
Buffer.readInt32BE	A										<section class="prog__container"><p id='obj.desc'>Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readint32be_offset_noassert
Buffer readInt32BE	R	Buffer.readInt32BE										http://nodejs.org/api/all.html#buffer_buf_readint32be_offset_noassert
Buffer.readInt32LE	A										<section class="prog__container"><p id='obj.desc'>Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readint32le_offset_noassert
Buffer readInt32LE	R	Buffer.readInt32LE										http://nodejs.org/api/all.html#buffer_buf_readint32le_offset_noassert
Buffer.readIntBE	A										<section class="prog__container"><p id='obj.desc'>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&apos;s complement signed value. Supports up to 48\nbits of accuracy.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readintbe_offset_bytelength_noassert
Buffer readIntBE	R	Buffer.readIntBE										http://nodejs.org/api/all.html#buffer_buf_readintbe_offset_bytelength_noassert
Buffer.readIntLE	A										<section class="prog__container"><p id='obj.desc'>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&apos;s complement signed value. Supports up to 48\nbits of accuracy.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readintle_offset_bytelength_noassert
Buffer readIntLE	R	Buffer.readIntLE										http://nodejs.org/api/all.html#buffer_buf_readintle_offset_bytelength_noassert
Buffer.readUInt8	A										<section class="prog__container"><p id='obj.desc'>Reads an unsigned 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([1, -2]);\n\n// Prints: 1\nconsole.log(buf.readUInt8(0));\n\n// Prints: 254\nconsole.log(buf.readUInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt8(2));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuint8_offset_noassert
Buffer readUInt8	R	Buffer.readUInt8										http://nodejs.org/api/all.html#buffer_buf_readuint8_offset_noassert
Buffer.readUInt16BE	A										<section class="prog__container"><p id='obj.desc'>Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuint16be_offset_noassert
Buffer readUInt16BE	R	Buffer.readUInt16BE										http://nodejs.org/api/all.html#buffer_buf_readuint16be_offset_noassert
Buffer.readUInt16LE	A										<section class="prog__container"><p id='obj.desc'>Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuint16le_offset_noassert
Buffer readUInt16LE	R	Buffer.readUInt16LE										http://nodejs.org/api/all.html#buffer_buf_readuint16le_offset_noassert
Buffer.readUInt32BE	A										<section class="prog__container"><p id='obj.desc'>Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuint32be_offset_noassert
Buffer readUInt32BE	R	Buffer.readUInt32BE										http://nodejs.org/api/all.html#buffer_buf_readuint32be_offset_noassert
Buffer.readUInt32LE	A										<section class="prog__container"><p id='obj.desc'>Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuint32le_offset_noassert
Buffer readUInt32LE	R	Buffer.readUInt32LE										http://nodejs.org/api/all.html#buffer_buf_readuint32le_offset_noassert
Buffer.readUIntBE	A										<section class="prog__container"><p id='obj.desc'>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuintbe_offset_bytelength_noassert
Buffer readUIntBE	R	Buffer.readUIntBE										http://nodejs.org/api/all.html#buffer_buf_readuintbe_offset_bytelength_noassert
Buffer.readUIntLE	A										<section class="prog__container"><p id='obj.desc'>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_readuintle_offset_bytelength_noassert
Buffer readUIntLE	R	Buffer.readUIntLE										http://nodejs.org/api/all.html#buffer_buf_readuintle_offset_bytelength_noassert
Buffer.slice	A										<section class="prog__container"><p id='obj.desc'>Returns a new <code>Buffer</code> that references the same memory as the original, but\noffset and cropped by the <code>start</code> and <code>end</code> indices.</p><p>Example: Create a <code>Buffer</code> with the ASCII alphabet, take a slice, and then modify\none byte from the original <code>Buffer</code></p><pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &apos;a&apos;\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.slice(0, 3);\n\n// Prints: abc\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\n\nbuf1[0] = 33;\n\n// Prints: !bc\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\n</code></pre><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;buffer&apos;);\n\n// Prints: buffe\n// (Equivalent to buf.slice(0, 5))\nconsole.log(buf.slice(-6, -1).toString());\n\n// Prints: buff\n// (Equivalent to buf.slice(0, 4))\nconsole.log(buf.slice(-6, -2).toString());\n\n// Prints: uff\n// (Equivalent to buf.slice(1, 4))\nconsole.log(buf.slice(-5, -2).toString());\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_slice_start_end
Buffer slice	R	Buffer.slice										http://nodejs.org/api/all.html#buffer_buf_slice_start_end
Buffer.swap16	A										<section class="prog__container"><p id='obj.desc'>Interprets <code>buf</code> as an array of unsigned 16-bit integers and swaps the byte-order\n<em>in-place</em>. Throws a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 2.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap16();\n\n// Prints: &lt;Buffer 02 01 04 03 06 05 08 07&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 16-bits\nbuf2.swap16();\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_swap16
Buffer swap16	R	Buffer.swap16										http://nodejs.org/api/all.html#buffer_buf_swap16
Buffer.swap32	A										<section class="prog__container"><p id='obj.desc'>Interprets <code>buf</code> as an array of unsigned 32-bit integers and swaps the byte-order\n<em>in-place</em>. Throws a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 4.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap32();\n\n// Prints: &lt;Buffer 04 03 02 01 08 07 06 05&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 32-bits\nbuf2.swap32();\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_swap32
Buffer swap32	R	Buffer.swap32										http://nodejs.org/api/all.html#buffer_buf_swap32
Buffer.swap64	A										<section class="prog__container"><p id='obj.desc'>Interprets <code>buf</code> as an array of 64-bit numbers and swaps the byte-order <em>in-place</em>.\nThrows a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 8.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap64();\n\n// Prints: &lt;Buffer 08 07 06 05 04 03 02 01&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 64-bits\nbuf2.swap64();\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_swap64
Buffer swap64	R	Buffer.swap64										http://nodejs.org/api/all.html#buffer_buf_swap64
Buffer.toString	A										<section class="prog__container"><p id='obj.desc'>Decodes <code>buf</code> to a string according to the specified character encoding in\n<code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &apos;a&apos;\n  buf1[i] = i + 97;\n}\n\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString(&apos;ascii&apos;));\n\n// Prints: abcde\nconsole.log(buf1.toString(&apos;ascii&apos;, 0, 5));\n\n\nconst buf2 = Buffer.from(&apos;t&#xE9;st&apos;);\n\n// Prints: 74c3a97374\nconsole.log(buf2.toString(&apos;hex&apos;));\n\n// Prints: t&#xE9;\nconsole.log(buf2.toString(&apos;utf8&apos;, 0, 3));\n\n// Prints: t&#xE9;\nconsole.log(buf2.toString(undefined, 0, 3));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_tostring_encoding_start_end
Buffer toString	R	Buffer.toString										http://nodejs.org/api/all.html#buffer_buf_tostring_encoding_start_end
Buffer.toJSON	A										<section class="prog__container"><p id='obj.desc'>Returns a JSON representation of <code>buf</code>. <code>JSON.stringify()</code> implicitly calls\nthis function when stringifying a <code>Buffer</code> instance.</p><p>Example:</p><pre><code class="lang-js">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// Prints: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\nconsole.log(json);\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === &apos;Buffer&apos;\n    ? Buffer.from(value.data)\n    : value;\n});\n\n// Prints: &lt;Buffer 01 02 03 04 05&gt;\nconsole.log(copy);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_tojson
Buffer toJSON	R	Buffer.toJSON										http://nodejs.org/api/all.html#buffer_buf_tojson
Buffer.values	A										<section class="prog__container"><p id='obj.desc'>Creates and returns an iterator for <code>buf</code> values (bytes). This function is\ncalled automatically when a <code>Buffer</code> is used in a <code>for..of</code> statement.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.from(&apos;buffer&apos;);\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (const value of buf.values()) {\n  console.log(value);\n}\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (const value of buf) {\n  console.log(value);\n}\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_values
Buffer values	R	Buffer.values										http://nodejs.org/api/all.html#buffer_buf_values
Buffer.write	A										<section class="prog__container"><p id='obj.desc'>Writes <code>string</code> to <code>buf</code> at <code>offset</code> according to the character encoding in <code>encoding</code>.\nThe <code>length</code> parameter is the number of bytes to write. If <code>buf</code> did not contain\nenough space to fit the entire string, only a partial amount of <code>string</code> will\nbe written. However, partially encoded characters will not be written.</p><p>Example:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(256);\n\nconst len = buf.write(&apos;\u00bd + \u00bc = \u00be&apos;, 0);\n\n// Prints: 12 bytes: &#xBD; + &#xBC; = &#xBE;\nconsole.log(`${len} bytes: ${buf.toString(&apos;utf8&apos;, 0, len)}`);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_write_string_offset_length_encoding
Buffer write	R	Buffer.write										http://nodejs.org/api/all.html#buffer_buf_write_string_offset_length_encoding
Buffer.writeDoubleBE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writedoublebe_value_offset_noassert
Buffer writeDoubleBE	R	Buffer.writeDoubleBE										http://nodejs.org/api/all.html#buffer_buf_writedoublebe_value_offset_noassert
Buffer.writeDoubleLE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writedoublele_value_offset_noassert
Buffer writeDoubleLE	R	Buffer.writeDoubleLE										http://nodejs.org/api/all.html#buffer_buf_writedoublele_value_offset_noassert
Buffer.writeFloatBE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writefloatbe_value_offset_noassert
Buffer writeFloatBE	R	Buffer.writeFloatBE										http://nodejs.org/api/all.html#buffer_buf_writefloatbe_value_offset_noassert
Buffer.writeFloatLE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writefloatle_value_offset_noassert
Buffer writeFloatLE	R	Buffer.writeFloatLE										http://nodejs.org/api/all.html#buffer_buf_writefloatle_value_offset_noassert
Buffer.writeInt8	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a valid\nsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything other than\na signed 8-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\n// Prints: &lt;Buffer 02 fe&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeint8_value_offset_noassert
Buffer writeInt8	R	Buffer.writeInt8										http://nodejs.org/api/all.html#buffer_buf_writeint8_value_offset_noassert
Buffer.writeInt16BE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 16-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeint16be_value_offset_noassert
Buffer writeInt16BE	R	Buffer.writeInt16BE										http://nodejs.org/api/all.html#buffer_buf_writeint16be_value_offset_noassert
Buffer.writeInt16LE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 16-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeint16le_value_offset_noassert
Buffer writeInt16LE	R	Buffer.writeInt16LE										http://nodejs.org/api/all.html#buffer_buf_writeint16le_value_offset_noassert
Buffer.writeInt32BE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 32-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeint32be_value_offset_noassert
Buffer writeInt32BE	R	Buffer.writeInt32BE										http://nodejs.org/api/all.html#buffer_buf_writeint32be_value_offset_noassert
Buffer.writeInt32LE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 32-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeint32le_value_offset_noassert
Buffer writeInt32LE	R	Buffer.writeInt32LE										http://nodejs.org/api/all.html#buffer_buf_writeint32le_value_offset_noassert
Buffer.writeIntBE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeintbe_value_offset_bytelength_noassert
Buffer writeIntBE	R	Buffer.writeIntBE										http://nodejs.org/api/all.html#buffer_buf_writeintbe_value_offset_bytelength_noassert
Buffer.writeIntLE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeintle_value_offset_bytelength_noassert
Buffer writeIntLE	R	Buffer.writeIntLE										http://nodejs.org/api/all.html#buffer_buf_writeintle_value_offset_bytelength_noassert
Buffer.writeUInt8	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a\nvalid unsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything\nother than an unsigned 8-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\n// Prints: &lt;Buffer 03 04 23 42&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuint8_value_offset_noassert
Buffer writeUInt8	R	Buffer.writeUInt8										http://nodejs.org/api/all.html#buffer_buf_writeuint8_value_offset_noassert
Buffer.writeUInt16BE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuint16be_value_offset_noassert
Buffer writeUInt16BE	R	Buffer.writeUInt16BE										http://nodejs.org/api/all.html#buffer_buf_writeuint16be_value_offset_noassert
Buffer.writeUInt16LE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuint16le_value_offset_noassert
Buffer writeUInt16LE	R	Buffer.writeUInt16LE										http://nodejs.org/api/all.html#buffer_buf_writeuint16le_value_offset_noassert
Buffer.writeUInt32BE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuint32be_value_offset_noassert
Buffer writeUInt32BE	R	Buffer.writeUInt32BE										http://nodejs.org/api/all.html#buffer_buf_writeuint32be_value_offset_noassert
Buffer.writeUInt32LE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuint32le_value_offset_noassert
Buffer writeUInt32LE	R	Buffer.writeUInt32LE										http://nodejs.org/api/all.html#buffer_buf_writeuint32le_value_offset_noassert
Buffer.writeUIntBE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuintbe_value_offset_bytelength_noassert
Buffer writeUIntBE	R	Buffer.writeUIntBE										http://nodejs.org/api/all.html#buffer_buf_writeuintbe_value_offset_bytelength_noassert
Buffer.writeUIntLE	A										<section class="prog__container"><p id='obj.desc'>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.</p><p>Examples:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_writeuintle_value_offset_bytelength_noassert
Buffer writeUIntLE	R	Buffer.writeUIntLE										http://nodejs.org/api/all.html#buffer_buf_writeuintle_value_offset_bytelength_noassert
Buffer.poolSize	A										<section class="prog__container"><p id='obj.desc'>This is the number of bytes used to determine the size of pre-allocated, internal\n<code>Buffer</code> instances used for pooling. This value may be modified.</p></section>	http://nodejs.org/api/all.html#buffer_poolsize
Buffer poolSize	R	Buffer.poolSize										http://nodejs.org/api/all.html#buffer_poolsize
Buffer.[index]	A										<section class="prog__container"><p id='obj.desc'>The index operator <code>[index]</code> can be used to get and set the octet at position\n<code>index</code> in <code>buf</code>. The values refer to individual bytes, so the legal value\nrange is between <code></code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p><p>Example: Copy an ASCII string into a <code>Buffer</code>, one byte at a time</p><pre><code class="lang-js">const str = &apos;Node.js&apos;;\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\n// Prints: Node.js\nconsole.log(buf.toString(&apos;ascii&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_index
Buffer [index]	R	Buffer.[index]										http://nodejs.org/api/all.html#buffer_index
Buffer.length	A										<section class="prog__container"><p id='obj.desc'>Returns the amount of memory allocated for <code>buf</code> in bytes. Note that this\ndoes not necessarily reflect the amount of &quot;usable&quot; data within <code>buf</code>.</p><p>Example: Create a <code>Buffer</code> and write a shorter ASCII string to it</p><pre><code class="lang-js">const buf = Buffer.alloc(1234);\n\n// Prints: 1234\nconsole.log(buf.length);\n\nbuf.write(&apos;some string&apos;, 0, &apos;ascii&apos;);\n\n// Prints: 1234\nconsole.log(buf.length);\n</code></pre><p>Examples:</p><pre><code class="lang-js">let buf = Buffer.allocUnsafe(10);\n\nbuf.write(&apos;abcdefghj&apos;, 0, &apos;ascii&apos;);\n\n// Prints: 10\nconsole.log(buf.length);\n\nbuf = buf.slice(0, 5);\n\n// Prints: 5\nconsole.log(buf.length);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_length
Buffer length	R	Buffer.length										http://nodejs.org/api/all.html#buffer_length
Buffer.alloc	A										<section class="prog__container"><p id='obj.desc'>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the\n<code>Buffer</code> will be <em>zero-filled</em>.</p><p>Example:</p><pre><code class="lang-js">const buf = Buffer.alloc(5);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n</code></pre><p>Example:</p><pre><code class="lang-js">const buf = Buffer.alloc(5, &apos;a&apos;);\n\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\nconsole.log(buf);\n</code></pre><p>Example:</p><pre><code class="lang-js">const buf = Buffer.alloc(11, &apos;aGVsbG8gd29ybGQ=&apos;, &apos;base64&apos;);\n\n// Prints: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_alloc_size_fill_encoding
Buffer alloc	R	Buffer.alloc										http://nodejs.org/api/all.html#buffer_alloc_size_fill_encoding
Buffer.allocUnsafe	A										<section class="prog__container"><p id='obj.desc'>Allocates a new <code>Buffer</code> of <code>size</code> bytes.  If the <code>size</code> is larger than\n<code>buffer.kMaxLength</code> or smaller than 0, a <code>RangeError</code> will be thrown.\nA zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p><p>Example:</p><pre><code class="lang-js">const buf = Buffer.allocUnsafe(10);\n\n// Prints: (contents may vary): &lt;Buffer a0 8b 28 3f 01 00 00 00 50 32&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\nconsole.log(buf);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_allocunsafe_size
Buffer allocUnsafe	R	Buffer.allocUnsafe										http://nodejs.org/api/all.html#buffer_allocunsafe_size
Buffer.allocUnsafeSlow	A										<section class="prog__container"><p id='obj.desc'>Allocates a new <code>Buffer</code> of <code>size</code> bytes.  If the <code>size</code> is larger than\n<code>buffer.kMaxLength</code> or smaller than 0, a <code>RangeError</code> will be thrown.\nA zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p><p>Example:</p><pre><code class="lang-js">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&apos;readable&apos;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_allocunsafeslow_size
Buffer allocUnsafeSlow	R	Buffer.allocUnsafeSlow										http://nodejs.org/api/all.html#buffer_allocunsafeslow_size
Buffer.byteLength	A										<section class="prog__container"><p id='obj.desc'>Returns the actual byte length of a string. This is not the same as\n<code>String.prototype.length</code> since that returns the number of <em>characters</em> in\na string.</p><p>Example:</p><pre><code class="lang-js">const str = &apos;\u00bd + \u00bc = \u00be&apos;;\n\n// Prints: &#xBD; + &#xBC; = &#xBE;: 9 characters, 12 bytes\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, &apos;utf8&apos;)} bytes`);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_bytelength_string_encoding
Buffer byteLength	R	Buffer.byteLength										http://nodejs.org/api/all.html#buffer_bytelength_string_encoding
Buffer.concat	A										<section class="prog__container"><p id='obj.desc'>Returns a new <code>Buffer</code> which is the result of concatenating all the <code>Buffer</code>\ninstances in the <code>list</code> together.</p><p>Example: Create a single <code>Buffer</code> from a list of three <code>Buffer</code> instances</p><pre><code class="lang-js">const buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\n// Prints: 42\nconsole.log(totalLength);\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\n// Prints: &lt;Buffer 00 00 00 00 ...&gt;\nconsole.log(bufA);\n\n// Prints: 42\nconsole.log(bufA.length);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_concat_list_totallength
Buffer concat	R	Buffer.concat										http://nodejs.org/api/all.html#buffer_concat_list_totallength
Buffer.from	D								*[[Buffer.from(buffer_from_arraybuffer_byteoffset_length)]] When passed a reference to the .buffer property of a TypedArray instance, the newly created Buffer will share the same allocated memory as the TypedArray.\n*[[Buffer.from(buffer_from_buffer)]] Copies the passed buffer data onto a new Buffer instance.\n*[[Buffer.from(buffer_from_string_encoding)]] Creates a new Buffer containing the given JavaScript string string. If provided, the encoding parameter identifies the character encoding of string.\n*[[Buffer.from(buffer_from_array)]] Allocates a new Buffer using an array of octets.			
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#buffer_from_array
Buffer.isBuffer	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if <code>obj</code> is a <code>Buffer</code>, <code>false</code> otherwise.</p></section>	http://nodejs.org/api/all.html#buffer_isbuffer_obj
Buffer isBuffer	R	Buffer.isBuffer										http://nodejs.org/api/all.html#buffer_isbuffer_obj
Buffer.isEncoding	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if <code>encoding</code> contains a supported character encoding, or <code>false</code>\notherwise.</p></section>	http://nodejs.org/api/all.html#buffer_isencoding_encoding
Buffer isEncoding	R	Buffer.isEncoding										http://nodejs.org/api/all.html#buffer_isencoding_encoding
SlowBuffer	A										<section class="prog__container"><p id='obj.desc'>Returns an un-pooled <code>Buffer</code>.</p><p>Example:</p><pre><code class="lang-js">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&apos;readable&apos;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#slowbuffer_class_slowbuffer
child_process	A										<section class="prog__container"><p id='obj.desc'>The <code>child_process</code> module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the <code>child_process.spawn()</code> function:</p><p>The <code>child_process</code> module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the <code>child_process.spawn()</code> function:</p><pre><code class="lang-js">const spawn = require(&apos;child_process&apos;).spawn;\nconst ls = spawn(&apos;ls&apos;, [&apos;-lh&apos;, &apos;/usr&apos;]);\n\nls.stdout.on(&apos;data&apos;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&apos;data&apos;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&apos;close&apos;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#child_process_child_process
ChildProcess	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>ChildProcess</code> class are <code>EventEmitters</code> that represent\nspawned child processes.</p></section>	http://nodejs.org/api/all.html#childprocess_class_childprocess
ChildProcess.disconnect	D								*[[ChildProcess.disconnect(childprocess_event_disconnect)]] The &apos;disconnect&apos; event is emitted after calling the child.disconnect   method in parent process or process.disconnect   in child process. After disconnecting it is no longer possible to send or receive messages, and the child.connected property is false.\n*[[ChildProcess.disconnect(child_process_child_disconnect)]] Closes the IPC channel between parent and child, allowing the child to exit gracefully once there are no other connections keeping it alive. After calling this method the child.connected and process.connected properties in both the parent and child  respectively  will be set to false, and it will be no longer possible to pass messages between the processes.			
ChildProcess disconnect	R	ChildProcess.disconnect										http://nodejs.org/api/all.html#child_process_child_disconnect
ChildProcess.kill	A										<section class="prog__container"><p id='obj.desc'>The <code>child.kill()</code> methods sends a signal to the child process. If no argument\nis given, the process will be sent the <code>&apos;SIGTERM&apos;</code> signal. See signal(7) for\na list of available signals.</p><p>The <code>child.kill()</code> methods sends a signal to the child process. If no argument\nis given, the process will be sent the <code>&apos;SIGTERM&apos;</code> signal. See signal(7) for\na list of available signals.</p><pre><code class="lang-js">const spawn = require(&apos;child_process&apos;).spawn;\nconst grep = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\ngrep.on(&apos;close&apos;, (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill(&apos;SIGHUP&apos;);\n</code></pre><p>Also note: on Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such\nas in this example:</p><pre><code class="lang-js">&apos;use strict&apos;;\nconst spawn = require(&apos;child_process&apos;).spawn;\n\nlet child = spawn(&apos;sh&apos;, [&apos;-c&apos;,\n  `node -e &quot;setInterval(() =&gt; {\n      console.log(process.pid, &apos;is alive&apos;)\n    }, 500);&quot;`\n  ], {\n    stdio: [&apos;inherit&apos;, &apos;inherit&apos;, &apos;inherit&apos;]\n  });\n\nsetTimeout(() =&gt; {\n  child.kill(); // does not terminate the node process in the shell\n}, 2000);\n</code></pre></section>	http://nodejs.org/api/all.html#child_process_child_kill_signal
ChildProcess kill	R	ChildProcess.kill										http://nodejs.org/api/all.html#child_process_child_kill_signal
ChildProcess.send	A										<section class="prog__container"><p id='obj.desc'>When an IPC channel has been established between the parent and child (\ni.e. when using <code>child_process.fork()</code>), the <code>child.send()</code> method can be\nused to send messages to the child process. When the child process is a Node.js\ninstance, these messages can be received via the <code>process.on(&apos;message&apos;)</code> event.</p><p>For example, in the parent script:</p><pre><code class="lang-js">const cp = require(&apos;child_process&apos;);\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on(&apos;message&apos;, (m) =&gt; {\n  console.log(&apos;PARENT got message:&apos;, m);\n});\n\nn.send({ hello: &apos;world&apos; });\n</code></pre><p>And then the child script, <code>&apos;sub.js&apos;</code> might look like this:</p><pre><code class="lang-js">process.on(&apos;message&apos;, (m) =&gt; {\n  console.log(&apos;CHILD got message:&apos;, m);\n});\n\nprocess.send({ foo: &apos;bar&apos; });\n</code></pre><p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:</p><pre><code class="lang-js">const child = require(&apos;child_process&apos;).fork(&apos;child.js&apos;);\n\n// Open up the server object and send the handle.\nconst server = require(&apos;net&apos;).createServer();\nserver.on(&apos;connection&apos;, (socket) =&gt; {\n  socket.end(&apos;handled by parent&apos;);\n});\nserver.listen(1337, () =&gt; {\n  child.send(&apos;server&apos;, server);\n});\n</code></pre><p>The child would then receive the server object as:</p><pre><code class="lang-js">process.on(&apos;message&apos;, (m, server) =&gt; {\n  if (m === &apos;server&apos;) {\n    server.on(&apos;connection&apos;, (socket) =&gt; {\n      socket.end(&apos;handled by child&apos;);\n    });\n  }\n});\n</code></pre><p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:</p><pre><code class="lang-js">const normal = require(&apos;child_process&apos;).fork(&apos;child.js&apos;, [&apos;normal&apos;]);\nconst special = require(&apos;child_process&apos;).fork(&apos;child.js&apos;, [&apos;special&apos;]);\n\n// Open up the server and send sockets to child\nconst server = require(&apos;net&apos;).createServer();\nserver.on(&apos;connection&apos;, (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === &apos;74.125.127.100&apos;) {\n    special.send(&apos;socket&apos;, socket);\n    return;\n  }\n  // This is normal priority\n  normal.send(&apos;socket&apos;, socket);\n});\nserver.listen(1337);\n</code></pre><p>The <code>child.js</code> would receive the socket handle as the second argument passed\nto the event callback function:</p><pre><code class="lang-js">process.on(&apos;message&apos;, (m, socket) =&gt; {\n  if (m === &apos;socket&apos;) {\n    socket.end(`Request handled with ${process.argv[2]} priority`);\n  }\n});\n</code></pre></section>	http://nodejs.org/api/all.html#child_process_child_send_message_sendhandle_options_callback
ChildProcess send	R	ChildProcess.send										http://nodejs.org/api/all.html#child_process_child_send_message_sendhandle_options_callback
ChildProcess.channel	A										<section class="prog__container"><p id='obj.desc'>The <code>child.channel</code> property is a reference to the child&apos;s IPC channel. If no\nIPC channel currently exists, this property is <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#child_process_child_channel
ChildProcess channel	R	ChildProcess.channel										http://nodejs.org/api/all.html#child_process_child_channel
ChildProcess.connected	A										<section class="prog__container"><p id='obj.desc'>The <code>child.connected</code> property indicates whether it is still possible to send\nand receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it\nis no longer possible to send or receive messages.</p></section>	http://nodejs.org/api/all.html#child_process_child_connected_is_called
ChildProcess connected	R	ChildProcess.connected										http://nodejs.org/api/all.html#child_process_child_connected_is_called
ChildProcess.pid	A										<section class="prog__container"><p id='obj.desc'>Returns the process identifier (PID) of the child process.</p><p>Example:</p><pre><code class="lang-js">const spawn = require(&apos;child_process&apos;).spawn;\nconst grep = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n</code></pre></section>	http://nodejs.org/api/all.html#child_process_child_pid
ChildProcess pid	R	ChildProcess.pid										http://nodejs.org/api/all.html#child_process_child_pid
ChildProcess.stderr	A										<section class="prog__container"><p id='obj.desc'>A <code>Readable Stream</code> that represents the child process&apos;s <code>stderr</code>.</p></section>	http://nodejs.org/api/all.html#child_process_child_stderr
ChildProcess stderr	R	ChildProcess.stderr										http://nodejs.org/api/all.html#child_process_child_stderr
ChildProcess.stdin	A										<section class="prog__container"><p id='obj.desc'>A <code>Writable Stream</code> that represents the child process&apos;s <code>stdin</code>.</p></section>	http://nodejs.org/api/all.html#child_process_child_stdin
ChildProcess stdin	R	ChildProcess.stdin										http://nodejs.org/api/all.html#child_process_child_stdin
ChildProcess.stdio	A										<section class="prog__container"><p id='obj.desc'>A sparse array of pipes to the child process, corresponding with positions in\nthe <code>stdio</code> option passed to <code>child_process.spawn()</code> that have been set\nto the value <code>&apos;pipe&apos;</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and\n<code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and\n<code>child.stderr</code>, respectively.</p><p>In the following example, only the child&apos;s fd <code>1</code> (stdout) is configured as a\npipe, so only the parent&apos;s <code>child.stdio[1]</code> is a stream, all other values in\nthe array are <code>null</code>.</p><pre><code class="lang-js">const assert = require(&apos;assert&apos;);\nconst fs = require(&apos;fs&apos;);\nconst child_process = require(&apos;child_process&apos;);\n\nconst child = child_process.spawn(&apos;ls&apos;, {\n    stdio: [\n      0, // Use parents stdin for child\n      &apos;pipe&apos;, // Pipe child&apos;s stdout to parent\n      fs.openSync(&apos;err.out&apos;, &apos;w&apos;) // Direct child&apos;s stderr to a file\n    ]\n});\n\nassert.equal(child.stdio[0], null);\nassert.equal(child.stdio[0], child.stdin);\n\nassert(child.stdout);\nassert.equal(child.stdio[1], child.stdout);\n\nassert.equal(child.stdio[2], null);\nassert.equal(child.stdio[2], child.stderr);\n</code></pre></section>	http://nodejs.org/api/all.html#child_process_child_stdio
ChildProcess stdio	R	ChildProcess.stdio										http://nodejs.org/api/all.html#child_process_child_stdio
ChildProcess.stdout	A										<section class="prog__container"><p id='obj.desc'>A <code>Readable Stream</code> that represents the child process&apos;s <code>stdout</code>.</p></section>	http://nodejs.org/api/all.html#child_process_child_stdout
ChildProcess stdout	R	ChildProcess.stdout										http://nodejs.org/api/all.html#child_process_child_stdout
ChildProcess.close	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;close&apos;</code> event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the <code>&apos;exit&apos;</code> event, since multiple\nprocesses might share the same stdio streams.</p></section>	http://nodejs.org/api/all.html#childprocess_event_close
ChildProcess close	R	ChildProcess.close										http://nodejs.org/api/all.html#childprocess_event_close
ChildProcess.error	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;error&apos;</code> event is emitted whenever:</p></section>	http://nodejs.org/api/all.html#childprocess_event_error
ChildProcess error	R	ChildProcess.error										http://nodejs.org/api/all.html#childprocess_event_error
ChildProcess.exit	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;exit&apos;</code> event is emitted after the child process ends. If the process\nexited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the\nprocess terminated due to receipt of a signal, <code>signal</code> is the string name of\nthe signal, otherwise <code>null</code>. One of the two will always be non-null.</p></section>	http://nodejs.org/api/all.html#childprocess_event_exit
ChildProcess exit	R	ChildProcess.exit										http://nodejs.org/api/all.html#childprocess_event_exit
ChildProcess.message	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;message&apos;</code> event is triggered when a child process uses <code>process.send()</code>\nto send messages.</p></section>	http://nodejs.org/api/all.html#childprocess_event_message
ChildProcess message	R	ChildProcess.message										http://nodejs.org/api/all.html#childprocess_event_message
cluster	A										<section class="prog__container"><p id='obj.desc'>A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.</p><p>The cluster module allows you to easily create child processes that\nall share server ports.</p><pre><code class="lang-js">const cluster = require(&apos;cluster&apos;);\nconst http = require(&apos;http&apos;);\nconst numCPUs = require(&apos;os&apos;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&apos;exit&apos;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&apos;hello world\n&apos;);\n  }).listen(8000);\n}\n</code></pre><p>Running Node.js will now share port 8000 between the workers:</p><pre><code class="lang-txt">$ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#cluster_cluster
cluster.disconnect	D								*[[cluster.disconnect(cluster_event_disconnect)]] Emitted after the worker IPC channel has disconnected. This can occur when a worker exits gracefully, is killed, or is disconnected manually  such as with worker.disconnect   .\n*[[cluster.disconnect(cluster_cluster_disconnect_callback)]] Calls .disconnect   on each worker in cluster.workers.			
cluster disconnect	R	cluster.disconnect										http://nodejs.org/api/all.html#cluster_cluster_disconnect_callback
cluster.fork	D								*[[cluster.fork(cluster_event_fork)]] When a new worker is forked the cluster module will emit a &apos;fork&apos; event. This can be used to log worker activity, and create your own timeout.\n*[[cluster.fork(cluster_cluster_fork_env)]] Spawn a new worker process.			
cluster fork	R	cluster.fork										http://nodejs.org/api/all.html#cluster_cluster_fork_env
cluster.setupMaster	A										<section class="prog__container"><p id='obj.desc'><code>setupMaster</code> is used to change the default &apos;fork&apos; behavior. Once called,\nthe settings will be present in <code>cluster.settings</code>.</p><p>Example:</p><pre><code class="lang-js">const cluster = require(&apos;cluster&apos;);\ncluster.setupMaster({\n  exec: &apos;worker.js&apos;,\n  args: [&apos;--use&apos;, &apos;https&apos;],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: &apos;worker.js&apos;,\n  args: [&apos;--use&apos;, &apos;http&apos;]\n});\ncluster.fork(); // http worker\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_cluster_setupmaster_settings
cluster setupMaster	R	cluster.setupMaster										http://nodejs.org/api/all.html#cluster_cluster_setupmaster_settings
cluster.isMaster	A										<section class="prog__container"><p id='obj.desc'>True if the process is a master. This is determined\nby the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is\nundefined, then <code>isMaster</code> is <code>true</code>.</p></section>	http://nodejs.org/api/all.html#cluster_cluster_ismaster
cluster isMaster	R	cluster.isMaster										http://nodejs.org/api/all.html#cluster_cluster_ismaster
cluster.isWorker	A										<section class="prog__container"><p id='obj.desc'>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p></section>	http://nodejs.org/api/all.html#cluster_cluster_isworker
cluster isWorker	R	cluster.isWorker										http://nodejs.org/api/all.html#cluster_cluster_isworker
cluster.schedulingPolicy	A										<section class="prog__container"><p id='obj.desc'>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or\n<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a\nglobal setting and effectively frozen once you spawn the first worker\nor call <code>cluster.setupMaster()</code>, whatever comes first.</p></section>	http://nodejs.org/api/all.html#cluster_cluster_schedulingpolicy
cluster schedulingPolicy	R	cluster.schedulingPolicy										http://nodejs.org/api/all.html#cluster_cluster_schedulingpolicy
cluster.settings	A										<section class="prog__container"><p id='obj.desc'>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain\nthe settings, including the default values.</p></section>	http://nodejs.org/api/all.html#cluster_cluster_settings
cluster settings	R	cluster.settings										http://nodejs.org/api/all.html#cluster_cluster_settings
cluster.worker	A										<section class="prog__container"><p id='obj.desc'>A reference to the current worker object. Not available in the master process.</p><p>A reference to the current worker object. Not available in the master process.</p><pre><code class="lang-js">const cluster = require(&apos;cluster&apos;);\n\nif (cluster.isMaster) {\n  console.log(&apos;I am master&apos;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_cluster_worker
cluster worker	R	cluster.worker										http://nodejs.org/api/all.html#cluster_cluster_worker
cluster.workers	A										<section class="prog__container"><p id='obj.desc'>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.</p><p>A worker is removed from cluster.workers after the worker has disconnected <em>and</em>\nexited. The order between these two events cannot be determined in advance.\nHowever, it is guaranteed that the removal from the cluster.workers list happens\nbefore last <code>&apos;disconnect&apos;</code> or <code>&apos;exit&apos;</code> event is emitted.</p><pre><code class="lang-js">// Go through all workers\nfunction eachWorker(callback) {\n  for (var id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send(&apos;big announcement to all workers&apos;);\n});\n</code></pre><p>Should you wish to reference a worker over a communication channel, using\nthe worker&apos;s unique id is the easiest way to find the worker.</p><pre><code class="lang-js">socket.on(&apos;data&apos;, (id) =&gt; {\n  var worker = cluster.workers[id];\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_cluster_workers
cluster workers	R	cluster.workers										http://nodejs.org/api/all.html#cluster_cluster_workers
Worker	A										<section class="prog__container"><p id='obj.desc'>A Worker object contains all public information and method about a worker.\nIn the master it can be obtained using <code>cluster.workers</code>. In a worker\nit can be obtained using <code>cluster.worker</code>.</p></section>	http://nodejs.org/api/all.html#worker_class_worker
Worker.disconnect	D								*[[Worker.disconnect(worker_event_disconnect)]] Similar to the cluster.on &apos;disconnect&apos;  event, but specific to this worker.\n*[[Worker.disconnect(cluster_worker_disconnect)]] In a worker, this function will close all servers, wait for the &apos;close&apos; event on those servers, and then disconnect the IPC channel.			
Worker disconnect	R	Worker.disconnect										http://nodejs.org/api/all.html#cluster_worker_disconnect
Worker.isConnected	A										<section class="prog__container"><p id='obj.desc'>This function returns <code>true</code> if the worker is connected to its master via its IPC\nchannel, <code>false</code> otherwise. A worker is connected to its master after it&apos;s been\ncreated. It is disconnected after the <code>&apos;disconnect&apos;</code> event is emitted.</p></section>	http://nodejs.org/api/all.html#cluster_worker_isconnected
Worker isConnected	R	Worker.isConnected										http://nodejs.org/api/all.html#cluster_worker_isconnected
Worker.isDead	A										<section class="prog__container"><p id='obj.desc'>This function returns <code>true</code> if the worker&apos;s process has terminated (either\nbecause of exiting or being signaled). Otherwise, it returns <code>false</code>.</p></section>	http://nodejs.org/api/all.html#cluster_worker_isdead
Worker isDead	R	Worker.isDead										http://nodejs.org/api/all.html#cluster_worker_isdead
Worker.kill	A										<section class="prog__container"><p id='obj.desc'>This function will kill the worker. In the master, it does this by disconnecting\nthe <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the\nworker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p></section>	http://nodejs.org/api/all.html#cluster_worker_kill_signal_sigterm
Worker kill	R	Worker.kill										http://nodejs.org/api/all.html#cluster_worker_kill_signal_sigterm
Worker.send	A										<section class="prog__container"><p id='obj.desc'>Send a message to a worker or master, optionally with a handle.</p><p>This example will echo back all messages from the master:</p><pre><code class="lang-js">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&apos;hi there&apos;);\n\n} else if (cluster.isWorker) {\n  process.on(&apos;message&apos;, (msg) =&gt; {\n    process.send(msg);\n  });\n}\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_worker_send_message_sendhandle_callback
Worker send	R	Worker.send										http://nodejs.org/api/all.html#cluster_worker_send_message_sendhandle_callback
Worker.exitedAfterDisconnect	A										<section class="prog__container"><p id='obj.desc'>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p><p>The boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.</p><pre><code class="lang-js">cluster.on(&apos;exit&apos;, (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log(&apos;Oh, it was just voluntary &#x2013; no need to worry&apos;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_worker_exitedafterdisconnect
Worker exitedAfterDisconnect	R	Worker.exitedAfterDisconnect										http://nodejs.org/api/all.html#cluster_worker_exitedafterdisconnect
Worker.id	A										<section class="prog__container"><p id='obj.desc'>Each new worker is given its own unique id, this id is stored in the\n<code>id</code>.</p></section>	http://nodejs.org/api/all.html#cluster_worker_id
Worker id	R	Worker.id										http://nodejs.org/api/all.html#cluster_worker_id
Worker.suicide	A										<section class="prog__container"><p id='obj.desc'>An alias to <code>worker.exitedAfterDisconnect</code>.</p><p>The boolean <code>worker.suicide</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.</p><pre><code class="lang-js">cluster.on(&apos;exit&apos;, (worker, code, signal) =&gt; {\n  if (worker.suicide === true) {\n    console.log(&apos;Oh, it was just voluntary &#x2013; no need to worry&apos;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_worker_suicide
Worker suicide	R	Worker.suicide										http://nodejs.org/api/all.html#cluster_worker_suicide
Worker.error	A										<section class="prog__container"><p id='obj.desc'>This event is the same as the one provided by <code>child_process.fork()</code>.</p></section>	http://nodejs.org/api/all.html#worker_event_error
Worker error	R	Worker.error										http://nodejs.org/api/all.html#worker_event_error
Worker.exit	A										<section class="prog__container"><p id='obj.desc'>Similar to the <code>cluster.on(&apos;exit&apos;)</code> event, but specific to this worker.</p><p>Similar to the <code>cluster.on(&apos;exit&apos;)</code> event, but specific to this worker.</p><pre><code class="lang-js">const worker = cluster.fork();\nworker.on(&apos;exit&apos;, (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log(&apos;worker success!&apos;);\n  }\n});\n</code></pre></section>	http://nodejs.org/api/all.html#worker_event_exit
Worker exit	R	Worker.exit										http://nodejs.org/api/all.html#worker_event_exit
Worker.listening	A										<section class="prog__container"><p id='obj.desc'>Similar to the <code>cluster.on(&apos;listening&apos;)</code> event, but specific to this worker.</p><p>Similar to the <code>cluster.on(&apos;listening&apos;)</code> event, but specific to this worker.</p><pre><code class="lang-js">cluster.fork().on(&apos;listening&apos;, (address) =&gt; {\n  // Worker is listening\n});\n</code></pre></section>	http://nodejs.org/api/all.html#worker_event_listening
Worker listening	R	Worker.listening										http://nodejs.org/api/all.html#worker_event_listening
Worker.message	A										<section class="prog__container"><p id='obj.desc'>Similar to the <code>cluster.on(&apos;message&apos;)</code> event, but specific to this worker. In a\nworker you can also use <code>process.on(&apos;message&apos;)</code>.</p><p>As an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:</p><pre><code class="lang-js">const cluster = require(&apos;cluster&apos;);\nconst http = require(&apos;http&apos;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(&apos;numReqs =&apos;, numReqs);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &apos;notifyRequest&apos;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require(&apos;os&apos;).cpus().length;\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  Object.keys(cluster.workers).forEach((id) =&gt; {\n    cluster.workers[id].on(&apos;message&apos;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&apos;hello world\n&apos;);\n\n    // notify master about the request\n    process.send({ cmd: &apos;notifyRequest&apos; });\n  }).listen(8000);\n}\n</code></pre></section>	http://nodejs.org/api/all.html#worker_event_message
Worker message	R	Worker.message										http://nodejs.org/api/all.html#worker_event_message
Worker.online	A										<section class="prog__container"><p id='obj.desc'>Similar to the <code>cluster.on(&apos;online&apos;)</code> event, but specific to this worker.</p><p>Similar to the <code>cluster.on(&apos;online&apos;)</code> event, but specific to this worker.</p><pre><code class="lang-js">cluster.fork().on(&apos;online&apos;, () =&gt; {\n  // Worker is online\n});\n</code></pre></section>	http://nodejs.org/api/all.html#worker_event_online
Worker online	R	Worker.online										http://nodejs.org/api/all.html#worker_event_online
cluster.exit	A										<section class="prog__container"><p id='obj.desc'>When any of the workers die the cluster module will emit the <code>&apos;exit&apos;</code> event.</p><p>This can be used to restart the worker by calling <code>.fork()</code> again.</p><pre><code class="lang-js">cluster.on(&apos;exit&apos;, (worker, code, signal) =&gt; {\n  console.log(&apos;worker %d died (%s). restarting...&apos;,\n    worker.process.pid, signal || code);\n  cluster.fork();\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_exit
cluster exit	R	cluster.exit										http://nodejs.org/api/all.html#cluster_event_exit
cluster.listening	A										<section class="prog__container"><p id='obj.desc'>After calling <code>listen()</code> from a worker, when the <code>&apos;listening&apos;</code> event is emitted on\nthe server, a <code>&apos;listening&apos;</code> event will also be emitted on <code>cluster</code> in the master.</p><p>The event handler is executed with two arguments, the <code>worker</code> contains the worker\nobject and the <code>address</code> object contains the following connection properties:\n<code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening\non more than one address.</p><pre><code class="lang-js">cluster.on(&apos;listening&apos;, (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_listening
cluster listening	R	cluster.listening										http://nodejs.org/api/all.html#cluster_event_listening
cluster.message	A										<section class="prog__container"><p id='obj.desc'>Emitted when the cluster master receives a message from any worker.</p><p>If you need to support older versions and don&apos;t need the worker object,\nyou can work around the discrepancy by checking the number of arguments:</p><pre><code class="lang-js">cluster.on(&apos;message&apos;, function(worker, message, handle) {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_message
cluster message	R	cluster.message										http://nodejs.org/api/all.html#cluster_event_message
cluster.online	A										<section class="prog__container"><p id='obj.desc'>After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between <code>&apos;fork&apos;</code> and <code>&apos;online&apos;</code> is that fork is emitted when the\nmaster forks a worker, and &apos;online&apos; is emitted when the worker is running.</p><p>After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between <code>&apos;fork&apos;</code> and <code>&apos;online&apos;</code> is that fork is emitted when the\nmaster forks a worker, and &apos;online&apos; is emitted when the worker is running.</p><pre><code class="lang-js">cluster.on(&apos;online&apos;, (worker) =&gt; {\n  console.log(&apos;Yay, the worker responded after it was forked&apos;);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_online
cluster online	R	cluster.online										http://nodejs.org/api/all.html#cluster_event_online
cluster.setup	A										<section class="prog__container"><p id='obj.desc'>Emitted every time <code>.setupMaster()</code> is called.</p></section>	http://nodejs.org/api/all.html#cluster_event_setup
cluster setup	R	cluster.setup										http://nodejs.org/api/all.html#cluster_event_setup
crypto	A										<section class="prog__container"><p id='obj.desc'>The <code>crypto</code> module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&apos;s hash, HMAC, cipher, decipher, sign and verify functions.</p><p>Use <code>require(&apos;crypto&apos;)</code> to access this module.</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\n\nconst secret = &apos;abcdefg&apos;;\nconst hash = crypto.createHmac(&apos;sha256&apos;, secret)\n                   .update(&apos;I love cupcakes&apos;)\n                   .digest(&apos;hex&apos;);\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#crypto_crypto
crypto.Certificate	A										<section class="prog__container"><p id='obj.desc'>SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and now specified formally as part of HTML5&apos;s <code>keygen</code> element.</p></section>	http://nodejs.org/api/all.html#crypto_class_certificate
crypto Certificate	R	crypto.Certificate										http://nodejs.org/api/all.html#crypto_class_certificate
crypto.Certificate.Certificate	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\nor by calling <code>crypto.Certificate()</code> as a function:</p><p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\nor by calling <code>crypto.Certificate()</code> as a function:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n</code></pre><pre><code>new crypto.Certificate()</code></pre></section>	http://nodejs.org/api/all.html#crypto_certificate_certificate
crypto Certificate Certificate	R	crypto.Certificate Certificate										http://nodejs.org/api/all.html#crypto_certificate_certificate
crypto.Certificate.exportChallenge	A										<section class="prog__container"><p id='obj.desc'>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportChallenge()</code> returns the challenge component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.</p><p>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportChallenge()</code> returns the challenge component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.</p><pre><code class="lang-js">const cert = require(&apos;crypto&apos;).Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString(&apos;utf8&apos;));\n// Prints: the challenge as a UTF8 string\n</code></pre><pre><code>certificate.exportChallenge(spkac)</code></pre></section>	http://nodejs.org/api/all.html#crypto_certificate_exportchallenge_spkac
crypto Certificate exportChallenge	R	crypto.Certificate exportChallenge										http://nodejs.org/api/all.html#crypto_certificate_exportchallenge_spkac
crypto.Certificate.exportPublicKey	A										<section class="prog__container"><p id='obj.desc'>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportPublicKey()</code> returns the public key component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.</p><p>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportPublicKey()</code> returns the public key component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.</p><pre><code class="lang-js">const cert = require(&apos;crypto&apos;).Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n</code></pre><pre><code>certificate.exportPublicKey(spkac)</code></pre></section>	http://nodejs.org/api/all.html#crypto_certificate_exportpublickey_spkac
crypto Certificate exportPublicKey	R	crypto.Certificate exportPublicKey										http://nodejs.org/api/all.html#crypto_certificate_exportpublickey_spkac
crypto.Certificate.verifySpkac	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.\nThe <code>spkac</code> argument must be a Node.js <code>Buffer</code>.</p><p>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.\nThe <code>spkac</code> argument must be a Node.js <code>Buffer</code>.</p><pre><code class="lang-js">const cert = require(&apos;crypto&apos;).Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n</code></pre><pre><code>certificate.verifySpkac(spkac)</code></pre></section>	http://nodejs.org/api/all.html#crypto_certificate_verifyspkac_spkac
crypto Certificate verifySpkac	R	crypto.Certificate verifySpkac										http://nodejs.org/api/all.html#crypto_certificate_verifyspkac_spkac
crypto.Cipher	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be\nused in one of two ways:</p><p>Example: Using <code>Cipher</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst cipher = crypto.createCipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nvar encrypted = &apos;&apos;;\ncipher.on(&apos;readable&apos;, () =&gt; {\n  var data = cipher.read();\n  if (data)\n    encrypted += data.toString(&apos;hex&apos;);\n});\ncipher.on(&apos;end&apos;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&apos;some clear text data&apos;);\ncipher.end();\n</code></pre><p>Example: Using <code>Cipher</code> and piped streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst fs = require(&apos;fs&apos;);\nconst cipher = crypto.createCipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nconst input = fs.createReadStream(&apos;test.js&apos;);\nconst output = fs.createWriteStream(&apos;test.enc&apos;);\n\ninput.pipe(cipher).pipe(output);\n</code></pre><p>Example: Using the <code>cipher.update()</code> and <code>cipher.final()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst cipher = crypto.createCipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nvar encrypted = cipher.update(&apos;some clear text data&apos;, &apos;utf8&apos;, &apos;hex&apos;);\nencrypted += cipher.final(&apos;hex&apos;);\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_cipher
crypto Cipher	R	crypto.Cipher										http://nodejs.org/api/all.html#crypto_class_cipher
crypto.Cipher.final	A										<section class="prog__container"><p id='obj.desc'>Returns any remaining enciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&apos;latin1&apos;</code>, <code>&apos;base64&apos;</code> or <code>&apos;hex&apos;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <code>Buffer</code> is returned.</p><pre><code>cipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_cipher_final_output_encoding
crypto Cipher final	R	crypto.Cipher final										http://nodejs.org/api/all.html#crypto_cipher_final_output_encoding
crypto.Cipher.setAAD	A										<section class="prog__container"><p id='obj.desc'>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p><pre><code>cipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#crypto_cipher_setaad_buffer
crypto Cipher setAAD	R	crypto.Cipher setAAD										http://nodejs.org/api/all.html#crypto_cipher_setaad_buffer
crypto.Cipher.getAuthTag	A										<section class="prog__container"><p id='obj.desc'>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.getAuthTag()</code> method returns a <code>Buffer</code> containing\nthe <em>authentication tag</em> that has been computed from the given data.</p><pre><code>cipher.getAuthTag()</code></pre></section>	http://nodejs.org/api/all.html#crypto_cipher_getauthtag
crypto Cipher getAuthTag	R	crypto.Cipher getAuthTag										http://nodejs.org/api/all.html#crypto_cipher_getauthtag
crypto.Cipher.setAutoPadding	A										<section class="prog__container"><p id='obj.desc'>When using block encryption algorithms, the <code>Cipher</code> class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call <code>cipher.setAutoPadding(false)</code>.</p><pre><code>cipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#crypto_cipher_setautopadding_auto_padding_true
crypto Cipher setAutoPadding	R	crypto.Cipher setAutoPadding										http://nodejs.org/api/all.html#crypto_cipher_setautopadding_auto_padding_true
crypto.Cipher.update	A										<section class="prog__container"><p id='obj.desc'>Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nits value must be one of <code>&apos;utf8&apos;</code>, <code>&apos;ascii&apos;</code>, or <code>&apos;latin1&apos;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <code>Buffer</code>. If <code>data</code> is a\n<code>Buffer</code> then <code>input_encoding</code> is ignored.</p><pre><code>cipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_cipher_update_data_input_encoding_output_encoding
crypto Cipher update	R	crypto.Cipher update										http://nodejs.org/api/all.html#crypto_cipher_update_data_input_encoding_output_encoding
crypto.Decipher	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be\nused in one of two ways:</p><p>Example: Using <code>Decipher</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst decipher = crypto.createDecipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nvar decrypted = &apos;&apos;;\ndecipher.on(&apos;readable&apos;, () =&gt; {\n  var data = decipher.read();\n  if (data)\n    decrypted += data.toString(&apos;utf8&apos;);\n});\ndecipher.on(&apos;end&apos;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nvar encrypted = &apos;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&apos;;\ndecipher.write(encrypted, &apos;hex&apos;);\ndecipher.end();\n</code></pre><p>Example: Using <code>Decipher</code> and piped streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst fs = require(&apos;fs&apos;);\nconst decipher = crypto.createDecipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nconst input = fs.createReadStream(&apos;test.enc&apos;);\nconst output = fs.createWriteStream(&apos;test.js&apos;);\n\ninput.pipe(decipher).pipe(output);\n</code></pre><p>Example: Using the <code>decipher.update()</code> and <code>decipher.final()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst decipher = crypto.createDecipher(&apos;aes192&apos;, &apos;a password&apos;);\n\nvar encrypted = &apos;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&apos;;\nvar decrypted = decipher.update(encrypted, &apos;hex&apos;, &apos;utf8&apos;);\ndecrypted += decipher.final(&apos;utf8&apos;);\nconsole.log(decrypted);\n// Prints: some clear text data\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_decipher
crypto Decipher	R	crypto.Decipher										http://nodejs.org/api/all.html#crypto_class_decipher
crypto.Decipher.final	A										<section class="prog__container"><p id='obj.desc'>Returns any remaining deciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&apos;latin1&apos;</code>, <code>&apos;ascii&apos;</code> or <code>&apos;utf8&apos;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <code>Buffer</code> is returned.</p><pre><code>decipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_decipher_final_output_encoding
crypto Decipher final	R	crypto.Decipher final										http://nodejs.org/api/all.html#crypto_decipher_final_output_encoding
crypto.Decipher.setAAD	A										<section class="prog__container"><p id='obj.desc'>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>decipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p><pre><code>decipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#crypto_decipher_setaad_buffer
crypto Decipher setAAD	R	crypto.Decipher setAAD										http://nodejs.org/api/all.html#crypto_decipher_setaad_buffer
crypto.Decipher.setAuthTag	A										<section class="prog__container"><p id='obj.desc'>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>decipher.setAuthTag()</code> method is used to pass in the\nreceived <em>authentication tag</em>. If no tag is provided, or if the cipher text\nhas been tampered with, <code>decipher.final()</code> with throw, indicating that the\ncipher text should be discarded due to failed authentication.</p><pre><code>decipher.setAuthTag(buffer)</code></pre></section>	http://nodejs.org/api/all.html#crypto_decipher_setauthtag_buffer
crypto Decipher setAuthTag	R	crypto.Decipher setAuthTag										http://nodejs.org/api/all.html#crypto_decipher_setauthtag_buffer
crypto.Decipher.setAutoPadding	A										<section class="prog__container"><p id='obj.desc'>When data has been encrypted without standard block padding, calling\n<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent\n<code>decipher.final()</code> from checking for and removing padding.</p><pre><code>decipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#crypto_decipher_setautopadding_auto_padding_true
crypto Decipher setAutoPadding	R	crypto.Decipher setAutoPadding										http://nodejs.org/api/all.html#crypto_decipher_setautopadding_auto_padding_true
crypto.Decipher.update	A										<section class="prog__container"><p id='obj.desc'>Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nits value must be one of <code>&apos;latin1&apos;</code>, <code>&apos;base64&apos;</code>, or <code>&apos;hex&apos;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <code>Buffer</code>. If <code>data</code> is a\n<code>Buffer</code> then <code>input_encoding</code> is ignored.</p><pre><code>decipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_decipher_update_data_input_encoding_output_encoding
crypto Decipher update	R	crypto.Decipher update										http://nodejs.org/api/all.html#crypto_decipher_update_data_input_encoding_output_encoding
crypto.DiffieHellman	A										<section class="prog__container"><p id='obj.desc'>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key\nexchanges.</p><p>Instances of the <code>DiffieHellman</code> class can be created using the\n<code>crypto.createDiffieHellman()</code> function.</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst assert = require(&apos;assert&apos;);\n\n// Generate Alice&apos;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&apos;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\n// OK\nassert.equal(alice_secret.toString(&apos;hex&apos;), bob_secret.toString(&apos;hex&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_diffiehellman
crypto DiffieHellman	R	crypto.DiffieHellman										http://nodejs.org/api/all.html#crypto_class_diffiehellman
crypto.DiffieHellman.computeSecret	A										<section class="prog__container"><p id='obj.desc'>Computes the shared secret using <code>other_public_key</code> as the other\nparty&apos;s public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified <code>input_encoding</code>, and secret is\nencoded using specified <code>output_encoding</code>. Encodings can be\n<code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <code>Buffer</code>.</p><pre><code>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
crypto DiffieHellman computeSecret	R	crypto.DiffieHellman computeSecret										http://nodejs.org/api/all.html#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
crypto.DiffieHellman.generateKeys	A										<section class="prog__container"><p id='obj.desc'>Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified <code>encoding</code>. This key should be\ntransferred to the other party. Encoding can be <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>,\nor <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided a string is returned; otherwise a\n<code>Buffer</code> is returned.</p><pre><code>diffieHellman.generateKeys([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_generatekeys_encoding
crypto DiffieHellman generateKeys	R	crypto.DiffieHellman generateKeys										http://nodejs.org/api/all.html#crypto_diffiehellman_generatekeys_encoding
crypto.DiffieHellman.getGenerator	A										<section class="prog__container"><p id='obj.desc'>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can\nbe <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If  <code>encoding</code> is provided a string is\nreturned; otherwise a <code>Buffer</code> is returned.</p><pre><code>diffieHellman.getGenerator([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_getgenerator_encoding
crypto DiffieHellman getGenerator	R	crypto.DiffieHellman getGenerator										http://nodejs.org/api/all.html#crypto_diffiehellman_getgenerator_encoding
crypto.DiffieHellman.getPrime	A										<section class="prog__container"><p id='obj.desc'>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can\nbe <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided a string is\nreturned; otherwise a <code>Buffer</code> is returned.</p><pre><code>diffieHellman.getPrime([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_getprime_encoding
crypto DiffieHellman getPrime	R	crypto.DiffieHellman getPrime										http://nodejs.org/api/all.html#crypto_diffiehellman_getprime_encoding
crypto.DiffieHellman.getPrivateKey	A										<section class="prog__container"><p id='obj.desc'>Returns the Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <code>Buffer</code> is returned.</p><pre><code>diffieHellman.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_getprivatekey_encoding
crypto DiffieHellman getPrivateKey	R	crypto.DiffieHellman getPrivateKey										http://nodejs.org/api/all.html#crypto_diffiehellman_getprivatekey_encoding
crypto.DiffieHellman.getPublicKey	A										<section class="prog__container"><p id='obj.desc'>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which\ncan be <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <code>Buffer</code> is returned.</p><pre><code>diffieHellman.getPublicKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_getpublickey_encoding
crypto DiffieHellman getPublicKey	R	crypto.DiffieHellman getPublicKey										http://nodejs.org/api/all.html#crypto_diffiehellman_getpublickey_encoding
crypto.DiffieHellman.setPrivateKey	A										<section class="prog__container"><p id='obj.desc'>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided\nand is either <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>, <code>private_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a <code>Buffer</code>.</p><pre><code>diffieHellman.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_setprivatekey_private_key_encoding
crypto DiffieHellman setPrivateKey	R	crypto.DiffieHellman setPrivateKey										http://nodejs.org/api/all.html#crypto_diffiehellman_setprivatekey_private_key_encoding
crypto.DiffieHellman.setPublicKey	A										<section class="prog__container"><p id='obj.desc'>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided\nand is either <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code> or <code>&apos;base64&apos;</code>, <code>public_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected\nto be a <code>Buffer</code>.</p><pre><code>diffieHellman.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_setpublickey_public_key_encoding
crypto DiffieHellman setPublicKey	R	crypto.DiffieHellman setPublicKey										http://nodejs.org/api/all.html#crypto_diffiehellman_setpublickey_public_key_encoding
crypto.DiffieHellman.verifyError	A										<section class="prog__container"><p id='obj.desc'>A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the <code>DiffieHellman</code> object.</p></section>	http://nodejs.org/api/all.html#crypto_diffiehellman_verifyerror
crypto DiffieHellman verifyError	R	crypto.DiffieHellman verifyError										http://nodejs.org/api/all.html#crypto_diffiehellman_verifyerror
crypto.ECDH	A										<section class="prog__container"><p id='obj.desc'>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.</p><p>Instances of the <code>ECDH</code> class can be created using the\n<code>crypto.createECDH()</code> function.</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst assert = require(&apos;assert&apos;);\n\n// Generate Alice&apos;s keys...\nconst alice = crypto.createECDH(&apos;secp521r1&apos;);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&apos;s keys...\nconst bob = crypto.createECDH(&apos;secp521r1&apos;);\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\nassert(alice_secret, bob_secret);\n  // OK\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_ecdh
crypto ECDH	R	crypto.ECDH										http://nodejs.org/api/all.html#crypto_class_ecdh
crypto.ECDH.computeSecret	A										<section class="prog__container"><p id='obj.desc'>Computes the shared secret using <code>other_public_key</code> as the other\nparty&apos;s public key and returns the computed shared secret. The supplied\nkey is interpreted using specified <code>input_encoding</code>, and the returned secret\nis encoded using the specified <code>output_encoding</code>. Encodings can be\n<code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <code>Buffer</code>.</p><pre><code>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding
crypto ECDH computeSecret	R	crypto.ECDH computeSecret										http://nodejs.org/api/all.html#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding
crypto.ECDH.generateKeys	A										<section class="prog__container"><p id='obj.desc'>Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified <code>format</code> and <code>encoding</code>. This key should be\ntransferred to the other party.</p><pre><code>ecdh.generateKeys([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_generatekeys_encoding_format
crypto ECDH generateKeys	R	crypto.ECDH generateKeys										http://nodejs.org/api/all.html#crypto_ecdh_generatekeys_encoding_format
crypto.ECDH.getPrivateKey	A										<section class="prog__container"><p id='obj.desc'>Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code>, or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided\na string is returned; otherwise a <code>Buffer</code> is returned.</p><pre><code>ecdh.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_getprivatekey_encoding
crypto ECDH getPrivateKey	R	crypto.ECDH getPrivateKey										http://nodejs.org/api/all.html#crypto_ecdh_getprivatekey_encoding
crypto.ECDH.getPublicKey	A										<section class="prog__container"><p id='obj.desc'>Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and\n<code>format</code>.</p><pre><code>ecdh.getPublicKey([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_getpublickey_encoding_format
crypto ECDH getPublicKey	R	crypto.ECDH getPublicKey										http://nodejs.org/api/all.html#crypto_ecdh_getpublickey_encoding_format
crypto.ECDH.setPrivateKey	A										<section class="prog__container"><p id='obj.desc'>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>&apos;latin1&apos;</code>,\n<code>&apos;hex&apos;</code> or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a string; otherwise <code>private_key</code> is expected to be a <code>Buffer</code>. If\n<code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the ECDH object.</p><pre><code>ecdh.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_setprivatekey_private_key_encoding
crypto ECDH setPrivateKey	R	crypto.ECDH setPrivateKey										http://nodejs.org/api/all.html#crypto_ecdh_setprivatekey_private_key_encoding
crypto.ECDH.setPublicKey	A										<section class="prog__container"><p id='obj.desc'>Sets the EC Diffie-Hellman public key. Key encoding can be <code>&apos;latin1&apos;</code>,\n<code>&apos;hex&apos;</code> or <code>&apos;base64&apos;</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to\nbe a string; otherwise a <code>Buffer</code> is expected.</p><p>Example (obtaining a shared secret):</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst alice = crypto.createECDH(&apos;secp256k1&apos;);\nconst bob = crypto.createECDH(&apos;secp256k1&apos;);\n\n// Note: This is a shortcut way to specify one of Alice&apos;s previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash(&apos;sha256&apos;).update(&apos;alice&apos;, &apos;utf8&apos;).digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair bob.generateKeys();\n\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &apos;hex&apos;);\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &apos;hex&apos;);\n\n// alice_secret and bob_secret should be the same shared secret value\nconsole.log(alice_secret === bob_secret);\n</code></pre><pre><code>ecdh.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_ecdh_setpublickey_public_key_encoding
crypto ECDH setPublicKey	R	crypto.ECDH setPublicKey										http://nodejs.org/api/all.html#crypto_ecdh_setpublickey_public_key_encoding
crypto.Hash	A										<section class="prog__container"><p id='obj.desc'>The <code>Hash</code> class is a utility for creating hash digests of data. It can be\nused in one of two ways:</p><p>Example: Using <code>Hash</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst hash = crypto.createHash(&apos;sha256&apos;);\n\nhash.on(&apos;readable&apos;, () =&gt; {\n  var data = hash.read();\n  if (data)\n    console.log(data.toString(&apos;hex&apos;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write(&apos;some data to hash&apos;);\nhash.end();\n</code></pre><p>Example: Using <code>Hash</code> and piped streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst fs = require(&apos;fs&apos;);\nconst hash = crypto.createHash(&apos;sha256&apos;);\n\nconst input = fs.createReadStream(&apos;test.js&apos;);\ninput.pipe(hash).pipe(process.stdout);\n</code></pre><p>Example: Using the <code>hash.update()</code> and <code>hash.digest()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst hash = crypto.createHash(&apos;sha256&apos;);\n\nhash.update(&apos;some data to hash&apos;);\nconsole.log(hash.digest(&apos;hex&apos;));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_hash
crypto Hash	R	crypto.Hash										http://nodejs.org/api/all.html#crypto_class_hash
crypto.Hash.digest	A										<section class="prog__container"><p id='obj.desc'>Calculates the digest of all of the data passed to be hashed (using the\n<code>hash.update()</code> method). The <code>encoding</code> can be <code>&apos;hex&apos;</code>, <code>&apos;latin1&apos;</code> or\n<code>&apos;base64&apos;</code>. If <code>encoding</code> is provided a string will be returned; otherwise\na <code>Buffer</code> is returned.</p><pre><code>hash.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_hash_digest_encoding
crypto Hash digest	R	crypto.Hash digest										http://nodejs.org/api/all.html#crypto_hash_digest_encoding
crypto.Hash.update	A										<section class="prog__container"><p id='obj.desc'>Updates the hash content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&apos;utf8&apos;</code>, <code>&apos;ascii&apos;</code> or\n<code>&apos;latin1&apos;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&apos;utf8&apos;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.</p><pre><code>hash.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_hash_update_data_input_encoding
crypto Hash update	R	crypto.Hash update										http://nodejs.org/api/all.html#crypto_hash_update_data_input_encoding
crypto.Hmac	A										<section class="prog__container"><p id='obj.desc'>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:</p><p>Example: Using <code>Hmac</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst hmac = crypto.createHmac(&apos;sha256&apos;, &apos;a secret&apos;);\n\nhmac.on(&apos;readable&apos;, () =&gt; {\n  var data = hmac.read();\n  if (data)\n    console.log(data.toString(&apos;hex&apos;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write(&apos;some data to hash&apos;);\nhmac.end();\n</code></pre><p>Example: Using <code>Hmac</code> and piped streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst fs = require(&apos;fs&apos;);\nconst hmac = crypto.createHmac(&apos;sha256&apos;, &apos;a secret&apos;);\n\nconst input = fs.createReadStream(&apos;test.js&apos;);\ninput.pipe(hmac).pipe(process.stdout);\n</code></pre><p>Example: Using the <code>hmac.update()</code> and <code>hmac.digest()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst hmac = crypto.createHmac(&apos;sha256&apos;, &apos;a secret&apos;);\n\nhmac.update(&apos;some data to hash&apos;);\nconsole.log(hmac.digest(&apos;hex&apos;));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_hmac
crypto Hmac	R	crypto.Hmac										http://nodejs.org/api/all.html#crypto_class_hmac
crypto.Hmac.digest	A										<section class="prog__container"><p id='obj.desc'>Calculates the HMAC digest of all of the data passed using <code>hmac.update()</code>.\nThe <code>encoding</code> can be <code>&apos;hex&apos;</code>, <code>&apos;latin1&apos;</code> or <code>&apos;base64&apos;</code>. If <code>encoding</code> is\nprovided a string is returned; otherwise a <code>Buffer</code> is returned;</p><pre><code>hmac.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_hmac_digest_encoding
crypto Hmac digest	R	crypto.Hmac digest										http://nodejs.org/api/all.html#crypto_hmac_digest_encoding
crypto.Hmac.update	A										<section class="prog__container"><p id='obj.desc'>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&apos;utf8&apos;</code>, <code>&apos;ascii&apos;</code> or\n<code>&apos;latin1&apos;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&apos;utf8&apos;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.</p><pre><code>hmac.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_hmac_update_data_input_encoding
crypto Hmac update	R	crypto.Hmac update										http://nodejs.org/api/all.html#crypto_hmac_update_data_input_encoding
crypto.Sign	A										<section class="prog__container"><p id='obj.desc'>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one\nof two ways:</p><p>Example: Using <code>Sign</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst sign = crypto.createSign(&apos;RSA-SHA256&apos;);\n\nsign.write(&apos;some data to sign&apos;);\nsign.end();\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &apos;hex&apos;));\n// Prints: the calculated signature\n</code></pre><p>Example: Using the <code>sign.update()</code> and <code>sign.sign()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst sign = crypto.createSign(&apos;RSA-SHA256&apos;);\n\nsign.update(&apos;some data to sign&apos;);\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &apos;hex&apos;));\n// Prints: the calculated signature\n</code></pre><p>Example: signing using ECDSA with SHA256</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst sign = crypto.createSign(&apos;sha256&apos;);\n\nsign.update(&apos;some data to sign&apos;);\n\nconst private_key = &apos;-----BEGIN EC PRIVATE KEY-----\n&apos; +\n        &apos;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\n&apos; +\n        &apos;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\n&apos; +\n        &apos;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\n&apos; +\n        &apos;-----END EC PRIVATE KEY-----\n&apos;;\n\nconsole.log(sign.sign(private_key).toString(&apos;hex&apos;));\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_sign
crypto Sign	R	crypto.Sign										http://nodejs.org/api/all.html#crypto_class_sign
crypto.Sign.sign	A										<section class="prog__container"><p id='obj.desc'>Calculates the signature on all the data passed through using either\n<code>sign.update()</code> or <code>sign.write()</code>.</p><pre><code>sign.sign(private_key[, output_format])</code></pre></section>	http://nodejs.org/api/all.html#crypto_sign_sign_private_key_output_format
crypto Sign sign	R	crypto.Sign sign										http://nodejs.org/api/all.html#crypto_sign_sign_private_key_output_format
crypto.Sign.update	A										<section class="prog__container"><p id='obj.desc'>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&apos;utf8&apos;</code>, <code>&apos;ascii&apos;</code> or\n<code>&apos;latin1&apos;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&apos;utf8&apos;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.</p><pre><code>sign.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_sign_update_data_input_encoding
crypto Sign update	R	crypto.Sign update										http://nodejs.org/api/all.html#crypto_sign_update_data_input_encoding
crypto.Verify	A										<section class="prog__container"><p id='obj.desc'>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one\nof two ways:</p><p>Example: Using <code>Verify</code> objects as streams:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst verify = crypto.createVerify(&apos;RSA-SHA256&apos;);\n\nverify.write(&apos;some data to sign&apos;);\nverify.end();\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n</code></pre><p>Example: Using the <code>verify.update()</code> and <code>verify.verify()</code> methods:</p><pre><code class="lang-js">const crypto = require(&apos;crypto&apos;);\nconst verify = crypto.createVerify(&apos;RSA-SHA256&apos;);\n\nverify.update(&apos;some data to sign&apos;);\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n</code></pre></section>	http://nodejs.org/api/all.html#crypto_class_verify
crypto Verify	R	crypto.Verify										http://nodejs.org/api/all.html#crypto_class_verify
crypto.Verify.update	A										<section class="prog__container"><p id='obj.desc'>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&apos;utf8&apos;</code>, <code>&apos;ascii&apos;</code> or\n<code>&apos;latin1&apos;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&apos;utf8&apos;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.</p><pre><code>verifier.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#crypto_verify_update_data_input_encoding
crypto Verify update	R	crypto.Verify update										http://nodejs.org/api/all.html#crypto_verify_update_data_input_encoding
crypto.Verify.verify	A										<section class="prog__container"><p id='obj.desc'>Verifies the provided data using the given <code>object</code> and <code>signature</code>.\nThe <code>object</code> argument is a string containing a PEM encoded object, which can be\none an RSA public key, a DSA public key, or an X.509 certificate.\nThe <code>signature</code> argument is the previously calculated signature for the data, in\nthe <code>signature_format</code> which can be <code>&apos;latin1&apos;</code>, <code>&apos;hex&apos;</code> or <code>&apos;base64&apos;</code>.\nIf a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a\nstring; otherwise <code>signature</code> is expected to be a <code>Buffer</code>.</p><pre><code>verifier.verify(object, signature[, signature_format])</code></pre></section>	http://nodejs.org/api/all.html#crypto_verify_verify_object_signature_signature_format
crypto Verify verify	R	crypto.Verify verify										http://nodejs.org/api/all.html#crypto_verify_verify_object_signature_signature_format
dgram	A										<section class="prog__container"><p id='obj.desc'>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p><p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p><pre><code class="lang-js">const dgram = require(&apos;dgram&apos;);\nconst server = dgram.createSocket(&apos;udp4&apos;);\n\nserver.on(&apos;error&apos;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&apos;message&apos;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&apos;listening&apos;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#dgram_dgram
dgram.Socket	A										<section class="prog__container"><p id='obj.desc'>The <code>dgram.Socket</code> object is an <code>EventEmitter</code> that encapsulates the\ndatagram functionality.</p></section>	http://nodejs.org/api/all.html#dgram_class_dgram_socket
dgram Socket	R	dgram.Socket										http://nodejs.org/api/all.html#dgram_class_dgram_socket
dgram.Socket.addMembership	A										<section class="prog__container"><p id='obj.desc'>Tells the kernel to join a multicast group at the given <code>multicastAddress</code> and\n<code>multicastInterface</code> using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the\n<code>multicastInterface</code> argument is not specified, the operating system will choose\none interface and will add membership to it. To add membership to every\navailable interface, call <code>addMembership</code> multiple times, once per interface.</p><pre><code>socket.addMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_addmembership_multicastaddress_multicastinterface
dgram.Socket addMembership	R	dgram.Socket.addMembership										http://nodejs.org/api/all.html#dgram_socket_addmembership_multicastaddress_multicastinterface
dgram Socket addMembership	R	dgram.Socket addMembership										http://nodejs.org/api/all.html#dgram_socket_addmembership_multicastaddress_multicastinterface
dgram.Socket.address	A										<section class="prog__container"><p id='obj.desc'>Returns an object containing the address information for a socket.\nFor UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>\nproperties.</p><pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_address
dgram.Socket address	R	dgram.Socket.address										http://nodejs.org/api/all.html#dgram_socket_address
dgram Socket address	R	dgram.Socket address										http://nodejs.org/api/all.html#dgram_socket_address
dgram.Socket.bind	D								*[[dgram.Socket.bind(dgram_socket_bind_options_callback)]] For UDP sockets, causes the dgram.Socket to listen for datagram messages on a named port and optional address that are passed as properties of an options object passed as the first argument. If port is not specified, the operating system will attempt to bind to a random port. If address is not specified, the operating system will attempt to listen on all addresses.  Once binding is complete, a &apos;listening&apos; event is emitted and the optional callback function is called.\n*[[dgram.Socket.bind(dgram_socket_bind_port_address_callback)]] For UDP sockets, causes the dgram.Socket to listen for datagram messages on a named port and optional address. If port is not specified, the operating system will attempt to bind to a random port. If address is not specified, the operating system will attempt to listen on all addresses.  Once binding is complete, a &apos;listening&apos; event is emitted and the optional callback function is called.			
dgram.Socket bind	R	dgram.Socket.bind										http://nodejs.org/api/all.html#dgram_socket_bind_port_address_callback
dgram Socket bind	R	dgram.Socket bind										http://nodejs.org/api/all.html#dgram_socket_bind_port_address_callback
dgram.Socket.close	D								*[[dgram.Socket.close(dgram_event_close)]] The &apos;close&apos; event is emitted after a socket is closed with close  . Once triggered, no new &apos;message&apos; events will be emitted on this socket.\n*[[dgram.Socket.close(dgram_socket_close_callback)]] Close the underlying socket and stop listening for data on it. If a callback is provided, it is added as a listener for the &apos;close&apos; event.			
dgram.Socket close	R	dgram.Socket.close										http://nodejs.org/api/all.html#dgram_socket_close_callback
dgram Socket close	R	dgram.Socket close										http://nodejs.org/api/all.html#dgram_socket_close_callback
dgram.Socket.dropMembership	A										<section class="prog__container"><p id='obj.desc'>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the\n<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the\nkernel when the socket is closed or the process terminates, so most apps will\nnever have reason to call this.</p><pre><code>socket.dropMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket dropMembership	R	dgram.Socket.dropMembership										http://nodejs.org/api/all.html#dgram_socket_dropmembership_multicastaddress_multicastinterface
dgram Socket dropMembership	R	dgram.Socket dropMembership										http://nodejs.org/api/all.html#dgram_socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket.send	A										<section class="prog__container"><p id='obj.desc'>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must\nbe specified.</p><p>Example of sending a UDP packet to a random port on <code>localhost</code>;</p><pre><code class="lang-js">const dgram = require(&apos;dgram&apos;);\nconst message = Buffer.from(&apos;Some bytes&apos;);\nconst client = dgram.createSocket(&apos;udp4&apos;);\nclient.send(message, 41234, &apos;localhost&apos;, (err) =&gt; {\n  client.close();\n});\n</code></pre><p>Example of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;</p><pre><code class="lang-js">const dgram = require(&apos;dgram&apos;);\nconst buf1 = Buffer.from(&apos;Some &apos;);\nconst buf2 = Buffer.from(&apos;bytes&apos;);\nconst client = dgram.createSocket(&apos;udp4&apos;);\nclient.send([buf1, buf2], 41234, &apos;localhost&apos;, (err) =&gt; {\n  client.close();\n});\n</code></pre><pre><code>socket.send(msg, [offset, length,] port, address[, callback])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_send_msg_offset_length_port_address_callback
dgram.Socket send	R	dgram.Socket.send										http://nodejs.org/api/all.html#dgram_socket_send_msg_offset_length_port_address_callback
dgram Socket send	R	dgram.Socket send										http://nodejs.org/api/all.html#dgram_socket_send_msg_offset_length_port_address_callback
dgram.Socket.setBroadcast	A										<section class="prog__container"><p id='obj.desc'>Sets or clears the <code>SO_BROADCAST</code> socket option.  When set to <code>true</code>, UDP\npackets may be sent to a local interface&apos;s broadcast address.</p><pre><code>socket.setBroadcast(flag)</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_setbroadcast_flag
dgram.Socket setBroadcast	R	dgram.Socket.setBroadcast										http://nodejs.org/api/all.html#dgram_socket_setbroadcast_flag
dgram Socket setBroadcast	R	dgram.Socket setBroadcast										http://nodejs.org/api/all.html#dgram_socket_setbroadcast_flag
dgram.Socket.setMulticastLoopback	A										<section class="prog__container"><p id='obj.desc'>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option.  When set to <code>true</code>,\nmulticast packets will also be received on the local interface.</p><pre><code>socket.setMulticastLoopback(flag)</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_setmulticastloopback_flag
dgram.Socket setMulticastLoopback	R	dgram.Socket.setMulticastLoopback										http://nodejs.org/api/all.html#dgram_socket_setmulticastloopback_flag
dgram Socket setMulticastLoopback	R	dgram.Socket setMulticastLoopback										http://nodejs.org/api/all.html#dgram_socket_setmulticastloopback_flag
dgram.Socket.setMulticastTTL	A										<section class="prog__container"><p id='obj.desc'>Sets the <code>IP_MULTICAST_TTL</code> socket option.  While TTL generally stands for\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\npacket is allowed to travel through, specifically for multicast traffic.  Each\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\ndecremented to 0 by a router, it will not be forwarded.</p><pre><code>socket.setMulticastTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_setmulticastttl_ttl
dgram.Socket setMulticastTTL	R	dgram.Socket.setMulticastTTL										http://nodejs.org/api/all.html#dgram_socket_setmulticastttl_ttl
dgram Socket setMulticastTTL	R	dgram.Socket setMulticastTTL										http://nodejs.org/api/all.html#dgram_socket_setmulticastttl_ttl
dgram.Socket.setTTL	A										<section class="prog__container"><p id='obj.desc'>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for &quot;Time to Live&quot;,\nin this context it specifies the number of IP hops that a packet is allowed to\ntravel through.  Each router or gateway that forwards a packet decrements the\nTTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.\nChanging TTL values is typically done for network probes or when multicasting.</p><pre><code>socket.setTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_setttl_ttl
dgram.Socket setTTL	R	dgram.Socket.setTTL										http://nodejs.org/api/all.html#dgram_socket_setttl_ttl
dgram Socket setTTL	R	dgram.Socket setTTL										http://nodejs.org/api/all.html#dgram_socket_setttl_ttl
dgram.Socket.ref	A										<section class="prog__container"><p id='obj.desc'>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\ncounting and restores the default behavior.</p><pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_ref
dgram.Socket ref	R	dgram.Socket.ref										http://nodejs.org/api/all.html#dgram_socket_ref
dgram Socket ref	R	dgram.Socket ref										http://nodejs.org/api/all.html#dgram_socket_ref
dgram.Socket.unref	A										<section class="prog__container"><p id='obj.desc'>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active, allowing the process to exit even if the socket is still\nlistening.</p><pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_unref
dgram.Socket unref	R	dgram.Socket.unref										http://nodejs.org/api/all.html#dgram_socket_unref
dgram Socket unref	R	dgram.Socket unref										http://nodejs.org/api/all.html#dgram_socket_unref
dgram.Socket.error	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;error&apos;</code> event is emitted whenever any error occurs. The event handler\nfunction is passed a single Error object.</p></section>	http://nodejs.org/api/all.html#dgram_event_error
dgram.Socket error	R	dgram.Socket.error										http://nodejs.org/api/all.html#dgram_event_error
dgram Socket error	R	dgram.Socket error										http://nodejs.org/api/all.html#dgram_event_error
dgram.Socket.listening	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;listening&apos;</code> event is emitted whenever a socket begins listening for\ndatagram messages. This occurs as soon as UDP sockets are created.</p></section>	http://nodejs.org/api/all.html#dgram_event_listening
dgram.Socket listening	R	dgram.Socket.listening										http://nodejs.org/api/all.html#dgram_event_listening
dgram Socket listening	R	dgram.Socket listening										http://nodejs.org/api/all.html#dgram_event_listening
dgram.Socket.message	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;message&apos;</code> event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The\n<code>msg</code> argument is a <code>Buffer</code> and <code>rinfo</code> is an object with the sender&apos;s\naddress information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:</p><p>The <code>&apos;message&apos;</code> event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The\n<code>msg</code> argument is a <code>Buffer</code> and <code>rinfo</code> is an object with the sender&apos;s\naddress information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:</p><pre><code class="lang-js">socket.on(&apos;message&apos;, (msg, rinfo) =&gt; {\n  console.log(&apos;Received %d bytes from %s:%d\n&apos;,\n              msg.length, rinfo.address, rinfo.port);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#dgram_event_message
dgram.Socket message	R	dgram.Socket.message										http://nodejs.org/api/all.html#dgram_event_message
dgram Socket message	R	dgram.Socket message										http://nodejs.org/api/all.html#dgram_event_message
dns	A										<section class="prog__container"><p id='obj.desc'>The <code>dns</code> module contains functions belonging to two different categories:</p><p>For example, looking up <code>nodejs.org</code>.</p><pre><code class="lang-js">const dns = require(&apos;dns&apos;);\n\ndns.lookup(&apos;nodejs.org&apos;, (err, addresses, family) =&gt; {\n  console.log(&apos;addresses:&apos;, addresses);\n});\n</code></pre><p>Below is an example that resolves <code>&apos;nodejs.org&apos;</code> then reverse resolves the IP\naddresses that are returned.</p><pre><code class="lang-js">const dns = require(&apos;dns&apos;);\n\ndns.resolve4(&apos;nodejs.org&apos;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#dns_dns
dns.getServers	A										<section class="prog__container"><p id='obj.desc'>Returns an array of IP address strings that are being used for name\nresolution.</p></section>	http://nodejs.org/api/all.html#dns_dns_getservers
dns getServers	R	dns.getServers										http://nodejs.org/api/all.html#dns_dns_getservers
dns.lookup	A										<section class="prog__container"><p id='obj.desc'>Resolves a hostname (e.g. <code>&apos;nodejs.org&apos;</code>) into the first found A (IPv4) or\nAAAA (IPv6) record. <code>options</code> can be an object or integer. If <code>options</code> is\nnot provided, then IPv4 and IPv6 addresses are both valid. If <code>options</code> is\nan integer, then it must be <code>4</code> or <code>6</code>.</p><p>All properties are optional. An example usage of options is shown below.</p><pre><code class="lang-js">{\n  family: 4,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n  all: false\n}\n</code></pre></section>	http://nodejs.org/api/all.html#dns_dns_lookup_hostname_options_callback
dns lookup	R	dns.lookup										http://nodejs.org/api/all.html#dns_dns_lookup_hostname_options_callback
dns.lookupService	A										<section class="prog__container"><p id='obj.desc'>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using\nthe operating system&apos;s underlying <code>getnameinfo</code> implementation.</p><p>On error, <code>err</code> is an <code>Error</code> object, where <code>err.code</code> is the error code.</p><pre><code class="lang-js">const dns = require(&apos;dns&apos;);\ndns.lookupService(&apos;127.0.0.1&apos;, 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\n</code></pre></section>	http://nodejs.org/api/all.html#dns_dns_lookupservice_address_port_callback
dns lookupService	R	dns.lookupService										http://nodejs.org/api/all.html#dns_dns_lookupservice_address_port_callback
dns.resolve	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve a hostname (e.g. <code>&apos;nodejs.org&apos;</code>) into an\narray of the record types specified by <code>rrtype</code>.</p></section>	http://nodejs.org/api/all.html#dns_dns_resolve_hostname_rrtype_callback
dns resolve	R	dns.resolve										http://nodejs.org/api/all.html#dns_dns_resolve_hostname_rrtype_callback
dns.resolve4	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv4 addresses (e.g.\n<code>[&apos;74.125.79.104&apos;, &apos;74.125.79.105&apos;, &apos;74.125.79.106&apos;]</code>).</p></section>	http://nodejs.org/api/all.html#dns_dns_resolve4_hostname_options_callback
dns resolve4	R	dns.resolve4										http://nodejs.org/api/all.html#dns_dns_resolve4_hostname_options_callback
dns.resolve6	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv6 addresses.</p></section>	http://nodejs.org/api/all.html#dns_dns_resolve6_hostname_options_callback
dns resolve6	R	dns.resolve6										http://nodejs.org/api/all.html#dns_dns_resolve6_hostname_options_callback
dns.resolveCname	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The\n<code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of canonical name records available for the <code>hostname</code>\n(e.g. <code>[&apos;bar.example.com&apos;]</code>).</p></section>	http://nodejs.org/api/all.html#dns_dns_resolvecname_hostname_callback
dns resolveCname	R	dns.resolveCname										http://nodejs.org/api/all.html#dns_dns_resolvecname_hostname_callback
dns.resolveMx	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of objects containing both a <code>priority</code> and <code>exchange</code>\nproperty (e.g. <code>[{priority: 10, exchange: &apos;mx.example.com&apos;}, ...]</code>).</p></section>	http://nodejs.org/api/all.html#dns_dns_resolvemx_hostname_callback
dns resolveMx	R	dns.resolveMx										http://nodejs.org/api/all.html#dns_dns_resolvemx_hostname_callback
dns.resolveNaptr	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>\nrecords) for the <code>hostname</code>. The <code>callback</code> function has arguments\n<code>(err, addresses)</code>.  The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of objects with the following properties:</p><p>For example:</p><pre><code class="lang-js">{\n  flags: &apos;s&apos;,\n  service: &apos;SIP+D2U&apos;,\n  regexp: &apos;&apos;,\n  replacement: &apos;_sip._udp.example.com&apos;,\n  order: 30,\n  preference: 100\n}\n</code></pre></section>	http://nodejs.org/api/all.html#dns_dns_resolvenaptr_hostname_callback
dns resolveNaptr	R	dns.resolveNaptr										http://nodejs.org/api/all.html#dns_dns_resolvenaptr_hostname_callback
dns.resolveNs	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of name server records available for <code>hostname</code>\n(e.g. <code>[&apos;ns1.example.com&apos;, &apos;ns2.example.com&apos;]</code>).</p></section>	http://nodejs.org/api/all.html#dns_dns_resolvens_hostname_callback
dns resolveNs	R	dns.resolveNs										http://nodejs.org/api/all.html#dns_dns_resolvens_hostname_callback
dns.resolveSoa	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for\nthe <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an object with the following properties:</p><p>null</p><pre><code class="lang-js">{\n  nsname: &apos;ns.example.com&apos;,\n  hostmaster: &apos;root.example.com&apos;,\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n</code></pre></section>	http://nodejs.org/api/all.html#dns_dns_resolvesoa_hostname_callback
dns resolveSoa	R	dns.resolveSoa										http://nodejs.org/api/all.html#dns_dns_resolvesoa_hostname_callback
dns.resolveSrv	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of objects with the following properties:</p><p>null</p><pre><code class="lang-js">{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: &apos;service.example.com&apos;\n}\n</code></pre></section>	http://nodejs.org/api/all.html#dns_dns_resolvesrv_hostname_callback
dns resolveSrv	R	dns.resolveSrv										http://nodejs.org/api/all.html#dns_dns_resolvesrv_hostname_callback
dns.resolvePtr	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of strings containing the reply records.</p></section>	http://nodejs.org/api/all.html#dns_dns_resolveptr_hostname_callback
dns resolvePtr	R	dns.resolvePtr										http://nodejs.org/api/all.html#dns_dns_resolveptr_hostname_callback
dns.resolveTxt	A										<section class="prog__container"><p id='obj.desc'>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is\nis a two-dimensional array of the text records available for <code>hostname</code> (e.g.,\n<code>[ [&apos;v=spf1 ip4:0.0.0.0 &apos;, &apos;~all&apos; ] ]</code>). Each sub-array contains TXT chunks of\none record. Depending on the use case, these could be either joined together or\ntreated separately.</p></section>	http://nodejs.org/api/all.html#dns_dns_resolvetxt_hostname_callback
dns resolveTxt	R	dns.resolveTxt										http://nodejs.org/api/all.html#dns_dns_resolvetxt_hostname_callback
dns.reverse	A										<section class="prog__container"><p id='obj.desc'>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\narray of hostnames.</p></section>	http://nodejs.org/api/all.html#dns_dns_reverse_ip_callback
dns reverse	R	dns.reverse										http://nodejs.org/api/all.html#dns_dns_reverse_ip_callback
dns.setServers	A										<section class="prog__container"><p id='obj.desc'>Sets the IP addresses of the servers to be used when resolving. The <code>servers</code>\nargument is an array of IPv4 or IPv6 addresses.</p></section>	http://nodejs.org/api/all.html#dns_dns_setservers_servers
dns setServers	R	dns.setServers										http://nodejs.org/api/all.html#dns_dns_setservers_servers
domain	A										<section class="prog__container"><p id='obj.desc'><strong>This module is pending deprecation</strong>. Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n<strong>not</strong> have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.</p></section>	http://nodejs.org/api/all.html#domain_domain
domain.create	A										<section class="prog__container"><p id='obj.desc'>Returns a new Domain object.</p></section>	http://nodejs.org/api/all.html#domain_domain_create
domain create	R	domain.create										http://nodejs.org/api/all.html#domain_domain_create
Domain	A										<section class="prog__container"><p id='obj.desc'>The Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.</p></section>	http://nodejs.org/api/all.html#domain_class_domain
Domain.run	A										<section class="prog__container"><p id='obj.desc'>Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.</p><p>Example:</p><pre><code class="lang-js">const domain = require(&apos;domain&apos;);\nconst fs = require(&apos;fs&apos;);\nconst d = domain.create();\nd.on(&apos;error&apos;, (er) =&gt; {\n  console.error(&apos;Caught error!&apos;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&apos;non-existent file&apos;, &apos;r&apos;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</code></pre><pre><code>domain.run(fn[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#domain_run_fn_args
Domain run	R	Domain.run										http://nodejs.org/api/all.html#domain_run_fn_args
Domain.add	A										<section class="prog__container"><p id='obj.desc'>Explicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an <code>&apos;error&apos;</code> event, it\nwill be routed to the domain&apos;s <code>&apos;error&apos;</code> event, just like with implicit\nbinding.</p><pre><code>domain.add(emitter)</code></pre></section>	http://nodejs.org/api/all.html#domain_add_emitter
Domain add	R	Domain.add										http://nodejs.org/api/all.html#domain_add_emitter
Domain.remove	A										<section class="prog__container"><p id='obj.desc'>The opposite of <code>domain.add(emitter)</code>.  Removes domain handling from the\nspecified emitter.</p><pre><code>domain.remove(emitter)</code></pre></section>	http://nodejs.org/api/all.html#domain_remove_emitter
Domain remove	R	Domain.remove										http://nodejs.org/api/all.html#domain_remove_emitter
Domain.bind	A										<section class="prog__container"><p id='obj.desc'>The returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain&apos;s <code>&apos;error&apos;</code> event.</p><p>null</p><pre><code class="lang-js">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&apos;error&apos;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre><pre><code>domain.bind(callback)</code></pre></section>	http://nodejs.org/api/all.html#domain_bind_callback
Domain bind	R	Domain.bind										http://nodejs.org/api/all.html#domain_bind_callback
Domain.intercept	A										<section class="prog__container"><p id='obj.desc'>This method is almost identical to <code>domain.bind(callback)</code>.  However, in\naddition to catching thrown errors, it will also intercept <code>Error</code>\nobjects sent as the first argument to the function.</p><p>null</p><pre><code class="lang-js">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &apos;Error&apos; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &apos;error&apos;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&apos;error&apos;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre><pre><code>domain.intercept(callback)</code></pre></section>	http://nodejs.org/api/all.html#domain_intercept_callback
Domain intercept	R	Domain.intercept										http://nodejs.org/api/all.html#domain_intercept_callback
Domain.enter	A										<section class="prog__container"><p id='obj.desc'>The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code>\nmethods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code>\nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see <code>domain.exit()</code> for details on the domain stack). The\ncall to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.</p><pre><code>domain.enter()</code></pre></section>	http://nodejs.org/api/all.html#domain_enter
Domain enter	R	Domain.enter										http://nodejs.org/api/all.html#domain_enter
Domain.exit	A										<section class="prog__container"><p id='obj.desc'>The <code>exit</code> method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&apos;s important to ensure that the current domain is exited.\nThe call to <code>exit</code> delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.</p><pre><code>domain.exit()</code></pre></section>	http://nodejs.org/api/all.html#domain_exit
Domain exit	R	Domain.exit										http://nodejs.org/api/all.html#domain_exit
Domain.dispose	A										<section class="prog__container"><p id='obj.desc'>Stability: 0 - Deprecated.  Please recover from failed IO actions\nexplicitly via error event handlers set on the domain.</p><pre><code>domain.dispose()</code></pre></section>	http://nodejs.org/api/all.html#domain_dispose
Domain dispose	R	Domain.dispose										http://nodejs.org/api/all.html#domain_dispose
Domain.members	A										<section class="prog__container"><p id='obj.desc'>An array of timers and event emitters that have been explicitly added\nto the domain.</p></section>	http://nodejs.org/api/all.html#domain_members
Domain members	R	Domain.members										http://nodejs.org/api/all.html#domain_members
Events	A										<section class="prog__container"><p id='obj.desc'>Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\ncalled.</p><p>The following example shows a simple <code>EventEmitter</code> instance with a single\nlistener. The <code>eventEmitter.on()</code> method is used to register listeners, while\nthe <code>eventEmitter.emit()</code> method is used to trigger the event.</p><pre><code class="lang-js">const EventEmitter = require(&apos;events&apos;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&apos;event&apos;, () =&gt; {\n  console.log(&apos;an event occurred!&apos;);\n});\nmyEmitter.emit(&apos;event&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#events_events
EventEmitter	A										<section class="prog__container"><p id='obj.desc'>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p><p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p><pre><code class="lang-js">const EventEmitter = require(&apos;events&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_class_eventemitter
EventEmitter.listenerCount	D								*[[EventEmitter.listenerCount(eventemitter_listenercount_eventname)]] Returns the number of listeners listening to the event named eventName.\n*[[EventEmitter.listenerCount(eventemitter_listenercount_emitter_eventname)]] A class method that returns the number of listeners for the given eventName registered on the given emitter.			
EventEmitter listenerCount	R	EventEmitter.listenerCount										http://nodejs.org/api/all.html#eventemitter_listenercount_emitter_eventname
EventEmitter.addListener	A										<section class="prog__container"><p id='obj.desc'>Alias for <code>emitter.on(eventName, listener)</code>.</p><pre><code>emitter.addListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_addlistener_eventname_listener
EventEmitter addListener	R	EventEmitter.addListener										http://nodejs.org/api/all.html#eventemitter_addlistener_eventname_listener
EventEmitter.emit	A										<section class="prog__container"><p id='obj.desc'>Synchronously calls each of the listeners registered for the event named\n<code>eventName</code>, in the order they were registered, passing the supplied arguments\nto each.</p><pre><code>emitter.emit(eventName[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_emit_eventname_args
EventEmitter emit	R	EventEmitter.emit										http://nodejs.org/api/all.html#eventemitter_emit_eventname_args
EventEmitter.eventNames	A										<section class="prog__container"><p id='obj.desc'>Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or Symbols.</p><p>Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or Symbols.</p><pre><code class="lang-js">const EventEmitter = require(&apos;events&apos;);\nconst myEE = new EventEmitter();\nmyEE.on(&apos;foo&apos;, () =&gt; {});\nmyEE.on(&apos;bar&apos;, () =&gt; {});\n\nconst sym = Symbol(&apos;symbol&apos;);\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ &apos;foo&apos;, &apos;bar&apos;, Symbol(symbol) ]\n</code></pre><pre><code>emitter.eventNames()</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_eventnames
EventEmitter eventNames	R	EventEmitter.eventNames										http://nodejs.org/api/all.html#eventemitter_eventnames
EventEmitter.getMaxListeners	A										<section class="prog__container"><p id='obj.desc'>Returns the current max listener value for the <code>EventEmitter</code> which is either\nset by <code>emitter.setMaxListeners(n)</code> or defaults to\n<code>EventEmitter.defaultMaxListeners</code>.</p><pre><code>emitter.getMaxListeners()</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_getmaxlisteners
EventEmitter getMaxListeners	R	EventEmitter.getMaxListeners										http://nodejs.org/api/all.html#eventemitter_getmaxlisteners
EventEmitter.listeners	A										<section class="prog__container"><p id='obj.desc'>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p><p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p><pre><code class="lang-js">server.on(&apos;connection&apos;, (stream) =&gt; {\n  console.log(&apos;someone connected!&apos;);\n});\nconsole.log(util.inspect(server.listeners(&apos;connection&apos;)));\n// Prints: [ [Function] ]\n</code></pre><pre><code>emitter.listeners(eventName)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_listeners_eventname
EventEmitter listeners	R	EventEmitter.listeners										http://nodejs.org/api/all.html#eventemitter_listeners_eventname
EventEmitter.on	A										<section class="prog__container"><p id='obj.desc'>Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p><p>Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p><pre><code class="lang-js">server.on(&apos;connection&apos;, (stream) =&gt; {\n  console.log(&apos;someone connected!&apos;);\n});\n</code></pre><p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p><pre><code class="lang-js">const myEE = new EventEmitter();\nmyEE.on(&apos;foo&apos;, () =&gt; console.log(&apos;a&apos;));\nmyEE.prependListener(&apos;foo&apos;, () =&gt; console.log(&apos;b&apos;));\nmyEE.emit(&apos;foo&apos;);\n// Prints:\n//   b\n//   a\n</code></pre><pre><code>emitter.on(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_on_eventname_listener
EventEmitter on	R	EventEmitter.on										http://nodejs.org/api/all.html#eventemitter_on_eventname_listener
EventEmitter.once	A										<section class="prog__container"><p id='obj.desc'>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p><pre><code class="lang-js">server.once(&apos;connection&apos;, (stream) =&gt; {\n  console.log(&apos;Ah, we have our first user!&apos;);\n});\n</code></pre><p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p><pre><code class="lang-js">const myEE = new EventEmitter();\nmyEE.once(&apos;foo&apos;, () =&gt; console.log(&apos;a&apos;));\nmyEE.prependOnceListener(&apos;foo&apos;, () =&gt; console.log(&apos;b&apos;));\nmyEE.emit(&apos;foo&apos;);\n// Prints:\n//   b\n//   a\n</code></pre><pre><code>emitter.once(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_once_eventname_listener
EventEmitter once	R	EventEmitter.once										http://nodejs.org/api/all.html#eventemitter_once_eventname_listener
EventEmitter.prependListener	A										<section class="prog__container"><p id='obj.desc'>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p><p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p><pre><code class="lang-js">server.prependListener(&apos;connection&apos;, (stream) =&gt; {\n  console.log(&apos;someone connected!&apos;);\n});\n</code></pre><pre><code>emitter.prependListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_prependlistener_eventname_listener
EventEmitter prependListener	R	EventEmitter.prependListener										http://nodejs.org/api/all.html#eventemitter_prependlistener_eventname_listener
EventEmitter.prependOnceListener	A										<section class="prog__container"><p id='obj.desc'>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.</p><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.</p><pre><code class="lang-js">server.prependOnceListener(&apos;connection&apos;, (stream) =&gt; {\n  console.log(&apos;Ah, we have our first user!&apos;);\n});\n</code></pre><pre><code>emitter.prependOnceListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_prependoncelistener_eventname_listener
EventEmitter prependOnceListener	R	EventEmitter.prependOnceListener										http://nodejs.org/api/all.html#eventemitter_prependoncelistener_eventname_listener
EventEmitter.removeAllListeners	A										<section class="prog__container"><p id='obj.desc'>Removes all listeners, or those of the specified <code>eventName</code>.</p><pre><code>emitter.removeAllListeners([eventName])</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_removealllisteners_eventname
EventEmitter removeAllListeners	R	EventEmitter.removeAllListeners										http://nodejs.org/api/all.html#eventemitter_removealllisteners_eventname
EventEmitter.removeListener	D								*[[EventEmitter.removeListener(eventemitter_event_removelistener)]] The &apos;removeListener&apos; event is emitted <em>after</em> the listener is removed.\n*[[EventEmitter.removeListener(eventemitter_removelistener_eventname_listener)]] Removes the specified listener from the listener array for the event named eventName.			
EventEmitter removeListener	R	EventEmitter.removeListener										http://nodejs.org/api/all.html#eventemitter_removelistener_eventname_listener
EventEmitter.setMaxListeners	A										<section class="prog__container"><p id='obj.desc'>By default EventEmitters will print a warning if more than <code>10</code> listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\nThe <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this\nspecific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)\nto indicate an unlimited number of listeners.</p><pre><code>emitter.setMaxListeners(n)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_setmaxlisteners_n
EventEmitter setMaxListeners	R	EventEmitter.setMaxListeners										http://nodejs.org/api/all.html#eventemitter_setmaxlisteners_n
EventEmitter.defaultMaxListeners	A										<section class="prog__container"><p id='obj.desc'>By default, a maximum of <code>10</code> listeners can be registered for any single\nevent. This limit can be changed for individual <code>EventEmitter</code> instances\nusing the <code>emitter.setMaxListeners(n)</code> method. To change the default\nfor <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>\nproperty can be used.</p><p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a &quot;possible EventEmitter memory leak&quot; has been detected. For any single\n<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>\nmethods can be used to temporarily avoid this warning:</p><pre><code class="lang-js">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once(&apos;event&apos;, () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_defaultmaxlisteners
EventEmitter defaultMaxListeners	R	EventEmitter.defaultMaxListeners										http://nodejs.org/api/all.html#eventemitter_defaultmaxlisteners
EventEmitter.newListener	A										<section class="prog__container"><p id='obj.desc'>The <code>EventEmitter</code> instance will emit its own <code>&apos;newListener&apos;</code> event <em>before</em>\na listener is added to its internal array of listeners.</p><p>The fact that the event is triggered before adding the listener has a subtle\nbut important side effect: any <em>additional</em> listeners registered to the same\n<code>name</code> <em>within</em> the <code>&apos;newListener&apos;</code> callback will be inserted <em>before</em> the\nlistener that is in the process of being added.</p><pre><code class="lang-js">const myEmitter = new MyEmitter();\n// Only do this once so we don&apos;t loop forever\nmyEmitter.once(&apos;newListener&apos;, (event, listener) =&gt; {\n  if (event === &apos;event&apos;) {\n    // Insert a new listener in front\n    myEmitter.on(&apos;event&apos;, () =&gt; {\n      console.log(&apos;B&apos;);\n    });\n  }\n});\nmyEmitter.on(&apos;event&apos;, () =&gt; {\n  console.log(&apos;A&apos;);\n});\nmyEmitter.emit(&apos;event&apos;);\n// Prints:\n//   B\n//   A\n</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_event_newlistener
EventEmitter newListener	R	EventEmitter.newListener										http://nodejs.org/api/all.html#eventemitter_event_newlistener
fs	A										<section class="prog__container"><p id='obj.desc'>File I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do <code>require(&apos;fs&apos;)</code>. All the methods have asynchronous and\nsynchronous forms.</p><p>Here is an example of the asynchronous version:</p><pre><code class="lang-js">const fs = require(&apos;fs&apos;);\n\nfs.unlink(&apos;/tmp/hello&apos;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&apos;successfully deleted /tmp/hello&apos;);\n});\n</code></pre><p>Here is the synchronous version:</p><pre><code class="lang-js">const fs = require(&apos;fs&apos;);\n\nfs.unlinkSync(&apos;/tmp/hello&apos;);\nconsole.log(&apos;successfully deleted /tmp/hello&apos;);\n</code></pre><p>With the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:</p><pre><code class="lang-js">fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&apos;renamed complete&apos;);\n});\nfs.stat(&apos;/tmp/world&apos;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n</code></pre><p>It could be that <code>fs.stat</code> is executed before <code>fs.rename</code>.\nThe correct way to do this is to chain the callbacks.</p><pre><code class="lang-js">fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&apos;/tmp/world&apos;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n</code></pre><p>Most fs functions let you omit the callback argument. If you do, a default\ncallback is used that rethrows errors. To get a trace to the original call\nsite, set the <code>NODE_DEBUG</code> environment variable:</p><pre><code class="lang-txt">$ cat script.js\nfunction bad() {\n  require(&apos;fs&apos;).readFile(&apos;/&apos;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#fs_fs
fs.access	A										<section class="prog__container"><p id='obj.desc'>Tests a user&apos;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. The following constants define the possible values of\n<code>mode</code>. It is possible to create a mask consisting of the bitwise OR of two or\nmore values.</p><p>The final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be populated. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.</p><pre><code class="lang-js">fs.access(&apos;/etc/passwd&apos;, fs.constants.R_OK | fs.constants.W_OK, (err) =&gt; {\n  console.log(err ? &apos;no access!&apos; : &apos;can read/write&apos;);\n});\n</code></pre><p><strong>write (NOT RECOMMENDED)</strong></p><pre><code class="lang-js">fs.access(&apos;myfile&apos;, (err) =&gt; {\n  if (!err) {\n    console.error(&apos;myfile already exists&apos;);\n    return;\n  }\n\n  fs.open(&apos;myfile&apos;, &apos;wx&apos;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</code></pre><p><strong>write (RECOMMENDED)</strong></p><pre><code class="lang-js">fs.open(&apos;myfile&apos;, &apos;wx&apos;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&apos;myfile already exists&apos;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  writeMyData(fd);\n});\n</code></pre><p><strong>read (NOT RECOMMENDED)</strong></p><pre><code class="lang-js">fs.access(&apos;myfile&apos;, (err) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&apos;myfile does not exist&apos;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  fs.open(&apos;myfile&apos;, &apos;r&apos;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</code></pre><p><strong>read (RECOMMENDED)</strong></p><pre><code class="lang-js">fs.open(&apos;myfile&apos;, &apos;r&apos;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&apos;myfile does not exist&apos;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  readMyData(fd);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_access_path_mode_callback
fs access	R	fs.access										http://nodejs.org/api/all.html#fs_fs_access_path_mode_callback
fs.accessSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.access()</code>. This throws if any accessibility\nchecks fail, and does nothing otherwise.</p></section>	http://nodejs.org/api/all.html#fs_fs_accesssync_path_mode
fs accessSync	R	fs.accessSync										http://nodejs.org/api/all.html#fs_fs_accesssync_path_mode
fs.appendFile	A										<section class="prog__container"><p id='obj.desc'>Asynchronously append data to a file, creating the file if it does not yet exist.\n<code>data</code> can be a string or a buffer.</p><p>Example:</p><pre><code class="lang-js">fs.appendFile(&apos;message.txt&apos;, &apos;data to append&apos;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&apos;The &quot;data to append&quot; was appended to file!&apos;);\n});\n</code></pre><p>If <code>options</code> is a string, then it specifies the encoding. Example:</p><pre><code class="lang-js">fs.appendFile(&apos;message.txt&apos;, &apos;data to append&apos;, &apos;utf8&apos;, callback);\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_appendfile_file_data_options_callback
fs appendFile	R	fs.appendFile										http://nodejs.org/api/all.html#fs_fs_appendfile_file_data_options_callback
fs.appendFileSync	A										<section class="prog__container"><p id='obj.desc'>The synchronous version of <code>fs.appendFile()</code>. Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_appendfilesync_file_data_options
fs appendFileSync	R	fs.appendFileSync										http://nodejs.org/api/all.html#fs_fs_appendfilesync_file_data_options
fs.chmod	A										<section class="prog__container"><p id='obj.desc'>Asynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_chmod_path_mode_callback
fs chmod	R	fs.chmod										http://nodejs.org/api/all.html#fs_fs_chmod_path_mode_callback
fs.chmodSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous chmod(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_chmodsync_path_mode
fs chmodSync	R	fs.chmodSync										http://nodejs.org/api/all.html#fs_fs_chmodsync_path_mode
fs.chown	A										<section class="prog__container"><p id='obj.desc'>Asynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_chown_path_uid_gid_callback
fs chown	R	fs.chown										http://nodejs.org/api/all.html#fs_fs_chown_path_uid_gid_callback
fs.chownSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous chown(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_chownsync_path_uid_gid
fs chownSync	R	fs.chownSync										http://nodejs.org/api/all.html#fs_fs_chownsync_path_uid_gid
fs.close	A										<section class="prog__container"><p id='obj.desc'>Asynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_close_fd_callback
fs close	R	fs.close										http://nodejs.org/api/all.html#fs_fs_close_fd_callback
fs.closeSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous close(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_closesync_fd
fs closeSync	R	fs.closeSync										http://nodejs.org/api/all.html#fs_fs_closesync_fd
fs.createReadStream	A										<section class="prog__container"><p id='obj.desc'>Returns a new <code>ReadStream</code> object. (See Readable Stream).</p><p><code>options</code> is an object or string with the following defaults:</p><pre><code class="lang-js">{\n  flags: &apos;r&apos;,\n  encoding: null,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre><p>An example to read the last 10 bytes of a file which is 100 bytes long:</p><pre><code class="lang-js">fs.createReadStream(&apos;sample.txt&apos;, {start: 90, end: 99});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_createreadstream_path_options
fs createReadStream	R	fs.createReadStream										http://nodejs.org/api/all.html#fs_fs_createreadstream_path_options
fs.createWriteStream	A										<section class="prog__container"><p id='obj.desc'>Returns a new <code>WriteStream</code> object. (See Writable Stream).</p><p><code>options</code> is an object or string with the following defaults:</p><pre><code class="lang-js">{\n  flags: &apos;w&apos;,\n  defaultEncoding: &apos;utf8&apos;,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_createwritestream_path_options
fs createWriteStream	R	fs.createWriteStream										http://nodejs.org/api/all.html#fs_fs_createwritestream_path_options
fs.exists	A										<section class="prog__container"><p id='obj.desc'>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false.  Example:</p><p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false.  Example:</p><pre><code class="lang-js">fs.exists(&apos;/etc/passwd&apos;, (exists) =&gt; {\n  console.log(exists ? &apos;it\&apos;s there&apos; : &apos;no passwd!&apos;);\n});\n</code></pre><p><strong>write (NOT RECOMMENDED)</strong></p><pre><code class="lang-js">fs.exists(&apos;myfile&apos;, (exists) =&gt; {\n  if (exists) {\n    console.error(&apos;myfile already exists&apos;);\n  } else {\n    fs.open(&apos;myfile&apos;, &apos;wx&apos;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</code></pre><p><strong>write (RECOMMENDED)</strong></p><pre><code class="lang-js">fs.open(&apos;myfile&apos;, &apos;wx&apos;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&apos;myfile already exists&apos;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n  writeMyData(fd);\n});\n</code></pre><p><strong>read (NOT RECOMMENDED)</strong></p><pre><code class="lang-js">fs.exists(&apos;myfile&apos;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&apos;myfile&apos;, &apos;r&apos;, (err, fd) =&gt; {\n      readMyData(fd);\n    });\n  } else {\n    console.error(&apos;myfile does not exist&apos;);\n  }\n});\n</code></pre><p><strong>read (RECOMMENDED)</strong></p><pre><code class="lang-js">fs.open(&apos;myfile&apos;, &apos;r&apos;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&apos;myfile does not exist&apos;);\n      return;\n    } else {\n      throw err;\n    }\n  } else {\n    readMyData(fd);\n  }\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_exists_path_callback
fs exists	R	fs.exists										http://nodejs.org/api/all.html#fs_fs_exists_path_callback
fs.existsSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.exists()</code>.\nReturns <code>true</code> if the file exists, <code>false</code> otherwise.</p></section>	http://nodejs.org/api/all.html#fs_fs_existssync_path
fs existsSync	R	fs.existsSync										http://nodejs.org/api/all.html#fs_fs_existssync_path
fs.fchmod	A										<section class="prog__container"><p id='obj.desc'>Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_fchmod_fd_mode_callback
fs fchmod	R	fs.fchmod										http://nodejs.org/api/all.html#fs_fs_fchmod_fd_mode_callback
fs.fchmodSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous fchmod(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fchmodsync_fd_mode
fs fchmodSync	R	fs.fchmodSync										http://nodejs.org/api/all.html#fs_fs_fchmodsync_fd_mode
fs.fchown	A										<section class="prog__container"><p id='obj.desc'>Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_fchown_fd_uid_gid_callback
fs fchown	R	fs.fchown										http://nodejs.org/api/all.html#fs_fs_fchown_fd_uid_gid_callback
fs.fchownSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous fchown(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fchownsync_fd_uid_gid
fs fchownSync	R	fs.fchownSync										http://nodejs.org/api/all.html#fs_fs_fchownsync_fd_uid_gid
fs.fdatasync	A										<section class="prog__container"><p id='obj.desc'>Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_fdatasync_fd_callback
fs fdatasync	R	fs.fdatasync										http://nodejs.org/api/all.html#fs_fs_fdatasync_fd_callback
fs.fdatasyncSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous fdatasync(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fdatasyncsync_fd
fs fdatasyncSync	R	fs.fdatasyncSync										http://nodejs.org/api/all.html#fs_fs_fdatasyncsync_fd
fs.fstat	A										<section class="prog__container"><p id='obj.desc'>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <code>fs.Stats</code> object. <code>fstat()</code> is identical to <code>stat()</code>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fstat_fd_callback
fs fstat	R	fs.fstat										http://nodejs.org/api/all.html#fs_fs_fstat_fd_callback
fs.fstatSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous fstat(2). Returns an instance of <code>fs.Stats</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fstatsync_fd
fs fstatSync	R	fs.fstatSync										http://nodejs.org/api/all.html#fs_fs_fstatsync_fd
fs.fsync	A										<section class="prog__container"><p id='obj.desc'>Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_fsync_fd_callback
fs fsync	R	fs.fsync										http://nodejs.org/api/all.html#fs_fs_fsync_fd_callback
fs.fsyncSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous fsync(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_fsyncsync_fd
fs fsyncSync	R	fs.fsyncSync										http://nodejs.org/api/all.html#fs_fs_fsyncsync_fd
fs.ftruncate	A										<section class="prog__container"><p id='obj.desc'>Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.</p><p>For example, the following program retains only the first four bytes of the file</p><pre><code class="lang-js">console.log(fs.readFileSync(&apos;temp.txt&apos;, &apos;utf8&apos;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&apos;temp.txt&apos;, &apos;r+&apos;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&apos;temp.txt&apos;, &apos;utf8&apos;));\n});\n// Prints: Node\n</code></pre><p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (&apos;&apos;). For example,</p><pre><code class="lang-js">console.log(fs.readFileSync(&apos;temp.txt&apos;, &apos;utf-8&apos;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&apos;temp.txt&apos;, &apos;r+&apos;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(!err);\n  console.log(fs.readFileSync(&apos;temp.txt&apos;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&apos;Node.js&apos; in UTF8)\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_ftruncate_fd_len_callback
fs ftruncate	R	fs.ftruncate										http://nodejs.org/api/all.html#fs_fs_ftruncate_fd_len_callback
fs.ftruncateSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous ftruncate(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_ftruncatesync_fd_len
fs ftruncateSync	R	fs.ftruncateSync										http://nodejs.org/api/all.html#fs_fs_ftruncatesync_fd_len
fs.futimes	A										<section class="prog__container"><p id='obj.desc'>Change the file timestamps of a file referenced by the supplied file\ndescriptor.</p></section>	http://nodejs.org/api/all.html#fs_fs_futimes_fd_atime_mtime_callback
fs futimes	R	fs.futimes										http://nodejs.org/api/all.html#fs_fs_futimes_fd_atime_mtime_callback
fs.futimesSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.futimes()</code>. Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_futimessync_fd_atime_mtime
fs futimesSync	R	fs.futimesSync										http://nodejs.org/api/all.html#fs_fs_futimessync_fd_atime_mtime
fs.lchmod	A										<section class="prog__container"><p id='obj.desc'>Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_lchmod_path_mode_callback
fs lchmod	R	fs.lchmod										http://nodejs.org/api/all.html#fs_fs_lchmod_path_mode_callback
fs.lchmodSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous lchmod(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_lchmodsync_path_mode
fs lchmodSync	R	fs.lchmodSync										http://nodejs.org/api/all.html#fs_fs_lchmodsync_path_mode
fs.lchown	A										<section class="prog__container"><p id='obj.desc'>Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_lchown_path_uid_gid_callback
fs lchown	R	fs.lchown										http://nodejs.org/api/all.html#fs_fs_lchown_path_uid_gid_callback
fs.lchownSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous lchown(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_lchownsync_path_uid_gid
fs lchownSync	R	fs.lchownSync										http://nodejs.org/api/all.html#fs_fs_lchownsync_path_uid_gid
fs.link	A										<section class="prog__container"><p id='obj.desc'>Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_link_existingpath_newpath_callback
fs link	R	fs.link										http://nodejs.org/api/all.html#fs_fs_link_existingpath_newpath_callback
fs.linkSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous link(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_linksync_existingpath_newpath
fs linkSync	R	fs.linkSync										http://nodejs.org/api/all.html#fs_fs_linksync_existingpath_newpath
fs.lstat	A										<section class="prog__container"><p id='obj.desc'>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <code>fs.Stats</code> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.</p></section>	http://nodejs.org/api/all.html#fs_fs_lstat_path_callback
fs lstat	R	fs.lstat										http://nodejs.org/api/all.html#fs_fs_lstat_path_callback
fs.lstatSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous lstat(2). Returns an instance of <code>fs.Stats</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_lstatsync_path
fs lstatSync	R	fs.lstatSync										http://nodejs.org/api/all.html#fs_fs_lstatsync_path
fs.mkdir	A										<section class="prog__container"><p id='obj.desc'>Asynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback. <code>mode</code> defaults to <code>0o777</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_mkdir_path_mode_callback
fs mkdir	R	fs.mkdir										http://nodejs.org/api/all.html#fs_fs_mkdir_path_mode_callback
fs.mkdirSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous mkdir(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_mkdirsync_path_mode
fs mkdirSync	R	fs.mkdirSync										http://nodejs.org/api/all.html#fs_fs_mkdirsync_path_mode
fs.mkdtemp	A										<section class="prog__container"><p id='obj.desc'>Creates a unique temporary directory.</p><p>Example:</p><pre><code class="lang-js">fs.mkdtemp(&apos;/tmp/foo-&apos;, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2\n});\n</code></pre><p><em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>,\nthe <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator\n(<code>require(&apos;path&apos;).sep</code>).</p><pre><code class="lang-js">// The parent directory for the new temporary directory\nconst tmpDir = &apos;/tmp&apos;;\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst path = require(&apos;path&apos;);\nfs.mkdtemp(tmpDir + path.sep, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_mkdtemp_prefix_options_callback
fs mkdtemp	R	fs.mkdtemp										http://nodejs.org/api/all.html#fs_fs_mkdtemp_prefix_options_callback
fs.mkdtempSync	A										<section class="prog__container"><p id='obj.desc'>The synchronous version of <code>fs.mkdtemp()</code>. Returns the created\nfolder path.</p></section>	http://nodejs.org/api/all.html#fs_fs_mkdtempsync_prefix_options
fs mkdtempSync	R	fs.mkdtempSync										http://nodejs.org/api/all.html#fs_fs_mkdtempsync_prefix_options
fs.open	A										<section class="prog__container"><p id='obj.desc'>Asynchronous file open. See open(2). <code>flags</code> can be:</p><p><em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such,\nopening a directory on OS X and Linux with the <code>&apos;a+&apos;</code> flag - see example below -\nwill return an error. In contrast, on Windows and FreeBSD, a file descriptor\nwill be returned.</em></p><pre><code class="lang-js">// OS X and Linux\nfs.open(&apos;&lt;directory&gt;&apos;, &apos;a+&apos;, (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n});\n\n// Windows and FreeBSD\nfs.open(&apos;&lt;directory&gt;&apos;, &apos;a+&apos;, (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_open_path_flags_mode_callback
fs open	R	fs.open										http://nodejs.org/api/all.html#fs_fs_open_path_flags_mode_callback
fs.openSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.open()</code>. Returns an integer representing the file\ndescriptor.</p></section>	http://nodejs.org/api/all.html#fs_fs_opensync_path_flags_mode
fs openSync	R	fs.openSync										http://nodejs.org/api/all.html#fs_fs_opensync_path_flags_mode
fs.read	A										<section class="prog__container"><p id='obj.desc'>Read data from the file specified by <code>fd</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_read_fd_buffer_offset_length_position_callback
fs read	R	fs.read										http://nodejs.org/api/all.html#fs_fs_read_fd_buffer_offset_length_position_callback
fs.readdir	A										<section class="prog__container"><p id='obj.desc'>Asynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&apos;.&apos;</code> and <code>&apos;..&apos;</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_readdir_path_options_callback
fs readdir	R	fs.readdir										http://nodejs.org/api/all.html#fs_fs_readdir_path_options_callback
fs.readdirSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous readdir(3). Returns an array of filenames excluding <code>&apos;.&apos;</code> and\n<code>&apos;..&apos;</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_readdirsync_path_options
fs readdirSync	R	fs.readdirSync										http://nodejs.org/api/all.html#fs_fs_readdirsync_path_options
fs.readFile	A										<section class="prog__container"><p id='obj.desc'>Asynchronously reads the entire contents of a file. Example:</p><p>Asynchronously reads the entire contents of a file. Example:</p><pre><code class="lang-js">fs.readFile(&apos;/etc/passwd&apos;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre><p>If <code>options</code> is a string, then it specifies the encoding. Example:</p><pre><code class="lang-js">fs.readFile(&apos;/etc/passwd&apos;, &apos;utf8&apos;, callback);\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_readfile_file_options_callback
fs readFile	R	fs.readFile										http://nodejs.org/api/all.html#fs_fs_readfile_file_options_callback
fs.readFileSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.readFile</code>. Returns the contents of the <code>file</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_readfilesync_file_options
fs readFileSync	R	fs.readFileSync										http://nodejs.org/api/all.html#fs_fs_readfilesync_file_options
fs.readlink	A										<section class="prog__container"><p id='obj.desc'>Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_readlink_path_options_callback
fs readlink	R	fs.readlink										http://nodejs.org/api/all.html#fs_fs_readlink_path_options_callback
fs.readlinkSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous readlink(2). Returns the symbolic link&apos;s string value.</p></section>	http://nodejs.org/api/all.html#fs_fs_readlinksync_path_options
fs readlinkSync	R	fs.readlinkSync										http://nodejs.org/api/all.html#fs_fs_readlinksync_path_options
fs.readSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.read()</code>. Returns the number of <code>bytesRead</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_readsync_fd_buffer_offset_length_position
fs readSync	R	fs.readSync										http://nodejs.org/api/all.html#fs_fs_readsync_fd_buffer_offset_length_position
fs.realpath	A										<section class="prog__container"><p id='obj.desc'>Asynchronous realpath(3). The <code>callback</code> gets two arguments <code>(err,\nresolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.</p></section>	http://nodejs.org/api/all.html#fs_fs_realpath_path_options_callback
fs realpath	R	fs.realpath										http://nodejs.org/api/all.html#fs_fs_realpath_path_options_callback
fs.realpathSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous realpath(3). Returns the resolved path.</p></section>	http://nodejs.org/api/all.html#fs_fs_realpathsync_path_options
fs realpathSync	R	fs.realpathSync										http://nodejs.org/api/all.html#fs_fs_realpathsync_path_options
fs.rename	A										<section class="prog__container"><p id='obj.desc'>Asynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_rename_oldpath_newpath_callback
fs rename	R	fs.rename										http://nodejs.org/api/all.html#fs_fs_rename_oldpath_newpath_callback
fs.renameSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous rename(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_renamesync_oldpath_newpath
fs renameSync	R	fs.renameSync										http://nodejs.org/api/all.html#fs_fs_renamesync_oldpath_newpath
fs.rmdir	A										<section class="prog__container"><p id='obj.desc'>Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_rmdir_path_callback
fs rmdir	R	fs.rmdir										http://nodejs.org/api/all.html#fs_fs_rmdir_path_callback
fs.rmdirSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous rmdir(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_rmdirsync_path
fs rmdirSync	R	fs.rmdirSync										http://nodejs.org/api/all.html#fs_fs_rmdirsync_path
fs.stat	A										<section class="prog__container"><p id='obj.desc'>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <code>fs.Stats</code> object.</p></section>	http://nodejs.org/api/all.html#fs_fs_stat_path_callback
fs stat	R	fs.stat										http://nodejs.org/api/all.html#fs_fs_stat_path_callback
fs.statSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous stat(2). Returns an instance of <code>fs.Stats</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_statsync_path
fs statSync	R	fs.statSync										http://nodejs.org/api/all.html#fs_fs_statsync_path
fs.symlink	A										<section class="prog__container"><p id='obj.desc'>Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The <code>type</code> argument can be set to <code>&apos;dir&apos;</code>,\n<code>&apos;file&apos;</code>, or <code>&apos;junction&apos;</code> (default is <code>&apos;file&apos;</code>) and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using <code>&apos;junction&apos;</code>, the <code>target</code>\nargument will automatically be normalized to absolute path.</p><p>Here is an example below:</p><pre><code class="lang-js">fs.symlink(&apos;./foo&apos;, &apos;./new-port&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_symlink_target_path_type_callback
fs symlink	R	fs.symlink										http://nodejs.org/api/all.html#fs_fs_symlink_target_path_type_callback
fs.symlinkSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous symlink(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_symlinksync_target_path_type
fs symlinkSync	R	fs.symlinkSync										http://nodejs.org/api/all.html#fs_fs_symlinksync_target_path_type
fs.truncate	A										<section class="prog__container"><p id='obj.desc'>Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p></section>	http://nodejs.org/api/all.html#fs_fs_truncate_path_len_callback
fs truncate	R	fs.truncate										http://nodejs.org/api/all.html#fs_fs_truncate_path_len_callback
fs.truncateSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous truncate(2). Returns <code>undefined</code>. A file descriptor can also be\npassed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p></section>	http://nodejs.org/api/all.html#fs_fs_truncatesync_path_len
fs truncateSync	R	fs.truncateSync										http://nodejs.org/api/all.html#fs_fs_truncatesync_path_len
fs.unlink	A										<section class="prog__container"><p id='obj.desc'>Asynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.</p></section>	http://nodejs.org/api/all.html#fs_fs_unlink_path_callback
fs unlink	R	fs.unlink										http://nodejs.org/api/all.html#fs_fs_unlink_path_callback
fs.unlinkSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous unlink(2). Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_unlinksync_path
fs unlinkSync	R	fs.unlinkSync										http://nodejs.org/api/all.html#fs_fs_unlinksync_path
fs.unwatchFile	A										<section class="prog__container"><p id='obj.desc'>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed and you\nhave effectively stopped watching <code>filename</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_unwatchfile_filename_listener
fs unwatchFile	R	fs.unwatchFile										http://nodejs.org/api/all.html#fs_fs_unwatchfile_filename_listener
fs.utimes	A										<section class="prog__container"><p id='obj.desc'>Change file timestamps of the file referenced by the supplied path.</p></section>	http://nodejs.org/api/all.html#fs_fs_utimes_path_atime_mtime_callback
fs utimes	R	fs.utimes										http://nodejs.org/api/all.html#fs_fs_utimes_path_atime_mtime_callback
fs.utimesSync	A										<section class="prog__container"><p id='obj.desc'>Synchronous version of <code>fs.utimes()</code>. Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_utimessync_path_atime_mtime
fs utimesSync	R	fs.utimesSync										http://nodejs.org/api/all.html#fs_fs_utimessync_path_atime_mtime
fs.watch	A										<section class="prog__container"><p id='obj.desc'>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.  The returned object is a <code>fs.FSWatcher</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_watch_filename_options_listener
fs watch	R	fs.watch										http://nodejs.org/api/all.html#fs_fs_watch_filename_options_listener
fs.watchFile	A										<section class="prog__container"><p id='obj.desc'>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.</p><p>The <code>listener</code> gets two arguments the current stat object and the previous\nstat object:</p><pre><code class="lang-js">fs.watchFile(&apos;message.text&apos;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_watchfile_filename_options_listener
fs watchFile	R	fs.watchFile										http://nodejs.org/api/all.html#fs_fs_watchfile_filename_options_listener
fs.write	D								*[[fs.write(fs_fs_write_fd_string_position_encoding_callback)]] Write string to the file specified by fd.  If string is not a string, then the value will be coerced to one.\n*[[fs.write(fs_fs_write_fd_buffer_offset_length_position_callback)]] Write buffer to the file specified by fd.			
fs write	R	fs.write										http://nodejs.org/api/all.html#fs_fs_write_fd_buffer_offset_length_position_callback
fs.writeFile	A										<section class="prog__container"><p id='obj.desc'>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.</p><p>Example:</p><pre><code class="lang-js">fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node.js&apos;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&apos;It\&apos;s saved!&apos;);\n});\n</code></pre><p>If <code>options</code> is a string, then it specifies the encoding. Example:</p><pre><code class="lang-js">fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node.js&apos;, &apos;utf8&apos;, callback);\n</code></pre></section>	http://nodejs.org/api/all.html#fs_fs_writefile_file_data_options_callback
fs writeFile	R	fs.writeFile										http://nodejs.org/api/all.html#fs_fs_writefile_file_data_options_callback
fs.writeFileSync	A										<section class="prog__container"><p id='obj.desc'>The synchronous version of <code>fs.writeFile()</code>. Returns <code>undefined</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_writefilesync_file_data_options
fs writeFileSync	R	fs.writeFileSync										http://nodejs.org/api/all.html#fs_fs_writefilesync_file_data_options
fs.writeSync	D								*[[fs.writeSync(fs_fs_writesync_fd_string_position_encoding)]] Synchronous versions of fs.write  . Returns the number of bytes written.\n*[[fs.writeSync(fs_fs_writesync_fd_buffer_offset_length_position)]] Synchronous versions of fs.write  . Returns the number of bytes written.			
fs writeSync	R	fs.writeSync										http://nodejs.org/api/all.html#fs_fs_writesync_fd_buffer_offset_length_position
fs.constants	A										<section class="prog__container"><p id='obj.desc'>Returns an object containing commonly used constants for file system\noperations. The specific constants currently defined are described in\nFS Constants.</p></section>	http://nodejs.org/api/all.html#fs_fs_constants
fs constants	R	fs.constants										http://nodejs.org/api/all.html#fs_fs_constants
fs.FSWatcher	A										<section class="prog__container"><p id='obj.desc'>Objects returned from <code>fs.watch()</code> are of this type.</p></section>	http://nodejs.org/api/all.html#fs_class_fs_fswatcher
fs FSWatcher	R	fs.FSWatcher										http://nodejs.org/api/all.html#fs_class_fs_fswatcher
fs.FSWatcher.close	A										<section class="prog__container"><p id='obj.desc'>Stop watching for changes on the given <code>fs.FSWatcher</code>.</p><pre><code>watcher.close()</code></pre></section>	http://nodejs.org/api/all.html#fs_fswatcher_close
fs.FSWatcher close	R	fs.FSWatcher.close										http://nodejs.org/api/all.html#fs_fswatcher_close
fs FSWatcher close	R	fs.FSWatcher close										http://nodejs.org/api/all.html#fs_fswatcher_close
fs.FSWatcher.change	A										<section class="prog__container"><p id='obj.desc'>Emitted when something changes in a watched directory or file.\nSee more details in <code>fs.watch()</code>.</p><p>The <code>filename</code> argument may not be provided depending on operating system\nsupport. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if\n<code>fs.watch()</code> is called with its <code>encoding</code> option set to <code>&apos;buffer&apos;</code>, otherwise\n<code>filename</code> will be a string.</p><pre><code class="lang-js">// Example when handled through fs.watch listener\nfs.watch(&apos;./tmp&apos;, {encoding: &apos;buffer&apos;}, (eventType, filename) =&gt; {\n  if (filename)\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n});\n</code></pre></section>	http://nodejs.org/api/all.html#fs_event_change
fs.FSWatcher change	R	fs.FSWatcher.change										http://nodejs.org/api/all.html#fs_event_change
fs FSWatcher change	R	fs.FSWatcher change										http://nodejs.org/api/all.html#fs_event_change
fs.FSWatcher.error	A										<section class="prog__container"><p id='obj.desc'>Emitted when an error occurs.</p></section>	http://nodejs.org/api/all.html#fs_event_error
fs.FSWatcher error	R	fs.FSWatcher.error										http://nodejs.org/api/all.html#fs_event_error
fs FSWatcher error	R	fs.FSWatcher error										http://nodejs.org/api/all.html#fs_event_error
fs.ReadStream	A										<section class="prog__container"><p id='obj.desc'><code>ReadStream</code> is a Readable Stream.</p></section>	http://nodejs.org/api/all.html#fs_class_fs_readstream
fs ReadStream	R	fs.ReadStream										http://nodejs.org/api/all.html#fs_class_fs_readstream
fs.ReadStream.bytesRead	A										<section class="prog__container"><p id='obj.desc'>The number of bytes read so far.</p></section>	http://nodejs.org/api/all.html#fs_readstream_bytesread
fs.ReadStream bytesRead	R	fs.ReadStream.bytesRead										http://nodejs.org/api/all.html#fs_readstream_bytesread
fs ReadStream bytesRead	R	fs.ReadStream bytesRead										http://nodejs.org/api/all.html#fs_readstream_bytesread
fs.ReadStream.path	A										<section class="prog__container"><p id='obj.desc'>The path to the file the stream is reading from as specified in the first\nargument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then\n<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>readStream.path</code> will be a <code>Buffer</code>.</p></section>	http://nodejs.org/api/all.html#fs_readstream_path
fs.ReadStream path	R	fs.ReadStream.path										http://nodejs.org/api/all.html#fs_readstream_path
fs ReadStream path	R	fs.ReadStream path										http://nodejs.org/api/all.html#fs_readstream_path
fs.ReadStream.open	A										<section class="prog__container"><p id='obj.desc'>Emitted when the ReadStream&apos;s file is opened.</p></section>	http://nodejs.org/api/all.html#fs_event_open
fs.ReadStream open	R	fs.ReadStream.open										http://nodejs.org/api/all.html#fs_event_open
fs ReadStream open	R	fs.ReadStream open										http://nodejs.org/api/all.html#fs_event_open
fs.ReadStream.close	A										<section class="prog__container"><p id='obj.desc'>Emitted when the <code>ReadStream</code>&apos;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.</p></section>	http://nodejs.org/api/all.html#fs_event_close
fs.ReadStream close	R	fs.ReadStream.close										http://nodejs.org/api/all.html#fs_event_close
fs ReadStream close	R	fs.ReadStream close										http://nodejs.org/api/all.html#fs_event_close
fs.Stats	A										<section class="prog__container"><p id='obj.desc'>Objects returned from <code>fs.stat()</code>, <code>fs.lstat()</code> and <code>fs.fstat()</code> and their\nsynchronous counterparts are of this type.</p><p>For a regular file <code>util.inspect(stats)</code> would return a string very\nsimilar to this:</p><pre><code class="lang-js">{\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\n}\n</code></pre></section>	http://nodejs.org/api/all.html#fs_class_fs_stats
fs Stats	R	fs.Stats										http://nodejs.org/api/all.html#fs_class_fs_stats
fs.WriteStream	A										<section class="prog__container"><p id='obj.desc'><code>WriteStream</code> is a Writable Stream.</p></section>	http://nodejs.org/api/all.html#fs_class_fs_writestream
fs WriteStream	R	fs.WriteStream										http://nodejs.org/api/all.html#fs_class_fs_writestream
fs.WriteStream.bytesWritten	A										<section class="prog__container"><p id='obj.desc'>The number of bytes written so far. Does not include data that is still queued\nfor writing.</p></section>	http://nodejs.org/api/all.html#fs_writestream_byteswritten
fs.WriteStream bytesWritten	R	fs.WriteStream.bytesWritten										http://nodejs.org/api/all.html#fs_writestream_byteswritten
fs WriteStream bytesWritten	R	fs.WriteStream bytesWritten										http://nodejs.org/api/all.html#fs_writestream_byteswritten
fs.WriteStream.path	A										<section class="prog__container"><p id='obj.desc'>The path to the file the stream is writing to as specified in the first\nargument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then\n<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>writeStream.path</code> will be a <code>Buffer</code>.</p></section>	http://nodejs.org/api/all.html#fs_writestream_path
fs.WriteStream path	R	fs.WriteStream.path										http://nodejs.org/api/all.html#fs_writestream_path
fs WriteStream path	R	fs.WriteStream path										http://nodejs.org/api/all.html#fs_writestream_path
fs.WriteStream.open	A										<section class="prog__container"><p id='obj.desc'>Emitted when the WriteStream&apos;s file is opened.</p></section>	http://nodejs.org/api/all.html#fs_event_open
fs.WriteStream open	R	fs.WriteStream.open										http://nodejs.org/api/all.html#fs_event_open
fs WriteStream open	R	fs.WriteStream open										http://nodejs.org/api/all.html#fs_event_open
fs.WriteStream.close	A										<section class="prog__container"><p id='obj.desc'>Emitted when the <code>WriteStream</code>&apos;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.</p></section>	http://nodejs.org/api/all.html#fs_event_close
fs.WriteStream close	R	fs.WriteStream.close										http://nodejs.org/api/all.html#fs_event_close
fs WriteStream close	R	fs.WriteStream close										http://nodejs.org/api/all.html#fs_event_close
http	A										<section class="prog__container"><p id='obj.desc'>To use the HTTP server and client one must <code>require(&apos;http&apos;)</code>.</p><p>HTTP message headers are represented by an object like this:</p><pre><code class="lang-js">{ &apos;content-length&apos;: &apos;123&apos;,\n  &apos;content-type&apos;: &apos;text/plain&apos;,\n  &apos;connection&apos;: &apos;keep-alive&apos;,\n  &apos;host&apos;: &apos;mysite.com&apos;,\n  &apos;accept&apos;: &apos;*/*&apos; }\n</code></pre><p>The raw headers as they were received are retained in the <code>rawHeaders</code>\nproperty, which is an array of <code>[key, value, key2, value2, ...]</code>.  For\nexample, the previous message header object might have a <code>rawHeaders</code>\nlist like the following:</p><pre><code class="lang-js">[ &apos;ConTent-Length&apos;, &apos;123456&apos;,\n  &apos;content-LENGTH&apos;, &apos;123&apos;,\n  &apos;content-type&apos;, &apos;text/plain&apos;,\n  &apos;CONNECTION&apos;, &apos;keep-alive&apos;,\n  &apos;Host&apos;, &apos;mysite.com&apos;,\n  &apos;accepT&apos;, &apos;*/*&apos; ]\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#http_http
http.createServer	A										<section class="prog__container"><p id='obj.desc'>Returns a new instance of <code>http.Server</code>.</p></section>	http://nodejs.org/api/all.html#http_http_createserver_requestlistener
http createServer	R	http.createServer										http://nodejs.org/api/all.html#http_http_createserver_requestlistener
http.get	A										<section class="prog__container"><p id='obj.desc'>Since most requests are GET requests without bodies, Node.js provides this\nconvenience method. The only difference between this method and\n<code>http.request()</code> is that it sets the method to GET and calls <code>req.end()</code>\nautomatically. Note that response data must be consumed in the callback\nfor reasons stated in <code>http.ClientRequest</code> section.</p><p>JSON Fetching Example:</p><pre><code class="lang-js">http.get(&apos;http://nodejs.org/dist/index.json&apos;, (res) =&gt; {\n  const statusCode = res.statusCode;\n  const contentType = res.headers[&apos;content-type&apos;];\n\n  let error;\n  if (statusCode !== 200) {\n    error = new Error(`Request Failed.\n` +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\/json/.test(contentType)) {\n    error = new Error(`Invalid content-type.\n` +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.log(error.message);\n    // consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding(&apos;utf8&apos;);\n  let rawData = &apos;&apos;;\n  res.on(&apos;data&apos;, (chunk) =&gt; rawData += chunk);\n  res.on(&apos;end&apos;, () =&gt; {\n    try {\n      let parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.log(e.message);\n    }\n  });\n}).on(&apos;error&apos;, (e) =&gt; {\n  console.log(`Got error: ${e.message}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#http_http_get_options_callback
http get	R	http.get										http://nodejs.org/api/all.html#http_http_get_options_callback
http.request	A										<section class="prog__container"><p id='obj.desc'>Node.js maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.</p><p>Example:</p><pre><code class="lang-js">var postData = querystring.stringify({\n  &apos;msg&apos; : &apos;Hello World!&apos;\n});\n\nvar options = {\n  hostname: &apos;www.google.com&apos;,\n  port: 80,\n  path: &apos;/upload&apos;,\n  method: &apos;POST&apos;,\n  headers: {\n    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,\n    &apos;Content-Length&apos;: Buffer.byteLength(postData)\n  }\n};\n\nvar req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding(&apos;utf8&apos;);\n  res.on(&apos;data&apos;, (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on(&apos;end&apos;, () =&gt; {\n    console.log(&apos;No more data in response.&apos;);\n  });\n});\n\nreq.on(&apos;error&apos;, (e) =&gt; {\n  console.log(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n</code></pre></section>	http://nodejs.org/api/all.html#http_http_request_options_callback
http request	R	http.request										http://nodejs.org/api/all.html#http_http_request_options_callback
http.METHODS	A										<section class="prog__container"><p id='obj.desc'>A list of the HTTP methods that are supported by the parser.</p></section>	http://nodejs.org/api/all.html#http_http_methods
http METHODS	R	http.METHODS										http://nodejs.org/api/all.html#http_http_methods
http.STATUS_CODES	A										<section class="prog__container"><p id='obj.desc'>A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example, <code>http.STATUS_CODES[404] === &apos;Not\nFound&apos;</code>.</p></section>	http://nodejs.org/api/all.html#http_http_status_codes
http STATUS_CODES	R	http.STATUS_CODES										http://nodejs.org/api/all.html#http_http_status_codes
http.globalAgent	A										<section class="prog__container"><p id='obj.desc'>Global instance of Agent which is used as the default for all HTTP client\nrequests.</p></section>	http://nodejs.org/api/all.html#http_http_globalagent
http globalAgent	R	http.globalAgent										http://nodejs.org/api/all.html#http_http_globalagent
http.Agent	A										<section class="prog__container"><p id='obj.desc'>The HTTP Agent is used for pooling sockets used in HTTP client\nrequests.</p><p>Sockets are removed from the agent&apos;s pool when the socket emits either\na <code>&apos;close&apos;</code> event or a special <code>&apos;agentRemove&apos;</code> event. This means that if\nyou intend to keep one HTTP request open for a long time and don&apos;t\nwant it to stay in the pool you can do something along the lines of:</p><pre><code class="lang-js">http.get(options, (res) =&gt; {\n  // Do stuff\n}).on(&apos;socket&apos;, (socket) =&gt; {\n  socket.emit(&apos;agentRemove&apos;);\n});\n</code></pre><p>Alternatively, you could just opt out of pooling entirely using\n<code>agent:false</code>:</p><pre><code class="lang-js">http.get({\n  hostname: &apos;localhost&apos;,\n  port: 80,\n  path: &apos;/&apos;,\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n});\n</code></pre></section>	http://nodejs.org/api/all.html#http_class_http_agent
http Agent	R	http.Agent										http://nodejs.org/api/all.html#http_class_http_agent
http.Agent.createConnection	A										<section class="prog__container"><p id='obj.desc'>Produces a socket/stream to be used for HTTP requests.</p><pre><code>agent.createConnection(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_agent_createconnection_options_callback
http.Agent createConnection	R	http.Agent.createConnection										http://nodejs.org/api/all.html#http_agent_createconnection_options_callback
http Agent createConnection	R	http.Agent createConnection										http://nodejs.org/api/all.html#http_agent_createconnection_options_callback
http.Agent.destroy	A										<section class="prog__container"><p id='obj.desc'>Destroy any sockets that are currently in use by the agent.</p><pre><code>agent.destroy()</code></pre></section>	http://nodejs.org/api/all.html#http_agent_destroy
http.Agent destroy	R	http.Agent.destroy										http://nodejs.org/api/all.html#http_agent_destroy
http Agent destroy	R	http.Agent destroy										http://nodejs.org/api/all.html#http_agent_destroy
http.Agent.getName	A										<section class="prog__container"><p id='obj.desc'>Get a unique name for a set of request options, to determine whether a\nconnection can be reused.  In the http agent, this returns\n<code>host:port:localAddress</code>.  In the https agent, the name includes the\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\nsocket reusability.</p><pre><code>agent.getName(options)</code></pre></section>	http://nodejs.org/api/all.html#http_agent_getname_options
http.Agent getName	R	http.Agent.getName										http://nodejs.org/api/all.html#http_agent_getname_options
http Agent getName	R	http.Agent getName										http://nodejs.org/api/all.html#http_agent_getname_options
http.Agent.freeSockets	A										<section class="prog__container"><p id='obj.desc'>An object which contains arrays of sockets currently awaiting use by\nthe Agent when HTTP KeepAlive is used.  Do not modify.</p></section>	http://nodejs.org/api/all.html#http_agent_freesockets
http.Agent freeSockets	R	http.Agent.freeSockets										http://nodejs.org/api/all.html#http_agent_freesockets
http Agent freeSockets	R	http.Agent freeSockets										http://nodejs.org/api/all.html#http_agent_freesockets
http.Agent.maxFreeSockets	A										<section class="prog__container"><p id='obj.desc'>By default set to 256.  For Agents supporting HTTP KeepAlive, this\nsets the maximum number of sockets that will be left open in the free\nstate.</p></section>	http://nodejs.org/api/all.html#http_agent_maxfreesockets
http.Agent maxFreeSockets	R	http.Agent.maxFreeSockets										http://nodejs.org/api/all.html#http_agent_maxfreesockets
http Agent maxFreeSockets	R	http.Agent maxFreeSockets										http://nodejs.org/api/all.html#http_agent_maxfreesockets
http.Agent.maxSockets	A										<section class="prog__container"><p id='obj.desc'>By default set to Infinity. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is either a &apos;host:port&apos; or\n&apos;host:port:localAddress&apos; combination.</p></section>	http://nodejs.org/api/all.html#http_agent_maxsockets
http.Agent maxSockets	R	http.Agent.maxSockets										http://nodejs.org/api/all.html#http_agent_maxsockets
http Agent maxSockets	R	http.Agent maxSockets										http://nodejs.org/api/all.html#http_agent_maxsockets
http.Agent.requests	A										<section class="prog__container"><p id='obj.desc'>An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.</p></section>	http://nodejs.org/api/all.html#http_agent_requests
http.Agent requests	R	http.Agent.requests										http://nodejs.org/api/all.html#http_agent_requests
http Agent requests	R	http.Agent requests										http://nodejs.org/api/all.html#http_agent_requests
http.Agent.sockets	A										<section class="prog__container"><p id='obj.desc'>An object which contains arrays of sockets currently in use by the\nAgent.  Do not modify.</p></section>	http://nodejs.org/api/all.html#http_agent_sockets
http.Agent sockets	R	http.Agent.sockets										http://nodejs.org/api/all.html#http_agent_sockets
http Agent sockets	R	http.Agent sockets										http://nodejs.org/api/all.html#http_agent_sockets
http.ClientRequest	A										<section class="prog__container"><p id='obj.desc'>This object is created internally and returned from <code>http.request()</code>.  It\nrepresents an <em>in-progress</em> request whose header has already been queued.  The\nheader is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,\n<code>removeHeader(name)</code> API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.</p></section>	http://nodejs.org/api/all.html#http_class_http_clientrequest
http ClientRequest	R	http.ClientRequest										http://nodejs.org/api/all.html#http_class_http_clientrequest
http.ClientRequest.abort	D								*[[http.ClientRequest.abort(http_event_abort)]] Emitted when the request has been aborted by the client. This event is only emitted on the first call to abort  .\n*[[http.ClientRequest.abort(http_request_abort)]] Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.			
http.ClientRequest abort	R	http.ClientRequest.abort										http://nodejs.org/api/all.html#http_request_abort
http ClientRequest abort	R	http.ClientRequest abort										http://nodejs.org/api/all.html#http_request_abort
http.ClientRequest.end	A										<section class="prog__container"><p id='obj.desc'>Finishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating <code>&apos;0\r\n\r\n&apos;</code>.</p><pre><code>request.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_request_end_data_encoding_callback
http.ClientRequest end	R	http.ClientRequest.end										http://nodejs.org/api/all.html#http_request_end_data_encoding_callback
http ClientRequest end	R	http.ClientRequest end										http://nodejs.org/api/all.html#http_request_end_data_encoding_callback
http.ClientRequest.flushHeaders	A										<section class="prog__container"><p id='obj.desc'>Flush the request headers.</p><pre><code>request.flushHeaders()</code></pre></section>	http://nodejs.org/api/all.html#http_request_flushheaders
http.ClientRequest flushHeaders	R	http.ClientRequest.flushHeaders										http://nodejs.org/api/all.html#http_request_flushheaders
http ClientRequest flushHeaders	R	http.ClientRequest flushHeaders										http://nodejs.org/api/all.html#http_request_flushheaders
http.ClientRequest.setNoDelay	A										<section class="prog__container"><p id='obj.desc'>Once a socket is assigned to this request and is connected\n<code>socket.setNoDelay()</code> will be called.</p><pre><code>request.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#http_request_setnodelay_nodelay
http.ClientRequest setNoDelay	R	http.ClientRequest.setNoDelay										http://nodejs.org/api/all.html#http_request_setnodelay_nodelay
http ClientRequest setNoDelay	R	http.ClientRequest setNoDelay										http://nodejs.org/api/all.html#http_request_setnodelay_nodelay
http.ClientRequest.setSocketKeepAlive	A										<section class="prog__container"><p id='obj.desc'>Once a socket is assigned to this request and is connected\n<code>socket.setKeepAlive()</code> will be called.</p><pre><code>request.setSocketKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#http_request_setsocketkeepalive_enable_initialdelay
http.ClientRequest setSocketKeepAlive	R	http.ClientRequest.setSocketKeepAlive										http://nodejs.org/api/all.html#http_request_setsocketkeepalive_enable_initialdelay
http ClientRequest setSocketKeepAlive	R	http.ClientRequest setSocketKeepAlive										http://nodejs.org/api/all.html#http_request_setsocketkeepalive_enable_initialdelay
http.ClientRequest.setTimeout	A										<section class="prog__container"><p id='obj.desc'>Once a socket is assigned to this request and is connected\n<code>socket.setTimeout()</code> will be called.</p><pre><code>request.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_request_settimeout_timeout_callback
http.ClientRequest setTimeout	R	http.ClientRequest.setTimeout										http://nodejs.org/api/all.html#http_request_settimeout_timeout_callback
http ClientRequest setTimeout	R	http.ClientRequest setTimeout										http://nodejs.org/api/all.html#http_request_settimeout_timeout_callback
http.ClientRequest.write	A										<section class="prog__container"><p id='obj.desc'>Sends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n<code>[&apos;Transfer-Encoding&apos;, &apos;chunked&apos;]</code> header line when\ncreating the request.</p><pre><code>request.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_request_write_chunk_encoding_callback
http.ClientRequest write	R	http.ClientRequest.write										http://nodejs.org/api/all.html#http_request_write_chunk_encoding_callback
http ClientRequest write	R	http.ClientRequest write										http://nodejs.org/api/all.html#http_request_write_chunk_encoding_callback
http.ClientRequest.aborted	A										<section class="prog__container"><p id='obj.desc'>Emitted when the request has been aborted by the server and the network\nsocket has closed.</p></section>	http://nodejs.org/api/all.html#http_event_aborted
http.ClientRequest aborted	R	http.ClientRequest.aborted										http://nodejs.org/api/all.html#http_event_aborted
http ClientRequest aborted	R	http.ClientRequest aborted										http://nodejs.org/api/all.html#http_event_aborted
http.ClientRequest.connect	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this\nevent isn&apos;t being listened for, clients receiving a <code>CONNECT</code> method will have\ntheir connections closed.</p><p>A client and server pair that shows you how to listen for the <code>&apos;connect&apos;</code> event:</p><pre><code class="lang-js">const http = require(&apos;http&apos;);\nconst net = require(&apos;net&apos;);\nconst url = require(&apos;url&apos;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;okay&apos;);\n});\nproxy.on(&apos;connect&apos;, (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  var srvUrl = url.parse(`http://${req.url}`);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write(&apos;HTTP/1.1 200 Connection Established\r\n&apos; +\n                    &apos;Proxy-agent: Node.js-Proxy\r\n&apos; +\n                    &apos;\r\n&apos;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &apos;127.0.0.1&apos;, () =&gt; {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &apos;127.0.0.1&apos;,\n    method: &apos;CONNECT&apos;,\n    path: &apos;www.google.com:80&apos;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&apos;connect&apos;, (res, socket, head) =&gt; {\n    console.log(&apos;got connected!&apos;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&apos;GET / HTTP/1.1\r\n&apos; +\n                 &apos;Host: www.google.com:80\r\n&apos; +\n                 &apos;Connection: close\r\n&apos; +\n                 &apos;\r\n&apos;);\n    socket.on(&apos;data&apos;, (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on(&apos;end&apos;, () =&gt; {\n      proxy.close();\n    });\n  });\n});\n</code></pre></section>	http://nodejs.org/api/all.html#http_event_connect
http.ClientRequest connect	R	http.ClientRequest.connect										http://nodejs.org/api/all.html#http_event_connect
http ClientRequest connect	R	http.ClientRequest connect										http://nodejs.org/api/all.html#http_event_connect
http.ClientRequest.continue	A										<section class="prog__container"><p id='obj.desc'>Emitted when the server sends a &apos;100 Continue&apos; HTTP response, usually because\nthe request contained &apos;Expect: 100-continue&apos;. This is an instruction that\nthe client should send the request body.</p></section>	http://nodejs.org/api/all.html#http_event_continue
http.ClientRequest continue	R	http.ClientRequest.continue										http://nodejs.org/api/all.html#http_event_continue
http ClientRequest continue	R	http.ClientRequest continue										http://nodejs.org/api/all.html#http_event_continue
http.ClientRequest.response	A										<section class="prog__container"><p id='obj.desc'>Emitted when a response is received to this request. This event is emitted only\nonce.</p></section>	http://nodejs.org/api/all.html#http_event_response
http.ClientRequest response	R	http.ClientRequest.response										http://nodejs.org/api/all.html#http_event_response
http ClientRequest response	R	http.ClientRequest response										http://nodejs.org/api/all.html#http_event_response
http.ClientRequest.socket	A										<section class="prog__container"><p id='obj.desc'>Emitted after a socket is assigned to this request.</p></section>	http://nodejs.org/api/all.html#http_event_socket
http.ClientRequest socket	R	http.ClientRequest.socket										http://nodejs.org/api/all.html#http_event_socket
http ClientRequest socket	R	http.ClientRequest socket										http://nodejs.org/api/all.html#http_event_socket
http.ClientRequest.upgrade	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a server responds to a request with an upgrade. If this\nevent isn&apos;t being listened for, clients receiving an upgrade header will have\ntheir connections closed.</p><p>A client server pair that show you how to listen for the <code>&apos;upgrade&apos;</code> event.</p><pre><code class="lang-js">const http = require(&apos;http&apos;);\n\n// Create an HTTP server\nvar srv = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;okay&apos;);\n});\nsrv.on(&apos;upgrade&apos;, (req, socket, head) =&gt; {\n  socket.write(&apos;HTTP/1.1 101 Web Socket Protocol Handshake\r\n&apos; +\n               &apos;Upgrade: WebSocket\r\n&apos; +\n               &apos;Connection: Upgrade\r\n&apos; +\n               &apos;\r\n&apos;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &apos;127.0.0.1&apos;, () =&gt; {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &apos;127.0.0.1&apos;,\n    headers: {\n      &apos;Connection&apos;: &apos;Upgrade&apos;,\n      &apos;Upgrade&apos;: &apos;websocket&apos;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&apos;upgrade&apos;, (res, socket, upgradeHead) =&gt; {\n    console.log(&apos;got upgraded!&apos;);\n    socket.end();\n    process.exit(0);\n  });\n});\n</code></pre></section>	http://nodejs.org/api/all.html#http_event_upgrade
http.ClientRequest upgrade	R	http.ClientRequest.upgrade										http://nodejs.org/api/all.html#http_event_upgrade
http ClientRequest upgrade	R	http.ClientRequest upgrade										http://nodejs.org/api/all.html#http_event_upgrade
http.Server	A										<section class="prog__container"><p id='obj.desc'>This class inherits from <code>net.Server</code> and has the following additional events:</p></section>	http://nodejs.org/api/all.html#http_class_http_server
http Server	R	http.Server										http://nodejs.org/api/all.html#http_class_http_server
http.Server.close	D								*[[http.Server.close(http_event_close)]] Emitted when the server closes.\n*[[http.Server.close(http_server_close_callback)]] Stops the server from accepting new connections.  See net.Server.close  .			
http.Server close	R	http.Server.close										http://nodejs.org/api/all.html#http_server_close_callback
http Server close	R	http.Server close										http://nodejs.org/api/all.html#http_server_close_callback
http.Server.listen	D								*[[http.Server.listen(http_server_listen_path_callback)]] Start a UNIX socket server listening for connections on the given path.\n*[[http.Server.listen(http_server_listen_port_hostname_backlog_callback)]] Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections on any IPv6 address  ::  when IPv6 is available, or any IPv4 address  0.0.0.0  otherwise. Omit the port argument, or use a port value of 0, to have the operating system assign a random port, which can be retrieved by using server.address  .port after the &apos;listening&apos; event has been emitted.\n*[[http.Server.listen(http_server_listen_handle_callback)]] The handle object can be set to either a server or socket  anything with an underlying _handle member , or a {fd: &lt;n&gt;} object.			
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#http_server_listen_handle_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#http_server_listen_handle_callback
http.Server.setTimeout	A										<section class="prog__container"><p id='obj.desc'>Sets the timeout value for sockets, and emits a <code>&apos;timeout&apos;</code> event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.</p><pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#http_server_settimeout_msecs_callback
http.Server setTimeout	R	http.Server.setTimeout										http://nodejs.org/api/all.html#http_server_settimeout_msecs_callback
http Server setTimeout	R	http.Server setTimeout										http://nodejs.org/api/all.html#http_server_settimeout_msecs_callback
http.Server.listening	A										<section class="prog__container"><p id='obj.desc'>A Boolean indicating whether or not the server is listening for\nconnections.</p></section>	http://nodejs.org/api/all.html#http_server_listening
http.Server listening	R	http.Server.listening										http://nodejs.org/api/all.html#http_server_listening
http Server listening	R	http.Server listening										http://nodejs.org/api/all.html#http_server_listening
http.Server.maxHeadersCount	A										<section class="prog__container"><p id='obj.desc'>Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.</p></section>	http://nodejs.org/api/all.html#http_server_maxheaderscount
http.Server maxHeadersCount	R	http.Server.maxHeadersCount										http://nodejs.org/api/all.html#http_server_maxheaderscount
http Server maxHeadersCount	R	http.Server maxHeadersCount										http://nodejs.org/api/all.html#http_server_maxheaderscount
http.Server.timeout	A										<section class="prog__container"><p id='obj.desc'>The number of milliseconds of inactivity before a socket is presumed\nto have timed out.</p></section>	http://nodejs.org/api/all.html#http_server_timeout
http.Server timeout	R	http.Server.timeout										http://nodejs.org/api/all.html#http_server_timeout
http Server timeout	R	http.Server timeout										http://nodejs.org/api/all.html#http_server_timeout
http.Server.checkContinue	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a request with an HTTP <code>Expect: 100-continue</code> is received.\nIf this event isn&apos;t listened for, the server will automatically respond\nwith a <code>100 Continue</code> as appropriate.</p></section>	http://nodejs.org/api/all.html#http_event_checkcontinue
http.Server checkContinue	R	http.Server.checkContinue										http://nodejs.org/api/all.html#http_event_checkcontinue
http Server checkContinue	R	http.Server checkContinue										http://nodejs.org/api/all.html#http_event_checkcontinue
http.Server.checkExpectation	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a request with an HTTP <code>Expect</code> header is received, where the\nvalue is not <code>100-continue</code>. If this event isn&apos;t listened for, the server will\nautomatically respond with a <code>417 Expectation Failed</code> as appropriate.</p></section>	http://nodejs.org/api/all.html#http_event_checkexpectation
http.Server checkExpectation	R	http.Server.checkExpectation										http://nodejs.org/api/all.html#http_event_checkexpectation
http Server checkExpectation	R	http.Server checkExpectation										http://nodejs.org/api/all.html#http_event_checkexpectation
http.Server.clientError	A										<section class="prog__container"><p id='obj.desc'>If a client connection emits an <code>&apos;error&apos;</code> event, it will be forwarded here.\nListener of this event is responsible for closing/destroying the underlying\nsocket. For example, one may wish to more gracefully close the socket with an\nHTTP &apos;400 Bad Request&apos; response instead of abruptly severing the connection.</p><p><code>socket</code> is the <code>net.Socket</code> object that the error originated from.</p><pre><code class="lang-js">const http = require(&apos;http&apos;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on(&apos;clientError&apos;, (err, socket) =&gt; {\n  socket.end(&apos;HTTP/1.1 400 Bad Request\r\n\r\n&apos;);\n});\nserver.listen(8000);\n</code></pre></section>	http://nodejs.org/api/all.html#http_event_clienterror
http.Server clientError	R	http.Server.clientError										http://nodejs.org/api/all.html#http_event_clienterror
http Server clientError	R	http.Server clientError										http://nodejs.org/api/all.html#http_event_clienterror
http.Server.connect	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a client requests an HTTP <code>CONNECT</code> method. If this event isn&apos;t\nlistened for, then clients requesting a <code>CONNECT</code> method will have their\nconnections closed.</p></section>	http://nodejs.org/api/all.html#http_event_connect
http.Server connect	R	http.Server.connect										http://nodejs.org/api/all.html#http_event_connect
http Server connect	R	http.Server connect										http://nodejs.org/api/all.html#http_event_connect
http.Server.connection	A										<section class="prog__container"><p id='obj.desc'>When a new TCP stream is established. <code>socket</code> is an object of type\n<code>net.Socket</code>. Usually users will not want to access this event. In\nparticular, the socket will not emit <code>&apos;readable&apos;</code> events because of how\nthe protocol parser attaches to the socket. The <code>socket</code> can also be\naccessed at <code>request.connection</code>.</p></section>	http://nodejs.org/api/all.html#http_event_connection
http.Server connection	R	http.Server.connection										http://nodejs.org/api/all.html#http_event_connection
http Server connection	R	http.Server connection										http://nodejs.org/api/all.html#http_event_connection
http.Server.request	A										<section class="prog__container"><p id='obj.desc'>Emitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).</p></section>	http://nodejs.org/api/all.html#http_event_request
http.Server request	R	http.Server.request										http://nodejs.org/api/all.html#http_event_request
http Server request	R	http.Server request										http://nodejs.org/api/all.html#http_event_request
http.Server.upgrade	A										<section class="prog__container"><p id='obj.desc'>Emitted each time a client requests an HTTP upgrade. If this event isn&apos;t\nlistened for, then clients requesting an upgrade will have their connections\nclosed.</p></section>	http://nodejs.org/api/all.html#http_event_upgrade
http.Server upgrade	R	http.Server.upgrade										http://nodejs.org/api/all.html#http_event_upgrade
http Server upgrade	R	http.Server upgrade										http://nodejs.org/api/all.html#http_event_upgrade
http.ServerResponse	A										<section class="prog__container"><p id='obj.desc'>This object is created internally by an HTTP server--not by the user. It is\npassed as the second parameter to the <code>&apos;request&apos;</code> event.</p></section>	http://nodejs.org/api/all.html#http_class_http_serverresponse
http ServerResponse	R	http.ServerResponse										http://nodejs.org/api/all.html#http_class_http_serverresponse
http.ServerResponse.addTrailers	A										<section class="prog__container"><p id='obj.desc'>This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.</p><p>Note that HTTP requires the <code>Trailer</code> header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,</p><pre><code class="lang-js">response.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos;,\n                          &apos;Trailer&apos;: &apos;Content-MD5&apos; });\nresponse.write(fileData);\nresponse.addTrailers({&apos;Content-MD5&apos;: &apos;7895bf4b8828b55ceaf47747b4bca667&apos;});\nresponse.end();\n</code></pre><pre><code>response.addTrailers(headers)</code></pre></section>	http://nodejs.org/api/all.html#http_response_addtrailers_headers
http.ServerResponse addTrailers	R	http.ServerResponse.addTrailers										http://nodejs.org/api/all.html#http_response_addtrailers_headers
http ServerResponse addTrailers	R	http.ServerResponse addTrailers										http://nodejs.org/api/all.html#http_response_addtrailers_headers
http.ServerResponse.end	A										<section class="prog__container"><p id='obj.desc'>This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.</p><pre><code>response.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_response_end_data_encoding_callback
http.ServerResponse end	R	http.ServerResponse.end										http://nodejs.org/api/all.html#http_response_end_data_encoding_callback
http ServerResponse end	R	http.ServerResponse end										http://nodejs.org/api/all.html#http_response_end_data_encoding_callback
http.ServerResponse.getHeader	A										<section class="prog__container"><p id='obj.desc'>Reads out a header that&apos;s already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.</p><p>Example:</p><pre><code class="lang-js">var contentType = response.getHeader(&apos;content-type&apos;);\n</code></pre><pre><code>response.getHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#http_response_getheader_name
http.ServerResponse getHeader	R	http.ServerResponse.getHeader										http://nodejs.org/api/all.html#http_response_getheader_name
http ServerResponse getHeader	R	http.ServerResponse getHeader										http://nodejs.org/api/all.html#http_response_getheader_name
http.ServerResponse.removeHeader	A										<section class="prog__container"><p id='obj.desc'>Removes a header that&apos;s queued for implicit sending.</p><p>Example:</p><pre><code class="lang-js">response.removeHeader(&apos;Content-Encoding&apos;);\n</code></pre><pre><code>response.removeHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#http_response_removeheader_name
http.ServerResponse removeHeader	R	http.ServerResponse.removeHeader										http://nodejs.org/api/all.html#http_response_removeheader_name
http ServerResponse removeHeader	R	http.ServerResponse removeHeader										http://nodejs.org/api/all.html#http_response_removeheader_name
http.ServerResponse.setHeader	A										<section class="prog__container"><p id='obj.desc'>Sets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.</p><p>Example:</p><pre><code class="lang-js">response.setHeader(&apos;Content-Type&apos;, &apos;text/html&apos;);\n</code></pre><p>or</p><pre><code class="lang-js">response.setHeader(&apos;Set-Cookie&apos;, [&apos;type=ninja&apos;, &apos;language=javascript&apos;]);\n</code></pre><p>When headers have been set with <code>response.setHeader()</code>, they will be merged with\nany headers passed to <code>response.writeHead()</code>, with the headers passed to\n<code>response.writeHead()</code> given precedence.</p><pre><code class="lang-js">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&apos;Content-Type&apos;, &apos;text/html&apos;);\n  res.setHeader(&apos;X-Foo&apos;, &apos;bar&apos;);\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;ok&apos;);\n});\n</code></pre><pre><code>response.setHeader(name, value)</code></pre></section>	http://nodejs.org/api/all.html#http_response_setheader_name_value
http.ServerResponse setHeader	R	http.ServerResponse.setHeader										http://nodejs.org/api/all.html#http_response_setheader_name_value
http ServerResponse setHeader	R	http.ServerResponse setHeader										http://nodejs.org/api/all.html#http_response_setheader_name_value
http.ServerResponse.setTimeout	A										<section class="prog__container"><p id='obj.desc'>Sets the Socket&apos;s timeout value to <code>msecs</code>.  If a callback is\nprovided, then it is added as a listener on the <code>&apos;timeout&apos;</code> event on\nthe response object.</p><pre><code>response.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#http_response_settimeout_msecs_callback
http.ServerResponse setTimeout	R	http.ServerResponse.setTimeout										http://nodejs.org/api/all.html#http_response_settimeout_msecs_callback
http ServerResponse setTimeout	R	http.ServerResponse setTimeout										http://nodejs.org/api/all.html#http_response_settimeout_msecs_callback
http.ServerResponse.write	A										<section class="prog__container"><p id='obj.desc'>If this method is called and <code>response.writeHead()</code> has not been called,\nit will switch to implicit header mode and flush the implicit headers.</p><pre><code>response.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_response_write_chunk_encoding_callback
http.ServerResponse write	R	http.ServerResponse.write										http://nodejs.org/api/all.html#http_response_write_chunk_encoding_callback
http ServerResponse write	R	http.ServerResponse write										http://nodejs.org/api/all.html#http_response_write_chunk_encoding_callback
http.ServerResponse.writeContinue	A										<section class="prog__container"><p id='obj.desc'>Sends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the <code>&apos;checkContinue&apos;</code> event on <code>Server</code>.</p><pre><code>response.writeContinue()</code></pre></section>	http://nodejs.org/api/all.html#http_response_writecontinue
http.ServerResponse writeContinue	R	http.ServerResponse.writeContinue										http://nodejs.org/api/all.html#http_response_writecontinue
http ServerResponse writeContinue	R	http.ServerResponse writeContinue										http://nodejs.org/api/all.html#http_response_writecontinue
http.ServerResponse.writeHead	A										<section class="prog__container"><p id='obj.desc'>Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.\nOptionally one can give a human-readable <code>statusMessage</code> as the second\nargument.</p><p>Example:</p><pre><code class="lang-js">var body = &apos;hello world&apos;;\nresponse.writeHead(200, {\n  &apos;Content-Length&apos;: Buffer.byteLength(body),\n  &apos;Content-Type&apos;: &apos;text/plain&apos; });\n</code></pre><p>When headers have been set with <code>response.setHeader()</code>, they will be merged with\nany headers passed to <code>response.writeHead()</code>, with the headers passed to\n<code>response.writeHead()</code> given precedence.</p><pre><code class="lang-js">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&apos;Content-Type&apos;, &apos;text/html&apos;);\n  res.setHeader(&apos;X-Foo&apos;, &apos;bar&apos;);\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;ok&apos;);\n});\n</code></pre><pre><code>response.writeHead(statusCode[, statusMessage][, headers])</code></pre></section>	http://nodejs.org/api/all.html#http_response_writehead_statuscode_statusmessage_headers
http.ServerResponse writeHead	R	http.ServerResponse.writeHead										http://nodejs.org/api/all.html#http_response_writehead_statuscode_statusmessage_headers
http ServerResponse writeHead	R	http.ServerResponse writeHead										http://nodejs.org/api/all.html#http_response_writehead_statuscode_statusmessage_headers
http.ServerResponse.finished	A										<section class="prog__container"><p id='obj.desc'>Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <code>response.end()</code> executes, the value will be <code>true</code>.</p></section>	http://nodejs.org/api/all.html#http_response_finished
http.ServerResponse finished	R	http.ServerResponse.finished										http://nodejs.org/api/all.html#http_response_finished
http ServerResponse finished	R	http.ServerResponse finished										http://nodejs.org/api/all.html#http_response_finished
http.ServerResponse.headersSent	A										<section class="prog__container"><p id='obj.desc'>Boolean (read-only). True if headers were sent, false otherwise.</p></section>	http://nodejs.org/api/all.html#http_response_headerssent
http.ServerResponse headersSent	R	http.ServerResponse.headersSent										http://nodejs.org/api/all.html#http_response_headerssent
http ServerResponse headersSent	R	http.ServerResponse headersSent										http://nodejs.org/api/all.html#http_response_headerssent
http.ServerResponse.sendDate	A										<section class="prog__container"><p id='obj.desc'>When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.</p></section>	http://nodejs.org/api/all.html#http_response_senddate
http.ServerResponse sendDate	R	http.ServerResponse.sendDate										http://nodejs.org/api/all.html#http_response_senddate
http ServerResponse sendDate	R	http.ServerResponse sendDate										http://nodejs.org/api/all.html#http_response_senddate
http.ServerResponse.statusCode	A										<section class="prog__container"><p id='obj.desc'>When using implicit headers (not calling <code>response.writeHead()</code> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.</p><p>Example:</p><pre><code class="lang-js">response.statusCode = 404;\n</code></pre></section>	http://nodejs.org/api/all.html#http_response_statuscode
http.ServerResponse statusCode	R	http.ServerResponse.statusCode										http://nodejs.org/api/all.html#http_response_statuscode
http ServerResponse statusCode	R	http.ServerResponse statusCode										http://nodejs.org/api/all.html#http_response_statuscode
http.ServerResponse.statusMessage	A										<section class="prog__container"><p id='obj.desc'>When using implicit headers (not calling <code>response.writeHead()</code> explicitly), this property\ncontrols the status message that will be sent to the client when the headers get\nflushed. If this is left as <code>undefined</code> then the standard message for the status\ncode will be used.</p><p>Example:</p><pre><code class="lang-js">response.statusMessage = &apos;Not found&apos;;\n</code></pre></section>	http://nodejs.org/api/all.html#http_response_statusmessage
http.ServerResponse statusMessage	R	http.ServerResponse.statusMessage										http://nodejs.org/api/all.html#http_response_statusmessage
http ServerResponse statusMessage	R	http.ServerResponse statusMessage										http://nodejs.org/api/all.html#http_response_statusmessage
http.ServerResponse.close	A										<section class="prog__container"><p id='obj.desc'>Indicates that the underlying connection was terminated before\n<code>response.end()</code> was called or able to flush.</p></section>	http://nodejs.org/api/all.html#http_event_close
http.ServerResponse close	R	http.ServerResponse.close										http://nodejs.org/api/all.html#http_event_close
http ServerResponse close	R	http.ServerResponse close										http://nodejs.org/api/all.html#http_event_close
http.ServerResponse.finish	A										<section class="prog__container"><p id='obj.desc'>Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.</p></section>	http://nodejs.org/api/all.html#http_event_finish
http.ServerResponse finish	R	http.ServerResponse.finish										http://nodejs.org/api/all.html#http_event_finish
http ServerResponse finish	R	http.ServerResponse finish										http://nodejs.org/api/all.html#http_event_finish
http.IncomingMessage	A										<section class="prog__container"><p id='obj.desc'>An <code>IncomingMessage</code> object is created by <code>http.Server</code> or\n<code>http.ClientRequest</code> and passed as the first argument to the <code>&apos;request&apos;</code>\nand <code>&apos;response&apos;</code> event respectively. It may be used to access response status,\nheaders and data.</p></section>	http://nodejs.org/api/all.html#http_class_http_incomingmessage
http IncomingMessage	R	http.IncomingMessage										http://nodejs.org/api/all.html#http_class_http_incomingmessage
http.IncomingMessage.destroy	A										<section class="prog__container"><p id='obj.desc'>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>\nis provided, an <code>&apos;error&apos;</code> event is emitted and <code>error</code> is passed as an argument\nto any listeners on the event.</p><pre><code>message.destroy([error])</code></pre></section>	http://nodejs.org/api/all.html#http_message_destroy_error
http.IncomingMessage destroy	R	http.IncomingMessage.destroy										http://nodejs.org/api/all.html#http_message_destroy_error
http IncomingMessage destroy	R	http.IncomingMessage destroy										http://nodejs.org/api/all.html#http_message_destroy_error
http.IncomingMessage.setTimeout	A										<section class="prog__container"><p id='obj.desc'>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p><pre><code>message.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#http_message_settimeout_msecs_callback
http.IncomingMessage setTimeout	R	http.IncomingMessage.setTimeout										http://nodejs.org/api/all.html#http_message_settimeout_msecs_callback
http IncomingMessage setTimeout	R	http.IncomingMessage setTimeout										http://nodejs.org/api/all.html#http_message_settimeout_msecs_callback
http.IncomingMessage.headers	A										<section class="prog__container"><p id='obj.desc'>The request/response headers object.</p><p>Key-value pairs of header names and values. Header names are lower-cased.\nExample:</p><pre><code class="lang-js">// Prints something like:\n//\n// { &apos;user-agent&apos;: &apos;curl/7.22.0&apos;,\n//   host: &apos;127.0.0.1:8000&apos;,\n//   accept: &apos;*/*&apos; }\nconsole.log(request.headers);\n</code></pre></section>	http://nodejs.org/api/all.html#http_message_headers
http.IncomingMessage headers	R	http.IncomingMessage.headers										http://nodejs.org/api/all.html#http_message_headers
http IncomingMessage headers	R	http.IncomingMessage headers										http://nodejs.org/api/all.html#http_message_headers
http.IncomingMessage.httpVersion	A										<section class="prog__container"><p id='obj.desc'>In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either <code>&apos;1.1&apos;</code> or <code>&apos;1.0&apos;</code>.</p></section>	http://nodejs.org/api/all.html#http_message_httpversion
http.IncomingMessage httpVersion	R	http.IncomingMessage.httpVersion										http://nodejs.org/api/all.html#http_message_httpversion
http IncomingMessage httpVersion	R	http.IncomingMessage httpVersion										http://nodejs.org/api/all.html#http_message_httpversion
http.IncomingMessage.method	A										<section class="prog__container"><p id='obj.desc'><strong>Only valid for request obtained from <code>http.Server</code>.</strong></p></section>	http://nodejs.org/api/all.html#http_message_method
http.IncomingMessage method	R	http.IncomingMessage.method										http://nodejs.org/api/all.html#http_message_method
http IncomingMessage method	R	http.IncomingMessage method										http://nodejs.org/api/all.html#http_message_method
http.IncomingMessage.rawHeaders	A										<section class="prog__container"><p id='obj.desc'>The raw request/response headers list exactly as they were received.</p><p>Header names are not lowercased, and duplicates are not merged.</p><pre><code class="lang-js">// Prints something like:\n//\n// [ &apos;user-agent&apos;,\n//   &apos;this is invalid because there can be only one&apos;,\n//   &apos;User-Agent&apos;,\n//   &apos;curl/7.22.0&apos;,\n//   &apos;Host&apos;,\n//   &apos;127.0.0.1:8000&apos;,\n//   &apos;ACCEPT&apos;,\n//   &apos;*/*&apos; ]\nconsole.log(request.rawHeaders);\n</code></pre></section>	http://nodejs.org/api/all.html#http_message_rawheaders
http.IncomingMessage rawHeaders	R	http.IncomingMessage.rawHeaders										http://nodejs.org/api/all.html#http_message_rawheaders
http IncomingMessage rawHeaders	R	http.IncomingMessage rawHeaders										http://nodejs.org/api/all.html#http_message_rawheaders
http.IncomingMessage.rawTrailers	A										<section class="prog__container"><p id='obj.desc'>The raw request/response trailer keys and values exactly as they were\nreceived.  Only populated at the <code>&apos;end&apos;</code> event.</p></section>	http://nodejs.org/api/all.html#http_message_rawtrailers
http.IncomingMessage rawTrailers	R	http.IncomingMessage.rawTrailers										http://nodejs.org/api/all.html#http_message_rawtrailers
http IncomingMessage rawTrailers	R	http.IncomingMessage rawTrailers										http://nodejs.org/api/all.html#http_message_rawtrailers
http.IncomingMessage.statusCode	A										<section class="prog__container"><p id='obj.desc'><strong>Only valid for response obtained from <code>http.ClientRequest</code>.</strong></p></section>	http://nodejs.org/api/all.html#http_message_statuscode
http.IncomingMessage statusCode	R	http.IncomingMessage.statusCode										http://nodejs.org/api/all.html#http_message_statuscode
http IncomingMessage statusCode	R	http.IncomingMessage statusCode										http://nodejs.org/api/all.html#http_message_statuscode
http.IncomingMessage.statusMessage	A										<section class="prog__container"><p id='obj.desc'><strong>Only valid for response obtained from <code>http.ClientRequest</code>.</strong></p></section>	http://nodejs.org/api/all.html#http_message_statusmessage
http.IncomingMessage statusMessage	R	http.IncomingMessage.statusMessage										http://nodejs.org/api/all.html#http_message_statusmessage
http IncomingMessage statusMessage	R	http.IncomingMessage statusMessage										http://nodejs.org/api/all.html#http_message_statusmessage
http.IncomingMessage.socket	A										<section class="prog__container"><p id='obj.desc'>The <code>net.Socket</code> object associated with the connection.</p></section>	http://nodejs.org/api/all.html#http_message_socket
http.IncomingMessage socket	R	http.IncomingMessage.socket										http://nodejs.org/api/all.html#http_message_socket
http IncomingMessage socket	R	http.IncomingMessage socket										http://nodejs.org/api/all.html#http_message_socket
http.IncomingMessage.trailers	A										<section class="prog__container"><p id='obj.desc'>The request/response trailers object. Only populated at the <code>&apos;end&apos;</code> event.</p></section>	http://nodejs.org/api/all.html#http_message_trailers
http.IncomingMessage trailers	R	http.IncomingMessage.trailers										http://nodejs.org/api/all.html#http_message_trailers
http IncomingMessage trailers	R	http.IncomingMessage trailers										http://nodejs.org/api/all.html#http_message_trailers
http.IncomingMessage.url	A										<section class="prog__container"><p id='obj.desc'><strong>Only valid for request obtained from <code>http.Server</code>.</strong></p><p>Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:</p><pre><code class="lang-txt">GET /status?name=ryan HTTP/1.1\r\n\nAccept: text/plain\r\n\n\r\n\n</code></pre><p>Then <code>request.url</code> will be:</p><pre><code class="lang-js">&apos;/status?name=ryan&apos;\n</code></pre><p>If you would like to parse the URL into its parts, you can use\n<code>require(&apos;url&apos;).parse(request.url)</code>.  Example:</p><pre><code class="lang-txt">$ node\n&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;)\n{\n  href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: &apos;name=ryan&apos;,\n  pathname: &apos;/status&apos;\n}\n</code></pre><p>If you would like to extract the parameters from the query string,\nyou can use the <code>require(&apos;querystring&apos;).parse</code> function, or pass\n<code>true</code> as the second argument to <code>require(&apos;url&apos;).parse</code>.  Example:</p><pre><code class="lang-txt">$ node\n&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;, true)\n{\n  href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: {name: &apos;ryan&apos;},\n  pathname: &apos;/status&apos;\n}\n</code></pre></section>	http://nodejs.org/api/all.html#http_message_url
http.IncomingMessage url	R	http.IncomingMessage.url										http://nodejs.org/api/all.html#http_message_url
http IncomingMessage url	R	http.IncomingMessage url										http://nodejs.org/api/all.html#http_message_url
http.IncomingMessage.aborted	A										<section class="prog__container"><p id='obj.desc'>Emitted when the request has been aborted by the client and the network\nsocket has closed.</p></section>	http://nodejs.org/api/all.html#http_event_aborted
http.IncomingMessage aborted	R	http.IncomingMessage.aborted										http://nodejs.org/api/all.html#http_event_aborted
http IncomingMessage aborted	R	http.IncomingMessage aborted										http://nodejs.org/api/all.html#http_event_aborted
http.IncomingMessage.close	A										<section class="prog__container"><p id='obj.desc'>Indicates that the underlying connection was closed.\nJust like <code>&apos;end&apos;</code>, this event occurs only once per response.</p></section>	http://nodejs.org/api/all.html#http_event_close
http.IncomingMessage close	R	http.IncomingMessage.close										http://nodejs.org/api/all.html#http_event_close
http IncomingMessage close	R	http.IncomingMessage close										http://nodejs.org/api/all.html#http_event_close
https	A										<section class="prog__container"><p id='obj.desc'>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.</p><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#https_https
https.createServer	A										<section class="prog__container"><p id='obj.desc'>Returns a new HTTPS web server object. The <code>options</code> is similar to\n<code>tls.createServer()</code>.  The <code>requestListener</code> is a function which is\nautomatically added to the <code>&apos;request&apos;</code> event.</p><p>Example:</p><pre><code class="lang-js">// curl -k https://localhost:8000/\nconst https = require(&apos;https&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&apos;hello world\n&apos;);\n}).listen(8000);\n</code></pre><p>Or</p><pre><code class="lang-js">const https = require(&apos;https&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&apos;hello world\n&apos;);\n}).listen(8000);\n</code></pre></section>	http://nodejs.org/api/all.html#https_https_createserver_options_requestlistener
https createServer	R	https.createServer										http://nodejs.org/api/all.html#https_https_createserver_options_requestlistener
https.createServer.close	A										<section class="prog__container"><p id='obj.desc'>See <code>http.close()</code> for details.</p><pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#https_createserver_close_callback
https createServer close	R	https.createServer close										http://nodejs.org/api/all.html#https_createserver_close_callback
https.createServer.listen	D								*[[https.createServer.listen(https_createserver_listen_port_host_backlog_callback)]] See http.listen   for details.\n*[[https.createServer.listen(https_createserver_listen_path_callback)]] See http.listen   for details.			
https createServer listen	R	https.createServer listen										http://nodejs.org/api/all.html#https_createserver_listen_path_callback
https.get	A										<section class="prog__container"><p id='obj.desc'>Like <code>http.get()</code> but for HTTPS.</p><p>Example:</p><pre><code class="lang-js">const https = require(&apos;https&apos;);\n\nhttps.get(&apos;https://encrypted.google.com/&apos;, (res) =&gt; {\n  console.log(&apos;statusCode:&apos;, res.statusCode);\n  console.log(&apos;headers:&apos;, res.headers);\n\n  res.on(&apos;data&apos;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on(&apos;error&apos;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#https_https_get_options_callback
https get	R	https.get										http://nodejs.org/api/all.html#https_https_get_options_callback
https.request	A										<section class="prog__container"><p id='obj.desc'>Makes a request to a secure web server.</p><p>Example:</p><pre><code class="lang-js">const https = require(&apos;https&apos;);\n\nvar options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;\n};\n\nvar req = https.request(options, (res) =&gt; {\n  console.log(&apos;statusCode:&apos;, res.statusCode);\n  console.log(&apos;headers:&apos;, res.headers);\n\n  res.on(&apos;data&apos;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\n\nreq.on(&apos;error&apos;, (e) =&gt; {\n  console.error(e);\n});\nreq.end();\n</code></pre><p>Example:</p><pre><code class="lang-js">var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n</code></pre><p>Example:</p><pre><code class="lang-js">var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;),\n  agent: false\n};\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n</code></pre></section>	http://nodejs.org/api/all.html#https_https_request_options_callback
https request	R	https.request										http://nodejs.org/api/all.html#https_https_request_options_callback
https.globalAgent	A										<section class="prog__container"><p id='obj.desc'>Global instance of <code>https.Agent</code> for all HTTPS client requests.</p></section>	http://nodejs.org/api/all.html#https_https_globalagent
https globalAgent	R	https.globalAgent										http://nodejs.org/api/all.html#https_https_globalagent
https.Agent	A										<section class="prog__container"><p id='obj.desc'>An Agent object for HTTPS similar to <code>http.Agent</code>.  See <code>https.request()</code>\nfor more information.</p></section>	http://nodejs.org/api/all.html#https_class_https_agent
https Agent	R	https.Agent										http://nodejs.org/api/all.html#https_class_https_agent
https.Server	A										<section class="prog__container"><p id='obj.desc'>This class is a subclass of <code>tls.Server</code> and emits events same as\n<code>http.Server</code>. See <code>http.Server</code> for more information.</p></section>	http://nodejs.org/api/all.html#https_class_https_server
https Server	R	https.Server										http://nodejs.org/api/all.html#https_class_https_server
https.Server.setTimeout	A										<section class="prog__container"><p id='obj.desc'>See <code>http.Server#setTimeout()</code>.</p><pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#https_server_settimeout_msecs_callback
https.Server setTimeout	R	https.Server.setTimeout										http://nodejs.org/api/all.html#https_server_settimeout_msecs_callback
https Server setTimeout	R	https.Server setTimeout										http://nodejs.org/api/all.html#https_server_settimeout_msecs_callback
https.Server.timeout	A										<section class="prog__container"><p id='obj.desc'>See <code>http.Server#timeout</code>.</p></section>	http://nodejs.org/api/all.html#https_server_timeout
https.Server timeout	R	https.Server.timeout										http://nodejs.org/api/all.html#https_server_timeout
https Server timeout	R	https.Server timeout										http://nodejs.org/api/all.html#https_server_timeout
net	A										<section class="prog__container"><p id='obj.desc'>The <code>net</code> module provides you with an asynchronous network wrapper. It contains\nfunctions for creating both servers and clients (called streams). You can include\nthis module with <code>require(&apos;net&apos;);</code>.</p><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#net_net
net.connect	D								*[[net.connect(net_net_connect_path_connectlistener)]] A factory function, which returns a new unix net.Socket and automatically connects to the supplied path.\n*[[net.connect(net_net_connect_port_host_connectlistener)]] A factory function, which returns a new net.Socket and automatically connects to the supplied port and host.\n*[[net.connect(net_net_connect_options_connectlistener)]] A factory function, which returns a new net.Socket and automatically connects with the supplied options.			
net connect	R	net.connect										http://nodejs.org/api/all.html#net_net_connect_options_connectlistener
net.createConnection	D								*[[net.createConnection(net_net_createconnection_path_connectlistener)]] A factory function, which returns a new unix net.Socket and automatically connects to the supplied path.\n*[[net.createConnection(net_net_createconnection_port_host_connectlistener)]] A factory function, which returns a new net.Socket and automatically connects to the supplied port and host.\n*[[net.createConnection(net_net_createconnection_options_connectlistener)]] A factory function, which returns a new net.Socket and automatically connects with the supplied options.			
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#net_net_createconnection_options_connectlistener
net.createServer	A										<section class="prog__container"><p id='obj.desc'>Creates a new server. The <code>connectionListener</code> argument is\nautomatically set as a listener for the <code>&apos;connection&apos;</code> event.</p><p><code>options</code> is an object with the following defaults:</p><pre><code class="lang-js">{\n  allowHalfOpen: false,\n  pauseOnConnect: false\n}\n</code></pre><p>Here is an example of an echo server which listens for connections\non port 8124:</p><pre><code class="lang-js">const net = require(&apos;net&apos;);\nconst server = net.createServer((c) =&gt; {\n  // &apos;connection&apos; listener\n  console.log(&apos;client connected&apos;);\n  c.on(&apos;end&apos;, () =&gt; {\n    console.log(&apos;client disconnected&apos;);\n  });\n  c.write(&apos;hello\r\n&apos;);\n  c.pipe(c);\n});\nserver.on(&apos;error&apos;, (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log(&apos;server bound&apos;);\n});\n</code></pre><p>Test this by using <code>telnet</code>:</p><pre><code class="lang-sh">telnet localhost 8124\n</code></pre><p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would\njust be changed to</p><pre><code class="lang-js">server.listen(&apos;/tmp/echo.sock&apos;, () =&gt; {\n  console.log(&apos;server bound&apos;);\n});\n</code></pre><p>Use <code>nc</code> to connect to a UNIX domain socket server:</p><pre><code class="lang-js">nc -U /tmp/echo.sock\n</code></pre></section>	http://nodejs.org/api/all.html#net_net_createserver_options_connectionlistener
net createServer	R	net.createServer										http://nodejs.org/api/all.html#net_net_createserver_options_connectionlistener
net.isIP	A										<section class="prog__container"><p id='obj.desc'>Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</p></section>	http://nodejs.org/api/all.html#net_net_isip_input
net isIP	R	net.isIP										http://nodejs.org/api/all.html#net_net_isip_input
net.isIPv4	A										<section class="prog__container"><p id='obj.desc'>Returns true if input is a version 4 IP address, otherwise returns false.</p></section>	http://nodejs.org/api/all.html#net_net_isipv4_input
net isIPv4	R	net.isIPv4										http://nodejs.org/api/all.html#net_net_isipv4_input
net.isIPv6	A										<section class="prog__container"><p id='obj.desc'>Returns true if input is a version 6 IP address, otherwise returns false.</p></section>	http://nodejs.org/api/all.html#net_net_isipv6_input
net isIPv6	R	net.isIPv6										http://nodejs.org/api/all.html#net_net_isipv6_input
net.Server	A										<section class="prog__container"><p id='obj.desc'>This class is used to create a TCP or local server.</p></section>	http://nodejs.org/api/all.html#net_class_net_server
net Server	R	net.Server										http://nodejs.org/api/all.html#net_class_net_server
net.Server.address	A										<section class="prog__container"><p id='obj.desc'>Returns the bound address, the address family name, and port of the server\nas reported by the operating system.\nUseful to find which port was assigned when getting an OS-assigned address.\nReturns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties:\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code></p><p>Example:</p><pre><code class="lang-js">var server = net.createServer((socket) =&gt; {\n  socket.end(&apos;goodbye\n&apos;);\n}).on(&apos;error&apos;, (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab a random port.\nserver.listen(() =&gt; {\n  console.log(&apos;opened server on&apos;, server.address());\n});\n</code></pre><pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#net_server_address
net.Server address	R	net.Server.address										http://nodejs.org/api/all.html#net_server_address
net Server address	R	net.Server address										http://nodejs.org/api/all.html#net_server_address
net.Server.close	D								*[[net.Server.close(net_event_close)]] Emitted when the server closes. Note that if connections exist, this event is not emitted until all connections are ended.\n*[[net.Server.close(net_server_close_callback)]] Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a &apos;close&apos; event. The optional callback will be called once the &apos;close&apos; event occurs. Unlike that event, it will be called with an Error as its only argument if the server was not open when it was closed.			
net.Server close	R	net.Server.close										http://nodejs.org/api/all.html#net_server_close_callback
net Server close	R	net.Server close										http://nodejs.org/api/all.html#net_server_close_callback
net.Server.getConnections	A										<section class="prog__container"><p id='obj.desc'>Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.</p><pre><code>server.getConnections(callback)</code></pre></section>	http://nodejs.org/api/all.html#net_server_getconnections_callback
net.Server getConnections	R	net.Server.getConnections										http://nodejs.org/api/all.html#net_server_getconnections_callback
net Server getConnections	R	net.Server getConnections										http://nodejs.org/api/all.html#net_server_getconnections_callback
net.Server.listen	D								*[[net.Server.listen(net_server_listen_options_callback)]] The port, host, and backlog properties of options, as well as the optional callback function, behave as they do on a call to server.listen [port][, hostname][, backlog][, callback] . Alternatively, the path option can be used to specify a UNIX socket.\n*[[net.Server.listen(net_server_listen_path_backlog_callback)]] Start a local socket server listening for connections on the given path.\n*[[net.Server.listen(net_server_listen_port_hostname_backlog_callback)]] Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections on any IPv6 address  ::  when IPv6 is available, or any IPv4 address  0.0.0.0  otherwise. Omit the port argument, or use a port value of 0, to have the operating system assign a random port, which can be retrieved by using server.address  .port after the &apos;listening&apos; event has been emitted.\n*[[net.Server.listen(net_server_listen_handle_backlog_callback)]] The handle object can be set to either a server or socket  anything with an underlying _handle member , or a {fd: &lt;n&gt;} object.			
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#net_server_listen_handle_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#net_server_listen_handle_backlog_callback
net.Server.ref	A										<section class="prog__container"><p id='obj.desc'>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em>\nlet the program exit if it&apos;s the only server left (the default behavior). If\nthe server is <code>ref</code>d calling <code>ref</code> again will have no effect.</p><pre><code>server.ref()</code></pre></section>	http://nodejs.org/api/all.html#net_server_ref
net.Server ref	R	net.Server.ref										http://nodejs.org/api/all.html#net_server_ref
net Server ref	R	net.Server ref										http://nodejs.org/api/all.html#net_server_ref
net.Server.unref	A										<section class="prog__container"><p id='obj.desc'>Calling <code>unref</code> on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.</p><pre><code>server.unref()</code></pre></section>	http://nodejs.org/api/all.html#net_server_unref
net.Server unref	R	net.Server.unref										http://nodejs.org/api/all.html#net_server_unref
net Server unref	R	net.Server unref										http://nodejs.org/api/all.html#net_server_unref
net.Server.connections	A										<section class="prog__container"><p id='obj.desc'>The number of concurrent connections on the server.</p></section>	http://nodejs.org/api/all.html#net_server_connections
net.Server connections	R	net.Server.connections										http://nodejs.org/api/all.html#net_server_connections
net Server connections	R	net.Server connections										http://nodejs.org/api/all.html#net_server_connections
net.Server.listening	D								*[[net.Server.listening(net_event_listening)]] Emitted when the server has been bound after calling server.listen.\n*[[net.Server.listening(net_server_listening)]] A Boolean indicating whether or not the server is listening for connections.			
net.Server listening	R	net.Server.listening										http://nodejs.org/api/all.html#net_server_listening
net Server listening	R	net.Server listening										http://nodejs.org/api/all.html#net_server_listening
net.Server.maxConnections	A										<section class="prog__container"><p id='obj.desc'>Set this property to reject connections when the server&apos;s connection count gets\nhigh.</p></section>	http://nodejs.org/api/all.html#net_server_maxconnections
net.Server maxConnections	R	net.Server.maxConnections										http://nodejs.org/api/all.html#net_server_maxconnections
net Server maxConnections	R	net.Server maxConnections										http://nodejs.org/api/all.html#net_server_maxconnections
net.Server.connection	A										<section class="prog__container"><p id='obj.desc'>Emitted when a new connection is made. <code>socket</code> is an instance of\n<code>net.Socket</code>.</p></section>	http://nodejs.org/api/all.html#net_event_connection
net.Server connection	R	net.Server.connection										http://nodejs.org/api/all.html#net_event_connection
net Server connection	R	net.Server connection										http://nodejs.org/api/all.html#net_event_connection
net.Server.error	A										<section class="prog__container"><p id='obj.desc'>Emitted when an error occurs.  The <code>&apos;close&apos;</code> event will be called directly\nfollowing this event.  See example in discussion of <code>server.listen</code>.</p></section>	http://nodejs.org/api/all.html#net_event_error
net.Server error	R	net.Server.error										http://nodejs.org/api/all.html#net_event_error
net Server error	R	net.Server error										http://nodejs.org/api/all.html#net_event_error
net.Socket	A										<section class="prog__container"><p id='obj.desc'>This object is an abstraction of a TCP or local socket.  <code>net.Socket</code>\ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with <code>connect()</code>) or they can be created by Node.js\nand passed to the user through the <code>&apos;connection&apos;</code> event of a server.</p></section>	http://nodejs.org/api/all.html#net_class_net_socket
net Socket	R	net.Socket										http://nodejs.org/api/all.html#net_class_net_socket
net.Socket.Socket	A										<section class="prog__container"><p id='obj.desc'>Construct a new socket object.</p><p><code>options</code> is an object with the following defaults:</p><pre><code class="lang-js">{\n  fd: null,\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}\n</code></pre><pre><code>new net.Socket([options])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_socket_options
net.Socket Socket	R	net.Socket.Socket										http://nodejs.org/api/all.html#net_socket_socket_options
net Socket Socket	R	net.Socket Socket										http://nodejs.org/api/all.html#net_socket_socket_options
net.Socket.address	A										<section class="prog__container"><p id='obj.desc'>Returns the bound address, the address family name and port of the\nsocket as reported by the operating system. Returns an object with\nthree properties, e.g.\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code></p><pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#net_socket_address
net.Socket address	R	net.Socket.address										http://nodejs.org/api/all.html#net_socket_address
net Socket address	R	net.Socket address										http://nodejs.org/api/all.html#net_socket_address
net.Socket.connect	D								*[[net.Socket.connect(net_socket_connect_path_connectlistener)]] As socket.connect options[, connectListener] , with options as either {port: port, host: host} or {path: path}.\n*[[net.Socket.connect(net_socket_connect_port_host_connectlistener)]] As socket.connect options[, connectListener] , with options as either {port: port, host: host} or {path: path}.\n*[[net.Socket.connect(net_event_connect)]] Emitted when a socket connection is successfully established. See connect  .\n*[[net.Socket.connect(net_socket_connect_options_connectlistener)]] Opens the connection for a given socket.			
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#net_socket_connect_options_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#net_socket_connect_options_connectlistener
net.Socket.destroy	A										<section class="prog__container"><p id='obj.desc'>Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).</p><pre><code>socket.destroy([exception])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_destroy_exception
net.Socket destroy	R	net.Socket.destroy										http://nodejs.org/api/all.html#net_socket_destroy_exception
net Socket destroy	R	net.Socket destroy										http://nodejs.org/api/all.html#net_socket_destroy_exception
net.Socket.end	D								*[[net.Socket.end(net_event_end)]] Emitted when the other end of the socket sends a FIN packet.\n*[[net.Socket.end(net_socket_end_data_encoding)]] Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.			
net.Socket end	R	net.Socket.end										http://nodejs.org/api/all.html#net_socket_end_data_encoding
net Socket end	R	net.Socket end										http://nodejs.org/api/all.html#net_socket_end_data_encoding
net.Socket.pause	A										<section class="prog__container"><p id='obj.desc'>Pauses the reading of data. That is, <code>&apos;data&apos;</code> events will not be emitted.\nUseful to throttle back an upload.</p><pre><code>socket.pause()</code></pre></section>	http://nodejs.org/api/all.html#net_socket_pause
net.Socket pause	R	net.Socket.pause										http://nodejs.org/api/all.html#net_socket_pause
net Socket pause	R	net.Socket pause										http://nodejs.org/api/all.html#net_socket_pause
net.Socket.ref	A										<section class="prog__container"><p id='obj.desc'>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em>\nlet the program exit if it&apos;s the only socket left (the default behavior). If\nthe socket is <code>ref</code>d calling <code>ref</code> again will have no effect.</p><pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#net_socket_ref
net.Socket ref	R	net.Socket.ref										http://nodejs.org/api/all.html#net_socket_ref
net Socket ref	R	net.Socket ref										http://nodejs.org/api/all.html#net_socket_ref
net.Socket.resume	A										<section class="prog__container"><p id='obj.desc'>Resumes reading after a call to <code>pause()</code>.</p><pre><code>socket.resume()</code></pre></section>	http://nodejs.org/api/all.html#net_socket_resume
net.Socket resume	R	net.Socket.resume										http://nodejs.org/api/all.html#net_socket_resume
net Socket resume	R	net.Socket resume										http://nodejs.org/api/all.html#net_socket_resume
net.Socket.setEncoding	A										<section class="prog__container"><p id='obj.desc'>Set the encoding for the socket as a Readable Stream. See\n<code>stream.setEncoding()</code> for more information.</p><pre><code>socket.setEncoding([encoding])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_setencoding_encoding
net.Socket setEncoding	R	net.Socket.setEncoding										http://nodejs.org/api/all.html#net_socket_setencoding_encoding
net Socket setEncoding	R	net.Socket setEncoding										http://nodejs.org/api/all.html#net_socket_setencoding_encoding
net.Socket.setKeepAlive	A										<section class="prog__container"><p id='obj.desc'>Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n<code>enable</code> defaults to <code>false</code>.</p><pre><code>socket.setKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_setkeepalive_enable_initialdelay
net.Socket setKeepAlive	R	net.Socket.setKeepAlive										http://nodejs.org/api/all.html#net_socket_setkeepalive_enable_initialdelay
net Socket setKeepAlive	R	net.Socket setKeepAlive										http://nodejs.org/api/all.html#net_socket_setkeepalive_enable_initialdelay
net.Socket.setNoDelay	A										<section class="prog__container"><p id='obj.desc'>Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting <code>true</code> for\n<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.\n<code>noDelay</code> defaults to <code>true</code>.</p><pre><code>socket.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_setnodelay_nodelay
net.Socket setNoDelay	R	net.Socket.setNoDelay										http://nodejs.org/api/all.html#net_socket_setnodelay_nodelay
net Socket setNoDelay	R	net.Socket setNoDelay										http://nodejs.org/api/all.html#net_socket_setnodelay_nodelay
net.Socket.setTimeout	A										<section class="prog__container"><p id='obj.desc'>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on\nthe socket. By default <code>net.Socket</code> do not have a timeout.</p><pre><code>socket.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_settimeout_timeout_callback
net.Socket setTimeout	R	net.Socket.setTimeout										http://nodejs.org/api/all.html#net_socket_settimeout_timeout_callback
net Socket setTimeout	R	net.Socket setTimeout										http://nodejs.org/api/all.html#net_socket_settimeout_timeout_callback
net.Socket.unref	A										<section class="prog__container"><p id='obj.desc'>Calling <code>unref</code> on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.</p><pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#net_socket_unref
net.Socket unref	R	net.Socket.unref										http://nodejs.org/api/all.html#net_socket_unref
net Socket unref	R	net.Socket unref										http://nodejs.org/api/all.html#net_socket_unref
net.Socket.write	A										<section class="prog__container"><p id='obj.desc'>Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.</p><pre><code>socket.write(data[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_write_data_encoding_callback
net.Socket write	R	net.Socket.write										http://nodejs.org/api/all.html#net_socket_write_data_encoding_callback
net Socket write	R	net.Socket write										http://nodejs.org/api/all.html#net_socket_write_data_encoding_callback
net.Socket.bufferSize	A										<section class="prog__container"><p id='obj.desc'><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket&apos;s file descriptor for being writable).</p></section>	http://nodejs.org/api/all.html#net_socket_buffersize
net.Socket bufferSize	R	net.Socket.bufferSize										http://nodejs.org/api/all.html#net_socket_buffersize
net Socket bufferSize	R	net.Socket bufferSize										http://nodejs.org/api/all.html#net_socket_buffersize
net.Socket.bytesRead	A										<section class="prog__container"><p id='obj.desc'>The amount of received bytes.</p></section>	http://nodejs.org/api/all.html#net_socket_bytesread
net.Socket bytesRead	R	net.Socket.bytesRead										http://nodejs.org/api/all.html#net_socket_bytesread
net Socket bytesRead	R	net.Socket bytesRead										http://nodejs.org/api/all.html#net_socket_bytesread
net.Socket.bytesWritten	A										<section class="prog__container"><p id='obj.desc'>The amount of bytes sent.</p></section>	http://nodejs.org/api/all.html#net_socket_byteswritten
net.Socket bytesWritten	R	net.Socket.bytesWritten										http://nodejs.org/api/all.html#net_socket_byteswritten
net Socket bytesWritten	R	net.Socket bytesWritten										http://nodejs.org/api/all.html#net_socket_byteswritten
net.Socket.connecting	A										<section class="prog__container"><p id='obj.desc'>If <code>true</code> - <code>socket.connect(options[, connectListener])</code> was called and\nhaven&apos;t yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event\nand/or calling <code>socket.connect(options[, connectListener])</code>&apos;s callback.</p></section>	http://nodejs.org/api/all.html#net_socket_connecting
net.Socket connecting	R	net.Socket.connecting										http://nodejs.org/api/all.html#net_socket_connecting
net Socket connecting	R	net.Socket connecting										http://nodejs.org/api/all.html#net_socket_connecting
net.Socket.destroyed	A										<section class="prog__container"><p id='obj.desc'>A Boolean value that indicates if the connection is destroyed or not. Once a\nconnection is destroyed no further data can be transferred using it.</p></section>	http://nodejs.org/api/all.html#net_socket_destroyed
net.Socket destroyed	R	net.Socket.destroyed										http://nodejs.org/api/all.html#net_socket_destroyed
net Socket destroyed	R	net.Socket destroyed										http://nodejs.org/api/all.html#net_socket_destroyed
net.Socket.localAddress	A										<section class="prog__container"><p id='obj.desc'>The string representation of the local IP address the remote client is\nconnecting on. For example, if you are listening on <code>&apos;0.0.0.0&apos;</code> and the\nclient connects on <code>&apos;192.168.1.1&apos;</code>, the value would be <code>&apos;192.168.1.1&apos;</code>.</p></section>	http://nodejs.org/api/all.html#net_socket_localaddress
net.Socket localAddress	R	net.Socket.localAddress										http://nodejs.org/api/all.html#net_socket_localaddress
net Socket localAddress	R	net.Socket localAddress										http://nodejs.org/api/all.html#net_socket_localaddress
net.Socket.localPort	A										<section class="prog__container"><p id='obj.desc'>The numeric representation of the local port. For example,\n<code>80</code> or <code>21</code>.</p></section>	http://nodejs.org/api/all.html#net_socket_localport
net.Socket localPort	R	net.Socket.localPort										http://nodejs.org/api/all.html#net_socket_localport
net Socket localPort	R	net.Socket localPort										http://nodejs.org/api/all.html#net_socket_localport
net.Socket.remoteAddress	A										<section class="prog__container"><p id='obj.desc'>The string representation of the remote IP address. For example,\n<code>&apos;74.125.127.100&apos;</code> or <code>&apos;2001:4860:a005::68&apos;</code>. Value may be <code>undefined</code> if\nthe socket is destroyed (for example, if the client disconnected).</p></section>	http://nodejs.org/api/all.html#net_socket_remoteaddress
net.Socket remoteAddress	R	net.Socket.remoteAddress										http://nodejs.org/api/all.html#net_socket_remoteaddress
net Socket remoteAddress	R	net.Socket remoteAddress										http://nodejs.org/api/all.html#net_socket_remoteaddress
net.Socket.remoteFamily	A										<section class="prog__container"><p id='obj.desc'>The string representation of the remote IP family. <code>&apos;IPv4&apos;</code> or <code>&apos;IPv6&apos;</code>.</p></section>	http://nodejs.org/api/all.html#net_socket_remotefamily
net.Socket remoteFamily	R	net.Socket.remoteFamily										http://nodejs.org/api/all.html#net_socket_remotefamily
net Socket remoteFamily	R	net.Socket remoteFamily										http://nodejs.org/api/all.html#net_socket_remotefamily
net.Socket.remotePort	A										<section class="prog__container"><p id='obj.desc'>The numeric representation of the remote port. For example,\n<code>80</code> or <code>21</code>.</p></section>	http://nodejs.org/api/all.html#net_socket_remoteport
net.Socket remotePort	R	net.Socket.remotePort										http://nodejs.org/api/all.html#net_socket_remoteport
net Socket remotePort	R	net.Socket remotePort										http://nodejs.org/api/all.html#net_socket_remoteport
net.Socket.close	A										<section class="prog__container"><p id='obj.desc'>Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean\nwhich says if the socket was closed due to a transmission error.</p></section>	http://nodejs.org/api/all.html#net_event_close
net.Socket close	R	net.Socket.close										http://nodejs.org/api/all.html#net_event_close
net Socket close	R	net.Socket close										http://nodejs.org/api/all.html#net_event_close
net.Socket.data	A										<section class="prog__container"><p id='obj.desc'>Emitted when data is received.  The argument <code>data</code> will be a <code>Buffer</code> or\n<code>String</code>.  Encoding of data is set by <code>socket.setEncoding()</code>.\n(See the Readable Stream section for more information.)</p></section>	http://nodejs.org/api/all.html#net_event_data
net.Socket data	R	net.Socket.data										http://nodejs.org/api/all.html#net_event_data
net Socket data	R	net.Socket data										http://nodejs.org/api/all.html#net_event_data
net.Socket.drain	A										<section class="prog__container"><p id='obj.desc'>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p></section>	http://nodejs.org/api/all.html#net_event_drain
net.Socket drain	R	net.Socket.drain										http://nodejs.org/api/all.html#net_event_drain
net Socket drain	R	net.Socket drain										http://nodejs.org/api/all.html#net_event_drain
net.Socket.error	A										<section class="prog__container"><p id='obj.desc'>Emitted when an error occurs.  The <code>&apos;close&apos;</code> event will be called directly\nfollowing this event.</p></section>	http://nodejs.org/api/all.html#net_event_error
net.Socket error	R	net.Socket.error										http://nodejs.org/api/all.html#net_event_error
net Socket error	R	net.Socket error										http://nodejs.org/api/all.html#net_event_error
net.Socket.lookup	A										<section class="prog__container"><p id='obj.desc'>Emitted after resolving the hostname but before connecting.\nNot applicable to UNIX sockets.</p></section>	http://nodejs.org/api/all.html#net_event_lookup
net.Socket lookup	R	net.Socket.lookup										http://nodejs.org/api/all.html#net_event_lookup
net Socket lookup	R	net.Socket lookup										http://nodejs.org/api/all.html#net_event_lookup
net.Socket.timeout	A										<section class="prog__container"><p id='obj.desc'>Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.</p></section>	http://nodejs.org/api/all.html#net_event_timeout
net.Socket timeout	R	net.Socket.timeout										http://nodejs.org/api/all.html#net_event_timeout
net Socket timeout	R	net.Socket timeout										http://nodejs.org/api/all.html#net_event_timeout
os	A										<section class="prog__container"><p id='obj.desc'>The <code>os</code> module provides a number of operating system-related utility methods.\nIt can be accessed using:</p><p>The <code>os</code> module provides a number of operating system-related utility methods.\nIt can be accessed using:</p><pre><code class="lang-js">const os = require(&apos;os&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#os_os
os.arch	A										<section class="prog__container"><p id='obj.desc'>The <code>os.arch()</code> method returns a string identifying the operating system CPU\narchitecture <em>for which the Node.js binary was compiled</em>.</p></section>	http://nodejs.org/api/all.html#os_os_arch
os arch	R	os.arch										http://nodejs.org/api/all.html#os_os_arch
os.cpus	A										<section class="prog__container"><p id='obj.desc'>The <code>os.cpus()</code> method returns an array of objects containing information about\neach CPU/core installed.</p><p>For example:</p><pre><code class="lang-js">[\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 511580,\n      nice: 20,\n      sys: 40900,\n      idle: 1070842510,\n      irq: 0\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 291660,\n      nice: 0,\n      sys: 34360,\n      idle: 1070888000,\n      irq: 10\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 308260,\n      nice: 0,\n      sys: 55410,\n      idle: 1071129970,\n      irq: 880\n    }\n  },\n  {\n    model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times: {\n      user: 266450,\n      nice: 1480,\n      sys: 34920,\n      idle: 1072572010,\n      irq: 30\n    }\n  }\n]\n</code></pre></section>	http://nodejs.org/api/all.html#os_os_cpus
os cpus	R	os.cpus										http://nodejs.org/api/all.html#os_os_cpus
os.endianness	A										<section class="prog__container"><p id='obj.desc'>The <code>os.endianness()</code> method returns a string identifying the endianness of the\nCPU <em>for which the Node.js binary was compiled</em>.</p></section>	http://nodejs.org/api/all.html#os_os_endianness
os endianness	R	os.endianness										http://nodejs.org/api/all.html#os_os_endianness
os.freemem	A										<section class="prog__container"><p id='obj.desc'>The <code>os.freemem()</code> method returns the amount of free system memory in bytes as\nan integer.</p></section>	http://nodejs.org/api/all.html#os_os_freemem
os freemem	R	os.freemem										http://nodejs.org/api/all.html#os_os_freemem
os.homedir	A										<section class="prog__container"><p id='obj.desc'>The <code>os.homedir()</code> method returns the home directory of the current user as a\nstring.</p></section>	http://nodejs.org/api/all.html#os_os_homedir
os homedir	R	os.homedir										http://nodejs.org/api/all.html#os_os_homedir
os.hostname	A										<section class="prog__container"><p id='obj.desc'>The <code>os.hostname()</code> method returns the hostname of the operating system as a\nstring.</p></section>	http://nodejs.org/api/all.html#os_os_hostname
os hostname	R	os.hostname										http://nodejs.org/api/all.html#os_os_hostname
os.loadavg	A										<section class="prog__container"><p id='obj.desc'>The <code>os.loadavg()</code> method returns an array containing the 1, 5, and 15 minute\nload averages.</p></section>	http://nodejs.org/api/all.html#os_os_loadavg
os loadavg	R	os.loadavg										http://nodejs.org/api/all.html#os_os_loadavg
os.networkInterfaces	A										<section class="prog__container"><p id='obj.desc'>The <code>os.networkInterfaces()</code> method returns an object containing only network\ninterfaces that have been assigned a network address.</p><p>null</p><pre><code class="lang-js">{\n  lo: [\n    {\n      address: &apos;127.0.0.1&apos;,\n      netmask: &apos;255.0.0.0&apos;,\n      family: &apos;IPv4&apos;,\n      mac: &apos;00:00:00:00:00:00&apos;,\n      internal: true\n    },\n    {\n      address: &apos;::1&apos;,\n      netmask: &apos;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&apos;,\n      family: &apos;IPv6&apos;,\n      mac: &apos;00:00:00:00:00:00&apos;,\n      internal: true\n    }\n  ],\n  eth0: [\n    {\n      address: &apos;192.168.1.108&apos;,\n      netmask: &apos;255.255.255.0&apos;,\n      family: &apos;IPv4&apos;,\n      mac: &apos;01:02:03:0a:0b:0c&apos;,\n      internal: false\n    },\n    {\n      address: &apos;fe80::a00:27ff:fe4e:66a1&apos;,\n      netmask: &apos;ffff:ffff:ffff:ffff::&apos;,\n      family: &apos;IPv6&apos;,\n      mac: &apos;01:02:03:0a:0b:0c&apos;,\n      internal: false\n    }\n  ]\n}\n</code></pre></section>	http://nodejs.org/api/all.html#os_os_networkinterfaces
os networkInterfaces	R	os.networkInterfaces										http://nodejs.org/api/all.html#os_os_networkinterfaces
os.platform	A										<section class="prog__container"><p id='obj.desc'>The <code>os.platform()</code> method returns a string identifying the operating system\nplatform as set during compile time of Node.js.</p></section>	http://nodejs.org/api/all.html#os_os_platform
os platform	R	os.platform										http://nodejs.org/api/all.html#os_os_platform
os.release	A										<section class="prog__container"><p id='obj.desc'>The <code>os.release()</code> method returns a string identifying the operating system\nrelease.</p></section>	http://nodejs.org/api/all.html#os_os_release
os release	R	os.release										http://nodejs.org/api/all.html#os_os_release
os.tmpdir	A										<section class="prog__container"><p id='obj.desc'>The <code>os.tmpdir()</code> method returns a string specifying the operating system&apos;s\ndefault directory for temporary files.</p></section>	http://nodejs.org/api/all.html#os_os_tmpdir
os tmpdir	R	os.tmpdir										http://nodejs.org/api/all.html#os_os_tmpdir
os.totalmem	A										<section class="prog__container"><p id='obj.desc'>The <code>os.totalmem()</code> method returns the total amount of system memory in bytes\nas an integer.</p></section>	http://nodejs.org/api/all.html#os_os_totalmem
os totalmem	R	os.totalmem										http://nodejs.org/api/all.html#os_os_totalmem
os.type	A										<section class="prog__container"><p id='obj.desc'>The <code>os.type()</code> method returns a string identifying the operating system name\nas returned by uname(3). For example <code>&apos;Linux&apos;</code> on Linux, <code>&apos;Darwin&apos;</code> on OS X and\n<code>&apos;Windows_NT&apos;</code> on Windows.</p></section>	http://nodejs.org/api/all.html#os_os_type
os type	R	os.type										http://nodejs.org/api/all.html#os_os_type
os.uptime	A										<section class="prog__container"><p id='obj.desc'>The <code>os.uptime()</code> method returns the system uptime in number of seconds.</p></section>	http://nodejs.org/api/all.html#os_os_uptime
os uptime	R	os.uptime										http://nodejs.org/api/all.html#os_os_uptime
os.userInfo	A										<section class="prog__container"><p id='obj.desc'>The <code>os.userInfo()</code> method returns information about the currently effective\nuser -- on POSIX platforms, this is typically a subset of the password file. The\nreturned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.\nOn Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p></section>	http://nodejs.org/api/all.html#os_os_userinfo_options
os userInfo	R	os.userInfo										http://nodejs.org/api/all.html#os_os_userinfo_options
os.EOL	A										<section class="prog__container"><p id='obj.desc'>A string constant defining the operating system-specific end-of-line marker:</p></section>	http://nodejs.org/api/all.html#os_os_eol
os EOL	R	os.EOL										http://nodejs.org/api/all.html#os_os_eol
os.constants	A										<section class="prog__container"><p id='obj.desc'>Returns an object containing commonly used operating system specific constants\nfor error codes, process signals, and so on. The specific constants currently\ndefined are described in OS Constants.</p></section>	http://nodejs.org/api/all.html#os_os_constants
os constants	R	os.constants										http://nodejs.org/api/all.html#os_os_constants
path	A										<section class="prog__container"><p id='obj.desc'>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p><p>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p><pre><code class="lang-js">const path = require(&apos;path&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#path_path
path.basename	A										<section class="prog__container"><p id='obj.desc'>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to\nthe Unix <code>basename</code> command.</p><p>For example:</p><pre><code class="lang-js">path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)\n// Returns: &apos;quux.html&apos;\n\npath.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)\n// Returns: &apos;quux&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_basename_path_ext
path basename	R	path.basename										http://nodejs.org/api/all.html#path_path_basename_path_ext
path.dirname	A										<section class="prog__container"><p id='obj.desc'>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to\nthe Unix <code>dirname</code> command.</p><p>For example:</p><pre><code class="lang-js">path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)\n// Returns: &apos;/foo/bar/baz/asdf&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_dirname_path
path dirname	R	path.dirname										http://nodejs.org/api/all.html#path_path_dirname_path
path.extname	A										<section class="prog__container"><p id='obj.desc'>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last\noccurrence of the <code>.</code> (period) character to end of string in the last portion of\nthe <code>path</code>.  If there is no <code>.</code> in the last portion of the <code>path</code>, or if the\nfirst character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then\nan empty string is returned.</p><p>For example:</p><pre><code class="lang-js">path.extname(&apos;index.html&apos;)\n// Returns: &apos;.html&apos;\n\npath.extname(&apos;index.coffee.md&apos;)\n// Returns: &apos;.md&apos;\n\npath.extname(&apos;index.&apos;)\n// Returns: &apos;.&apos;\n\npath.extname(&apos;index&apos;)\n// Returns: &apos;&apos;\n\npath.extname(&apos;.index&apos;)\n// Returns: &apos;&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_extname_path
path extname	R	path.extname										http://nodejs.org/api/all.html#path_path_extname_path
path.format	A										<section class="prog__container"><p id='obj.desc'>The <code>path.format()</code> method returns a path string from an object. This is the\nopposite of <code>path.parse()</code>.</p><p>For example, on POSIX:</p><pre><code class="lang-js">// If `dir`, `root` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned. `root` is ignored.\npath.format({\n  root: &apos;/ignored&apos;,\n  dir: &apos;/home/user/dir&apos;,\n  base: &apos;file.txt&apos;\n});\n// Returns: &apos;/home/user/dir/file.txt&apos;\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included. `ext` will be ignored.\npath.format({\n  root: &apos;/&apos;,\n  base: &apos;file.txt&apos;,\n  ext: &apos;ignored&apos;\n});\n// Returns: &apos;/file.txt&apos;\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: &apos;/&apos;,\n  name: &apos;file&apos;,\n  ext: &apos;.txt&apos;\n});\n// Returns: &apos;/file.txt&apos;\n</code></pre><p>On Windows:</p><pre><code class="lang-js">path.format({\n  dir : &quot;C:\\path\\dir&quot;,\n  base : &quot;file.txt&quot;\n});\n// Returns: &apos;C:\\path\\dir\\file.txt&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_format_pathobject
path format	R	path.format										http://nodejs.org/api/all.html#path_path_format_pathobject
path.isAbsolute	A										<section class="prog__container"><p id='obj.desc'>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p><p>For example on POSIX:</p><pre><code class="lang-js">path.isAbsolute(&apos;/foo/bar&apos;) // true\npath.isAbsolute(&apos;/baz/..&apos;)  // true\npath.isAbsolute(&apos;qux/&apos;)     // false\npath.isAbsolute(&apos;.&apos;)        // false\n</code></pre><p>On Windows:</p><pre><code class="lang-js">path.isAbsolute(&apos;//server&apos;)    // true\npath.isAbsolute(&apos;\\\\server&apos;)  // true\npath.isAbsolute(&apos;C:/foo/..&apos;)   // true\npath.isAbsolute(&apos;C:\\foo\\..&apos;) // true\npath.isAbsolute(&apos;bar\\baz&apos;)    // false\npath.isAbsolute(&apos;bar/baz&apos;)     // false\npath.isAbsolute(&apos;.&apos;)           // false\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_isabsolute_path
path isAbsolute	R	path.isAbsolute										http://nodejs.org/api/all.html#path_path_isabsolute_path
path.join	A										<section class="prog__container"><p id='obj.desc'>The <code>path.join()</code> method joins all given <code>path</code> segments together using the\nplatform specific separator as a delimiter, then normalizes the resulting path.</p><p>For example:</p><pre><code class="lang-js">path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)\n// Returns: &apos;/foo/bar/baz/asdf&apos;\n\npath.join(&apos;foo&apos;, {}, &apos;bar&apos;)\n// throws TypeError: Arguments to path.join must be strings\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_join_paths
path join	R	path.join										http://nodejs.org/api/all.html#path_path_join_paths
path.normalize	A										<section class="prog__container"><p id='obj.desc'>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>&apos;..&apos;</code> and\n<code>&apos;.&apos;</code> segments.</p><p>For example on POSIX:</p><pre><code class="lang-js">path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)\n// Returns: &apos;/foo/bar/baz/asdf&apos;\n</code></pre><p>On Windows:</p><pre><code class="lang-js">path.normalize(&apos;C:\\temp\\\\foo\\bar\\..\\&apos;);\n// Returns: &apos;C:\\temp\\foo\\&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_normalize_path
path normalize	R	path.normalize										http://nodejs.org/api/all.html#path_path_normalize_path
path.parse	A										<section class="prog__container"><p id='obj.desc'>The <code>path.parse()</code> method returns an object whose properties represent\nsignificant elements of the <code>path</code>.</p><p>For example on POSIX:</p><pre><code class="lang-js">path.parse(&apos;/home/user/dir/file.txt&apos;)\n// Returns:\n// {\n//    root : &quot;/&quot;,\n//    dir : &quot;/home/user/dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre><p>null</p><pre><code class="lang-text">&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;\n&#x2502;          dir        &#x2502;    base    &#x2502;\n&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;              &#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;\n&#x2502; root &#x2502;              &#x2502; name &#x2502; ext &#x2502;\n&quot;  /    home/user/dir / file  .txt &quot;\n&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n</code></pre><p>On Windows:</p><pre><code class="lang-js">path.parse(&apos;C:\\path\\dir\\file.txt&apos;)\n// Returns:\n// {\n//    root : &quot;C:\\&quot;,\n//    dir : &quot;C:\\path\\dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre><p>null</p><pre><code class="lang-text">&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;\n&#x2502;          dir        &#x2502;    base    &#x2502;\n&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;              &#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;\n&#x2502; root &#x2502;              &#x2502; name &#x2502; ext &#x2502;\n&quot; C:\      path\dir   \ file  .txt &quot;\n&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_parse_path
path parse	R	path.parse										http://nodejs.org/api/all.html#path_path_parse_path
path.relative	A										<section class="prog__container"><p id='obj.desc'>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>.\nIf <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code>\non each), a zero-length string is returned.</p><p>For example on POSIX:</p><pre><code class="lang-js">path.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// Returns: &apos;../../impl/bbb&apos;\n</code></pre><p>On Windows:</p><pre><code class="lang-js">path.relative(&apos;C:\\orandea\\test\\aaa&apos;, &apos;C:\\orandea\\impl\\bbb&apos;)\n// Returns: &apos;..\\..\\impl\\bbb&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_relative_from_to
path relative	R	path.relative										http://nodejs.org/api/all.html#path_path_relative_from_to
path.resolve	A										<section class="prog__container"><p id='obj.desc'>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into\nan absolute path.</p><p>For example:</p><pre><code class="lang-js">path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// Returns: &apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// Returns: &apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// if the current working directory is /home/myself/node,\n// this returns &apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_resolve_paths
path resolve	R	path.resolve										http://nodejs.org/api/all.html#path_path_resolve_paths
path.delimiter	A										<section class="prog__container"><p id='obj.desc'>Provides the platform-specific path delimiter:</p><p>For example, on POSIX:</p><pre><code class="lang-js">console.log(process.env.PATH)\n// Prints: &apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&apos;/usr/bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin&apos;, &apos;/sbin&apos;, &apos;/usr/local/bin&apos;]\n</code></pre><p>On Windows:</p><pre><code class="lang-js">console.log(process.env.PATH)\n// Prints: &apos;C:\Windows\system32;C:\Windows;C:\Program Files\node\&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&apos;C:\\Windows\\system32&apos;, &apos;C:\\Windows&apos;, &apos;C:\\Program Files\\node\\&apos;]\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_delimiter
path delimiter	R	path.delimiter										http://nodejs.org/api/all.html#path_path_delimiter
path.posix	A										<section class="prog__container"><p id='obj.desc'>The <code>path.posix</code> property provides access to POSIX specific implementations\nof the <code>path</code> methods.</p></section>	http://nodejs.org/api/all.html#path_path_posix
path posix	R	path.posix										http://nodejs.org/api/all.html#path_path_posix
path.sep	A										<section class="prog__container"><p id='obj.desc'>Provides the platform-specific path segment separator:</p><p>For example on POSIX:</p><pre><code class="lang-js">&apos;foo/bar/baz&apos;.split(path.sep)\n// Returns: [&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]\n</code></pre><p>On Windows:</p><pre><code class="lang-js">&apos;foo\\bar\\baz&apos;.split(path.sep)\n// Returns: [&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]\n</code></pre></section>	http://nodejs.org/api/all.html#path_path_sep
path sep	R	path.sep										http://nodejs.org/api/all.html#path_path_sep
path.win32	A										<section class="prog__container"><p id='obj.desc'>The <code>path.win32</code> property provides access to Windows-specific implementations\nof the <code>path</code> methods.</p></section>	http://nodejs.org/api/all.html#path_path_win32
path win32	R	path.win32										http://nodejs.org/api/all.html#path_path_win32
punycode	A										<section class="prog__container"><p id='obj.desc'><strong>The version of the punycode module bundled in Node.js is being deprecated</strong>.\nIn a future major version of Node.js this module will be removed. Users\ncurrently depending on the <code>punycode</code> module should switch to using the\nuserland-provided Punycode.js module instead.</p><p>The <code>punycode</code> module is a bundled version of the Punycode.js module. It\ncan be accessed using:</p><pre><code class="lang-js">const punycode = require(&apos;punycode&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#punycode_punycode
punycode.decode	A										<section class="prog__container"><p id='obj.desc'>The <code>punycode.decode()</code> method converts a Punycode string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.</p><p>The <code>punycode.decode()</code> method converts a Punycode string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.</p><pre><code class="lang-js">punycode.decode(&apos;maana-pta&apos;); // &apos;ma&#xF1;ana&apos;\npunycode.decode(&apos;--dqo34k&apos;); // &apos;&#x2603;-&#x2318;&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#punycode_punycode_decode_string
punycode decode	R	punycode.decode										http://nodejs.org/api/all.html#punycode_punycode_decode_string
punycode.encode	A										<section class="prog__container"><p id='obj.desc'>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\nPunycode string of ASCII-only characters.</p><p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\nPunycode string of ASCII-only characters.</p><pre><code class="lang-js">punycode.encode(&apos;ma&#xF1;ana&apos;); // &apos;maana-pta&apos;\npunycode.encode(&apos;&#x2603;-&#x2318;&apos;); // &apos;--dqo34k&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#punycode_punycode_encode_string
punycode encode	R	punycode.encode										http://nodejs.org/api/all.html#punycode_punycode_encode_string
punycode.toASCII	A										<section class="prog__container"><p id='obj.desc'>The <code>punycode.toASCII()</code> method converts a Unicode string representing an\nInternationalized Domain Name to Punycode. Only the non-ASCII parts of the\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\nalready only contains ASCII characters will have no effect.</p><p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an\nInternationalized Domain Name to Punycode. Only the non-ASCII parts of the\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\nalready only contains ASCII characters will have no effect.</p><pre><code class="lang-js">// encode domain names\npunycode.toASCII(&apos;ma&#xF1;ana.com&apos;);  // &apos;xn--maana-pta.com&apos;\npunycode.toASCII(&apos;&#x2603;-&#x2318;.com&apos;);   // &apos;xn----dqo34k.com&apos;\npunycode.toASCII(&apos;example.com&apos;); // &apos;example.com&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#punycode_punycode_toascii_domain
punycode toASCII	R	punycode.toASCII										http://nodejs.org/api/all.html#punycode_punycode_toascii_domain
punycode.toUnicode	A										<section class="prog__container"><p id='obj.desc'>The <code>punycode.toUnicode()</code> method converts a string representing a domain name\ncontaining Punycode encoded characters into Unicode. Only the Punycode\nencoded parts of the domain name are be converted.</p><p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name\ncontaining Punycode encoded characters into Unicode. Only the Punycode\nencoded parts of the domain name are be converted.</p><pre><code class="lang-js">// decode domain names\npunycode.toUnicode(&apos;xn--maana-pta.com&apos;); // &apos;ma&#xF1;ana.com&apos;\npunycode.toUnicode(&apos;xn----dqo34k.com&apos;);  // &apos;&#x2603;-&#x2318;.com&apos;\npunycode.toUnicode(&apos;example.com&apos;);       // &apos;example.com&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#punycode_punycode_tounicode_domain
punycode toUnicode	R	punycode.toUnicode										http://nodejs.org/api/all.html#punycode_punycode_tounicode_domain
punycode.ucs2	A										<section class="prog__container"></section>	http://nodejs.org/api/all.html#punycode_punycode_ucs2
punycode ucs2	R	punycode.ucs2										http://nodejs.org/api/all.html#punycode_punycode_ucs2
punycode.version	A										<section class="prog__container"><p id='obj.desc'>Returns a string identifying the current Punycode.js version number.</p></section>	http://nodejs.org/api/all.html#punycode_punycode_version
punycode version	R	punycode.version										http://nodejs.org/api/all.html#punycode_punycode_version
querystring	A										<section class="prog__container"><p id='obj.desc'>The <code>querystring</code> module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:</p><p>The <code>querystring</code> module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:</p><pre><code class="lang-js">const querystring = require(&apos;querystring&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#querystring_querystring
querystring.escape	A										<section class="prog__container"><p id='obj.desc'>The <code>querystring.escape()</code> method performs URL percent-encoding on the given\n<code>str</code> in a manner that is optimized for the specific requirements of URL\nquery strings.</p></section>	http://nodejs.org/api/all.html#querystring_querystring_escape_str
querystring escape	R	querystring.escape										http://nodejs.org/api/all.html#querystring_querystring_escape_str
querystring.parse	A										<section class="prog__container"><p id='obj.desc'>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a\ncollection of key and value pairs.</p><p>For example, the query string <code>&apos;foo=bar&amp;abc=xyz&amp;abc=123&apos;</code> is parsed into:</p><pre><code class="lang-js">{\n  foo: &apos;bar&apos;,\n  abc: [&apos;xyz&apos;, &apos;123&apos;]\n}\n</code></pre><p>By default, percent-encoded characters within the query string will be assumed\nto use UTF-8 encoding. If an alternative character encoding is used, then an\nalternative <code>decodeURIComponent</code> option will need to be specified as illustrated\nin the following example:</p><pre><code class="lang-js">// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse(&apos;w=%D6%D0%CE%C4&amp;foo=bar&apos;, null, null,\n  { decodeURIComponent: gbkDecodeURIComponent })\n</code></pre></section>	http://nodejs.org/api/all.html#querystring_querystring_parse_str_sep_eq_options
querystring parse	R	querystring.parse										http://nodejs.org/api/all.html#querystring_querystring_parse_str_sep_eq_options
querystring.stringify	A										<section class="prog__container"><p id='obj.desc'>The <code>querystring.stringify()</code> method produces a URL query string from a\ngiven <code>obj</code> by iterating through the object&apos;s &quot;own properties&quot;.</p><p>For example:</p><pre><code class="lang-js">querystring.stringify({ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; })\n// returns &apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&apos;\n\nquerystring.stringify({foo: &apos;bar&apos;, baz: &apos;qux&apos;}, &apos;;&apos;, &apos;:&apos;)\n// returns &apos;foo:bar;baz:qux&apos;\n</code></pre><p>By default, characters requiring percent-encoding within the query string will\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\n<code>encodeURIComponent</code> option will need to be specified as illustrated in the\nfollowing example:</p><pre><code class="lang-js">// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: &apos;&#x4E2D;&#x6587;&apos;, foo: &apos;bar&apos; }, null, null,\n  { encodeURIComponent: gbkEncodeURIComponent })\n</code></pre></section>	http://nodejs.org/api/all.html#querystring_querystring_stringify_obj_sep_eq_options
querystring stringify	R	querystring.stringify										http://nodejs.org/api/all.html#querystring_querystring_stringify_obj_sep_eq_options
querystring.unescape	A										<section class="prog__container"><p id='obj.desc'>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded\ncharacters on the given <code>str</code>.</p></section>	http://nodejs.org/api/all.html#querystring_querystring_unescape_str
querystring unescape	R	querystring.unescape										http://nodejs.org/api/all.html#querystring_querystring_unescape_str
readline	A										<section class="prog__container"><p id='obj.desc'>The <code>readline</code> module provides an interface for reading data from a Readable\nstream (such as <code>process.stdin</code>) one line at a time. It can be accessed using:</p><p>The <code>readline</code> module provides an interface for reading data from a Readable\nstream (such as <code>process.stdin</code>) one line at a time. It can be accessed using:</p><pre><code class="lang-js">const readline = require(&apos;readline&apos;);\n</code></pre><p>The following simple example illustrates the basic use of the <code>readline</code> module.</p><pre><code class="lang-js">const readline = require(&apos;readline&apos;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&apos;What do you think of Node.js? &apos;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#readline_readline
readline.clearLine	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.clearLine()</code> method clears current line of given TTY stream\nin a specified direction identified by <code>dir</code>.</p></section>	http://nodejs.org/api/all.html#readline_readline_clearline_stream_dir
readline clearLine	R	readline.clearLine										http://nodejs.org/api/all.html#readline_readline_clearline_stream_dir
readline.clearScreenDown	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.clearScreenDown()</code> method clears the given TTY stream from\nthe current position of the cursor down.</p></section>	http://nodejs.org/api/all.html#readline_readline_clearscreendown_stream
readline clearScreenDown	R	readline.clearScreenDown										http://nodejs.org/api/all.html#readline_readline_clearscreendown_stream
readline.createInterface	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\ninstance.</p><p>For example:</p><pre><code class="lang-js">const readline = require(&apos;readline&apos;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</code></pre><p>Once the <code>readline.Interface</code> instance is created, the most common case is to\nlisten for the <code>&apos;line&apos;</code> event:</p><pre><code class="lang-js">rl.on(&apos;line&apos;, (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#readline_readline_createinterface_options
readline createInterface	R	readline.createInterface										http://nodejs.org/api/all.html#readline_readline_createinterface_options
readline.cursorTo	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\ngiven TTY <code>stream</code>.</p></section>	http://nodejs.org/api/all.html#readline_readline_cursorto_stream_x_y
readline cursorTo	R	readline.cursorTo										http://nodejs.org/api/all.html#readline_readline_cursorto_stream_x_y
readline.emitKeypressEvents	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.emitKeypressEvents()</code> method causes the given Writable\n<code>stream</code> to begin emitting <code>&apos;keypress&apos;</code> events corresponding to received input.</p><p>If the <code>stream</code> is a TTY, then it must be in raw mode.</p><pre><code class="lang-js">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</code></pre></section>	http://nodejs.org/api/all.html#readline_readline_emitkeypressevents_stream_interface
readline emitKeypressEvents	R	readline.emitKeypressEvents										http://nodejs.org/api/all.html#readline_readline_emitkeypressevents_stream_interface
readline.moveCursor	A										<section class="prog__container"><p id='obj.desc'>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\nposition in a given TTY <code>stream</code>.</p><p>The following example illustrates the use of <code>readline.Interface</code> class to\nimplement a small command-line interface:</p><pre><code class="lang-js">const readline = require(&apos;readline&apos;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: &apos;OHAI&gt; &apos;\n});\n\nrl.prompt();\n\nrl.on(&apos;line&apos;, (line) =&gt; {\n  switch(line.trim()) {\n    case &apos;hello&apos;:\n      console.log(&apos;world!&apos;);\n      break;\n    default:\n      console.log(`Say what? I might have heard &apos;${line.trim()}&apos;`);\n      break;\n  }\n  rl.prompt();\n}).on(&apos;close&apos;, () =&gt; {\n  console.log(&apos;Have a great day!&apos;);\n  process.exit(0);\n});\n</code></pre><p>A common use case for <code>readline</code> is to consume input from a filesystem\nReadable stream one line at a time, as illustrated in the following\nexample:</p><pre><code class="lang-js">const readline = require(&apos;readline&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream(&apos;sample.txt&apos;)\n});\n\nrl.on(&apos;line&apos;, (line) =&gt; {\n  console.log(`Line from file: ${line}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#readline_readline_movecursor_stream_dx_dy
readline moveCursor	R	readline.moveCursor										http://nodejs.org/api/all.html#readline_readline_movecursor_stream_dx_dy
Interface	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>readline.Interface</code> class are constructed using the\n<code>readline.createInterface()</code> method. Every instance is associated with a\nsingle <code>input</code> Readable stream and a single <code>output</code> Writable stream.\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\nand is read from, the <code>input</code> stream.</p></section>	http://nodejs.org/api/all.html#interface_class_interface
Interface.close	D								*[[Interface.close(interface_event_close)]] The &apos;close&apos; event is emitted when one of the following occur:\n*[[Interface.close(interface_close)]] The rl.close   method closes the readline.Interface instance and relinquishes control over the input and output streams. When called, the &apos;close&apos; event will be emitted.			
Interface close	R	Interface.close										http://nodejs.org/api/all.html#interface_close
Interface.pause	D								*[[Interface.pause(interface_event_pause)]] The &apos;pause&apos; event is emitted when one of the following occur:\n*[[Interface.pause(interface_pause)]] The rl.pause   method pauses the input stream, allowing it to be resumed later if necessary.			
Interface pause	R	Interface.pause										http://nodejs.org/api/all.html#interface_pause
Interface.prompt	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\nlocation at which to provide input.</p><pre><code>rl.prompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#interface_prompt_preservecursor
Interface prompt	R	Interface.prompt										http://nodejs.org/api/all.html#interface_prompt_preservecursor
Interface.question	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\nfunction passing the provided input as the first argument.</p><p>Example usage:</p><pre><code class="lang-js">rl.question(&apos;What is your favorite food?&apos;, (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</code></pre><pre><code>rl.question(query, callback)</code></pre></section>	http://nodejs.org/api/all.html#interface_question_query_callback
Interface question	R	Interface.question										http://nodejs.org/api/all.html#interface_question_query_callback
Interface.resume	D								*[[Interface.resume(interface_event_resume)]] The &apos;resume&apos; event is emitted whenever the input stream is resumed.\n*[[Interface.resume(interface_resume)]] The rl.resume   method resumes the input stream if it has been paused.			
Interface resume	R	Interface.resume										http://nodejs.org/api/all.html#interface_resume
Interface.setPrompt	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\nwhenever <code>rl.prompt()</code> is called.</p><pre><code>rl.setPrompt(prompt)</code></pre></section>	http://nodejs.org/api/all.html#interface_setprompt_prompt
Interface setPrompt	R	Interface.setPrompt										http://nodejs.org/api/all.html#interface_setprompt_prompt
Interface.write	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence  identified\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\na TTY text terminal.</p><p>For example:</p><pre><code class="lang-js">rl.write(&apos;Delete this!&apos;);\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: &apos;u&apos;});\n</code></pre><pre><code>rl.write(data[, key])</code></pre></section>	http://nodejs.org/api/all.html#interface_write_data_key
Interface write	R	Interface.write										http://nodejs.org/api/all.html#interface_write_data_key
Interface.line	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;line&apos;</code> event is emitted whenever the <code>input</code> stream receives an\nend-of-line input (<code>\n</code>, <code>\r</code>, or <code>\r\n</code>). This usually occurs when the user\npresses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p><p>For example:</p><pre><code class="lang-js">rl.on(&apos;line&apos;, (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_line
Interface line	R	Interface.line										http://nodejs.org/api/all.html#interface_event_line
Interface.SIGCONT	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;SIGCONT&apos;</code> event is emitted when a Node.js process previously moved into\nthe background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\nforeground using fg(1).</p><p>For example:</p><pre><code class="lang-js">rl.on(&apos;SIGCONT&apos;, () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_sigcont
Interface SIGCONT	R	Interface.SIGCONT										http://nodejs.org/api/all.html#interface_event_sigcont
Interface.SIGINT	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;SIGINT&apos;</code> event is emitted whenever the <code>input</code> stream receives a\n<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>&apos;SIGINT&apos;</code> event\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>&apos;pause&apos;</code>\nevent will be emitted.</p><p>For example:</p><pre><code class="lang-js">rl.on(&apos;SIGINT&apos;, () =&gt; {\n  rl.question(&apos;Are you sure you want to exit?&apos;, (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_sigint
Interface SIGINT	R	Interface.SIGINT										http://nodejs.org/api/all.html#interface_event_sigint
Interface.SIGTSTP	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;SIGTSTP&apos;</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\nwill be sent to the background.</p><p>For example:</p><pre><code class="lang-js">rl.on(&apos;SIGTSTP&apos;, () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&apos;Caught SIGTSTP.&apos;);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_sigtstp
Interface SIGTSTP	R	Interface.SIGTSTP										http://nodejs.org/api/all.html#interface_event_sigtstp
repl	A										<section class="prog__container"><p id='obj.desc'>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:</p><p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:</p><pre><code class="lang-js">const repl = require(&apos;repl&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#repl_repl
repl.start	A										<section class="prog__container"><p id='obj.desc'>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p></section>	http://nodejs.org/api/all.html#repl_repl_start_options
repl start	R	repl.start										http://nodejs.org/api/all.html#repl_repl_start_options
REPLServer	A										<section class="prog__container"><p id='obj.desc'>The <code>repl.REPLServer</code> class inherits from the <code>readline.Interface</code> class.\nInstances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and\n<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p></section>	http://nodejs.org/api/all.html#replserver_class_replserver
REPLServer.defineCommand	A										<section class="prog__container"><p id='obj.desc'>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands\nto the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the\n<code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following\nproperties:</p><p>The following example shows two new commands added to the REPL instance:</p><pre><code class="lang-js">const repl = require(&apos;repl&apos;);\n\nvar replServer = repl.start({prompt: &apos;&gt; &apos;});\nreplServer.defineCommand(&apos;sayhello&apos;, {\n  help: &apos;Say hello&apos;,\n  action: function(name) {\n    this.lineParser.reset();\n    this.bufferedCommand = &apos;&apos;;\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand(&apos;saybye&apos;, function() {\n  console.log(&apos;Goodbye!&apos;);\n  this.close();\n});\n</code></pre><p>The new commands can then be used from within the REPL instance:</p><pre><code class="lang-txt">&gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n</code></pre><pre><code>replServer.defineCommand(keyword, cmd)</code></pre></section>	http://nodejs.org/api/all.html#replserver_definecommand_keyword_cmd
REPLServer defineCommand	R	REPLServer.defineCommand										http://nodejs.org/api/all.html#replserver_definecommand_keyword_cmd
REPLServer.displayPrompt	A										<section class="prog__container"><p id='obj.desc'>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input\nfrom the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>\nand resuming the <code>input</code> to accept new input.</p><pre><code>replServer.displayPrompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#replserver_displayprompt_preservecursor
REPLServer displayPrompt	R	REPLServer.displayPrompt										http://nodejs.org/api/all.html#replserver_displayprompt_preservecursor
REPLServer.exit	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;exit&apos;</code> event is emitted when the REPL is exited either by receiving the\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&apos;end&apos;</code> on the input stream. The listener\ncallback is invoked without any arguments.</p><p>The <code>&apos;exit&apos;</code> event is emitted when the REPL is exited either by receiving the\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&apos;end&apos;</code> on the input stream. The listener\ncallback is invoked without any arguments.</p><pre><code class="lang-js">replServer.on(&apos;exit&apos;, () =&gt; {\n  console.log(&apos;Received &quot;exit&quot; event from repl!&apos;);\n  process.exit();\n});\n</code></pre></section>	http://nodejs.org/api/all.html#replserver_event_exit
REPLServer exit	R	REPLServer.exit										http://nodejs.org/api/all.html#replserver_event_exit
REPLServer.reset	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;reset&apos;</code> event is emitted when the REPL&apos;s context is reset. This occurs\nwhenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using\nthe default evaluator and the <code>repl.REPLServer</code> instance was created with the\n<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a\nreference to the <code>context</code> object as the only argument.</p><p>This can be used primarily to re-initialize REPL context to some pre-defined\nstate as illustrated in the following simple example:</p><pre><code class="lang-js">const repl = require(&apos;repl&apos;);\n\nfunction initializeContext(context) {\n  context.m = &apos;test&apos;;\n}\n\nvar r = repl.start({prompt: &apos;&gt;&apos;});\ninitializeContext(r.context);\n\nr.on(&apos;reset&apos;, initializeContext);\n</code></pre><p>When this code is executed, the global <code>&apos;m&apos;</code> variable can be modified but then\nreset to its initial value using the <code>.clear</code> command:</p><pre><code class="lang-js">$ ./node example.js\n&gt;m\n&apos;test&apos;\n&gt;m = 1\n1\n&gt;m\n1\n&gt;.clear\nClearing context...\n&gt;m\n&apos;test&apos;\n&gt;\n</code></pre></section>	http://nodejs.org/api/all.html#replserver_event_reset
REPLServer reset	R	REPLServer.reset										http://nodejs.org/api/all.html#replserver_event_reset
stream	A										<section class="prog__container"><p id='obj.desc'>A stream is an abstract interface for working with streaming data in Node.js.\nThe <code>stream</code> module provides a base API that makes it easy to build objects\nthat implement the stream interface.</p><p>The <code>stream</code> module can be accessed using:</p><pre><code class="lang-js">const stream = require(&apos;stream&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#stream_stream
stringdecoder	A										<section class="prog__container"><p id='obj.desc'>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:</p><p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:</p><pre><code class="lang-js">const StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\n</code></pre><p>The following example shows the basic use of the <code>StringDecoder</code> class.</p><pre><code class="lang-js">const StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nconst decoder = new StringDecoder(&apos;utf8&apos;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n</code></pre><p>In the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (<code>&#x20AC;</code>) are written over three separate operations:</p><pre><code class="lang-js">const StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nconst decoder = new StringDecoder(&apos;utf8&apos;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#stringdecoder_stringdecoder
new	A										<section class="prog__container"><p id='obj.desc'>Creates a new <code>StringDecoder</code> instance.</p></section>	http://nodejs.org/api/all.html#new_class_new
new.end	A										<section class="prog__container"><p id='obj.desc'>Returns any remaining input stored in the internal buffer as a string. Bytes\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\nsubstitution characters appropriate for the character encoding.</p><pre><code>stringDecoder.end([buffer])</code></pre></section>	http://nodejs.org/api/all.html#new_end_buffer
new end	R	new.end										http://nodejs.org/api/all.html#new_end_buffer
new.write	A										<section class="prog__container"><p id='obj.desc'>Returns a decoded string, ensuring that any incomplete multibyte characters at\nthe end of the <code>Buffer</code> are omitted from the returned string and stored in an\ninternal buffer for the next call to <code>stringDecoder.write()</code> or\n<code>stringDecoder.end()</code>.</p><pre><code>stringDecoder.write(buffer)</code></pre></section>	http://nodejs.org/api/all.html#new_write_buffer
new write	R	new.write										http://nodejs.org/api/all.html#new_write_buffer
timers	A										<section class="prog__container"><p id='obj.desc'>The <code>timer</code> module exposes a global API for scheduling functions to\nbe called at some future period of time. Because the timer functions are\nglobals, there is no need to call <code>require(&apos;timers&apos;)</code> to use the API.</p><p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#timers_timers
Immediate	A										<section class="prog__container"><p id='obj.desc'>This object is created internally and is returned from <code>setImmediate()</code>. It\ncan be passed to <code>clearImmediate()</code> in order to cancel the scheduled\nactions.</p></section>	http://nodejs.org/api/all.html#immediate_class_immediate
Timeout	A										<section class="prog__container"><p id='obj.desc'>This object is created internally and is returned from <code>setTimeout()</code> and\n<code>setInterval()</code>. It can be passed to <code>clearTimeout()</code> or\n<code>clearInterval()</code> (respectively) in order to cancel the scheduled actions.</p></section>	http://nodejs.org/api/all.html#timeout_class_timeout
Timeout.ref	A										<section class="prog__container"><p id='obj.desc'>When called, requests that the Node.js event loop <em>not</em> exit so long as the\n<code>Timeout</code> is active. Calling <code>timeout.ref()</code> multiple times will have no effect.</p><pre><code>timeout.ref()</code></pre></section>	http://nodejs.org/api/all.html#timeout_ref
Timeout ref	R	Timeout.ref										http://nodejs.org/api/all.html#timeout_ref
Timeout.unref	A										<section class="prog__container"><p id='obj.desc'>When called, the active <code>Timeout</code> object will not require the Node.js event loop\nto remain active. If there is no other activity keeping the event loop running,\nthe process may exit before the <code>Timeout</code> object&apos;s callback is invoked. Calling\n<code>timeout.unref()</code> multiple times will have no effect.</p><pre><code>timeout.unref()</code></pre></section>	http://nodejs.org/api/all.html#timeout_unref
Timeout unref	R	Timeout.unref										http://nodejs.org/api/all.html#timeout_unref
tls_(ssl)	A										<section class="prog__container"><p id='obj.desc'>The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:</p><p>The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:</p><pre><code class="lang-js">const tls = require(&apos;tls&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#tls_tls
tls_(ssl).connect	D								*[[tls_(ssl).connect(tls_tls_connect_path_options_callback)]] Same as tls.connect   except that path can be provided as an argument instead of an option.\n*[[tls_(ssl).connect(tls_tls_connect_options_callback)]] The callback function, if specified, will be added as a listener for the &apos;secureConnect&apos; event.\n*[[tls_(ssl).connect(tls_tls_connect_port_host_options_callback)]] Same as tls.connect   except that port and host can be provided as arguments instead of options.			
tls_(ssl) connect	R	tls_(ssl).connect										http://nodejs.org/api/all.html#tls_tls_connect_port_host_options_callback
tls_(ssl).createSecureContext	A										<section class="prog__container"><p id='obj.desc'>The <code>tls.createSecureContext()</code> method creates a credentials object.</p></section>	http://nodejs.org/api/all.html#tls_tls_createsecurecontext_options
tls_(ssl) createSecureContext	R	tls_(ssl).createSecureContext										http://nodejs.org/api/all.html#tls_tls_createsecurecontext_options
tls_(ssl).createServer	A										<section class="prog__container"><p id='obj.desc'>Creates a new tls.Server.  The <code>secureConnectionListener</code>, if provided, is\nautomatically set as a listener for the <code>&apos;secureConnection&apos;</code> event.</p><p>The following illustrates a simple echo server:</p><pre><code class="lang-js">const tls = require(&apos;tls&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  key: fs.readFileSync(&apos;server-key.pem&apos;),\n  cert: fs.readFileSync(&apos;server-cert.pem&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&apos;client-cert.pem&apos;) ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&apos;server connected&apos;,\n              socket.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  socket.write(&apos;welcome!\n&apos;);\n  socket.setEncoding(&apos;utf8&apos;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&apos;server bound&apos;);\n});\n</code></pre><p>Or</p><pre><code class="lang-js">const tls = require(&apos;tls&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&apos;server connected&apos;,\n              socket.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  socket.write(&apos;welcome!\n&apos;);\n  socket.setEncoding(&apos;utf8&apos;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&apos;server bound&apos;);\n});\n</code></pre><p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p><pre><code class="lang-sh">openssl s_client -connect 127.0.0.1:8000\n</code></pre></section>	http://nodejs.org/api/all.html#tls_tls_createserver_options_secureconnectionlistener
tls_(ssl) createServer	R	tls_(ssl).createServer										http://nodejs.org/api/all.html#tls_tls_createserver_options_secureconnectionlistener
tls_(ssl).getCiphers	A										<section class="prog__container"><p id='obj.desc'>Returns an array with the names of the supported SSL ciphers.</p><p>For example:</p><pre><code class="lang-js">console.log(tls.getCiphers()); // [&apos;AES128-SHA&apos;, &apos;AES256-SHA&apos;, ...]\n</code></pre></section>	http://nodejs.org/api/all.html#tls_tls_getciphers
tls_(ssl) getCiphers	R	tls_(ssl).getCiphers										http://nodejs.org/api/all.html#tls_tls_getciphers
tls.Server	A										<section class="prog__container"><p id='obj.desc'>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted\nconnections using TLS or SSL.</p></section>	http://nodejs.org/api/all.html#tls_class_tls_server
tls Server	R	tls.Server										http://nodejs.org/api/all.html#tls_class_tls_server
tls.Server.addContext	A										<section class="prog__container"><p id='obj.desc'>The <code>server.addContext()</code> method adds a secure context that will be used if\nthe client request&apos;s SNI hostname matches the supplied <code>hostname</code> (or wildcard).</p><pre><code>server.addContext(hostname, context)</code></pre></section>	http://nodejs.org/api/all.html#tls_server_addcontext_hostname_context
tls.Server addContext	R	tls.Server.addContext										http://nodejs.org/api/all.html#tls_server_addcontext_hostname_context
tls Server addContext	R	tls.Server addContext										http://nodejs.org/api/all.html#tls_server_addcontext_hostname_context
tls.Server.address	A										<section class="prog__container"><p id='obj.desc'>Returns the bound address, the address family name, and port of the\nserver as reported by the operating system.  See <code>net.Server.address()</code> for\nmore information.</p><pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#tls_server_address
tls.Server address	R	tls.Server.address										http://nodejs.org/api/all.html#tls_server_address
tls Server address	R	tls.Server address										http://nodejs.org/api/all.html#tls_server_address
tls.Server.close	A										<section class="prog__container"><p id='obj.desc'>The <code>server.close()</code> method stops the server from accepting new connections.</p><pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#tls_server_close_callback
tls.Server close	R	tls.Server.close										http://nodejs.org/api/all.html#tls_server_close_callback
tls Server close	R	tls.Server close										http://nodejs.org/api/all.html#tls_server_close_callback
tls.Server.getTicketKeys	A										<section class="prog__container"><p id='obj.desc'>Returns a <code>Buffer</code> instance holding the keys currently used for\nencryption/decryption of the TLS Session Tickets</p><pre><code>server.getTicketKeys()</code></pre></section>	http://nodejs.org/api/all.html#tls_server_getticketkeys
tls.Server getTicketKeys	R	tls.Server.getTicketKeys										http://nodejs.org/api/all.html#tls_server_getticketkeys
tls Server getTicketKeys	R	tls.Server getTicketKeys										http://nodejs.org/api/all.html#tls_server_getticketkeys
tls.Server.listen	A										<section class="prog__container"><p id='obj.desc'>The <code>server.listen()</code> methods instructs the server to begin accepting\nconnections on the specified <code>port</code> and <code>hostname</code>.</p><pre><code>server.listen(port[, hostname][, callback])</code></pre></section>	http://nodejs.org/api/all.html#tls_server_listen_port_hostname_callback
tls.Server listen	R	tls.Server.listen										http://nodejs.org/api/all.html#tls_server_listen_port_hostname_callback
tls Server listen	R	tls.Server listen										http://nodejs.org/api/all.html#tls_server_listen_port_hostname_callback
tls.Server.setTicketKeys	A										<section class="prog__container"><p id='obj.desc'>Updates the keys for encryption/decryption of the TLS Session Tickets.</p><pre><code>server.setTicketKeys(keys)</code></pre></section>	http://nodejs.org/api/all.html#tls_server_setticketkeys_keys
tls.Server setTicketKeys	R	tls.Server.setTicketKeys										http://nodejs.org/api/all.html#tls_server_setticketkeys_keys
tls Server setTicketKeys	R	tls.Server setTicketKeys										http://nodejs.org/api/all.html#tls_server_setticketkeys_keys
tls.Server.connections	A										<section class="prog__container"><p id='obj.desc'>Returns the current number of concurrent connections on the server.</p></section>	http://nodejs.org/api/all.html#tls_server_connections
tls.Server connections	R	tls.Server.connections										http://nodejs.org/api/all.html#tls_server_connections
tls Server connections	R	tls.Server connections										http://nodejs.org/api/all.html#tls_server_connections
tls.Server.tlsClientError	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;tlsClientError&apos;</code> event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:</p></section>	http://nodejs.org/api/all.html#tls_event_tlsclienterror
tls.Server tlsClientError	R	tls.Server.tlsClientError										http://nodejs.org/api/all.html#tls_event_tlsclienterror
tls Server tlsClientError	R	tls.Server tlsClientError										http://nodejs.org/api/all.html#tls_event_tlsclienterror
tls.Server.newSession	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;newSession&apos;</code> event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The listener callback is passed\nthree arguments when called:</p></section>	http://nodejs.org/api/all.html#tls_event_newsession
tls.Server newSession	R	tls.Server.newSession										http://nodejs.org/api/all.html#tls_event_newsession
tls Server newSession	R	tls.Server newSession										http://nodejs.org/api/all.html#tls_event_newsession
tls.Server.OCSPRequest	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;OCSPRequest&apos;</code> event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:</p></section>	http://nodejs.org/api/all.html#tls_event_ocsprequest
tls.Server OCSPRequest	R	tls.Server.OCSPRequest										http://nodejs.org/api/all.html#tls_event_ocsprequest
tls Server OCSPRequest	R	tls.Server OCSPRequest										http://nodejs.org/api/all.html#tls_event_ocsprequest
tls.Server.resumeSession	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;resumeSession&apos;</code> event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:</p><p>The following illustrates resuming a TLS session:</p><pre><code class="lang-js">const tlsSessionStore = {};\nserver.on(&apos;newSession&apos;, (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString(&apos;hex&apos;)] = data;\n  cb();\n});\nserver.on(&apos;resumeSession&apos;, (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString(&apos;hex&apos;)] || null);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#tls_event_resumesession
tls.Server resumeSession	R	tls.Server.resumeSession										http://nodejs.org/api/all.html#tls_event_resumesession
tls Server resumeSession	R	tls.Server resumeSession										http://nodejs.org/api/all.html#tls_event_resumesession
tls.Server.secureConnection	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;secureConnection&apos;</code> event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:</p></section>	http://nodejs.org/api/all.html#tls_event_secureconnection
tls.Server secureConnection	R	tls.Server.secureConnection										http://nodejs.org/api/all.html#tls_event_secureconnection
tls Server secureConnection	R	tls.Server secureConnection										http://nodejs.org/api/all.html#tls_event_secureconnection
tls.TLSSocket	A										<section class="prog__container"><p id='obj.desc'>The <code>tls.TLSSocket</code> is a subclass of <code>net.Socket</code> that performs transparent\nencryption of written data and all required TLS negotiation.</p></section>	http://nodejs.org/api/all.html#tls_class_tls_tlssocket
tls TLSSocket	R	tls.TLSSocket										http://nodejs.org/api/all.html#tls_class_tls_tlssocket
tls.TLSSocket.TLSSocket	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;OCSPResponse&apos;</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:</p><pre><code>new tls.TLSSocket(socket[, options])</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_tlssocket_socket_options
tls.TLSSocket TLSSocket	R	tls.TLSSocket.TLSSocket										http://nodejs.org/api/all.html#tls_tlssocket_tlssocket_socket_options
tls TLSSocket TLSSocket	R	tls.TLSSocket TLSSocket										http://nodejs.org/api/all.html#tls_tlssocket_tlssocket_socket_options
tls.TLSSocket.address	A										<section class="prog__container"><p id='obj.desc'>Returns the bound address, the address family name, and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.,\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code></p><pre><code>tlsSocket.address()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_address
tls.TLSSocket address	R	tls.TLSSocket.address										http://nodejs.org/api/all.html#tls_tlssocket_address
tls TLSSocket address	R	tls.TLSSocket address										http://nodejs.org/api/all.html#tls_tlssocket_address
tls.TLSSocket.getCipher	A										<section class="prog__container"><p id='obj.desc'>Returns an object representing the cipher name and the SSL/TLS protocol version\nthat first defined the cipher.</p><pre><code>tlsSocket.getCipher()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_getcipher
tls.TLSSocket getCipher	R	tls.TLSSocket.getCipher										http://nodejs.org/api/all.html#tls_tlssocket_getcipher
tls TLSSocket getCipher	R	tls.TLSSocket getCipher										http://nodejs.org/api/all.html#tls_tlssocket_getcipher
tls.TLSSocket.getEphemeralKeyInfo	A										<section class="prog__container"><p id='obj.desc'>Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in Perfect Forward Secrecy on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\nif called on a server socket. The supported types are <code>&apos;DH&apos;</code> and <code>&apos;ECDH&apos;</code>. The\n<code>name</code> property is available only when type is &apos;ECDH&apos;.</p><pre><code>tlsSocket.getEphemeralKeyInfo()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_getephemeralkeyinfo
tls.TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket.getEphemeralKeyInfo										http://nodejs.org/api/all.html#tls_tlssocket_getephemeralkeyinfo
tls TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket getEphemeralKeyInfo										http://nodejs.org/api/all.html#tls_tlssocket_getephemeralkeyinfo
tls.TLSSocket.getPeerCertificate	A										<section class="prog__container"><p id='obj.desc'>Returns an object representing the peer&apos;s certificate. The returned object has\nsome properties corresponding to the fields of the certificate.</p><p>For example:</p><pre><code class="lang-text">{ subject:\n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  issuerInfo:\n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  issuer:\n   { ... another certificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  valid_from: &apos;Nov 11 09:52:22 2009 GMT&apos;,\n  valid_to: &apos;Nov  6 09:52:22 2029 GMT&apos;,\n  fingerprint: &apos;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&apos;,\n  serialNumber: &apos;B9B0D332A1AA5635&apos; }\n</code></pre><pre><code>tlsSocket.getPeerCertificate([ detailed ])</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_getpeercertificate_detailed
tls.TLSSocket getPeerCertificate	R	tls.TLSSocket.getPeerCertificate										http://nodejs.org/api/all.html#tls_tlssocket_getpeercertificate_detailed
tls TLSSocket getPeerCertificate	R	tls.TLSSocket getPeerCertificate										http://nodejs.org/api/all.html#tls_tlssocket_getpeercertificate_detailed
tls.TLSSocket.getProtocol	A										<section class="prog__container"><p id='obj.desc'>Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value <code>&apos;unknown&apos;</code> will be returned for connected\nsockets that have not completed the handshaking process. The value <code>null</code> will\nbe returned for server sockets or disconnected client sockets.</p><pre><code>tlsSocket.getProtocol()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_getprotocol
tls.TLSSocket getProtocol	R	tls.TLSSocket.getProtocol										http://nodejs.org/api/all.html#tls_tlssocket_getprotocol
tls TLSSocket getProtocol	R	tls.TLSSocket getProtocol										http://nodejs.org/api/all.html#tls_tlssocket_getprotocol
tls.TLSSocket.getSession	A										<section class="prog__container"><p id='obj.desc'>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was\nnegotiated. Can be used to speed up handshake establishment when reconnecting\nto the server.</p><pre><code>tlsSocket.getSession()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_getsession
tls.TLSSocket getSession	R	tls.TLSSocket.getSession										http://nodejs.org/api/all.html#tls_tlssocket_getsession
tls TLSSocket getSession	R	tls.TLSSocket getSession										http://nodejs.org/api/all.html#tls_tlssocket_getsession
tls.TLSSocket.getTLSTicket	A										<section class="prog__container"><p id='obj.desc'>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p><pre><code>tlsSocket.getTLSTicket()</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_gettlsticket
tls.TLSSocket getTLSTicket	R	tls.TLSSocket.getTLSTicket										http://nodejs.org/api/all.html#tls_tlssocket_gettlsticket
tls TLSSocket getTLSTicket	R	tls.TLSSocket getTLSTicket										http://nodejs.org/api/all.html#tls_tlssocket_gettlsticket
tls.TLSSocket.renegotiate	A										<section class="prog__container"><p id='obj.desc'>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\nUpon completion, the <code>callback</code> function will be passed a single argument\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.</p><pre><code>tlsSocket.renegotiate(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_renegotiate_options_callback
tls.TLSSocket renegotiate	R	tls.TLSSocket.renegotiate										http://nodejs.org/api/all.html#tls_tlssocket_renegotiate_options_callback
tls TLSSocket renegotiate	R	tls.TLSSocket renegotiate										http://nodejs.org/api/all.html#tls_tlssocket_renegotiate_options_callback
tls.TLSSocket.setMaxSendFragment	A										<section class="prog__container"><p id='obj.desc'>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p><pre><code>tlsSocket.setMaxSendFragment(size)</code></pre></section>	http://nodejs.org/api/all.html#tls_tlssocket_setmaxsendfragment_size
tls.TLSSocket setMaxSendFragment	R	tls.TLSSocket.setMaxSendFragment										http://nodejs.org/api/all.html#tls_tlssocket_setmaxsendfragment_size
tls TLSSocket setMaxSendFragment	R	tls.TLSSocket setMaxSendFragment										http://nodejs.org/api/all.html#tls_tlssocket_setmaxsendfragment_size
tls.TLSSocket.authorized	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_authorized
tls.TLSSocket authorized	R	tls.TLSSocket.authorized										http://nodejs.org/api/all.html#tls_tlssocket_authorized
tls TLSSocket authorized	R	tls.TLSSocket authorized										http://nodejs.org/api/all.html#tls_tlssocket_authorized
tls.TLSSocket.authorizationError	A										<section class="prog__container"><p id='obj.desc'>Returns the reason why the peer&apos;s certificate was not been verified. This\nproperty is set only when <code>tlsSocket.authorized === false</code>.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_authorizationerror
tls.TLSSocket authorizationError	R	tls.TLSSocket.authorizationError										http://nodejs.org/api/all.html#tls_tlssocket_authorizationerror
tls TLSSocket authorizationError	R	tls.TLSSocket authorizationError										http://nodejs.org/api/all.html#tls_tlssocket_authorizationerror
tls.TLSSocket.encrypted	A										<section class="prog__container"><p id='obj.desc'>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\n<code>net.Socket</code> instances.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_encrypted
tls.TLSSocket encrypted	R	tls.TLSSocket.encrypted										http://nodejs.org/api/all.html#tls_tlssocket_encrypted
tls TLSSocket encrypted	R	tls.TLSSocket encrypted										http://nodejs.org/api/all.html#tls_tlssocket_encrypted
tls.TLSSocket.localAddress	A										<section class="prog__container"><p id='obj.desc'>Returns the string representation of the local IP address.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_localaddress
tls.TLSSocket localAddress	R	tls.TLSSocket.localAddress										http://nodejs.org/api/all.html#tls_tlssocket_localaddress
tls TLSSocket localAddress	R	tls.TLSSocket localAddress										http://nodejs.org/api/all.html#tls_tlssocket_localaddress
tls.TLSSocket.localPort	A										<section class="prog__container"><p id='obj.desc'>Returns the numeric representation of the local port.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_localport
tls.TLSSocket localPort	R	tls.TLSSocket.localPort										http://nodejs.org/api/all.html#tls_tlssocket_localport
tls TLSSocket localPort	R	tls.TLSSocket localPort										http://nodejs.org/api/all.html#tls_tlssocket_localport
tls.TLSSocket.remoteAddress	A										<section class="prog__container"><p id='obj.desc'>Returns the string representation of the remote IP address. For example,\n<code>&apos;74.125.127.100&apos;</code> or <code>&apos;2001:4860:a005::68&apos;</code>.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_remoteaddress
tls.TLSSocket remoteAddress	R	tls.TLSSocket.remoteAddress										http://nodejs.org/api/all.html#tls_tlssocket_remoteaddress
tls TLSSocket remoteAddress	R	tls.TLSSocket remoteAddress										http://nodejs.org/api/all.html#tls_tlssocket_remoteaddress
tls.TLSSocket.remoteFamily	A										<section class="prog__container"><p id='obj.desc'>Returns the string representation of the remote IP family. <code>&apos;IPv4&apos;</code> or <code>&apos;IPv6&apos;</code>.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_remotefamily
tls.TLSSocket remoteFamily	R	tls.TLSSocket.remoteFamily										http://nodejs.org/api/all.html#tls_tlssocket_remotefamily
tls TLSSocket remoteFamily	R	tls.TLSSocket remoteFamily										http://nodejs.org/api/all.html#tls_tlssocket_remotefamily
tls.TLSSocket.remotePort	A										<section class="prog__container"><p id='obj.desc'>Returns the numeric representation of the remote port. For example, <code>443</code>.</p></section>	http://nodejs.org/api/all.html#tls_tlssocket_remoteport
tls.TLSSocket remotePort	R	tls.TLSSocket.remotePort										http://nodejs.org/api/all.html#tls_tlssocket_remoteport
tls TLSSocket remotePort	R	tls.TLSSocket remotePort										http://nodejs.org/api/all.html#tls_tlssocket_remoteport
tls.TLSSocket.OCSPResponse	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;OCSPResponse&apos;</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:</p></section>	http://nodejs.org/api/all.html#tls_event_ocspresponse
tls.TLSSocket OCSPResponse	R	tls.TLSSocket.OCSPResponse										http://nodejs.org/api/all.html#tls_event_ocspresponse
tls TLSSocket OCSPResponse	R	tls.TLSSocket OCSPResponse										http://nodejs.org/api/all.html#tls_event_ocspresponse
tls.TLSSocket.secureConnect	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;secureConnect&apos;</code> event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server&apos;s certificate has been authorized. It\nis the client&apos;s responsibility to check the <code>tlsSocket.authorized</code> property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\n<code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used,\nthe <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be\nchecked to determine the negotiated protocol.</p></section>	http://nodejs.org/api/all.html#tls_event_secureconnect
tls.TLSSocket secureConnect	R	tls.TLSSocket.secureConnect										http://nodejs.org/api/all.html#tls_event_secureconnect
tls TLSSocket secureConnect	R	tls.TLSSocket secureConnect										http://nodejs.org/api/all.html#tls_event_secureconnect
tty	A										<section class="prog__container"><p id='obj.desc'>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:</p><p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:</p><pre><code class="lang-js">const tty = require(&apos;tty&apos;);\n</code></pre><p>When Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\ncontext, the <code>process.stdin</code> will, by default, be initialized as an instance of\n<code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by\ndefault be instances of <code>tty.WriteStream</code>. The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe <code>process.stdout.isTTY</code> property is <code>true</code>:</p><pre><code class="lang-sh">$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#tty_tty
tty.isatty	A										<section class="prog__container"><p id='obj.desc'>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with\na TTY and <code>false</code> if is not.</p></section>	http://nodejs.org/api/all.html#tty_tty_isatty_fd
tty isatty	R	tty.isatty										http://nodejs.org/api/all.html#tty_tty_isatty_fd
tty.ReadStream	A										<section class="prog__container"><p id='obj.desc'>The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the\nreadable side of a TTY. In normal circumstances <code>process.stdin</code> will be the\nonly <code>tty.ReadStream</code> instance in a Node.js process and there should be no\nreason to create additional instances.</p></section>	http://nodejs.org/api/all.html#tty_class_tty_readstream
tty ReadStream	R	tty.ReadStream										http://nodejs.org/api/all.html#tty_class_tty_readstream
tty.ReadStream.setRawMode	A										<section class="prog__container"><p id='obj.desc'>Allows configuration of <code>tty.ReadStream</code> so that it operates as a raw device.</p><pre><code>readStream.setRawMode(mode)</code></pre></section>	http://nodejs.org/api/all.html#tty_readstream_setrawmode_mode
tty.ReadStream setRawMode	R	tty.ReadStream.setRawMode										http://nodejs.org/api/all.html#tty_readstream_setrawmode_mode
tty ReadStream setRawMode	R	tty.ReadStream setRawMode										http://nodejs.org/api/all.html#tty_readstream_setrawmode_mode
tty.ReadStream.isRaw	A										<section class="prog__container"><p id='obj.desc'>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a\nraw device. Defaults to <code>false</code>.</p></section>	http://nodejs.org/api/all.html#tty_readstream_israw
tty.ReadStream isRaw	R	tty.ReadStream.isRaw										http://nodejs.org/api/all.html#tty_readstream_israw
tty ReadStream isRaw	R	tty.ReadStream isRaw										http://nodejs.org/api/all.html#tty_readstream_israw
tty.WriteStream	A										<section class="prog__container"><p id='obj.desc'>The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the\nwritable side of a TTY. In normal circumstances, <code>process.stdout</code> and\n<code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a\nNode.js process and there should be no reason to create additional instances.</p></section>	http://nodejs.org/api/all.html#tty_class_tty_writestream
tty WriteStream	R	tty.WriteStream										http://nodejs.org/api/all.html#tty_class_tty_writestream
tty.WriteStream.columns	A										<section class="prog__container"><p id='obj.desc'>A <code>number</code> specifying the number of columns the TTY currently has. This property\nis updated whenever the <code>&apos;resize&apos;</code> event is emitted.</p></section>	http://nodejs.org/api/all.html#tty_writestream_columns
tty.WriteStream columns	R	tty.WriteStream.columns										http://nodejs.org/api/all.html#tty_writestream_columns
tty WriteStream columns	R	tty.WriteStream columns										http://nodejs.org/api/all.html#tty_writestream_columns
tty.WriteStream.rows	A										<section class="prog__container"><p id='obj.desc'>A <code>number</code> specifying the number of rows the TTY currently has. This property\nis updated whenever the <code>&apos;resize&apos;</code> event is emitted.</p></section>	http://nodejs.org/api/all.html#tty_writestream_rows
tty.WriteStream rows	R	tty.WriteStream.rows										http://nodejs.org/api/all.html#tty_writestream_rows
tty WriteStream rows	R	tty.WriteStream rows										http://nodejs.org/api/all.html#tty_writestream_rows
tty.WriteStream.resize	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;resize&apos;</code> event is emitted whenever either of the <code>writeStream.columns</code>\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\nlistener callback when called.</p><p>The <code>&apos;resize&apos;</code> event is emitted whenever either of the <code>writeStream.columns</code>\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\nlistener callback when called.</p><pre><code class="lang-js">process.stdout.on(&apos;resize&apos;, () =&gt; {\n  console.log(&apos;screen size has changed!&apos;);\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#tty_event_resize
tty.WriteStream resize	R	tty.WriteStream.resize										http://nodejs.org/api/all.html#tty_event_resize
tty WriteStream resize	R	tty.WriteStream resize										http://nodejs.org/api/all.html#tty_event_resize
url	A										<section class="prog__container"><p id='obj.desc'>The <code>url</code> module provides utilities for URL resolution and parsing. It can be\naccessed using:</p><p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be\naccessed using:</p><pre><code class="lang-js">const url = require(&apos;url&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#url_url
url.format	A										<section class="prog__container"><p id='obj.desc'>The <code>url.format()</code> method returns a formatted URL string derived from\n<code>urlObject</code>.</p></section>	http://nodejs.org/api/all.html#url_url_format_urlobject
url format	R	url.format										http://nodejs.org/api/all.html#url_url_format_urlobject
url.parse	A										<section class="prog__container"><p id='obj.desc'>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL\nobject.</p></section>	http://nodejs.org/api/all.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost
url parse	R	url.parse										http://nodejs.org/api/all.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost
url.resolve	A										<section class="prog__container"><p id='obj.desc'>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a\nmanner similar to that of a Web browser resolving an anchor tag HREF.</p><p>For example:</p><pre><code class="lang-js">url.resolve(&apos;/one/two/three&apos;, &apos;four&apos;)         // &apos;/one/two/four&apos;\nurl.resolve(&apos;http://example.com/&apos;, &apos;/one&apos;)    // &apos;http://example.com/one&apos;\nurl.resolve(&apos;http://example.com/one&apos;, &apos;/two&apos;) // &apos;http://example.com/two&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#url_url_resolve_from_to
url resolve	R	url.resolve										http://nodejs.org/api/all.html#url_url_resolve_from_to
util	A										<section class="prog__container"><p id='obj.desc'>The <code>util</code> module is primarily designed to support the needs of Node.js&apos; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:</p><p>The <code>util</code> module is primarily designed to support the needs of Node.js&apos; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#util_util
util.debuglog	A										<section class="prog__container"><p id='obj.desc'>The <code>util.debuglog()</code> method is used to create a function that conditionally\nwrites debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>\nenvironment variable.  If the <code>section</code> name appears within the value of that\nenvironment variable, then the returned function operates similar to\n<code>console.error()</code>.  If not, then the returned function is a no-op.</p><p>For example:</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst debuglog = util.debuglog(&apos;foo&apos;);\n\ndebuglog(&apos;hello from foo [%d]&apos;, 123);\n</code></pre><p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then\nit will output something like:</p><pre><code class="lang-txt">FOO 3245: hello from foo [123]\n</code></pre></section>	http://nodejs.org/api/all.html#util_util_debuglog_section
util debuglog	R	util.debuglog										http://nodejs.org/api/all.html#util_util_debuglog_section
util.deprecate	A										<section class="prog__container"><p id='obj.desc'>The <code>util.deprecate()</code> method wraps the given <code>function</code> or class in such a way that\nit is marked as deprecated.</p><p>The <code>util.deprecate()</code> method wraps the given <code>function</code> or class in such a way that\nit is marked as deprecated.</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\n\nexports.puts = util.deprecate(function() {\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\n    process.stdout.write(arguments[i] + &apos;\n&apos;);\n  }\n}, &apos;util.puts: Use console.log instead&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#util_util_deprecate_function_string
util deprecate	R	util.deprecate										http://nodejs.org/api/all.html#util_util_deprecate_function_string
util.format	A										<section class="prog__container"><p id='obj.desc'>The <code>util.format()</code> method returns a formatted string using the first argument\nas a <code>printf</code>-like format.</p><p>If the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.</p><pre><code class="lang-js">util.format(&apos;%s:%s&apos;, &apos;foo&apos;);\n// Returns: &apos;foo:%s&apos;\n</code></pre><p>If there are more arguments passed to the <code>util.format()</code> method than the\nnumber of placeholders, the extra arguments are coerced into strings (for\nobjects and symbols, <code>util.inspect()</code> is used) then concatenated to the\nreturned string, each delimited by a space.</p><pre><code class="lang-js">util.format(&apos;%s:%s&apos;, &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;); // &apos;foo:bar baz&apos;\n</code></pre><p>If the first argument is not a format string then <code>util.format()</code> returns\na string that is the concatenation of all arguments separated by spaces.\nEach argument is converted to a string using <code>util.inspect()</code>.</p><pre><code class="lang-js">util.format(1, 2, 3); // &apos;1 2 3&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#util_util_format_format_args
util format	R	util.format										http://nodejs.org/api/all.html#util_util_format_format_args
util.inherits	A										<section class="prog__container"><p id='obj.desc'><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and\n<code>extends</code> keywords to get language level inheritance support. Also note that\nthe two styles are semantically incompatible.</em></p><p>As an additional convenience, <code>superConstructor</code> will be accessible\nthrough the <code>constructor.super_</code> property.</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst EventEmitter = require(&apos;events&apos;);\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit(&apos;data&apos;, data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on(&apos;data&apos;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&apos;It works!&apos;); // Received data: &quot;It works!&quot;\n</code></pre><p>ES6 example using <code>class</code> and <code>extends</code></p><pre><code class="lang-js">const EventEmitter = require(&apos;events&apos;);\n\nclass MyStream extends EventEmitter {\n  constructor() {\n    super();\n  }\n  write(data) {\n    this.emit(&apos;data&apos;, data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on(&apos;data&apos;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&apos;With ES6&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#util_util_inherits_constructor_superconstructor
util inherits	R	util.inherits										http://nodejs.org/api/all.html#util_util_inherits_constructor_superconstructor
util.inspect	A										<section class="prog__container"><p id='obj.desc'>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is\nprimarily useful for debugging. Additional <code>options</code> may be passed that alter\ncertain aspects of the formatted string.</p><p>The following example inspects all properties of the <code>util</code> object:</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n</code></pre></section>	http://nodejs.org/api/all.html#util_util_inspect_object_options
util inspect	R	util.inspect										http://nodejs.org/api/all.html#util_util_inspect_object_options
v8	A										<section class="prog__container"><p id='obj.desc'>The <code>v8</code> module exposes APIs that are specific to the version of V8\nbuilt into the Node.js binary. It can be accessed using:</p><p>The <code>v8</code> module exposes APIs that are specific to the version of V8\nbuilt into the Node.js binary. It can be accessed using:</p><pre><code class="lang-js">const v8 = require(&apos;v8&apos;);\n</code></pre></section>	http://nodejs.org/api/all.html#v8_v8
v8.getHeapStatistics	A										<section class="prog__container"><p id='obj.desc'>Returns an object with the following properties:</p><p>For example:</p><pre><code class="lang-js">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0\n}\n</code></pre></section>	http://nodejs.org/api/all.html#v8_v8_getheapstatistics
v8 getHeapStatistics	R	v8.getHeapStatistics										http://nodejs.org/api/all.html#v8_v8_getheapstatistics
v8.getHeapSpaceStatistics	A										<section class="prog__container"><p id='obj.desc'>Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n<code>GetHeapSpaceStatistics</code> function and may change from one V8 version to the\nnext.</p><p>For example:</p><pre><code class="lang-json">[\n  {\n    &quot;space_name&quot;: &quot;new_space&quot;,\n    &quot;space_size&quot;: 2063872,\n    &quot;space_used_size&quot;: 951112,\n    &quot;space_available_size&quot;: 80824,\n    &quot;physical_space_size&quot;: 2063872\n  },\n  {\n    &quot;space_name&quot;: &quot;old_space&quot;,\n    &quot;space_size&quot;: 3090560,\n    &quot;space_used_size&quot;: 2493792,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 3090560\n  },\n  {\n    &quot;space_name&quot;: &quot;code_space&quot;,\n    &quot;space_size&quot;: 1260160,\n    &quot;space_used_size&quot;: 644256,\n    &quot;space_available_size&quot;: 960,\n    &quot;physical_space_size&quot;: 1260160\n  },\n  {\n    &quot;space_name&quot;: &quot;map_space&quot;,\n    &quot;space_size&quot;: 1094160,\n    &quot;space_used_size&quot;: 201608,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 1094160\n  },\n  {\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\n    &quot;space_size&quot;: 0,\n    &quot;space_used_size&quot;: 0,\n    &quot;space_available_size&quot;: 1490980608,\n    &quot;physical_space_size&quot;: 0\n  }\n]\n</code></pre></section>	http://nodejs.org/api/all.html#v8_v8_getheapspacestatistics
v8 getHeapSpaceStatistics	R	v8.getHeapSpaceStatistics										http://nodejs.org/api/all.html#v8_v8_getheapspacestatistics
v8.setFlagsFromString	A										<section class="prog__container"><p id='obj.desc'>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set\nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.</p><p>Usage:</p><pre><code class="lang-js">// Print GC events to stdout for one minute.\nconst v8 = require(&apos;v8&apos;);\nv8.setFlagsFromString(&apos;--trace_gc&apos;);\nsetTimeout(function() { v8.setFlagsFromString(&apos;--notrace_gc&apos;); }, 60e3);\n</code></pre></section>	http://nodejs.org/api/all.html#v8_v8_setflagsfromstring_string
v8 setFlagsFromString	R	v8.setFlagsFromString										http://nodejs.org/api/all.html#v8_v8_setflagsfromstring_string
vm	A										<section class="prog__container"><p id='obj.desc'>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:</p><p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:</p><pre><code class="lang-js">const vm = require(&apos;vm&apos;);\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#vm_vm
vm.createContext	A										<section class="prog__container"><p id='obj.desc'>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will prepare\nthat sandbox so that it can be used in calls to\n<code>vm.runInContext()</code> or <code>script.runInContext()</code>. Inside such scripts,\nthe <code>sandbox</code> object will be the global object, retaining all of its existing\nproperties but also having the built-in objects and functions any standard\nglobal object has. Outside of scripts run by the vm module, <code>sandbox</code> will\nremain unchanged.</p></section>	http://nodejs.org/api/all.html#vm_vm_createcontext_sandbox
vm createContext	R	vm.createContext										http://nodejs.org/api/all.html#vm_vm_createcontext_sandbox
vm.isContext	A										<section class="prog__container"><p id='obj.desc'>Returns <code>true</code> if the given <code>sandbox</code> object has been contextified using\n<code>vm.createContext()</code>.</p></section>	http://nodejs.org/api/all.html#vm_vm_iscontext_sandbox
vm isContext	R	vm.isContext										http://nodejs.org/api/all.html#vm_vm_iscontext_sandbox
vm.runInContext	A										<section class="prog__container"><p id='obj.desc'>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of\nthe <code>contextifiedSandbox</code>, then returns the result. Running code does not have\naccess to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been\npreviously contextified using the <code>vm.createContext()</code> method.</p><p>The following example compiles and executes different scripts using a single\ncontextified object:</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst vm = require(&apos;vm&apos;);\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (var i = 0; i &lt; 10; ++i) {\n  vm.runInContext(&apos;globalVar *= 2;&apos;, sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n</code></pre></section>	http://nodejs.org/api/all.html#vm_vm_runincontext_code_contextifiedsandbox_options
vm runInContext	R	vm.runInContext										http://nodejs.org/api/all.html#vm_vm_runincontext_code_contextifiedsandbox_options
vm.runInDebugContext	A										<section class="prog__container"><p id='obj.desc'>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8\ndebug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p><p>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8\ndebug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p><pre><code class="lang-js">const vm = require(&apos;vm&apos;);\nconst Debug = vm.runInDebugContext(&apos;Debug&apos;);\nconsole.log(Debug.findScript(process.emit).name);  // &apos;events.js&apos;\nconsole.log(Debug.findScript(process.exit).name);  // &apos;internal/process.js&apos;\n</code></pre></section>	http://nodejs.org/api/all.html#vm_vm_runindebugcontext_code
vm runInDebugContext	R	vm.runInDebugContext										http://nodejs.org/api/all.html#vm_vm_runindebugcontext_code
vm.runInNewContext	A										<section class="prog__container"><p id='obj.desc'>The <code>vm.runInNewContext()</code> first contextifies the given <code>sandbox</code> object (or\ncreates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it\nwithin the context of the created context, then returns the result. Running code\ndoes not have access to the local scope.</p><p>The following example compiles and executes code that increments a global\nvariable and sets a new one. These globals are contained in the <code>sandbox</code>.</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst vm = require(&apos;vm&apos;);\n\nconst sandbox = {\n  animal: &apos;cat&apos;,\n  count: 2\n};\n\nvm.runInNewContext(&apos;count += 1; name = &quot;kitty&quot;&apos;, sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 3, name: &apos;kitty&apos; }\n</code></pre></section>	http://nodejs.org/api/all.html#vm_vm_runinnewcontext_code_sandbox_options
vm runInNewContext	R	vm.runInNewContext										http://nodejs.org/api/all.html#vm_vm_runinnewcontext_code_sandbox_options
vm.runInThisContext	A										<section class="prog__container"><p id='obj.desc'><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the\ncurrent <code>global</code> and returns the result. Running code does not have access to\nlocal scope, but does have access to the current <code>global</code> object.</p><p>The following example illustrates using both <code>vm.runInThisContext()</code> and\nthe JavaScript <code>eval()</code> function to run the same code:</p><pre><code class="lang-js">const vm = require(&apos;vm&apos;);\nvar localVar = &apos;initial value&apos;;\n\nconst vmResult = vm.runInThisContext(&apos;localVar = &quot;vm&quot;;&apos;);\nconsole.log(&apos;vmResult:&apos;, vmResult);\nconsole.log(&apos;localVar:&apos;, localVar);\n\nconst evalResult = eval(&apos;localVar = &quot;eval&quot;;&apos;);\nconsole.log(&apos;evalResult:&apos;, evalResult);\nconsole.log(&apos;localVar:&apos;, localVar);\n\n// vmResult: &apos;vm&apos;, localVar: &apos;initial value&apos;\n// evalResult: &apos;eval&apos;, localVar: &apos;eval&apos;\n</code></pre><p>In order to run a simple web server using the <code>http</code> module the code passed to\nthe context must either call <code>require(&apos;http&apos;)</code> on its own, or have a reference\nto the <code>http</code> module passed to it. For instance:</p><pre><code class="lang-js">&apos;use strict&apos;;\nconst vm = require(&apos;vm&apos;);\n\nlet code =\n`(function(require) {\n\n   const http = require(&apos;http&apos;);\n\n   http.createServer( (request, response) =&gt; {\n     response.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n     response.end(&apos;Hello World\\n&apos;);\n   }).listen(8124);\n\n   console.log(&apos;Server running at http://127.0.0.1:8124/&apos;);\n })`;\n\n vm.runInThisContext(code)(require);\n</code></pre></section>	http://nodejs.org/api/all.html#vm_vm_runinthiscontext_code_options
vm runInThisContext	R	vm.runInThisContext										http://nodejs.org/api/all.html#vm_vm_runinthiscontext_code_options
vm.Script	A										<section class="prog__container"><p id='obj.desc'>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be\nexecuted in specific sandboxes (or &quot;contexts&quot;).</p></section>	http://nodejs.org/api/all.html#vm_class_vm_script
vm Script	R	vm.Script										http://nodejs.org/api/all.html#vm_class_vm_script
vm.Script.Script	A										<section class="prog__container"><p id='obj.desc'>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\ncompiled <code>vm.Script</code> can be run later multiple times. It is important to note\nthat the <code>code</code> is not bound to any global object; rather, it is bound before\neach run, just for that run.</p><pre><code>new vm.Script(code, options)</code></pre></section>	http://nodejs.org/api/all.html#vm_script_script_code_options
vm.Script Script	R	vm.Script.Script										http://nodejs.org/api/all.html#vm_script_script_code_options
vm Script Script	R	vm.Script Script										http://nodejs.org/api/all.html#vm_script_script_code_options
vm.Script.runInContext	A										<section class="prog__container"><p id='obj.desc'>Runs the compiled code contained by the <code>vm.Script</code> object within the given\n<code>contextifiedSandbox</code> and returns the result. Running code does not have access\nto local scope.</p><p>The following example compiles code that increments a global variable, sets\nthe value of another global variable, then execute the code multiple times.\nThe globals are contained in the <code>sandbox</code> object.</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst vm = require(&apos;vm&apos;);\n\nconst sandbox = {\n  animal: &apos;cat&apos;,\n  count: 2\n};\n\nconst script = new vm.Script(&apos;count += 1; name = &quot;kitty&quot;;&apos;);\n\nconst context = new vm.createContext(sandbox);\nfor (var i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 12, name: &apos;kitty&apos; }\n</code></pre><pre><code>script.runInContext(contextifiedSandbox[, options])</code></pre></section>	http://nodejs.org/api/all.html#vm_script_runincontext_contextifiedsandbox_options
vm.Script runInContext	R	vm.Script.runInContext										http://nodejs.org/api/all.html#vm_script_runincontext_contextifiedsandbox_options
vm Script runInContext	R	vm.Script runInContext										http://nodejs.org/api/all.html#vm_script_runincontext_contextifiedsandbox_options
vm.Script.runInNewContext	A										<section class="prog__container"><p id='obj.desc'>First contextifies the given <code>sandbox</code>, runs the compiled code contained by\nthe <code>vm.Script</code> object within the created sandbox, and returns the result.\nRunning code does not have access to local scope.</p><p>The following example compiles code that sets a global variable, then executes\nthe code multiple times in different contexts. The globals are set on and\ncontained within each individual <code>sandbox</code>.</p><pre><code class="lang-js">const util = require(&apos;util&apos;);\nconst vm = require(&apos;vm&apos;);\n\nconst script = new vm.Script(&apos;globalVar = &quot;set&quot;&apos;);\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: &apos;set&apos; }, { globalVar: &apos;set&apos; }, { globalVar: &apos;set&apos; }]\n</code></pre><pre><code>script.runInNewContext([sandbox][, options])</code></pre></section>	http://nodejs.org/api/all.html#vm_script_runinnewcontext_sandbox_options
vm.Script runInNewContext	R	vm.Script.runInNewContext										http://nodejs.org/api/all.html#vm_script_runinnewcontext_sandbox_options
vm Script runInNewContext	R	vm.Script runInNewContext										http://nodejs.org/api/all.html#vm_script_runinnewcontext_sandbox_options
vm.Script.runInThisContext	A										<section class="prog__container"><p id='obj.desc'>Runs the compiled code contained by the <code>vm.Script</code> within the context of the\ncurrent <code>global</code> object. Running code does not have access to local scope, but\n<em>does</em> have access to the current <code>global</code> object.</p><p>The following example compiles code that increments a <code>global</code> variable then\nexecutes that code multiple times:</p><pre><code class="lang-js">const vm = require(&apos;vm&apos;);\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script(&apos;globalVar += 1&apos;, { filename: &apos;myfile.vm&apos; });\n\nfor (var i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n</code></pre><pre><code>script.runInThisContext([options])</code></pre></section>	http://nodejs.org/api/all.html#vm_script_runinthiscontext_options
vm.Script runInThisContext	R	vm.Script.runInThisContext										http://nodejs.org/api/all.html#vm_script_runinthiscontext_options
vm Script runInThisContext	R	vm.Script runInThisContext										http://nodejs.org/api/all.html#vm_script_runinthiscontext_options
zlib	A										<section class="prog__container"><p id='obj.desc'>The <code>zlib</code> module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:</p><p>The <code>zlib</code> module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:</p><pre><code class="lang-js">const zlib = require(&apos;zlib&apos;);\n</code></pre><p>Compressing or decompressing a stream (such as a file) can be accomplished by\npiping the source stream data through a <code>zlib</code> stream into a destination stream:</p><pre><code class="lang-js">const gzip = zlib.createGzip();\nconst fs = require(&apos;fs&apos;);\nconst inp = fs.createReadStream(&apos;input.txt&apos;);\nconst out = fs.createWriteStream(&apos;input.txt.gz&apos;);\n\ninp.pipe(gzip).pipe(out);\n</code></pre><p>It is also possible to compress or decompress data in a single step:</p><pre><code class="lang-js">const input = &apos;.................................&apos;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&apos;base64&apos;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&apos;eJzT0yMAAGTvBe8=&apos;, &apos;base64&apos;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</code></pre><p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#zlib_zlib
zlib.createDeflate	A										<section class="prog__container"><p id='obj.desc'>Returns a new Deflate object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_createdeflate_options
zlib createDeflate	R	zlib.createDeflate										http://nodejs.org/api/all.html#zlib_zlib_createdeflate_options
zlib.createDeflateRaw	A										<section class="prog__container"><p id='obj.desc'>Returns a new DeflateRaw object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_createdeflateraw_options
zlib createDeflateRaw	R	zlib.createDeflateRaw										http://nodejs.org/api/all.html#zlib_zlib_createdeflateraw_options
zlib.createGunzip	A										<section class="prog__container"><p id='obj.desc'>Returns a new Gunzip object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_creategunzip_options
zlib createGunzip	R	zlib.createGunzip										http://nodejs.org/api/all.html#zlib_zlib_creategunzip_options
zlib.createGzip	A										<section class="prog__container"><p id='obj.desc'>Returns a new Gzip object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_creategzip_options
zlib createGzip	R	zlib.createGzip										http://nodejs.org/api/all.html#zlib_zlib_creategzip_options
zlib.createInflate	A										<section class="prog__container"><p id='obj.desc'>Returns a new Inflate object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_createinflate_options
zlib createInflate	R	zlib.createInflate										http://nodejs.org/api/all.html#zlib_zlib_createinflate_options
zlib.createInflateRaw	A										<section class="prog__container"><p id='obj.desc'>Returns a new InflateRaw object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_createinflateraw_options
zlib createInflateRaw	R	zlib.createInflateRaw										http://nodejs.org/api/all.html#zlib_zlib_createinflateraw_options
zlib.createUnzip	A										<section class="prog__container"><p id='obj.desc'>Returns a new Unzip object with an options.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_createunzip_options
zlib createUnzip	R	zlib.createUnzip										http://nodejs.org/api/all.html#zlib_zlib_createunzip_options
zlib.constants	A										<section class="prog__container"><p id='obj.desc'>Provides an object enumerating Zlib-related constants.</p></section>	http://nodejs.org/api/all.html#zlib_zlib_constants
zlib constants	R	zlib.constants										http://nodejs.org/api/all.html#zlib_zlib_constants
zlib.Deflate	A										<section class="prog__container"><p id='obj.desc'>Compress data using deflate.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_deflate
zlib Deflate	R	zlib.Deflate										http://nodejs.org/api/all.html#zlib_class_zlib_deflate
zlib.DeflateRaw	A										<section class="prog__container"><p id='obj.desc'>Compress data using deflate, and do not append a <code>zlib</code> header.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_deflateraw
zlib DeflateRaw	R	zlib.DeflateRaw										http://nodejs.org/api/all.html#zlib_class_zlib_deflateraw
zlib.Gunzip	A										<section class="prog__container"><p id='obj.desc'>Decompress a gzip stream.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_gunzip
zlib Gunzip	R	zlib.Gunzip										http://nodejs.org/api/all.html#zlib_class_zlib_gunzip
zlib.Gzip	A										<section class="prog__container"><p id='obj.desc'>Compress data using gzip.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_gzip
zlib Gzip	R	zlib.Gzip										http://nodejs.org/api/all.html#zlib_class_zlib_gzip
zlib.Inflate	A										<section class="prog__container"><p id='obj.desc'>Decompress a deflate stream.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_inflate
zlib Inflate	R	zlib.Inflate										http://nodejs.org/api/all.html#zlib_class_zlib_inflate
zlib.InflateRaw	A										<section class="prog__container"><p id='obj.desc'>Decompress a raw deflate stream.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_inflateraw
zlib InflateRaw	R	zlib.InflateRaw										http://nodejs.org/api/all.html#zlib_class_zlib_inflateraw
zlib.Unzip	A										<section class="prog__container"><p id='obj.desc'>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_unzip
zlib Unzip	R	zlib.Unzip										http://nodejs.org/api/all.html#zlib_class_zlib_unzip
zlib.Zlib	A										<section class="prog__container"><p id='obj.desc'>Not exported by the <code>zlib</code> module. It is documented here because it is the base\nclass of the compressor/decompressor classes.</p></section>	http://nodejs.org/api/all.html#zlib_class_zlib_zlib
zlib Zlib	R	zlib.Zlib										http://nodejs.org/api/all.html#zlib_class_zlib_zlib
zlib.Zlib.flush	A										<section class="prog__container"><p id='obj.desc'><code>kind</code> defaults to <code>zlib.constants.Z_FULL_FLUSH</code>.</p><pre><code>zlib.flush([kind], callback)</code></pre></section>	http://nodejs.org/api/all.html#zlib_zlib_flush_kind_callback
zlib.Zlib flush	R	zlib.Zlib.flush										http://nodejs.org/api/all.html#zlib_zlib_flush_kind_callback
zlib Zlib flush	R	zlib.Zlib flush										http://nodejs.org/api/all.html#zlib_zlib_flush_kind_callback
zlib.Zlib.params	A										<section class="prog__container"><p id='obj.desc'>Dynamically update the compression level and compression strategy.\nOnly applicable to deflate algorithm.</p><pre><code>zlib.params(level, strategy, callback)</code></pre></section>	http://nodejs.org/api/all.html#zlib_zlib_params_level_strategy_callback
zlib.Zlib params	R	zlib.Zlib.params										http://nodejs.org/api/all.html#zlib_zlib_params_level_strategy_callback
zlib Zlib params	R	zlib.Zlib params										http://nodejs.org/api/all.html#zlib_zlib_params_level_strategy_callback
zlib.Zlib.reset	A										<section class="prog__container"><p id='obj.desc'>Reset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.</p><pre><code>zlib.reset()</code></pre></section>	http://nodejs.org/api/all.html#zlib_zlib_reset
zlib.Zlib reset	R	zlib.Zlib.reset										http://nodejs.org/api/all.html#zlib_zlib_reset
zlib Zlib reset	R	zlib.Zlib reset										http://nodejs.org/api/all.html#zlib_zlib_reset
Buffer(buffer_class_buffer)	A										<section class="prog__container"><p id='obj.desc'>The <code>Buffer</code> class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.</p></section>	http://nodejs.org/api/all.html#buffer_class_buffer
Buffer(buffer)	A										<section class="prog__container"><p id='obj.desc'>Used to handle binary data. See the buffer section.</p></section>	http://nodejs.org/api/all.html#buffer
Buffer.compare(buffer_compare_buf1_buf2)	A										<section class="prog__container"><p id='obj.desc'>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of\n<code>Buffer</code> instances. This is equivalent to calling\n<code>buf1.compare(buf2)</code>.</p><p>Example:</p><pre><code class="lang-js">const buf1 = Buffer.from(&apos;1234&apos;);\nconst buf2 = Buffer.from(&apos;0123&apos;);\nconst arr = [buf1, buf2];\n\n// Prints: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]\n// (This result is equal to: [buf2, buf1])\nconsole.log(arr.sort(Buffer.compare));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_compare_buf1_buf2
Buffer.compare(buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend)	A										<section class="prog__container"><p id='obj.desc'>Compares <code>buf</code> with <code>target</code> and returns a number indicating whether <code>buf</code>\ncomes before, after, or is the same as <code>target</code> in sort order.\nComparison is based on the actual sequence of bytes in each <code>Buffer</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from(&apos;ABC&apos;);\nconst buf2 = Buffer.from(&apos;BCD&apos;);\nconst buf3 = Buffer.from(&apos;ABCD&apos;);\n\n// Prints: 0\nconsole.log(buf1.compare(buf1));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2));\n\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n\n// Prints: 1\nconsole.log(buf2.compare(buf1));\n\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n\n// Prints: [ &lt;Buffer 41 42 43&gt;, &lt;Buffer 41 42 43 44&gt;, &lt;Buffer 42 43 44&gt; ]\n// (This result is equal to: [buf1, buf3, buf2])\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n</code></pre><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\n// Prints: 0\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n\n// Prints: 1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer.from(buffer_from_arraybuffer_byteoffset_length)	A										<section class="prog__container"><p id='obj.desc'>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\nthe newly created <code>Buffer</code> will share the same allocated memory as the\n<code>TypedArray</code>.</p><p>Example:</p><pre><code class="lang-js">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = Buffer.from(arr.buffer);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf);\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf);\n</code></pre><p>Example:</p><pre><code class="lang-js">const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\n\n// Prints: 2\nconsole.log(buf.length);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_from_arraybuffer_byteoffset_length
Buffer.from(buffer_from_buffer)	A										<section class="prog__container"><p id='obj.desc'>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p><p>Example:</p><pre><code class="lang-js">const buf1 = Buffer.from(&apos;buffer&apos;);\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\n\n// Prints: auffer\nconsole.log(buf1.toString());\n\n// Prints: buffer\nconsole.log(buf2.toString());\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_from_buffer
Buffer.from(buffer_from_string_encoding)	A										<section class="prog__container"><p id='obj.desc'>Creates a new <code>Buffer</code> containing the given JavaScript string <code>string</code>. If\nprovided, the <code>encoding</code> parameter identifies the character encoding of <code>string</code>.</p><p>Examples:</p><pre><code class="lang-js">const buf1 = Buffer.from(&apos;this is a t&#xE9;st&apos;);\n\n// Prints: this is a t&#xE9;st\nconsole.log(buf1.toString());\n\n// Prints: this is a tC)st\nconsole.log(buf1.toString(&apos;ascii&apos;));\n\n\nconst buf2 = Buffer.from(&apos;7468697320697320612074c3a97374&apos;, &apos;hex&apos;);\n\n// Prints: this is a t&#xE9;st\nconsole.log(buf2.toString());\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_from_string_encoding
Buffer.from(buffer_from_array)	A										<section class="prog__container"><p id='obj.desc'>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p><p>Example:</p><pre><code class="lang-js">// Creates a new Buffer containing ASCII bytes of the string &apos;buffer&apos;\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</code></pre></section>	http://nodejs.org/api/all.html#buffer_from_array
ChildProcess.disconnect(childprocess_event_disconnect)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;disconnect&apos;</code> event is emitted after calling the\n<code>child.disconnect()</code> method in parent process or <code>process.disconnect()</code> in child process. After\ndisconnecting it is no longer possible to send or receive messages, and the\n<code>child.connected</code> property is <code>false</code>.</p></section>	http://nodejs.org/api/all.html#childprocess_event_disconnect
ChildProcess.disconnect(child_process_child_disconnect)	A										<section class="prog__container"><p id='obj.desc'>Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the <code>child.connected</code> and <code>process.connected</code> properties in both\nthe parent and child (respectively) will be set to <code>false</code>, and it will be no\nlonger possible to pass messages between the processes.</p></section>	http://nodejs.org/api/all.html#child_process_child_disconnect
Worker.disconnect(worker_event_disconnect)	A										<section class="prog__container"><p id='obj.desc'>Similar to the <code>cluster.on(&apos;disconnect&apos;)</code> event, but specific to this worker.</p><p>Similar to the <code>cluster.on(&apos;disconnect&apos;)</code> event, but specific to this worker.</p><pre><code class="lang-js">cluster.fork().on(&apos;disconnect&apos;, () =&gt; {\n  // Worker has disconnected\n});\n</code></pre></section>	http://nodejs.org/api/all.html#worker_event_disconnect
Worker.disconnect(cluster_worker_disconnect)	A										<section class="prog__container"><p id='obj.desc'>In a worker, this function will close all servers, wait for the <code>&apos;close&apos;</code> event on\nthose servers, and then disconnect the IPC channel.</p><p>Because long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe <code>&apos;disconnect&apos;</code> event has not been emitted after some time.</p><pre><code class="lang-js">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  var timeout;\n\n  worker.on(&apos;listening&apos;, (address) =&gt; {\n    worker.send(&apos;shutdown&apos;);\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&apos;disconnect&apos;, () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require(&apos;net&apos;);\n  var server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&apos;message&apos;, (msg) =&gt; {\n    if (msg === &apos;shutdown&apos;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_worker_disconnect
cluster.disconnect(cluster_event_disconnect)	A										<section class="prog__container"><p id='obj.desc'>Emitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\nworker.disconnect()).</p><p>There may be a delay between the <code>&apos;disconnect&apos;</code> and <code>&apos;exit&apos;</code> events.  These events\ncan be used to detect if the process is stuck in a cleanup or if there are\nlong-living connections.</p><pre><code class="lang-js">cluster.on(&apos;disconnect&apos;, (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_disconnect
cluster.disconnect(cluster_cluster_disconnect_callback)	A										<section class="prog__container"><p id='obj.desc'>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p></section>	http://nodejs.org/api/all.html#cluster_cluster_disconnect_callback
cluster.fork(cluster_event_fork)	A										<section class="prog__container"><p id='obj.desc'>When a new worker is forked the cluster module will emit a <code>&apos;fork&apos;</code> event.\nThis can be used to log worker activity, and create your own timeout.</p><p>When a new worker is forked the cluster module will emit a <code>&apos;fork&apos;</code> event.\nThis can be used to log worker activity, and create your own timeout.</p><pre><code class="lang-js">var timeouts = [];\nfunction errorMsg() {\n  console.error(&apos;Something must be wrong with the connection ...&apos;);\n}\n\ncluster.on(&apos;fork&apos;, (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&apos;listening&apos;, (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&apos;exit&apos;, (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n</code></pre></section>	http://nodejs.org/api/all.html#cluster_event_fork
cluster.fork(cluster_cluster_fork_env)	A										<section class="prog__container"><p id='obj.desc'>Spawn a new worker process.</p></section>	http://nodejs.org/api/all.html#cluster_cluster_fork_env
dgram.Socket.bind(dgram_socket_bind_options_callback)	A										<section class="prog__container"><p id='obj.desc'>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code> that are passed as properties of an\n<code>options</code> object passed as the first argument. If <code>port</code> is not specified, the\noperating system will attempt to bind to a random port. If <code>address</code> is not\nspecified, the operating system will attempt to listen on all addresses.  Once\nbinding is complete, a <code>&apos;listening&apos;</code> event is emitted and the optional\n<code>callback</code> function is called.</p><p>An example socket listening on an exclusive port is shown below.</p><pre><code class="lang-js">socket.bind({\n  address: &apos;localhost&apos;,\n  port: 8000,\n  exclusive: true\n});\n</code></pre><pre><code>socket.bind(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_bind_options_callback
dgram.Socket.bind(dgram_socket_bind_port_address_callback)	A										<section class="prog__container"><p id='obj.desc'>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified, the operating\nsystem will attempt to bind to a random port. If <code>address</code> is not specified,\nthe operating system will attempt to listen on all addresses.  Once binding is\ncomplete, a <code>&apos;listening&apos;</code> event is emitted and the optional <code>callback</code> function\nis called.</p><p>Example of a UDP server listening on port 41234:</p><pre><code class="lang-js">const dgram = require(&apos;dgram&apos;);\nconst server = dgram.createSocket(&apos;udp4&apos;);\n\nserver.on(&apos;error&apos;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&apos;message&apos;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&apos;listening&apos;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre><pre><code>socket.bind([port][, address][, callback])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_bind_port_address_callback
dgram.Socket.close(dgram_event_close)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;close&apos;</code> event is emitted after a socket is closed with <code>close()</code>.\nOnce triggered, no new <code>&apos;message&apos;</code> events will be emitted on this socket.</p></section>	http://nodejs.org/api/all.html#dgram_event_close
dgram.Socket.close(dgram_socket_close_callback)	A										<section class="prog__container"><p id='obj.desc'>Close the underlying socket and stop listening for data on it. If a callback is\nprovided, it is added as a listener for the <code>&apos;close&apos;</code> event.</p><pre><code>socket.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#dgram_socket_close_callback
EventEmitter.listenerCount(eventemitter_listenercount_eventname)	A										<section class="prog__container"><p id='obj.desc'>Returns the number of listeners listening to the event named <code>eventName</code>.</p><pre><code>emitter.listenerCount(eventName)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_listenercount_eventname
EventEmitter.listenerCount(eventemitter_listenercount_emitter_eventname)	A										<section class="prog__container"><p id='obj.desc'>A class method that returns the number of listeners for the given <code>eventName</code>\nregistered on the given <code>emitter</code>.</p><p>A class method that returns the number of listeners for the given <code>eventName</code>\nregistered on the given <code>emitter</code>.</p><pre><code class="lang-js">const myEmitter = new MyEmitter();\nmyEmitter.on(&apos;event&apos;, () =&gt; {});\nmyEmitter.on(&apos;event&apos;, () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, &apos;event&apos;));\n// Prints: 2\n</code></pre><pre><code>EventEmitter.listenerCount(emitter, eventName)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_listenercount_emitter_eventname
EventEmitter.removeListener(eventemitter_event_removelistener)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;removeListener&apos;</code> event is emitted <em>after</em> the <code>listener</code> is removed.</p></section>	http://nodejs.org/api/all.html#eventemitter_event_removelistener
EventEmitter.removeListener(eventemitter_removelistener_eventname_listener)	A										<section class="prog__container"><p id='obj.desc'>Removes the specified <code>listener</code> from the listener array for the event named\n<code>eventName</code>.</p><p>Removes the specified <code>listener</code> from the listener array for the event named\n<code>eventName</code>.</p><pre><code class="lang-js">var callback = (stream) =&gt; {\n  console.log(&apos;someone connected!&apos;);\n};\nserver.on(&apos;connection&apos;, callback);\n// ...\nserver.removeListener(&apos;connection&apos;, callback);\n</code></pre><p>Note that once an event has been emitted, all listeners attached to it at the\ntime of emitting will be called in order. This implies that any <code>removeListener()</code>\nor <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener\nfinishes execution will not remove them from <code>emit()</code> in progress. Subsequent\nevents will behave as expected.</p><pre><code class="lang-js">const myEmitter = new MyEmitter();\n\nvar callbackA = () =&gt; {\n  console.log(&apos;A&apos;);\n  myEmitter.removeListener(&apos;event&apos;, callbackB);\n};\n\nvar callbackB = () =&gt; {\n  console.log(&apos;B&apos;);\n};\n\nmyEmitter.on(&apos;event&apos;, callbackA);\n\nmyEmitter.on(&apos;event&apos;, callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit(&apos;event&apos;);\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit(&apos;event&apos;);\n// Prints:\n//   A\n</code></pre><pre><code>emitter.removeListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#eventemitter_removelistener_eventname_listener
fs.write(fs_fs_write_fd_string_position_encoding_callback)	A										<section class="prog__container"><p id='obj.desc'>Write <code>string</code> to the file specified by <code>fd</code>.  If <code>string</code> is not a string, then\nthe value will be coerced to one.</p></section>	http://nodejs.org/api/all.html#fs_fs_write_fd_string_position_encoding_callback
fs.write(fs_fs_write_fd_buffer_offset_length_position_callback)	A										<section class="prog__container"><p id='obj.desc'>Write <code>buffer</code> to the file specified by <code>fd</code>.</p></section>	http://nodejs.org/api/all.html#fs_fs_write_fd_buffer_offset_length_position_callback
fs.writeSync(fs_fs_writesync_fd_string_position_encoding)	A										<section class="prog__container"><p id='obj.desc'>Synchronous versions of <code>fs.write()</code>. Returns the number of bytes written.</p></section>	http://nodejs.org/api/all.html#fs_fs_writesync_fd_string_position_encoding
fs.writeSync(fs_fs_writesync_fd_buffer_offset_length_position)	A										<section class="prog__container"><p id='obj.desc'>Synchronous versions of <code>fs.write()</code>. Returns the number of bytes written.</p></section>	http://nodejs.org/api/all.html#fs_fs_writesync_fd_buffer_offset_length_position
http.ClientRequest.abort(http_event_abort)	A										<section class="prog__container"><p id='obj.desc'>Emitted when the request has been aborted by the client. This event is only\nemitted on the first call to <code>abort()</code>.</p></section>	http://nodejs.org/api/all.html#http_event_abort
http.ClientRequest.abort(http_request_abort)	A										<section class="prog__container"><p id='obj.desc'>Marks the request as aborting. Calling this will cause remaining data\nin the response to be dropped and the socket to be destroyed.</p><pre><code>request.abort()</code></pre></section>	http://nodejs.org/api/all.html#http_request_abort
http.Server.listen(http_server_listen_path_callback)	A										<section class="prog__container"><p id='obj.desc'>Start a UNIX socket server listening for connections on the given <code>path</code>.</p><pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_server_listen_path_callback
http.Server.listen(http_server_listen_port_hostname_backlog_callback)	A										<section class="prog__container"><p id='obj.desc'>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise.\nOmit the port argument, or use a port value of <code>0</code>, to have the operating system\nassign a random port, which can be retrieved by using <code>server.address().port</code>\nafter the <code>&apos;listening&apos;</code> event has been emitted.</p><pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_server_listen_port_hostname_backlog_callback
http.Server.listen(http_server_listen_handle_callback)	A										<section class="prog__container"><p id='obj.desc'>The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p><pre><code>server.listen(handle[, callback])</code></pre></section>	http://nodejs.org/api/all.html#http_server_listen_handle_callback
http.Server.close(http_event_close)	A										<section class="prog__container"><p id='obj.desc'>Emitted when the server closes.</p></section>	http://nodejs.org/api/all.html#http_event_close
http.Server.close(http_server_close_callback)	A										<section class="prog__container"><p id='obj.desc'>Stops the server from accepting new connections.  See <code>net.Server.close()</code>.</p><pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#http_server_close_callback
https.createServer.listen(https_createserver_listen_port_host_backlog_callback)	A										<section class="prog__container"><p id='obj.desc'>See <code>http.listen()</code> for details.</p><pre><code>server.listen(port[, host][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#https_createserver_listen_port_host_backlog_callback
https.createServer.listen(https_createserver_listen_path_callback)	A										<section class="prog__container"><p id='obj.desc'>See <code>http.listen()</code> for details.</p><pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#https_createserver_listen_path_callback
module(module_module)	A										<section class="prog__container"><p id='obj.desc'>Node.js has a simple module loading system.  In Node.js, files and modules\nare in one-to-one correspondence (each file is treated as a separate module).</p><p>As an example, consider a file named <code>foo.js</code>:</p><pre><code class="lang-js">const circle = require(&apos;./circle.js&apos;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre><p>Here are the contents of <code>circle.js</code>:</p><pre><code class="lang-js">const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre><p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p><pre><code class="lang-js">const square = require(&apos;./square.js&apos;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</code></pre><p>The <code>square</code> module is defined in <code>square.js</code>:</p><pre><code class="lang-js">// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n</code></pre><p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#module_module
module(globals_module)	A										<section class="prog__container"><p id='obj.desc'>A reference to the current module. In particular\n<code>module.exports</code> is used for defining what a module exports and makes\navailable through <code>require()</code>.</p></section>	http://nodejs.org/api/all.html#globals_module
net.connect(net_net_connect_path_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new unix <code>net.Socket</code> and automatically\nconnects to the supplied <code>path</code>.</p></section>	http://nodejs.org/api/all.html#net_net_connect_path_connectlistener
net.connect(net_net_connect_port_host_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.</p></section>	http://nodejs.org/api/all.html#net_net_connect_port_host_connectlistener
net.connect(net_net_connect_options_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects with the supplied <code>options</code>.</p><p>Here is an example of a client of the previously described echo server:</p><pre><code class="lang-js">const net = require(&apos;net&apos;);\nconst client = net.connect({port: 8124}, () =&gt; {\n  // &apos;connect&apos; listener\n  console.log(&apos;connected to server!&apos;);\n  client.write(&apos;world!\r\n&apos;);\n});\nclient.on(&apos;data&apos;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, () =&gt; {\n  console.log(&apos;disconnected from server&apos;);\n});\n</code></pre><p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to</p><pre><code class="lang-js">const client = net.connect({path: &apos;/tmp/echo.sock&apos;});\n</code></pre></section>	http://nodejs.org/api/all.html#net_net_connect_options_connectlistener
net.createConnection(net_net_createconnection_path_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new unix <code>net.Socket</code> and automatically\nconnects to the supplied <code>path</code>.</p></section>	http://nodejs.org/api/all.html#net_net_createconnection_path_connectlistener
net.createConnection(net_net_createconnection_port_host_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.</p></section>	http://nodejs.org/api/all.html#net_net_createconnection_port_host_connectlistener
net.createConnection(net_net_createconnection_options_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects with the supplied <code>options</code>.</p><p>Here is an example of a client of the previously described echo server:</p><pre><code class="lang-js">const net = require(&apos;net&apos;);\nconst client = net.createConnection({port: 8124}, () =&gt; {\n  //&apos;connect&apos; listener\n  console.log(&apos;connected to server!&apos;);\n  client.write(&apos;world!\r\n&apos;);\n});\nclient.on(&apos;data&apos;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, () =&gt; {\n  console.log(&apos;disconnected from server&apos;);\n});\n</code></pre><p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to</p><pre><code class="lang-js">const client = net.connect({path: &apos;/tmp/echo.sock&apos;});\n</code></pre></section>	http://nodejs.org/api/all.html#net_net_createconnection_options_connectlistener
net.Server.listen(net_server_listen_options_callback)	A										<section class="prog__container"><p id='obj.desc'>The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the\noptional callback function, behave as they do on a call to\n<code>server.listen([port][, hostname][, backlog][, callback])</code>.\nAlternatively, the <code>path</code> option can be used to specify a UNIX socket.</p><p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.</p><pre><code class="lang-js">server.listen({\n  host: &apos;localhost&apos;,\n  port: 80,\n  exclusive: true\n});\n</code></pre><pre><code>server.listen(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_server_listen_options_callback
net.Server.listen(net_server_listen_path_backlog_callback)	A										<section class="prog__container"><p id='obj.desc'>Start a local socket server listening for connections on the given <code>path</code>.</p><p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em>\nrefer to an entry in <code>\\?\pipe\</code> or <code>\\.\pipe\</code>. Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving <code>..</code>\nsequences. Despite appearances, the pipe name space is flat.  Pipes will <em>not\npersist</em>, they are removed when the last reference to them is closed. Do not\nforget JavaScript string escaping requires paths to be specified with\ndouble-backslashes, such as:</p><pre><code class="lang-js">net.createServer().listen(\n    path.join(&apos;\\\\?\\pipe&apos;, process.cwd(), &apos;myctl&apos;))\n</code></pre><pre><code>server.listen(path[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_server_listen_path_backlog_callback
net.Server.listen(net_server_listen_port_hostname_backlog_callback)	A										<section class="prog__container"><p id='obj.desc'>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise.\nOmit the port argument, or use a port value of <code>0</code>, to have the operating system\nassign a random port, which can be retrieved by using <code>server.address().port</code>\nafter the <code>&apos;listening&apos;</code> event has been emitted.</p><p>One issue some users run into is getting <code>EADDRINUSE</code> errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again:</p><pre><code class="lang-js">server.on(&apos;error&apos;, (e) =&gt; {\n  if (e.code == &apos;EADDRINUSE&apos;) {\n    console.log(&apos;Address in use, retrying...&apos;);\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n</code></pre><pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_server_listen_port_hostname_backlog_callback
net.Server.listen(net_server_listen_handle_backlog_callback)	A										<section class="prog__container"><p id='obj.desc'>The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p><pre><code>server.listen(handle[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#net_server_listen_handle_backlog_callback
net.Server.close(net_event_close)	A										<section class="prog__container"><p id='obj.desc'>Emitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.</p></section>	http://nodejs.org/api/all.html#net_event_close
net.Server.close(net_server_close_callback)	A										<section class="prog__container"><p id='obj.desc'>Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally\nclosed when all connections are ended and the server emits a <code>&apos;close&apos;</code> event.\nThe optional <code>callback</code> will be called once the <code>&apos;close&apos;</code> event occurs. Unlike\nthat event, it will be called with an Error as its only argument if the server\nwas not open when it was closed.</p><pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#net_server_close_callback
net.Server.listening(net_event_listening)	A										<section class="prog__container"><p id='obj.desc'>Emitted when the server has been bound after calling <code>server.listen</code>.</p></section>	http://nodejs.org/api/all.html#net_event_listening
net.Server.listening(net_server_listening)	A										<section class="prog__container"><p id='obj.desc'>A Boolean indicating whether or not the server is listening for\nconnections.</p></section>	http://nodejs.org/api/all.html#net_server_listening
net.Socket.connect(net_socket_connect_path_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>As <code>socket.connect(options[, connectListener])</code>,\nwith options as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p><pre><code>socket.connect(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_connect_path_connectlistener
net.Socket.connect(net_socket_connect_port_host_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>As <code>socket.connect(options[, connectListener])</code>,\nwith options as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p><pre><code>socket.connect(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_connect_port_host_connectlistener
net.Socket.connect(net_event_connect)	A										<section class="prog__container"><p id='obj.desc'>Emitted when a socket connection is successfully established.\nSee <code>connect()</code>.</p></section>	http://nodejs.org/api/all.html#net_event_connect
net.Socket.connect(net_socket_connect_options_connectlistener)	A										<section class="prog__container"><p id='obj.desc'>Opens the connection for a given socket.</p><pre><code>socket.connect(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_connect_options_connectlistener
net.Socket.end(net_event_end)	A										<section class="prog__container"><p id='obj.desc'>Emitted when the other end of the socket sends a FIN packet.</p></section>	http://nodejs.org/api/all.html#net_event_end
net.Socket.end(net_socket_end_data_encoding)	A										<section class="prog__container"><p id='obj.desc'>Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.</p><pre><code>socket.end([data][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#net_socket_end_data_encoding
Interface.close(interface_event_close)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;close&apos;</code> event is emitted when one of the following occur:</p></section>	http://nodejs.org/api/all.html#interface_event_close
Interface.close(interface_close)	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\nthe <code>&apos;close&apos;</code> event will be emitted.</p><pre><code>rl.close()</code></pre></section>	http://nodejs.org/api/all.html#interface_close
Interface.pause(interface_event_pause)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;pause&apos;</code> event is emitted when one of the following occur:</p><p>For example:</p><pre><code class="lang-js">rl.on(&apos;pause&apos;, () =&gt; {\n  console.log(&apos;Readline paused.&apos;);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_pause
Interface.pause(interface_pause)	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\nlater if necessary.</p><pre><code>rl.pause()</code></pre></section>	http://nodejs.org/api/all.html#interface_pause
Interface.resume(interface_event_resume)	A										<section class="prog__container"><p id='obj.desc'>The <code>&apos;resume&apos;</code> event is emitted whenever the <code>input</code> stream is resumed.</p><p>The listener function is called without passing any arguments.</p><pre><code class="lang-js">rl.on(&apos;resume&apos;, () =&gt; {\n  console.log(&apos;Readline resumed.&apos;);\n});\n</code></pre></section>	http://nodejs.org/api/all.html#interface_event_resume
Interface.resume(interface_resume)	A										<section class="prog__container"><p id='obj.desc'>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p><pre><code>rl.resume()</code></pre></section>	http://nodejs.org/api/all.html#interface_resume
tls_(ssl).connect(tls_tls_connect_path_options_callback)	A										<section class="prog__container"><p id='obj.desc'>Same as <code>tls.connect()</code> except that <code>path</code> can be provided\nas an argument instead of an option.</p></section>	http://nodejs.org/api/all.html#tls_tls_connect_path_options_callback
tls_(ssl).connect(tls_tls_connect_options_callback)	A										<section class="prog__container"><p id='obj.desc'>The <code>callback</code> function, if specified, will be added as a listener for the\n<code>&apos;secureConnect&apos;</code> event.</p><p>The following implements a simple &quot;echo server&quot; example:</p><pre><code class="lang-js">const tls = require(&apos;tls&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&apos;client connected&apos;,\n              socket.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&apos;utf8&apos;);\nsocket.on(&apos;data&apos;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&apos;end&apos;, () =&gt; {\n  server.close();\n});\n</code></pre><p>Or</p><pre><code class="lang-js">const tls = require(&apos;tls&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&apos;client connected&apos;,\n              socket.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&apos;utf8&apos;);\nsocket.on(&apos;data&apos;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&apos;end&apos;, () =&gt; {\n  server.close();\n});\n</code></pre></section>	http://nodejs.org/api/all.html#tls_tls_connect_options_callback
tls_(ssl).connect(tls_tls_connect_port_host_options_callback)	A										<section class="prog__container"><p id='obj.desc'>Same as <code>tls.connect()</code> except that <code>port</code> and <code>host</code> can be provided\nas arguments instead of options.</p></section>	http://nodejs.org/api/all.html#tls_tls_connect_port_host_options_callback
