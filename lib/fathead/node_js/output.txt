Buffer	A										<section class="prog__container">    \n  {Function}  \n  \n  Used to handle binary data. See the   buffer section  .  \n  </section>	http://nodejs.org/api/all.html#all_buffer
Buffer	A										<section class="prog__container">    \n  {Function}  \n  \n  Used to handle binary data. See the   buffer section  .  \n  </section>	http://nodejs.org/api/all.html#all_buffer
clearImmediate	A										<section class="prog__container">        clearImmediate     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_clearimmediate
clearImmediate	A										<section class="prog__container">        clearImmediate     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_clearimmediate
clearInterval	A										<section class="prog__container">        clearInterval     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_clearinterval
clearInterval	A										<section class="prog__container">        clearInterval     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_clearinterval
clearTimeout	A										<section class="prog__container">        clearTimeout     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_cleartimeout
clearTimeout	A										<section class="prog__container">        clearTimeout     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_cleartimeout
global	A										<section class="prog__container">    \n  {Object} The global namespace object.  \n  \n  In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope   var something   will define a global\nvariable. In Node.js this is different. The top-level scope is not the global\nscope;   var something   inside an Node.js module will be local to that module.  \n  </section>	http://nodejs.org/api/all.html#all_global
global	A										<section class="prog__container">    \n  {Object} The global namespace object.  \n  \n  In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope   var something   will define a global\nvariable. In Node.js this is different. The top-level scope is not the global\nscope;   var something   inside an Node.js module will be local to that module.  \n  </section>	http://nodejs.org/api/all.html#all_global
setImmediate	A										<section class="prog__container">        setImmediate     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_setimmediate
setImmediate	A										<section class="prog__container">        setImmediate     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_setimmediate
setInterval	A										<section class="prog__container">        setInterval     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_setinterval
setInterval	A										<section class="prog__container">        setInterval     is described in the   timers   section.  \n  </section>	http://nodejs.org/api/all.html#all_setinterval
setTimeout	A										<section class="prog__container">        setTimeout     is described in the   timers   section.  \n  \n  \n  </section>	http://nodejs.org/api/all.html#all_settimeout
setTimeout	A										<section class="prog__container">        setTimeout     is described in the   timers   section.  \n  \n  \n  </section>	http://nodejs.org/api/all.html#all_settimeout
process	A										<section class="prog__container">    The   process   object is a   global   that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using   require()  .  \n  </section>	http://nodejs.org/api/all.html#all_process
process	A										<section class="prog__container">    The   process   object is a   global   that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using   require()  .  \n  </section>	http://nodejs.org/api/all.html#all_process
process.abort	A										<section class="prog__container">    The   process.abort()   method causes the Node.js process to exit immediately and\ngenerate a core file.  \n  <pre><code>process.abort()</code></pre></section>	http://nodejs.org/api/all.html#all_process_abort
process abort	R	process.abort										http://nodejs.org/api/all.html#all_process_abort
process.chdir	A										<section class="prog__container">    The   process.chdir()   method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified   directory   does not exist).  \n    console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(`New directory: ${process.cwd()}`);\n}\ncatch (err) {\n  console.log(`chdir: ${err}`);\n}\n    \n  <pre><code>process.chdir(directory)</code></pre></section>	http://nodejs.org/api/all.html#all_process_chdir_directory
process chdir	R	process.chdir										http://nodejs.org/api/all.html#all_process_chdir_directory
process.cpuUsage	A										<section class="prog__container">    The   process.cpuUsage()   method returns the user and system CPU time usage of\nthe current process, in an object with properties   user   and   system  , whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.  \n  The result of a previous call to   process.cpuUsage()   can be passed as the\nargument to the function, to get a diff reading.  \n    const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n    \n  <pre><code>process.cpuUsage([previousValue])</code></pre></section>	http://nodejs.org/api/all.html#all_process_cpuusage_previousvalue
process cpuUsage	R	process.cpuUsage										http://nodejs.org/api/all.html#all_process_cpuusage_previousvalue
process.cwd	A										<section class="prog__container">    The   process.cwd()   method returns the current working directory of the Node.js\nprocess.  \n    console.log(`Current directory: ${process.cwd()}`);\n    \n  <pre><code>process.cwd()</code></pre></section>	http://nodejs.org/api/all.html#all_process_cwd
process cwd	R	process.cwd										http://nodejs.org/api/all.html#all_process_cwd
process.disconnect	A										<section class="prog__container">    If the Node.js process is spawned with an IPC channel (see the   Child Process  \nand   Cluster   documentation), the   process.disconnect()   method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.  \n  The effect of calling   process.disconnect()   is that same as calling the parent\nprocess&#39;s     ChildProcess.disconnect()    .  \n  If the Node.js process was not spawned with an IPC channel,\n  process.disconnect()   will be   undefined  .  \n  <pre><code>process.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_process_disconnect
process disconnect	R	process.disconnect										http://nodejs.org/api/all.html#all_process_disconnect
process.emitWarning	A										<section class="prog__container">    The   process.emitWarning()   method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n    process.on(&#39;warning&#39;)     event.  \n    // Emit a warning using a string...\nprocess.emitWarning(&#39;Something happened!&#39;);\n// Emits: (node: 56338) Warning: Something happened!\n    \n    // Emit a warning using a string and a name...\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n// Emits: (node:56338) CustomWarning: Something Happened!\n    \n  In each of the previous examples, an   Error   object is generated internally by\n  process.emitWarning()   and passed through to the\n    process.on(&#39;warning&#39;)     event.  \n    process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.stack);\n});\n    \n  If   warning   is passed as an   Error   object, it will be passed through to the\n  process.on(&#39;warning&#39;)   event handler unmodified (and the optional   name  \nand   ctor   arguments will be ignored):  \n    // Emit a warning using an Error object...\nconst myWarning = new Error(&#39;Warning! Something happened!&#39;);\nmyWarning.name = &#39;CustomWarning&#39;;\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) CustomWarning: Warning! Something Happened!\n    \n  A   TypeError   is thrown if   warning   is anything other than a string or   Error  \nobject.  \n  Note that while process warnings use   Error   objects, the process warning\nmechanism is   not   a replacement for normal error handling mechanisms.  \n  The following additional handling is implemented if the warning   name   is\n  DeprecationWarning  :  \n  \n  If the   --throw-deprecation   command-line flag is used, the deprecation\nwarning is thrown as an exception rather than being emitted as an event.  \n  If the   --no-deprecation   command-line flag is used, the deprecation\nwarning is suppressed.  \n  If the   --trace-deprecation   command-line flag is used, the deprecation\nwarning is printed to   stderr   along with the full stack trace.  \n  \n  <pre><code>process.emitWarning(warning[, name][, ctor])</code></pre></section>	http://nodejs.org/api/all.html#all_process_emitwarning_warning_name_ctor
process emitWarning	R	process.emitWarning										http://nodejs.org/api/all.html#all_process_emitwarning_warning_name_ctor
process.exit	A										<section class="prog__container">    The   process.exit()   method instructs Node.js to terminate the process as\nquickly as possible with the specified exit   code  . If the   code   is omitted,\nexit uses either the &#39;success&#39; code   0   or the value of   process.exitCode   if\nspecified.  \n  To exit with a &#39;failure&#39; code:  \n    process.exit(1);\n    \n  The shell that executed Node.js should see the exit code as   1  .  \n  It is important to note that calling   process.exit()   will force the process to\nexit as quickly as possible   even if there are still asynchronous operations\npending   that have not yet completed fully,   including   I/O operations to\n  process.stdout   and   process.stderr  .  \n  In most situations, it is not actually necessary to call   process.exit()  \nexplicitly. The Node.js process will exit on it&#39;s own   if there is no additional\nwork pending   in the event loop. The   process.exitCode   property can be set to\ntell the process which exit code to use when the process exits gracefully.  \n  For instance, the following example illustrates a   misuse   of the\n  process.exit()   method that could lead to data printed to stdout being\ntruncated and lost:  \n    // This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n    \n  The reason this is problematic is because writes to   process.stdout   in Node.js\nare sometimes   non-blocking   and may occur over multiple ticks of the Node.js\nevent loop. Calling   process.exit()  , however, forces the process to exit\n  before   those additional writes to   stdout   can be performed.  \n  Rather than calling   process.exit()   directly, the code   should   set the\n  process.exitCode   and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:  \n    // How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n    \n  If it is necessary to terminate the Node.js process due to an error condition,\nthrowing an   uncaught   error and allowing the process to terminate accordingly\nis safer than calling   process.exit()  .  \n  <pre><code>process.exit([code])</code></pre></section>	http://nodejs.org/api/all.html#all_process_exit_code
process exit	R	process.exit										http://nodejs.org/api/all.html#all_process_exit_code
process.getegid	A										<section class="prog__container">    The   process.getegid()   method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)  \n    if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows\nor Android)  \n  <pre><code>process.getegid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getegid
process getegid	R	process.getegid										http://nodejs.org/api/all.html#all_process_getegid
process.geteuid	A										<section class="prog__container">    The   process.geteuid()   method returns the numerical effective user identity of\nthe process. (See geteuid(2).)  \n    if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.geteuid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_geteuid
process geteuid	R	process.geteuid										http://nodejs.org/api/all.html#all_process_geteuid
process.getgid	A										<section class="prog__container">    The   process.getgid()   method returns the numerical group identity of the\nprocess. (See getgid(2).)  \n    if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.getgid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getgid
process getgid	R	process.getgid										http://nodejs.org/api/all.html#all_process_getgid
process.getgroups	A										<section class="prog__container">    The   process.getgroups()   method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.  \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.getgroups()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getgroups
process getgroups	R	process.getgroups										http://nodejs.org/api/all.html#all_process_getgroups
process.getuid	A										<section class="prog__container">    The   process.getuid()   method returns the numeric user identity of the process.\n(See getuid(2).)  \n    if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.getuid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getuid
process getuid	R	process.getuid										http://nodejs.org/api/all.html#all_process_getuid
process.hrtime	A										<section class="prog__container">    The   process.hrtime()   method returns the current high-resolution real time in a\n  [seconds, nanoseconds]   tuple Array.   time   is an optional parameter that must\nbe the result of a previous   process.hrtime()   call (and therefore, a real time\nin a   [seconds, nanoseconds]   tuple Array containing a previous time) to diff\nwith the current time. These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals.  \n  Passing in the result of a previous call to   process.hrtime()   is useful for\ncalculating an amount of time passed between calls:  \n    var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);\n    \n  Constructing an array by some method other than calling   process.hrtime()   and\npassing the result to process.hrtime() will result in undefined behavior.  \n  <pre><code>process.hrtime([time])</code></pre></section>	http://nodejs.org/api/all.html#all_process_hrtime_time
process hrtime	R	process.hrtime										http://nodejs.org/api/all.html#all_process_hrtime_time
process.initgroups	A										<section class="prog__container">    The   process.initgroups()   method reads the   /etc/group   file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have   root  \naccess or the   CAP_SETGID   capability.  \n  Note that care must be taken when dropping privileges. Example:  \n    console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.initgroups(user, extra_group)</code></pre></section>	http://nodejs.org/api/all.html#all_process_initgroups_user_extra_group
process initgroups	R	process.initgroups										http://nodejs.org/api/all.html#all_process_initgroups_user_extra_group
process.kill	A										<section class="prog__container">    The   process.kill()   method sends the   signal   to the process identified by\n  pid  .  \n  Signal names are strings such as   &#39;SIGINT&#39;   or   &#39;SIGHUP&#39;  . See   Signal Events  \nand kill(2) for more information.  \n  This method will throw an error if the target   pid   does not exist. As a special\ncase, a signal of   0   can be used to test for the existence of a process.\nWindows platforms will throw an error if the   pid   is used to kill a process\ngroup.  \n    Note  :Even though the name of this function is   process.kill()  , it is really\njust a signal sender, like the   kill   system call.  The signal sent may do\nsomething other than kill the target process.  \n  For example:  \n    process.on(&#39;SIGHUP&#39;, () =&gt; {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\n    \n    Note  : When   SIGUSR1   is received by a Node.js process, Node.js will start the\ndebugger, see   Signal Events  .  \n  <pre><code>process.kill(pid[, signal])</code></pre></section>	http://nodejs.org/api/all.html#all_process_kill_pid_signal
process kill	R	process.kill										http://nodejs.org/api/all.html#all_process_kill_pid_signal
process.memoryUsage	A										<section class="prog__container">    The   process.memoryUsage()   method returns an object describing the memory usage\nof the Node.js process measured in bytes.  \n  For example, the code:  \n    console.log(process.memoryUsage());\n    \n  Will generate:  \n    {\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n    \n    heapTotal   and   heapUsed   refer to V8&#39;s memory usage.\n  external   refers to the memory usage of C++ objects bound to JavaScript\nobjects managed by V8.  \n  <pre><code>process.memoryUsage()</code></pre></section>	http://nodejs.org/api/all.html#all_process_memoryusage
process memoryUsage	R	process.memoryUsage										http://nodejs.org/api/all.html#all_process_memoryusage
process.nextTick	A										<section class="prog__container">    The   process.nextTick()   method adds the   callback   to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.  \n  This is   not   a simple alias to     setTimeout(fn, 0)    , it&#39;s much more\nefficient.  It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.  \n    console.log(&#39;start&#39;);\nprocess.nextTick(() =&gt; {\n  console.log(&#39;nextTick callback&#39;);\n});\nconsole.log(&#39;scheduled&#39;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n    \n  This is important when developing APIs in order to give users the opportunity\nto assign event handlers   after   an object has been constructed but before any\nI/O has occurred:  \n    function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n    \n  It is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:  \n    // WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n    \n  This API is hazardous because in the following case:  \n    maybeSync(true, () =&gt; {\n  foo();\n});\nbar();\n    \n  It is not clear whether   foo()   or   bar()   will be called first.  \n  The following approach is much better:  \n    function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n    \n    Note  : the next tick queue is completely drained on each pass of the\nevent loop   before   additional I/O is processed.  As a result,\nrecursively setting nextTick callbacks will block any I/O from\nhappening, just like a   while(true);   loop.  \n  <pre><code>process.nextTick(callback[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_process_nexttick_callback_...args
process nextTick	R	process.nextTick										http://nodejs.org/api/all.html#all_process_nexttick_callback_...args
process.send	A										<section class="prog__container">    If Node.js is spawned with an IPC channel, the   process.send()   method can be\nused to send messages to the parent process. Messages will be received as a\n    &#39;message&#39;     event on the parent&#39;s     ChildProcess     object.  \n  If Node.js was not spawned with an IPC channel,   process.send()   will be\n  undefined  .  \n    Note  : This function uses     JSON.stringify()     internally to serialize the\n  message  .*  \n  <pre><code>process.send(message[, sendHandle[, options]][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_process_send_message_sendhandle_options_callback
process send	R	process.send										http://nodejs.org/api/all.html#all_process_send_message_sendhandle_options_callback
process.setegid	A										<section class="prog__container">    The   process.setegid()   method sets the effective group identity of the process.\n(See setegid(2).) The   id   can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.  \n    if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.setegid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setegid_id
process setegid	R	process.setegid										http://nodejs.org/api/all.html#all_process_setegid_id
process.seteuid	A										<section class="prog__container">    The   process.seteuid()   method sets the effective user identity of the process.\n(See seteuid(2).) The   id   can be passed as either a numeric ID or a username\nstring.  If a username is specified, the method blocks while resolving the\nassociated numeric ID.  \n    if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.seteuid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_seteuid_id
process seteuid	R	process.seteuid										http://nodejs.org/api/all.html#all_process_seteuid_id
process.setgid	A										<section class="prog__container">    The   process.setgid()   method sets the group identity of the process. (See\nsetgid(2).)  The   id   can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.  \n    if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.setgid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setgid_id
process setgid	R	process.setgid										http://nodejs.org/api/all.html#all_process_setgid_id
process.setgroups	A										<section class="prog__container">    The   process.setgroups()   method sets the supplementary group IDs for the\nNode.js process. This is a privileged operation that requires the Node.js process\nto have   root   or the   CAP_SETGID   capability.  \n  The   groups   array can contain numeric group IDs, group names or both.  \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.setgroups(groups)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setgroups_groups
process setgroups	R	process.setgroups										http://nodejs.org/api/all.html#all_process_setgroups_groups
process.setuid	A										<section class="prog__container">    The   process.setuid(id)   method sets the user identity of the process. (See\nsetuid(2).)  The   id   can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.  \n    if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n    \n    Note  : This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)  \n  <pre><code>process.setuid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setuid_id
process setuid	R	process.setuid										http://nodejs.org/api/all.html#all_process_setuid_id
process.umask	A										<section class="prog__container">    The   process.umask()   method sets or returns the Node.js process&#39;s file mode\ncreation mask. Child processes inherit the mask from the parent process. The old\nmask is return if the   mask   argument is given, otherwise returns the current\nmask.  \n    const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n    \n  <pre><code>process.umask([mask])</code></pre></section>	http://nodejs.org/api/all.html#all_process_umask_mask
process umask	R	process.umask										http://nodejs.org/api/all.html#all_process_umask_mask
process.uptime	A										<section class="prog__container">    The   process.uptime()   method returns the number of seconds the current Node.js\nprocess has been running.  \n  <pre><code>process.uptime()</code></pre></section>	http://nodejs.org/api/all.html#all_process_uptime
process uptime	R	process.uptime										http://nodejs.org/api/all.html#all_process_uptime
process.arch	A										<section class="prog__container">    The   process.arch   property returns a String identifying the processor\narchitecture that the Node.js process is currently running on. For instance\n  &#39;arm&#39;  ,   &#39;ia32&#39;  , or   &#39;x64&#39;  .  \n    console.log(`This processor architecture is ${process.arch}`);\n    \n  </section>	http://nodejs.org/api/all.html#all_process_arch
process arch	R	process.arch										http://nodejs.org/api/all.html#all_process_arch
process.argv	A										<section class="prog__container">    The   process.argv   property returns an array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe     process.execPath    . See   process.argv0   if access to the original value of\n  argv[0]   is needed.  The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command line\narguments.  \n  For example, assuming the following script for   process-args.js  :  \n    // print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n    \n  Launching the Node.js process as:  \n    $ node process-2.js one two=three four\n    \n  Would generate the output:  \n    0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n    \n  </section>	http://nodejs.org/api/all.html#all_process_argv
process argv	R	process.argv										http://nodejs.org/api/all.html#all_process_argv
process.argv0	A										<section class="prog__container">    The   process.argv0   property stores a read-only copy of the original value of\n  argv[0]   passed when Node.js starts.  \n    $ bash -c &#39;exec -a customArgv0 ./node&#39;\n&gt; process.argv[0]\n&#39;/Volumes/code/external/node/out/Release/node&#39;\n&gt; process.argv0\n&#39;customArgv0&#39;\n    \n  </section>	http://nodejs.org/api/all.html#all_process_argv0
process argv0	R	process.argv0										http://nodejs.org/api/all.html#all_process_argv0
process.channel	A										<section class="prog__container">    If the Node.js process was spawned with an IPC channel (see the\n  Child Process   documentation), the   process.channel  \nproperty is a reference to the IPC channel. If no IPC channel exists, this\nproperty is   undefined  .  \n  </section>	http://nodejs.org/api/all.html#all_process_channel
process channel	R	process.channel										http://nodejs.org/api/all.html#all_process_channel
process.config	A										<section class="prog__container">    The   process.config   property returns an Object containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the   config.gypi   file that was produced when\nrunning the   ./configure   script.  \n  An example of the possible output looks like:  \n    {\n  target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39;\n   }\n}\n    \n    Note  : The   process.config   property is   not   read-only and there are\nexisting modules in the ecosystem that are known to extend, modify, or entirely\nreplace the value of   process.config  .  \n  </section>	http://nodejs.org/api/all.html#all_process_config
process config	R	process.config										http://nodejs.org/api/all.html#all_process_config
process.connected	A										<section class="prog__container">    If the Node.js process is spawned with an IPC channel (see the   Child Process  \nand   Cluster   documentation), the   process.connected   property will return\n  true   so long as the IPC channel is connected and will return   false   after\n  process.disconnect()   is called.  \n  Once   process.connected   is   false  , it is no longer possible to send messages\nover the IPC channel using   process.send()  .  \n  </section>	http://nodejs.org/api/all.html#all_process_connected
process connected	R	process.connected										http://nodejs.org/api/all.html#all_process_connected
process.env	A										<section class="prog__container">    The   process.env   property returns an object containing the user environment.\nSee environ(7).  \n  An example of this object looks like:  \n    {\n  TERM: &#39;xterm-256color&#39;,\n  SHELL: &#39;/usr/local/bin/bash&#39;,\n  USER: &#39;maciej&#39;,\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\n  PWD: &#39;/Users/maciej&#39;,\n  EDITOR: &#39;vim&#39;,\n  SHLVL: &#39;1&#39;,\n  HOME: &#39;/Users/maciej&#39;,\n  LOGNAME: &#39;maciej&#39;,\n  _: &#39;/usr/local/bin/node&#39;\n}\n    \n  It is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:  \n    $ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\n    \n  While the following will:  \n    process.env.foo = &#39;bar&#39;;\nconsole.log(process.env.foo);\n    \n  Assigning a property on   process.env   will implicitly convert the value\nto a string.  \n  Example:  \n    process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &#39;null&#39;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &#39;undefined&#39;\n    \n  Use   delete   to delete a property from   process.env  .  \n  Example:  \n    process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n    \n  On Windows operating systems, environment variables are case-insensitive.  \n  Example:  \n    process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n    \n  </section>	http://nodejs.org/api/all.html#all_process_env
process env	R	process.env										http://nodejs.org/api/all.html#all_process_env
process.execArgv	A										<section class="prog__container">    The   process.execArgv   property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the     process.argv     property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.  \n  For example:  \n    $ node --harmony script.js --version\n    \n  Results in   process.execArgv  :  \n    [&#39;--harmony&#39;]\n    \n  And   process.argv  :  \n    [&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\n    \n  </section>	http://nodejs.org/api/all.html#all_process_execargv
process execArgv	R	process.execArgv										http://nodejs.org/api/all.html#all_process_execargv
process.execPath	A										<section class="prog__container">    The   process.execPath   property returns the absolute pathname of the executable\nthat started the Node.js process.  \n  For example:  \n    &#39;/usr/local/bin/node&#39;\n    \n  </section>	http://nodejs.org/api/all.html#all_process_execpath
process execPath	R	process.execPath										http://nodejs.org/api/all.html#all_process_execpath
process.exitCode	A										<section class="prog__container">    A number which will be the process exit code, when the process either\nexits gracefully, or is exited via     process.exit()     without specifying\na code.  \n  Specifying a code to     process.exit(code)     will override any\nprevious setting of   process.exitCode  .  \n  </section>	http://nodejs.org/api/all.html#all_process_exitcode
process exitCode	R	process.exitCode										http://nodejs.org/api/all.html#all_process_exitcode
process.mainModule	A										<section class="prog__container">    The   process.mainModule   property provides an alternative way of retrieving\n    require.main    . The difference is that if the main module changes at\nruntime,     require.main     may still refer to the original main module in\nmodules that were required before the change occurred. Generally it&#39;s\nsafe to assume that the two refer to the same module.  \n  As with     require.main    ,   process.mainModule   will be   undefined   if there\nis no entry script.  \n  </section>	http://nodejs.org/api/all.html#all_process_mainmodule
process mainModule	R	process.mainModule										http://nodejs.org/api/all.html#all_process_mainmodule
process.pid	A										<section class="prog__container">    The   process.pid   property returns the PID of the process.  \n    console.log(`This process is pid ${process.pid}`);\n    \n  </section>	http://nodejs.org/api/all.html#all_process_pid
process pid	R	process.pid										http://nodejs.org/api/all.html#all_process_pid
process.platform	A										<section class="prog__container">    The   process.platform   property returns a string identifying the operating\nsystem platform on which the Node.js process is running. For instance\n  &#39;darwin&#39;  ,   &#39;freebsd&#39;  ,   &#39;linux&#39;  ,   &#39;sunos&#39;   or   &#39;win32&#39;    \n    console.log(`This platform is ${process.platform}`);\n    \n  </section>	http://nodejs.org/api/all.html#all_process_platform
process platform	R	process.platform										http://nodejs.org/api/all.html#all_process_platform
process.release	A										<section class="prog__container">    The   process.release   property returns an Object containing metadata related to\nthe current release, including URLs for the source tarball and headers-only\ntarball.  \n    process.release   contains the following properties:  \n  \n    name   {String} A value that will always be   &#39;node&#39;   for Node.js. For\nlegacy io.js releases, this will be   &#39;io.js&#39;  .  \n    sourceUrl   {String} an absolute URL pointing to a     .tar.gz     file containing\nthe source code of the current release.  \n    headersUrl  {String} an absolute URL pointing to a     .tar.gz     file containing\nonly the source header files for the current release. This file is\nsignificantly smaller than the full source file and can be used for compiling\nNode.js native add-ons.  \n    libUrl   {String} an absolute URL pointing to a     node.lib     file matching the\narchitecture and version of the current release. This file is used for\ncompiling Node.js native add-ons.   This property is only present on Windows\nbuilds of Node.js and will be missing on all other platforms.    \n    lts   {String} a string label identifying the   LTS   label for this release.\nIf the Node.js release is not an LTS release, this will be   undefined  .  \n  \n  For example:  \n    {\n  name: &#39;node&#39;,\n  lts: &#39;Argon&#39;,\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\n}\n    \n  In custom builds from non-release versions of the source tree, only the\n  name   property may be present. The additional properties should not be\nrelied upon to exist.  \n  </section>	http://nodejs.org/api/all.html#all_process_release
process release	R	process.release										http://nodejs.org/api/all.html#all_process_release
process.stderr	A										<section class="prog__container">    The   process.stderr   property returns a   Writable   stream equivalent to or\nassociated with   stderr   (fd   2  ).  \n  Note:   process.stderr   and   process.stdout   differ from other Node.js streams\nin several ways:  \n  \n  They cannot be closed (    end()     will throw).  \n  They never emit the     &#39;finish&#39;     event.  \n  Writes   can   block when output is redirected to a file.  \n  Note that disks are fast and operating systems normally employ write-back\ncaching so this is very uncommon.  \n  \n  \n  Writes on UNIX   will   block by default if output is going to a TTY\n(a terminal).  \n  Windows functionality differs. Writes block except when output is going to a\nTTY.  \n  \n  To check if Node.js is being run in a TTY context, read the   isTTY   property\non   process.stderr  ,   process.stdout  , or   process.stdin  :  \n  </section>	http://nodejs.org/api/all.html#all_process_stderr
process stderr	R	process.stderr										http://nodejs.org/api/all.html#all_process_stderr
process.stdin	A										<section class="prog__container">    The   process.stdin   property returns a   Readable   stream equivalent to or\nassociated with   stdin   (fd   0  ).  \n  For example:  \n    process.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\n  process.stdout.write(&#39;end&#39;);\n});\n    \n  As a   Readable   stream,   process.stdin   can also be used in &quot;old&quot; mode that\nis compatible with scripts written for Node.js prior to v0.10.\nFor more information see   Stream compatibility  .  \n    Note  : In &quot;old&quot; streams mode the   stdin   stream is paused by default, so one\nmust call   process.stdin.resume()   to read from it. Note also that calling\n  process.stdin.resume()   itself would switch stream to &quot;old&quot; mode.  \n  </section>	http://nodejs.org/api/all.html#all_process_stdin
process stdin	R	process.stdin										http://nodejs.org/api/all.html#all_process_stdin
process.stdout	A										<section class="prog__container">    The   process.stdout   property returns a   Writable   stream equivalent to or\nassociated with   stdout   (fd   1  ).  \n  For example:  \n    console.log = (msg) =&gt; {\n  process.stdout.write(`${msg}\n`);\n};\n    \n  Note:   process.stderr   and   process.stdout   differ from other Node.js streams\nin several ways:  \n  \n  They cannot be closed (    end()     will throw).  \n  They never emit the     &#39;finish&#39;     event.  \n  Writes   can   block when output is redirected to a file.  \n  Note that disks are fast and operating systems normally employ write-back\ncaching so this is very uncommon.  \n  \n  \n  Writes on UNIX   will   block by default if output is going to a TTY\n(a terminal).  \n  Windows functionality differs. Writes block except when output is going to a\nTTY.  \n  \n  To check if Node.js is being run in a TTY context, read the   isTTY   property\non   process.stderr  ,   process.stdout  , or   process.stdin  :  \n  </section>	http://nodejs.org/api/all.html#all_process_stdout
process stdout	R	process.stdout										http://nodejs.org/api/all.html#all_process_stdout
process.stdout.stdout`	A										<section class="prog__container">    The   process.stderr   and   process.stdout   streams are blocking when outputting\nto TTYs (terminals) on OS X as a workaround for the operating system&#39;s small,\n1kb buffer size. This is to prevent interleaving between   stdout   and   stderr  .  \n  To check if Node.js is being run in a   TTY   context, check the   isTTY  \nproperty on   process.stderr  ,   process.stdout  , or   process.stdin  .  \n  For instance:  \n    $ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n    \n  See the   TTY   documentation for more information.  \n  </section>	http://nodejs.org/api/all.html#all_process_stdout_stdout`
process stdout stdout`	R	process.stdout stdout`										http://nodejs.org/api/all.html#all_process_stdout_stdout`
process.title	A										<section class="prog__container">    The   process.title   property returns the current process title (i.e. returns\nthe current value of   ps  ). Assigning a new value to   process.title   modifies\nthe current value of   ps  .  \n    Note  : When a new value is assigned, different platforms will impose different\nmaximum length restrictions on the title. Usually such restrictions are quite\nlimited. For instance, on Linux and OS X,   process.title   is limited to the size\nof the binary name plus the length of the command line arguments because setting\nthe   process.title   overwrites the   argv   memory of the process. Node.js v0.8\nallowed for longer process title strings by also overwriting the   environ  \nmemory but that was potentially insecure and confusing in some (rather obscure)\ncases.  \n  </section>	http://nodejs.org/api/all.html#all_process_title
process title	R	process.title										http://nodejs.org/api/all.html#all_process_title
process.version	A										<section class="prog__container">    The   process.version   property returns the Node.js version string.  \n    console.log(`Version: ${process.version}`);\n    \n  </section>	http://nodejs.org/api/all.html#all_process_version
process version	R	process.version										http://nodejs.org/api/all.html#all_process_version
process.versions	A										<section class="prog__container">    The   process.versions   property returns an object listing the version strings of\nNode.js and its dependencies.  \n    console.log(process.versions);\n    \n  Will generate output similar to:  \n    {\n  http_parser: &#39;2.3.0&#39;,\n  node: &#39;1.1.1&#39;,\n  v8: &#39;4.1.0.14&#39;,\n  uv: &#39;1.3.0&#39;,\n  zlib: &#39;1.2.8&#39;,\n  ares: &#39;1.10.0-DEV&#39;,\n  modules: &#39;43&#39;,\n  icu: &#39;55.1&#39;,\n  openssl: &#39;1.0.1k&#39;,\n  unicode: &#39;8.0&#39;,\n  cldr: &#39;29.0&#39;,\n  tz: &#39;2016b&#39; }\n    \n  </section>	http://nodejs.org/api/all.html#all_process_versions
process versions	R	process.versions										http://nodejs.org/api/all.html#all_process_versions
\_\_dirname	A										<section class="prog__container">    \n  {String}  \n  \n  The name of the directory that the currently executing script resides in.  \n  Example: running   node example.js   from   /Users/mjr    \n    console.log(__dirname);\n// Prints: /Users/mjr\n    \n    __dirname   isn&#39;t actually a global but rather local to each module.  \n  For instance, given two modules:   a   and   b  , where   b   is a dependency of\n  a   and there is a directory structure of:  \n  \n    /Users/mjr/app/a.js    \n    /Users/mjr/app/node_modules/b/b.js    \n  \n  References to   __dirname   within   b.js   will return\n  /Users/mjr/app/node_modules/b   while references to   __dirname   within   a.js  \nwill return   /Users/mjr/app  .  \n  </section>	http://nodejs.org/api/all.html#all_\_\_dirname
\_\_dirname	A										<section class="prog__container">    \n  {String}  \n  \n  The name of the directory that the currently executing script resides in.  \n  Example: running   node example.js   from   /Users/mjr    \n    console.log(__dirname);\n// Prints: /Users/mjr\n    \n    __dirname   isn&#39;t actually a global but rather local to each module.  \n  For instance, given two modules:   a   and   b  , where   b   is a dependency of\n  a   and there is a directory structure of:  \n  \n    /Users/mjr/app/a.js    \n    /Users/mjr/app/node_modules/b/b.js    \n  \n  References to   __dirname   within   b.js   will return\n  /Users/mjr/app/node_modules/b   while references to   __dirname   within   a.js  \nwill return   /Users/mjr/app  .  \n  </section>	http://nodejs.org/api/all.html#all_\_\_dirname
\_\_filename	A										<section class="prog__container">    \n  {String}  \n  \n  The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.  \n  Example: running   node example.js   from   /Users/mjr    \n    console.log(__filename);\n// Prints: /Users/mjr/example.js\n    \n    __filename   isn&#39;t actually a global but rather local to each module.  \n  </section>	http://nodejs.org/api/all.html#all_\_\_filename
\_\_filename	A										<section class="prog__container">    \n  {String}  \n  \n  The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.  \n  Example: running   node example.js   from   /Users/mjr    \n    console.log(__filename);\n// Prints: /Users/mjr/example.js\n    \n    __filename   isn&#39;t actually a global but rather local to each module.  \n  </section>	http://nodejs.org/api/all.html#all_\_\_filename
exports	A										<section class="prog__container">    A reference to the   module.exports   that is shorter to type.\nSee   module system documentation   for details on when to use   exports   and\nwhen to use   module.exports  .  \n    exports   isn&#39;t actually a global but rather local to each module.  \n  See the   module system documentation   for more information.  \n  </section>	http://nodejs.org/api/all.html#all_exports
exports	A										<section class="prog__container">    A reference to the   module.exports   that is shorter to type.\nSee   module system documentation   for details on when to use   exports   and\nwhen to use   module.exports  .  \n    exports   isn&#39;t actually a global but rather local to each module.  \n  See the   module system documentation   for more information.  \n  </section>	http://nodejs.org/api/all.html#all_exports
module	A										<section class="prog__container">    \n  {Object}  \n  \n  A reference to the current module. In particular\n  module.exports   is used for defining what a module exports and makes\navailable through   require()  .  \n    module   isn&#39;t actually a global but rather local to each module.  \n  See the   module system documentation   for more information.  \n  </section>	http://nodejs.org/api/all.html#all_module
module	A										<section class="prog__container">    \n  {Object}  \n  \n  A reference to the current module. In particular\n  module.exports   is used for defining what a module exports and makes\navailable through   require()  .  \n    module   isn&#39;t actually a global but rather local to each module.  \n  See the   module system documentation   for more information.  \n  </section>	http://nodejs.org/api/all.html#all_module
require	A										<section class="prog__container">    \n  {Function}  \n  \n  To require modules. See the   Modules   section.    require   isn&#39;t actually a\nglobal but rather local to each module.  \n  </section>	http://nodejs.org/api/all.html#all_require
require	A										<section class="prog__container">    \n  {Function}  \n  \n  To require modules. See the   Modules   section.    require   isn&#39;t actually a\nglobal but rather local to each module.  \n  </section>	http://nodejs.org/api/all.html#all_require
require.resolve	A										<section class="prog__container">    Use the internal   require()   machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.  \n  <pre><code>require.resolve()</code></pre></section>	http://nodejs.org/api/all.html#all_require_resolve
require resolve	R	require.resolve										http://nodejs.org/api/all.html#all_require_resolve
require.cache	A										<section class="prog__container">    Modules are cached in this object when they are required. By deleting a key\nvalue from this object, the next   require   will reload the module. Note that\nthis does not apply to   native addons  , for which reloading will result in an\nError.  \n  </section>	http://nodejs.org/api/all.html#all_require_cache
require cache	R	require.cache										http://nodejs.org/api/all.html#all_require_cache
require.extensions	A										<section class="prog__container">    Instruct   require   on how to handle certain file extensions.  \n  Process files with the extension   .sjs   as   .js  :  \n    require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\n    \n    Deprecated    In the past, this list has been used to load\nnon-JavaScript modules into Node.js by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node.js program, or compiling them to\nJavaScript ahead of time.  \n  Since the module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.  \n  Note that the number of file system operations that the module system\nhas to perform in order to resolve a   require(...)   statement to a\nfilename scales linearly with the number of registered extensions.  \n  In other words, adding extensions slows down the module loader and\nshould be discouraged.  \n  </section>	http://nodejs.org/api/all.html#all_require_extensions
require extensions	R	require.extensions										http://nodejs.org/api/all.html#all_require_extensions
addons	A										<section class="prog__container">    Node.js Addons are dynamically-linked shared objects, written in C or C++, that\ncan be loaded into Node.js using the     require()     function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.  \n  At the moment, the method for implementing Addons is rather complicated,\ninvolving knowledge of several components and APIs :  \n  \n    V8: the C++ library Node.js currently uses to provide the\nJavaScript implementation. V8 provides the mechanisms for creating objects,\ncalling functions, etc. V8&#39;s API is documented mostly in the\n  v8.h   header file (  deps/v8/include/v8.h   in the Node.js source\ntree), which is also available   online  .  \n  \n      libuv  : The C library that implements the Node.js event loop, its worker\nthreads and all of the asynchronous behaviors of the platform. It also\nserves as a cross-platform abstraction library, giving easy, POSIX-like\naccess across all major operating systems to many common system tasks, such\nas interacting with the filesystem, sockets, timers and system events. libuv\nalso provides a pthreads-like threading abstraction that may be used to\npower more sophisticated asynchronous Addons that need to move beyond the\nstandard event loop. Addon authors are encouraged to think about how to\navoid blocking the event loop with I/O or other time-intensive tasks by\noff-loading work via libuv to non-blocking system operations, worker threads\nor a custom use of libuv&#39;s threads.  \n  \n    Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs\nthat Addons can use &mdash; the most important of which is the\n  node::ObjectWrap   class.  \n  \n    Node.js includes a number of other statically linked libraries including\nOpenSSL. These other libraries are located in the   deps/   directory in the\nNode.js source tree. Only the V8 and OpenSSL symbols are purposefully\nre-exported by Node.js and may be used to various extents by Addons.\nSee   Linking to Node.js&#39; own dependencies   for additional information.  \n  \n  \n  All of the following examples are available for   download   and may\nbe used as a starting-point for your own Addon.  \n  </section>	http://nodejs.org/api/all.html#all_addons
addons	A										<section class="prog__container">    Node.js Addons are dynamically-linked shared objects, written in C or C++, that\ncan be loaded into Node.js using the     require()     function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.  \n  At the moment, the method for implementing Addons is rather complicated,\ninvolving knowledge of several components and APIs :  \n  \n    V8: the C++ library Node.js currently uses to provide the\nJavaScript implementation. V8 provides the mechanisms for creating objects,\ncalling functions, etc. V8&#39;s API is documented mostly in the\n  v8.h   header file (  deps/v8/include/v8.h   in the Node.js source\ntree), which is also available   online  .  \n  \n      libuv  : The C library that implements the Node.js event loop, its worker\nthreads and all of the asynchronous behaviors of the platform. It also\nserves as a cross-platform abstraction library, giving easy, POSIX-like\naccess across all major operating systems to many common system tasks, such\nas interacting with the filesystem, sockets, timers and system events. libuv\nalso provides a pthreads-like threading abstraction that may be used to\npower more sophisticated asynchronous Addons that need to move beyond the\nstandard event loop. Addon authors are encouraged to think about how to\navoid blocking the event loop with I/O or other time-intensive tasks by\noff-loading work via libuv to non-blocking system operations, worker threads\nor a custom use of libuv&#39;s threads.  \n  \n    Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs\nthat Addons can use &mdash; the most important of which is the\n  node::ObjectWrap   class.  \n  \n    Node.js includes a number of other statically linked libraries including\nOpenSSL. These other libraries are located in the   deps/   directory in the\nNode.js source tree. Only the V8 and OpenSSL symbols are purposefully\nre-exported by Node.js and may be used to various extents by Addons.\nSee   Linking to Node.js&#39; own dependencies   for additional information.  \n  \n  \n  All of the following examples are available for   download   and may\nbe used as a starting-point for your own Addon.  \n  </section>	http://nodejs.org/api/all.html#all_addons
addons.js	A										<section class="prog__container">    Each of the examples illustrated in this document make direct use of the\nNode.js and V8 APIs for implementing Addons. It is important to understand\nthat the V8 API can, and has, changed dramatically from one V8 release to the\nnext (and one major Node.js release to the next). With each change, Addons may\nneed to be updated and recompiled in order to continue functioning. The Node.js\nrelease schedule is designed to minimize the frequency and impact of such\nchanges but there is little that Node.js can do currently to ensure stability\nof the V8 APIs.  \n  The   Native Abstractions for Node.js   (or   nan  ) provide a set of tools that\nAddon developers are recommended to use to keep compatibility between past and\nfuture releases of V8 and Node.js. See the   nan     examples   for an\nillustration of how it can be used.  \n  </section>	http://nodejs.org/api/all.html#all_addons_js
addons js	R	addons.js										http://nodejs.org/api/all.html#all_addons_js
assert	A										<section class="prog__container">    The   assert   module provides a simple set of assertion tests that can be used to\ntest invariants. The module is intended for internal use by Node.js, but can be\nused in application code via   require(&#39;assert&#39;)  . However,   assert   is not a\ntesting framework, and is not intended to be used as a general purpose assertion\nlibrary.  \n  The API for the   assert   module is   Locked  . This means that there will be no\nadditions or changes to any of the methods implemented and exposed by\nthe module.  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_assert
assert	A										<section class="prog__container">    The   assert   module provides a simple set of assertion tests that can be used to\ntest invariants. The module is intended for internal use by Node.js, but can be\nused in application code via   require(&#39;assert&#39;)  . However,   assert   is not a\ntesting framework, and is not intended to be used as a general purpose assertion\nlibrary.  \n  The API for the   assert   module is   Locked  . This means that there will be no\nadditions or changes to any of the methods implemented and exposed by\nthe module.  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_assert
assert.assert	A										<section class="prog__container">    An alias of     assert.ok()     .  \n    const assert = require(&#39;assert&#39;);\n\nassert(true);\n// OK\nassert(1);\n// OK\nassert(false);\n// throws &quot;AssertionError: false == true&quot;\nassert(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert(false, &#39;it\&#39;s false&#39;);\n// throws &quot;AssertionError: it&#39;s false&quot;\n    \n  <pre><code>assert(value[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_assert_value_message
assert assert	R	assert.assert										http://nodejs.org/api/all.html#all_assert_assert_value_message
assert.deepEqual	A										<section class="prog__container">    Tests for deep equality between the   actual   and   expected   parameters.\nPrimitive values are compared with the equal comparison operator (   ==   ).  \n  Only enumerable &quot;own&quot; properties are considered. The   deepEqual()  \nimplementation does not test object prototypes, attached symbols, or\nnon-enumerable properties. This can lead to some potentially surprising\nresults. For example, the following example does not throw an   AssertionError  \nbecause the properties on the     Error     object are non-enumerable:  \n    // WARNING: This does not throw an AssertionError!\nassert.deepEqual(Error(&#39;a&#39;), Error(&#39;b&#39;));\n    \n  &quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare evaluated also:  \n    const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n// values of b are different\n\nassert.deepEqual(obj1, obj3);\n// OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\n// Prototypes are ignored\n    \n  If the values are not equal, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is undefined, a default error message is assigned.  \n  <pre><code>assert.deepEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_deepequal_actual_expected_message
assert deepEqual	R	assert.deepEqual										http://nodejs.org/api/all.html#all_assert_deepequal_actual_expected_message
assert.deepStrictEqual	A										<section class="prog__container">    Generally identical to   assert.deepEqual()   with two exceptions. First,\nprimitive values are compared using the strict equality operator (   ===   ).\nSecond, object comparisons include a strict equality check of their prototypes.  \n    const assert = require(&#39;assert&#39;);\n\nassert.deepEqual({a:1}, {a:&#39;1&#39;});\n// OK, because 1 == &#39;1&#39;\n\nassert.deepStrictEqual({a:1}, {a:&#39;1&#39;});\n// AssertionError: { a: 1 } deepStrictEqual { a: &#39;1&#39; }\n// because 1 !== &#39;1&#39; using strict equality\n    \n  If the values are not equal, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is undefined, a default error message is assigned.  \n  <pre><code>assert.deepStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_deepstrictequal_actual_expected_message
assert deepStrictEqual	R	assert.deepStrictEqual										http://nodejs.org/api/all.html#all_assert_deepstrictequal_actual_expected_message
assert.doesNotThrow	A										<section class="prog__container">    Asserts that the function   block   does not throw an error. See\n    assert.throws()     for more details.  \n  When   assert.doesNotThrow()   is called, it will immediately call the   block  \nfunction.  \n  If an error is thrown and it is the same type as that specified by the   error  \nparameter, then an   AssertionError   is thrown. If the error is of a different\ntype, or if the   error   parameter is undefined, the error is propagated back\nto the caller.  \n  The following, for instance, will throw the     TypeError     because there is no\nmatching error type in the assertion:  \n    assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  SyntaxError\n);\n    \n  However, the following will result in an   AssertionError   with the message\n&#39;Got unwanted exception (TypeError)..&#39;:  \n    assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError\n);\n    \n  If an   AssertionError   is thrown and a value is provided for the   message  \nparameter, the value of   message   will be appended to the   AssertionError  \nmessage:  \n    assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError,\n  &#39;Whoops&#39;\n);\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\n    \n  <pre><code>assert.doesNotThrow(block[, error][, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_doesnotthrow_block_error_message
assert doesNotThrow	R	assert.doesNotThrow										http://nodejs.org/api/all.html#all_assert_doesnotthrow_block_error_message
assert.equal	A										<section class="prog__container">    Tests shallow, coercive equality between the   actual   and   expected   parameters\nusing the equal comparison operator (   ==   ).  \n    const assert = require(&#39;assert&#39;);\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, &#39;1&#39;);\n// OK, 1 == &#39;1&#39;\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({a: {b: 1}}, {a: {b: 1}});\n//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n    \n  If the values are not equal, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is undefined, a default error message is assigned.  \n  <pre><code>assert.equal(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_equal_actual_expected_message
assert equal	R	assert.equal										http://nodejs.org/api/all.html#all_assert_equal_actual_expected_message
assert.fail	A										<section class="prog__container">    Throws an   AssertionError  . If   message   is falsy, the error message is set as\nthe values of   actual   and   expected   separated by the provided   operator  .\nOtherwise, the error message is the value of   message  .  \n    const assert = require(&#39;assert&#39;);\n\nassert.fail(1, 2, undefined, &#39;&gt;&#39;);\n// AssertionError: 1 &gt; 2\n\nassert.fail(1, 2, &#39;whoops&#39;, &#39;&gt;&#39;);\n// AssertionError: whoops\n    \n  <pre><code>assert.fail(actual, expected, message, operator)</code></pre></section>	http://nodejs.org/api/all.html#all_assert_fail_actual_expected_message_operator
assert fail	R	assert.fail										http://nodejs.org/api/all.html#all_assert_fail_actual_expected_message_operator
assert.ifError	A										<section class="prog__container">    Throws   value   if   value   is truthy. This is useful when testing the   error  \nargument in callbacks.  \n    const assert = require(&#39;assert&#39;);\n\nassert.ifError(0);\n// OK\nassert.ifError(1);\n// Throws 1\nassert.ifError(&#39;error&#39;);\n// Throws &#39;error&#39;\nassert.ifError(new Error());\n// Throws Error\n    \n  <pre><code>assert.ifError(value)</code></pre></section>	http://nodejs.org/api/all.html#all_assert_iferror_value
assert ifError	R	assert.ifError										http://nodejs.org/api/all.html#all_assert_iferror_value
assert.notDeepEqual	A										<section class="prog__container">    Tests for any deep inequality. Opposite of     assert.deepEqual()    .  \n    const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK, obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK, obj1 and obj2 are not deeply equal\n    \n  If the values are deeply equal, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is undefined, a default error message is assigned.  \n  <pre><code>assert.notDeepEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notdeepequal_actual_expected_message
assert notDeepEqual	R	assert.notDeepEqual										http://nodejs.org/api/all.html#all_assert_notdeepequal_actual_expected_message
assert.notDeepStrictEqual	A										<section class="prog__container">    Tests for deep strict inequality. Opposite of     assert.deepStrictEqual()    .  \n    const assert = require(&#39;assert&#39;);\n\nassert.notDeepEqual({a:1}, {a:&#39;1&#39;});\n// AssertionError: { a: 1 } notDeepEqual { a: &#39;1&#39; }\n\nassert.notDeepStrictEqual({a:1}, {a:&#39;1&#39;});\n// OK\n    \n  If the values are deeply and strictly equal, an   AssertionError   is thrown\nwith a   message   property set equal to the value of the   message   parameter. If\nthe   message   parameter is undefined, a default error message is assigned.  \n  <pre><code>assert.notDeepStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notdeepstrictequal_actual_expected_message
assert notDeepStrictEqual	R	assert.notDeepStrictEqual										http://nodejs.org/api/all.html#all_assert_notdeepstrictequal_actual_expected_message
assert.notEqual	A										<section class="prog__container">    Tests shallow, coercive inequality with the not equal comparison operator\n(   !=   ).  \n    const assert = require(&#39;assert&#39;);\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, &#39;1&#39;);\n// AssertionError: 1 != &#39;1&#39;\n    \n  If the values are equal, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is undefined, a default error message is assigned.  \n  <pre><code>assert.notEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notequal_actual_expected_message
assert notEqual	R	assert.notEqual										http://nodejs.org/api/all.html#all_assert_notequal_actual_expected_message
assert.notStrictEqual	A										<section class="prog__container">    Tests strict inequality as determined by the strict not equal operator\n(   !==   ).  \n    const assert = require(&#39;assert&#39;);\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError: 1 !== 1\n\nassert.notStrictEqual(1, &#39;1&#39;);\n// OK\n    \n  If the values are strictly equal, an   AssertionError   is thrown with a\n  message   property set equal to the value of the   message   parameter. If the\n  message   parameter is undefined, a default error message is assigned.  \n  <pre><code>assert.notStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notstrictequal_actual_expected_message
assert notStrictEqual	R	assert.notStrictEqual										http://nodejs.org/api/all.html#all_assert_notstrictequal_actual_expected_message
assert.ok	A										<section class="prog__container">    Tests if   value   is truthy. It is equivalent to\n  assert.equal(!!value, true, message)  .  \n  If   value   is not truthy, an   AssertionError   is thrown with a   message  \nproperty set equal to the value of the   message   parameter. If the   message  \nparameter is   undefined  , a default error message is assigned.  \n    const assert = require(&#39;assert&#39;);\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\nassert.ok(false);\n// throws &quot;AssertionError: false == true&quot;\nassert.ok(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert.ok(false, &#39;it\&#39;s false&#39;);\n// throws &quot;AssertionError: it&#39;s false&quot;\n    \n  <pre><code>assert.ok(value[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_ok_value_message
assert ok	R	assert.ok										http://nodejs.org/api/all.html#all_assert_ok_value_message
assert.strictEqual	A										<section class="prog__container">    Tests strict equality as determined by the strict equality operator (   ===   ).  \n    const assert = require(&#39;assert&#39;);\n\nassert.strictEqual(1, 2);\n// AssertionError: 1 === 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual(1, &#39;1&#39;);\n// AssertionError: 1 === &#39;1&#39;\n    \n  If the values are not strictly equal, an   AssertionError   is thrown with a\n  message   property set equal to the value of the   message   parameter. If the\n  message   parameter is undefined, a default error message is assigned.  \n  <pre><code>assert.strictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_strictequal_actual_expected_message
assert strictEqual	R	assert.strictEqual										http://nodejs.org/api/all.html#all_assert_strictequal_actual_expected_message
assert.throws	A										<section class="prog__container">    Expects the function   block   to throw an error.  \n  If specified,   error   can be a constructor,     RegExp    , or validation\nfunction.  \n  If specified,   message   will be the message provided by the   AssertionError   if\nthe block fails to throw.  \n  Validate instanceof using constructor:  \n    assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  Error\n);\n    \n  Validate error message using     RegExp    :  \n    assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  /value/\n);\n    \n  Custom error validation:  \n    assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &#39;unexpected error&#39;\n);\n    \n  Note that   error   can not be a string. If a string is provided as the second\nargument, then   error   is assumed to be omitted and the string will be used for\n  message   instead. This can lead to easy-to-miss mistakes:  \n    // THIS IS A MISTAKE! DO NOT DO THIS!\nassert.throws(myFunction, &#39;missing foo&#39;, &#39;did not throw with expected message&#39;);\n\n// Do this instead.\nassert.throws(myFunction, /missing foo/, &#39;did not throw with expected message&#39;);\n    \n  \n  \n  <pre><code>assert.throws(block[, error][, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_throws_block_error_message
assert throws	R	assert.throws										http://nodejs.org/api/all.html#all_assert_throws_block_error_message
buffer	A										<section class="prog__container">    Prior to the introduction of     TypedArray     in ECMAScript 2015 (ES6), the\nJavaScript language had no mechanism for reading or manipulating streams\nof binary data. The   Buffer   class was introduced as part of the Node.js\nAPI to make it possible to interact with octet streams in the context of things\nlike TCP streams and file system operations.  \n  Now that     TypedArray     has been added in ES6, the   Buffer   class implements the\n    Uint8Array     API in a manner that is more optimized and suitable for Node.js&#39;\nuse cases.  \n  Instances of the   Buffer   class are similar to arrays of integers but\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\nThe size of the   Buffer   is established when it is created and cannot be\nresized.  \n  The   Buffer   class is a global within Node.js, making it unlikely that one\nwould need to ever use   require(&#39;buffer&#39;).Buffer  .  \n  Examples:  \n    // Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing ASCII bytes [0x74, 0x65, 0x73, 0x74].\nconst buf5 = Buffer.from(&#39;test&#39;);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf6 = Buffer.from(&#39;tést&#39;, &#39;utf8&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_buffer
buffer	A										<section class="prog__container">    Prior to the introduction of     TypedArray     in ECMAScript 2015 (ES6), the\nJavaScript language had no mechanism for reading or manipulating streams\nof binary data. The   Buffer   class was introduced as part of the Node.js\nAPI to make it possible to interact with octet streams in the context of things\nlike TCP streams and file system operations.  \n  Now that     TypedArray     has been added in ES6, the   Buffer   class implements the\n    Uint8Array     API in a manner that is more optimized and suitable for Node.js&#39;\nuse cases.  \n  Instances of the   Buffer   class are similar to arrays of integers but\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\nThe size of the   Buffer   is established when it is created and cannot be\nresized.  \n  The   Buffer   class is a global within Node.js, making it unlikely that one\nwould need to ever use   require(&#39;buffer&#39;).Buffer  .  \n  Examples:  \n    // Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing ASCII bytes [0x74, 0x65, 0x73, 0x74].\nconst buf5 = Buffer.from(&#39;test&#39;);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf6 = Buffer.from(&#39;tést&#39;, &#39;utf8&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_buffer
buffer.transcode	A										<section class="prog__container">    Re-encodes the given   Buffer   instance from one character encoding to another.\nReturns a new   Buffer   instance.  \n  Throws if the   fromEnc   or   toEnc   specify invalid character encodings or if\nconversion from   fromEnc   to   toEnc   is not permitted.  \n  The transcoding process will use substitution characters if a given byte\nsequence cannot be adequately represented in the target encoding. For instance:  \n    const newBuf = buffer.transcode(Buffer.from(&#39;€&#39;), &#39;utf8&#39;, &#39;ascii&#39;);\nconsole.log(newBuf.toString(&#39;ascii&#39;));\n// Prints: &#39;?&#39;\n    \n  Because the Euro (  €  ) sign is not representable in US-ASCII, it is replaced\nwith   ?   in the transcoded   Buffer  .  \n  <pre><code>buffer.transcode(source, fromEnc, toEnc)</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_transcode_source_fromenc_toenc
buffer transcode	R	buffer.transcode										http://nodejs.org/api/all.html#all_buffer_transcode_source_fromenc_toenc
buffer.INSPECT_MAX_BYTES	A										<section class="prog__container">    Returns the maximum number of bytes that will be returned when\n  buf.inspect()   is called. This can be overridden by user modules. See\n    util.inspect()     for more details on   buf.inspect()   behavior.  \n  Note that this is a property on the   buffer   module as returned by\n  require(&#39;buffer&#39;)  , not on the   Buffer   global or a   Buffer   instance.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_inspect_max_bytes
buffer INSPECT_MAX_BYTES	R	buffer.INSPECT_MAX_BYTES										http://nodejs.org/api/all.html#all_buffer_inspect_max_bytes
buffer.kMaxLength	A										<section class="prog__container">    On 32-bit architectures, this value is   (2^30)-1   (~1GB).\nOn 64-bit architectures, this value is   (2^31)-1   (~2GB).  \n  </section>	http://nodejs.org/api/all.html#all_buffer_kmaxlength
buffer kMaxLength	R	buffer.kMaxLength										http://nodejs.org/api/all.html#all_buffer_kmaxlength
Buffer	A										<section class="prog__container">    The   Buffer   class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_array
Buffer	A										<section class="prog__container">    The   Buffer   class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_array
Buffer.compare	A										<section class="prog__container">    Compares   buf   with   target   and returns a number indicating whether   buf  \ncomes before, after, or is the same as   target   in sort order.\nComparison is based on the actual sequence of bytes in each   Buffer  .  \n  \n    0   is returned if   target   is the same as   buf    \n    1   is returned if   target   should come   before     buf   when sorted.  \n    -1   is returned if   target   should come   after     buf   when sorted.  \n  \n  Examples:  \n    const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;BCD&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\n// Prints: 0\nconsole.log(buf1.compare(buf1));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2));\n\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n\n// Prints: 1\nconsole.log(buf2.compare(buf1));\n\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n\n// Prints: [ &lt;Buffer 41 42 43&gt;, &lt;Buffer 41 42 43 44&gt;, &lt;Buffer 42 43 44&gt; ]\n// (This result is equal to: [buf1, buf3, buf2])\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n    \n  The optional   targetStart  ,   targetEnd  ,   sourceStart  , and   sourceEnd  \narguments can be used to limit the comparison to specific ranges within   target  \nand   buf   respectively.  \n  Examples:  \n    const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\n// Prints: 0\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n\n// Prints: 1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n    \n  A   RangeError   will be thrown if:   targetStart &lt; 0  ,   sourceStart &lt; 0  ,\n  targetEnd &gt; target.byteLength   or   sourceEnd &gt; source.byteLength  .  \n  <pre><code>buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer compare	R	Buffer.compare										http://nodejs.org/api/all.html#all_buffer_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer.copy	A										<section class="prog__container">    Copies data from a region of   buf   to a region in   target   even if the   target  \nmemory region overlaps with   buf  .  \n  Example: Create two   Buffer   instances,   buf1   and   buf2  , and copy   buf1   from\nbyte 16 through byte 19 into   buf2  , starting at the 8th byte in   buf2    \n    const buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill(&#39;!&#39;);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nbuf1.copy(buf2, 8, 16, 20);\n\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, 25));\n    \n  Example: Create a single   Buffer   and copy data from one region to an\noverlapping region within the same   Buffer    \n    const buf = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\n// Prints: efghijghijklmnopqrstuvwxyz\nconsole.log(buf.toString());\n    \n  <pre><code>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_copy_target_targetstart_sourcestart_sourceend
Buffer copy	R	Buffer.copy										http://nodejs.org/api/all.html#all_buffer_copy_target_targetstart_sourcestart_sourceend
Buffer.entries	A										<section class="prog__container">    Creates and returns an   iterator   of   [index, byte]   pairs from the contents of\n  buf  .  \n  Example: Log the entire contents of a   Buffer    \n    const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\nfor (var pair of buf.entries()) {\n  console.log(pair);\n}\n    \n  <pre><code>buf.entries()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_entries
Buffer entries	R	Buffer.entries										http://nodejs.org/api/all.html#all_buffer_entries
Buffer.equals	A										<section class="prog__container">    Returns   true   if both   buf   and   otherBuffer   have exactly the same bytes,\n  false   otherwise.  \n  Examples:  \n    const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;414243&#39;, &#39;hex&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\n// Prints: true\nconsole.log(buf1.equals(buf2));\n\n// Prints: false\nconsole.log(buf1.equals(buf3));\n    \n  <pre><code>buf.equals(otherBuffer)</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_equals_otherbuffer
Buffer equals	R	Buffer.equals										http://nodejs.org/api/all.html#all_buffer_equals_otherbuffer
Buffer.fill	A										<section class="prog__container">    Fills   buf   with the specified   value  . If the   offset   and   end   are not given,\nthe entire   buf   will be filled. This is meant to be a small simplification to\nallow the creation and filling of a   Buffer   to be done on a single line.  \n  Example: Fill a   Buffer   with the ASCII character   &#39;h&#39;    \n    const b = Buffer.allocUnsafe(50).fill(&#39;h&#39;);\n\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\nconsole.log(b.toString());\n    \n    value   is coerced to a   uint32   value if it is not a String or Integer.  \n  If the final write of a   fill()   operation falls on a multi-byte character,\nthen only the first bytes of that character that fit into   buf   are written.  \n  Example: Fill a   Buffer   with a two-byte character  \n    // Prints: &lt;Buffer c8 a2 c8&gt;\nconsole.log(Buffer.allocUnsafe(3).fill(&#39;\u0222&#39;));\n    \n  <pre><code>buf.fill(value[, offset[, end]][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_fill_value_offset_end_encoding
Buffer fill	R	Buffer.fill										http://nodejs.org/api/all.html#all_buffer_fill_value_offset_end_encoding
Buffer.indexOf	A										<section class="prog__container">    If   value   is:  \n  \n  a string,   value   is interpreted according to the character encoding in\n  encoding  .  \n  a   Buffer  ,   value   will be used in its entirety. To compare a partial\n  Buffer   use     buf.slice()    .  \n  a number,   value   will be interpreted as an unsigned 8-bit integer\nvalue between   0   and   255  .  \n  \n  Examples:  \n    const buf = Buffer.from(&#39;this is a buffer&#39;);\n\n// Prints: 0\nconsole.log(buf.indexOf(&#39;this&#39;)));\n\n// Prints: 2\nconsole.log(buf.indexOf(&#39;is&#39;));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer&#39;)));\n\n// Prints: 8\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.indexOf(97));\n\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;)));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n\n\nconst utf16Buffer = Buffer.from(&#39;\u039a\u0391\u03a3\u03a3\u0395&#39;, &#39;ucs2&#39;);\n\n// Prints: 4\nconsole.log(utf16Buffer.indexOf(&#39;\u03a3&#39;, 0, &#39;ucs2&#39;));\n\n// Prints: 6\nconsole.log(utf16Buffer.indexOf(&#39;\u03a3&#39;, -4, &#39;ucs2&#39;));\n    \n  <pre><code>buf.indexOf(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_indexof_value_byteoffset_encoding
Buffer indexOf	R	Buffer.indexOf										http://nodejs.org/api/all.html#all_buffer_indexof_value_byteoffset_encoding
Buffer.includes	A										<section class="prog__container">    Equivalent to     buf.indexOf() !== -1    .  \n  Examples:  \n    const buf = Buffer.from(&#39;this is a buffer&#39;);\n\n// Prints: true\nconsole.log(buf.includes(&#39;this&#39;));\n\n// Prints: true\nconsole.log(buf.includes(&#39;is&#39;));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&#39;a buffer&#39;)));\n\n// Prints: true\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.includes(97));\n\n// Prints: false\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;)));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n\n// Prints: false\nconsole.log(buf.includes(&#39;this&#39;, 4));\n    \n  <pre><code>buf.includes(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_includes_value_byteoffset_encoding
Buffer includes	R	Buffer.includes										http://nodejs.org/api/all.html#all_buffer_includes_value_byteoffset_encoding
Buffer.keys	A										<section class="prog__container">    Creates and returns an   iterator   of   buf   keys (indices).  \n  Example:  \n    const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\nfor (var key of buf.keys()) {\n  console.log(key);\n}\n    \n  <pre><code>buf.keys()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_keys
Buffer keys	R	Buffer.keys										http://nodejs.org/api/all.html#all_buffer_keys
Buffer.lastIndexOf	A										<section class="prog__container">    Identical to     buf.indexOf()    , except   buf   is searched from back to front\ninstead of front to back.  \n  Examples:  \n    const buf = Buffer.from(&#39;this buffer is a buffer&#39;);\n\n// Prints: 0\nconsole.log(buf.lastIndexOf(&#39;this&#39;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;buffer&#39;)));\n\n// Prints: 15\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.lastIndexOf(97));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;yolo&#39;)));\n\n// Prints: 5\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 5));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 4));\n\n\nconst utf16Buffer = Buffer.from(&#39;\u039a\u0391\u03a3\u03a3\u0395&#39;, &#39;ucs2&#39;);\n\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf(&#39;\u03a3&#39;, null, &#39;ucs2&#39;));\n\n// Prints: 4\nconsole.log(utf16Buffer.lastIndexOf(&#39;\u03a3&#39;, -5, &#39;ucs2&#39;));\n    \n  <pre><code>buf.lastIndexOf(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_lastindexof_value_byteoffset_encoding
Buffer lastIndexOf	R	Buffer.lastIndexOf										http://nodejs.org/api/all.html#all_buffer_lastindexof_value_byteoffset_encoding
Buffer.readDoubleBE	A										<section class="prog__container">    Reads a 64-bit double from   buf   at the specified   offset   with specified\nendian format (  readDoubleBE()   returns big endian,   readDoubleLE()   returns\nlittle endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n    \n  <pre><code>buf.readDoubleBE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readdoublebe_offset_noassert
Buffer readDoubleBE	R	Buffer.readDoubleBE										http://nodejs.org/api/all.html#all_buffer_readdoublebe_offset_noassert
Buffer.readDoubleLE	A										<section class="prog__container">    Reads a 64-bit double from   buf   at the specified   offset   with specified\nendian format (  readDoubleBE()   returns big endian,   readDoubleLE()   returns\nlittle endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n    \n  <pre><code>buf.readDoubleLE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readdoublele_offset_noassert
Buffer readDoubleLE	R	Buffer.readDoubleLE										http://nodejs.org/api/all.html#all_buffer_readdoublele_offset_noassert
Buffer.readFloatBE	A										<section class="prog__container">    Reads a 32-bit float from   buf   at the specified   offset   with specified\nendian format (  readFloatBE()   returns big endian,   readFloatLE()   returns\nlittle endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readFloatLE(1, true));\n    \n  <pre><code>buf.readFloatBE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readfloatbe_offset_noassert
Buffer readFloatBE	R	Buffer.readFloatBE										http://nodejs.org/api/all.html#all_buffer_readfloatbe_offset_noassert
Buffer.readFloatLE	A										<section class="prog__container">    Reads a 32-bit float from   buf   at the specified   offset   with specified\nendian format (  readFloatBE()   returns big endian,   readFloatLE()   returns\nlittle endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readFloatLE(1, true));\n    \n  <pre><code>buf.readFloatLE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readfloatle_offset_noassert
Buffer readFloatLE	R	Buffer.readFloatLE										http://nodejs.org/api/all.html#all_buffer_readfloatle_offset_noassert
Buffer.readInt8	A										<section class="prog__container">    Reads a signed 8-bit integer from   buf   at the specified   offset  .  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Integers read from a   Buffer   are interpreted as two&#39;s complement signed values.  \n  Examples:  \n    const buf = Buffer.from([-1, 5]);\n\n// Prints: -1\nconsole.log(buf.readInt8(0));\n\n// Prints: 5\nconsole.log(buf.readInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt8(2));\n    \n  <pre><code>buf.readInt8(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint8_offset_noassert
Buffer readInt8	R	Buffer.readInt8										http://nodejs.org/api/all.html#all_buffer_readint8_offset_noassert
Buffer.readInt16BE	A										<section class="prog__container">    Reads a signed 16-bit integer from   buf   at the specified   offset   with\nthe specified endian format (  readInt16BE()   returns big endian,\n  readInt16LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Integers read from a   Buffer   are interpreted as two&#39;s complement signed values.  \n  Examples:  \n    const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n    \n  <pre><code>buf.readInt16BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint16be_offset_noassert
Buffer readInt16BE	R	Buffer.readInt16BE										http://nodejs.org/api/all.html#all_buffer_readint16be_offset_noassert
Buffer.readInt16LE	A										<section class="prog__container">    Reads a signed 16-bit integer from   buf   at the specified   offset   with\nthe specified endian format (  readInt16BE()   returns big endian,\n  readInt16LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Integers read from a   Buffer   are interpreted as two&#39;s complement signed values.  \n  Examples:  \n    const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n    \n  <pre><code>buf.readInt16LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint16le_offset_noassert
Buffer readInt16LE	R	Buffer.readInt16LE										http://nodejs.org/api/all.html#all_buffer_readint16le_offset_noassert
Buffer.readInt32BE	A										<section class="prog__container">    Reads a signed 32-bit integer from   buf   at the specified   offset   with\nthe specified endian format (  readInt32BE()   returns big endian,\n  readInt32LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Integers read from a   Buffer   are interpreted as two&#39;s complement signed values.  \n  Examples:  \n    const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n    \n  <pre><code>buf.readInt32BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint32be_offset_noassert
Buffer readInt32BE	R	Buffer.readInt32BE										http://nodejs.org/api/all.html#all_buffer_readint32be_offset_noassert
Buffer.readInt32LE	A										<section class="prog__container">    Reads a signed 32-bit integer from   buf   at the specified   offset   with\nthe specified endian format (  readInt32BE()   returns big endian,\n  readInt32LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Integers read from a   Buffer   are interpreted as two&#39;s complement signed values.  \n  Examples:  \n    const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n    \n  <pre><code>buf.readInt32LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint32le_offset_noassert
Buffer readInt32LE	R	Buffer.readInt32LE										http://nodejs.org/api/all.html#all_buffer_readint32le_offset_noassert
Buffer.readIntBE	A										<section class="prog__container">    Reads   byteLength   number of bytes from   buf   at the specified   offset  \nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n    \n  <pre><code>buf.readIntBE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readintbe_offset_bytelength_noassert
Buffer readIntBE	R	Buffer.readIntBE										http://nodejs.org/api/all.html#all_buffer_readintbe_offset_bytelength_noassert
Buffer.readIntLE	A										<section class="prog__container">    Reads   byteLength   number of bytes from   buf   at the specified   offset  \nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n    \n  <pre><code>buf.readIntLE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readintle_offset_bytelength_noassert
Buffer readIntLE	R	Buffer.readIntLE										http://nodejs.org/api/all.html#all_buffer_readintle_offset_bytelength_noassert
Buffer.readUInt8	A										<section class="prog__container">    Reads an unsigned 8-bit integer from   buf   at the specified   offset  .  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([1, -2]);\n\n// Prints: 1\nconsole.log(buf.readUInt8(0));\n\n// Prints: 254\nconsole.log(buf.readUInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt8(2));\n    \n  <pre><code>buf.readUInt8(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint8_offset_noassert
Buffer readUInt8	R	Buffer.readUInt8										http://nodejs.org/api/all.html#all_buffer_readuint8_offset_noassert
Buffer.readUInt16BE	A										<section class="prog__container">    Reads an unsigned 16-bit integer from   buf   at the specified   offset   with\nspecified endian format (  readUInt16BE()   returns big endian,   readUInt16LE()  \nreturns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n    \n  <pre><code>buf.readUInt16BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint16be_offset_noassert
Buffer readUInt16BE	R	Buffer.readUInt16BE										http://nodejs.org/api/all.html#all_buffer_readuint16be_offset_noassert
Buffer.readUInt16LE	A										<section class="prog__container">    Reads an unsigned 16-bit integer from   buf   at the specified   offset   with\nspecified endian format (  readUInt16BE()   returns big endian,   readUInt16LE()  \nreturns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n    \n  <pre><code>buf.readUInt16LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint16le_offset_noassert
Buffer readUInt16LE	R	Buffer.readUInt16LE										http://nodejs.org/api/all.html#all_buffer_readuint16le_offset_noassert
Buffer.readUInt32BE	A										<section class="prog__container">    Reads an unsigned 32-bit integer from   buf   at the specified   offset   with\nspecified endian format (  readUInt32BE()   returns big endian,\n  readUInt32LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n    \n  <pre><code>buf.readUInt32BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint32be_offset_noassert
Buffer readUInt32BE	R	Buffer.readUInt32BE										http://nodejs.org/api/all.html#all_buffer_readuint32be_offset_noassert
Buffer.readUInt32LE	A										<section class="prog__container">    Reads an unsigned 32-bit integer from   buf   at the specified   offset   with\nspecified endian format (  readUInt32BE()   returns big endian,\n  readUInt32LE()   returns little endian).  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n    \n  <pre><code>buf.readUInt32LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint32le_offset_noassert
Buffer readUInt32LE	R	Buffer.readUInt32LE										http://nodejs.org/api/all.html#all_buffer_readuint32le_offset_noassert
Buffer.readUIntBE	A										<section class="prog__container">    Reads   byteLength   number of bytes from   buf   at the specified   offset  \nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n    \n  <pre><code>buf.readUIntBE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuintbe_offset_bytelength_noassert
Buffer readUIntBE	R	Buffer.readUIntBE										http://nodejs.org/api/all.html#all_buffer_readuintbe_offset_bytelength_noassert
Buffer.readUIntLE	A										<section class="prog__container">    Reads   byteLength   number of bytes from   buf   at the specified   offset  \nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.  \n  Setting   noAssert   to   true   allows   offset   to be beyond the end of   buf  , but\nthe result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n    \n  <pre><code>buf.readUIntLE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuintle_offset_bytelength_noassert
Buffer readUIntLE	R	Buffer.readUIntLE										http://nodejs.org/api/all.html#all_buffer_readuintle_offset_bytelength_noassert
Buffer.slice	A										<section class="prog__container">    Returns a new   Buffer   that references the same memory as the original, but\noffset and cropped by the   start   and   end   indices.  \n    Note that modifying the new   Buffer   slice will modify the memory in the\noriginal   Buffer   because the allocated memory of the two objects overlap.    \n  Example: Create a   Buffer   with the ASCII alphabet, take a slice, and then modify\none byte from the original   Buffer    \n    const buf1 = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.slice(0, 3);\n\n// Prints: abc\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n\nbuf1[0] = 33;\n\n// Prints: !bc\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n    \n  Specifying negative indexes causes the slice to be generated relative to the\nend of   buf   rather than the beginning.  \n  Examples:  \n    const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints: buffe\n// (Equivalent to buf.slice(0, 5))\nconsole.log(buf.slice(-6, -1).toString());\n\n// Prints: buff\n// (Equivalent to buf.slice(0, 4))\nconsole.log(buf.slice(-6, -2).toString());\n\n// Prints: uff\n// (Equivalent to buf.slice(1, 4))\nconsole.log(buf.slice(-5, -2).toString());\n    \n  <pre><code>buf.slice([start[, end]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_slice_start_end
Buffer slice	R	Buffer.slice										http://nodejs.org/api/all.html#all_buffer_slice_start_end
Buffer.swap16	A										<section class="prog__container">    Interprets   buf   as an array of unsigned 16-bit integers and swaps the byte-order\n  in-place  . Throws a   RangeError   if     buf.length     is not a multiple of 2.  \n  Examples:  \n    const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap16();\n\n// Prints: &lt;Buffer 02 01 04 03 06 05 08 07&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 16-bits\nbuf2.swap32();\n    \n  <pre><code>buf.swap16()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap16
Buffer swap16	R	Buffer.swap16										http://nodejs.org/api/all.html#all_buffer_swap16
Buffer.swap32	A										<section class="prog__container">    Interprets   buf   as an array of unsigned 32-bit integers and swaps the byte-order\n  in-place  . Throws a   RangeError   if     buf.length     is not a multiple of 4.  \n  Examples:  \n    const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap32();\n\n// Prints: &lt;Buffer 04 03 02 01 08 07 06 05&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 32-bits\nbuf2.swap32();\n    \n  <pre><code>buf.swap32()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap32
Buffer swap32	R	Buffer.swap32										http://nodejs.org/api/all.html#all_buffer_swap32
Buffer.swap64	A										<section class="prog__container">    Interprets   buf   as an array of 64-bit numbers and swaps the byte-order   in-place  .\nThrows a   RangeError   if     buf.length     is not a multiple of 8.  \n  Examples:  \n    const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap64();\n\n// Prints: &lt;Buffer 08 07 06 05 04 03 02 01&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 64-bits\nbuf2.swap64();\n    \n  Note that JavaScript cannot encode 64-bit integers. This method is intended\nfor working with 64-bit floats.  \n  <pre><code>buf.swap64()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap64
Buffer swap64	R	Buffer.swap64										http://nodejs.org/api/all.html#all_buffer_swap64
Buffer.toString	A										<section class="prog__container">    Decodes   buf   to a string according to the specified character encoding in\n  encoding  .   start   and   end   may be passed to decode only a subset of   buf  .  \n  Examples:  \n    const buf1 = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString(&#39;ascii&#39;));\n\n// Prints: abcde\nconsole.log(buf1.toString(&#39;ascii&#39;, 0, 5));\n\n\nconst buf2 = Buffer.from(&#39;tést&#39;);\n\n// Prints: 74c3a97374\nconsole.log(buf2.toString(&#39;hex&#39;));\n\n// Prints: té\nconsole.log(buf2.toString(&#39;utf8&#39;, 0, 3));\n\n// Prints: té\nconsole.log(buf2.toString(undefined, 0, 3));\n    \n  <pre><code>buf.toString([encoding[, start[, end]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_tostring_encoding_start_end
Buffer toString	R	Buffer.toString										http://nodejs.org/api/all.html#all_buffer_tostring_encoding_start_end
Buffer.toJSON	A										<section class="prog__container">    Returns a JSON representation of   buf  .     JSON.stringify()     implicitly calls\nthis function when stringifying a   Buffer   instance.  \n  Example:  \n    const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// Prints: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\nconsole.log(json);\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === &#39;Buffer&#39;\n    ? Buffer.from(value.data)\n    : value;\n});\n\n// Prints: &lt;Buffer 01 02 03 04 05&gt;\nconsole.log(copy);\n    \n  <pre><code>buf.toJSON()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_tojson
Buffer toJSON	R	Buffer.toJSON										http://nodejs.org/api/all.html#all_buffer_tojson
Buffer.values	A										<section class="prog__container">    Creates and returns an   iterator   for   buf   values (bytes). This function is\ncalled automatically when a   Buffer   is used in a   for..of   statement.  \n  Examples:  \n    const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (var value of buf.values()) {\n  console.log(value);\n}\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (var value of buf) {\n  console.log(value);\n}\n    \n  <pre><code>buf.values()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_values
Buffer values	R	Buffer.values										http://nodejs.org/api/all.html#all_buffer_values
Buffer.write	A										<section class="prog__container">    Writes   string   to   buf   at   offset   according to the character encoding in   encoding  .\nThe   length   parameter is the number of bytes to write. If   buf   did not contain\nenough space to fit the entire string, only a partial amount of   string   will\nbe written. However, partially encoded characters will not be written.  \n  Example:  \n    const buf = Buffer.allocUnsafe(256);\n\nconst len = buf.write(&#39;\u00bd + \u00bc = \u00be&#39;, 0);\n\n// Prints: 12 bytes: ½ + ¼ = ¾\nconsole.log(`${len} bytes: ${buf.toString(&#39;utf8&#39;, 0, len)}`);\n    \n  <pre><code>buf.write(string[, offset[, length]][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_write_string_offset_length_encoding
Buffer write	R	Buffer.write										http://nodejs.org/api/all.html#all_buffer_write_string_offset_length_encoding
Buffer.writeDoubleBE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeDoubleBE()   writes big endian,   writeDoubleLE()   writes little\nendian).   value     should   be a valid 64-bit double. Behavior is undefined when\n  value   is anything other than a 64-bit double.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeDoubleBE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writedoublebe_value_offset_noassert
Buffer writeDoubleBE	R	Buffer.writeDoubleBE										http://nodejs.org/api/all.html#all_buffer_writedoublebe_value_offset_noassert
Buffer.writeDoubleLE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeDoubleBE()   writes big endian,   writeDoubleLE()   writes little\nendian).   value     should   be a valid 64-bit double. Behavior is undefined when\n  value   is anything other than a 64-bit double.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeDoubleLE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writedoublele_value_offset_noassert
Buffer writeDoubleLE	R	Buffer.writeDoubleLE										http://nodejs.org/api/all.html#all_buffer_writedoublele_value_offset_noassert
Buffer.writeFloatBE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeFloatBE()   writes big endian,   writeFloatLE()   writes little\nendian).   value     should   be a valid 32-bit float. Behavior is undefined when\n  value   is anything other than a 32-bit float.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeFloatBE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writefloatbe_value_offset_noassert
Buffer writeFloatBE	R	Buffer.writeFloatBE										http://nodejs.org/api/all.html#all_buffer_writefloatbe_value_offset_noassert
Buffer.writeFloatLE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeFloatBE()   writes big endian,   writeFloatLE()   writes little\nendian).   value     should   be a valid 32-bit float. Behavior is undefined when\n  value   is anything other than a 32-bit float.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeFloatLE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writefloatle_value_offset_noassert
Buffer writeFloatLE	R	Buffer.writeFloatLE										http://nodejs.org/api/all.html#all_buffer_writefloatle_value_offset_noassert
Buffer.writeInt8	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset  .   value     should   be a valid\nsigned 8-bit integer. Behavior is undefined when   value   is anything other than\na signed 8-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n    value   is interpreted and written as a two&#39;s complement signed integer.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\n// Prints: &lt;Buffer 02 fe&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeInt8(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint8_value_offset_noassert
Buffer writeInt8	R	Buffer.writeInt8										http://nodejs.org/api/all.html#all_buffer_writeint8_value_offset_noassert
Buffer.writeInt16BE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeInt16BE()   writes big endian,   writeInt16LE()   writes little\nendian).   value     should   be a valid signed 16-bit integer. Behavior is undefined\nwhen   value   is anything other than a signed 16-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n    value   is interpreted and written as a two&#39;s complement signed integer.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeInt16BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint16be_value_offset_noassert
Buffer writeInt16BE	R	Buffer.writeInt16BE										http://nodejs.org/api/all.html#all_buffer_writeint16be_value_offset_noassert
Buffer.writeInt16LE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeInt16BE()   writes big endian,   writeInt16LE()   writes little\nendian).   value     should   be a valid signed 16-bit integer. Behavior is undefined\nwhen   value   is anything other than a signed 16-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n    value   is interpreted and written as a two&#39;s complement signed integer.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeInt16LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint16le_value_offset_noassert
Buffer writeInt16LE	R	Buffer.writeInt16LE										http://nodejs.org/api/all.html#all_buffer_writeint16le_value_offset_noassert
Buffer.writeInt32BE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeInt32BE()   writes big endian,   writeInt32LE()   writes little\nendian).   value     should   be a valid signed 32-bit integer. Behavior is undefined\nwhen   value   is anything other than a signed 32-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n    value   is interpreted and written as a two&#39;s complement signed integer.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeInt32BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint32be_value_offset_noassert
Buffer writeInt32BE	R	Buffer.writeInt32BE										http://nodejs.org/api/all.html#all_buffer_writeint32be_value_offset_noassert
Buffer.writeInt32LE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeInt32BE()   writes big endian,   writeInt32LE()   writes little\nendian).   value     should   be a valid signed 32-bit integer. Behavior is undefined\nwhen   value   is anything other than a signed 32-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n    value   is interpreted and written as a two&#39;s complement signed integer.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeInt32LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint32le_value_offset_noassert
Buffer writeInt32LE	R	Buffer.writeInt32LE										http://nodejs.org/api/all.html#all_buffer_writeint32le_value_offset_noassert
Buffer.writeIntBE	A										<section class="prog__container">    Writes   byteLength   bytes of   value   to   buf   at the specified   offset  .\nSupports up to 48 bits of accuracy. Behavior is undefined when   value   is\nanything other than a signed integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeIntBE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeintbe_value_offset_bytelength_noassert
Buffer writeIntBE	R	Buffer.writeIntBE										http://nodejs.org/api/all.html#all_buffer_writeintbe_value_offset_bytelength_noassert
Buffer.writeIntLE	A										<section class="prog__container">    Writes   byteLength   bytes of   value   to   buf   at the specified   offset  .\nSupports up to 48 bits of accuracy. Behavior is undefined when   value   is\nanything other than a signed integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeIntLE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeintle_value_offset_bytelength_noassert
Buffer writeIntLE	R	Buffer.writeIntLE										http://nodejs.org/api/all.html#all_buffer_writeintle_value_offset_bytelength_noassert
Buffer.writeUInt8	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset  .   value     should   be a\nvalid unsigned 8-bit integer. Behavior is undefined when   value   is anything\nother than an unsigned 8-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\n// Prints: &lt;Buffer 03 04 23 42&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUInt8(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint8_value_offset_noassert
Buffer writeUInt8	R	Buffer.writeUInt8										http://nodejs.org/api/all.html#all_buffer_writeuint8_value_offset_noassert
Buffer.writeUInt16BE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeUInt16BE()   writes big endian,   writeUInt16LE()   writes little\nendian).   value   should be a valid unsigned 16-bit integer. Behavior is\nundefined when   value   is anything other than an unsigned 16-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUInt16BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint16be_value_offset_noassert
Buffer writeUInt16BE	R	Buffer.writeUInt16BE										http://nodejs.org/api/all.html#all_buffer_writeuint16be_value_offset_noassert
Buffer.writeUInt16LE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeUInt16BE()   writes big endian,   writeUInt16LE()   writes little\nendian).   value   should be a valid unsigned 16-bit integer. Behavior is\nundefined when   value   is anything other than an unsigned 16-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUInt16LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint16le_value_offset_noassert
Buffer writeUInt16LE	R	Buffer.writeUInt16LE										http://nodejs.org/api/all.html#all_buffer_writeuint16le_value_offset_noassert
Buffer.writeUInt32BE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeUInt32BE()   writes big endian,   writeUInt32LE()   writes little\nendian).   value   should be a valid unsigned 32-bit integer. Behavior is\nundefined when   value   is anything other than an unsigned 32-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUInt32BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint32be_value_offset_noassert
Buffer writeUInt32BE	R	Buffer.writeUInt32BE										http://nodejs.org/api/all.html#all_buffer_writeuint32be_value_offset_noassert
Buffer.writeUInt32LE	A										<section class="prog__container">    Writes   value   to   buf   at the specified   offset   with specified endian\nformat (  writeUInt32BE()   writes big endian,   writeUInt32LE()   writes little\nendian).   value   should be a valid unsigned 32-bit integer. Behavior is\nundefined when   value   is anything other than an unsigned 32-bit integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUInt32LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint32le_value_offset_noassert
Buffer writeUInt32LE	R	Buffer.writeUInt32LE										http://nodejs.org/api/all.html#all_buffer_writeuint32le_value_offset_noassert
Buffer.writeUIntBE	A										<section class="prog__container">    Writes   byteLength   bytes of   value   to   buf   at the specified   offset  .\nSupports up to 48 bits of accuracy. Behavior is undefined when   value   is\nanything other than an unsigned integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUIntBE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuintbe_value_offset_bytelength_noassert
Buffer writeUIntBE	R	Buffer.writeUIntBE										http://nodejs.org/api/all.html#all_buffer_writeuintbe_value_offset_bytelength_noassert
Buffer.writeUIntLE	A										<section class="prog__container">    Writes   byteLength   bytes of   value   to   buf   at the specified   offset  .\nSupports up to 48 bits of accuracy. Behavior is undefined when   value   is\nanything other than an unsigned integer.  \n  Setting   noAssert   to   true   allows the encoded form of   value   to extend beyond\nthe end of   buf  , but the result should be considered undefined behavior.  \n  Examples:  \n    const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n    \n  <pre><code>buf.writeUIntLE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuintle_value_offset_bytelength_noassert
Buffer writeUIntLE	R	Buffer.writeUIntLE										http://nodejs.org/api/all.html#all_buffer_writeuintle_value_offset_bytelength_noassert
Buffer.poolSize	A										<section class="prog__container">    This is the number of bytes used to determine the size of pre-allocated, internal\n  Buffer   instances used for pooling. This value may be modified.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_poolsize
Buffer poolSize	R	Buffer.poolSize										http://nodejs.org/api/all.html#all_buffer_poolsize
Buffer.[index]	A										<section class="prog__container">    The index operator   [index]   can be used to get and set the octet at position\n  index   in   buf  . The values refer to individual bytes, so the legal value\nrange is between      and   0xFF   (hex) or   0   and   255   (decimal).  \n  Example: Copy an ASCII string into a   Buffer  , one byte at a time  \n    const str = &#39;Node.js&#39;;\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\n// Prints: Node.js\nconsole.log(buf.toString(&#39;ascii&#39;));\n    \n  </section>	http://nodejs.org/api/all.html#all_buffer_[index]
Buffer [index]	R	Buffer.[index]										http://nodejs.org/api/all.html#all_buffer_[index]
Buffer.length	A										<section class="prog__container">    Returns the amount of memory allocated for   buf   in bytes. Note that this\ndoes not necessarily reflect the amount of &quot;usable&quot; data within   buf  .  \n  Example: Create a   Buffer   and write a shorter ASCII string to it  \n    const buf = Buffer.alloc(1234);\n\n// Prints: 1234\nconsole.log(buf.length);\n\nbuf.write(&#39;some string&#39;, 0, &#39;ascii&#39;);\n\n// Prints: 1234\nconsole.log(buf.length);\n    \n  While the   length   property is not immutable, changing the value of   length  \ncan result in undefined and inconsistent behavior. Applications that wish to\nmodify the length of a   Buffer   should therefore treat   length   as read-only and\nuse     buf.slice()     to create a new   Buffer  .  \n  Examples:  \n    var buf = Buffer.allocUnsafe(10);\n\nbuf.write(&#39;abcdefghj&#39;, 0, &#39;ascii&#39;);\n\n// Prints: 10\nconsole.log(buf.length);\n\nbuf = buf.slice(0, 5);\n\n// Prints: 5\nconsole.log(buf.length);\n    \n  </section>	http://nodejs.org/api/all.html#all_buffer_length
Buffer length	R	Buffer.length										http://nodejs.org/api/all.html#all_buffer_length
Buffer.alloc	A										<section class="prog__container">    Allocates a new   Buffer   of   size   bytes. If   fill   is   undefined  , the\n  Buffer   will be   zero-filled  .  \n  Example:  \n    const buf = Buffer.alloc(5);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n    \n  The   size   must be less than or equal to the value of     buffer.kMaxLength    .\nOtherwise, a     RangeError     is thrown. A zero-length   Buffer   will be created if\n  size &lt;= 0  .  \n  If   fill   is specified, the allocated   Buffer   will be initialized by calling\n    buf.fill(fill)    .  \n  Example:  \n    const buf = Buffer.alloc(5, &#39;a&#39;);\n\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\nconsole.log(buf);\n    \n  If both   fill   and   encoding   are specified, the allocated   Buffer   will be\ninitialized by calling     buf.fill(fill, encoding)    .  \n  Example:  \n    const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;);\n\n// Prints: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\nconsole.log(buf);\n    \n  Calling     Buffer.alloc()     can be significantly slower than the alternative\n    Buffer.allocUnsafe()     but ensures that the newly created   Buffer   instance\ncontents will   never contain sensitive data  .  \n  A   TypeError   will be thrown if   size   is not a number.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_alloc_size_fill_encoding
Buffer alloc	R	Buffer.alloc										http://nodejs.org/api/all.html#all_buffer_alloc_size_fill_encoding
Buffer.allocUnsafe	A										<section class="prog__container">    Allocates a new   non-zero-filled     Buffer   of   size   bytes. The   size   must\nbe less than or equal to the value of     buffer.kMaxLength    . Otherwise, a\n    RangeError     is thrown. A zero-length   Buffer   will be created if   size &lt;= 0  .  \n  The underlying memory for   Buffer   instances created in this way is   not\ninitialized  . The contents of the newly created   Buffer   are unknown and\n  may contain sensitive data  . Use     buf.fill(0)     to initialize such\n  Buffer   instances to zeroes.  \n  Example:  \n    const buf = Buffer.allocUnsafe(5);\n\n// Prints: (contents may vary): &lt;Buffer 78 e0 82 02 01&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n    \n  A   TypeError   will be thrown if   size   is not a number.  \n  Note that the   Buffer   module pre-allocates an internal   Buffer   instance of\nsize     Buffer.poolSize     that is used as a pool for the fast allocation of new\n  Buffer   instances created using     Buffer.allocUnsafe()     and the deprecated\n  new Buffer(size)   constructor only when   size   is less than or equal to\n  Buffer.poolSize &gt;&gt; 1   (floor of     Buffer.poolSize     divided by two).  \n  Use of this pre-allocated internal memory pool is a key difference between\ncalling   Buffer.alloc(size, fill)   vs.   Buffer.allocUnsafe(size).fill(fill)  .\nSpecifically,   Buffer.alloc(size, fill)   will   never   use the internal   Buffer  \npool, while   Buffer.allocUnsafe(size).fill(fill)     will   use the internal\n  Buffer   pool if   size   is less than or equal to half     Buffer.poolSize    . The\ndifference is subtle but can be important when an application requires the\nadditional performance that     Buffer.allocUnsafe()     provides.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_allocunsafe_size
Buffer allocUnsafe	R	Buffer.allocUnsafe										http://nodejs.org/api/all.html#all_buffer_allocunsafe_size
Buffer.allocUnsafeSlow	A										<section class="prog__container">    Allocates a new   non-zero-filled   and non-pooled   Buffer   of   size   bytes. The\n  size   must be less than or equal to the value of     buffer.kMaxLength    .\nOtherwise, a     RangeError     is thrown. A zero-length   Buffer   will be created if\n  size &lt;= 0  .  \n  The underlying memory for   Buffer   instances created in this way is   not\ninitialized  . The contents of the newly created   Buffer   are unknown and\n  may contain sensitive data  . Use     buf.fill(0)     to initialize such\n  Buffer   instances to zeroes.  \n  When using     Buffer.allocUnsafe()     to allocate new   Buffer   instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n  Buffer  . This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated   Buffer   instances. This approach improves\nboth performance and memory usage by eliminating the need to track and cleanup as\nmany   Persistent   objects.  \n  However, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled   Buffer   instance using   Buffer.allocUnsafeSlow()   then\ncopy out the relevant bits.  \n  Example:  \n    // Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n    \n  Use of   Buffer.allocUnsafeSlow()   should be used only as a last resort   after  \na developer has observed undue memory retention in their applications.  \n  A   TypeError   will be thrown if   size   is not a number.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_allocunsafeslow_size
Buffer allocUnsafeSlow	R	Buffer.allocUnsafeSlow										http://nodejs.org/api/all.html#all_buffer_allocunsafeslow_size
Buffer.byteLength	A										<section class="prog__container">    Returns the actual byte length of a string. This is not the same as\n    String.prototype.length     since that returns the number of   characters   in\na string.  \n  Example:  \n    const str = &#39;\u00bd + \u00bc = \u00be&#39;;\n\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, &#39;utf8&#39;)} bytes`);\n    \n  When   string   is a   Buffer  /    DataView    /    TypedArray    /    ArrayBuffer    , the\nactual byte length is returned.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_bytelength_string_encoding
Buffer byteLength	R	Buffer.byteLength										http://nodejs.org/api/all.html#all_buffer_bytelength_string_encoding
Buffer.compare	A										<section class="prog__container">    Compares   buf1   to   buf2   typically for the purpose of sorting arrays of\n  Buffer   instances. This is equivalent to calling\n    buf1.compare(buf2)    .  \n  Example:  \n    const buf1 = Buffer.from(&#39;1234&#39;);\nconst buf2 = Buffer.from(&#39;0123&#39;);\nconst arr = [buf1, buf2];\n\n// Prints: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]\n// (This result is equal to: [buf2, buf1])\nconsole.log(arr.sort(Buffer.compare));\n    \n  </section>	http://nodejs.org/api/all.html#all_buffer_compare_buf1_buf2
Buffer compare	R	Buffer.compare										http://nodejs.org/api/all.html#all_buffer_compare_buf1_buf2
Buffer.concat	A										<section class="prog__container">    Returns a new   Buffer   which is the result of concatenating all the   Buffer  \ninstances in the   list   together.  \n  If the list has no items, or if the   totalLength   is 0, then a new zero-length\n  Buffer   is returned.  \n  If   totalLength   is not provided, it is calculated from the   Buffer   instances\nin   list  . This however causes an additional loop to be executed in order to\ncalculate the   totalLength  , so it is faster to provide the length explicitly if\nit is already known.  \n  Example: Create a single   Buffer   from a list of three   Buffer   instances  \n    const buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\n// Prints: 42\nconsole.log(totalLength);\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\n// Prints: &lt;Buffer 00 00 00 00 ...&gt;\nconsole.log(bufA);\n\n// Prints: 42\nconsole.log(bufA.length);\n    \n  </section>	http://nodejs.org/api/all.html#all_buffer_concat_list_totallength
Buffer concat	R	Buffer.concat										http://nodejs.org/api/all.html#all_buffer_concat_list_totallength
Buffer.from	A										<section class="prog__container">    Allocates a new   Buffer   using an   array   of octets.  \n  Example:  \n    // Creates a new Buffer containing ASCII bytes of the string &#39;buffer&#39;\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n    \n  A   TypeError   will be thrown if   array   is not an   Array  .  \n  </section>	http://nodejs.org/api/all.html#all_buffer_from_array
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_array
Buffer.from	A										<section class="prog__container">    When passed a reference to the   .buffer   property of a     TypedArray     instance,\nthe newly created   Buffer   will share the same allocated memory as the\n    TypedArray    .  \n  Example:  \n    const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = Buffer.from(arr.buffer);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf);\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf);\n    \n  The optional   byteOffset   and   length   arguments specify a memory range within\nthe   arrayBuffer   that will be shared by the   Buffer  .  \n  Example:  \n    const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\n\n// Prints: 2\nconsole.log(buf.length);\n    \n  A   TypeError   will be thrown if   arrayBuffer   is not an     ArrayBuffer    .  \n  </section>	http://nodejs.org/api/all.html#all_buffer_from_arraybuffer_byteoffset_length
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_arraybuffer_byteoffset_length
Buffer.from	A										<section class="prog__container">    Copies the passed   buffer   data onto a new   Buffer   instance.  \n  Example:  \n    const buf1 = Buffer.from(&#39;buffer&#39;);\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\n\n// Prints: auffer\nconsole.log(buf1.toString());\n\n// Prints: buffer\nconsole.log(buf2.toString());\n    \n  A   TypeError   will be thrown if   buffer   is not a   Buffer  .  \n  </section>	http://nodejs.org/api/all.html#all_buffer_from_buffer
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_buffer
Buffer.from	A										<section class="prog__container">    Creates a new   Buffer   containing the given JavaScript string   string  . If\nprovided, the   encoding   parameter identifies the character encoding of   string  .  \n  Examples:  \n    const buf1 = Buffer.from(&#39;this is a tést&#39;);\n\n// Prints: this is a tést\nconsole.log(buf1.toString());\n\n// Prints: this is a tC)st\nconsole.log(buf1.toString(&#39;ascii&#39;));\n\n\nconst buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\n\n// Prints: this is a tést\nconsole.log(buf2.toString());\n    \n  A   TypeError   will be thrown if   str   is not a string.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_from_string_encoding
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_string_encoding
Buffer.isBuffer	A										<section class="prog__container">    Returns   true   if   obj   is a   Buffer  ,   false   otherwise.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_isbuffer_obj
Buffer isBuffer	R	Buffer.isBuffer										http://nodejs.org/api/all.html#all_buffer_isbuffer_obj
Buffer.isEncoding	A										<section class="prog__container">    Returns   true   if   encoding   contains a supported character encoding, or   false  \notherwise.  \n  </section>	http://nodejs.org/api/all.html#all_buffer_isencoding_encoding
Buffer isEncoding	R	Buffer.isEncoding										http://nodejs.org/api/all.html#all_buffer_isencoding_encoding
SlowBuffer	A										<section class="prog__container">    Returns an un-pooled   Buffer  .  \n  In order to avoid the garbage collection overhead of creating many individually\nallocated   Buffer   instances, by default allocations under 4KB are sliced from a\nsingle larger allocated object. This approach improves both performance and memory\nusage since v8 does not need to track and cleanup as many   Persistent   objects.  \n  In the case where a developer may need to retain a small chunk of memory from a\npool for an indeterminate amount of time, it may be appropriate to create an\nun-pooled   Buffer   instance using   SlowBuffer   then copy out the relevant bits.  \n  Example:  \n    // Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n    \n  Use of   SlowBuffer   should be used only as a last resort   after   a developer\nhas observed undue memory retention in their applications.  \n  </section>	http://nodejs.org/api/all.html#all_slowbuffer_size
SlowBuffer	A										<section class="prog__container">    Returns an un-pooled   Buffer  .  \n  In order to avoid the garbage collection overhead of creating many individually\nallocated   Buffer   instances, by default allocations under 4KB are sliced from a\nsingle larger allocated object. This approach improves both performance and memory\nusage since v8 does not need to track and cleanup as many   Persistent   objects.  \n  In the case where a developer may need to retain a small chunk of memory from a\npool for an indeterminate amount of time, it may be appropriate to create an\nun-pooled   Buffer   instance using   SlowBuffer   then copy out the relevant bits.  \n  Example:  \n    // Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n    \n  Use of   SlowBuffer   should be used only as a last resort   after   a developer\nhas observed undue memory retention in their applications.  \n  </section>	http://nodejs.org/api/all.html#all_slowbuffer_size
child_process	A										<section class="prog__container">    The   child_process   module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the     child_process.spawn()     function:  \n    const spawn = require(&#39;child_process&#39;).spawn;\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n    \n  By default, pipes for   stdin  ,   stdout   and   stderr   are established between\nthe parent Node.js process and the spawned child. It is possible to stream data\nthrough these pipes in a non-blocking way.   Note, however, that some programs\nuse line-buffered I/O internally. While that does not affect Node.js, it can\nmean that data sent to the child process may not be immediately consumed.    \n  The     child_process.spawn()     method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The     child_process.spawnSync()    \nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.  \n  For convenience, the   child_process   module provides a handful of synchronous\nand asynchronous alternatives to     child_process.spawn()     and\n    child_process.spawnSync()    .    Note that each of these alternatives are\nimplemented on top of     child_process.spawn()     or     child_process.spawnSync()    .    \n  \n      child_process.exec()    : spawns a shell and runs a command within that shell,\npassing the   stdout   and   stderr   to a callback function when complete.  \n      child_process.execFile()    : similar to     child_process.exec()     except that\nit spawns the command directly without first spawning a shell.  \n      child_process.fork()    : spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.  \n      child_process.execSync()    : a synchronous version of\n    child_process.exec()     that   will   block the Node.js event loop.  \n      child_process.execFileSync()    : a synchronous version of\n    child_process.execFile()     that   will   block the Node.js event loop.  \n  \n  For certain use cases, such as automating shell scripts, the\n  synchronous counterparts   may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_child_process
child_process	A										<section class="prog__container">    The   child_process   module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the     child_process.spawn()     function:  \n    const spawn = require(&#39;child_process&#39;).spawn;\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n    \n  By default, pipes for   stdin  ,   stdout   and   stderr   are established between\nthe parent Node.js process and the spawned child. It is possible to stream data\nthrough these pipes in a non-blocking way.   Note, however, that some programs\nuse line-buffered I/O internally. While that does not affect Node.js, it can\nmean that data sent to the child process may not be immediately consumed.    \n  The     child_process.spawn()     method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The     child_process.spawnSync()    \nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.  \n  For convenience, the   child_process   module provides a handful of synchronous\nand asynchronous alternatives to     child_process.spawn()     and\n    child_process.spawnSync()    .    Note that each of these alternatives are\nimplemented on top of     child_process.spawn()     or     child_process.spawnSync()    .    \n  \n      child_process.exec()    : spawns a shell and runs a command within that shell,\npassing the   stdout   and   stderr   to a callback function when complete.  \n      child_process.execFile()    : similar to     child_process.exec()     except that\nit spawns the command directly without first spawning a shell.  \n      child_process.fork()    : spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.  \n      child_process.execSync()    : a synchronous version of\n    child_process.exec()     that   will   block the Node.js event loop.  \n      child_process.execFileSync()    : a synchronous version of\n    child_process.execFile()     that   will   block the Node.js event loop.  \n  \n  For certain use cases, such as automating shell scripts, the\n  synchronous counterparts   may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_child_process
ChildProcess	A										<section class="prog__container">    Instances of the   ChildProcess   class are     EventEmitters     that represent\nspawned child processes.  \n  Instances of   ChildProcess   are not intended to be created directly. Rather,\nuse the     child_process.spawn()    ,     child_process.exec()    ,\n    child_process.execFile()    , or     child_process.fork()     methods to create\ninstances of   ChildProcess  .  \n  </section>	http://nodejs.org/api/all.html#all_childprocess
ChildProcess	A										<section class="prog__container">    Instances of the   ChildProcess   class are     EventEmitters     that represent\nspawned child processes.  \n  Instances of   ChildProcess   are not intended to be created directly. Rather,\nuse the     child_process.spawn()    ,     child_process.exec()    ,\n    child_process.execFile()    , or     child_process.fork()     methods to create\ninstances of   ChildProcess  .  \n  </section>	http://nodejs.org/api/all.html#all_childprocess
ChildProcess.disconnect	A										<section class="prog__container">    Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the   child.connected   and   process.connected   properties in both\nthe parent and child (respectively) will be set to   false  , and it will be no\nlonger possible to pass messages between the processes.  \n  The   &#39;disconnect&#39;   event will be emitted when there are no messages in the\nprocess of being received. This will most often be triggered immediately after\ncalling   child.disconnect()  .  \n  Note that when the child process is a Node.js instance (e.g. spawned using\n    child_process.fork()    ), the   process.disconnect()   method can be invoked\nwithin the child process to close the IPC channel as well.  \n  <pre><code>child.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess disconnect	R	ChildProcess.disconnect										http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess.kill	A										<section class="prog__container">    The   child.kill()   methods sends a signal to the child process. If no argument\nis given, the process will be sent the   &#39;SIGTERM&#39;   signal. See signal(7) for\na list of available signals.  \n    const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\ngrep.on(&#39;close&#39;, (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill(&#39;SIGHUP&#39;);\n    \n  The     ChildProcess     object may emit an     &#39;error&#39;     event if the signal cannot be\ndelivered. Sending a signal to a child process that has already exited is not\nan error but may have unforeseen consequences. Specifically, if the process\nidentifier (PID) has been reassigned to another process, the signal will be\ndelivered to that process instead which can have unexpected results.  \n  Note that while the function is called   kill  , the signal delivered to the\nchild process may not actually terminate the process.  \n  See kill(2) for reference.  \n  Also note: on Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with use of the   shell   option of   ChildProcess  , such\nas in this example:  \n    &#39;use strict&#39;;\nconst spawn = require(&#39;child_process&#39;).spawn;\n\nlet child = spawn(&#39;sh&#39;, [&#39;-c&#39;,\n  `node -e &quot;setInterval(() =&gt; {\n      console.log(process.pid, &#39;is alive&#39;)\n    }, 500);&quot;`\n  ], {\n    stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]\n  });\n\nsetTimeout(() =&gt; {\n  child.kill(); // does not terminate the node process in the shell\n}, 2000);\n    \n  <pre><code>child.kill([signal])</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_kill_signal
ChildProcess kill	R	ChildProcess.kill										http://nodejs.org/api/all.html#all_childprocess_kill_signal
ChildProcess.send	A										<section class="prog__container">    When an IPC channel has been established between the parent and child (\ni.e. when using     child_process.fork()    ), the   child.send()   method can be\nused to send messages to the child process. When the child process is a Node.js\ninstance, these messages can be received via the     process.on(&#39;message&#39;)     event.  \n  For example, in the parent script:  \n    const cp = require(&#39;child_process&#39;);\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;PARENT got message:&#39;, m);\n});\n\nn.send({ hello: &#39;world&#39; });\n    \n  And then the child script,   &#39;sub.js&#39;   might look like this:  \n    process.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;CHILD got message:&#39;, m);\n});\n\nprocess.send({ foo: &#39;bar&#39; });\n    \n  Child Node.js processes will have a     process.send()     method of their own that\nallows the child to send messages back to the parent.  \n  There is a special case when sending a   {cmd: &#39;NODE_foo&#39;}   message. All messages\ncontaining a   NODE_   prefix in its   cmd   property are considered to be reserved\nfor use within Node.js core and will not be emitted in the child&#39;s\n    process.on(&#39;message&#39;)     event. Rather, such messages are emitted using the\n  process.on(&#39;internalMessage&#39;)   event and are consumed internally by Node.js.\nApplications should avoid using such messages or listening for\n  &#39;internalMessage&#39;   events as it is subject to change without notice.  \n  The optional   sendHandle   argument that may be passed to   child.send()   is for\npassing a TCP server or socket object to the child process. The child will\nreceive the object as the second argument passed to the callback function\nregistered on the     process.on(&#39;message&#39;)     event. Any data that is received\nand buffered in the socket will not be sent to the child.  \n  The   options   argument, if present, is an object used to parameterize the\nsending of certain types of handles.   options   supports the following\nproperties:  \n  \n    keepOpen   - A Boolean value that can be used when passing instances of\n  net.Socket  . When   true  , the socket is kept open in the sending process.\nDefaults to   false  .  \n  \n  The optional   callback   is a function that is invoked after the message is\nsent but before the child may have received it.  The function is called with a\nsingle argument:   null   on success, or an     Error     object on failure.  \n  If no   callback   function is provided and the message cannot be sent, an\n  &#39;error&#39;   event will be emitted by the     ChildProcess     object. This can happen,\nfor instance, when the child process has already exited.  \n    child.send()   will return   false   if the channel has closed or when the\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\nmore. Otherwise, the method returns   true  . The   callback   function can be\nused to implement flow control.  \n  Example: sending a server object  \n  The   sendHandle   argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:  \n    const child = require(&#39;child_process&#39;).fork(&#39;child.js&#39;);\n\n// Open up the server object and send the handle.\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.end(&#39;handled by parent&#39;);\n});\nserver.listen(1337, () =&gt; {\n  child.send(&#39;server&#39;, server);\n});\n    \n  The child would then receive the server object as:  \n    process.on(&#39;message&#39;, (m, server) =&gt; {\n  if (m === &#39;server&#39;) {\n    server.on(&#39;connection&#39;, (socket) =&gt; {\n      socket.end(&#39;handled by child&#39;);\n    });\n  }\n});\n    \n  Once the server is now shared between the parent and child, some connections\ncan be handled by the parent and some by the child.  \n  While the example above uses a server created using the   net   module,   dgram  \nmodule servers use exactly the same workflow with the exceptions of listening on\na   &#39;message&#39;   event instead of   &#39;connection&#39;   and using   server.bind()   instead of\n  server.listen()  . This is, however, currently only supported on UNIX platforms.  \n  Example: sending a socket object  \n  Similarly, the   sendHandler   argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:  \n    const normal = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;normal&#39;]);\nconst special = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;special&#39;]);\n\n// Open up the server and send sockets to child\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === &#39;74.125.127.100&#39;) {\n    special.send(&#39;socket&#39;, socket);\n    return;\n  }\n  // This is normal priority\n  normal.send(&#39;socket&#39;, socket);\n});\nserver.listen(1337);\n    \n  The   child.js   would receive the socket handle as the second argument passed\nto the event callback function:  \n    process.on(&#39;message&#39;, (m, socket) =&gt; {\n  if (m === &#39;socket&#39;) {\n    socket.end(`Request handled with ${process.argv[2]} priority`);\n  }\n});\n    \n  Once a socket has been passed to a child, the parent is no longer capable of\ntracking when the socket is destroyed. To indicate this, the   .connections  \nproperty becomes   null  . It is recommended not to use   .maxConnections   when\nthis occurs.  \n    Note: this function uses     JSON.stringify()     internally to serialize the\n  message  .    \n  <pre><code>child.send(message[, sendHandle[, options]][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_send_message_sendhandle_options_callback
ChildProcess send	R	ChildProcess.send										http://nodejs.org/api/all.html#all_childprocess_send_message_sendhandle_options_callback
ChildProcess.channel	A										<section class="prog__container">    The   child.channel   property is a reference to the child&#39;s IPC channel. If no\nIPC channel currently exists, this property is   undefined  .  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_channel
ChildProcess channel	R	ChildProcess.channel										http://nodejs.org/api/all.html#all_childprocess_channel
ChildProcess.connected	A										<section class="prog__container">    The   child.connected   property indicates whether it is still possible to send\nand receive messages from a child process. When   child.connected   is   false  , it\nis no longer possible to send or receive messages.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_connected
ChildProcess connected	R	ChildProcess.connected										http://nodejs.org/api/all.html#all_childprocess_connected
ChildProcess.pid	A										<section class="prog__container">    Returns the process identifier (PID) of the child process.  \n  Example:  \n    const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n    \n  </section>	http://nodejs.org/api/all.html#all_childprocess_pid
ChildProcess pid	R	ChildProcess.pid										http://nodejs.org/api/all.html#all_childprocess_pid
ChildProcess.stderr	A										<section class="prog__container">    A   Readable Stream   that represents the child process&#39;s   stderr  .  \n  If the child was spawned with   stdio[2]   set to anything other than   &#39;pipe&#39;  ,\nthen this will be   undefined  .  \n    child.stderr   is an alias for   child.stdio[2]  . Both properties will refer to\nthe same value.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_stderr
ChildProcess stderr	R	ChildProcess.stderr										http://nodejs.org/api/all.html#all_childprocess_stderr
ChildProcess.stdin	A										<section class="prog__container">    A   Writable Stream   that represents the child process&#39;s   stdin  .  \n    Note that if a child process waits to read all of its input, the child will not\ncontinue until this stream has been closed via   end()  .    \n  If the child was spawned with   stdio[0]   set to anything other than   &#39;pipe&#39;  ,\nthen this will be   undefined  .  \n    child.stdin   is an alias for   child.stdio[0]  . Both properties will refer to\nthe same value.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_stdin
ChildProcess stdin	R	ChildProcess.stdin										http://nodejs.org/api/all.html#all_childprocess_stdin
ChildProcess.stdio	A										<section class="prog__container">    A sparse array of pipes to the child process, corresponding with positions in\nthe     stdio     option passed to     child_process.spawn()     that have been set\nto the value   &#39;pipe&#39;  . Note that   child.stdio[0]  ,   child.stdio[1]  , and\n  child.stdio[2]   are also available as   child.stdin  ,   child.stdout  , and\n  child.stderr  , respectively.  \n  In the following example, only the child&#39;s fd   1   (stdout) is configured as a\npipe, so only the parent&#39;s   child.stdio[1]   is a stream, all other values in\nthe array are   null  .  \n    const assert = require(&#39;assert&#39;);\nconst fs = require(&#39;fs&#39;);\nconst child_process = require(&#39;child_process&#39;);\n\nconst child = child_process.spawn(&#39;ls&#39;, {\n    stdio: [\n      0, // Use parents stdin for child\n      &#39;pipe&#39;, // Pipe child&#39;s stdout to parent\n      fs.openSync(&#39;err.out&#39;, &#39;w&#39;) // Direct child&#39;s stderr to a file\n    ]\n});\n\nassert.equal(child.stdio[0], null);\nassert.equal(child.stdio[0], child.stdin);\n\nassert(child.stdout);\nassert.equal(child.stdio[1], child.stdout);\n\nassert.equal(child.stdio[2], null);\nassert.equal(child.stdio[2], child.stderr);\n    \n  </section>	http://nodejs.org/api/all.html#all_childprocess_stdio
ChildProcess stdio	R	ChildProcess.stdio										http://nodejs.org/api/all.html#all_childprocess_stdio
ChildProcess.stdout	A										<section class="prog__container">    A   Readable Stream   that represents the child process&#39;s   stdout  .  \n  If the child was spawned with   stdio[1]   set to anything other than   &#39;pipe&#39;  ,\nthen this will be   undefined  .  \n    child.stdout   is an alias for   child.stdio[1]  . Both properties will refer\nto the same value.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_stdout
ChildProcess stdout	R	ChildProcess.stdout										http://nodejs.org/api/all.html#all_childprocess_stdout
ChildProcess.close	A										<section class="prog__container">    The   &#39;close&#39;   event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the     &#39;exit&#39;     event, since multiple\nprocesses might share the same stdio streams.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_close
ChildProcess close	R	ChildProcess.close										http://nodejs.org/api/all.html#all_childprocess_close
ChildProcess.disconnect	A										<section class="prog__container">    The   &#39;disconnect&#39;   event is emitted after calling the\n    child.disconnect()     method in parent process or     process.disconnect()     in child process. After\ndisconnecting it is no longer possible to send or receive messages, and the\n    child.connected     property is   false  .  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess disconnect	R	ChildProcess.disconnect										http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess.error	A										<section class="prog__container">    The   &#39;error&#39;   event is emitted whenever:  \n  \n  The process could not be spawned, or  \n  The process could not be killed, or  \n  Sending a message to the child process failed.  \n  \n  Note that the   &#39;exit&#39;   event may or may not fire after an error has occurred.\nIf you are listening to both the   &#39;exit&#39;   and   &#39;error&#39;   events, it is important\nto guard against accidentally invoking handler functions multiple times.  \n  See also     child.kill()     and     child.send()    .  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_error
ChildProcess error	R	ChildProcess.error										http://nodejs.org/api/all.html#all_childprocess_error
ChildProcess.exit	A										<section class="prog__container">    The   &#39;exit&#39;   event is emitted after the child process ends. If the process\nexited,   code   is the final exit code of the process, otherwise   null  . If the\nprocess terminated due to receipt of a signal,   signal   is the string name of\nthe signal, otherwise   null  . One of the two will always be non-null.  \n  Note that when the   &#39;exit&#39;   event is triggered, child process stdio streams\nmight still be open.  \n  Also, note that Node.js establishes signal handlers for   SIGINT   and\n  SIGTERM   and Node.js processes will not terminate immediately due to receipt\nof those signals. Rather, Node.js will perform a sequence of cleanup actions\nand then will re-raise the handled signal.  \n  See waitpid(2).  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_exit
ChildProcess exit	R	ChildProcess.exit										http://nodejs.org/api/all.html#all_childprocess_exit
ChildProcess.message	A										<section class="prog__container">    The   &#39;message&#39;   event is triggered when a child process uses     process.send()    \nto send messages.  \n  </section>	http://nodejs.org/api/all.html#all_childprocess_message
ChildProcess message	R	ChildProcess.message										http://nodejs.org/api/all.html#all_childprocess_message
cluster	A										<section class="prog__container">    A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.  \n  The cluster module allows you to easily create child processes that\nall share server ports.  \n    const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\nconst numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\n&#39;);\n  }).listen(8000);\n}\n    \n  Running Node.js will now share port 8000 between the workers:  \n    $ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n    \n  Please note that on Windows, it is not yet possible to set up a named pipe\nserver in a worker.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_cluster
cluster	A										<section class="prog__container">    A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.  \n  The cluster module allows you to easily create child processes that\nall share server ports.  \n    const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\nconst numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\n&#39;);\n  }).listen(8000);\n}\n    \n  Running Node.js will now share port 8000 between the workers:  \n    $ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n    \n  Please note that on Windows, it is not yet possible to set up a named pipe\nserver in a worker.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_cluster
cluster.disconnect	A										<section class="prog__container">    Calls   .disconnect()   on each worker in   cluster.workers  .  \n  When they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.  \n  The method takes an optional callback argument which will be called when finished.  \n  This can only be called from the master process.  \n  <pre><code>cluster.disconnect([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_disconnect_callback
cluster disconnect	R	cluster.disconnect										http://nodejs.org/api/all.html#all_cluster_disconnect_callback
cluster.fork	A										<section class="prog__container">    Spawn a new worker process.  \n  This can only be called from the master process.  \n  <pre><code>cluster.fork([env])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_fork_env
cluster fork	R	cluster.fork										http://nodejs.org/api/all.html#all_cluster_fork_env
cluster.setupMaster	A										<section class="prog__container">      setupMaster   is used to change the default &#39;fork&#39; behavior. Once called,\nthe settings will be present in   cluster.settings  .  \n  Note that:  \n  \n  any settings changes only affect future calls to   .fork()   and have no\neffect on workers that are already running  \n  The   only   attribute of a worker that cannot be set via   .setupMaster()   is\nthe   env   passed to   .fork()    \n  the defaults above apply to the first call only, the defaults for later\ncalls is the current value at the time of   cluster.setupMaster()   is called  \n  \n  Example:  \n    const cluster = require(&#39;cluster&#39;);\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;https&#39;],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;http&#39;]\n});\ncluster.fork(); // http worker\n    \n  This can only be called from the master process.  \n  <pre><code>cluster.setupMaster([settings])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_setupmaster_settings
cluster setupMaster	R	cluster.setupMaster										http://nodejs.org/api/all.html#all_cluster_setupmaster_settings
cluster.isMaster	A										<section class="prog__container">    True if the process is a master. This is determined\nby the   process.env.NODE_UNIQUE_ID  . If   process.env.NODE_UNIQUE_ID   is\nundefined, then   isMaster   is   true  .  \n  </section>	http://nodejs.org/api/all.html#all_cluster_ismaster
cluster isMaster	R	cluster.isMaster										http://nodejs.org/api/all.html#all_cluster_ismaster
cluster.isWorker	A										<section class="prog__container">    True if the process is not a master (it is the negation of   cluster.isMaster  ).  \n  </section>	http://nodejs.org/api/all.html#all_cluster_isworker
cluster isWorker	R	cluster.isWorker										http://nodejs.org/api/all.html#all_cluster_isworker
cluster.schedulingPolicy	A										<section class="prog__container">    The scheduling policy, either   cluster.SCHED_RR   for round-robin or\n  cluster.SCHED_NONE   to leave it to the operating system. This is a\nglobal setting and effectively frozen once you spawn the first worker\nor call   cluster.setupMaster()  , whatever comes first.  \n    SCHED_RR   is the default on all operating systems except Windows.\nWindows will change to   SCHED_RR   once libuv is able to effectively\ndistribute IOCP handles without incurring a large performance hit.  \n    cluster.schedulingPolicy   can also be set through the\n  NODE_CLUSTER_SCHED_POLICY   environment variable. Valid\nvalues are   &quot;rr&quot;   and   &quot;none&quot;  .  \n  </section>	http://nodejs.org/api/all.html#all_cluster_schedulingpolicy
cluster schedulingPolicy	R	cluster.schedulingPolicy										http://nodejs.org/api/all.html#all_cluster_schedulingpolicy
cluster.settings	A										<section class="prog__container">    After calling   .setupMaster()   (or   .fork()  ) this settings object will contain\nthe settings, including the default values.  \n  This object is not supposed to be changed or set manually, by you.  \n  </section>	http://nodejs.org/api/all.html#all_cluster_settings
cluster settings	R	cluster.settings										http://nodejs.org/api/all.html#all_cluster_settings
cluster.worker	A										<section class="prog__container">    A reference to the current worker object. Not available in the master process.  \n    const cluster = require(&#39;cluster&#39;);\n\nif (cluster.isMaster) {\n  console.log(&#39;I am master&#39;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n    \n  </section>	http://nodejs.org/api/all.html#all_cluster_worker
cluster worker	R	cluster.worker										http://nodejs.org/api/all.html#all_cluster_worker
cluster.workers	A										<section class="prog__container">    A hash that stores the active worker objects, keyed by   id   field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.  \n  A worker is removed from cluster.workers after the worker has disconnected   and  \nexited. The order between these two events cannot be determined in advance.\nHowever, it is guaranteed that the removal from the cluster.workers list happens\nbefore last   &#39;disconnect&#39;   or   &#39;exit&#39;   event is emitted.  \n    // Go through all workers\nfunction eachWorker(callback) {\n  for (var id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send(&#39;big announcement to all workers&#39;);\n});\n    \n  Should you wish to reference a worker over a communication channel, using\nthe worker&#39;s unique id is the easiest way to find the worker.  \n    socket.on(&#39;data&#39;, (id) =&gt; {\n  var worker = cluster.workers[id];\n});\n    \n  \n  \n  </section>	http://nodejs.org/api/all.html#all_cluster_workers
cluster workers	R	cluster.workers										http://nodejs.org/api/all.html#all_cluster_workers
Worker	A										<section class="prog__container">    A Worker object contains all public information and method about a worker.\nIn the master it can be obtained using   cluster.workers  . In a worker\nit can be obtained using   cluster.worker  .  \n  </section>	http://nodejs.org/api/all.html#all_worker
Worker	A										<section class="prog__container">    A Worker object contains all public information and method about a worker.\nIn the master it can be obtained using   cluster.workers  . In a worker\nit can be obtained using   cluster.worker  .  \n  </section>	http://nodejs.org/api/all.html#all_worker
Worker.disconnect	A										<section class="prog__container">    In a worker, this function will close all servers, wait for the   &#39;close&#39;   event on\nthose servers, and then disconnect the IPC channel.  \n  In the master, an internal message is sent to the worker causing it to call\n  .disconnect()   on itself.  \n  Causes   .exitedAfterDisconnect   to be set.  \n  Note that after a server is closed, it will no longer accept new connections,\nbut connections may be accepted by any other listening worker. Existing\nconnections will be allowed to close as usual. When no more connections exist,\nsee     server.close()    , the IPC channel to the worker will close allowing it to\ndie gracefully.  \n  The above applies   only   to server connections, client connections are not\nautomatically closed by workers, and disconnect does not wait for them to close\nbefore exiting.  \n  Note that in a worker,   process.disconnect   exists, but it is not this function,\nit is     disconnect    .  \n  Because long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe   &#39;disconnect&#39;   event has not been emitted after some time.  \n    if (cluster.isMaster) {\n  var worker = cluster.fork();\n  var timeout;\n\n  worker.on(&#39;listening&#39;, (address) =&gt; {\n    worker.send(&#39;shutdown&#39;);\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&#39;disconnect&#39;, () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require(&#39;net&#39;);\n  var server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    if (msg === &#39;shutdown&#39;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n    \n  <pre><code>worker.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_disconnect
Worker disconnect	R	Worker.disconnect										http://nodejs.org/api/all.html#all_worker_disconnect
Worker.isConnected	A										<section class="prog__container">    This function returns   true   if the worker is connected to its master via its IPC\nchannel,   false   otherwise. A worker is connected to its master after it&#39;s been\ncreated. It is disconnected after the   &#39;disconnect&#39;   event is emitted.  \n  <pre><code>worker.isConnected()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_isconnected
Worker isConnected	R	Worker.isConnected										http://nodejs.org/api/all.html#all_worker_isconnected
Worker.isDead	A										<section class="prog__container">    This function returns   true   if the worker&#39;s process has terminated (either\nbecause of exiting or being signaled). Otherwise, it returns   false  .  \n  <pre><code>worker.isDead()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_isdead
Worker isDead	R	Worker.isDead										http://nodejs.org/api/all.html#all_worker_isdead
Worker.kill	A										<section class="prog__container">    This function will kill the worker. In the master, it does this by disconnecting\nthe   worker.process  , and once disconnected, killing with   signal  . In the\nworker, it does it by disconnecting the channel, and then exiting with code   0  .  \n  Causes   .exitedAfterDisconnect   to be set.  \n  This method is aliased as   worker.destroy()   for backwards compatibility.  \n  Note that in a worker,   process.kill()   exists, but it is not this function,\nit is     kill    .  \n  <pre><code>worker.kill([signal='SIGTERM'])</code></pre></section>	http://nodejs.org/api/all.html#all_worker_kill_signal
Worker kill	R	Worker.kill										http://nodejs.org/api/all.html#all_worker_kill_signal
Worker.send	A										<section class="prog__container">    Send a message to a worker or master, optionally with a handle.  \n  In the master this sends a message to a specific worker. It is identical to\n    ChildProcess.send()    .  \n  In a worker this sends a message to the master. It is identical to\n  process.send()  .  \n  This example will echo back all messages from the master:  \n    if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&#39;hi there&#39;);\n\n} else if (cluster.isWorker) {\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    process.send(msg);\n  });\n}\n    \n  <pre><code>worker.send(message[, sendHandle][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_worker_send_message_sendhandle_callback
Worker send	R	Worker.send										http://nodejs.org/api/all.html#all_worker_send_message_sendhandle_callback
Worker.exitedAfterDisconnect	A										<section class="prog__container">    Set by calling   .kill()   or   .disconnect()  . Until then, it is   undefined  .  \n  The boolean   worker.exitedAfterDisconnect   lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.  \n    cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log(&#39;Oh, it was just voluntary – no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n    \n  </section>	http://nodejs.org/api/all.html#all_worker_exitedafterdisconnect
Worker exitedAfterDisconnect	R	Worker.exitedAfterDisconnect										http://nodejs.org/api/all.html#all_worker_exitedafterdisconnect
Worker.id	A										<section class="prog__container">    Each new worker is given its own unique id, this id is stored in the\n  id  .  \n  While a worker is alive, this is the key that indexes it in\ncluster.workers  \n  </section>	http://nodejs.org/api/all.html#all_worker_id
Worker id	R	Worker.id										http://nodejs.org/api/all.html#all_worker_id
Worker.suicide	A										<section class="prog__container">    An alias to     worker.exitedAfterDisconnect    .  \n  Set by calling   .kill()   or   .disconnect()  . Until then, it is   undefined  .  \n  The boolean   worker.suicide   lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.  \n    cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.suicide === true) {\n    console.log(&#39;Oh, it was just voluntary – no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n    \n  This API only exists for backwards compatibility and will be removed in the\nfuture.  \n  </section>	http://nodejs.org/api/all.html#all_worker_suicide
Worker suicide	R	Worker.suicide										http://nodejs.org/api/all.html#all_worker_suicide
Worker.disconnect	A										<section class="prog__container">    Similar to the   cluster.on(&#39;disconnect&#39;)   event, but specific to this worker.  \n    cluster.fork().on(&#39;disconnect&#39;, () =&gt; {\n  // Worker has disconnected\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_worker_disconnect
Worker disconnect	R	Worker.disconnect										http://nodejs.org/api/all.html#all_worker_disconnect
Worker.error	A										<section class="prog__container">    This event is the same as the one provided by     child_process.fork()    .  \n  In a worker you can also use   process.on(&#39;error&#39;)  .  \n  </section>	http://nodejs.org/api/all.html#all_worker_error
Worker error	R	Worker.error										http://nodejs.org/api/all.html#all_worker_error
Worker.exit	A										<section class="prog__container">    Similar to the   cluster.on(&#39;exit&#39;)   event, but specific to this worker.  \n    const worker = cluster.fork();\nworker.on(&#39;exit&#39;, (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log(&#39;worker success!&#39;);\n  }\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_worker_exit
Worker exit	R	Worker.exit										http://nodejs.org/api/all.html#all_worker_exit
Worker.listening	A										<section class="prog__container">    Similar to the   cluster.on(&#39;listening&#39;)   event, but specific to this worker.  \n    cluster.fork().on(&#39;listening&#39;, (address) =&gt; {\n  // Worker is listening\n});\n    \n  It is not emitted in the worker.  \n  </section>	http://nodejs.org/api/all.html#all_worker_listening
Worker listening	R	Worker.listening										http://nodejs.org/api/all.html#all_worker_listening
Worker.message	A										<section class="prog__container">    Similar to the   cluster.on(&#39;message&#39;)   event, but specific to this worker. In a\nworker you can also use   process.on(&#39;message&#39;)  .  \n  See     process   event:   &#39;message&#39;    .  \n  As an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:  \n    const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(&#39;numReqs =&#39;, numReqs);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &#39;notifyRequest&#39;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require(&#39;os&#39;).cpus().length;\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  Object.keys(cluster.workers).forEach((id) =&gt; {\n    cluster.workers[id].on(&#39;message&#39;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\n&#39;);\n\n    // notify master about the request\n    process.send({ cmd: &#39;notifyRequest&#39; });\n  }).listen(8000);\n}\n    \n  </section>	http://nodejs.org/api/all.html#all_worker_message
Worker message	R	Worker.message										http://nodejs.org/api/all.html#all_worker_message
Worker.online	A										<section class="prog__container">    Similar to the   cluster.on(&#39;online&#39;)   event, but specific to this worker.  \n    cluster.fork().on(&#39;online&#39;, () =&gt; {\n  // Worker is online\n});\n    \n  It is not emitted in the worker.  \n  </section>	http://nodejs.org/api/all.html#all_worker_online
Worker online	R	Worker.online										http://nodejs.org/api/all.html#all_worker_online
cluster.disconnect	A										<section class="prog__container">    Emitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\nworker.disconnect()).  \n  There may be a delay between the   &#39;disconnect&#39;   and   &#39;exit&#39;   events.  These events\ncan be used to detect if the process is stuck in a cleanup or if there are\nlong-living connections.  \n    cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_cluster_disconnect
cluster disconnect	R	cluster.disconnect										http://nodejs.org/api/all.html#all_cluster_disconnect
cluster.exit	A										<section class="prog__container">    When any of the workers die the cluster module will emit the   &#39;exit&#39;   event.  \n  This can be used to restart the worker by calling   .fork()   again.  \n    cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  console.log(&#39;worker %d died (%s). restarting...&#39;,\n    worker.process.pid, signal || code);\n  cluster.fork();\n});\n    \n  See   child_process event: &#39;exit&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_cluster_exit
cluster exit	R	cluster.exit										http://nodejs.org/api/all.html#all_cluster_exit
cluster.fork	A										<section class="prog__container">    When a new worker is forked the cluster module will emit a   &#39;fork&#39;   event.\nThis can be used to log worker activity, and create your own timeout.  \n    var timeouts = [];\nfunction errorMsg() {\n  console.error(&#39;Something must be wrong with the connection ...&#39;);\n}\n\ncluster.on(&#39;fork&#39;, (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_cluster_fork
cluster fork	R	cluster.fork										http://nodejs.org/api/all.html#all_cluster_fork
cluster.listening	A										<section class="prog__container">    After calling   listen()   from a worker, when the   &#39;listening&#39;   event is emitted on\nthe server, a   &#39;listening&#39;   event will also be emitted on   cluster   in the master.  \n  The event handler is executed with two arguments, the   worker   contains the worker\nobject and the   address   object contains the following connection properties:\n  address  ,   port   and   addressType  . This is very useful if the worker is listening\non more than one address.  \n    cluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n    \n  The   addressType   is one of:  \n  \n    4   (TCPv4)  \n    6   (TCPv6)  \n    -1   (unix domain socket)  \n    &quot;udp4&quot;   or   &quot;udp6&quot;   (UDP v4 or v6)  \n  \n  </section>	http://nodejs.org/api/all.html#all_cluster_listening
cluster listening	R	cluster.listening										http://nodejs.org/api/all.html#all_cluster_listening
cluster.message	A										<section class="prog__container">    Emitted when the cluster master receives a message from any worker.  \n  See   child_process event: &#39;message&#39;  .  \n  Before Node.js v6.0, this event emitted only the message and the handle,\nbut not the worker object, contrary to what the documentation stated.  \n  If you need to support older versions and don&#39;t need the worker object,\nyou can work around the discrepancy by checking the number of arguments:  \n    cluster.on(&#39;message&#39;, function(worker, message, handle) {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_cluster_message
cluster message	R	cluster.message										http://nodejs.org/api/all.html#all_cluster_message
cluster.online	A										<section class="prog__container">    After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between   &#39;fork&#39;   and   &#39;online&#39;   is that fork is emitted when the\nmaster forks a worker, and &#39;online&#39; is emitted when the worker is running.  \n    cluster.on(&#39;online&#39;, (worker) =&gt; {\n  console.log(&#39;Yay, the worker responded after it was forked&#39;);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_cluster_online
cluster online	R	cluster.online										http://nodejs.org/api/all.html#all_cluster_online
cluster.setup	A										<section class="prog__container">    Emitted every time   .setupMaster()   is called.  \n  The   settings   object is the   cluster.settings   object at the time\n  .setupMaster()   was called and is advisory only, since multiple calls to\n  .setupMaster()   can be made in a single tick.  \n  If accuracy is important, use   cluster.settings  .  \n  </section>	http://nodejs.org/api/all.html#all_cluster_setup
cluster setup	R	cluster.setup										http://nodejs.org/api/all.html#all_cluster_setup
crypto	A										<section class="prog__container">    The   crypto   module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign and verify functions.  \n  Use   require(&#39;crypto&#39;)   to access this module.  \n    const crypto = require(&#39;crypto&#39;);\n\nconst secret = &#39;abcdefg&#39;;\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\n                   .update(&#39;I love cupcakes&#39;)\n                   .digest(&#39;hex&#39;);\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_crypto
crypto	A										<section class="prog__container">    The   crypto   module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign and verify functions.  \n  Use   require(&#39;crypto&#39;)   to access this module.  \n    const crypto = require(&#39;crypto&#39;);\n\nconst secret = &#39;abcdefg&#39;;\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\n                   .update(&#39;I love cupcakes&#39;)\n                   .digest(&#39;hex&#39;);\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_crypto
Certificate	A										<section class="prog__container">    SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and now specified formally as part of   HTML5&#39;s   keygen   element  .  \n  The   crypto   module provides the   Certificate   class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n  &lt;keygen&gt;   element. Node.js uses   OpenSSL&#39;s SPKAC implementation   internally.  \n  </section>	http://nodejs.org/api/all.html#all_certificate
Certificate	A										<section class="prog__container">    SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and now specified formally as part of   HTML5&#39;s   keygen   element  .  \n  The   crypto   module provides the   Certificate   class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n  &lt;keygen&gt;   element. Node.js uses   OpenSSL&#39;s SPKAC implementation   internally.  \n  </section>	http://nodejs.org/api/all.html#all_certificate
Certificate.Certificate	A										<section class="prog__container">    Instances of the   Certificate   class can be created using the   new   keyword\nor by calling   crypto.Certificate()   as a function:  \n    const crypto = require(&#39;crypto&#39;);\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n    \n  <pre><code>new crypto.Certificate()</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_certificate
Certificate Certificate	R	Certificate.Certificate										http://nodejs.org/api/all.html#all_certificate_certificate
Certificate.exportChallenge	A										<section class="prog__container">    The   spkac   data structure includes a public key and a challenge. The\n  certificate.exportChallenge()   returns the challenge component in the\nform of a Node.js     Buffer    . The   spkac   argument can be either a string\nor a     Buffer    .  \n    const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString(&#39;utf8&#39;));\n// Prints: the challenge as a UTF8 string\n    \n  <pre><code>certificate.exportChallenge(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_exportchallenge_spkac
Certificate exportChallenge	R	Certificate.exportChallenge										http://nodejs.org/api/all.html#all_certificate_exportchallenge_spkac
Certificate.exportPublicKey	A										<section class="prog__container">    The   spkac   data structure includes a public key and a challenge. The\n  certificate.exportPublicKey()   returns the public key component in the\nform of a Node.js     Buffer    . The   spkac   argument can be either a string\nor a     Buffer    .  \n    const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n    \n  <pre><code>certificate.exportPublicKey(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_exportpublickey_spkac
Certificate exportPublicKey	R	Certificate.exportPublicKey										http://nodejs.org/api/all.html#all_certificate_exportpublickey_spkac
Certificate.verifySpkac	A										<section class="prog__container">    Returns   true   if the given   spkac   data structure is valid,   false   otherwise.\nThe   spkac   argument must be a Node.js     Buffer    .  \n    const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n    \n  <pre><code>certificate.verifySpkac(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_verifyspkac_spkac
Certificate verifySpkac	R	Certificate.verifySpkac										http://nodejs.org/api/all.html#all_certificate_verifyspkac_spkac
Cipher	A										<section class="prog__container">    Instances of the   Cipher   class are used to encrypt data. The class can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or  \n  Using the     cipher.update()     and     cipher.final()     methods to produce\nthe encrypted data.  \n  \n  The     crypto.createCipher()     or     crypto.createCipheriv()     methods are\nused to create   Cipher   instances.   Cipher   objects are not to be created\ndirectly using the   new   keyword.  \n  Example: Using   Cipher   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;&#39;;\ncipher.on(&#39;readable&#39;, () =&gt; {\n  var data = cipher.read();\n  if (data)\n    encrypted += data.toString(&#39;hex&#39;);\n});\ncipher.on(&#39;end&#39;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&#39;some clear text data&#39;);\ncipher.end();\n    \n  Example: Using   Cipher   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\n\ninput.pipe(cipher).pipe(output);\n    \n  Example: Using the     cipher.update()     and     cipher.final()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\nencrypted += cipher.final(&#39;hex&#39;);\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n    \n  </section>	http://nodejs.org/api/all.html#all_cipher
Cipher	A										<section class="prog__container">    Instances of the   Cipher   class are used to encrypt data. The class can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or  \n  Using the     cipher.update()     and     cipher.final()     methods to produce\nthe encrypted data.  \n  \n  The     crypto.createCipher()     or     crypto.createCipheriv()     methods are\nused to create   Cipher   instances.   Cipher   objects are not to be created\ndirectly using the   new   keyword.  \n  Example: Using   Cipher   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;&#39;;\ncipher.on(&#39;readable&#39;, () =&gt; {\n  var data = cipher.read();\n  if (data)\n    encrypted += data.toString(&#39;hex&#39;);\n});\ncipher.on(&#39;end&#39;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&#39;some clear text data&#39;);\ncipher.end();\n    \n  Example: Using   Cipher   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\n\ninput.pipe(cipher).pipe(output);\n    \n  Example: Using the     cipher.update()     and     cipher.final()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\nencrypted += cipher.final(&#39;hex&#39;);\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n    \n  </section>	http://nodejs.org/api/all.html#all_cipher
Cipher.final	A										<section class="prog__container">    Returns any remaining enciphered contents. If   output_encoding  \nparameter is one of   &#39;latin1&#39;  ,   &#39;base64&#39;   or   &#39;hex&#39;  , a string is returned.\nIf an   output_encoding   is not provided, a     Buffer     is returned.  \n  Once the   cipher.final()   method has been called, the   Cipher   object can no\nlonger be used to encrypt data. Attempts to call   cipher.final()   more than\nonce will result in an error being thrown.  \n  <pre><code>cipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_final_output_encoding
Cipher final	R	Cipher.final										http://nodejs.org/api/all.html#all_cipher_final_output_encoding
Cipher.setAAD	A										<section class="prog__container">    When using an authenticated encryption mode (only   GCM   is currently\nsupported), the   cipher.setAAD()   method sets the value used for the\n  additional authenticated data   (AAD) input parameter.  \n  Returns   this   for method chaining.  \n  <pre><code>cipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_setaad_buffer
Cipher setAAD	R	Cipher.setAAD										http://nodejs.org/api/all.html#all_cipher_setaad_buffer
Cipher.getAuthTag	A										<section class="prog__container">    When using an authenticated encryption mode (only   GCM   is currently\nsupported), the   cipher.getAuthTag()   method returns a     Buffer     containing\nthe   authentication tag   that has been computed from the given data.  \n  The   cipher.getAuthTag()   method should only be called after encryption has\nbeen completed using the     cipher.final()     method.  \n  <pre><code>cipher.getAuthTag()</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_getauthtag
Cipher getAuthTag	R	Cipher.getAuthTag										http://nodejs.org/api/all.html#all_cipher_getauthtag
Cipher.setAutoPadding	A										<section class="prog__container">    When using block encryption algorithms, the   Cipher   class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call   cipher.setAutoPadding(false)  .  \n  When   auto_padding   is   false  , the length of the entire input data must be a\nmultiple of the cipher&#39;s block size or     cipher.final()     will throw an Error.\nDisabling automatic padding is useful for non-standard padding, for instance\nusing   0x0   instead of PKCS padding.  \n  The   cipher.setAutoPadding()   method must be called before     cipher.final()    .  \n  Returns   this   for method chaining.  \n  <pre><code>cipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_setautopadding_auto_padding
Cipher setAutoPadding	R	Cipher.setAutoPadding										http://nodejs.org/api/all.html#all_cipher_setautopadding_auto_padding
Cipher.update	A										<section class="prog__container">    Updates the cipher with   data  . If the   input_encoding   argument is given,\nit&#39;s value must be one of   &#39;utf8&#39;  ,   &#39;ascii&#39;  , or   &#39;latin1&#39;   and the   data  \nargument is a string using the specified encoding. If the   input_encoding  \nargument is not given,   data   must be a     Buffer    . If   data   is a\n    Buffer     then   input_encoding   is ignored.  \n  The   output_encoding   specifies the output format of the enciphered\ndata, and can be   &#39;latin1&#39;  ,   &#39;base64&#39;   or   &#39;hex&#39;  . If the   output_encoding  \nis specified, a string using the specified encoding is returned. If no\n  output_encoding   is provided, a     Buffer     is returned.  \n  The   cipher.update()   method can be called multiple times with new data until\n    cipher.final()     is called. Calling   cipher.update()   after\n    cipher.final()     will result in an error being thrown.  \n  <pre><code>cipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_update_data_input_encoding_output_encoding
Cipher update	R	Cipher.update										http://nodejs.org/api/all.html#all_cipher_update_data_input_encoding_output_encoding
Decipher	A										<section class="prog__container">    Instances of the   Decipher   class are used to decrypt data. The class can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or  \n  Using the     decipher.update()     and     decipher.final()     methods to\nproduce the unencrypted data.  \n  \n  The     crypto.createDecipher()     or     crypto.createDecipheriv()     methods are\nused to create   Decipher   instances.   Decipher   objects are not to be created\ndirectly using the   new   keyword.  \n  Example: Using   Decipher   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar decrypted = &#39;&#39;;\ndecipher.on(&#39;readable&#39;, () =&gt; {\n  var data = decipher.read();\n  if (data)\n    decrypted += data.toString(&#39;utf8&#39;);\n});\ndecipher.on(&#39;end&#39;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\ndecipher.write(encrypted, &#39;hex&#39;);\ndecipher.end();\n    \n  Example: Using   Decipher   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.enc&#39;);\nconst output = fs.createWriteStream(&#39;test.js&#39;);\n\ninput.pipe(decipher).pipe(output);\n    \n  Example: Using the     decipher.update()     and     decipher.final()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\nvar decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\ndecrypted += decipher.final(&#39;utf8&#39;);\nconsole.log(decrypted);\n// Prints: some clear text data\n    \n  </section>	http://nodejs.org/api/all.html#all_decipher
Decipher	A										<section class="prog__container">    Instances of the   Decipher   class are used to decrypt data. The class can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or  \n  Using the     decipher.update()     and     decipher.final()     methods to\nproduce the unencrypted data.  \n  \n  The     crypto.createDecipher()     or     crypto.createDecipheriv()     methods are\nused to create   Decipher   instances.   Decipher   objects are not to be created\ndirectly using the   new   keyword.  \n  Example: Using   Decipher   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar decrypted = &#39;&#39;;\ndecipher.on(&#39;readable&#39;, () =&gt; {\n  var data = decipher.read();\n  if (data)\n    decrypted += data.toString(&#39;utf8&#39;);\n});\ndecipher.on(&#39;end&#39;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\ndecipher.write(encrypted, &#39;hex&#39;);\ndecipher.end();\n    \n  Example: Using   Decipher   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.enc&#39;);\nconst output = fs.createWriteStream(&#39;test.js&#39;);\n\ninput.pipe(decipher).pipe(output);\n    \n  Example: Using the     decipher.update()     and     decipher.final()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\nvar decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\ndecrypted += decipher.final(&#39;utf8&#39;);\nconsole.log(decrypted);\n// Prints: some clear text data\n    \n  </section>	http://nodejs.org/api/all.html#all_decipher
Decipher.final	A										<section class="prog__container">    Returns any remaining deciphered contents. If   output_encoding  \nparameter is one of   &#39;latin1&#39;  ,   &#39;base64&#39;   or   &#39;hex&#39;  , a string is returned.\nIf an   output_encoding   is not provided, a     Buffer     is returned.  \n  Once the   decipher.final()   method has been called, the   Decipher   object can\nno longer be used to decrypt data. Attempts to call   decipher.final()   more\nthan once will result in an error being thrown.  \n  <pre><code>decipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_final_output_encoding
Decipher final	R	Decipher.final										http://nodejs.org/api/all.html#all_decipher_final_output_encoding
Decipher.setAAD	A										<section class="prog__container">    When using an authenticated encryption mode (only   GCM   is currently\nsupported), the   cipher.setAAD()   method sets the value used for the\n  additional authenticated data   (AAD) input parameter.  \n  Returns   this   for method chaining.  \n  <pre><code>decipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setaad_buffer
Decipher setAAD	R	Decipher.setAAD										http://nodejs.org/api/all.html#all_decipher_setaad_buffer
Decipher.setAuthTag	A										<section class="prog__container">    When using an authenticated encryption mode (only   GCM   is currently\nsupported), the   decipher.setAuthTag()   method is used to pass in the\nreceived   authentication tag  . If no tag is provided, or if the cipher text\nhas been tampered with,     decipher.final()     with throw, indicating that the\ncipher text should be discarded due to failed authentication.  \n  Returns   this   for method chaining.  \n  <pre><code>decipher.setAuthTag(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setauthtag_buffer
Decipher setAuthTag	R	Decipher.setAuthTag										http://nodejs.org/api/all.html#all_decipher_setauthtag_buffer
Decipher.setAutoPadding	A										<section class="prog__container">    When data has been encrypted without standard block padding, calling\n  decipher.setAutoPadding(false)   will disable automatic padding to prevent\n    decipher.final()     from checking for and removing padding.  \n  Turning auto padding off will only work if the input data&#39;s length is a\nmultiple of the ciphers block size.  \n  The   decipher.setAutoPadding()   method must be called before\n    decipher.update()    .  \n  Returns   this   for method chaining.  \n  <pre><code>decipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setautopadding_auto_padding
Decipher setAutoPadding	R	Decipher.setAutoPadding										http://nodejs.org/api/all.html#all_decipher_setautopadding_auto_padding
Decipher.update	A										<section class="prog__container">    Updates the decipher with   data  . If the   input_encoding   argument is given,\nit&#39;s value must be one of   &#39;latin1&#39;  ,   &#39;base64&#39;  , or   &#39;hex&#39;   and the   data  \nargument is a string using the specified encoding. If the   input_encoding  \nargument is not given,   data   must be a     Buffer    . If   data   is a\n    Buffer     then   input_encoding   is ignored.  \n  The   output_encoding   specifies the output format of the enciphered\ndata, and can be   &#39;latin1&#39;  ,   &#39;ascii&#39;   or   &#39;utf8&#39;  . If the   output_encoding  \nis specified, a string using the specified encoding is returned. If no\n  output_encoding   is provided, a     Buffer     is returned.  \n  The   decipher.update()   method can be called multiple times with new data until\n    decipher.final()     is called. Calling   decipher.update()   after\n    decipher.final()     will result in an error being thrown.  \n  <pre><code>decipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_update_data_input_encoding_output_encoding
Decipher update	R	Decipher.update										http://nodejs.org/api/all.html#all_decipher_update_data_input_encoding_output_encoding
DiffieHellman	A										<section class="prog__container">    The   DiffieHellman   class is a utility for creating Diffie-Hellman key\nexchanges.  \n  Instances of the   DiffieHellman   class can be created using the\n    crypto.createDiffieHellman()     function.  \n    const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\n// OK\nassert.equal(alice_secret.toString(&#39;hex&#39;), bob_secret.toString(&#39;hex&#39;));\n    \n  </section>	http://nodejs.org/api/all.html#all_diffiehellman
DiffieHellman	A										<section class="prog__container">    The   DiffieHellman   class is a utility for creating Diffie-Hellman key\nexchanges.  \n  Instances of the   DiffieHellman   class can be created using the\n    crypto.createDiffieHellman()     function.  \n    const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\n// OK\nassert.equal(alice_secret.toString(&#39;hex&#39;), bob_secret.toString(&#39;hex&#39;));\n    \n  </section>	http://nodejs.org/api/all.html#all_diffiehellman
DiffieHellman.computeSecret	A										<section class="prog__container">    Computes the shared secret using   other_public_key   as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified   input_encoding  , and secret is\nencoded using specified   output_encoding  . Encodings can be\n  &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If the   input_encoding   is not\nprovided,   other_public_key   is expected to be a     Buffer    .  \n  If   output_encoding   is given a string is returned; otherwise, a\n    Buffer     is returned.  \n  <pre><code>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
DiffieHellman computeSecret	R	DiffieHellman.computeSecret										http://nodejs.org/api/all.html#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
DiffieHellman.generateKeys	A										<section class="prog__container">    Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified   encoding  . This key should be\ntransferred to the other party. Encoding can be   &#39;latin1&#39;  ,   &#39;hex&#39;  ,\nor   &#39;base64&#39;  . If   encoding   is provided a string is returned; otherwise a\n    Buffer     is returned.  \n  <pre><code>diffieHellman.generateKeys([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_generatekeys_encoding
DiffieHellman generateKeys	R	DiffieHellman.generateKeys										http://nodejs.org/api/all.html#all_diffiehellman_generatekeys_encoding
DiffieHellman.getGenerator	A										<section class="prog__container">    Returns the Diffie-Hellman generator in the specified   encoding  , which can\nbe   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If    encoding   is provided a string is\nreturned; otherwise a     Buffer     is returned.  \n  <pre><code>diffieHellman.getGenerator([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getgenerator_encoding
DiffieHellman getGenerator	R	DiffieHellman.getGenerator										http://nodejs.org/api/all.html#all_diffiehellman_getgenerator_encoding
DiffieHellman.getPrime	A										<section class="prog__container">    Returns the Diffie-Hellman prime in the specified   encoding  , which can\nbe   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If   encoding   is provided a string is\nreturned; otherwise a     Buffer     is returned.  \n  <pre><code>diffieHellman.getPrime([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getprime_encoding
DiffieHellman getPrime	R	DiffieHellman.getPrime										http://nodejs.org/api/all.html#all_diffiehellman_getprime_encoding
DiffieHellman.getPrivateKey	A										<section class="prog__container">    Returns the Diffie-Hellman private key in the specified   encoding  ,\nwhich can be   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If   encoding   is provided a\nstring is returned; otherwise a     Buffer     is returned.  \n  <pre><code>diffieHellman.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getprivatekey_encoding
DiffieHellman getPrivateKey	R	DiffieHellman.getPrivateKey										http://nodejs.org/api/all.html#all_diffiehellman_getprivatekey_encoding
DiffieHellman.getPublicKey	A										<section class="prog__container">    Returns the Diffie-Hellman public key in the specified   encoding  , which\ncan be   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If   encoding   is provided a\nstring is returned; otherwise a     Buffer     is returned.  \n  <pre><code>diffieHellman.getPublicKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getpublickey_encoding
DiffieHellman getPublicKey	R	DiffieHellman.getPublicKey										http://nodejs.org/api/all.html#all_diffiehellman_getpublickey_encoding
DiffieHellman.setPrivateKey	A										<section class="prog__container">    Sets the Diffie-Hellman private key. If the   encoding   argument is provided\nand is either   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  ,   private_key   is expected\nto be a string. If no   encoding   is provided,   private_key   is expected\nto be a     Buffer    .  \n  <pre><code>diffieHellman.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_setprivatekey_private_key_encoding
DiffieHellman setPrivateKey	R	DiffieHellman.setPrivateKey										http://nodejs.org/api/all.html#all_diffiehellman_setprivatekey_private_key_encoding
DiffieHellman.setPublicKey	A										<section class="prog__container">    Sets the Diffie-Hellman public key. If the   encoding   argument is provided\nand is either   &#39;latin1&#39;  ,   &#39;hex&#39;   or   &#39;base64&#39;  ,   public_key   is expected\nto be a string. If no   encoding   is provided,   public_key   is expected\nto be a     Buffer    .  \n  <pre><code>diffieHellman.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_setpublickey_public_key_encoding
DiffieHellman setPublicKey	R	DiffieHellman.setPublicKey										http://nodejs.org/api/all.html#all_diffiehellman_setpublickey_public_key_encoding
DiffieHellman.verifyError	A										<section class="prog__container">    A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the   DiffieHellman   object.  \n  The following values are valid for this property (as defined in   constants  \nmodule):  \n  \n    DH_CHECK_P_NOT_SAFE_PRIME    \n    DH_CHECK_P_NOT_PRIME    \n    DH_UNABLE_TO_CHECK_GENERATOR    \n    DH_NOT_SUITABLE_GENERATOR    \n  \n  </section>	http://nodejs.org/api/all.html#all_diffiehellman_verifyerror
DiffieHellman verifyError	R	DiffieHellman.verifyError										http://nodejs.org/api/all.html#all_diffiehellman_verifyerror
ECDH	A										<section class="prog__container">    The   ECDH   class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.  \n  Instances of the   ECDH   class can be created using the\n    crypto.createECDH()     function.  \n    const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\nassert(alice_secret, bob_secret);\n  // OK\n    \n  </section>	http://nodejs.org/api/all.html#all_ecdh
ECDH	A										<section class="prog__container">    The   ECDH   class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.  \n  Instances of the   ECDH   class can be created using the\n    crypto.createECDH()     function.  \n    const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\nassert(alice_secret, bob_secret);\n  // OK\n    \n  </section>	http://nodejs.org/api/all.html#all_ecdh
ECDH.computeSecret	A										<section class="prog__container">    Computes the shared secret using   other_public_key   as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using specified   input_encoding  , and the returned secret\nis encoded using the specified   output_encoding  . Encodings can be\n  &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If the   input_encoding   is not\nprovided,   other_public_key   is expected to be a     Buffer    .  \n  If   output_encoding   is given a string will be returned; otherwise a\n    Buffer     is returned.  \n  <pre><code>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_computesecret_other_public_key_input_encoding_output_encoding
ECDH computeSecret	R	ECDH.computeSecret										http://nodejs.org/api/all.html#all_ecdh_computesecret_other_public_key_input_encoding_output_encoding
ECDH.generateKeys	A										<section class="prog__container">    Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified   format   and   encoding  . This key should be\ntransferred to the other party.  \n  The   format   argument specifies point encoding and can be   &#39;compressed&#39;   or\n  &#39;uncompressed&#39;  . If   format   is not specified, the point will be returned in\n  &#39;uncompressed&#39;   format.  \n  The   encoding   argument can be   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If\n  encoding   is provided a string is returned; otherwise a     Buffer    \nis returned.  \n  <pre><code>ecdh.generateKeys([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_generatekeys_encoding_format
ECDH generateKeys	R	ECDH.generateKeys										http://nodejs.org/api/all.html#all_ecdh_generatekeys_encoding_format
ECDH.getPrivateKey	A										<section class="prog__container">    Returns the EC Diffie-Hellman private key in the specified   encoding  ,\nwhich can be   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If   encoding   is provided\na string is returned; otherwise a     Buffer     is returned.  \n  <pre><code>ecdh.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_getprivatekey_encoding
ECDH getPrivateKey	R	ECDH.getPrivateKey										http://nodejs.org/api/all.html#all_ecdh_getprivatekey_encoding
ECDH.getPublicKey	A										<section class="prog__container">    Returns the EC Diffie-Hellman public key in the specified   encoding   and\n  format  .  \n  The   format   argument specifies point encoding and can be   &#39;compressed&#39;   or\n  &#39;uncompressed&#39;  . If   format   is not specified the point will be returned in\n  &#39;uncompressed&#39;   format.  \n  The   encoding   argument can be   &#39;latin1&#39;  ,   &#39;hex&#39;  , or   &#39;base64&#39;  . If\n  encoding   is specified, a string is returned; otherwise a     Buffer     is\nreturned.  \n  <pre><code>ecdh.getPublicKey([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_getpublickey_encoding_format
ECDH getPublicKey	R	ECDH.getPublicKey										http://nodejs.org/api/all.html#all_ecdh_getpublickey_encoding_format
ECDH.setPrivateKey	A										<section class="prog__container">    Sets the EC Diffie-Hellman private key. The   encoding   can be   &#39;latin1&#39;  ,\n  &#39;hex&#39;   or   &#39;base64&#39;  . If   encoding   is provided,   private_key   is expected\nto be a string; otherwise   private_key   is expected to be a     Buffer    . If\n  private_key   is not valid for the curve specified when the   ECDH   object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the ECDH object.  \n  <pre><code>ecdh.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_setprivatekey_private_key_encoding
ECDH setPrivateKey	R	ECDH.setPrivateKey										http://nodejs.org/api/all.html#all_ecdh_setprivatekey_private_key_encoding
ECDH.setPublicKey	A										<section class="prog__container">    Sets the EC Diffie-Hellman public key. Key encoding can be   &#39;latin1&#39;  ,\n  &#39;hex&#39;   or   &#39;base64&#39;  . If   encoding   is provided   public_key   is expected to\nbe a string; otherwise a     Buffer     is expected.  \n  Note that there is not normally a reason to call this method because   ECDH  \nonly requires a private key and the other party&#39;s public key to compute the\nshared secret. Typically either     ecdh.generateKeys()     or\n    ecdh.setPrivateKey()     will be called. The     ecdh.setPrivateKey()     method\nattempts to generate the public point/key associated with the private key being\nset.  \n  Example (obtaining a shared secret):  \n    const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.createECDH(&#39;secp256k1&#39;);\nconst bob = crypto.createECDH(&#39;secp256k1&#39;);\n\n// Note: This is a shortcut way to specify one of Alice&#39;s previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash(&#39;sha256&#39;).update(&#39;alice&#39;, &#39;utf8&#39;).digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair bob.generateKeys();\n\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n// alice_secret and bob_secret should be the same shared secret value\nconsole.log(alice_secret === bob_secret);\n    \n  <pre><code>ecdh.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_setpublickey_public_key_encoding
ECDH setPublicKey	R	ECDH.setPublicKey										http://nodejs.org/api/all.html#all_ecdh_setpublickey_public_key_encoding
Hash	A										<section class="prog__container">    The   Hash   class is a utility for creating hash digests of data. It can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or  \n  Using the     hash.update()     and     hash.digest()     methods to produce the\ncomputed hash.  \n  \n  The     crypto.createHash()     method is used to create   Hash   instances.   Hash  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Hash   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.on(&#39;readable&#39;, () =&gt; {\n  var data = hash.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write(&#39;some data to hash&#39;);\nhash.end();\n    \n  Example: Using   Hash   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hash).pipe(process.stdout);\n    \n  Example: Using the     hash.update()     and     hash.digest()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.update(&#39;some data to hash&#39;);\nconsole.log(hash.digest(&#39;hex&#39;));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n    \n  </section>	http://nodejs.org/api/all.html#all_hash
Hash	A										<section class="prog__container">    The   Hash   class is a utility for creating hash digests of data. It can be\nused in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or  \n  Using the     hash.update()     and     hash.digest()     methods to produce the\ncomputed hash.  \n  \n  The     crypto.createHash()     method is used to create   Hash   instances.   Hash  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Hash   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.on(&#39;readable&#39;, () =&gt; {\n  var data = hash.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write(&#39;some data to hash&#39;);\nhash.end();\n    \n  Example: Using   Hash   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hash).pipe(process.stdout);\n    \n  Example: Using the     hash.update()     and     hash.digest()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.update(&#39;some data to hash&#39;);\nconsole.log(hash.digest(&#39;hex&#39;));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n    \n  </section>	http://nodejs.org/api/all.html#all_hash
Hash.digest	A										<section class="prog__container">    Calculates the digest of all of the data passed to be hashed (using the\n    hash.update()     method). The   encoding   can be   &#39;hex&#39;  ,   &#39;latin1&#39;   or\n  &#39;base64&#39;  . If   encoding   is provided a string will be returned; otherwise\na     Buffer     is returned.  \n  The   Hash   object can not be used again after   hash.digest()   method has been\ncalled. Multiple calls will cause an error to be thrown.  \n  <pre><code>hash.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hash_digest_encoding
Hash digest	R	Hash.digest										http://nodejs.org/api/all.html#all_hash_digest_encoding
Hash.update	A										<section class="prog__container">    Updates the hash content with the given   data  , the encoding of which\nis given in   input_encoding   and can be   &#39;utf8&#39;  ,   &#39;ascii&#39;   or\n  &#39;latin1&#39;  . If   encoding   is not provided, and the   data   is a string, an\nencoding of   &#39;utf8&#39;   is enforced. If   data   is a     Buffer     then\n  input_encoding   is ignored.  \n  This can be called many times with new data as it is streamed.  \n  <pre><code>hash.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hash_update_data_input_encoding
Hash update	R	Hash.update										http://nodejs.org/api/all.html#all_hash_update_data_input_encoding
Hmac	A										<section class="prog__container">    The   Hmac   Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or  \n  Using the     hmac.update()     and     hmac.digest()     methods to produce the\ncomputed HMAC digest.  \n  \n  The     crypto.createHmac()     method is used to create   Hmac   instances.   Hmac  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Hmac   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.on(&#39;readable&#39;, () =&gt; {\n  var data = hmac.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write(&#39;some data to hash&#39;);\nhmac.end();\n    \n  Example: Using   Hmac   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hmac).pipe(process.stdout);\n    \n  Example: Using the     hmac.update()     and     hmac.digest()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.update(&#39;some data to hash&#39;);\nconsole.log(hmac.digest(&#39;hex&#39;));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n    \n  </section>	http://nodejs.org/api/all.html#all_hmac
Hmac	A										<section class="prog__container">    The   Hmac   Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:  \n  \n  As a   stream   that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or  \n  Using the     hmac.update()     and     hmac.digest()     methods to produce the\ncomputed HMAC digest.  \n  \n  The     crypto.createHmac()     method is used to create   Hmac   instances.   Hmac  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Hmac   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.on(&#39;readable&#39;, () =&gt; {\n  var data = hmac.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write(&#39;some data to hash&#39;);\nhmac.end();\n    \n  Example: Using   Hmac   and piped streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hmac).pipe(process.stdout);\n    \n  Example: Using the     hmac.update()     and     hmac.digest()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.update(&#39;some data to hash&#39;);\nconsole.log(hmac.digest(&#39;hex&#39;));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n    \n  </section>	http://nodejs.org/api/all.html#all_hmac
Hmac.digest	A										<section class="prog__container">    Calculates the HMAC digest of all of the data passed using     hmac.update()    .\nThe   encoding   can be   &#39;hex&#39;  ,   &#39;latin1&#39;   or   &#39;base64&#39;  . If   encoding   is\nprovided a string is returned; otherwise a     Buffer     is returned;  \n  The   Hmac   object can not be used again after   hmac.digest()   has been\ncalled. Multiple calls to   hmac.digest()   will result in an error being thrown.  \n  <pre><code>hmac.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hmac_digest_encoding
Hmac digest	R	Hmac.digest										http://nodejs.org/api/all.html#all_hmac_digest_encoding
Hmac.update	A										<section class="prog__container">    Updates the   Hmac   content with the given   data  , the encoding of which\nis given in   input_encoding   and can be   &#39;utf8&#39;  ,   &#39;ascii&#39;   or\n  &#39;latin1&#39;  . If   encoding   is not provided, and the   data   is a string, an\nencoding of   &#39;utf8&#39;   is enforced. If   data   is a     Buffer     then\n  input_encoding   is ignored.  \n  This can be called many times with new data as it is streamed.  \n  <pre><code>hmac.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hmac_update_data_input_encoding
Hmac update	R	Hmac.update										http://nodejs.org/api/all.html#all_hmac_update_data_input_encoding
Sign	A										<section class="prog__container">    The   Sign   Class is a utility for generating signatures. It can be used in one\nof two ways:  \n  \n  As a writable   stream  , where data to be signed is written and the\n    sign.sign()     method is used to generate and return the signature, or  \n  Using the     sign.update()     and     sign.sign()     methods to produce the\nsignature.  \n  \n  The     crypto.createSign()     method is used to create   Sign   instances.   Sign  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Sign   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.write(&#39;some data to sign&#39;);\nsign.end();\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n    \n  Example: Using the     sign.update()     and     sign.sign()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n    \n  A   Sign   instance can also be created by just passing in the digest\nalgorithm name, in which case OpenSSL will infer the full signature algorithm\nfrom the type of the PEM-formatted private key, including algorithms that\ndo not have directly exposed name constants, e.g. &#39;ecdsa-with-SHA256&#39;.  \n  Example: signing using ECDSA with SHA256  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;sha256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = &#39;-----BEGIN EC PRIVATE KEY-----\n&#39; +\n        &#39;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\n&#39; +\n        &#39;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\n&#39; +\n        &#39;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\n&#39; +\n        &#39;-----END EC PRIVATE KEY-----\n&#39;;\n\nconsole.log(sign.sign(private_key).toString(&#39;hex&#39;));\n    \n  </section>	http://nodejs.org/api/all.html#all_sign
Sign	A										<section class="prog__container">    The   Sign   Class is a utility for generating signatures. It can be used in one\nof two ways:  \n  \n  As a writable   stream  , where data to be signed is written and the\n    sign.sign()     method is used to generate and return the signature, or  \n  Using the     sign.update()     and     sign.sign()     methods to produce the\nsignature.  \n  \n  The     crypto.createSign()     method is used to create   Sign   instances.   Sign  \nobjects are not to be created directly using the   new   keyword.  \n  Example: Using   Sign   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.write(&#39;some data to sign&#39;);\nsign.end();\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n    \n  Example: Using the     sign.update()     and     sign.sign()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n    \n  A   Sign   instance can also be created by just passing in the digest\nalgorithm name, in which case OpenSSL will infer the full signature algorithm\nfrom the type of the PEM-formatted private key, including algorithms that\ndo not have directly exposed name constants, e.g. &#39;ecdsa-with-SHA256&#39;.  \n  Example: signing using ECDSA with SHA256  \n    const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;sha256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = &#39;-----BEGIN EC PRIVATE KEY-----\n&#39; +\n        &#39;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\n&#39; +\n        &#39;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\n&#39; +\n        &#39;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\n&#39; +\n        &#39;-----END EC PRIVATE KEY-----\n&#39;;\n\nconsole.log(sign.sign(private_key).toString(&#39;hex&#39;));\n    \n  </section>	http://nodejs.org/api/all.html#all_sign
Sign.sign	A										<section class="prog__container">    Calculates the signature on all the data passed through using either\n    sign.update()     or     sign.write()    .  \n  The   private_key   argument can be an object or a string. If   private_key   is a\nstring, it is treated as a raw key with no passphrase. If   private_key   is an\nobject, it is interpreted as a hash containing two properties:  \n  \n    key   : {String} - PEM encoded private key  \n    passphrase   : {String} - passphrase for the private key  \n  \n  The   output_format   can specify one of   &#39;latin1&#39;  ,   &#39;hex&#39;   or   &#39;base64&#39;  . If\n  output_format   is provided a string is returned; otherwise a     Buffer     is\nreturned.  \n  The   Sign   object can not be again used after   sign.sign()   method has been\ncalled. Multiple calls to   sign.sign()   will result in an error being thrown.  \n  <pre><code>sign.sign(private_key[, output_format])</code></pre></section>	http://nodejs.org/api/all.html#all_sign_sign_private_key_output_format
Sign sign	R	Sign.sign										http://nodejs.org/api/all.html#all_sign_sign_private_key_output_format
Sign.update	A										<section class="prog__container">    Updates the   Sign   content with the given   data  , the encoding of which\nis given in   input_encoding   and can be   &#39;utf8&#39;  ,   &#39;ascii&#39;   or\n  &#39;latin1&#39;  . If   encoding   is not provided, and the   data   is a string, an\nencoding of   &#39;utf8&#39;   is enforced. If   data   is a     Buffer     then\n  input_encoding   is ignored.  \n  This can be called many times with new data as it is streamed.  \n  <pre><code>sign.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_sign_update_data_input_encoding
Sign update	R	Sign.update										http://nodejs.org/api/all.html#all_sign_update_data_input_encoding
Verify	A										<section class="prog__container">    The   Verify   class is a utility for verifying signatures. It can be used in one\nof two ways:  \n  \n  As a writable   stream   where written data is used to validate against the\nsupplied signature, or  \n    Using the     verify.update()     and     verify.verify()     methods to verify\nthe signature.  \n  The     crypto.createSign()     method is used to create   Sign   instances.\n  Sign   objects are not to be created directly using the   new   keyword.  \n  \n  \n  Example: Using   Verify   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.write(&#39;some data to sign&#39;);\nverify.end();\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n    \n  Example: Using the     verify.update()     and     verify.verify()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.update(&#39;some data to sign&#39;);\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n    \n  </section>	http://nodejs.org/api/all.html#all_verify
Verify	A										<section class="prog__container">    The   Verify   class is a utility for verifying signatures. It can be used in one\nof two ways:  \n  \n  As a writable   stream   where written data is used to validate against the\nsupplied signature, or  \n    Using the     verify.update()     and     verify.verify()     methods to verify\nthe signature.  \n  The     crypto.createSign()     method is used to create   Sign   instances.\n  Sign   objects are not to be created directly using the   new   keyword.  \n  \n  \n  Example: Using   Verify   objects as streams:  \n    const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.write(&#39;some data to sign&#39;);\nverify.end();\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n    \n  Example: Using the     verify.update()     and     verify.verify()     methods:  \n    const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.update(&#39;some data to sign&#39;);\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n    \n  </section>	http://nodejs.org/api/all.html#all_verify
Verify.update	A										<section class="prog__container">    Updates the   Verify   content with the given   data  , the encoding of which\nis given in   input_encoding   and can be   &#39;utf8&#39;  ,   &#39;ascii&#39;   or\n  &#39;latin1&#39;  . If   encoding   is not provided, and the   data   is a string, an\nencoding of   &#39;utf8&#39;   is enforced. If   data   is a     Buffer     then\n  input_encoding   is ignored.  \n  This can be called many times with new data as it is streamed.  \n  <pre><code>verifier.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_verify_update_data_input_encoding
Verify update	R	Verify.update										http://nodejs.org/api/all.html#all_verify_update_data_input_encoding
Verify.verify	A										<section class="prog__container">    Verifies the provided data using the given   object   and   signature  .\nThe   object   argument is a string containing a PEM encoded object, which can be\none an RSA public key, a DSA public key, or an X.509 certificate.\nThe   signature   argument is the previously calculated signature for the data, in\nthe   signature_format   which can be   &#39;latin1&#39;  ,   &#39;hex&#39;   or   &#39;base64&#39;  .\nIf a   signature_format   is specified, the   signature   is expected to be a\nstring; otherwise   signature   is expected to be a     Buffer    .  \n  Returns   true   or   false   depending on the validity of the signature for\nthe data and public key.  \n  The   verifier   object can not be used again after   verify.verify()   has been\ncalled. Multiple calls to   verify.verify()   will result in an error being\nthrown.  \n  <pre><code>verifier.verify(object, signature[, signature_format])</code></pre></section>	http://nodejs.org/api/all.html#all_verify_verify_object_signature_signature_format
Verify verify	R	Verify.verify										http://nodejs.org/api/all.html#all_verify_verify_object_signature_signature_format
dgram	A										<section class="prog__container">    The   dgram   module provides an implementation of UDP Datagram sockets.  \n    const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dgram
dgram	A										<section class="prog__container">    The   dgram   module provides an implementation of UDP Datagram sockets.  \n    const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dgram
dgram.Socket	A										<section class="prog__container">    The   dgram.Socket   object is an     EventEmitter     that encapsulates the\ndatagram functionality.  \n  New instances of   dgram.Socket   are created using     dgram.createSocket()    .\nThe   new   keyword is not to be used to create   dgram.Socket   instances.  \n  </section>	http://nodejs.org/api/all.html#all_dgram.socket
dgram Socket	R	dgram.Socket										http://nodejs.org/api/all.html#all_dgram socket
dgram.Socket.addMembership	A										<section class="prog__container">    Tells the kernel to join a multicast group at the given   multicastAddress   and\n  multicastInterface   using the   IP_ADD_MEMBERSHIP   socket option. If the\n  multicastInterface   argument is not specified, the operating system will choose\none interface and will add membership to it. To add membership to every\navailable interface, call   addMembership   multiple times, once per interface.  \n  <pre><code>socket.addMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_addmembership_multicastaddress_multicastinterface
dgram.Socket addMembership	R	dgram.Socket.addMembership										http://nodejs.org/api/all.html#all_dgram.socket_addmembership_multicastaddress_multicastinterface
dgram Socket addMembership	R	dgram.Socket addMembership										http://nodejs.org/api/all.html#all_dgram socket_addmembership_multicastaddress_multicastinterface
dgram.Socket.address	A										<section class="prog__container">    Returns an object containing the address information for a socket.\nFor UDP sockets, this object will contain   address  ,   family   and   port  \nproperties.  \n  <pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_address
dgram.Socket address	R	dgram.Socket.address										http://nodejs.org/api/all.html#all_dgram.socket_address
dgram Socket address	R	dgram.Socket address										http://nodejs.org/api/all.html#all_dgram socket_address
dgram.Socket.bind	A										<section class="prog__container">    For UDP sockets, causes the   dgram.Socket   to listen for datagram messages on a\nnamed   port   and optional   address  . If   port   is not specified, the operating\nsystem will attempt to bind to a random port. If   address   is not specified,\nthe operating system will attempt to listen on all addresses.  Once binding is\ncomplete, a   &#39;listening&#39;   event is emitted and the optional   callback   function\nis called.  \n  Note that specifying both a   &#39;listening&#39;   event listener and passing a\n  callback   to the   socket.bind()   method is not harmful but not very\nuseful.  \n  A bound datagram socket keeps the Node.js process running to receive\ndatagram messages.  \n  If binding fails, an   &#39;error&#39;   event is generated. In rare case (e.g.\nattempting to bind with a closed socket), an     Error     may be thrown.  \n  Example of a UDP server listening on port 41234:  \n    const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n    \n  <pre><code>socket.bind([port][, address][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_bind_port_address_callback
dgram.Socket bind	R	dgram.Socket.bind										http://nodejs.org/api/all.html#all_dgram.socket_bind_port_address_callback
dgram Socket bind	R	dgram.Socket bind										http://nodejs.org/api/all.html#all_dgram socket_bind_port_address_callback
dgram.Socket.bind	A										<section class="prog__container">    For UDP sockets, causes the   dgram.Socket   to listen for datagram messages on a\nnamed   port   and optional   address   that are passed as properties of an\n  options   object passed as the first argument. If   port   is not specified, the\noperating system will attempt to bind to a random port. If   address   is not\nspecified, the operating system will attempt to listen on all addresses.  Once\nbinding is complete, a   &#39;listening&#39;   event is emitted and the optional\n  callback   function is called.  \n  The   options   object may contain an additional   exclusive   property that is\nuse when using   dgram.Socket   objects with the     cluster     module. When\n  exclusive   is set to   false   (the default), cluster workers will use the same\nunderlying socket handle allowing connection handling duties to be shared.\nWhen   exclusive   is   true  , however, the handle is not shared and attempted\nport sharing results in an error.  \n  An example socket listening on an exclusive port is shown below.  \n    socket.bind({\n  address: &#39;localhost&#39;,\n  port: 8000,\n  exclusive: true\n});\n    \n  <pre><code>socket.bind(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_bind_options_callback
dgram.Socket bind	R	dgram.Socket.bind										http://nodejs.org/api/all.html#all_dgram.socket_bind_options_callback
dgram Socket bind	R	dgram.Socket bind										http://nodejs.org/api/all.html#all_dgram socket_bind_options_callback
dgram.Socket.close	A										<section class="prog__container">    Close the underlying socket and stop listening for data on it. If a callback is\nprovided, it is added as a listener for the     &#39;close&#39;     event.  \n  <pre><code>socket.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_close_callback
dgram.Socket close	R	dgram.Socket.close										http://nodejs.org/api/all.html#all_dgram.socket_close_callback
dgram Socket close	R	dgram.Socket close										http://nodejs.org/api/all.html#all_dgram socket_close_callback
dgram.Socket.dropMembership	A										<section class="prog__container">    Instructs the kernel to leave a multicast group at   multicastAddress   using the\n  IP_DROP_MEMBERSHIP   socket option. This method is automatically called by the\nkernel when the socket is closed or the process terminates, so most apps will\nnever have reason to call this.  \n  If   multicastInterface   is not specified, the operating system will attempt to\ndrop membership on all valid interfaces.  \n  <pre><code>socket.dropMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket dropMembership	R	dgram.Socket.dropMembership										http://nodejs.org/api/all.html#all_dgram.socket_dropmembership_multicastaddress_multicastinterface
dgram Socket dropMembership	R	dgram.Socket dropMembership										http://nodejs.org/api/all.html#all_dgram socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket.send	A										<section class="prog__container">    Broadcasts a datagram on the socket. The destination   port   and   address   must\nbe specified.  \n  The   msg   argument contains the message to be sent.\nDepending on its type, different behavior can apply. If   msg   is a   Buffer  ,\nthe   offset   and   length   specify the offset within the   Buffer   where the\nmessage begins and the number of bytes in the message, respectively.\nIf   msg   is a   String  , then it is automatically converted to a   Buffer  \nwith   &#39;utf8&#39;   encoding. With messages that\ncontain  multi-byte characters,   offset   and   length   will be calculated with\nrespect to   byte length   and not the character position.\nIf   msg   is an array,   offset   and   length   must not be specified.  \n  The   address   argument is a string. If the value of   address   is a host name,\nDNS will be used to resolve the address of the host. If the   address   is not\nspecified or is an empty string,   &#39;127.0.0.1&#39;   or   &#39;::1&#39;   will be used instead.  \n  If the socket has not been previously bound with a call to   bind  , the socket\nis assigned a random port number and is bound to the &quot;all interfaces&quot; address\n(  &#39;0.0.0.0&#39;   for   udp4   sockets,   &#39;::0&#39;   for   udp6   sockets.)  \n  An optional   callback   function  may be specified to as a way of reporting\nDNS errors or for determining when it is safe to reuse the   buf   object.\nNote that DNS lookups delay the time to send for at least one tick of the\nNode.js event loop.  \n  The only way to know for sure that the datagram has been sent is by using a\n  callback  . If an error occurs and a   callback   is given, the error will be\npassed as the first argument to the   callback  . If a   callback   is not given,\nthe error is emitted as an   &#39;error&#39;   event on the   socket   object.  \n  Offset and length are optional, but if you specify one you would need to\nspecify the other. Also, they are supported only when the first\nargument is a   Buffer  .  \n  Example of sending a UDP packet to a random port on   localhost  ;  \n    const dgram = require(&#39;dgram&#39;);\nconst message = Buffer.from(&#39;Some bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n    \n  Example of sending a UDP packet composed of multiple buffers to a random port on   localhost  ;  \n    const dgram = require(&#39;dgram&#39;);\nconst buf1 = Buffer.from(&#39;Some &#39;);\nconst buf2 = Buffer.from(&#39;bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send([buf1, buf2], 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n    \n  Sending multiple buffers might be faster or slower depending on your\napplication and operating system: benchmark it. Usually it is faster.  \n    A Note about UDP datagram size    \n  The maximum size of an   IPv4/v6   datagram depends on the   MTU  \n(  Maximum Transmission Unit  ) and on the   Payload Length   field size.  \n  \n    The   Payload Length   field is   16 bits   wide, which means that a normal\npayload exceed 64K octets   including   the internet header and data\n(65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\nthis is generally true for loopback interfaces, but such long datagram\nmessages are impractical for most hosts and networks.  \n  \n    The   MTU   is the largest size a given link layer technology can support for\ndatagram messages. For any link,   IPv4   mandates a minimum   MTU   of   68  \noctets, while the recommended   MTU   for IPv4 is   576   (typically recommended\nas the   MTU   for dial-up type applications), whether they arrive whole or in\nfragments.  \n  For   IPv6  , the minimum   MTU   is   1280   octets, however, the mandatory minimum\nfragment reassembly buffer size is   1500   octets. The value of   68   octets is\nvery small, since most current link layer technologies, like Ethernet, have a\nminimum   MTU   of   1500  .  \n  \n  \n  It is impossible to know in advance the MTU of each link through which\na packet might travel. Sending a datagram greater than the receiver   MTU   will\nnot work because the packet will get silently dropped without informing the\nsource that the data did not reach its intended recipient.  \n  <pre><code>socket.send(msg, [offset, length,] port, address[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_send_msg_offset_length_port_address_callback
dgram.Socket send	R	dgram.Socket.send										http://nodejs.org/api/all.html#all_dgram.socket_send_msg_offset_length_port_address_callback
dgram Socket send	R	dgram.Socket send										http://nodejs.org/api/all.html#all_dgram socket_send_msg_offset_length_port_address_callback
dgram.Socket.setBroadcast	A										<section class="prog__container">    Sets or clears the   SO_BROADCAST   socket option.  When set to   true  , UDP\npackets may be sent to a local interface&#39;s broadcast address.  \n  <pre><code>socket.setBroadcast(flag)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setbroadcast_flag
dgram.Socket setBroadcast	R	dgram.Socket.setBroadcast										http://nodejs.org/api/all.html#all_dgram.socket_setbroadcast_flag
dgram Socket setBroadcast	R	dgram.Socket setBroadcast										http://nodejs.org/api/all.html#all_dgram socket_setbroadcast_flag
dgram.Socket.setMulticastLoopback	A										<section class="prog__container">    Sets or clears the   IP_MULTICAST_LOOP   socket option.  When set to   true  ,\nmulticast packets will also be received on the local interface.  \n  <pre><code>socket.setMulticastLoopback(flag)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setmulticastloopback_flag
dgram.Socket setMulticastLoopback	R	dgram.Socket.setMulticastLoopback										http://nodejs.org/api/all.html#all_dgram.socket_setmulticastloopback_flag
dgram Socket setMulticastLoopback	R	dgram.Socket setMulticastLoopback										http://nodejs.org/api/all.html#all_dgram socket_setmulticastloopback_flag
dgram.Socket.setMulticastTTL	A										<section class="prog__container">    Sets the   IP_MULTICAST_TTL   socket option.  While TTL generally stands for\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\npacket is allowed to travel through, specifically for multicast traffic.  Each\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\ndecremented to 0 by a router, it will not be forwarded.  \n  The argument passed to to   socket.setMulticastTTL()   is a number of hops\nbetween 0 and 255. The default on most systems is   1   but can vary.  \n  <pre><code>socket.setMulticastTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setmulticastttl_ttl
dgram.Socket setMulticastTTL	R	dgram.Socket.setMulticastTTL										http://nodejs.org/api/all.html#all_dgram.socket_setmulticastttl_ttl
dgram Socket setMulticastTTL	R	dgram.Socket setMulticastTTL										http://nodejs.org/api/all.html#all_dgram socket_setmulticastttl_ttl
dgram.Socket.setTTL	A										<section class="prog__container">    Sets the   IP_TTL   socket option. While TTL generally stands for &quot;Time to Live&quot;,\nin this context it specifies the number of IP hops that a packet is allowed to\ntravel through.  Each router or gateway that forwards a packet decrements the\nTTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.\nChanging TTL values is typically done for network probes or when multicasting.  \n  The argument to   socket.setTTL()   is a number of hops between 1 and 255.\nThe default on most systems is 64 but can vary.  \n  <pre><code>socket.setTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setttl_ttl
dgram.Socket setTTL	R	dgram.Socket.setTTL										http://nodejs.org/api/all.html#all_dgram.socket_setttl_ttl
dgram Socket setTTL	R	dgram.Socket setTTL										http://nodejs.org/api/all.html#all_dgram socket_setttl_ttl
dgram.Socket.ref	A										<section class="prog__container">    By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The   socket.unref()   method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The   socket.ref()   method adds the socket back to the reference\ncounting and restores the default behavior.  \n  Calling   socket.ref()   multiples times will have no additional effect.  \n  The   socket.ref()   method returns a reference to the socket so calls can be\nchained.  \n  <pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_ref
dgram.Socket ref	R	dgram.Socket.ref										http://nodejs.org/api/all.html#all_dgram.socket_ref
dgram Socket ref	R	dgram.Socket ref										http://nodejs.org/api/all.html#all_dgram socket_ref
dgram.Socket.unref	A										<section class="prog__container">    By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The   socket.unref()   method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active, allowing the process to exit even if the socket is still\nlistening.  \n  Calling   socket.unref()   multiple times will have no addition effect.  \n  The   socket.unref()   method returns a reference to the socket so calls can be\nchained.  \n  <pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_unref
dgram.Socket unref	R	dgram.Socket.unref										http://nodejs.org/api/all.html#all_dgram.socket_unref
dgram Socket unref	R	dgram.Socket unref										http://nodejs.org/api/all.html#all_dgram socket_unref
dgram.Socket.close	A										<section class="prog__container">    The   &#39;close&#39;   event is emitted after a socket is closed with     close()    .\nOnce triggered, no new   &#39;message&#39;   events will be emitted on this socket.  \n  </section>	http://nodejs.org/api/all.html#all_dgram.socket_close
dgram.Socket close	R	dgram.Socket.close										http://nodejs.org/api/all.html#all_dgram.socket_close
dgram Socket close	R	dgram.Socket close										http://nodejs.org/api/all.html#all_dgram socket_close
dgram.Socket.error	A										<section class="prog__container">    The   &#39;error&#39;   event is emitted whenever any error occurs. The event handler\nfunction is passed a single Error object.  \n  </section>	http://nodejs.org/api/all.html#all_dgram.socket_error
dgram.Socket error	R	dgram.Socket.error										http://nodejs.org/api/all.html#all_dgram.socket_error
dgram Socket error	R	dgram.Socket error										http://nodejs.org/api/all.html#all_dgram socket_error
dgram.Socket.listening	A										<section class="prog__container">    The   &#39;listening&#39;   event is emitted whenever a socket begins listening for\ndatagram messages. This occurs as soon as UDP sockets are created.  \n  </section>	http://nodejs.org/api/all.html#all_dgram.socket_listening
dgram.Socket listening	R	dgram.Socket.listening										http://nodejs.org/api/all.html#all_dgram.socket_listening
dgram Socket listening	R	dgram.Socket listening										http://nodejs.org/api/all.html#all_dgram socket_listening
dgram.Socket.message	A										<section class="prog__container">    The   &#39;message&#39;   event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments:   msg   and   rinfo  . The\n  msg   argument is a     Buffer     and   rinfo   is an object with the sender&#39;s\naddress information provided by the   address  ,   family   and   port   properties:  \n    socket.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(&#39;Received %d bytes from %s:%d\n&#39;,\n              msg.length, rinfo.address, rinfo.port);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_dgram.socket_message
dgram.Socket message	R	dgram.Socket.message										http://nodejs.org/api/all.html#all_dgram.socket_message
dgram Socket message	R	dgram.Socket message										http://nodejs.org/api/all.html#all_dgram socket_message
dns	A										<section class="prog__container">    The   dns   module contains functions belonging to two different categories:  \n  1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function:     dns.lookup()    .   Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use     dns.lookup()    .    \n  For example, looking up   nodejs.org  .  \n    const dns = require(&#39;dns&#39;);\n\ndns.lookup(&#39;nodejs.org&#39;, (err, addresses, family) =&gt; {\n  console.log(&#39;addresses:&#39;, addresses);\n});\n    \n  2) Functions that connect to an actual DNS server to perform name resolution,\nand that   always   use the network to perform DNS queries. This category\ncontains all functions in the   dns   module   except       dns.lookup()    . These\nfunctions do not use the same set of configuration files used by\n    dns.lookup()     (e.g.   /etc/hosts  ). These functions should be used by\ndevelopers who do not want to use the underlying operating system&#39;s facilities\nfor name resolution, and instead want to   always   perform DNS queries.  \n  Below is an example that resolves   &#39;nodejs.org&#39;   then reverse resolves the IP\naddresses that are returned.  \n    const dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;nodejs.org&#39;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n    \n  There are subtle consequences in choosing one over the other, please consult\nthe   Implementation considerations section   for more information.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dns
dns	A										<section class="prog__container">    The   dns   module contains functions belonging to two different categories:  \n  1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function:     dns.lookup()    .   Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use     dns.lookup()    .    \n  For example, looking up   nodejs.org  .  \n    const dns = require(&#39;dns&#39;);\n\ndns.lookup(&#39;nodejs.org&#39;, (err, addresses, family) =&gt; {\n  console.log(&#39;addresses:&#39;, addresses);\n});\n    \n  2) Functions that connect to an actual DNS server to perform name resolution,\nand that   always   use the network to perform DNS queries. This category\ncontains all functions in the   dns   module   except       dns.lookup()    . These\nfunctions do not use the same set of configuration files used by\n    dns.lookup()     (e.g.   /etc/hosts  ). These functions should be used by\ndevelopers who do not want to use the underlying operating system&#39;s facilities\nfor name resolution, and instead want to   always   perform DNS queries.  \n  Below is an example that resolves   &#39;nodejs.org&#39;   then reverse resolves the IP\naddresses that are returned.  \n    const dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;nodejs.org&#39;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n    \n  There are subtle consequences in choosing one over the other, please consult\nthe   Implementation considerations section   for more information.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dns
dns.getServers	A										<section class="prog__container">    Returns an array of IP address strings that are being used for name\nresolution.  \n  <pre><code>dns.getServers()</code></pre></section>	http://nodejs.org/api/all.html#all_dns_getservers
dns getServers	R	dns.getServers										http://nodejs.org/api/all.html#all_dns_getservers
dns.lookup	A										<section class="prog__container">    Resolves a hostname (e.g.   &#39;nodejs.org&#39;  ) into the first found A (IPv4) or\nAAAA (IPv6) record.   options   can be an object or integer. If   options   is\nnot provided, then IPv4 and IPv6 addresses are both valid. If   options   is\nan integer, then it must be   4   or   6  .  \n  Alternatively,   options   can be an object containing these properties:  \n  \n    family   {Number} - The record family. If present, must be the integer\n  4   or   6  . If not provided, both IP v4 and v6 addresses are accepted.  \n    hints  : {Number} - If present, it should be one or more of the supported\n  getaddrinfo   flags. If   hints   is not provided, then no flags are passed to\n  getaddrinfo  . Multiple flags can be passed through   hints   by logically\n  OR  ing their values.\nSee   supported   getaddrinfo   flags   for more information on supported\nflags.  \n    all  : {Boolean} - When   true  , the callback returns all resolved addresses\nin an array, otherwise returns a single address. Defaults to   false  .  \n  \n  All properties are optional. An example usage of options is shown below.  \n    {\n  family: 4,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n  all: false\n}\n    \n  The   callback   function has arguments   (err, address, family)  .   address   is a\nstring representation of an IPv4 or IPv6 address.   family   is either the\ninteger   4   or   6   and denotes the family of   address   (not necessarily the\nvalue initially passed to   lookup  ).  \n  With the   all   option set to   true  , the arguments change to\n  (err, addresses)  , with   addresses   being an array of objects with the\nproperties   address   and   family  .  \n  On error,   err   is an     Error     object, where   err.code   is the error code.\nKeep in mind that   err.code   will be set to   &#39;ENOENT&#39;   not only when\nthe hostname does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.  \n    dns.lookup()   does not necessarily have anything to do with the DNS protocol.\nThe implementation uses an operating system facility that can associate names\nwith addresses, and vice versa. This implementation can have subtle but\nimportant consequences on the behavior of any Node.js program. Please take some\ntime to consult the   Implementation considerations section   before using\n  dns.lookup()  .  \n  <pre><code>dns.lookup(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_lookup_hostname_options_callback
dns lookup	R	dns.lookup										http://nodejs.org/api/all.html#all_dns_lookup_hostname_options_callback
dns.lookupService	A										<section class="prog__container">    Resolves the given   address   and   port   into a hostname and service using\nthe operating system&#39;s underlying   getnameinfo   implementation.  \n  If   address   is not a valid IP address, a   TypeError   will be thrown.\nThe   port   will be coerced to a number. If it is not a legal port, a   TypeError  \nwill be thrown.  \n  The callback has arguments   (err, hostname, service)  . The   hostname   and\n  service   arguments are strings (e.g.   &#39;localhost&#39;   and   &#39;http&#39;   respectively).  \n  On error,   err   is an     Error     object, where   err.code   is the error code.  \n    const dns = require(&#39;dns&#39;);\ndns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\n    \n  <pre><code>dns.lookupService(address, port, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_lookupservice_address_port_callback
dns lookupService	R	dns.lookupService										http://nodejs.org/api/all.html#all_dns_lookupservice_address_port_callback
dns.resolve	A										<section class="prog__container">    Uses the DNS protocol to resolve a hostname (e.g.   &#39;nodejs.org&#39;  ) into an\narray of the record types specified by   rrtype  .  \n  Valid values for   rrtype   are:  \n  \n    &#39;A&#39;   - IPV4 addresses, default  \n    &#39;AAAA&#39;   - IPV6 addresses  \n    &#39;MX&#39;   - mail exchange records  \n    &#39;TXT&#39;   - text records  \n    &#39;SRV&#39;   - SRV records  \n    &#39;PTR&#39;   - PTR records  \n    &#39;NS&#39;   - name server records  \n    &#39;CNAME&#39;   - canonical name records  \n    &#39;SOA&#39;   - start of authority record  \n    &#39;NAPTR&#39;   - name authority pointer record  \n  \n  The   callback   function has arguments   (err, addresses)  . When successful,\n  addresses   will be an array, except when resolving an SOA record which returns\nan object structured in the same manner as one returned by the\n    dns.resolveSoa()     method. The type of each item in   addresses   is\ndetermined by the record type, and described in the documentation for the\ncorresponding lookup methods.  \n  On error,   err   is an     Error     object, where   err.code   is\none of the error codes listed   here  .  \n  <pre><code>dns.resolve(hostname[, rrtype], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve_hostname_rrtype_callback
dns resolve	R	dns.resolve										http://nodejs.org/api/all.html#all_dns_resolve_hostname_rrtype_callback
dns.resolve4	A										<section class="prog__container">    Uses the DNS protocol to resolve a IPv4 addresses (  A   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function\nwill contain an array of IPv4 addresses (e.g.\n  [&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]  ).  \n  \n    hostname   {String} Hostname to resolve.  \n    options   {Object}  \n    ttl   {Boolean} Retrieve the Time-To-Live value (TTL) of each record.\nThe callback receives an array of   { address: &#39;1.2.3.4&#39;, ttl: 60 }   objects\nrather than an array of strings.  The TTL is expressed in seconds.  \n  \n  \n    callback   {Function} An   (err, result)   callback function.  \n  \n  <pre><code>dns.resolve4(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve4_hostname_options_callback
dns resolve4	R	dns.resolve4										http://nodejs.org/api/all.html#all_dns_resolve4_hostname_options_callback
dns.resolve6	A										<section class="prog__container">    Uses the DNS protocol to resolve a IPv6 addresses (  AAAA   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function\nwill contain an array of IPv6 addresses.  \n  \n    hostname   {String} Hostname to resolve.  \n    options   {Object}  \n    ttl   {Boolean} Retrieve the Time-To-Live value (TTL) of each record.\nThe callback receives an array of   { address: &#39;0:1:2:3:4:5:6:7&#39;, ttl: 60 }  \nobjects rather than an array of strings.  The TTL is expressed in seconds.  \n  \n  \n    callback   {Function} An   (err, result)   callback function.  \n  \n  <pre><code>dns.resolve6(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve6_hostname_options_callback
dns resolve6	R	dns.resolve6										http://nodejs.org/api/all.html#all_dns_resolve6_hostname_options_callback
dns.resolveCname	A										<section class="prog__container">    Uses the DNS protocol to resolve   CNAME   records for the   hostname  . The\n  addresses   argument passed to the   callback   function\nwill contain an array of canonical name records available for the   hostname  \n(e.g.   [&#39;bar.example.com&#39;]  ).  \n  <pre><code>dns.resolveCname(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvecname_hostname_callback
dns resolveCname	R	dns.resolveCname										http://nodejs.org/api/all.html#all_dns_resolvecname_hostname_callback
dns.resolveMx	A										<section class="prog__container">    Uses the DNS protocol to resolve mail exchange records (  MX   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function will\ncontain an array of objects containing both a   priority   and   exchange  \nproperty (e.g.   [{priority: 10, exchange: &#39;mx.example.com&#39;}, ...]  ).  \n  <pre><code>dns.resolveMx(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvemx_hostname_callback
dns resolveMx	R	dns.resolveMx										http://nodejs.org/api/all.html#all_dns_resolvemx_hostname_callback
dns.resolveNaptr	A										<section class="prog__container">    Uses the DNS protocol to resolve regular expression based records (  NAPTR  \nrecords) for the   hostname  . The   callback   function has arguments\n  (err, addresses)  .  The   addresses   argument passed to the   callback   function\nwill contain an array of objects with the following properties:  \n  \n    flags    \n    service    \n    regexp    \n    replacement    \n    order    \n    preference    \n  \n  For example:  \n    {\n  flags: &#39;s&#39;,\n  service: &#39;SIP+D2U&#39;,\n  regexp: &#39;&#39;,\n  replacement: &#39;_sip._udp.example.com&#39;,\n  order: 30,\n  preference: 100\n}\n    \n  <pre><code>dns.resolveNaptr(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvenaptr_hostname_callback
dns resolveNaptr	R	dns.resolveNaptr										http://nodejs.org/api/all.html#all_dns_resolvenaptr_hostname_callback
dns.resolveNs	A										<section class="prog__container">    Uses the DNS protocol to resolve name server records (  NS   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function will\ncontain an array of name server records available for   hostname  \n(e.g.   [&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]  ).  \n  <pre><code>dns.resolveNs(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvens_hostname_callback
dns resolveNs	R	dns.resolveNs										http://nodejs.org/api/all.html#all_dns_resolvens_hostname_callback
dns.resolveSoa	A										<section class="prog__container">    Uses the DNS protocol to resolve a start of authority record (  SOA   record) for\nthe   hostname  . The   addresses   argument passed to the   callback   function will\nbe an object with the following properties:  \n  \n    nsname    \n    hostmaster    \n    serial    \n    refresh    \n    retry    \n    expire    \n    minttl    \n  \n    {\n  nsname: &#39;ns.example.com&#39;,\n  hostmaster: &#39;root.example.com&#39;,\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n    \n  <pre><code>dns.resolveSoa(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvesoa_hostname_callback
dns resolveSoa	R	dns.resolveSoa										http://nodejs.org/api/all.html#all_dns_resolvesoa_hostname_callback
dns.resolveSrv	A										<section class="prog__container">    Uses the DNS protocol to resolve service records (  SRV   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function will\nbe an array of objects with the following properties:  \n  \n    priority    \n    weight    \n    port    \n    name    \n  \n    {\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: &#39;service.example.com&#39;\n}\n    \n  <pre><code>dns.resolveSrv(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvesrv_hostname_callback
dns resolveSrv	R	dns.resolveSrv										http://nodejs.org/api/all.html#all_dns_resolvesrv_hostname_callback
dns.resolvePtr	A										<section class="prog__container">    Uses the DNS protocol to resolve pointer records (  PTR   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function will\nbe an array of strings containing the reply records.  \n  <pre><code>dns.resolvePtr(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolveptr_hostname_callback
dns resolvePtr	R	dns.resolvePtr										http://nodejs.org/api/all.html#all_dns_resolveptr_hostname_callback
dns.resolveTxt	A										<section class="prog__container">    Uses the DNS protocol to resolve text queries (  TXT   records) for the\n  hostname  . The   addresses   argument passed to the   callback   function is\nis a two-dimensional array of the text records available for   hostname   (e.g.,\n  [ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]  ). Each sub-array contains TXT chunks of\none record. Depending on the use case, these could be either joined together or\ntreated separately.  \n  <pre><code>dns.resolveTxt(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvetxt_hostname_callback
dns resolveTxt	R	dns.resolveTxt										http://nodejs.org/api/all.html#all_dns_resolvetxt_hostname_callback
dns.reverse	A										<section class="prog__container">    Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\narray of hostnames.  \n  The   callback   function has arguments   (err, hostnames)  , where   hostnames  \nis an array of resolved hostnames for the given   ip  .  \n  On error,   err   is an     Error     object, where   err.code   is\none of the   DNS error codes  .  \n  <pre><code>dns.reverse(ip, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_reverse_ip_callback
dns reverse	R	dns.reverse										http://nodejs.org/api/all.html#all_dns_reverse_ip_callback
dns.setServers	A										<section class="prog__container">    Sets the IP addresses of the servers to be used when resolving. The   servers  \nargument is an array of IPv4 or IPv6 addresses.  \n  If a port specified on the address it will be removed.  \n  An error will be thrown if an invalid address is provided.  \n  The   dns.setServers()   method must not be called while a DNS query is in\nprogress.  \n  <pre><code>dns.setServers(servers)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_setservers_servers
dns setServers	R	dns.setServers										http://nodejs.org/api/all.html#all_dns_setservers_servers
domain	A										<section class="prog__container">      This module is pending deprecation  . Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n  not   have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.  \n  Domains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an   &#39;error&#39;   event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n  process.on(&#39;uncaughtException&#39;)   handler, or causing the program to\nexit immediately with an error code.  \n  </section>	http://nodejs.org/api/all.html#all_domain
domain	A										<section class="prog__container">      This module is pending deprecation  . Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n  not   have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.  \n  Domains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an   &#39;error&#39;   event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n  process.on(&#39;uncaughtException&#39;)   handler, or causing the program to\nexit immediately with an error code.  \n  </section>	http://nodejs.org/api/all.html#all_domain
domain.create	A										<section class="prog__container">    Returns a new Domain object.  \n  <pre><code>domain.create()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_create
domain create	R	domain.create										http://nodejs.org/api/all.html#all_domain_create
Domain	A										<section class="prog__container">    The Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.  \n  Domain is a child class of     EventEmitter    .  To handle the errors that it\ncatches, listen to its   &#39;error&#39;   event.  \n  </section>	http://nodejs.org/api/all.html#all_domain
Domain	A										<section class="prog__container">    The Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.  \n  Domain is a child class of     EventEmitter    .  To handle the errors that it\ncatches, listen to its   &#39;error&#39;   event.  \n  </section>	http://nodejs.org/api/all.html#all_domain
Domain.run	A										<section class="prog__container">    Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.  \n  This is the most basic way to use a domain.  \n  Example:  \n    const domain = require(&#39;domain&#39;);\nconst fs = require(&#39;fs&#39;);\nconst d = domain.create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  console.error(&#39;Caught error!&#39;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n    \n  In this example, the   d.on(&#39;error&#39;)   handler will be triggered, rather\nthan crashing the program.  \n  <pre><code>domain.run(fn[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_domain_run_fn_...args
Domain run	R	Domain.run										http://nodejs.org/api/all.html#all_domain_run_fn_...args
Domain.add	A										<section class="prog__container">    Explicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an   &#39;error&#39;   event, it\nwill be routed to the domain&#39;s   &#39;error&#39;   event, just like with implicit\nbinding.  \n  This also works with timers that are returned from     setInterval()     and\n    setTimeout()    .  If their callback function throws, it will be caught by\nthe domain &#39;error&#39; handler.  \n  If the Timer or EventEmitter was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.  \n  <pre><code>domain.add(emitter)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_add_emitter
Domain add	R	Domain.add										http://nodejs.org/api/all.html#all_domain_add_emitter
Domain.remove	A										<section class="prog__container">    The opposite of     domain.add(emitter)    .  Removes domain handling from the\nspecified emitter.  \n  <pre><code>domain.remove(emitter)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_remove_emitter
Domain remove	R	Domain.remove										http://nodejs.org/api/all.html#all_domain_remove_emitter
Domain.bind	A										<section class="prog__container">    The returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain&#39;s   &#39;error&#39;   event.  \n  Example  \n    const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n    \n  <pre><code>domain.bind(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_bind_callback
Domain bind	R	Domain.bind										http://nodejs.org/api/all.html#all_domain_bind_callback
Domain.intercept	A										<section class="prog__container">    This method is almost identical to     domain.bind(callback)    .  However, in\naddition to catching thrown errors, it will also intercept     Error    \nobjects sent as the first argument to the function.  \n  In this way, the common   if (err) return callback(err);   pattern can be replaced\nwith a single error handler in a single place.  \n  Example  \n    const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &#39;Error&#39; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &#39;error&#39;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n    \n  <pre><code>domain.intercept(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_intercept_callback
Domain intercept	R	Domain.intercept										http://nodejs.org/api/all.html#all_domain_intercept_callback
Domain.enter	A										<section class="prog__container">    The   enter   method is plumbing used by the   run  ,   bind  , and   intercept  \nmethods to set the active domain. It sets   domain.active   and   process.domain  \nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see     domain.exit()     for details on the domain stack). The\ncall to   enter   delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.  \n  Calling   enter   changes only the active domain, and does not alter the domain\nitself.   enter   and   exit   can be called an arbitrary number of times on a\nsingle domain.  \n  If the domain on which   enter   is called has been disposed,   enter   will return\nwithout setting the domain.  \n  <pre><code>domain.enter()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_enter
Domain enter	R	Domain.enter										http://nodejs.org/api/all.html#all_domain_enter
Domain.exit	A										<section class="prog__container">    The   exit   method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\nThe call to   exit   delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.  \n  If there are multiple, nested domains bound to the current execution context,\n  exit   will exit any domains nested within this domain.  \n  Calling   exit   changes only the active domain, and does not alter the domain\nitself.   enter   and   exit   can be called an arbitrary number of times on a\nsingle domain.  \n  If the domain on which   exit   is called has been disposed,   exit   will return\nwithout exiting the domain.  \n  <pre><code>domain.exit()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_exit
Domain exit	R	Domain.exit										http://nodejs.org/api/all.html#all_domain_exit
Domain.dispose	A										<section class="prog__container">    Stability: 0 - Deprecated.  Please recover from failed IO actions\nexplicitly via error event handlers set on the domain.  \n  Once   dispose   has been called, the domain will no longer be used by callbacks\nbound into the domain via   run  ,   bind  , or   intercept  , and a   &#39;dispose&#39;   event\nis emitted.  \n  \n  \n  <pre><code>domain.dispose()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_dispose
Domain dispose	R	Domain.dispose										http://nodejs.org/api/all.html#all_domain_dispose
Domain.members	A										<section class="prog__container">    An array of timers and event emitters that have been explicitly added\nto the domain.  \n  </section>	http://nodejs.org/api/all.html#all_domain_members
Domain members	R	Domain.members										http://nodejs.org/api/all.html#all_domain_members
Events	A										<section class="prog__container">    Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\ncalled.  \n  For instance: a     net.Server     object emits an event each time a peer\nconnects to it; a     fs.ReadStream     emits an event when the file is opened;\na   stream   emits an event whenever data is available to be read.  \n  All objects that emit events are instances of the   EventEmitter   class. These\nobjects expose an   eventEmitter.on()   function that allows one or more\nfunctions to be attached to named events emitted by the object. Typically,\nevent names are camel-cased strings but any valid JavaScript property key\ncan be used.  \n  When the   EventEmitter   object emits an event, all of the functions attached\nto that specific event are called   synchronously  . Any values returned by the\ncalled listeners are   ignored   and will be discarded.  \n  The following example shows a simple   EventEmitter   instance with a single\nlistener. The   eventEmitter.on()   method is used to register listeners, while\nthe   eventEmitter.emit()   method is used to trigger the event.  \n    const EventEmitter = require(&#39;events&#39;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;an event occurred!&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_events
Events	A										<section class="prog__container">    Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\ncalled.  \n  For instance: a     net.Server     object emits an event each time a peer\nconnects to it; a     fs.ReadStream     emits an event when the file is opened;\na   stream   emits an event whenever data is available to be read.  \n  All objects that emit events are instances of the   EventEmitter   class. These\nobjects expose an   eventEmitter.on()   function that allows one or more\nfunctions to be attached to named events emitted by the object. Typically,\nevent names are camel-cased strings but any valid JavaScript property key\ncan be used.  \n  When the   EventEmitter   object emits an event, all of the functions attached\nto that specific event are called   synchronously  . Any values returned by the\ncalled listeners are   ignored   and will be discarded.  \n  The following example shows a simple   EventEmitter   instance with a single\nlistener. The   eventEmitter.on()   method is used to register listeners, while\nthe   eventEmitter.emit()   method is used to trigger the event.  \n    const EventEmitter = require(&#39;events&#39;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;an event occurred!&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_events
EventEmitter	A										<section class="prog__container">    The   EventEmitter   class is defined and exposed by the   events   module:  \n    const EventEmitter = require(&#39;events&#39;);\n    \n  All EventEmitters emit the event   &#39;newListener&#39;   when new listeners are\nadded and   &#39;removeListener&#39;   when existing listeners are removed.  \n  </section>	http://nodejs.org/api/all.html#all_eventemitter
EventEmitter	A										<section class="prog__container">    The   EventEmitter   class is defined and exposed by the   events   module:  \n    const EventEmitter = require(&#39;events&#39;);\n    \n  All EventEmitters emit the event   &#39;newListener&#39;   when new listeners are\nadded and   &#39;removeListener&#39;   when existing listeners are removed.  \n  </section>	http://nodejs.org/api/all.html#all_eventemitter
EventEmitter.listenerCount	A										<section class="prog__container">    A class method that returns the number of listeners for the given   eventName  \nregistered on the given   emitter  .  \n    const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, &#39;event&#39;));\n// Prints: 2\n    \n  <pre><code>EventEmitter.listenerCount(emitter, eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listenercount_emitter_eventname
EventEmitter listenerCount	R	EventEmitter.listenerCount										http://nodejs.org/api/all.html#all_eventemitter_listenercount_emitter_eventname
EventEmitter.addListener	A										<section class="prog__container">    Alias for   emitter.on(eventName, listener)  .  \n  <pre><code>emitter.addListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_addlistener_eventname_listener
EventEmitter addListener	R	EventEmitter.addListener										http://nodejs.org/api/all.html#all_eventemitter_addlistener_eventname_listener
EventEmitter.emit	A										<section class="prog__container">    Synchronously calls each of the listeners registered for the event named\n  eventName  , in the order they were registered, passing the supplied arguments\nto each.  \n  Returns   true   if the event had listeners,   false   otherwise.  \n  <pre><code>emitter.emit(eventName[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_emit_eventname_...args
EventEmitter emit	R	EventEmitter.emit										http://nodejs.org/api/all.html#all_eventemitter_emit_eventname_...args
EventEmitter.eventNames	A										<section class="prog__container">    Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or Symbols.  \n    const EventEmitter = require(&#39;events&#39;);\nconst myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; {});\nmyEE.on(&#39;bar&#39;, () =&gt; {});\n\nconst sym = Symbol(&#39;symbol&#39;);\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]\n    \n  <pre><code>emitter.eventNames()</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_eventnames
EventEmitter eventNames	R	EventEmitter.eventNames										http://nodejs.org/api/all.html#all_eventemitter_eventnames
EventEmitter.getMaxListeners	A										<section class="prog__container">    Returns the current max listener value for the   EventEmitter   which is either\nset by     emitter.setMaxListeners(n)     or defaults to\n    EventEmitter.defaultMaxListeners    .  \n  <pre><code>emitter.getMaxListeners()</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_getmaxlisteners
EventEmitter getMaxListeners	R	EventEmitter.getMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_getmaxlisteners
EventEmitter.listenerCount	A										<section class="prog__container">    Returns the number of listeners listening to the event named   eventName  .  \n  <pre><code>emitter.listenerCount(eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listenercount_eventname
EventEmitter listenerCount	R	EventEmitter.listenerCount										http://nodejs.org/api/all.html#all_eventemitter_listenercount_eventname
EventEmitter.listeners	A										<section class="prog__container">    Returns a copy of the array of listeners for the event named   eventName  .  \n    server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\nconsole.log(util.inspect(server.listeners(&#39;connection&#39;)));\n// Prints: [ [Function] ]\n    \n  <pre><code>emitter.listeners(eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listeners_eventname
EventEmitter listeners	R	EventEmitter.listeners										http://nodejs.org/api/all.html#all_eventemitter_listeners_eventname
EventEmitter.on	A										<section class="prog__container">    Adds the   listener   function to the end of the listeners array for the\nevent named   eventName  . No checks are made to see if the   listener   has\nalready been added. Multiple calls passing the same combination of   eventName  \nand   listener   will result in the   listener   being added, and called, multiple\ntimes.  \n    server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n    \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  By default, event listeners are invoked in the order they are added. The\n  emitter.prependListener()   method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.  \n    const myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n    \n  <pre><code>emitter.on(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_on_eventname_listener
EventEmitter on	R	EventEmitter.on										http://nodejs.org/api/all.html#all_eventemitter_on_eventname_listener
EventEmitter.once	A										<section class="prog__container">    Adds a   one time     listener   function for the event named   eventName  . The\nnext time   eventName   is triggered, this listener is removed and then invoked.  \n    server.once(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n    \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  By default, event listeners are invoked in the order they are added. The\n  emitter.prependOnceListener()   method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.  \n    const myEE = new EventEmitter();\nmyEE.once(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependOnceListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n    \n  <pre><code>emitter.once(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_once_eventname_listener
EventEmitter once	R	EventEmitter.once										http://nodejs.org/api/all.html#all_eventemitter_once_eventname_listener
EventEmitter.prependListener	A										<section class="prog__container">    Adds the   listener   function to the   beginning   of the listeners array for the\nevent named   eventName  . No checks are made to see if the   listener   has\nalready been added. Multiple calls passing the same combination of   eventName  \nand   listener   will result in the   listener   being added, and called, multiple\ntimes.  \n    server.prependListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n    \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  <pre><code>emitter.prependListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_prependlistener_eventname_listener
EventEmitter prependListener	R	EventEmitter.prependListener										http://nodejs.org/api/all.html#all_eventemitter_prependlistener_eventname_listener
EventEmitter.prependOnceListener	A										<section class="prog__container">    Adds a   one time     listener   function for the event named   eventName   to the\n  beginning   of the listeners array. The next time   eventName   is triggered, this\nlistener is removed, and then invoked.  \n    server.prependOnceListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n    \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  <pre><code>emitter.prependOnceListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_prependoncelistener_eventname_listener
EventEmitter prependOnceListener	R	EventEmitter.prependOnceListener										http://nodejs.org/api/all.html#all_eventemitter_prependoncelistener_eventname_listener
EventEmitter.removeAllListeners	A										<section class="prog__container">    Removes all listeners, or those of the specified   eventName  .  \n  Note that it is bad practice to remove listeners added elsewhere in the code,\nparticularly when the   EventEmitter   instance was created by some other\ncomponent or module (e.g. sockets or file streams).  \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  <pre><code>emitter.removeAllListeners([eventName])</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_removealllisteners_eventname
EventEmitter removeAllListeners	R	EventEmitter.removeAllListeners										http://nodejs.org/api/all.html#all_eventemitter_removealllisteners_eventname
EventEmitter.removeListener	A										<section class="prog__container">    Removes the specified   listener   from the listener array for the event named\n  eventName  .  \n    var callback = (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n};\nserver.on(&#39;connection&#39;, callback);\n// ...\nserver.removeListener(&#39;connection&#39;, callback);\n    \n    removeListener   will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified   eventName  , then   removeListener   must be\ncalled multiple times to remove each instance.  \n  Note that once an event has been emitted, all listeners attached to it at the\ntime of emitting will be called in order. This implies that any   removeListener()  \nor   removeAllListeners()   calls   after   emitting and   before   the last listener\nfinishes execution will not remove them from   emit()   in progress. Subsequent\nevents will behave as expected.  \n    const myEmitter = new MyEmitter();\n\nvar callbackA = () =&gt; {\n  console.log(&#39;A&#39;);\n  myEmitter.removeListener(&#39;event&#39;, callbackB);\n};\n\nvar callbackB = () =&gt; {\n  console.log(&#39;B&#39;);\n};\n\nmyEmitter.on(&#39;event&#39;, callbackA);\n\nmyEmitter.on(&#39;event&#39;, callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n    \n  Because listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered   after   the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe   emitter.listeners()   method will need to be recreated.  \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  <pre><code>emitter.removeListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_removelistener_eventname_listener
EventEmitter removeListener	R	EventEmitter.removeListener										http://nodejs.org/api/all.html#all_eventemitter_removelistener_eventname_listener
EventEmitter.setMaxListeners	A										<section class="prog__container">    By default EventEmitters will print a warning if more than   10   listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\nThe   emitter.setMaxListeners()   method allows the limit to be modified for this\nspecific   EventEmitter   instance. The value can be set to   Infinity   (or   0  )\nto indicate an unlimited number of listeners.  \n  Returns a reference to the   EventEmitter  , so that calls can be chained.  \n  \n  \n  <pre><code>emitter.setMaxListeners(n)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_setmaxlisteners_n
EventEmitter setMaxListeners	R	EventEmitter.setMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_setmaxlisteners_n
EventEmitter.defaultMaxListeners	A										<section class="prog__container">    By default, a maximum of   10   listeners can be registered for any single\nevent. This limit can be changed for individual   EventEmitter   instances\nusing the     emitter.setMaxListeners(n)     method. To change the default\nfor   all     EventEmitter   instances, the   EventEmitter.defaultMaxListeners  \nproperty can be used.  \n  Take caution when setting the   EventEmitter.defaultMaxListeners   because the\nchange effects   all     EventEmitter   instances, including those created before\nthe change is made. However, calling     emitter.setMaxListeners(n)     still has\nprecedence over   EventEmitter.defaultMaxListeners  .  \n  Note that this is not a hard limit. The   EventEmitter   instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a &quot;possible EventEmitter memory leak&quot; has been detected. For any single\n  EventEmitter  , the   emitter.getMaxListeners()   and   emitter.setMaxListeners()  \nmethods can be used to temporarily avoid this warning:  \n    emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once(&#39;event&#39;, () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n    \n  The     --trace-warnings     command line flag can be used to display the\nstack trace for such warnings.  \n  The emitted warning can be inspected with     process.on(&#39;warning&#39;)     and will\nhave the additional   emitter  ,   type   and   count   properties, referring to\nthe event emitter instance, the event’s name and the number of attached\nlisteners, respectively.\nIts   name   property is set to   &#39;MaxListenersExceededWarning&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_eventemitter_defaultmaxlisteners
EventEmitter defaultMaxListeners	R	EventEmitter.defaultMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_defaultmaxlisteners
EventEmitter.newListener	A										<section class="prog__container">    The   EventEmitter   instance will emit its own   &#39;newListener&#39;   event   before  \na listener is added to its internal array of listeners.  \n  Listeners registered for the   &#39;newListener&#39;   event will be passed the event\nname and a reference to the listener being added.  \n  The fact that the event is triggered before adding the listener has a subtle\nbut important side effect: any   additional   listeners registered to the same\n  name     within   the   &#39;newListener&#39;   callback will be inserted   before   the\nlistener that is in the process of being added.  \n    const myEmitter = new MyEmitter();\n// Only do this once so we don&#39;t loop forever\nmyEmitter.once(&#39;newListener&#39;, (event, listener) =&gt; {\n  if (event === &#39;event&#39;) {\n    // Insert a new listener in front\n    myEmitter.on(&#39;event&#39;, () =&gt; {\n      console.log(&#39;B&#39;);\n    });\n  }\n});\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;A&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   B\n//   A\n    \n  </section>	http://nodejs.org/api/all.html#all_eventemitter_newlistener
EventEmitter newListener	R	EventEmitter.newListener										http://nodejs.org/api/all.html#all_eventemitter_newlistener
EventEmitter.removeListener	A										<section class="prog__container">    The   &#39;removeListener&#39;   event is emitted   after   the   listener   is removed.  \n  </section>	http://nodejs.org/api/all.html#all_eventemitter_removelistener
EventEmitter removeListener	R	EventEmitter.removeListener										http://nodejs.org/api/all.html#all_eventemitter_removelistener
fs	A										<section class="prog__container">    File I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do   require(&#39;fs&#39;)  . All the methods have asynchronous and\nsynchronous forms.  \n  The asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be   null   or   undefined  .  \n  When using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.  \n  Here is an example of the asynchronous version:  \n    const fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n});\n    \n  Here is the synchronous version:  \n    const fs = require(&#39;fs&#39;);\n\nfs.unlinkSync(&#39;/tmp/hello&#39;);\nconsole.log(&#39;successfully deleted /tmp/hello&#39;);\n    \n  With the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:  \n    fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n    \n  It could be that   fs.stat   is executed before   fs.rename  .\nThe correct way to do this is to chain the callbacks.  \n    fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n    \n  In busy processes, the programmer is   strongly encouraged   to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.  \n  The relative path to a filename can be used. Remember, however, that this path\nwill be relative to   process.cwd()  .  \n  Most fs functions let you omit the callback argument. If you do, a default\ncallback is used that rethrows errors. To get a trace to the original call\nsite, set the   NODE_DEBUG   environment variable:  \n    $ cat script.js\nfunction bad() {\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_fs
fs	A										<section class="prog__container">    File I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do   require(&#39;fs&#39;)  . All the methods have asynchronous and\nsynchronous forms.  \n  The asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be   null   or   undefined  .  \n  When using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.  \n  Here is an example of the asynchronous version:  \n    const fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n});\n    \n  Here is the synchronous version:  \n    const fs = require(&#39;fs&#39;);\n\nfs.unlinkSync(&#39;/tmp/hello&#39;);\nconsole.log(&#39;successfully deleted /tmp/hello&#39;);\n    \n  With the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:  \n    fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n    \n  It could be that   fs.stat   is executed before   fs.rename  .\nThe correct way to do this is to chain the callbacks.  \n    fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n    \n  In busy processes, the programmer is   strongly encouraged   to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.  \n  The relative path to a filename can be used. Remember, however, that this path\nwill be relative to   process.cwd()  .  \n  Most fs functions let you omit the callback argument. If you do, a default\ncallback is used that rethrows errors. To get a trace to the original call\nsite, set the   NODE_DEBUG   environment variable:  \n    $ cat script.js\nfunction bad() {\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_fs
fs.access	A										<section class="prog__container">    Tests a user&#39;s permissions for the file or directory specified by   path  .\nThe   mode   argument is an optional integer that specifies the accessibility\nchecks to be performed. The following constants define the possible values of\n  mode  . It is possible to create a mask consisting of the bitwise OR of two or\nmore values.  \n  \n    fs.constants.F_OK   -   path   is visible to the calling process. This is useful\nfor determining if a file exists, but says nothing about   rwx   permissions.\nDefault if no   mode   is specified.  \n    fs.constants.R_OK   -   path   can be read by the calling process.  \n    fs.constants.W_OK   -   path   can be written by the calling process.  \n    fs.constants.X_OK   -   path   can be executed by the calling process. This has\nno effect on Windows (will behave like   fs.constants.F_OK  ).  \n  \n  The final argument,   callback  , is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be populated. The following example checks if the file\n  /etc/passwd   can be read and written by the current process.  \n    fs.access(&#39;/etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK, (err) =&gt; {\n  console.log(err ? &#39;no access!&#39; : &#39;can read/write&#39;);\n});\n    \n  Using   fs.access()   to check for the accessibility of a file before calling\n  fs.open()  ,   fs.readFile()   or   fs.writeFile()   is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.  \n  For example:  \n    write (NOT RECOMMENDED)    \n    fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (!err) {\n    console.error(&#39;myfile already exists&#39;);\n    return;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n    \n    write (RECOMMENDED)    \n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  writeMyData(fd);\n});\n    \n    read (NOT RECOMMENDED)    \n    fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n    \n    read (RECOMMENDED)    \n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  readMyData(fd);\n});\n    \n  The &quot;not recommended&quot; examples above check for accessibility and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.  \n  In general, check for the accessibility of a file only if the file won’t be\nused directly, for example when its accessibility is a signal from another\nprocess.  \n  <pre><code>fs.access(path[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_access_path_mode_callback
fs access	R	fs.access										http://nodejs.org/api/all.html#all_fs_access_path_mode_callback
fs.accessSync	A										<section class="prog__container">    Synchronous version of     fs.access()    . This throws if any accessibility\nchecks fail, and does nothing otherwise.  \n  <pre><code>fs.accessSync(path[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_accesssync_path_mode
fs accessSync	R	fs.accessSync										http://nodejs.org/api/all.html#all_fs_accesssync_path_mode
fs.appendFile	A										<section class="prog__container">    Asynchronously append data to a file, creating the file if it does not yet exist.\n  data   can be a string or a buffer.  \n  Example:  \n    fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n    \n  If   options   is a string, then it specifies the encoding. Example:  \n    fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n    \n  Any specified file descriptor has to have been opened for appending.  \n    Note: If a file descriptor is specified as the   file  , it will not be closed\nautomatically.    \n  <pre><code>fs.appendFile(file, data[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_appendfile_file_data_options_callback
fs appendFile	R	fs.appendFile										http://nodejs.org/api/all.html#all_fs_appendfile_file_data_options_callback
fs.appendFileSync	A										<section class="prog__container">    The synchronous version of     fs.appendFile()    . Returns   undefined  .  \n  <pre><code>fs.appendFileSync(file, data[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_appendfilesync_file_data_options
fs appendFileSync	R	fs.appendFileSync										http://nodejs.org/api/all.html#all_fs_appendfilesync_file_data_options
fs.chmod	A										<section class="prog__container">    Asynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.chmod(path, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chmod_path_mode_callback
fs chmod	R	fs.chmod										http://nodejs.org/api/all.html#all_fs_chmod_path_mode_callback
fs.chmodSync	A										<section class="prog__container">    Synchronous chmod(2). Returns   undefined  .  \n  <pre><code>fs.chmodSync(path, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chmodsync_path_mode
fs chmodSync	R	fs.chmodSync										http://nodejs.org/api/all.html#all_fs_chmodsync_path_mode
fs.chown	A										<section class="prog__container">    Asynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.chown(path, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chown_path_uid_gid_callback
fs chown	R	fs.chown										http://nodejs.org/api/all.html#all_fs_chown_path_uid_gid_callback
fs.chownSync	A										<section class="prog__container">    Synchronous chown(2). Returns   undefined  .  \n  <pre><code>fs.chownSync(path, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chownsync_path_uid_gid
fs chownSync	R	fs.chownSync										http://nodejs.org/api/all.html#all_fs_chownsync_path_uid_gid
fs.close	A										<section class="prog__container">    Asynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.close(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_close_fd_callback
fs close	R	fs.close										http://nodejs.org/api/all.html#all_fs_close_fd_callback
fs.closeSync	A										<section class="prog__container">    Synchronous close(2). Returns   undefined  .  \n  <pre><code>fs.closeSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_closesync_fd
fs closeSync	R	fs.closeSync										http://nodejs.org/api/all.html#all_fs_closesync_fd
fs.createReadStream	A										<section class="prog__container">    Returns a new     ReadStream     object. (See   Readable Stream  ).  \n  Be aware that, unlike the default value set for   highWaterMark   on a\nreadable stream (16 kb), the stream returned by this method has a\ndefault value of 64 kb for the same parameter.  \n    options   is an object or string with the following defaults:  \n    {\n  flags: &#39;r&#39;,\n  encoding: null,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n    \n    options   can include   start   and   end   values to read a range of bytes from\nthe file instead of the entire file.  Both   start   and   end   are inclusive and\nstart at 0. The   encoding   can be any one of those accepted by     Buffer    .  \n  If   fd   is specified,   ReadStream   will ignore the   path   argument and will use\nthe specified file descriptor. This means that no   &#39;open&#39;   event will be\nemitted. Note that   fd   should be blocking; non-blocking   fd  s should be passed\nto     net.Socket    .  \n  If   autoClose   is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error.  It is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.  If   autoClose   is set to true (default\nbehavior), on   error   or   end   the file descriptor will be closed\nautomatically.  \n    mode   sets the file mode (permission and sticky bits), but only if the\nfile was created.  \n  An example to read the last 10 bytes of a file which is 100 bytes long:  \n    fs.createReadStream(&#39;sample.txt&#39;, {start: 90, end: 99});\n    \n  If   options   is a string, then it specifies the encoding.  \n  <pre><code>fs.createReadStream(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_createreadstream_path_options
fs createReadStream	R	fs.createReadStream										http://nodejs.org/api/all.html#all_fs_createreadstream_path_options
fs.createWriteStream	A										<section class="prog__container">    Returns a new     WriteStream     object. (See   Writable Stream  ).  \n    options   is an object or string with the following defaults:  \n    {\n  flags: &#39;w&#39;,\n  defaultEncoding: &#39;utf8&#39;,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n    \n    options   may also include a   start   option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a   flags   mode of   r+   rather than the\ndefault mode   w  . The   defaultEncoding   can be any one of those accepted by\n    Buffer    .  \n  If   autoClose   is set to true (default behavior) on   error   or   end  \nthe file descriptor will be closed automatically. If   autoClose   is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.  \n  Like     ReadStream    , if   fd   is specified,   WriteStream   will ignore the\n  path   argument and will use the specified file descriptor. This means that no\n  &#39;open&#39;   event will be emitted. Note that   fd   should be blocking; non-blocking\n  fd  s should be passed to     net.Socket    .  \n  If   options   is a string, then it specifies the encoding.  \n  <pre><code>fs.createWriteStream(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_createwritestream_path_options
fs createWriteStream	R	fs.createWriteStream										http://nodejs.org/api/all.html#all_fs_createwritestream_path_options
fs.exists	A										<section class="prog__container">    Test whether or not the given path exists by checking with the file system.\nThen call the   callback   argument with either true or false.  Example:  \n    fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n    \n    Note that the parameter to this callback is not consistent with other\nNode.js callbacks.   Normally, the first parameter to a Node.js callback is\nan   err   parameter, optionally followed by other parameters. The\n  fs.exists()   callback has only one boolean parameter. This is one reason\n  fs.access()   is recommended instead of   fs.exists()  .  \n  Using   fs.exists()   to check for the existence of a file before calling\n  fs.open()  ,   fs.readFile()   or   fs.writeFile()   is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.  \n  For example:  \n    write (NOT RECOMMENDED)    \n    fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    console.error(&#39;myfile already exists&#39;);\n  } else {\n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n    \n    write (RECOMMENDED)    \n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n  writeMyData(fd);\n});\n    \n    read (NOT RECOMMENDED)    \n    fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n      readMyData(fd);\n    });\n  } else {\n    console.error(&#39;myfile does not exist&#39;);\n  }\n});\n    \n    read (RECOMMENDED)    \n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  } else {\n    readMyData(fd);\n  }\n});\n    \n  The &quot;not recommended&quot; examples above check for existence and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.  \n  In general, check for the existence of a file only if the file won’t be\nused directly, for example when its existence is a signal from another\nprocess.  \n  <pre><code>fs.exists(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_exists_path_callback
fs exists	R	fs.exists										http://nodejs.org/api/all.html#all_fs_exists_path_callback
fs.existsSync	A										<section class="prog__container">    Synchronous version of     fs.exists()    .\nReturns   true   if the file exists,   false   otherwise.  \n  Note that   fs.exists()   is deprecated, but   fs.existsSync()   is not.\n(The   callback   parameter to   fs.exists()   accepts parameters that are\ninconsistent with other Node.js callbacks.   fs.existsSync()   does not use\na callback.)  \n  <pre><code>fs.existsSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_existssync_path
fs existsSync	R	fs.existsSync										http://nodejs.org/api/all.html#all_fs_existssync_path
fs.fchmod	A										<section class="prog__container">    Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.  \n  <pre><code>fs.fchmod(fd, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchmod_fd_mode_callback
fs fchmod	R	fs.fchmod										http://nodejs.org/api/all.html#all_fs_fchmod_fd_mode_callback
fs.fchmodSync	A										<section class="prog__container">    Synchronous fchmod(2). Returns   undefined  .  \n  <pre><code>fs.fchmodSync(fd, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchmodsync_fd_mode
fs fchmodSync	R	fs.fchmodSync										http://nodejs.org/api/all.html#all_fs_fchmodsync_fd_mode
fs.fchown	A										<section class="prog__container">    Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.fchown(fd, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchown_fd_uid_gid_callback
fs fchown	R	fs.fchown										http://nodejs.org/api/all.html#all_fs_fchown_fd_uid_gid_callback
fs.fchownSync	A										<section class="prog__container">    Synchronous fchown(2). Returns   undefined  .  \n  <pre><code>fs.fchownSync(fd, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchownsync_fd_uid_gid
fs fchownSync	R	fs.fchownSync										http://nodejs.org/api/all.html#all_fs_fchownsync_fd_uid_gid
fs.fdatasync	A										<section class="prog__container">    Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.  \n  <pre><code>fs.fdatasync(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fdatasync_fd_callback
fs fdatasync	R	fs.fdatasync										http://nodejs.org/api/all.html#all_fs_fdatasync_fd_callback
fs.fdatasyncSync	A										<section class="prog__container">    Synchronous fdatasync(2). Returns   undefined  .  \n  <pre><code>fs.fdatasyncSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fdatasyncsync_fd
fs fdatasyncSync	R	fs.fdatasyncSync										http://nodejs.org/api/all.html#all_fs_fdatasyncsync_fd
fs.fstat	A										<section class="prog__container">    Asynchronous fstat(2). The callback gets two arguments   (err, stats)   where\n  stats   is an     fs.Stats     object.   fstat()   is identical to     stat()    ,\nexcept that the file to be stat-ed is specified by the file descriptor   fd  .  \n  <pre><code>fs.fstat(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fstat_fd_callback
fs fstat	R	fs.fstat										http://nodejs.org/api/all.html#all_fs_fstat_fd_callback
fs.fstatSync	A										<section class="prog__container">    Synchronous fstat(2). Returns an instance of     fs.Stats    .  \n  <pre><code>fs.fstatSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fstatsync_fd
fs fstatSync	R	fs.fstatSync										http://nodejs.org/api/all.html#all_fs_fstatsync_fd
fs.fsync	A										<section class="prog__container">    Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.fsync(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fsync_fd_callback
fs fsync	R	fs.fsync										http://nodejs.org/api/all.html#all_fs_fsync_fd_callback
fs.fsyncSync	A										<section class="prog__container">    Synchronous fsync(2). Returns   undefined  .  \n  <pre><code>fs.fsyncSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fsyncsync_fd
fs fsyncSync	R	fs.fsyncSync										http://nodejs.org/api/all.html#all_fs_fsyncsync_fd
fs.ftruncate	A										<section class="prog__container">    Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.  \n  If the file referred to by the file descriptor was larger than   len   bytes, only\nthe first   len   bytes will be retained in the file.  \n  For example, the following program retains only the first four bytes of the file  \n    console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n});\n// Prints: Node\n    \n  If the file previously was shorter than   len   bytes, it is extended, and the\nextended part is filled with null bytes (&#39;&#39;). For example,  \n    console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf-8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(!err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&#39;Node.js&#39; in UTF8)\n    \n  The last three bytes are null bytes (&#39;&#39;), to compensate the over-truncation.  \n  <pre><code>fs.ftruncate(fd, len, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_ftruncate_fd_len_callback
fs ftruncate	R	fs.ftruncate										http://nodejs.org/api/all.html#all_fs_ftruncate_fd_len_callback
fs.ftruncateSync	A										<section class="prog__container">    Synchronous ftruncate(2). Returns   undefined  .  \n  <pre><code>fs.ftruncateSync(fd, len)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_ftruncatesync_fd_len
fs ftruncateSync	R	fs.ftruncateSync										http://nodejs.org/api/all.html#all_fs_ftruncatesync_fd_len
fs.futimes	A										<section class="prog__container">    Change the file timestamps of a file referenced by the supplied file\ndescriptor.  \n  <pre><code>fs.futimes(fd, atime, mtime, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_futimes_fd_atime_mtime_callback
fs futimes	R	fs.futimes										http://nodejs.org/api/all.html#all_fs_futimes_fd_atime_mtime_callback
fs.futimesSync	A										<section class="prog__container">    Synchronous version of     fs.futimes()    . Returns   undefined  .  \n  <pre><code>fs.futimesSync(fd, atime, mtime)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_futimessync_fd_atime_mtime
fs futimesSync	R	fs.futimesSync										http://nodejs.org/api/all.html#all_fs_futimessync_fd_atime_mtime
fs.lchmod	A										<section class="prog__container">    Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.  \n  Only available on Mac OS X.  \n  <pre><code>fs.lchmod(path, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback
fs lchmod	R	fs.lchmod										http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback
fs.lchmodSync	A										<section class="prog__container">    Synchronous lchmod(2). Returns   undefined  .  \n  <pre><code>fs.lchmodSync(path, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchmodsync_path_mode
fs lchmodSync	R	fs.lchmodSync										http://nodejs.org/api/all.html#all_fs_lchmodsync_path_mode
fs.lchown	A										<section class="prog__container">    Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.lchown(path, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchown_path_uid_gid_callback
fs lchown	R	fs.lchown										http://nodejs.org/api/all.html#all_fs_lchown_path_uid_gid_callback
fs.lchownSync	A										<section class="prog__container">    Synchronous lchown(2). Returns   undefined  .  \n  <pre><code>fs.lchownSync(path, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchownsync_path_uid_gid
fs lchownSync	R	fs.lchownSync										http://nodejs.org/api/all.html#all_fs_lchownsync_path_uid_gid
fs.link	A										<section class="prog__container">    Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.  \n  <pre><code>fs.link(existingPath, newPath, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_link_existingpath_newpath_callback
fs link	R	fs.link										http://nodejs.org/api/all.html#all_fs_link_existingpath_newpath_callback
fs.linkSync	A										<section class="prog__container">    Synchronous link(2). Returns   undefined  .  \n  <pre><code>fs.linkSync(existingPath, newPath)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_linksync_existingpath_newpath
fs linkSync	R	fs.linkSync										http://nodejs.org/api/all.html#all_fs_linksync_existingpath_newpath
fs.lstat	A										<section class="prog__container">    Asynchronous lstat(2). The callback gets two arguments   (err, stats)   where\n  stats   is a     fs.Stats     object.   lstat()   is identical to   stat()  ,\nexcept that if   path   is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.  \n  <pre><code>fs.lstat(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lstat_path_callback
fs lstat	R	fs.lstat										http://nodejs.org/api/all.html#all_fs_lstat_path_callback
fs.lstatSync	A										<section class="prog__container">    Synchronous lstat(2). Returns an instance of     fs.Stats    .  \n  <pre><code>fs.lstatSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lstatsync_path
fs lstatSync	R	fs.lstatSync										http://nodejs.org/api/all.html#all_fs_lstatsync_path
fs.mkdir	A										<section class="prog__container">    Asynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback.   mode   defaults to   0o777  .  \n  <pre><code>fs.mkdir(path[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdir_path_mode_callback
fs mkdir	R	fs.mkdir										http://nodejs.org/api/all.html#all_fs_mkdir_path_mode_callback
fs.mkdirSync	A										<section class="prog__container">    Synchronous mkdir(2). Returns   undefined  .  \n  <pre><code>fs.mkdirSync(path[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdirsync_path_mode
fs mkdirSync	R	fs.mkdirSync										http://nodejs.org/api/all.html#all_fs_mkdirsync_path_mode
fs.mkdtemp	A										<section class="prog__container">    Creates a unique temporary directory.  \n  Generates six random characters to be appended behind a required\n  prefix   to create a unique temporary directory.  \n  The created folder path is passed as a string to the callback&#39;s second\nparameter.  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use.  \n  Example:  \n    fs.mkdtemp(&#39;/tmp/foo-&#39;, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2\n});\n    \n    Note  : The   fs.mkdtemp()   method will append the six randomly selected\ncharacters directly to the   prefix   string. For instance, given a directory\n  /tmp  , if the intention is to create a temporary directory   within     /tmp  ,\nthe   prefix     must   end with a trailing platform-specific path separator\n(  require(&#39;path&#39;).sep  ).  \n    // The parent directory for the new temporary directory\nconst tmpDir = &#39;/tmp&#39;;\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst path = require(&#39;path&#39;);\nfs.mkdtemp(tmpDir + path.sep, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n    \n  <pre><code>fs.mkdtemp(prefix[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdtemp_prefix_options_callback
fs mkdtemp	R	fs.mkdtemp										http://nodejs.org/api/all.html#all_fs_mkdtemp_prefix_options_callback
fs.mkdtempSync	A										<section class="prog__container">    The synchronous version of     fs.mkdtemp()    . Returns the created\nfolder path.  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use.  \n  <pre><code>fs.mkdtempSync(prefix[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdtempsync_prefix_options
fs mkdtempSync	R	fs.mkdtempSync										http://nodejs.org/api/all.html#all_fs_mkdtempsync_prefix_options
fs.open	A										<section class="prog__container">    Asynchronous file open. See open(2).   flags   can be:  \n  \n      &#39;r&#39;   - Open file for reading.\nAn exception occurs if the file does not exist.  \n  \n      &#39;r+&#39;   - Open file for reading and writing.\nAn exception occurs if the file does not exist.  \n  \n      &#39;rs+&#39;   - Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.  \n  This is primarily useful for opening files on NFS mounts as it allows you to\nskip the potentially stale local cache. It has a very real impact on I/O\nperformance so don&#39;t use this flag unless you need it.  \n  Note that this doesn&#39;t turn   fs.open()   into a synchronous blocking call.\nIf that&#39;s what you want then you should be using   fs.openSync()    \n  \n      &#39;w&#39;   - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).  \n  \n      &#39;wx&#39;   - Like   &#39;w&#39;   but fails if   path   exists.  \n  \n      &#39;w+&#39;   - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).  \n  \n      &#39;wx+&#39;   - Like   &#39;w+&#39;   but fails if   path   exists.  \n  \n      &#39;a&#39;   - Open file for appending.\nThe file is created if it does not exist.  \n  \n      &#39;ax&#39;   - Like   &#39;a&#39;   but fails if   path   exists.  \n  \n      &#39;a+&#39;   - Open file for reading and appending.\nThe file is created if it does not exist.  \n  \n      &#39;ax+&#39;   - Like   &#39;a+&#39;   but fails if   path   exists.  \n  \n  \n    mode   sets the file mode (permission and sticky bits), but only if the file was\ncreated. It defaults to   0666  , readable and writable.  \n  The callback gets two arguments   (err, fd)  .  \n  The exclusive flag   &#39;x&#39;   (  O_EXCL   flag in open(2)) ensures that   path   is newly\ncreated. On POSIX systems,   path   is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network file\nsystems.  \n    flags   can also be a number as documented by open(2); commonly used constants\nare available from   fs.constants  .  On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g.   O_WRONLY   to   FILE_GENERIC_WRITE  ,\nor   O_EXCL|O_CREAT   to   CREATE_NEW  , as accepted by CreateFileW.  \n  On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.  \n    Note: The behavior of   fs.open()   is platform specific for some flags. As such,\nopening a directory on OS X and Linux with the   &#39;a+&#39;   flag - see example below -\nwill return an error. In contrast, on Windows and FreeBSD, a file descriptor\nwill be returned.    \n    // OS X and Linux\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n});\n\n// Windows and FreeBSD\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n});\n    \n  <pre><code>fs.open(path, flags[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_open_path_flags_mode_callback
fs open	R	fs.open										http://nodejs.org/api/all.html#all_fs_open_path_flags_mode_callback
fs.openSync	A										<section class="prog__container">    Synchronous version of     fs.open()    . Returns an integer representing the file\ndescriptor.  \n  <pre><code>fs.openSync(path, flags[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_opensync_path_flags_mode
fs openSync	R	fs.openSync										http://nodejs.org/api/all.html#all_fs_opensync_path_flags_mode
fs.read	A										<section class="prog__container">    Read data from the file specified by   fd  .  \n    buffer   is the buffer that the data will be written to.  \n    offset   is the offset in the buffer to start writing at.  \n    length   is an integer specifying the number of bytes to read.  \n    position   is an integer specifying where to begin reading from in the file.\nIf   position   is   null  , data will be read from the current file position.  \n  The callback is given the three arguments,   (err, bytesRead, buffer)  .  \n  <pre><code>fs.read(fd, buffer, offset, length, position, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_read_fd_buffer_offset_length_position_callback
fs read	R	fs.read										http://nodejs.org/api/all.html#all_fs_read_fd_buffer_offset_length_position_callback
fs.readdir	A										<section class="prog__container">    Asynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments   (err, files)   where   files   is an array of\nthe names of the files in the directory excluding   &#39;.&#39;   and   &#39;..&#39;  .  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe filenames passed to the callback. If the   encoding   is set to   &#39;buffer&#39;  ,\nthe filenames returned will be passed as   Buffer   objects.  \n  <pre><code>fs.readdir(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readdir_path_options_callback
fs readdir	R	fs.readdir										http://nodejs.org/api/all.html#all_fs_readdir_path_options_callback
fs.readdirSync	A										<section class="prog__container">    Synchronous readdir(3). Returns an array of filenames excluding   &#39;.&#39;   and\n  &#39;..&#39;  .  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe filenames passed to the callback. If the   encoding   is set to   &#39;buffer&#39;  ,\nthe filenames returned will be passed as   Buffer   objects.  \n  <pre><code>fs.readdirSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readdirsync_path_options
fs readdirSync	R	fs.readdirSync										http://nodejs.org/api/all.html#all_fs_readdirsync_path_options
fs.readFile	A										<section class="prog__container">    Asynchronously reads the entire contents of a file. Example:  \n    fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n    \n  The callback is passed two arguments   (err, data)  , where   data   is the\ncontents of the file.  \n  If no encoding is specified, then the raw buffer is returned.  \n  If   options   is a string, then it specifies the encoding. Example:  \n    fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n    \n  Any specified file descriptor has to support reading.  \n    Note: If a file descriptor is specified as the   file  , it will not be closed\nautomatically.    \n  <pre><code>fs.readFile(file[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readfile_file_options_callback
fs readFile	R	fs.readFile										http://nodejs.org/api/all.html#all_fs_readfile_file_options_callback
fs.readFileSync	A										<section class="prog__container">    Synchronous version of     fs.readFile    . Returns the contents of the   file  .  \n  If the   encoding   option is specified then this function returns a\nstring. Otherwise it returns a buffer.  \n  <pre><code>fs.readFileSync(file[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readfilesync_file_options
fs readFileSync	R	fs.readFileSync										http://nodejs.org/api/all.html#all_fs_readfilesync_file_options
fs.readlink	A										<section class="prog__container">    Asynchronous readlink(2). The callback gets two arguments   (err,\nlinkString)  .  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe link path passed to the callback. If the   encoding   is set to   &#39;buffer&#39;  ,\nthe link path returned will be passed as a   Buffer   object.  \n  <pre><code>fs.readlink(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readlink_path_options_callback
fs readlink	R	fs.readlink										http://nodejs.org/api/all.html#all_fs_readlink_path_options_callback
fs.readlinkSync	A										<section class="prog__container">    Synchronous readlink(2). Returns the symbolic link&#39;s string value.  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe link path passed to the callback. If the   encoding   is set to   &#39;buffer&#39;  ,\nthe link path returned will be passed as a   Buffer   object.  \n  <pre><code>fs.readlinkSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readlinksync_path_options
fs readlinkSync	R	fs.readlinkSync										http://nodejs.org/api/all.html#all_fs_readlinksync_path_options
fs.readSync	A										<section class="prog__container">    Synchronous version of     fs.read()    . Returns the number of   bytesRead  .  \n  <pre><code>fs.readSync(fd, buffer, offset, length, position)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readsync_fd_buffer_offset_length_position
fs readSync	R	fs.readSync										http://nodejs.org/api/all.html#all_fs_readsync_fd_buffer_offset_length_position
fs.realpath	A										<section class="prog__container">    Asynchronous realpath(3). The   callback   gets two arguments   (err,\nresolvedPath)  . May use   process.cwd   to resolve relative paths.  \n  Only paths that can be converted to UTF8 strings are supported.  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe path passed to the callback. If the   encoding   is set to   &#39;buffer&#39;  ,\nthe path returned will be passed as a   Buffer   object.  \n  <pre><code>fs.realpath(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_realpath_path_options_callback
fs realpath	R	fs.realpath										http://nodejs.org/api/all.html#all_fs_realpath_path_options_callback
fs.realpathSync	A										<section class="prog__container">    Synchronous realpath(3). Returns the resolved path.  \n  Only paths that can be converted to UTF8 strings are supported.  \n  The optional   options   argument can be a string specifying an encoding, or an\nobject with an   encoding   property specifying the character encoding to use for\nthe returned value. If the   encoding   is set to   &#39;buffer&#39;  , the path returned\nwill be passed as a   Buffer   object.  \n  <pre><code>fs.realpathSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_realpathsync_path_options
fs realpathSync	R	fs.realpathSync										http://nodejs.org/api/all.html#all_fs_realpathsync_path_options
fs.rename	A										<section class="prog__container">    Asynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.rename(oldPath, newPath, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rename_oldpath_newpath_callback
fs rename	R	fs.rename										http://nodejs.org/api/all.html#all_fs_rename_oldpath_newpath_callback
fs.renameSync	A										<section class="prog__container">    Synchronous rename(2). Returns   undefined  .  \n  <pre><code>fs.renameSync(oldPath, newPath)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_renamesync_oldpath_newpath
fs renameSync	R	fs.renameSync										http://nodejs.org/api/all.html#all_fs_renamesync_oldpath_newpath
fs.rmdir	A										<section class="prog__container">    Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.rmdir(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rmdir_path_callback
fs rmdir	R	fs.rmdir										http://nodejs.org/api/all.html#all_fs_rmdir_path_callback
fs.rmdirSync	A										<section class="prog__container">    Synchronous rmdir(2). Returns   undefined  .  \n  <pre><code>fs.rmdirSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rmdirsync_path
fs rmdirSync	R	fs.rmdirSync										http://nodejs.org/api/all.html#all_fs_rmdirsync_path
fs.stat	A										<section class="prog__container">    Asynchronous stat(2). The callback gets two arguments   (err, stats)   where\n  stats   is an     fs.Stats     object.  \n  In case of an error, the   err.code   will be one of   Common System Errors  .  \n  Using   fs.stat()   to check for the existence of a file before calling\n  fs.open()  ,   fs.readFile()   or   fs.writeFile()   is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.  \n  To check if a file exists without manipulating it afterwards,     fs.access()    \nis recommended.  \n  <pre><code>fs.stat(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_stat_path_callback
fs stat	R	fs.stat										http://nodejs.org/api/all.html#all_fs_stat_path_callback
fs.statSync	A										<section class="prog__container">    Synchronous stat(2). Returns an instance of     fs.Stats    .  \n  <pre><code>fs.statSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_statsync_path
fs statSync	R	fs.statSync										http://nodejs.org/api/all.html#all_fs_statsync_path
fs.symlink	A										<section class="prog__container">    Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The   type   argument can be set to   &#39;dir&#39;  ,\n  &#39;file&#39;  , or   &#39;junction&#39;   (default is   &#39;file&#39;  ) and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using   &#39;junction&#39;  , the   target  \nargument will automatically be normalized to absolute path.  \n  Here is an example below:  \n    fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;);\n    \n  It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.  \n  <pre><code>fs.symlink(target, path[, type], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_symlink_target_path_type_callback
fs symlink	R	fs.symlink										http://nodejs.org/api/all.html#all_fs_symlink_target_path_type_callback
fs.symlinkSync	A										<section class="prog__container">    Synchronous symlink(2). Returns   undefined  .  \n  <pre><code>fs.symlinkSync(target, path[, type])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_symlinksync_target_path_type
fs symlinkSync	R	fs.symlinkSync										http://nodejs.org/api/all.html#all_fs_symlinksync_target_path_type
fs.truncate	A										<section class="prog__container">    Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case,   fs.ftruncate()   is called.  \n  <pre><code>fs.truncate(path, len, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_truncate_path_len_callback
fs truncate	R	fs.truncate										http://nodejs.org/api/all.html#all_fs_truncate_path_len_callback
fs.truncateSync	A										<section class="prog__container">    Synchronous truncate(2). Returns   undefined  . A file descriptor can also be\npassed as the first argument. In this case,   fs.ftruncateSync()   is called.  \n  <pre><code>fs.truncateSync(path, len)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_truncatesync_path_len
fs truncateSync	R	fs.truncateSync										http://nodejs.org/api/all.html#all_fs_truncatesync_path_len
fs.unlink	A										<section class="prog__container">    Asynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.  \n  <pre><code>fs.unlink(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unlink_path_callback
fs unlink	R	fs.unlink										http://nodejs.org/api/all.html#all_fs_unlink_path_callback
fs.unlinkSync	A										<section class="prog__container">    Synchronous unlink(2). Returns   undefined  .  \n  <pre><code>fs.unlinkSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unlinksync_path
fs unlinkSync	R	fs.unlinkSync										http://nodejs.org/api/all.html#all_fs_unlinksync_path
fs.unwatchFile	A										<section class="prog__container">    Stop watching for changes on   filename  . If   listener   is specified, only that\nparticular listener is removed. Otherwise,   all   listeners are removed and you\nhave effectively stopped watching   filename  .  \n  Calling   fs.unwatchFile()   with a filename that is not being watched is a\nno-op, not an error.  \n    Note:     fs.watch()     is more efficient than   fs.watchFile()   and   fs.unwatchFile()  .\n  fs.watch()   should be used instead of   fs.watchFile()   and   fs.unwatchFile()  \nwhen possible.    \n  <pre><code>fs.unwatchFile(filename[, listener])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unwatchfile_filename_listener
fs unwatchFile	R	fs.unwatchFile										http://nodejs.org/api/all.html#all_fs_unwatchfile_filename_listener
fs.utimes	A										<section class="prog__container">    Change file timestamps of the file referenced by the supplied path.  \n  Note: the arguments   atime   and   mtime   of the following related functions\nfollow these rules:  \n  \n  The value should be a Unix timestamp in seconds. For example,   Date.now()  \nreturns milliseconds, so it should be divided by 1000 before passing it in.  \n  If the value is a numeric string like   &#39;123456789&#39;  , the value will get\nconverted to the corresponding number.  \n  If the value is   NaN   or   Infinity  , the value will get converted to\n  Date.now() / 1000  .  \n  \n  <pre><code>fs.utimes(path, atime, mtime, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_utimes_path_atime_mtime_callback
fs utimes	R	fs.utimes										http://nodejs.org/api/all.html#all_fs_utimes_path_atime_mtime_callback
fs.utimesSync	A										<section class="prog__container">    Synchronous version of     fs.utimes()    . Returns   undefined  .  \n  <pre><code>fs.utimesSync(path, atime, mtime)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_utimessync_path_atime_mtime
fs utimesSync	R	fs.utimesSync										http://nodejs.org/api/all.html#all_fs_utimessync_path_atime_mtime
fs.watch	A										<section class="prog__container">    Watch for changes on   filename  , where   filename   is either a file or a\ndirectory.  The returned object is a     fs.FSWatcher    .  \n  The second argument is optional. If   options   is provided as a string, it\nspecifies the   encoding  . Otherwise   options   should be passed as an object.  \n  The listener callback gets two arguments   (eventType, filename)  .    eventType   is either\n  &#39;rename&#39;   or   &#39;change&#39;  , and   filename   is the name of the file which triggered\nthe event.  \n  Note that on most platforms,   &#39;rename&#39;   is emitted whenever a filename appears\nor disappears in the directory.  \n  Also note the listener callback is attached to the   &#39;change&#39;   event fired by\n    fs.FSWatcher    , but it is not the same thing as the   &#39;change&#39;   value of\n  eventType  .  \n  <pre><code>fs.watch(filename[, options][, listener])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener
fs watch	R	fs.watch										http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener
fs.watchFile	A										<section class="prog__container">    Watch for changes on   filename  . The callback   listener   will be called each\ntime the file is accessed.  \n  The   options   argument may be omitted. If provided, it should be an object. The\n  options   object may contain a boolean named   persistent   that indicates\nwhether the process should continue to run as long as files are being watched.\nThe   options   object may specify an   interval   property indicating how often the\ntarget should be polled in milliseconds. The default is\n  { persistent: true, interval: 5007 }  .  \n  The   listener   gets two arguments the current stat object and the previous\nstat object:  \n    fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n    \n  These stat objects are instances of   fs.Stat  .  \n  If you want to be notified when the file was modified, not just accessed,\nyou need to compare   curr.mtime   and   prev.mtime  .  \n    Note: when an   fs.watchFile   operation results in an   ENOENT   error, it will\n invoke the listener once, with all the fields zeroed (or, for dates, the Unix\n Epoch). In Windows,   blksize   and   blocks   fields will be   undefined  , instead\n of zero. If the file is created later on, the listener will be called again,\n with the latest stat objects. This is a change in functionality since v0.10.    \n    Note:     fs.watch()     is more efficient than   fs.watchFile   and\n  fs.unwatchFile  .   fs.watch   should be used instead of   fs.watchFile   and\n  fs.unwatchFile   when possible.    \n  <pre><code>fs.watchFile(filename[, options], listener)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_watchfile_filename_options_listener
fs watchFile	R	fs.watchFile										http://nodejs.org/api/all.html#all_fs_watchfile_filename_options_listener
fs.write	A										<section class="prog__container">    Write   buffer   to the file specified by   fd  .  \n    offset   and   length   determine the part of the buffer to be written.  \n    position   refers to the offset from the beginning of the file where this data\nshould be written. If   typeof position !== &#39;number&#39;  , the data will be written\nat the current position. See pwrite(2).  \n  The callback will be given three arguments   (err, written, buffer)   where\n  written   specifies how many   bytes   were written from   buffer  .  \n  Note that it is unsafe to use   fs.write   multiple times on the same file\nwithout waiting for the callback. For this scenario,\n  fs.createWriteStream   is strongly recommended.  \n  On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.  \n  <pre><code>fs.write(fd, buffer[, offset[, length[, position]]], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_write_fd_buffer_offset_length_position_callback
fs write	R	fs.write										http://nodejs.org/api/all.html#all_fs_write_fd_buffer_offset_length_position_callback
fs.write	A										<section class="prog__container">    Write   string   to the file specified by   fd  .  If   string   is not a string, then\nthe value will be coerced to one.  \n    position   refers to the offset from the beginning of the file where this data\nshould be written. If   typeof position !== &#39;number&#39;   the data will be written at\nthe current position. See pwrite(2).  \n    encoding   is the expected string encoding.  \n  The callback will receive the arguments   (err, written, string)   where   written  \nspecifies how many   bytes   the passed string required to be written. Note that\nbytes written is not the same as string characters. See     Buffer.byteLength    .  \n  Unlike when writing   buffer  , the entire string must be written. No substring\nmay be specified. This is because the byte offset of the resulting data may not\nbe the same as the string offset.  \n  Note that it is unsafe to use   fs.write   multiple times on the same file\nwithout waiting for the callback. For this scenario,\n  fs.createWriteStream   is strongly recommended.  \n  On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.  \n  <pre><code>fs.write(fd, string[, position[, encoding]], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_write_fd_string_position_encoding_callback
fs write	R	fs.write										http://nodejs.org/api/all.html#all_fs_write_fd_string_position_encoding_callback
fs.writeFile	A										<section class="prog__container">    Asynchronously writes data to a file, replacing the file if it already exists.\n  data   can be a string or a buffer.  \n  The   encoding   option is ignored if   data   is a buffer. It defaults\nto   &#39;utf8&#39;  .  \n  Example:  \n    fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;It\&#39;s saved!&#39;);\n});\n    \n  If   options   is a string, then it specifies the encoding. Example:  \n    fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n    \n  Any specified file descriptor has to support writing.  \n  Note that it is unsafe to use   fs.writeFile   multiple times on the same file\nwithout waiting for the callback. For this scenario,\n  fs.createWriteStream   is strongly recommended.  \n    Note: If a file descriptor is specified as the   file  , it will not be closed\nautomatically.    \n  <pre><code>fs.writeFile(file, data[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writefile_file_data_options_callback
fs writeFile	R	fs.writeFile										http://nodejs.org/api/all.html#all_fs_writefile_file_data_options_callback
fs.writeFileSync	A										<section class="prog__container">    The synchronous version of     fs.writeFile()    . Returns   undefined  .  \n  <pre><code>fs.writeFileSync(file, data[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writefilesync_file_data_options
fs writeFileSync	R	fs.writeFileSync										http://nodejs.org/api/all.html#all_fs_writefilesync_file_data_options
fs.writeSync	A										<section class="prog__container">    Synchronous versions of     fs.write()    . Returns the number of bytes written.  \n  <pre><code>fs.writeSync(fd, buffer[, offset[, length[, position]]])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writesync_fd_buffer_offset_length_position
fs writeSync	R	fs.writeSync										http://nodejs.org/api/all.html#all_fs_writesync_fd_buffer_offset_length_position
fs.writeSync	A										<section class="prog__container">    Synchronous versions of     fs.write()    . Returns the number of bytes written.  \n  <pre><code>fs.writeSync(fd, string[, position[, encoding]])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writesync_fd_string_position_encoding
fs writeSync	R	fs.writeSync										http://nodejs.org/api/all.html#all_fs_writesync_fd_string_position_encoding
fs.constants	A										<section class="prog__container">    Returns an object containing commonly used constants for file system\noperations. The specific constants currently defined are described in\n  FS Constants  .  \n  </section>	http://nodejs.org/api/all.html#all_fs_constants
fs constants	R	fs.constants										http://nodejs.org/api/all.html#all_fs_constants
fs.FSWatcher	A										<section class="prog__container">    Objects returned from     fs.watch()     are of this type.  \n  The   listener   callback provided to   fs.watch()   receives the returned FSWatcher&#39;s\n  change   events.  \n  The object itself emits these events:  \n  </section>	http://nodejs.org/api/all.html#all_fs.fswatcher
fs FSWatcher	R	fs.FSWatcher										http://nodejs.org/api/all.html#all_fs fswatcher
fs.FSWatcher.close	A										<section class="prog__container">    Stop watching for changes on the given   fs.FSWatcher  .  \n  <pre><code>watcher.close()</code></pre></section>	http://nodejs.org/api/all.html#all_fs.fswatcher_close
fs.FSWatcher close	R	fs.FSWatcher.close										http://nodejs.org/api/all.html#all_fs.fswatcher_close
fs FSWatcher close	R	fs.FSWatcher close										http://nodejs.org/api/all.html#all_fs fswatcher_close
fs.FSWatcher.change	A										<section class="prog__container">    Emitted when something changes in a watched directory or file.\nSee more details in     fs.watch()    .  \n  The   filename   argument may not be provided depending on operating system\nsupport. If   filename   is provided, it will be provided as a   Buffer   if\n  fs.watch()   is called with its   encoding   option set to   &#39;buffer&#39;  , otherwise\n  filename   will be a string.  \n    // Example when handled through fs.watch listener\nfs.watch(&#39;./tmp&#39;, {encoding: &#39;buffer&#39;}, (eventType, filename) =&gt; {\n  if (filename)\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_fs.fswatcher_change
fs.FSWatcher change	R	fs.FSWatcher.change										http://nodejs.org/api/all.html#all_fs.fswatcher_change
fs FSWatcher change	R	fs.FSWatcher change										http://nodejs.org/api/all.html#all_fs fswatcher_change
fs.FSWatcher.error	A										<section class="prog__container">    Emitted when an error occurs.  \n  </section>	http://nodejs.org/api/all.html#all_fs.fswatcher_error
fs.FSWatcher error	R	fs.FSWatcher.error										http://nodejs.org/api/all.html#all_fs.fswatcher_error
fs FSWatcher error	R	fs.FSWatcher error										http://nodejs.org/api/all.html#all_fs fswatcher_error
fs.ReadStream	A										<section class="prog__container">      ReadStream   is a   Readable Stream  .  \n  </section>	http://nodejs.org/api/all.html#all_fs.readstream
fs ReadStream	R	fs.ReadStream										http://nodejs.org/api/all.html#all_fs readstream
fs.ReadStream.bytesRead	A										<section class="prog__container">    The number of bytes read so far.  \n  </section>	http://nodejs.org/api/all.html#all_fs.readstream_bytesread
fs.ReadStream bytesRead	R	fs.ReadStream.bytesRead										http://nodejs.org/api/all.html#all_fs.readstream_bytesread
fs ReadStream bytesRead	R	fs.ReadStream bytesRead										http://nodejs.org/api/all.html#all_fs readstream_bytesread
fs.ReadStream.path	A										<section class="prog__container">    The path to the file the stream is reading from as specified in the first\nargument to   fs.createReadStream()  . If   path   is passed as a string, then\n  readStream.path   will be a string. If   path   is passed as a   Buffer  , then\n  readStream.path   will be a   Buffer  .  \n  </section>	http://nodejs.org/api/all.html#all_fs.readstream_path
fs.ReadStream path	R	fs.ReadStream.path										http://nodejs.org/api/all.html#all_fs.readstream_path
fs ReadStream path	R	fs.ReadStream path										http://nodejs.org/api/all.html#all_fs readstream_path
fs.ReadStream.open	A										<section class="prog__container">    Emitted when the ReadStream&#39;s file is opened.  \n  </section>	http://nodejs.org/api/all.html#all_fs.readstream_open
fs.ReadStream open	R	fs.ReadStream.open										http://nodejs.org/api/all.html#all_fs.readstream_open
fs ReadStream open	R	fs.ReadStream open										http://nodejs.org/api/all.html#all_fs readstream_open
fs.ReadStream.close	A										<section class="prog__container">    Emitted when the   ReadStream  &#39;s underlying file descriptor has been closed\nusing the   fs.close()   method.  \n  </section>	http://nodejs.org/api/all.html#all_fs.readstream_close
fs.ReadStream close	R	fs.ReadStream.close										http://nodejs.org/api/all.html#all_fs.readstream_close
fs ReadStream close	R	fs.ReadStream close										http://nodejs.org/api/all.html#all_fs readstream_close
fs.Stats	A										<section class="prog__container">    Objects returned from     fs.stat()    ,     fs.lstat()     and     fs.fstat()     and their\nsynchronous counterparts are of this type.  \n  \n    stats.isFile()    \n    stats.isDirectory()    \n    stats.isBlockDevice()    \n    stats.isCharacterDevice()    \n    stats.isSymbolicLink()   (only valid with     fs.lstat()    )  \n    stats.isFIFO()    \n    stats.isSocket()    \n  \n  For a regular file     util.inspect(stats)     would return a string very\nsimilar to this:  \n    {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\n}\n    \n  Please note that   atime  ,   mtime  ,   birthtime  , and   ctime   are\ninstances of     Date     object and to compare the values of\nthese objects you should use appropriate methods. For most general\nuses     getTime()     will return the number of\nmilliseconds elapsed since   1 January 1970 00:00:00 UTC   and this\ninteger should be sufficient for any comparison, however there are\nadditional methods which can be used for displaying fuzzy information.\nMore details can be found in the   MDN JavaScript Reference  \npage.  \n  </section>	http://nodejs.org/api/all.html#all_fs.stats
fs Stats	R	fs.Stats										http://nodejs.org/api/all.html#all_fs stats
fs.WriteStream	A										<section class="prog__container">      WriteStream   is a   Writable Stream  .  \n  </section>	http://nodejs.org/api/all.html#all_fs.writestream
fs WriteStream	R	fs.WriteStream										http://nodejs.org/api/all.html#all_fs writestream
fs.WriteStream.bytesWritten	A										<section class="prog__container">    The number of bytes written so far. Does not include data that is still queued\nfor writing.  \n  </section>	http://nodejs.org/api/all.html#all_fs.writestream_byteswritten
fs.WriteStream bytesWritten	R	fs.WriteStream.bytesWritten										http://nodejs.org/api/all.html#all_fs.writestream_byteswritten
fs WriteStream bytesWritten	R	fs.WriteStream bytesWritten										http://nodejs.org/api/all.html#all_fs writestream_byteswritten
fs.WriteStream.path	A										<section class="prog__container">    The path to the file the stream is writing to as specified in the first\nargument to   fs.createWriteStream()  . If   path   is passed as a string, then\n  writeStream.path   will be a string. If   path   is passed as a   Buffer  , then\n  writeStream.path   will be a   Buffer  .  \n  </section>	http://nodejs.org/api/all.html#all_fs.writestream_path
fs.WriteStream path	R	fs.WriteStream.path										http://nodejs.org/api/all.html#all_fs.writestream_path
fs WriteStream path	R	fs.WriteStream path										http://nodejs.org/api/all.html#all_fs writestream_path
fs.WriteStream.open	A										<section class="prog__container">    Emitted when the WriteStream&#39;s file is opened.  \n  </section>	http://nodejs.org/api/all.html#all_fs.writestream_open
fs.WriteStream open	R	fs.WriteStream.open										http://nodejs.org/api/all.html#all_fs.writestream_open
fs WriteStream open	R	fs.WriteStream open										http://nodejs.org/api/all.html#all_fs writestream_open
fs.WriteStream.close	A										<section class="prog__container">    Emitted when the   WriteStream  &#39;s underlying file descriptor has been closed\nusing the   fs.close()   method.  \n  </section>	http://nodejs.org/api/all.html#all_fs.writestream_close
fs.WriteStream close	R	fs.WriteStream.close										http://nodejs.org/api/all.html#all_fs.writestream_close
fs WriteStream close	R	fs.WriteStream close										http://nodejs.org/api/all.html#all_fs writestream_close
http	A										<section class="prog__container">    To use the HTTP server and client one must   require(&#39;http&#39;)  .  \n  The HTTP interfaces in Node.js are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.  \n  HTTP message headers are represented by an object like this:  \n    { &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;host&#39;: &#39;mysite.com&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }\n    \n  Keys are lowercased. Values are not modified.  \n  In order to support the full spectrum of possible HTTP applications, Node.js&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.  \n  See     message.headers     for details on how duplicate headers are handled.  \n  The raw headers as they were received are retained in the   rawHeaders  \nproperty, which is an array of   [key, value, key2, value2, ...]  .  For\nexample, the previous message header object might have a   rawHeaders  \nlist like the following:  \n    [ &#39;ConTent-Length&#39;, &#39;123456&#39;,\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\n  &#39;content-type&#39;, &#39;text/plain&#39;,\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\n  &#39;Host&#39;, &#39;mysite.com&#39;,\n  &#39;accepT&#39;, &#39;*/*&#39; ]\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_http
http	A										<section class="prog__container">    To use the HTTP server and client one must   require(&#39;http&#39;)  .  \n  The HTTP interfaces in Node.js are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.  \n  HTTP message headers are represented by an object like this:  \n    { &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;host&#39;: &#39;mysite.com&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }\n    \n  Keys are lowercased. Values are not modified.  \n  In order to support the full spectrum of possible HTTP applications, Node.js&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.  \n  See     message.headers     for details on how duplicate headers are handled.  \n  The raw headers as they were received are retained in the   rawHeaders  \nproperty, which is an array of   [key, value, key2, value2, ...]  .  For\nexample, the previous message header object might have a   rawHeaders  \nlist like the following:  \n    [ &#39;ConTent-Length&#39;, &#39;123456&#39;,\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\n  &#39;content-type&#39;, &#39;text/plain&#39;,\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\n  &#39;Host&#39;, &#39;mysite.com&#39;,\n  &#39;accepT&#39;, &#39;*/*&#39; ]\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_http
http.createServer	A										<section class="prog__container">    Returns a new instance of     http.Server    .  \n  The   requestListener   is a function which is automatically\nadded to the     &#39;request&#39;     event.  \n  <pre><code>http.createServer([requestListener])</code></pre></section>	http://nodejs.org/api/all.html#all_http_createserver_requestlistener
http createServer	R	http.createServer										http://nodejs.org/api/all.html#all_http_createserver_requestlistener
http.get	A										<section class="prog__container">    Since most requests are GET requests without bodies, Node.js provides this\nconvenience method. The only difference between this method and\n    http.request()     is that it sets the method to GET and calls   req.end()  \nautomatically. Note that response data must be consumed in the callback\nfor reasons stated in     http.ClientRequest     section.  \n  The   callback   is invoked with a single argument that is an instance of\n    http.IncomingMessage      \n  JSON Fetching Example:  \n    http.get(&#39;http://nodejs.org/dist/index.json&#39;, (res) =&gt; {\n  const statusCode = res.statusCode;\n  const contentType = res.headers[&#39;content-type&#39;];\n\n  let error;\n  if (statusCode !== 200) {\n    error = new Error(`Request Failed.\n` +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\/json/.test(contentType)) {\n    error = new Error(`Invalid content-type.\n` +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.log(error.message);\n    // consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding(&#39;utf8&#39;);\n  let rawData = &#39;&#39;;\n  res.on(&#39;data&#39;, (chunk) =&gt; rawData += chunk);\n  res.on(&#39;end&#39;, () =&gt; {\n    try {\n      let parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.log(e.message);\n    }\n  });\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.log(`Got error: ${e.message}`);\n});\n    \n  <pre><code>http.get(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http_get_options_callback
http get	R	http.get										http://nodejs.org/api/all.html#all_http_get_options_callback
http.request	A										<section class="prog__container">    Node.js maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.  \n    options   can be an object or a string. If   options   is a string, it is\nautomatically parsed with     url.parse()    .  \n  The optional   callback   parameter will be added as a one time listener for\nthe     &#39;response&#39;     event.  \n    http.request()   returns an instance of the     http.ClientRequest    \nclass. The   ClientRequest   instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the   ClientRequest   object.  \n  Example:  \n    var postData = querystring.stringify({\n  &#39;msg&#39; : &#39;Hello World!&#39;\n});\n\nvar options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;/upload&#39;,\n  method: &#39;POST&#39;,\n  headers: {\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\n    &#39;Content-Length&#39;: Buffer.byteLength(postData)\n  }\n};\n\nvar req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;No more data in response.&#39;);\n  });\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.log(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n    \n  Note that in the example   req.end()   was called. With   http.request()   one\nmust always call   req.end()   to signify that you&#39;re done with the request -\neven if there is no data being written to the request body.  \n  If any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an   &#39;error&#39;   event is emitted\non the returned request object. As with all   &#39;error&#39;   events, if no listeners\nare registered the error will be thrown.  \n  There are a few special headers that should be noted.  \n  \n    Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to\nthe server should be persisted until the next request.  \n  \n    Sending a &#39;Content-length&#39; header will disable the default chunked encoding.  \n  \n    Sending an &#39;Expect&#39; header will immediately send the request headers.\nUsually, when sending &#39;Expect: 100-continue&#39;, you should both set a timeout\nand listen for the   &#39;continue&#39;   event. See RFC2616 Section 8.2.3 for more\ninformation.  \n  \n    Sending an Authorization header will override using the   auth   option\nto compute basic authentication.  \n  \n  \n  \n  \n  <pre><code>http.request(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http_request_options_callback
http request	R	http.request										http://nodejs.org/api/all.html#all_http_request_options_callback
http.METHODS	A										<section class="prog__container">    A list of the HTTP methods that are supported by the parser.  \n  </section>	http://nodejs.org/api/all.html#all_http_methods
http METHODS	R	http.METHODS										http://nodejs.org/api/all.html#all_http_methods
http.STATUS_CODES	A										<section class="prog__container">    A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example,   http.STATUS_CODES[404] === &#39;Not\nFound&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_http_status_codes
http STATUS_CODES	R	http.STATUS_CODES										http://nodejs.org/api/all.html#all_http_status_codes
http.globalAgent	A										<section class="prog__container">    Global instance of Agent which is used as the default for all HTTP client\nrequests.  \n  </section>	http://nodejs.org/api/all.html#all_http_globalagent
http globalAgent	R	http.globalAgent										http://nodejs.org/api/all.html#all_http_globalagent
http.Agent	A										<section class="prog__container">    The HTTP Agent is used for pooling sockets used in HTTP client\nrequests.  \n  The HTTP Agent also defaults client requests to using\n  Connection: keep-alive  . If no pending HTTP requests are waiting on a\nsocket to become free the socket is closed. This means that Node.js&#39;s\npool has the benefit of keep-alive when under load but still does not\nrequire developers to manually close the HTTP clients using\nKeepAlive.  \n  If you opt into using HTTP KeepAlive, you can create an Agent object\nwith that flag set to   true  .  (See the   constructor options  .)\nThen, the Agent will keep unused sockets in a pool for later use.  They\nwill be explicitly marked so as to not keep the Node.js process running.\nHowever, it is still a good idea to explicitly     destroy()     KeepAlive\nagents when they are no longer in use, so that the Sockets will be shut\ndown.  \n  Sockets are removed from the agent&#39;s pool when the socket emits either\na   &#39;close&#39;   event or a special   &#39;agentRemove&#39;   event. This means that if\nyou intend to keep one HTTP request open for a long time and don&#39;t\nwant it to stay in the pool you can do something along the lines of:  \n    http.get(options, (res) =&gt; {\n  // Do stuff\n}).on(&#39;socket&#39;, (socket) =&gt; {\n  socket.emit(&#39;agentRemove&#39;);\n});\n    \n  Alternatively, you could just opt out of pooling entirely using\n  agent:false  :  \n    http.get({\n  hostname: &#39;localhost&#39;,\n  port: 80,\n  path: &#39;/&#39;,\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_http.agent_options
http Agent	R	http.Agent										http://nodejs.org/api/all.html#all_http agent_options
http.Agent.createConnection	A										<section class="prog__container">    Produces a socket/stream to be used for HTTP requests.  \n  By default, this function is the same as     net.createConnection()    . However,\ncustom Agents may override this method in case greater flexibility is desired.  \n  A socket/stream can be supplied in one of two ways: by returning the\nsocket/stream from this function, or by passing the socket/stream to   callback  .  \n    callback   has a signature of   (err, stream)  .  \n  <pre><code>agent.createConnection(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_createconnection_options_callback
http.Agent createConnection	R	http.Agent.createConnection										http://nodejs.org/api/all.html#all_http.agent_createconnection_options_callback
http Agent createConnection	R	http.Agent createConnection										http://nodejs.org/api/all.html#all_http agent_createconnection_options_callback
http.Agent.destroy	A										<section class="prog__container">    Destroy any sockets that are currently in use by the agent.  \n  It is usually not necessary to do this.  However, if you are using an\nagent with KeepAlive enabled, then it is best to explicitly shut down\nthe agent when you know that it will no longer be used.  Otherwise,\nsockets may hang open for quite a long time before the server\nterminates them.  \n  <pre><code>agent.destroy()</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_destroy
http.Agent destroy	R	http.Agent.destroy										http://nodejs.org/api/all.html#all_http.agent_destroy
http Agent destroy	R	http.Agent destroy										http://nodejs.org/api/all.html#all_http agent_destroy
http.Agent.getName	A										<section class="prog__container">    Get a unique name for a set of request options, to determine whether a\nconnection can be reused.  In the http agent, this returns\n  host:port:localAddress  .  In the https agent, the name includes the\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\nsocket reusability.  \n  <pre><code>agent.getName(options)</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_getname_options
http.Agent getName	R	http.Agent.getName										http://nodejs.org/api/all.html#all_http.agent_getname_options
http Agent getName	R	http.Agent getName										http://nodejs.org/api/all.html#all_http agent_getname_options
http.Agent.freeSockets	A										<section class="prog__container">    An object which contains arrays of sockets currently awaiting use by\nthe Agent when HTTP KeepAlive is used.  Do not modify.  \n  </section>	http://nodejs.org/api/all.html#all_http.agent_freesockets
http.Agent freeSockets	R	http.Agent.freeSockets										http://nodejs.org/api/all.html#all_http.agent_freesockets
http Agent freeSockets	R	http.Agent freeSockets										http://nodejs.org/api/all.html#all_http agent_freesockets
http.Agent.maxFreeSockets	A										<section class="prog__container">    By default set to 256.  For Agents supporting HTTP KeepAlive, this\nsets the maximum number of sockets that will be left open in the free\nstate.  \n  </section>	http://nodejs.org/api/all.html#all_http.agent_maxfreesockets
http.Agent maxFreeSockets	R	http.Agent.maxFreeSockets										http://nodejs.org/api/all.html#all_http.agent_maxfreesockets
http Agent maxFreeSockets	R	http.Agent maxFreeSockets										http://nodejs.org/api/all.html#all_http agent_maxfreesockets
http.Agent.maxSockets	A										<section class="prog__container">    By default set to Infinity. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is either a &#39;host:port&#39; or\n&#39;host:port:localAddress&#39; combination.  \n  </section>	http://nodejs.org/api/all.html#all_http.agent_maxsockets
http.Agent maxSockets	R	http.Agent.maxSockets										http://nodejs.org/api/all.html#all_http.agent_maxsockets
http Agent maxSockets	R	http.Agent maxSockets										http://nodejs.org/api/all.html#all_http agent_maxsockets
http.Agent.requests	A										<section class="prog__container">    An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.  \n  </section>	http://nodejs.org/api/all.html#all_http.agent_requests
http.Agent requests	R	http.Agent.requests										http://nodejs.org/api/all.html#all_http.agent_requests
http Agent requests	R	http.Agent requests										http://nodejs.org/api/all.html#all_http agent_requests
http.Agent.sockets	A										<section class="prog__container">    An object which contains arrays of sockets currently in use by the\nAgent.  Do not modify.  \n  </section>	http://nodejs.org/api/all.html#all_http.agent_sockets
http.Agent sockets	R	http.Agent.sockets										http://nodejs.org/api/all.html#all_http.agent_sockets
http Agent sockets	R	http.Agent sockets										http://nodejs.org/api/all.html#all_http agent_sockets
http.ClientRequest	A										<section class="prog__container">    This object is created internally and returned from     http.request()    .  It\nrepresents an   in-progress   request whose header has already been queued.  The\nheader is still mutable using the   setHeader(name, value)  ,   getHeader(name)  ,\n  removeHeader(name)   API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.  \n  To get the response, add a listener for     &#39;response&#39;     to the request object.\n    &#39;response&#39;     will be emitted from the request object when the response\nheaders have been received.  The     &#39;response&#39;     event is executed with one\nargument which is an instance of     http.IncomingMessage    .  \n  During the     &#39;response&#39;     event, one can add listeners to the\nresponse object; particularly to listen for the   &#39;data&#39;   event.  \n  If no     &#39;response&#39;     handler is added, then the response will be\nentirely discarded.  However, if you add a     &#39;response&#39;     event handler,\nthen you   must   consume the data from the response object, either by\ncalling   response.read()   whenever there is a   &#39;readable&#39;   event, or\nby adding a   &#39;data&#39;   handler, or by calling the   .resume()   method.\nUntil the data is consumed, the   &#39;end&#39;   event will not fire.  Also, until\nthe data is read it will consume memory that can eventually lead to a\n&#39;process out of memory&#39; error.  \n  Note: Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.  \n  The request implements the   Writable Stream   interface. This is an\n    EventEmitter     with the following events:  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest
http ClientRequest	R	http.ClientRequest										http://nodejs.org/api/all.html#all_http clientrequest
http.ClientRequest.abort	A										<section class="prog__container">    Marks the request as aborting. Calling this will cause remaining data\nin the response to be dropped and the socket to be destroyed.  \n  <pre><code>request.abort()</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_abort
http.ClientRequest abort	R	http.ClientRequest.abort										http://nodejs.org/api/all.html#all_http.clientrequest_abort
http ClientRequest abort	R	http.ClientRequest abort										http://nodejs.org/api/all.html#all_http clientrequest_abort
http.ClientRequest.end	A										<section class="prog__container">    Finishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating   &#39;0\r\n\r\n&#39;  .  \n  If   data   is specified, it is equivalent to calling\n    response.write(data, encoding)     followed by   request.end(callback)  .  \n  If   callback   is specified, it will be called when the request stream\nis finished.  \n  <pre><code>request.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_end_data_encoding_callback
http.ClientRequest end	R	http.ClientRequest.end										http://nodejs.org/api/all.html#all_http.clientrequest_end_data_encoding_callback
http ClientRequest end	R	http.ClientRequest end										http://nodejs.org/api/all.html#all_http clientrequest_end_data_encoding_callback
http.ClientRequest.flushHeaders	A										<section class="prog__container">    Flush the request headers.  \n  For efficiency reasons, Node.js normally buffers the request headers until you\ncall   request.end()   or write the first chunk of request data.  It then tries\nhard to pack the request headers and data into a single TCP packet.  \n  That&#39;s usually what you want (it saves a TCP round-trip) but not when the first\ndata isn&#39;t sent until possibly much later.    request.flushHeaders()   lets you bypass\nthe optimization and kickstart the request.  \n  <pre><code>request.flushHeaders()</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_flushheaders
http.ClientRequest flushHeaders	R	http.ClientRequest.flushHeaders										http://nodejs.org/api/all.html#all_http.clientrequest_flushheaders
http ClientRequest flushHeaders	R	http.ClientRequest flushHeaders										http://nodejs.org/api/all.html#all_http clientrequest_flushheaders
http.ClientRequest.setNoDelay	A										<section class="prog__container">    Once a socket is assigned to this request and is connected\n    socket.setNoDelay()     will be called.  \n  <pre><code>request.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_setnodelay_nodelay
http.ClientRequest setNoDelay	R	http.ClientRequest.setNoDelay										http://nodejs.org/api/all.html#all_http.clientrequest_setnodelay_nodelay
http ClientRequest setNoDelay	R	http.ClientRequest setNoDelay										http://nodejs.org/api/all.html#all_http clientrequest_setnodelay_nodelay
http.ClientRequest.setSocketKeepAlive	A										<section class="prog__container">    Once a socket is assigned to this request and is connected\n    socket.setKeepAlive()     will be called.  \n  <pre><code>request.setSocketKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_setsocketkeepalive_enable_initialdelay
http.ClientRequest setSocketKeepAlive	R	http.ClientRequest.setSocketKeepAlive										http://nodejs.org/api/all.html#all_http.clientrequest_setsocketkeepalive_enable_initialdelay
http ClientRequest setSocketKeepAlive	R	http.ClientRequest setSocketKeepAlive										http://nodejs.org/api/all.html#all_http clientrequest_setsocketkeepalive_enable_initialdelay
http.ClientRequest.setTimeout	A										<section class="prog__container">    Once a socket is assigned to this request and is connected\n    socket.setTimeout()     will be called.  \n  Returns   request  .  \n  <pre><code>request.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_settimeout_timeout_callback
http.ClientRequest setTimeout	R	http.ClientRequest.setTimeout										http://nodejs.org/api/all.html#all_http.clientrequest_settimeout_timeout_callback
http ClientRequest setTimeout	R	http.ClientRequest setTimeout										http://nodejs.org/api/all.html#all_http clientrequest_settimeout_timeout_callback
http.ClientRequest.write	A										<section class="prog__container">    Sends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n  [&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]   header line when\ncreating the request.  \n  The   encoding   argument is optional and only applies when   chunk   is a string.\nDefaults to   &#39;utf8&#39;  .  \n  The   callback   argument is optional and will be called when this chunk of data\nis flushed.  \n  Returns   request  .  \n  <pre><code>request.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_write_chunk_encoding_callback
http.ClientRequest write	R	http.ClientRequest.write										http://nodejs.org/api/all.html#all_http.clientrequest_write_chunk_encoding_callback
http ClientRequest write	R	http.ClientRequest write										http://nodejs.org/api/all.html#all_http clientrequest_write_chunk_encoding_callback
http.ClientRequest.abort	A										<section class="prog__container">    Emitted when the request has been aborted by the client. This event is only\nemitted on the first call to   abort()  .  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_abort
http.ClientRequest abort	R	http.ClientRequest.abort										http://nodejs.org/api/all.html#all_http.clientrequest_abort
http ClientRequest abort	R	http.ClientRequest abort										http://nodejs.org/api/all.html#all_http clientrequest_abort
http.ClientRequest.aborted	A										<section class="prog__container">    Emitted when the request has been aborted by the server and the network\nsocket has closed.  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_aborted
http.ClientRequest aborted	R	http.ClientRequest.aborted										http://nodejs.org/api/all.html#all_http.clientrequest_aborted
http ClientRequest aborted	R	http.ClientRequest aborted										http://nodejs.org/api/all.html#all_http clientrequest_aborted
http.ClientRequest.connect	A										<section class="prog__container">    Emitted each time a server responds to a request with a   CONNECT   method. If this\nevent isn&#39;t being listened for, clients receiving a   CONNECT   method will have\ntheir connections closed.  \n  A client and server pair that shows you how to listen for the   &#39;connect&#39;   event:  \n    const http = require(&#39;http&#39;);\nconst net = require(&#39;net&#39;);\nconst url = require(&#39;url&#39;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nproxy.on(&#39;connect&#39;, (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  var srvUrl = url.parse(`http://${req.url}`);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\r\n&#39; +\n                    &#39;Proxy-agent: Node.js-Proxy\r\n&#39; +\n                    &#39;\r\n&#39;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    method: &#39;CONNECT&#39;,\n    path: &#39;www.google.com:80&#39;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;connect&#39;, (res, socket, head) =&gt; {\n    console.log(&#39;got connected!&#39;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&#39;GET / HTTP/1.1\r\n&#39; +\n                 &#39;Host: www.google.com:80\r\n&#39; +\n                 &#39;Connection: close\r\n&#39; +\n                 &#39;\r\n&#39;);\n    socket.on(&#39;data&#39;, (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on(&#39;end&#39;, () =&gt; {\n      proxy.close();\n    });\n  });\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_connect
http.ClientRequest connect	R	http.ClientRequest.connect										http://nodejs.org/api/all.html#all_http.clientrequest_connect
http ClientRequest connect	R	http.ClientRequest connect										http://nodejs.org/api/all.html#all_http clientrequest_connect
http.ClientRequest.continue	A										<section class="prog__container">    Emitted when the server sends a &#39;100 Continue&#39; HTTP response, usually because\nthe request contained &#39;Expect: 100-continue&#39;. This is an instruction that\nthe client should send the request body.  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_continue
http.ClientRequest continue	R	http.ClientRequest.continue										http://nodejs.org/api/all.html#all_http.clientrequest_continue
http ClientRequest continue	R	http.ClientRequest continue										http://nodejs.org/api/all.html#all_http clientrequest_continue
http.ClientRequest.response	A										<section class="prog__container">    Emitted when a response is received to this request. This event is emitted only\nonce.  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_response
http.ClientRequest response	R	http.ClientRequest.response										http://nodejs.org/api/all.html#all_http.clientrequest_response
http ClientRequest response	R	http.ClientRequest response										http://nodejs.org/api/all.html#all_http clientrequest_response
http.ClientRequest.socket	A										<section class="prog__container">    Emitted after a socket is assigned to this request.  \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_socket
http.ClientRequest socket	R	http.ClientRequest.socket										http://nodejs.org/api/all.html#all_http.clientrequest_socket
http ClientRequest socket	R	http.ClientRequest socket										http://nodejs.org/api/all.html#all_http clientrequest_socket
http.ClientRequest.upgrade	A										<section class="prog__container">    Emitted each time a server responds to a request with an upgrade. If this\nevent isn&#39;t being listened for, clients receiving an upgrade header will have\ntheir connections closed.  \n  A client server pair that show you how to listen for the   &#39;upgrade&#39;   event.  \n    const http = require(&#39;http&#39;);\n\n// Create an HTTP server\nvar srv = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nsrv.on(&#39;upgrade&#39;, (req, socket, head) =&gt; {\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\r\n&#39; +\n               &#39;Upgrade: WebSocket\r\n&#39; +\n               &#39;Connection: Upgrade\r\n&#39; +\n               &#39;\r\n&#39;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    headers: {\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\n      &#39;Upgrade&#39;: &#39;websocket&#39;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;upgrade&#39;, (res, socket, upgradeHead) =&gt; {\n    console.log(&#39;got upgraded!&#39;);\n    socket.end();\n    process.exit(0);\n  });\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_http.clientrequest_upgrade
http.ClientRequest upgrade	R	http.ClientRequest.upgrade										http://nodejs.org/api/all.html#all_http.clientrequest_upgrade
http ClientRequest upgrade	R	http.ClientRequest upgrade										http://nodejs.org/api/all.html#all_http clientrequest_upgrade
http.Server	A										<section class="prog__container">    This class inherits from     net.Server     and has the following additional events:  \n  </section>	http://nodejs.org/api/all.html#all_http.server
http Server	R	http.Server										http://nodejs.org/api/all.html#all_http server
http.Server.close	A										<section class="prog__container">    Stops the server from accepting new connections.  See     net.Server.close()    .  \n  <pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_close_callback
http.Server close	R	http.Server.close										http://nodejs.org/api/all.html#all_http.server_close_callback
http Server close	R	http.Server close										http://nodejs.org/api/all.html#all_http server_close_callback
http.Server.listen	A										<section class="prog__container">    The   handle   object can be set to either a server or socket (anything\nwith an underlying   _handle   member), or a   {fd: &lt;n&gt;}   object.  \n  This will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.  \n  Listening on a file descriptor is not supported on Windows.  \n  This function is asynchronous.   callback   will be added as a listener for the\n    &#39;listening&#39;     event. See also     net.Server.listen()    .  \n  Returns   server  .  \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen(handle[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_handle_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_handle_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_handle_callback
http.Server.listen	A										<section class="prog__container">    Start a UNIX socket server listening for connections on the given   path  .  \n  This function is asynchronous.   callback   will be added as a listener for the\n    &#39;listening&#39;     event.  See also     net.Server.listen(path)    .  \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_path_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_path_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_path_callback
http.Server.listen	A										<section class="prog__container">    Begin accepting connections on the specified   port   and   hostname  . If the\n  hostname   is omitted, the server will accept connections on any IPv6 address\n(  ::  ) when IPv6 is available, or any IPv4 address (  0.0.0.0  ) otherwise.\nOmit the port argument, or use a port value of   0  , to have the operating system\nassign a random port, which can be retrieved by using   server.address().port  \nafter the   &#39;listening&#39;   event has been emitted.  \n  To listen to a unix socket, supply a filename instead of port and hostname.  \n    backlog   is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n  tcp_max_syn_backlog   and   somaxconn   on linux. The default value of this\nparameter is 511 (not 512).  \n  This function is asynchronous.   callback   will be added as a listener for the\n    &#39;listening&#39;     event.  See also     net.Server.listen(port)    .  \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_port_hostname_backlog_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_port_hostname_backlog_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_port_hostname_backlog_callback
http.Server.setTimeout	A										<section class="prog__container">    Sets the timeout value for sockets, and emits a   &#39;timeout&#39;   event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.  \n  If there is a   &#39;timeout&#39;   event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.  \n  By default, the Server&#39;s timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out.  However, if you assign a\ncallback to the Server&#39;s   &#39;timeout&#39;   event, then you are responsible\nfor handling socket timeouts.  \n  Returns   server  .  \n  <pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_settimeout_msecs_callback
http.Server setTimeout	R	http.Server.setTimeout										http://nodejs.org/api/all.html#all_http.server_settimeout_msecs_callback
http Server setTimeout	R	http.Server setTimeout										http://nodejs.org/api/all.html#all_http server_settimeout_msecs_callback
http.Server.listening	A										<section class="prog__container">    A Boolean indicating whether or not the server is listening for\nconnections.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_listening
http.Server listening	R	http.Server.listening										http://nodejs.org/api/all.html#all_http.server_listening
http Server listening	R	http.Server listening										http://nodejs.org/api/all.html#all_http server_listening
http.Server.maxHeadersCount	A										<section class="prog__container">    Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_maxheaderscount
http.Server maxHeadersCount	R	http.Server.maxHeadersCount										http://nodejs.org/api/all.html#all_http.server_maxheaderscount
http Server maxHeadersCount	R	http.Server maxHeadersCount										http://nodejs.org/api/all.html#all_http server_maxheaderscount
http.Server.timeout	A										<section class="prog__container">    The number of milliseconds of inactivity before a socket is presumed\nto have timed out.  \n  Note that the socket timeout logic is set up on connection, so\nchanging this value only affects   new   connections to the server, not\nany existing connections.  \n  Set to 0 to disable any kind of automatic timeout behavior on incoming\nconnections.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_timeout
http.Server timeout	R	http.Server.timeout										http://nodejs.org/api/all.html#all_http.server_timeout
http Server timeout	R	http.Server timeout										http://nodejs.org/api/all.html#all_http server_timeout
http.Server.checkContinue	A										<section class="prog__container">    Emitted each time a request with an HTTP   Expect: 100-continue   is received.\nIf this event isn&#39;t listened for, the server will automatically respond\nwith a   100 Continue   as appropriate.  \n  Handling this event involves calling     response.writeContinue()     if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g. 400 Bad Request) if the client should not continue to send the\nrequest body.  \n  Note that when this event is emitted and handled, the     &#39;request&#39;     event will\nnot be emitted.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_checkcontinue
http.Server checkContinue	R	http.Server.checkContinue										http://nodejs.org/api/all.html#all_http.server_checkcontinue
http Server checkContinue	R	http.Server checkContinue										http://nodejs.org/api/all.html#all_http server_checkcontinue
http.Server.checkExpectation	A										<section class="prog__container">    Emitted each time a request with an HTTP   Expect   header is received, where the\nvalue is not   100-continue  . If this event isn&#39;t listened for, the server will\nautomatically respond with a   417 Expectation Failed   as appropriate.  \n  Note that when this event is emitted and handled, the     &#39;request&#39;     event will\nnot be emitted.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_checkexpectation
http.Server checkExpectation	R	http.Server.checkExpectation										http://nodejs.org/api/all.html#all_http.server_checkexpectation
http Server checkExpectation	R	http.Server checkExpectation										http://nodejs.org/api/all.html#all_http server_checkexpectation
http.Server.clientError	A										<section class="prog__container">    If a client connection emits an   &#39;error&#39;   event, it will be forwarded here.\nListener of this event is responsible for closing/destroying the underlying\nsocket. For example, one may wish to more gracefully close the socket with an\nHTTP &#39;400 Bad Request&#39; response instead of abruptly severing the connection.  \n  Default behavior is to destroy the socket immediately on malformed request.  \n    socket   is the     net.Socket     object that the error originated from.  \n    const http = require(&#39;http&#39;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on(&#39;clientError&#39;, (err, socket) =&gt; {\n  socket.end(&#39;HTTP/1.1 400 Bad Request\r\n\r\n&#39;);\n});\nserver.listen(8000);\n    \n  When the   &#39;clientError&#39;   event occurs, there is no   request   or   response  \nobject, so any HTTP response sent, including response headers and payload,\n  must   be written directly to the   socket   object. Care must be taken to\nensure the response is a properly formatted HTTP response message.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_clienterror
http.Server clientError	R	http.Server.clientError										http://nodejs.org/api/all.html#all_http.server_clienterror
http Server clientError	R	http.Server clientError										http://nodejs.org/api/all.html#all_http server_clienterror
http.Server.close	A										<section class="prog__container">    Emitted when the server closes.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_close
http.Server close	R	http.Server.close										http://nodejs.org/api/all.html#all_http.server_close
http Server close	R	http.Server close										http://nodejs.org/api/all.html#all_http server_close
http.Server.connect	A										<section class="prog__container">    Emitted each time a client requests an HTTP   CONNECT   method. If this event isn&#39;t\nlistened for, then clients requesting a   CONNECT   method will have their\nconnections closed.  \n  After this event is emitted, the request&#39;s socket will not have a   &#39;data&#39;  \nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_connect
http.Server connect	R	http.Server.connect										http://nodejs.org/api/all.html#all_http.server_connect
http Server connect	R	http.Server connect										http://nodejs.org/api/all.html#all_http server_connect
http.Server.connection	A										<section class="prog__container">    When a new TCP stream is established.   socket   is an object of type\n    net.Socket    . Usually users will not want to access this event. In\nparticular, the socket will not emit   &#39;readable&#39;   events because of how\nthe protocol parser attaches to the socket. The   socket   can also be\naccessed at   request.connection  .  \n  </section>	http://nodejs.org/api/all.html#all_http.server_connection
http.Server connection	R	http.Server.connection										http://nodejs.org/api/all.html#all_http.server_connection
http Server connection	R	http.Server connection										http://nodejs.org/api/all.html#all_http server_connection
http.Server.request	A										<section class="prog__container">    Emitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).  \n  </section>	http://nodejs.org/api/all.html#all_http.server_request
http.Server request	R	http.Server.request										http://nodejs.org/api/all.html#all_http.server_request
http Server request	R	http.Server request										http://nodejs.org/api/all.html#all_http server_request
http.Server.upgrade	A										<section class="prog__container">    Emitted each time a client requests an HTTP upgrade. If this event isn&#39;t\nlistened for, then clients requesting an upgrade will have their connections\nclosed.  \n  After this event is emitted, the request&#39;s socket will not have a   &#39;data&#39;  \nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.  \n  </section>	http://nodejs.org/api/all.html#all_http.server_upgrade
http.Server upgrade	R	http.Server.upgrade										http://nodejs.org/api/all.html#all_http.server_upgrade
http Server upgrade	R	http.Server upgrade										http://nodejs.org/api/all.html#all_http server_upgrade
http.ServerResponse	A										<section class="prog__container">    This object is created internally by an HTTP server--not by the user. It is\npassed as the second parameter to the     &#39;request&#39;     event.  \n  The response implements, but does not inherit from, the   Writable Stream  \ninterface. This is an     EventEmitter     with the following events:  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse
http ServerResponse	R	http.ServerResponse										http://nodejs.org/api/all.html#all_http serverresponse
http.ServerResponse.addTrailers	A										<section class="prog__container">    This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.  \n  Trailers will   only   be emitted if chunked encoding is used for the\nresponse; if it is not (e.g. if the request was HTTP/1.0), they will\nbe silently discarded.  \n  Note that HTTP requires the   Trailer   header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,  \n    response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\nresponse.write(fileData);\nresponse.addTrailers({&#39;Content-MD5&#39;: &#39;7895bf4b8828b55ceaf47747b4bca667&#39;});\nresponse.end();\n    \n  Attempting to set a header field name or value that contains invalid characters\nwill result in a     TypeError     being thrown.  \n  <pre><code>response.addTrailers(headers)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_addtrailers_headers
http.ServerResponse addTrailers	R	http.ServerResponse.addTrailers										http://nodejs.org/api/all.html#all_http.serverresponse_addtrailers_headers
http ServerResponse addTrailers	R	http.ServerResponse addTrailers										http://nodejs.org/api/all.html#all_http serverresponse_addtrailers_headers
http.ServerResponse.end	A										<section class="prog__container">    This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method,   response.end()  , MUST be called on each response.  \n  If   data   is specified, it is equivalent to calling\n    response.write(data, encoding)     followed by   response.end(callback)  .  \n  If   callback   is specified, it will be called when the response stream\nis finished.  \n  <pre><code>response.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_end_data_encoding_callback
http.ServerResponse end	R	http.ServerResponse.end										http://nodejs.org/api/all.html#all_http.serverresponse_end_data_encoding_callback
http ServerResponse end	R	http.ServerResponse end										http://nodejs.org/api/all.html#all_http serverresponse_end_data_encoding_callback
http.ServerResponse.getHeader	A										<section class="prog__container">    Reads out a header that&#39;s already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.  \n  Example:  \n    var contentType = response.getHeader(&#39;content-type&#39;);\n    \n  <pre><code>response.getHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_getheader_name
http.ServerResponse getHeader	R	http.ServerResponse.getHeader										http://nodejs.org/api/all.html#all_http.serverresponse_getheader_name
http ServerResponse getHeader	R	http.ServerResponse getHeader										http://nodejs.org/api/all.html#all_http serverresponse_getheader_name
http.ServerResponse.removeHeader	A										<section class="prog__container">    Removes a header that&#39;s queued for implicit sending.  \n  Example:  \n    response.removeHeader(&#39;Content-Encoding&#39;);\n    \n  <pre><code>response.removeHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_removeheader_name
http.ServerResponse removeHeader	R	http.ServerResponse.removeHeader										http://nodejs.org/api/all.html#all_http.serverresponse_removeheader_name
http ServerResponse removeHeader	R	http.ServerResponse removeHeader										http://nodejs.org/api/all.html#all_http serverresponse_removeheader_name
http.ServerResponse.setHeader	A										<section class="prog__container">    Sets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.  \n  Example:  \n    response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n    \n  or  \n    response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n    \n  Attempting to set a header field name or value that contains invalid characters\nwill result in a     TypeError     being thrown.  \n  When headers have been set with     response.setHeader()    , they will be merged with\nany headers passed to     response.writeHead()    , with the headers passed to\n    response.writeHead()     given precedence.  \n    // returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n    \n  <pre><code>response.setHeader(name, value)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_setheader_name_value
http.ServerResponse setHeader	R	http.ServerResponse.setHeader										http://nodejs.org/api/all.html#all_http.serverresponse_setheader_name_value
http ServerResponse setHeader	R	http.ServerResponse setHeader										http://nodejs.org/api/all.html#all_http serverresponse_setheader_name_value
http.ServerResponse.setTimeout	A										<section class="prog__container">    Sets the Socket&#39;s timeout value to   msecs  .  If a callback is\nprovided, then it is added as a listener on the   &#39;timeout&#39;   event on\nthe response object.  \n  If no   &#39;timeout&#39;   listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out.  If you\nassign a handler on the request, the response, or the server&#39;s\n  &#39;timeout&#39;   events, then it is your responsibility to handle timed out\nsockets.  \n  Returns   response  .  \n  <pre><code>response.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_settimeout_msecs_callback
http.ServerResponse setTimeout	R	http.ServerResponse.setTimeout										http://nodejs.org/api/all.html#all_http.serverresponse_settimeout_msecs_callback
http ServerResponse setTimeout	R	http.ServerResponse setTimeout										http://nodejs.org/api/all.html#all_http serverresponse_settimeout_msecs_callback
http.ServerResponse.write	A										<section class="prog__container">    If this method is called and     response.writeHead()     has not been called,\nit will switch to implicit header mode and flush the implicit headers.  \n  This sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.  \n    chunk   can be a string or a buffer. If   chunk   is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the   encoding   is   &#39;utf8&#39;  .   callback   will be called when this chunk\nof data is flushed.  \n    Note  : This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.  \n  The first time     response.write()     is called, it will send the buffered\nheader information and the first body to the client. The second time\n    response.write()     is called, Node.js assumes you&#39;re going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.  \n  Returns   true   if the entire data was flushed successfully to the kernel\nbuffer. Returns   false   if all or part of the data was queued in user memory.\n  &#39;drain&#39;   will be emitted when the buffer is free again.  \n  <pre><code>response.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_write_chunk_encoding_callback
http.ServerResponse write	R	http.ServerResponse.write										http://nodejs.org/api/all.html#all_http.serverresponse_write_chunk_encoding_callback
http ServerResponse write	R	http.ServerResponse write										http://nodejs.org/api/all.html#all_http serverresponse_write_chunk_encoding_callback
http.ServerResponse.writeContinue	A										<section class="prog__container">    Sends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the     &#39;checkContinue&#39;     event on   Server  .  \n  <pre><code>response.writeContinue()</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_writecontinue
http.ServerResponse writeContinue	R	http.ServerResponse.writeContinue										http://nodejs.org/api/all.html#all_http.serverresponse_writecontinue
http ServerResponse writeContinue	R	http.ServerResponse writeContinue										http://nodejs.org/api/all.html#all_http serverresponse_writecontinue
http.ServerResponse.writeHead	A										<section class="prog__container">    Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like   404  . The last argument,   headers  , are the response headers.\nOptionally one can give a human-readable   statusMessage   as the second\nargument.  \n  Example:  \n    var body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\n    \n  This method must only be called once on a message and it must\nbe called before     response.end()     is called.  \n  If you call     response.write()     or     response.end()     before calling this,\nthe implicit/mutable headers will be calculated and call this function for you.  \n  When headers have been set with     response.setHeader()    , they will be merged with\nany headers passed to     response.writeHead()    , with the headers passed to\n    response.writeHead()     given precedence.  \n    // returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n    \n  Note that Content-Length is given in bytes not characters. The above example\nworks because the string   &#39;hello world&#39;   contains only single byte characters.\nIf the body contains higher coded characters then   Buffer.byteLength()  \nshould be used to determine the number of bytes in a given encoding.\nAnd Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.  \n  Attempting to set a header field name or value that contains invalid characters\nwill result in a     TypeError     being thrown.  \n  <pre><code>response.writeHead(statusCode[, statusMessage][, headers])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_writehead_statuscode_statusmessage_headers
http.ServerResponse writeHead	R	http.ServerResponse.writeHead										http://nodejs.org/api/all.html#all_http.serverresponse_writehead_statuscode_statusmessage_headers
http ServerResponse writeHead	R	http.ServerResponse writeHead										http://nodejs.org/api/all.html#all_http serverresponse_writehead_statuscode_statusmessage_headers
http.ServerResponse.finished	A										<section class="prog__container">    Boolean value that indicates whether the response has completed. Starts\nas   false  . After     response.end()     executes, the value will be   true  .  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_finished
http.ServerResponse finished	R	http.ServerResponse.finished										http://nodejs.org/api/all.html#all_http.serverresponse_finished
http ServerResponse finished	R	http.ServerResponse finished										http://nodejs.org/api/all.html#all_http serverresponse_finished
http.ServerResponse.headersSent	A										<section class="prog__container">    Boolean (read-only). True if headers were sent, false otherwise.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_headerssent
http.ServerResponse headersSent	R	http.ServerResponse.headersSent										http://nodejs.org/api/all.html#all_http.serverresponse_headerssent
http ServerResponse headersSent	R	http.ServerResponse headersSent										http://nodejs.org/api/all.html#all_http serverresponse_headerssent
http.ServerResponse.sendDate	A										<section class="prog__container">    When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.  \n  This should only be disabled for testing; HTTP requires the Date header\nin responses.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_senddate
http.ServerResponse sendDate	R	http.ServerResponse.sendDate										http://nodejs.org/api/all.html#all_http.serverresponse_senddate
http ServerResponse sendDate	R	http.ServerResponse sendDate										http://nodejs.org/api/all.html#all_http serverresponse_senddate
http.ServerResponse.statusCode	A										<section class="prog__container">    When using implicit headers (not calling     response.writeHead()     explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.  \n  Example:  \n    response.statusCode = 404;\n    \n  After response header was sent to the client, this property indicates the\nstatus code which was sent out.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_statuscode
http.ServerResponse statusCode	R	http.ServerResponse.statusCode										http://nodejs.org/api/all.html#all_http.serverresponse_statuscode
http ServerResponse statusCode	R	http.ServerResponse statusCode										http://nodejs.org/api/all.html#all_http serverresponse_statuscode
http.ServerResponse.statusMessage	A										<section class="prog__container">    When using implicit headers (not calling     response.writeHead()     explicitly), this property\ncontrols the status message that will be sent to the client when the headers get\nflushed. If this is left as   undefined   then the standard message for the status\ncode will be used.  \n  Example:  \n    response.statusMessage = &#39;Not found&#39;;\n    \n  After response header was sent to the client, this property indicates the\nstatus message which was sent out.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_statusmessage
http.ServerResponse statusMessage	R	http.ServerResponse.statusMessage										http://nodejs.org/api/all.html#all_http.serverresponse_statusmessage
http ServerResponse statusMessage	R	http.ServerResponse statusMessage										http://nodejs.org/api/all.html#all_http serverresponse_statusmessage
http.ServerResponse.close	A										<section class="prog__container">    Indicates that the underlying connection was terminated before\n    response.end()     was called or able to flush.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_close
http.ServerResponse close	R	http.ServerResponse.close										http://nodejs.org/api/all.html#all_http.serverresponse_close
http ServerResponse close	R	http.ServerResponse close										http://nodejs.org/api/all.html#all_http serverresponse_close
http.ServerResponse.finish	A										<section class="prog__container">    Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.  \n  After this event, no more events will be emitted on the response object.  \n  </section>	http://nodejs.org/api/all.html#all_http.serverresponse_finish
http.ServerResponse finish	R	http.ServerResponse.finish										http://nodejs.org/api/all.html#all_http.serverresponse_finish
http ServerResponse finish	R	http.ServerResponse finish										http://nodejs.org/api/all.html#all_http serverresponse_finish
http.IncomingMessage	A										<section class="prog__container">    An   IncomingMessage   object is created by     http.Server     or\n    http.ClientRequest     and passed as the first argument to the     &#39;request&#39;    \nand     &#39;response&#39;     event respectively. It may be used to access response status,\nheaders and data.  \n  It implements the   Readable Stream   interface, as well as the\nfollowing additional events, methods, and properties.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage
http IncomingMessage	R	http.IncomingMessage										http://nodejs.org/api/all.html#all_http incomingmessage
http.IncomingMessage.destroy	A										<section class="prog__container">    Calls   destroy()   on the socket that received the   IncomingMessage  . If   error  \nis provided, an   &#39;error&#39;   event is emitted and   error   is passed as an argument\nto any listeners on the event.  \n  <pre><code>message.destroy([error])</code></pre></section>	http://nodejs.org/api/all.html#all_http.incomingmessage_destroy_error
http.IncomingMessage destroy	R	http.IncomingMessage.destroy										http://nodejs.org/api/all.html#all_http.incomingmessage_destroy_error
http IncomingMessage destroy	R	http.IncomingMessage destroy										http://nodejs.org/api/all.html#all_http incomingmessage_destroy_error
http.IncomingMessage.setTimeout	A										<section class="prog__container">    Calls   message.connection.setTimeout(msecs, callback)  .  \n  Returns   message  .  \n  <pre><code>message.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.incomingmessage_settimeout_msecs_callback
http.IncomingMessage setTimeout	R	http.IncomingMessage.setTimeout										http://nodejs.org/api/all.html#all_http.incomingmessage_settimeout_msecs_callback
http IncomingMessage setTimeout	R	http.IncomingMessage setTimeout										http://nodejs.org/api/all.html#all_http incomingmessage_settimeout_msecs_callback
http.IncomingMessage.headers	A										<section class="prog__container">    The request/response headers object.  \n  Key-value pairs of header names and values. Header names are lower-cased.\nExample:  \n    // Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);\n    \n  Duplicates in raw headers are handled in the following ways, depending on the\nheader name:  \n  \n  Duplicates of   age  ,   authorization  ,   content-length  ,   content-type  ,\n  etag  ,   expires  ,   from  ,   host  ,   if-modified-since  ,   if-unmodified-since  ,\n  last-modified  ,   location  ,   max-forwards  ,   proxy-authorization  ,   referer  ,\n  retry-after  , or   user-agent   are discarded.  \n    set-cookie   is always an array. Duplicates are added to the array.  \n  For all other headers, the values are joined together with &#39;, &#39;.  \n  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_headers
http.IncomingMessage headers	R	http.IncomingMessage.headers										http://nodejs.org/api/all.html#all_http.incomingmessage_headers
http IncomingMessage headers	R	http.IncomingMessage headers										http://nodejs.org/api/all.html#all_http incomingmessage_headers
http.IncomingMessage.httpVersion	A										<section class="prog__container">    In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either   &#39;1.1&#39;   or   &#39;1.0&#39;  .  \n  Also   message.httpVersionMajor   is the first integer and\n  message.httpVersionMinor   is the second.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_httpversion
http.IncomingMessage httpVersion	R	http.IncomingMessage.httpVersion										http://nodejs.org/api/all.html#all_http.incomingmessage_httpversion
http IncomingMessage httpVersion	R	http.IncomingMessage httpVersion										http://nodejs.org/api/all.html#all_http incomingmessage_httpversion
http.IncomingMessage.method	A										<section class="prog__container">      Only valid for request obtained from     http.Server    .    \n  The request method as a string. Read only. Example:\n  &#39;GET&#39;  ,   &#39;DELETE&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_method
http.IncomingMessage method	R	http.IncomingMessage.method										http://nodejs.org/api/all.html#all_http.incomingmessage_method
http IncomingMessage method	R	http.IncomingMessage method										http://nodejs.org/api/all.html#all_http incomingmessage_method
http.IncomingMessage.rawHeaders	A										<section class="prog__container">    The raw request/response headers list exactly as they were received.  \n  Note that the keys and values are in the same list.  It is   not   a\nlist of tuples.  So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.  \n  Header names are not lowercased, and duplicates are not merged.  \n    // Prints something like:\n//\n// [ &#39;user-agent&#39;,\n//   &#39;this is invalid because there can be only one&#39;,\n//   &#39;User-Agent&#39;,\n//   &#39;curl/7.22.0&#39;,\n//   &#39;Host&#39;,\n//   &#39;127.0.0.1:8000&#39;,\n//   &#39;ACCEPT&#39;,\n//   &#39;*/*&#39; ]\nconsole.log(request.rawHeaders);\n    \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_rawheaders
http.IncomingMessage rawHeaders	R	http.IncomingMessage.rawHeaders										http://nodejs.org/api/all.html#all_http.incomingmessage_rawheaders
http IncomingMessage rawHeaders	R	http.IncomingMessage rawHeaders										http://nodejs.org/api/all.html#all_http incomingmessage_rawheaders
http.IncomingMessage.rawTrailers	A										<section class="prog__container">    The raw request/response trailer keys and values exactly as they were\nreceived.  Only populated at the   &#39;end&#39;   event.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_rawtrailers
http.IncomingMessage rawTrailers	R	http.IncomingMessage.rawTrailers										http://nodejs.org/api/all.html#all_http.incomingmessage_rawtrailers
http IncomingMessage rawTrailers	R	http.IncomingMessage rawTrailers										http://nodejs.org/api/all.html#all_http incomingmessage_rawtrailers
http.IncomingMessage.statusCode	A										<section class="prog__container">      Only valid for response obtained from     http.ClientRequest    .    \n  The 3-digit HTTP response status code. E.G.   404  .  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_statuscode
http.IncomingMessage statusCode	R	http.IncomingMessage.statusCode										http://nodejs.org/api/all.html#all_http.incomingmessage_statuscode
http IncomingMessage statusCode	R	http.IncomingMessage statusCode										http://nodejs.org/api/all.html#all_http incomingmessage_statuscode
http.IncomingMessage.statusMessage	A										<section class="prog__container">      Only valid for response obtained from     http.ClientRequest    .    \n  The HTTP response status message (reason phrase). E.G.   OK   or   Internal Server Error  .  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_statusmessage
http.IncomingMessage statusMessage	R	http.IncomingMessage.statusMessage										http://nodejs.org/api/all.html#all_http.incomingmessage_statusmessage
http IncomingMessage statusMessage	R	http.IncomingMessage statusMessage										http://nodejs.org/api/all.html#all_http incomingmessage_statusmessage
http.IncomingMessage.socket	A										<section class="prog__container">    The     net.Socket     object associated with the connection.  \n  With HTTPS support, use     request.socket.getPeerCertificate()     to obtain the\nclient&#39;s authentication details.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_socket
http.IncomingMessage socket	R	http.IncomingMessage.socket										http://nodejs.org/api/all.html#all_http.incomingmessage_socket
http IncomingMessage socket	R	http.IncomingMessage socket										http://nodejs.org/api/all.html#all_http incomingmessage_socket
http.IncomingMessage.trailers	A										<section class="prog__container">    The request/response trailers object. Only populated at the   &#39;end&#39;   event.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_trailers
http.IncomingMessage trailers	R	http.IncomingMessage.trailers										http://nodejs.org/api/all.html#all_http.incomingmessage_trailers
http IncomingMessage trailers	R	http.IncomingMessage trailers										http://nodejs.org/api/all.html#all_http incomingmessage_trailers
http.IncomingMessage.url	A										<section class="prog__container">      Only valid for request obtained from     http.Server    .    \n  Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:  \n    GET /status?name=ryan HTTP/1.1\r\n\nAccept: text/plain\r\n\n\r\n\n    \n  Then   request.url   will be:  \n    &#39;/status?name=ryan&#39;\n    \n  If you would like to parse the URL into its parts, you can use\n  require(&#39;url&#39;).parse(request.url)  .  Example:  \n    $ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39;\n}\n    \n  If you would like to extract the parameters from the query string,\nyou can use the   require(&#39;querystring&#39;).parse   function, or pass\n  true   as the second argument to   require(&#39;url&#39;).parse  .  Example:  \n    $ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: {name: &#39;ryan&#39;},\n  pathname: &#39;/status&#39;\n}\n    \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_url
http.IncomingMessage url	R	http.IncomingMessage.url										http://nodejs.org/api/all.html#all_http.incomingmessage_url
http IncomingMessage url	R	http.IncomingMessage url										http://nodejs.org/api/all.html#all_http incomingmessage_url
http.IncomingMessage.aborted	A										<section class="prog__container">    Emitted when the request has been aborted by the client and the network\nsocket has closed.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_aborted
http.IncomingMessage aborted	R	http.IncomingMessage.aborted										http://nodejs.org/api/all.html#all_http.incomingmessage_aborted
http IncomingMessage aborted	R	http.IncomingMessage aborted										http://nodejs.org/api/all.html#all_http incomingmessage_aborted
http.IncomingMessage.close	A										<section class="prog__container">    Indicates that the underlying connection was closed.\nJust like   &#39;end&#39;  , this event occurs only once per response.  \n  </section>	http://nodejs.org/api/all.html#all_http.incomingmessage_close
http.IncomingMessage close	R	http.IncomingMessage.close										http://nodejs.org/api/all.html#all_http.incomingmessage_close
http IncomingMessage close	R	http.IncomingMessage close										http://nodejs.org/api/all.html#all_http incomingmessage_close
https	A										<section class="prog__container">    HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_https
https	A										<section class="prog__container">    HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_https
https.createServer	A										<section class="prog__container">    Returns a new HTTPS web server object. The   options   is similar to\n    tls.createServer()    .  The   requestListener   is a function which is\nautomatically added to the   &#39;request&#39;   event.  \n  Example:  \n    // curl -k https://localhost:8000/\nconst https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\n&#39;);\n}).listen(8000);\n    \n  Or  \n    const https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\n&#39;);\n}).listen(8000);\n    \n  <pre><code>https.createServer(options[, requestListener])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_options_requestlistener
https createServer	R	https.createServer										http://nodejs.org/api/all.html#all_https_createserver_options_requestlistener
https.createServer.close	A										<section class="prog__container">    See     http.close()     for details.  \n  <pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_close_callback
https createServer close	R	https.createServer close										http://nodejs.org/api/all.html#all_https_createserver_close_callback
https.createServer.listen	A										<section class="prog__container">    See     http.listen()     for details.  \n  <pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https createServer listen	R	https.createServer listen										http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https.createServer.listen	A										<section class="prog__container">    See     http.listen()     for details.  \n  <pre><code>server.listen(port[, host][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https createServer listen	R	https.createServer listen										http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https.get	A										<section class="prog__container">    Like     http.get()     but for HTTPS.  \n    options   can be an object or a string. If   options   is a string, it is\nautomatically parsed with     url.parse()    .  \n  Example:  \n    const https = require(&#39;https&#39;);\n\nhttps.get(&#39;https://encrypted.google.com/&#39;, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n    \n  <pre><code>https.get(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https_get_options_callback
https get	R	https.get										http://nodejs.org/api/all.html#all_https_get_options_callback
https.request	A										<section class="prog__container">    Makes a request to a secure web server.  \n    options   can be an object or a string. If   options   is a string, it is\nautomatically parsed with     url.parse()    .  \n  All options from     http.request()     are valid.  \n  Example:  \n    const https = require(&#39;https&#39;);\n\nvar options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;\n};\n\nvar req = https.request(options, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n    \n  The options argument has the following options  \n  \n    host  : A domain name or IP address of the server to issue the request to.\nDefaults to   &#39;localhost&#39;  .  \n    hostname  : Alias for   host  . To support   url.parse()     hostname   is\npreferred over   host  .  \n    family  : IP address family to use when resolving   host   and   hostname  .\nValid values are   4   or   6  . When unspecified, both IP v4 and v6 will be\nused.  \n    port  : Port of remote server. Defaults to 443.  \n    localAddress  : Local interface to bind for network connections.  \n    socketPath  : Unix Domain Socket (use one of host:port or socketPath).  \n    method  : A string specifying the HTTP request method. Defaults to   &#39;GET&#39;  .  \n    path  : Request path. Defaults to   &#39;/&#39;  . Should include query string if any.\nE.G.   &#39;/index.html?page=12&#39;  . An exception is thrown when the request path\ncontains illegal characters. Currently, only spaces are rejected but that\nmay change in the future.  \n    headers  : An object containing request headers.  \n    auth  : Basic authentication i.e.   &#39;user:password&#39;   to compute an\nAuthorization header.  \n    agent  : Controls     Agent     behavior. When an Agent is used request will\ndefault to   Connection: keep-alive  . Possible values:  \n    undefined   (default): use     globalAgent     for this host and port.  \n    Agent   object: explicitly use the passed in   Agent  .  \n    false  : opts out of connection pooling with an Agent, defaults request to\n  Connection: close  .  \n  \n  \n  \n  The following options from     tls.connect()     can also be specified:  \n  \n    pfx  : Certificate, Private key and CA certificates to use for SSL. Default   null  .  \n    key  : Private key to use for SSL. Default   null  .  \n    passphrase  : A string of passphrase for the private key or pfx. Default   null  .  \n    cert  : Public x509 certificate to use. Default   null  .  \n    ca  : A string,     Buffer     or array of strings or     Buffer    s of trusted\ncertificates in PEM format. If this is omitted several well known &quot;root&quot;\nCAs will be used, like VeriSign. These are used to authorize connections.  \n    ciphers  : A string describing the ciphers to use or exclude. Consult\n  https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-LIST-FORMAT   for\ndetails on the format.  \n    rejectUnauthorized  : If   true  , the server certificate is verified against\nthe list of supplied CAs. An   &#39;error&#39;   event is emitted if verification\nfails. Verification happens at the connection level,   before   the HTTP\nrequest is sent. Default   true  .  \n    secureProtocol  : The SSL method to use, e.g.   SSLv3_method   to force\nSSL version 3. The possible values depend on your installation of\nOpenSSL and are defined in the constant     SSL_METHODS    .  \n    servername  : Servername for SNI (Server Name Indication) TLS extension.  \n  \n  In order to specify these options, use a custom     Agent    .  \n  Example:  \n    var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n    \n  Alternatively, opt out of connection pooling by not using an   Agent  .  \n  Example:  \n    var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;),\n  agent: false\n};\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n    \n  \n  \n  <pre><code>https.request(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https_request_options_callback
https request	R	https.request										http://nodejs.org/api/all.html#all_https_request_options_callback
https.globalAgent	A										<section class="prog__container">    Global instance of     https.Agent     for all HTTPS client requests.  \n  </section>	http://nodejs.org/api/all.html#all_https_globalagent
https globalAgent	R	https.globalAgent										http://nodejs.org/api/all.html#all_https_globalagent
https.Agent	A										<section class="prog__container">    An Agent object for HTTPS similar to     http.Agent    .  See     https.request()    \nfor more information.  \n  </section>	http://nodejs.org/api/all.html#all_https.agent
https Agent	R	https.Agent										http://nodejs.org/api/all.html#all_https agent
https.Server	A										<section class="prog__container">    This class is a subclass of   tls.Server   and emits events same as\n    http.Server    . See     http.Server     for more information.  \n  </section>	http://nodejs.org/api/all.html#all_https.server
https Server	R	https.Server										http://nodejs.org/api/all.html#all_https server
https.Server.setTimeout	A										<section class="prog__container">    See     http.Server#setTimeout()    .  \n  <pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https.server_settimeout_msecs_callback
https.Server setTimeout	R	https.Server.setTimeout										http://nodejs.org/api/all.html#all_https.server_settimeout_msecs_callback
https Server setTimeout	R	https.Server setTimeout										http://nodejs.org/api/all.html#all_https server_settimeout_msecs_callback
https.Server.timeout	A										<section class="prog__container">    See     http.Server#timeout    .  \n  </section>	http://nodejs.org/api/all.html#all_https.server_timeout
https.Server timeout	R	https.Server.timeout										http://nodejs.org/api/all.html#all_https.server_timeout
https Server timeout	R	https.Server timeout										http://nodejs.org/api/all.html#all_https server_timeout
module	A										<section class="prog__container">    Node.js has a simple module loading system.  In Node.js, files and modules\nare in one-to-one correspondence (each file is treated as a separate module).\nAs an example,   foo.js   loads the module   circle.js   in the same directory.  \n  The contents of   foo.js  :  \n    const circle = require(&#39;./circle.js&#39;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n    \n  The contents of   circle.js  :  \n    const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n    \n  The module   circle.js   has exported the functions   area()   and\n  circumference()  .  To add functions and objects to the root of your module,\nyou can add them to the special   exports   object.  \n  Variables local to the module will be private, because the module is wrapped\nin a function by Node.js (see   module wrapper  ).\nIn this example, the variable   PI   is private to   circle.js  .  \n  If you want the root of your module&#39;s export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to   module.exports  \ninstead of   exports  .  \n  Below,   bar.js   makes use of the   square   module, which exports a constructor:  \n    const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n    \n  The   square   module is defined in   square.js  :  \n    // assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n    \n  The module system is implemented in the   require(&quot;module&quot;)   module.  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_module
module	A										<section class="prog__container">    Node.js has a simple module loading system.  In Node.js, files and modules\nare in one-to-one correspondence (each file is treated as a separate module).\nAs an example,   foo.js   loads the module   circle.js   in the same directory.  \n  The contents of   foo.js  :  \n    const circle = require(&#39;./circle.js&#39;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n    \n  The contents of   circle.js  :  \n    const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n    \n  The module   circle.js   has exported the functions   area()   and\n  circumference()  .  To add functions and objects to the root of your module,\nyou can add them to the special   exports   object.  \n  Variables local to the module will be private, because the module is wrapped\nin a function by Node.js (see   module wrapper  ).\nIn this example, the variable   PI   is private to   circle.js  .  \n  If you want the root of your module&#39;s export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to   module.exports  \ninstead of   exports  .  \n  Below,   bar.js   makes use of the   square   module, which exports a constructor:  \n    const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n    \n  The   square   module is defined in   square.js  :  \n    // assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n    \n  The module system is implemented in the   require(&quot;module&quot;)   module.  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_module
net	A										<section class="prog__container">    The   net   module provides you with an asynchronous network wrapper. It contains\nfunctions for creating both servers and clients (called streams). You can include\nthis module with   require(&#39;net&#39;);  .  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_net
net	A										<section class="prog__container">    The   net   module provides you with an asynchronous network wrapper. It contains\nfunctions for creating both servers and clients (called streams). You can include\nthis module with   require(&#39;net&#39;);  .  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_net
net.connect	A										<section class="prog__container">    A factory function, which returns a new     net.Socket     and automatically\nconnects with the supplied   options  .  \n  The options are passed to both the     net.Socket     constructor and the\n    socket.connect     method.  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  Here is an example of a client of the previously described echo server:  \n    const net = require(&#39;net&#39;);\nconst client = net.connect({port: 8124}, () =&gt; {\n  // &#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\r\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n    \n  To connect on the socket   /tmp/echo.sock   the second line would just be\nchanged to  \n    const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n    \n  <pre><code>net.connect(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_options_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_options_connectlistener
net.connect	A										<section class="prog__container">    A factory function, which returns a new unix     net.Socket     and automatically\nconnects to the supplied   path  .  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  <pre><code>net.connect(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_path_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_path_connectlistener
net.connect	A										<section class="prog__container">    A factory function, which returns a new     net.Socket     and automatically\nconnects to the supplied   port   and   host  .  \n  If   host   is omitted,   &#39;localhost&#39;   will be assumed.  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  <pre><code>net.connect(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_port_host_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_port_host_connectlistener
net.createConnection	A										<section class="prog__container">    A factory function, which returns a new     net.Socket     and automatically\nconnects with the supplied   options  .  \n  The options are passed to both the     net.Socket     constructor and the\n    socket.connect     method.  \n  Passing   timeout   as an option will call     socket.setTimeout()     after the socket is created, but before it is connecting.  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  Here is an example of a client of the previously described echo server:  \n    const net = require(&#39;net&#39;);\nconst client = net.createConnection({port: 8124}, () =&gt; {\n  //&#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\r\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n    \n  To connect on the socket   /tmp/echo.sock   the second line would just be\nchanged to  \n    const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n    \n  <pre><code>net.createConnection(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_options_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_options_connectlistener
net.createConnection	A										<section class="prog__container">    A factory function, which returns a new unix     net.Socket     and automatically\nconnects to the supplied   path  .  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  <pre><code>net.createConnection(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_path_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_path_connectlistener
net.createConnection	A										<section class="prog__container">    A factory function, which returns a new     net.Socket     and automatically\nconnects to the supplied   port   and   host  .  \n  If   host   is omitted,   &#39;localhost&#39;   will be assumed.  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event once.  \n  <pre><code>net.createConnection(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_port_host_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_port_host_connectlistener
net.createServer	A										<section class="prog__container">    Creates a new server. The   connectionListener   argument is\nautomatically set as a listener for the     &#39;connection&#39;     event.  \n    options   is an object with the following defaults:  \n    {\n  allowHalfOpen: false,\n  pauseOnConnect: false\n}\n    \n  If   allowHalfOpen   is   true  , then the socket won&#39;t automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the     end()     method explicitly.\nSee     &#39;end&#39;     event for more information.  \n  If   pauseOnConnect   is   true  , then the socket associated with each incoming\nconnection will be paused, and no data will be read from its handle. This allows\nconnections to be passed between processes without any data being read by the\noriginal process. To begin reading data from a paused socket, call     resume()    .  \n  Here is an example of an echo server which listens for connections\non port 8124:  \n    const net = require(&#39;net&#39;);\nconst server = net.createServer((c) =&gt; {\n  // &#39;connection&#39; listener\n  console.log(&#39;client connected&#39;);\n  c.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;client disconnected&#39;);\n  });\n  c.write(&#39;hello\r\n&#39;);\n  c.pipe(c);\n});\nserver.on(&#39;error&#39;, (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n    \n  Test this by using   telnet  :  \n    telnet localhost 8124\n    \n  To listen on the socket   /tmp/echo.sock   the third line from the last would\njust be changed to  \n    server.listen(&#39;/tmp/echo.sock&#39;, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n    \n  Use   nc   to connect to a UNIX domain socket server:  \n    nc -U /tmp/echo.sock\n    \n  <pre><code>net.createServer([options][, connectionListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createserver_options_connectionlistener
net createServer	R	net.createServer										http://nodejs.org/api/all.html#all_net_createserver_options_connectionlistener
net.isIP	A										<section class="prog__container">    Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.  \n  <pre><code>net.isIP(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isip_input
net isIP	R	net.isIP										http://nodejs.org/api/all.html#all_net_isip_input
net.isIPv4	A										<section class="prog__container">    Returns true if input is a version 4 IP address, otherwise returns false.  \n  <pre><code>net.isIPv4(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isipv4_input
net isIPv4	R	net.isIPv4										http://nodejs.org/api/all.html#all_net_isipv4_input
net.isIPv6	A										<section class="prog__container">    Returns true if input is a version 6 IP address, otherwise returns false.  \n  \n  \n  <pre><code>net.isIPv6(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isipv6_input
net isIPv6	R	net.isIPv6										http://nodejs.org/api/all.html#all_net_isipv6_input
net.Server	A										<section class="prog__container">    This class is used to create a TCP or local server.  \n    net.Server   is an     EventEmitter     with the following events:  \n  </section>	http://nodejs.org/api/all.html#all_net.server
net Server	R	net.Server										http://nodejs.org/api/all.html#all_net server
net.Server.address	A										<section class="prog__container">    Returns the bound address, the address family name, and port of the server\nas reported by the operating system.\nUseful to find which port was assigned when getting an OS-assigned address.\nReturns an object with   port  ,   family  , and   address   properties:\n  { port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }    \n  Example:  \n    var server = net.createServer((socket) =&gt; {\n  socket.end(&#39;goodbye\n&#39;);\n}).on(&#39;error&#39;, (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab a random port.\nserver.listen(() =&gt; {\n  console.log(&#39;opened server on&#39;, server.address());\n});\n    \n  Don&#39;t call   server.address()   until the   &#39;listening&#39;   event has been emitted.  \n  <pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_address
net.Server address	R	net.Server.address										http://nodejs.org/api/all.html#all_net.server_address
net Server address	R	net.Server address										http://nodejs.org/api/all.html#all_net server_address
net.Server.close	A										<section class="prog__container">    Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally\nclosed when all connections are ended and the server emits a     &#39;close&#39;     event.\nThe optional   callback   will be called once the   &#39;close&#39;   event occurs. Unlike\nthat event, it will be called with an Error as its only argument if the server\nwas not open when it was closed.  \n  <pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_close_callback
net.Server close	R	net.Server.close										http://nodejs.org/api/all.html#all_net.server_close_callback
net Server close	R	net.Server close										http://nodejs.org/api/all.html#all_net server_close_callback
net.Server.getConnections	A										<section class="prog__container">    Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.  \n  Callback should take two arguments   err   and   count  .  \n  <pre><code>server.getConnections(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_getconnections_callback
net.Server getConnections	R	net.Server.getConnections										http://nodejs.org/api/all.html#all_net.server_getconnections_callback
net Server getConnections	R	net.Server getConnections										http://nodejs.org/api/all.html#all_net server_getconnections_callback
net.Server.listen	A										<section class="prog__container">    The   handle   object can be set to either a server or socket (anything\nwith an underlying   _handle   member), or a   {fd: &lt;n&gt;}   object.  \n  This will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.  \n  Listening on a file descriptor is not supported on Windows.  \n  This function is asynchronous.  When the server has been bound,\n    &#39;listening&#39;     event will be emitted.\nThe last parameter   callback   will be added as a listener for the\n    &#39;listening&#39;     event.  \n  The parameter   backlog   behaves the same as in\n    server.listen([port][, hostname][, backlog][, callback])    .  \n  <pre><code>server.listen(handle[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_handle_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_handle_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_handle_backlog_callback
net.Server.listen	A										<section class="prog__container">    The   port  ,   host  , and   backlog   properties of   options  , as well as the\noptional callback function, behave as they do on a call to\n    server.listen([port][, hostname][, backlog][, callback])    .\nAlternatively, the   path   option can be used to specify a UNIX socket.  \n  If   exclusive   is   false   (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n  exclusive   is   true  , the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.  \n    server.listen({\n  host: &#39;localhost&#39;,\n  port: 80,\n  exclusive: true\n});\n    \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_options_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_options_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_options_callback
net.Server.listen	A										<section class="prog__container">    Start a local socket server listening for connections on the given   path  .  \n  This function is asynchronous.  When the server has been bound,\n    &#39;listening&#39;     event will be emitted.  The last parameter   callback  \nwill be added as a listener for the     &#39;listening&#39;     event.  \n  On UNIX, the local domain is usually known as the UNIX domain. The path is a\nfilesystem path name. It gets truncated to   sizeof(sockaddr_un.sun_path)  \nbytes, decreased by 1. It varies on different operating system between 91 and\n107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is\nsubject to the same naming conventions and permissions checks as would be done\non file creation, will be visible in the filesystem, and will   persist until\nunlinked  .  \n  On Windows, the local domain is implemented using a named pipe. The path   must  \nrefer to an entry in   \\?\pipe\   or   \\.\pipe\  . Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving   ..  \nsequences. Despite appearances, the pipe name space is flat.  Pipes will   not\npersist  , they are removed when the last reference to them is closed. Do not\nforget JavaScript string escaping requires paths to be specified with\ndouble-backslashes, such as:  \n    net.createServer().listen(\n    path.join(&#39;\\\\?\\pipe&#39;, process.cwd(), &#39;myctl&#39;))\n    \n  The parameter   backlog   behaves the same as in\n    server.listen([port][, hostname][, backlog][, callback])    .  \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen(path[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_path_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_path_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_path_backlog_callback
net.Server.listen	A										<section class="prog__container">    Begin accepting connections on the specified   port   and   hostname  . If the\n  hostname   is omitted, the server will accept connections on any IPv6 address\n(  ::  ) when IPv6 is available, or any IPv4 address (  0.0.0.0  ) otherwise.\nOmit the port argument, or use a port value of   0  , to have the operating system\nassign a random port, which can be retrieved by using   server.address().port  \nafter the   &#39;listening&#39;   event has been emitted.  \n  Backlog is the maximum length of the queue of pending connections.\nThe actual length will be determined by the OS through sysctl settings such as\n  tcp_max_syn_backlog   and   somaxconn   on Linux. The default value of this\nparameter is 511 (not 512).  \n  This function is asynchronous.  When the server has been bound,\n    &#39;listening&#39;     event will be emitted.  The last parameter   callback  \nwill be added as a listener for the     &#39;listening&#39;     event.  \n  One issue some users run into is getting   EADDRINUSE   errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again:  \n    server.on(&#39;error&#39;, (e) =&gt; {\n  if (e.code == &#39;EADDRINUSE&#39;) {\n    console.log(&#39;Address in use, retrying...&#39;);\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n    \n  (Note: All sockets in Node.js are set   SO_REUSEADDR  .)  \n    Note  : The   server.listen()   method may be called multiple times. Each\nsubsequent call will   re-open   the server using the provided options.  \n  <pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_port_hostname_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_port_hostname_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_port_hostname_backlog_callback
net.Server.ref	A										<section class="prog__container">    Opposite of   unref  , calling   ref   on a previously   unref  d server will   not  \nlet the program exit if it&#39;s the only server left (the default behavior). If\nthe server is   ref  d calling   ref   again will have no effect.  \n  Returns   server  .  \n  <pre><code>server.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_ref
net.Server ref	R	net.Server.ref										http://nodejs.org/api/all.html#all_net.server_ref
net Server ref	R	net.Server ref										http://nodejs.org/api/all.html#all_net server_ref
net.Server.unref	A										<section class="prog__container">    Calling   unref   on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already   unref  d calling\n  unref   again will have no effect.  \n  Returns   server  .  \n  <pre><code>server.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_unref
net.Server unref	R	net.Server.unref										http://nodejs.org/api/all.html#all_net.server_unref
net Server unref	R	net.Server unref										http://nodejs.org/api/all.html#all_net server_unref
net.Server.connections	A										<section class="prog__container">    The number of concurrent connections on the server.  \n  This becomes   null   when sending a socket to a child with\n    child_process.fork()    . To poll forks and get current number of active\nconnections use asynchronous   server.getConnections   instead.  \n  </section>	http://nodejs.org/api/all.html#all_net.server_connections
net.Server connections	R	net.Server.connections										http://nodejs.org/api/all.html#all_net.server_connections
net Server connections	R	net.Server connections										http://nodejs.org/api/all.html#all_net server_connections
net.Server.listening	A										<section class="prog__container">    A Boolean indicating whether or not the server is listening for\nconnections.  \n  </section>	http://nodejs.org/api/all.html#all_net.server_listening
net.Server listening	R	net.Server.listening										http://nodejs.org/api/all.html#all_net.server_listening
net Server listening	R	net.Server listening										http://nodejs.org/api/all.html#all_net server_listening
net.Server.maxConnections	A										<section class="prog__container">    Set this property to reject connections when the server&#39;s connection count gets\nhigh.  \n  It is not recommended to use this option once a socket has been sent to a child\nwith     child_process.fork()    .  \n  </section>	http://nodejs.org/api/all.html#all_net.server_maxconnections
net.Server maxConnections	R	net.Server.maxConnections										http://nodejs.org/api/all.html#all_net.server_maxconnections
net Server maxConnections	R	net.Server maxConnections										http://nodejs.org/api/all.html#all_net server_maxconnections
net.Server.close	A										<section class="prog__container">    Emitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.  \n  </section>	http://nodejs.org/api/all.html#all_net.server_close
net.Server close	R	net.Server.close										http://nodejs.org/api/all.html#all_net.server_close
net Server close	R	net.Server close										http://nodejs.org/api/all.html#all_net server_close
net.Server.connection	A										<section class="prog__container">    Emitted when a new connection is made.   socket   is an instance of\n  net.Socket  .  \n  </section>	http://nodejs.org/api/all.html#all_net.server_connection
net.Server connection	R	net.Server.connection										http://nodejs.org/api/all.html#all_net.server_connection
net Server connection	R	net.Server connection										http://nodejs.org/api/all.html#all_net server_connection
net.Server.error	A										<section class="prog__container">    Emitted when an error occurs.  The     &#39;close&#39;     event will be called directly\nfollowing this event.  See example in discussion of   server.listen  .  \n  </section>	http://nodejs.org/api/all.html#all_net.server_error
net.Server error	R	net.Server.error										http://nodejs.org/api/all.html#all_net.server_error
net Server error	R	net.Server error										http://nodejs.org/api/all.html#all_net server_error
net.Server.listening	A										<section class="prog__container">    Emitted when the server has been bound after calling   server.listen  .  \n  </section>	http://nodejs.org/api/all.html#all_net.server_listening
net.Server listening	R	net.Server.listening										http://nodejs.org/api/all.html#all_net.server_listening
net Server listening	R	net.Server listening										http://nodejs.org/api/all.html#all_net server_listening
net.Socket	A										<section class="prog__container">    This object is an abstraction of a TCP or local socket.    net.Socket  \ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with     connect()    ) or they can be created by Node.js\nand passed to the user through the   &#39;connection&#39;   event of a server.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket
net Socket	R	net.Socket										http://nodejs.org/api/all.html#all_net socket
net.Socket.Socket	A										<section class="prog__container">    Construct a new socket object.  \n    options   is an object with the following defaults:  \n    {\n  fd: null,\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}\n    \n    fd   allows you to specify the existing file descriptor of socket.\nSet   readable   and/or   writable   to   true   to allow reads and/or writes on this\nsocket (NOTE: Works only when   fd   is passed).\nAbout   allowHalfOpen  , refer to   createServer()   and   &#39;end&#39;   event.  \n    net.Socket   instances are     EventEmitter     with the following events:  \n  <pre><code>new net.Socket([options])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_socket_options
net.Socket Socket	R	net.Socket.Socket										http://nodejs.org/api/all.html#all_net.socket_socket_options
net Socket Socket	R	net.Socket Socket										http://nodejs.org/api/all.html#all_net socket_socket_options
net.Socket.address	A										<section class="prog__container">    Returns the bound address, the address family name and port of the\nsocket as reported by the operating system. Returns an object with\nthree properties, e.g.\n  { port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }    \n  <pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_address
net.Socket address	R	net.Socket.address										http://nodejs.org/api/all.html#all_net.socket_address
net Socket address	R	net.Socket address										http://nodejs.org/api/all.html#all_net socket_address
net.Socket.connect	A										<section class="prog__container">    Opens the connection for a given socket.  \n  For TCP sockets,   options   argument should be an object which specifies:  \n  \n      port  : Port the client should connect to (Required).  \n  \n      host  : Host the client should connect to. Defaults to   &#39;localhost&#39;  .  \n  \n      localAddress  : Local interface to bind to for network connections.  \n  \n      localPort  : Local port to bind to for network connections.  \n  \n      family   : Version of IP stack. Defaults to   4  .  \n  \n      hints  :     dns.lookup()   hints  . Defaults to   0  .  \n  \n      lookup   : Custom lookup function. Defaults to   dns.lookup  .  \n  \n  \n  For local domain sockets,   options   argument should be an object which\nspecifies:  \n  \n    path  : Path the client should connect to (Required).  \n  \n  Normally this method is not needed, as   net.createConnection   opens the\nsocket. Use this only if you are implementing a custom Socket.  \n  This function is asynchronous. When the     &#39;connect&#39;     event is emitted the\nsocket is established. If there is a problem connecting, the   &#39;connect&#39;   event\nwill not be emitted, the     &#39;error&#39;     event will be emitted with the exception.  \n  The   connectListener   parameter will be added as a listener for the\n    &#39;connect&#39;     event.  \n  <pre><code>socket.connect(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_options_connectlistener
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect_options_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect_options_connectlistener
net.Socket.connect	A										<section class="prog__container">    As     socket.connect(options[, connectListener])    ,\nwith options as either   {port: port, host: host}   or   {path: path}  .  \n  <pre><code>socket.connect(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect_port_host_connectlistener
net.Socket.connect	A										<section class="prog__container">    As     socket.connect(options[, connectListener])    ,\nwith options as either   {port: port, host: host}   or   {path: path}  .  \n  <pre><code>socket.connect(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect_port_host_connectlistener
net.Socket.destroy	A										<section class="prog__container">    Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).  \n  If   exception   is specified, an     &#39;error&#39;     event will be emitted and any\nlisteners for that event will receive   exception   as an argument.  \n  <pre><code>socket.destroy([exception])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_destroy_exception
net.Socket destroy	R	net.Socket.destroy										http://nodejs.org/api/all.html#all_net.socket_destroy_exception
net Socket destroy	R	net.Socket destroy										http://nodejs.org/api/all.html#all_net socket_destroy_exception
net.Socket.end	A										<section class="prog__container">    Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.  \n  If   data   is specified, it is equivalent to calling\n  socket.write(data, encoding)   followed by   socket.end()  .  \n  <pre><code>socket.end([data][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_end_data_encoding
net.Socket end	R	net.Socket.end										http://nodejs.org/api/all.html#all_net.socket_end_data_encoding
net Socket end	R	net.Socket end										http://nodejs.org/api/all.html#all_net socket_end_data_encoding
net.Socket.pause	A										<section class="prog__container">    Pauses the reading of data. That is,     &#39;data&#39;     events will not be emitted.\nUseful to throttle back an upload.  \n  <pre><code>socket.pause()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_pause
net.Socket pause	R	net.Socket.pause										http://nodejs.org/api/all.html#all_net.socket_pause
net Socket pause	R	net.Socket pause										http://nodejs.org/api/all.html#all_net socket_pause
net.Socket.ref	A										<section class="prog__container">    Opposite of   unref  , calling   ref   on a previously   unref  d socket will   not  \nlet the program exit if it&#39;s the only socket left (the default behavior). If\nthe socket is   ref  d calling   ref   again will have no effect.  \n  Returns   socket  .  \n  <pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_ref
net.Socket ref	R	net.Socket.ref										http://nodejs.org/api/all.html#all_net.socket_ref
net Socket ref	R	net.Socket ref										http://nodejs.org/api/all.html#all_net socket_ref
net.Socket.resume	A										<section class="prog__container">    Resumes reading after a call to     pause()    .  \n  <pre><code>socket.resume()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_resume
net.Socket resume	R	net.Socket.resume										http://nodejs.org/api/all.html#all_net.socket_resume
net Socket resume	R	net.Socket resume										http://nodejs.org/api/all.html#all_net socket_resume
net.Socket.setEncoding	A										<section class="prog__container">    Set the encoding for the socket as a   Readable Stream  . See\n    stream.setEncoding()     for more information.  \n  <pre><code>socket.setEncoding([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setencoding_encoding
net.Socket setEncoding	R	net.Socket.setEncoding										http://nodejs.org/api/all.html#all_net.socket_setencoding_encoding
net Socket setEncoding	R	net.Socket setEncoding										http://nodejs.org/api/all.html#all_net socket_setencoding_encoding
net.Socket.setKeepAlive	A										<section class="prog__container">    Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n  enable   defaults to   false  .  \n  Set   initialDelay   (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting 0 for\ninitialDelay will leave the value unchanged from the default\n(or previous) setting. Defaults to   0  .  \n  Returns   socket  .  \n  <pre><code>socket.setKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setkeepalive_enable_initialdelay
net.Socket setKeepAlive	R	net.Socket.setKeepAlive										http://nodejs.org/api/all.html#all_net.socket_setkeepalive_enable_initialdelay
net Socket setKeepAlive	R	net.Socket setKeepAlive										http://nodejs.org/api/all.html#all_net socket_setkeepalive_enable_initialdelay
net.Socket.setNoDelay	A										<section class="prog__container">    Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting   true   for\n  noDelay   will immediately fire off data each time   socket.write()   is called.\n  noDelay   defaults to   true  .  \n  Returns   socket  .  \n  <pre><code>socket.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setnodelay_nodelay
net.Socket setNoDelay	R	net.Socket.setNoDelay										http://nodejs.org/api/all.html#all_net.socket_setnodelay_nodelay
net Socket setNoDelay	R	net.Socket setNoDelay										http://nodejs.org/api/all.html#all_net socket_setnodelay_nodelay
net.Socket.setTimeout	A										<section class="prog__container">    Sets the socket to timeout after   timeout   milliseconds of inactivity on\nthe socket. By default   net.Socket   do not have a timeout.  \n  When an idle timeout is triggered the socket will receive a     &#39;timeout&#39;    \nevent but the connection will not be severed. The user must manually     end()    \nor     destroy()     the socket.  \n  If   timeout   is 0, then the existing idle timeout is disabled.  \n  The optional   callback   parameter will be added as a one time listener for the\n    &#39;timeout&#39;     event.  \n  Returns   socket  .  \n  <pre><code>socket.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_settimeout_timeout_callback
net.Socket setTimeout	R	net.Socket.setTimeout										http://nodejs.org/api/all.html#all_net.socket_settimeout_timeout_callback
net Socket setTimeout	R	net.Socket setTimeout										http://nodejs.org/api/all.html#all_net socket_settimeout_timeout_callback
net.Socket.unref	A										<section class="prog__container">    Calling   unref   on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already   unref  d calling\n  unref   again will have no effect.  \n  Returns   socket  .  \n  <pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_unref
net.Socket unref	R	net.Socket.unref										http://nodejs.org/api/all.html#all_net.socket_unref
net Socket unref	R	net.Socket unref										http://nodejs.org/api/all.html#all_net socket_unref
net.Socket.write	A										<section class="prog__container">    Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.  \n  Returns   true   if the entire data was flushed successfully to the kernel\nbuffer. Returns   false   if all or part of the data was queued in user memory.\n    &#39;drain&#39;     will be emitted when the buffer is again free.  \n  The optional   callback   parameter will be executed when the data is finally\nwritten out - this may not be immediately.  \n  <pre><code>socket.write(data[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_write_data_encoding_callback
net.Socket write	R	net.Socket.write										http://nodejs.org/api/all.html#all_net.socket_write_data_encoding_callback
net Socket write	R	net.Socket write										http://nodejs.org/api/all.html#all_net socket_write_data_encoding_callback
net.Socket.bufferSize	A										<section class="prog__container">      net.Socket   has the property that   socket.write()   always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket&#39;s file descriptor for being writable).  \n  The consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)  \n  Users who experience large or growing   bufferSize   should attempt to\n&quot;throttle&quot; the data flows in their program with     pause()     and     resume()    .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_buffersize
net.Socket bufferSize	R	net.Socket.bufferSize										http://nodejs.org/api/all.html#all_net.socket_buffersize
net Socket bufferSize	R	net.Socket bufferSize										http://nodejs.org/api/all.html#all_net socket_buffersize
net.Socket.bytesRead	A										<section class="prog__container">    The amount of received bytes.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_bytesread
net.Socket bytesRead	R	net.Socket.bytesRead										http://nodejs.org/api/all.html#all_net.socket_bytesread
net Socket bytesRead	R	net.Socket bytesRead										http://nodejs.org/api/all.html#all_net socket_bytesread
net.Socket.bytesWritten	A										<section class="prog__container">    The amount of bytes sent.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_byteswritten
net.Socket bytesWritten	R	net.Socket.bytesWritten										http://nodejs.org/api/all.html#all_net.socket_byteswritten
net Socket bytesWritten	R	net.Socket bytesWritten										http://nodejs.org/api/all.html#all_net socket_byteswritten
net.Socket.connecting	A										<section class="prog__container">    If   true   -     socket.connect(options[, connectListener])     was called and\nhaven&#39;t yet finished. Will be set to   false   before emitting   connect   event\nand/or calling     socket.connect(options[, connectListener])    &#39;s callback.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_connecting
net.Socket connecting	R	net.Socket.connecting										http://nodejs.org/api/all.html#all_net.socket_connecting
net Socket connecting	R	net.Socket connecting										http://nodejs.org/api/all.html#all_net socket_connecting
net.Socket.destroyed	A										<section class="prog__container">    A Boolean value that indicates if the connection is destroyed or not. Once a\nconnection is destroyed no further data can be transferred using it.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_destroyed
net.Socket destroyed	R	net.Socket.destroyed										http://nodejs.org/api/all.html#all_net.socket_destroyed
net Socket destroyed	R	net.Socket destroyed										http://nodejs.org/api/all.html#all_net socket_destroyed
net.Socket.localAddress	A										<section class="prog__container">    The string representation of the local IP address the remote client is\nconnecting on. For example, if you are listening on   &#39;0.0.0.0&#39;   and the\nclient connects on   &#39;192.168.1.1&#39;  , the value would be   &#39;192.168.1.1&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_localaddress
net.Socket localAddress	R	net.Socket.localAddress										http://nodejs.org/api/all.html#all_net.socket_localaddress
net Socket localAddress	R	net.Socket localAddress										http://nodejs.org/api/all.html#all_net socket_localaddress
net.Socket.localPort	A										<section class="prog__container">    The numeric representation of the local port. For example,\n  80   or   21  .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_localport
net.Socket localPort	R	net.Socket.localPort										http://nodejs.org/api/all.html#all_net.socket_localport
net Socket localPort	R	net.Socket localPort										http://nodejs.org/api/all.html#all_net socket_localport
net.Socket.remoteAddress	A										<section class="prog__container">    The string representation of the remote IP address. For example,\n  &#39;74.125.127.100&#39;   or   &#39;2001:4860:a005::68&#39;  . Value may be   undefined   if\nthe socket is destroyed (for example, if the client disconnected).  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_remoteaddress
net.Socket remoteAddress	R	net.Socket.remoteAddress										http://nodejs.org/api/all.html#all_net.socket_remoteaddress
net Socket remoteAddress	R	net.Socket remoteAddress										http://nodejs.org/api/all.html#all_net socket_remoteaddress
net.Socket.remoteFamily	A										<section class="prog__container">    The string representation of the remote IP family.   &#39;IPv4&#39;   or   &#39;IPv6&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_remotefamily
net.Socket remoteFamily	R	net.Socket.remoteFamily										http://nodejs.org/api/all.html#all_net.socket_remotefamily
net Socket remoteFamily	R	net.Socket remoteFamily										http://nodejs.org/api/all.html#all_net socket_remotefamily
net.Socket.remotePort	A										<section class="prog__container">    The numeric representation of the remote port. For example,\n  80   or   21  .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_remoteport
net.Socket remotePort	R	net.Socket.remotePort										http://nodejs.org/api/all.html#all_net.socket_remoteport
net Socket remotePort	R	net.Socket remotePort										http://nodejs.org/api/all.html#all_net socket_remoteport
net.Socket.close	A										<section class="prog__container">    Emitted once the socket is fully closed. The argument   had_error   is a boolean\nwhich says if the socket was closed due to a transmission error.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_close
net.Socket close	R	net.Socket.close										http://nodejs.org/api/all.html#all_net.socket_close
net Socket close	R	net.Socket close										http://nodejs.org/api/all.html#all_net socket_close
net.Socket.connect	A										<section class="prog__container">    Emitted when a socket connection is successfully established.\nSee     connect()    .  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_connect
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect
net.Socket.data	A										<section class="prog__container">    Emitted when data is received.  The argument   data   will be a   Buffer   or\n  String  .  Encoding of data is set by   socket.setEncoding()  .\n(See the   Readable Stream   section for more information.)  \n  Note that the   data will be lost   if there is no listener when a   Socket  \nemits a   &#39;data&#39;   event.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_data
net.Socket data	R	net.Socket.data										http://nodejs.org/api/all.html#all_net.socket_data
net Socket data	R	net.Socket data										http://nodejs.org/api/all.html#all_net socket_data
net.Socket.drain	A										<section class="prog__container">    Emitted when the write buffer becomes empty. Can be used to throttle uploads.  \n  See also: the return values of   socket.write()    \n  </section>	http://nodejs.org/api/all.html#all_net.socket_drain
net.Socket drain	R	net.Socket.drain										http://nodejs.org/api/all.html#all_net.socket_drain
net Socket drain	R	net.Socket drain										http://nodejs.org/api/all.html#all_net socket_drain
net.Socket.end	A										<section class="prog__container">    Emitted when the other end of the socket sends a FIN packet.  \n  By default (  allowHalfOpen == false  ) the socket will destroy its file\ndescriptor  once it has written out its pending write queue.  However, by\nsetting   allowHalfOpen == true   the socket will not automatically   end()  \nits side allowing the user to write arbitrary amounts of data, with the\ncaveat that the user is required to   end()   their side now.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_end
net.Socket end	R	net.Socket.end										http://nodejs.org/api/all.html#all_net.socket_end
net Socket end	R	net.Socket end										http://nodejs.org/api/all.html#all_net socket_end
net.Socket.error	A										<section class="prog__container">    Emitted when an error occurs.  The   &#39;close&#39;   event will be called directly\nfollowing this event.  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_error
net.Socket error	R	net.Socket.error										http://nodejs.org/api/all.html#all_net.socket_error
net Socket error	R	net.Socket error										http://nodejs.org/api/all.html#all_net socket_error
net.Socket.lookup	A										<section class="prog__container">    Emitted after resolving the hostname but before connecting.\nNot applicable to UNIX sockets.  \n  \n    err   {Error|Null} The error object.  See     dns.lookup()    .  \n    address   {String} The IP address.  \n    family   {String|Null} The address type.  See     dns.lookup()    .  \n    host   {String} The hostname.  \n  \n  </section>	http://nodejs.org/api/all.html#all_net.socket_lookup
net.Socket lookup	R	net.Socket.lookup										http://nodejs.org/api/all.html#all_net.socket_lookup
net Socket lookup	R	net.Socket lookup										http://nodejs.org/api/all.html#all_net socket_lookup
net.Socket.timeout	A										<section class="prog__container">    Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.  \n  See also:     socket.setTimeout()      \n  </section>	http://nodejs.org/api/all.html#all_net.socket_timeout
net.Socket timeout	R	net.Socket.timeout										http://nodejs.org/api/all.html#all_net.socket_timeout
net Socket timeout	R	net.Socket timeout										http://nodejs.org/api/all.html#all_net socket_timeout
os	A										<section class="prog__container">    The   os   module provides a number of operating system-related utility methods.\nIt can be accessed using:  \n    const os = require(&#39;os&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_os
os	A										<section class="prog__container">    The   os   module provides a number of operating system-related utility methods.\nIt can be accessed using:  \n    const os = require(&#39;os&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_os
os.arch	A										<section class="prog__container">    The   os.arch()   method returns a string identifying the operating system CPU\narchitecture   for which the Node.js binary was compiled  .  \n  The current possible values are:   &#39;arm&#39;  ,   &#39;arm64&#39;  ,   &#39;ia32&#39;  ,   &#39;mips&#39;  ,\n  &#39;mipsel&#39;  ,   &#39;ppc&#39;  ,   &#39;ppc64&#39;  ,   &#39;s390&#39;  ,   &#39;s390x&#39;  ,   &#39;x32&#39;  ,   &#39;x64&#39;  ,  and\n  &#39;x86&#39;  .  \n  Equivalent to     process.arch    .  \n  <pre><code>os.arch()</code></pre></section>	http://nodejs.org/api/all.html#all_os_arch
os arch	R	os.arch										http://nodejs.org/api/all.html#all_os_arch
os.cpus	A										<section class="prog__container">    The   os.cpus()   method returns an array of objects containing information about\neach CPU/core installed.  \n  The properties included on each object include:  \n  \n    model   {String}  \n    speed   {number} (in MHz)  \n    times   {Object}  \n    user   {number} The number of milliseconds the CPU has spent in user mode.  \n    nice   {number} The number of milliseconds the CPU has spent in nice mode.  \n    sys   {number} The number of milliseconds the CPU has spent in sys mode.  \n    idle   {number} The number of milliseconds the CPU has spent in idle mode.  \n    irq   {number} The number of milliseconds the CPU has spent in irq mode.  \n  \n  \n  \n  For example:  \n    [\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 511580,\n      nice: 20,\n      sys: 40900,\n      idle: 1070842510,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 291660,\n      nice: 0,\n      sys: 34360,\n      idle: 1070888000,\n      irq: 10\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 308260,\n      nice: 0,\n      sys: 55410,\n      idle: 1071129970,\n      irq: 880\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 266450,\n      nice: 1480,\n      sys: 34920,\n      idle: 1072572010,\n      irq: 30\n    }\n  }\n]\n    \n    Note  : Because   nice   values are UNIX-specific, on Windows the   nice   values of\nall processors are always 0.  \n  <pre><code>os.cpus()</code></pre></section>	http://nodejs.org/api/all.html#all_os_cpus
os cpus	R	os.cpus										http://nodejs.org/api/all.html#all_os_cpus
os.endianness	A										<section class="prog__container">    The   os.endianness()   method returns a string identifying the endianness of the\nCPU   for which the Node.js binary was compiled  .  \n  Possible values are:  \n  \n    &#39;BE&#39;   for big endian  \n    &#39;LE&#39;   for little endian.  \n  \n  <pre><code>os.endianness()</code></pre></section>	http://nodejs.org/api/all.html#all_os_endianness
os endianness	R	os.endianness										http://nodejs.org/api/all.html#all_os_endianness
os.freemem	A										<section class="prog__container">    The   os.freemem()   method returns the amount of free system memory in bytes as\nan integer.  \n  <pre><code>os.freemem()</code></pre></section>	http://nodejs.org/api/all.html#all_os_freemem
os freemem	R	os.freemem										http://nodejs.org/api/all.html#all_os_freemem
os.homedir	A										<section class="prog__container">    The   os.homedir()   method returns the home directory of the current user as a\nstring.  \n  <pre><code>os.homedir()</code></pre></section>	http://nodejs.org/api/all.html#all_os_homedir
os homedir	R	os.homedir										http://nodejs.org/api/all.html#all_os_homedir
os.hostname	A										<section class="prog__container">    The   os.hostname()   method returns the hostname of the operating system as a\nstring.  \n  <pre><code>os.hostname()</code></pre></section>	http://nodejs.org/api/all.html#all_os_hostname
os hostname	R	os.hostname										http://nodejs.org/api/all.html#all_os_hostname
os.loadavg	A										<section class="prog__container">    The   os.loadavg()   method returns an array containing the 1, 5, and 15 minute\nload averages.  \n  The load average is a measure of system activity, calculated by the operating\nsystem and expressed as a fractional number.  As a rule of thumb, the load\naverage should ideally be less than the number of logical CPUs in the system.  \n  The load average is a UNIX-specific concept with no real equivalent on\nWindows platforms. On Windows, the return value is always   [0, 0, 0]  .  \n  <pre><code>os.loadavg()</code></pre></section>	http://nodejs.org/api/all.html#all_os_loadavg
os loadavg	R	os.loadavg										http://nodejs.org/api/all.html#all_os_loadavg
os.networkInterfaces	A										<section class="prog__container">    The   os.networkInterfaces()   method returns an object containing only network\ninterfaces that have been assigned a network address.  \n  Each key on the returned object identifies a network interface. The associated\nvalue is an array of objects that each describe an assigned network address.  \n  The properties available on the assigned network address object include:  \n  \n    address   {String} The assigned IPv4 or IPv6 address  \n    netmask   {String} The IPv4 or IPv6 network mask  \n    family   {String} Either   IPv4   or   IPv6    \n    mac   {String} The MAC address of the network interface  \n    internal   {boolean}   true   if the network interface is a loopback or\nsimilar interface that is not remotely accessible; otherwise   false    \n    scopeid   {number} The numeric IPv6 scope ID (only specified when   family  \nis   IPv6  )  \n  \n    {\n  lo: [\n    {\n      address: &#39;127.0.0.1&#39;,\n      netmask: &#39;255.0.0.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true\n    },\n    {\n      address: &#39;::1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true\n    }\n  ],\n  eth0: [\n    {\n      address: &#39;192.168.1.108&#39;,\n      netmask: &#39;255.255.255.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false\n    },\n    {\n      address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff::&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false\n    }\n  ]\n}\n    \n  <pre><code>os.networkInterfaces()</code></pre></section>	http://nodejs.org/api/all.html#all_os_networkinterfaces
os networkInterfaces	R	os.networkInterfaces										http://nodejs.org/api/all.html#all_os_networkinterfaces
os.platform	A										<section class="prog__container">    The   os.platform()   method returns a string identifying the operating system\nplatform as set during compile time of Node.js.  \n  Currently possible values are:  \n  \n    &#39;aix&#39;    \n    &#39;darwin&#39;    \n    &#39;freebsd&#39;    \n    &#39;linux&#39;    \n    &#39;openbsd&#39;    \n    &#39;sunos&#39;    \n    &#39;win32&#39;    \n  \n  Equivalent to     process.platform    .  \n    Note  : The value   &#39;android&#39;   may also be returned if the Node.js is built on\nthe Android operating system. However, Android support in Node.js is considered\nto be experimental at this time.  \n  <pre><code>os.platform()</code></pre></section>	http://nodejs.org/api/all.html#all_os_platform
os platform	R	os.platform										http://nodejs.org/api/all.html#all_os_platform
os.release	A										<section class="prog__container">    The   os.release()   method returns a string identifying the operating system\nrelease.  \n    Note  : On POSIX systems, the operating system release is determined by calling\nuname(3). On Windows,   GetVersionExW()   is used. Please see\n  https://en.wikipedia.org/wiki/Uname#Examples   for more information.  \n  <pre><code>os.release()</code></pre></section>	http://nodejs.org/api/all.html#all_os_release
os release	R	os.release										http://nodejs.org/api/all.html#all_os_release
os.tmpdir	A										<section class="prog__container">    The   os.tmpdir()   method returns a string specifying the operating system&#39;s\ndefault directory for temporary files.  \n  <pre><code>os.tmpdir()</code></pre></section>	http://nodejs.org/api/all.html#all_os_tmpdir
os tmpdir	R	os.tmpdir										http://nodejs.org/api/all.html#all_os_tmpdir
os.totalmem	A										<section class="prog__container">    The   os.totalmem()   method returns the total amount of system memory in bytes\nas an integer.  \n  <pre><code>os.totalmem()</code></pre></section>	http://nodejs.org/api/all.html#all_os_totalmem
os totalmem	R	os.totalmem										http://nodejs.org/api/all.html#all_os_totalmem
os.type	A										<section class="prog__container">    The   os.type()   method returns a string identifying the operating system name\nas returned by uname(3). For example   &#39;Linux&#39;   on Linux,   &#39;Darwin&#39;   on OS X and\n  &#39;Windows_NT&#39;   on Windows.  \n  Please see   https://en.wikipedia.org/wiki/Uname#Examples   for additional\ninformation about the output of running uname(3) on various operating systems.  \n  <pre><code>os.type()</code></pre></section>	http://nodejs.org/api/all.html#all_os_type
os type	R	os.type										http://nodejs.org/api/all.html#all_os_type
os.uptime	A										<section class="prog__container">    The   os.uptime()   method returns the system uptime in number of seconds.  \n    Note  : Within Node.js&#39; internals, this number is represented as a   double  .\nHowever, fractional seconds are not returned and the value can typically be\ntreated as an integer.  \n  <pre><code>os.uptime()</code></pre></section>	http://nodejs.org/api/all.html#all_os_uptime
os uptime	R	os.uptime										http://nodejs.org/api/all.html#all_os_uptime
os.userInfo	A										<section class="prog__container">    The   os.userInfo()   method returns information about the currently effective\nuser -- on POSIX platforms, this is typically a subset of the password file. The\nreturned object includes the   username  ,   uid  ,   gid  ,   shell  , and   homedir  .\nOn Windows, the   uid   and   gid   fields are   -1  , and   shell   is   null  .  \n  The value of   homedir   returned by   os.userInfo()   is provided by the operating\nsystem. This differs from the result of   os.homedir()  , which queries several\nenvironment variables for the home directory before falling back to the\noperating system response.  \n  <pre><code>os.userInfo([options])</code></pre></section>	http://nodejs.org/api/all.html#all_os_userinfo_options
os userInfo	R	os.userInfo										http://nodejs.org/api/all.html#all_os_userinfo_options
os.EOL	A										<section class="prog__container">    A string constant defining the operating system-specific end-of-line marker:  \n  \n    \n   on POSIX  \n    \r\n   on Windows  \n  \n  </section>	http://nodejs.org/api/all.html#all_os_eol
os EOL	R	os.EOL										http://nodejs.org/api/all.html#all_os_eol
os.constants	A										<section class="prog__container">    Returns an object containing commonly used operating system specific constants\nfor error codes, process signals, and so on. The specific constants currently\ndefined are described in   OS Constants  .  \n  </section>	http://nodejs.org/api/all.html#all_os_constants
os constants	R	os.constants										http://nodejs.org/api/all.html#all_os_constants
path	A										<section class="prog__container">    The   path   module provides utilities for working with file and directory paths.\nIt can be accessed using:  \n    const path = require(&#39;path&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_path
path	A										<section class="prog__container">    The   path   module provides utilities for working with file and directory paths.\nIt can be accessed using:  \n    const path = require(&#39;path&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_path
path.basename	A										<section class="prog__container">    The   path.basename()   methods returns the last portion of a   path  , similar to\nthe Unix   basename   command.  \n  For example:  \n    path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;)\n// Returns: &#39;quux.html&#39;\n\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;)\n// Returns: &#39;quux&#39;\n    \n  A     TypeError     is thrown if   path   is not a string or if   ext   is given\nand is not a string.  \n  <pre><code>path.basename(path[, ext])</code></pre></section>	http://nodejs.org/api/all.html#all_path_basename_path_ext
path basename	R	path.basename										http://nodejs.org/api/all.html#all_path_basename_path_ext
path.dirname	A										<section class="prog__container">    The   path.dirname()   method returns the directory name of a   path  , similar to\nthe Unix   dirname   command.  \n  For example:  \n    path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n    \n  A     TypeError     is thrown if   path   is not a string.  \n  <pre><code>path.dirname(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_dirname_path
path dirname	R	path.dirname										http://nodejs.org/api/all.html#all_path_dirname_path
path.extname	A										<section class="prog__container">    The   path.extname()   method returns the extension of the   path  , from the last\noccurrence of the   .   (period) character to end of string in the last portion of\nthe   path  .  If there is no   .   in the last portion of the   path  , or if the\nfirst character of the basename of   path   (see   path.basename()  ) is   .  , then\nan empty string is returned.  \n  For example:  \n    path.extname(&#39;index.html&#39;)\n// Returns: &#39;.html&#39;\n\npath.extname(&#39;index.coffee.md&#39;)\n// Returns: &#39;.md&#39;\n\npath.extname(&#39;index.&#39;)\n// Returns: &#39;.&#39;\n\npath.extname(&#39;index&#39;)\n// Returns: &#39;&#39;\n\npath.extname(&#39;.index&#39;)\n// Returns: &#39;&#39;\n    \n  A     TypeError     is thrown if   path   is not a string.  \n  <pre><code>path.extname(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_extname_path
path extname	R	path.extname										http://nodejs.org/api/all.html#all_path_extname_path
path.format	A										<section class="prog__container">    The   path.format()   method returns a path string from an object. This is the\nopposite of     path.parse()    .  \n  The following process is used when constructing the path string:  \n  \n    output   is set to an empty string.  \n  If   pathObject.dir   is specified,   pathObject.dir   is appended to   output  \nfollowed by the value of   path.sep  ;  \n  Otherwise, if   pathObject.root   is specified,   pathObject.root   is appended\nto   output  .  \n  If   pathObject.base   is specified,   pathObject.base   is appended to   output  ;  \n  Otherwise:  \n  If   pathObject.name   is specified,   pathObject.name   is appended to   output    \n  If   pathObject.ext   is specified,   pathObject.ext   is appended to   output  .  \n  \n  \n  Return   output    \n  \n  For example, on POSIX:  \n    // If `dir` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned.\npath.format({\n  dir: &#39;/home/user/dir&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;/home/user/dir/file.txt&#39;\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included.\npath.format({\n  root: &#39;/&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;/file.txt&#39;\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: &#39;/&#39;,\n  name: &#39;file&#39;,\n  ext: &#39;.txt&#39;\n});\n// Returns: &#39;/file.txt&#39;\n\n// `base` will be returned if `dir` or `root` are not provided.\npath.format({\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;file.txt&#39;\n    \n  On Windows:  \n    path.format({\n    root : &quot;C:\\&quot;,\n    dir : &quot;C:\\path\\dir&quot;,\n    base : &quot;file.txt&quot;,\n    ext : &quot;.txt&quot;,\n    name : &quot;file&quot;\n});\n// Returns: &#39;C:\\path\\dir\\file.txt&#39;\n    \n  <pre><code>path.format(pathObject)</code></pre></section>	http://nodejs.org/api/all.html#all_path_format_pathobject
path format	R	path.format										http://nodejs.org/api/all.html#all_path_format_pathobject
path.isAbsolute	A										<section class="prog__container">    The   path.isAbsolute()   method determines if   path   is an absolute path.  \n  If the given   path   is a zero-length string,   false   will be returned.  \n  For example on POSIX:  \n    path.isAbsolute(&#39;/foo/bar&#39;) // true\npath.isAbsolute(&#39;/baz/..&#39;)  // true\npath.isAbsolute(&#39;qux/&#39;)     // false\npath.isAbsolute(&#39;.&#39;)        // false\n    \n  On Windows:  \n    path.isAbsolute(&#39;//server&#39;)    // true\npath.isAbsolute(&#39;\\\\server&#39;)  // true\npath.isAbsolute(&#39;C:/foo/..&#39;)   // true\npath.isAbsolute(&#39;C:\\foo\\..&#39;) // true\npath.isAbsolute(&#39;bar\\baz&#39;)    // false\npath.isAbsolute(&#39;bar/baz&#39;)     // false\npath.isAbsolute(&#39;.&#39;)           // false\n    \n  A     TypeError     is thrown if   path   is not a string.  \n  <pre><code>path.isAbsolute(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_isabsolute_path
path isAbsolute	R	path.isAbsolute										http://nodejs.org/api/all.html#all_path_isabsolute_path
path.join	A										<section class="prog__container">    The   path.join()   method joins all given   path   segments together using the\nplatform specific separator as a delimiter, then normalizes the resulting path.  \n  Zero-length   path   segments are ignored. If the joined path string is a\nzero-length string then   &#39;.&#39;   will be returned, representing the current\nworking directory.  \n  For example:  \n    path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n// throws TypeError: Arguments to path.join must be strings\n    \n  A     TypeError     is thrown if any of the path segments is not a string.  \n  <pre><code>path.join([...paths])</code></pre></section>	http://nodejs.org/api/all.html#all_path_join_...paths
path join	R	path.join										http://nodejs.org/api/all.html#all_path_join_...paths
path.normalize	A										<section class="prog__container">    The   path.normalize()   method normalizes the given   path  , resolving   &#39;..&#39;   and\n  &#39;.&#39;   segments.  \n  When multiple, sequential path segment separation characters are found (e.g.\n  /   on POSIX and   \   on Windows), they are replaced by a single instance of the\nplatform specific path segment separator. Trailing separators are preserved.  \n  If the   path   is a zero-length string,   &#39;.&#39;   is returned, representing the\ncurrent working directory.  \n  For example on POSIX:  \n    path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n    \n  On Windows:  \n    path.normalize(&#39;C:\\temp\\\\foo\\bar\\..\\&#39;);\n// Returns: &#39;C:\\temp\\foo\\&#39;\n    \n  A     TypeError     is thrown if   path   is not a string.  \n  <pre><code>path.normalize(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_normalize_path
path normalize	R	path.normalize										http://nodejs.org/api/all.html#all_path_normalize_path
path.parse	A										<section class="prog__container">    The   path.parse()   method returns an object whose properties represent\nsignificant elements of the   path  .  \n  The returned object will have the following properties:  \n  \n    root   {String}  \n    dir   {String}  \n    base   {String}  \n    ext   {String}  \n    name   {String}  \n  \n  For example on POSIX:  \n    path.parse(&#39;/home/user/dir/file.txt&#39;)\n// Returns:\n// {\n//    root : &quot;/&quot;,\n//    dir : &quot;/home/user/dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n    \n    ┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot;  /    home/user/dir / file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n    \n  On Windows:  \n    path.parse(&#39;C:\\path\\dir\\file.txt&#39;)\n// Returns:\n// {\n//    root : &quot;C:\\&quot;,\n//    dir : &quot;C:\\path\\dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n    \n    ┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot; C:\      path\dir   \ file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n    \n  A     TypeError     is thrown if   path   is not a string.  \n  <pre><code>path.parse(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_parse_path
path parse	R	path.parse										http://nodejs.org/api/all.html#all_path_parse_path
path.relative	A										<section class="prog__container">    The   path.relative()   method returns the relative path from   from   to   to  .\nIf   from   and   to   each resolve to the same path (after calling   path.resolve()  \non each), a zero-length string is returned.  \n  If a zero-length string is passed as   from   or   to  , the current working\ndirectory will be used instead of the zero-length strings.  \n  For example on POSIX:  \n    path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;)\n// Returns: &#39;../../impl/bbb&#39;\n    \n  On Windows:  \n    path.relative(&#39;C:\\orandea\\test\\aaa&#39;, &#39;C:\\orandea\\impl\\bbb&#39;)\n// Returns: &#39;..\\..\\impl\\bbb&#39;\n    \n  A     TypeError     is thrown if neither   from   nor   to   is a string.  \n  <pre><code>path.relative(from, to)</code></pre></section>	http://nodejs.org/api/all.html#all_path_relative_from_to
path relative	R	path.relative										http://nodejs.org/api/all.html#all_path_relative_from_to
path.resolve	A										<section class="prog__container">    The   path.resolve()   method resolves a sequence of paths or path segments into\nan absolute path.  \n  The given sequence of paths is processed from right to left, with each\nsubsequent   path   prepended until an absolute path is constructed.\nFor instance, given the sequence of path segments:   /foo  ,   /bar  ,   baz  ,\ncalling   path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;)   would return   /bar/baz  .  \n  If after processing all given   path   segments an absolute path has not yet\nbeen generated, the current working directory is used.  \n  The resulting path is normalized and trailing slashes are removed unless the\npath is resolved to the root directory.  \n  Zero-length   path   segments are ignored.  \n  If no   path   segments are passed,   path.resolve()   will return the absolute path\nof the current working directory.  \n  For example:  \n    path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\n// Returns: &#39;/foo/bar/baz&#39;\n\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\n// Returns: &#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\n// if the current working directory is /home/myself/node,\n// this returns &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n    \n  A     TypeError     is thrown if any of the arguments is not a string.  \n  <pre><code>path.resolve([...paths])</code></pre></section>	http://nodejs.org/api/all.html#all_path_resolve_...paths
path resolve	R	path.resolve										http://nodejs.org/api/all.html#all_path_resolve_...paths
path.delimiter	A										<section class="prog__container">    Provides the platform-specific path delimiter:  \n  \n    ;   for Windows  \n    :   for POSIX  \n  \n  For example, on POSIX:  \n    console.log(process.env.PATH)\n// Prints: &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]\n    \n  On Windows:  \n    console.log(process.env.PATH)\n// Prints: &#39;C:\Windows\system32;C:\Windows;C:\Program Files\node\&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&#39;C:\\Windows\\system32&#39;, &#39;C:\\Windows&#39;, &#39;C:\\Program Files\\node\\&#39;]\n    \n  </section>	http://nodejs.org/api/all.html#all_path_delimiter
path delimiter	R	path.delimiter										http://nodejs.org/api/all.html#all_path_delimiter
path.posix	A										<section class="prog__container">    The   path.posix   property provides access to POSIX specific implementations\nof the   path   methods.  \n  </section>	http://nodejs.org/api/all.html#all_path_posix
path posix	R	path.posix										http://nodejs.org/api/all.html#all_path_posix
path.sep	A										<section class="prog__container">    Provides the platform-specific path segment separator:  \n  \n    \   on Windows  \n    /   on POSIX  \n  \n  For example on POSIX:  \n    &#39;foo/bar/baz&#39;.split(path.sep)\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n    \n  On Windows:  \n    &#39;foo\\bar\\baz&#39;.split(path.sep)\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n    \n  </section>	http://nodejs.org/api/all.html#all_path_sep
path sep	R	path.sep										http://nodejs.org/api/all.html#all_path_sep
path.win32	A										<section class="prog__container">    The   path.win32   property provides access to Windows-specific implementations\nof the   path   methods.  \n    Note  : On Windows, both the forward slash (  /  ) and backward slash (  \  )\ncharacters are accepted as path delimiters; however, only the backward slash\n(  \  ) will be used in return values.  \n  \n  \n  </section>	http://nodejs.org/api/all.html#all_path_win32
path win32	R	path.win32										http://nodejs.org/api/all.html#all_path_win32
punycode	A										<section class="prog__container">      The version of the punycode module bundled in Node.js is being deprecated  .\nIn a future major version of Node.js this module will be removed. Users\ncurrently depending on the   punycode   module should switch to using the\nuserland-provided   Punycode.js   module instead.  \n  The   punycode   module is a bundled version of the   Punycode.js   module. It\ncan be accessed using:  \n    const punycode = require(&#39;punycode&#39;);\n    \n    Punycode   is a character encoding scheme defined by RFC 3492 that is\nprimarily intended for use in Internationalized Domain Names. Because host\nnames in URLs are limited to ASCII characters only, Domain Names that contain\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\nFor instance, the Japanese character that translates into the English word,\n  &#39;example&#39;   is   &#39;例&#39;  . The Internationalized Domain Name,   &#39;例.com&#39;   (equivalent\nto   &#39;example.com&#39;  ) is represented by Punycode as the ASCII string\n  &#39;xn--fsq.com&#39;  .  \n  The   punycode   module provides a simple implementation of the Punycode standard.  \n    Note  : The   punycode   module is a third-party dependency used by Node.js and\nmade available to developers as a convenience. Fixes or other modifications to\nthe module must be directed to the   Punycode.js   project.  \n  </section>	http://nodejs.org/api/all.html#all_punycode
punycode	A										<section class="prog__container">      The version of the punycode module bundled in Node.js is being deprecated  .\nIn a future major version of Node.js this module will be removed. Users\ncurrently depending on the   punycode   module should switch to using the\nuserland-provided   Punycode.js   module instead.  \n  The   punycode   module is a bundled version of the   Punycode.js   module. It\ncan be accessed using:  \n    const punycode = require(&#39;punycode&#39;);\n    \n    Punycode   is a character encoding scheme defined by RFC 3492 that is\nprimarily intended for use in Internationalized Domain Names. Because host\nnames in URLs are limited to ASCII characters only, Domain Names that contain\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\nFor instance, the Japanese character that translates into the English word,\n  &#39;example&#39;   is   &#39;例&#39;  . The Internationalized Domain Name,   &#39;例.com&#39;   (equivalent\nto   &#39;example.com&#39;  ) is represented by Punycode as the ASCII string\n  &#39;xn--fsq.com&#39;  .  \n  The   punycode   module provides a simple implementation of the Punycode standard.  \n    Note  : The   punycode   module is a third-party dependency used by Node.js and\nmade available to developers as a convenience. Fixes or other modifications to\nthe module must be directed to the   Punycode.js   project.  \n  </section>	http://nodejs.org/api/all.html#all_punycode
punycode.decode	A										<section class="prog__container">    The   punycode.decode()   method converts a   Punycode   string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.  \n    punycode.decode(&#39;maana-pta&#39;); // &#39;mañana&#39;\npunycode.decode(&#39;--dqo34k&#39;); // &#39;☃-⌘&#39;\n    \n  <pre><code>punycode.decode(string)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_decode_string
punycode decode	R	punycode.decode										http://nodejs.org/api/all.html#all_punycode_decode_string
punycode.encode	A										<section class="prog__container">    The   punycode.encode()   method converts a string of Unicode codepoints to a\n  Punycode   string of ASCII-only characters.  \n    punycode.encode(&#39;mañana&#39;); // &#39;maana-pta&#39;\npunycode.encode(&#39;☃-⌘&#39;); // &#39;--dqo34k&#39;\n    \n  <pre><code>punycode.encode(string)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_encode_string
punycode encode	R	punycode.encode										http://nodejs.org/api/all.html#all_punycode_encode_string
punycode.toASCII	A										<section class="prog__container">    The   punycode.toASCII()   method converts a Unicode string representing an\nInternationalized Domain Name to   Punycode  . Only the non-ASCII parts of the\ndomain name will be converted. Calling   punycode.toASCII()   on a string that\nalready only contains ASCII characters will have no effect.  \n    // encode domain names\npunycode.toASCII(&#39;mañana.com&#39;);  // &#39;xn--maana-pta.com&#39;\npunycode.toASCII(&#39;☃-⌘.com&#39;);   // &#39;xn----dqo34k.com&#39;\npunycode.toASCII(&#39;example.com&#39;); // &#39;example.com&#39;\n    \n  <pre><code>punycode.toASCII(domain)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_toascii_domain
punycode toASCII	R	punycode.toASCII										http://nodejs.org/api/all.html#all_punycode_toascii_domain
punycode.toUnicode	A										<section class="prog__container">    The   punycode.toUnicode()   method converts a string representing a domain name\ncontaining   Punycode   encoded characters into Unicode. Only the   Punycode  \nencoded parts of the domain name are be converted.  \n    // decode domain names\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); // &#39;mañana.com&#39;\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;);  // &#39;☃-⌘.com&#39;\npunycode.toUnicode(&#39;example.com&#39;);       // &#39;example.com&#39;\n    \n  <pre><code>punycode.toUnicode(domain)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_tounicode_domain
punycode toUnicode	R	punycode.toUnicode										http://nodejs.org/api/all.html#all_punycode_tounicode_domain
punycode.ucs2	A										<section class="prog__container"></section>	http://nodejs.org/api/all.html#all_punycode_ucs2
punycode ucs2	R	punycode.ucs2										http://nodejs.org/api/all.html#all_punycode_ucs2
punycode.version	A										<section class="prog__container">    Returns a string identifying the current   Punycode.js   version number.  \n  \n  \n  </section>	http://nodejs.org/api/all.html#all_punycode_version
punycode version	R	punycode.version										http://nodejs.org/api/all.html#all_punycode_version
querystring	A										<section class="prog__container">    The   querystring   module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:  \n    const querystring = require(&#39;querystring&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_querystring
querystring	A										<section class="prog__container">    The   querystring   module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:  \n    const querystring = require(&#39;querystring&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_querystring
querystring.escape	A										<section class="prog__container">    The   querystring.escape()   method performs URL percent-encoding on the given\n  str   in a manner that is optimized for the specific requirements of URL\nquery strings.  \n  The   querystring.escape()   method is used by   querystring.stringify()   and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement percent-encoding implementation if\nnecessary by assigning   querystring.escape   to an alternative function.  \n  <pre><code>querystring.escape(str)</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_escape_str
querystring escape	R	querystring.escape										http://nodejs.org/api/all.html#all_querystring_escape_str
querystring.parse	A										<section class="prog__container">    The   querystring.parse()   method parses a URL query string (  str  ) into a\ncollection of key and value pairs.  \n  For example, the query string   &#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;   is parsed into:  \n    {\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}\n    \n    Note  : The object returned by the   querystring.parse()   method   does not  \nprototypically extend from the JavaScript   Object  . This means that the\ntypical   Object   methods such as   obj.toString()  ,   obj.hasOwnProperty()  ,\nand others are not defined and   will not work  .  \n  By default, percent-encoded characters within the query string will be assumed\nto use UTF-8 encoding. If an alternative character encoding is used, then an\nalternative   decodeURIComponent   option will need to be specified as illustrated\nin the following example:  \n    // Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,\n  { decodeURIComponent: gbkDecodeURIComponent })\n    \n  <pre><code>querystring.parse(str[, sep[, eq[, options]]])</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_parse_str_sep_eq_options
querystring parse	R	querystring.parse										http://nodejs.org/api/all.html#all_querystring_parse_str_sep_eq_options
querystring.stringify	A										<section class="prog__container">    The   querystring.stringify()   method produces a URL query string from a\ngiven   obj   by iterating through the object&#39;s &quot;own properties&quot;.  \n  For example:  \n    querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\n// returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\n// returns &#39;foo:bar;baz:qux&#39;\n    \n  By default, characters requiring percent-encoding within the query string will\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\n  encodeURIComponent   option will need to be specified as illustrated in the\nfollowing example:  \n    // Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: &#39;中文&#39;, foo: &#39;bar&#39; }, null, null,\n  { encodeURIComponent: gbkEncodeURIComponent })\n    \n  <pre><code>querystring.stringify(obj[, sep[, eq[, options]]])</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_stringify_obj_sep_eq_options
querystring stringify	R	querystring.stringify										http://nodejs.org/api/all.html#all_querystring_stringify_obj_sep_eq_options
querystring.unescape	A										<section class="prog__container">    The   querystring.unescape()   method performs decoding of URL percent-encoded\ncharacters on the given   str  .  \n  The   querystring.unescape()   method is used by   querystring.parse()   and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement decoding implementation if\nnecessary by assigning   querystring.unescape   to an alternative function.  \n  By default, the   querystring.unescape()   method will attempt to use the\nJavaScript built-in   decodeURIComponent()   method to decode. If that fails,\na safer equivalent that does not throw on malformed URLs will be used.  \n  \n  \n  <pre><code>querystring.unescape(str)</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_unescape_str
querystring unescape	R	querystring.unescape										http://nodejs.org/api/all.html#all_querystring_unescape_str
readline	A										<section class="prog__container">    The   readline   module provides an interface for reading data from a   Readable  \nstream (such as     process.stdin    ) one line at a time. It can be accessed using:  \n    const readline = require(&#39;readline&#39;);\n    \n  The following simple example illustrates the basic use of the   readline   module.  \n    const readline = require(&#39;readline&#39;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n    \n    Note   Once this code is invoked, the Node.js application will not\nterminate until the   readline.Interface   is closed because the interface\nwaits for data to be received on the   input   stream.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_readline
readline	A										<section class="prog__container">    The   readline   module provides an interface for reading data from a   Readable  \nstream (such as     process.stdin    ) one line at a time. It can be accessed using:  \n    const readline = require(&#39;readline&#39;);\n    \n  The following simple example illustrates the basic use of the   readline   module.  \n    const readline = require(&#39;readline&#39;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n    \n    Note   Once this code is invoked, the Node.js application will not\nterminate until the   readline.Interface   is closed because the interface\nwaits for data to be received on the   input   stream.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_readline
readline.clearLine	A										<section class="prog__container">    The   readline.clearLine()   method clears current line of given   TTY   stream\nin a specified direction identified by   dir  .  \n  <pre><code>readline.clearLine(stream, dir)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_clearline_stream_dir
readline clearLine	R	readline.clearLine										http://nodejs.org/api/all.html#all_readline_clearline_stream_dir
readline.clearScreenDown	A										<section class="prog__container">    The   readline.clearScreenDown()   method clears the given   TTY   stream from\nthe current position of the cursor down.  \n  <pre><code>readline.clearScreenDown(stream)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_clearscreendown_stream
readline clearScreenDown	R	readline.clearScreenDown										http://nodejs.org/api/all.html#all_readline_clearscreendown_stream
readline.createInterface	A										<section class="prog__container">    The   readline.createInterface()   method creates a new   readline.Interface  \ninstance.  \n  For example:  \n    const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n    \n  Once the   readline.Interface   instance is created, the most common case is to\nlisten for the   &#39;line&#39;   event:  \n    rl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n    \n  If   terminal   is   true   for this instance then the   output   stream will get\nthe best compatibility if it defines an   output.columns   property and emits\na   &#39;resize&#39;   event on the   output   if or when the columns ever change\n(    process.stdout     does this automatically when it is a TTY).  \n  <pre><code>readline.createInterface(options)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_createinterface_options
readline createInterface	R	readline.createInterface										http://nodejs.org/api/all.html#all_readline_createinterface_options
readline.cursorTo	A										<section class="prog__container">    The   readline.cursorTo()   method moves cursor to the specified position in a\ngiven   TTY     stream  .  \n  <pre><code>readline.cursorTo(stream, x, y)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_cursorto_stream_x_y
readline cursorTo	R	readline.cursorTo										http://nodejs.org/api/all.html#all_readline_cursorto_stream_x_y
readline.emitKeypressEvents	A										<section class="prog__container">    The   readline.emitKeypressEvents()   method causes the given   Writable  \n  stream   to begin emitting   &#39;keypress&#39;   events corresponding to received input.  \n  Optionally,   interface   specifies a   readline.Interface   instance for which\nautocompletion is disabled when copy-pasted input is detected.  \n  If the   stream   is a   TTY  , then it must be in raw mode.  \n    readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n    \n  <pre><code>readline.emitKeypressEvents(stream[, interface])</code></pre></section>	http://nodejs.org/api/all.html#all_readline_emitkeypressevents_stream_interface
readline emitKeypressEvents	R	readline.emitKeypressEvents										http://nodejs.org/api/all.html#all_readline_emitkeypressevents_stream_interface
readline.moveCursor	A										<section class="prog__container">    The   readline.moveCursor()   method moves the cursor   relative   to its current\nposition in a given   TTY     stream  .  \n  Example: Tiny CLI  \n  The following example illustrates the use of   readline.Interface   class to\nimplement a small command-line interface:  \n    const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: &#39;OHAI&gt; &#39;\n});\n\nrl.prompt();\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  switch(line.trim()) {\n    case &#39;hello&#39;:\n      console.log(&#39;world!&#39;);\n      break;\n    default:\n      console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);\n      break;\n  }\n  rl.prompt();\n}).on(&#39;close&#39;, () =&gt; {\n  console.log(&#39;Have a great day!&#39;);\n  process.exit(0);\n});\n    \n  Example: Read File Stream Line-by-Line  \n  A common use case for   readline   is to consume input from a filesystem\n  Readable   stream one line at a time, as illustrated in the following\nexample:  \n    const readline = require(&#39;readline&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream(&#39;sample.txt&#39;)\n});\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Line from file: ${line}`);\n});\n    \n  \n  \n  <pre><code>readline.moveCursor(stream, dx, dy)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_movecursor_stream_dx_dy
readline moveCursor	R	readline.moveCursor										http://nodejs.org/api/all.html#all_readline_movecursor_stream_dx_dy
Interface	A										<section class="prog__container">    Instances of the   readline.Interface   class are constructed using the\n  readline.createInterface()   method. Every instance is associated with a\nsingle   input     Readable   stream and a single   output     Writable   stream.\nThe   output   stream is used to print prompts for user input that arrives on,\nand is read from, the   input   stream.  \n  </section>	http://nodejs.org/api/all.html#all_interface
Interface	A										<section class="prog__container">    Instances of the   readline.Interface   class are constructed using the\n  readline.createInterface()   method. Every instance is associated with a\nsingle   input     Readable   stream and a single   output     Writable   stream.\nThe   output   stream is used to print prompts for user input that arrives on,\nand is read from, the   input   stream.  \n  </section>	http://nodejs.org/api/all.html#all_interface
Interface.close	A										<section class="prog__container">    The   rl.close()   method closes the   readline.Interface   instance and\nrelinquishes control over the   input   and   output   streams. When called,\nthe   &#39;close&#39;   event will be emitted.  \n  <pre><code>rl.close()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_close
Interface close	R	Interface.close										http://nodejs.org/api/all.html#all_interface_close
Interface.pause	A										<section class="prog__container">    The   rl.pause()   method pauses the   input   stream, allowing it to be resumed\nlater if necessary.  \n  Calling   rl.pause()   does not immediately pause other events (including\n  &#39;line&#39;  ) from being emitted by the   readline.Interface   instance.  \n  <pre><code>rl.pause()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_pause
Interface pause	R	Interface.pause										http://nodejs.org/api/all.html#all_interface_pause
Interface.prompt	A										<section class="prog__container">    The   rl.prompt()   method writes the   readline.Interface   instances configured\n  prompt   to a new line in   output   in order to provide a user with a new\nlocation at which to provide input.  \n  When called,   rl.prompt()   will resume the   input   stream if it has been\npaused.  \n  If the   readline.Interface   was created with   output   set to   null   or\n  undefined   the prompt is not written.  \n  <pre><code>rl.prompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#all_interface_prompt_preservecursor
Interface prompt	R	Interface.prompt										http://nodejs.org/api/all.html#all_interface_prompt_preservecursor
Interface.question	A										<section class="prog__container">    The   rl.question()   method displays the   query   by writing it to the   output  ,\nwaits for user input to be provided on   input  , then invokes the   callback  \nfunction passing the provided input as the first argument.  \n  When called,   rl.question()   will resume the   input   stream if it has been\npaused.  \n  If the   readline.Interface   was created with   output   set to   null   or\n  undefined   the   query   is not written.  \n  Example usage:  \n    rl.question(&#39;What is your favorite food?&#39;, (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n    \n    Note  : The   callback   function passed to   rl.question()   does not follow the\ntypical pattern of accepting an   Error   object or   null   as the first argument.\nThe   callback   is called with the provided answer as the only argument.  \n  <pre><code>rl.question(query, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_interface_question_query_callback
Interface question	R	Interface.question										http://nodejs.org/api/all.html#all_interface_question_query_callback
Interface.resume	A										<section class="prog__container">    The   rl.resume()   method resumes the   input   stream if it has been paused.  \n  <pre><code>rl.resume()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_resume
Interface resume	R	Interface.resume										http://nodejs.org/api/all.html#all_interface_resume
Interface.setPrompt	A										<section class="prog__container">    The   rl.setPrompt()   method sets the prompt that will be written to   output  \nwhenever   rl.prompt()   is called.  \n  <pre><code>rl.setPrompt(prompt)</code></pre></section>	http://nodejs.org/api/all.html#all_interface_setprompt_prompt
Interface setPrompt	R	Interface.setPrompt										http://nodejs.org/api/all.html#all_interface_setprompt_prompt
Interface.write	A										<section class="prog__container">    The   rl.write()   method will write either   data   or a key sequence  identified\nby   key   to the   output  . The   key   argument is supported only if   output   is\na   TTY   text terminal.  \n  If   key   is specified,   data   is ignored.  \n  When called,   rl.write()   will resume the   input   stream if it has been\npaused.  \n  If the   readline.Interface   was created with   output   set to   null   or\n  undefined   the   data   and   key   are not written.  \n  For example:  \n    rl.write(&#39;Delete this!&#39;);\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: &#39;u&#39;});\n    \n    Note  : The   rl.write()   method will write the data to the   readline  \nInterface&#39;s   input     as if it were provided by the user  .  \n  <pre><code>rl.write(data[, key])</code></pre></section>	http://nodejs.org/api/all.html#all_interface_write_data_key
Interface write	R	Interface.write										http://nodejs.org/api/all.html#all_interface_write_data_key
Interface.close	A										<section class="prog__container">    The   &#39;close&#39;   event is emitted when one of the following occur:  \n  \n  The   rl.close()   method is called and the   readline.Interface   instance has\nrelinquished control over the   input   and   output   streams;  \n  The   input   stream receives its   &#39;end&#39;   event;  \n  The   input   stream receives   &lt;ctrl&gt;-D   to signal end-of-transmission (EOT);  \n  The   input   stream receives   &lt;ctrl&gt;-C   to signal   SIGINT   and there is no\n  SIGINT   event listener registered on the   readline.Interface   instance.  \n  \n  The listener function is called without passing any arguments.  \n  The   readline.Interface   instance should be considered to be &quot;finished&quot; once\nthe   &#39;close&#39;   event is emitted.  \n  </section>	http://nodejs.org/api/all.html#all_interface_close
Interface close	R	Interface.close										http://nodejs.org/api/all.html#all_interface_close
Interface.line	A										<section class="prog__container">    The   &#39;line&#39;   event is emitted whenever the   input   stream receives an\nend-of-line input (  \n  ,   \r  , or   \r\n  ). This usually occurs when the user\npresses the   &lt;Enter&gt;  , or   &lt;Return&gt;   keys.  \n  The listener function is called with a string containing the single line of\nreceived input.  \n  For example:  \n    rl.on(&#39;line&#39;, (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_interface_line
Interface line	R	Interface.line										http://nodejs.org/api/all.html#all_interface_line
Interface.pause	A										<section class="prog__container">    The   &#39;pause&#39;   event is emitted when one of the following occur:  \n  \n  The   input   stream is paused.  \n  The   input   stream is not paused and receives the   SIGCONT   event. (See\nevents     SIGTSTP     and     SIGCONT    )  \n  \n  The listener function is called without passing any arguments.  \n  For example:  \n    rl.on(&#39;pause&#39;, () =&gt; {\n  console.log(&#39;Readline paused.&#39;);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_interface_pause
Interface pause	R	Interface.pause										http://nodejs.org/api/all.html#all_interface_pause
Interface.resume	A										<section class="prog__container">    The   &#39;resume&#39;   event is emitted whenever the   input   stream is resumed.  \n  The listener function is called without passing any arguments.  \n    rl.on(&#39;resume&#39;, () =&gt; {\n  console.log(&#39;Readline resumed.&#39;);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_interface_resume
Interface resume	R	Interface.resume										http://nodejs.org/api/all.html#all_interface_resume
Interface.SIGCONT	A										<section class="prog__container">    The   &#39;SIGCONT&#39;   event is emitted when a Node.js process previously moved into\nthe background using   &lt;ctrl&gt;-Z   (i.e.   SIGTSTP  ) is then brought back to the\nforeground using fg(1).  \n  If the   input   stream was paused   before   the   SIGTSTP   request, this event will\nnot be emitted.  \n  The listener function is invoked without passing any arguments.  \n  For example:  \n    rl.on(&#39;SIGCONT&#39;, () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n    \n    Note  : The   &#39;SIGCONT&#39;   event is   not   supported on Windows.  \n  </section>	http://nodejs.org/api/all.html#all_interface_sigcont
Interface SIGCONT	R	Interface.SIGCONT										http://nodejs.org/api/all.html#all_interface_sigcont
Interface.SIGINT	A										<section class="prog__container">    The   &#39;SIGINT&#39;   event is emitted whenever the   input   stream receives a\n  &lt;ctrl&gt;-C   input, known typically as   SIGINT  . If there are no   &#39;SIGINT&#39;   event\nlisteners registered when the   input   stream receives a   SIGINT  , the   &#39;pause&#39;  \nevent will be emitted.  \n  The listener function is invoked without passing any arguments.  \n  For example:  \n    rl.on(&#39;SIGINT&#39;, () =&gt; {\n  rl.question(&#39;Are you sure you want to exit?&#39;, (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_interface_sigint
Interface SIGINT	R	Interface.SIGINT										http://nodejs.org/api/all.html#all_interface_sigint
Interface.SIGTSTP	A										<section class="prog__container">    The   &#39;SIGTSTP&#39;   event is emitted when the   input   stream receives a   &lt;ctrl&gt;-Z  \ninput, typically known as   SIGTSTP  . If there are no   SIGTSTP   event listeners\nregistered when the   input   stream receives a   SIGTSTP  , the Node.js process\nwill be sent to the background.  \n  When the program is resumed using fg(1), the   &#39;pause&#39;   and   SIGCONT   events\nwill be emitted. These can be used to resume the   input   stream.  \n  The   &#39;pause&#39;   and   &#39;SIGCONT&#39;   events will not be emitted if the   input   was\npaused before the process was sent to the background.  \n  The listener function is invoked without passing any arguments.  \n  For example:  \n    rl.on(&#39;SIGTSTP&#39;, () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&#39;Caught SIGTSTP.&#39;);\n});\n    \n    Note  : The   &#39;SIGTSTP&#39;   event is   not   supported on Windows.  \n  </section>	http://nodejs.org/api/all.html#all_interface_sigtstp
Interface SIGTSTP	R	Interface.SIGTSTP										http://nodejs.org/api/all.html#all_interface_sigtstp
repl	A										<section class="prog__container">    The   repl   module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:  \n    const repl = require(&#39;repl&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_repl
repl	A										<section class="prog__container">    The   repl   module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:  \n    const repl = require(&#39;repl&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_repl
repl.start	A										<section class="prog__container">    The   repl.start()   method creates and starts a   repl.REPLServer   instance.  \n  <pre><code>repl.start([options])</code></pre></section>	http://nodejs.org/api/all.html#all_repl_start_options
repl start	R	repl.start										http://nodejs.org/api/all.html#all_repl_start_options
REPLServer	A										<section class="prog__container">    The   repl.REPLServer   class inherits from the     readline.Interface     class.\nInstances of   repl.REPLServer   are created using the   repl.start()   method and\n  should not   be created directly using the JavaScript   new   keyword.  \n  </section>	http://nodejs.org/api/all.html#all_replserver
REPLServer	A										<section class="prog__container">    The   repl.REPLServer   class inherits from the     readline.Interface     class.\nInstances of   repl.REPLServer   are created using the   repl.start()   method and\n  should not   be created directly using the JavaScript   new   keyword.  \n  </section>	http://nodejs.org/api/all.html#all_replserver
REPLServer.defineCommand	A										<section class="prog__container">    The   replServer.defineCommand()   method is used to add new   .  -prefixed commands\nto the REPL instance. Such commands are invoked by typing a   .   followed by the\n  keyword  . The   cmd   is either a Function or an object with the following\nproperties:  \n  \n    help   {String} Help text to be displayed when   .help   is entered (Optional).  \n    action   {Function} The function to execute, optionally accepting a single\nstring argument.  \n  \n  The following example shows two new commands added to the REPL instance:  \n    const repl = require(&#39;repl&#39;);\n\nvar replServer = repl.start({prompt: &#39;&gt; &#39;});\nreplServer.defineCommand(&#39;sayhello&#39;, {\n  help: &#39;Say hello&#39;,\n  action: function(name) {\n    this.lineParser.reset();\n    this.bufferedCommand = &#39;&#39;;\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand(&#39;saybye&#39;, function() {\n  console.log(&#39;Goodbye!&#39;);\n  this.close();\n});\n    \n  The new commands can then be used from within the REPL instance:  \n    &gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n    \n  <pre><code>replServer.defineCommand(keyword, cmd)</code></pre></section>	http://nodejs.org/api/all.html#all_replserver_definecommand_keyword_cmd
REPLServer defineCommand	R	REPLServer.defineCommand										http://nodejs.org/api/all.html#all_replserver_definecommand_keyword_cmd
REPLServer.displayPrompt	A										<section class="prog__container">    The   replServer.displayPrompt()   method readies the REPL instance for input\nfrom the user, printing the configured   prompt   to a new line in the   output  \nand resuming the   input   to accept new input.  \n  When multi-line input is being entered, an ellipsis is printed rather than the\n&#39;prompt&#39;.  \n  When   preserveCursor   is   true  , the cursor placement will not be reset to   0  .  \n  The   replServer.displayPrompt   method is primarily intended to be called from\nwithin the action function for commands registered using the\n  replServer.defineCommand()   method.  \n  <pre><code>replServer.displayPrompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#all_replserver_displayprompt_preservecursor
REPLServer displayPrompt	R	REPLServer.displayPrompt										http://nodejs.org/api/all.html#all_replserver_displayprompt_preservecursor
REPLServer.exit	A										<section class="prog__container">    The   &#39;exit&#39;   event is emitted when the REPL is exited either by receiving the\n  .exit   command as input, the user pressing   &lt;ctrl&gt;-C   twice to signal   SIGINT  ,\nor by pressing   &lt;ctrl&gt;-D   to signal   &#39;end&#39;   on the input stream. The listener\ncallback is invoked without any arguments.  \n    replServer.on(&#39;exit&#39;, () =&gt; {\n  console.log(&#39;Received &quot;exit&quot; event from repl!&#39;);\n  process.exit();\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_replserver_exit
REPLServer exit	R	REPLServer.exit										http://nodejs.org/api/all.html#all_replserver_exit
REPLServer.reset	A										<section class="prog__container">    The   &#39;reset&#39;   event is emitted when the REPL&#39;s context is reset. This occurs\nwhenever the   .clear   command is received as input   unless   the REPL is using\nthe default evaluator and the   repl.REPLServer   instance was created with the\n  useGlobal   option set to   true  . The listener callback will be called with a\nreference to the   context   object as the only argument.  \n  This can be used primarily to re-initialize REPL context to some pre-defined\nstate as illustrated in the following simple example:  \n    const repl = require(&#39;repl&#39;);\n\nfunction initializeContext(context) {\n  context.m = &#39;test&#39;;\n}\n\nvar r = repl.start({prompt: &#39;&gt;&#39;});\ninitializeContext(r.context);\n\nr.on(&#39;reset&#39;, initializeContext);\n    \n  When this code is executed, the global   &#39;m&#39;   variable can be modified but then\nreset to its initial value using the   .clear   command:  \n    $ ./node example.js\n&gt;m\n&#39;test&#39;\n&gt;m = 1\n1\n&gt;m\n1\n&gt;.clear\nClearing context...\n&gt;m\n&#39;test&#39;\n&gt;\n    \n  </section>	http://nodejs.org/api/all.html#all_replserver_reset
REPLServer reset	R	REPLServer.reset										http://nodejs.org/api/all.html#all_replserver_reset
stream	A										<section class="prog__container">    A stream is an abstract interface for working with streaming data in Node.js.\nThe   stream   module provides a base API that makes it easy to build objects\nthat implement the stream interface.  \n  There are many stream objects provided by Node.js. For instance, a\n  request to an HTTP server   and     process.stdout    \nare both stream instances.  \n  Streams can be readable, writable, or both. All streams are instances of\n    EventEmitter    .  \n  The   stream   module can be accessed using:  \n    const stream = require(&#39;stream&#39;);\n    \n  While it is important for all Node.js users to understand how streams work,\nthe   stream   module itself is most useful for developers that are creating new\ntypes of stream instances. Developer&#39;s who are primarily   consuming   stream\nobjects will rarely (if ever) have need to use the   stream   module directly.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stream
stream	A										<section class="prog__container">    A stream is an abstract interface for working with streaming data in Node.js.\nThe   stream   module provides a base API that makes it easy to build objects\nthat implement the stream interface.  \n  There are many stream objects provided by Node.js. For instance, a\n  request to an HTTP server   and     process.stdout    \nare both stream instances.  \n  Streams can be readable, writable, or both. All streams are instances of\n    EventEmitter    .  \n  The   stream   module can be accessed using:  \n    const stream = require(&#39;stream&#39;);\n    \n  While it is important for all Node.js users to understand how streams work,\nthe   stream   module itself is most useful for developers that are creating new\ntypes of stream instances. Developer&#39;s who are primarily   consuming   stream\nobjects will rarely (if ever) have need to use the   stream   module directly.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stream
stringdecoder	A										<section class="prog__container">    The   string_decoder   module provides an API for decoding   Buffer   objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\n    \n  The following example shows the basic use of the   StringDecoder   class.  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n    \n  When a   Buffer   instance is written to the   StringDecoder   instance, an\ninternal buffer is used to ensure that the decoded string does not contain\nany incomplete multibyte characters. These are held in the buffer until the\nnext call to   stringDecoder.write()   or until   stringDecoder.end()   is called.  \n  In the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (  €  ) are written over three separate operations:  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stringdecoder
stringdecoder	A										<section class="prog__container">    The   string_decoder   module provides an API for decoding   Buffer   objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\n    \n  The following example shows the basic use of the   StringDecoder   class.  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n    \n  When a   Buffer   instance is written to the   StringDecoder   instance, an\ninternal buffer is used to ensure that the decoded string does not contain\nany incomplete multibyte characters. These are held in the buffer until the\nnext call to   stringDecoder.write()   or until   stringDecoder.end()   is called.  \n  In the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (  €  ) are written over three separate operations:  \n    const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stringdecoder
new	A										<section class="prog__container">    \n    encoding   {string} The character encoding the   StringDecoder   will use.\nDefaults to   &#39;utf8&#39;  .  \n  \n  Creates a new   StringDecoder   instance.  \n  </section>	http://nodejs.org/api/all.html#all_new
new	A										<section class="prog__container">    \n    encoding   {string} The character encoding the   StringDecoder   will use.\nDefaults to   &#39;utf8&#39;  .  \n  \n  Creates a new   StringDecoder   instance.  \n  </section>	http://nodejs.org/api/all.html#all_new
new.end	A										<section class="prog__container">    Returns any remaining input stored in the internal buffer as a string. Bytes\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\nsubstitution characters appropriate for the character encoding.  \n  If the   buffer   argument is provided, one final call to   stringDecoder.write()  \nis performed before returning the remaining input.  \n  <pre><code>stringDecoder.end([buffer])</code></pre></section>	http://nodejs.org/api/all.html#all_new_end_buffer
new end	R	new.end										http://nodejs.org/api/all.html#all_new_end_buffer
new.write	A										<section class="prog__container">    Returns a decoded string, ensuring that any incomplete multibyte characters at\nthe end of the   Buffer   are omitted from the returned string and stored in an\ninternal buffer for the next call to   stringDecoder.write()   or\n  stringDecoder.end()  .  \n  \n  \n  <pre><code>stringDecoder.write(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_new_write_buffer
new write	R	new.write										http://nodejs.org/api/all.html#all_new_write_buffer
timers	A										<section class="prog__container">    The   timer   module exposes a global API for scheduling functions to\nbe called at some future period of time. Because the timer functions are\nglobals, there is no need to call   require(&#39;timers&#39;)   to use the API.  \n  The timer functions within Node.js implement a similar API as the timers API\nprovided by Web Browsers but use a different internal implementation that is\nbuilt around   the Node.js Event Loop  .  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_timers
timers	A										<section class="prog__container">    The   timer   module exposes a global API for scheduling functions to\nbe called at some future period of time. Because the timer functions are\nglobals, there is no need to call   require(&#39;timers&#39;)   to use the API.  \n  The timer functions within Node.js implement a similar API as the timers API\nprovided by Web Browsers but use a different internal implementation that is\nbuilt around   the Node.js Event Loop  .  \n  <p>Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_timers
Immediate	A										<section class="prog__container">    This object is created internally and is returned from     setImmediate()    . It\ncan be passed to     clearImmediate()     in order to cancel the scheduled\nactions.  \n  </section>	http://nodejs.org/api/all.html#all_immediate
Immediate	A										<section class="prog__container">    This object is created internally and is returned from     setImmediate()    . It\ncan be passed to     clearImmediate()     in order to cancel the scheduled\nactions.  \n  </section>	http://nodejs.org/api/all.html#all_immediate
Timeout	A										<section class="prog__container">    This object is created internally and is returned from     setTimeout()     and\n    setInterval()    . It can be passed to     clearTimeout()     or\n    clearInterval()     (respectively) in order to cancel the scheduled actions.  \n  By default, when a timer is scheduled using either     setTimeout()     or\n    setInterval()    , the Node.js event loop will continue running as long as the\ntimer is active. Each of the   Timeout   objects returned by these functions\nexport both   timeout.ref()   and   timeout.unref()   functions that can be used to\ncontrol this default behavior.  \n  </section>	http://nodejs.org/api/all.html#all_timeout
Timeout	A										<section class="prog__container">    This object is created internally and is returned from     setTimeout()     and\n    setInterval()    . It can be passed to     clearTimeout()     or\n    clearInterval()     (respectively) in order to cancel the scheduled actions.  \n  By default, when a timer is scheduled using either     setTimeout()     or\n    setInterval()    , the Node.js event loop will continue running as long as the\ntimer is active. Each of the   Timeout   objects returned by these functions\nexport both   timeout.ref()   and   timeout.unref()   functions that can be used to\ncontrol this default behavior.  \n  </section>	http://nodejs.org/api/all.html#all_timeout
Timeout.ref	A										<section class="prog__container">    When called, requests that the Node.js event loop   not   exit so long as the\n  Timeout   is active. Calling   timeout.ref()   multiple times will have no effect.  \n    Note  : By default, all   Timeout   objects are &quot;ref&#39;d&quot;, making it normally\nunnecessary to call   timeout.ref()   unless   timeout.unref()   had been called\npreviously.  \n  Returns a reference to the   Timeout  .  \n  <pre><code>timeout.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_timeout_ref
Timeout ref	R	Timeout.ref										http://nodejs.org/api/all.html#all_timeout_ref
Timeout.unref	A										<section class="prog__container">    When called, the active   Timeout   object will not require the Node.js event loop\nto remain active. If there is no other activity keeping the event loop running,\nthe process may exit before the   Timeout   object&#39;s callback is invoked. Calling\n  timeout.unref()   multiple times will have no effect.  \n    Note  : Calling   timeout.unref()   creates an internal timer that will wake the\nNode.js event loop. Creating too many of these can adversely impact performance\nof the Node.js application.  \n  Returns a reference to the   Timeout  .  \n  <pre><code>timeout.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_timeout_unref
Timeout unref	R	Timeout.unref										http://nodejs.org/api/all.html#all_timeout_unref
tls_(ssl)	A										<section class="prog__container">    The   tls   module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:  \n    const tls = require(&#39;tls&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tls_(ssl)
tls_(ssl)	A										<section class="prog__container">    The   tls   module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:  \n    const tls = require(&#39;tls&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tls_(ssl)
tls_(ssl).connect	A										<section class="prog__container">    Creates a new client connection to the given   options.port   and   options.host  \nIf   options.host   is omitted, it defaults to   localhost  .  \n  The   callback   function, if specified, will be added as a listener for the\n    &#39;secureConnect&#39;     event.  \n    tls.connect()   returns a     tls.TLSSocket     object.  \n  <pre><code>tls.connect(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_connect_options_callback
tls_(ssl) connect	R	tls_(ssl).connect										http://nodejs.org/api/all.html#all_tls_(ssl)_connect_options_callback
tls_(ssl).connect	A										<section class="prog__container">    Creates a new client connection to the given   port   and   host   or\n  options.port   and   options.host  . (If   host   is omitted, it defaults to\n  localhost  .)  \n  The   callback   function, if specified, will be added as a listener for the\n    &#39;secureConnect&#39;     event.  \n    tls.connect()   returns a     tls.TLSSocket     object.  \n  The following implements a simple &quot;echo server&quot; example:  \n    const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n    \n  Or  \n    const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n    \n  <pre><code>tls.connect(port[, host][, options][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_connect_port_host_options_callback
tls_(ssl) connect	R	tls_(ssl).connect										http://nodejs.org/api/all.html#all_tls_(ssl)_connect_port_host_options_callback
tls_(ssl).createSecureContext	A										<section class="prog__container">    The   tls.createSecureContext()   method creates a credentials object.  \n  If the &#39;ca&#39; option is not given, then Node.js will use the default\npublicly trusted list of CAs as given in\n  http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt  .  \n  <pre><code>tls.createSecureContext(options)</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_createsecurecontext_options
tls_(ssl) createSecureContext	R	tls_(ssl).createSecureContext										http://nodejs.org/api/all.html#all_tls_(ssl)_createsecurecontext_options
tls_(ssl).createServer	A										<section class="prog__container">    Creates a new   tls.Server  .  The   secureConnectionListener  , if provided, is\nautomatically set as a listener for the     &#39;secureConnection&#39;     event.  \n  For the   ciphers   option, the default cipher suite is:  \n    ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n    \n  The default cipher suite prefers GCM ciphers for   Chrome&#39;s &#39;modern\ncryptography&#39; setting   and also prefers ECDHE and DHE ciphers for Perfect\nForward Secrecy, while offering   some   backward compatibility.  \n  128 bit AES is preferred over 192 and 256 bit AES in light of   specific\nattacks affecting larger AES key sizes  .  \n  Old clients that rely on insecure and deprecated RC4 or DES-based ciphers\n(like Internet Explorer 6) cannot complete the handshaking process with\nthe default configuration. If these clients   must   be supported, the\n  TLS recommendations   may offer a compatible cipher suite. For more details\non the format, see the   OpenSSL cipher list format documentation  .  \n  The following illustrates a simple echo server:  \n    const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n    \n  Or  \n    const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n    \n  This server can be tested by connecting to it using   openssl s_client  :  \n    openssl s_client -connect 127.0.0.1:8000\n    \n  <pre><code>tls.createServer(options[, secureConnectionListener])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_createserver_options_secureconnectionlistener
tls_(ssl) createServer	R	tls_(ssl).createServer										http://nodejs.org/api/all.html#all_tls_(ssl)_createserver_options_secureconnectionlistener
tls_(ssl).getCiphers	A										<section class="prog__container">    Returns an array with the names of the supported SSL ciphers.  \n  For example:  \n    console.log(tls.getCiphers()); // [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]\n    \n  <pre><code>tls.getCiphers()</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_getciphers
tls_(ssl) getCiphers	R	tls_(ssl).getCiphers										http://nodejs.org/api/all.html#all_tls_(ssl)_getciphers
tls.Server	A										<section class="prog__container">    The   tls.Server   class is a subclass of   net.Server   that accepts encrypted\nconnections using TLS or SSL.  \n  </section>	http://nodejs.org/api/all.html#all_tls.server
tls Server	R	tls.Server										http://nodejs.org/api/all.html#all_tls server
tls.Server.addContext	A										<section class="prog__container">    The   server.addContext()   method adds a secure context that will be used if\nthe client request&#39;s SNI hostname matches the supplied   hostname   (or wildcard).  \n  <pre><code>server.addContext(hostname, context)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_addcontext_hostname_context
tls.Server addContext	R	tls.Server.addContext										http://nodejs.org/api/all.html#all_tls.server_addcontext_hostname_context
tls Server addContext	R	tls.Server addContext										http://nodejs.org/api/all.html#all_tls server_addcontext_hostname_context
tls.Server.address	A										<section class="prog__container">    Returns the bound address, the address family name, and port of the\nserver as reported by the operating system.  See     net.Server.address()     for\nmore information.  \n  <pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_address
tls.Server address	R	tls.Server.address										http://nodejs.org/api/all.html#all_tls.server_address
tls Server address	R	tls.Server address										http://nodejs.org/api/all.html#all_tls server_address
tls.Server.close	A										<section class="prog__container">    The   server.close()   method stops the server from accepting new connections.  \n  This function operates asynchronously. The   &#39;close&#39;   event will be emitted\nwhen the server has no more open connections.  \n  <pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_close_callback
tls.Server close	R	tls.Server.close										http://nodejs.org/api/all.html#all_tls.server_close_callback
tls Server close	R	tls.Server close										http://nodejs.org/api/all.html#all_tls server_close_callback
tls.Server.getTicketKeys	A										<section class="prog__container">    Returns a   Buffer   instance holding the keys currently used for\nencryption/decryption of the   TLS Session Tickets    \n  <pre><code>server.getTicketKeys()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_getticketkeys
tls.Server getTicketKeys	R	tls.Server.getTicketKeys										http://nodejs.org/api/all.html#all_tls.server_getticketkeys
tls Server getTicketKeys	R	tls.Server getTicketKeys										http://nodejs.org/api/all.html#all_tls server_getticketkeys
tls.Server.listen	A										<section class="prog__container">    The   server.listen()   methods instructs the server to begin accepting\nconnections on the specified   port   and   hostname  .  \n  This function operates asynchronously. If the   callback   is given, it will be\ncalled when the server has started listening.  \n  See   net.Server   for more information.  \n  <pre><code>server.listen(port[, hostname][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_listen_port_hostname_callback
tls.Server listen	R	tls.Server.listen										http://nodejs.org/api/all.html#all_tls.server_listen_port_hostname_callback
tls Server listen	R	tls.Server listen										http://nodejs.org/api/all.html#all_tls server_listen_port_hostname_callback
tls.Server.setTicketKeys	A										<section class="prog__container">    Updates the keys for encryption/decryption of the   TLS Session Tickets  .  \n    Note  : The key&#39;s   Buffer   should be 48 bytes long. See   ticketKeys   option in\n  tls.createServer   for\nmore information on how it is used.  \n    Note  : Changes to the ticket keys are effective only for future server\nconnections. Existing or currently pending server connections will use the\nprevious keys.  \n  <pre><code>server.setTicketKeys(keys)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_setticketkeys_keys
tls.Server setTicketKeys	R	tls.Server.setTicketKeys										http://nodejs.org/api/all.html#all_tls.server_setticketkeys_keys
tls Server setTicketKeys	R	tls.Server setTicketKeys										http://nodejs.org/api/all.html#all_tls server_setticketkeys_keys
tls.Server.connections	A										<section class="prog__container">    Returns the current number of concurrent connections on the server.  \n  </section>	http://nodejs.org/api/all.html#all_tls.server_connections
tls.Server connections	R	tls.Server.connections										http://nodejs.org/api/all.html#all_tls.server_connections
tls Server connections	R	tls.Server connections										http://nodejs.org/api/all.html#all_tls server_connections
tls.Server.tlsClientError	A										<section class="prog__container">    The   &#39;tlsClientError&#39;   event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:  \n  \n    exception   {Error} The   Error   object describing the error  \n    tlsSocket   {tls.TLSSocket} The   tls.TLSSocket   instance from which the\nerror originated.  \n  \n  </section>	http://nodejs.org/api/all.html#all_tls.server_tlsclienterror
tls.Server tlsClientError	R	tls.Server.tlsClientError										http://nodejs.org/api/all.html#all_tls.server_tlsclienterror
tls Server tlsClientError	R	tls.Server tlsClientError										http://nodejs.org/api/all.html#all_tls server_tlsclienterror
tls.Server.newSession	A										<section class="prog__container">    The   &#39;newSession&#39;   event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The listener callback is passed\nthree arguments when called:  \n  \n    sessionId   - The TLS session identifier  \n    sessionData   - The TLS session data  \n    callback   {Function} A callback function taking no arguments that must be\ninvoked in order for data to be sent or received over the secure connection.  \n  \n    Note  : Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.  \n  </section>	http://nodejs.org/api/all.html#all_tls.server_newsession
tls.Server newSession	R	tls.Server.newSession										http://nodejs.org/api/all.html#all_tls.server_newsession
tls Server newSession	R	tls.Server newSession										http://nodejs.org/api/all.html#all_tls server_newsession
tls.Server.OCSPRequest	A										<section class="prog__container">    The   &#39;OCSPRequest&#39;   event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:  \n  \n    certificate   {Buffer} The server certificate  \n    issuer   {Buffer} The issuer&#39;s certificate  \n    callback   {Function} A callback function that must be invoked to provide\nthe results of the OCSP request.  \n  \n  The server&#39;s current certificate can be parsed to obtain the OCSP URL\nand certificate ID; after obtaining an OCSP response,   callback(null, resp)   is\nthen invoked, where   resp   is a   Buffer   instance containing the OCSP response.\nBoth   certificate   and   issuer   are   Buffer   DER-representations of the\nprimary and issuer&#39;s certificates. These can be used to obtain the OCSP\ncertificate ID and OCSP endpoint URL.  \n  Alternatively,   callback(null, null)   may be called, indicating that there was\nno OCSP response.  \n  Calling   callback(err)   will result in a   socket.destroy(err)   call.  \n  The typical flow of an OCSP Request is as follows:  \n  \n  Client connects to the server and sends an   &#39;OCSPRequest&#39;   (via the status\ninfo extension in ClientHello).  \n  Server receives the request and emits the   &#39;OCSPRequest&#39;   event, calling the\nlistener if registered.  \n  Server extracts the OCSP URL from either the   certificate   or   issuer   and\nperforms an   OCSP request   to the CA.  \n  Server receives   OCSPResponse   from the CA and sends it back to the client\nvia the   callback   argument  \n  Client validates the response and either destroys the socket or performs a\nhandshake.  \n  \n    Note  : The   issuer   can be   null   if the certificate is either self-signed or\nthe issuer is not in the root certificates list. (An issuer may be provided\nvia the   ca   option when establishing the TLS connection.)  \n    Note  : Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.  \n    Note  : An npm module like   asn1.js   may be used to parse the certificates.  \n  </section>	http://nodejs.org/api/all.html#all_tls.server_ocsprequest
tls.Server OCSPRequest	R	tls.Server.OCSPRequest										http://nodejs.org/api/all.html#all_tls.server_ocsprequest
tls Server OCSPRequest	R	tls.Server OCSPRequest										http://nodejs.org/api/all.html#all_tls server_ocsprequest
tls.Server.resumeSession	A										<section class="prog__container">    The   &#39;resumeSession&#39;   event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:  \n  \n    sessionId   - The TLS/SSL session identifier  \n    callback   {Function} A callback function to be called when the prior session\nhas been recovered.  \n  \n  When called, the event listener may perform a lookup in external storage using\nthe given   sessionId   and invoke   callback(null, sessionData)   once finished. If\nthe session cannot be resumed (i.e., doesn&#39;t exist in storage) the callback may\nbe invoked as   callback(null, null)  . Calling   callback(err)   will terminate the\nincoming connection and destroy the socket.  \n    Note  : Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.  \n  The following illustrates resuming a TLS session:  \n    const tlsSessionStore = {};\nserver.on(&#39;newSession&#39;, (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString(&#39;hex&#39;)] = data;\n  cb();\n});\nserver.on(&#39;resumeSession&#39;, (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString(&#39;hex&#39;)] || null);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_tls.server_resumesession
tls.Server resumeSession	R	tls.Server.resumeSession										http://nodejs.org/api/all.html#all_tls.server_resumesession
tls Server resumeSession	R	tls.Server resumeSession										http://nodejs.org/api/all.html#all_tls server_resumesession
tls.Server.secureConnection	A										<section class="prog__container">    The   &#39;secureConnection&#39;   event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:  \n  \n    tlsSocket   {tls.TLSSocket} The established TLS socket.  \n  \n  The   tlsSocket.authorized   property is a   boolean   indicating whether the\nclient has been verified by one of the supplied Certificate Authorities for the\nserver. If   tlsSocket.authorized   is   false  , then   socket.authorizationError  \nis set to describe how authorization failed. Note that depending on the settings\nof the TLS server, unauthorized connections may still be accepted.  \n  The   tlsSocket.npnProtocol   and   tlsSocket.alpnProtocol   properties are strings\nthat contain the selected NPN and ALPN protocols, respectively. When both NPN\nand ALPN extensions are received, ALPN takes precedence over NPN and the next\nprotocol is selected by ALPN.  \n  When ALPN has no selected protocol,   tlsSocket.alpnProtocol   returns   false  .  \n  The   tlsSocket.servername   property is a string containing the server name\nrequested via SNI.  \n  </section>	http://nodejs.org/api/all.html#all_tls.server_secureconnection
tls.Server secureConnection	R	tls.Server.secureConnection										http://nodejs.org/api/all.html#all_tls.server_secureconnection
tls Server secureConnection	R	tls.Server secureConnection										http://nodejs.org/api/all.html#all_tls server_secureconnection
tls.TLSSocket	A										<section class="prog__container">    The   tls.TLSSocket   is a subclass of     net.Socket     that performs transparent\nencryption of written data and all required TLS negotiation.  \n  Instances of   tls.TLSSocket   implement the duplex   Stream   interface.  \n    Note  : Methods that return TLS connection metadata (e.g.\n    tls.TLSSocket.getPeerCertificate()     will only return data while the\nconnection is open.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket
tls TLSSocket	R	tls.TLSSocket										http://nodejs.org/api/all.html#all_tls tlssocket
tls.TLSSocket.TLSSocket	A										<section class="prog__container">    Construct a new   tls.TLSSocket   object from an existing TCP socket.  \n  <pre><code>new tls.TLSSocket(socket[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_tlssocket_socket_options
tls.TLSSocket TLSSocket	R	tls.TLSSocket.TLSSocket										http://nodejs.org/api/all.html#all_tls.tlssocket_tlssocket_socket_options
tls TLSSocket TLSSocket	R	tls.TLSSocket TLSSocket										http://nodejs.org/api/all.html#all_tls tlssocket_tlssocket_socket_options
tls.TLSSocket.address	A										<section class="prog__container">    Returns the bound address, the address family name, and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.,\n  { port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }    \n  <pre><code>tlsSocket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_address
tls.TLSSocket address	R	tls.TLSSocket.address										http://nodejs.org/api/all.html#all_tls.tlssocket_address
tls TLSSocket address	R	tls.TLSSocket address										http://nodejs.org/api/all.html#all_tls tlssocket_address
tls.TLSSocket.getCipher	A										<section class="prog__container">    Returns an object representing the cipher name and the SSL/TLS protocol version\nthat first defined the cipher.  \n  For example:   { name: &#39;AES256-SHA&#39;, version: &#39;TLSv1/SSLv3&#39; }    \n  See   SSL_CIPHER_get_name()   and   SSL_CIPHER_get_version()   in\n  https://www.openssl.org/docs/man1.0.2/ssl/SSL_CIPHER_get_name.html   for more\ninformation.  \n  <pre><code>tlsSocket.getCipher()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getcipher
tls.TLSSocket getCipher	R	tls.TLSSocket.getCipher										http://nodejs.org/api/all.html#all_tls.tlssocket_getcipher
tls TLSSocket getCipher	R	tls.TLSSocket getCipher										http://nodejs.org/api/all.html#all_tls tlssocket_getcipher
tls.TLSSocket.getEphemeralKeyInfo	A										<section class="prog__container">    Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in   Perfect Forward Secrecy   on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket;   null   is returned\nif called on a server socket. The supported types are   &#39;DH&#39;   and   &#39;ECDH&#39;  . The\n  name   property is available only when type is &#39;ECDH&#39;.  \n  For Example:   { type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }    \n  <pre><code>tlsSocket.getEphemeralKeyInfo()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getephemeralkeyinfo
tls.TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket.getEphemeralKeyInfo										http://nodejs.org/api/all.html#all_tls.tlssocket_getephemeralkeyinfo
tls TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket getEphemeralKeyInfo										http://nodejs.org/api/all.html#all_tls tlssocket_getephemeralkeyinfo
tls.TLSSocket.getPeerCertificate	A										<section class="prog__container">    Returns an object representing the peer&#39;s certificate. The returned object has\nsome properties corresponding to the fields of the certificate.  \n  For example:  \n    { subject:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuerInfo:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuer:\n   { ... another certificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  valid_from: &#39;Nov 11 09:52:22 2009 GMT&#39;,\n  valid_to: &#39;Nov  6 09:52:22 2029 GMT&#39;,\n  fingerprint: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&#39;,\n  serialNumber: &#39;B9B0D332A1AA5635&#39; }\n    \n  If the peer does not provide a certificate,   null   or an empty object will be\nreturned.  \n  <pre><code>tlsSocket.getPeerCertificate([ detailed ])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getpeercertificate_detailed
tls.TLSSocket getPeerCertificate	R	tls.TLSSocket.getPeerCertificate										http://nodejs.org/api/all.html#all_tls.tlssocket_getpeercertificate_detailed
tls TLSSocket getPeerCertificate	R	tls.TLSSocket getPeerCertificate										http://nodejs.org/api/all.html#all_tls tlssocket_getpeercertificate_detailed
tls.TLSSocket.getProtocol	A										<section class="prog__container">    Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value   &#39;unknown&#39;   will be returned for connected\nsockets that have not completed the handshaking process. The value   null   will\nbe returned for server sockets or disconnected client sockets.  \n  Example responses include:  \n  \n    SSLv3    \n    TLSv1    \n    TLSv1.1    \n    TLSv1.2    \n    unknown    \n  \n  See   https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html   for more\ninformation.  \n  <pre><code>tlsSocket.getProtocol()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getprotocol
tls.TLSSocket getProtocol	R	tls.TLSSocket.getProtocol										http://nodejs.org/api/all.html#all_tls.tlssocket_getprotocol
tls TLSSocket getProtocol	R	tls.TLSSocket getProtocol										http://nodejs.org/api/all.html#all_tls tlssocket_getprotocol
tls.TLSSocket.getSession	A										<section class="prog__container">    Returns the ASN.1 encoded TLS session or   undefined   if no session was\nnegotiated. Can be used to speed up handshake establishment when reconnecting\nto the server.  \n  <pre><code>tlsSocket.getSession()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getsession
tls.TLSSocket getSession	R	tls.TLSSocket.getSession										http://nodejs.org/api/all.html#all_tls.tlssocket_getsession
tls TLSSocket getSession	R	tls.TLSSocket getSession										http://nodejs.org/api/all.html#all_tls tlssocket_getsession
tls.TLSSocket.getTLSTicket	A										<section class="prog__container">    Returns the TLS session ticket or   undefined   if no session was negotiated.  \n    Note  : This only works with client TLS sockets. Useful only for debugging, for\nsession reuse provide   session   option to     tls.connect()    .  \n  <pre><code>tlsSocket.getTLSTicket()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_gettlsticket
tls.TLSSocket getTLSTicket	R	tls.TLSSocket.getTLSTicket										http://nodejs.org/api/all.html#all_tls.tlssocket_gettlsticket
tls TLSSocket getTLSTicket	R	tls.TLSSocket getTLSTicket										http://nodejs.org/api/all.html#all_tls tlssocket_gettlsticket
tls.TLSSocket.renegotiate	A										<section class="prog__container">    The   tlsSocket.renegotiate()   method initiates a TLS renegotiation process.\nUpon completion, the   callback   function will be passed a single argument\nthat is either an   Error   (if the request failed) or   null  .  \n    Note  : This method can be used to request a peer&#39;s certificate after the\nsecure connection has been established.  \n    Note  : When running as the server, the socket will be destroyed with an error\nafter   handshakeTimeout   timeout.  \n  <pre><code>tlsSocket.renegotiate(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_renegotiate_options_callback
tls.TLSSocket renegotiate	R	tls.TLSSocket.renegotiate										http://nodejs.org/api/all.html#all_tls.tlssocket_renegotiate_options_callback
tls TLSSocket renegotiate	R	tls.TLSSocket renegotiate										http://nodejs.org/api/all.html#all_tls tlssocket_renegotiate_options_callback
tls.TLSSocket.setMaxSendFragment	A										<section class="prog__container">    The   tlsSocket.setMaxSendFragment()   method sets the maximum TLS fragment size.\nReturns   true   if setting the limit succeeded;   false   otherwise.  \n  Smaller fragment sizes decrease the buffering latency on the client: larger\nfragments are buffered by the TLS layer until the entire fragment is received\nand its integrity is verified; large fragments can span multiple roundtrips\nand their processing can be delayed due to packet loss or reordering. However,\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\ndecrease overall server throughput.  \n  <pre><code>tlsSocket.setMaxSendFragment(size)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_setmaxsendfragment_size
tls.TLSSocket setMaxSendFragment	R	tls.TLSSocket.setMaxSendFragment										http://nodejs.org/api/all.html#all_tls.tlssocket_setmaxsendfragment_size
tls TLSSocket setMaxSendFragment	R	tls.TLSSocket setMaxSendFragment										http://nodejs.org/api/all.html#all_tls tlssocket_setmaxsendfragment_size
tls.TLSSocket.authorized	A										<section class="prog__container">    Returns   true   if the peer certificate was signed by one of the CAs specified\nwhen creating the   tls.TLSSocket   instance, otherwise   false  .  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_authorized
tls.TLSSocket authorized	R	tls.TLSSocket.authorized										http://nodejs.org/api/all.html#all_tls.tlssocket_authorized
tls TLSSocket authorized	R	tls.TLSSocket authorized										http://nodejs.org/api/all.html#all_tls tlssocket_authorized
tls.TLSSocket.authorizationError	A										<section class="prog__container">    Returns the reason why the peer&#39;s certificate was not been verified. This\nproperty is set only when   tlsSocket.authorized === false  .  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_authorizationerror
tls.TLSSocket authorizationError	R	tls.TLSSocket.authorizationError										http://nodejs.org/api/all.html#all_tls.tlssocket_authorizationerror
tls TLSSocket authorizationError	R	tls.TLSSocket authorizationError										http://nodejs.org/api/all.html#all_tls tlssocket_authorizationerror
tls.TLSSocket.encrypted	A										<section class="prog__container">    Always returns   true  . This may be used to distinguish TLS sockets from regular\n  net.Socket   instances.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_encrypted
tls.TLSSocket encrypted	R	tls.TLSSocket.encrypted										http://nodejs.org/api/all.html#all_tls.tlssocket_encrypted
tls TLSSocket encrypted	R	tls.TLSSocket encrypted										http://nodejs.org/api/all.html#all_tls tlssocket_encrypted
tls.TLSSocket.localAddress	A										<section class="prog__container">    Returns the string representation of the local IP address.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_localaddress
tls.TLSSocket localAddress	R	tls.TLSSocket.localAddress										http://nodejs.org/api/all.html#all_tls.tlssocket_localaddress
tls TLSSocket localAddress	R	tls.TLSSocket localAddress										http://nodejs.org/api/all.html#all_tls tlssocket_localaddress
tls.TLSSocket.localPort	A										<section class="prog__container">    Returns the numeric representation of the local port.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_localport
tls.TLSSocket localPort	R	tls.TLSSocket.localPort										http://nodejs.org/api/all.html#all_tls.tlssocket_localport
tls TLSSocket localPort	R	tls.TLSSocket localPort										http://nodejs.org/api/all.html#all_tls tlssocket_localport
tls.TLSSocket.remoteAddress	A										<section class="prog__container">    Returns the string representation of the remote IP address. For example,\n  &#39;74.125.127.100&#39;   or   &#39;2001:4860:a005::68&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remoteaddress
tls.TLSSocket remoteAddress	R	tls.TLSSocket.remoteAddress										http://nodejs.org/api/all.html#all_tls.tlssocket_remoteaddress
tls TLSSocket remoteAddress	R	tls.TLSSocket remoteAddress										http://nodejs.org/api/all.html#all_tls tlssocket_remoteaddress
tls.TLSSocket.remoteFamily	A										<section class="prog__container">    Returns the string representation of the remote IP family.   &#39;IPv4&#39;   or   &#39;IPv6&#39;  .  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remotefamily
tls.TLSSocket remoteFamily	R	tls.TLSSocket.remoteFamily										http://nodejs.org/api/all.html#all_tls.tlssocket_remotefamily
tls TLSSocket remoteFamily	R	tls.TLSSocket remoteFamily										http://nodejs.org/api/all.html#all_tls tlssocket_remotefamily
tls.TLSSocket.remotePort	A										<section class="prog__container">    Returns the numeric representation of the remote port. For example,   443  .  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remoteport
tls.TLSSocket remotePort	R	tls.TLSSocket.remotePort										http://nodejs.org/api/all.html#all_tls.tlssocket_remoteport
tls TLSSocket remotePort	R	tls.TLSSocket remotePort										http://nodejs.org/api/all.html#all_tls tlssocket_remoteport
tls.TLSSocket.OCSPResponse	A										<section class="prog__container">    The   &#39;OCSPResponse&#39;   event is emitted if the   requestOCSP   option was set\nwhen the   tls.TLSSocket   was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:  \n  \n    response   {Buffer} The server&#39;s OCSP response  \n  \n  Typically, the   response   is a digitally signed object from the server&#39;s CA that\ncontains information about server&#39;s certificate revocation status.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_ocspresponse
tls.TLSSocket OCSPResponse	R	tls.TLSSocket.OCSPResponse										http://nodejs.org/api/all.html#all_tls.tlssocket_ocspresponse
tls TLSSocket OCSPResponse	R	tls.TLSSocket OCSPResponse										http://nodejs.org/api/all.html#all_tls tlssocket_ocspresponse
tls.TLSSocket.secureConnect	A										<section class="prog__container">    The   &#39;secureConnect&#39;   event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server&#39;s certificate has been authorized. It\nis the client&#39;s responsibility to check the   tlsSocket.authorized   property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n  tlsSocket.authorized === false  , then the error can be found by examining the\n  tlsSocket.authorizationError   property. If either ALPN or NPN was used,\nthe   tlsSocket.alpnProtocol   or   tlsSocket.npnProtocol   properties can be\nchecked to determine the negotiated protocol.  \n  </section>	http://nodejs.org/api/all.html#all_tls.tlssocket_secureconnect
tls.TLSSocket secureConnect	R	tls.TLSSocket.secureConnect										http://nodejs.org/api/all.html#all_tls.tlssocket_secureconnect
tls TLSSocket secureConnect	R	tls.TLSSocket secureConnect										http://nodejs.org/api/all.html#all_tls tlssocket_secureconnect
tty	A										<section class="prog__container">    The   tty   module provides the   tty.ReadStream   and   tty.WriteStream   classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:  \n    const tty = require(&#39;tty&#39;);\n    \n  When Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\ncontext, the   process.stdin   will, by default, be initialized as an instance of\n  tty.ReadStream   and both   process.stdout   and   process.stderr   will, by\ndefault be instances of   tty.WriteStream  . The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe   process.stdout.isTTY   property is   true  :  \n    $ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n    \n  In most cases, there should be little to no reason for an application to\ncreate instances of the   tty.ReadStream   and   tty.WriteStream   classes.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tty
tty	A										<section class="prog__container">    The   tty   module provides the   tty.ReadStream   and   tty.WriteStream   classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:  \n    const tty = require(&#39;tty&#39;);\n    \n  When Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\ncontext, the   process.stdin   will, by default, be initialized as an instance of\n  tty.ReadStream   and both   process.stdout   and   process.stderr   will, by\ndefault be instances of   tty.WriteStream  . The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe   process.stdout.isTTY   property is   true  :  \n    $ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n    \n  In most cases, there should be little to no reason for an application to\ncreate instances of the   tty.ReadStream   and   tty.WriteStream   classes.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tty
tty.isatty	A										<section class="prog__container">    The   tty.isatty()   method returns   true   if the given   fd   is associated with\na TTY and   false   if is not.  \n  \n  \n  <pre><code>tty.isatty(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_tty_isatty_fd
tty isatty	R	tty.isatty										http://nodejs.org/api/all.html#all_tty_isatty_fd
tty.ReadStream	A										<section class="prog__container">    The   tty.ReadStream   class is a subclass of   net.Socket   that represents the\nreadable side of a TTY. In normal circumstances   process.stdin   will be the\nonly   tty.ReadStream   instance in a Node.js process and there should be no\nreason to create additional instances.  \n  </section>	http://nodejs.org/api/all.html#all_tty.readstream
tty ReadStream	R	tty.ReadStream										http://nodejs.org/api/all.html#all_tty readstream
tty.ReadStream.setRawMode	A										<section class="prog__container"><pre><code>readStream.setRawMode(mode)</code></pre></section>	http://nodejs.org/api/all.html#all_tty.readstream_setrawmode_mode
tty.ReadStream setRawMode	R	tty.ReadStream.setRawMode										http://nodejs.org/api/all.html#all_tty.readstream_setrawmode_mode
tty ReadStream setRawMode	R	tty.ReadStream setRawMode										http://nodejs.org/api/all.html#all_tty readstream_setrawmode_mode
tty.ReadStream.isRaw	A										<section class="prog__container">    A   boolean   that is   true   if the TTY is currently configured to operate as a\nraw device. Defaults to   false  .  \n  </section>	http://nodejs.org/api/all.html#all_tty.readstream_israw
tty.ReadStream isRaw	R	tty.ReadStream.isRaw										http://nodejs.org/api/all.html#all_tty.readstream_israw
tty ReadStream isRaw	R	tty.ReadStream isRaw										http://nodejs.org/api/all.html#all_tty readstream_israw
tty.WriteStream	A										<section class="prog__container">    The   tty.WriteStream   class is a subclass of   net.Socket   that represents the\nwritable side of a TTY. In normal circumstances,   process.stdout   and\n  process.stderr   will be the only   tty.WriteStream   instances created for a\nNode.js process and there should be no reason to create additional instances.  \n  </section>	http://nodejs.org/api/all.html#all_tty.writestream
tty WriteStream	R	tty.WriteStream										http://nodejs.org/api/all.html#all_tty writestream
tty.WriteStream.columns	A										<section class="prog__container">    A   number   specifying the number of columns the TTY currently has. This property\nis updated whenever the   &#39;resize&#39;   event is emitted.  \n  </section>	http://nodejs.org/api/all.html#all_tty.writestream_columns
tty.WriteStream columns	R	tty.WriteStream.columns										http://nodejs.org/api/all.html#all_tty.writestream_columns
tty WriteStream columns	R	tty.WriteStream columns										http://nodejs.org/api/all.html#all_tty writestream_columns
tty.WriteStream.rows	A										<section class="prog__container">    A   number   specifying the number of rows the TTY currently has. This property\nis updated whenever the   &#39;resize&#39;   event is emitted.  \n  </section>	http://nodejs.org/api/all.html#all_tty.writestream_rows
tty.WriteStream rows	R	tty.WriteStream.rows										http://nodejs.org/api/all.html#all_tty.writestream_rows
tty WriteStream rows	R	tty.WriteStream rows										http://nodejs.org/api/all.html#all_tty writestream_rows
tty.WriteStream.resize	A										<section class="prog__container">    The   &#39;resize&#39;   event is emitted whenever either of the   writeStream.columns  \nor   writeStream.rows   properties have changed. No arguments are passed to the\nlistener callback when called.  \n    process.stdout.on(&#39;resize&#39;, () =&gt; {\n  console.log(&#39;screen size has changed!&#39;);\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n    \n  </section>	http://nodejs.org/api/all.html#all_tty.writestream_resize
tty.WriteStream resize	R	tty.WriteStream.resize										http://nodejs.org/api/all.html#all_tty.writestream_resize
tty WriteStream resize	R	tty.WriteStream resize										http://nodejs.org/api/all.html#all_tty writestream_resize
url	A										<section class="prog__container">    The   url   module provides utilities for URL resolution and parsing. It can be\naccessed using:  \n    const url = require(&#39;url&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_url
url	A										<section class="prog__container">    The   url   module provides utilities for URL resolution and parsing. It can be\naccessed using:  \n    const url = require(&#39;url&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_url
url.format	A										<section class="prog__container">    The   url.format()   method returns a formatted URL string derived from\n  urlObject  .  \n  If   urlObject   is not an object or a string,   url.parse()   will throw a\n    TypeError    .  \n  The formatting process operates as follows:  \n  \n  A new empty string   result   is created.  \n  If   urlObject.protocol   is a string, it is appended as-is to   result  .  \n  Otherwise, if   urlObject.protocol   is not   undefined   and is not a string, an\n    Error     is thrown.  \n  For all string values of   urlObject.protocol   that   do not end   with an ASCII\ncolon (  :  ) character, the literal string   :   will be appended to   result  .  \n  If either the   urlObject.slashes   property is true,   urlObject.protocol  \nbegins with one of   http  ,   https  ,   ftp  ,   gopher  , or   file  , or\n  urlObject.protocol   is   undefined  , the literal string   //   will be appended\nto   result  .  \n  If the value of the   urlObject.auth   property is truthy, and either\n  urlObject.host   or   urlObject.hostname   are not   undefined  , the value of\n  urlObject.auth   will be coerced into a string and appended to   result  \n followed by the literal string   @  .  \n  If the   urlObject.host   property is   undefined   then:  \n  If the   urlObject.hostname   is a string, it is appended to   result  .  \n  Otherwise, if   urlObject.hostname   is not   undefined   and is not a string,\nan     Error     is thrown.  \n  If the   urlObject.port   property value is truthy, and   urlObject.hostname  \nis not   undefined  :  \n  The literal string   :   is appended to   result  , and  \n  The value of   urlObject.port   is coerced to a string and appended to\n  result  .  \n  \n  \n  \n  \n  Otherwise, if the   urlObject.host   property value is truthy, the value of\n  urlObject.host   is coerced to a string and appended to   result  .  \n  If the   urlObject.pathname   property is a string that is not an empty string:  \n  If the   urlObject.pathname     does not start   with an ASCII forward slash\n(  /  ), then the literal string &#39;/&#39; is appended to   result  .  \n  The value of   urlObject.pathname   is appended to   result  .  \n  \n  \n  Otherwise, if   urlObject.pathname   is not   undefined   and is not a string, an\n    Error     is thrown.  \n  If the   urlObject.search   property is   undefined   and if the   urlObject.query  \nproperty is an   Object  , the literal string   ?   is appended to   result  \nfollowed by the output of calling the     querystring     module&#39;s   stringify()  \nmethod passing the value of   urlObject.query  .  \n  Otherwise, if   urlObject.search   is a string:  \n  If the value of   urlObject.search     does not start   with the ASCII question\nmark (  ?  ) character, the literal string   ?   is appended to   result  .  \n  The value of   urlObject.search   is appended to   result  .  \n  \n  \n  Otherwise, if   urlObject.search   is not   undefined   and is not a string, an\n    Error     is thrown.  \n  If the   urlObject.hash   property is a string:  \n  If the value of   urlObject.hash     does not start   with the ASCII hash (  #  )\ncharacter, the literal string   #   is appended to   result  .  \n  The value of   urlObject.hash   is appended to   result  .  \n  \n  \n  Otherwise, if the   urlObject.hash   property is not   undefined   and is not a\nstring, an     Error     is thrown.  \n    result   is returned.  \n  \n  <pre><code>url.format(urlObject)</code></pre></section>	http://nodejs.org/api/all.html#all_url_format_urlobject
url format	R	url.format										http://nodejs.org/api/all.html#all_url_format_urlobject
url.parse	A										<section class="prog__container">    The   url.parse()   method takes a URL string, parses it, and returns a URL\nobject.  \n  <pre><code>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</code></pre></section>	http://nodejs.org/api/all.html#all_url_parse_urlstring_parsequerystring_slashesdenotehost
url parse	R	url.parse										http://nodejs.org/api/all.html#all_url_parse_urlstring_parsequerystring_slashesdenotehost
url.resolve	A										<section class="prog__container">    The   url.resolve()   method resolves a target URL relative to a base URL in a\nmanner similar to that of a Web browser resolving an anchor tag HREF.  \n  For example:  \n    url.resolve(&#39;/one/two/three&#39;, &#39;four&#39;)         // &#39;/one/two/four&#39;\nurl.resolve(&#39;http://example.com/&#39;, &#39;/one&#39;)    // &#39;http://example.com/one&#39;\nurl.resolve(&#39;http://example.com/one&#39;, &#39;/two&#39;) // &#39;http://example.com/two&#39;\n    \n  <pre><code>url.resolve(from, to)</code></pre></section>	http://nodejs.org/api/all.html#all_url_resolve_from_to
url resolve	R	url.resolve										http://nodejs.org/api/all.html#all_url_resolve_from_to
util	A										<section class="prog__container">    The   util   module is primarily designed to support the needs of Node.js&#39; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:  \n    const util = require(&#39;util&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_util
util	A										<section class="prog__container">    The   util   module is primarily designed to support the needs of Node.js&#39; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:  \n    const util = require(&#39;util&#39;);\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_util
util.debuglog	A										<section class="prog__container">    The   util.debuglog()   method is used to create a function that conditionally\nwrites debug messages to   stderr   based on the existence of the   NODE_DEBUG  \nenvironment variable.  If the   section   name appears within the value of that\nenvironment variable, then the returned function operates similar to\n    console.error()    .  If not, then the returned function is a no-op.  \n  For example:  \n    const util = require(&#39;util&#39;);\nconst debuglog = util.debuglog(&#39;foo&#39;);\n\ndebuglog(&#39;hello from foo [%d]&#39;, 123);\n    \n  If this program is run with   NODE_DEBUG=foo   in the environment, then\nit will output something like:  \n    FOO 3245: hello from foo [123]\n    \n  where   3245   is the process id.  If it is not run with that\nenvironment variable set, then it will not print anything.  \n  Multiple comma-separated   section   names may be specified in the   NODE_DEBUG  \nenvironment variable. For example:   NODE_DEBUG=fs,net,tls  .  \n  <pre><code>util.debuglog(section)</code></pre></section>	http://nodejs.org/api/all.html#all_util_debuglog_section
util debuglog	R	util.debuglog										http://nodejs.org/api/all.html#all_util_debuglog_section
util.deprecate	A										<section class="prog__container">    The   util.deprecate()   method wraps the given   function   or class in such a way that\nit is marked as deprecated.  \n    const util = require(&#39;util&#39;);\n\nexports.puts = util.deprecate(function() {\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\n    process.stdout.write(arguments[i] + &#39;\n&#39;);\n  }\n}, &#39;util.puts: Use console.log instead&#39;);\n    \n  When called,   util.deprecate()   will return a function that will emit a\n  DeprecationWarning   using the   process.on(&#39;warning&#39;)   event. By default,\nthis warning will be emitted and printed to   stderr   exactly once, the first\ntime it is called. After the warning is emitted, the wrapped   function  \nis called.  \n  If either the   --no-deprecation   or   --no-warnings   command line flags are\nused, or if the   process.noDeprecation   property is set to   true     prior   to\nthe first deprecation warning, the   util.deprecate()   method does nothing.  \n  If the   --trace-deprecation   or   --trace-warnings   command line flags are set,\nor the   process.traceDeprecation   property is set to   true  , a warning and a\nstack trace are printed to   stderr   the first time the deprecated function is\ncalled.  \n  If the   --throw-deprecation   command line flag is set, or the\n  process.throwDeprecation   property is set to   true  , then an exception will be\nthrown when the deprecated function is called.  \n  The   --throw-deprecation   command line flag and   process.throwDeprecation  \nproperty take precedence over   --trace-deprecation   and\n  process.traceDeprecation  .  \n  <pre><code>util.deprecate(function, string)</code></pre></section>	http://nodejs.org/api/all.html#all_util_deprecate_function_string
util deprecate	R	util.deprecate										http://nodejs.org/api/all.html#all_util_deprecate_function_string
util.format	A										<section class="prog__container">    The   util.format()   method returns a formatted string using the first argument\nas a   printf  -like format.  \n  The first argument is a string containing zero or more   placeholder   tokens.\nEach placeholder token is replaced with the converted value from the\ncorresponding argument. Supported placeholders are:  \n  \n    %s   - String.  \n    %d   - Number (both integer and float).  \n    %j   - JSON.  Replaced with the string   &#39;[Circular]&#39;   if the argument\ncontains circular references.  \n    %%   - single percent sign (  &#39;%&#39;  ). This does not consume an argument.  \n  \n  If the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.  \n    util.format(&#39;%s:%s&#39;, &#39;foo&#39;);\n// Returns: &#39;foo:%s&#39;\n    \n  If there are more arguments passed to the   util.format()   method than the\nnumber of placeholders, the extra arguments are coerced into strings (for\nobjects and symbols,   util.inspect()   is used) then concatenated to the\nreturned string, each delimited by a space.  \n    util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); // &#39;foo:bar baz&#39;\n    \n  If the first argument is not a format string then   util.format()   returns\na string that is the concatenation of all arguments separated by spaces.\nEach argument is converted to a string using   util.inspect()  .  \n    util.format(1, 2, 3); // &#39;1 2 3&#39;\n    \n  <pre><code>util.format(format[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_util_format_format_...args
util format	R	util.format										http://nodejs.org/api/all.html#all_util_format_format_...args
util.inherits	A										<section class="prog__container">      Note: usage of   util.inherits()   is discouraged. Please use the ES6   class   and\n  extends   keywords to get language level inheritance support. Also note that\nthe two styles are   semantically incompatible  .    \n  \n    constructor   {Function}  \n    superConstructor   {Function}  \n  \n  Inherit the prototype methods from one   constructor   into another.  The\nprototype of   constructor   will be set to a new object created from\n  superConstructor  .  \n  As an additional convenience,   superConstructor   will be accessible\nthrough the   constructor.super_   property.  \n    const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit(&#39;data&#39;, data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;It works!&#39;); // Received data: &quot;It works!&quot;\n    \n  ES6 example using   class   and   extends    \n    const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nclass MyStream extends EventEmitter {\n  constructor() {\n    super();\n  }\n  write(data) {\n    this.emit(&#39;data&#39;, data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;With ES6&#39;);\n    \n  <pre><code>util.inherits(constructor, superConstructor)</code></pre></section>	http://nodejs.org/api/all.html#all_util_inherits_constructor_superconstructor
util inherits	R	util.inherits										http://nodejs.org/api/all.html#all_util_inherits_constructor_superconstructor
util.inspect	A										<section class="prog__container">    The   util.inspect()   method returns a string representation of   object   that is\nprimarily useful for debugging. Additional   options   may be passed that alter\ncertain aspects of the formatted string.  \n  The following example inspects all properties of the   util   object:  \n    const util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n    \n  Values may supply their own custom   inspect(depth, opts)   functions, when\ncalled these receive the current   depth   in the recursive inspection, as well as\nthe options object passed to   util.inspect()  .  \n  <pre><code>util.inspect(object[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_util_inspect_object_options
util inspect	R	util.inspect										http://nodejs.org/api/all.html#all_util_inspect_object_options
v8	A										<section class="prog__container">    The   v8   module exposes APIs that are specific to the version of   V8  \nbuilt into the Node.js binary. It can be accessed using:  \n    const v8 = require(&#39;v8&#39;);\n    \n    Note  : The APIs and implementation are subject to change at any time.  \n  </section>	http://nodejs.org/api/all.html#all_v8
v8	A										<section class="prog__container">    The   v8   module exposes APIs that are specific to the version of   V8  \nbuilt into the Node.js binary. It can be accessed using:  \n    const v8 = require(&#39;v8&#39;);\n    \n    Note  : The APIs and implementation are subject to change at any time.  \n  </section>	http://nodejs.org/api/all.html#all_v8
v8.getHeapStatistics	A										<section class="prog__container">    Returns an object with the following properties:  \n  \n    total_heap_size   {number}  \n    total_heap_size_executable   {number}  \n    total_physical_size   {number}  \n    total_available_size   {number}  \n    used_heap_size   {number}  \n    heap_size_limit   {number}  \n    malloced_memory   {number}  \n    peak_malloced_memory   {number}  \n    does_zap_garbage   {number}  \n  \n    does_zap_garbage   is a 0/1 boolean, which signifies whether the   --zap_code_space  \noption is enabled or not. This makes V8 overwrite heap garbage with a bit\npattern. The RSS footprint (resident memory set) gets bigger because it\ncontinuously touches all heap pages and that makes them less likely to get\nswapped out by the operating system.  \n  For example:  \n    {\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0\n}\n    \n  <pre><code>v8.getHeapStatistics()</code></pre></section>	http://nodejs.org/api/all.html#all_v8_getheapstatistics
v8 getHeapStatistics	R	v8.getHeapStatistics										http://nodejs.org/api/all.html#all_v8_getheapstatistics
v8.getHeapSpaceStatistics	A										<section class="prog__container">    Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n    GetHeapSpaceStatistics     function and may change from one V8 version to the\nnext.  \n  The value returned is an array of objects containing the following properties:  \n  \n    space_name   {string}  \n    space_size   {number}  \n    space_used_size   {number}  \n    space_available_size   {number}  \n    physical_space_size   {number}  \n  \n  For example:  \n    [\n  {\n    &quot;space_name&quot;: &quot;new_space&quot;,\n    &quot;space_size&quot;: 2063872,\n    &quot;space_used_size&quot;: 951112,\n    &quot;space_available_size&quot;: 80824,\n    &quot;physical_space_size&quot;: 2063872\n  },\n  {\n    &quot;space_name&quot;: &quot;old_space&quot;,\n    &quot;space_size&quot;: 3090560,\n    &quot;space_used_size&quot;: 2493792,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 3090560\n  },\n  {\n    &quot;space_name&quot;: &quot;code_space&quot;,\n    &quot;space_size&quot;: 1260160,\n    &quot;space_used_size&quot;: 644256,\n    &quot;space_available_size&quot;: 960,\n    &quot;physical_space_size&quot;: 1260160\n  },\n  {\n    &quot;space_name&quot;: &quot;map_space&quot;,\n    &quot;space_size&quot;: 1094160,\n    &quot;space_used_size&quot;: 201608,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 1094160\n  },\n  {\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\n    &quot;space_size&quot;: 0,\n    &quot;space_used_size&quot;: 0,\n    &quot;space_available_size&quot;: 1490980608,\n    &quot;physical_space_size&quot;: 0\n  }\n]\n    \n  <pre><code>v8.getHeapSpaceStatistics()</code></pre></section>	http://nodejs.org/api/all.html#all_v8_getheapspacestatistics
v8 getHeapSpaceStatistics	R	v8.getHeapSpaceStatistics										http://nodejs.org/api/all.html#all_v8_getheapspacestatistics
v8.setFlagsFromString	A										<section class="prog__container">    The   v8.setFlagsFromString()   method can be used to programmatically set\nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.  \n  The V8 options available for a version of Node.js may be determined by running\n  node --v8-options  .  An unofficial, community-maintained list of options\nand their effects is available   here  .  \n  Usage:  \n    // Print GC events to stdout for one minute.\nconst v8 = require(&#39;v8&#39;);\nv8.setFlagsFromString(&#39;--trace_gc&#39;);\nsetTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);\n    \n  \n  \n  <pre><code>v8.setFlagsFromString(string)</code></pre></section>	http://nodejs.org/api/all.html#all_v8_setflagsfromstring_string
v8 setFlagsFromString	R	v8.setFlagsFromString										http://nodejs.org/api/all.html#all_v8_setflagsfromstring_string
vm	A										<section class="prog__container">    The   vm   module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:  \n    const vm = require(&#39;vm&#39;);\n    \n  JavaScript code can be compiled and run immediately or compiled, saved, and run\nlater.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_vm
vm	A										<section class="prog__container">    The   vm   module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:  \n    const vm = require(&#39;vm&#39;);\n    \n  JavaScript code can be compiled and run immediately or compiled, saved, and run\nlater.  \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_vm
vm.createContext	A										<section class="prog__container">    If given a   sandbox   object, the   vm.createContext()   method will   prepare\nthat sandbox   so that it can be used in calls to\n    vm.runInContext()     or     script.runInContext()    . Inside such scripts,\nthe   sandbox   object will be the global object, retaining all of its existing\nproperties but also having the built-in objects and functions any standard\n  global object   has. Outside of scripts run by the vm module,   sandbox   will\nremain unchanged.  \n  If   sandbox   is omitted (or passed explicitly as   undefined  ), a new, empty\n  contextified   sandbox object will be returned.  \n  The   vm.createContext()   method is primarily useful for creating a single\nsandbox that can be used to run multiple scripts. For instance, if emulating a\nweb browser, the method can be used to create a single sandbox representing a\nwindow&#39;s global object, then run all   &lt;script&gt;   tags together within the context\nof that sandbox.  \n  <pre><code>vm.createContext([sandbox])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_createcontext_sandbox
vm createContext	R	vm.createContext										http://nodejs.org/api/all.html#all_vm_createcontext_sandbox
vm.isContext	A										<section class="prog__container">    Returns   true   if the given   sandbox   object has been   contextified   using\n    vm.createContext()    .  \n  <pre><code>vm.isContext(sandbox)</code></pre></section>	http://nodejs.org/api/all.html#all_vm_iscontext_sandbox
vm isContext	R	vm.isContext										http://nodejs.org/api/all.html#all_vm_iscontext_sandbox
vm.runInContext	A										<section class="prog__container">    The   vm.runInContext()   method compiles   code  , runs it within the context of\nthe   contextifiedSandbox  , then returns the result. Running code does not have\naccess to the local scope. The   contextifiedSandbox   object   must   have been\npreviously   contextified   using the     vm.createContext()     method.  \n  The following example compiles and executes different scripts using a single\n  contextified   object:  \n    const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (var i = 0; i &lt; 10; ++i) {\n  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n    \n  <pre><code>vm.runInContext(code, contextifiedSandbox[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runincontext_code_contextifiedsandbox_options
vm runInContext	R	vm.runInContext										http://nodejs.org/api/all.html#all_vm_runincontext_code_contextifiedsandbox_options
vm.runInDebugContext	A										<section class="prog__container">    The   vm.runInDebugContext()   method compiles and executes   code   inside the V8\ndebug context. The primary use case is to gain access to the V8   Debug   object:  \n    const vm = require(&#39;vm&#39;);\nconst Debug = vm.runInDebugContext(&#39;Debug&#39;);\nconsole.log(Debug.findScript(process.emit).name);  // &#39;events.js&#39;\nconsole.log(Debug.findScript(process.exit).name);  // &#39;internal/process.js&#39;\n    \n    Note  : The debug context and object are intrinsically tied to V8&#39;s debugger\nimplementation and may change (or even be removed) without prior warning.  \n  The   Debug   object can also be made available using the V8-specific\n  --expose_debug_as=     command line option  .  \n  <pre><code>vm.runInDebugContext(code)</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runindebugcontext_code
vm runInDebugContext	R	vm.runInDebugContext										http://nodejs.org/api/all.html#all_vm_runindebugcontext_code
vm.runInNewContext	A										<section class="prog__container">    The   vm.runInNewContext()   first contextifies the given   sandbox   object (or\ncreates a new   sandbox   if passed as   undefined  ), compiles the   code  , runs it\nwithin the context of the created context, then returns the result. Running code\ndoes not have access to the local scope.  \n  The following example compiles and executes code that increments a global\nvariable and sets a new one. These globals are contained in the   sandbox  .  \n    const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }\n    \n  <pre><code>vm.runInNewContext(code[, sandbox][, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runinnewcontext_code_sandbox_options
vm runInNewContext	R	vm.runInNewContext										http://nodejs.org/api/all.html#all_vm_runinnewcontext_code_sandbox_options
vm.runInThisContext	A										<section class="prog__container">      vm.runInThisContext()   compiles   code  , runs it within the context of the\ncurrent   global   and returns the result. Running code does not have access to\nlocal scope, but does have access to the current   global   object.  \n  The following example illustrates using both   vm.runInThisContext()   and\nthe JavaScript     eval()     function to run the same code:  \n    const vm = require(&#39;vm&#39;);\nvar localVar = &#39;initial value&#39;;\n\nconst vmResult = vm.runInThisContext(&#39;localVar = &quot;vm&quot;;&#39;);\nconsole.log(&#39;vmResult:&#39;, vmResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\nconst evalResult = eval(&#39;localVar = &quot;eval&quot;;&#39;);\nconsole.log(&#39;evalResult:&#39;, evalResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\n// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;\n// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;\n    \n  Because   vm.runInThisContext()   does not have access to the local scope,\n  localVar   is unchanged. In contrast,     eval()       does   have access to the\nlocal scope, so the value   localVar   is changed. In this way\n  vm.runInThisContext()   is much like an   indirect   eval()   call  , e.g.\n  (0,eval)(&#39;code&#39;)  .  \n  Example: Running an HTTP Server within a VM  \n  When using either     script.runInThisContext()     or     vm.runInThisContext()    , the\ncode is executed within the current V8 global context. The code passed\nto this VM context will have its own isolated scope.  \n  In order to run a simple web server using the   http   module the code passed to\nthe context must either call   require(&#39;http&#39;)   on its own, or have a reference\nto the   http   module passed to it. For instance:  \n    &#39;use strict&#39;;\nconst vm = require(&#39;vm&#39;);\n\nlet code =\n`(function(require) {\n\n   const http = require(&#39;http&#39;);\n\n   http.createServer( (request, response) =&gt; {\n     response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n     response.end(&#39;Hello World\\n&#39;);\n   }).listen(8124);\n\n   console.log(&#39;Server running at http://127.0.0.1:8124/&#39;);\n })`;\n\n vm.runInThisContext(code)(require);\n    \n    Note  : The   require()   in the above case shares the state with context it is\npassed from. This may introduce risks when untrusted code is executed, e.g.\naltering objects from the calling thread&#39;s context in unwanted ways.  \n  <pre><code>vm.runInThisContext(code[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runinthiscontext_code_options
vm runInThisContext	R	vm.runInThisContext										http://nodejs.org/api/all.html#all_vm_runinthiscontext_code_options
vm.Script	A										<section class="prog__container">    Instances of the   vm.Script   class contain precompiled scripts that can be\nexecuted in specific sandboxes (or &quot;contexts&quot;).  \n  </section>	http://nodejs.org/api/all.html#all_vm.script
vm Script	R	vm.Script										http://nodejs.org/api/all.html#all_vm script
vm.Script.Script	A										<section class="prog__container">    Creating a new   vm.Script   object compiles   code   but does not run it. The\ncompiled   vm.Script   can be run later multiple times. It is important to note\nthat the   code   is not bound to any global object; rather, it is bound before\neach run, just for that run.  \n  <pre><code>new vm.Script(code, options)</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_script_code_options
vm.Script Script	R	vm.Script.Script										http://nodejs.org/api/all.html#all_vm.script_script_code_options
vm Script Script	R	vm.Script Script										http://nodejs.org/api/all.html#all_vm script_script_code_options
vm.Script.runInContext	A										<section class="prog__container">    Runs the compiled code contained by the   vm.Script   object within the given\n  contextifiedSandbox   and returns the result. Running code does not have access\nto local scope.  \n  The following example compiles code that increments a global variable, sets\nthe value of another global variable, then execute the code multiple times.\nThe globals are contained in the   sandbox   object.  \n    const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nconst script = new vm.Script(&#39;count += 1; name = &quot;kitty&quot;;&#39;);\n\nconst context = new vm.createContext(sandbox);\nfor (var i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 12, name: &#39;kitty&#39; }\n    \n  <pre><code>script.runInContext(contextifiedSandbox[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runincontext_contextifiedsandbox_options
vm.Script runInContext	R	vm.Script.runInContext										http://nodejs.org/api/all.html#all_vm.script_runincontext_contextifiedsandbox_options
vm Script runInContext	R	vm.Script runInContext										http://nodejs.org/api/all.html#all_vm script_runincontext_contextifiedsandbox_options
vm.Script.runInNewContext	A										<section class="prog__container">    First contextifies the given   sandbox  , runs the compiled code contained by\nthe   vm.Script   object within the created sandbox, and returns the result.\nRunning code does not have access to local scope.  \n  The following example compiles code that sets a global variable, then executes\nthe code multiple times in different contexts. The globals are set on and\ncontained within each individual   sandbox  .  \n    const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst script = new vm.Script(&#39;globalVar = &quot;set&quot;&#39;);\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }]\n    \n  <pre><code>script.runInNewContext([sandbox][, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runinnewcontext_sandbox_options
vm.Script runInNewContext	R	vm.Script.runInNewContext										http://nodejs.org/api/all.html#all_vm.script_runinnewcontext_sandbox_options
vm Script runInNewContext	R	vm.Script runInNewContext										http://nodejs.org/api/all.html#all_vm script_runinnewcontext_sandbox_options
vm.Script.runInThisContext	A										<section class="prog__container">    Runs the compiled code contained by the   vm.Script   within the context of the\ncurrent   global   object. Running code does not have access to local scope, but\n  does   have access to the current   global   object.  \n  The following example compiles code that increments a   global   variable then\nexecutes that code multiple times:  \n    const vm = require(&#39;vm&#39;);\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script(&#39;globalVar += 1&#39;, { filename: &#39;myfile.vm&#39; });\n\nfor (var i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n    \n  <pre><code>script.runInThisContext([options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runinthiscontext_options
vm.Script runInThisContext	R	vm.Script.runInThisContext										http://nodejs.org/api/all.html#all_vm.script_runinthiscontext_options
vm Script runInThisContext	R	vm.Script runInThisContext										http://nodejs.org/api/all.html#all_vm script_runinthiscontext_options
zlib	A										<section class="prog__container">    The   zlib   module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:  \n    const zlib = require(&#39;zlib&#39;);\n    \n  Compressing or decompressing a stream (such as a file) can be accomplished by\npiping the source stream data through a   zlib   stream into a destination stream:  \n    const gzip = zlib.createGzip();\nconst fs = require(&#39;fs&#39;);\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);\n    \n  It is also possible to compress or decompress data in a single step:  \n    const input = &#39;.................................&#39;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_zlib
zlib	A										<section class="prog__container">    The   zlib   module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:  \n    const zlib = require(&#39;zlib&#39;);\n    \n  Compressing or decompressing a stream (such as a file) can be accomplished by\npiping the source stream data through a   zlib   stream into a destination stream:  \n    const gzip = zlib.createGzip();\nconst fs = require(&#39;fs&#39;);\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);\n    \n  It is also possible to compress or decompress data in a single step:  \n    const input = &#39;.................................&#39;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n    \n  <p>Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_zlib
zlib.createDeflate	A										<section class="prog__container">    Returns a new   Deflate   object with an   options  .  \n  <pre><code>zlib.createDeflate([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createdeflate_options
zlib createDeflate	R	zlib.createDeflate										http://nodejs.org/api/all.html#all_zlib_createdeflate_options
zlib.createDeflateRaw	A										<section class="prog__container">    Returns a new   DeflateRaw   object with an   options  .  \n  <pre><code>zlib.createDeflateRaw([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createdeflateraw_options
zlib createDeflateRaw	R	zlib.createDeflateRaw										http://nodejs.org/api/all.html#all_zlib_createdeflateraw_options
zlib.createGunzip	A										<section class="prog__container">    Returns a new   Gunzip   object with an   options  .  \n  <pre><code>zlib.createGunzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_creategunzip_options
zlib createGunzip	R	zlib.createGunzip										http://nodejs.org/api/all.html#all_zlib_creategunzip_options
zlib.createGzip	A										<section class="prog__container">    Returns a new   Gzip   object with an   options  .  \n  <pre><code>zlib.createGzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_creategzip_options
zlib createGzip	R	zlib.createGzip										http://nodejs.org/api/all.html#all_zlib_creategzip_options
zlib.createInflate	A										<section class="prog__container">    Returns a new   Inflate   object with an   options  .  \n  <pre><code>zlib.createInflate([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createinflate_options
zlib createInflate	R	zlib.createInflate										http://nodejs.org/api/all.html#all_zlib_createinflate_options
zlib.createInflateRaw	A										<section class="prog__container">    Returns a new   InflateRaw   object with an   options  .  \n  <pre><code>zlib.createInflateRaw([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createinflateraw_options
zlib createInflateRaw	R	zlib.createInflateRaw										http://nodejs.org/api/all.html#all_zlib_createinflateraw_options
zlib.createUnzip	A										<section class="prog__container">    Returns a new   Unzip   object with an   options  .  \n  <pre><code>zlib.createUnzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createunzip_options
zlib createUnzip	R	zlib.createUnzip										http://nodejs.org/api/all.html#all_zlib_createunzip_options
zlib.constants	A										<section class="prog__container">    Provides an object enumerating Zlib-related constants.  \n  </section>	http://nodejs.org/api/all.html#all_zlib_constants
zlib constants	R	zlib.constants										http://nodejs.org/api/all.html#all_zlib_constants
zlib.Deflate	A										<section class="prog__container">    Compress data using deflate.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.deflate
zlib Deflate	R	zlib.Deflate										http://nodejs.org/api/all.html#all_zlib deflate
zlib.DeflateRaw	A										<section class="prog__container">    Compress data using deflate, and do not append a   zlib   header.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.deflateraw
zlib DeflateRaw	R	zlib.DeflateRaw										http://nodejs.org/api/all.html#all_zlib deflateraw
zlib.Gunzip	A										<section class="prog__container">    Decompress a gzip stream.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.gunzip
zlib Gunzip	R	zlib.Gunzip										http://nodejs.org/api/all.html#all_zlib gunzip
zlib.Gzip	A										<section class="prog__container">    Compress data using gzip.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.gzip
zlib Gzip	R	zlib.Gzip										http://nodejs.org/api/all.html#all_zlib gzip
zlib.Inflate	A										<section class="prog__container">    Decompress a deflate stream.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.inflate
zlib Inflate	R	zlib.Inflate										http://nodejs.org/api/all.html#all_zlib inflate
zlib.InflateRaw	A										<section class="prog__container">    Decompress a raw deflate stream.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.inflateraw
zlib InflateRaw	R	zlib.InflateRaw										http://nodejs.org/api/all.html#all_zlib inflateraw
zlib.Unzip	A										<section class="prog__container">    Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.unzip
zlib Unzip	R	zlib.Unzip										http://nodejs.org/api/all.html#all_zlib unzip
zlib.Zlib	A										<section class="prog__container">    Not exported by the   zlib   module. It is documented here because it is the base\nclass of the compressor/decompressor classes.  \n  </section>	http://nodejs.org/api/all.html#all_zlib.zlib
zlib Zlib	R	zlib.Zlib										http://nodejs.org/api/all.html#all_zlib zlib
zlib.Zlib.flush	A										<section class="prog__container">      kind   defaults to   zlib.constants.Z_FULL_FLUSH  .  \n  Flush pending data. Don&#39;t call this frivolously, premature flushes negatively\nimpact the effectiveness of the compression algorithm.  \n  Calling this only flushes data from the internal   zlib   state, and does not\nperform flushing of any kind on the streams level. Rather, it behaves like a\nnormal call to   .write()  , i.e. it will be queued up behind other pending\nwrites and will only produce output when data is being read from the stream.  \n  <pre><code>zlib.flush([kind], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_flush_kind_callback
zlib.Zlib flush	R	zlib.Zlib.flush										http://nodejs.org/api/all.html#all_zlib.zlib_flush_kind_callback
zlib Zlib flush	R	zlib.Zlib flush										http://nodejs.org/api/all.html#all_zlib zlib_flush_kind_callback
zlib.Zlib.params	A										<section class="prog__container">    Dynamically update the compression level and compression strategy.\nOnly applicable to deflate algorithm.  \n  <pre><code>zlib.params(level, strategy, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_params_level_strategy_callback
zlib.Zlib params	R	zlib.Zlib.params										http://nodejs.org/api/all.html#all_zlib.zlib_params_level_strategy_callback
zlib Zlib params	R	zlib.Zlib params										http://nodejs.org/api/all.html#all_zlib zlib_params_level_strategy_callback
zlib.Zlib.reset	A										<section class="prog__container">    Reset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.  \n  <pre><code>zlib.reset()</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_reset
zlib.Zlib reset	R	zlib.Zlib.reset										http://nodejs.org/api/all.html#all_zlib.zlib_reset
zlib Zlib reset	R	zlib.Zlib reset										http://nodejs.org/api/all.html#all_zlib zlib_reset
