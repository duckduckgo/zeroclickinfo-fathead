Buffer	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{Function}</li>\n</ul>\nUsed to handle binary data. See the buffer section.\n</section>	http://nodejs.org/api/all.html#all_buffer
clearImmediate	A										<section class="prog__container"><p id="obj.desc"><code>clearImmediate</code> is described in the timers section.\n</section>	http://nodejs.org/api/all.html#all_clearimmediate
clearInterval	A										<section class="prog__container"><p id="obj.desc"><code>clearInterval</code> is described in the timers section.\n</section>	http://nodejs.org/api/all.html#all_clearinterval
clearTimeout	A										<section class="prog__container"><p id="obj.desc"><code>clearTimeout</code> is described in the timers section.\n</section>	http://nodejs.org/api/all.html#all_cleartimeout
global	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{Object} The global namespace object.</li>\n</ul>\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope <code>var something</code> will define a global\nvariable. In Node.js this is different. The top-level scope is not the global\nscope; <code>var something</code> inside an Node.js module will be local to that module.\n</section>	http://nodejs.org/api/all.html#all_global
setImmediate	A										<section class="prog__container"><p id="obj.desc"><code>setImmediate</code> is described in the timers section.\n</section>	http://nodejs.org/api/all.html#all_setimmediate
setInterval	A										<section class="prog__container"><p id="obj.desc"><code>setInterval</code> is described in the timers section.\n</section>	http://nodejs.org/api/all.html#all_setinterval
setTimeout	A										<section class="prog__container"><p id="obj.desc"><code>setTimeout</code> is described in the timers section.\n<!-- [end-include:globals.md] -->\n<!-- [start-include:http.md] -->\n</section>	http://nodejs.org/api/all.html#all_settimeout
process	A										<section class="prog__container"><p id="obj.desc">The <code>process</code> object is a <code>global</code> that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using <code>require()</code>.\n</section>	http://nodejs.org/api/all.html#all_process
process.abort	A										<section class="prog__container"><p id="obj.desc">The <code>process.abort()</code> method causes the Node.js process to exit immediately and\ngenerate a core file.\n<pre><code>process.abort()</code></pre></section>	http://nodejs.org/api/all.html#all_process_abort
process abort	R	process.abort										http://nodejs.org/api/all.html#all_process_abort
process.chdir	A										<section class="prog__container"><p id="obj.desc">The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).\n<pre><code class="lang-js">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(`New directory: ${process.cwd()}`);\n}\ncatch (err) {\n  console.log(`chdir: ${err}`);\n}\n</code></pre>\n<pre><code>process.chdir(directory)</code></pre></section>	http://nodejs.org/api/all.html#all_process_chdir_directory
process chdir	R	process.chdir										http://nodejs.org/api/all.html#all_process_chdir_directory
process.cpuUsage	A										<section class="prog__container"><p id="obj.desc">The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.\nThe result of a previous call to <code>process.cpuUsage()</code> can be passed as the\nargument to the function, to get a diff reading.\n<pre><code class="lang-js">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</code></pre>\n<pre><code>process.cpuUsage([previousValue])</code></pre></section>	http://nodejs.org/api/all.html#all_process_cpuusage_previousvalue
process cpuUsage	R	process.cpuUsage										http://nodejs.org/api/all.html#all_process_cpuusage_previousvalue
process.cwd	A										<section class="prog__container"><p id="obj.desc">The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.\n<pre><code class="lang-js">console.log(`Current directory: ${process.cwd()}`);\n</code></pre>\n<pre><code>process.cwd()</code></pre></section>	http://nodejs.org/api/all.html#all_process_cwd
process cwd	R	process.cwd										http://nodejs.org/api/all.html#all_process_cwd
process.disconnect	A										<section class="prog__container"><p id="obj.desc">If the Node.js process is spawned with an IPC channel (see the Child Process\nand Cluster documentation), the <code>process.disconnect()</code> method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.\nThe effect of calling <code>process.disconnect()</code> is that same as calling the parent\nprocess&#39;s <code>ChildProcess.disconnect()</code>.\nIf the Node.js process was not spawned with an IPC channel,\n<code>process.disconnect()</code> will be <code>undefined</code>.\n<pre><code>process.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_process_disconnect
process disconnect	R	process.disconnect										http://nodejs.org/api/all.html#all_process_disconnect
process.emitWarning	A										<section class="prog__container"><p id="obj.desc">The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<code>process.on(&#39;warning&#39;)</code> event.\n<pre><code class="lang-js">// Emit a warning using a string...\nprocess.emitWarning(&#39;Something happened!&#39;);\n// Emits: (node: 56338) Warning: Something happened!\n</code></pre>\n<pre><code class="lang-js">// Emit a warning using a string and a name...\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n// Emits: (node:56338) CustomWarning: Something Happened!\n</code></pre>\nIn each of the previous examples, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the\n<code>process.on(&#39;warning&#39;)</code> event.\n<pre><code class="lang-js">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.stack);\n});\n</code></pre>\nIf <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\n<code>process.on(&#39;warning&#39;)</code> event handler unmodified (and the optional <code>name</code>\nand <code>ctor</code> arguments will be ignored):\n<pre><code class="lang-js">// Emit a warning using an Error object...\nconst myWarning = new Error(&#39;Warning! Something happened!&#39;);\nmyWarning.name = &#39;CustomWarning&#39;;\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) CustomWarning: Warning! Something Happened!\n</code></pre>\nA <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\nobject.\nNote that while process warnings use <code>Error</code> objects, the process warning\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.\nThe following additional handling is implemented if the warning <code>name</code> is\n<code>DeprecationWarning</code>:\n<ul>\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\nwarning is thrown as an exception rather than being emitted as an event.</li>\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\nwarning is suppressed.</li>\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\n</ul>\n<pre><code>process.emitWarning(warning[, name][, ctor])</code></pre></section>	http://nodejs.org/api/all.html#all_process_emitwarning_warning_name_ctor
process emitWarning	R	process.emitWarning										http://nodejs.org/api/all.html#all_process_emitwarning_warning_name_ctor
process.exit	A										<section class="prog__container"><p id="obj.desc">The <code>process.exit()</code> method instructs Node.js to terminate the process as\nquickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,\nexit uses either the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if\nspecified.\nTo exit with a &#39;failure&#39; code:\n<pre><code class="lang-js">process.exit(1);\n</code></pre>\nThe shell that executed Node.js should see the exit code as <code>1</code>.\nIt is important to note that calling <code>process.exit()</code> will force the process to\nexit as quickly as possible <em>even if there are still asynchronous operations\npending</em> that have not yet completed fully, <em>including</em> I/O operations to\n<code>process.stdout</code> and <code>process.stderr</code>.\nIn most situations, it is not actually necessary to call <code>process.exit()</code>\nexplicitly. The Node.js process will exit on it&#39;s own <em>if there is no additional\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\ntell the process which exit code to use when the process exits gracefully.\nFor instance, the following example illustrates a <em>misuse</em> of the\n<code>process.exit()</code> method that could lead to data printed to stdout being\ntruncated and lost:\n<pre><code class="lang-js">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</code></pre>\nThe reason this is problematic is because writes to <code>process.stdout</code> in Node.js\nare sometimes <em>non-blocking</em> and may occur over multiple ticks of the Node.js\nevent loop. Calling <code>process.exit()</code>, however, forces the process to exit\n<em>before</em> those additional writes to <code>stdout</code> can be performed.\nRather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:\n<pre><code class="lang-js">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</code></pre>\nIf it is necessary to terminate the Node.js process due to an error condition,\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\nis safer than calling <code>process.exit()</code>.\n<pre><code>process.exit([code])</code></pre></section>	http://nodejs.org/api/all.html#all_process_exit_code
process exit	R	process.exit										http://nodejs.org/api/all.html#all_process_exit_code
process.getegid	A										<section class="prog__container"><p id="obj.desc">The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)\n<pre><code class="lang-js">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows\nor Android)\n<pre><code>process.getegid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getegid
process getegid	R	process.getegid										http://nodejs.org/api/all.html#all_process_getegid
process.geteuid	A										<section class="prog__container"><p id="obj.desc">The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See geteuid(2).)\n<pre><code class="lang-js">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.geteuid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_geteuid
process geteuid	R	process.geteuid										http://nodejs.org/api/all.html#all_process_geteuid
process.getgid	A										<section class="prog__container"><p id="obj.desc">The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See getgid(2).)\n<pre><code class="lang-js">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.getgid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getgid
process getgid	R	process.getgid										http://nodejs.org/api/all.html#all_process_getgid
process.getgroups	A										<section class="prog__container"><p id="obj.desc">The <code>process.getgroups()</code> method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.getgroups()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getgroups
process getgroups	R	process.getgroups										http://nodejs.org/api/all.html#all_process_getgroups
process.getuid	A										<section class="prog__container"><p id="obj.desc">The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See getuid(2).)\n<pre><code class="lang-js">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.getuid()</code></pre></section>	http://nodejs.org/api/all.html#all_process_getuid
process getuid	R	process.getuid										http://nodejs.org/api/all.html#all_process_getuid
process.hrtime	A										<section class="prog__container"><p id="obj.desc">The <code>process.hrtime()</code> method returns the current high-resolution real time in a\n<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must\nbe the result of a previous <code>process.hrtime()</code> call (and therefore, a real time\nin a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff\nwith the current time. These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals.\nPassing in the result of a previous call to <code>process.hrtime()</code> is useful for\ncalculating an amount of time passed between calls:\n<pre><code class="lang-js">var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);\n</code></pre>\nConstructing an array by some method other than calling <code>process.hrtime()</code> and\npassing the result to process.hrtime() will result in undefined behavior.\n<pre><code>process.hrtime([time])</code></pre></section>	http://nodejs.org/api/all.html#all_process_hrtime_time
process hrtime	R	process.hrtime										http://nodejs.org/api/all.html#all_process_hrtime_time
process.initgroups	A										<section class="prog__container"><p id="obj.desc">The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have <code>root</code>\naccess or the <code>CAP_SETGID</code> capability.\nNote that care must be taken when dropping privileges. Example:\n<pre><code class="lang-js">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.initgroups(user, extra_group)</code></pre></section>	http://nodejs.org/api/all.html#all_process_initgroups_user_extra_group
process initgroups	R	process.initgroups										http://nodejs.org/api/all.html#all_process_initgroups_user_extra_group
process.kill	A										<section class="prog__container"><p id="obj.desc">The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\n<code>pid</code>.\nSignal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See Signal Events\nand kill(2) for more information.\nThis method will throw an error if the target <code>pid</code> does not exist. As a special\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\ngroup.\n<em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really\njust a signal sender, like the <code>kill</code> system call.  The signal sent may do\nsomething other than kill the target process.\nFor example:\n<pre><code class="lang-js">process.on(&#39;SIGHUP&#39;, () =&gt; {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\n</code></pre>\n<em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\ndebugger, see Signal Events.\n<pre><code>process.kill(pid[, signal])</code></pre></section>	http://nodejs.org/api/all.html#all_process_kill_pid_signal
process kill	R	process.kill										http://nodejs.org/api/all.html#all_process_kill_pid_signal
process.memoryUsage	A										<section class="prog__container"><p id="obj.desc">The <code>process.memoryUsage()</code> method returns an object describing the memory usage\nof the Node.js process measured in bytes.\nFor example, the code:\n<pre><code class="lang-js">console.log(process.memoryUsage());\n</code></pre>\nWill generate:\n<pre><code class="lang-js">{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n</code></pre>\n<code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.\n<code>external</code> refers to the memory usage of C++ objects bound to JavaScript\nobjects managed by V8.\n<pre><code>process.memoryUsage()</code></pre></section>	http://nodejs.org/api/all.html#all_process_memoryusage
process memoryUsage	R	process.memoryUsage										http://nodejs.org/api/all.html#all_process_memoryusage
process.nextTick	A										<section class="prog__container"><p id="obj.desc">The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.\nThis is <em>not</em> a simple alias to <code>setTimeout(fn, 0)</code>, it&#39;s much more\nefficient.  It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.\n<pre><code class="lang-js">console.log(&#39;start&#39;);\nprocess.nextTick(() =&gt; {\n  console.log(&#39;nextTick callback&#39;);\n});\nconsole.log(&#39;scheduled&#39;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n</code></pre>\nThis is important when developing APIs in order to give users the opportunity\nto assign event handlers <em>after</em> an object has been constructed but before any\nI/O has occurred:\n<pre><code class="lang-js">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</code></pre>\nIt is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n<pre><code class="lang-js">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\nThis API is hazardous because in the following case:\n<pre><code class="lang-js">maybeSync(true, () =&gt; {\n  foo();\n});\nbar();\n</code></pre>\nIt is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.\nThe following approach is much better:\n<pre><code class="lang-js">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<em>Note</em>: the next tick queue is completely drained on each pass of the\nevent loop <strong>before</strong> additional I/O is processed.  As a result,\nrecursively setting nextTick callbacks will block any I/O from\nhappening, just like a <code>while(true);</code> loop.\n<pre><code>process.nextTick(callback[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_process_nexttick_callback_...args
process nextTick	R	process.nextTick										http://nodejs.org/api/all.html#all_process_nexttick_callback_...args
process.send	A										<section class="prog__container"><p id="obj.desc">If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\nused to send messages to the parent process. Messages will be received as a\n<code>&#39;message&#39;</code> event on the parent&#39;s <code>ChildProcess</code> object.\nIf Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\n<code>undefined</code>.\n<em>Note</em>: This function uses <code>JSON.stringify()</code> internally to serialize the\n<code>message</code>.*\n<pre><code>process.send(message[, sendHandle[, options]][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_process_send_message_sendhandle_options_callback
process send	R	process.send										http://nodejs.org/api/all.html#all_process_send_message_sendhandle_options_callback
process.setegid	A										<section class="prog__container"><p id="obj.desc">The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.\n<pre><code class="lang-js">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.setegid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setegid_id
process setegid	R	process.setegid										http://nodejs.org/api/all.html#all_process_setegid_id
process.seteuid	A										<section class="prog__container"><p id="obj.desc">The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\nstring.  If a username is specified, the method blocks while resolving the\nassociated numeric ID.\n<pre><code class="lang-js">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.seteuid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_seteuid_id
process seteuid	R	process.seteuid										http://nodejs.org/api/all.html#all_process_seteuid_id
process.setgid	A										<section class="prog__container"><p id="obj.desc">The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.\n<pre><code class="lang-js">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.setgid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setgid_id
process setgid	R	process.setgid										http://nodejs.org/api/all.html#all_process_setgid_id
process.setgroups	A										<section class="prog__container"><p id="obj.desc">The <code>process.setgroups()</code> method sets the supplementary group IDs for the\nNode.js process. This is a privileged operation that requires the Node.js process\nto have <code>root</code> or the <code>CAP_SETGID</code> capability.\nThe <code>groups</code> array can contain numeric group IDs, group names or both.\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.setgroups(groups)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setgroups_groups
process setgroups	R	process.setgroups										http://nodejs.org/api/all.html#all_process_setgroups_groups
process.setuid	A										<section class="prog__container"><p id="obj.desc">The <code>process.setuid(id)</code> method sets the user identity of the process. (See\nsetuid(2).)  The <code>id</code> can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.\n<pre><code class="lang-js">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)\n<pre><code>process.setuid(id)</code></pre></section>	http://nodejs.org/api/all.html#all_process_setuid_id
process setuid	R	process.setuid										http://nodejs.org/api/all.html#all_process_setuid_id
process.umask	A										<section class="prog__container"><p id="obj.desc">The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\ncreation mask. Child processes inherit the mask from the parent process. The old\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\nmask.\n<pre><code class="lang-js">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</code></pre>\n<pre><code>process.umask([mask])</code></pre></section>	http://nodejs.org/api/all.html#all_process_umask_mask
process umask	R	process.umask										http://nodejs.org/api/all.html#all_process_umask_mask
process.uptime	A										<section class="prog__container"><p id="obj.desc">The <code>process.uptime()</code> method returns the number of seconds the current Node.js\nprocess has been running.\n<pre><code>process.uptime()</code></pre></section>	http://nodejs.org/api/all.html#all_process_uptime
process uptime	R	process.uptime										http://nodejs.org/api/all.html#all_process_uptime
process.arch	A										<section class="prog__container"><p id="obj.desc">The <code>process.arch</code> property returns a String identifying the processor\narchitecture that the Node.js process is currently running on. For instance\n<code>&#39;arm&#39;</code>, <code>&#39;ia32&#39;</code>, or <code>&#39;x64&#39;</code>.\n<pre><code class="lang-js">console.log(`This processor architecture is ${process.arch}`);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_arch
process arch	R	process.arch										http://nodejs.org/api/all.html#all_process_arch
process.argv	A										<section class="prog__container"><p id="obj.desc">The <code>process.argv</code> property returns an array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe <code>process.execPath</code>. See <code>process.argv0</code> if access to the original value of\n<code>argv[0]</code> is needed.  The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command line\narguments.\nFor example, assuming the following script for <code>process-args.js</code>:\n<pre><code class="lang-js">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</code></pre>\nLaunching the Node.js process as:\n<pre><code class="lang-console">$ node process-2.js one two=three four\n</code></pre>\nWould generate the output:\n<pre><code class="lang-text">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_argv
process argv	R	process.argv										http://nodejs.org/api/all.html#all_process_argv
process.argv0	A										<section class="prog__container"><p id="obj.desc">The <code>process.argv0</code> property stores a read-only copy of the original value of\n<code>argv[0]</code> passed when Node.js starts.\n<pre><code class="lang-console">$ bash -c &#39;exec -a customArgv0 ./node&#39;\n&gt; process.argv[0]\n&#39;/Volumes/code/external/node/out/Release/node&#39;\n&gt; process.argv0\n&#39;customArgv0&#39;\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_argv0
process argv0	R	process.argv0										http://nodejs.org/api/all.html#all_process_argv0
process.channel	A										<section class="prog__container"><p id="obj.desc">If the Node.js process was spawned with an IPC channel (see the\nChild Process documentation), the <code>process.channel</code>\nproperty is a reference to the IPC channel. If no IPC channel exists, this\nproperty is <code>undefined</code>.\n</section>	http://nodejs.org/api/all.html#all_process_channel
process channel	R	process.channel										http://nodejs.org/api/all.html#all_process_channel
process.config	A										<section class="prog__container"><p id="obj.desc">The <code>process.config</code> property returns an Object containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\nrunning the <code>./configure</code> script.\nAn example of the possible output looks like:\n<pre><code class="lang-js">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39;\n   }\n}\n</code></pre>\n<em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are\nexisting modules in the ecosystem that are known to extend, modify, or entirely\nreplace the value of <code>process.config</code>.\n</section>	http://nodejs.org/api/all.html#all_process_config
process config	R	process.config										http://nodejs.org/api/all.html#all_process_config
process.connected	A										<section class="prog__container"><p id="obj.desc">If the Node.js process is spawned with an IPC channel (see the Child Process\nand Cluster documentation), the <code>process.connected</code> property will return\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\n<code>process.disconnect()</code> is called.\nOnce <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\nover the IPC channel using <code>process.send()</code>.\n</section>	http://nodejs.org/api/all.html#all_process_connected
process connected	R	process.connected										http://nodejs.org/api/all.html#all_process_connected
process.env	A										<section class="prog__container"><p id="obj.desc">The <code>process.env</code> property returns an object containing the user environment.\nSee environ(7).\nAn example of this object looks like:\n<pre><code class="lang-js">{\n  TERM: &#39;xterm-256color&#39;,\n  SHELL: &#39;/usr/local/bin/bash&#39;,\n  USER: &#39;maciej&#39;,\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\n  PWD: &#39;/Users/maciej&#39;,\n  EDITOR: &#39;vim&#39;,\n  SHLVL: &#39;1&#39;,\n  HOME: &#39;/Users/maciej&#39;,\n  LOGNAME: &#39;maciej&#39;,\n  _: &#39;/usr/local/bin/node&#39;\n}\n</code></pre>\nIt is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:\n<pre><code class="lang-console">$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\n</code></pre>\nWhile the following will:\n<pre><code class="lang-js">process.env.foo = &#39;bar&#39;;\nconsole.log(process.env.foo);\n</code></pre>\nAssigning a property on <code>process.env</code> will implicitly convert the value\nto a string.\nExample:\n<pre><code class="lang-js">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &#39;null&#39;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &#39;undefined&#39;\n</code></pre>\nUse <code>delete</code> to delete a property from <code>process.env</code>.\nExample:\n<pre><code class="lang-js">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</code></pre>\nOn Windows operating systems, environment variables are case-insensitive.\nExample:\n<pre><code class="lang-js">process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_env
process env	R	process.env										http://nodejs.org/api/all.html#all_process_env
process.execArgv	A										<section class="prog__container"><p id="obj.desc">The <code>process.execArgv</code> property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the <code>process.argv</code> property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.\nFor example:\n<pre><code class="lang-console">$ node --harmony script.js --version\n</code></pre>\nResults in <code>process.execArgv</code>:\n<pre><code class="lang-js">[&#39;--harmony&#39;]\n</code></pre>\nAnd <code>process.argv</code>:\n<pre><code class="lang-js">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_execargv
process execArgv	R	process.execArgv										http://nodejs.org/api/all.html#all_process_execargv
process.execPath	A										<section class="prog__container"><p id="obj.desc">The <code>process.execPath</code> property returns the absolute pathname of the executable\nthat started the Node.js process.\nFor example:\n<pre><code class="lang-js">&#39;/usr/local/bin/node&#39;\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_execpath
process execPath	R	process.execPath										http://nodejs.org/api/all.html#all_process_execpath
process.exitCode	A										<section class="prog__container"><p id="obj.desc">A number which will be the process exit code, when the process either\nexits gracefully, or is exited via <code>process.exit()</code> without specifying\na code.\nSpecifying a code to <code>process.exit(code)</code> will override any\nprevious setting of <code>process.exitCode</code>.\n</section>	http://nodejs.org/api/all.html#all_process_exitcode
process exitCode	R	process.exitCode										http://nodejs.org/api/all.html#all_process_exitcode
process.mainModule	A										<section class="prog__container"><p id="obj.desc">The <code>process.mainModule</code> property provides an alternative way of retrieving\n<code>require.main</code>. The difference is that if the main module changes at\nruntime, <code>require.main</code> may still refer to the original main module in\nmodules that were required before the change occurred. Generally it&#39;s\nsafe to assume that the two refer to the same module.\nAs with <code>require.main</code>, <code>process.mainModule</code> will be <code>undefined</code> if there\nis no entry script.\n</section>	http://nodejs.org/api/all.html#all_process_mainmodule
process mainModule	R	process.mainModule										http://nodejs.org/api/all.html#all_process_mainmodule
process.pid	A										<section class="prog__container"><p id="obj.desc">The <code>process.pid</code> property returns the PID of the process.\n<pre><code class="lang-js">console.log(`This process is pid ${process.pid}`);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_pid
process pid	R	process.pid										http://nodejs.org/api/all.html#all_process_pid
process.platform	A										<section class="prog__container"><p id="obj.desc">The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running. For instance\n<code>&#39;darwin&#39;</code>, <code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code>\n<pre><code class="lang-js">console.log(`This platform is ${process.platform}`);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_platform
process platform	R	process.platform										http://nodejs.org/api/all.html#all_process_platform
process.release	A										<section class="prog__container"><p id="obj.desc">The <code>process.release</code> property returns an Object containing metadata related to\nthe current release, including URLs for the source tarball and headers-only\ntarball.\n<code>process.release</code> contains the following properties:\n<ul>\n<li><code>name</code> {String} A value that will always be <code>&#39;node&#39;</code> for Node.js. For\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\n<li><code>sourceUrl</code> {String} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nthe source code of the current release.</li>\n<li><code>headersUrl</code>{String} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nonly the source header files for the current release. This file is\nsignificantly smaller than the full source file and can be used for compiling\nNode.js native add-ons.</li>\n<li><code>libUrl</code> {String} an absolute URL pointing to a <em><code>node.lib</code></em> file matching the\narchitecture and version of the current release. This file is used for\ncompiling Node.js native add-ons. <em>This property is only present on Windows\nbuilds of Node.js and will be missing on all other platforms.</em></li>\n<li><code>lts</code> {String} a string label identifying the LTS label for this release.\nIf the Node.js release is not an LTS release, this will be <code>undefined</code>.</li>\n</ul>\nFor example:\n<pre><code class="lang-js">{\n  name: &#39;node&#39;,\n  lts: &#39;Argon&#39;,\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\n}\n</code></pre>\nIn custom builds from non-release versions of the source tree, only the\n<code>name</code> property may be present. The additional properties should not be\nrelied upon to exist.\n</section>	http://nodejs.org/api/all.html#all_process_release
process release	R	process.release										http://nodejs.org/api/all.html#all_process_release
process.stderr	A										<section class="prog__container"><p id="obj.desc">The <code>process.stderr</code> property returns a Writable stream equivalent to or\nassociated with <code>stderr</code> (fd <code>2</code>).\nNote: <code>process.stderr</code> and <code>process.stdout</code> differ from other Node.js streams\nin several ways:\n<ol>\n<li>They cannot be closed (<code>end()</code> will throw).</li>\n<li>They never emit the <code>&#39;finish&#39;</code> event.</li>\n<li>Writes <em>can</em> block when output is redirected to a file.<ul>\n<li>Note that disks are fast and operating systems normally employ write-back\ncaching so this is very uncommon.</li>\n</ul>\n</li>\n<li>Writes on UNIX <strong>will</strong> block by default if output is going to a TTY\n(a terminal).</li>\n<li>Windows functionality differs. Writes block except when output is going to a\nTTY.</li>\n</ol>\nTo check if Node.js is being run in a TTY context, read the <code>isTTY</code> property\non <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:\n</section>	http://nodejs.org/api/all.html#all_process_stderr
process stderr	R	process.stderr										http://nodejs.org/api/all.html#all_process_stderr
process.stdin	A										<section class="prog__container"><p id="obj.desc">The <code>process.stdin</code> property returns a Readable stream equivalent to or\nassociated with <code>stdin</code> (fd <code>0</code>).\nFor example:\n<pre><code class="lang-js">process.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\n  process.stdout.write(&#39;end&#39;);\n});\n</code></pre>\nAs a Readable stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\nis compatible with scripts written for Node.js prior to v0.10.\nFor more information see Stream compatibility.\n<em>Note</em>: In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.\n</section>	http://nodejs.org/api/all.html#all_process_stdin
process stdin	R	process.stdin										http://nodejs.org/api/all.html#all_process_stdin
process.stdout	A										<section class="prog__container"><p id="obj.desc">The <code>process.stdout</code> property returns a Writable stream equivalent to or\nassociated with <code>stdout</code> (fd <code>1</code>).\nFor example:\n<pre><code class="lang-js">console.log = (msg) =&gt; {\n  process.stdout.write(`${msg}\n`);\n};\n</code></pre>\nNote: <code>process.stderr</code> and <code>process.stdout</code> differ from other Node.js streams\nin several ways:\n<ol>\n<li>They cannot be closed (<code>end()</code> will throw).</li>\n<li>They never emit the <code>&#39;finish&#39;</code> event.</li>\n<li>Writes <em>can</em> block when output is redirected to a file.<ul>\n<li>Note that disks are fast and operating systems normally employ write-back\ncaching so this is very uncommon.</li>\n</ul>\n</li>\n<li>Writes on UNIX <strong>will</strong> block by default if output is going to a TTY\n(a terminal).</li>\n<li>Windows functionality differs. Writes block except when output is going to a\nTTY.</li>\n</ol>\nTo check if Node.js is being run in a TTY context, read the <code>isTTY</code> property\non <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:\n</section>	http://nodejs.org/api/all.html#all_process_stdout
process stdout	R	process.stdout										http://nodejs.org/api/all.html#all_process_stdout
process.stdout.stdout`	A										<section class="prog__container"><p id="obj.desc">The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting\nto TTYs (terminals) on OS X as a workaround for the operating system&#39;s small,\n1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.\nTo check if Node.js is being run in a TTY context, check the <code>isTTY</code>\nproperty on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>.\nFor instance:\n<pre><code class="lang-console">$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre>\nSee the TTY documentation for more information.\n</section>	http://nodejs.org/api/all.html#all_process_stdout_stdout`
process stdout stdout`	R	process.stdout stdout`										http://nodejs.org/api/all.html#all_process_stdout_stdout`
process.title	A										<section class="prog__container"><p id="obj.desc">The <code>process.title</code> property returns the current process title (i.e. returns\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\nthe current value of <code>ps</code>.\n<em>Note</em>: When a new value is assigned, different platforms will impose different\nmaximum length restrictions on the title. Usually such restrictions are quite\nlimited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size\nof the binary name plus the length of the command line arguments because setting\nthe <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\nallowed for longer process title strings by also overwriting the <code>environ</code>\nmemory but that was potentially insecure and confusing in some (rather obscure)\ncases.\n</section>	http://nodejs.org/api/all.html#all_process_title
process title	R	process.title										http://nodejs.org/api/all.html#all_process_title
process.version	A										<section class="prog__container"><p id="obj.desc">The <code>process.version</code> property returns the Node.js version string.\n<pre><code class="lang-js">console.log(`Version: ${process.version}`);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_version
process version	R	process.version										http://nodejs.org/api/all.html#all_process_version
process.versions	A										<section class="prog__container"><p id="obj.desc">The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies.\n<pre><code class="lang-js">console.log(process.versions);\n</code></pre>\nWill generate output similar to:\n<pre><code class="lang-js">{\n  http_parser: &#39;2.3.0&#39;,\n  node: &#39;1.1.1&#39;,\n  v8: &#39;4.1.0.14&#39;,\n  uv: &#39;1.3.0&#39;,\n  zlib: &#39;1.2.8&#39;,\n  ares: &#39;1.10.0-DEV&#39;,\n  modules: &#39;43&#39;,\n  icu: &#39;55.1&#39;,\n  openssl: &#39;1.0.1k&#39;,\n  unicode: &#39;8.0&#39;,\n  cldr: &#39;29.0&#39;,\n  tz: &#39;2016b&#39; }\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_process_versions
process versions	R	process.versions										http://nodejs.org/api/all.html#all_process_versions
\_\_dirname	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{String}</li>\n</ul>\nThe name of the directory that the currently executing script resides in.\nExample: running <code>node example.js</code> from <code>/Users/mjr</code>\n<pre><code class="lang-js">console.log(__dirname);\n// Prints: /Users/mjr\n</code></pre>\n<code>__dirname</code> isn&#39;t actually a global but rather local to each module.\nFor instance, given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of\n<code>a</code> and there is a directory structure of:\n<ul>\n<li><code>/Users/mjr/app/a.js</code></li>\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\n</ul>\nReferences to <code>__dirname</code> within <code>b.js</code> will return\n<code>/Users/mjr/app/node_modules/b</code> while references to <code>__dirname</code> within <code>a.js</code>\nwill return <code>/Users/mjr/app</code>.\n</section>	http://nodejs.org/api/all.html#all_\_\_dirname
\_\_filename	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{String}</li>\n</ul>\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\nExample: running <code>node example.js</code> from <code>/Users/mjr</code>\n<pre><code class="lang-js">console.log(__filename);\n// Prints: /Users/mjr/example.js\n</code></pre>\n<code>__filename</code> isn&#39;t actually a global but rather local to each module.\n</section>	http://nodejs.org/api/all.html#all_\_\_filename
exports	A										<section class="prog__container"><p id="obj.desc">A reference to the <code>module.exports</code> that is shorter to type.\nSee module system documentation for details on when to use <code>exports</code> and\nwhen to use <code>module.exports</code>.\n<code>exports</code> isn&#39;t actually a global but rather local to each module.\nSee the module system documentation for more information.\n</section>	http://nodejs.org/api/all.html#all_exports
module	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{Object}</li>\n</ul>\nA reference to the current module. In particular\n<code>module.exports</code> is used for defining what a module exports and makes\navailable through <code>require()</code>.\n<code>module</code> isn&#39;t actually a global but rather local to each module.\nSee the module system documentation for more information.\n</section>	http://nodejs.org/api/all.html#all_module
require	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li>{Function}</li>\n</ul>\nTo require modules. See the Modules section.  <code>require</code> isn&#39;t actually a\nglobal but rather local to each module.\n</section>	http://nodejs.org/api/all.html#all_require
require.resolve	A										<section class="prog__container"><p id="obj.desc">Use the internal <code>require()</code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n<pre><code>require.resolve()</code></pre></section>	http://nodejs.org/api/all.html#all_require_resolve
require resolve	R	require.resolve										http://nodejs.org/api/all.html#all_require_resolve
require.cache	A										<section class="prog__container"><p id="obj.desc">Modules are cached in this object when they are required. By deleting a key\nvalue from this object, the next <code>require</code> will reload the module. Note that\nthis does not apply to native addons, for which reloading will result in an\nError.\n</section>	http://nodejs.org/api/all.html#all_require_cache
require cache	R	require.cache										http://nodejs.org/api/all.html#all_require_cache
require.extensions	A										<section class="prog__container"><p id="obj.desc">Instruct <code>require</code> on how to handle certain file extensions.\nProcess files with the extension <code>.sjs</code> as <code>.js</code>:\n<pre><code class="lang-js">require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\n</code></pre>\n<strong>Deprecated</strong>  In the past, this list has been used to load\nnon-JavaScript modules into Node.js by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node.js program, or compiling them to\nJavaScript ahead of time.\nSince the module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.\nNote that the number of file system operations that the module system\nhas to perform in order to resolve a <code>require(...)</code> statement to a\nfilename scales linearly with the number of registered extensions.\nIn other words, adding extensions slows down the module loader and\nshould be discouraged.\n</section>	http://nodejs.org/api/all.html#all_require_extensions
require extensions	R	require.extensions										http://nodejs.org/api/all.html#all_require_extensions
addons	A										<section class="prog__container"><p id="obj.desc">Node.js Addons are dynamically-linked shared objects, written in C or C++, that\ncan be loaded into Node.js using the <code>require()</code> function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.\nAt the moment, the method for implementing Addons is rather complicated,\ninvolving knowledge of several components and APIs :\n<ul>\n<li>V8: the C++ library Node.js currently uses to provide the\nJavaScript implementation. V8 provides the mechanisms for creating objects,\ncalling functions, etc. V8&#39;s API is documented mostly in the\n<code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source\ntree), which is also available online.\n</li>\n<li>libuv: The C library that implements the Node.js event loop, its worker\nthreads and all of the asynchronous behaviors of the platform. It also\nserves as a cross-platform abstraction library, giving easy, POSIX-like\naccess across all major operating systems to many common system tasks, such\nas interacting with the filesystem, sockets, timers and system events. libuv\nalso provides a pthreads-like threading abstraction that may be used to\npower more sophisticated asynchronous Addons that need to move beyond the\nstandard event loop. Addon authors are encouraged to think about how to\navoid blocking the event loop with I/O or other time-intensive tasks by\noff-loading work via libuv to non-blocking system operations, worker threads\nor a custom use of libuv&#39;s threads.\n</li>\n<li>Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs\nthat Addons can use &mdash; the most important of which is the\n<code>node::ObjectWrap</code> class.\n</li>\n<li>Node.js includes a number of other statically linked libraries including\nOpenSSL. These other libraries are located in the <code>deps/</code> directory in the\nNode.js source tree. Only the V8 and OpenSSL symbols are purposefully\nre-exported by Node.js and may be used to various extents by Addons.\nSee Linking to Node.js&#39; own dependencies for additional information.\n</li>\n</ul>\nAll of the following examples are available for download and may\nbe used as a starting-point for your own Addon.\n</section>	http://nodejs.org/api/all.html#all_addons
addons.js	A										<section class="prog__container"><p id="obj.desc">Each of the examples illustrated in this document make direct use of the\nNode.js and V8 APIs for implementing Addons. It is important to understand\nthat the V8 API can, and has, changed dramatically from one V8 release to the\nnext (and one major Node.js release to the next). With each change, Addons may\nneed to be updated and recompiled in order to continue functioning. The Node.js\nrelease schedule is designed to minimize the frequency and impact of such\nchanges but there is little that Node.js can do currently to ensure stability\nof the V8 APIs.\nThe Native Abstractions for Node.js (or <code>nan</code>) provide a set of tools that\nAddon developers are recommended to use to keep compatibility between past and\nfuture releases of V8 and Node.js. See the <code>nan</code> examples for an\nillustration of how it can be used.\n</section>	http://nodejs.org/api/all.html#all_addons_js
addons js	R	addons.js										http://nodejs.org/api/all.html#all_addons_js
assert	A										<section class="prog__container"><p id="obj.desc">The <code>assert</code> module provides a simple set of assertion tests that can be used to\ntest invariants. The module is intended for internal use by Node.js, but can be\nused in application code via <code>require(&#39;assert&#39;)</code>. However, <code>assert</code> is not a\ntesting framework, and is not intended to be used as a general purpose assertion\nlibrary.\nThe API for the <code>assert</code> module is Locked. This means that there will be no\nadditions or changes to any of the methods implemented and exposed by\nthe module.\n<p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_assert
assert.assert	A										<section class="prog__container"><p id="obj.desc">An alias of <code>assert.ok()</code> .\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert(true);\n// OK\nassert(1);\n// OK\nassert(false);\n// throws &quot;AssertionError: false == true&quot;\nassert(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert(false, &#39;it\&#39;s false&#39;);\n// throws &quot;AssertionError: it&#39;s false&quot;\n</code></pre>\n<pre><code>assert(value[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_assert_value_message
assert assert	R	assert.assert										http://nodejs.org/api/all.html#all_assert_assert_value_message
assert.deepEqual	A										<section class="prog__container"><p id="obj.desc">Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\nPrimitive values are compared with the equal comparison operator ( <code>==</code> ).\nOnly enumerable &quot;own&quot; properties are considered. The <code>deepEqual()</code>\nimplementation does not test object prototypes, attached symbols, or\nnon-enumerable properties. This can lead to some potentially surprising\nresults. For example, the following example does not throw an <code>AssertionError</code>\nbecause the properties on the <code>Error</code> object are non-enumerable:\n<pre><code class="lang-js">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(Error(&#39;a&#39;), Error(&#39;b&#39;));\n</code></pre>\n&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare evaluated also:\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n// values of b are different\n\nassert.deepEqual(obj1, obj3);\n// OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\n// Prototypes are ignored\n</code></pre>\nIf the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.\n<pre><code>assert.deepEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_deepequal_actual_expected_message
assert deepEqual	R	assert.deepEqual										http://nodejs.org/api/all.html#all_assert_deepequal_actual_expected_message
assert.deepStrictEqual	A										<section class="prog__container"><p id="obj.desc">Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,\nprimitive values are compared using the strict equality operator ( <code>===</code> ).\nSecond, object comparisons include a strict equality check of their prototypes.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.deepEqual({a:1}, {a:&#39;1&#39;});\n// OK, because 1 == &#39;1&#39;\n\nassert.deepStrictEqual({a:1}, {a:&#39;1&#39;});\n// AssertionError: { a: 1 } deepStrictEqual { a: &#39;1&#39; }\n// because 1 !== &#39;1&#39; using strict equality\n</code></pre>\nIf the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.\n<pre><code>assert.deepStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_deepstrictequal_actual_expected_message
assert deepStrictEqual	R	assert.deepStrictEqual										http://nodejs.org/api/all.html#all_assert_deepstrictequal_actual_expected_message
assert.doesNotThrow	A										<section class="prog__container"><p id="obj.desc">Asserts that the function <code>block</code> does not throw an error. See\n<code>assert.throws()</code> for more details.\nWhen <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code>\nfunction.\nIf an error is thrown and it is the same type as that specified by the <code>error</code>\nparameter, then an <code>AssertionError</code> is thrown. If the error is of a different\ntype, or if the <code>error</code> parameter is undefined, the error is propagated back\nto the caller.\nThe following, for instance, will throw the <code>TypeError</code> because there is no\nmatching error type in the assertion:\n<pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  SyntaxError\n);\n</code></pre>\nHowever, the following will result in an <code>AssertionError</code> with the message\n&#39;Got unwanted exception (TypeError)..&#39;:\n<pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError\n);\n</code></pre>\nIf an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>\nparameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>\nmessage:\n<pre><code class="lang-js">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError,\n  &#39;Whoops&#39;\n);\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\n</code></pre>\n<pre><code>assert.doesNotThrow(block[, error][, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_doesnotthrow_block_error_message
assert doesNotThrow	R	assert.doesNotThrow										http://nodejs.org/api/all.html#all_assert_doesnotthrow_block_error_message
assert.equal	A										<section class="prog__container"><p id="obj.desc">Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\nusing the equal comparison operator ( <code>==</code> ).\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, &#39;1&#39;);\n// OK, 1 == &#39;1&#39;\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({a: {b: 1}}, {a: {b: 1}});\n//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n</code></pre>\nIf the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.\n<pre><code>assert.equal(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_equal_actual_expected_message
assert equal	R	assert.equal										http://nodejs.org/api/all.html#all_assert_equal_actual_expected_message
assert.fail	A										<section class="prog__container"><p id="obj.desc">Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as\nthe values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.\nOtherwise, the error message is the value of <code>message</code>.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.fail(1, 2, undefined, &#39;&gt;&#39;);\n// AssertionError: 1 &gt; 2\n\nassert.fail(1, 2, &#39;whoops&#39;, &#39;&gt;&#39;);\n// AssertionError: whoops\n</code></pre>\n<pre><code>assert.fail(actual, expected, message, operator)</code></pre></section>	http://nodejs.org/api/all.html#all_assert_fail_actual_expected_message_operator
assert fail	R	assert.fail										http://nodejs.org/api/all.html#all_assert_fail_actual_expected_message_operator
assert.ifError	A										<section class="prog__container"><p id="obj.desc">Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>\nargument in callbacks.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.ifError(0);\n// OK\nassert.ifError(1);\n// Throws 1\nassert.ifError(&#39;error&#39;);\n// Throws &#39;error&#39;\nassert.ifError(new Error());\n// Throws Error\n</code></pre>\n<pre><code>assert.ifError(value)</code></pre></section>	http://nodejs.org/api/all.html#all_assert_iferror_value
assert ifError	R	assert.ifError										http://nodejs.org/api/all.html#all_assert_iferror_value
assert.notDeepEqual	A										<section class="prog__container"><p id="obj.desc">Tests for any deep inequality. Opposite of <code>assert.deepEqual()</code>.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK, obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK, obj1 and obj2 are not deeply equal\n</code></pre>\nIf the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.\n<pre><code>assert.notDeepEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notdeepequal_actual_expected_message
assert notDeepEqual	R	assert.notDeepEqual										http://nodejs.org/api/all.html#all_assert_notdeepequal_actual_expected_message
assert.notDeepStrictEqual	A										<section class="prog__container"><p id="obj.desc">Tests for deep strict inequality. Opposite of <code>assert.deepStrictEqual()</code>.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.notDeepEqual({a:1}, {a:&#39;1&#39;});\n// AssertionError: { a: 1 } notDeepEqual { a: &#39;1&#39; }\n\nassert.notDeepStrictEqual({a:1}, {a:&#39;1&#39;});\n// OK\n</code></pre>\nIf the values are deeply and strictly equal, an <code>AssertionError</code> is thrown\nwith a <code>message</code> property set equal to the value of the <code>message</code> parameter. If\nthe <code>message</code> parameter is undefined, a default error message is assigned.\n<pre><code>assert.notDeepStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notdeepstrictequal_actual_expected_message
assert notDeepStrictEqual	R	assert.notDeepStrictEqual										http://nodejs.org/api/all.html#all_assert_notdeepstrictequal_actual_expected_message
assert.notEqual	A										<section class="prog__container"><p id="obj.desc">Tests shallow, coercive inequality with the not equal comparison operator\n( <code>!=</code> ).\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, &#39;1&#39;);\n// AssertionError: 1 != &#39;1&#39;\n</code></pre>\nIf the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.\n<pre><code>assert.notEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notequal_actual_expected_message
assert notEqual	R	assert.notEqual										http://nodejs.org/api/all.html#all_assert_notequal_actual_expected_message
assert.notStrictEqual	A										<section class="prog__container"><p id="obj.desc">Tests strict inequality as determined by the strict not equal operator\n( <code>!==</code> ).\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError: 1 !== 1\n\nassert.notStrictEqual(1, &#39;1&#39;);\n// OK\n</code></pre>\nIf the values are strictly equal, an <code>AssertionError</code> is thrown with a\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned.\n<pre><code>assert.notStrictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_notstrictequal_actual_expected_message
assert notStrictEqual	R	assert.notStrictEqual										http://nodejs.org/api/all.html#all_assert_notstrictequal_actual_expected_message
assert.ok	A										<section class="prog__container"><p id="obj.desc">Tests if <code>value</code> is truthy. It is equivalent to\n<code>assert.equal(!!value, true, message)</code>.\nIf <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is <code>undefined</code>, a default error message is assigned.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\nassert.ok(false);\n// throws &quot;AssertionError: false == true&quot;\nassert.ok(0);\n// throws &quot;AssertionError: 0 == true&quot;\nassert.ok(false, &#39;it\&#39;s false&#39;);\n// throws &quot;AssertionError: it&#39;s false&quot;\n</code></pre>\n<pre><code>assert.ok(value[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_ok_value_message
assert ok	R	assert.ok										http://nodejs.org/api/all.html#all_assert_ok_value_message
assert.strictEqual	A										<section class="prog__container"><p id="obj.desc">Tests strict equality as determined by the strict equality operator ( <code>===</code> ).\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\n\nassert.strictEqual(1, 2);\n// AssertionError: 1 === 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual(1, &#39;1&#39;);\n// AssertionError: 1 === &#39;1&#39;\n</code></pre>\nIf the values are not strictly equal, an <code>AssertionError</code> is thrown with a\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned.\n<pre><code>assert.strictEqual(actual, expected[, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_strictequal_actual_expected_message
assert strictEqual	R	assert.strictEqual										http://nodejs.org/api/all.html#all_assert_strictequal_actual_expected_message
assert.throws	A										<section class="prog__container"><p id="obj.desc">Expects the function <code>block</code> to throw an error.\nIf specified, <code>error</code> can be a constructor, <code>RegExp</code>, or validation\nfunction.\nIf specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if\nthe block fails to throw.\nValidate instanceof using constructor:\n<pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  Error\n);\n</code></pre>\nValidate error message using <code>RegExp</code>:\n<pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  /value/\n);\n</code></pre>\nCustom error validation:\n<pre><code class="lang-js">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &#39;unexpected error&#39;\n);\n</code></pre>\nNote that <code>error</code> can not be a string. If a string is provided as the second\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\n<code>message</code> instead. This can lead to easy-to-miss mistakes:\n<pre><code class="lang-js">// THIS IS A MISTAKE! DO NOT DO THIS!\nassert.throws(myFunction, &#39;missing foo&#39;, &#39;did not throw with expected message&#39;);\n\n// Do this instead.\nassert.throws(myFunction, /missing foo/, &#39;did not throw with expected message&#39;);\n</code></pre>\n<!-- [end-include:assert.md] -->\n<!-- [start-include:buffer.md] -->\n<pre><code>assert.throws(block[, error][, message])</code></pre></section>	http://nodejs.org/api/all.html#all_assert_throws_block_error_message
assert throws	R	assert.throws										http://nodejs.org/api/all.html#all_assert_throws_block_error_message
buffer	A										<section class="prog__container"><p id="obj.desc">Prior to the introduction of <code>TypedArray</code> in ECMAScript 2015 (ES6), the\nJavaScript language had no mechanism for reading or manipulating streams\nof binary data. The <code>Buffer</code> class was introduced as part of the Node.js\nAPI to make it possible to interact with octet streams in the context of things\nlike TCP streams and file system operations.\nNow that <code>TypedArray</code> has been added in ES6, the <code>Buffer</code> class implements the\n<code>Uint8Array</code> API in a manner that is more optimized and suitable for Node.js&#39;\nuse cases.\nInstances of the <code>Buffer</code> class are similar to arrays of integers but\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\nThe size of the <code>Buffer</code> is established when it is created and cannot be\nresized.\nThe <code>Buffer</code> class is a global within Node.js, making it unlikely that one\nwould need to ever use <code>require(&#39;buffer&#39;).Buffer</code>.\nExamples:\n<pre><code class="lang-js">// Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing ASCII bytes [0x74, 0x65, 0x73, 0x74].\nconst buf5 = Buffer.from(&#39;test&#39;);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf6 = Buffer.from(&#39;tést&#39;, &#39;utf8&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_buffer
buffer.transcode	A										<section class="prog__container"><p id="obj.desc">Re-encodes the given <code>Buffer</code> instance from one character encoding to another.\nReturns a new <code>Buffer</code> instance.\nThrows if the <code>fromEnc</code> or <code>toEnc</code> specify invalid character encodings or if\nconversion from <code>fromEnc</code> to <code>toEnc</code> is not permitted.\nThe transcoding process will use substitution characters if a given byte\nsequence cannot be adequately represented in the target encoding. For instance:\n<pre><code class="lang-js">const newBuf = buffer.transcode(Buffer.from(&#39;€&#39;), &#39;utf8&#39;, &#39;ascii&#39;);\nconsole.log(newBuf.toString(&#39;ascii&#39;));\n// Prints: &#39;?&#39;\n</code></pre>\nBecause the Euro (<code>€</code>) sign is not representable in US-ASCII, it is replaced\nwith <code>?</code> in the transcoded <code>Buffer</code>.\n<pre><code>buffer.transcode(source, fromEnc, toEnc)</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_transcode_source_fromenc_toenc
buffer transcode	R	buffer.transcode										http://nodejs.org/api/all.html#all_buffer_transcode_source_fromenc_toenc
buffer.INSPECT_MAX_BYTES	A										<section class="prog__container"><p id="obj.desc">Returns the maximum number of bytes that will be returned when\n<code>buf.inspect()</code> is called. This can be overridden by user modules. See\n<code>util.inspect()</code> for more details on <code>buf.inspect()</code> behavior.\nNote that this is a property on the <code>buffer</code> module as returned by\n<code>require(&#39;buffer&#39;)</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.\n</section>	http://nodejs.org/api/all.html#all_buffer_inspect_max_bytes
buffer INSPECT_MAX_BYTES	R	buffer.INSPECT_MAX_BYTES										http://nodejs.org/api/all.html#all_buffer_inspect_max_bytes
buffer.kMaxLength	A										<section class="prog__container"><p id="obj.desc">On 32-bit architectures, this value is <code>(2^30)-1</code> (~1GB).\nOn 64-bit architectures, this value is <code>(2^31)-1</code> (~2GB).\n</section>	http://nodejs.org/api/all.html#all_buffer_kmaxlength
buffer kMaxLength	R	buffer.kMaxLength										http://nodejs.org/api/all.html#all_buffer_kmaxlength
Buffer	A										<section class="prog__container"><p id="obj.desc">The <code>Buffer</code> class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.\n</section>	http://nodejs.org/api/all.html#all_buffer_array
Buffer.compare	A										<section class="prog__container"><p id="obj.desc">Compares <code>buf</code> with <code>target</code> and returns a number indicating whether <code>buf</code>\ncomes before, after, or is the same as <code>target</code> in sort order.\nComparison is based on the actual sequence of bytes in each <code>Buffer</code>.\n<ul>\n<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>\n<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>\n<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>\n</ul>\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;BCD&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\n// Prints: 0\nconsole.log(buf1.compare(buf1));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2));\n\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n\n// Prints: 1\nconsole.log(buf2.compare(buf1));\n\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n\n// Prints: [ &lt;Buffer 41 42 43&gt;, &lt;Buffer 41 42 43 44&gt;, &lt;Buffer 42 43 44&gt; ]\n// (This result is equal to: [buf1, buf3, buf2])\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n</code></pre>\nThe optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>\narguments can be used to limit the comparison to specific ranges within <code>target</code>\nand <code>buf</code> respectively.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\n// Prints: 0\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n\n// Prints: 1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n</code></pre>\nA <code>RangeError</code> will be thrown if: <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>,\n<code>targetEnd &gt; target.byteLength</code> or <code>sourceEnd &gt; source.byteLength</code>.\n<pre><code>buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer compare	R	Buffer.compare										http://nodejs.org/api/all.html#all_buffer_compare_target_targetstart_targetend_sourcestart_sourceend
Buffer.copy	A										<section class="prog__container"><p id="obj.desc">Copies data from a region of <code>buf</code> to a region in <code>target</code> even if the <code>target</code>\nmemory region overlaps with <code>buf</code>.\nExample: Create two <code>Buffer</code> instances, <code>buf1</code> and <code>buf2</code>, and copy <code>buf1</code> from\nbyte 16 through byte 19 into <code>buf2</code>, starting at the 8th byte in <code>buf2</code>\n<pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill(&#39;!&#39;);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nbuf1.copy(buf2, 8, 16, 20);\n\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, 25));\n</code></pre>\nExample: Create a single <code>Buffer</code> and copy data from one region to an\noverlapping region within the same <code>Buffer</code>\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\n// Prints: efghijghijklmnopqrstuvwxyz\nconsole.log(buf.toString());\n</code></pre>\n<pre><code>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_copy_target_targetstart_sourcestart_sourceend
Buffer copy	R	Buffer.copy										http://nodejs.org/api/all.html#all_buffer_copy_target_targetstart_sourcestart_sourceend
Buffer.entries	A										<section class="prog__container"><p id="obj.desc">Creates and returns an iterator of <code>[index, byte]</code> pairs from the contents of\n<code>buf</code>.\nExample: Log the entire contents of a <code>Buffer</code>\n<pre><code class="lang-js">const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\nfor (var pair of buf.entries()) {\n  console.log(pair);\n}\n</code></pre>\n<pre><code>buf.entries()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_entries
Buffer entries	R	Buffer.entries										http://nodejs.org/api/all.html#all_buffer_entries
Buffer.equals	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if both <code>buf</code> and <code>otherBuffer</code> have exactly the same bytes,\n<code>false</code> otherwise.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;414243&#39;, &#39;hex&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\n// Prints: true\nconsole.log(buf1.equals(buf2));\n\n// Prints: false\nconsole.log(buf1.equals(buf3));\n</code></pre>\n<pre><code>buf.equals(otherBuffer)</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_equals_otherbuffer
Buffer equals	R	Buffer.equals										http://nodejs.org/api/all.html#all_buffer_equals_otherbuffer
Buffer.fill	A										<section class="prog__container"><p id="obj.desc">Fills <code>buf</code> with the specified <code>value</code>. If the <code>offset</code> and <code>end</code> are not given,\nthe entire <code>buf</code> will be filled. This is meant to be a small simplification to\nallow the creation and filling of a <code>Buffer</code> to be done on a single line.\nExample: Fill a <code>Buffer</code> with the ASCII character <code>&#39;h&#39;</code>\n<pre><code class="lang-js">const b = Buffer.allocUnsafe(50).fill(&#39;h&#39;);\n\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\nconsole.log(b.toString());\n</code></pre>\n<code>value</code> is coerced to a <code>uint32</code> value if it is not a String or Integer.\nIf the final write of a <code>fill()</code> operation falls on a multi-byte character,\nthen only the first bytes of that character that fit into <code>buf</code> are written.\nExample: Fill a <code>Buffer</code> with a two-byte character\n<pre><code class="lang-js">// Prints: &lt;Buffer c8 a2 c8&gt;\nconsole.log(Buffer.allocUnsafe(3).fill(&#39;\u0222&#39;));\n</code></pre>\n<pre><code>buf.fill(value[, offset[, end]][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_fill_value_offset_end_encoding
Buffer fill	R	Buffer.fill										http://nodejs.org/api/all.html#all_buffer_fill_value_offset_end_encoding
Buffer.indexOf	A										<section class="prog__container"><p id="obj.desc">If <code>value</code> is:\n<ul>\n<li>a string, <code>value</code> is interpreted according to the character encoding in\n<code>encoding</code>.</li>\n<li>a <code>Buffer</code>, <code>value</code> will be used in its entirety. To compare a partial\n<code>Buffer</code> use <code>buf.slice()</code>.</li>\n<li>a number, <code>value</code> will be interpreted as an unsigned 8-bit integer\nvalue between <code>0</code> and <code>255</code>.</li>\n</ul>\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\n// Prints: 0\nconsole.log(buf.indexOf(&#39;this&#39;)));\n\n// Prints: 2\nconsole.log(buf.indexOf(&#39;is&#39;));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer&#39;)));\n\n// Prints: 8\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.indexOf(97));\n\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;)));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n\n\nconst utf16Buffer = Buffer.from(&#39;\u039a\u0391\u03a3\u03a3\u0395&#39;, &#39;ucs2&#39;);\n\n// Prints: 4\nconsole.log(utf16Buffer.indexOf(&#39;\u03a3&#39;, 0, &#39;ucs2&#39;));\n\n// Prints: 6\nconsole.log(utf16Buffer.indexOf(&#39;\u03a3&#39;, -4, &#39;ucs2&#39;));\n</code></pre>\n<pre><code>buf.indexOf(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_indexof_value_byteoffset_encoding
Buffer indexOf	R	Buffer.indexOf										http://nodejs.org/api/all.html#all_buffer_indexof_value_byteoffset_encoding
Buffer.includes	A										<section class="prog__container"><p id="obj.desc">Equivalent to <code>buf.indexOf() !== -1</code>.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\n// Prints: true\nconsole.log(buf.includes(&#39;this&#39;));\n\n// Prints: true\nconsole.log(buf.includes(&#39;is&#39;));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&#39;a buffer&#39;)));\n\n// Prints: true\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.includes(97));\n\n// Prints: false\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;)));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n\n// Prints: false\nconsole.log(buf.includes(&#39;this&#39;, 4));\n</code></pre>\n<pre><code>buf.includes(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_includes_value_byteoffset_encoding
Buffer includes	R	Buffer.includes										http://nodejs.org/api/all.html#all_buffer_includes_value_byteoffset_encoding
Buffer.keys	A										<section class="prog__container"><p id="obj.desc">Creates and returns an iterator of <code>buf</code> keys (indices).\nExample:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\nfor (var key of buf.keys()) {\n  console.log(key);\n}\n</code></pre>\n<pre><code>buf.keys()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_keys
Buffer keys	R	Buffer.keys										http://nodejs.org/api/all.html#all_buffer_keys
Buffer.lastIndexOf	A										<section class="prog__container"><p id="obj.desc">Identical to <code>buf.indexOf()</code>, except <code>buf</code> is searched from back to front\ninstead of front to back.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;this buffer is a buffer&#39;);\n\n// Prints: 0\nconsole.log(buf.lastIndexOf(&#39;this&#39;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;buffer&#39;)));\n\n// Prints: 15\n// (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.lastIndexOf(97));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;yolo&#39;)));\n\n// Prints: 5\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 5));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 4));\n\n\nconst utf16Buffer = Buffer.from(&#39;\u039a\u0391\u03a3\u03a3\u0395&#39;, &#39;ucs2&#39;);\n\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf(&#39;\u03a3&#39;, null, &#39;ucs2&#39;));\n\n// Prints: 4\nconsole.log(utf16Buffer.lastIndexOf(&#39;\u03a3&#39;, -5, &#39;ucs2&#39;));\n</code></pre>\n<pre><code>buf.lastIndexOf(value[, byteOffset][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_lastindexof_value_byteoffset_encoding
Buffer lastIndexOf	R	Buffer.lastIndexOf										http://nodejs.org/api/all.html#all_buffer_lastindexof_value_byteoffset_encoding
Buffer.readDoubleBE	A										<section class="prog__container"><p id="obj.desc">Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n</code></pre>\n<pre><code>buf.readDoubleBE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readdoublebe_offset_noassert
Buffer readDoubleBE	R	Buffer.readDoubleBE										http://nodejs.org/api/all.html#all_buffer_readdoublebe_offset_noassert
Buffer.readDoubleLE	A										<section class="prog__container"><p id="obj.desc">Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readDoubleLE(1, true));\n</code></pre>\n<pre><code>buf.readDoubleLE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readdoublele_offset_noassert
Buffer readDoubleLE	R	Buffer.readDoubleLE										http://nodejs.org/api/all.html#all_buffer_readdoublele_offset_noassert
Buffer.readFloatBE	A										<section class="prog__container"><p id="obj.desc">Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readFloatLE(1, true));\n</code></pre>\n<pre><code>buf.readFloatBE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readfloatbe_offset_noassert
Buffer readFloatBE	R	Buffer.readFloatBE										http://nodejs.org/api/all.html#all_buffer_readfloatbe_offset_noassert
Buffer.readFloatLE	A										<section class="prog__container"><p id="obj.desc">Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don&#39;t do this!\nconsole.log(buf.readFloatLE(1, true));\n</code></pre>\n<pre><code>buf.readFloatLE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readfloatle_offset_noassert
Buffer readFloatLE	R	Buffer.readFloatLE										http://nodejs.org/api/all.html#all_buffer_readfloatle_offset_noassert
Buffer.readInt8	A										<section class="prog__container"><p id="obj.desc">Reads a signed 8-bit integer from <code>buf</code> at the specified <code>offset</code>.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nIntegers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([-1, 5]);\n\n// Prints: -1\nconsole.log(buf.readInt8(0));\n\n// Prints: 5\nconsole.log(buf.readInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt8(2));\n</code></pre>\n<pre><code>buf.readInt8(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint8_offset_noassert
Buffer readInt8	R	Buffer.readInt8										http://nodejs.org/api/all.html#all_buffer_readint8_offset_noassert
Buffer.readInt16BE	A										<section class="prog__container"><p id="obj.desc">Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nIntegers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n</code></pre>\n<pre><code>buf.readInt16BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint16be_offset_noassert
Buffer readInt16BE	R	Buffer.readInt16BE										http://nodejs.org/api/all.html#all_buffer_readint16be_offset_noassert
Buffer.readInt16LE	A										<section class="prog__container"><p id="obj.desc">Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nIntegers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n</code></pre>\n<pre><code>buf.readInt16LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint16le_offset_noassert
Buffer readInt16LE	R	Buffer.readInt16LE										http://nodejs.org/api/all.html#all_buffer_readint16le_offset_noassert
Buffer.readInt32BE	A										<section class="prog__container"><p id="obj.desc">Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nIntegers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n</code></pre>\n<pre><code>buf.readInt32BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint32be_offset_noassert
Buffer readInt32BE	R	Buffer.readInt32BE										http://nodejs.org/api/all.html#all_buffer_readint32be_offset_noassert
Buffer.readInt32LE	A										<section class="prog__container"><p id="obj.desc">Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nIntegers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n</code></pre>\n<pre><code>buf.readInt32LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readint32le_offset_noassert
Buffer readInt32LE	R	Buffer.readInt32LE										http://nodejs.org/api/all.html#all_buffer_readint32le_offset_noassert
Buffer.readIntBE	A										<section class="prog__container"><p id="obj.desc">Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n</code></pre>\n<pre><code>buf.readIntBE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readintbe_offset_bytelength_noassert
Buffer readIntBE	R	Buffer.readIntBE										http://nodejs.org/api/all.html#all_buffer_readintbe_offset_bytelength_noassert
Buffer.readIntLE	A										<section class="prog__container"><p id="obj.desc">Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n</code></pre>\n<pre><code>buf.readIntLE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readintle_offset_bytelength_noassert
Buffer readIntLE	R	Buffer.readIntLE										http://nodejs.org/api/all.html#all_buffer_readintle_offset_bytelength_noassert
Buffer.readUInt8	A										<section class="prog__container"><p id="obj.desc">Reads an unsigned 8-bit integer from <code>buf</code> at the specified <code>offset</code>.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([1, -2]);\n\n// Prints: 1\nconsole.log(buf.readUInt8(0));\n\n// Prints: 254\nconsole.log(buf.readUInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt8(2));\n</code></pre>\n<pre><code>buf.readUInt8(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint8_offset_noassert
Buffer readUInt8	R	Buffer.readUInt8										http://nodejs.org/api/all.html#all_buffer_readuint8_offset_noassert
Buffer.readUInt16BE	A										<section class="prog__container"><p id="obj.desc">Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n</code></pre>\n<pre><code>buf.readUInt16BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint16be_offset_noassert
Buffer readUInt16BE	R	Buffer.readUInt16BE										http://nodejs.org/api/all.html#all_buffer_readuint16be_offset_noassert
Buffer.readUInt16LE	A										<section class="prog__container"><p id="obj.desc">Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n</code></pre>\n<pre><code>buf.readUInt16LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint16le_offset_noassert
Buffer readUInt16LE	R	Buffer.readUInt16LE										http://nodejs.org/api/all.html#all_buffer_readuint16le_offset_noassert
Buffer.readUInt32BE	A										<section class="prog__container"><p id="obj.desc">Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n</code></pre>\n<pre><code>buf.readUInt32BE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint32be_offset_noassert
Buffer readUInt32BE	R	Buffer.readUInt32BE										http://nodejs.org/api/all.html#all_buffer_readuint32be_offset_noassert
Buffer.readUInt32LE	A										<section class="prog__container"><p id="obj.desc">Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n</code></pre>\n<pre><code>buf.readUInt32LE(offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuint32le_offset_noassert
Buffer readUInt32LE	R	Buffer.readUInt32LE										http://nodejs.org/api/all.html#all_buffer_readuint32le_offset_noassert
Buffer.readUIntBE	A										<section class="prog__container"><p id="obj.desc">Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n</code></pre>\n<pre><code>buf.readUIntBE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuintbe_offset_bytelength_noassert
Buffer readUIntBE	R	Buffer.readUIntBE										http://nodejs.org/api/all.html#all_buffer_readuintbe_offset_bytelength_noassert
Buffer.readUIntLE	A										<section class="prog__container"><p id="obj.desc">Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.\nSetting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but\nthe result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n</code></pre>\n<pre><code>buf.readUIntLE(offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_readuintle_offset_bytelength_noassert
Buffer readUIntLE	R	Buffer.readUIntLE										http://nodejs.org/api/all.html#all_buffer_readuintle_offset_bytelength_noassert
Buffer.slice	A										<section class="prog__container"><p id="obj.desc">Returns a new <code>Buffer</code> that references the same memory as the original, but\noffset and cropped by the <code>start</code> and <code>end</code> indices.\n<strong>Note that modifying the new <code>Buffer</code> slice will modify the memory in the\noriginal <code>Buffer</code> because the allocated memory of the two objects overlap.</strong>\nExample: Create a <code>Buffer</code> with the ASCII alphabet, take a slice, and then modify\none byte from the original <code>Buffer</code>\n<pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.slice(0, 3);\n\n// Prints: abc\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n\nbuf1[0] = 33;\n\n// Prints: !bc\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n</code></pre>\nSpecifying negative indexes causes the slice to be generated relative to the\nend of <code>buf</code> rather than the beginning.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints: buffe\n// (Equivalent to buf.slice(0, 5))\nconsole.log(buf.slice(-6, -1).toString());\n\n// Prints: buff\n// (Equivalent to buf.slice(0, 4))\nconsole.log(buf.slice(-6, -2).toString());\n\n// Prints: uff\n// (Equivalent to buf.slice(1, 4))\nconsole.log(buf.slice(-5, -2).toString());\n</code></pre>\n<pre><code>buf.slice([start[, end]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_slice_start_end
Buffer slice	R	Buffer.slice										http://nodejs.org/api/all.html#all_buffer_slice_start_end
Buffer.swap16	A										<section class="prog__container"><p id="obj.desc">Interprets <code>buf</code> as an array of unsigned 16-bit integers and swaps the byte-order\n<em>in-place</em>. Throws a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 2.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap16();\n\n// Prints: &lt;Buffer 02 01 04 03 06 05 08 07&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 16-bits\nbuf2.swap32();\n</code></pre>\n<pre><code>buf.swap16()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap16
Buffer swap16	R	Buffer.swap16										http://nodejs.org/api/all.html#all_buffer_swap16
Buffer.swap32	A										<section class="prog__container"><p id="obj.desc">Interprets <code>buf</code> as an array of unsigned 32-bit integers and swaps the byte-order\n<em>in-place</em>. Throws a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 4.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap32();\n\n// Prints: &lt;Buffer 04 03 02 01 08 07 06 05&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 32-bits\nbuf2.swap32();\n</code></pre>\n<pre><code>buf.swap32()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap32
Buffer swap32	R	Buffer.swap32										http://nodejs.org/api/all.html#all_buffer_swap32
Buffer.swap64	A										<section class="prog__container"><p id="obj.desc">Interprets <code>buf</code> as an array of 64-bit numbers and swaps the byte-order <em>in-place</em>.\nThrows a <code>RangeError</code> if <code>buf.length</code> is not a multiple of 8.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap64();\n\n// Prints: &lt;Buffer 08 07 06 05 04 03 02 01&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 64-bits\nbuf2.swap64();\n</code></pre>\nNote that JavaScript cannot encode 64-bit integers. This method is intended\nfor working with 64-bit floats.\n<pre><code>buf.swap64()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_swap64
Buffer swap64	R	Buffer.swap64										http://nodejs.org/api/all.html#all_buffer_swap64
Buffer.toString	A										<section class="prog__container"><p id="obj.desc">Decodes <code>buf</code> to a string according to the specified character encoding in\n<code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString(&#39;ascii&#39;));\n\n// Prints: abcde\nconsole.log(buf1.toString(&#39;ascii&#39;, 0, 5));\n\n\nconst buf2 = Buffer.from(&#39;tést&#39;);\n\n// Prints: 74c3a97374\nconsole.log(buf2.toString(&#39;hex&#39;));\n\n// Prints: té\nconsole.log(buf2.toString(&#39;utf8&#39;, 0, 3));\n\n// Prints: té\nconsole.log(buf2.toString(undefined, 0, 3));\n</code></pre>\n<pre><code>buf.toString([encoding[, start[, end]]])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_tostring_encoding_start_end
Buffer toString	R	Buffer.toString										http://nodejs.org/api/all.html#all_buffer_tostring_encoding_start_end
Buffer.toJSON	A										<section class="prog__container"><p id="obj.desc">Returns a JSON representation of <code>buf</code>. <code>JSON.stringify()</code> implicitly calls\nthis function when stringifying a <code>Buffer</code> instance.\nExample:\n<pre><code class="lang-js">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// Prints: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\nconsole.log(json);\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === &#39;Buffer&#39;\n    ? Buffer.from(value.data)\n    : value;\n});\n\n// Prints: &lt;Buffer 01 02 03 04 05&gt;\nconsole.log(copy);\n</code></pre>\n<pre><code>buf.toJSON()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_tojson
Buffer toJSON	R	Buffer.toJSON										http://nodejs.org/api/all.html#all_buffer_tojson
Buffer.values	A										<section class="prog__container"><p id="obj.desc">Creates and returns an iterator for <code>buf</code> values (bytes). This function is\ncalled automatically when a <code>Buffer</code> is used in a <code>for..of</code> statement.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.from(&#39;buffer&#39;);\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (var value of buf.values()) {\n  console.log(value);\n}\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (var value of buf) {\n  console.log(value);\n}\n</code></pre>\n<pre><code>buf.values()</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_values
Buffer values	R	Buffer.values										http://nodejs.org/api/all.html#all_buffer_values
Buffer.write	A										<section class="prog__container"><p id="obj.desc">Writes <code>string</code> to <code>buf</code> at <code>offset</code> according to the character encoding in <code>encoding</code>.\nThe <code>length</code> parameter is the number of bytes to write. If <code>buf</code> did not contain\nenough space to fit the entire string, only a partial amount of <code>string</code> will\nbe written. However, partially encoded characters will not be written.\nExample:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(256);\n\nconst len = buf.write(&#39;\u00bd + \u00bc = \u00be&#39;, 0);\n\n// Prints: 12 bytes: ½ + ¼ = ¾\nconsole.log(`${len} bytes: ${buf.toString(&#39;utf8&#39;, 0, len)}`);\n</code></pre>\n<pre><code>buf.write(string[, offset[, length]][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_write_string_offset_length_encoding
Buffer write	R	Buffer.write										http://nodejs.org/api/all.html#all_buffer_write_string_offset_length_encoding
Buffer.writeDoubleBE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeDoubleBE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writedoublebe_value_offset_noassert
Buffer writeDoubleBE	R	Buffer.writeDoubleBE										http://nodejs.org/api/all.html#all_buffer_writedoublebe_value_offset_noassert
Buffer.writeDoubleLE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeDoubleLE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writedoublele_value_offset_noassert
Buffer writeDoubleLE	R	Buffer.writeDoubleLE										http://nodejs.org/api/all.html#all_buffer_writedoublele_value_offset_noassert
Buffer.writeFloatBE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeFloatBE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writefloatbe_value_offset_noassert
Buffer writeFloatBE	R	Buffer.writeFloatBE										http://nodejs.org/api/all.html#all_buffer_writefloatbe_value_offset_noassert
Buffer.writeFloatLE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeFloatLE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writefloatle_value_offset_noassert
Buffer writeFloatLE	R	Buffer.writeFloatLE										http://nodejs.org/api/all.html#all_buffer_writefloatle_value_offset_noassert
Buffer.writeInt8	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a valid\nsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything other than\na signed 8-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\n<code>value</code> is interpreted and written as a two&#39;s complement signed integer.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\n// Prints: &lt;Buffer 02 fe&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeInt8(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint8_value_offset_noassert
Buffer writeInt8	R	Buffer.writeInt8										http://nodejs.org/api/all.html#all_buffer_writeint8_value_offset_noassert
Buffer.writeInt16BE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 16-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\n<code>value</code> is interpreted and written as a two&#39;s complement signed integer.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeInt16BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint16be_value_offset_noassert
Buffer writeInt16BE	R	Buffer.writeInt16BE										http://nodejs.org/api/all.html#all_buffer_writeint16be_value_offset_noassert
Buffer.writeInt16LE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 16-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\n<code>value</code> is interpreted and written as a two&#39;s complement signed integer.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeInt16LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint16le_value_offset_noassert
Buffer writeInt16LE	R	Buffer.writeInt16LE										http://nodejs.org/api/all.html#all_buffer_writeint16le_value_offset_noassert
Buffer.writeInt32BE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 32-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\n<code>value</code> is interpreted and written as a two&#39;s complement signed integer.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeInt32BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint32be_value_offset_noassert
Buffer writeInt32BE	R	Buffer.writeInt32BE										http://nodejs.org/api/all.html#all_buffer_writeint32be_value_offset_noassert
Buffer.writeInt32LE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is undefined\nwhen <code>value</code> is anything other than a signed 32-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\n<code>value</code> is interpreted and written as a two&#39;s complement signed integer.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeInt32LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeint32le_value_offset_noassert
Buffer writeInt32LE	R	Buffer.writeInt32LE										http://nodejs.org/api/all.html#all_buffer_writeint32le_value_offset_noassert
Buffer.writeIntBE	A										<section class="prog__container"><p id="obj.desc">Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeIntBE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeintbe_value_offset_bytelength_noassert
Buffer writeIntBE	R	Buffer.writeIntBE										http://nodejs.org/api/all.html#all_buffer_writeintbe_value_offset_bytelength_noassert
Buffer.writeIntLE	A										<section class="prog__container"><p id="obj.desc">Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeIntLE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeintle_value_offset_bytelength_noassert
Buffer writeIntLE	R	Buffer.writeIntLE										http://nodejs.org/api/all.html#all_buffer_writeintle_value_offset_bytelength_noassert
Buffer.writeUInt8	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a\nvalid unsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything\nother than an unsigned 8-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\n// Prints: &lt;Buffer 03 04 23 42&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUInt8(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint8_value_offset_noassert
Buffer writeUInt8	R	Buffer.writeUInt8										http://nodejs.org/api/all.html#all_buffer_writeuint8_value_offset_noassert
Buffer.writeUInt16BE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUInt16BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint16be_value_offset_noassert
Buffer writeUInt16BE	R	Buffer.writeUInt16BE										http://nodejs.org/api/all.html#all_buffer_writeuint16be_value_offset_noassert
Buffer.writeUInt16LE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUInt16LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint16le_value_offset_noassert
Buffer writeUInt16LE	R	Buffer.writeUInt16LE										http://nodejs.org/api/all.html#all_buffer_writeuint16le_value_offset_noassert
Buffer.writeUInt32BE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUInt32BE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint32be_value_offset_noassert
Buffer writeUInt32BE	R	Buffer.writeUInt32BE										http://nodejs.org/api/all.html#all_buffer_writeuint32be_value_offset_noassert
Buffer.writeUInt32LE	A										<section class="prog__container"><p id="obj.desc">Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUInt32LE(value, offset[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuint32le_value_offset_noassert
Buffer writeUInt32LE	R	Buffer.writeUInt32LE										http://nodejs.org/api/all.html#all_buffer_writeuint32le_value_offset_noassert
Buffer.writeUIntBE	A										<section class="prog__container"><p id="obj.desc">Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUIntBE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuintbe_value_offset_bytelength_noassert
Buffer writeUIntBE	R	Buffer.writeUIntBE										http://nodejs.org/api/all.html#all_buffer_writeuintbe_value_offset_bytelength_noassert
Buffer.writeUIntLE	A										<section class="prog__container"><p id="obj.desc">Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.\nSetting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond\nthe end of <code>buf</code>, but the result should be considered undefined behavior.\nExamples:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</code></pre>\n<pre><code>buf.writeUIntLE(value, offset, byteLength[, noAssert])</code></pre></section>	http://nodejs.org/api/all.html#all_buffer_writeuintle_value_offset_bytelength_noassert
Buffer writeUIntLE	R	Buffer.writeUIntLE										http://nodejs.org/api/all.html#all_buffer_writeuintle_value_offset_bytelength_noassert
Buffer.poolSize	A										<section class="prog__container"><p id="obj.desc">This is the number of bytes used to determine the size of pre-allocated, internal\n<code>Buffer</code> instances used for pooling. This value may be modified.\n</section>	http://nodejs.org/api/all.html#all_buffer_poolsize
Buffer poolSize	R	Buffer.poolSize										http://nodejs.org/api/all.html#all_buffer_poolsize
Buffer.[index]	A										<section class="prog__container"><p id="obj.desc">The index operator <code>[index]</code> can be used to get and set the octet at position\n<code>index</code> in <code>buf</code>. The values refer to individual bytes, so the legal value\nrange is between <code></code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).\nExample: Copy an ASCII string into a <code>Buffer</code>, one byte at a time\n<pre><code class="lang-js">const str = &#39;Node.js&#39;;\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\n// Prints: Node.js\nconsole.log(buf.toString(&#39;ascii&#39;));\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_buffer_[index]
Buffer [index]	R	Buffer.[index]										http://nodejs.org/api/all.html#all_buffer_[index]
Buffer.length	A										<section class="prog__container"><p id="obj.desc">Returns the amount of memory allocated for <code>buf</code> in bytes. Note that this\ndoes not necessarily reflect the amount of &quot;usable&quot; data within <code>buf</code>.\nExample: Create a <code>Buffer</code> and write a shorter ASCII string to it\n<pre><code class="lang-js">const buf = Buffer.alloc(1234);\n\n// Prints: 1234\nconsole.log(buf.length);\n\nbuf.write(&#39;some string&#39;, 0, &#39;ascii&#39;);\n\n// Prints: 1234\nconsole.log(buf.length);\n</code></pre>\nWhile the <code>length</code> property is not immutable, changing the value of <code>length</code>\ncan result in undefined and inconsistent behavior. Applications that wish to\nmodify the length of a <code>Buffer</code> should therefore treat <code>length</code> as read-only and\nuse <code>buf.slice()</code> to create a new <code>Buffer</code>.\nExamples:\n<pre><code class="lang-js">var buf = Buffer.allocUnsafe(10);\n\nbuf.write(&#39;abcdefghj&#39;, 0, &#39;ascii&#39;);\n\n// Prints: 10\nconsole.log(buf.length);\n\nbuf = buf.slice(0, 5);\n\n// Prints: 5\nconsole.log(buf.length);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_buffer_length
Buffer length	R	Buffer.length										http://nodejs.org/api/all.html#all_buffer_length
Buffer.alloc	A										<section class="prog__container"><p id="obj.desc">Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the\n<code>Buffer</code> will be <em>zero-filled</em>.\nExample:\n<pre><code class="lang-js">const buf = Buffer.alloc(5);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n</code></pre>\nThe <code>size</code> must be less than or equal to the value of <code>buffer.kMaxLength</code>.\nOtherwise, a <code>RangeError</code> is thrown. A zero-length <code>Buffer</code> will be created if\n<code>size &lt;= 0</code>.\nIf <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling\n<code>buf.fill(fill)</code>.\nExample:\n<pre><code class="lang-js">const buf = Buffer.alloc(5, &#39;a&#39;);\n\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\nconsole.log(buf);\n</code></pre>\nIf both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be\ninitialized by calling <code>buf.fill(fill, encoding)</code>.\nExample:\n<pre><code class="lang-js">const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;);\n\n// Prints: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\nconsole.log(buf);\n</code></pre>\nCalling <code>Buffer.alloc()</code> can be significantly slower than the alternative\n<code>Buffer.allocUnsafe()</code> but ensures that the newly created <code>Buffer</code> instance\ncontents will <em>never contain sensitive data</em>.\nA <code>TypeError</code> will be thrown if <code>size</code> is not a number.\n</section>	http://nodejs.org/api/all.html#all_buffer_alloc_size_fill_encoding
Buffer alloc	R	Buffer.alloc										http://nodejs.org/api/all.html#all_buffer_alloc_size_fill_encoding
Buffer.allocUnsafe	A										<section class="prog__container"><p id="obj.desc">Allocates a new <em>non-zero-filled</em> <code>Buffer</code> of <code>size</code> bytes. The <code>size</code> must\nbe less than or equal to the value of <code>buffer.kMaxLength</code>. Otherwise, a\n<code>RangeError</code> is thrown. A zero-length <code>Buffer</code> will be created if <code>size &lt;= 0</code>.\nThe underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <code>buf.fill(0)</code> to initialize such\n<code>Buffer</code> instances to zeroes.\nExample:\n<pre><code class="lang-js">const buf = Buffer.allocUnsafe(5);\n\n// Prints: (contents may vary): &lt;Buffer 78 e0 82 02 01&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n</code></pre>\nA <code>TypeError</code> will be thrown if <code>size</code> is not a number.\nNote that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of\nsize <code>Buffer.poolSize</code> that is used as a pool for the fast allocation of new\n<code>Buffer</code> instances created using <code>Buffer.allocUnsafe()</code> and the deprecated\n<code>new Buffer(size)</code> constructor only when <code>size</code> is less than or equal to\n<code>Buffer.poolSize &gt;&gt; 1</code> (floor of <code>Buffer.poolSize</code> divided by two).\nUse of this pre-allocated internal memory pool is a key difference between\ncalling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.\nSpecifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal <code>Buffer</code>\npool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal\n<code>Buffer</code> pool if <code>size</code> is less than or equal to half <code>Buffer.poolSize</code>. The\ndifference is subtle but can be important when an application requires the\nadditional performance that <code>Buffer.allocUnsafe()</code> provides.\n</section>	http://nodejs.org/api/all.html#all_buffer_allocunsafe_size
Buffer allocUnsafe	R	Buffer.allocUnsafe										http://nodejs.org/api/all.html#all_buffer_allocunsafe_size
Buffer.allocUnsafeSlow	A										<section class="prog__container"><p id="obj.desc">Allocates a new <em>non-zero-filled</em> and non-pooled <code>Buffer</code> of <code>size</code> bytes. The\n<code>size</code> must be less than or equal to the value of <code>buffer.kMaxLength</code>.\nOtherwise, a <code>RangeError</code> is thrown. A zero-length <code>Buffer</code> will be created if\n<code>size &lt;= 0</code>.\nThe underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <code>buf.fill(0)</code> to initialize such\n<code>Buffer</code> instances to zeroes.\nWhen using <code>Buffer.allocUnsafe()</code> to allocate new <code>Buffer</code> instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n<code>Buffer</code>. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated <code>Buffer</code> instances. This approach improves\nboth performance and memory usage by eliminating the need to track and cleanup as\nmany <code>Persistent</code> objects.\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled <code>Buffer</code> instance using <code>Buffer.allocUnsafeSlow()</code> then\ncopy out the relevant bits.\nExample:\n<pre><code class="lang-js">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre>\nUse of <code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort <em>after</em>\na developer has observed undue memory retention in their applications.\nA <code>TypeError</code> will be thrown if <code>size</code> is not a number.\n</section>	http://nodejs.org/api/all.html#all_buffer_allocunsafeslow_size
Buffer allocUnsafeSlow	R	Buffer.allocUnsafeSlow										http://nodejs.org/api/all.html#all_buffer_allocunsafeslow_size
Buffer.byteLength	A										<section class="prog__container"><p id="obj.desc">Returns the actual byte length of a string. This is not the same as\n<code>String.prototype.length</code> since that returns the number of <em>characters</em> in\na string.\nExample:\n<pre><code class="lang-js">const str = &#39;\u00bd + \u00bc = \u00be&#39;;\n\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, &#39;utf8&#39;)} bytes`);\n</code></pre>\nWhen <code>string</code> is a <code>Buffer</code>/<code>DataView</code>/<code>TypedArray</code>/<code>ArrayBuffer</code>, the\nactual byte length is returned.\n</section>	http://nodejs.org/api/all.html#all_buffer_bytelength_string_encoding
Buffer byteLength	R	Buffer.byteLength										http://nodejs.org/api/all.html#all_buffer_bytelength_string_encoding
Buffer.compare	A										<section class="prog__container"><p id="obj.desc">Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of\n<code>Buffer</code> instances. This is equivalent to calling\n<code>buf1.compare(buf2)</code>.\nExample:\n<pre><code class="lang-js">const buf1 = Buffer.from(&#39;1234&#39;);\nconst buf2 = Buffer.from(&#39;0123&#39;);\nconst arr = [buf1, buf2];\n\n// Prints: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]\n// (This result is equal to: [buf2, buf1])\nconsole.log(arr.sort(Buffer.compare));\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_buffer_compare_buf1_buf2
Buffer compare	R	Buffer.compare										http://nodejs.org/api/all.html#all_buffer_compare_buf1_buf2
Buffer.concat	A										<section class="prog__container"><p id="obj.desc">Returns a new <code>Buffer</code> which is the result of concatenating all the <code>Buffer</code>\ninstances in the <code>list</code> together.\nIf the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length\n<code>Buffer</code> is returned.\nIf <code>totalLength</code> is not provided, it is calculated from the <code>Buffer</code> instances\nin <code>list</code>. This however causes an additional loop to be executed in order to\ncalculate the <code>totalLength</code>, so it is faster to provide the length explicitly if\nit is already known.\nExample: Create a single <code>Buffer</code> from a list of three <code>Buffer</code> instances\n<pre><code class="lang-js">const buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\n// Prints: 42\nconsole.log(totalLength);\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\n// Prints: &lt;Buffer 00 00 00 00 ...&gt;\nconsole.log(bufA);\n\n// Prints: 42\nconsole.log(bufA.length);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_buffer_concat_list_totallength
Buffer concat	R	Buffer.concat										http://nodejs.org/api/all.html#all_buffer_concat_list_totallength
Buffer.from	A										<section class="prog__container"><p id="obj.desc">Allocates a new <code>Buffer</code> using an <code>array</code> of octets.\nExample:\n<pre><code class="lang-js">// Creates a new Buffer containing ASCII bytes of the string &#39;buffer&#39;\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</code></pre>\nA <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.\n</section>	http://nodejs.org/api/all.html#all_buffer_from_array
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_array
Buffer.from	A										<section class="prog__container"><p id="obj.desc">When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\nthe newly created <code>Buffer</code> will share the same allocated memory as the\n<code>TypedArray</code>.\nExample:\n<pre><code class="lang-js">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = Buffer.from(arr.buffer);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf);\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf);\n</code></pre>\nThe optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.\nExample:\n<pre><code class="lang-js">const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\n\n// Prints: 2\nconsole.log(buf.length);\n</code></pre>\nA <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <code>ArrayBuffer</code>.\n</section>	http://nodejs.org/api/all.html#all_buffer_from_arraybuffer_byteoffset_length
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_arraybuffer_byteoffset_length
Buffer.from	A										<section class="prog__container"><p id="obj.desc">Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.\nExample:\n<pre><code class="lang-js">const buf1 = Buffer.from(&#39;buffer&#39;);\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\n\n// Prints: auffer\nconsole.log(buf1.toString());\n\n// Prints: buffer\nconsole.log(buf2.toString());\n</code></pre>\nA <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.\n</section>	http://nodejs.org/api/all.html#all_buffer_from_buffer
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_buffer
Buffer.from	A										<section class="prog__container"><p id="obj.desc">Creates a new <code>Buffer</code> containing the given JavaScript string <code>string</code>. If\nprovided, the <code>encoding</code> parameter identifies the character encoding of <code>string</code>.\nExamples:\n<pre><code class="lang-js">const buf1 = Buffer.from(&#39;this is a tést&#39;);\n\n// Prints: this is a tést\nconsole.log(buf1.toString());\n\n// Prints: this is a tC)st\nconsole.log(buf1.toString(&#39;ascii&#39;));\n\n\nconst buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\n\n// Prints: this is a tést\nconsole.log(buf2.toString());\n</code></pre>\nA <code>TypeError</code> will be thrown if <code>str</code> is not a string.\n</section>	http://nodejs.org/api/all.html#all_buffer_from_string_encoding
Buffer from	R	Buffer.from										http://nodejs.org/api/all.html#all_buffer_from_string_encoding
Buffer.isBuffer	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if <code>obj</code> is a <code>Buffer</code>, <code>false</code> otherwise.\n</section>	http://nodejs.org/api/all.html#all_buffer_isbuffer_obj
Buffer isBuffer	R	Buffer.isBuffer										http://nodejs.org/api/all.html#all_buffer_isbuffer_obj
Buffer.isEncoding	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if <code>encoding</code> contains a supported character encoding, or <code>false</code>\notherwise.\n</section>	http://nodejs.org/api/all.html#all_buffer_isencoding_encoding
Buffer isEncoding	R	Buffer.isEncoding										http://nodejs.org/api/all.html#all_buffer_isencoding_encoding
SlowBuffer	A										<section class="prog__container"><p id="obj.desc">Returns an un-pooled <code>Buffer</code>.\nIn order to avoid the garbage collection overhead of creating many individually\nallocated <code>Buffer</code> instances, by default allocations under 4KB are sliced from a\nsingle larger allocated object. This approach improves both performance and memory\nusage since v8 does not need to track and cleanup as many <code>Persistent</code> objects.\nIn the case where a developer may need to retain a small chunk of memory from a\npool for an indeterminate amount of time, it may be appropriate to create an\nun-pooled <code>Buffer</code> instance using <code>SlowBuffer</code> then copy out the relevant bits.\nExample:\n<pre><code class="lang-js">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre>\nUse of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer\nhas observed undue memory retention in their applications.\n</section>	http://nodejs.org/api/all.html#all_slowbuffer_size
child_process	A										<section class="prog__container"><p id="obj.desc">The <code>child_process</code> module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the <code>child_process.spawn()</code> function:\n<pre><code class="lang-js">const spawn = require(&#39;child_process&#39;).spawn;\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre>\nBy default, pipes for <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are established between\nthe parent Node.js process and the spawned child. It is possible to stream data\nthrough these pipes in a non-blocking way. <em>Note, however, that some programs\nuse line-buffered I/O internally. While that does not affect Node.js, it can\nmean that data sent to the child process may not be immediately consumed.</em>\nThe <code>child_process.spawn()</code> method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The <code>child_process.spawnSync()</code>\nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.\nFor convenience, the <code>child_process</code> module provides a handful of synchronous\nand asynchronous alternatives to <code>child_process.spawn()</code> and\n<code>child_process.spawnSync()</code>.  <em>Note that each of these alternatives are\nimplemented on top of <code>child_process.spawn()</code> or <code>child_process.spawnSync()</code>.</em>\n<ul>\n<li><code>child_process.exec()</code>: spawns a shell and runs a command within that shell,\npassing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li>\n<li><code>child_process.execFile()</code>: similar to <code>child_process.exec()</code> except that\nit spawns the command directly without first spawning a shell.</li>\n<li><code>child_process.fork()</code>: spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.</li>\n<li><code>child_process.execSync()</code>: a synchronous version of\n<code>child_process.exec()</code> that <em>will</em> block the Node.js event loop.</li>\n<li><code>child_process.execFileSync()</code>: a synchronous version of\n<code>child_process.execFile()</code> that <em>will</em> block the Node.js event loop.</li>\n</ul>\nFor certain use cases, such as automating shell scripts, the\nsynchronous counterparts may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_child_process
ChildProcess	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>ChildProcess</code> class are <code>EventEmitters</code> that represent\nspawned child processes.\nInstances of <code>ChildProcess</code> are not intended to be created directly. Rather,\nuse the <code>child_process.spawn()</code>, <code>child_process.exec()</code>,\n<code>child_process.execFile()</code>, or <code>child_process.fork()</code> methods to create\ninstances of <code>ChildProcess</code>.\n</section>	http://nodejs.org/api/all.html#all_childprocess
ChildProcess.disconnect	A										<section class="prog__container"><p id="obj.desc">Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the <code>child.connected</code> and <code>process.connected</code> properties in both\nthe parent and child (respectively) will be set to <code>false</code>, and it will be no\nlonger possible to pass messages between the processes.\nThe <code>&#39;disconnect&#39;</code> event will be emitted when there are no messages in the\nprocess of being received. This will most often be triggered immediately after\ncalling <code>child.disconnect()</code>.\nNote that when the child process is a Node.js instance (e.g. spawned using\n<code>child_process.fork()</code>), the <code>process.disconnect()</code> method can be invoked\nwithin the child process to close the IPC channel as well.\n<pre><code>child.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess disconnect	R	ChildProcess.disconnect										http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess.kill	A										<section class="prog__container"><p id="obj.desc">The <code>child.kill()</code> methods sends a signal to the child process. If no argument\nis given, the process will be sent the <code>&#39;SIGTERM&#39;</code> signal. See signal(7) for\na list of available signals.\n<pre><code class="lang-js">const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\ngrep.on(&#39;close&#39;, (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill(&#39;SIGHUP&#39;);\n</code></pre>\nThe <code>ChildProcess</code> object may emit an <code>&#39;error&#39;</code> event if the signal cannot be\ndelivered. Sending a signal to a child process that has already exited is not\nan error but may have unforeseen consequences. Specifically, if the process\nidentifier (PID) has been reassigned to another process, the signal will be\ndelivered to that process instead which can have unexpected results.\nNote that while the function is called <code>kill</code>, the signal delivered to the\nchild process may not actually terminate the process.\nSee kill(2) for reference.\nAlso note: on Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such\nas in this example:\n<pre><code class="lang-js">&#39;use strict&#39;;\nconst spawn = require(&#39;child_process&#39;).spawn;\n\nlet child = spawn(&#39;sh&#39;, [&#39;-c&#39;,\n  `node -e &quot;setInterval(() =&gt; {\n      console.log(process.pid, &#39;is alive&#39;)\n    }, 500);&quot;`\n  ], {\n    stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]\n  });\n\nsetTimeout(() =&gt; {\n  child.kill(); // does not terminate the node process in the shell\n}, 2000);\n</code></pre>\n<pre><code>child.kill([signal])</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_kill_signal
ChildProcess kill	R	ChildProcess.kill										http://nodejs.org/api/all.html#all_childprocess_kill_signal
ChildProcess.send	A										<section class="prog__container"><p id="obj.desc">When an IPC channel has been established between the parent and child (\ni.e. when using <code>child_process.fork()</code>), the <code>child.send()</code> method can be\nused to send messages to the child process. When the child process is a Node.js\ninstance, these messages can be received via the <code>process.on(&#39;message&#39;)</code> event.\nFor example, in the parent script:\n<pre><code class="lang-js">const cp = require(&#39;child_process&#39;);\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;PARENT got message:&#39;, m);\n});\n\nn.send({ hello: &#39;world&#39; });\n</code></pre>\nAnd then the child script, <code>&#39;sub.js&#39;</code> might look like this:\n<pre><code class="lang-js">process.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;CHILD got message:&#39;, m);\n});\n\nprocess.send({ foo: &#39;bar&#39; });\n</code></pre>\nChild Node.js processes will have a <code>process.send()</code> method of their own that\nallows the child to send messages back to the parent.\nThere is a special case when sending a <code>{cmd: &#39;NODE_foo&#39;}</code> message. All messages\ncontaining a <code>NODE_</code> prefix in its <code>cmd</code> property are considered to be reserved\nfor use within Node.js core and will not be emitted in the child&#39;s\n<code>process.on(&#39;message&#39;)</code> event. Rather, such messages are emitted using the\n<code>process.on(&#39;internalMessage&#39;)</code> event and are consumed internally by Node.js.\nApplications should avoid using such messages or listening for\n<code>&#39;internalMessage&#39;</code> events as it is subject to change without notice.\nThe optional <code>sendHandle</code> argument that may be passed to <code>child.send()</code> is for\npassing a TCP server or socket object to the child process. The child will\nreceive the object as the second argument passed to the callback function\nregistered on the <code>process.on(&#39;message&#39;)</code> event. Any data that is received\nand buffered in the socket will not be sent to the child.\nThe <code>options</code> argument, if present, is an object used to parameterize the\nsending of certain types of handles. <code>options</code> supports the following\nproperties:\n<ul>\n<li><code>keepOpen</code> - A Boolean value that can be used when passing instances of\n<code>net.Socket</code>. When <code>true</code>, the socket is kept open in the sending process.\nDefaults to <code>false</code>.</li>\n</ul>\nThe optional <code>callback</code> is a function that is invoked after the message is\nsent but before the child may have received it.  The function is called with a\nsingle argument: <code>null</code> on success, or an <code>Error</code> object on failure.\nIf no <code>callback</code> function is provided and the message cannot be sent, an\n<code>&#39;error&#39;</code> event will be emitted by the <code>ChildProcess</code> object. This can happen,\nfor instance, when the child process has already exited.\n<code>child.send()</code> will return <code>false</code> if the channel has closed or when the\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\nmore. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be\nused to implement flow control.\n<h4>Example: sending a server object</h4>\nThe <code>sendHandle</code> argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:\n<pre><code class="lang-js">const child = require(&#39;child_process&#39;).fork(&#39;child.js&#39;);\n\n// Open up the server object and send the handle.\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.end(&#39;handled by parent&#39;);\n});\nserver.listen(1337, () =&gt; {\n  child.send(&#39;server&#39;, server);\n});\n</code></pre>\nThe child would then receive the server object as:\n<pre><code class="lang-js">process.on(&#39;message&#39;, (m, server) =&gt; {\n  if (m === &#39;server&#39;) {\n    server.on(&#39;connection&#39;, (socket) =&gt; {\n      socket.end(&#39;handled by child&#39;);\n    });\n  }\n});\n</code></pre>\nOnce the server is now shared between the parent and child, some connections\ncan be handled by the parent and some by the child.\nWhile the example above uses a server created using the <code>net</code> module, <code>dgram</code>\nmodule servers use exactly the same workflow with the exceptions of listening on\na <code>&#39;message&#39;</code> event instead of <code>&#39;connection&#39;</code> and using <code>server.bind()</code> instead of\n<code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.\n<h4>Example: sending a socket object</h4>\nSimilarly, the <code>sendHandler</code> argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:\n<pre><code class="lang-js">const normal = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;normal&#39;]);\nconst special = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;special&#39;]);\n\n// Open up the server and send sockets to child\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === &#39;74.125.127.100&#39;) {\n    special.send(&#39;socket&#39;, socket);\n    return;\n  }\n  // This is normal priority\n  normal.send(&#39;socket&#39;, socket);\n});\nserver.listen(1337);\n</code></pre>\nThe <code>child.js</code> would receive the socket handle as the second argument passed\nto the event callback function:\n<pre><code class="lang-js">process.on(&#39;message&#39;, (m, socket) =&gt; {\n  if (m === &#39;socket&#39;) {\n    socket.end(`Request handled with ${process.argv[2]} priority`);\n  }\n});\n</code></pre>\nOnce a socket has been passed to a child, the parent is no longer capable of\ntracking when the socket is destroyed. To indicate this, the <code>.connections</code>\nproperty becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when\nthis occurs.\n<em>Note: this function uses <code>JSON.stringify()</code> internally to serialize the\n<code>message</code>.</em>\n<pre><code>child.send(message[, sendHandle[, options]][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_childprocess_send_message_sendhandle_options_callback
ChildProcess send	R	ChildProcess.send										http://nodejs.org/api/all.html#all_childprocess_send_message_sendhandle_options_callback
ChildProcess.channel	A										<section class="prog__container"><p id="obj.desc">The <code>child.channel</code> property is a reference to the child&#39;s IPC channel. If no\nIPC channel currently exists, this property is <code>undefined</code>.\n</section>	http://nodejs.org/api/all.html#all_childprocess_channel
ChildProcess channel	R	ChildProcess.channel										http://nodejs.org/api/all.html#all_childprocess_channel
ChildProcess.connected	A										<section class="prog__container"><p id="obj.desc">The <code>child.connected</code> property indicates whether it is still possible to send\nand receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it\nis no longer possible to send or receive messages.\n</section>	http://nodejs.org/api/all.html#all_childprocess_connected
ChildProcess connected	R	ChildProcess.connected										http://nodejs.org/api/all.html#all_childprocess_connected
ChildProcess.pid	A										<section class="prog__container"><p id="obj.desc">Returns the process identifier (PID) of the child process.\nExample:\n<pre><code class="lang-js">const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_childprocess_pid
ChildProcess pid	R	ChildProcess.pid										http://nodejs.org/api/all.html#all_childprocess_pid
ChildProcess.stderr	A										<section class="prog__container"><p id="obj.desc">A <code>Readable Stream</code> that represents the child process&#39;s <code>stderr</code>.\nIf the child was spawned with <code>stdio[2]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.\n<code>child.stderr</code> is an alias for <code>child.stdio[2]</code>. Both properties will refer to\nthe same value.\n</section>	http://nodejs.org/api/all.html#all_childprocess_stderr
ChildProcess stderr	R	ChildProcess.stderr										http://nodejs.org/api/all.html#all_childprocess_stderr
ChildProcess.stdin	A										<section class="prog__container"><p id="obj.desc">A <code>Writable Stream</code> that represents the child process&#39;s <code>stdin</code>.\n<em>Note that if a child process waits to read all of its input, the child will not\ncontinue until this stream has been closed via <code>end()</code>.</em>\nIf the child was spawned with <code>stdio[0]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.\n<code>child.stdin</code> is an alias for <code>child.stdio[0]</code>. Both properties will refer to\nthe same value.\n</section>	http://nodejs.org/api/all.html#all_childprocess_stdin
ChildProcess stdin	R	ChildProcess.stdin										http://nodejs.org/api/all.html#all_childprocess_stdin
ChildProcess.stdio	A										<section class="prog__container"><p id="obj.desc">A sparse array of pipes to the child process, corresponding with positions in\nthe <code>stdio</code> option passed to <code>child_process.spawn()</code> that have been set\nto the value <code>&#39;pipe&#39;</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and\n<code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and\n<code>child.stderr</code>, respectively.\nIn the following example, only the child&#39;s fd <code>1</code> (stdout) is configured as a\npipe, so only the parent&#39;s <code>child.stdio[1]</code> is a stream, all other values in\nthe array are <code>null</code>.\n<pre><code class="lang-js">const assert = require(&#39;assert&#39;);\nconst fs = require(&#39;fs&#39;);\nconst child_process = require(&#39;child_process&#39;);\n\nconst child = child_process.spawn(&#39;ls&#39;, {\n    stdio: [\n      0, // Use parents stdin for child\n      &#39;pipe&#39;, // Pipe child&#39;s stdout to parent\n      fs.openSync(&#39;err.out&#39;, &#39;w&#39;) // Direct child&#39;s stderr to a file\n    ]\n});\n\nassert.equal(child.stdio[0], null);\nassert.equal(child.stdio[0], child.stdin);\n\nassert(child.stdout);\nassert.equal(child.stdio[1], child.stdout);\n\nassert.equal(child.stdio[2], null);\nassert.equal(child.stdio[2], child.stderr);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_childprocess_stdio
ChildProcess stdio	R	ChildProcess.stdio										http://nodejs.org/api/all.html#all_childprocess_stdio
ChildProcess.stdout	A										<section class="prog__container"><p id="obj.desc">A <code>Readable Stream</code> that represents the child process&#39;s <code>stdout</code>.\nIf the child was spawned with <code>stdio[1]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.\n<code>child.stdout</code> is an alias for <code>child.stdio[1]</code>. Both properties will refer\nto the same value.\n</section>	http://nodejs.org/api/all.html#all_childprocess_stdout
ChildProcess stdout	R	ChildProcess.stdout										http://nodejs.org/api/all.html#all_childprocess_stdout
ChildProcess.close	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;close&#39;</code> event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the <code>&#39;exit&#39;</code> event, since multiple\nprocesses might share the same stdio streams.\n</section>	http://nodejs.org/api/all.html#all_childprocess_close
ChildProcess close	R	ChildProcess.close										http://nodejs.org/api/all.html#all_childprocess_close
ChildProcess.disconnect	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;disconnect&#39;</code> event is emitted after calling the\n<code>child.disconnect()</code> method in parent process or <code>process.disconnect()</code> in child process. After\ndisconnecting it is no longer possible to send or receive messages, and the\n<code>child.connected</code> property is <code>false</code>.\n</section>	http://nodejs.org/api/all.html#all_childprocess_disconnect
ChildProcess.error	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;error&#39;</code> event is emitted whenever:\n<ol>\n<li>The process could not be spawned, or</li>\n<li>The process could not be killed, or</li>\n<li>Sending a message to the child process failed.</li>\n</ol>\nNote that the <code>&#39;exit&#39;</code> event may or may not fire after an error has occurred.\nIf you are listening to both the <code>&#39;exit&#39;</code> and <code>&#39;error&#39;</code> events, it is important\nto guard against accidentally invoking handler functions multiple times.\nSee also <code>child.kill()</code> and <code>child.send()</code>.\n</section>	http://nodejs.org/api/all.html#all_childprocess_error
ChildProcess error	R	ChildProcess.error										http://nodejs.org/api/all.html#all_childprocess_error
ChildProcess.exit	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;exit&#39;</code> event is emitted after the child process ends. If the process\nexited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the\nprocess terminated due to receipt of a signal, <code>signal</code> is the string name of\nthe signal, otherwise <code>null</code>. One of the two will always be non-null.\nNote that when the <code>&#39;exit&#39;</code> event is triggered, child process stdio streams\nmight still be open.\nAlso, note that Node.js establishes signal handlers for <code>SIGINT</code> and\n<code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt\nof those signals. Rather, Node.js will perform a sequence of cleanup actions\nand then will re-raise the handled signal.\nSee waitpid(2).\n</section>	http://nodejs.org/api/all.html#all_childprocess_exit
ChildProcess exit	R	ChildProcess.exit										http://nodejs.org/api/all.html#all_childprocess_exit
ChildProcess.message	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;message&#39;</code> event is triggered when a child process uses <code>process.send()</code>\nto send messages.\n</section>	http://nodejs.org/api/all.html#all_childprocess_message
ChildProcess message	R	ChildProcess.message										http://nodejs.org/api/all.html#all_childprocess_message
cluster	A										<section class="prog__container"><p id="obj.desc">A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.\nThe cluster module allows you to easily create child processes that\nall share server ports.\n<pre><code class="lang-js">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\nconst numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\n&#39;);\n  }).listen(8000);\n}\n</code></pre>\nRunning Node.js will now share port 8000 between the workers:\n<pre><code class="lang-txt">$ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n</code></pre>\nPlease note that on Windows, it is not yet possible to set up a named pipe\nserver in a worker.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_cluster
cluster.disconnect	A										<section class="prog__container"><p id="obj.desc">Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.\nWhen they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.\nThe method takes an optional callback argument which will be called when finished.\nThis can only be called from the master process.\n<pre><code>cluster.disconnect([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_disconnect_callback
cluster disconnect	R	cluster.disconnect										http://nodejs.org/api/all.html#all_cluster_disconnect_callback
cluster.fork	A										<section class="prog__container"><p id="obj.desc">Spawn a new worker process.\nThis can only be called from the master process.\n<pre><code>cluster.fork([env])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_fork_env
cluster fork	R	cluster.fork										http://nodejs.org/api/all.html#all_cluster_fork_env
cluster.setupMaster	A										<section class="prog__container"><p id="obj.desc"><code>setupMaster</code> is used to change the default &#39;fork&#39; behavior. Once called,\nthe settings will be present in <code>cluster.settings</code>.\nNote that:\n<ul>\n<li>any settings changes only affect future calls to <code>.fork()</code> and have no\neffect on workers that are already running</li>\n<li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is\nthe <code>env</code> passed to <code>.fork()</code></li>\n<li>the defaults above apply to the first call only, the defaults for later\ncalls is the current value at the time of <code>cluster.setupMaster()</code> is called</li>\n</ul>\nExample:\n<pre><code class="lang-js">const cluster = require(&#39;cluster&#39;);\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;https&#39;],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;http&#39;]\n});\ncluster.fork(); // http worker\n</code></pre>\nThis can only be called from the master process.\n<pre><code>cluster.setupMaster([settings])</code></pre></section>	http://nodejs.org/api/all.html#all_cluster_setupmaster_settings
cluster setupMaster	R	cluster.setupMaster										http://nodejs.org/api/all.html#all_cluster_setupmaster_settings
cluster.isMaster	A										<section class="prog__container"><p id="obj.desc">True if the process is a master. This is determined\nby the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is\nundefined, then <code>isMaster</code> is <code>true</code>.\n</section>	http://nodejs.org/api/all.html#all_cluster_ismaster
cluster isMaster	R	cluster.isMaster										http://nodejs.org/api/all.html#all_cluster_ismaster
cluster.isWorker	A										<section class="prog__container"><p id="obj.desc">True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).\n</section>	http://nodejs.org/api/all.html#all_cluster_isworker
cluster isWorker	R	cluster.isWorker										http://nodejs.org/api/all.html#all_cluster_isworker
cluster.schedulingPolicy	A										<section class="prog__container"><p id="obj.desc">The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or\n<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a\nglobal setting and effectively frozen once you spawn the first worker\nor call <code>cluster.setupMaster()</code>, whatever comes first.\n<code>SCHED_RR</code> is the default on all operating systems except Windows.\nWindows will change to <code>SCHED_RR</code> once libuv is able to effectively\ndistribute IOCP handles without incurring a large performance hit.\n<code>cluster.schedulingPolicy</code> can also be set through the\n<code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid\nvalues are <code>&quot;rr&quot;</code> and <code>&quot;none&quot;</code>.\n</section>	http://nodejs.org/api/all.html#all_cluster_schedulingpolicy
cluster schedulingPolicy	R	cluster.schedulingPolicy										http://nodejs.org/api/all.html#all_cluster_schedulingpolicy
cluster.settings	A										<section class="prog__container"><p id="obj.desc">After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain\nthe settings, including the default values.\nThis object is not supposed to be changed or set manually, by you.\n</section>	http://nodejs.org/api/all.html#all_cluster_settings
cluster settings	R	cluster.settings										http://nodejs.org/api/all.html#all_cluster_settings
cluster.worker	A										<section class="prog__container"><p id="obj.desc">A reference to the current worker object. Not available in the master process.\n<pre><code class="lang-js">const cluster = require(&#39;cluster&#39;);\n\nif (cluster.isMaster) {\n  console.log(&#39;I am master&#39;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cluster_worker
cluster worker	R	cluster.worker										http://nodejs.org/api/all.html#all_cluster_worker
cluster.workers	A										<section class="prog__container"><p id="obj.desc">A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.\nA worker is removed from cluster.workers after the worker has disconnected <em>and</em>\nexited. The order between these two events cannot be determined in advance.\nHowever, it is guaranteed that the removal from the cluster.workers list happens\nbefore last <code>&#39;disconnect&#39;</code> or <code>&#39;exit&#39;</code> event is emitted.\n<pre><code class="lang-js">// Go through all workers\nfunction eachWorker(callback) {\n  for (var id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send(&#39;big announcement to all workers&#39;);\n});\n</code></pre>\nShould you wish to reference a worker over a communication channel, using\nthe worker&#39;s unique id is the easiest way to find the worker.\n<pre><code class="lang-js">socket.on(&#39;data&#39;, (id) =&gt; {\n  var worker = cluster.workers[id];\n});\n</code></pre>\n<!-- [end-include:cluster.md] -->\n<!-- [start-include:cli.md] -->\n</section>	http://nodejs.org/api/all.html#all_cluster_workers
cluster workers	R	cluster.workers										http://nodejs.org/api/all.html#all_cluster_workers
Worker	A										<section class="prog__container"><p id="obj.desc">A Worker object contains all public information and method about a worker.\nIn the master it can be obtained using <code>cluster.workers</code>. In a worker\nit can be obtained using <code>cluster.worker</code>.\n</section>	http://nodejs.org/api/all.html#all_worker
Worker.disconnect	A										<section class="prog__container"><p id="obj.desc">In a worker, this function will close all servers, wait for the <code>&#39;close&#39;</code> event on\nthose servers, and then disconnect the IPC channel.\nIn the master, an internal message is sent to the worker causing it to call\n<code>.disconnect()</code> on itself.\nCauses <code>.exitedAfterDisconnect</code> to be set.\nNote that after a server is closed, it will no longer accept new connections,\nbut connections may be accepted by any other listening worker. Existing\nconnections will be allowed to close as usual. When no more connections exist,\nsee <code>server.close()</code>, the IPC channel to the worker will close allowing it to\ndie gracefully.\nThe above applies <em>only</em> to server connections, client connections are not\nautomatically closed by workers, and disconnect does not wait for them to close\nbefore exiting.\nNote that in a worker, <code>process.disconnect</code> exists, but it is not this function,\nit is <code>disconnect</code>.\nBecause long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe <code>&#39;disconnect&#39;</code> event has not been emitted after some time.\n<pre><code class="lang-js">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  var timeout;\n\n  worker.on(&#39;listening&#39;, (address) =&gt; {\n    worker.send(&#39;shutdown&#39;);\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&#39;disconnect&#39;, () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require(&#39;net&#39;);\n  var server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    if (msg === &#39;shutdown&#39;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n</code></pre>\n<pre><code>worker.disconnect()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_disconnect
Worker disconnect	R	Worker.disconnect										http://nodejs.org/api/all.html#all_worker_disconnect
Worker.isConnected	A										<section class="prog__container"><p id="obj.desc">This function returns <code>true</code> if the worker is connected to its master via its IPC\nchannel, <code>false</code> otherwise. A worker is connected to its master after it&#39;s been\ncreated. It is disconnected after the <code>&#39;disconnect&#39;</code> event is emitted.\n<pre><code>worker.isConnected()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_isconnected
Worker isConnected	R	Worker.isConnected										http://nodejs.org/api/all.html#all_worker_isconnected
Worker.isDead	A										<section class="prog__container"><p id="obj.desc">This function returns <code>true</code> if the worker&#39;s process has terminated (either\nbecause of exiting or being signaled). Otherwise, it returns <code>false</code>.\n<pre><code>worker.isDead()</code></pre></section>	http://nodejs.org/api/all.html#all_worker_isdead
Worker isDead	R	Worker.isDead										http://nodejs.org/api/all.html#all_worker_isdead
Worker.kill	A										<section class="prog__container"><p id="obj.desc">This function will kill the worker. In the master, it does this by disconnecting\nthe <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the\nworker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.\nCauses <code>.exitedAfterDisconnect</code> to be set.\nThis method is aliased as <code>worker.destroy()</code> for backwards compatibility.\nNote that in a worker, <code>process.kill()</code> exists, but it is not this function,\nit is <code>kill</code>.\n<pre><code>worker.kill([signal='SIGTERM'])</code></pre></section>	http://nodejs.org/api/all.html#all_worker_kill_signal
Worker kill	R	Worker.kill										http://nodejs.org/api/all.html#all_worker_kill_signal
Worker.send	A										<section class="prog__container"><p id="obj.desc">Send a message to a worker or master, optionally with a handle.\nIn the master this sends a message to a specific worker. It is identical to\n<code>ChildProcess.send()</code>.\nIn a worker this sends a message to the master. It is identical to\n<code>process.send()</code>.\nThis example will echo back all messages from the master:\n<pre><code class="lang-js">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&#39;hi there&#39;);\n\n} else if (cluster.isWorker) {\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    process.send(msg);\n  });\n}\n</code></pre>\n<pre><code>worker.send(message[, sendHandle][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_worker_send_message_sendhandle_callback
Worker send	R	Worker.send										http://nodejs.org/api/all.html#all_worker_send_message_sendhandle_callback
Worker.exitedAfterDisconnect	A										<section class="prog__container"><p id="obj.desc">Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.\nThe boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.\n<pre><code class="lang-js">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log(&#39;Oh, it was just voluntary – no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_worker_exitedafterdisconnect
Worker exitedAfterDisconnect	R	Worker.exitedAfterDisconnect										http://nodejs.org/api/all.html#all_worker_exitedafterdisconnect
Worker.id	A										<section class="prog__container"><p id="obj.desc">Each new worker is given its own unique id, this id is stored in the\n<code>id</code>.\nWhile a worker is alive, this is the key that indexes it in\ncluster.workers\n</section>	http://nodejs.org/api/all.html#all_worker_id
Worker id	R	Worker.id										http://nodejs.org/api/all.html#all_worker_id
Worker.suicide	A										<section class="prog__container"><p id="obj.desc">An alias to <code>worker.exitedAfterDisconnect</code>.\nSet by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.\nThe boolean <code>worker.suicide</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.\n<pre><code class="lang-js">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.suicide === true) {\n    console.log(&#39;Oh, it was just voluntary – no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre>\nThis API only exists for backwards compatibility and will be removed in the\nfuture.\n</section>	http://nodejs.org/api/all.html#all_worker_suicide
Worker suicide	R	Worker.suicide										http://nodejs.org/api/all.html#all_worker_suicide
Worker.disconnect	A										<section class="prog__container"><p id="obj.desc">Similar to the <code>cluster.on(&#39;disconnect&#39;)</code> event, but specific to this worker.\n<pre><code class="lang-js">cluster.fork().on(&#39;disconnect&#39;, () =&gt; {\n  // Worker has disconnected\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_worker_disconnect
Worker.error	A										<section class="prog__container"><p id="obj.desc">This event is the same as the one provided by <code>child_process.fork()</code>.\nIn a worker you can also use <code>process.on(&#39;error&#39;)</code>.\n</section>	http://nodejs.org/api/all.html#all_worker_error
Worker error	R	Worker.error										http://nodejs.org/api/all.html#all_worker_error
Worker.exit	A										<section class="prog__container"><p id="obj.desc">Similar to the <code>cluster.on(&#39;exit&#39;)</code> event, but specific to this worker.\n<pre><code class="lang-js">const worker = cluster.fork();\nworker.on(&#39;exit&#39;, (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log(&#39;worker success!&#39;);\n  }\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_worker_exit
Worker exit	R	Worker.exit										http://nodejs.org/api/all.html#all_worker_exit
Worker.listening	A										<section class="prog__container"><p id="obj.desc">Similar to the <code>cluster.on(&#39;listening&#39;)</code> event, but specific to this worker.\n<pre><code class="lang-js">cluster.fork().on(&#39;listening&#39;, (address) =&gt; {\n  // Worker is listening\n});\n</code></pre>\nIt is not emitted in the worker.\n</section>	http://nodejs.org/api/all.html#all_worker_listening
Worker listening	R	Worker.listening										http://nodejs.org/api/all.html#all_worker_listening
Worker.message	A										<section class="prog__container"><p id="obj.desc">Similar to the <code>cluster.on(&#39;message&#39;)</code> event, but specific to this worker. In a\nworker you can also use <code>process.on(&#39;message&#39;)</code>.\nSee <code>process</code> event: <code>&#39;message&#39;</code>.\nAs an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:\n<pre><code class="lang-js">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(&#39;numReqs =&#39;, numReqs);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &#39;notifyRequest&#39;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require(&#39;os&#39;).cpus().length;\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  Object.keys(cluster.workers).forEach((id) =&gt; {\n    cluster.workers[id].on(&#39;message&#39;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\n&#39;);\n\n    // notify master about the request\n    process.send({ cmd: &#39;notifyRequest&#39; });\n  }).listen(8000);\n}\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_worker_message
Worker message	R	Worker.message										http://nodejs.org/api/all.html#all_worker_message
Worker.online	A										<section class="prog__container"><p id="obj.desc">Similar to the <code>cluster.on(&#39;online&#39;)</code> event, but specific to this worker.\n<pre><code class="lang-js">cluster.fork().on(&#39;online&#39;, () =&gt; {\n  // Worker is online\n});\n</code></pre>\nIt is not emitted in the worker.\n</section>	http://nodejs.org/api/all.html#all_worker_online
Worker online	R	Worker.online										http://nodejs.org/api/all.html#all_worker_online
cluster.disconnect	A										<section class="prog__container"><p id="obj.desc">Emitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\nworker.disconnect()).\nThere may be a delay between the <code>&#39;disconnect&#39;</code> and <code>&#39;exit&#39;</code> events.  These events\ncan be used to detect if the process is stuck in a cleanup or if there are\nlong-living connections.\n<pre><code class="lang-js">cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cluster_disconnect
cluster disconnect	R	cluster.disconnect										http://nodejs.org/api/all.html#all_cluster_disconnect
cluster.exit	A										<section class="prog__container"><p id="obj.desc">When any of the workers die the cluster module will emit the <code>&#39;exit&#39;</code> event.\nThis can be used to restart the worker by calling <code>.fork()</code> again.\n<pre><code class="lang-js">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  console.log(&#39;worker %d died (%s). restarting...&#39;,\n    worker.process.pid, signal || code);\n  cluster.fork();\n});\n</code></pre>\nSee child_process event: &#39;exit&#39;.\n</section>	http://nodejs.org/api/all.html#all_cluster_exit
cluster exit	R	cluster.exit										http://nodejs.org/api/all.html#all_cluster_exit
cluster.fork	A										<section class="prog__container"><p id="obj.desc">When a new worker is forked the cluster module will emit a <code>&#39;fork&#39;</code> event.\nThis can be used to log worker activity, and create your own timeout.\n<pre><code class="lang-js">var timeouts = [];\nfunction errorMsg() {\n  console.error(&#39;Something must be wrong with the connection ...&#39;);\n}\n\ncluster.on(&#39;fork&#39;, (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cluster_fork
cluster fork	R	cluster.fork										http://nodejs.org/api/all.html#all_cluster_fork
cluster.listening	A										<section class="prog__container"><p id="obj.desc">After calling <code>listen()</code> from a worker, when the <code>&#39;listening&#39;</code> event is emitted on\nthe server, a <code>&#39;listening&#39;</code> event will also be emitted on <code>cluster</code> in the master.\nThe event handler is executed with two arguments, the <code>worker</code> contains the worker\nobject and the <code>address</code> object contains the following connection properties:\n<code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening\non more than one address.\n<pre><code class="lang-js">cluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n</code></pre>\nThe <code>addressType</code> is one of:\n<ul>\n<li><code>4</code> (TCPv4)</li>\n<li><code>6</code> (TCPv6)</li>\n<li><code>-1</code> (unix domain socket)</li>\n<li><code>&quot;udp4&quot;</code> or <code>&quot;udp6&quot;</code> (UDP v4 or v6)</li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_cluster_listening
cluster listening	R	cluster.listening										http://nodejs.org/api/all.html#all_cluster_listening
cluster.message	A										<section class="prog__container"><p id="obj.desc">Emitted when the cluster master receives a message from any worker.\nSee child_process event: &#39;message&#39;.\nBefore Node.js v6.0, this event emitted only the message and the handle,\nbut not the worker object, contrary to what the documentation stated.\nIf you need to support older versions and don&#39;t need the worker object,\nyou can work around the discrepancy by checking the number of arguments:\n<pre><code class="lang-js">cluster.on(&#39;message&#39;, function(worker, message, handle) {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cluster_message
cluster message	R	cluster.message										http://nodejs.org/api/all.html#all_cluster_message
cluster.online	A										<section class="prog__container"><p id="obj.desc">After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between <code>&#39;fork&#39;</code> and <code>&#39;online&#39;</code> is that fork is emitted when the\nmaster forks a worker, and &#39;online&#39; is emitted when the worker is running.\n<pre><code class="lang-js">cluster.on(&#39;online&#39;, (worker) =&gt; {\n  console.log(&#39;Yay, the worker responded after it was forked&#39;);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cluster_online
cluster online	R	cluster.online										http://nodejs.org/api/all.html#all_cluster_online
cluster.setup	A										<section class="prog__container"><p id="obj.desc">Emitted every time <code>.setupMaster()</code> is called.\nThe <code>settings</code> object is the <code>cluster.settings</code> object at the time\n<code>.setupMaster()</code> was called and is advisory only, since multiple calls to\n<code>.setupMaster()</code> can be made in a single tick.\nIf accuracy is important, use <code>cluster.settings</code>.\n</section>	http://nodejs.org/api/all.html#all_cluster_setup
cluster setup	R	cluster.setup										http://nodejs.org/api/all.html#all_cluster_setup
crypto	A										<section class="prog__container"><p id="obj.desc">The <code>crypto</code> module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign and verify functions.\nUse <code>require(&#39;crypto&#39;)</code> to access this module.\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\n\nconst secret = &#39;abcdefg&#39;;\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\n                   .update(&#39;I love cupcakes&#39;)\n                   .digest(&#39;hex&#39;);\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_crypto
Certificate	A										<section class="prog__container"><p id="obj.desc">SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and now specified formally as part of HTML5&#39;s <code>keygen</code> element.\nThe <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n<code>&lt;keygen&gt;</code> element. Node.js uses OpenSSL&#39;s SPKAC implementation internally.\n</section>	http://nodejs.org/api/all.html#all_certificate
Certificate.Certificate	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\nor by calling <code>crypto.Certificate()</code> as a function:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n</code></pre>\n<pre><code>new crypto.Certificate()</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_certificate
Certificate Certificate	R	Certificate.Certificate										http://nodejs.org/api/all.html#all_certificate_certificate
Certificate.exportChallenge	A										<section class="prog__container"><p id="obj.desc">The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportChallenge()</code> returns the challenge component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.\n<pre><code class="lang-js">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString(&#39;utf8&#39;));\n// Prints: the challenge as a UTF8 string\n</code></pre>\n<pre><code>certificate.exportChallenge(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_exportchallenge_spkac
Certificate exportChallenge	R	Certificate.exportChallenge										http://nodejs.org/api/all.html#all_certificate_exportchallenge_spkac
Certificate.exportPublicKey	A										<section class="prog__container"><p id="obj.desc">The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportPublicKey()</code> returns the public key component in the\nform of a Node.js <code>Buffer</code>. The <code>spkac</code> argument can be either a string\nor a <code>Buffer</code>.\n<pre><code class="lang-js">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n</code></pre>\n<pre><code>certificate.exportPublicKey(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_exportpublickey_spkac
Certificate exportPublicKey	R	Certificate.exportPublicKey										http://nodejs.org/api/all.html#all_certificate_exportpublickey_spkac
Certificate.verifySpkac	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.\nThe <code>spkac</code> argument must be a Node.js <code>Buffer</code>.\n<pre><code class="lang-js">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n</code></pre>\n<pre><code>certificate.verifySpkac(spkac)</code></pre></section>	http://nodejs.org/api/all.html#all_certificate_verifyspkac_spkac
Certificate verifySpkac	R	Certificate.verifySpkac										http://nodejs.org/api/all.html#all_certificate_verifyspkac_spkac
Cipher	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>Cipher</code> class are used to encrypt data. The class can be\nused in one of two ways:\n<ul>\n<li>As a stream that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or</li>\n<li>Using the <code>cipher.update()</code> and <code>cipher.final()</code> methods to produce\nthe encrypted data.</li>\n</ul>\nThe <code>crypto.createCipher()</code> or <code>crypto.createCipheriv()</code> methods are\nused to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.\nExample: Using <code>Cipher</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;&#39;;\ncipher.on(&#39;readable&#39;, () =&gt; {\n  var data = cipher.read();\n  if (data)\n    encrypted += data.toString(&#39;hex&#39;);\n});\ncipher.on(&#39;end&#39;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&#39;some clear text data&#39;);\ncipher.end();\n</code></pre>\nExample: Using <code>Cipher</code> and piped streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\n\ninput.pipe(cipher).pipe(output);\n</code></pre>\nExample: Using the <code>cipher.update()</code> and <code>cipher.final()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\nencrypted += cipher.final(&#39;hex&#39;);\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_cipher
Cipher.final	A										<section class="prog__container"><p id="obj.desc">Returns any remaining enciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <code>Buffer</code> is returned.\nOnce the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no\nlonger be used to encrypt data. Attempts to call <code>cipher.final()</code> more than\nonce will result in an error being thrown.\n<pre><code>cipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_final_output_encoding
Cipher final	R	Cipher.final										http://nodejs.org/api/all.html#all_cipher_final_output_encoding
Cipher.setAAD	A										<section class="prog__container"><p id="obj.desc">When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.\nReturns <code>this</code> for method chaining.\n<pre><code>cipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_setaad_buffer
Cipher setAAD	R	Cipher.setAAD										http://nodejs.org/api/all.html#all_cipher_setaad_buffer
Cipher.getAuthTag	A										<section class="prog__container"><p id="obj.desc">When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.getAuthTag()</code> method returns a <code>Buffer</code> containing\nthe <em>authentication tag</em> that has been computed from the given data.\nThe <code>cipher.getAuthTag()</code> method should only be called after encryption has\nbeen completed using the <code>cipher.final()</code> method.\n<pre><code>cipher.getAuthTag()</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_getauthtag
Cipher getAuthTag	R	Cipher.getAuthTag										http://nodejs.org/api/all.html#all_cipher_getauthtag
Cipher.setAutoPadding	A										<section class="prog__container"><p id="obj.desc">When using block encryption algorithms, the <code>Cipher</code> class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call <code>cipher.setAutoPadding(false)</code>.\nWhen <code>auto_padding</code> is <code>false</code>, the length of the entire input data must be a\nmultiple of the cipher&#39;s block size or <code>cipher.final()</code> will throw an Error.\nDisabling automatic padding is useful for non-standard padding, for instance\nusing <code>0x0</code> instead of PKCS padding.\nThe <code>cipher.setAutoPadding()</code> method must be called before <code>cipher.final()</code>.\nReturns <code>this</code> for method chaining.\n<pre><code>cipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_setautopadding_auto_padding
Cipher setAutoPadding	R	Cipher.setAutoPadding										http://nodejs.org/api/all.html#all_cipher_setautopadding_auto_padding
Cipher.update	A										<section class="prog__container"><p id="obj.desc">Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nit&#39;s value must be one of <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code>, or <code>&#39;latin1&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <code>Buffer</code>. If <code>data</code> is a\n<code>Buffer</code> then <code>input_encoding</code> is ignored.\nThe <code>output_encoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>. If the <code>output_encoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>output_encoding</code> is provided, a <code>Buffer</code> is returned.\nThe <code>cipher.update()</code> method can be called multiple times with new data until\n<code>cipher.final()</code> is called. Calling <code>cipher.update()</code> after\n<code>cipher.final()</code> will result in an error being thrown.\n<pre><code>cipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_cipher_update_data_input_encoding_output_encoding
Cipher update	R	Cipher.update										http://nodejs.org/api/all.html#all_cipher_update_data_input_encoding_output_encoding
Decipher	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>Decipher</code> class are used to decrypt data. The class can be\nused in one of two ways:\n<ul>\n<li>As a stream that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or</li>\n<li>Using the <code>decipher.update()</code> and <code>decipher.final()</code> methods to\nproduce the unencrypted data.</li>\n</ul>\nThe <code>crypto.createDecipher()</code> or <code>crypto.createDecipheriv()</code> methods are\nused to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.\nExample: Using <code>Decipher</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar decrypted = &#39;&#39;;\ndecipher.on(&#39;readable&#39;, () =&gt; {\n  var data = decipher.read();\n  if (data)\n    decrypted += data.toString(&#39;utf8&#39;);\n});\ndecipher.on(&#39;end&#39;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\ndecipher.write(encrypted, &#39;hex&#39;);\ndecipher.end();\n</code></pre>\nExample: Using <code>Decipher</code> and piped streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.enc&#39;);\nconst output = fs.createWriteStream(&#39;test.js&#39;);\n\ninput.pipe(decipher).pipe(output);\n</code></pre>\nExample: Using the <code>decipher.update()</code> and <code>decipher.final()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\nvar decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\ndecrypted += decipher.final(&#39;utf8&#39;);\nconsole.log(decrypted);\n// Prints: some clear text data\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_decipher
Decipher.final	A										<section class="prog__container"><p id="obj.desc">Returns any remaining deciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <code>Buffer</code> is returned.\nOnce the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can\nno longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more\nthan once will result in an error being thrown.\n<pre><code>decipher.final([output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_final_output_encoding
Decipher final	R	Decipher.final										http://nodejs.org/api/all.html#all_decipher_final_output_encoding
Decipher.setAAD	A										<section class="prog__container"><p id="obj.desc">When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.\nReturns <code>this</code> for method chaining.\n<pre><code>decipher.setAAD(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setaad_buffer
Decipher setAAD	R	Decipher.setAAD										http://nodejs.org/api/all.html#all_decipher_setaad_buffer
Decipher.setAuthTag	A										<section class="prog__container"><p id="obj.desc">When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>decipher.setAuthTag()</code> method is used to pass in the\nreceived <em>authentication tag</em>. If no tag is provided, or if the cipher text\nhas been tampered with, <code>decipher.final()</code> with throw, indicating that the\ncipher text should be discarded due to failed authentication.\nReturns <code>this</code> for method chaining.\n<pre><code>decipher.setAuthTag(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setauthtag_buffer
Decipher setAuthTag	R	Decipher.setAuthTag										http://nodejs.org/api/all.html#all_decipher_setauthtag_buffer
Decipher.setAutoPadding	A										<section class="prog__container"><p id="obj.desc">When data has been encrypted without standard block padding, calling\n<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent\n<code>decipher.final()</code> from checking for and removing padding.\nTurning auto padding off will only work if the input data&#39;s length is a\nmultiple of the ciphers block size.\nThe <code>decipher.setAutoPadding()</code> method must be called before\n<code>decipher.update()</code>.\nReturns <code>this</code> for method chaining.\n<pre><code>decipher.setAutoPadding(auto_padding=true)</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_setautopadding_auto_padding
Decipher setAutoPadding	R	Decipher.setAutoPadding										http://nodejs.org/api/all.html#all_decipher_setautopadding_auto_padding
Decipher.update	A										<section class="prog__container"><p id="obj.desc">Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nit&#39;s value must be one of <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code>, or <code>&#39;hex&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <code>Buffer</code>. If <code>data</code> is a\n<code>Buffer</code> then <code>input_encoding</code> is ignored.\nThe <code>output_encoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;latin1&#39;</code>, <code>&#39;ascii&#39;</code> or <code>&#39;utf8&#39;</code>. If the <code>output_encoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>output_encoding</code> is provided, a <code>Buffer</code> is returned.\nThe <code>decipher.update()</code> method can be called multiple times with new data until\n<code>decipher.final()</code> is called. Calling <code>decipher.update()</code> after\n<code>decipher.final()</code> will result in an error being thrown.\n<pre><code>decipher.update(data[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_decipher_update_data_input_encoding_output_encoding
Decipher update	R	Decipher.update										http://nodejs.org/api/all.html#all_decipher_update_data_input_encoding_output_encoding
DiffieHellman	A										<section class="prog__container"><p id="obj.desc">The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key\nexchanges.\nInstances of the <code>DiffieHellman</code> class can be created using the\n<code>crypto.createDiffieHellman()</code> function.\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\n// OK\nassert.equal(alice_secret.toString(&#39;hex&#39;), bob_secret.toString(&#39;hex&#39;));\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_diffiehellman
DiffieHellman.computeSecret	A										<section class="prog__container"><p id="obj.desc">Computes the shared secret using <code>other_public_key</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified <code>input_encoding</code>, and secret is\nencoded using specified <code>output_encoding</code>. Encodings can be\n<code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <code>Buffer</code>.\nIf <code>output_encoding</code> is given a string is returned; otherwise, a\n<code>Buffer</code> is returned.\n<pre><code>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
DiffieHellman computeSecret	R	DiffieHellman.computeSecret										http://nodejs.org/api/all.html#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding
DiffieHellman.generateKeys	A										<section class="prog__container"><p id="obj.desc">Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified <code>encoding</code>. This key should be\ntransferred to the other party. Encoding can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>,\nor <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is returned; otherwise a\n<code>Buffer</code> is returned.\n<pre><code>diffieHellman.generateKeys([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_generatekeys_encoding
DiffieHellman generateKeys	R	DiffieHellman.generateKeys										http://nodejs.org/api/all.html#all_diffiehellman_generatekeys_encoding
DiffieHellman.getGenerator	A										<section class="prog__container"><p id="obj.desc">Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can\nbe <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If  <code>encoding</code> is provided a string is\nreturned; otherwise a <code>Buffer</code> is returned.\n<pre><code>diffieHellman.getGenerator([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getgenerator_encoding
DiffieHellman getGenerator	R	DiffieHellman.getGenerator										http://nodejs.org/api/all.html#all_diffiehellman_getgenerator_encoding
DiffieHellman.getPrime	A										<section class="prog__container"><p id="obj.desc">Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can\nbe <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is\nreturned; otherwise a <code>Buffer</code> is returned.\n<pre><code>diffieHellman.getPrime([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getprime_encoding
DiffieHellman getPrime	R	DiffieHellman.getPrime										http://nodejs.org/api/all.html#all_diffiehellman_getprime_encoding
DiffieHellman.getPrivateKey	A										<section class="prog__container"><p id="obj.desc">Returns the Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <code>Buffer</code> is returned.\n<pre><code>diffieHellman.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getprivatekey_encoding
DiffieHellman getPrivateKey	R	DiffieHellman.getPrivateKey										http://nodejs.org/api/all.html#all_diffiehellman_getprivatekey_encoding
DiffieHellman.getPublicKey	A										<section class="prog__container"><p id="obj.desc">Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which\ncan be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <code>Buffer</code> is returned.\n<pre><code>diffieHellman.getPublicKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_getpublickey_encoding
DiffieHellman getPublicKey	R	DiffieHellman.getPublicKey										http://nodejs.org/api/all.html#all_diffiehellman_getpublickey_encoding
DiffieHellman.setPrivateKey	A										<section class="prog__container"><p id="obj.desc">Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>, <code>private_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a <code>Buffer</code>.\n<pre><code>diffieHellman.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_setprivatekey_private_key_encoding
DiffieHellman setPrivateKey	R	DiffieHellman.setPrivateKey										http://nodejs.org/api/all.html#all_diffiehellman_setprivatekey_private_key_encoding
DiffieHellman.setPublicKey	A										<section class="prog__container"><p id="obj.desc">Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>, <code>public_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected\nto be a <code>Buffer</code>.\n<pre><code>diffieHellman.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_diffiehellman_setpublickey_public_key_encoding
DiffieHellman setPublicKey	R	DiffieHellman.setPublicKey										http://nodejs.org/api/all.html#all_diffiehellman_setpublickey_public_key_encoding
DiffieHellman.verifyError	A										<section class="prog__container"><p id="obj.desc">A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the <code>DiffieHellman</code> object.\nThe following values are valid for this property (as defined in <code>constants</code>\nmodule):\n<ul>\n<li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li>\n<li><code>DH_CHECK_P_NOT_PRIME</code></li>\n<li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li>\n<li><code>DH_NOT_SUITABLE_GENERATOR</code></li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_diffiehellman_verifyerror
DiffieHellman verifyError	R	DiffieHellman.verifyError										http://nodejs.org/api/all.html#all_diffiehellman_verifyerror
ECDH	A										<section class="prog__container"><p id="obj.desc">The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.\nInstances of the <code>ECDH</code> class can be created using the\n<code>crypto.createECDH()</code> function.\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\nassert(alice_secret, bob_secret);\n  // OK\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_ecdh
ECDH.computeSecret	A										<section class="prog__container"><p id="obj.desc">Computes the shared secret using <code>other_public_key</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using specified <code>input_encoding</code>, and the returned secret\nis encoded using the specified <code>output_encoding</code>. Encodings can be\n<code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <code>Buffer</code>.\nIf <code>output_encoding</code> is given a string will be returned; otherwise a\n<code>Buffer</code> is returned.\n<pre><code>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_computesecret_other_public_key_input_encoding_output_encoding
ECDH computeSecret	R	ECDH.computeSecret										http://nodejs.org/api/all.html#all_ecdh_computesecret_other_public_key_input_encoding_output_encoding
ECDH.generateKeys	A										<section class="prog__container"><p id="obj.desc">Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified <code>format</code> and <code>encoding</code>. This key should be\ntransferred to the other party.\nThe <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code> or\n<code>&#39;uncompressed&#39;</code>. If <code>format</code> is not specified, the point will be returned in\n<code>&#39;uncompressed&#39;</code> format.\nThe <code>encoding</code> argument can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is provided a string is returned; otherwise a <code>Buffer</code>\nis returned.\n<pre><code>ecdh.generateKeys([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_generatekeys_encoding_format
ECDH generateKeys	R	ECDH.generateKeys										http://nodejs.org/api/all.html#all_ecdh_generatekeys_encoding_format
ECDH.getPrivateKey	A										<section class="prog__container"><p id="obj.desc">Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided\na string is returned; otherwise a <code>Buffer</code> is returned.\n<pre><code>ecdh.getPrivateKey([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_getprivatekey_encoding
ECDH getPrivateKey	R	ECDH.getPrivateKey										http://nodejs.org/api/all.html#all_ecdh_getprivatekey_encoding
ECDH.getPublicKey	A										<section class="prog__container"><p id="obj.desc">Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and\n<code>format</code>.\nThe <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code> or\n<code>&#39;uncompressed&#39;</code>. If <code>format</code> is not specified the point will be returned in\n<code>&#39;uncompressed&#39;</code> format.\nThe <code>encoding</code> argument can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is specified, a string is returned; otherwise a <code>Buffer</code> is\nreturned.\n<pre><code>ecdh.getPublicKey([encoding[, format]])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_getpublickey_encoding_format
ECDH getPublicKey	R	ECDH.getPublicKey										http://nodejs.org/api/all.html#all_ecdh_getpublickey_encoding_format
ECDH.setPrivateKey	A										<section class="prog__container"><p id="obj.desc">Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>&#39;latin1&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a string; otherwise <code>private_key</code> is expected to be a <code>Buffer</code>. If\n<code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the ECDH object.\n<pre><code>ecdh.setPrivateKey(private_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_setprivatekey_private_key_encoding
ECDH setPrivateKey	R	ECDH.setPrivateKey										http://nodejs.org/api/all.html#all_ecdh_setprivatekey_private_key_encoding
ECDH.setPublicKey	A										<section class="prog__container"><p id="obj.desc">Sets the EC Diffie-Hellman public key. Key encoding can be <code>&#39;latin1&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to\nbe a string; otherwise a <code>Buffer</code> is expected.\nNote that there is not normally a reason to call this method because <code>ECDH</code>\nonly requires a private key and the other party&#39;s public key to compute the\nshared secret. Typically either <code>ecdh.generateKeys()</code> or\n<code>ecdh.setPrivateKey()</code> will be called. The <code>ecdh.setPrivateKey()</code> method\nattempts to generate the public point/key associated with the private key being\nset.\nExample (obtaining a shared secret):\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.createECDH(&#39;secp256k1&#39;);\nconst bob = crypto.createECDH(&#39;secp256k1&#39;);\n\n// Note: This is a shortcut way to specify one of Alice&#39;s previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash(&#39;sha256&#39;).update(&#39;alice&#39;, &#39;utf8&#39;).digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair bob.generateKeys();\n\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n// alice_secret and bob_secret should be the same shared secret value\nconsole.log(alice_secret === bob_secret);\n</code></pre>\n<pre><code>ecdh.setPublicKey(public_key[, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_ecdh_setpublickey_public_key_encoding
ECDH setPublicKey	R	ECDH.setPublicKey										http://nodejs.org/api/all.html#all_ecdh_setpublickey_public_key_encoding
Hash	A										<section class="prog__container"><p id="obj.desc">The <code>Hash</code> class is a utility for creating hash digests of data. It can be\nused in one of two ways:\n<ul>\n<li>As a stream that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or</li>\n<li>Using the <code>hash.update()</code> and <code>hash.digest()</code> methods to produce the\ncomputed hash.</li>\n</ul>\nThe <code>crypto.createHash()</code> method is used to create <code>Hash</code> instances. <code>Hash</code>\nobjects are not to be created directly using the <code>new</code> keyword.\nExample: Using <code>Hash</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.on(&#39;readable&#39;, () =&gt; {\n  var data = hash.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write(&#39;some data to hash&#39;);\nhash.end();\n</code></pre>\nExample: Using <code>Hash</code> and piped streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hash).pipe(process.stdout);\n</code></pre>\nExample: Using the <code>hash.update()</code> and <code>hash.digest()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.update(&#39;some data to hash&#39;);\nconsole.log(hash.digest(&#39;hex&#39;));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_hash
Hash.digest	A										<section class="prog__container"><p id="obj.desc">Calculates the digest of all of the data passed to be hashed (using the\n<code>hash.update()</code> method). The <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;latin1&#39;</code> or\n<code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string will be returned; otherwise\na <code>Buffer</code> is returned.\nThe <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been\ncalled. Multiple calls will cause an error to be thrown.\n<pre><code>hash.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hash_digest_encoding
Hash digest	R	Hash.digest										http://nodejs.org/api/all.html#all_hash_digest_encoding
Hash.update	A										<section class="prog__container"><p id="obj.desc">Updates the hash content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.\nThis can be called many times with new data as it is streamed.\n<pre><code>hash.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hash_update_data_input_encoding
Hash update	R	Hash.update										http://nodejs.org/api/all.html#all_hash_update_data_input_encoding
Hmac	A										<section class="prog__container"><p id="obj.desc">The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:\n<ul>\n<li>As a stream that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or</li>\n<li>Using the <code>hmac.update()</code> and <code>hmac.digest()</code> methods to produce the\ncomputed HMAC digest.</li>\n</ul>\nThe <code>crypto.createHmac()</code> method is used to create <code>Hmac</code> instances. <code>Hmac</code>\nobjects are not to be created directly using the <code>new</code> keyword.\nExample: Using <code>Hmac</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.on(&#39;readable&#39;, () =&gt; {\n  var data = hmac.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write(&#39;some data to hash&#39;);\nhmac.end();\n</code></pre>\nExample: Using <code>Hmac</code> and piped streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hmac).pipe(process.stdout);\n</code></pre>\nExample: Using the <code>hmac.update()</code> and <code>hmac.digest()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.update(&#39;some data to hash&#39;);\nconsole.log(hmac.digest(&#39;hex&#39;));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_hmac
Hmac.digest	A										<section class="prog__container"><p id="obj.desc">Calculates the HMAC digest of all of the data passed using <code>hmac.update()</code>.\nThe <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;latin1&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is\nprovided a string is returned; otherwise a <code>Buffer</code> is returned;\nThe <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been\ncalled. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.\n<pre><code>hmac.digest([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hmac_digest_encoding
Hmac digest	R	Hmac.digest										http://nodejs.org/api/all.html#all_hmac_digest_encoding
Hmac.update	A										<section class="prog__container"><p id="obj.desc">Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.\nThis can be called many times with new data as it is streamed.\n<pre><code>hmac.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_hmac_update_data_input_encoding
Hmac update	R	Hmac.update										http://nodejs.org/api/all.html#all_hmac_update_data_input_encoding
Sign	A										<section class="prog__container"><p id="obj.desc">The <code>Sign</code> Class is a utility for generating signatures. It can be used in one\nof two ways:\n<ul>\n<li>As a writable stream, where data to be signed is written and the\n<code>sign.sign()</code> method is used to generate and return the signature, or</li>\n<li>Using the <code>sign.update()</code> and <code>sign.sign()</code> methods to produce the\nsignature.</li>\n</ul>\nThe <code>crypto.createSign()</code> method is used to create <code>Sign</code> instances. <code>Sign</code>\nobjects are not to be created directly using the <code>new</code> keyword.\nExample: Using <code>Sign</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.write(&#39;some data to sign&#39;);\nsign.end();\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n</code></pre>\nExample: Using the <code>sign.update()</code> and <code>sign.sign()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n// Prints: the calculated signature\n</code></pre>\nA <code>Sign</code> instance can also be created by just passing in the digest\nalgorithm name, in which case OpenSSL will infer the full signature algorithm\nfrom the type of the PEM-formatted private key, including algorithms that\ndo not have directly exposed name constants, e.g. &#39;ecdsa-with-SHA256&#39;.\nExample: signing using ECDSA with SHA256\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;sha256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = &#39;-----BEGIN EC PRIVATE KEY-----\n&#39; +\n        &#39;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\n&#39; +\n        &#39;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\n&#39; +\n        &#39;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\n&#39; +\n        &#39;-----END EC PRIVATE KEY-----\n&#39;;\n\nconsole.log(sign.sign(private_key).toString(&#39;hex&#39;));\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_sign
Sign.sign	A										<section class="prog__container"><p id="obj.desc">Calculates the signature on all the data passed through using either\n<code>sign.update()</code> or <code>sign.write()</code>.\nThe <code>private_key</code> argument can be an object or a string. If <code>private_key</code> is a\nstring, it is treated as a raw key with no passphrase. If <code>private_key</code> is an\nobject, it is interpreted as a hash containing two properties:\n<ul>\n<li><code>key</code> : {String} - PEM encoded private key</li>\n<li><code>passphrase</code> : {String} - passphrase for the private key</li>\n</ul>\nThe <code>output_format</code> can specify one of <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If\n<code>output_format</code> is provided a string is returned; otherwise a <code>Buffer</code> is\nreturned.\nThe <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been\ncalled. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.\n<pre><code>sign.sign(private_key[, output_format])</code></pre></section>	http://nodejs.org/api/all.html#all_sign_sign_private_key_output_format
Sign sign	R	Sign.sign										http://nodejs.org/api/all.html#all_sign_sign_private_key_output_format
Sign.update	A										<section class="prog__container"><p id="obj.desc">Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.\nThis can be called many times with new data as it is streamed.\n<pre><code>sign.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_sign_update_data_input_encoding
Sign update	R	Sign.update										http://nodejs.org/api/all.html#all_sign_update_data_input_encoding
Verify	A										<section class="prog__container"><p id="obj.desc">The <code>Verify</code> class is a utility for verifying signatures. It can be used in one\nof two ways:\n<ul>\n<li>As a writable stream where written data is used to validate against the\nsupplied signature, or</li>\n<li>Using the <code>verify.update()</code> and <code>verify.verify()</code> methods to verify\nthe signature.\nThe <code>crypto.createSign()</code> method is used to create <code>Sign</code> instances.\n<code>Sign</code> objects are not to be created directly using the <code>new</code> keyword.\n</li>\n</ul>\nExample: Using <code>Verify</code> objects as streams:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.write(&#39;some data to sign&#39;);\nverify.end();\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n</code></pre>\nExample: Using the <code>verify.update()</code> and <code>verify.verify()</code> methods:\n<pre><code class="lang-js">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.update(&#39;some data to sign&#39;);\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n// Prints: true or false\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_verify
Verify.update	A										<section class="prog__container"><p id="obj.desc">Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <code>Buffer</code> then\n<code>input_encoding</code> is ignored.\nThis can be called many times with new data as it is streamed.\n<pre><code>verifier.update(data[, input_encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_verify_update_data_input_encoding
Verify update	R	Verify.update										http://nodejs.org/api/all.html#all_verify_update_data_input_encoding
Verify.verify	A										<section class="prog__container"><p id="obj.desc">Verifies the provided data using the given <code>object</code> and <code>signature</code>.\nThe <code>object</code> argument is a string containing a PEM encoded object, which can be\none an RSA public key, a DSA public key, or an X.509 certificate.\nThe <code>signature</code> argument is the previously calculated signature for the data, in\nthe <code>signature_format</code> which can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>.\nIf a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a\nstring; otherwise <code>signature</code> is expected to be a <code>Buffer</code>.\nReturns <code>true</code> or <code>false</code> depending on the validity of the signature for\nthe data and public key.\nThe <code>verifier</code> object can not be used again after <code>verify.verify()</code> has been\ncalled. Multiple calls to <code>verify.verify()</code> will result in an error being\nthrown.\n<pre><code>verifier.verify(object, signature[, signature_format])</code></pre></section>	http://nodejs.org/api/all.html#all_verify_verify_object_signature_signature_format
Verify verify	R	Verify.verify										http://nodejs.org/api/all.html#all_verify_verify_object_signature_signature_format
dgram	A										<section class="prog__container"><p id="obj.desc">The <code>dgram</code> module provides an implementation of UDP Datagram sockets.\n<pre><code class="lang-js">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dgram
dgram.Socket	A										<section class="prog__container"><p id="obj.desc">The <code>dgram.Socket</code> object is an <code>EventEmitter</code> that encapsulates the\ndatagram functionality.\nNew instances of <code>dgram.Socket</code> are created using <code>dgram.createSocket()</code>.\nThe <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.\n</section>	http://nodejs.org/api/all.html#all_dgram.socket
dgram Socket	R	dgram.Socket										http://nodejs.org/api/all.html#all_dgram socket
dgram.Socket.addMembership	A										<section class="prog__container"><p id="obj.desc">Tells the kernel to join a multicast group at the given <code>multicastAddress</code> and\n<code>multicastInterface</code> using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the\n<code>multicastInterface</code> argument is not specified, the operating system will choose\none interface and will add membership to it. To add membership to every\navailable interface, call <code>addMembership</code> multiple times, once per interface.\n<pre><code>socket.addMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_addmembership_multicastaddress_multicastinterface
dgram.Socket addMembership	R	dgram.Socket.addMembership										http://nodejs.org/api/all.html#all_dgram.socket_addmembership_multicastaddress_multicastinterface
dgram Socket addMembership	R	dgram.Socket addMembership										http://nodejs.org/api/all.html#all_dgram socket_addmembership_multicastaddress_multicastinterface
dgram.Socket.address	A										<section class="prog__container"><p id="obj.desc">Returns an object containing the address information for a socket.\nFor UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>\nproperties.\n<pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_address
dgram.Socket address	R	dgram.Socket.address										http://nodejs.org/api/all.html#all_dgram.socket_address
dgram Socket address	R	dgram.Socket address										http://nodejs.org/api/all.html#all_dgram socket_address
dgram.Socket.bind	A										<section class="prog__container"><p id="obj.desc">For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified, the operating\nsystem will attempt to bind to a random port. If <code>address</code> is not specified,\nthe operating system will attempt to listen on all addresses.  Once binding is\ncomplete, a <code>&#39;listening&#39;</code> event is emitted and the optional <code>callback</code> function\nis called.\nNote that specifying both a <code>&#39;listening&#39;</code> event listener and passing a\n<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very\nuseful.\nA bound datagram socket keeps the Node.js process running to receive\ndatagram messages.\nIf binding fails, an <code>&#39;error&#39;</code> event is generated. In rare case (e.g.\nattempting to bind with a closed socket), an <code>Error</code> may be thrown.\nExample of a UDP server listening on port 41234:\n<pre><code class="lang-js">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n<pre><code>socket.bind([port][, address][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_bind_port_address_callback
dgram.Socket bind	R	dgram.Socket.bind										http://nodejs.org/api/all.html#all_dgram.socket_bind_port_address_callback
dgram Socket bind	R	dgram.Socket bind										http://nodejs.org/api/all.html#all_dgram socket_bind_port_address_callback
dgram.Socket.bind	A										<section class="prog__container"><p id="obj.desc">For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code> that are passed as properties of an\n<code>options</code> object passed as the first argument. If <code>port</code> is not specified, the\noperating system will attempt to bind to a random port. If <code>address</code> is not\nspecified, the operating system will attempt to listen on all addresses.  Once\nbinding is complete, a <code>&#39;listening&#39;</code> event is emitted and the optional\n<code>callback</code> function is called.\nThe <code>options</code> object may contain an additional <code>exclusive</code> property that is\nuse when using <code>dgram.Socket</code> objects with the <code>cluster</code> module. When\n<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same\nunderlying socket handle allowing connection handling duties to be shared.\nWhen <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted\nport sharing results in an error.\nAn example socket listening on an exclusive port is shown below.\n<pre><code class="lang-js">socket.bind({\n  address: &#39;localhost&#39;,\n  port: 8000,\n  exclusive: true\n});\n</code></pre>\n<pre><code>socket.bind(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_bind_options_callback
dgram.Socket bind	R	dgram.Socket.bind										http://nodejs.org/api/all.html#all_dgram.socket_bind_options_callback
dgram Socket bind	R	dgram.Socket bind										http://nodejs.org/api/all.html#all_dgram socket_bind_options_callback
dgram.Socket.close	A										<section class="prog__container"><p id="obj.desc">Close the underlying socket and stop listening for data on it. If a callback is\nprovided, it is added as a listener for the <code>&#39;close&#39;</code> event.\n<pre><code>socket.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_close_callback
dgram.Socket close	R	dgram.Socket.close										http://nodejs.org/api/all.html#all_dgram.socket_close_callback
dgram Socket close	R	dgram.Socket close										http://nodejs.org/api/all.html#all_dgram socket_close_callback
dgram.Socket.dropMembership	A										<section class="prog__container"><p id="obj.desc">Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the\n<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the\nkernel when the socket is closed or the process terminates, so most apps will\nnever have reason to call this.\nIf <code>multicastInterface</code> is not specified, the operating system will attempt to\ndrop membership on all valid interfaces.\n<pre><code>socket.dropMembership(multicastAddress[, multicastInterface])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket dropMembership	R	dgram.Socket.dropMembership										http://nodejs.org/api/all.html#all_dgram.socket_dropmembership_multicastaddress_multicastinterface
dgram Socket dropMembership	R	dgram.Socket dropMembership										http://nodejs.org/api/all.html#all_dgram socket_dropmembership_multicastaddress_multicastinterface
dgram.Socket.send	A										<section class="prog__container"><p id="obj.desc">Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must\nbe specified.\nThe <code>msg</code> argument contains the message to be sent.\nDepending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>,\nthe <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the\nmessage begins and the number of bytes in the message, respectively.\nIf <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>\nwith <code>&#39;utf8&#39;</code> encoding. With messages that\ncontain  multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with\nrespect to byte length and not the character position.\nIf <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.\nThe <code>address</code> argument is a string. If the value of <code>address</code> is a host name,\nDNS will be used to resolve the address of the host. If the <code>address</code> is not\nspecified or is an empty string, <code>&#39;127.0.0.1&#39;</code> or <code>&#39;::1&#39;</code> will be used instead.\nIf the socket has not been previously bound with a call to <code>bind</code>, the socket\nis assigned a random port number and is bound to the &quot;all interfaces&quot; address\n(<code>&#39;0.0.0.0&#39;</code> for <code>udp4</code> sockets, <code>&#39;::0&#39;</code> for <code>udp6</code> sockets.)\nAn optional <code>callback</code> function  may be specified to as a way of reporting\nDNS errors or for determining when it is safe to reuse the <code>buf</code> object.\nNote that DNS lookups delay the time to send for at least one tick of the\nNode.js event loop.\nThe only way to know for sure that the datagram has been sent is by using a\n<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be\npassed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,\nthe error is emitted as an <code>&#39;error&#39;</code> event on the <code>socket</code> object.\nOffset and length are optional, but if you specify one you would need to\nspecify the other. Also, they are supported only when the first\nargument is a <code>Buffer</code>.\nExample of sending a UDP packet to a random port on <code>localhost</code>;\n<pre><code class="lang-js">const dgram = require(&#39;dgram&#39;);\nconst message = Buffer.from(&#39;Some bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n</code></pre>\nExample of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;\n<pre><code class="lang-js">const dgram = require(&#39;dgram&#39;);\nconst buf1 = Buffer.from(&#39;Some &#39;);\nconst buf2 = Buffer.from(&#39;bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send([buf1, buf2], 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n</code></pre>\nSending multiple buffers might be faster or slower depending on your\napplication and operating system: benchmark it. Usually it is faster.\n<strong>A Note about UDP datagram size</strong>\nThe maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code>\n(<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.\n<ul>\n<li>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal\npayload exceed 64K octets <em>including</em> the internet header and data\n(65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\nthis is generally true for loopback interfaces, but such long datagram\nmessages are impractical for most hosts and networks.\n</li>\n<li>The <code>MTU</code> is the largest size a given link layer technology can support for\ndatagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code>\noctets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended\nas the <code>MTU</code> for dial-up type applications), whether they arrive whole or in\nfragments.\nFor <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum\nfragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is\nvery small, since most current link layer technologies, like Ethernet, have a\nminimum <code>MTU</code> of <code>1500</code>.\n</li>\n</ul>\nIt is impossible to know in advance the MTU of each link through which\na packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will\nnot work because the packet will get silently dropped without informing the\nsource that the data did not reach its intended recipient.\n<pre><code>socket.send(msg, [offset, length,] port, address[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_send_msg_offset_length_port_address_callback
dgram.Socket send	R	dgram.Socket.send										http://nodejs.org/api/all.html#all_dgram.socket_send_msg_offset_length_port_address_callback
dgram Socket send	R	dgram.Socket send										http://nodejs.org/api/all.html#all_dgram socket_send_msg_offset_length_port_address_callback
dgram.Socket.setBroadcast	A										<section class="prog__container"><p id="obj.desc">Sets or clears the <code>SO_BROADCAST</code> socket option.  When set to <code>true</code>, UDP\npackets may be sent to a local interface&#39;s broadcast address.\n<pre><code>socket.setBroadcast(flag)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setbroadcast_flag
dgram.Socket setBroadcast	R	dgram.Socket.setBroadcast										http://nodejs.org/api/all.html#all_dgram.socket_setbroadcast_flag
dgram Socket setBroadcast	R	dgram.Socket setBroadcast										http://nodejs.org/api/all.html#all_dgram socket_setbroadcast_flag
dgram.Socket.setMulticastLoopback	A										<section class="prog__container"><p id="obj.desc">Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option.  When set to <code>true</code>,\nmulticast packets will also be received on the local interface.\n<pre><code>socket.setMulticastLoopback(flag)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setmulticastloopback_flag
dgram.Socket setMulticastLoopback	R	dgram.Socket.setMulticastLoopback										http://nodejs.org/api/all.html#all_dgram.socket_setmulticastloopback_flag
dgram Socket setMulticastLoopback	R	dgram.Socket setMulticastLoopback										http://nodejs.org/api/all.html#all_dgram socket_setmulticastloopback_flag
dgram.Socket.setMulticastTTL	A										<section class="prog__container"><p id="obj.desc">Sets the <code>IP_MULTICAST_TTL</code> socket option.  While TTL generally stands for\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\npacket is allowed to travel through, specifically for multicast traffic.  Each\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\ndecremented to 0 by a router, it will not be forwarded.\nThe argument passed to to <code>socket.setMulticastTTL()</code> is a number of hops\nbetween 0 and 255. The default on most systems is <code>1</code> but can vary.\n<pre><code>socket.setMulticastTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setmulticastttl_ttl
dgram.Socket setMulticastTTL	R	dgram.Socket.setMulticastTTL										http://nodejs.org/api/all.html#all_dgram.socket_setmulticastttl_ttl
dgram Socket setMulticastTTL	R	dgram.Socket setMulticastTTL										http://nodejs.org/api/all.html#all_dgram socket_setmulticastttl_ttl
dgram.Socket.setTTL	A										<section class="prog__container"><p id="obj.desc">Sets the <code>IP_TTL</code> socket option. While TTL generally stands for &quot;Time to Live&quot;,\nin this context it specifies the number of IP hops that a packet is allowed to\ntravel through.  Each router or gateway that forwards a packet decrements the\nTTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.\nChanging TTL values is typically done for network probes or when multicasting.\nThe argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255.\nThe default on most systems is 64 but can vary.\n<pre><code>socket.setTTL(ttl)</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_setttl_ttl
dgram.Socket setTTL	R	dgram.Socket.setTTL										http://nodejs.org/api/all.html#all_dgram.socket_setttl_ttl
dgram Socket setTTL	R	dgram.Socket setTTL										http://nodejs.org/api/all.html#all_dgram socket_setttl_ttl
dgram.Socket.ref	A										<section class="prog__container"><p id="obj.desc">By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\ncounting and restores the default behavior.\nCalling <code>socket.ref()</code> multiples times will have no additional effect.\nThe <code>socket.ref()</code> method returns a reference to the socket so calls can be\nchained.\n<pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_ref
dgram.Socket ref	R	dgram.Socket.ref										http://nodejs.org/api/all.html#all_dgram.socket_ref
dgram Socket ref	R	dgram.Socket ref										http://nodejs.org/api/all.html#all_dgram socket_ref
dgram.Socket.unref	A										<section class="prog__container"><p id="obj.desc">By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active, allowing the process to exit even if the socket is still\nlistening.\nCalling <code>socket.unref()</code> multiple times will have no addition effect.\nThe <code>socket.unref()</code> method returns a reference to the socket so calls can be\nchained.\n<pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_dgram.socket_unref
dgram.Socket unref	R	dgram.Socket.unref										http://nodejs.org/api/all.html#all_dgram.socket_unref
dgram Socket unref	R	dgram.Socket unref										http://nodejs.org/api/all.html#all_dgram socket_unref
dgram.Socket.close	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;close&#39;</code> event is emitted after a socket is closed with <code>close()</code>.\nOnce triggered, no new <code>&#39;message&#39;</code> events will be emitted on this socket.\n</section>	http://nodejs.org/api/all.html#all_dgram.socket_close
dgram.Socket close	R	dgram.Socket.close										http://nodejs.org/api/all.html#all_dgram.socket_close
dgram Socket close	R	dgram.Socket close										http://nodejs.org/api/all.html#all_dgram socket_close
dgram.Socket.error	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;error&#39;</code> event is emitted whenever any error occurs. The event handler\nfunction is passed a single Error object.\n</section>	http://nodejs.org/api/all.html#all_dgram.socket_error
dgram.Socket error	R	dgram.Socket.error										http://nodejs.org/api/all.html#all_dgram.socket_error
dgram Socket error	R	dgram.Socket error										http://nodejs.org/api/all.html#all_dgram socket_error
dgram.Socket.listening	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;listening&#39;</code> event is emitted whenever a socket begins listening for\ndatagram messages. This occurs as soon as UDP sockets are created.\n</section>	http://nodejs.org/api/all.html#all_dgram.socket_listening
dgram.Socket listening	R	dgram.Socket.listening										http://nodejs.org/api/all.html#all_dgram.socket_listening
dgram Socket listening	R	dgram.Socket listening										http://nodejs.org/api/all.html#all_dgram socket_listening
dgram.Socket.message	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;message&#39;</code> event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The\n<code>msg</code> argument is a <code>Buffer</code> and <code>rinfo</code> is an object with the sender&#39;s\naddress information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:\n<pre><code class="lang-js">socket.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(&#39;Received %d bytes from %s:%d\n&#39;,\n              msg.length, rinfo.address, rinfo.port);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_dgram.socket_message
dgram.Socket message	R	dgram.Socket.message										http://nodejs.org/api/all.html#all_dgram.socket_message
dgram Socket message	R	dgram.Socket message										http://nodejs.org/api/all.html#all_dgram socket_message
dns	A										<section class="prog__container"><p id="obj.desc">The <code>dns</code> module contains functions belonging to two different categories:\n1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function: <code>dns.lookup()</code>. <strong>Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use <code>dns.lookup()</code>.</strong>\nFor example, looking up <code>nodejs.org</code>.\n<pre><code class="lang-js">const dns = require(&#39;dns&#39;);\n\ndns.lookup(&#39;nodejs.org&#39;, (err, addresses, family) =&gt; {\n  console.log(&#39;addresses:&#39;, addresses);\n});\n</code></pre>\n2) Functions that connect to an actual DNS server to perform name resolution,\nand that <em>always</em> use the network to perform DNS queries. This category\ncontains all functions in the <code>dns</code> module <em>except</em> <code>dns.lookup()</code>. These\nfunctions do not use the same set of configuration files used by\n<code>dns.lookup()</code> (e.g. <code>/etc/hosts</code>). These functions should be used by\ndevelopers who do not want to use the underlying operating system&#39;s facilities\nfor name resolution, and instead want to <em>always</em> perform DNS queries.\nBelow is an example that resolves <code>&#39;nodejs.org&#39;</code> then reverse resolves the IP\naddresses that are returned.\n<pre><code class="lang-js">const dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;nodejs.org&#39;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n</code></pre>\nThere are subtle consequences in choosing one over the other, please consult\nthe Implementation considerations section for more information.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_dns
dns.getServers	A										<section class="prog__container"><p id="obj.desc">Returns an array of IP address strings that are being used for name\nresolution.\n<pre><code>dns.getServers()</code></pre></section>	http://nodejs.org/api/all.html#all_dns_getservers
dns getServers	R	dns.getServers										http://nodejs.org/api/all.html#all_dns_getservers
dns.lookup	A										<section class="prog__container"><p id="obj.desc">Resolves a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into the first found A (IPv4) or\nAAAA (IPv6) record. <code>options</code> can be an object or integer. If <code>options</code> is\nnot provided, then IPv4 and IPv6 addresses are both valid. If <code>options</code> is\nan integer, then it must be <code>4</code> or <code>6</code>.\nAlternatively, <code>options</code> can be an object containing these properties:\n<ul>\n<li><code>family</code> {Number} - The record family. If present, must be the integer\n<code>4</code> or <code>6</code>. If not provided, both IP v4 and v6 addresses are accepted.</li>\n<li><code>hints</code>: {Number} - If present, it should be one or more of the supported\n<code>getaddrinfo</code> flags. If <code>hints</code> is not provided, then no flags are passed to\n<code>getaddrinfo</code>. Multiple flags can be passed through <code>hints</code> by logically\n<code>OR</code>ing their values.\nSee supported <code>getaddrinfo</code> flags for more information on supported\nflags.</li>\n<li><code>all</code>: {Boolean} - When <code>true</code>, the callback returns all resolved addresses\nin an array, otherwise returns a single address. Defaults to <code>false</code>.</li>\n</ul>\nAll properties are optional. An example usage of options is shown below.\n<pre><code class="lang-js">{\n  family: 4,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n  all: false\n}\n</code></pre>\nThe <code>callback</code> function has arguments <code>(err, address, family)</code>. <code>address</code> is a\nstring representation of an IPv4 or IPv6 address. <code>family</code> is either the\ninteger <code>4</code> or <code>6</code> and denotes the family of <code>address</code> (not necessarily the\nvalue initially passed to <code>lookup</code>).\nWith the <code>all</code> option set to <code>true</code>, the arguments change to\n<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the\nproperties <code>address</code> and <code>family</code>.\nOn error, <code>err</code> is an <code>Error</code> object, where <code>err.code</code> is the error code.\nKeep in mind that <code>err.code</code> will be set to <code>&#39;ENOENT&#39;</code> not only when\nthe hostname does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.\n<code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.\nThe implementation uses an operating system facility that can associate names\nwith addresses, and vice versa. This implementation can have subtle but\nimportant consequences on the behavior of any Node.js program. Please take some\ntime to consult the Implementation considerations section before using\n<code>dns.lookup()</code>.\n<pre><code>dns.lookup(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_lookup_hostname_options_callback
dns lookup	R	dns.lookup										http://nodejs.org/api/all.html#all_dns_lookup_hostname_options_callback
dns.lookupService	A										<section class="prog__container"><p id="obj.desc">Resolves the given <code>address</code> and <code>port</code> into a hostname and service using\nthe operating system&#39;s underlying <code>getnameinfo</code> implementation.\nIf <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.\nThe <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>\nwill be thrown.\nThe callback has arguments <code>(err, hostname, service)</code>. The <code>hostname</code> and\n<code>service</code> arguments are strings (e.g. <code>&#39;localhost&#39;</code> and <code>&#39;http&#39;</code> respectively).\nOn error, <code>err</code> is an <code>Error</code> object, where <code>err.code</code> is the error code.\n<pre><code class="lang-js">const dns = require(&#39;dns&#39;);\ndns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\n</code></pre>\n<pre><code>dns.lookupService(address, port, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_lookupservice_address_port_callback
dns lookupService	R	dns.lookupService										http://nodejs.org/api/all.html#all_dns_lookupservice_address_port_callback
dns.resolve	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into an\narray of the record types specified by <code>rrtype</code>.\nValid values for <code>rrtype</code> are:\n<ul>\n<li><code>&#39;A&#39;</code> - IPV4 addresses, default</li>\n<li><code>&#39;AAAA&#39;</code> - IPV6 addresses</li>\n<li><code>&#39;MX&#39;</code> - mail exchange records</li>\n<li><code>&#39;TXT&#39;</code> - text records</li>\n<li><code>&#39;SRV&#39;</code> - SRV records</li>\n<li><code>&#39;PTR&#39;</code> - PTR records</li>\n<li><code>&#39;NS&#39;</code> - name server records</li>\n<li><code>&#39;CNAME&#39;</code> - canonical name records</li>\n<li><code>&#39;SOA&#39;</code> - start of authority record</li>\n<li><code>&#39;NAPTR&#39;</code> - name authority pointer record</li>\n</ul>\nThe <code>callback</code> function has arguments <code>(err, addresses)</code>. When successful,\n<code>addresses</code> will be an array, except when resolving an SOA record which returns\nan object structured in the same manner as one returned by the\n<code>dns.resolveSoa()</code> method. The type of each item in <code>addresses</code> is\ndetermined by the record type, and described in the documentation for the\ncorresponding lookup methods.\nOn error, <code>err</code> is an <code>Error</code> object, where <code>err.code</code> is\none of the error codes listed here.\n<pre><code>dns.resolve(hostname[, rrtype], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve_hostname_rrtype_callback
dns resolve	R	dns.resolve										http://nodejs.org/api/all.html#all_dns_resolve_hostname_rrtype_callback
dns.resolve4	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv4 addresses (e.g.\n<code>[&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]</code>).\n<ul>\n<li><code>hostname</code> {String} Hostname to resolve.</li>\n<li><code>options</code> {Object}<ul>\n<li><code>ttl</code> {Boolean} Retrieve the Time-To-Live value (TTL) of each record.\nThe callback receives an array of <code>{ address: &#39;1.2.3.4&#39;, ttl: 60 }</code> objects\nrather than an array of strings.  The TTL is expressed in seconds.</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} An <code>(err, result)</code> callback function.</li>\n</ul>\n<pre><code>dns.resolve4(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve4_hostname_options_callback
dns resolve4	R	dns.resolve4										http://nodejs.org/api/all.html#all_dns_resolve4_hostname_options_callback
dns.resolve6	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv6 addresses.\n<ul>\n<li><code>hostname</code> {String} Hostname to resolve.</li>\n<li><code>options</code> {Object}<ul>\n<li><code>ttl</code> {Boolean} Retrieve the Time-To-Live value (TTL) of each record.\nThe callback receives an array of <code>{ address: &#39;0:1:2:3:4:5:6:7&#39;, ttl: 60 }</code>\nobjects rather than an array of strings.  The TTL is expressed in seconds.</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} An <code>(err, result)</code> callback function.</li>\n</ul>\n<pre><code>dns.resolve6(hostname[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolve6_hostname_options_callback
dns resolve6	R	dns.resolve6										http://nodejs.org/api/all.html#all_dns_resolve6_hostname_options_callback
dns.resolveCname	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The\n<code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of canonical name records available for the <code>hostname</code>\n(e.g. <code>[&#39;bar.example.com&#39;]</code>).\n<pre><code>dns.resolveCname(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvecname_hostname_callback
dns resolveCname	R	dns.resolveCname										http://nodejs.org/api/all.html#all_dns_resolvecname_hostname_callback
dns.resolveMx	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of objects containing both a <code>priority</code> and <code>exchange</code>\nproperty (e.g. <code>[{priority: 10, exchange: &#39;mx.example.com&#39;}, ...]</code>).\n<pre><code>dns.resolveMx(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvemx_hostname_callback
dns resolveMx	R	dns.resolveMx										http://nodejs.org/api/all.html#all_dns_resolvemx_hostname_callback
dns.resolveNaptr	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>\nrecords) for the <code>hostname</code>. The <code>callback</code> function has arguments\n<code>(err, addresses)</code>.  The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of objects with the following properties:\n<ul>\n<li><code>flags</code></li>\n<li><code>service</code></li>\n<li><code>regexp</code></li>\n<li><code>replacement</code></li>\n<li><code>order</code></li>\n<li><code>preference</code></li>\n</ul>\nFor example:\n<pre><code class="lang-js">{\n  flags: &#39;s&#39;,\n  service: &#39;SIP+D2U&#39;,\n  regexp: &#39;&#39;,\n  replacement: &#39;_sip._udp.example.com&#39;,\n  order: 30,\n  preference: 100\n}\n</code></pre>\n<pre><code>dns.resolveNaptr(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvenaptr_hostname_callback
dns resolveNaptr	R	dns.resolveNaptr										http://nodejs.org/api/all.html#all_dns_resolvenaptr_hostname_callback
dns.resolveNs	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of name server records available for <code>hostname</code>\n(e.g. <code>[&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]</code>).\n<pre><code>dns.resolveNs(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvens_hostname_callback
dns resolveNs	R	dns.resolveNs										http://nodejs.org/api/all.html#all_dns_resolvens_hostname_callback
dns.resolveSoa	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for\nthe <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an object with the following properties:\n<ul>\n<li><code>nsname</code></li>\n<li><code>hostmaster</code></li>\n<li><code>serial</code></li>\n<li><code>refresh</code></li>\n<li><code>retry</code></li>\n<li><code>expire</code></li>\n<li><code>minttl</code></li>\n</ul>\n<pre><code class="lang-js">{\n  nsname: &#39;ns.example.com&#39;,\n  hostmaster: &#39;root.example.com&#39;,\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n</code></pre>\n<pre><code>dns.resolveSoa(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvesoa_hostname_callback
dns resolveSoa	R	dns.resolveSoa										http://nodejs.org/api/all.html#all_dns_resolvesoa_hostname_callback
dns.resolveSrv	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of objects with the following properties:\n<ul>\n<li><code>priority</code></li>\n<li><code>weight</code></li>\n<li><code>port</code></li>\n<li><code>name</code></li>\n</ul>\n<pre><code class="lang-js">{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: &#39;service.example.com&#39;\n}\n</code></pre>\n<pre><code>dns.resolveSrv(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvesrv_hostname_callback
dns resolveSrv	R	dns.resolveSrv										http://nodejs.org/api/all.html#all_dns_resolvesrv_hostname_callback
dns.resolvePtr	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of strings containing the reply records.\n<pre><code>dns.resolvePtr(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolveptr_hostname_callback
dns resolvePtr	R	dns.resolvePtr										http://nodejs.org/api/all.html#all_dns_resolveptr_hostname_callback
dns.resolveTxt	A										<section class="prog__container"><p id="obj.desc">Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is\nis a two-dimensional array of the text records available for <code>hostname</code> (e.g.,\n<code>[ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]</code>). Each sub-array contains TXT chunks of\none record. Depending on the use case, these could be either joined together or\ntreated separately.\n<pre><code>dns.resolveTxt(hostname, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_resolvetxt_hostname_callback
dns resolveTxt	R	dns.resolveTxt										http://nodejs.org/api/all.html#all_dns_resolvetxt_hostname_callback
dns.reverse	A										<section class="prog__container"><p id="obj.desc">Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\narray of hostnames.\nThe <code>callback</code> function has arguments <code>(err, hostnames)</code>, where <code>hostnames</code>\nis an array of resolved hostnames for the given <code>ip</code>.\nOn error, <code>err</code> is an <code>Error</code> object, where <code>err.code</code> is\none of the DNS error codes.\n<pre><code>dns.reverse(ip, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_reverse_ip_callback
dns reverse	R	dns.reverse										http://nodejs.org/api/all.html#all_dns_reverse_ip_callback
dns.setServers	A										<section class="prog__container"><p id="obj.desc">Sets the IP addresses of the servers to be used when resolving. The <code>servers</code>\nargument is an array of IPv4 or IPv6 addresses.\nIf a port specified on the address it will be removed.\nAn error will be thrown if an invalid address is provided.\nThe <code>dns.setServers()</code> method must not be called while a DNS query is in\nprogress.\n<pre><code>dns.setServers(servers)</code></pre></section>	http://nodejs.org/api/all.html#all_dns_setservers_servers
dns setServers	R	dns.setServers										http://nodejs.org/api/all.html#all_dns_setservers_servers
domain	A										<section class="prog__container"><p id="obj.desc"><strong>This module is pending deprecation</strong>. Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n<strong>not</strong> have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.\nDomains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an <code>&#39;error&#39;</code> event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n<code>process.on(&#39;uncaughtException&#39;)</code> handler, or causing the program to\nexit immediately with an error code.\n</section>	http://nodejs.org/api/all.html#all_domain
domain.create	A										<section class="prog__container"><p id="obj.desc">Returns a new Domain object.\n<pre><code>domain.create()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_create
domain create	R	domain.create										http://nodejs.org/api/all.html#all_domain_create
Domain	A										<section class="prog__container"><p id="obj.desc">The Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.\nDomain is a child class of <code>EventEmitter</code>.  To handle the errors that it\ncatches, listen to its <code>&#39;error&#39;</code> event.\n</section>	http://nodejs.org/api/all.html#all_domain
Domain.run	A										<section class="prog__container"><p id="obj.desc">Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.\nThis is the most basic way to use a domain.\nExample:\n<pre><code class="lang-js">const domain = require(&#39;domain&#39;);\nconst fs = require(&#39;fs&#39;);\nconst d = domain.create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  console.error(&#39;Caught error!&#39;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</code></pre>\nIn this example, the <code>d.on(&#39;error&#39;)</code> handler will be triggered, rather\nthan crashing the program.\n<pre><code>domain.run(fn[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_domain_run_fn_...args
Domain run	R	Domain.run										http://nodejs.org/api/all.html#all_domain_run_fn_...args
Domain.add	A										<section class="prog__container"><p id="obj.desc">Explicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an <code>&#39;error&#39;</code> event, it\nwill be routed to the domain&#39;s <code>&#39;error&#39;</code> event, just like with implicit\nbinding.\nThis also works with timers that are returned from <code>setInterval()</code> and\n<code>setTimeout()</code>.  If their callback function throws, it will be caught by\nthe domain &#39;error&#39; handler.\nIf the Timer or EventEmitter was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.\n<pre><code>domain.add(emitter)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_add_emitter
Domain add	R	Domain.add										http://nodejs.org/api/all.html#all_domain_add_emitter
Domain.remove	A										<section class="prog__container"><p id="obj.desc">The opposite of <code>domain.add(emitter)</code>.  Removes domain handling from the\nspecified emitter.\n<pre><code>domain.remove(emitter)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_remove_emitter
Domain remove	R	Domain.remove										http://nodejs.org/api/all.html#all_domain_remove_emitter
Domain.bind	A										<section class="prog__container"><p id="obj.desc">The returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain&#39;s <code>&#39;error&#39;</code> event.\n<h4>Example</h4>\n<pre><code class="lang-js">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n<pre><code>domain.bind(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_bind_callback
Domain bind	R	Domain.bind										http://nodejs.org/api/all.html#all_domain_bind_callback
Domain.intercept	A										<section class="prog__container"><p id="obj.desc">This method is almost identical to <code>domain.bind(callback)</code>.  However, in\naddition to catching thrown errors, it will also intercept <code>Error</code>\nobjects sent as the first argument to the function.\nIn this way, the common <code>if (err) return callback(err);</code> pattern can be replaced\nwith a single error handler in a single place.\n<h4>Example</h4>\n<pre><code class="lang-js">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &#39;Error&#39; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &#39;error&#39;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n<pre><code>domain.intercept(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_domain_intercept_callback
Domain intercept	R	Domain.intercept										http://nodejs.org/api/all.html#all_domain_intercept_callback
Domain.enter	A										<section class="prog__container"><p id="obj.desc">The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code>\nmethods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code>\nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see <code>domain.exit()</code> for details on the domain stack). The\ncall to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.\nCalling <code>enter</code> changes only the active domain, and does not alter the domain\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\nsingle domain.\nIf the domain on which <code>enter</code> is called has been disposed, <code>enter</code> will return\nwithout setting the domain.\n<pre><code>domain.enter()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_enter
Domain enter	R	Domain.enter										http://nodejs.org/api/all.html#all_domain_enter
Domain.exit	A										<section class="prog__container"><p id="obj.desc">The <code>exit</code> method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\nThe call to <code>exit</code> delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.\nIf there are multiple, nested domains bound to the current execution context,\n<code>exit</code> will exit any domains nested within this domain.\nCalling <code>exit</code> changes only the active domain, and does not alter the domain\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\nsingle domain.\nIf the domain on which <code>exit</code> is called has been disposed, <code>exit</code> will return\nwithout exiting the domain.\n<pre><code>domain.exit()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_exit
Domain exit	R	Domain.exit										http://nodejs.org/api/all.html#all_domain_exit
Domain.dispose	A										<section class="prog__container"><p id="obj.desc">Stability: 0 - Deprecated.  Please recover from failed IO actions\nexplicitly via error event handlers set on the domain.\nOnce <code>dispose</code> has been called, the domain will no longer be used by callbacks\nbound into the domain via <code>run</code>, <code>bind</code>, or <code>intercept</code>, and a <code>&#39;dispose&#39;</code> event\nis emitted.\n<!-- [end-include:domain.md] -->\n<!-- [start-include:errors.md] -->\n<pre><code>domain.dispose()</code></pre></section>	http://nodejs.org/api/all.html#all_domain_dispose
Domain dispose	R	Domain.dispose										http://nodejs.org/api/all.html#all_domain_dispose
Domain.members	A										<section class="prog__container"><p id="obj.desc">An array of timers and event emitters that have been explicitly added\nto the domain.\n</section>	http://nodejs.org/api/all.html#all_domain_members
Domain members	R	Domain.members										http://nodejs.org/api/all.html#all_domain_members
Events	A										<section class="prog__container"><p id="obj.desc">Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\ncalled.\nFor instance: a <code>net.Server</code> object emits an event each time a peer\nconnects to it; a <code>fs.ReadStream</code> emits an event when the file is opened;\na stream emits an event whenever data is available to be read.\nAll objects that emit events are instances of the <code>EventEmitter</code> class. These\nobjects expose an <code>eventEmitter.on()</code> function that allows one or more\nfunctions to be attached to named events emitted by the object. Typically,\nevent names are camel-cased strings but any valid JavaScript property key\ncan be used.\nWhen the <code>EventEmitter</code> object emits an event, all of the functions attached\nto that specific event are called <em>synchronously</em>. Any values returned by the\ncalled listeners are <em>ignored</em> and will be discarded.\nThe following example shows a simple <code>EventEmitter</code> instance with a single\nlistener. The <code>eventEmitter.on()</code> method is used to register listeners, while\nthe <code>eventEmitter.emit()</code> method is used to trigger the event.\n<pre><code class="lang-js">const EventEmitter = require(&#39;events&#39;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;an event occurred!&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_events
EventEmitter	A										<section class="prog__container"><p id="obj.desc">The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:\n<pre><code class="lang-js">const EventEmitter = require(&#39;events&#39;);\n</code></pre>\nAll EventEmitters emit the event <code>&#39;newListener&#39;</code> when new listeners are\nadded and <code>&#39;removeListener&#39;</code> when existing listeners are removed.\n</section>	http://nodejs.org/api/all.html#all_eventemitter
EventEmitter.listenerCount	A										<section class="prog__container"><p id="obj.desc">A class method that returns the number of listeners for the given <code>eventName</code>\nregistered on the given <code>emitter</code>.\n<pre><code class="lang-js">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, &#39;event&#39;));\n// Prints: 2\n</code></pre>\n<pre><code>EventEmitter.listenerCount(emitter, eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listenercount_emitter_eventname
EventEmitter listenerCount	R	EventEmitter.listenerCount										http://nodejs.org/api/all.html#all_eventemitter_listenercount_emitter_eventname
EventEmitter.addListener	A										<section class="prog__container"><p id="obj.desc">Alias for <code>emitter.on(eventName, listener)</code>.\n<pre><code>emitter.addListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_addlistener_eventname_listener
EventEmitter addListener	R	EventEmitter.addListener										http://nodejs.org/api/all.html#all_eventemitter_addlistener_eventname_listener
EventEmitter.emit	A										<section class="prog__container"><p id="obj.desc">Synchronously calls each of the listeners registered for the event named\n<code>eventName</code>, in the order they were registered, passing the supplied arguments\nto each.\nReturns <code>true</code> if the event had listeners, <code>false</code> otherwise.\n<pre><code>emitter.emit(eventName[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_emit_eventname_...args
EventEmitter emit	R	EventEmitter.emit										http://nodejs.org/api/all.html#all_eventemitter_emit_eventname_...args
EventEmitter.eventNames	A										<section class="prog__container"><p id="obj.desc">Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or Symbols.\n<pre><code class="lang-js">const EventEmitter = require(&#39;events&#39;);\nconst myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; {});\nmyEE.on(&#39;bar&#39;, () =&gt; {});\n\nconst sym = Symbol(&#39;symbol&#39;);\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]\n</code></pre>\n<pre><code>emitter.eventNames()</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_eventnames
EventEmitter eventNames	R	EventEmitter.eventNames										http://nodejs.org/api/all.html#all_eventemitter_eventnames
EventEmitter.getMaxListeners	A										<section class="prog__container"><p id="obj.desc">Returns the current max listener value for the <code>EventEmitter</code> which is either\nset by <code>emitter.setMaxListeners(n)</code> or defaults to\n<code>EventEmitter.defaultMaxListeners</code>.\n<pre><code>emitter.getMaxListeners()</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_getmaxlisteners
EventEmitter getMaxListeners	R	EventEmitter.getMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_getmaxlisteners
EventEmitter.listenerCount	A										<section class="prog__container"><p id="obj.desc">Returns the number of listeners listening to the event named <code>eventName</code>.\n<pre><code>emitter.listenerCount(eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listenercount_eventname
EventEmitter listenerCount	R	EventEmitter.listenerCount										http://nodejs.org/api/all.html#all_eventemitter_listenercount_eventname
EventEmitter.listeners	A										<section class="prog__container"><p id="obj.desc">Returns a copy of the array of listeners for the event named <code>eventName</code>.\n<pre><code class="lang-js">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\nconsole.log(util.inspect(server.listeners(&#39;connection&#39;)));\n// Prints: [ [Function] ]\n</code></pre>\n<pre><code>emitter.listeners(eventName)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_listeners_eventname
EventEmitter listeners	R	EventEmitter.listeners										http://nodejs.org/api/all.html#all_eventemitter_listeners_eventname
EventEmitter.on	A										<section class="prog__container"><p id="obj.desc">Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.\n<pre><code class="lang-js">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\nBy default, event listeners are invoked in the order they are added. The\n<code>emitter.prependListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n<pre><code class="lang-js">const myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n</code></pre>\n<pre><code>emitter.on(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_on_eventname_listener
EventEmitter on	R	EventEmitter.on										http://nodejs.org/api/all.html#all_eventemitter_on_eventname_listener
EventEmitter.once	A										<section class="prog__container"><p id="obj.desc">Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.\n<pre><code class="lang-js">server.once(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\nBy default, event listeners are invoked in the order they are added. The\n<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n<pre><code class="lang-js">const myEE = new EventEmitter();\nmyEE.once(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependOnceListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n</code></pre>\n<pre><code>emitter.once(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_once_eventname_listener
EventEmitter once	R	EventEmitter.once										http://nodejs.org/api/all.html#all_eventemitter_once_eventname_listener
EventEmitter.prependListener	A										<section class="prog__container"><p id="obj.desc">Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.\n<pre><code class="lang-js">server.prependListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\n<pre><code>emitter.prependListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_prependlistener_eventname_listener
EventEmitter prependListener	R	EventEmitter.prependListener										http://nodejs.org/api/all.html#all_eventemitter_prependlistener_eventname_listener
EventEmitter.prependOnceListener	A										<section class="prog__container"><p id="obj.desc">Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.\n<pre><code class="lang-js">server.prependOnceListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\n<pre><code>emitter.prependOnceListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_prependoncelistener_eventname_listener
EventEmitter prependOnceListener	R	EventEmitter.prependOnceListener										http://nodejs.org/api/all.html#all_eventemitter_prependoncelistener_eventname_listener
EventEmitter.removeAllListeners	A										<section class="prog__container"><p id="obj.desc">Removes all listeners, or those of the specified <code>eventName</code>.\nNote that it is bad practice to remove listeners added elsewhere in the code,\nparticularly when the <code>EventEmitter</code> instance was created by some other\ncomponent or module (e.g. sockets or file streams).\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\n<pre><code>emitter.removeAllListeners([eventName])</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_removealllisteners_eventname
EventEmitter removeAllListeners	R	EventEmitter.removeAllListeners										http://nodejs.org/api/all.html#all_eventemitter_removealllisteners_eventname
EventEmitter.removeListener	A										<section class="prog__container"><p id="obj.desc">Removes the specified <code>listener</code> from the listener array for the event named\n<code>eventName</code>.\n<pre><code class="lang-js">var callback = (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n};\nserver.on(&#39;connection&#39;, callback);\n// ...\nserver.removeListener(&#39;connection&#39;, callback);\n</code></pre>\n<code>removeListener</code> will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified <code>eventName</code>, then <code>removeListener</code> must be\ncalled multiple times to remove each instance.\nNote that once an event has been emitted, all listeners attached to it at the\ntime of emitting will be called in order. This implies that any <code>removeListener()</code>\nor <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener\nfinishes execution will not remove them from <code>emit()</code> in progress. Subsequent\nevents will behave as expected.\n<pre><code class="lang-js">const myEmitter = new MyEmitter();\n\nvar callbackA = () =&gt; {\n  console.log(&#39;A&#39;);\n  myEmitter.removeListener(&#39;event&#39;, callbackB);\n};\n\nvar callbackB = () =&gt; {\n  console.log(&#39;B&#39;);\n};\n\nmyEmitter.on(&#39;event&#39;, callbackA);\n\nmyEmitter.on(&#39;event&#39;, callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n</code></pre>\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered <em>after</em> the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe <code>emitter.listeners()</code> method will need to be recreated.\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\n<pre><code>emitter.removeListener(eventName, listener)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_removelistener_eventname_listener
EventEmitter removeListener	R	EventEmitter.removeListener										http://nodejs.org/api/all.html#all_eventemitter_removelistener_eventname_listener
EventEmitter.setMaxListeners	A										<section class="prog__container"><p id="obj.desc">By default EventEmitters will print a warning if more than <code>10</code> listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\nThe <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this\nspecific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)\nto indicate an unlimited number of listeners.\nReturns a reference to the <code>EventEmitter</code>, so that calls can be chained.\n<!-- [end-include:events.md] -->\n<!-- [start-include:fs.md] -->\n<pre><code>emitter.setMaxListeners(n)</code></pre></section>	http://nodejs.org/api/all.html#all_eventemitter_setmaxlisteners_n
EventEmitter setMaxListeners	R	EventEmitter.setMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_setmaxlisteners_n
EventEmitter.defaultMaxListeners	A										<section class="prog__container"><p id="obj.desc">By default, a maximum of <code>10</code> listeners can be registered for any single\nevent. This limit can be changed for individual <code>EventEmitter</code> instances\nusing the <code>emitter.setMaxListeners(n)</code> method. To change the default\nfor <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>\nproperty can be used.\nTake caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the\nchange effects <em>all</em> <code>EventEmitter</code> instances, including those created before\nthe change is made. However, calling <code>emitter.setMaxListeners(n)</code> still has\nprecedence over <code>EventEmitter.defaultMaxListeners</code>.\nNote that this is not a hard limit. The <code>EventEmitter</code> instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a &quot;possible EventEmitter memory leak&quot; has been detected. For any single\n<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>\nmethods can be used to temporarily avoid this warning:\n<pre><code class="lang-js">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once(&#39;event&#39;, () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n</code></pre>\nThe <code>--trace-warnings</code> command line flag can be used to display the\nstack trace for such warnings.\nThe emitted warning can be inspected with <code>process.on(&#39;warning&#39;)</code> and will\nhave the additional <code>emitter</code>, <code>type</code> and <code>count</code> properties, referring to\nthe event emitter instance, the event’s name and the number of attached\nlisteners, respectively.\nIts <code>name</code> property is set to <code>&#39;MaxListenersExceededWarning&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_eventemitter_defaultmaxlisteners
EventEmitter defaultMaxListeners	R	EventEmitter.defaultMaxListeners										http://nodejs.org/api/all.html#all_eventemitter_defaultmaxlisteners
EventEmitter.newListener	A										<section class="prog__container"><p id="obj.desc">The <code>EventEmitter</code> instance will emit its own <code>&#39;newListener&#39;</code> event <em>before</em>\na listener is added to its internal array of listeners.\nListeners registered for the <code>&#39;newListener&#39;</code> event will be passed the event\nname and a reference to the listener being added.\nThe fact that the event is triggered before adding the listener has a subtle\nbut important side effect: any <em>additional</em> listeners registered to the same\n<code>name</code> <em>within</em> the <code>&#39;newListener&#39;</code> callback will be inserted <em>before</em> the\nlistener that is in the process of being added.\n<pre><code class="lang-js">const myEmitter = new MyEmitter();\n// Only do this once so we don&#39;t loop forever\nmyEmitter.once(&#39;newListener&#39;, (event, listener) =&gt; {\n  if (event === &#39;event&#39;) {\n    // Insert a new listener in front\n    myEmitter.on(&#39;event&#39;, () =&gt; {\n      console.log(&#39;B&#39;);\n    });\n  }\n});\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;A&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   B\n//   A\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_eventemitter_newlistener
EventEmitter newListener	R	EventEmitter.newListener										http://nodejs.org/api/all.html#all_eventemitter_newlistener
EventEmitter.removeListener	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;removeListener&#39;</code> event is emitted <em>after</em> the <code>listener</code> is removed.\n</section>	http://nodejs.org/api/all.html#all_eventemitter_removelistener
EventEmitter removeListener	R	EventEmitter.removeListener										http://nodejs.org/api/all.html#all_eventemitter_removelistener
fs	A										<section class="prog__container"><p id="obj.desc">File I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do <code>require(&#39;fs&#39;)</code>. All the methods have asynchronous and\nsynchronous forms.\nThe asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be <code>null</code> or <code>undefined</code>.\nWhen using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.\nHere is an example of the asynchronous version:\n<pre><code class="lang-js">const fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n});\n</code></pre>\nHere is the synchronous version:\n<pre><code class="lang-js">const fs = require(&#39;fs&#39;);\n\nfs.unlinkSync(&#39;/tmp/hello&#39;);\nconsole.log(&#39;successfully deleted /tmp/hello&#39;);\n</code></pre>\nWith the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:\n<pre><code class="lang-js">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n</code></pre>\nIt could be that <code>fs.stat</code> is executed before <code>fs.rename</code>.\nThe correct way to do this is to chain the callbacks.\n<pre><code class="lang-js">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n</code></pre>\nIn busy processes, the programmer is <em>strongly encouraged</em> to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.\nThe relative path to a filename can be used. Remember, however, that this path\nwill be relative to <code>process.cwd()</code>.\nMost fs functions let you omit the callback argument. If you do, a default\ncallback is used that rethrows errors. To get a trace to the original call\nsite, set the <code>NODE_DEBUG</code> environment variable:\n<pre><code class="lang-txt">$ cat script.js\nfunction bad() {\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_fs
fs.access	A										<section class="prog__container"><p id="obj.desc">Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. The following constants define the possible values of\n<code>mode</code>. It is possible to create a mask consisting of the bitwise OR of two or\nmore values.\n<ul>\n<li><code>fs.constants.F_OK</code> - <code>path</code> is visible to the calling process. This is useful\nfor determining if a file exists, but says nothing about <code>rwx</code> permissions.\nDefault if no <code>mode</code> is specified.</li>\n<li><code>fs.constants.R_OK</code> - <code>path</code> can be read by the calling process.</li>\n<li><code>fs.constants.W_OK</code> - <code>path</code> can be written by the calling process.</li>\n<li><code>fs.constants.X_OK</code> - <code>path</code> can be executed by the calling process. This has\nno effect on Windows (will behave like <code>fs.constants.F_OK</code>).</li>\n</ul>\nThe final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be populated. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.\n<pre><code class="lang-js">fs.access(&#39;/etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK, (err) =&gt; {\n  console.log(err ? &#39;no access!&#39; : &#39;can read/write&#39;);\n});\n</code></pre>\nUsing <code>fs.access()</code> to check for the accessibility of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.\nFor example:\n<strong>write (NOT RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (!err) {\n    console.error(&#39;myfile already exists&#39;);\n    return;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</code></pre>\n<strong>write (RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<strong>read (NOT RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</code></pre>\n<strong>read (RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  readMyData(fd);\n});\n</code></pre>\nThe &quot;not recommended&quot; examples above check for accessibility and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.\nIn general, check for the accessibility of a file only if the file won’t be\nused directly, for example when its accessibility is a signal from another\nprocess.\n<pre><code>fs.access(path[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_access_path_mode_callback
fs access	R	fs.access										http://nodejs.org/api/all.html#all_fs_access_path_mode_callback
fs.accessSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.access()</code>. This throws if any accessibility\nchecks fail, and does nothing otherwise.\n<pre><code>fs.accessSync(path[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_accesssync_path_mode
fs accessSync	R	fs.accessSync										http://nodejs.org/api/all.html#all_fs_accesssync_path_mode
fs.appendFile	A										<section class="prog__container"><p id="obj.desc">Asynchronously append data to a file, creating the file if it does not yet exist.\n<code>data</code> can be a string or a buffer.\nExample:\n<pre><code class="lang-js">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n</code></pre>\nIf <code>options</code> is a string, then it specifies the encoding. Example:\n<pre><code class="lang-js">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n</code></pre>\nAny specified file descriptor has to have been opened for appending.\n<em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</em>\n<pre><code>fs.appendFile(file, data[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_appendfile_file_data_options_callback
fs appendFile	R	fs.appendFile										http://nodejs.org/api/all.html#all_fs_appendfile_file_data_options_callback
fs.appendFileSync	A										<section class="prog__container"><p id="obj.desc">The synchronous version of <code>fs.appendFile()</code>. Returns <code>undefined</code>.\n<pre><code>fs.appendFileSync(file, data[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_appendfilesync_file_data_options
fs appendFileSync	R	fs.appendFileSync										http://nodejs.org/api/all.html#all_fs_appendfilesync_file_data_options
fs.chmod	A										<section class="prog__container"><p id="obj.desc">Asynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.chmod(path, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chmod_path_mode_callback
fs chmod	R	fs.chmod										http://nodejs.org/api/all.html#all_fs_chmod_path_mode_callback
fs.chmodSync	A										<section class="prog__container"><p id="obj.desc">Synchronous chmod(2). Returns <code>undefined</code>.\n<pre><code>fs.chmodSync(path, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chmodsync_path_mode
fs chmodSync	R	fs.chmodSync										http://nodejs.org/api/all.html#all_fs_chmodsync_path_mode
fs.chown	A										<section class="prog__container"><p id="obj.desc">Asynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.chown(path, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chown_path_uid_gid_callback
fs chown	R	fs.chown										http://nodejs.org/api/all.html#all_fs_chown_path_uid_gid_callback
fs.chownSync	A										<section class="prog__container"><p id="obj.desc">Synchronous chown(2). Returns <code>undefined</code>.\n<pre><code>fs.chownSync(path, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_chownsync_path_uid_gid
fs chownSync	R	fs.chownSync										http://nodejs.org/api/all.html#all_fs_chownsync_path_uid_gid
fs.close	A										<section class="prog__container"><p id="obj.desc">Asynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.close(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_close_fd_callback
fs close	R	fs.close										http://nodejs.org/api/all.html#all_fs_close_fd_callback
fs.closeSync	A										<section class="prog__container"><p id="obj.desc">Synchronous close(2). Returns <code>undefined</code>.\n<pre><code>fs.closeSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_closesync_fd
fs closeSync	R	fs.closeSync										http://nodejs.org/api/all.html#all_fs_closesync_fd
fs.createReadStream	A										<section class="prog__container"><p id="obj.desc">Returns a new <code>ReadStream</code> object. (See Readable Stream).\nBe aware that, unlike the default value set for <code>highWaterMark</code> on a\nreadable stream (16 kb), the stream returned by this method has a\ndefault value of 64 kb for the same parameter.\n<code>options</code> is an object or string with the following defaults:\n<pre><code class="lang-js">{\n  flags: &#39;r&#39;,\n  encoding: null,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre>\n<code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\nthe file instead of the entire file.  Both <code>start</code> and <code>end</code> are inclusive and\nstart at 0. The <code>encoding</code> can be any one of those accepted by <code>Buffer</code>.\nIf <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be\nemitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed\nto <code>net.Socket</code>.\nIf <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error.  It is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.  If <code>autoClose</code> is set to true (default\nbehavior), on <code>error</code> or <code>end</code> the file descriptor will be closed\nautomatically.\n<code>mode</code> sets the file mode (permission and sticky bits), but only if the\nfile was created.\nAn example to read the last 10 bytes of a file which is 100 bytes long:\n<pre><code class="lang-js">fs.createReadStream(&#39;sample.txt&#39;, {start: 90, end: 99});\n</code></pre>\nIf <code>options</code> is a string, then it specifies the encoding.\n<pre><code>fs.createReadStream(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_createreadstream_path_options
fs createReadStream	R	fs.createReadStream										http://nodejs.org/api/all.html#all_fs_createreadstream_path_options
fs.createWriteStream	A										<section class="prog__container"><p id="obj.desc">Returns a new <code>WriteStream</code> object. (See Writable Stream).\n<code>options</code> is an object or string with the following defaults:\n<pre><code class="lang-js">{\n  flags: &#39;w&#39;,\n  defaultEncoding: &#39;utf8&#39;,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre>\n<code>options</code> may also include a <code>start</code> option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\ndefault mode <code>w</code>. The <code>defaultEncoding</code> can be any one of those accepted by\n<code>Buffer</code>.\nIf <code>autoClose</code> is set to true (default behavior) on <code>error</code> or <code>end</code>\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.\nLike <code>ReadStream</code>, if <code>fd</code> is specified, <code>WriteStream</code> will ignore the\n<code>path</code> argument and will use the specified file descriptor. This means that no\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\n<code>fd</code>s should be passed to <code>net.Socket</code>.\nIf <code>options</code> is a string, then it specifies the encoding.\n<pre><code>fs.createWriteStream(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_createwritestream_path_options
fs createWriteStream	R	fs.createWriteStream										http://nodejs.org/api/all.html#all_fs_createwritestream_path_options
fs.exists	A										<section class="prog__container"><p id="obj.desc">Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false.  Example:\n<pre><code class="lang-js">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n</code></pre>\n<strong>Note that the parameter to this callback is not consistent with other\nNode.js callbacks.</strong> Normally, the first parameter to a Node.js callback is\nan <code>err</code> parameter, optionally followed by other parameters. The\n<code>fs.exists()</code> callback has only one boolean parameter. This is one reason\n<code>fs.access()</code> is recommended instead of <code>fs.exists()</code>.\nUsing <code>fs.exists()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.\nFor example:\n<strong>write (NOT RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    console.error(&#39;myfile already exists&#39;);\n  } else {\n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</code></pre>\n<strong>write (RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;EEXIST&quot;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  }\n  writeMyData(fd);\n});\n</code></pre>\n<strong>read (NOT RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n      readMyData(fd);\n    });\n  } else {\n    console.error(&#39;myfile does not exist&#39;);\n  }\n});\n</code></pre>\n<strong>read (RECOMMENDED)</strong>\n<pre><code class="lang-js">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &quot;ENOENT&quot;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    } else {\n      throw err;\n    }\n  } else {\n    readMyData(fd);\n  }\n});\n</code></pre>\nThe &quot;not recommended&quot; examples above check for existence and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.\nIn general, check for the existence of a file only if the file won’t be\nused directly, for example when its existence is a signal from another\nprocess.\n<pre><code>fs.exists(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_exists_path_callback
fs exists	R	fs.exists										http://nodejs.org/api/all.html#all_fs_exists_path_callback
fs.existsSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.exists()</code>.\nReturns <code>true</code> if the file exists, <code>false</code> otherwise.\nNote that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not.\n(The <code>callback</code> parameter to <code>fs.exists()</code> accepts parameters that are\ninconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not use\na callback.)\n<pre><code>fs.existsSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_existssync_path
fs existsSync	R	fs.existsSync										http://nodejs.org/api/all.html#all_fs_existssync_path
fs.fchmod	A										<section class="prog__container"><p id="obj.desc">Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n<pre><code>fs.fchmod(fd, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchmod_fd_mode_callback
fs fchmod	R	fs.fchmod										http://nodejs.org/api/all.html#all_fs_fchmod_fd_mode_callback
fs.fchmodSync	A										<section class="prog__container"><p id="obj.desc">Synchronous fchmod(2). Returns <code>undefined</code>.\n<pre><code>fs.fchmodSync(fd, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchmodsync_fd_mode
fs fchmodSync	R	fs.fchmodSync										http://nodejs.org/api/all.html#all_fs_fchmodsync_fd_mode
fs.fchown	A										<section class="prog__container"><p id="obj.desc">Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.fchown(fd, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchown_fd_uid_gid_callback
fs fchown	R	fs.fchown										http://nodejs.org/api/all.html#all_fs_fchown_fd_uid_gid_callback
fs.fchownSync	A										<section class="prog__container"><p id="obj.desc">Synchronous fchown(2). Returns <code>undefined</code>.\n<pre><code>fs.fchownSync(fd, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fchownsync_fd_uid_gid
fs fchownSync	R	fs.fchownSync										http://nodejs.org/api/all.html#all_fs_fchownsync_fd_uid_gid
fs.fdatasync	A										<section class="prog__container"><p id="obj.desc">Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.\n<pre><code>fs.fdatasync(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fdatasync_fd_callback
fs fdatasync	R	fs.fdatasync										http://nodejs.org/api/all.html#all_fs_fdatasync_fd_callback
fs.fdatasyncSync	A										<section class="prog__container"><p id="obj.desc">Synchronous fdatasync(2). Returns <code>undefined</code>.\n<pre><code>fs.fdatasyncSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fdatasyncsync_fd
fs fdatasyncSync	R	fs.fdatasyncSync										http://nodejs.org/api/all.html#all_fs_fdatasyncsync_fd
fs.fstat	A										<section class="prog__container"><p id="obj.desc">Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <code>fs.Stats</code> object. <code>fstat()</code> is identical to <code>stat()</code>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.\n<pre><code>fs.fstat(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fstat_fd_callback
fs fstat	R	fs.fstat										http://nodejs.org/api/all.html#all_fs_fstat_fd_callback
fs.fstatSync	A										<section class="prog__container"><p id="obj.desc">Synchronous fstat(2). Returns an instance of <code>fs.Stats</code>.\n<pre><code>fs.fstatSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fstatsync_fd
fs fstatSync	R	fs.fstatSync										http://nodejs.org/api/all.html#all_fs_fstatsync_fd
fs.fsync	A										<section class="prog__container"><p id="obj.desc">Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.fsync(fd, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fsync_fd_callback
fs fsync	R	fs.fsync										http://nodejs.org/api/all.html#all_fs_fsync_fd_callback
fs.fsyncSync	A										<section class="prog__container"><p id="obj.desc">Synchronous fsync(2). Returns <code>undefined</code>.\n<pre><code>fs.fsyncSync(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_fsyncsync_fd
fs fsyncSync	R	fs.fsyncSync										http://nodejs.org/api/all.html#all_fs_fsyncsync_fd
fs.ftruncate	A										<section class="prog__container"><p id="obj.desc">Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\nIf the file referred to by the file descriptor was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.\nFor example, the following program retains only the first four bytes of the file\n<pre><code class="lang-js">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n});\n// Prints: Node\n</code></pre>\nIf the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (&#39;&#39;). For example,\n<pre><code class="lang-js">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf-8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(!err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&#39;Node.js&#39; in UTF8)\n</code></pre>\nThe last three bytes are null bytes (&#39;&#39;), to compensate the over-truncation.\n<pre><code>fs.ftruncate(fd, len, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_ftruncate_fd_len_callback
fs ftruncate	R	fs.ftruncate										http://nodejs.org/api/all.html#all_fs_ftruncate_fd_len_callback
fs.ftruncateSync	A										<section class="prog__container"><p id="obj.desc">Synchronous ftruncate(2). Returns <code>undefined</code>.\n<pre><code>fs.ftruncateSync(fd, len)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_ftruncatesync_fd_len
fs ftruncateSync	R	fs.ftruncateSync										http://nodejs.org/api/all.html#all_fs_ftruncatesync_fd_len
fs.futimes	A										<section class="prog__container"><p id="obj.desc">Change the file timestamps of a file referenced by the supplied file\ndescriptor.\n<pre><code>fs.futimes(fd, atime, mtime, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_futimes_fd_atime_mtime_callback
fs futimes	R	fs.futimes										http://nodejs.org/api/all.html#all_fs_futimes_fd_atime_mtime_callback
fs.futimesSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.futimes()</code>. Returns <code>undefined</code>.\n<pre><code>fs.futimesSync(fd, atime, mtime)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_futimessync_fd_atime_mtime
fs futimesSync	R	fs.futimesSync										http://nodejs.org/api/all.html#all_fs_futimessync_fd_atime_mtime
fs.lchmod	A										<section class="prog__container"><p id="obj.desc">Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.\nOnly available on Mac OS X.\n<pre><code>fs.lchmod(path, mode, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback
fs lchmod	R	fs.lchmod										http://nodejs.org/api/all.html#all_fs_lchmod_path_mode_callback
fs.lchmodSync	A										<section class="prog__container"><p id="obj.desc">Synchronous lchmod(2). Returns <code>undefined</code>.\n<pre><code>fs.lchmodSync(path, mode)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchmodsync_path_mode
fs lchmodSync	R	fs.lchmodSync										http://nodejs.org/api/all.html#all_fs_lchmodsync_path_mode
fs.lchown	A										<section class="prog__container"><p id="obj.desc">Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.lchown(path, uid, gid, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchown_path_uid_gid_callback
fs lchown	R	fs.lchown										http://nodejs.org/api/all.html#all_fs_lchown_path_uid_gid_callback
fs.lchownSync	A										<section class="prog__container"><p id="obj.desc">Synchronous lchown(2). Returns <code>undefined</code>.\n<pre><code>fs.lchownSync(path, uid, gid)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lchownsync_path_uid_gid
fs lchownSync	R	fs.lchownSync										http://nodejs.org/api/all.html#all_fs_lchownsync_path_uid_gid
fs.link	A										<section class="prog__container"><p id="obj.desc">Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.\n<pre><code>fs.link(existingPath, newPath, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_link_existingpath_newpath_callback
fs link	R	fs.link										http://nodejs.org/api/all.html#all_fs_link_existingpath_newpath_callback
fs.linkSync	A										<section class="prog__container"><p id="obj.desc">Synchronous link(2). Returns <code>undefined</code>.\n<pre><code>fs.linkSync(existingPath, newPath)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_linksync_existingpath_newpath
fs linkSync	R	fs.linkSync										http://nodejs.org/api/all.html#all_fs_linksync_existingpath_newpath
fs.lstat	A										<section class="prog__container"><p id="obj.desc">Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <code>fs.Stats</code> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.\n<pre><code>fs.lstat(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lstat_path_callback
fs lstat	R	fs.lstat										http://nodejs.org/api/all.html#all_fs_lstat_path_callback
fs.lstatSync	A										<section class="prog__container"><p id="obj.desc">Synchronous lstat(2). Returns an instance of <code>fs.Stats</code>.\n<pre><code>fs.lstatSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_lstatsync_path
fs lstatSync	R	fs.lstatSync										http://nodejs.org/api/all.html#all_fs_lstatsync_path
fs.mkdir	A										<section class="prog__container"><p id="obj.desc">Asynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback. <code>mode</code> defaults to <code>0o777</code>.\n<pre><code>fs.mkdir(path[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdir_path_mode_callback
fs mkdir	R	fs.mkdir										http://nodejs.org/api/all.html#all_fs_mkdir_path_mode_callback
fs.mkdirSync	A										<section class="prog__container"><p id="obj.desc">Synchronous mkdir(2). Returns <code>undefined</code>.\n<pre><code>fs.mkdirSync(path[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdirsync_path_mode
fs mkdirSync	R	fs.mkdirSync										http://nodejs.org/api/all.html#all_fs_mkdirsync_path_mode
fs.mkdtemp	A										<section class="prog__container"><p id="obj.desc">Creates a unique temporary directory.\nGenerates six random characters to be appended behind a required\n<code>prefix</code> to create a unique temporary directory.\nThe created folder path is passed as a string to the callback&#39;s second\nparameter.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.\nExample:\n<pre><code class="lang-js">fs.mkdtemp(&#39;/tmp/foo-&#39;, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2\n});\n</code></pre>\n<em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>,\nthe <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).\n<pre><code class="lang-js">// The parent directory for the new temporary directory\nconst tmpDir = &#39;/tmp&#39;;\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst path = require(&#39;path&#39;);\nfs.mkdtemp(tmpDir + path.sep, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</code></pre>\n<pre><code>fs.mkdtemp(prefix[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdtemp_prefix_options_callback
fs mkdtemp	R	fs.mkdtemp										http://nodejs.org/api/all.html#all_fs_mkdtemp_prefix_options_callback
fs.mkdtempSync	A										<section class="prog__container"><p id="obj.desc">The synchronous version of <code>fs.mkdtemp()</code>. Returns the created\nfolder path.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.\n<pre><code>fs.mkdtempSync(prefix[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_mkdtempsync_prefix_options
fs mkdtempSync	R	fs.mkdtempSync										http://nodejs.org/api/all.html#all_fs_mkdtempsync_prefix_options
fs.open	A										<section class="prog__container"><p id="obj.desc">Asynchronous file open. See open(2). <code>flags</code> can be:\n<ul>\n<li><code>&#39;r&#39;</code> - Open file for reading.\nAn exception occurs if the file does not exist.\n</li>\n<li><code>&#39;r+&#39;</code> - Open file for reading and writing.\nAn exception occurs if the file does not exist.\n</li>\n<li><code>&#39;rs+&#39;</code> - Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.\nThis is primarily useful for opening files on NFS mounts as it allows you to\nskip the potentially stale local cache. It has a very real impact on I/O\nperformance so don&#39;t use this flag unless you need it.\nNote that this doesn&#39;t turn <code>fs.open()</code> into a synchronous blocking call.\nIf that&#39;s what you want then you should be using <code>fs.openSync()</code>\n</li>\n<li><code>&#39;w&#39;</code> - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n</li>\n<li><code>&#39;wx&#39;</code> - Like <code>&#39;w&#39;</code> but fails if <code>path</code> exists.\n</li>\n<li><code>&#39;w+&#39;</code> - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n</li>\n<li><code>&#39;wx+&#39;</code> - Like <code>&#39;w+&#39;</code> but fails if <code>path</code> exists.\n</li>\n<li><code>&#39;a&#39;</code> - Open file for appending.\nThe file is created if it does not exist.\n</li>\n<li><code>&#39;ax&#39;</code> - Like <code>&#39;a&#39;</code> but fails if <code>path</code> exists.\n</li>\n<li><code>&#39;a+&#39;</code> - Open file for reading and appending.\nThe file is created if it does not exist.\n</li>\n<li><code>&#39;ax+&#39;</code> - Like <code>&#39;a+&#39;</code> but fails if <code>path</code> exists.\n</li>\n</ul>\n<code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated. It defaults to <code>0666</code>, readable and writable.\nThe callback gets two arguments <code>(err, fd)</code>.\nThe exclusive flag <code>&#39;x&#39;</code> (<code>O_EXCL</code> flag in open(2)) ensures that <code>path</code> is newly\ncreated. On POSIX systems, <code>path</code> is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network file\nsystems.\n<code>flags</code> can also be a number as documented by open(2); commonly used constants\nare available from <code>fs.constants</code>.  On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>,\nor <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by CreateFileW.\nOn Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.\n<em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such,\nopening a directory on OS X and Linux with the <code>&#39;a+&#39;</code> flag - see example below -\nwill return an error. In contrast, on Windows and FreeBSD, a file descriptor\nwill be returned.</em>\n<pre><code class="lang-js">// OS X and Linux\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n});\n\n// Windows and FreeBSD\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n});\n</code></pre>\n<pre><code>fs.open(path, flags[, mode], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_open_path_flags_mode_callback
fs open	R	fs.open										http://nodejs.org/api/all.html#all_fs_open_path_flags_mode_callback
fs.openSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.open()</code>. Returns an integer representing the file\ndescriptor.\n<pre><code>fs.openSync(path, flags[, mode])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_opensync_path_flags_mode
fs openSync	R	fs.openSync										http://nodejs.org/api/all.html#all_fs_opensync_path_flags_mode
fs.read	A										<section class="prog__container"><p id="obj.desc">Read data from the file specified by <code>fd</code>.\n<code>buffer</code> is the buffer that the data will be written to.\n<code>offset</code> is the offset in the buffer to start writing at.\n<code>length</code> is an integer specifying the number of bytes to read.\n<code>position</code> is an integer specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position.\nThe callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.\n<pre><code>fs.read(fd, buffer, offset, length, position, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_read_fd_buffer_offset_length_position_callback
fs read	R	fs.read										http://nodejs.org/api/all.html#all_fs_read_fd_buffer_offset_length_position_callback
fs.readdir	A										<section class="prog__container"><p id="obj.desc">Asynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.\n<pre><code>fs.readdir(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readdir_path_options_callback
fs readdir	R	fs.readdir										http://nodejs.org/api/all.html#all_fs_readdir_path_options_callback
fs.readdirSync	A										<section class="prog__container"><p id="obj.desc">Synchronous readdir(3). Returns an array of filenames excluding <code>&#39;.&#39;</code> and\n<code>&#39;..&#39;</code>.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.\n<pre><code>fs.readdirSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readdirsync_path_options
fs readdirSync	R	fs.readdirSync										http://nodejs.org/api/all.html#all_fs_readdirsync_path_options
fs.readFile	A										<section class="prog__container"><p id="obj.desc">Asynchronously reads the entire contents of a file. Example:\n<pre><code class="lang-js">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\nThe callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\ncontents of the file.\nIf no encoding is specified, then the raw buffer is returned.\nIf <code>options</code> is a string, then it specifies the encoding. Example:\n<pre><code class="lang-js">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n</code></pre>\nAny specified file descriptor has to support reading.\n<em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</em>\n<pre><code>fs.readFile(file[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readfile_file_options_callback
fs readFile	R	fs.readFile										http://nodejs.org/api/all.html#all_fs_readfile_file_options_callback
fs.readFileSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.readFile</code>. Returns the contents of the <code>file</code>.\nIf the <code>encoding</code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.\n<pre><code>fs.readFileSync(file[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readfilesync_file_options
fs readFileSync	R	fs.readFileSync										http://nodejs.org/api/all.html#all_fs_readfilesync_file_options
fs.readlink	A										<section class="prog__container"><p id="obj.desc">Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)</code>.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.\n<pre><code>fs.readlink(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readlink_path_options_callback
fs readlink	R	fs.readlink										http://nodejs.org/api/all.html#all_fs_readlink_path_options_callback
fs.readlinkSync	A										<section class="prog__container"><p id="obj.desc">Synchronous readlink(2). Returns the symbolic link&#39;s string value.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.\n<pre><code>fs.readlinkSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readlinksync_path_options
fs readlinkSync	R	fs.readlinkSync										http://nodejs.org/api/all.html#all_fs_readlinksync_path_options
fs.readSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.read()</code>. Returns the number of <code>bytesRead</code>.\n<pre><code>fs.readSync(fd, buffer, offset, length, position)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_readsync_fd_buffer_offset_length_position
fs readSync	R	fs.readSync										http://nodejs.org/api/all.html#all_fs_readsync_fd_buffer_offset_length_position
fs.realpath	A										<section class="prog__container"><p id="obj.desc">Asynchronous realpath(3). The <code>callback</code> gets two arguments <code>(err,\nresolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.\nOnly paths that can be converted to UTF8 strings are supported.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.\n<pre><code>fs.realpath(path[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_realpath_path_options_callback
fs realpath	R	fs.realpath										http://nodejs.org/api/all.html#all_fs_realpath_path_options_callback
fs.realpathSync	A										<section class="prog__container"><p id="obj.desc">Synchronous realpath(3). Returns the resolved path.\nOnly paths that can be converted to UTF8 strings are supported.\nThe optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe returned value. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned\nwill be passed as a <code>Buffer</code> object.\n<pre><code>fs.realpathSync(path[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_realpathsync_path_options
fs realpathSync	R	fs.realpathSync										http://nodejs.org/api/all.html#all_fs_realpathsync_path_options
fs.rename	A										<section class="prog__container"><p id="obj.desc">Asynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.rename(oldPath, newPath, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rename_oldpath_newpath_callback
fs rename	R	fs.rename										http://nodejs.org/api/all.html#all_fs_rename_oldpath_newpath_callback
fs.renameSync	A										<section class="prog__container"><p id="obj.desc">Synchronous rename(2). Returns <code>undefined</code>.\n<pre><code>fs.renameSync(oldPath, newPath)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_renamesync_oldpath_newpath
fs renameSync	R	fs.renameSync										http://nodejs.org/api/all.html#all_fs_renamesync_oldpath_newpath
fs.rmdir	A										<section class="prog__container"><p id="obj.desc">Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.rmdir(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rmdir_path_callback
fs rmdir	R	fs.rmdir										http://nodejs.org/api/all.html#all_fs_rmdir_path_callback
fs.rmdirSync	A										<section class="prog__container"><p id="obj.desc">Synchronous rmdir(2). Returns <code>undefined</code>.\n<pre><code>fs.rmdirSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_rmdirsync_path
fs rmdirSync	R	fs.rmdirSync										http://nodejs.org/api/all.html#all_fs_rmdirsync_path
fs.stat	A										<section class="prog__container"><p id="obj.desc">Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <code>fs.Stats</code> object.\nIn case of an error, the <code>err.code</code> will be one of Common System Errors.\nUsing <code>fs.stat()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.\nTo check if a file exists without manipulating it afterwards, <code>fs.access()</code>\nis recommended.\n<pre><code>fs.stat(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_stat_path_callback
fs stat	R	fs.stat										http://nodejs.org/api/all.html#all_fs_stat_path_callback
fs.statSync	A										<section class="prog__container"><p id="obj.desc">Synchronous stat(2). Returns an instance of <code>fs.Stats</code>.\n<pre><code>fs.statSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_statsync_path
fs statSync	R	fs.statSync										http://nodejs.org/api/all.html#all_fs_statsync_path
fs.symlink	A										<section class="prog__container"><p id="obj.desc">Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The <code>type</code> argument can be set to <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> (default is <code>&#39;file&#39;</code>) and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using <code>&#39;junction&#39;</code>, the <code>target</code>\nargument will automatically be normalized to absolute path.\nHere is an example below:\n<pre><code class="lang-js">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;);\n</code></pre>\nIt creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.\n<pre><code>fs.symlink(target, path[, type], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_symlink_target_path_type_callback
fs symlink	R	fs.symlink										http://nodejs.org/api/all.html#all_fs_symlink_target_path_type_callback
fs.symlinkSync	A										<section class="prog__container"><p id="obj.desc">Synchronous symlink(2). Returns <code>undefined</code>.\n<pre><code>fs.symlinkSync(target, path[, type])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_symlinksync_target_path_type
fs symlinkSync	R	fs.symlinkSync										http://nodejs.org/api/all.html#all_fs_symlinksync_target_path_type
fs.truncate	A										<section class="prog__container"><p id="obj.desc">Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.\n<pre><code>fs.truncate(path, len, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_truncate_path_len_callback
fs truncate	R	fs.truncate										http://nodejs.org/api/all.html#all_fs_truncate_path_len_callback
fs.truncateSync	A										<section class="prog__container"><p id="obj.desc">Synchronous truncate(2). Returns <code>undefined</code>. A file descriptor can also be\npassed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.\n<pre><code>fs.truncateSync(path, len)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_truncatesync_path_len
fs truncateSync	R	fs.truncateSync										http://nodejs.org/api/all.html#all_fs_truncatesync_path_len
fs.unlink	A										<section class="prog__container"><p id="obj.desc">Asynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.\n<pre><code>fs.unlink(path, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unlink_path_callback
fs unlink	R	fs.unlink										http://nodejs.org/api/all.html#all_fs_unlink_path_callback
fs.unlinkSync	A										<section class="prog__container"><p id="obj.desc">Synchronous unlink(2). Returns <code>undefined</code>.\n<pre><code>fs.unlinkSync(path)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unlinksync_path
fs unlinkSync	R	fs.unlinkSync										http://nodejs.org/api/all.html#all_fs_unlinksync_path
fs.unwatchFile	A										<section class="prog__container"><p id="obj.desc">Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed and you\nhave effectively stopped watching <code>filename</code>.\nCalling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\nno-op, not an error.\n<em>Note: <code>fs.watch()</code> is more efficient than <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>.\n<code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>\nwhen possible.</em>\n<pre><code>fs.unwatchFile(filename[, listener])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_unwatchfile_filename_listener
fs unwatchFile	R	fs.unwatchFile										http://nodejs.org/api/all.html#all_fs_unwatchfile_filename_listener
fs.utimes	A										<section class="prog__container"><p id="obj.desc">Change file timestamps of the file referenced by the supplied path.\nNote: the arguments <code>atime</code> and <code>mtime</code> of the following related functions\nfollow these rules:\n<ul>\n<li>The value should be a Unix timestamp in seconds. For example, <code>Date.now()</code>\nreturns milliseconds, so it should be divided by 1000 before passing it in.</li>\n<li>If the value is a numeric string like <code>&#39;123456789&#39;</code>, the value will get\nconverted to the corresponding number.</li>\n<li>If the value is <code>NaN</code> or <code>Infinity</code>, the value will get converted to\n<code>Date.now() / 1000</code>.</li>\n</ul>\n<pre><code>fs.utimes(path, atime, mtime, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_utimes_path_atime_mtime_callback
fs utimes	R	fs.utimes										http://nodejs.org/api/all.html#all_fs_utimes_path_atime_mtime_callback
fs.utimesSync	A										<section class="prog__container"><p id="obj.desc">Synchronous version of <code>fs.utimes()</code>. Returns <code>undefined</code>.\n<pre><code>fs.utimesSync(path, atime, mtime)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_utimessync_path_atime_mtime
fs utimesSync	R	fs.utimesSync										http://nodejs.org/api/all.html#all_fs_utimessync_path_atime_mtime
fs.watch	A										<section class="prog__container"><p id="obj.desc">Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.  The returned object is a <code>fs.FSWatcher</code>.\nThe second argument is optional. If <code>options</code> is provided as a string, it\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.\nThe listener callback gets two arguments <code>(eventType, filename)</code>.  <code>eventType</code> is either\n<code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file which triggered\nthe event.\nNote that on most platforms, <code>&#39;rename&#39;</code> is emitted whenever a filename appears\nor disappears in the directory.\nAlso note the listener callback is attached to the <code>&#39;change&#39;</code> event fired by\n<code>fs.FSWatcher</code>, but it is not the same thing as the <code>&#39;change&#39;</code> value of\n<code>eventType</code>.\n<pre><code>fs.watch(filename[, options][, listener])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener
fs watch	R	fs.watch										http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener
fs.watchFile	A										<section class="prog__container"><p id="obj.desc">Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.\nThe <code>options</code> argument may be omitted. If provided, it should be an object. The\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\nwhether the process should continue to run as long as files are being watched.\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\ntarget should be polled in milliseconds. The default is\n<code>{ persistent: true, interval: 5007 }</code>.\nThe <code>listener</code> gets two arguments the current stat object and the previous\nstat object:\n<pre><code class="lang-js">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre>\nThese stat objects are instances of <code>fs.Stat</code>.\nIf you want to be notified when the file was modified, not just accessed,\nyou need to compare <code>curr.mtime</code> and <code>prev.mtime</code>.\n<em>Note: when an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it will\n invoke the listener once, with all the fields zeroed (or, for dates, the Unix\n Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>, instead\n of zero. If the file is created later on, the listener will be called again,\n with the latest stat objects. This is a change in functionality since v0.10.</em>\n<em>Note: <code>fs.watch()</code> is more efficient than <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code> when possible.</em>\n<pre><code>fs.watchFile(filename[, options], listener)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_watchfile_filename_options_listener
fs watchFile	R	fs.watchFile										http://nodejs.org/api/all.html#all_fs_watchfile_filename_options_listener
fs.write	A										<section class="prog__container"><p id="obj.desc">Write <code>buffer</code> to the file specified by <code>fd</code>.\n<code>offset</code> and <code>length</code> determine the part of the buffer to be written.\n<code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).\nThe callback will be given three arguments <code>(err, written, buffer)</code> where\n<code>written</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.\nNote that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.\nOn Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.\n<pre><code>fs.write(fd, buffer[, offset[, length[, position]]], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_write_fd_buffer_offset_length_position_callback
fs write	R	fs.write										http://nodejs.org/api/all.html#all_fs_write_fd_buffer_offset_length_position_callback
fs.write	A										<section class="prog__container"><p id="obj.desc">Write <code>string</code> to the file specified by <code>fd</code>.  If <code>string</code> is not a string, then\nthe value will be coerced to one.\n<code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\nthe current position. See pwrite(2).\n<code>encoding</code> is the expected string encoding.\nThe callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\nbytes written is not the same as string characters. See <code>Buffer.byteLength</code>.\nUnlike when writing <code>buffer</code>, the entire string must be written. No substring\nmay be specified. This is because the byte offset of the resulting data may not\nbe the same as the string offset.\nNote that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.\nOn Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.\n<pre><code>fs.write(fd, string[, position[, encoding]], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_write_fd_string_position_encoding_callback
fs write	R	fs.write										http://nodejs.org/api/all.html#all_fs_write_fd_string_position_encoding_callback
fs.writeFile	A										<section class="prog__container"><p id="obj.desc">Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.\nThe <code>encoding</code> option is ignored if <code>data</code> is a buffer. It defaults\nto <code>&#39;utf8&#39;</code>.\nExample:\n<pre><code class="lang-js">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;It\&#39;s saved!&#39;);\n});\n</code></pre>\nIf <code>options</code> is a string, then it specifies the encoding. Example:\n<pre><code class="lang-js">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n</code></pre>\nAny specified file descriptor has to support writing.\nNote that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.\n<em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</em>\n<pre><code>fs.writeFile(file, data[, options], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writefile_file_data_options_callback
fs writeFile	R	fs.writeFile										http://nodejs.org/api/all.html#all_fs_writefile_file_data_options_callback
fs.writeFileSync	A										<section class="prog__container"><p id="obj.desc">The synchronous version of <code>fs.writeFile()</code>. Returns <code>undefined</code>.\n<pre><code>fs.writeFileSync(file, data[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writefilesync_file_data_options
fs writeFileSync	R	fs.writeFileSync										http://nodejs.org/api/all.html#all_fs_writefilesync_file_data_options
fs.writeSync	A										<section class="prog__container"><p id="obj.desc">Synchronous versions of <code>fs.write()</code>. Returns the number of bytes written.\n<pre><code>fs.writeSync(fd, buffer[, offset[, length[, position]]])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writesync_fd_buffer_offset_length_position
fs writeSync	R	fs.writeSync										http://nodejs.org/api/all.html#all_fs_writesync_fd_buffer_offset_length_position
fs.writeSync	A										<section class="prog__container"><p id="obj.desc">Synchronous versions of <code>fs.write()</code>. Returns the number of bytes written.\n<pre><code>fs.writeSync(fd, string[, position[, encoding]])</code></pre></section>	http://nodejs.org/api/all.html#all_fs_writesync_fd_string_position_encoding
fs writeSync	R	fs.writeSync										http://nodejs.org/api/all.html#all_fs_writesync_fd_string_position_encoding
fs.constants	A										<section class="prog__container"><p id="obj.desc">Returns an object containing commonly used constants for file system\noperations. The specific constants currently defined are described in\nFS Constants.\n</section>	http://nodejs.org/api/all.html#all_fs_constants
fs constants	R	fs.constants										http://nodejs.org/api/all.html#all_fs_constants
fs.FSWatcher	A										<section class="prog__container"><p id="obj.desc">Objects returned from <code>fs.watch()</code> are of this type.\nThe <code>listener</code> callback provided to <code>fs.watch()</code> receives the returned FSWatcher&#39;s\n<code>change</code> events.\nThe object itself emits these events:\n</section>	http://nodejs.org/api/all.html#all_fs.fswatcher
fs FSWatcher	R	fs.FSWatcher										http://nodejs.org/api/all.html#all_fs fswatcher
fs.FSWatcher.close	A										<section class="prog__container"><p id="obj.desc">Stop watching for changes on the given <code>fs.FSWatcher</code>.\n<pre><code>watcher.close()</code></pre></section>	http://nodejs.org/api/all.html#all_fs.fswatcher_close
fs.FSWatcher close	R	fs.FSWatcher.close										http://nodejs.org/api/all.html#all_fs.fswatcher_close
fs FSWatcher close	R	fs.FSWatcher close										http://nodejs.org/api/all.html#all_fs fswatcher_close
fs.FSWatcher.change	A										<section class="prog__container"><p id="obj.desc">Emitted when something changes in a watched directory or file.\nSee more details in <code>fs.watch()</code>.\nThe <code>filename</code> argument may not be provided depending on operating system\nsupport. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if\n<code>fs.watch()</code> is called with its <code>encoding</code> option set to <code>&#39;buffer&#39;</code>, otherwise\n<code>filename</code> will be a string.\n<pre><code class="lang-js">// Example when handled through fs.watch listener\nfs.watch(&#39;./tmp&#39;, {encoding: &#39;buffer&#39;}, (eventType, filename) =&gt; {\n  if (filename)\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_fs.fswatcher_change
fs.FSWatcher change	R	fs.FSWatcher.change										http://nodejs.org/api/all.html#all_fs.fswatcher_change
fs FSWatcher change	R	fs.FSWatcher change										http://nodejs.org/api/all.html#all_fs fswatcher_change
fs.FSWatcher.error	A										<section class="prog__container"><p id="obj.desc">Emitted when an error occurs.\n</section>	http://nodejs.org/api/all.html#all_fs.fswatcher_error
fs.FSWatcher error	R	fs.FSWatcher.error										http://nodejs.org/api/all.html#all_fs.fswatcher_error
fs FSWatcher error	R	fs.FSWatcher error										http://nodejs.org/api/all.html#all_fs fswatcher_error
fs.ReadStream	A										<section class="prog__container"><p id="obj.desc"><code>ReadStream</code> is a Readable Stream.\n</section>	http://nodejs.org/api/all.html#all_fs.readstream
fs ReadStream	R	fs.ReadStream										http://nodejs.org/api/all.html#all_fs readstream
fs.ReadStream.bytesRead	A										<section class="prog__container"><p id="obj.desc">The number of bytes read so far.\n</section>	http://nodejs.org/api/all.html#all_fs.readstream_bytesread
fs.ReadStream bytesRead	R	fs.ReadStream.bytesRead										http://nodejs.org/api/all.html#all_fs.readstream_bytesread
fs ReadStream bytesRead	R	fs.ReadStream bytesRead										http://nodejs.org/api/all.html#all_fs readstream_bytesread
fs.ReadStream.path	A										<section class="prog__container"><p id="obj.desc">The path to the file the stream is reading from as specified in the first\nargument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then\n<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>readStream.path</code> will be a <code>Buffer</code>.\n</section>	http://nodejs.org/api/all.html#all_fs.readstream_path
fs.ReadStream path	R	fs.ReadStream.path										http://nodejs.org/api/all.html#all_fs.readstream_path
fs ReadStream path	R	fs.ReadStream path										http://nodejs.org/api/all.html#all_fs readstream_path
fs.ReadStream.open	A										<section class="prog__container"><p id="obj.desc">Emitted when the ReadStream&#39;s file is opened.\n</section>	http://nodejs.org/api/all.html#all_fs.readstream_open
fs.ReadStream open	R	fs.ReadStream.open										http://nodejs.org/api/all.html#all_fs.readstream_open
fs ReadStream open	R	fs.ReadStream open										http://nodejs.org/api/all.html#all_fs readstream_open
fs.ReadStream.close	A										<section class="prog__container"><p id="obj.desc">Emitted when the <code>ReadStream</code>&#39;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.\n</section>	http://nodejs.org/api/all.html#all_fs.readstream_close
fs.ReadStream close	R	fs.ReadStream.close										http://nodejs.org/api/all.html#all_fs.readstream_close
fs ReadStream close	R	fs.ReadStream close										http://nodejs.org/api/all.html#all_fs readstream_close
fs.Stats	A										<section class="prog__container"><p id="obj.desc">Objects returned from <code>fs.stat()</code>, <code>fs.lstat()</code> and <code>fs.fstat()</code> and their\nsynchronous counterparts are of this type.\n<ul>\n<li><code>stats.isFile()</code></li>\n<li><code>stats.isDirectory()</code></li>\n<li><code>stats.isBlockDevice()</code></li>\n<li><code>stats.isCharacterDevice()</code></li>\n<li><code>stats.isSymbolicLink()</code> (only valid with <code>fs.lstat()</code>)</li>\n<li><code>stats.isFIFO()</code></li>\n<li><code>stats.isSocket()</code></li>\n</ul>\nFor a regular file <code>util.inspect(stats)</code> would return a string very\nsimilar to this:\n<pre><code class="lang-js">{\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\n}\n</code></pre>\nPlease note that <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> are\ninstances of <code>Date</code> object and to compare the values of\nthese objects you should use appropriate methods. For most general\nuses <code>getTime()</code> will return the number of\nmilliseconds elapsed since <em>1 January 1970 00:00:00 UTC</em> and this\ninteger should be sufficient for any comparison, however there are\nadditional methods which can be used for displaying fuzzy information.\nMore details can be found in the MDN JavaScript Reference\npage.\n</section>	http://nodejs.org/api/all.html#all_fs.stats
fs Stats	R	fs.Stats										http://nodejs.org/api/all.html#all_fs stats
fs.WriteStream	A										<section class="prog__container"><p id="obj.desc"><code>WriteStream</code> is a Writable Stream.\n</section>	http://nodejs.org/api/all.html#all_fs.writestream
fs WriteStream	R	fs.WriteStream										http://nodejs.org/api/all.html#all_fs writestream
fs.WriteStream.bytesWritten	A										<section class="prog__container"><p id="obj.desc">The number of bytes written so far. Does not include data that is still queued\nfor writing.\n</section>	http://nodejs.org/api/all.html#all_fs.writestream_byteswritten
fs.WriteStream bytesWritten	R	fs.WriteStream.bytesWritten										http://nodejs.org/api/all.html#all_fs.writestream_byteswritten
fs WriteStream bytesWritten	R	fs.WriteStream bytesWritten										http://nodejs.org/api/all.html#all_fs writestream_byteswritten
fs.WriteStream.path	A										<section class="prog__container"><p id="obj.desc">The path to the file the stream is writing to as specified in the first\nargument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then\n<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>writeStream.path</code> will be a <code>Buffer</code>.\n</section>	http://nodejs.org/api/all.html#all_fs.writestream_path
fs.WriteStream path	R	fs.WriteStream.path										http://nodejs.org/api/all.html#all_fs.writestream_path
fs WriteStream path	R	fs.WriteStream path										http://nodejs.org/api/all.html#all_fs writestream_path
fs.WriteStream.open	A										<section class="prog__container"><p id="obj.desc">Emitted when the WriteStream&#39;s file is opened.\n</section>	http://nodejs.org/api/all.html#all_fs.writestream_open
fs.WriteStream open	R	fs.WriteStream.open										http://nodejs.org/api/all.html#all_fs.writestream_open
fs WriteStream open	R	fs.WriteStream open										http://nodejs.org/api/all.html#all_fs writestream_open
fs.WriteStream.close	A										<section class="prog__container"><p id="obj.desc">Emitted when the <code>WriteStream</code>&#39;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.\n</section>	http://nodejs.org/api/all.html#all_fs.writestream_close
fs.WriteStream close	R	fs.WriteStream.close										http://nodejs.org/api/all.html#all_fs.writestream_close
fs WriteStream close	R	fs.WriteStream close										http://nodejs.org/api/all.html#all_fs writestream_close
http	A										<section class="prog__container"><p id="obj.desc">To use the HTTP server and client one must <code>require(&#39;http&#39;)</code>.\nThe HTTP interfaces in Node.js are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.\nHTTP message headers are represented by an object like this:\n<pre><code class="lang-js">{ &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;host&#39;: &#39;mysite.com&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }\n</code></pre>\nKeys are lowercased. Values are not modified.\nIn order to support the full spectrum of possible HTTP applications, Node.js&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.\nSee <code>message.headers</code> for details on how duplicate headers are handled.\nThe raw headers as they were received are retained in the <code>rawHeaders</code>\nproperty, which is an array of <code>[key, value, key2, value2, ...]</code>.  For\nexample, the previous message header object might have a <code>rawHeaders</code>\nlist like the following:\n<pre><code class="lang-js">[ &#39;ConTent-Length&#39;, &#39;123456&#39;,\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\n  &#39;content-type&#39;, &#39;text/plain&#39;,\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\n  &#39;Host&#39;, &#39;mysite.com&#39;,\n  &#39;accepT&#39;, &#39;*/*&#39; ]\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_http
http.createServer	A										<section class="prog__container"><p id="obj.desc">Returns a new instance of <code>http.Server</code>.\nThe <code>requestListener</code> is a function which is automatically\nadded to the <code>&#39;request&#39;</code> event.\n<pre><code>http.createServer([requestListener])</code></pre></section>	http://nodejs.org/api/all.html#all_http_createserver_requestlistener
http createServer	R	http.createServer										http://nodejs.org/api/all.html#all_http_createserver_requestlistener
http.get	A										<section class="prog__container"><p id="obj.desc">Since most requests are GET requests without bodies, Node.js provides this\nconvenience method. The only difference between this method and\n<code>http.request()</code> is that it sets the method to GET and calls <code>req.end()</code>\nautomatically. Note that response data must be consumed in the callback\nfor reasons stated in <code>http.ClientRequest</code> section.\nThe <code>callback</code> is invoked with a single argument that is an instance of\n<code>http.IncomingMessage</code>\nJSON Fetching Example:\n<pre><code class="lang-js">http.get(&#39;http://nodejs.org/dist/index.json&#39;, (res) =&gt; {\n  const statusCode = res.statusCode;\n  const contentType = res.headers[&#39;content-type&#39;];\n\n  let error;\n  if (statusCode !== 200) {\n    error = new Error(`Request Failed.\n` +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\/json/.test(contentType)) {\n    error = new Error(`Invalid content-type.\n` +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.log(error.message);\n    // consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding(&#39;utf8&#39;);\n  let rawData = &#39;&#39;;\n  res.on(&#39;data&#39;, (chunk) =&gt; rawData += chunk);\n  res.on(&#39;end&#39;, () =&gt; {\n    try {\n      let parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.log(e.message);\n    }\n  });\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.log(`Got error: ${e.message}`);\n});\n</code></pre>\n<pre><code>http.get(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http_get_options_callback
http get	R	http.get										http://nodejs.org/api/all.html#all_http_get_options_callback
http.request	A										<section class="prog__container"><p id="obj.desc">Node.js maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.\n<code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <code>url.parse()</code>.\nThe optional <code>callback</code> parameter will be added as a one time listener for\nthe <code>&#39;response&#39;</code> event.\n<code>http.request()</code> returns an instance of the <code>http.ClientRequest</code>\nclass. The <code>ClientRequest</code> instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the <code>ClientRequest</code> object.\nExample:\n<pre><code class="lang-js">var postData = querystring.stringify({\n  &#39;msg&#39; : &#39;Hello World!&#39;\n});\n\nvar options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;/upload&#39;,\n  method: &#39;POST&#39;,\n  headers: {\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\n    &#39;Content-Length&#39;: Buffer.byteLength(postData)\n  }\n};\n\nvar req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;No more data in response.&#39;);\n  });\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.log(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n</code></pre>\nNote that in the example <code>req.end()</code> was called. With <code>http.request()</code> one\nmust always call <code>req.end()</code> to signify that you&#39;re done with the request -\neven if there is no data being written to the request body.\nIf any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an <code>&#39;error&#39;</code> event is emitted\non the returned request object. As with all <code>&#39;error&#39;</code> events, if no listeners\nare registered the error will be thrown.\nThere are a few special headers that should be noted.\n<ul>\n<li>Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to\nthe server should be persisted until the next request.\n</li>\n<li>Sending a &#39;Content-length&#39; header will disable the default chunked encoding.\n</li>\n<li>Sending an &#39;Expect&#39; header will immediately send the request headers.\nUsually, when sending &#39;Expect: 100-continue&#39;, you should both set a timeout\nand listen for the <code>&#39;continue&#39;</code> event. See RFC2616 Section 8.2.3 for more\ninformation.\n</li>\n<li>Sending an Authorization header will override using the <code>auth</code> option\nto compute basic authentication.\n</li>\n</ul>\n<!-- [end-include:http.md] -->\n<!-- [start-include:https.md] -->\n<pre><code>http.request(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http_request_options_callback
http request	R	http.request										http://nodejs.org/api/all.html#all_http_request_options_callback
http.METHODS	A										<section class="prog__container"><p id="obj.desc">A list of the HTTP methods that are supported by the parser.\n</section>	http://nodejs.org/api/all.html#all_http_methods
http METHODS	R	http.METHODS										http://nodejs.org/api/all.html#all_http_methods
http.STATUS_CODES	A										<section class="prog__container"><p id="obj.desc">A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example, <code>http.STATUS_CODES[404] === &#39;Not\nFound&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_http_status_codes
http STATUS_CODES	R	http.STATUS_CODES										http://nodejs.org/api/all.html#all_http_status_codes
http.globalAgent	A										<section class="prog__container"><p id="obj.desc">Global instance of Agent which is used as the default for all HTTP client\nrequests.\n</section>	http://nodejs.org/api/all.html#all_http_globalagent
http globalAgent	R	http.globalAgent										http://nodejs.org/api/all.html#all_http_globalagent
http.Agent	A										<section class="prog__container"><p id="obj.desc">The HTTP Agent is used for pooling sockets used in HTTP client\nrequests.\nThe HTTP Agent also defaults client requests to using\n<code>Connection: keep-alive</code>. If no pending HTTP requests are waiting on a\nsocket to become free the socket is closed. This means that Node.js&#39;s\npool has the benefit of keep-alive when under load but still does not\nrequire developers to manually close the HTTP clients using\nKeepAlive.\nIf you opt into using HTTP KeepAlive, you can create an Agent object\nwith that flag set to <code>true</code>.  (See the constructor options.)\nThen, the Agent will keep unused sockets in a pool for later use.  They\nwill be explicitly marked so as to not keep the Node.js process running.\nHowever, it is still a good idea to explicitly <code>destroy()</code> KeepAlive\nagents when they are no longer in use, so that the Sockets will be shut\ndown.\nSockets are removed from the agent&#39;s pool when the socket emits either\na <code>&#39;close&#39;</code> event or a special <code>&#39;agentRemove&#39;</code> event. This means that if\nyou intend to keep one HTTP request open for a long time and don&#39;t\nwant it to stay in the pool you can do something along the lines of:\n<pre><code class="lang-js">http.get(options, (res) =&gt; {\n  // Do stuff\n}).on(&#39;socket&#39;, (socket) =&gt; {\n  socket.emit(&#39;agentRemove&#39;);\n});\n</code></pre>\nAlternatively, you could just opt out of pooling entirely using\n<code>agent:false</code>:\n<pre><code class="lang-js">http.get({\n  hostname: &#39;localhost&#39;,\n  port: 80,\n  path: &#39;/&#39;,\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_http.agent_options
http Agent	R	http.Agent										http://nodejs.org/api/all.html#all_http agent_options
http.Agent.createConnection	A										<section class="prog__container"><p id="obj.desc">Produces a socket/stream to be used for HTTP requests.\nBy default, this function is the same as <code>net.createConnection()</code>. However,\ncustom Agents may override this method in case greater flexibility is desired.\nA socket/stream can be supplied in one of two ways: by returning the\nsocket/stream from this function, or by passing the socket/stream to <code>callback</code>.\n<code>callback</code> has a signature of <code>(err, stream)</code>.\n<pre><code>agent.createConnection(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_createconnection_options_callback
http.Agent createConnection	R	http.Agent.createConnection										http://nodejs.org/api/all.html#all_http.agent_createconnection_options_callback
http Agent createConnection	R	http.Agent createConnection										http://nodejs.org/api/all.html#all_http agent_createconnection_options_callback
http.Agent.destroy	A										<section class="prog__container"><p id="obj.desc">Destroy any sockets that are currently in use by the agent.\nIt is usually not necessary to do this.  However, if you are using an\nagent with KeepAlive enabled, then it is best to explicitly shut down\nthe agent when you know that it will no longer be used.  Otherwise,\nsockets may hang open for quite a long time before the server\nterminates them.\n<pre><code>agent.destroy()</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_destroy
http.Agent destroy	R	http.Agent.destroy										http://nodejs.org/api/all.html#all_http.agent_destroy
http Agent destroy	R	http.Agent destroy										http://nodejs.org/api/all.html#all_http agent_destroy
http.Agent.getName	A										<section class="prog__container"><p id="obj.desc">Get a unique name for a set of request options, to determine whether a\nconnection can be reused.  In the http agent, this returns\n<code>host:port:localAddress</code>.  In the https agent, the name includes the\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\nsocket reusability.\n<pre><code>agent.getName(options)</code></pre></section>	http://nodejs.org/api/all.html#all_http.agent_getname_options
http.Agent getName	R	http.Agent.getName										http://nodejs.org/api/all.html#all_http.agent_getname_options
http Agent getName	R	http.Agent getName										http://nodejs.org/api/all.html#all_http agent_getname_options
http.Agent.freeSockets	A										<section class="prog__container"><p id="obj.desc">An object which contains arrays of sockets currently awaiting use by\nthe Agent when HTTP KeepAlive is used.  Do not modify.\n</section>	http://nodejs.org/api/all.html#all_http.agent_freesockets
http.Agent freeSockets	R	http.Agent.freeSockets										http://nodejs.org/api/all.html#all_http.agent_freesockets
http Agent freeSockets	R	http.Agent freeSockets										http://nodejs.org/api/all.html#all_http agent_freesockets
http.Agent.maxFreeSockets	A										<section class="prog__container"><p id="obj.desc">By default set to 256.  For Agents supporting HTTP KeepAlive, this\nsets the maximum number of sockets that will be left open in the free\nstate.\n</section>	http://nodejs.org/api/all.html#all_http.agent_maxfreesockets
http.Agent maxFreeSockets	R	http.Agent.maxFreeSockets										http://nodejs.org/api/all.html#all_http.agent_maxfreesockets
http Agent maxFreeSockets	R	http.Agent maxFreeSockets										http://nodejs.org/api/all.html#all_http agent_maxfreesockets
http.Agent.maxSockets	A										<section class="prog__container"><p id="obj.desc">By default set to Infinity. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is either a &#39;host:port&#39; or\n&#39;host:port:localAddress&#39; combination.\n</section>	http://nodejs.org/api/all.html#all_http.agent_maxsockets
http.Agent maxSockets	R	http.Agent.maxSockets										http://nodejs.org/api/all.html#all_http.agent_maxsockets
http Agent maxSockets	R	http.Agent maxSockets										http://nodejs.org/api/all.html#all_http agent_maxsockets
http.Agent.requests	A										<section class="prog__container"><p id="obj.desc">An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.\n</section>	http://nodejs.org/api/all.html#all_http.agent_requests
http.Agent requests	R	http.Agent.requests										http://nodejs.org/api/all.html#all_http.agent_requests
http Agent requests	R	http.Agent requests										http://nodejs.org/api/all.html#all_http agent_requests
http.Agent.sockets	A										<section class="prog__container"><p id="obj.desc">An object which contains arrays of sockets currently in use by the\nAgent.  Do not modify.\n</section>	http://nodejs.org/api/all.html#all_http.agent_sockets
http.Agent sockets	R	http.Agent.sockets										http://nodejs.org/api/all.html#all_http.agent_sockets
http Agent sockets	R	http.Agent sockets										http://nodejs.org/api/all.html#all_http agent_sockets
http.ClientRequest	A										<section class="prog__container"><p id="obj.desc">This object is created internally and returned from <code>http.request()</code>.  It\nrepresents an <em>in-progress</em> request whose header has already been queued.  The\nheader is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,\n<code>removeHeader(name)</code> API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.\nTo get the response, add a listener for <code>&#39;response&#39;</code> to the request object.\n<code>&#39;response&#39;</code> will be emitted from the request object when the response\nheaders have been received.  The <code>&#39;response&#39;</code> event is executed with one\nargument which is an instance of <code>http.IncomingMessage</code>.\nDuring the <code>&#39;response&#39;</code> event, one can add listeners to the\nresponse object; particularly to listen for the <code>&#39;data&#39;</code> event.\nIf no <code>&#39;response&#39;</code> handler is added, then the response will be\nentirely discarded.  However, if you add a <code>&#39;response&#39;</code> event handler,\nthen you <strong>must</strong> consume the data from the response object, either by\ncalling <code>response.read()</code> whenever there is a <code>&#39;readable&#39;</code> event, or\nby adding a <code>&#39;data&#39;</code> handler, or by calling the <code>.resume()</code> method.\nUntil the data is consumed, the <code>&#39;end&#39;</code> event will not fire.  Also, until\nthe data is read it will consume memory that can eventually lead to a\n&#39;process out of memory&#39; error.\nNote: Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\nThe request implements the Writable Stream interface. This is an\n<code>EventEmitter</code> with the following events:\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest
http ClientRequest	R	http.ClientRequest										http://nodejs.org/api/all.html#all_http clientrequest
http.ClientRequest.abort	A										<section class="prog__container"><p id="obj.desc">Marks the request as aborting. Calling this will cause remaining data\nin the response to be dropped and the socket to be destroyed.\n<pre><code>request.abort()</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_abort
http.ClientRequest abort	R	http.ClientRequest.abort										http://nodejs.org/api/all.html#all_http.clientrequest_abort
http ClientRequest abort	R	http.ClientRequest abort										http://nodejs.org/api/all.html#all_http clientrequest_abort
http.ClientRequest.end	A										<section class="prog__container"><p id="obj.desc">Finishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating <code>&#39;0\r\n\r\n&#39;</code>.\nIf <code>data</code> is specified, it is equivalent to calling\n<code>response.write(data, encoding)</code> followed by <code>request.end(callback)</code>.\nIf <code>callback</code> is specified, it will be called when the request stream\nis finished.\n<pre><code>request.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_end_data_encoding_callback
http.ClientRequest end	R	http.ClientRequest.end										http://nodejs.org/api/all.html#all_http.clientrequest_end_data_encoding_callback
http ClientRequest end	R	http.ClientRequest end										http://nodejs.org/api/all.html#all_http clientrequest_end_data_encoding_callback
http.ClientRequest.flushHeaders	A										<section class="prog__container"><p id="obj.desc">Flush the request headers.\nFor efficiency reasons, Node.js normally buffers the request headers until you\ncall <code>request.end()</code> or write the first chunk of request data.  It then tries\nhard to pack the request headers and data into a single TCP packet.\nThat&#39;s usually what you want (it saves a TCP round-trip) but not when the first\ndata isn&#39;t sent until possibly much later.  <code>request.flushHeaders()</code> lets you bypass\nthe optimization and kickstart the request.\n<pre><code>request.flushHeaders()</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_flushheaders
http.ClientRequest flushHeaders	R	http.ClientRequest.flushHeaders										http://nodejs.org/api/all.html#all_http.clientrequest_flushheaders
http ClientRequest flushHeaders	R	http.ClientRequest flushHeaders										http://nodejs.org/api/all.html#all_http clientrequest_flushheaders
http.ClientRequest.setNoDelay	A										<section class="prog__container"><p id="obj.desc">Once a socket is assigned to this request and is connected\n<code>socket.setNoDelay()</code> will be called.\n<pre><code>request.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_setnodelay_nodelay
http.ClientRequest setNoDelay	R	http.ClientRequest.setNoDelay										http://nodejs.org/api/all.html#all_http.clientrequest_setnodelay_nodelay
http ClientRequest setNoDelay	R	http.ClientRequest setNoDelay										http://nodejs.org/api/all.html#all_http clientrequest_setnodelay_nodelay
http.ClientRequest.setSocketKeepAlive	A										<section class="prog__container"><p id="obj.desc">Once a socket is assigned to this request and is connected\n<code>socket.setKeepAlive()</code> will be called.\n<pre><code>request.setSocketKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_setsocketkeepalive_enable_initialdelay
http.ClientRequest setSocketKeepAlive	R	http.ClientRequest.setSocketKeepAlive										http://nodejs.org/api/all.html#all_http.clientrequest_setsocketkeepalive_enable_initialdelay
http ClientRequest setSocketKeepAlive	R	http.ClientRequest setSocketKeepAlive										http://nodejs.org/api/all.html#all_http clientrequest_setsocketkeepalive_enable_initialdelay
http.ClientRequest.setTimeout	A										<section class="prog__container"><p id="obj.desc">Once a socket is assigned to this request and is connected\n<code>socket.setTimeout()</code> will be called.\nReturns <code>request</code>.\n<pre><code>request.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_settimeout_timeout_callback
http.ClientRequest setTimeout	R	http.ClientRequest.setTimeout										http://nodejs.org/api/all.html#all_http.clientrequest_settimeout_timeout_callback
http ClientRequest setTimeout	R	http.ClientRequest setTimeout										http://nodejs.org/api/all.html#all_http clientrequest_settimeout_timeout_callback
http.ClientRequest.write	A										<section class="prog__container"><p id="obj.desc">Sends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n<code>[&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]</code> header line when\ncreating the request.\nThe <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.\nDefaults to <code>&#39;utf8&#39;</code>.\nThe <code>callback</code> argument is optional and will be called when this chunk of data\nis flushed.\nReturns <code>request</code>.\n<pre><code>request.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.clientrequest_write_chunk_encoding_callback
http.ClientRequest write	R	http.ClientRequest.write										http://nodejs.org/api/all.html#all_http.clientrequest_write_chunk_encoding_callback
http ClientRequest write	R	http.ClientRequest write										http://nodejs.org/api/all.html#all_http clientrequest_write_chunk_encoding_callback
http.ClientRequest.abort	A										<section class="prog__container"><p id="obj.desc">Emitted when the request has been aborted by the client. This event is only\nemitted on the first call to <code>abort()</code>.\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_abort
http.ClientRequest.aborted	A										<section class="prog__container"><p id="obj.desc">Emitted when the request has been aborted by the server and the network\nsocket has closed.\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_aborted
http.ClientRequest aborted	R	http.ClientRequest.aborted										http://nodejs.org/api/all.html#all_http.clientrequest_aborted
http ClientRequest aborted	R	http.ClientRequest aborted										http://nodejs.org/api/all.html#all_http clientrequest_aborted
http.ClientRequest.connect	A										<section class="prog__container"><p id="obj.desc">Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this\nevent isn&#39;t being listened for, clients receiving a <code>CONNECT</code> method will have\ntheir connections closed.\nA client and server pair that shows you how to listen for the <code>&#39;connect&#39;</code> event:\n<pre><code class="lang-js">const http = require(&#39;http&#39;);\nconst net = require(&#39;net&#39;);\nconst url = require(&#39;url&#39;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nproxy.on(&#39;connect&#39;, (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  var srvUrl = url.parse(`http://${req.url}`);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\r\n&#39; +\n                    &#39;Proxy-agent: Node.js-Proxy\r\n&#39; +\n                    &#39;\r\n&#39;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    method: &#39;CONNECT&#39;,\n    path: &#39;www.google.com:80&#39;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;connect&#39;, (res, socket, head) =&gt; {\n    console.log(&#39;got connected!&#39;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&#39;GET / HTTP/1.1\r\n&#39; +\n                 &#39;Host: www.google.com:80\r\n&#39; +\n                 &#39;Connection: close\r\n&#39; +\n                 &#39;\r\n&#39;);\n    socket.on(&#39;data&#39;, (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on(&#39;end&#39;, () =&gt; {\n      proxy.close();\n    });\n  });\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_connect
http.ClientRequest connect	R	http.ClientRequest.connect										http://nodejs.org/api/all.html#all_http.clientrequest_connect
http ClientRequest connect	R	http.ClientRequest connect										http://nodejs.org/api/all.html#all_http clientrequest_connect
http.ClientRequest.continue	A										<section class="prog__container"><p id="obj.desc">Emitted when the server sends a &#39;100 Continue&#39; HTTP response, usually because\nthe request contained &#39;Expect: 100-continue&#39;. This is an instruction that\nthe client should send the request body.\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_continue
http.ClientRequest continue	R	http.ClientRequest.continue										http://nodejs.org/api/all.html#all_http.clientrequest_continue
http ClientRequest continue	R	http.ClientRequest continue										http://nodejs.org/api/all.html#all_http clientrequest_continue
http.ClientRequest.response	A										<section class="prog__container"><p id="obj.desc">Emitted when a response is received to this request. This event is emitted only\nonce.\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_response
http.ClientRequest response	R	http.ClientRequest.response										http://nodejs.org/api/all.html#all_http.clientrequest_response
http ClientRequest response	R	http.ClientRequest response										http://nodejs.org/api/all.html#all_http clientrequest_response
http.ClientRequest.socket	A										<section class="prog__container"><p id="obj.desc">Emitted after a socket is assigned to this request.\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_socket
http.ClientRequest socket	R	http.ClientRequest.socket										http://nodejs.org/api/all.html#all_http.clientrequest_socket
http ClientRequest socket	R	http.ClientRequest socket										http://nodejs.org/api/all.html#all_http clientrequest_socket
http.ClientRequest.upgrade	A										<section class="prog__container"><p id="obj.desc">Emitted each time a server responds to a request with an upgrade. If this\nevent isn&#39;t being listened for, clients receiving an upgrade header will have\ntheir connections closed.\nA client server pair that show you how to listen for the <code>&#39;upgrade&#39;</code> event.\n<pre><code class="lang-js">const http = require(&#39;http&#39;);\n\n// Create an HTTP server\nvar srv = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nsrv.on(&#39;upgrade&#39;, (req, socket, head) =&gt; {\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\r\n&#39; +\n               &#39;Upgrade: WebSocket\r\n&#39; +\n               &#39;Connection: Upgrade\r\n&#39; +\n               &#39;\r\n&#39;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    headers: {\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\n      &#39;Upgrade&#39;: &#39;websocket&#39;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;upgrade&#39;, (res, socket, upgradeHead) =&gt; {\n    console.log(&#39;got upgraded!&#39;);\n    socket.end();\n    process.exit(0);\n  });\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_http.clientrequest_upgrade
http.ClientRequest upgrade	R	http.ClientRequest.upgrade										http://nodejs.org/api/all.html#all_http.clientrequest_upgrade
http ClientRequest upgrade	R	http.ClientRequest upgrade										http://nodejs.org/api/all.html#all_http clientrequest_upgrade
http.Server	A										<section class="prog__container"><p id="obj.desc">This class inherits from <code>net.Server</code> and has the following additional events:\n</section>	http://nodejs.org/api/all.html#all_http.server
http Server	R	http.Server										http://nodejs.org/api/all.html#all_http server
http.Server.close	A										<section class="prog__container"><p id="obj.desc">Stops the server from accepting new connections.  See <code>net.Server.close()</code>.\n<pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_close_callback
http.Server close	R	http.Server.close										http://nodejs.org/api/all.html#all_http.server_close_callback
http Server close	R	http.Server close										http://nodejs.org/api/all.html#all_http server_close_callback
http.Server.listen	A										<section class="prog__container"><p id="obj.desc">The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.\nThis will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.\nListening on a file descriptor is not supported on Windows.\nThis function is asynchronous. <code>callback</code> will be added as a listener for the\n<code>&#39;listening&#39;</code> event. See also <code>net.Server.listen()</code>.\nReturns <code>server</code>.\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen(handle[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_handle_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_handle_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_handle_callback
http.Server.listen	A										<section class="prog__container"><p id="obj.desc">Start a UNIX socket server listening for connections on the given <code>path</code>.\nThis function is asynchronous. <code>callback</code> will be added as a listener for the\n<code>&#39;listening&#39;</code> event.  See also <code>net.Server.listen(path)</code>.\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_path_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_path_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_path_callback
http.Server.listen	A										<section class="prog__container"><p id="obj.desc">Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise.\nOmit the port argument, or use a port value of <code>0</code>, to have the operating system\nassign a random port, which can be retrieved by using <code>server.address().port</code>\nafter the <code>&#39;listening&#39;</code> event has been emitted.\nTo listen to a unix socket, supply a filename instead of port and hostname.\n<code>backlog</code> is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on linux. The default value of this\nparameter is 511 (not 512).\nThis function is asynchronous. <code>callback</code> will be added as a listener for the\n<code>&#39;listening&#39;</code> event.  See also <code>net.Server.listen(port)</code>.\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_listen_port_hostname_backlog_callback
http.Server listen	R	http.Server.listen										http://nodejs.org/api/all.html#all_http.server_listen_port_hostname_backlog_callback
http Server listen	R	http.Server listen										http://nodejs.org/api/all.html#all_http server_listen_port_hostname_backlog_callback
http.Server.setTimeout	A										<section class="prog__container"><p id="obj.desc">Sets the timeout value for sockets, and emits a <code>&#39;timeout&#39;</code> event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.\nIf there is a <code>&#39;timeout&#39;</code> event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.\nBy default, the Server&#39;s timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out.  However, if you assign a\ncallback to the Server&#39;s <code>&#39;timeout&#39;</code> event, then you are responsible\nfor handling socket timeouts.\nReturns <code>server</code>.\n<pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.server_settimeout_msecs_callback
http.Server setTimeout	R	http.Server.setTimeout										http://nodejs.org/api/all.html#all_http.server_settimeout_msecs_callback
http Server setTimeout	R	http.Server setTimeout										http://nodejs.org/api/all.html#all_http server_settimeout_msecs_callback
http.Server.listening	A										<section class="prog__container"><p id="obj.desc">A Boolean indicating whether or not the server is listening for\nconnections.\n</section>	http://nodejs.org/api/all.html#all_http.server_listening
http.Server listening	R	http.Server.listening										http://nodejs.org/api/all.html#all_http.server_listening
http Server listening	R	http.Server listening										http://nodejs.org/api/all.html#all_http server_listening
http.Server.maxHeadersCount	A										<section class="prog__container"><p id="obj.desc">Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.\n</section>	http://nodejs.org/api/all.html#all_http.server_maxheaderscount
http.Server maxHeadersCount	R	http.Server.maxHeadersCount										http://nodejs.org/api/all.html#all_http.server_maxheaderscount
http Server maxHeadersCount	R	http.Server maxHeadersCount										http://nodejs.org/api/all.html#all_http server_maxheaderscount
http.Server.timeout	A										<section class="prog__container"><p id="obj.desc">The number of milliseconds of inactivity before a socket is presumed\nto have timed out.\nNote that the socket timeout logic is set up on connection, so\nchanging this value only affects <em>new</em> connections to the server, not\nany existing connections.\nSet to 0 to disable any kind of automatic timeout behavior on incoming\nconnections.\n</section>	http://nodejs.org/api/all.html#all_http.server_timeout
http.Server timeout	R	http.Server.timeout										http://nodejs.org/api/all.html#all_http.server_timeout
http Server timeout	R	http.Server timeout										http://nodejs.org/api/all.html#all_http server_timeout
http.Server.checkContinue	A										<section class="prog__container"><p id="obj.desc">Emitted each time a request with an HTTP <code>Expect: 100-continue</code> is received.\nIf this event isn&#39;t listened for, the server will automatically respond\nwith a <code>100 Continue</code> as appropriate.\nHandling this event involves calling <code>response.writeContinue()</code> if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g. 400 Bad Request) if the client should not continue to send the\nrequest body.\nNote that when this event is emitted and handled, the <code>&#39;request&#39;</code> event will\nnot be emitted.\n</section>	http://nodejs.org/api/all.html#all_http.server_checkcontinue
http.Server checkContinue	R	http.Server.checkContinue										http://nodejs.org/api/all.html#all_http.server_checkcontinue
http Server checkContinue	R	http.Server checkContinue										http://nodejs.org/api/all.html#all_http server_checkcontinue
http.Server.checkExpectation	A										<section class="prog__container"><p id="obj.desc">Emitted each time a request with an HTTP <code>Expect</code> header is received, where the\nvalue is not <code>100-continue</code>. If this event isn&#39;t listened for, the server will\nautomatically respond with a <code>417 Expectation Failed</code> as appropriate.\nNote that when this event is emitted and handled, the <code>&#39;request&#39;</code> event will\nnot be emitted.\n</section>	http://nodejs.org/api/all.html#all_http.server_checkexpectation
http.Server checkExpectation	R	http.Server.checkExpectation										http://nodejs.org/api/all.html#all_http.server_checkexpectation
http Server checkExpectation	R	http.Server checkExpectation										http://nodejs.org/api/all.html#all_http server_checkexpectation
http.Server.clientError	A										<section class="prog__container"><p id="obj.desc">If a client connection emits an <code>&#39;error&#39;</code> event, it will be forwarded here.\nListener of this event is responsible for closing/destroying the underlying\nsocket. For example, one may wish to more gracefully close the socket with an\nHTTP &#39;400 Bad Request&#39; response instead of abruptly severing the connection.\nDefault behavior is to destroy the socket immediately on malformed request.\n<code>socket</code> is the <code>net.Socket</code> object that the error originated from.\n<pre><code class="lang-js">const http = require(&#39;http&#39;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on(&#39;clientError&#39;, (err, socket) =&gt; {\n  socket.end(&#39;HTTP/1.1 400 Bad Request\r\n\r\n&#39;);\n});\nserver.listen(8000);\n</code></pre>\nWhen the <code>&#39;clientError&#39;</code> event occurs, there is no <code>request</code> or <code>response</code>\nobject, so any HTTP response sent, including response headers and payload,\n<em>must</em> be written directly to the <code>socket</code> object. Care must be taken to\nensure the response is a properly formatted HTTP response message.\n</section>	http://nodejs.org/api/all.html#all_http.server_clienterror
http.Server clientError	R	http.Server.clientError										http://nodejs.org/api/all.html#all_http.server_clienterror
http Server clientError	R	http.Server clientError										http://nodejs.org/api/all.html#all_http server_clienterror
http.Server.close	A										<section class="prog__container"><p id="obj.desc">Emitted when the server closes.\n</section>	http://nodejs.org/api/all.html#all_http.server_close
http.Server close	R	http.Server.close										http://nodejs.org/api/all.html#all_http.server_close
http Server close	R	http.Server close										http://nodejs.org/api/all.html#all_http server_close
http.Server.connect	A										<section class="prog__container"><p id="obj.desc">Emitted each time a client requests an HTTP <code>CONNECT</code> method. If this event isn&#39;t\nlistened for, then clients requesting a <code>CONNECT</code> method will have their\nconnections closed.\nAfter this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n</section>	http://nodejs.org/api/all.html#all_http.server_connect
http.Server connect	R	http.Server.connect										http://nodejs.org/api/all.html#all_http.server_connect
http Server connect	R	http.Server connect										http://nodejs.org/api/all.html#all_http server_connect
http.Server.connection	A										<section class="prog__container"><p id="obj.desc">When a new TCP stream is established. <code>socket</code> is an object of type\n<code>net.Socket</code>. Usually users will not want to access this event. In\nparticular, the socket will not emit <code>&#39;readable&#39;</code> events because of how\nthe protocol parser attaches to the socket. The <code>socket</code> can also be\naccessed at <code>request.connection</code>.\n</section>	http://nodejs.org/api/all.html#all_http.server_connection
http.Server connection	R	http.Server.connection										http://nodejs.org/api/all.html#all_http.server_connection
http Server connection	R	http.Server connection										http://nodejs.org/api/all.html#all_http server_connection
http.Server.request	A										<section class="prog__container"><p id="obj.desc">Emitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).\n</section>	http://nodejs.org/api/all.html#all_http.server_request
http.Server request	R	http.Server.request										http://nodejs.org/api/all.html#all_http.server_request
http Server request	R	http.Server request										http://nodejs.org/api/all.html#all_http server_request
http.Server.upgrade	A										<section class="prog__container"><p id="obj.desc">Emitted each time a client requests an HTTP upgrade. If this event isn&#39;t\nlistened for, then clients requesting an upgrade will have their connections\nclosed.\nAfter this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n</section>	http://nodejs.org/api/all.html#all_http.server_upgrade
http.Server upgrade	R	http.Server.upgrade										http://nodejs.org/api/all.html#all_http.server_upgrade
http Server upgrade	R	http.Server upgrade										http://nodejs.org/api/all.html#all_http server_upgrade
http.ServerResponse	A										<section class="prog__container"><p id="obj.desc">This object is created internally by an HTTP server--not by the user. It is\npassed as the second parameter to the <code>&#39;request&#39;</code> event.\nThe response implements, but does not inherit from, the Writable Stream\ninterface. This is an <code>EventEmitter</code> with the following events:\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse
http ServerResponse	R	http.ServerResponse										http://nodejs.org/api/all.html#all_http serverresponse
http.ServerResponse.addTrailers	A										<section class="prog__container"><p id="obj.desc">This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.\nTrailers will <strong>only</strong> be emitted if chunked encoding is used for the\nresponse; if it is not (e.g. if the request was HTTP/1.0), they will\nbe silently discarded.\nNote that HTTP requires the <code>Trailer</code> header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,\n<pre><code class="lang-js">response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\nresponse.write(fileData);\nresponse.addTrailers({&#39;Content-MD5&#39;: &#39;7895bf4b8828b55ceaf47747b4bca667&#39;});\nresponse.end();\n</code></pre>\nAttempting to set a header field name or value that contains invalid characters\nwill result in a <code>TypeError</code> being thrown.\n<pre><code>response.addTrailers(headers)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_addtrailers_headers
http.ServerResponse addTrailers	R	http.ServerResponse.addTrailers										http://nodejs.org/api/all.html#all_http.serverresponse_addtrailers_headers
http ServerResponse addTrailers	R	http.ServerResponse addTrailers										http://nodejs.org/api/all.html#all_http serverresponse_addtrailers_headers
http.ServerResponse.end	A										<section class="prog__container"><p id="obj.desc">This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.\nIf <code>data</code> is specified, it is equivalent to calling\n<code>response.write(data, encoding)</code> followed by <code>response.end(callback)</code>.\nIf <code>callback</code> is specified, it will be called when the response stream\nis finished.\n<pre><code>response.end([data][, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_end_data_encoding_callback
http.ServerResponse end	R	http.ServerResponse.end										http://nodejs.org/api/all.html#all_http.serverresponse_end_data_encoding_callback
http ServerResponse end	R	http.ServerResponse end										http://nodejs.org/api/all.html#all_http serverresponse_end_data_encoding_callback
http.ServerResponse.getHeader	A										<section class="prog__container"><p id="obj.desc">Reads out a header that&#39;s already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.\nExample:\n<pre><code class="lang-js">var contentType = response.getHeader(&#39;content-type&#39;);\n</code></pre>\n<pre><code>response.getHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_getheader_name
http.ServerResponse getHeader	R	http.ServerResponse.getHeader										http://nodejs.org/api/all.html#all_http.serverresponse_getheader_name
http ServerResponse getHeader	R	http.ServerResponse getHeader										http://nodejs.org/api/all.html#all_http serverresponse_getheader_name
http.ServerResponse.removeHeader	A										<section class="prog__container"><p id="obj.desc">Removes a header that&#39;s queued for implicit sending.\nExample:\n<pre><code class="lang-js">response.removeHeader(&#39;Content-Encoding&#39;);\n</code></pre>\n<pre><code>response.removeHeader(name)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_removeheader_name
http.ServerResponse removeHeader	R	http.ServerResponse.removeHeader										http://nodejs.org/api/all.html#all_http.serverresponse_removeheader_name
http ServerResponse removeHeader	R	http.ServerResponse removeHeader										http://nodejs.org/api/all.html#all_http serverresponse_removeheader_name
http.ServerResponse.setHeader	A										<section class="prog__container"><p id="obj.desc">Sets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.\nExample:\n<pre><code class="lang-js">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n</code></pre>\nor\n<pre><code class="lang-js">response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n</code></pre>\nAttempting to set a header field name or value that contains invalid characters\nwill result in a <code>TypeError</code> being thrown.\nWhen headers have been set with <code>response.setHeader()</code>, they will be merged with\nany headers passed to <code>response.writeHead()</code>, with the headers passed to\n<code>response.writeHead()</code> given precedence.\n<pre><code class="lang-js">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<pre><code>response.setHeader(name, value)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_setheader_name_value
http.ServerResponse setHeader	R	http.ServerResponse.setHeader										http://nodejs.org/api/all.html#all_http.serverresponse_setheader_name_value
http ServerResponse setHeader	R	http.ServerResponse setHeader										http://nodejs.org/api/all.html#all_http serverresponse_setheader_name_value
http.ServerResponse.setTimeout	A										<section class="prog__container"><p id="obj.desc">Sets the Socket&#39;s timeout value to <code>msecs</code>.  If a callback is\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\nthe response object.\nIf no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out.  If you\nassign a handler on the request, the response, or the server&#39;s\n<code>&#39;timeout&#39;</code> events, then it is your responsibility to handle timed out\nsockets.\nReturns <code>response</code>.\n<pre><code>response.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_settimeout_msecs_callback
http.ServerResponse setTimeout	R	http.ServerResponse.setTimeout										http://nodejs.org/api/all.html#all_http.serverresponse_settimeout_msecs_callback
http ServerResponse setTimeout	R	http.ServerResponse setTimeout										http://nodejs.org/api/all.html#all_http serverresponse_settimeout_msecs_callback
http.ServerResponse.write	A										<section class="prog__container"><p id="obj.desc">If this method is called and <code>response.writeHead()</code> has not been called,\nit will switch to implicit header mode and flush the implicit headers.\nThis sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.\n<code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the <code>encoding</code> is <code>&#39;utf8&#39;</code>. <code>callback</code> will be called when this chunk\nof data is flushed.\n<strong>Note</strong>: This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.\nThe first time <code>response.write()</code> is called, it will send the buffered\nheader information and the first body to the client. The second time\n<code>response.write()</code> is called, Node.js assumes you&#39;re going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.\nReturns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.\n<pre><code>response.write(chunk[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_write_chunk_encoding_callback
http.ServerResponse write	R	http.ServerResponse.write										http://nodejs.org/api/all.html#all_http.serverresponse_write_chunk_encoding_callback
http ServerResponse write	R	http.ServerResponse write										http://nodejs.org/api/all.html#all_http serverresponse_write_chunk_encoding_callback
http.ServerResponse.writeContinue	A										<section class="prog__container"><p id="obj.desc">Sends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the <code>&#39;checkContinue&#39;</code> event on <code>Server</code>.\n<pre><code>response.writeContinue()</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_writecontinue
http.ServerResponse writeContinue	R	http.ServerResponse.writeContinue										http://nodejs.org/api/all.html#all_http.serverresponse_writecontinue
http ServerResponse writeContinue	R	http.ServerResponse writeContinue										http://nodejs.org/api/all.html#all_http serverresponse_writecontinue
http.ServerResponse.writeHead	A										<section class="prog__container"><p id="obj.desc">Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.\nOptionally one can give a human-readable <code>statusMessage</code> as the second\nargument.\nExample:\n<pre><code class="lang-js">var body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\n</code></pre>\nThis method must only be called once on a message and it must\nbe called before <code>response.end()</code> is called.\nIf you call <code>response.write()</code> or <code>response.end()</code> before calling this,\nthe implicit/mutable headers will be calculated and call this function for you.\nWhen headers have been set with <code>response.setHeader()</code>, they will be merged with\nany headers passed to <code>response.writeHead()</code>, with the headers passed to\n<code>response.writeHead()</code> given precedence.\n<pre><code class="lang-js">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\nNote that Content-Length is given in bytes not characters. The above example\nworks because the string <code>&#39;hello world&#39;</code> contains only single byte characters.\nIf the body contains higher coded characters then <code>Buffer.byteLength()</code>\nshould be used to determine the number of bytes in a given encoding.\nAnd Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\nAttempting to set a header field name or value that contains invalid characters\nwill result in a <code>TypeError</code> being thrown.\n<pre><code>response.writeHead(statusCode[, statusMessage][, headers])</code></pre></section>	http://nodejs.org/api/all.html#all_http.serverresponse_writehead_statuscode_statusmessage_headers
http.ServerResponse writeHead	R	http.ServerResponse.writeHead										http://nodejs.org/api/all.html#all_http.serverresponse_writehead_statuscode_statusmessage_headers
http ServerResponse writeHead	R	http.ServerResponse writeHead										http://nodejs.org/api/all.html#all_http serverresponse_writehead_statuscode_statusmessage_headers
http.ServerResponse.finished	A										<section class="prog__container"><p id="obj.desc">Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <code>response.end()</code> executes, the value will be <code>true</code>.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_finished
http.ServerResponse finished	R	http.ServerResponse.finished										http://nodejs.org/api/all.html#all_http.serverresponse_finished
http ServerResponse finished	R	http.ServerResponse finished										http://nodejs.org/api/all.html#all_http serverresponse_finished
http.ServerResponse.headersSent	A										<section class="prog__container"><p id="obj.desc">Boolean (read-only). True if headers were sent, false otherwise.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_headerssent
http.ServerResponse headersSent	R	http.ServerResponse.headersSent										http://nodejs.org/api/all.html#all_http.serverresponse_headerssent
http ServerResponse headersSent	R	http.ServerResponse headersSent										http://nodejs.org/api/all.html#all_http serverresponse_headerssent
http.ServerResponse.sendDate	A										<section class="prog__container"><p id="obj.desc">When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.\nThis should only be disabled for testing; HTTP requires the Date header\nin responses.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_senddate
http.ServerResponse sendDate	R	http.ServerResponse.sendDate										http://nodejs.org/api/all.html#all_http.serverresponse_senddate
http ServerResponse sendDate	R	http.ServerResponse sendDate										http://nodejs.org/api/all.html#all_http serverresponse_senddate
http.ServerResponse.statusCode	A										<section class="prog__container"><p id="obj.desc">When using implicit headers (not calling <code>response.writeHead()</code> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.\nExample:\n<pre><code class="lang-js">response.statusCode = 404;\n</code></pre>\nAfter response header was sent to the client, this property indicates the\nstatus code which was sent out.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_statuscode
http.ServerResponse statusCode	R	http.ServerResponse.statusCode										http://nodejs.org/api/all.html#all_http.serverresponse_statuscode
http ServerResponse statusCode	R	http.ServerResponse statusCode										http://nodejs.org/api/all.html#all_http serverresponse_statuscode
http.ServerResponse.statusMessage	A										<section class="prog__container"><p id="obj.desc">When using implicit headers (not calling <code>response.writeHead()</code> explicitly), this property\ncontrols the status message that will be sent to the client when the headers get\nflushed. If this is left as <code>undefined</code> then the standard message for the status\ncode will be used.\nExample:\n<pre><code class="lang-js">response.statusMessage = &#39;Not found&#39;;\n</code></pre>\nAfter response header was sent to the client, this property indicates the\nstatus message which was sent out.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_statusmessage
http.ServerResponse statusMessage	R	http.ServerResponse.statusMessage										http://nodejs.org/api/all.html#all_http.serverresponse_statusmessage
http ServerResponse statusMessage	R	http.ServerResponse statusMessage										http://nodejs.org/api/all.html#all_http serverresponse_statusmessage
http.ServerResponse.close	A										<section class="prog__container"><p id="obj.desc">Indicates that the underlying connection was terminated before\n<code>response.end()</code> was called or able to flush.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_close
http.ServerResponse close	R	http.ServerResponse.close										http://nodejs.org/api/all.html#all_http.serverresponse_close
http ServerResponse close	R	http.ServerResponse close										http://nodejs.org/api/all.html#all_http serverresponse_close
http.ServerResponse.finish	A										<section class="prog__container"><p id="obj.desc">Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.\nAfter this event, no more events will be emitted on the response object.\n</section>	http://nodejs.org/api/all.html#all_http.serverresponse_finish
http.ServerResponse finish	R	http.ServerResponse.finish										http://nodejs.org/api/all.html#all_http.serverresponse_finish
http ServerResponse finish	R	http.ServerResponse finish										http://nodejs.org/api/all.html#all_http serverresponse_finish
http.IncomingMessage	A										<section class="prog__container"><p id="obj.desc">An <code>IncomingMessage</code> object is created by <code>http.Server</code> or\n<code>http.ClientRequest</code> and passed as the first argument to the <code>&#39;request&#39;</code>\nand <code>&#39;response&#39;</code> event respectively. It may be used to access response status,\nheaders and data.\nIt implements the Readable Stream interface, as well as the\nfollowing additional events, methods, and properties.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage
http IncomingMessage	R	http.IncomingMessage										http://nodejs.org/api/all.html#all_http incomingmessage
http.IncomingMessage.destroy	A										<section class="prog__container"><p id="obj.desc">Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>\nis provided, an <code>&#39;error&#39;</code> event is emitted and <code>error</code> is passed as an argument\nto any listeners on the event.\n<pre><code>message.destroy([error])</code></pre></section>	http://nodejs.org/api/all.html#all_http.incomingmessage_destroy_error
http.IncomingMessage destroy	R	http.IncomingMessage.destroy										http://nodejs.org/api/all.html#all_http.incomingmessage_destroy_error
http IncomingMessage destroy	R	http.IncomingMessage destroy										http://nodejs.org/api/all.html#all_http incomingmessage_destroy_error
http.IncomingMessage.setTimeout	A										<section class="prog__container"><p id="obj.desc">Calls <code>message.connection.setTimeout(msecs, callback)</code>.\nReturns <code>message</code>.\n<pre><code>message.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_http.incomingmessage_settimeout_msecs_callback
http.IncomingMessage setTimeout	R	http.IncomingMessage.setTimeout										http://nodejs.org/api/all.html#all_http.incomingmessage_settimeout_msecs_callback
http IncomingMessage setTimeout	R	http.IncomingMessage setTimeout										http://nodejs.org/api/all.html#all_http incomingmessage_settimeout_msecs_callback
http.IncomingMessage.headers	A										<section class="prog__container"><p id="obj.desc">The request/response headers object.\nKey-value pairs of header names and values. Header names are lower-cased.\nExample:\n<pre><code class="lang-js">// Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);\n</code></pre>\nDuplicates in raw headers are handled in the following ways, depending on the\nheader name:\n<ul>\n<li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>,\n<code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>,\n<code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>,\n<code>retry-after</code>, or <code>user-agent</code> are discarded.</li>\n<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>\n<li>For all other headers, the values are joined together with &#39;, &#39;.</li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_headers
http.IncomingMessage headers	R	http.IncomingMessage.headers										http://nodejs.org/api/all.html#all_http.incomingmessage_headers
http IncomingMessage headers	R	http.IncomingMessage headers										http://nodejs.org/api/all.html#all_http incomingmessage_headers
http.IncomingMessage.httpVersion	A										<section class="prog__container"><p id="obj.desc">In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either <code>&#39;1.1&#39;</code> or <code>&#39;1.0&#39;</code>.\nAlso <code>message.httpVersionMajor</code> is the first integer and\n<code>message.httpVersionMinor</code> is the second.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_httpversion
http.IncomingMessage httpVersion	R	http.IncomingMessage.httpVersion										http://nodejs.org/api/all.html#all_http.incomingmessage_httpversion
http IncomingMessage httpVersion	R	http.IncomingMessage httpVersion										http://nodejs.org/api/all.html#all_http incomingmessage_httpversion
http.IncomingMessage.method	A										<section class="prog__container"><p id="obj.desc"><strong>Only valid for request obtained from <code>http.Server</code>.</strong>\nThe request method as a string. Read only. Example:\n<code>&#39;GET&#39;</code>, <code>&#39;DELETE&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_method
http.IncomingMessage method	R	http.IncomingMessage.method										http://nodejs.org/api/all.html#all_http.incomingmessage_method
http IncomingMessage method	R	http.IncomingMessage method										http://nodejs.org/api/all.html#all_http incomingmessage_method
http.IncomingMessage.rawHeaders	A										<section class="prog__container"><p id="obj.desc">The raw request/response headers list exactly as they were received.\nNote that the keys and values are in the same list.  It is <em>not</em> a\nlist of tuples.  So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.\nHeader names are not lowercased, and duplicates are not merged.\n<pre><code class="lang-js">// Prints something like:\n//\n// [ &#39;user-agent&#39;,\n//   &#39;this is invalid because there can be only one&#39;,\n//   &#39;User-Agent&#39;,\n//   &#39;curl/7.22.0&#39;,\n//   &#39;Host&#39;,\n//   &#39;127.0.0.1:8000&#39;,\n//   &#39;ACCEPT&#39;,\n//   &#39;*/*&#39; ]\nconsole.log(request.rawHeaders);\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_rawheaders
http.IncomingMessage rawHeaders	R	http.IncomingMessage.rawHeaders										http://nodejs.org/api/all.html#all_http.incomingmessage_rawheaders
http IncomingMessage rawHeaders	R	http.IncomingMessage rawHeaders										http://nodejs.org/api/all.html#all_http incomingmessage_rawheaders
http.IncomingMessage.rawTrailers	A										<section class="prog__container"><p id="obj.desc">The raw request/response trailer keys and values exactly as they were\nreceived.  Only populated at the <code>&#39;end&#39;</code> event.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_rawtrailers
http.IncomingMessage rawTrailers	R	http.IncomingMessage.rawTrailers										http://nodejs.org/api/all.html#all_http.incomingmessage_rawtrailers
http IncomingMessage rawTrailers	R	http.IncomingMessage rawTrailers										http://nodejs.org/api/all.html#all_http incomingmessage_rawtrailers
http.IncomingMessage.statusCode	A										<section class="prog__container"><p id="obj.desc"><strong>Only valid for response obtained from <code>http.ClientRequest</code>.</strong>\nThe 3-digit HTTP response status code. E.G. <code>404</code>.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_statuscode
http.IncomingMessage statusCode	R	http.IncomingMessage.statusCode										http://nodejs.org/api/all.html#all_http.incomingmessage_statuscode
http IncomingMessage statusCode	R	http.IncomingMessage statusCode										http://nodejs.org/api/all.html#all_http incomingmessage_statuscode
http.IncomingMessage.statusMessage	A										<section class="prog__container"><p id="obj.desc"><strong>Only valid for response obtained from <code>http.ClientRequest</code>.</strong>\nThe HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server Error</code>.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_statusmessage
http.IncomingMessage statusMessage	R	http.IncomingMessage.statusMessage										http://nodejs.org/api/all.html#all_http.incomingmessage_statusmessage
http IncomingMessage statusMessage	R	http.IncomingMessage statusMessage										http://nodejs.org/api/all.html#all_http incomingmessage_statusmessage
http.IncomingMessage.socket	A										<section class="prog__container"><p id="obj.desc">The <code>net.Socket</code> object associated with the connection.\nWith HTTPS support, use <code>request.socket.getPeerCertificate()</code> to obtain the\nclient&#39;s authentication details.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_socket
http.IncomingMessage socket	R	http.IncomingMessage.socket										http://nodejs.org/api/all.html#all_http.incomingmessage_socket
http IncomingMessage socket	R	http.IncomingMessage socket										http://nodejs.org/api/all.html#all_http incomingmessage_socket
http.IncomingMessage.trailers	A										<section class="prog__container"><p id="obj.desc">The request/response trailers object. Only populated at the <code>&#39;end&#39;</code> event.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_trailers
http.IncomingMessage trailers	R	http.IncomingMessage.trailers										http://nodejs.org/api/all.html#all_http.incomingmessage_trailers
http IncomingMessage trailers	R	http.IncomingMessage trailers										http://nodejs.org/api/all.html#all_http incomingmessage_trailers
http.IncomingMessage.url	A										<section class="prog__container"><p id="obj.desc"><strong>Only valid for request obtained from <code>http.Server</code>.</strong>\nRequest URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:\n<pre><code class="lang-txt">GET /status?name=ryan HTTP/1.1\r\n\nAccept: text/plain\r\n\n\r\n\n</code></pre>\nThen <code>request.url</code> will be:\n<pre><code class="lang-js">&#39;/status?name=ryan&#39;\n</code></pre>\nIf you would like to parse the URL into its parts, you can use\n<code>require(&#39;url&#39;).parse(request.url)</code>.  Example:\n<pre><code class="lang-txt">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39;\n}\n</code></pre>\nIf you would like to extract the parameters from the query string,\nyou can use the <code>require(&#39;querystring&#39;).parse</code> function, or pass\n<code>true</code> as the second argument to <code>require(&#39;url&#39;).parse</code>.  Example:\n<pre><code class="lang-txt">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: {name: &#39;ryan&#39;},\n  pathname: &#39;/status&#39;\n}\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_url
http.IncomingMessage url	R	http.IncomingMessage.url										http://nodejs.org/api/all.html#all_http.incomingmessage_url
http IncomingMessage url	R	http.IncomingMessage url										http://nodejs.org/api/all.html#all_http incomingmessage_url
http.IncomingMessage.aborted	A										<section class="prog__container"><p id="obj.desc">Emitted when the request has been aborted by the client and the network\nsocket has closed.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_aborted
http.IncomingMessage aborted	R	http.IncomingMessage.aborted										http://nodejs.org/api/all.html#all_http.incomingmessage_aborted
http IncomingMessage aborted	R	http.IncomingMessage aborted										http://nodejs.org/api/all.html#all_http incomingmessage_aborted
http.IncomingMessage.close	A										<section class="prog__container"><p id="obj.desc">Indicates that the underlying connection was closed.\nJust like <code>&#39;end&#39;</code>, this event occurs only once per response.\n</section>	http://nodejs.org/api/all.html#all_http.incomingmessage_close
http.IncomingMessage close	R	http.IncomingMessage.close										http://nodejs.org/api/all.html#all_http.incomingmessage_close
http IncomingMessage close	R	http.IncomingMessage close										http://nodejs.org/api/all.html#all_http incomingmessage_close
https	A										<section class="prog__container"><p id="obj.desc">HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_https
https.createServer	A										<section class="prog__container"><p id="obj.desc">Returns a new HTTPS web server object. The <code>options</code> is similar to\n<code>tls.createServer()</code>.  The <code>requestListener</code> is a function which is\nautomatically added to the <code>&#39;request&#39;</code> event.\nExample:\n<pre><code class="lang-js">// curl -k https://localhost:8000/\nconst https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\n&#39;);\n}).listen(8000);\n</code></pre>\nOr\n<pre><code class="lang-js">const https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\n&#39;);\n}).listen(8000);\n</code></pre>\n<pre><code>https.createServer(options[, requestListener])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_options_requestlistener
https createServer	R	https.createServer										http://nodejs.org/api/all.html#all_https_createserver_options_requestlistener
https.createServer.close	A										<section class="prog__container"><p id="obj.desc">See <code>http.close()</code> for details.\n<pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_close_callback
https createServer close	R	https.createServer close										http://nodejs.org/api/all.html#all_https_createserver_close_callback
https.createServer.listen	A										<section class="prog__container"><p id="obj.desc">See <code>http.listen()</code> for details.\n<pre><code>server.listen(path[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https createServer listen	R	https.createServer listen										http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https.createServer.listen	A										<section class="prog__container"><p id="obj.desc">See <code>http.listen()</code> for details.\n<pre><code>server.listen(port[, host][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_https_createserver_listen_port_host_backlog_callback
https.get	A										<section class="prog__container"><p id="obj.desc">Like <code>http.get()</code> but for HTTPS.\n<code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <code>url.parse()</code>.\nExample:\n<pre><code class="lang-js">const https = require(&#39;https&#39;);\n\nhttps.get(&#39;https://encrypted.google.com/&#39;, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre>\n<pre><code>https.get(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https_get_options_callback
https get	R	https.get										http://nodejs.org/api/all.html#all_https_get_options_callback
https.request	A										<section class="prog__container"><p id="obj.desc">Makes a request to a secure web server.\n<code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <code>url.parse()</code>.\nAll options from <code>http.request()</code> are valid.\nExample:\n<pre><code class="lang-js">const https = require(&#39;https&#39;);\n\nvar options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;\n};\n\nvar req = https.request(options, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre>\nThe options argument has the following options\n<ul>\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.\nDefaults to <code>&#39;localhost&#39;</code>.</li>\n<li><code>hostname</code>: Alias for <code>host</code>. To support <code>url.parse()</code> <code>hostname</code> is\npreferred over <code>host</code>.</li>\n<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.\nValid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be\nused.</li>\n<li><code>port</code>: Port of remote server. Defaults to 443.</li>\n<li><code>localAddress</code>: Local interface to bind for network connections.</li>\n<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>\n<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;</code>.</li>\n<li><code>path</code>: Request path. Defaults to <code>&#39;/&#39;</code>. Should include query string if any.\nE.G. <code>&#39;/index.html?page=12&#39;</code>. An exception is thrown when the request path\ncontains illegal characters. Currently, only spaces are rejected but that\nmay change in the future.</li>\n<li><code>headers</code>: An object containing request headers.</li>\n<li><code>auth</code>: Basic authentication i.e. <code>&#39;user:password&#39;</code> to compute an\nAuthorization header.</li>\n<li><code>agent</code>: Controls <code>Agent</code> behavior. When an Agent is used request will\ndefault to <code>Connection: keep-alive</code>. Possible values:<ul>\n<li><code>undefined</code> (default): use <code>globalAgent</code> for this host and port.</li>\n<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>\n<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to\n<code>Connection: close</code>.</li>\n</ul>\n</li>\n</ul>\nThe following options from <code>tls.connect()</code> can also be specified:\n<ul>\n<li><code>pfx</code>: Certificate, Private key and CA certificates to use for SSL. Default <code>null</code>.</li>\n<li><code>key</code>: Private key to use for SSL. Default <code>null</code>.</li>\n<li><code>passphrase</code>: A string of passphrase for the private key or pfx. Default <code>null</code>.</li>\n<li><code>cert</code>: Public x509 certificate to use. Default <code>null</code>.</li>\n<li><code>ca</code>: A string, <code>Buffer</code> or array of strings or <code>Buffer</code>s of trusted\ncertificates in PEM format. If this is omitted several well known &quot;root&quot;\nCAs will be used, like VeriSign. These are used to authorize connections.</li>\n<li><code>ciphers</code>: A string describing the ciphers to use or exclude. Consult\nhttps://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-LIST-FORMAT for\ndetails on the format.</li>\n<li><code>rejectUnauthorized</code>: If <code>true</code>, the server certificate is verified against\nthe list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if verification\nfails. Verification happens at the connection level, <em>before</em> the HTTP\nrequest is sent. Default <code>true</code>.</li>\n<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force\nSSL version 3. The possible values depend on your installation of\nOpenSSL and are defined in the constant <code>SSL_METHODS</code>.</li>\n<li><code>servername</code>: Servername for SNI (Server Name Indication) TLS extension.</li>\n</ul>\nIn order to specify these options, use a custom <code>Agent</code>.\nExample:\n<pre><code class="lang-js">var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n</code></pre>\nAlternatively, opt out of connection pooling by not using an <code>Agent</code>.\nExample:\n<pre><code class="lang-js">var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;),\n  agent: false\n};\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n});\n</code></pre>\n<!-- [end-include:https.md] -->\n<!-- [start-include:modules.md] -->\n<pre><code>https.request(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https_request_options_callback
https request	R	https.request										http://nodejs.org/api/all.html#all_https_request_options_callback
https.globalAgent	A										<section class="prog__container"><p id="obj.desc">Global instance of <code>https.Agent</code> for all HTTPS client requests.\n</section>	http://nodejs.org/api/all.html#all_https_globalagent
https globalAgent	R	https.globalAgent										http://nodejs.org/api/all.html#all_https_globalagent
https.Agent	A										<section class="prog__container"><p id="obj.desc">An Agent object for HTTPS similar to <code>http.Agent</code>.  See <code>https.request()</code>\nfor more information.\n</section>	http://nodejs.org/api/all.html#all_https.agent
https Agent	R	https.Agent										http://nodejs.org/api/all.html#all_https agent
https.Server	A										<section class="prog__container"><p id="obj.desc">This class is a subclass of <code>tls.Server</code> and emits events same as\n<code>http.Server</code>. See <code>http.Server</code> for more information.\n</section>	http://nodejs.org/api/all.html#all_https.server
https Server	R	https.Server										http://nodejs.org/api/all.html#all_https server
https.Server.setTimeout	A										<section class="prog__container"><p id="obj.desc">See <code>http.Server#setTimeout()</code>.\n<pre><code>server.setTimeout(msecs, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_https.server_settimeout_msecs_callback
https.Server setTimeout	R	https.Server.setTimeout										http://nodejs.org/api/all.html#all_https.server_settimeout_msecs_callback
https Server setTimeout	R	https.Server setTimeout										http://nodejs.org/api/all.html#all_https server_settimeout_msecs_callback
https.Server.timeout	A										<section class="prog__container"><p id="obj.desc">See <code>http.Server#timeout</code>.\n</section>	http://nodejs.org/api/all.html#all_https.server_timeout
https.Server timeout	R	https.Server.timeout										http://nodejs.org/api/all.html#all_https.server_timeout
https Server timeout	R	https.Server timeout										http://nodejs.org/api/all.html#all_https server_timeout
module	A										<section class="prog__container"><p id="obj.desc">Node.js has a simple module loading system.  In Node.js, files and modules\nare in one-to-one correspondence (each file is treated as a separate module).\nAs an example, <code>foo.js</code> loads the module <code>circle.js</code> in the same directory.\nThe contents of <code>foo.js</code>:\n<pre><code class="lang-js">const circle = require(&#39;./circle.js&#39;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\nThe contents of <code>circle.js</code>:\n<pre><code class="lang-js">const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre>\nThe module <code>circle.js</code> has exported the functions <code>area()</code> and\n<code>circumference()</code>.  To add functions and objects to the root of your module,\nyou can add them to the special <code>exports</code> object.\nVariables local to the module will be private, because the module is wrapped\nin a function by Node.js (see module wrapper).\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.\nIf you want the root of your module&#39;s export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to <code>module.exports</code>\ninstead of <code>exports</code>.\nBelow, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:\n<pre><code class="lang-js">const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</code></pre>\nThe <code>square</code> module is defined in <code>square.js</code>:\n<pre><code class="lang-js">// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n</code></pre>\nThe module system is implemented in the <code>require(&quot;module&quot;)</code> module.\n<p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_module
net	A										<section class="prog__container"><p id="obj.desc">The <code>net</code> module provides you with an asynchronous network wrapper. It contains\nfunctions for creating both servers and clients (called streams). You can include\nthis module with <code>require(&#39;net&#39;);</code>.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_net
net.connect	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects with the supplied <code>options</code>.\nThe options are passed to both the <code>net.Socket</code> constructor and the\n<code>socket.connect</code> method.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\nHere is an example of a client of the previously described echo server:\n<pre><code class="lang-js">const net = require(&#39;net&#39;);\nconst client = net.connect({port: 8124}, () =&gt; {\n  // &#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\r\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n</code></pre>\nTo connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to\n<pre><code class="lang-js">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n</code></pre>\n<pre><code>net.connect(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_options_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_options_connectlistener
net.connect	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new unix <code>net.Socket</code> and automatically\nconnects to the supplied <code>path</code>.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\n<pre><code>net.connect(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_path_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_path_connectlistener
net.connect	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.\nIf <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\n<pre><code>net.connect(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_connect_port_host_connectlistener
net connect	R	net.connect										http://nodejs.org/api/all.html#all_net_connect_port_host_connectlistener
net.createConnection	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects with the supplied <code>options</code>.\nThe options are passed to both the <code>net.Socket</code> constructor and the\n<code>socket.connect</code> method.\nPassing <code>timeout</code> as an option will call <code>socket.setTimeout()</code> after the socket is created, but before it is connecting.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\nHere is an example of a client of the previously described echo server:\n<pre><code class="lang-js">const net = require(&#39;net&#39;);\nconst client = net.createConnection({port: 8124}, () =&gt; {\n  //&#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\r\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n</code></pre>\nTo connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to\n<pre><code class="lang-js">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n</code></pre>\n<pre><code>net.createConnection(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_options_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_options_connectlistener
net.createConnection	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new unix <code>net.Socket</code> and automatically\nconnects to the supplied <code>path</code>.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\n<pre><code>net.createConnection(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_path_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_path_connectlistener
net.createConnection	A										<section class="prog__container"><p id="obj.desc">A factory function, which returns a new <code>net.Socket</code> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.\nIf <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event once.\n<pre><code>net.createConnection(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createconnection_port_host_connectlistener
net createConnection	R	net.createConnection										http://nodejs.org/api/all.html#all_net_createconnection_port_host_connectlistener
net.createServer	A										<section class="prog__container"><p id="obj.desc">Creates a new server. The <code>connectionListener</code> argument is\nautomatically set as a listener for the <code>&#39;connection&#39;</code> event.\n<code>options</code> is an object with the following defaults:\n<pre><code class="lang-js">{\n  allowHalfOpen: false,\n  pauseOnConnect: false\n}\n</code></pre>\nIf <code>allowHalfOpen</code> is <code>true</code>, then the socket won&#39;t automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the <code>end()</code> method explicitly.\nSee <code>&#39;end&#39;</code> event for more information.\nIf <code>pauseOnConnect</code> is <code>true</code>, then the socket associated with each incoming\nconnection will be paused, and no data will be read from its handle. This allows\nconnections to be passed between processes without any data being read by the\noriginal process. To begin reading data from a paused socket, call <code>resume()</code>.\nHere is an example of an echo server which listens for connections\non port 8124:\n<pre><code class="lang-js">const net = require(&#39;net&#39;);\nconst server = net.createServer((c) =&gt; {\n  // &#39;connection&#39; listener\n  console.log(&#39;client connected&#39;);\n  c.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;client disconnected&#39;);\n  });\n  c.write(&#39;hello\r\n&#39;);\n  c.pipe(c);\n});\nserver.on(&#39;error&#39;, (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\nTest this by using <code>telnet</code>:\n<pre><code class="lang-sh">telnet localhost 8124\n</code></pre>\nTo listen on the socket <code>/tmp/echo.sock</code> the third line from the last would\njust be changed to\n<pre><code class="lang-js">server.listen(&#39;/tmp/echo.sock&#39;, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\nUse <code>nc</code> to connect to a UNIX domain socket server:\n<pre><code class="lang-js">nc -U /tmp/echo.sock\n</code></pre>\n<pre><code>net.createServer([options][, connectionListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net_createserver_options_connectionlistener
net createServer	R	net.createServer										http://nodejs.org/api/all.html#all_net_createserver_options_connectionlistener
net.isIP	A										<section class="prog__container"><p id="obj.desc">Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.\n<pre><code>net.isIP(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isip_input
net isIP	R	net.isIP										http://nodejs.org/api/all.html#all_net_isip_input
net.isIPv4	A										<section class="prog__container"><p id="obj.desc">Returns true if input is a version 4 IP address, otherwise returns false.\n<pre><code>net.isIPv4(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isipv4_input
net isIPv4	R	net.isIPv4										http://nodejs.org/api/all.html#all_net_isipv4_input
net.isIPv6	A										<section class="prog__container"><p id="obj.desc">Returns true if input is a version 6 IP address, otherwise returns false.\n<!-- [end-include:net.md] -->\n<!-- [start-include:os.md] -->\n<pre><code>net.isIPv6(input)</code></pre></section>	http://nodejs.org/api/all.html#all_net_isipv6_input
net isIPv6	R	net.isIPv6										http://nodejs.org/api/all.html#all_net_isipv6_input
net.Server	A										<section class="prog__container"><p id="obj.desc">This class is used to create a TCP or local server.\n<code>net.Server</code> is an <code>EventEmitter</code> with the following events:\n</section>	http://nodejs.org/api/all.html#all_net.server
net Server	R	net.Server										http://nodejs.org/api/all.html#all_net server
net.Server.address	A										<section class="prog__container"><p id="obj.desc">Returns the bound address, the address family name, and port of the server\nas reported by the operating system.\nUseful to find which port was assigned when getting an OS-assigned address.\nReturns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties:\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>\nExample:\n<pre><code class="lang-js">var server = net.createServer((socket) =&gt; {\n  socket.end(&#39;goodbye\n&#39;);\n}).on(&#39;error&#39;, (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab a random port.\nserver.listen(() =&gt; {\n  console.log(&#39;opened server on&#39;, server.address());\n});\n</code></pre>\nDon&#39;t call <code>server.address()</code> until the <code>&#39;listening&#39;</code> event has been emitted.\n<pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_address
net.Server address	R	net.Server.address										http://nodejs.org/api/all.html#all_net.server_address
net Server address	R	net.Server address										http://nodejs.org/api/all.html#all_net server_address
net.Server.close	A										<section class="prog__container"><p id="obj.desc">Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally\nclosed when all connections are ended and the server emits a <code>&#39;close&#39;</code> event.\nThe optional <code>callback</code> will be called once the <code>&#39;close&#39;</code> event occurs. Unlike\nthat event, it will be called with an Error as its only argument if the server\nwas not open when it was closed.\n<pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_close_callback
net.Server close	R	net.Server.close										http://nodejs.org/api/all.html#all_net.server_close_callback
net Server close	R	net.Server close										http://nodejs.org/api/all.html#all_net server_close_callback
net.Server.getConnections	A										<section class="prog__container"><p id="obj.desc">Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.\nCallback should take two arguments <code>err</code> and <code>count</code>.\n<pre><code>server.getConnections(callback)</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_getconnections_callback
net.Server getConnections	R	net.Server.getConnections										http://nodejs.org/api/all.html#all_net.server_getconnections_callback
net Server getConnections	R	net.Server getConnections										http://nodejs.org/api/all.html#all_net server_getconnections_callback
net.Server.listen	A										<section class="prog__container"><p id="obj.desc">The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.\nThis will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.\nListening on a file descriptor is not supported on Windows.\nThis function is asynchronous.  When the server has been bound,\n<code>&#39;listening&#39;</code> event will be emitted.\nThe last parameter <code>callback</code> will be added as a listener for the\n<code>&#39;listening&#39;</code> event.\nThe parameter <code>backlog</code> behaves the same as in\n<code>server.listen([port][, hostname][, backlog][, callback])</code>.\n<pre><code>server.listen(handle[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_handle_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_handle_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_handle_backlog_callback
net.Server.listen	A										<section class="prog__container"><p id="obj.desc">The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the\noptional callback function, behave as they do on a call to\n<code>server.listen([port][, hostname][, backlog][, callback])</code>.\nAlternatively, the <code>path</code> option can be used to specify a UNIX socket.\nIf <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.\n<pre><code class="lang-js">server.listen({\n  host: &#39;localhost&#39;,\n  port: 80,\n  exclusive: true\n});\n</code></pre>\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_options_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_options_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_options_callback
net.Server.listen	A										<section class="prog__container"><p id="obj.desc">Start a local socket server listening for connections on the given <code>path</code>.\nThis function is asynchronous.  When the server has been bound,\n<code>&#39;listening&#39;</code> event will be emitted.  The last parameter <code>callback</code>\nwill be added as a listener for the <code>&#39;listening&#39;</code> event.\nOn UNIX, the local domain is usually known as the UNIX domain. The path is a\nfilesystem path name. It gets truncated to <code>sizeof(sockaddr_un.sun_path)</code>\nbytes, decreased by 1. It varies on different operating system between 91 and\n107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is\nsubject to the same naming conventions and permissions checks as would be done\non file creation, will be visible in the filesystem, and will <em>persist until\nunlinked</em>.\nOn Windows, the local domain is implemented using a named pipe. The path <em>must</em>\nrefer to an entry in <code>\\?\pipe\</code> or <code>\\.\pipe\</code>. Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving <code>..</code>\nsequences. Despite appearances, the pipe name space is flat.  Pipes will <em>not\npersist</em>, they are removed when the last reference to them is closed. Do not\nforget JavaScript string escaping requires paths to be specified with\ndouble-backslashes, such as:\n<pre><code class="lang-js">net.createServer().listen(\n    path.join(&#39;\\\\?\\pipe&#39;, process.cwd(), &#39;myctl&#39;))\n</code></pre>\nThe parameter <code>backlog</code> behaves the same as in\n<code>server.listen([port][, hostname][, backlog][, callback])</code>.\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen(path[, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_path_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_path_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_path_backlog_callback
net.Server.listen	A										<section class="prog__container"><p id="obj.desc">Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise.\nOmit the port argument, or use a port value of <code>0</code>, to have the operating system\nassign a random port, which can be retrieved by using <code>server.address().port</code>\nafter the <code>&#39;listening&#39;</code> event has been emitted.\nBacklog is the maximum length of the queue of pending connections.\nThe actual length will be determined by the OS through sysctl settings such as\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on Linux. The default value of this\nparameter is 511 (not 512).\nThis function is asynchronous.  When the server has been bound,\n<code>&#39;listening&#39;</code> event will be emitted.  The last parameter <code>callback</code>\nwill be added as a listener for the <code>&#39;listening&#39;</code> event.\nOne issue some users run into is getting <code>EADDRINUSE</code> errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again:\n<pre><code class="lang-js">server.on(&#39;error&#39;, (e) =&gt; {\n  if (e.code == &#39;EADDRINUSE&#39;) {\n    console.log(&#39;Address in use, retrying...&#39;);\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n</code></pre>\n(Note: All sockets in Node.js are set <code>SO_REUSEADDR</code>.)\n<em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each\nsubsequent call will <em>re-open</em> the server using the provided options.\n<pre><code>server.listen([port][, hostname][, backlog][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_listen_port_hostname_backlog_callback
net.Server listen	R	net.Server.listen										http://nodejs.org/api/all.html#all_net.server_listen_port_hostname_backlog_callback
net Server listen	R	net.Server listen										http://nodejs.org/api/all.html#all_net server_listen_port_hostname_backlog_callback
net.Server.ref	A										<section class="prog__container"><p id="obj.desc">Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em>\nlet the program exit if it&#39;s the only server left (the default behavior). If\nthe server is <code>ref</code>d calling <code>ref</code> again will have no effect.\nReturns <code>server</code>.\n<pre><code>server.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_ref
net.Server ref	R	net.Server.ref										http://nodejs.org/api/all.html#all_net.server_ref
net Server ref	R	net.Server ref										http://nodejs.org/api/all.html#all_net server_ref
net.Server.unref	A										<section class="prog__container"><p id="obj.desc">Calling <code>unref</code> on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.\nReturns <code>server</code>.\n<pre><code>server.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.server_unref
net.Server unref	R	net.Server.unref										http://nodejs.org/api/all.html#all_net.server_unref
net Server unref	R	net.Server unref										http://nodejs.org/api/all.html#all_net server_unref
net.Server.connections	A										<section class="prog__container"><p id="obj.desc">The number of concurrent connections on the server.\nThis becomes <code>null</code> when sending a socket to a child with\n<code>child_process.fork()</code>. To poll forks and get current number of active\nconnections use asynchronous <code>server.getConnections</code> instead.\n</section>	http://nodejs.org/api/all.html#all_net.server_connections
net.Server connections	R	net.Server.connections										http://nodejs.org/api/all.html#all_net.server_connections
net Server connections	R	net.Server connections										http://nodejs.org/api/all.html#all_net server_connections
net.Server.listening	A										<section class="prog__container"><p id="obj.desc">A Boolean indicating whether or not the server is listening for\nconnections.\n</section>	http://nodejs.org/api/all.html#all_net.server_listening
net.Server listening	R	net.Server.listening										http://nodejs.org/api/all.html#all_net.server_listening
net Server listening	R	net.Server listening										http://nodejs.org/api/all.html#all_net server_listening
net.Server.maxConnections	A										<section class="prog__container"><p id="obj.desc">Set this property to reject connections when the server&#39;s connection count gets\nhigh.\nIt is not recommended to use this option once a socket has been sent to a child\nwith <code>child_process.fork()</code>.\n</section>	http://nodejs.org/api/all.html#all_net.server_maxconnections
net.Server maxConnections	R	net.Server.maxConnections										http://nodejs.org/api/all.html#all_net.server_maxconnections
net Server maxConnections	R	net.Server maxConnections										http://nodejs.org/api/all.html#all_net server_maxconnections
net.Server.close	A										<section class="prog__container"><p id="obj.desc">Emitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.\n</section>	http://nodejs.org/api/all.html#all_net.server_close
net.Server close	R	net.Server.close										http://nodejs.org/api/all.html#all_net.server_close
net Server close	R	net.Server close										http://nodejs.org/api/all.html#all_net server_close
net.Server.connection	A										<section class="prog__container"><p id="obj.desc">Emitted when a new connection is made. <code>socket</code> is an instance of\n<code>net.Socket</code>.\n</section>	http://nodejs.org/api/all.html#all_net.server_connection
net.Server connection	R	net.Server.connection										http://nodejs.org/api/all.html#all_net.server_connection
net Server connection	R	net.Server connection										http://nodejs.org/api/all.html#all_net server_connection
net.Server.error	A										<section class="prog__container"><p id="obj.desc">Emitted when an error occurs.  The <code>&#39;close&#39;</code> event will be called directly\nfollowing this event.  See example in discussion of <code>server.listen</code>.\n</section>	http://nodejs.org/api/all.html#all_net.server_error
net.Server error	R	net.Server.error										http://nodejs.org/api/all.html#all_net.server_error
net Server error	R	net.Server error										http://nodejs.org/api/all.html#all_net server_error
net.Server.listening	A										<section class="prog__container"><p id="obj.desc">Emitted when the server has been bound after calling <code>server.listen</code>.\n</section>	http://nodejs.org/api/all.html#all_net.server_listening
net.Socket	A										<section class="prog__container"><p id="obj.desc">This object is an abstraction of a TCP or local socket.  <code>net.Socket</code>\ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with <code>connect()</code>) or they can be created by Node.js\nand passed to the user through the <code>&#39;connection&#39;</code> event of a server.\n</section>	http://nodejs.org/api/all.html#all_net.socket
net Socket	R	net.Socket										http://nodejs.org/api/all.html#all_net socket
net.Socket.Socket	A										<section class="prog__container"><p id="obj.desc">Construct a new socket object.\n<code>options</code> is an object with the following defaults:\n<pre><code class="lang-js">{\n  fd: null,\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}\n</code></pre>\n<code>fd</code> allows you to specify the existing file descriptor of socket.\nSet <code>readable</code> and/or <code>writable</code> to <code>true</code> to allow reads and/or writes on this\nsocket (NOTE: Works only when <code>fd</code> is passed).\nAbout <code>allowHalfOpen</code>, refer to <code>createServer()</code> and <code>&#39;end&#39;</code> event.\n<code>net.Socket</code> instances are <code>EventEmitter</code> with the following events:\n<pre><code>new net.Socket([options])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_socket_options
net.Socket Socket	R	net.Socket.Socket										http://nodejs.org/api/all.html#all_net.socket_socket_options
net Socket Socket	R	net.Socket Socket										http://nodejs.org/api/all.html#all_net socket_socket_options
net.Socket.address	A										<section class="prog__container"><p id="obj.desc">Returns the bound address, the address family name and port of the\nsocket as reported by the operating system. Returns an object with\nthree properties, e.g.\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>\n<pre><code>socket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_address
net.Socket address	R	net.Socket.address										http://nodejs.org/api/all.html#all_net.socket_address
net Socket address	R	net.Socket address										http://nodejs.org/api/all.html#all_net socket_address
net.Socket.connect	A										<section class="prog__container"><p id="obj.desc">Opens the connection for a given socket.\nFor TCP sockets, <code>options</code> argument should be an object which specifies:\n<ul>\n<li><code>port</code>: Port the client should connect to (Required).\n</li>\n<li><code>host</code>: Host the client should connect to. Defaults to <code>&#39;localhost&#39;</code>.\n</li>\n<li><code>localAddress</code>: Local interface to bind to for network connections.\n</li>\n<li><code>localPort</code>: Local port to bind to for network connections.\n</li>\n<li><code>family</code> : Version of IP stack. Defaults to <code>4</code>.\n</li>\n<li><code>hints</code>: <code>dns.lookup()</code> hints. Defaults to <code>0</code>.\n</li>\n<li><code>lookup</code> : Custom lookup function. Defaults to <code>dns.lookup</code>.\n</li>\n</ul>\nFor local domain sockets, <code>options</code> argument should be an object which\nspecifies:\n<ul>\n<li><code>path</code>: Path the client should connect to (Required).</li>\n</ul>\nNormally this method is not needed, as <code>net.createConnection</code> opens the\nsocket. Use this only if you are implementing a custom Socket.\nThis function is asynchronous. When the <code>&#39;connect&#39;</code> event is emitted the\nsocket is established. If there is a problem connecting, the <code>&#39;connect&#39;</code> event\nwill not be emitted, the <code>&#39;error&#39;</code> event will be emitted with the exception.\nThe <code>connectListener</code> parameter will be added as a listener for the\n<code>&#39;connect&#39;</code> event.\n<pre><code>socket.connect(options[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_options_connectlistener
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect_options_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect_options_connectlistener
net.Socket.connect	A										<section class="prog__container"><p id="obj.desc">As <code>socket.connect(options[, connectListener])</code>,\nwith options as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.\n<pre><code>socket.connect(path[, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect_port_host_connectlistener
net.Socket.connect	A										<section class="prog__container"><p id="obj.desc">As <code>socket.connect(options[, connectListener])</code>,\nwith options as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.\n<pre><code>socket.connect(port[, host][, connectListener])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_connect_port_host_connectlistener
net.Socket.destroy	A										<section class="prog__container"><p id="obj.desc">Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).\nIf <code>exception</code> is specified, an <code>&#39;error&#39;</code> event will be emitted and any\nlisteners for that event will receive <code>exception</code> as an argument.\n<pre><code>socket.destroy([exception])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_destroy_exception
net.Socket destroy	R	net.Socket.destroy										http://nodejs.org/api/all.html#all_net.socket_destroy_exception
net Socket destroy	R	net.Socket destroy										http://nodejs.org/api/all.html#all_net socket_destroy_exception
net.Socket.end	A										<section class="prog__container"><p id="obj.desc">Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.\nIf <code>data</code> is specified, it is equivalent to calling\n<code>socket.write(data, encoding)</code> followed by <code>socket.end()</code>.\n<pre><code>socket.end([data][, encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_end_data_encoding
net.Socket end	R	net.Socket.end										http://nodejs.org/api/all.html#all_net.socket_end_data_encoding
net Socket end	R	net.Socket end										http://nodejs.org/api/all.html#all_net socket_end_data_encoding
net.Socket.pause	A										<section class="prog__container"><p id="obj.desc">Pauses the reading of data. That is, <code>&#39;data&#39;</code> events will not be emitted.\nUseful to throttle back an upload.\n<pre><code>socket.pause()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_pause
net.Socket pause	R	net.Socket.pause										http://nodejs.org/api/all.html#all_net.socket_pause
net Socket pause	R	net.Socket pause										http://nodejs.org/api/all.html#all_net socket_pause
net.Socket.ref	A										<section class="prog__container"><p id="obj.desc">Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em>\nlet the program exit if it&#39;s the only socket left (the default behavior). If\nthe socket is <code>ref</code>d calling <code>ref</code> again will have no effect.\nReturns <code>socket</code>.\n<pre><code>socket.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_ref
net.Socket ref	R	net.Socket.ref										http://nodejs.org/api/all.html#all_net.socket_ref
net Socket ref	R	net.Socket ref										http://nodejs.org/api/all.html#all_net socket_ref
net.Socket.resume	A										<section class="prog__container"><p id="obj.desc">Resumes reading after a call to <code>pause()</code>.\n<pre><code>socket.resume()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_resume
net.Socket resume	R	net.Socket.resume										http://nodejs.org/api/all.html#all_net.socket_resume
net Socket resume	R	net.Socket resume										http://nodejs.org/api/all.html#all_net socket_resume
net.Socket.setEncoding	A										<section class="prog__container"><p id="obj.desc">Set the encoding for the socket as a Readable Stream. See\n<code>stream.setEncoding()</code> for more information.\n<pre><code>socket.setEncoding([encoding])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setencoding_encoding
net.Socket setEncoding	R	net.Socket.setEncoding										http://nodejs.org/api/all.html#all_net.socket_setencoding_encoding
net Socket setEncoding	R	net.Socket setEncoding										http://nodejs.org/api/all.html#all_net socket_setencoding_encoding
net.Socket.setKeepAlive	A										<section class="prog__container"><p id="obj.desc">Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n<code>enable</code> defaults to <code>false</code>.\nSet <code>initialDelay</code> (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting 0 for\ninitialDelay will leave the value unchanged from the default\n(or previous) setting. Defaults to <code>0</code>.\nReturns <code>socket</code>.\n<pre><code>socket.setKeepAlive([enable][, initialDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setkeepalive_enable_initialdelay
net.Socket setKeepAlive	R	net.Socket.setKeepAlive										http://nodejs.org/api/all.html#all_net.socket_setkeepalive_enable_initialdelay
net Socket setKeepAlive	R	net.Socket setKeepAlive										http://nodejs.org/api/all.html#all_net socket_setkeepalive_enable_initialdelay
net.Socket.setNoDelay	A										<section class="prog__container"><p id="obj.desc">Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting <code>true</code> for\n<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.\n<code>noDelay</code> defaults to <code>true</code>.\nReturns <code>socket</code>.\n<pre><code>socket.setNoDelay([noDelay])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_setnodelay_nodelay
net.Socket setNoDelay	R	net.Socket.setNoDelay										http://nodejs.org/api/all.html#all_net.socket_setnodelay_nodelay
net Socket setNoDelay	R	net.Socket setNoDelay										http://nodejs.org/api/all.html#all_net socket_setnodelay_nodelay
net.Socket.setTimeout	A										<section class="prog__container"><p id="obj.desc">Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on\nthe socket. By default <code>net.Socket</code> do not have a timeout.\nWhen an idle timeout is triggered the socket will receive a <code>&#39;timeout&#39;</code>\nevent but the connection will not be severed. The user must manually <code>end()</code>\nor <code>destroy()</code> the socket.\nIf <code>timeout</code> is 0, then the existing idle timeout is disabled.\nThe optional <code>callback</code> parameter will be added as a one time listener for the\n<code>&#39;timeout&#39;</code> event.\nReturns <code>socket</code>.\n<pre><code>socket.setTimeout(timeout[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_settimeout_timeout_callback
net.Socket setTimeout	R	net.Socket.setTimeout										http://nodejs.org/api/all.html#all_net.socket_settimeout_timeout_callback
net Socket setTimeout	R	net.Socket setTimeout										http://nodejs.org/api/all.html#all_net socket_settimeout_timeout_callback
net.Socket.unref	A										<section class="prog__container"><p id="obj.desc">Calling <code>unref</code> on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.\nReturns <code>socket</code>.\n<pre><code>socket.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_unref
net.Socket unref	R	net.Socket.unref										http://nodejs.org/api/all.html#all_net.socket_unref
net Socket unref	R	net.Socket unref										http://nodejs.org/api/all.html#all_net socket_unref
net.Socket.write	A										<section class="prog__container"><p id="obj.desc">Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.\nReturns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is again free.\nThe optional <code>callback</code> parameter will be executed when the data is finally\nwritten out - this may not be immediately.\n<pre><code>socket.write(data[, encoding][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_net.socket_write_data_encoding_callback
net.Socket write	R	net.Socket.write										http://nodejs.org/api/all.html#all_net.socket_write_data_encoding_callback
net Socket write	R	net.Socket write										http://nodejs.org/api/all.html#all_net socket_write_data_encoding_callback
net.Socket.bufferSize	A										<section class="prog__container"><p id="obj.desc"><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket&#39;s file descriptor for being writable).\nThe consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)\nUsers who experience large or growing <code>bufferSize</code> should attempt to\n&quot;throttle&quot; the data flows in their program with <code>pause()</code> and <code>resume()</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_buffersize
net.Socket bufferSize	R	net.Socket.bufferSize										http://nodejs.org/api/all.html#all_net.socket_buffersize
net Socket bufferSize	R	net.Socket bufferSize										http://nodejs.org/api/all.html#all_net socket_buffersize
net.Socket.bytesRead	A										<section class="prog__container"><p id="obj.desc">The amount of received bytes.\n</section>	http://nodejs.org/api/all.html#all_net.socket_bytesread
net.Socket bytesRead	R	net.Socket.bytesRead										http://nodejs.org/api/all.html#all_net.socket_bytesread
net Socket bytesRead	R	net.Socket bytesRead										http://nodejs.org/api/all.html#all_net socket_bytesread
net.Socket.bytesWritten	A										<section class="prog__container"><p id="obj.desc">The amount of bytes sent.\n</section>	http://nodejs.org/api/all.html#all_net.socket_byteswritten
net.Socket bytesWritten	R	net.Socket.bytesWritten										http://nodejs.org/api/all.html#all_net.socket_byteswritten
net Socket bytesWritten	R	net.Socket bytesWritten										http://nodejs.org/api/all.html#all_net socket_byteswritten
net.Socket.connecting	A										<section class="prog__container"><p id="obj.desc">If <code>true</code> - <code>socket.connect(options[, connectListener])</code> was called and\nhaven&#39;t yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event\nand/or calling <code>socket.connect(options[, connectListener])</code>&#39;s callback.\n</section>	http://nodejs.org/api/all.html#all_net.socket_connecting
net.Socket connecting	R	net.Socket.connecting										http://nodejs.org/api/all.html#all_net.socket_connecting
net Socket connecting	R	net.Socket connecting										http://nodejs.org/api/all.html#all_net socket_connecting
net.Socket.destroyed	A										<section class="prog__container"><p id="obj.desc">A Boolean value that indicates if the connection is destroyed or not. Once a\nconnection is destroyed no further data can be transferred using it.\n</section>	http://nodejs.org/api/all.html#all_net.socket_destroyed
net.Socket destroyed	R	net.Socket.destroyed										http://nodejs.org/api/all.html#all_net.socket_destroyed
net Socket destroyed	R	net.Socket destroyed										http://nodejs.org/api/all.html#all_net socket_destroyed
net.Socket.localAddress	A										<section class="prog__container"><p id="obj.desc">The string representation of the local IP address the remote client is\nconnecting on. For example, if you are listening on <code>&#39;0.0.0.0&#39;</code> and the\nclient connects on <code>&#39;192.168.1.1&#39;</code>, the value would be <code>&#39;192.168.1.1&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_localaddress
net.Socket localAddress	R	net.Socket.localAddress										http://nodejs.org/api/all.html#all_net.socket_localaddress
net Socket localAddress	R	net.Socket localAddress										http://nodejs.org/api/all.html#all_net socket_localaddress
net.Socket.localPort	A										<section class="prog__container"><p id="obj.desc">The numeric representation of the local port. For example,\n<code>80</code> or <code>21</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_localport
net.Socket localPort	R	net.Socket.localPort										http://nodejs.org/api/all.html#all_net.socket_localport
net Socket localPort	R	net.Socket localPort										http://nodejs.org/api/all.html#all_net socket_localport
net.Socket.remoteAddress	A										<section class="prog__container"><p id="obj.desc">The string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>. Value may be <code>undefined</code> if\nthe socket is destroyed (for example, if the client disconnected).\n</section>	http://nodejs.org/api/all.html#all_net.socket_remoteaddress
net.Socket remoteAddress	R	net.Socket.remoteAddress										http://nodejs.org/api/all.html#all_net.socket_remoteaddress
net Socket remoteAddress	R	net.Socket remoteAddress										http://nodejs.org/api/all.html#all_net socket_remoteaddress
net.Socket.remoteFamily	A										<section class="prog__container"><p id="obj.desc">The string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_remotefamily
net.Socket remoteFamily	R	net.Socket.remoteFamily										http://nodejs.org/api/all.html#all_net.socket_remotefamily
net Socket remoteFamily	R	net.Socket remoteFamily										http://nodejs.org/api/all.html#all_net socket_remotefamily
net.Socket.remotePort	A										<section class="prog__container"><p id="obj.desc">The numeric representation of the remote port. For example,\n<code>80</code> or <code>21</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_remoteport
net.Socket remotePort	R	net.Socket.remotePort										http://nodejs.org/api/all.html#all_net.socket_remoteport
net Socket remotePort	R	net.Socket remotePort										http://nodejs.org/api/all.html#all_net socket_remoteport
net.Socket.close	A										<section class="prog__container"><p id="obj.desc">Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean\nwhich says if the socket was closed due to a transmission error.\n</section>	http://nodejs.org/api/all.html#all_net.socket_close
net.Socket close	R	net.Socket.close										http://nodejs.org/api/all.html#all_net.socket_close
net Socket close	R	net.Socket close										http://nodejs.org/api/all.html#all_net socket_close
net.Socket.connect	A										<section class="prog__container"><p id="obj.desc">Emitted when a socket connection is successfully established.\nSee <code>connect()</code>.\n</section>	http://nodejs.org/api/all.html#all_net.socket_connect
net.Socket connect	R	net.Socket.connect										http://nodejs.org/api/all.html#all_net.socket_connect
net Socket connect	R	net.Socket connect										http://nodejs.org/api/all.html#all_net socket_connect
net.Socket.data	A										<section class="prog__container"><p id="obj.desc">Emitted when data is received.  The argument <code>data</code> will be a <code>Buffer</code> or\n<code>String</code>.  Encoding of data is set by <code>socket.setEncoding()</code>.\n(See the Readable Stream section for more information.)\nNote that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code>\nemits a <code>&#39;data&#39;</code> event.\n</section>	http://nodejs.org/api/all.html#all_net.socket_data
net.Socket data	R	net.Socket.data										http://nodejs.org/api/all.html#all_net.socket_data
net Socket data	R	net.Socket data										http://nodejs.org/api/all.html#all_net socket_data
net.Socket.drain	A										<section class="prog__container"><p id="obj.desc">Emitted when the write buffer becomes empty. Can be used to throttle uploads.\nSee also: the return values of <code>socket.write()</code>\n</section>	http://nodejs.org/api/all.html#all_net.socket_drain
net.Socket drain	R	net.Socket.drain										http://nodejs.org/api/all.html#all_net.socket_drain
net Socket drain	R	net.Socket drain										http://nodejs.org/api/all.html#all_net socket_drain
net.Socket.end	A										<section class="prog__container"><p id="obj.desc">Emitted when the other end of the socket sends a FIN packet.\nBy default (<code>allowHalfOpen == false</code>) the socket will destroy its file\ndescriptor  once it has written out its pending write queue.  However, by\nsetting <code>allowHalfOpen == true</code> the socket will not automatically <code>end()</code>\nits side allowing the user to write arbitrary amounts of data, with the\ncaveat that the user is required to <code>end()</code> their side now.\n</section>	http://nodejs.org/api/all.html#all_net.socket_end
net.Socket end	R	net.Socket.end										http://nodejs.org/api/all.html#all_net.socket_end
net Socket end	R	net.Socket end										http://nodejs.org/api/all.html#all_net socket_end
net.Socket.error	A										<section class="prog__container"><p id="obj.desc">Emitted when an error occurs.  The <code>&#39;close&#39;</code> event will be called directly\nfollowing this event.\n</section>	http://nodejs.org/api/all.html#all_net.socket_error
net.Socket error	R	net.Socket.error										http://nodejs.org/api/all.html#all_net.socket_error
net Socket error	R	net.Socket error										http://nodejs.org/api/all.html#all_net socket_error
net.Socket.lookup	A										<section class="prog__container"><p id="obj.desc">Emitted after resolving the hostname but before connecting.\nNot applicable to UNIX sockets.\n<ul>\n<li><code>err</code> {Error|Null} The error object.  See <code>dns.lookup()</code>.</li>\n<li><code>address</code> {String} The IP address.</li>\n<li><code>family</code> {String|Null} The address type.  See <code>dns.lookup()</code>.</li>\n<li><code>host</code> {String} The hostname.</li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_net.socket_lookup
net.Socket lookup	R	net.Socket.lookup										http://nodejs.org/api/all.html#all_net.socket_lookup
net Socket lookup	R	net.Socket lookup										http://nodejs.org/api/all.html#all_net socket_lookup
net.Socket.timeout	A										<section class="prog__container"><p id="obj.desc">Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.\nSee also: <code>socket.setTimeout()</code>\n</section>	http://nodejs.org/api/all.html#all_net.socket_timeout
net.Socket timeout	R	net.Socket.timeout										http://nodejs.org/api/all.html#all_net.socket_timeout
net Socket timeout	R	net.Socket timeout										http://nodejs.org/api/all.html#all_net socket_timeout
os	A										<section class="prog__container"><p id="obj.desc">The <code>os</code> module provides a number of operating system-related utility methods.\nIt can be accessed using:\n<pre><code class="lang-js">const os = require(&#39;os&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_os
os.arch	A										<section class="prog__container"><p id="obj.desc">The <code>os.arch()</code> method returns a string identifying the operating system CPU\narchitecture <em>for which the Node.js binary was compiled</em>.\nThe current possible values are: <code>&#39;arm&#39;</code>, <code>&#39;arm64&#39;</code>, <code>&#39;ia32&#39;</code>, <code>&#39;mips&#39;</code>,\n<code>&#39;mipsel&#39;</code>, <code>&#39;ppc&#39;</code>, <code>&#39;ppc64&#39;</code>, <code>&#39;s390&#39;</code>, <code>&#39;s390x&#39;</code>, <code>&#39;x32&#39;</code>, <code>&#39;x64&#39;</code>,  and\n<code>&#39;x86&#39;</code>.\nEquivalent to <code>process.arch</code>.\n<pre><code>os.arch()</code></pre></section>	http://nodejs.org/api/all.html#all_os_arch
os arch	R	os.arch										http://nodejs.org/api/all.html#all_os_arch
os.cpus	A										<section class="prog__container"><p id="obj.desc">The <code>os.cpus()</code> method returns an array of objects containing information about\neach CPU/core installed.\nThe properties included on each object include:\n<ul>\n<li><code>model</code> {String}</li>\n<li><code>speed</code> {number} (in MHz)</li>\n<li><code>times</code> {Object}<ul>\n<li><code>user</code> {number} The number of milliseconds the CPU has spent in user mode.</li>\n<li><code>nice</code> {number} The number of milliseconds the CPU has spent in nice mode.</li>\n<li><code>sys</code> {number} The number of milliseconds the CPU has spent in sys mode.</li>\n<li><code>idle</code> {number} The number of milliseconds the CPU has spent in idle mode.</li>\n<li><code>irq</code> {number} The number of milliseconds the CPU has spent in irq mode.</li>\n</ul>\n</li>\n</ul>\nFor example:\n<pre><code class="lang-js">[\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 511580,\n      nice: 20,\n      sys: 40900,\n      idle: 1070842510,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 291660,\n      nice: 0,\n      sys: 34360,\n      idle: 1070888000,\n      irq: 10\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 308260,\n      nice: 0,\n      sys: 55410,\n      idle: 1071129970,\n      irq: 880\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 266450,\n      nice: 1480,\n      sys: 34920,\n      idle: 1072572010,\n      irq: 30\n    }\n  }\n]\n</code></pre>\n<em>Note</em>: Because <code>nice</code> values are UNIX-specific, on Windows the <code>nice</code> values of\nall processors are always 0.\n<pre><code>os.cpus()</code></pre></section>	http://nodejs.org/api/all.html#all_os_cpus
os cpus	R	os.cpus										http://nodejs.org/api/all.html#all_os_cpus
os.endianness	A										<section class="prog__container"><p id="obj.desc">The <code>os.endianness()</code> method returns a string identifying the endianness of the\nCPU <em>for which the Node.js binary was compiled</em>.\nPossible values are:\n<ul>\n<li><code>&#39;BE&#39;</code> for big endian</li>\n<li><code>&#39;LE&#39;</code> for little endian.</li>\n</ul>\n<pre><code>os.endianness()</code></pre></section>	http://nodejs.org/api/all.html#all_os_endianness
os endianness	R	os.endianness										http://nodejs.org/api/all.html#all_os_endianness
os.freemem	A										<section class="prog__container"><p id="obj.desc">The <code>os.freemem()</code> method returns the amount of free system memory in bytes as\nan integer.\n<pre><code>os.freemem()</code></pre></section>	http://nodejs.org/api/all.html#all_os_freemem
os freemem	R	os.freemem										http://nodejs.org/api/all.html#all_os_freemem
os.homedir	A										<section class="prog__container"><p id="obj.desc">The <code>os.homedir()</code> method returns the home directory of the current user as a\nstring.\n<pre><code>os.homedir()</code></pre></section>	http://nodejs.org/api/all.html#all_os_homedir
os homedir	R	os.homedir										http://nodejs.org/api/all.html#all_os_homedir
os.hostname	A										<section class="prog__container"><p id="obj.desc">The <code>os.hostname()</code> method returns the hostname of the operating system as a\nstring.\n<pre><code>os.hostname()</code></pre></section>	http://nodejs.org/api/all.html#all_os_hostname
os hostname	R	os.hostname										http://nodejs.org/api/all.html#all_os_hostname
os.loadavg	A										<section class="prog__container"><p id="obj.desc">The <code>os.loadavg()</code> method returns an array containing the 1, 5, and 15 minute\nload averages.\nThe load average is a measure of system activity, calculated by the operating\nsystem and expressed as a fractional number.  As a rule of thumb, the load\naverage should ideally be less than the number of logical CPUs in the system.\nThe load average is a UNIX-specific concept with no real equivalent on\nWindows platforms. On Windows, the return value is always <code>[0, 0, 0]</code>.\n<pre><code>os.loadavg()</code></pre></section>	http://nodejs.org/api/all.html#all_os_loadavg
os loadavg	R	os.loadavg										http://nodejs.org/api/all.html#all_os_loadavg
os.networkInterfaces	A										<section class="prog__container"><p id="obj.desc">The <code>os.networkInterfaces()</code> method returns an object containing only network\ninterfaces that have been assigned a network address.\nEach key on the returned object identifies a network interface. The associated\nvalue is an array of objects that each describe an assigned network address.\nThe properties available on the assigned network address object include:\n<ul>\n<li><code>address</code> {String} The assigned IPv4 or IPv6 address</li>\n<li><code>netmask</code> {String} The IPv4 or IPv6 network mask</li>\n<li><code>family</code> {String} Either <code>IPv4</code> or <code>IPv6</code></li>\n<li><code>mac</code> {String} The MAC address of the network interface</li>\n<li><code>internal</code> {boolean} <code>true</code> if the network interface is a loopback or\nsimilar interface that is not remotely accessible; otherwise <code>false</code></li>\n<li><code>scopeid</code> {number} The numeric IPv6 scope ID (only specified when <code>family</code>\nis <code>IPv6</code>)</li>\n</ul>\n<pre><code class="lang-js">{\n  lo: [\n    {\n      address: &#39;127.0.0.1&#39;,\n      netmask: &#39;255.0.0.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true\n    },\n    {\n      address: &#39;::1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true\n    }\n  ],\n  eth0: [\n    {\n      address: &#39;192.168.1.108&#39;,\n      netmask: &#39;255.255.255.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false\n    },\n    {\n      address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff::&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false\n    }\n  ]\n}\n</code></pre>\n<pre><code>os.networkInterfaces()</code></pre></section>	http://nodejs.org/api/all.html#all_os_networkinterfaces
os networkInterfaces	R	os.networkInterfaces										http://nodejs.org/api/all.html#all_os_networkinterfaces
os.platform	A										<section class="prog__container"><p id="obj.desc">The <code>os.platform()</code> method returns a string identifying the operating system\nplatform as set during compile time of Node.js.\nCurrently possible values are:\n<ul>\n<li><code>&#39;aix&#39;</code></li>\n<li><code>&#39;darwin&#39;</code></li>\n<li><code>&#39;freebsd&#39;</code></li>\n<li><code>&#39;linux&#39;</code></li>\n<li><code>&#39;openbsd&#39;</code></li>\n<li><code>&#39;sunos&#39;</code></li>\n<li><code>&#39;win32&#39;</code></li>\n</ul>\nEquivalent to <code>process.platform</code>.\n<em>Note</em>: The value <code>&#39;android&#39;</code> may also be returned if the Node.js is built on\nthe Android operating system. However, Android support in Node.js is considered\nto be experimental at this time.\n<pre><code>os.platform()</code></pre></section>	http://nodejs.org/api/all.html#all_os_platform
os platform	R	os.platform										http://nodejs.org/api/all.html#all_os_platform
os.release	A										<section class="prog__container"><p id="obj.desc">The <code>os.release()</code> method returns a string identifying the operating system\nrelease.\n<em>Note</em>: On POSIX systems, the operating system release is determined by calling\nuname(3). On Windows, <code>GetVersionExW()</code> is used. Please see\nhttps://en.wikipedia.org/wiki/Uname#Examples for more information.\n<pre><code>os.release()</code></pre></section>	http://nodejs.org/api/all.html#all_os_release
os release	R	os.release										http://nodejs.org/api/all.html#all_os_release
os.tmpdir	A										<section class="prog__container"><p id="obj.desc">The <code>os.tmpdir()</code> method returns a string specifying the operating system&#39;s\ndefault directory for temporary files.\n<pre><code>os.tmpdir()</code></pre></section>	http://nodejs.org/api/all.html#all_os_tmpdir
os tmpdir	R	os.tmpdir										http://nodejs.org/api/all.html#all_os_tmpdir
os.totalmem	A										<section class="prog__container"><p id="obj.desc">The <code>os.totalmem()</code> method returns the total amount of system memory in bytes\nas an integer.\n<pre><code>os.totalmem()</code></pre></section>	http://nodejs.org/api/all.html#all_os_totalmem
os totalmem	R	os.totalmem										http://nodejs.org/api/all.html#all_os_totalmem
os.type	A										<section class="prog__container"><p id="obj.desc">The <code>os.type()</code> method returns a string identifying the operating system name\nas returned by uname(3). For example <code>&#39;Linux&#39;</code> on Linux, <code>&#39;Darwin&#39;</code> on OS X and\n<code>&#39;Windows_NT&#39;</code> on Windows.\nPlease see https://en.wikipedia.org/wiki/Uname#Examples for additional\ninformation about the output of running uname(3) on various operating systems.\n<pre><code>os.type()</code></pre></section>	http://nodejs.org/api/all.html#all_os_type
os type	R	os.type										http://nodejs.org/api/all.html#all_os_type
os.uptime	A										<section class="prog__container"><p id="obj.desc">The <code>os.uptime()</code> method returns the system uptime in number of seconds.\n<em>Note</em>: Within Node.js&#39; internals, this number is represented as a <code>double</code>.\nHowever, fractional seconds are not returned and the value can typically be\ntreated as an integer.\n<pre><code>os.uptime()</code></pre></section>	http://nodejs.org/api/all.html#all_os_uptime
os uptime	R	os.uptime										http://nodejs.org/api/all.html#all_os_uptime
os.userInfo	A										<section class="prog__container"><p id="obj.desc">The <code>os.userInfo()</code> method returns information about the currently effective\nuser -- on POSIX platforms, this is typically a subset of the password file. The\nreturned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.\nOn Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.\nThe value of <code>homedir</code> returned by <code>os.userInfo()</code> is provided by the operating\nsystem. This differs from the result of <code>os.homedir()</code>, which queries several\nenvironment variables for the home directory before falling back to the\noperating system response.\n<pre><code>os.userInfo([options])</code></pre></section>	http://nodejs.org/api/all.html#all_os_userinfo_options
os userInfo	R	os.userInfo										http://nodejs.org/api/all.html#all_os_userinfo_options
os.EOL	A										<section class="prog__container"><p id="obj.desc">A string constant defining the operating system-specific end-of-line marker:\n<ul>\n<li><code>\n</code> on POSIX</li>\n<li><code>\r\n</code> on Windows</li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_os_eol
os EOL	R	os.EOL										http://nodejs.org/api/all.html#all_os_eol
os.constants	A										<section class="prog__container"><p id="obj.desc">Returns an object containing commonly used operating system specific constants\nfor error codes, process signals, and so on. The specific constants currently\ndefined are described in OS Constants.\n</section>	http://nodejs.org/api/all.html#all_os_constants
os constants	R	os.constants										http://nodejs.org/api/all.html#all_os_constants
path	A										<section class="prog__container"><p id="obj.desc">The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:\n<pre><code class="lang-js">const path = require(&#39;path&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_path
path.basename	A										<section class="prog__container"><p id="obj.desc">The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to\nthe Unix <code>basename</code> command.\nFor example:\n<pre><code class="lang-js">path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;)\n// Returns: &#39;quux.html&#39;\n\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;)\n// Returns: &#39;quux&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string or if <code>ext</code> is given\nand is not a string.\n<pre><code>path.basename(path[, ext])</code></pre></section>	http://nodejs.org/api/all.html#all_path_basename_path_ext
path basename	R	path.basename										http://nodejs.org/api/all.html#all_path_basename_path_ext
path.dirname	A										<section class="prog__container"><p id="obj.desc">The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to\nthe Unix <code>dirname</code> command.\nFor example:\n<pre><code class="lang-js">path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string.\n<pre><code>path.dirname(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_dirname_path
path dirname	R	path.dirname										http://nodejs.org/api/all.html#all_path_dirname_path
path.extname	A										<section class="prog__container"><p id="obj.desc">The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last\noccurrence of the <code>.</code> (period) character to end of string in the last portion of\nthe <code>path</code>.  If there is no <code>.</code> in the last portion of the <code>path</code>, or if the\nfirst character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then\nan empty string is returned.\nFor example:\n<pre><code class="lang-js">path.extname(&#39;index.html&#39;)\n// Returns: &#39;.html&#39;\n\npath.extname(&#39;index.coffee.md&#39;)\n// Returns: &#39;.md&#39;\n\npath.extname(&#39;index.&#39;)\n// Returns: &#39;.&#39;\n\npath.extname(&#39;index&#39;)\n// Returns: &#39;&#39;\n\npath.extname(&#39;.index&#39;)\n// Returns: &#39;&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string.\n<pre><code>path.extname(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_extname_path
path extname	R	path.extname										http://nodejs.org/api/all.html#all_path_extname_path
path.format	A										<section class="prog__container"><p id="obj.desc">The <code>path.format()</code> method returns a path string from an object. This is the\nopposite of <code>path.parse()</code>.\nThe following process is used when constructing the path string:\n<ul>\n<li><code>output</code> is set to an empty string.</li>\n<li>If <code>pathObject.dir</code> is specified, <code>pathObject.dir</code> is appended to <code>output</code>\nfollowed by the value of <code>path.sep</code>;</li>\n<li>Otherwise, if <code>pathObject.root</code> is specified, <code>pathObject.root</code> is appended\nto <code>output</code>.</li>\n<li>If <code>pathObject.base</code> is specified, <code>pathObject.base</code> is appended to <code>output</code>;</li>\n<li>Otherwise:<ul>\n<li>If <code>pathObject.name</code> is specified, <code>pathObject.name</code> is appended to <code>output</code></li>\n<li>If <code>pathObject.ext</code> is specified, <code>pathObject.ext</code> is appended to <code>output</code>.</li>\n</ul>\n</li>\n<li>Return <code>output</code></li>\n</ul>\nFor example, on POSIX:\n<pre><code class="lang-js">// If `dir` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned.\npath.format({\n  dir: &#39;/home/user/dir&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;/home/user/dir/file.txt&#39;\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included.\npath.format({\n  root: &#39;/&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;/file.txt&#39;\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: &#39;/&#39;,\n  name: &#39;file&#39;,\n  ext: &#39;.txt&#39;\n});\n// Returns: &#39;/file.txt&#39;\n\n// `base` will be returned if `dir` or `root` are not provided.\npath.format({\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;file.txt&#39;\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">path.format({\n    root : &quot;C:\\&quot;,\n    dir : &quot;C:\\path\\dir&quot;,\n    base : &quot;file.txt&quot;,\n    ext : &quot;.txt&quot;,\n    name : &quot;file&quot;\n});\n// Returns: &#39;C:\\path\\dir\\file.txt&#39;\n</code></pre>\n<pre><code>path.format(pathObject)</code></pre></section>	http://nodejs.org/api/all.html#all_path_format_pathobject
path format	R	path.format										http://nodejs.org/api/all.html#all_path_format_pathobject
path.isAbsolute	A										<section class="prog__container"><p id="obj.desc">The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.\nIf the given <code>path</code> is a zero-length string, <code>false</code> will be returned.\nFor example on POSIX:\n<pre><code class="lang-js">path.isAbsolute(&#39;/foo/bar&#39;) // true\npath.isAbsolute(&#39;/baz/..&#39;)  // true\npath.isAbsolute(&#39;qux/&#39;)     // false\npath.isAbsolute(&#39;.&#39;)        // false\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">path.isAbsolute(&#39;//server&#39;)    // true\npath.isAbsolute(&#39;\\\\server&#39;)  // true\npath.isAbsolute(&#39;C:/foo/..&#39;)   // true\npath.isAbsolute(&#39;C:\\foo\\..&#39;) // true\npath.isAbsolute(&#39;bar\\baz&#39;)    // false\npath.isAbsolute(&#39;bar/baz&#39;)     // false\npath.isAbsolute(&#39;.&#39;)           // false\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string.\n<pre><code>path.isAbsolute(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_isabsolute_path
path isAbsolute	R	path.isAbsolute										http://nodejs.org/api/all.html#all_path_isabsolute_path
path.join	A										<section class="prog__container"><p id="obj.desc">The <code>path.join()</code> method joins all given <code>path</code> segments together using the\nplatform specific separator as a delimiter, then normalizes the resulting path.\nZero-length <code>path</code> segments are ignored. If the joined path string is a\nzero-length string then <code>&#39;.&#39;</code> will be returned, representing the current\nworking directory.\nFor example:\n<pre><code class="lang-js">path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n// throws TypeError: Arguments to path.join must be strings\n</code></pre>\nA <code>TypeError</code> is thrown if any of the path segments is not a string.\n<pre><code>path.join([...paths])</code></pre></section>	http://nodejs.org/api/all.html#all_path_join_...paths
path join	R	path.join										http://nodejs.org/api/all.html#all_path_join_...paths
path.normalize	A										<section class="prog__container"><p id="obj.desc">The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>&#39;..&#39;</code> and\n<code>&#39;.&#39;</code> segments.\nWhen multiple, sequential path segment separation characters are found (e.g.\n<code>/</code> on POSIX and <code>\</code> on Windows), they are replaced by a single instance of the\nplatform specific path segment separator. Trailing separators are preserved.\nIf the <code>path</code> is a zero-length string, <code>&#39;.&#39;</code> is returned, representing the\ncurrent working directory.\nFor example on POSIX:\n<pre><code class="lang-js">path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;)\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">path.normalize(&#39;C:\\temp\\\\foo\\bar\\..\\&#39;);\n// Returns: &#39;C:\\temp\\foo\\&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string.\n<pre><code>path.normalize(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_normalize_path
path normalize	R	path.normalize										http://nodejs.org/api/all.html#all_path_normalize_path
path.parse	A										<section class="prog__container"><p id="obj.desc">The <code>path.parse()</code> method returns an object whose properties represent\nsignificant elements of the <code>path</code>.\nThe returned object will have the following properties:\n<ul>\n<li><code>root</code> {String}</li>\n<li><code>dir</code> {String}</li>\n<li><code>base</code> {String}</li>\n<li><code>ext</code> {String}</li>\n<li><code>name</code> {String}</li>\n</ul>\nFor example on POSIX:\n<pre><code class="lang-js">path.parse(&#39;/home/user/dir/file.txt&#39;)\n// Returns:\n// {\n//    root : &quot;/&quot;,\n//    dir : &quot;/home/user/dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre>\n<pre><code class="lang-text">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot;  /    home/user/dir / file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">path.parse(&#39;C:\\path\\dir\\file.txt&#39;)\n// Returns:\n// {\n//    root : &quot;C:\\&quot;,\n//    dir : &quot;C:\\path\\dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre>\n<pre><code class="lang-text">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot; C:\      path\dir   \ file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored -- they are purely for formatting)\n</code></pre>\nA <code>TypeError</code> is thrown if <code>path</code> is not a string.\n<pre><code>path.parse(path)</code></pre></section>	http://nodejs.org/api/all.html#all_path_parse_path
path parse	R	path.parse										http://nodejs.org/api/all.html#all_path_parse_path
path.relative	A										<section class="prog__container"><p id="obj.desc">The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>.\nIf <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code>\non each), a zero-length string is returned.\nIf a zero-length string is passed as <code>from</code> or <code>to</code>, the current working\ndirectory will be used instead of the zero-length strings.\nFor example on POSIX:\n<pre><code class="lang-js">path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;)\n// Returns: &#39;../../impl/bbb&#39;\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">path.relative(&#39;C:\\orandea\\test\\aaa&#39;, &#39;C:\\orandea\\impl\\bbb&#39;)\n// Returns: &#39;..\\..\\impl\\bbb&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if neither <code>from</code> nor <code>to</code> is a string.\n<pre><code>path.relative(from, to)</code></pre></section>	http://nodejs.org/api/all.html#all_path_relative_from_to
path relative	R	path.relative										http://nodejs.org/api/all.html#all_path_relative_from_to
path.resolve	A										<section class="prog__container"><p id="obj.desc">The <code>path.resolve()</code> method resolves a sequence of paths or path segments into\nan absolute path.\nThe given sequence of paths is processed from right to left, with each\nsubsequent <code>path</code> prepended until an absolute path is constructed.\nFor instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,\ncalling <code>path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;)</code> would return <code>/bar/baz</code>.\nIf after processing all given <code>path</code> segments an absolute path has not yet\nbeen generated, the current working directory is used.\nThe resulting path is normalized and trailing slashes are removed unless the\npath is resolved to the root directory.\nZero-length <code>path</code> segments are ignored.\nIf no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path\nof the current working directory.\nFor example:\n<pre><code class="lang-js">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\n// Returns: &#39;/foo/bar/baz&#39;\n\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\n// Returns: &#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\n// if the current working directory is /home/myself/node,\n// this returns &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n</code></pre>\nA <code>TypeError</code> is thrown if any of the arguments is not a string.\n<pre><code>path.resolve([...paths])</code></pre></section>	http://nodejs.org/api/all.html#all_path_resolve_...paths
path resolve	R	path.resolve										http://nodejs.org/api/all.html#all_path_resolve_...paths
path.delimiter	A										<section class="prog__container"><p id="obj.desc">Provides the platform-specific path delimiter:\n<ul>\n<li><code>;</code> for Windows</li>\n<li><code>:</code> for POSIX</li>\n</ul>\nFor example, on POSIX:\n<pre><code class="lang-js">console.log(process.env.PATH)\n// Prints: &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">console.log(process.env.PATH)\n// Prints: &#39;C:\Windows\system32;C:\Windows;C:\Program Files\node\&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: [&#39;C:\\Windows\\system32&#39;, &#39;C:\\Windows&#39;, &#39;C:\\Program Files\\node\\&#39;]\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_path_delimiter
path delimiter	R	path.delimiter										http://nodejs.org/api/all.html#all_path_delimiter
path.posix	A										<section class="prog__container"><p id="obj.desc">The <code>path.posix</code> property provides access to POSIX specific implementations\nof the <code>path</code> methods.\n</section>	http://nodejs.org/api/all.html#all_path_posix
path posix	R	path.posix										http://nodejs.org/api/all.html#all_path_posix
path.sep	A										<section class="prog__container"><p id="obj.desc">Provides the platform-specific path segment separator:\n<ul>\n<li><code>\</code> on Windows</li>\n<li><code>/</code> on POSIX</li>\n</ul>\nFor example on POSIX:\n<pre><code class="lang-js">&#39;foo/bar/baz&#39;.split(path.sep)\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\nOn Windows:\n<pre><code class="lang-js">&#39;foo\\bar\\baz&#39;.split(path.sep)\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_path_sep
path sep	R	path.sep										http://nodejs.org/api/all.html#all_path_sep
path.win32	A										<section class="prog__container"><p id="obj.desc">The <code>path.win32</code> property provides access to Windows-specific implementations\nof the <code>path</code> methods.\n<em>Note</em>: On Windows, both the forward slash (<code>/</code>) and backward slash (<code>\</code>)\ncharacters are accepted as path delimiters; however, only the backward slash\n(<code>\</code>) will be used in return values.\n<!-- [end-include:path.md] -->\n<!-- [start-include:process.md] -->\n</section>	http://nodejs.org/api/all.html#all_path_win32
path win32	R	path.win32										http://nodejs.org/api/all.html#all_path_win32
punycode	A										<section class="prog__container"><p id="obj.desc"><strong>The version of the punycode module bundled in Node.js is being deprecated</strong>.\nIn a future major version of Node.js this module will be removed. Users\ncurrently depending on the <code>punycode</code> module should switch to using the\nuserland-provided Punycode.js module instead.\nThe <code>punycode</code> module is a bundled version of the Punycode.js module. It\ncan be accessed using:\n<pre><code class="lang-js">const punycode = require(&#39;punycode&#39;);\n</code></pre>\nPunycode is a character encoding scheme defined by RFC 3492 that is\nprimarily intended for use in Internationalized Domain Names. Because host\nnames in URLs are limited to ASCII characters only, Domain Names that contain\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\nFor instance, the Japanese character that translates into the English word,\n<code>&#39;example&#39;</code> is <code>&#39;例&#39;</code>. The Internationalized Domain Name, <code>&#39;例.com&#39;</code> (equivalent\nto <code>&#39;example.com&#39;</code>) is represented by Punycode as the ASCII string\n<code>&#39;xn--fsq.com&#39;</code>.\nThe <code>punycode</code> module provides a simple implementation of the Punycode standard.\n<em>Note</em>: The <code>punycode</code> module is a third-party dependency used by Node.js and\nmade available to developers as a convenience. Fixes or other modifications to\nthe module must be directed to the Punycode.js project.\n</section>	http://nodejs.org/api/all.html#all_punycode
punycode.decode	A										<section class="prog__container"><p id="obj.desc">The <code>punycode.decode()</code> method converts a Punycode string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.\n<pre><code class="lang-js">punycode.decode(&#39;maana-pta&#39;); // &#39;mañana&#39;\npunycode.decode(&#39;--dqo34k&#39;); // &#39;☃-⌘&#39;\n</code></pre>\n<pre><code>punycode.decode(string)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_decode_string
punycode decode	R	punycode.decode										http://nodejs.org/api/all.html#all_punycode_decode_string
punycode.encode	A										<section class="prog__container"><p id="obj.desc">The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\nPunycode string of ASCII-only characters.\n<pre><code class="lang-js">punycode.encode(&#39;mañana&#39;); // &#39;maana-pta&#39;\npunycode.encode(&#39;☃-⌘&#39;); // &#39;--dqo34k&#39;\n</code></pre>\n<pre><code>punycode.encode(string)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_encode_string
punycode encode	R	punycode.encode										http://nodejs.org/api/all.html#all_punycode_encode_string
punycode.toASCII	A										<section class="prog__container"><p id="obj.desc">The <code>punycode.toASCII()</code> method converts a Unicode string representing an\nInternationalized Domain Name to Punycode. Only the non-ASCII parts of the\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\nalready only contains ASCII characters will have no effect.\n<pre><code class="lang-js">// encode domain names\npunycode.toASCII(&#39;mañana.com&#39;);  // &#39;xn--maana-pta.com&#39;\npunycode.toASCII(&#39;☃-⌘.com&#39;);   // &#39;xn----dqo34k.com&#39;\npunycode.toASCII(&#39;example.com&#39;); // &#39;example.com&#39;\n</code></pre>\n<pre><code>punycode.toASCII(domain)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_toascii_domain
punycode toASCII	R	punycode.toASCII										http://nodejs.org/api/all.html#all_punycode_toascii_domain
punycode.toUnicode	A										<section class="prog__container"><p id="obj.desc">The <code>punycode.toUnicode()</code> method converts a string representing a domain name\ncontaining Punycode encoded characters into Unicode. Only the Punycode\nencoded parts of the domain name are be converted.\n<pre><code class="lang-js">// decode domain names\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); // &#39;mañana.com&#39;\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;);  // &#39;☃-⌘.com&#39;\npunycode.toUnicode(&#39;example.com&#39;);       // &#39;example.com&#39;\n</code></pre>\n<pre><code>punycode.toUnicode(domain)</code></pre></section>	http://nodejs.org/api/all.html#all_punycode_tounicode_domain
punycode toUnicode	R	punycode.toUnicode										http://nodejs.org/api/all.html#all_punycode_tounicode_domain
punycode.ucs2	A										<section class="prog__container"></section>	http://nodejs.org/api/all.html#all_punycode_ucs2
punycode ucs2	R	punycode.ucs2										http://nodejs.org/api/all.html#all_punycode_ucs2
punycode.version	A										<section class="prog__container"><p id="obj.desc">Returns a string identifying the current Punycode.js version number.\n<!-- [end-include:punycode.md] -->\n<!-- [start-include:querystring.md] -->\n</section>	http://nodejs.org/api/all.html#all_punycode_version
punycode version	R	punycode.version										http://nodejs.org/api/all.html#all_punycode_version
querystring	A										<section class="prog__container"><p id="obj.desc">The <code>querystring</code> module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:\n<pre><code class="lang-js">const querystring = require(&#39;querystring&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_querystring
querystring.escape	A										<section class="prog__container"><p id="obj.desc">The <code>querystring.escape()</code> method performs URL percent-encoding on the given\n<code>str</code> in a manner that is optimized for the specific requirements of URL\nquery strings.\nThe <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement percent-encoding implementation if\nnecessary by assigning <code>querystring.escape</code> to an alternative function.\n<pre><code>querystring.escape(str)</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_escape_str
querystring escape	R	querystring.escape										http://nodejs.org/api/all.html#all_querystring_escape_str
querystring.parse	A										<section class="prog__container"><p id="obj.desc">The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a\ncollection of key and value pairs.\nFor example, the query string <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> is parsed into:\n<pre><code class="lang-js">{\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}\n</code></pre>\n<em>Note</em>: The object returned by the <code>querystring.parse()</code> method <em>does not</em>\nprototypically extend from the JavaScript <code>Object</code>. This means that the\ntypical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>,\nand others are not defined and <em>will not work</em>.\nBy default, percent-encoded characters within the query string will be assumed\nto use UTF-8 encoding. If an alternative character encoding is used, then an\nalternative <code>decodeURIComponent</code> option will need to be specified as illustrated\nin the following example:\n<pre><code class="lang-js">// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,\n  { decodeURIComponent: gbkDecodeURIComponent })\n</code></pre>\n<pre><code>querystring.parse(str[, sep[, eq[, options]]])</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_parse_str_sep_eq_options
querystring parse	R	querystring.parse										http://nodejs.org/api/all.html#all_querystring_parse_str_sep_eq_options
querystring.stringify	A										<section class="prog__container"><p id="obj.desc">The <code>querystring.stringify()</code> method produces a URL query string from a\ngiven <code>obj</code> by iterating through the object&#39;s &quot;own properties&quot;.\nFor example:\n<pre><code class="lang-js">querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\n// returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\n// returns &#39;foo:bar;baz:qux&#39;\n</code></pre>\nBy default, characters requiring percent-encoding within the query string will\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\n<code>encodeURIComponent</code> option will need to be specified as illustrated in the\nfollowing example:\n<pre><code class="lang-js">// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: &#39;中文&#39;, foo: &#39;bar&#39; }, null, null,\n  { encodeURIComponent: gbkEncodeURIComponent })\n</code></pre>\n<pre><code>querystring.stringify(obj[, sep[, eq[, options]]])</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_stringify_obj_sep_eq_options
querystring stringify	R	querystring.stringify										http://nodejs.org/api/all.html#all_querystring_stringify_obj_sep_eq_options
querystring.unescape	A										<section class="prog__container"><p id="obj.desc">The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded\ncharacters on the given <code>str</code>.\nThe <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement decoding implementation if\nnecessary by assigning <code>querystring.unescape</code> to an alternative function.\nBy default, the <code>querystring.unescape()</code> method will attempt to use the\nJavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,\na safer equivalent that does not throw on malformed URLs will be used.\n<!-- [end-include:querystring.md] -->\n<!-- [start-include:readline.md] -->\n<pre><code>querystring.unescape(str)</code></pre></section>	http://nodejs.org/api/all.html#all_querystring_unescape_str
querystring unescape	R	querystring.unescape										http://nodejs.org/api/all.html#all_querystring_unescape_str
readline	A										<section class="prog__container"><p id="obj.desc">The <code>readline</code> module provides an interface for reading data from a Readable\nstream (such as <code>process.stdin</code>) one line at a time. It can be accessed using:\n<pre><code class="lang-js">const readline = require(&#39;readline&#39;);\n</code></pre>\nThe following simple example illustrates the basic use of the <code>readline</code> module.\n<pre><code class="lang-js">const readline = require(&#39;readline&#39;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n</code></pre>\n<em>Note</em> Once this code is invoked, the Node.js application will not\nterminate until the <code>readline.Interface</code> is closed because the interface\nwaits for data to be received on the <code>input</code> stream.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_readline
readline.clearLine	A										<section class="prog__container"><p id="obj.desc">The <code>readline.clearLine()</code> method clears current line of given TTY stream\nin a specified direction identified by <code>dir</code>.\n<pre><code>readline.clearLine(stream, dir)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_clearline_stream_dir
readline clearLine	R	readline.clearLine										http://nodejs.org/api/all.html#all_readline_clearline_stream_dir
readline.clearScreenDown	A										<section class="prog__container"><p id="obj.desc">The <code>readline.clearScreenDown()</code> method clears the given TTY stream from\nthe current position of the cursor down.\n<pre><code>readline.clearScreenDown(stream)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_clearscreendown_stream
readline clearScreenDown	R	readline.clearScreenDown										http://nodejs.org/api/all.html#all_readline_clearscreendown_stream
readline.createInterface	A										<section class="prog__container"><p id="obj.desc">The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\ninstance.\nFor example:\n<pre><code class="lang-js">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</code></pre>\nOnce the <code>readline.Interface</code> instance is created, the most common case is to\nlisten for the <code>&#39;line&#39;</code> event:\n<pre><code class="lang-js">rl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n</code></pre>\nIf <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get\nthe best compatibility if it defines an <code>output.columns</code> property and emits\na <code>&#39;resize&#39;</code> event on the <code>output</code> if or when the columns ever change\n(<code>process.stdout</code> does this automatically when it is a TTY).\n<pre><code>readline.createInterface(options)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_createinterface_options
readline createInterface	R	readline.createInterface										http://nodejs.org/api/all.html#all_readline_createinterface_options
readline.cursorTo	A										<section class="prog__container"><p id="obj.desc">The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\ngiven TTY <code>stream</code>.\n<pre><code>readline.cursorTo(stream, x, y)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_cursorto_stream_x_y
readline cursorTo	R	readline.cursorTo										http://nodejs.org/api/all.html#all_readline_cursorto_stream_x_y
readline.emitKeypressEvents	A										<section class="prog__container"><p id="obj.desc">The <code>readline.emitKeypressEvents()</code> method causes the given Writable\n<code>stream</code> to begin emitting <code>&#39;keypress&#39;</code> events corresponding to received input.\nOptionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which\nautocompletion is disabled when copy-pasted input is detected.\nIf the <code>stream</code> is a TTY, then it must be in raw mode.\n<pre><code class="lang-js">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</code></pre>\n<pre><code>readline.emitKeypressEvents(stream[, interface])</code></pre></section>	http://nodejs.org/api/all.html#all_readline_emitkeypressevents_stream_interface
readline emitKeypressEvents	R	readline.emitKeypressEvents										http://nodejs.org/api/all.html#all_readline_emitkeypressevents_stream_interface
readline.moveCursor	A										<section class="prog__container"><p id="obj.desc">The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\nposition in a given TTY <code>stream</code>.\n<h2>Example: Tiny CLI</h2>\nThe following example illustrates the use of <code>readline.Interface</code> class to\nimplement a small command-line interface:\n<pre><code class="lang-js">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: &#39;OHAI&gt; &#39;\n});\n\nrl.prompt();\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  switch(line.trim()) {\n    case &#39;hello&#39;:\n      console.log(&#39;world!&#39;);\n      break;\n    default:\n      console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);\n      break;\n  }\n  rl.prompt();\n}).on(&#39;close&#39;, () =&gt; {\n  console.log(&#39;Have a great day!&#39;);\n  process.exit(0);\n});\n</code></pre>\n<h2>Example: Read File Stream Line-by-Line</h2>\nA common use case for <code>readline</code> is to consume input from a filesystem\nReadable stream one line at a time, as illustrated in the following\nexample:\n<pre><code class="lang-js">const readline = require(&#39;readline&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream(&#39;sample.txt&#39;)\n});\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Line from file: ${line}`);\n});\n</code></pre>\n<!-- [end-include:readline.md] -->\n<!-- [start-include:repl.md] -->\n<pre><code>readline.moveCursor(stream, dx, dy)</code></pre></section>	http://nodejs.org/api/all.html#all_readline_movecursor_stream_dx_dy
readline moveCursor	R	readline.moveCursor										http://nodejs.org/api/all.html#all_readline_movecursor_stream_dx_dy
Interface	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>readline.Interface</code> class are constructed using the\n<code>readline.createInterface()</code> method. Every instance is associated with a\nsingle <code>input</code> Readable stream and a single <code>output</code> Writable stream.\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\nand is read from, the <code>input</code> stream.\n</section>	http://nodejs.org/api/all.html#all_interface
Interface.close	A										<section class="prog__container"><p id="obj.desc">The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\nthe <code>&#39;close&#39;</code> event will be emitted.\n<pre><code>rl.close()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_close
Interface close	R	Interface.close										http://nodejs.org/api/all.html#all_interface_close
Interface.pause	A										<section class="prog__container"><p id="obj.desc">The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\nlater if necessary.\nCalling <code>rl.pause()</code> does not immediately pause other events (including\n<code>&#39;line&#39;</code>) from being emitted by the <code>readline.Interface</code> instance.\n<pre><code>rl.pause()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_pause
Interface pause	R	Interface.pause										http://nodejs.org/api/all.html#all_interface_pause
Interface.prompt	A										<section class="prog__container"><p id="obj.desc">The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\nlocation at which to provide input.\nWhen called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been\npaused.\nIf the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the prompt is not written.\n<pre><code>rl.prompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#all_interface_prompt_preservecursor
Interface prompt	R	Interface.prompt										http://nodejs.org/api/all.html#all_interface_prompt_preservecursor
Interface.question	A										<section class="prog__container"><p id="obj.desc">The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\nfunction passing the provided input as the first argument.\nWhen called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been\npaused.\nIf the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>query</code> is not written.\nExample usage:\n<pre><code class="lang-js">rl.question(&#39;What is your favorite food?&#39;, (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</code></pre>\n<em>Note</em>: The <code>callback</code> function passed to <code>rl.question()</code> does not follow the\ntypical pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.\nThe <code>callback</code> is called with the provided answer as the only argument.\n<pre><code>rl.question(query, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_interface_question_query_callback
Interface question	R	Interface.question										http://nodejs.org/api/all.html#all_interface_question_query_callback
Interface.resume	A										<section class="prog__container"><p id="obj.desc">The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.\n<pre><code>rl.resume()</code></pre></section>	http://nodejs.org/api/all.html#all_interface_resume
Interface resume	R	Interface.resume										http://nodejs.org/api/all.html#all_interface_resume
Interface.setPrompt	A										<section class="prog__container"><p id="obj.desc">The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\nwhenever <code>rl.prompt()</code> is called.\n<pre><code>rl.setPrompt(prompt)</code></pre></section>	http://nodejs.org/api/all.html#all_interface_setprompt_prompt
Interface setPrompt	R	Interface.setPrompt										http://nodejs.org/api/all.html#all_interface_setprompt_prompt
Interface.write	A										<section class="prog__container"><p id="obj.desc">The <code>rl.write()</code> method will write either <code>data</code> or a key sequence  identified\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\na TTY text terminal.\nIf <code>key</code> is specified, <code>data</code> is ignored.\nWhen called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been\npaused.\nIf the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>data</code> and <code>key</code> are not written.\nFor example:\n<pre><code class="lang-js">rl.write(&#39;Delete this!&#39;);\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: &#39;u&#39;});\n</code></pre>\n<em>Note</em>: The <code>rl.write()</code> method will write the data to the <code>readline</code>\nInterface&#39;s <code>input</code> <em>as if it were provided by the user</em>.\n<pre><code>rl.write(data[, key])</code></pre></section>	http://nodejs.org/api/all.html#all_interface_write_data_key
Interface write	R	Interface.write										http://nodejs.org/api/all.html#all_interface_write_data_key
Interface.close	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;close&#39;</code> event is emitted when one of the following occur:\n<ul>\n<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has\nrelinquished control over the <code>input</code> and <code>output</code> streams;</li>\n<li>The <code>input</code> stream receives its <code>&#39;end&#39;</code> event;</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no\n<code>SIGINT</code> event listener registered on the <code>readline.Interface</code> instance.</li>\n</ul>\nThe listener function is called without passing any arguments.\nThe <code>readline.Interface</code> instance should be considered to be &quot;finished&quot; once\nthe <code>&#39;close&#39;</code> event is emitted.\n</section>	http://nodejs.org/api/all.html#all_interface_close
Interface.line	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;line&#39;</code> event is emitted whenever the <code>input</code> stream receives an\nend-of-line input (<code>\n</code>, <code>\r</code>, or <code>\r\n</code>). This usually occurs when the user\npresses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.\nThe listener function is called with a string containing the single line of\nreceived input.\nFor example:\n<pre><code class="lang-js">rl.on(&#39;line&#39;, (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_interface_line
Interface line	R	Interface.line										http://nodejs.org/api/all.html#all_interface_line
Interface.pause	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;pause&#39;</code> event is emitted when one of the following occur:\n<ul>\n<li>The <code>input</code> stream is paused.</li>\n<li>The <code>input</code> stream is not paused and receives the <code>SIGCONT</code> event. (See\nevents <code>SIGTSTP</code> and <code>SIGCONT</code>)</li>\n</ul>\nThe listener function is called without passing any arguments.\nFor example:\n<pre><code class="lang-js">rl.on(&#39;pause&#39;, () =&gt; {\n  console.log(&#39;Readline paused.&#39;);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_interface_pause
Interface.resume	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;resume&#39;</code> event is emitted whenever the <code>input</code> stream is resumed.\nThe listener function is called without passing any arguments.\n<pre><code class="lang-js">rl.on(&#39;resume&#39;, () =&gt; {\n  console.log(&#39;Readline resumed.&#39;);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_interface_resume
Interface.SIGCONT	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;SIGCONT&#39;</code> event is emitted when a Node.js process previously moved into\nthe background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\nforeground using fg(1).\nIf the <code>input</code> stream was paused <em>before</em> the <code>SIGTSTP</code> request, this event will\nnot be emitted.\nThe listener function is invoked without passing any arguments.\nFor example:\n<pre><code class="lang-js">rl.on(&#39;SIGCONT&#39;, () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</code></pre>\n<em>Note</em>: The <code>&#39;SIGCONT&#39;</code> event is <em>not</em> supported on Windows.\n</section>	http://nodejs.org/api/all.html#all_interface_sigcont
Interface SIGCONT	R	Interface.SIGCONT										http://nodejs.org/api/all.html#all_interface_sigcont
Interface.SIGINT	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;SIGINT&#39;</code> event is emitted whenever the <code>input</code> stream receives a\n<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>&#39;SIGINT&#39;</code> event\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>&#39;pause&#39;</code>\nevent will be emitted.\nThe listener function is invoked without passing any arguments.\nFor example:\n<pre><code class="lang-js">rl.on(&#39;SIGINT&#39;, () =&gt; {\n  rl.question(&#39;Are you sure you want to exit?&#39;, (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_interface_sigint
Interface SIGINT	R	Interface.SIGINT										http://nodejs.org/api/all.html#all_interface_sigint
Interface.SIGTSTP	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;SIGTSTP&#39;</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\nwill be sent to the background.\nWhen the program is resumed using fg(1), the <code>&#39;pause&#39;</code> and <code>SIGCONT</code> events\nwill be emitted. These can be used to resume the <code>input</code> stream.\nThe <code>&#39;pause&#39;</code> and <code>&#39;SIGCONT&#39;</code> events will not be emitted if the <code>input</code> was\npaused before the process was sent to the background.\nThe listener function is invoked without passing any arguments.\nFor example:\n<pre><code class="lang-js">rl.on(&#39;SIGTSTP&#39;, () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&#39;Caught SIGTSTP.&#39;);\n});\n</code></pre>\n<em>Note</em>: The <code>&#39;SIGTSTP&#39;</code> event is <em>not</em> supported on Windows.\n</section>	http://nodejs.org/api/all.html#all_interface_sigtstp
Interface SIGTSTP	R	Interface.SIGTSTP										http://nodejs.org/api/all.html#all_interface_sigtstp
repl	A										<section class="prog__container"><p id="obj.desc">The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:\n<pre><code class="lang-js">const repl = require(&#39;repl&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_repl
repl.start	A										<section class="prog__container"><p id="obj.desc">The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.\n<pre><code>repl.start([options])</code></pre></section>	http://nodejs.org/api/all.html#all_repl_start_options
repl start	R	repl.start										http://nodejs.org/api/all.html#all_repl_start_options
REPLServer	A										<section class="prog__container"><p id="obj.desc">The <code>repl.REPLServer</code> class inherits from the <code>readline.Interface</code> class.\nInstances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and\n<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.\n</section>	http://nodejs.org/api/all.html#all_replserver
REPLServer.defineCommand	A										<section class="prog__container"><p id="obj.desc">The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands\nto the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the\n<code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following\nproperties:\n<ul>\n<li><code>help</code> {String} Help text to be displayed when <code>.help</code> is entered (Optional).</li>\n<li><code>action</code> {Function} The function to execute, optionally accepting a single\nstring argument.</li>\n</ul>\nThe following example shows two new commands added to the REPL instance:\n<pre><code class="lang-js">const repl = require(&#39;repl&#39;);\n\nvar replServer = repl.start({prompt: &#39;&gt; &#39;});\nreplServer.defineCommand(&#39;sayhello&#39;, {\n  help: &#39;Say hello&#39;,\n  action: function(name) {\n    this.lineParser.reset();\n    this.bufferedCommand = &#39;&#39;;\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand(&#39;saybye&#39;, function() {\n  console.log(&#39;Goodbye!&#39;);\n  this.close();\n});\n</code></pre>\nThe new commands can then be used from within the REPL instance:\n<pre><code class="lang-txt">&gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n</code></pre>\n<pre><code>replServer.defineCommand(keyword, cmd)</code></pre></section>	http://nodejs.org/api/all.html#all_replserver_definecommand_keyword_cmd
REPLServer defineCommand	R	REPLServer.defineCommand										http://nodejs.org/api/all.html#all_replserver_definecommand_keyword_cmd
REPLServer.displayPrompt	A										<section class="prog__container"><p id="obj.desc">The <code>replServer.displayPrompt()</code> method readies the REPL instance for input\nfrom the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>\nand resuming the <code>input</code> to accept new input.\nWhen multi-line input is being entered, an ellipsis is printed rather than the\n&#39;prompt&#39;.\nWhen <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.\nThe <code>replServer.displayPrompt</code> method is primarily intended to be called from\nwithin the action function for commands registered using the\n<code>replServer.defineCommand()</code> method.\n<pre><code>replServer.displayPrompt([preserveCursor])</code></pre></section>	http://nodejs.org/api/all.html#all_replserver_displayprompt_preservecursor
REPLServer displayPrompt	R	REPLServer.displayPrompt										http://nodejs.org/api/all.html#all_replserver_displayprompt_preservecursor
REPLServer.exit	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;exit&#39;</code> event is emitted when the REPL is exited either by receiving the\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&#39;end&#39;</code> on the input stream. The listener\ncallback is invoked without any arguments.\n<pre><code class="lang-js">replServer.on(&#39;exit&#39;, () =&gt; {\n  console.log(&#39;Received &quot;exit&quot; event from repl!&#39;);\n  process.exit();\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_replserver_exit
REPLServer exit	R	REPLServer.exit										http://nodejs.org/api/all.html#all_replserver_exit
REPLServer.reset	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;reset&#39;</code> event is emitted when the REPL&#39;s context is reset. This occurs\nwhenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using\nthe default evaluator and the <code>repl.REPLServer</code> instance was created with the\n<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a\nreference to the <code>context</code> object as the only argument.\nThis can be used primarily to re-initialize REPL context to some pre-defined\nstate as illustrated in the following simple example:\n<pre><code class="lang-js">const repl = require(&#39;repl&#39;);\n\nfunction initializeContext(context) {\n  context.m = &#39;test&#39;;\n}\n\nvar r = repl.start({prompt: &#39;&gt;&#39;});\ninitializeContext(r.context);\n\nr.on(&#39;reset&#39;, initializeContext);\n</code></pre>\nWhen this code is executed, the global <code>&#39;m&#39;</code> variable can be modified but then\nreset to its initial value using the <code>.clear</code> command:\n<pre><code class="lang-js">$ ./node example.js\n&gt;m\n&#39;test&#39;\n&gt;m = 1\n1\n&gt;m\n1\n&gt;.clear\nClearing context...\n&gt;m\n&#39;test&#39;\n&gt;\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_replserver_reset
REPLServer reset	R	REPLServer.reset										http://nodejs.org/api/all.html#all_replserver_reset
stream	A										<section class="prog__container"><p id="obj.desc">A stream is an abstract interface for working with streaming data in Node.js.\nThe <code>stream</code> module provides a base API that makes it easy to build objects\nthat implement the stream interface.\nThere are many stream objects provided by Node.js. For instance, a\nrequest to an HTTP server and <code>process.stdout</code>\nare both stream instances.\nStreams can be readable, writable, or both. All streams are instances of\n<code>EventEmitter</code>.\nThe <code>stream</code> module can be accessed using:\n<pre><code class="lang-js">const stream = require(&#39;stream&#39;);\n</code></pre>\nWhile it is important for all Node.js users to understand how streams work,\nthe <code>stream</code> module itself is most useful for developers that are creating new\ntypes of stream instances. Developer&#39;s who are primarily <em>consuming</em> stream\nobjects will rarely (if ever) have need to use the <code>stream</code> module directly.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stream
stringdecoder	A										<section class="prog__container"><p id="obj.desc">The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:\n<pre><code class="lang-js">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\n</code></pre>\nThe following example shows the basic use of the <code>StringDecoder</code> class.\n<pre><code class="lang-js">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n</code></pre>\nWhen a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an\ninternal buffer is used to ensure that the decoded string does not contain\nany incomplete multibyte characters. These are held in the buffer until the\nnext call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.\nIn the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (<code>€</code>) are written over three separate operations:\n<pre><code class="lang-js">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_stringdecoder
new	A										<section class="prog__container"><p id="obj.desc"><ul>\n<li><code>encoding</code> {string} The character encoding the <code>StringDecoder</code> will use.\nDefaults to <code>&#39;utf8&#39;</code>.</li>\n</ul>\nCreates a new <code>StringDecoder</code> instance.\n</section>	http://nodejs.org/api/all.html#all_new
new.end	A										<section class="prog__container"><p id="obj.desc">Returns any remaining input stored in the internal buffer as a string. Bytes\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\nsubstitution characters appropriate for the character encoding.\nIf the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>\nis performed before returning the remaining input.\n<pre><code>stringDecoder.end([buffer])</code></pre></section>	http://nodejs.org/api/all.html#all_new_end_buffer
new end	R	new.end										http://nodejs.org/api/all.html#all_new_end_buffer
new.write	A										<section class="prog__container"><p id="obj.desc">Returns a decoded string, ensuring that any incomplete multibyte characters at\nthe end of the <code>Buffer</code> are omitted from the returned string and stored in an\ninternal buffer for the next call to <code>stringDecoder.write()</code> or\n<code>stringDecoder.end()</code>.\n<!-- [end-include:string_decoder.md] -->\n<!-- [start-include:timers.md] -->\n<pre><code>stringDecoder.write(buffer)</code></pre></section>	http://nodejs.org/api/all.html#all_new_write_buffer
new write	R	new.write										http://nodejs.org/api/all.html#all_new_write_buffer
timers	A										<section class="prog__container"><p id="obj.desc">The <code>timer</code> module exposes a global API for scheduling functions to\nbe called at some future period of time. Because the timer functions are\nglobals, there is no need to call <code>require(&#39;timers&#39;)</code> to use the API.\nThe timer functions within Node.js implement a similar API as the timers API\nprovided by Web Browsers but use a different internal implementation that is\nbuilt around the Node.js Event Loop.\n<p  id="obj.stability">Stability: 3 - Locked</p></section>	http://nodejs.org/api/all.html#all_timers
Immediate	A										<section class="prog__container"><p id="obj.desc">This object is created internally and is returned from <code>setImmediate()</code>. It\ncan be passed to <code>clearImmediate()</code> in order to cancel the scheduled\nactions.\n</section>	http://nodejs.org/api/all.html#all_immediate
Timeout	A										<section class="prog__container"><p id="obj.desc">This object is created internally and is returned from <code>setTimeout()</code> and\n<code>setInterval()</code>. It can be passed to <code>clearTimeout()</code> or\n<code>clearInterval()</code> (respectively) in order to cancel the scheduled actions.\nBy default, when a timer is scheduled using either <code>setTimeout()</code> or\n<code>setInterval()</code>, the Node.js event loop will continue running as long as the\ntimer is active. Each of the <code>Timeout</code> objects returned by these functions\nexport both <code>timeout.ref()</code> and <code>timeout.unref()</code> functions that can be used to\ncontrol this default behavior.\n</section>	http://nodejs.org/api/all.html#all_timeout
Timeout.ref	A										<section class="prog__container"><p id="obj.desc">When called, requests that the Node.js event loop <em>not</em> exit so long as the\n<code>Timeout</code> is active. Calling <code>timeout.ref()</code> multiple times will have no effect.\n<em>Note</em>: By default, all <code>Timeout</code> objects are &quot;ref&#39;d&quot;, making it normally\nunnecessary to call <code>timeout.ref()</code> unless <code>timeout.unref()</code> had been called\npreviously.\nReturns a reference to the <code>Timeout</code>.\n<pre><code>timeout.ref()</code></pre></section>	http://nodejs.org/api/all.html#all_timeout_ref
Timeout ref	R	Timeout.ref										http://nodejs.org/api/all.html#all_timeout_ref
Timeout.unref	A										<section class="prog__container"><p id="obj.desc">When called, the active <code>Timeout</code> object will not require the Node.js event loop\nto remain active. If there is no other activity keeping the event loop running,\nthe process may exit before the <code>Timeout</code> object&#39;s callback is invoked. Calling\n<code>timeout.unref()</code> multiple times will have no effect.\n<em>Note</em>: Calling <code>timeout.unref()</code> creates an internal timer that will wake the\nNode.js event loop. Creating too many of these can adversely impact performance\nof the Node.js application.\nReturns a reference to the <code>Timeout</code>.\n<pre><code>timeout.unref()</code></pre></section>	http://nodejs.org/api/all.html#all_timeout_unref
Timeout unref	R	Timeout.unref										http://nodejs.org/api/all.html#all_timeout_unref
tls_(ssl)	A										<section class="prog__container"><p id="obj.desc">The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:\n<pre><code class="lang-js">const tls = require(&#39;tls&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tls_(ssl)
tls_(ssl).connect	A										<section class="prog__container"><p id="obj.desc">Creates a new client connection to the given <code>options.port</code> and <code>options.host</code>\nIf <code>options.host</code> is omitted, it defaults to <code>localhost</code>.\nThe <code>callback</code> function, if specified, will be added as a listener for the\n<code>&#39;secureConnect&#39;</code> event.\n<code>tls.connect()</code> returns a <code>tls.TLSSocket</code> object.\n<pre><code>tls.connect(options[, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_connect_options_callback
tls_(ssl) connect	R	tls_(ssl).connect										http://nodejs.org/api/all.html#all_tls_(ssl)_connect_options_callback
tls_(ssl).connect	A										<section class="prog__container"><p id="obj.desc">Creates a new client connection to the given <code>port</code> and <code>host</code> or\n<code>options.port</code> and <code>options.host</code>. (If <code>host</code> is omitted, it defaults to\n<code>localhost</code>.)\nThe <code>callback</code> function, if specified, will be added as a listener for the\n<code>&#39;secureConnect&#39;</code> event.\n<code>tls.connect()</code> returns a <code>tls.TLSSocket</code> object.\nThe following implements a simple &quot;echo server&quot; example:\n<pre><code class="lang-js">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\nOr\n<pre><code class="lang-js">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\n<pre><code>tls.connect(port[, host][, options][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_connect_port_host_options_callback
tls_(ssl) connect	R	tls_(ssl).connect										http://nodejs.org/api/all.html#all_tls_(ssl)_connect_port_host_options_callback
tls_(ssl).createSecureContext	A										<section class="prog__container"><p id="obj.desc">The <code>tls.createSecureContext()</code> method creates a credentials object.\nIf the &#39;ca&#39; option is not given, then Node.js will use the default\npublicly trusted list of CAs as given in\nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt.\n<pre><code>tls.createSecureContext(options)</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_createsecurecontext_options
tls_(ssl) createSecureContext	R	tls_(ssl).createSecureContext										http://nodejs.org/api/all.html#all_tls_(ssl)_createsecurecontext_options
tls_(ssl).createServer	A										<section class="prog__container"><p id="obj.desc">Creates a new tls.Server.  The <code>secureConnectionListener</code>, if provided, is\nautomatically set as a listener for the <code>&#39;secureConnection&#39;</code> event.\nFor the <code>ciphers</code> option, the default cipher suite is:\n<pre><code class="lang-text">ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</code></pre>\nThe default cipher suite prefers GCM ciphers for Chrome&#39;s &#39;modern\ncryptography&#39; setting and also prefers ECDHE and DHE ciphers for Perfect\nForward Secrecy, while offering <em>some</em> backward compatibility.\n128 bit AES is preferred over 192 and 256 bit AES in light of specific\nattacks affecting larger AES key sizes.\nOld clients that rely on insecure and deprecated RC4 or DES-based ciphers\n(like Internet Explorer 6) cannot complete the handshaking process with\nthe default configuration. If these clients <em>must</em> be supported, the\nTLS recommendations may offer a compatible cipher suite. For more details\non the format, see the OpenSSL cipher list format documentation.\nThe following illustrates a simple echo server:\n<pre><code class="lang-js">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\nOr\n<pre><code class="lang-js">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\nThis server can be tested by connecting to it using <code>openssl s_client</code>:\n<pre><code class="lang-sh">openssl s_client -connect 127.0.0.1:8000\n</code></pre>\n<pre><code>tls.createServer(options[, secureConnectionListener])</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_createserver_options_secureconnectionlistener
tls_(ssl) createServer	R	tls_(ssl).createServer										http://nodejs.org/api/all.html#all_tls_(ssl)_createserver_options_secureconnectionlistener
tls_(ssl).getCiphers	A										<section class="prog__container"><p id="obj.desc">Returns an array with the names of the supported SSL ciphers.\nFor example:\n<pre><code class="lang-js">console.log(tls.getCiphers()); // [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]\n</code></pre>\n<pre><code>tls.getCiphers()</code></pre></section>	http://nodejs.org/api/all.html#all_tls_(ssl)_getciphers
tls_(ssl) getCiphers	R	tls_(ssl).getCiphers										http://nodejs.org/api/all.html#all_tls_(ssl)_getciphers
tls.Server	A										<section class="prog__container"><p id="obj.desc">The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted\nconnections using TLS or SSL.\n</section>	http://nodejs.org/api/all.html#all_tls.server
tls Server	R	tls.Server										http://nodejs.org/api/all.html#all_tls server
tls.Server.addContext	A										<section class="prog__container"><p id="obj.desc">The <code>server.addContext()</code> method adds a secure context that will be used if\nthe client request&#39;s SNI hostname matches the supplied <code>hostname</code> (or wildcard).\n<pre><code>server.addContext(hostname, context)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_addcontext_hostname_context
tls.Server addContext	R	tls.Server.addContext										http://nodejs.org/api/all.html#all_tls.server_addcontext_hostname_context
tls Server addContext	R	tls.Server addContext										http://nodejs.org/api/all.html#all_tls server_addcontext_hostname_context
tls.Server.address	A										<section class="prog__container"><p id="obj.desc">Returns the bound address, the address family name, and port of the\nserver as reported by the operating system.  See <code>net.Server.address()</code> for\nmore information.\n<pre><code>server.address()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_address
tls.Server address	R	tls.Server.address										http://nodejs.org/api/all.html#all_tls.server_address
tls Server address	R	tls.Server address										http://nodejs.org/api/all.html#all_tls server_address
tls.Server.close	A										<section class="prog__container"><p id="obj.desc">The <code>server.close()</code> method stops the server from accepting new connections.\nThis function operates asynchronously. The <code>&#39;close&#39;</code> event will be emitted\nwhen the server has no more open connections.\n<pre><code>server.close([callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_close_callback
tls.Server close	R	tls.Server.close										http://nodejs.org/api/all.html#all_tls.server_close_callback
tls Server close	R	tls.Server close										http://nodejs.org/api/all.html#all_tls server_close_callback
tls.Server.getTicketKeys	A										<section class="prog__container"><p id="obj.desc">Returns a <code>Buffer</code> instance holding the keys currently used for\nencryption/decryption of the TLS Session Tickets\n<pre><code>server.getTicketKeys()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_getticketkeys
tls.Server getTicketKeys	R	tls.Server.getTicketKeys										http://nodejs.org/api/all.html#all_tls.server_getticketkeys
tls Server getTicketKeys	R	tls.Server getTicketKeys										http://nodejs.org/api/all.html#all_tls server_getticketkeys
tls.Server.listen	A										<section class="prog__container"><p id="obj.desc">The <code>server.listen()</code> methods instructs the server to begin accepting\nconnections on the specified <code>port</code> and <code>hostname</code>.\nThis function operates asynchronously. If the <code>callback</code> is given, it will be\ncalled when the server has started listening.\nSee <code>net.Server</code> for more information.\n<pre><code>server.listen(port[, hostname][, callback])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_listen_port_hostname_callback
tls.Server listen	R	tls.Server.listen										http://nodejs.org/api/all.html#all_tls.server_listen_port_hostname_callback
tls Server listen	R	tls.Server listen										http://nodejs.org/api/all.html#all_tls server_listen_port_hostname_callback
tls.Server.setTicketKeys	A										<section class="prog__container"><p id="obj.desc">Updates the keys for encryption/decryption of the TLS Session Tickets.\n<em>Note</em>: The key&#39;s <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in\ntls.createServer for\nmore information on how it is used.\n<em>Note</em>: Changes to the ticket keys are effective only for future server\nconnections. Existing or currently pending server connections will use the\nprevious keys.\n<pre><code>server.setTicketKeys(keys)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.server_setticketkeys_keys
tls.Server setTicketKeys	R	tls.Server.setTicketKeys										http://nodejs.org/api/all.html#all_tls.server_setticketkeys_keys
tls Server setTicketKeys	R	tls.Server setTicketKeys										http://nodejs.org/api/all.html#all_tls server_setticketkeys_keys
tls.Server.connections	A										<section class="prog__container"><p id="obj.desc">Returns the current number of concurrent connections on the server.\n</section>	http://nodejs.org/api/all.html#all_tls.server_connections
tls.Server connections	R	tls.Server.connections										http://nodejs.org/api/all.html#all_tls.server_connections
tls Server connections	R	tls.Server connections										http://nodejs.org/api/all.html#all_tls server_connections
tls.Server.tlsClientError	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;tlsClientError&#39;</code> event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:\n<ul>\n<li><code>exception</code> {Error} The <code>Error</code> object describing the error</li>\n<li><code>tlsSocket</code> {tls.TLSSocket} The <code>tls.TLSSocket</code> instance from which the\nerror originated.</li>\n</ul>\n</section>	http://nodejs.org/api/all.html#all_tls.server_tlsclienterror
tls.Server tlsClientError	R	tls.Server.tlsClientError										http://nodejs.org/api/all.html#all_tls.server_tlsclienterror
tls Server tlsClientError	R	tls.Server tlsClientError										http://nodejs.org/api/all.html#all_tls server_tlsclienterror
tls.Server.newSession	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;newSession&#39;</code> event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The listener callback is passed\nthree arguments when called:\n<ul>\n<li><code>sessionId</code> - The TLS session identifier</li>\n<li><code>sessionData</code> - The TLS session data</li>\n<li><code>callback</code> {Function} A callback function taking no arguments that must be\ninvoked in order for data to be sent or received over the secure connection.</li>\n</ul>\n<em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.\n</section>	http://nodejs.org/api/all.html#all_tls.server_newsession
tls.Server newSession	R	tls.Server.newSession										http://nodejs.org/api/all.html#all_tls.server_newsession
tls Server newSession	R	tls.Server newSession										http://nodejs.org/api/all.html#all_tls server_newsession
tls.Server.OCSPRequest	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;OCSPRequest&#39;</code> event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:\n<ul>\n<li><code>certificate</code> {Buffer} The server certificate</li>\n<li><code>issuer</code> {Buffer} The issuer&#39;s certificate</li>\n<li><code>callback</code> {Function} A callback function that must be invoked to provide\nthe results of the OCSP request.</li>\n</ul>\nThe server&#39;s current certificate can be parsed to obtain the OCSP URL\nand certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is\nthen invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.\nBoth <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the\nprimary and issuer&#39;s certificates. These can be used to obtain the OCSP\ncertificate ID and OCSP endpoint URL.\nAlternatively, <code>callback(null, null)</code> may be called, indicating that there was\nno OCSP response.\nCalling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.\nThe typical flow of an OCSP Request is as follows:\n<ol>\n<li>Client connects to the server and sends an <code>&#39;OCSPRequest&#39;</code> (via the status\ninfo extension in ClientHello).</li>\n<li>Server receives the request and emits the <code>&#39;OCSPRequest&#39;</code> event, calling the\nlistener if registered.</li>\n<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and\nperforms an OCSP request to the CA.</li>\n<li>Server receives <code>OCSPResponse</code> from the CA and sends it back to the client\nvia the <code>callback</code> argument</li>\n<li>Client validates the response and either destroys the socket or performs a\nhandshake.</li>\n</ol>\n<em>Note</em>: The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or\nthe issuer is not in the root certificates list. (An issuer may be provided\nvia the <code>ca</code> option when establishing the TLS connection.)\n<em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.\n<em>Note</em>: An npm module like asn1.js may be used to parse the certificates.\n</section>	http://nodejs.org/api/all.html#all_tls.server_ocsprequest
tls.Server OCSPRequest	R	tls.Server.OCSPRequest										http://nodejs.org/api/all.html#all_tls.server_ocsprequest
tls Server OCSPRequest	R	tls.Server OCSPRequest										http://nodejs.org/api/all.html#all_tls server_ocsprequest
tls.Server.resumeSession	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;resumeSession&#39;</code> event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:\n<ul>\n<li><code>sessionId</code> - The TLS/SSL session identifier</li>\n<li><code>callback</code> {Function} A callback function to be called when the prior session\nhas been recovered.</li>\n</ul>\nWhen called, the event listener may perform a lookup in external storage using\nthe given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If\nthe session cannot be resumed (i.e., doesn&#39;t exist in storage) the callback may\nbe invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the\nincoming connection and destroy the socket.\n<em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.\nThe following illustrates resuming a TLS session:\n<pre><code class="lang-js">const tlsSessionStore = {};\nserver.on(&#39;newSession&#39;, (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString(&#39;hex&#39;)] = data;\n  cb();\n});\nserver.on(&#39;resumeSession&#39;, (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString(&#39;hex&#39;)] || null);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_tls.server_resumesession
tls.Server resumeSession	R	tls.Server.resumeSession										http://nodejs.org/api/all.html#all_tls.server_resumesession
tls Server resumeSession	R	tls.Server resumeSession										http://nodejs.org/api/all.html#all_tls server_resumesession
tls.Server.secureConnection	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;secureConnection&#39;</code> event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:\n<ul>\n<li><code>tlsSocket</code> {tls.TLSSocket} The established TLS socket.</li>\n</ul>\nThe <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the\nclient has been verified by one of the supplied Certificate Authorities for the\nserver. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>\nis set to describe how authorization failed. Note that depending on the settings\nof the TLS server, unauthorized connections may still be accepted.\nThe <code>tlsSocket.npnProtocol</code> and <code>tlsSocket.alpnProtocol</code> properties are strings\nthat contain the selected NPN and ALPN protocols, respectively. When both NPN\nand ALPN extensions are received, ALPN takes precedence over NPN and the next\nprotocol is selected by ALPN.\nWhen ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code> returns <code>false</code>.\nThe <code>tlsSocket.servername</code> property is a string containing the server name\nrequested via SNI.\n</section>	http://nodejs.org/api/all.html#all_tls.server_secureconnection
tls.Server secureConnection	R	tls.Server.secureConnection										http://nodejs.org/api/all.html#all_tls.server_secureconnection
tls Server secureConnection	R	tls.Server secureConnection										http://nodejs.org/api/all.html#all_tls server_secureconnection
tls.TLSSocket	A										<section class="prog__container"><p id="obj.desc">The <code>tls.TLSSocket</code> is a subclass of <code>net.Socket</code> that performs transparent\nencryption of written data and all required TLS negotiation.\nInstances of <code>tls.TLSSocket</code> implement the duplex Stream interface.\n<em>Note</em>: Methods that return TLS connection metadata (e.g.\n<code>tls.TLSSocket.getPeerCertificate()</code> will only return data while the\nconnection is open.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket
tls TLSSocket	R	tls.TLSSocket										http://nodejs.org/api/all.html#all_tls tlssocket
tls.TLSSocket.TLSSocket	A										<section class="prog__container"><p id="obj.desc">Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.\n<pre><code>new tls.TLSSocket(socket[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_tlssocket_socket_options
tls.TLSSocket TLSSocket	R	tls.TLSSocket.TLSSocket										http://nodejs.org/api/all.html#all_tls.tlssocket_tlssocket_socket_options
tls TLSSocket TLSSocket	R	tls.TLSSocket TLSSocket										http://nodejs.org/api/all.html#all_tls tlssocket_tlssocket_socket_options
tls.TLSSocket.address	A										<section class="prog__container"><p id="obj.desc">Returns the bound address, the address family name, and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.,\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>\n<pre><code>tlsSocket.address()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_address
tls.TLSSocket address	R	tls.TLSSocket.address										http://nodejs.org/api/all.html#all_tls.tlssocket_address
tls TLSSocket address	R	tls.TLSSocket address										http://nodejs.org/api/all.html#all_tls tlssocket_address
tls.TLSSocket.getCipher	A										<section class="prog__container"><p id="obj.desc">Returns an object representing the cipher name and the SSL/TLS protocol version\nthat first defined the cipher.\nFor example: <code>{ name: &#39;AES256-SHA&#39;, version: &#39;TLSv1/SSLv3&#39; }</code>\nSee <code>SSL_CIPHER_get_name()</code> and <code>SSL_CIPHER_get_version()</code> in\nhttps://www.openssl.org/docs/man1.0.2/ssl/SSL_CIPHER_get_name.html for more\ninformation.\n<pre><code>tlsSocket.getCipher()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getcipher
tls.TLSSocket getCipher	R	tls.TLSSocket.getCipher										http://nodejs.org/api/all.html#all_tls.tlssocket_getcipher
tls TLSSocket getCipher	R	tls.TLSSocket getCipher										http://nodejs.org/api/all.html#all_tls tlssocket_getcipher
tls.TLSSocket.getEphemeralKeyInfo	A										<section class="prog__container"><p id="obj.desc">Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in Perfect Forward Secrecy on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\nif called on a server socket. The supported types are <code>&#39;DH&#39;</code> and <code>&#39;ECDH&#39;</code>. The\n<code>name</code> property is available only when type is &#39;ECDH&#39;.\nFor Example: <code>{ type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }</code>\n<pre><code>tlsSocket.getEphemeralKeyInfo()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getephemeralkeyinfo
tls.TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket.getEphemeralKeyInfo										http://nodejs.org/api/all.html#all_tls.tlssocket_getephemeralkeyinfo
tls TLSSocket getEphemeralKeyInfo	R	tls.TLSSocket getEphemeralKeyInfo										http://nodejs.org/api/all.html#all_tls tlssocket_getephemeralkeyinfo
tls.TLSSocket.getPeerCertificate	A										<section class="prog__container"><p id="obj.desc">Returns an object representing the peer&#39;s certificate. The returned object has\nsome properties corresponding to the fields of the certificate.\nFor example:\n<pre><code class="lang-text">{ subject:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuerInfo:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuer:\n   { ... another certificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  valid_from: &#39;Nov 11 09:52:22 2009 GMT&#39;,\n  valid_to: &#39;Nov  6 09:52:22 2029 GMT&#39;,\n  fingerprint: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&#39;,\n  serialNumber: &#39;B9B0D332A1AA5635&#39; }\n</code></pre>\nIf the peer does not provide a certificate, <code>null</code> or an empty object will be\nreturned.\n<pre><code>tlsSocket.getPeerCertificate([ detailed ])</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getpeercertificate_detailed
tls.TLSSocket getPeerCertificate	R	tls.TLSSocket.getPeerCertificate										http://nodejs.org/api/all.html#all_tls.tlssocket_getpeercertificate_detailed
tls TLSSocket getPeerCertificate	R	tls.TLSSocket getPeerCertificate										http://nodejs.org/api/all.html#all_tls tlssocket_getpeercertificate_detailed
tls.TLSSocket.getProtocol	A										<section class="prog__container"><p id="obj.desc">Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value <code>&#39;unknown&#39;</code> will be returned for connected\nsockets that have not completed the handshaking process. The value <code>null</code> will\nbe returned for server sockets or disconnected client sockets.\nExample responses include:\n<ul>\n<li><code>SSLv3</code></li>\n<li><code>TLSv1</code></li>\n<li><code>TLSv1.1</code></li>\n<li><code>TLSv1.2</code></li>\n<li><code>unknown</code></li>\n</ul>\nSee https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html for more\ninformation.\n<pre><code>tlsSocket.getProtocol()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getprotocol
tls.TLSSocket getProtocol	R	tls.TLSSocket.getProtocol										http://nodejs.org/api/all.html#all_tls.tlssocket_getprotocol
tls TLSSocket getProtocol	R	tls.TLSSocket getProtocol										http://nodejs.org/api/all.html#all_tls tlssocket_getprotocol
tls.TLSSocket.getSession	A										<section class="prog__container"><p id="obj.desc">Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was\nnegotiated. Can be used to speed up handshake establishment when reconnecting\nto the server.\n<pre><code>tlsSocket.getSession()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_getsession
tls.TLSSocket getSession	R	tls.TLSSocket.getSession										http://nodejs.org/api/all.html#all_tls.tlssocket_getsession
tls TLSSocket getSession	R	tls.TLSSocket getSession										http://nodejs.org/api/all.html#all_tls tlssocket_getsession
tls.TLSSocket.getTLSTicket	A										<section class="prog__container"><p id="obj.desc">Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.\n<em>Note</em>: This only works with client TLS sockets. Useful only for debugging, for\nsession reuse provide <code>session</code> option to <code>tls.connect()</code>.\n<pre><code>tlsSocket.getTLSTicket()</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_gettlsticket
tls.TLSSocket getTLSTicket	R	tls.TLSSocket.getTLSTicket										http://nodejs.org/api/all.html#all_tls.tlssocket_gettlsticket
tls TLSSocket getTLSTicket	R	tls.TLSSocket getTLSTicket										http://nodejs.org/api/all.html#all_tls tlssocket_gettlsticket
tls.TLSSocket.renegotiate	A										<section class="prog__container"><p id="obj.desc">The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\nUpon completion, the <code>callback</code> function will be passed a single argument\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.\n<em>Note</em>: This method can be used to request a peer&#39;s certificate after the\nsecure connection has been established.\n<em>Note</em>: When running as the server, the socket will be destroyed with an error\nafter <code>handshakeTimeout</code> timeout.\n<pre><code>tlsSocket.renegotiate(options, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_renegotiate_options_callback
tls.TLSSocket renegotiate	R	tls.TLSSocket.renegotiate										http://nodejs.org/api/all.html#all_tls.tlssocket_renegotiate_options_callback
tls TLSSocket renegotiate	R	tls.TLSSocket renegotiate										http://nodejs.org/api/all.html#all_tls tlssocket_renegotiate_options_callback
tls.TLSSocket.setMaxSendFragment	A										<section class="prog__container"><p id="obj.desc">The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.\nSmaller fragment sizes decrease the buffering latency on the client: larger\nfragments are buffered by the TLS layer until the entire fragment is received\nand its integrity is verified; large fragments can span multiple roundtrips\nand their processing can be delayed due to packet loss or reordering. However,\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\ndecrease overall server throughput.\n<pre><code>tlsSocket.setMaxSendFragment(size)</code></pre></section>	http://nodejs.org/api/all.html#all_tls.tlssocket_setmaxsendfragment_size
tls.TLSSocket setMaxSendFragment	R	tls.TLSSocket.setMaxSendFragment										http://nodejs.org/api/all.html#all_tls.tlssocket_setmaxsendfragment_size
tls TLSSocket setMaxSendFragment	R	tls.TLSSocket setMaxSendFragment										http://nodejs.org/api/all.html#all_tls tlssocket_setmaxsendfragment_size
tls.TLSSocket.authorized	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_authorized
tls.TLSSocket authorized	R	tls.TLSSocket.authorized										http://nodejs.org/api/all.html#all_tls.tlssocket_authorized
tls TLSSocket authorized	R	tls.TLSSocket authorized										http://nodejs.org/api/all.html#all_tls tlssocket_authorized
tls.TLSSocket.authorizationError	A										<section class="prog__container"><p id="obj.desc">Returns the reason why the peer&#39;s certificate was not been verified. This\nproperty is set only when <code>tlsSocket.authorized === false</code>.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_authorizationerror
tls.TLSSocket authorizationError	R	tls.TLSSocket.authorizationError										http://nodejs.org/api/all.html#all_tls.tlssocket_authorizationerror
tls TLSSocket authorizationError	R	tls.TLSSocket authorizationError										http://nodejs.org/api/all.html#all_tls tlssocket_authorizationerror
tls.TLSSocket.encrypted	A										<section class="prog__container"><p id="obj.desc">Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\n<code>net.Socket</code> instances.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_encrypted
tls.TLSSocket encrypted	R	tls.TLSSocket.encrypted										http://nodejs.org/api/all.html#all_tls.tlssocket_encrypted
tls TLSSocket encrypted	R	tls.TLSSocket encrypted										http://nodejs.org/api/all.html#all_tls tlssocket_encrypted
tls.TLSSocket.localAddress	A										<section class="prog__container"><p id="obj.desc">Returns the string representation of the local IP address.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_localaddress
tls.TLSSocket localAddress	R	tls.TLSSocket.localAddress										http://nodejs.org/api/all.html#all_tls.tlssocket_localaddress
tls TLSSocket localAddress	R	tls.TLSSocket localAddress										http://nodejs.org/api/all.html#all_tls tlssocket_localaddress
tls.TLSSocket.localPort	A										<section class="prog__container"><p id="obj.desc">Returns the numeric representation of the local port.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_localport
tls.TLSSocket localPort	R	tls.TLSSocket.localPort										http://nodejs.org/api/all.html#all_tls.tlssocket_localport
tls TLSSocket localPort	R	tls.TLSSocket localPort										http://nodejs.org/api/all.html#all_tls tlssocket_localport
tls.TLSSocket.remoteAddress	A										<section class="prog__container"><p id="obj.desc">Returns the string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remoteaddress
tls.TLSSocket remoteAddress	R	tls.TLSSocket.remoteAddress										http://nodejs.org/api/all.html#all_tls.tlssocket_remoteaddress
tls TLSSocket remoteAddress	R	tls.TLSSocket remoteAddress										http://nodejs.org/api/all.html#all_tls tlssocket_remoteaddress
tls.TLSSocket.remoteFamily	A										<section class="prog__container"><p id="obj.desc">Returns the string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remotefamily
tls.TLSSocket remoteFamily	R	tls.TLSSocket.remoteFamily										http://nodejs.org/api/all.html#all_tls.tlssocket_remotefamily
tls TLSSocket remoteFamily	R	tls.TLSSocket remoteFamily										http://nodejs.org/api/all.html#all_tls tlssocket_remotefamily
tls.TLSSocket.remotePort	A										<section class="prog__container"><p id="obj.desc">Returns the numeric representation of the remote port. For example, <code>443</code>.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_remoteport
tls.TLSSocket remotePort	R	tls.TLSSocket.remotePort										http://nodejs.org/api/all.html#all_tls.tlssocket_remoteport
tls TLSSocket remotePort	R	tls.TLSSocket remotePort										http://nodejs.org/api/all.html#all_tls tlssocket_remoteport
tls.TLSSocket.OCSPResponse	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;OCSPResponse&#39;</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:\n<ul>\n<li><code>response</code> {Buffer} The server&#39;s OCSP response</li>\n</ul>\nTypically, the <code>response</code> is a digitally signed object from the server&#39;s CA that\ncontains information about server&#39;s certificate revocation status.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_ocspresponse
tls.TLSSocket OCSPResponse	R	tls.TLSSocket.OCSPResponse										http://nodejs.org/api/all.html#all_tls.tlssocket_ocspresponse
tls TLSSocket OCSPResponse	R	tls.TLSSocket OCSPResponse										http://nodejs.org/api/all.html#all_tls tlssocket_ocspresponse
tls.TLSSocket.secureConnect	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;secureConnect&#39;</code> event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server&#39;s certificate has been authorized. It\nis the client&#39;s responsibility to check the <code>tlsSocket.authorized</code> property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\n<code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used,\nthe <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be\nchecked to determine the negotiated protocol.\n</section>	http://nodejs.org/api/all.html#all_tls.tlssocket_secureconnect
tls.TLSSocket secureConnect	R	tls.TLSSocket.secureConnect										http://nodejs.org/api/all.html#all_tls.tlssocket_secureconnect
tls TLSSocket secureConnect	R	tls.TLSSocket secureConnect										http://nodejs.org/api/all.html#all_tls tlssocket_secureconnect
tty	A										<section class="prog__container"><p id="obj.desc">The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:\n<pre><code class="lang-js">const tty = require(&#39;tty&#39;);\n</code></pre>\nWhen Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\ncontext, the <code>process.stdin</code> will, by default, be initialized as an instance of\n<code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by\ndefault be instances of <code>tty.WriteStream</code>. The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe <code>process.stdout.isTTY</code> property is <code>true</code>:\n<pre><code class="lang-sh">$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre>\nIn most cases, there should be little to no reason for an application to\ncreate instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_tty
tty.isatty	A										<section class="prog__container"><p id="obj.desc">The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with\na TTY and <code>false</code> if is not.\n<!-- [end-include:tty.md] -->\n<!-- [start-include:url.md] -->\n<pre><code>tty.isatty(fd)</code></pre></section>	http://nodejs.org/api/all.html#all_tty_isatty_fd
tty isatty	R	tty.isatty										http://nodejs.org/api/all.html#all_tty_isatty_fd
tty.ReadStream	A										<section class="prog__container"><p id="obj.desc">The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the\nreadable side of a TTY. In normal circumstances <code>process.stdin</code> will be the\nonly <code>tty.ReadStream</code> instance in a Node.js process and there should be no\nreason to create additional instances.\n</section>	http://nodejs.org/api/all.html#all_tty.readstream
tty ReadStream	R	tty.ReadStream										http://nodejs.org/api/all.html#all_tty readstream
tty.ReadStream.setRawMode	A										<section class="prog__container"><pre><code>readStream.setRawMode(mode)</code></pre></section>	http://nodejs.org/api/all.html#all_tty.readstream_setrawmode_mode
tty.ReadStream setRawMode	R	tty.ReadStream.setRawMode										http://nodejs.org/api/all.html#all_tty.readstream_setrawmode_mode
tty ReadStream setRawMode	R	tty.ReadStream setRawMode										http://nodejs.org/api/all.html#all_tty readstream_setrawmode_mode
tty.ReadStream.isRaw	A										<section class="prog__container"><p id="obj.desc">A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a\nraw device. Defaults to <code>false</code>.\n</section>	http://nodejs.org/api/all.html#all_tty.readstream_israw
tty.ReadStream isRaw	R	tty.ReadStream.isRaw										http://nodejs.org/api/all.html#all_tty.readstream_israw
tty ReadStream isRaw	R	tty.ReadStream isRaw										http://nodejs.org/api/all.html#all_tty readstream_israw
tty.WriteStream	A										<section class="prog__container"><p id="obj.desc">The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the\nwritable side of a TTY. In normal circumstances, <code>process.stdout</code> and\n<code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a\nNode.js process and there should be no reason to create additional instances.\n</section>	http://nodejs.org/api/all.html#all_tty.writestream
tty WriteStream	R	tty.WriteStream										http://nodejs.org/api/all.html#all_tty writestream
tty.WriteStream.columns	A										<section class="prog__container"><p id="obj.desc">A <code>number</code> specifying the number of columns the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.\n</section>	http://nodejs.org/api/all.html#all_tty.writestream_columns
tty.WriteStream columns	R	tty.WriteStream.columns										http://nodejs.org/api/all.html#all_tty.writestream_columns
tty WriteStream columns	R	tty.WriteStream columns										http://nodejs.org/api/all.html#all_tty writestream_columns
tty.WriteStream.rows	A										<section class="prog__container"><p id="obj.desc">A <code>number</code> specifying the number of rows the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.\n</section>	http://nodejs.org/api/all.html#all_tty.writestream_rows
tty.WriteStream rows	R	tty.WriteStream.rows										http://nodejs.org/api/all.html#all_tty.writestream_rows
tty WriteStream rows	R	tty.WriteStream rows										http://nodejs.org/api/all.html#all_tty writestream_rows
tty.WriteStream.resize	A										<section class="prog__container"><p id="obj.desc">The <code>&#39;resize&#39;</code> event is emitted whenever either of the <code>writeStream.columns</code>\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\nlistener callback when called.\n<pre><code class="lang-js">process.stdout.on(&#39;resize&#39;, () =&gt; {\n  console.log(&#39;screen size has changed!&#39;);\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n</code></pre>\n</section>	http://nodejs.org/api/all.html#all_tty.writestream_resize
tty.WriteStream resize	R	tty.WriteStream.resize										http://nodejs.org/api/all.html#all_tty.writestream_resize
tty WriteStream resize	R	tty.WriteStream resize										http://nodejs.org/api/all.html#all_tty writestream_resize
url	A										<section class="prog__container"><p id="obj.desc">The <code>url</code> module provides utilities for URL resolution and parsing. It can be\naccessed using:\n<pre><code class="lang-js">const url = require(&#39;url&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_url
url.format	A										<section class="prog__container"><p id="obj.desc">The <code>url.format()</code> method returns a formatted URL string derived from\n<code>urlObject</code>.\nIf <code>urlObject</code> is not an object or a string, <code>url.parse()</code> will throw a\n<code>TypeError</code>.\nThe formatting process operates as follows:\n<ul>\n<li>A new empty string <code>result</code> is created.</li>\n<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an\n<code>Error</code> is thrown.</li>\n<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII\ncolon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>\n<li>If either the <code>urlObject.slashes</code> property is true, <code>urlObject.protocol</code>\nbegins with one of <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or <code>file</code>, or\n<code>urlObject.protocol</code> is <code>undefined</code>, the literal string <code>//</code> will be appended\nto <code>result</code>.</li>\n<li>If the value of the <code>urlObject.auth</code> property is truthy, and either\n<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of\n<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>\n followed by the literal string <code>@</code>.</li>\n<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul>\n<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,\nan <code>Error</code> is thrown.</li>\n<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>\nis not <code>undefined</code>:<ul>\n<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>\n<li>The value of <code>urlObject.port</code> is coerced to a string and appended to\n<code>result</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of\n<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>\n<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul>\n<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash\n(<code>/</code>), then the literal string &#39;/&#39; is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an\n<code>Error</code> is thrown.</li>\n<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>\nproperty is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>\nfollowed by the output of calling the <code>querystring</code> module&#39;s <code>stringify()</code>\nmethod passing the value of <code>urlObject.query</code>.</li>\n<li>Otherwise, if <code>urlObject.search</code> is a string:<ul>\n<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question\nmark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an\n<code>Error</code> is thrown.</li>\n<li>If the <code>urlObject.hash</code> property is a string:<ul>\n<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)\ncharacter, the literal string <code>#</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a\nstring, an <code>Error</code> is thrown.</li>\n<li><code>result</code> is returned.</li>\n</ul>\n<pre><code>url.format(urlObject)</code></pre></section>	http://nodejs.org/api/all.html#all_url_format_urlobject
url format	R	url.format										http://nodejs.org/api/all.html#all_url_format_urlobject
url.parse	A										<section class="prog__container"><p id="obj.desc">The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL\nobject.\n<pre><code>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</code></pre></section>	http://nodejs.org/api/all.html#all_url_parse_urlstring_parsequerystring_slashesdenotehost
url parse	R	url.parse										http://nodejs.org/api/all.html#all_url_parse_urlstring_parsequerystring_slashesdenotehost
url.resolve	A										<section class="prog__container"><p id="obj.desc">The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a\nmanner similar to that of a Web browser resolving an anchor tag HREF.\nFor example:\n<pre><code class="lang-js">url.resolve(&#39;/one/two/three&#39;, &#39;four&#39;)         // &#39;/one/two/four&#39;\nurl.resolve(&#39;http://example.com/&#39;, &#39;/one&#39;)    // &#39;http://example.com/one&#39;\nurl.resolve(&#39;http://example.com/one&#39;, &#39;/two&#39;) // &#39;http://example.com/two&#39;\n</code></pre>\n<pre><code>url.resolve(from, to)</code></pre></section>	http://nodejs.org/api/all.html#all_url_resolve_from_to
url resolve	R	url.resolve										http://nodejs.org/api/all.html#all_url_resolve_from_to
util	A										<section class="prog__container"><p id="obj.desc">The <code>util</code> module is primarily designed to support the needs of Node.js&#39; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_util
util.debuglog	A										<section class="prog__container"><p id="obj.desc">The <code>util.debuglog()</code> method is used to create a function that conditionally\nwrites debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>\nenvironment variable.  If the <code>section</code> name appears within the value of that\nenvironment variable, then the returned function operates similar to\n<code>console.error()</code>.  If not, then the returned function is a no-op.\nFor example:\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst debuglog = util.debuglog(&#39;foo&#39;);\n\ndebuglog(&#39;hello from foo [%d]&#39;, 123);\n</code></pre>\nIf this program is run with <code>NODE_DEBUG=foo</code> in the environment, then\nit will output something like:\n<pre><code class="lang-txt">FOO 3245: hello from foo [123]\n</code></pre>\nwhere <code>3245</code> is the process id.  If it is not run with that\nenvironment variable set, then it will not print anything.\nMultiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>\nenvironment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.\n<pre><code>util.debuglog(section)</code></pre></section>	http://nodejs.org/api/all.html#all_util_debuglog_section
util debuglog	R	util.debuglog										http://nodejs.org/api/all.html#all_util_debuglog_section
util.deprecate	A										<section class="prog__container"><p id="obj.desc">The <code>util.deprecate()</code> method wraps the given <code>function</code> or class in such a way that\nit is marked as deprecated.\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\n\nexports.puts = util.deprecate(function() {\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\n    process.stdout.write(arguments[i] + &#39;\n&#39;);\n  }\n}, &#39;util.puts: Use console.log instead&#39;);\n</code></pre>\nWhen called, <code>util.deprecate()</code> will return a function that will emit a\n<code>DeprecationWarning</code> using the <code>process.on(&#39;warning&#39;)</code> event. By default,\nthis warning will be emitted and printed to <code>stderr</code> exactly once, the first\ntime it is called. After the warning is emitted, the wrapped <code>function</code>\nis called.\nIf either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are\nused, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to\nthe first deprecation warning, the <code>util.deprecate()</code> method does nothing.\nIf the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set,\nor the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a\nstack trace are printed to <code>stderr</code> the first time the deprecated function is\ncalled.\nIf the <code>--throw-deprecation</code> command line flag is set, or the\n<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be\nthrown when the deprecated function is called.\nThe <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code>\nproperty take precedence over <code>--trace-deprecation</code> and\n<code>process.traceDeprecation</code>.\n<pre><code>util.deprecate(function, string)</code></pre></section>	http://nodejs.org/api/all.html#all_util_deprecate_function_string
util deprecate	R	util.deprecate										http://nodejs.org/api/all.html#all_util_deprecate_function_string
util.format	A										<section class="prog__container"><p id="obj.desc">The <code>util.format()</code> method returns a formatted string using the first argument\nas a <code>printf</code>-like format.\nThe first argument is a string containing zero or more <em>placeholder</em> tokens.\nEach placeholder token is replaced with the converted value from the\ncorresponding argument. Supported placeholders are:\n<ul>\n<li><code>%s</code> - String.</li>\n<li><code>%d</code> - Number (both integer and float).</li>\n<li><code>%j</code> - JSON.  Replaced with the string <code>&#39;[Circular]&#39;</code> if the argument\ncontains circular references.</li>\n<li><code>%%</code> - single percent sign (<code>&#39;%&#39;</code>). This does not consume an argument.</li>\n</ul>\nIf the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.\n<pre><code class="lang-js">util.format(&#39;%s:%s&#39;, &#39;foo&#39;);\n// Returns: &#39;foo:%s&#39;\n</code></pre>\nIf there are more arguments passed to the <code>util.format()</code> method than the\nnumber of placeholders, the extra arguments are coerced into strings (for\nobjects and symbols, <code>util.inspect()</code> is used) then concatenated to the\nreturned string, each delimited by a space.\n<pre><code class="lang-js">util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); // &#39;foo:bar baz&#39;\n</code></pre>\nIf the first argument is not a format string then <code>util.format()</code> returns\na string that is the concatenation of all arguments separated by spaces.\nEach argument is converted to a string using <code>util.inspect()</code>.\n<pre><code class="lang-js">util.format(1, 2, 3); // &#39;1 2 3&#39;\n</code></pre>\n<pre><code>util.format(format[, ...args])</code></pre></section>	http://nodejs.org/api/all.html#all_util_format_format_...args
util format	R	util.format										http://nodejs.org/api/all.html#all_util_format_format_...args
util.inherits	A										<section class="prog__container"><p id="obj.desc"><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and\n<code>extends</code> keywords to get language level inheritance support. Also note that\nthe two styles are semantically incompatible.</em>\n<ul>\n<li><code>constructor</code> {Function}</li>\n<li><code>superConstructor</code> {Function}</li>\n</ul>\nInherit the prototype methods from one constructor into another.  The\nprototype of <code>constructor</code> will be set to a new object created from\n<code>superConstructor</code>.\nAs an additional convenience, <code>superConstructor</code> will be accessible\nthrough the <code>constructor.super_</code> property.\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit(&#39;data&#39;, data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;It works!&#39;); // Received data: &quot;It works!&quot;\n</code></pre>\nES6 example using <code>class</code> and <code>extends</code>\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nclass MyStream extends EventEmitter {\n  constructor() {\n    super();\n  }\n  write(data) {\n    this.emit(&#39;data&#39;, data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;With ES6&#39;);\n</code></pre>\n<pre><code>util.inherits(constructor, superConstructor)</code></pre></section>	http://nodejs.org/api/all.html#all_util_inherits_constructor_superconstructor
util inherits	R	util.inherits										http://nodejs.org/api/all.html#all_util_inherits_constructor_superconstructor
util.inspect	A										<section class="prog__container"><p id="obj.desc">The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is\nprimarily useful for debugging. Additional <code>options</code> may be passed that alter\ncertain aspects of the formatted string.\nThe following example inspects all properties of the <code>util</code> object:\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n</code></pre>\nValues may supply their own custom <code>inspect(depth, opts)</code> functions, when\ncalled these receive the current <code>depth</code> in the recursive inspection, as well as\nthe options object passed to <code>util.inspect()</code>.\n<pre><code>util.inspect(object[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_util_inspect_object_options
util inspect	R	util.inspect										http://nodejs.org/api/all.html#all_util_inspect_object_options
v8	A										<section class="prog__container"><p id="obj.desc">The <code>v8</code> module exposes APIs that are specific to the version of V8\nbuilt into the Node.js binary. It can be accessed using:\n<pre><code class="lang-js">const v8 = require(&#39;v8&#39;);\n</code></pre>\n<em>Note</em>: The APIs and implementation are subject to change at any time.\n</section>	http://nodejs.org/api/all.html#all_v8
v8.getHeapStatistics	A										<section class="prog__container"><p id="obj.desc">Returns an object with the following properties:\n<ul>\n<li><code>total_heap_size</code> {number}</li>\n<li><code>total_heap_size_executable</code> {number}</li>\n<li><code>total_physical_size</code> {number}</li>\n<li><code>total_available_size</code> {number}</li>\n<li><code>used_heap_size</code> {number}</li>\n<li><code>heap_size_limit</code> {number}</li>\n<li><code>malloced_memory</code> {number}</li>\n<li><code>peak_malloced_memory</code> {number}</li>\n<li><code>does_zap_garbage</code> {number}</li>\n</ul>\n<code>does_zap_garbage</code> is a 0/1 boolean, which signifies whether the <code>--zap_code_space</code>\noption is enabled or not. This makes V8 overwrite heap garbage with a bit\npattern. The RSS footprint (resident memory set) gets bigger because it\ncontinuously touches all heap pages and that makes them less likely to get\nswapped out by the operating system.\nFor example:\n<pre><code class="lang-js">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0\n}\n</code></pre>\n<pre><code>v8.getHeapStatistics()</code></pre></section>	http://nodejs.org/api/all.html#all_v8_getheapstatistics
v8 getHeapStatistics	R	v8.getHeapStatistics										http://nodejs.org/api/all.html#all_v8_getheapstatistics
v8.getHeapSpaceStatistics	A										<section class="prog__container"><p id="obj.desc">Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n<code>GetHeapSpaceStatistics</code> function and may change from one V8 version to the\nnext.\nThe value returned is an array of objects containing the following properties:\n<ul>\n<li><code>space_name</code> {string}</li>\n<li><code>space_size</code> {number}</li>\n<li><code>space_used_size</code> {number}</li>\n<li><code>space_available_size</code> {number}</li>\n<li><code>physical_space_size</code> {number}</li>\n</ul>\nFor example:\n<pre><code class="lang-json">[\n  {\n    &quot;space_name&quot;: &quot;new_space&quot;,\n    &quot;space_size&quot;: 2063872,\n    &quot;space_used_size&quot;: 951112,\n    &quot;space_available_size&quot;: 80824,\n    &quot;physical_space_size&quot;: 2063872\n  },\n  {\n    &quot;space_name&quot;: &quot;old_space&quot;,\n    &quot;space_size&quot;: 3090560,\n    &quot;space_used_size&quot;: 2493792,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 3090560\n  },\n  {\n    &quot;space_name&quot;: &quot;code_space&quot;,\n    &quot;space_size&quot;: 1260160,\n    &quot;space_used_size&quot;: 644256,\n    &quot;space_available_size&quot;: 960,\n    &quot;physical_space_size&quot;: 1260160\n  },\n  {\n    &quot;space_name&quot;: &quot;map_space&quot;,\n    &quot;space_size&quot;: 1094160,\n    &quot;space_used_size&quot;: 201608,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 1094160\n  },\n  {\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\n    &quot;space_size&quot;: 0,\n    &quot;space_used_size&quot;: 0,\n    &quot;space_available_size&quot;: 1490980608,\n    &quot;physical_space_size&quot;: 0\n  }\n]\n</code></pre>\n<pre><code>v8.getHeapSpaceStatistics()</code></pre></section>	http://nodejs.org/api/all.html#all_v8_getheapspacestatistics
v8 getHeapSpaceStatistics	R	v8.getHeapSpaceStatistics										http://nodejs.org/api/all.html#all_v8_getheapspacestatistics
v8.setFlagsFromString	A										<section class="prog__container"><p id="obj.desc">The <code>v8.setFlagsFromString()</code> method can be used to programmatically set\nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.\nThe V8 options available for a version of Node.js may be determined by running\n<code>node --v8-options</code>.  An unofficial, community-maintained list of options\nand their effects is available here.\nUsage:\n<pre><code class="lang-js">// Print GC events to stdout for one minute.\nconst v8 = require(&#39;v8&#39;);\nv8.setFlagsFromString(&#39;--trace_gc&#39;);\nsetTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);\n</code></pre>\n<!-- [end-include:v8.md] -->\n<!-- [start-include:vm.md] -->\n<pre><code>v8.setFlagsFromString(string)</code></pre></section>	http://nodejs.org/api/all.html#all_v8_setflagsfromstring_string
v8 setFlagsFromString	R	v8.setFlagsFromString										http://nodejs.org/api/all.html#all_v8_setflagsfromstring_string
vm	A										<section class="prog__container"><p id="obj.desc">The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:\n<pre><code class="lang-js">const vm = require(&#39;vm&#39;);\n</code></pre>\nJavaScript code can be compiled and run immediately or compiled, saved, and run\nlater.\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_vm
vm.createContext	A										<section class="prog__container"><p id="obj.desc">If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will prepare\nthat sandbox so that it can be used in calls to\n<code>vm.runInContext()</code> or <code>script.runInContext()</code>. Inside such scripts,\nthe <code>sandbox</code> object will be the global object, retaining all of its existing\nproperties but also having the built-in objects and functions any standard\nglobal object has. Outside of scripts run by the vm module, <code>sandbox</code> will\nremain unchanged.\nIf <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty\ncontextified sandbox object will be returned.\nThe <code>vm.createContext()</code> method is primarily useful for creating a single\nsandbox that can be used to run multiple scripts. For instance, if emulating a\nweb browser, the method can be used to create a single sandbox representing a\nwindow&#39;s global object, then run all <code>&lt;script&gt;</code> tags together within the context\nof that sandbox.\n<pre><code>vm.createContext([sandbox])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_createcontext_sandbox
vm createContext	R	vm.createContext										http://nodejs.org/api/all.html#all_vm_createcontext_sandbox
vm.isContext	A										<section class="prog__container"><p id="obj.desc">Returns <code>true</code> if the given <code>sandbox</code> object has been contextified using\n<code>vm.createContext()</code>.\n<pre><code>vm.isContext(sandbox)</code></pre></section>	http://nodejs.org/api/all.html#all_vm_iscontext_sandbox
vm isContext	R	vm.isContext										http://nodejs.org/api/all.html#all_vm_iscontext_sandbox
vm.runInContext	A										<section class="prog__container"><p id="obj.desc">The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of\nthe <code>contextifiedSandbox</code>, then returns the result. Running code does not have\naccess to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been\npreviously contextified using the <code>vm.createContext()</code> method.\nThe following example compiles and executes different scripts using a single\ncontextified object:\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (var i = 0; i &lt; 10; ++i) {\n  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n</code></pre>\n<pre><code>vm.runInContext(code, contextifiedSandbox[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runincontext_code_contextifiedsandbox_options
vm runInContext	R	vm.runInContext										http://nodejs.org/api/all.html#all_vm_runincontext_code_contextifiedsandbox_options
vm.runInDebugContext	A										<section class="prog__container"><p id="obj.desc">The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8\ndebug context. The primary use case is to gain access to the V8 <code>Debug</code> object:\n<pre><code class="lang-js">const vm = require(&#39;vm&#39;);\nconst Debug = vm.runInDebugContext(&#39;Debug&#39;);\nconsole.log(Debug.findScript(process.emit).name);  // &#39;events.js&#39;\nconsole.log(Debug.findScript(process.exit).name);  // &#39;internal/process.js&#39;\n</code></pre>\n<em>Note</em>: The debug context and object are intrinsically tied to V8&#39;s debugger\nimplementation and may change (or even be removed) without prior warning.\nThe <code>Debug</code> object can also be made available using the V8-specific\n<code>--expose_debug_as=</code> command line option.\n<pre><code>vm.runInDebugContext(code)</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runindebugcontext_code
vm runInDebugContext	R	vm.runInDebugContext										http://nodejs.org/api/all.html#all_vm_runindebugcontext_code
vm.runInNewContext	A										<section class="prog__container"><p id="obj.desc">The <code>vm.runInNewContext()</code> first contextifies the given <code>sandbox</code> object (or\ncreates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it\nwithin the context of the created context, then returns the result. Running code\ndoes not have access to the local scope.\nThe following example compiles and executes code that increments a global\nvariable and sets a new one. These globals are contained in the <code>sandbox</code>.\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }\n</code></pre>\n<pre><code>vm.runInNewContext(code[, sandbox][, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runinnewcontext_code_sandbox_options
vm runInNewContext	R	vm.runInNewContext										http://nodejs.org/api/all.html#all_vm_runinnewcontext_code_sandbox_options
vm.runInThisContext	A										<section class="prog__container"><p id="obj.desc"><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the\ncurrent <code>global</code> and returns the result. Running code does not have access to\nlocal scope, but does have access to the current <code>global</code> object.\nThe following example illustrates using both <code>vm.runInThisContext()</code> and\nthe JavaScript <code>eval()</code> function to run the same code:\n<pre><code class="lang-js">const vm = require(&#39;vm&#39;);\nvar localVar = &#39;initial value&#39;;\n\nconst vmResult = vm.runInThisContext(&#39;localVar = &quot;vm&quot;;&#39;);\nconsole.log(&#39;vmResult:&#39;, vmResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\nconst evalResult = eval(&#39;localVar = &quot;eval&quot;;&#39;);\nconsole.log(&#39;evalResult:&#39;, evalResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\n// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;\n// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;\n</code></pre>\nBecause <code>vm.runInThisContext()</code> does not have access to the local scope,\n<code>localVar</code> is unchanged. In contrast, <code>eval()</code> <em>does</em> have access to the\nlocal scope, so the value <code>localVar</code> is changed. In this way\n<code>vm.runInThisContext()</code> is much like an indirect <code>eval()</code> call, e.g.\n<code>(0,eval)(&#39;code&#39;)</code>.\n<h2>Example: Running an HTTP Server within a VM</h2>\nWhen using either <code>script.runInThisContext()</code> or <code>vm.runInThisContext()</code>, the\ncode is executed within the current V8 global context. The code passed\nto this VM context will have its own isolated scope.\nIn order to run a simple web server using the <code>http</code> module the code passed to\nthe context must either call <code>require(&#39;http&#39;)</code> on its own, or have a reference\nto the <code>http</code> module passed to it. For instance:\n<pre><code class="lang-js">&#39;use strict&#39;;\nconst vm = require(&#39;vm&#39;);\n\nlet code =\n`(function(require) {\n\n   const http = require(&#39;http&#39;);\n\n   http.createServer( (request, response) =&gt; {\n     response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n     response.end(&#39;Hello World\\n&#39;);\n   }).listen(8124);\n\n   console.log(&#39;Server running at http://127.0.0.1:8124/&#39;);\n })`;\n\n vm.runInThisContext(code)(require);\n</code></pre>\n<em>Note</em>: The <code>require()</code> in the above case shares the state with context it is\npassed from. This may introduce risks when untrusted code is executed, e.g.\naltering objects from the calling thread&#39;s context in unwanted ways.\n<pre><code>vm.runInThisContext(code[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm_runinthiscontext_code_options
vm runInThisContext	R	vm.runInThisContext										http://nodejs.org/api/all.html#all_vm_runinthiscontext_code_options
vm.Script	A										<section class="prog__container"><p id="obj.desc">Instances of the <code>vm.Script</code> class contain precompiled scripts that can be\nexecuted in specific sandboxes (or &quot;contexts&quot;).\n</section>	http://nodejs.org/api/all.html#all_vm.script
vm Script	R	vm.Script										http://nodejs.org/api/all.html#all_vm script
vm.Script.Script	A										<section class="prog__container"><p id="obj.desc">Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\ncompiled <code>vm.Script</code> can be run later multiple times. It is important to note\nthat the <code>code</code> is not bound to any global object; rather, it is bound before\neach run, just for that run.\n<pre><code>new vm.Script(code, options)</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_script_code_options
vm.Script Script	R	vm.Script.Script										http://nodejs.org/api/all.html#all_vm.script_script_code_options
vm Script Script	R	vm.Script Script										http://nodejs.org/api/all.html#all_vm script_script_code_options
vm.Script.runInContext	A										<section class="prog__container"><p id="obj.desc">Runs the compiled code contained by the <code>vm.Script</code> object within the given\n<code>contextifiedSandbox</code> and returns the result. Running code does not have access\nto local scope.\nThe following example compiles code that increments a global variable, sets\nthe value of another global variable, then execute the code multiple times.\nThe globals are contained in the <code>sandbox</code> object.\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nconst script = new vm.Script(&#39;count += 1; name = &quot;kitty&quot;;&#39;);\n\nconst context = new vm.createContext(sandbox);\nfor (var i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 12, name: &#39;kitty&#39; }\n</code></pre>\n<pre><code>script.runInContext(contextifiedSandbox[, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runincontext_contextifiedsandbox_options
vm.Script runInContext	R	vm.Script.runInContext										http://nodejs.org/api/all.html#all_vm.script_runincontext_contextifiedsandbox_options
vm Script runInContext	R	vm.Script runInContext										http://nodejs.org/api/all.html#all_vm script_runincontext_contextifiedsandbox_options
vm.Script.runInNewContext	A										<section class="prog__container"><p id="obj.desc">First contextifies the given <code>sandbox</code>, runs the compiled code contained by\nthe <code>vm.Script</code> object within the created sandbox, and returns the result.\nRunning code does not have access to local scope.\nThe following example compiles code that sets a global variable, then executes\nthe code multiple times in different contexts. The globals are set on and\ncontained within each individual <code>sandbox</code>.\n<pre><code class="lang-js">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst script = new vm.Script(&#39;globalVar = &quot;set&quot;&#39;);\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }]\n</code></pre>\n<pre><code>script.runInNewContext([sandbox][, options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runinnewcontext_sandbox_options
vm.Script runInNewContext	R	vm.Script.runInNewContext										http://nodejs.org/api/all.html#all_vm.script_runinnewcontext_sandbox_options
vm Script runInNewContext	R	vm.Script runInNewContext										http://nodejs.org/api/all.html#all_vm script_runinnewcontext_sandbox_options
vm.Script.runInThisContext	A										<section class="prog__container"><p id="obj.desc">Runs the compiled code contained by the <code>vm.Script</code> within the context of the\ncurrent <code>global</code> object. Running code does not have access to local scope, but\n<em>does</em> have access to the current <code>global</code> object.\nThe following example compiles code that increments a <code>global</code> variable then\nexecutes that code multiple times:\n<pre><code class="lang-js">const vm = require(&#39;vm&#39;);\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script(&#39;globalVar += 1&#39;, { filename: &#39;myfile.vm&#39; });\n\nfor (var i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n</code></pre>\n<pre><code>script.runInThisContext([options])</code></pre></section>	http://nodejs.org/api/all.html#all_vm.script_runinthiscontext_options
vm.Script runInThisContext	R	vm.Script.runInThisContext										http://nodejs.org/api/all.html#all_vm.script_runinthiscontext_options
vm Script runInThisContext	R	vm.Script runInThisContext										http://nodejs.org/api/all.html#all_vm script_runinthiscontext_options
zlib	A										<section class="prog__container"><p id="obj.desc">The <code>zlib</code> module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:\n<pre><code class="lang-js">const zlib = require(&#39;zlib&#39;);\n</code></pre>\nCompressing or decompressing a stream (such as a file) can be accomplished by\npiping the source stream data through a <code>zlib</code> stream into a destination stream:\n<pre><code class="lang-js">const gzip = zlib.createGzip();\nconst fs = require(&#39;fs&#39;);\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);\n</code></pre>\nIt is also possible to compress or decompress data in a single step:\n<pre><code class="lang-js">const input = &#39;.................................&#39;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</code></pre>\n<p  id="obj.stability">Stability: 2 - Stable</p></section>	http://nodejs.org/api/all.html#all_zlib
zlib.createDeflate	A										<section class="prog__container"><p id="obj.desc">Returns a new Deflate object with an options.\n<pre><code>zlib.createDeflate([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createdeflate_options
zlib createDeflate	R	zlib.createDeflate										http://nodejs.org/api/all.html#all_zlib_createdeflate_options
zlib.createDeflateRaw	A										<section class="prog__container"><p id="obj.desc">Returns a new DeflateRaw object with an options.\n<pre><code>zlib.createDeflateRaw([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createdeflateraw_options
zlib createDeflateRaw	R	zlib.createDeflateRaw										http://nodejs.org/api/all.html#all_zlib_createdeflateraw_options
zlib.createGunzip	A										<section class="prog__container"><p id="obj.desc">Returns a new Gunzip object with an options.\n<pre><code>zlib.createGunzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_creategunzip_options
zlib createGunzip	R	zlib.createGunzip										http://nodejs.org/api/all.html#all_zlib_creategunzip_options
zlib.createGzip	A										<section class="prog__container"><p id="obj.desc">Returns a new Gzip object with an options.\n<pre><code>zlib.createGzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_creategzip_options
zlib createGzip	R	zlib.createGzip										http://nodejs.org/api/all.html#all_zlib_creategzip_options
zlib.createInflate	A										<section class="prog__container"><p id="obj.desc">Returns a new Inflate object with an options.\n<pre><code>zlib.createInflate([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createinflate_options
zlib createInflate	R	zlib.createInflate										http://nodejs.org/api/all.html#all_zlib_createinflate_options
zlib.createInflateRaw	A										<section class="prog__container"><p id="obj.desc">Returns a new InflateRaw object with an options.\n<pre><code>zlib.createInflateRaw([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createinflateraw_options
zlib createInflateRaw	R	zlib.createInflateRaw										http://nodejs.org/api/all.html#all_zlib_createinflateraw_options
zlib.createUnzip	A										<section class="prog__container"><p id="obj.desc">Returns a new Unzip object with an options.\n<pre><code>zlib.createUnzip([options])</code></pre></section>	http://nodejs.org/api/all.html#all_zlib_createunzip_options
zlib createUnzip	R	zlib.createUnzip										http://nodejs.org/api/all.html#all_zlib_createunzip_options
zlib.constants	A										<section class="prog__container"><p id="obj.desc">Provides an object enumerating Zlib-related constants.\n</section>	http://nodejs.org/api/all.html#all_zlib_constants
zlib constants	R	zlib.constants										http://nodejs.org/api/all.html#all_zlib_constants
zlib.Deflate	A										<section class="prog__container"><p id="obj.desc">Compress data using deflate.\n</section>	http://nodejs.org/api/all.html#all_zlib.deflate
zlib Deflate	R	zlib.Deflate										http://nodejs.org/api/all.html#all_zlib deflate
zlib.DeflateRaw	A										<section class="prog__container"><p id="obj.desc">Compress data using deflate, and do not append a <code>zlib</code> header.\n</section>	http://nodejs.org/api/all.html#all_zlib.deflateraw
zlib DeflateRaw	R	zlib.DeflateRaw										http://nodejs.org/api/all.html#all_zlib deflateraw
zlib.Gunzip	A										<section class="prog__container"><p id="obj.desc">Decompress a gzip stream.\n</section>	http://nodejs.org/api/all.html#all_zlib.gunzip
zlib Gunzip	R	zlib.Gunzip										http://nodejs.org/api/all.html#all_zlib gunzip
zlib.Gzip	A										<section class="prog__container"><p id="obj.desc">Compress data using gzip.\n</section>	http://nodejs.org/api/all.html#all_zlib.gzip
zlib Gzip	R	zlib.Gzip										http://nodejs.org/api/all.html#all_zlib gzip
zlib.Inflate	A										<section class="prog__container"><p id="obj.desc">Decompress a deflate stream.\n</section>	http://nodejs.org/api/all.html#all_zlib.inflate
zlib Inflate	R	zlib.Inflate										http://nodejs.org/api/all.html#all_zlib inflate
zlib.InflateRaw	A										<section class="prog__container"><p id="obj.desc">Decompress a raw deflate stream.\n</section>	http://nodejs.org/api/all.html#all_zlib.inflateraw
zlib InflateRaw	R	zlib.InflateRaw										http://nodejs.org/api/all.html#all_zlib inflateraw
zlib.Unzip	A										<section class="prog__container"><p id="obj.desc">Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.\n</section>	http://nodejs.org/api/all.html#all_zlib.unzip
zlib Unzip	R	zlib.Unzip										http://nodejs.org/api/all.html#all_zlib unzip
zlib.Zlib	A										<section class="prog__container"><p id="obj.desc">Not exported by the <code>zlib</code> module. It is documented here because it is the base\nclass of the compressor/decompressor classes.\n</section>	http://nodejs.org/api/all.html#all_zlib.zlib
zlib Zlib	R	zlib.Zlib										http://nodejs.org/api/all.html#all_zlib zlib
zlib.Zlib.flush	A										<section class="prog__container"><p id="obj.desc"><code>kind</code> defaults to <code>zlib.constants.Z_FULL_FLUSH</code>.\nFlush pending data. Don&#39;t call this frivolously, premature flushes negatively\nimpact the effectiveness of the compression algorithm.\nCalling this only flushes data from the internal <code>zlib</code> state, and does not\nperform flushing of any kind on the streams level. Rather, it behaves like a\nnormal call to <code>.write()</code>, i.e. it will be queued up behind other pending\nwrites and will only produce output when data is being read from the stream.\n<pre><code>zlib.flush([kind], callback)</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_flush_kind_callback
zlib.Zlib flush	R	zlib.Zlib.flush										http://nodejs.org/api/all.html#all_zlib.zlib_flush_kind_callback
zlib Zlib flush	R	zlib.Zlib flush										http://nodejs.org/api/all.html#all_zlib zlib_flush_kind_callback
zlib.Zlib.params	A										<section class="prog__container"><p id="obj.desc">Dynamically update the compression level and compression strategy.\nOnly applicable to deflate algorithm.\n<pre><code>zlib.params(level, strategy, callback)</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_params_level_strategy_callback
zlib.Zlib params	R	zlib.Zlib.params										http://nodejs.org/api/all.html#all_zlib.zlib_params_level_strategy_callback
zlib Zlib params	R	zlib.Zlib params										http://nodejs.org/api/all.html#all_zlib zlib_params_level_strategy_callback
zlib.Zlib.reset	A										<section class="prog__container"><p id="obj.desc">Reset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.\n<pre><code>zlib.reset()</code></pre></section>	http://nodejs.org/api/all.html#all_zlib.zlib_reset
zlib.Zlib reset	R	zlib.Zlib.reset										http://nodejs.org/api/all.html#all_zlib.zlib_reset
zlib Zlib reset	R	zlib.Zlib reset										http://nodejs.org/api/all.html#all_zlib zlib_reset
