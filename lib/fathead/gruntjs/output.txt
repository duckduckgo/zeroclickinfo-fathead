grunt.config.init	A			Grunt Config Functions							<section class="prog__container"><p>Initialize a configuration object for the current project. The specified configObject is used by tasks and can be accessed using the grunt.config method. Nearly every project's Gruntfile will call this method.</p><pre><code>grunt.config.init(configObject)</code></pre><p>Note that any specified <% %> template strings will be processed when config data is retrieved.</p><span class="prog__sub">This example contains sample config data for the grunt-contrib-jshint plugin jshint task:</span><pre><code>grunt.config.init({\n  jshint: {\n    all: ['lib/*.js', 'test/*.js', 'Gruntfile.js']\n  }\n});</code></pre><span class="prog__sub">See the Getting started guide for more configuration examples.</span><p>This method is also available as grunt.initConfig.</p></section>	http://gruntjs.com/api/grunt.config#grunt.config.init
config.init	R	grunt.config.init										
grunt.config	A			Grunt Config Functions							<section class="prog__container"><p>Get or set a value from the project's Grunt configuration. This method serves as an alias to other methods; if two arguments are passed, grunt.config.set is called, otherwise grunt.config.get is called.</p><pre><code>grunt.config([prop [, value]])</code></pre></section>	http://gruntjs.com/api/grunt.config#grunt.config
config	R	grunt.config										
grunt.config.get	A			Grunt Config Functions							<section class="prog__container"><p>Get a value from the project's Grunt configuration. If prop is specified, that property's value is returned, or null if that property is not defined. If prop isn't specified, a copy of the entire config object is returned. Templates strings will be recursively processed using the grunt.config.process method.</p><pre><code>grunt.config.get([prop])</code></pre></section>	http://gruntjs.com/api/grunt.config#grunt.config.get
config.get	R	grunt.config.get										
grunt.config.process	A			Grunt Config Functions							<section class="prog__container"><p>Process a value, recursively expanding <% %> templates (via the grunt.template.process method) in the context of the Grunt config, as they are encountered. this method is called automatically by grunt.config.get but not by grunt.config.getRaw.</p><pre><code>grunt.config.process(value)</code></pre><p>If any retrieved value is entirely a single '<%= foo %>' or '<%= foo.bar %>' template string, and the specified foo or foo.bar property is a non-string (and not null or undefined) value, it will be expanded to the actual value. That, combined with grunt's task system automatically flattening arrays, can be extremely useful.</p></section>	http://gruntjs.com/api/grunt.config#grunt.config.process
config.process	R	grunt.config.process										
grunt.config.getraw	A			Grunt Config Functions							<section class="prog__container"><p>Get a raw value from the project's Grunt configuration, without processing <% %> template strings. If prop is specified, that property's value is returned, or null if that property is not defined. If prop isn't specified, a copy of the entire config object is returned.</p><pre><code>grunt.config.getRaw([prop])</code></pre></section>	http://gruntjs.com/api/grunt.config#grunt.config.getraw
config.getraw	R	grunt.config.getraw										
grunt.config.set	A			Grunt Config Functions							<section class="prog__container"><p>Set a value into the project's Grunt configuration.</p><pre><code>grunt.config.set(prop, value)</code></pre><p>Note that any specified <% %> template strings will only be processed when config data is retrieved.</p></section>	http://gruntjs.com/api/grunt.config#grunt.config.set
config.set	R	grunt.config.set										
grunt.config.escape	A			Grunt Config Functions							<section class="prog__container"><p>Escape . dots in the given propString. This should be used for property names that contain dots.</p><pre><code>grunt.config.escape(propString)</code></pre></section>	http://gruntjs.com/api/grunt.config#grunt.config.escape
config.escape	R	grunt.config.escape										
grunt.config.merge	A			Grunt Config Functions							<section class="prog__container"><p>Added in 0.4.5</p><p>Recursively merges properties of the specified configObject into the current project configuration. Array and plain object properties are merged recursively while other value types are overridden.</p><pre><code>grunt.config.merge(configObject)</code></pre><span class="prog__sub">You can use this method to append configuration options, targets, etc., to already defined tasks, for example:</span><pre><code>grunt.config.merge({\n  watch: {\n    files: ["path/to/files"],\n    tasks: ["task"]\n  }\n});</code></pre><p>Array values are merged based on their index. Consider the following code:</p><pre><code>grunt.initConfig({\n  jshint: {\n    files: ['Gruntfile.js', 'src/**/*.js'],\n  }\n);\n\nvar config = {\n  jshint: {\n    files: ['hello.js'],\n  }\n};\n\ngrunt.config.merge(config);</code></pre><p>It'll result in the configuration shown below:</p><pre><code>jshint: {\n  files: ['hello.js', 'src/**/*.js'],\n}</code></pre><p>In conclusion, the first value of the files array defined in the config variable (hello.js) overriddes the first value specified in the initConfig configuration call (Gruntfile.js).</p></section>	http://gruntjs.com/api/grunt.config#grunt.config.merge
config.merge	R	grunt.config.merge										
grunt.config.requires	A			Grunt Config Functions							<section class="prog__container"><p>Fail the current task if one or more required config properties is missing, null or undefined. One or more string or array config properties may be specified.</p><pre><code>grunt.config.requires(prop [, prop [, ...]])</code></pre><p>This method is also available inside tasks as this.requiresConfig.</p></section>	http://gruntjs.com/api/grunt.config#grunt.config.requires
config.requires	R	grunt.config.requires										
grunt.event.on	A			Grunt Event Functions							<section class="prog__container"><p>Adds a listener to the end of the listeners array for the specified event.</p><pre><code>grunt.event.on(event, listener)</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.on
event.on	R	grunt.event.on										
grunt.event.once	A			Grunt Event Functions							<section class="prog__container"><p>Adds a one time listener for the event. The listener is invoked only the first time the event is fired, after which it is removed.</p><pre><code>grunt.event.once(event, listener)</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.once
event.once	R	grunt.event.once										
grunt.event.many	A			Grunt Event Functions							<section class="prog__container"><p>Adds a listener that will execute n times for the event before being removed.</p><pre><code>grunt.event.many(event, timesToListen, listener)</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.many
event.many	R	grunt.event.many										
grunt.event.off	A			Grunt Event Functions							<section class="prog__container"><p>Remove a listener from the listener array for the specified event.</p><pre><code>grunt.event.off(event, listener)</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.off
event.off	R	grunt.event.off										
grunt.event.removealllisteners	A			Grunt Event Functions							<section class="prog__container"><p>Removes all listeners, or those of the specified event.</p><pre><code>grunt.event.removeAllListeners([event])</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.removealllisteners
event.removealllisteners	R	grunt.event.removealllisteners										
grunt.event.emit	A			Grunt Event Functions							<section class="prog__container"><p>Execute each of the listeners that may be listening for the specified event name in order with the list of arguments.</p><pre><code>grunt.event.emit(event, [arg1], [arg2], [...])</code></pre></section>	http://gruntjs.com/api/grunt.event#grunt.event.emit
event.emit	R	grunt.event.emit										
grunt.fail.warn	A			Grunt Fail Functions							<section class="prog__container"><p>Display a warning and abort Grunt immediately. Grunt will continue processing tasks if the --force command-line option was specified. The error argument can be a string message or an error object.</p><pre><code>grunt.fail.warn(error [, errorcode])</code></pre><p>If --stack is specified on the command-line and an error object was specified, a stack trace will be logged.</p><p>This method is also available as grunt.warn.</p></section>	http://gruntjs.com/api/grunt.fail#grunt.fail.warn
fail.warn	R	grunt.fail.warn										
grunt.fail.fatal	A			Grunt Fail Functions							<section class="prog__container"><p>Display a warning and abort Grunt immediately. The error argument can be a string message or an error object.</p><pre><code>grunt.fail.fatal(error [, errorcode])</code></pre><p>If --stack is specified on the command-line and an error object was specified, a stack trace will be logged.</p><p>A beep is emitted on fatal unless the --no-color option is specified.</p><p>This method is also available as grunt.fatal.</p></section>	http://gruntjs.com/api/grunt.fail#grunt.fail.fatal
fail.fatal	R	grunt.fail.fatal										
grunt.file.defaultencoding	A			Grunt File Functions							<section class="prog__container"><p>Set this property to change the default encoding used by all grunt.file methods. Defaults to 'utf8'. If you do have to change this value, it's recommended that you change it as early as possible inside your Gruntfile.</p><pre><code>grunt.file.defaultEncoding = 'utf8';</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.defaultencoding
file.defaultencoding	R	grunt.file.defaultencoding										
grunt.file.preservebom	A			Grunt File Functions							<section class="prog__container"><p>Added in 0.4.2</p><p>Whether to preserve the Byte Order Mark (BOM) on file.read rather than strip it.</p><pre><code>grunt.file.preserveBOM = false;</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.preservebom
file.preservebom	R	grunt.file.preservebom										
grunt.file.read	A			Grunt File Functions							<section class="prog__container"><p>Read and return a file's contents. Returns a string, unless options.encoding is null in which case it returns a Buffer.</p><pre><code>grunt.file.read(filepath [, options])</code></pre><p>The options object has these possible properties:</p><pre><code>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If specified as null, returns a non-decoded Buffer instead of a string.\n  encoding: encodingName\n};</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.read
file.read	R	grunt.file.read										
grunt.file.readjson	A			Grunt File Functions							<section class="prog__container"><p>Read a file's contents, parsing the data as JSON and returning the result. See grunt.file.read for a list of supported options.</p><pre><code>grunt.file.readJSON(filepath [, options])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.readjson
file.readjson	R	grunt.file.readjson										
grunt.file.readyaml	A			Grunt File Functions							<section class="prog__container"><p>Read a file's contents, parsing the data as YAML and returning the result. See grunt.file.read for a list of supported options.</p><pre><code>grunt.file.readYAML(filepath [, options])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.readyaml
file.readyaml	R	grunt.file.readyaml										
grunt.file.write	A			Grunt File Functions							<section class="prog__container"><p>Write the specified contents to a file, creating intermediate directories if necessary. Strings will be encoded using the specified character encoding, Buffers will be written to disk as-specified.</p><p>If the --no-write command-line option is specified, the file won't actually be written.</p><pre><code>grunt.file.write(filepath, contents [, options])</code></pre><p>The options object has these possible properties:</p><pre><code>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If `contents` is a Buffer, encoding is ignored.\n  encoding: encodingName\n};</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.write
file.write	R	grunt.file.write										
grunt.file.copy	A			Grunt File Functions							<section class="prog__container"><p>Copy a source file to a destination path, creating intermediate directories if necessary.</p><p>If the --no-write command-line option is specified, the file won't actually be written.</p><pre><code>grunt.file.copy(srcpath, destpath [, options])</code></pre><p>The options object has these possible properties:</p><pre><code>var options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If null, the `process` function will receive a Buffer instead of String.\n  encoding: encodingName,\n  // The source file contents, source file path, and destination file path\n  // are passed into this function, whose return value will be used as the\n  // destination file's contents. If this function returns `false`, the file\n  // copy will be aborted.\n  process: processFunction,\n  // These optional globbing patterns will be matched against the filepath\n  // (not the filename) using grunt.file.isMatch. If any specified globbing\n  // pattern matches, the file won't be processed via the `process` function.\n  // If `true` is specified, processing will be prevented.\n  noProcess: globbingPatterns\n};</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.copy
file.copy	R	grunt.file.copy										
grunt.file.delete	A			Grunt File Functions							<section class="prog__container"><p>Delete the specified filepath. Will delete files and folders recursively.</p><p>Will not delete the current working directory or files outside the current working directory unless the --force command-line option is specified.</p><p>If the --no-write command-line option is specified, the filepath won't actually be deleted.</p><pre><code>grunt.file.delete(filepath [, options])</code></pre><p>The options object has one possible property:</p><pre><code>var options = {\n  // Enable deleting outside the current working directory. This option may\n  // be overridden by the --force command-line option.\n  force: true\n};</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.delete
file.delete	R	grunt.file.delete										
grunt.file.mkdir	A			Grunt File Functions							<section class="prog__container"><p>Works like mkdir -p. Create a directory along with any intermediate directories. If mode isn't specified, it defaults to 0777 & (~process.umask()).</p><p>If the --no-write command-line option is specified, directories won't actually be created.</p><pre><code>grunt.file.mkdir(dirpath [, mode])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.mkdir
file.mkdir	R	grunt.file.mkdir										
grunt.file.recurse	A			Grunt File Functions							<section class="prog__container"><p>Recurse into a directory, executing callback for each file.</p><pre><code>grunt.file.recurse(rootdir, callback)</code></pre><p>The callback function receives the following arguments:</p><pre><code>function callback(abspath, rootdir, subdir, filename) {\n  // The full path to the current file, which is nothing more than\n  // the rootdir + subdir + filename arguments, joined.\n  abspath\n  // The root director, as originally specified.\n  rootdir\n  // The current file's directory, relative to rootdir.\n  subdir\n  // The filename of the current file, without any directory parts.\n  filename\n}</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.recurse
file.recurse	R	grunt.file.recurse										
grunt.file.expand	A			Grunt File Functions							<section class="prog__container"><p>Return a unique array of all file or directory paths that match the given globbing pattern(s). This method accepts either comma separated globbing patterns or an array of globbing patterns. Paths matching patterns that begin with ! will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p><pre><code>grunt.file.expand([options, ] patterns)</code></pre><p>File paths are relative to the Gruntfile unless the current working directory is changed with grunt.file.setBase or the --base command-line option.</p><span class="prog__sub">The options object supports all minimatch library options, and a few others. For example:</span></section>	http://gruntjs.com/api/grunt.file#grunt.file.expand
file.expand	R	grunt.file.expand										
grunt.file.expandmapping	A			Grunt File Functions							<section class="prog__container"><p>Returns an array of src-dest file mapping objects. For each source file matched by a specified pattern, join that file path to the specified dest. This file path may be flattened or renamed, depending on the options specified. See the grunt.file.expand method documentation for an explanation of how the patterns and options arguments may be specified.</p><pre><code>grunt.file.expandMapping(patterns, dest [, options])</code></pre><p>Note that while this method may be used to programmatically generate a files array for a multi task, the declarative syntax for doing this described in the "Building the files object dynamically" section of the Configuring tasks guide is preferred.</p><p>In addition to those the grunt.file.expand method supports, the options object also supports these properties:</p><pre><code>var options = {\n  // The directory from which patterns are matched. Any string specified as\n  // cwd is effectively stripped from the beginning of all matched paths.\n  cwd: String,\n  // Remove the path component from all matched src files. The src file path\n  // is still joined to the specified dest.\n  flatten: Boolean,\n  // Remove anything after (and including) either the first or last "." in the\n  // destination path (indicated by options.extDot), then append this value.\n  ext: String,\n  // *Added in 0.4.3*\n  // Indicates where the period demarcating the extension is located. Can take:\n  // - 'first' (extension begins after the first period in the file name)\n  // - 'last' (extension begins after the last period)\n  // Default: 'first'\n  extDot: String,\n  // If specified, this function will be responsible for returning the final\n  // dest filepath. By default, it joins dest and matchedSrcPath like so:\n  rename: function(dest, matchedSrcPath, options) {\n    return path.join(dest, matchedSrcPath);\n  }\n};</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.expandmapping
file.expandmapping	R	grunt.file.expandmapping										
grunt.file.match	A			Grunt File Functions							<section class="prog__container"><p>Match one or more globbing patterns against one or more file paths. Returns a uniqued array of all file paths that match any of the specified globbing patterns. Both the patterns and filepaths argument can be a single string or array of strings. Paths matching patterns that begin with ! will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p><pre><code>grunt.file.match([options, ] patterns, filepaths)</code></pre><span class="prog__sub">The options object supports all minimatch library options. For example, if options.matchBase is true, patterns without slashes will match against the basename of the path even if it contains slashes, eg. pattern *.js will match filepath path/to/file.js.</span></section>	http://gruntjs.com/api/grunt.file#grunt.file.match
file.match	R	grunt.file.match										
grunt.file.ismatch	A			Grunt File Functions							<section class="prog__container"><p>This method contains the same signature and logic as the grunt.file.match method, but simply returns true if any files were matched, otherwise false.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.ismatch
file.ismatch	R	grunt.file.ismatch										
grunt.file.exists	A			Grunt File Functions							<section class="prog__container"><p>Does the given path exist? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.exists(path1 [, path2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.exists
file.exists	R	grunt.file.exists										
grunt.file.islink	A			Grunt File Functions							<section class="prog__container"><p>Is the given path a symbolic link? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isLink(path1 [, path2 [, ...]])</code></pre><p>Returns false if the path doesn't exist.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.islink
file.islink	R	grunt.file.islink										
grunt.file.isdir	A			Grunt File Functions							<section class="prog__container"><p>Is the given path a directory? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isDir(path1 [, path2 [, ...]])</code></pre><p>Returns false if the path doesn't exist.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.isdir
file.isdir	R	grunt.file.isdir										
grunt.file.isfile	A			Grunt File Functions							<section class="prog__container"><p>Is the given path a file? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isFile(path1 [, path2 [, ...]])</code></pre><p>Returns false if the path doesn't exist.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.isfile
file.isfile	R	grunt.file.isfile										
grunt.file.ispathabsolute	A			Grunt File Functions							<section class="prog__container"><p>Is a given file path absolute? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isPathAbsolute(path1 [, path2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.ispathabsolute
file.ispathabsolute	R	grunt.file.ispathabsolute										
grunt.file.arepathsequivalent	A			Grunt File Functions							<section class="prog__container"><p>Do all the specified paths refer to the same path? Returns a boolean.</p><pre><code>grunt.file.arePathsEquivalent(path1 [, path2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.arepathsequivalent
file.arepathsequivalent	R	grunt.file.arepathsequivalent										
grunt.file.doespathcontain	A			Grunt File Functions							<section class="prog__container"><p>Are all descendant path(s) contained within the specified ancestor path? Returns a boolean.</p><p>Note: does not check to see if paths actually exist.</p><pre><code>grunt.file.doesPathContain(ancestorPath, descendantPath1 [, descendantPath2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.doespathcontain
file.doespathcontain	R	grunt.file.doespathcontain										
grunt.file.ispathcwd	A			Grunt File Functions							<section class="prog__container"><p>Is a given file path the CWD? Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isPathCwd(path1 [, path2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.ispathcwd
file.ispathcwd	R	grunt.file.ispathcwd										
grunt.file.ispathincwd	A			Grunt File Functions							<section class="prog__container"><p>Is a given file path inside the CWD? Note: CWD is not inside CWD. Returns a boolean.</p><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p><pre><code>grunt.file.isPathInCwd(path1 [, path2 [, ...]])</code></pre></section>	http://gruntjs.com/api/grunt.file#grunt.file.ispathincwd
file.ispathincwd	R	grunt.file.ispathincwd										
grunt.file.setbase	A			Grunt File Functions							<section class="prog__container"><p>Change grunt's current working directory (CWD). By default, all file paths are relative to the Gruntfile. This works just like the --base command-line option.</p><pre><code>grunt.file.setBase(path1 [, path2 [, ...]])</code></pre><p>Like the Node.js path.join method, this method will join all arguments together and normalize the resulting path.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.setbase
file.setbase	R	grunt.file.setbase										
grunt.file.glob	A			Grunt File Functions							<section class="prog__container"><p>Deprecated</p><p>glob - File globbing utility.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.glob
file.glob	R	grunt.file.glob										
grunt.file.minimatch	A			Grunt File Functions							<section class="prog__container"><p>Deprecated</p><p>minimatch - File pattern matching utility.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.minimatch
file.minimatch	R	grunt.file.minimatch										
grunt.file.findup	A			Grunt File Functions							<section class="prog__container"><p>Deprecated</p><p>findup-sync - Search upwards for matching file patterns.</p></section>	http://gruntjs.com/api/grunt.file#grunt.file.findup
file.findup	R	grunt.file.findup										
grunt.log.write-grunt.verbose.write	A			Grunt Log Functions							<section class="prog__container"><p>Log the specified msg string, with no trailing newline.</p><pre><code>grunt.log.write(msg)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.write-grunt.verbose.write
log.write-verbose.write	R	grunt.log.write-grunt.verbose.write										
grunt.log.writeln-grunt.verbose.writeln	A			Grunt Log Functions							<section class="prog__container"><p>Log the specified msg string, with trailing newline.</p><pre><code>grunt.log.writeln([msg])</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.writeln-grunt.verbose.writeln
log.writeln-verbose.writeln	R	grunt.log.writeln-grunt.verbose.writeln										
grunt.log.error-grunt.verbose.error	A			Grunt Log Functions							<section class="prog__container"><p>If msg string is omitted, logs ERROR in red, otherwise logs >> msg, with trailing newline.</p><pre><code>grunt.log.error([msg])</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.error-grunt.verbose.error
log.error-verbose.error	R	grunt.log.error-grunt.verbose.error										
grunt.log.errorlns-grunt.verbose.errorlns	A			Grunt Log Functions							<section class="prog__container"><p>Log an error with grunt.log.error, wrapping text to 80 columns using grunt.log.wraptext.</p><pre><code>grunt.log.errorlns(msg)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.errorlns-grunt.verbose.errorlns
log.errorlns-verbose.errorlns	R	grunt.log.errorlns-grunt.verbose.errorlns										
grunt.log.ok-grunt.verbose.ok	A			Grunt Log Functions							<section class="prog__container"><p>If msg string is omitted, logs OK in green, otherwise logs >> msg, with trailing newline.</p><pre><code>grunt.log.ok([msg])</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.ok-grunt.verbose.ok
log.ok-verbose.ok	R	grunt.log.ok-grunt.verbose.ok										
grunt.log.oklns-grunt.verbose.oklns	A			Grunt Log Functions							<section class="prog__container"><p>Log an ok message with grunt.log.ok, wrapping text to 80 columns using grunt.log.wraptext.</p><pre><code>grunt.log.oklns(msg)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.oklns-grunt.verbose.oklns
log.oklns-verbose.oklns	R	grunt.log.oklns-grunt.verbose.oklns										
grunt.log.subhead-grunt.verbose.subhead	A			Grunt Log Functions							<section class="prog__container"><p>Log the specified msg string in bold, with trailing newline.</p><pre><code>grunt.log.subhead(msg)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.subhead-grunt.verbose.subhead
log.subhead-verbose.subhead	R	grunt.log.subhead-grunt.verbose.subhead										
grunt.log.writeflags-grunt.verbose.writeflags	A			Grunt Log Functions							<section class="prog__container"><p>Log a list of obj properties (good for debugging flags).</p><pre><code>grunt.log.writeflags(obj, prefix)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.writeflags-grunt.verbose.writeflags
log.writeflags-verbose.writeflags	R	grunt.log.writeflags-grunt.verbose.writeflags										
grunt.log.debug-grunt.verbose.debug	A			Grunt Log Functions							<section class="prog__container"><p>Logs a debugging message, but only if the --debug command-line option was specified.</p><pre><code>grunt.log.debug(msg)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.debug-grunt.verbose.debug
log.debug-verbose.debug	R	grunt.log.debug-grunt.verbose.debug										
grunt.verbose-grunt.log.verbose	A			Grunt Log Functions							<section class="prog__container"><p>This object contains all methods of grunt.log but only logs if the --verbose command-line option was specified.</p><pre><code>grunt.verbose</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.verbose-grunt.log.verbose
verbose-log.verbose	R	grunt.verbose-grunt.log.verbose										
grunt.verbose.or-grunt.log.notverbose	A			Grunt Log Functions							<section class="prog__container"><p>This object contains all methods of grunt.log but only logs if the --verbose command-line option was not specified.</p><pre><code>grunt.verbose.or</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.verbose.or-grunt.log.notverbose
verbose.or-log.notverbose	R	grunt.verbose.or-grunt.log.notverbose										
grunt.log.wordlist	A			Grunt Log Functions							<section class="prog__container"><p>Returns a comma-separated list of arr array items.</p><pre><code>grunt.log.wordlist(arr [, options])</code></pre><p>The options object has these possible properties, and default values:</p><pre><code>var options = {\n  // The separator string (can be colored).\n  separator: ', ',\n  // The array item color (specify false to not colorize).\n  color: 'cyan',\n};</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.wordlist
log.wordlist	R	grunt.log.wordlist										
grunt.log.uncolor	A			Grunt Log Functions							<section class="prog__container"><p>Removes all color information from a string, making it suitable for testing .length or perhaps logging to a file.</p><pre><code>grunt.log.uncolor(str)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.uncolor
log.uncolor	R	grunt.log.uncolor										
grunt.log.wraptext	A			Grunt Log Functions							<section class="prog__container"><p>Wrap text string to width characters with \n, ensuring that words are not split in the middle unless absolutely necessary.</p><pre><code>grunt.log.wraptext(width, text)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.wraptext
log.wraptext	R	grunt.log.wraptext										
grunt.log.table	A			Grunt Log Functions							<section class="prog__container"><p>Wrap texts array of strings to columns widths characters wide. A wrapper for the grunt.log.wraptext method that can be used to generate output in columns.</p><pre><code>grunt.log.table(widths, texts)</code></pre></section>	http://gruntjs.com/api/grunt.log#grunt.log.table
log.table	R	grunt.log.table										
grunt.option	A			Grunt Option Functions							<section class="prog__container"><p>Gets or sets an option.</p><pre><code>grunt.option(key[, val])</code></pre><span class="prog__sub">Boolean options can be negated by prepending no- onto the key. For example:</span><pre><code>grunt.option('staging', false);\nvar isDev = grunt.option('no-staging');\n// isDev === true</code></pre></section>	http://gruntjs.com/api/grunt.option#grunt.option
option	R	grunt.option										
grunt.option.init	A			Grunt Option Functions							<section class="prog__container"><p>Initialize grunt.option. If initObject is omitted option will be initialized to an empty object otherwise will be set to initObject.</p><pre><code>grunt.option.init([initObject])</code></pre></section>	http://gruntjs.com/api/grunt.option#grunt.option.init
option.init	R	grunt.option.init										
grunt.option.flags	A			Grunt Option Functions							<section class="prog__container"><p>Returns the options as an array of command line parameters.</p><pre><code>grunt.option.flags()</code></pre></section>	http://gruntjs.com/api/grunt.option#grunt.option.flags
option.flags	R	grunt.option.flags										
grunt.task.registertask	A			Grunt Task Functions							<section class="prog__container"><p>Register an "alias task" or a task function. This method supports the following two signatures:</p><p>Alias task</p><p>If a task list is specified, the new task will be an alias for one or more other tasks. Whenever this "alias task" is run, every specified task in taskList will be run, in the order specified. The taskList argument must be an array of tasks.</p><pre><code>grunt.task.registerTask(taskName, taskList)</code></pre><p>When the optional description string is passed it will be displayed when grunt --help is run:</p><pre><code>grunt.task.registerTask(taskName, description, taskList)</code></pre><span class="prog__sub">This example alias task defines a "default" task whereby the "jshint", "qunit", "concat" and "uglify" tasks are run automatically if Grunt is executed without any tasks specified:</span><pre><code>task.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);</code></pre><span class="prog__sub">Task arguments can be specified as well. In this example, the alias "dist" runs both the "concat" and "uglify" tasks, each with the "dist" argument:</span><pre><code>task.registerTask('dist', ['concat:dist', 'uglify:dist']);</code></pre><p>Function task</p><p>If a description and taskFunction are passed, the specified function will be executed whenever the task is run. In addition, the specified description will be shown when grunt --help is run. Task-specific properties and methods are available inside the task function as properties of the this object. The task function can return false to indicate that the task has failed.</p><p>Note that the grunt.task.registerMultiTask method, explained below, can be used to define a special type of task known as a "multi task."</p><pre><code>grunt.task.registerTask(taskName, description, taskFunction)</code></pre><span class="prog__sub">This example task logs foo, testing 123 if Grunt is run via grunt foo:testing:123. If the task is run without arguments as grunt foo the task logs foo, no args.</span><pre><code>grunt.task.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {\n  if (arguments.length === 0) {\n    grunt.log.writeln(this.name + ", no args");\n  } else {\n    grunt.log.writeln(this.name + ", " + arg1 + " " + arg2);\n  }\n});</code></pre><span class="prog__sub">See the creating tasks documentation for more examples of tasks and alias tasks.</span><p>This method is also available as grunt.registerTask.</p></section>	http://gruntjs.com/api/grunt.task#grunt.task.registertask
task.registertask	R	grunt.task.registertask										
grunt.task.registermultitask	A			Grunt Task Functions							<section class="prog__container"><p>Register a "multi task." A multi task is a task that implicitly iterates over all of its named sub-properties (AKA targets) if no target was specified. In addition to the default properties and methods, extra multi task-specific properties are available inside the task function as properties of the this object.</p><p>Many of the contrib tasks, including the jshint task, concat task and uglify task are multi tasks.</p><pre><code>grunt.task.registerMultiTask(taskName, description, taskFunction)</code></pre><span class="prog__sub">Given the specified configuration, this example multi task would log foo: 1,2,3 if Grunt was run via grunt log:foo, or it would log bar: hello world if Grunt was run via grunt log:bar. If Grunt was run as grunt log however, it would log foo: 1,2,3 then bar: hello world then baz: false.</span><pre><code>grunt.initConfig({\n  log: {\n    foo: [1, 2, 3],\n    bar: 'hello world',\n    baz: false\n  }\n});\n\ngrunt.task.registerMultiTask('log', 'Log stuff.', function() {\n  grunt.log.writeln(this.target + ': ' + this.data);\n});</code></pre><span class="prog__sub">See the creating tasks documentation for more examples of multi tasks.</span><p>This method is also available as grunt.registerMultiTask.</p></section>	http://gruntjs.com/api/grunt.task#grunt.task.registermultitask
task.registermultitask	R	grunt.task.registermultitask										
grunt.task.requires	A			Grunt Task Functions							<section class="prog__container"><p>Fail the task if some other task failed or never ran.</p><pre><code>grunt.task.requires(taskName);</code></pre></section>	http://gruntjs.com/api/grunt.task#grunt.task.requires
task.requires	R	grunt.task.requires										
grunt.task.exists	A			Grunt Task Functions							<section class="prog__container"><p>Added in 0.4.5</p><p>Check with the name, if a task exists in the registered tasks. Return a boolean.</p><pre><code>grunt.task.exists(name)</code></pre></section>	http://gruntjs.com/api/grunt.task#grunt.task.exists
task.exists	R	grunt.task.exists										
grunt.task.renametask	A			Grunt Task Functions							<section class="prog__container"><p>Rename a task. This might be useful if you want to override the default behavior of a task, while retaining the old name.</p><p>Note that if a task has been renamed, the this.name and this.nameArgs properties will change accordingly.</p><pre><code>grunt.task.renameTask(oldname, newname)</code></pre><p>This method is also available as grunt.renameTask.</p></section>	http://gruntjs.com/api/grunt.task#grunt.task.renametask
task.renametask	R	grunt.task.renametask										
grunt.task.loadtasks	A			Grunt Task Functions							<section class="prog__container"><p>Load task-related files from the specified directory, relative to the Gruntfile. This method can be used to load task-related files from a local Grunt plugin by specifying the path to that plugin's "tasks" subdirectory.</p><pre><code>grunt.task.loadTasks(tasksPath)</code></pre><p>This method is also available as grunt.loadTasks.</p></section>	http://gruntjs.com/api/grunt.task#grunt.task.loadtasks
task.loadtasks	R	grunt.task.loadtasks										
grunt.task.loadnpmtasks	A			Grunt Task Functions							<section class="prog__container"><p>Load tasks from the specified Grunt plugin. This plugin must be installed locally via npm, and must be relative to the Gruntfile. Grunt plugins can be created by using the grunt-init gruntplugin template: grunt init:gruntplugin.</p><pre><code>grunt.task.loadNpmTasks(pluginName)</code></pre><p>This method is also available as grunt.loadNpmTasks.</p></section>	http://gruntjs.com/api/grunt.task#grunt.task.loadnpmtasks
task.loadnpmtasks	R	grunt.task.loadnpmtasks										
grunt.task.run	A			Grunt Task Functions							<section class="prog__container"><p>Enqueue one or more tasks. Every specified task in taskList will be run immediately after the current task completes, in the order specified. The task list can be an array of tasks or individual task arguments.</p><pre><code>grunt.task.run(taskList)</code></pre></section>	http://gruntjs.com/api/grunt.task#grunt.task.run
task.run	R	grunt.task.run										
grunt.task.clearqueue	A			Grunt Task Functions							<section class="prog__container"><p>Empty the task queue completely. Unless additional tasks are enqueued, no more tasks will be run.</p><pre><code>grunt.task.clearQueue()</code></pre></section>	http://gruntjs.com/api/grunt.task#grunt.task.clearqueue
task.clearqueue	R	grunt.task.clearqueue										
grunt.task.normalizemultitaskfiles	A			Grunt Task Functions							<section class="prog__container"><p>Normalizes a task target configuration object into an array of src-dest file mappings. This method is used internally by the multi task system this.files / grunt.task.current.files property.</p><pre><code>grunt.task.normalizeMultiTaskFiles(data [, targetname])</code></pre></section>	http://gruntjs.com/api/grunt.task#grunt.task.normalizemultitaskfiles
task.normalizemultitaskfiles	R	grunt.task.normalizemultitaskfiles										
grunt.template.setdelimiters	A			Grunt Template Functions							<section class="prog__container"><p>Set the Lo-Dash template delimiters to a predefined set in case grunt.util._.template needs to be called manually. The config delimiters <% %> are included by default.</p><p>You probably won't need to use this method, because you'll be using grunt.template.process which uses this method internally.</p><pre><code>grunt.template.setDelimiters(name)</code></pre></section>	http://gruntjs.com/api/grunt.template#grunt.template.setdelimiters
template.setdelimiters	R	grunt.template.setdelimiters										
grunt.template.adddelimiters	A			Grunt Template Functions							<section class="prog__container"><p>Add a named set of Lo-Dash template delimiters. You probably won't need to use this method, because the built-in delimiters should be sufficient, but you could always add {% %} or [% %] style delimiters.</p><p>The name argument should be unique since it is how we access the delimiters from grunt.template.setDelimiters and as an option for grunt.template.process.</p><pre><code>grunt.template.addDelimiters(name, opener, closer)</code></pre><span class="prog__sub">In this example, if we were to use the {% %} style mentioned above we would use the following:</span><pre><code>grunt.template.addDelimiters('myDelimiters', '{%', '%}')</code></pre></section>	http://gruntjs.com/api/grunt.template#grunt.template.adddelimiters
template.adddelimiters	R	grunt.template.adddelimiters										
grunt.template.date	A			Grunt Template Functions							<section class="prog__container"><p>Format a date using the dateformat library.</p><pre><code>grunt.template.date(date, format)</code></pre><span class="prog__sub">In this example, a specific date is formatted as month/day/year.</span><pre><code>grunt.template.date(847602000000, 'yyyy-mm-dd') // '1996-11-10'</code></pre></section>	http://gruntjs.com/api/grunt.template#grunt.template.date
template.date	R	grunt.template.date										
grunt.template.today	A			Grunt Template Functions							<section class="prog__container"><p>Format today's date using the dateformat library.</p><pre><code>grunt.template.today(format)</code></pre><span class="prog__sub">In this example, today's date is formatted as a 4-digit year.</span><pre><code>grunt.template.today('yyyy') // '2016'</code></pre><p>(somebody remind me to update this date every year so the docs appear current)</p></section>	http://gruntjs.com/api/grunt.template#grunt.template.today
template.today	R	grunt.template.today										
grunt.util.error	A			Grunt Util Functions							<section class="prog__container"><p>Return a new Error instance (that can be thrown) with the appropriate message. If an Error object is specified instead of message that object will be returned.\nAlso, if an Error object is specified for origError and Grunt was run with the --stack option, the original Error stack will be dumped.</p><pre><code>grunt.util.error(message [, origError])</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.error
util.error	R	grunt.util.error										
grunt.util.linefeed	A			Grunt Util Functions							<section class="prog__container"><p>The linefeed character, normalized for the current operating system. (\r\n on Windows, \n otherwise)</p></section>	http://gruntjs.com/api/grunt.util#grunt.util.linefeed
util.linefeed	R	grunt.util.linefeed										
grunt.util.normalizelf	A			Grunt Util Functions							<section class="prog__container"><p>Given a string, return a new string with all the linefeeds normalized for the current operating system. (\r\n on Windows, \n otherwise)</p><pre><code>grunt.util.normalizelf(string)</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.normalizelf
util.normalizelf	R	grunt.util.normalizelf										
grunt.util.recurse	A			Grunt Util Functions							<section class="prog__container"><p>Recurse through nested objects and arrays, executing callbackFunction for each non-object value. If continueFunction returns false, a given object or value will be skipped.</p><pre><code>grunt.util.recurse(object, callbackFunction, continueFunction)</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.recurse
util.recurse	R	grunt.util.recurse										
grunt.util.repeat	A			Grunt Util Functions							<section class="prog__container"><p>Return string str repeated n times.</p><pre><code>grunt.util.repeat(n, str)</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.repeat
util.repeat	R	grunt.util.repeat										
grunt.util.pluralize	A			Grunt Util Functions							<section class="prog__container"><p>Given str of "a/b", If n is 1, return "a" otherwise "b". You can specify a custom separator if '/' doesn't work for you.</p><pre><code>grunt.util.pluralize(n, str, separator)</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.pluralize
util.pluralize	R	grunt.util.pluralize										
grunt.util.spawn	A			Grunt Util Functions							<section class="prog__container"><p>Spawn a child process, keeping track of its stdout, stderr and exit code. The method returns a reference to the spawned child. When the child exits, the doneFunction is called.</p><pre><code>grunt.util.spawn(options, doneFunction)</code></pre><p>The options object has these possible properties:</p><pre><code>var options = {\n  // The command to execute. It should be in the system path.\n  cmd: commandToExecute,\n  // If specified, the same grunt bin that is currently running will be\n  // spawned as the child command, instead of the "cmd" option. Defaults\n  // to false.\n  grunt: boolean,\n  // An array of arguments to pass to the command.\n  args: arrayOfArguments,\n  // Additional options for the Node.js child_process spawn method.\n  opts: nodeSpawnOptions,\n  // If this value is set and an error occurs, it will be used as the value\n  // and null will be passed as the error value.\n  fallback: fallbackValue\n};</code></pre><p>The doneFunction accepts these arguments:</p><pre><code>function doneFunction(error, result, code) {\n  // If the exit code was non-zero and a fallback wasn't specified, an Error\n  // object, otherwise null.\n  error\n  // The result object is an object with the properties .stdout, .stderr, and\n  // .code (exit code).\n  result\n  // When result is coerced to a string, the value is stdout if the exit code\n  // was zero, the fallback if the exit code was non-zero and a fallback was\n  // specified, or stderr if the exit code was non-zero and a fallback was\n  // not specified.\n  String(result)\n  // The numeric exit code.\n  code\n}</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.spawn
util.spawn	R	grunt.util.spawn										
grunt.util.toarray	A			Grunt Util Functions							<section class="prog__container"><p>Given an array or array-like object, return an array. Great for converting arguments objects into arrays.</p><pre><code>grunt.util.toArray(arrayLikeObject)</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.toarray
util.toarray	R	grunt.util.toarray										
grunt.util.callbackify	A			Grunt Util Functions							<section class="prog__container"><p>Normalizes both "returns a value" and "passes result to a callback" functions to always pass a result to the specified callback. If the original function returns a value, that value will now be passed to the callback, which is specified as the last argument, after all other predefined arguments. If the original function passed a value to a callback, it will continue to do so.</p><pre><code>grunt.util.callbackify(syncOrAsyncFunction)</code></pre><span class="prog__sub">This example might better illustrate:</span><pre><code>function add1(a, b) {\n  return a + b;\n}\nfunction add2(a, b, callback) {\n  callback(a + b);\n}\n\nvar fn1 = grunt.util.callbackify(add1);\nvar fn2 = grunt.util.callbackify(add2);\n\nfn1(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});\nfn2(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});</code></pre></section>	http://gruntjs.com/api/grunt.util#grunt.util.callbackify
util.callbackify	R	grunt.util.callbackify										
grunt.util.namespace	A			Grunt Util Functions							<section class="prog__container"><p>An internal library for resolving deeply-nested properties in objects.</p></section>	http://gruntjs.com/api/grunt.util#grunt.util.namespace
util.namespace	R	grunt.util.namespace										
grunt.util.task	A			Grunt Util Functions							<section class="prog__container"><p>An internal library for task running.</p></section>	http://gruntjs.com/api/grunt.util#grunt.util.task
util.task	R	grunt.util.task										
