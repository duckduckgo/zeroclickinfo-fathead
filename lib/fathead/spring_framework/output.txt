Advice	A										<section class="prog__container">Tag interface for Advice. Implementations can be any type\n of advice, such as Interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/aop/Advice.html
AspectException	A										<section class="prog__container">Superclass for all AOP infrastructure exceptions.\n Unchecked, as such exceptions are fatal and end user\n code shouldn't be forced to catch them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/aop/AspectException.html
ConstructorInterceptor	A										<section class="prog__container">Intercepts the construction of a new object.\n\n The user should implement the construct(ConstructorInvocation) method to modify the original\n behavior. E.g. the following class implements a singleton\n interceptor (allows only one unique instance for the intercepted\n class):\n\n \n class DebuggingInterceptor implements ConstructorInterceptor {\n   Object instance=null;\n\n   Object construct(ConstructorInvocation i) throws Throwable {\n     if(instance==null) {\n       return instance=i.proceed();\n     } else {\n       throw new Exception("singleton does not allow multiple instance");\n     }\n   }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/ConstructorInterceptor.html
ConstructorInvocation	A										<section class="prog__container">Description of an invocation to a constuctor, given to an\n interceptor upon constructor-call.\n\n A constructor invocation is a joinpoint and can be intercepted\n by a constructor interceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/ConstructorInvocation.html
Interceptor	A										<section class="prog__container">This interface represents a generic interceptor.\n\n A generic interceptor can intercept runtime events that occur\n within a base program. Those events are materialized by (reified\n in) joinpoints. Runtime joinpoints can be invocations, field\n access, exceptions... \n\n This interface is not used directly. Use the sub-interfaces\n to intercept specific events. For instance, the following class\n implements some specific interceptors in order to implement a\n debugger:\n\n \n class DebuggingInterceptor implements MethodInterceptor, \n     ConstructorInterceptor, FieldInterceptor {\n\n   Object invoke(MethodInvocation i) throws Throwable {\n     debug(i.getMethod(), i.getThis(), i.getArgs());\n     return i.proceed();\n   }\n\n   Object construct(ConstructorInvocation i) throws Throwable {\n     debug(i.getConstructor(), i.getThis(), i.getArgs());\n     return i.proceed();\n   }\n \n   Object get(FieldAccess fa) throws Throwable {\n     debug(fa.getField(), fa.getThis(), null);\n     return fa.proceed();\n   }\n\n   Object set(FieldAccess fa) throws Throwable {\n     debug(fa.getField(), fa.getThis(), fa.getValueToSet());\n     return fa.proceed();\n   }\n\n   void debug(AccessibleObject ao, Object this, Object value) {\n     ...\n   }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/Interceptor.html
Invocation	A										<section class="prog__container">This interface represents an invocation in the program.\n\n An invocation is a joinpoint and can be intercepted by an\n interceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/Invocation.html
Joinpoint	A										<section class="prog__container">This interface represents a generic runtime joinpoint (in the AOP\n terminology).\n\n A runtime joinpoint is an event that occurs on a static\n joinpoint (i.e. a location in a the program). For instance, an\n invocation is the runtime joinpoint on a method (static joinpoint).\n The static part of a given joinpoint can be generically retrieved\n using the getStaticPart() method.\n\n In the context of an interception framework, a runtime joinpoint\n is then the reification of an access to an accessible object (a\n method, a constructor, a field), i.e. the static part of the\n joinpoint. It is passed to the interceptors that are installed on\n the static joinpoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/Joinpoint.html
MethodInterceptor	A										<section class="prog__container">Intercepts calls on an interface on its way to the target. These\n are nested "on top" of the target.\n\n The user should implement the invoke(MethodInvocation)\n method to modify the original behavior. E.g. the following class\n implements a tracing interceptor (traces all the calls on the\n intercepted method(s)):\n\n \n class TracingInterceptor implements MethodInterceptor {\n   Object invoke(MethodInvocation i) throws Throwable {\n     System.out.println("method "+i.getMethod()+" is called on "+\n                        i.getThis()+" with args "+i.getArguments());\n     Object ret=i.proceed();\n     System.out.println("method "+i.getMethod()+" returns "+ret);\n     return ret;\n   }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/MethodInterceptor.html
MethodInvocation	A										<section class="prog__container">Description of an invocation to a method, given to an interceptor\n upon method-call.\n\n A method invocation is a joinpoint and can be intercepted by a\n method interceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/aopalliance/intercept/MethodInvocation.html
WebappClassLoader	A										<section class="prog__container">A mock of Tomcat's WebappClassLoader just for Spring's compilation purposes.\n Exposes both pre-7.0.63 as well as 7.0.63+ variants of findResourceInternal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/apache/catalina/loader/WebappClassLoader.html
Advisor	A										<section class="prog__container">Base interface holding AOP advice (action to take at a joinpoint)\n and a filter determining the applicability of the advice (such as\n a pointcut). This interface is not for use by Spring users, but to\n allow for commonality in support for different types of advice.\nSpring AOP is based around around advice delivered via method\n interception, compliant with the AOP Alliance interception API.\n The Advisor interface allows support for different types of advice,\n such as before and after advice, which need not be\n implemented using interception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/Advisor.html
AfterAdvice	A										<section class="prog__container">Common marker interface for after advice,\n such as AfterReturningAdvice and ThrowsAdvice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/AfterAdvice.html
AfterReturningAdvice	A										<section class="prog__container">After returning advice is invoked only on normal method return, not if an\n exception is thrown. Such advice can see the return value, but cannot change it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/AfterReturningAdvice.html
AopInvocationException	A										<section class="prog__container">Exception that gets thrown when an AOP invocation failed\n because of misconfiguration or unexpected runtime issues.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/AopInvocationException.html
BeforeAdvice	A										<section class="prog__container">Common marker interface for before advice, such as MethodBeforeAdvice.\n\n Spring supports only method before advice. Although this is unlikely to change,\n this API is designed to allow field advice in future if desired.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/BeforeAdvice.html
ClassFilter	A										<section class="prog__container">Filter that restricts matching of a pointcut or introduction to\n a given set of target classes.\n\n Can be used as part of a Pointcut or for the entire\n targeting of an IntroductionAdvisor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/ClassFilter.html
DynamicIntroductionAdvice	A										<section class="prog__container">Subinterface of AOP Alliance Advice that allows additional interfaces\n to be implemented by an Advice, and available via a proxy using that\n interceptor. This is a fundamental AOP concept called introduction.\n\n Introductions are often mixins, enabling the building of composite\n objects that can achieve many of the goals of multiple inheritance in Java.\n\n Compared to {qlink IntroductionInfo}, this interface allows an advice to\n implement a range of interfaces that is not necessarily known in advance.\n Thus an IntroductionAdvisor can be used to specify which interfaces\n will be exposed in an advised object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/DynamicIntroductionAdvice.html
IntroductionAdvisor	A										<section class="prog__container">Superinterface for advisors that perform one or more AOP introductions.\n\n This interface cannot be implemented directly; subinterfaces must\n provide the advice type implementing the introduction.\n\n Introduction is the implementation of additional interfaces\n (not implemented by a target) via AOP advice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/IntroductionAdvisor.html
IntroductionAwareMethodMatcher	A										<section class="prog__container">A specialized type of MethodMatcher that takes into account introductions\n when matching methods. If there are no introductions on the target class,\n a method matcher may be able to optimize matching more effectively for example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/IntroductionAwareMethodMatcher.html
IntroductionInfo	A										<section class="prog__container">Interface supplying the information necessary to describe an introduction.\n\n IntroductionAdvisors must implement this\n interface. If an Advice implements this,\n it may be used as an introduction without an IntroductionAdvisor.\n In this case, the advice is self-describing, providing not only the\n necessary behavior, but describing the interfaces it introduces.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/IntroductionInfo.html
IntroductionInterceptor	A										<section class="prog__container">Subinterface of AOP Alliance MethodInterceptor that allows additional interfaces\n to be implemented by the interceptor, and available via a proxy using that\n interceptor. This is a fundamental AOP concept called introduction.\n\n Introductions are often mixins, enabling the building of composite\n objects that can achieve many of the goals of multiple inheritance in Java.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/IntroductionInterceptor.html
MethodBeforeAdvice	A										<section class="prog__container">Advice invoked before a method is invoked. Such advices cannot\n prevent the method call proceeding, unless they throw a Throwable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/MethodBeforeAdvice.html
MethodMatcher	A										<section class="prog__container">Part of a Pointcut: Checks whether the target method is eligible for advice.\n\n A MethodMatcher may be evaluated statically or at runtime (dynamically).\n Static matching involves method and (possibly) method attributes. Dynamic matching\n also makes arguments for a particular call available, and any effects of running\n previous advice applying to the joinpoint.\n\n If an implementation returns false from its isRuntime()\n method, evaluation can be performed statically, and the result will be the same\n for all invocations of this method, whatever their arguments. This means that\n if the isRuntime() method returns false, the 3-arg\n matches(java.lang.reflect.Method, Class, Object[]) method will never be invoked.\n\n If an implementation returns true from its 2-arg\n matches(java.lang.reflect.Method, Class) method and its isRuntime() method\n returns true, the 3-arg matches(java.lang.reflect.Method, Class, Object[])\n method will be invoked immediately before each potential execution of the related advice,\n to decide whether the advice should run. All previous advice, such as earlier interceptors\n in an interceptor chain, will have run, so any state changes they have produced in\n parameters or ThreadLocal state will be available at the time of evaluation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/MethodMatcher.html
Pointcut	A										<section class="prog__container">Core Spring pointcut abstraction.\n\n A pointcut is composed of a ClassFilter and a MethodMatcher.\n Both these basic terms and a Pointcut itself can be combined to build up combinations\n (e.g. through ComposablePointcut).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/Pointcut.html
PointcutAdvisor	A										<section class="prog__container">Superinterface for all Advisors that are driven by a pointcut.\n This covers nearly all advisors except introduction advisors,\n for which method-level matching doesn't apply.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/PointcutAdvisor.html
ProxyMethodInvocation	A										<section class="prog__container">Extension of the AOP Alliance MethodInvocation\n interface, allowing access to the proxy that the method invocation was made through.\n\n Useful to be able to substitute return values with the proxy,\n if necessary, for example if the invocation target returned itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/ProxyMethodInvocation.html
RawTargetAccess	A										<section class="prog__container">Marker for AOP proxy interfaces (in particular: introduction interfaces)\n that explicitly intend to return the raw target object (which would normally\n get replaced with the proxy object when returned from a method invocation).\n\n Note that this is a marker interface in the style of Serializable,\n semantically applying to a declared interface rather than to the full class\n of a concrete object. In other words, this marker applies to a particular\n interface only (typically an introduction interface that does not serve\n as the primary interface of an AOP proxy), and hence does not affect\n other interfaces that a concrete AOP proxy may implement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/RawTargetAccess.html
SpringProxy	A										<section class="prog__container">Marker interface implemented by all AOP proxies. Used to detect\n whether or not objects are Spring-generated proxies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/SpringProxy.html
TargetClassAware	A										<section class="prog__container">Minimal interface for exposing the target class behind a proxy.\n\n Implemented by AOP proxy objects and proxy factories\n (via Advised)\n as well as by TargetSources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/TargetClassAware.html
TargetSource	A										<section class="prog__container">A TargetSource is used to obtain the current "target" of\n an AOP invocation, which will be invoked via reflection if no around\n advice chooses to end the interceptor chain itself.\n\n If a TargetSource is "static", it will always return\n the same target, allowing optimizations in the AOP framework. Dynamic\n target sources can support pooling, hot swapping, etc.\n\n Application developers don't usually need to work with\n TargetSources directly: this is an AOP framework interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/TargetSource.html
ThrowsAdvice	A										<section class="prog__container">Tag interface for throws advice.\n\n There are not any methods on this interface, as methods are invoked by\n reflection. Implementing classes must implement methods of the form:\n\n void afterThrowing([Method, args, target], ThrowableSubclass);\nSome examples of valid methods would be:\n\n public void afterThrowing(Exception ex)\npublic void afterThrowing(RemoteException)\npublic void afterThrowing(Method method, Object[] args, Object target, Exception ex)\npublic void afterThrowing(Method method, Object[] args, Object target, ServletException ex)\n\n The first three arguments are optional, and only useful if we want further\n information about the joinpoint, as in AspectJ after-throwing advice.\n\n Note: If a throws-advice method throws an exception itself, it will\n override the original exception (i.e. change the exception thrown to the user).\n The overriding exception will typically be a RuntimeException; this is compatible\n with any method signature. However, if a throws-advice method throws a checked\n exception, it will have to match the declared exceptions of the target method\n and is hence to some degree coupled to specific target method signatures.\n Do not throw an undeclared checked exception that is incompatible with\n the target method's signature!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/ThrowsAdvice.html
AbstractAspectJAdvice	A										<section class="prog__container">Base class for AOP Alliance Advice classes\n wrapping an AspectJ aspect or an AspectJ-annotated advice method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AbstractAspectJAdvice.html
AspectInstanceFactory	A										<section class="prog__container">Interface implemented to provide an instance of an AspectJ aspect.\n Decouples from Spring's bean factory.\n\n Extends the Ordered interface\n to express an order value for the underlying aspect in a chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectInstanceFactory.html
AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException	A										<section class="prog__container">Thrown in response to an ambiguous binding being detected when\n trying to resolve a method's parameter names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException.html
AspectJAdviceParameterNameDiscoverer	A										<section class="prog__container">ParameterNameDiscoverer implementation that tries to deduce parameter names\n for an advice method from the pointcut expression, returning, and throwing clauses.\n If an unambiguous interpretation is not available, it returns null.\n\n This class interprets arguments in the following way:\n \nIf the first parameter of the method is of type JoinPoint\n or ProceedingJoinPoint, it is assumed to be for passing\n thisJoinPoint to the advice, and the parameter name will\n be assigned the value "thisJoinPoint".\nIf the first parameter of the method is of type\n JoinPoint.StaticPart, it is assumed to be for passing\n "thisJoinPointStaticPart" to the advice, and the parameter name\n will be assigned the value "thisJoinPointStaticPart".\nIf a throwingName has been set, and\n there are no unbound arguments of type Throwable+, then an\n IllegalArgumentException is raised. If there is more than one\n unbound argument of type Throwable+, then an\n AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException is raised. If there is exactly one\n unbound argument of type Throwable+, then the corresponding\n parameter name is assigned the value <throwingName>.\nIf there remain unbound arguments, then the pointcut expression is\n examined. Let a be the number of annotation-based pointcut\n expressions (@annotation, @this, @target, @args,\n @within, @withincode) that are used in binding form. Usage in\n binding form has itself to be deduced: if the expression inside the\n pointcut is a single string literal that meets Java variable name\n conventions it is assumed to be a variable name. If a is\n zero we proceed to the next stage. If a > 1 then an\n AmbiguousBindingException is raised. If a == 1,\n and there are no unbound arguments of type Annotation+,\n then an IllegalArgumentException is raised. if there is\n exactly one such argument, then the corresponding parameter name is\n assigned the value from the pointcut expression.\nIf a returningName has been set, and there are no unbound arguments\n then an IllegalArgumentException is raised. If there is\n more than one unbound argument then an\n AmbiguousBindingException is raised. If there is exactly\n one unbound argument then the corresponding parameter name is assigned\n the value <returningName>.\nIf there remain unbound arguments, then the pointcut expression is\n examined once more for this, target, and\n args pointcut expressions used in the binding form (binding\n forms are deduced as described for the annotation based pointcuts). If\n there remains more than one unbound argument of a primitive type (which\n can only be bound in args) then an\n AmbiguousBindingException is raised. If there is exactly\n one argument of a primitive type, then if exactly one args\n bound variable was found, we assign the corresponding parameter name\n the variable name. If there were no args bound variables\n found an IllegalStateException is raised. If there are\n multiple args bound variables, an\n AmbiguousBindingException is raised. At this point, if\n there remains more than one unbound argument we raise an\n AmbiguousBindingException. If there are no unbound arguments\n remaining, we are done. If there is exactly one unbound argument\n remaining, and only one candidate variable name unbound from\n this, target, or args, it is\n assigned as the corresponding parameter name. If there are multiple\n possibilities, an AmbiguousBindingException is raised.\n\nThe behavior on raising an IllegalArgumentException or\n AmbiguousBindingException is configurable to allow this discoverer\n to be used as part of a chain-of-responsibility. By default the condition will\n be logged and the getParameterNames(..) method will simply return\n null. If the raiseExceptions\n property is set to true, the conditions will be thrown as\n IllegalArgumentException and AmbiguousBindingException,\n respectively.\n\n Was that perfectly clear? ;)\n\n Short version: If an unambiguous binding can be deduced, then it is.\n If the advice requirements cannot possibly be satisfied, then null\n is returned. By setting the raiseExceptions\n property to true, descriptive exceptions will be thrown instead of\n returning null in the case that the parameter names cannot be discovered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.html
AspectJAfterAdvice	A										<section class="prog__container">Spring AOP advice wrapping an AspectJ after advice method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAfterAdvice.html
AspectJAfterReturningAdvice	A										<section class="prog__container">Spring AOP advice wrapping an AspectJ after-returning advice method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAfterReturningAdvice.html
AspectJAfterThrowingAdvice	A										<section class="prog__container">Spring AOP advice wrapping an AspectJ after-throwing advice method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAfterThrowingAdvice.html
AspectJAopUtils	A										<section class="prog__container">Utility methods for dealing with AspectJ advisors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAopUtils.html
AspectJAroundAdvice	A										<section class="prog__container">Spring AOP around advice (MethodInterceptor) that wraps\n an AspectJ advice method. Exposes ProceedingJoinPoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJAroundAdvice.html
AspectJExpressionPointcut	A										<section class="prog__container">Spring Pointcut implementation\n that uses the AspectJ weaver to evaluate a pointcut expression.\n\n The pointcut expression value is an AspectJ expression. This can\n reference other pointcuts and use composition and other operations.\n\n Naturally, as this is to be processed by Spring AOP's proxy-based model,\n only method execution pointcuts are supported.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJExpressionPointcut.html
AspectJExpressionPointcutAdvisor	A										<section class="prog__container">Spring AOP Advisor that can be used for any AspectJ pointcut expression.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJExpressionPointcutAdvisor.html
AspectJMethodBeforeAdvice	A										<section class="prog__container">Spring AOP advice that wraps an AspectJ before method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJMethodBeforeAdvice.html
AspectJPointcutAdvisor	A										<section class="prog__container">AspectJPointcutAdvisor that adapts an AbstractAspectJAdvice\n to the PointcutAdvisor interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJPointcutAdvisor.html
AspectJPrecedenceInformation	A										<section class="prog__container">Interface to be implemented by types that can supply the information\n needed to sort advice/advisors by AspectJ's precedence rules.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJPrecedenceInformation.html
AspectJProxyUtils	A										<section class="prog__container">Utility methods for working with AspectJ proxies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJProxyUtils.html
AspectJWeaverMessageHandler	A										<section class="prog__container">Implementation of AspectJ's IMessageHandler interface that\n routes AspectJ weaving messages through the same logging system as the\n regular Spring messages.\n\n Pass the option...\n\n -XmessageHandlerClass:org.springframework.aop.aspectj.AspectJWeaverMessageHandler\nto the weaver; for example, specifying the following in a\n "META-INF/aop.xml file:\n\n <weaver options="..."/></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/AspectJWeaverMessageHandler.html
DeclareParentsAdvisor	A										<section class="prog__container">Introduction advisor delegating to the given object.\n Implements AspectJ annotation-style behavior for the DeclareParents annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/DeclareParentsAdvisor.html
InstantiationModelAwarePointcutAdvisor	A										<section class="prog__container">Interface to be implemented by Spring AOP Advisors wrapping AspectJ\n aspects that may have a lazy initialization strategy. For example,\n a perThis instantiation model would mean lazy initialization of the advice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/InstantiationModelAwarePointcutAdvisor.html
MethodInvocationProceedingJoinPoint	A										<section class="prog__container">Implementation of AspectJ ProceedingJoinPoint interface\n wrapping an AOP Alliance MethodInvocation.\n\n Note: the getThis() method returns the current Spring AOP proxy.\n The getTarget() method returns the current Spring AOP target (which may be\n null if there is no target), and is a plain POJO without any advice.\n If you want to call the object and have the advice take effect, use\n getThis(). A common example is casting the object to an\n introduced interface in the implementation of an introduction.\n\n Of course there is no such distinction between target and proxy in AspectJ.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.html
SimpleAspectInstanceFactory	A										<section class="prog__container">Implementation of AspectInstanceFactory that creates a new instance\n of the specified aspect class for every getAspectInstance() call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/SimpleAspectInstanceFactory.html
SingletonAspectInstanceFactory	A										<section class="prog__container">Implementation of AspectInstanceFactory that is backed by a\n specified singleton object, returning the same instance for every\n getAspectInstance() call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/SingletonAspectInstanceFactory.html
TypePatternClassFilter	A										<section class="prog__container">Spring AOP ClassFilter implementation using AspectJ type matching.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/TypePatternClassFilter.html
AbstractAspectJAdvisorFactory.AspectJAnnotationType	A										<section class="prog__container">Returns the enum constant of this type with the specified name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.AspectJAnnotationType.html
AbstractAspectJAdvisorFactory	A										<section class="prog__container">Abstract base class for factories that can create Spring AOP Advisors\n given AspectJ classes from classes honoring the AspectJ 5 annotation syntax.\n\n This class handles annotation parsing and validation functionality.\n It does not actually generate Spring AOP Advisors, which is deferred to subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.html
AnnotationAwareAspectJAutoProxyCreator	A										<section class="prog__container">AspectJAwareAdvisorAutoProxyCreator subclass that processes all AspectJ\n annotation aspects in the current application context, as well as Spring Advisors.\n\n Any AspectJ annotated classes will automatically be recognized, and their\n advice applied if Spring AOP's proxy-based model is capable of applying it.\n This covers method execution joinpoints.\n\n If the <aop:include> element is used, only @AspectJ beans with names matched by\n an include pattern will be considered as defining aspects to use for Spring auto-proxying.\n\n Processing of Spring Advisors follows the rules established in\n AbstractAdvisorAutoProxyCreator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.html
AspectJAdvisorFactory	A										<section class="prog__container">Interface for factories that can create Spring AOP Advisors from classes\n annotated with AspectJ annotation syntax.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AspectJAdvisorFactory.html
AspectJProxyFactory	A										<section class="prog__container">AspectJ-based proxy factory, allowing for programmatic building\n of proxies which include AspectJ aspects (code style as well\n Java 5 annotation style).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.html
AspectMetadata	A										<section class="prog__container">Metadata for an AspectJ aspect class, with an additional Spring AOP pointcut\n for the per clause.\n\n Uses AspectJ 5 AJType reflection API, so is only supported on Java 5.\n Enables us to work with different AspectJ instantiation models such as\n "singleton", "pertarget" and "perthis".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/AspectMetadata.html
BeanFactoryAspectInstanceFactory	A										<section class="prog__container">AspectInstanceFactory implementation\n backed by a Spring BeanFactory.\n\n Note that this may instantiate multiple times if using a prototype,\n which probably won't give the semantics you expect.\n Use a LazySingletonAspectInstanceFactoryDecorator\n to wrap this to ensure only one new aspect comes back.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.html
BeanFactoryAspectJAdvisorsBuilder	A										<section class="prog__container">Helper for retrieving @AspectJ beans from a BeanFactory and building\n Spring Advisors based on them, for use with auto-proxying.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.html
LazySingletonAspectInstanceFactoryDecorator	A										<section class="prog__container">Decorator to cause a MetadataAwareAspectInstanceFactory to instantiate only once.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.html
MetadataAwareAspectInstanceFactory	A										<section class="prog__container">Subinterface of AspectInstanceFactory\n that returns AspectMetadata associated with AspectJ-annotated classes.\n\n Ideally, AspectInstanceFactory would include this method itself, but because\n AspectMetadata uses Java-5-only AjType,\n we need to split out this subinterface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/MetadataAwareAspectInstanceFactory.html
NotAnAtAspectException	A										<section class="prog__container">Extension of AopConfigException thrown when trying to perform\n an advisor generation operation on a class that is not an\n AspectJ annotation-style aspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/NotAnAtAspectException.html
PrototypeAspectInstanceFactory	A										<section class="prog__container">AspectInstanceFactory backed by a\n BeanFactory-provided prototype, enforcing prototype semantics.\n\n Note that this may instantiate multiple times, which probably won't give the\n semantics you expect. Use a LazySingletonAspectInstanceFactoryDecorator\n to wrap this to ensure only one new aspect comes back.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/PrototypeAspectInstanceFactory.html
ReflectiveAspectJAdvisorFactory	A										<section class="prog__container">Factory that can create Spring AOP Advisors given AspectJ classes from\n classes honoring the AspectJ 5 annotation syntax, using reflection to\n invoke the corresponding advice methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.html
ReflectiveAspectJAdvisorFactory.SyntheticInstantiationAdvisor	A										<section class="prog__container">Synthetic advisor that instantiates the aspect.\n Triggered by per-clause pointcut on non-singleton aspect.\n The advice has no effect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.SyntheticInstantiationAdvisor.html
SimpleMetadataAwareAspectInstanceFactory	A										<section class="prog__container">Implementation of MetadataAwareAspectInstanceFactory that\n creates a new instance of the specified aspect class for every\n SimpleAspectInstanceFactory.getAspectInstance() call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.html
SingletonMetadataAwareAspectInstanceFactory	A										<section class="prog__container">Implementation of MetadataAwareAspectInstanceFactory that is backed\n by a specified singleton object, returning the same instance for every\n SingletonAspectInstanceFactory.getAspectInstance() call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/annotation/SingletonMetadataAwareAspectInstanceFactory.html
AspectJAwareAdvisorAutoProxyCreator	A										<section class="prog__container">AbstractAdvisorAutoProxyCreator\n subclass that exposes AspectJ's invocation context and understands AspectJ's rules\n for advice precedence when multiple pieces of advice come from the same aspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.html
AbstractInterceptorDrivenBeanDefinitionDecorator	A										<section class="prog__container">Base implementation for\n BeanDefinitionDecorators\n wishing to add an interceptor\n to the resulting bean.\n\n This base class controls the creation of the ProxyFactoryBean bean definition\n and wraps the original as an inner-bean definition for the target property\n of ProxyFactoryBean.\n\n Chaining is correctly handled, ensuring that only one ProxyFactoryBean definition\n is created. If a previous BeanDefinitionDecorator\n already created the ProxyFactoryBean then the\n interceptor is simply added to the existing definition.\n\n Subclasses have only to create the BeanDefinition to the interceptor that\n they wish to add.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.html
AdviceEntry	A										<section class="prog__container">ParseState entry representing an advice element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AdviceEntry.html
AdvisorComponentDefinition	A										<section class="prog__container">ComponentDefinition\n that bridges the gap between the advisor bean definition configured\n by the <aop:advisor> tag and the component definition\n infrastructure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AdvisorComponentDefinition.html
AdvisorEntry	A										<section class="prog__container">ParseState entry representing an advisor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AdvisorEntry.html
AopConfigUtils	A										<section class="prog__container">Utility class for handling registration of AOP auto-proxy creators.\n\n Only a single auto-proxy creator can be registered yet multiple concrete\n implementations are available. Therefore this class wraps a simple escalation\n protocol, allowing classes to request a particular auto-proxy creator and know\n that class, or a subclass thereof, will eventually be resident\n in the application context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AopConfigUtils.html
AopNamespaceHandler	A										<section class="prog__container">NamespaceHandler for the aop namespace.\n\n Provides a BeanDefinitionParser for the\n <aop:config> tag. A config tag can include nested\n pointcut, advisor and aspect tags.\n\n The pointcut tag allows for creation of named\n AspectJExpressionPointcut beans using a simple syntax:\n \n <aop:pointcut id="getNameCalls" expression="execution(* *..ITestBean.getName(..))"/>\n \nUsing the advisor tag you can configure an Advisor\n and have it applied to all relevant beans in you BeanFactory\n automatically. The advisor tag supports both in-line and referenced\n Pointcuts:\n\n \n <aop:advisor id="getAgeAdvisor"\n     pointcut="execution(* *..ITestBean.getAge(..))"\n     advice-ref="getAgeCounter"/>\n\n <aop:advisor id="getNameAdvisor"\n     pointcut-ref="getNameCalls"\n     advice-ref="getNameCounter"/></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AopNamespaceHandler.html
AopNamespaceUtils	A										<section class="prog__container">Utility class for handling registration of auto-proxy creators used internally\n by the 'aop' namespace tags.\n\n Only a single auto-proxy creator can be registered and multiple tags may wish\n to register different concrete implementations. As such this class delegates to\n AopConfigUtils which wraps a simple escalation protocol. Therefore classes\n may request a particular auto-proxy creator and know that class, or a subclass\n thereof, will eventually be resident in the application context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AopNamespaceUtils.html
AspectComponentDefinition	A										<section class="prog__container">ComponentDefinition\n that holds an aspect definition, including its nested pointcuts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AspectComponentDefinition.html
AspectEntry	A										<section class="prog__container">ParseState entry representing an aspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/AspectEntry.html
MethodLocatingFactoryBean	A										<section class="prog__container">FactoryBean implementation that locates a Method on a specified bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/MethodLocatingFactoryBean.html
PointcutComponentDefinition	A										<section class="prog__container">ComponentDefinition\n implementation that holds a pointcut definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/PointcutComponentDefinition.html
PointcutEntry	A										<section class="prog__container">ParseState entry representing a pointcut.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/PointcutEntry.html
SimpleBeanFactoryAwareAspectInstanceFactory	A										<section class="prog__container">Implementation of AspectInstanceFactory that locates the aspect from the\n BeanFactory using a configured bean name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.html
AbstractAdvisingBeanPostProcessor	A										<section class="prog__container">Base class for BeanPostProcessor implementations that apply a\n Spring AOP Advisor to specific beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.html
AbstractSingletonProxyFactoryBean	A										<section class="prog__container">Convenient superclass for FactoryBean types that produce singleton-scoped\n proxy objects.\n\n Manages pre- and post-interceptors (references, rather than\n interceptor names, as in ProxyFactoryBean) and provides\n consistent interface management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html
Advised	A										<section class="prog__container">Interface to be implemented by classes that hold the configuration\n of a factory of AOP proxies. This configuration includes the\n Interceptors and other advice, Advisors, and the proxied interfaces.\n\n Any AOP proxy obtained from Spring can be cast to this interface to\n allow manipulation of its AOP advice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/Advised.html
AdvisedSupport	A										<section class="prog__container">Base class for AOP proxy configuration managers.\n These are not themselves AOP proxies, but subclasses of this class are\n normally factories from which AOP proxy instances are obtained directly.\n\n This class frees subclasses of the housekeeping of Advices\n and Advisors, but doesn't actually implement proxy creation\n methods, which are provided by subclasses.\n\n This class is serializable; subclasses need not be.\n This class is used to hold snapshots of proxies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AdvisedSupport.html
AdvisedSupportListener	A										<section class="prog__container">Listener to be registered on ProxyCreatorSupport objects\n Allows for receiving callbacks on activation and change of advice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AdvisedSupportListener.html
AdvisorChainFactory	A										<section class="prog__container">Factory interface for advisor chains.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AdvisorChainFactory.html
AopConfigException	A										<section class="prog__container">Exception that gets thrown on illegal AOP configuration arguments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopConfigException.html
AopContext	A										<section class="prog__container">Class containing static methods used to obtain information about the current AOP invocation.\n\n The currentProxy() method is usable if the AOP framework is configured to\n expose the current proxy (not the default). It returns the AOP proxy in use. Target objects\n or advice can use this to make advised calls, in the same way as getEJBObject()\n can be used in EJBs. They can also use it to find advice configuration.\n\n Spring's AOP framework does not expose proxies by default, as there is a performance cost\n in doing so.\n\n The functionality in this class might be used by a target object that needed access\n to resources on the invocation. However, this approach should not be used when there is\n a reasonable alternative, as it makes application code dependent on usage under AOP and\n the Spring AOP framework in particular.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopContext.html
AopInfrastructureBean	A										<section class="prog__container">Marker interface that indicates a bean that is part of Spring's\n AOP infrastructure. In particular, this implies that any such bean\n is not subject to auto-proxying, even if a pointcut would match.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopInfrastructureBean.html
AopProxy	A										<section class="prog__container">Delegate interface for a configured AOP proxy, allowing for the creation\n of actual proxy objects.\n\n Out-of-the-box implementations are available for JDK dynamic proxies\n and for CGLIB proxies, as applied by DefaultAopProxyFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopProxy.html
AopProxyFactory	A										<section class="prog__container">Interface to be implemented by factories that are able to create\n AOP proxies based on AdvisedSupport configuration objects.\n\n Proxies should observe the following contract:\n \nThey should implement all interfaces that the configuration\n indicates should be proxied.\n They should implement the Advised interface.\n They should implement the equals method to compare proxied\n interfaces, advice, and target.\n They should be serializable if all advisors and target\n are serializable.\n They should be thread-safe if advisors and target\n are thread-safe.\n \nProxies may or may not allow advice changes to be made.\n If they do not permit advice changes (for example, because\n the configuration was frozen) a proxy should throw an\n AopConfigException on an attempted advice change.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopProxyFactory.html
AopProxyUtils	A										<section class="prog__container">Utility methods for AOP proxy factories.\n Mainly for internal use within the AOP framework.\n\n See AopUtils for a collection of\n generic AOP utility methods which do not depend on AOP framework internals.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AopProxyUtils.html
DefaultAdvisorChainFactory	A										<section class="prog__container">A simple but definitive way of working out an advice chain for a Method,\n given an Advised object. Always rebuilds each advice chain;\n caching can be provided by subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/DefaultAdvisorChainFactory.html
DefaultAopProxyFactory	A										<section class="prog__container">Default AopProxyFactory implementation, creating either a CGLIB proxy\n or a JDK dynamic proxy.\n\n Creates a CGLIB proxy if one the following is true for a given\n AdvisedSupport instance:\n \nthe optimize flag is set\n the proxyTargetClass flag is set\n no proxy interfaces have been specified\n \nIn general, specify proxyTargetClass to enforce a CGLIB proxy,\n or specify one or more interfaces to use a JDK dynamic proxy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/DefaultAopProxyFactory.html
ProxyConfig	A										<section class="prog__container">Convenience superclass for configuration used in creating proxies,\n to ensure that all proxy creators have consistent properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ProxyConfig.html
ProxyCreatorSupport	A										<section class="prog__container">Base class for proxy factories.\n Provides convenient access to a configurable AopProxyFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ProxyCreatorSupport.html
ProxyFactory	A										<section class="prog__container">Factory for AOP proxies for programmatic use, rather than via declarative\n setup in a bean factory. This class provides a simple way of obtaining\n and configuring AOP proxy instances in custom user code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactory.html
ProxyFactoryBean	A										<section class="prog__container">FactoryBean implementation that builds an\n AOP proxy based on beans in Spring BeanFactory.\n\n MethodInterceptors and\n Advisors are identified by a list of bean\n names in the current bean factory, specified through the "interceptorNames" property.\n The last entry in the list can be the name of a target bean or a\n TargetSource; however, it is normally preferable\n to use the "targetName"/"target"/"targetSource" properties instead.\n\n Global interceptors and advisors can be added at the factory level. The specified\n ones are expanded in an interceptor list where an "xxx*" entry is included in the\n list, matching the given prefix with the bean names (e.g. "global*" would match\n both "globalBean1" and "globalBean2", "*" all defined interceptors). The matching\n interceptors get applied according to their returned order value, if they implement\n the Ordered interface.\n\n Creates a JDK proxy when proxy interfaces are given, and a CGLIB proxy for the\n actual target class if not. Note that the latter will only work if the target class\n does not have final methods, as a dynamic subclass will be created at runtime.\n\n It's possible to cast a proxy obtained from this factory to Advised,\n or to obtain the ProxyFactoryBean reference and programmatically manipulate it.\n This won't work for existing prototype references, which are independent. However,\n it will work for prototypes subsequently obtained from the factory. Changes to\n interception will work immediately on singletons (including existing references).\n However, to change interfaces or target it's necessary to obtain a new instance\n from the factory. This means that singleton instances obtained from the factory\n do not have the same object identity. However, they do have the same interceptors\n and target, and changing any reference will change all objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ProxyFactoryBean.html
ProxyProcessorSupport	A										<section class="prog__container">Base class with common functionality for proxy processors, in particular\n ClassLoader management and the evaluateProxyInterfaces(java.lang.Class<?>, org.springframework.aop.framework.ProxyFactory) algorithm.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ProxyProcessorSupport.html
ReflectiveMethodInvocation	A										<section class="prog__container">Spring's implementation of the AOP Alliance\n MethodInvocation interface,\n implementing the extended\n ProxyMethodInvocation interface.\n\n Invokes the target object using reflection. Subclasses can override the\n invokeJoinpoint() method to change this behavior, so this is also\n a useful base class for more specialized MethodInvocation implementations.\n\n It is possible to clone an invocation, to invoke proceed()\n repeatedly (once per clone), using the invocableClone() method.\n It is also possible to attach custom attributes to the invocation,\n using the setUserAttribute(java.lang.String, java.lang.Object) / getUserAttribute(java.lang.String) methods.\n\n NOTE: This class is considered internal and should not be\n directly accessed. The sole reason for it being public is compatibility\n with existing framework integrations (e.g. Pitchfork). For any other\n purposes, use the ProxyMethodInvocation interface instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/ReflectiveMethodInvocation.html
AdvisorAdapter	A										<section class="prog__container">Interface allowing extension to the Spring AOP framework to allow\n handling of new Advisors and Advice types.\n\n Implementing objects can create AOP Alliance Interceptors from\n custom advice types, enabling these advice types to be used\n in the Spring AOP framework, which uses interception under the covers.\n\n There is no need for most Spring users to implement this interface;\n do so only if you need to introduce more Advisor or Advice types to Spring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/AdvisorAdapter.html
AdvisorAdapterRegistrationManager	A										<section class="prog__container">BeanPostProcessor that registers AdvisorAdapter beans in the BeanFactory with\n an AdvisorAdapterRegistry (by default the GlobalAdvisorAdapterRegistry).\n\n The only requirement for it to work is that it needs to be defined\n in application context along with "non-native" Spring AdvisorAdapters\n that need to be "recognized" by Spring's AOP framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/AdvisorAdapterRegistrationManager.html
AdvisorAdapterRegistry	A										<section class="prog__container">Interface for registries of Advisor adapters.\n\n This is an SPI interface, not to be implemented by any Spring user.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/AdvisorAdapterRegistry.html
AfterReturningAdviceInterceptor	A										<section class="prog__container">Interceptor to wrap am AfterReturningAdvice.\n Used internally by the AOP framework; application developers should not need\n to use this class directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/AfterReturningAdviceInterceptor.html
DefaultAdvisorAdapterRegistry	A										<section class="prog__container">Default implementation of the AdvisorAdapterRegistry interface.\n Supports MethodInterceptor,\n MethodBeforeAdvice,\n AfterReturningAdvice,\n ThrowsAdvice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/DefaultAdvisorAdapterRegistry.html
GlobalAdvisorAdapterRegistry	A										<section class="prog__container">Singleton to publish a shared DefaultAdvisorAdapterRegistry instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/GlobalAdvisorAdapterRegistry.html
MethodBeforeAdviceInterceptor	A										<section class="prog__container">Interceptor to wrap am MethodBeforeAdvice.\n Used internally by the AOP framework; application developers should not need\n to use this class directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/MethodBeforeAdviceInterceptor.html
ThrowsAdviceInterceptor	A										<section class="prog__container">Interceptor to wrap an after-throwing advice.\n\n The signatures on handler methods on the ThrowsAdvice\n implementation method argument must be of the form:\nvoid afterThrowing([Method, args, target], ThrowableSubclass);\nOnly the last argument is required.\n\n Some examples of valid methods would be:\n\n public void afterThrowing(Exception ex)\npublic void afterThrowing(RemoteException)\npublic void afterThrowing(Method method, Object[] args, Object target, Exception ex)\npublic void afterThrowing(Method method, Object[] args, Object target, ServletException ex)\nThis is a framework class that need not be used directly by Spring users.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.html
UnknownAdviceTypeException	A										<section class="prog__container">Exception thrown when an attempt is made to use an unsupported\n Advisor or Advice type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/adapter/UnknownAdviceTypeException.html
AbstractAdvisorAutoProxyCreator	A										<section class="prog__container">Generic auto proxy creator that builds AOP proxies for specific beans\n based on detected Advisors for each bean.\n\n Subclasses must implement the abstract findCandidateAdvisors()\n method to return a list of Advisors applying to any object. Subclasses can\n also override the inherited AbstractAutoProxyCreator.shouldSkip(java.lang.Class<?>, java.lang.String) method to exclude certain\n objects from auto-proxying.\n\n Advisors or advices requiring ordering should implement the\n Ordered interface. This class sorts\n Advisors by Ordered order value. Advisors that don't implement the\n Ordered interface will be considered as unordered; they will appear\n at the end of the advisor chain in undefined order.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.html
AbstractAutoProxyCreator	A										<section class="prog__container">BeanPostProcessor implementation\n that wraps each eligible bean with an AOP proxy, delegating to specified interceptors\n before invoking the bean itself.\n\n This class distinguishes between "common" interceptors: shared for all proxies it\n creates, and "specific" interceptors: unique per bean instance. There need not\n be any common interceptors. If there are, they are set using the interceptorNames\n property. As with ProxyFactoryBean, interceptors names in the current factory\n are used rather than bean references to allow correct handling of prototype\n advisors and interceptors: for example, to support stateful mixins.\n Any advice type is supported for "interceptorNames" entries.\n\n Such auto-proxying is particularly useful if there's a large number of beans that\n need to be wrapped with similar proxies, i.e. delegating to the same interceptors.\n Instead of x repetitive proxy definitions for x target beans, you can register\n one single such post processor with the bean factory to achieve the same effect.\n\n Subclasses can apply any strategy to decide if a bean is to be proxied,\n e.g. by type, by name, by definition details, etc. They can also return\n additional interceptors that should just be applied to the specific bean\n instance. The default concrete implementation is BeanNameAutoProxyCreator,\n identifying the beans to be proxied via a list of bean names.\n\n Any number of TargetSourceCreator implementations can be used to create\n a custom target source - for example, to pool prototype objects. Auto-proxying will\n occur even if there is no advice, as long as a TargetSourceCreator specifies a custom\n TargetSource. If there are no TargetSourceCreators set,\n or if none matches, a SingletonTargetSource\n will be used by default to wrap the target bean instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.html
AbstractBeanFactoryAwareAdvisingPostProcessor	A										<section class="prog__container">Extension of AbstractAutoProxyCreator which implements BeanFactoryAware,\n adds exposure of the original target class for each proxied bean\n (AutoProxyUtils.ORIGINAL_TARGET_CLASS_ATTRIBUTE),\n and participates in an externally enforced target-class mode for any given bean\n (AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE).\n This post-processor is therefore aligned with AbstractAutoProxyCreator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/AbstractBeanFactoryAwareAdvisingPostProcessor.html
AutoProxyUtils	A										<section class="prog__container">Utilities for auto-proxy aware components.\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/AutoProxyUtils.html
BeanFactoryAdvisorRetrievalHelper	A										<section class="prog__container">Helper for retrieving standard Spring Advisors from a BeanFactory,\n for use with auto-proxying.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.html
BeanNameAutoProxyCreator	A										<section class="prog__container">Auto proxy creator that identifies beans to proxy via a list of names.\n Checks for direct, "xxx*", and "*xxx" matches.\n\n For configuration details, see the javadoc of the parent class\n AbstractAutoProxyCreator. Typically, you will specify a list of\n interceptor names to apply to all identified beans, via the\n "interceptorNames" property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.html
DefaultAdvisorAutoProxyCreator	A										<section class="prog__container">BeanPostProcessor implementation that creates AOP proxies based on all candidate\n Advisors in the current BeanFactory. This class is completely generic; it contains\n no special code to handle any particular aspects, such as pooling aspects.\n\n It's possible to filter out advisors - for example, to use multiple post processors\n of this type in the same factory - by setting the usePrefix property\n to true, in which case only advisors beginning with the DefaultAdvisorAutoProxyCreator's\n bean name followed by a dot (like "aapc.") will be used. This default prefix can be\n changed from the bean name by setting the advisorBeanNamePrefix property.\n The separator (.) will also be used in this case.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.html
InfrastructureAdvisorAutoProxyCreator	A										<section class="prog__container">Auto-proxy creator that considers infrastructure Advisor beans only,\n ignoring any application-defined Advisors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/InfrastructureAdvisorAutoProxyCreator.html
ProxyCreationContext	A										<section class="prog__container">Holder for the current proxy creation context, as exposed by auto-proxy creators\n such as AbstractAdvisorAutoProxyCreator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/ProxyCreationContext.html
TargetSourceCreator	A										<section class="prog__container">Implementations can create special target sources, such as pooling target\n sources, for particular beans. For example, they may base their choice\n on attributes, such as a pooling attribute, on the target class.\n\n AbstractAutoProxyCreator can support a number of TargetSourceCreators,\n which will be applied in order.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/TargetSourceCreator.html
AbstractBeanFactoryBasedTargetSourceCreator	A										<section class="prog__container">Convenient superclass for\n TargetSourceCreator\n implementations that require creating multiple instances of a prototype bean.\n\n Uses an internal BeanFactory to manage the target instances,\n copying the original bean definition to this internal factory.\n This is necessary because the original BeanFactory will just\n contain the proxy instance created through auto-proxying.\n\n Requires running in an\n AbstractBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.html
LazyInitTargetSourceCreator	A										<section class="prog__container">TargetSourceCreator that enforces a LazyInitTargetSource for each bean\n that is defined as "lazy-init". This will lead to a proxy created for\n each of those beans, allowing to fetch a reference to such a bean\n without actually initializing the target bean instance.\n\n To be registered as custom TargetSourceCreator for an auto-proxy creator,\n in combination with custom interceptors for specific beans or for the\n creation of lazy-init proxies only. For example, as autodetected\n infrastructure bean in an XML application context definition:\n\n \n <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">\n   <property name="customTargetSourceCreators">\n     <list>\n       <bean class="org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator"/>\n     </list>\n   </property>\n </bean>\n\n <bean id="myLazyInitBean" class="mypackage.MyBeanClass" lazy-init="true">\n   ...\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.html
QuickTargetSourceCreator	A										<section class="prog__container">Convenient TargetSourceCreator using bean name prefixes to create one of three\n well-known TargetSource types:\n : CommonsPool2TargetSource\n % ThreadLocalTargetSource\n ! PrototypeTargetSource</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/target/QuickTargetSourceCreator.html
AbstractMonitoringInterceptor	A										<section class="prog__container">Base class for monitoring interceptors, such as performance monitors.\n Provides prefix and suffix properties\n that help to classify/group performance monitoring results.\n\n Subclasses should call the createInvocationTraceName(MethodInvocation)\n method to create a name for the given trace that includes information about the\n method invocation under trace along with the prefix and suffix added as appropriate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.html
AbstractTraceInterceptor	A										<section class="prog__container">Base MethodInterceptor implementation for tracing.\n\n By default, log messages are written to the log for the interceptor class,\n not the class which is being intercepted. Setting the useDynamicLogger\n bean property to true causes all log messages to be written to\n the Log for the target class being intercepted.\n\n Subclasses must implement the invokeUnderTrace method, which\n is invoked by this class ONLY when a particular invocation SHOULD be traced.\n Subclasses should write to the Log instance provided.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/AbstractTraceInterceptor.html
AsyncExecutionAspectSupport	A										<section class="prog__container">Base class for asynchronous method execution aspects, such as\n org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor\n or org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect.\n\n Provides support for executor qualification on a method-by-method basis.\n AsyncExecutionAspectSupport objects must be constructed with a default Executor, but each individual method may further qualify a specific Executor\n bean to be used when executing it, e.g. through an annotation attribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.html
AsyncExecutionInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor that processes method invocations\n asynchronously, using a given AsyncTaskExecutor.\n Typically used with the Async annotation.\n\n In terms of target method signatures, any parameter types are supported.\n However, the return type is constrained to either void or\n java.util.concurrent.Future. In the latter case, the Future handle\n returned from the proxy will be an actual asynchronous Future that can be used\n to track the result of the asynchronous method execution. However, since the\n target method needs to implement the same signature, it will have to return\n a temporary Future handle that just passes the return value through\n (like Spring's AsyncResult\n or EJB 3.1's javax.ejb.AsyncResult).\n\n When the return type is java.util.concurrent.Future, any exception thrown\n during the execution can be accessed and managed by the caller. With void\n return type however, such exceptions cannot be transmitted back. In that case an\n AsyncUncaughtExceptionHandler can be registered to process such exceptions.\n\n As of Spring 3.1.2 the AnnotationAsyncExecutionInterceptor subclass is\n preferred for use due to its support for executor qualification in conjunction with\n Spring's @Async annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/AsyncExecutionInterceptor.html
AsyncUncaughtExceptionHandler	A										<section class="prog__container">A strategy for handling uncaught exceptions thrown from asynchronous methods.\n\n An asynchronous method usually returns a Future\n instance that gives access to the underlying exception. When the method does\n not provide that return type, this handler can be used to managed such\n uncaught exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/AsyncUncaughtExceptionHandler.html
ConcurrencyThrottleInterceptor	A										<section class="prog__container">Interceptor that throttles concurrent access, blocking invocations\n if a specified concurrency limit is reached.\n\n Can be applied to methods of local services that involve heavy use\n of system resources, in a scenario where it is more efficient to\n throttle concurrency for a specific service rather than restricting\n the entire thread pool (e.g. the web container's thread pool).\n\n The default concurrency limit of this interceptor is 1.\n Specify the "concurrencyLimit" bean property to change this value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptor.html
CustomizableTraceInterceptor	A										<section class="prog__container">MethodInterceptor implementation that allows for highly customizable\n method-level tracing, using placeholders.\n\n Trace messages are written on method entry, and if the method invocation succeeds\n on method exit. If an invocation results in an exception, then an exception message\n is written. The contents of these trace messages is fully customizable and special\n placeholders are available to allow you to include runtime information in your log\n messages. The placeholders available are:\n\n \n$[methodName] - replaced with the name of the method being invoked\n$[targetClassName] - replaced with the name of the class that is\n the target of the invocation\n$[targetClassShortName] - replaced with the short name of the class\n that is the target of the invocation\n$[returnValue] - replaced with the value returned by the invocation\n$[argumentTypes] - replaced with a comma-separated list of the\n short class names of the method arguments\n$[arguments] - replaced with a comma-separated list of the\n String representation of the method arguments\n$[exception] - replaced with the String representation\n of any Throwable raised during the invocation\n$[invocationTime] - replaced with the time, in milliseconds,\n taken by the method invocation\n\nThere are restrictions on which placeholders can be used in which messages:\n see the individual message properties for details on the valid placeholders.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/CustomizableTraceInterceptor.html
DebugInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor that can be introduced in a chain\n to display verbose information about intercepted invocations to the logger.\n\n Logs full invocation details on method entry and method exit,\n including invocation arguments and invocation count. This is only\n intended for debugging purposes; use SimpleTraceInterceptor\n or CustomizableTraceInterceptor for pure tracing purposes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/DebugInterceptor.html
ExposeBeanNameAdvisors	A										<section class="prog__container">Convenient methods for creating advisors that may be used when autoproxying beans\n created with the Spring IoC container, binding the bean name to the current\n invocation. May support a bean() pointcut designator with AspectJ.\n\n Typically used in Spring auto-proxying, where the bean name is known\n at proxy creation time.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/ExposeBeanNameAdvisors.html
ExposeInvocationInterceptor	A										<section class="prog__container">Interceptor that exposes the current MethodInvocation\n as a thread-local object. We occasionally need to do this; for example, when a pointcut\n (e.g. an AspectJ expression pointcut) needs to know the full invocation context.\n\n Don't use this interceptor unless this is really necessary. Target objects should\n not normally know about Spring AOP, as this creates a dependency on Spring API.\n Target objects should be plain POJOs as far as possible.\n\n If used, this interceptor will normally be the first in the interceptor chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/ExposeInvocationInterceptor.html
JamonPerformanceMonitorInterceptor	A										<section class="prog__container">Performance monitor interceptor that uses JAMon library to perform the\n performance measurement on the intercepted method and output the stats.\n In addition, it tracks/counts exceptions thrown by the intercepted method.\n The stack traces can be viewed in the JAMon web application.\n\n This code is inspired by Thierry Templier's blog.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptor.html
PerformanceMonitorInterceptor	A										<section class="prog__container">Simple AOP Alliance MethodInterceptor for performance monitoring.\n This interceptor has no effect on the intercepted method call.\n\n Uses a StopWatch for the actual performance measuring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/PerformanceMonitorInterceptor.html
SimpleAsyncUncaughtExceptionHandler	A										<section class="prog__container">A default AsyncUncaughtExceptionHandler that simply logs the exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/SimpleAsyncUncaughtExceptionHandler.html
SimpleTraceInterceptor	A										<section class="prog__container">Simple AOP Alliance MethodInterceptor that can be introduced\n in a chain to display verbose trace information about intercepted method\n invocations, with method entry and method exit info.\n\n Consider using CustomizableTraceInterceptor for more\n advanced needs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/interceptor/SimpleTraceInterceptor.html
DefaultScopedObject	A										<section class="prog__container">Default implementation of the ScopedObject interface.\n\n Simply delegates the calls to the underlying\n bean factory\n (BeanFactory.getBean(String)/\n ConfigurableBeanFactory.destroyScopedBean(String)).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/scope/DefaultScopedObject.html
ScopedObject	A										<section class="prog__container">An AOP introduction interface for scoped objects.\n\n Objects created from the ScopedProxyFactoryBean can be cast\n to this interface, enabling access to the raw target object\n and programmatic removal of the target object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/scope/ScopedObject.html
ScopedProxyFactoryBean	A										<section class="prog__container">Convenient proxy factory bean for scoped objects.\n\n Proxies created using this factory bean are thread-safe singletons\n and may be injected into shared objects, with transparent scoping behavior.\n\n Proxies returned by this class implement the ScopedObject interface.\n This presently allows for removing the corresponding object from the scope,\n seamlessly creating a new instance in the scope on next access.\n\n Please note that the proxies created by this factory are\n class-based proxies by default. This can be customized\n through switching the "proxyTargetClass" property to "false".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/scope/ScopedProxyFactoryBean.html
ScopedProxyUtils	A										<section class="prog__container">Utility class for creating a scoped proxy.\n Used by ScopedProxyBeanDefinitionDecorator and ClassPathBeanDefinitionScanner.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/scope/ScopedProxyUtils.html
AbstractBeanFactoryPointcutAdvisor	A										<section class="prog__container">Abstract BeanFactory-based PointcutAdvisor that allows for any Advice\n to be configured as reference to an Advice bean in a BeanFactory.\n\n Specifying the name of an advice bean instead of the advice object itself\n (if running within a BeanFactory) increases loose coupling at initialization time,\n in order to not initialize the advice object until the pointcut actually matches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.html
AbstractExpressionPointcut	A										<section class="prog__container">Abstract superclass for expression pointcuts,\n offering location and expression properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AbstractExpressionPointcut.html
AbstractGenericPointcutAdvisor	A										<section class="prog__container">Abstract generic PointcutAdvisor that allows for any Advice to be configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AbstractGenericPointcutAdvisor.html
AbstractPointcutAdvisor	A										<section class="prog__container">Abstract base class for PointcutAdvisor\n implementations. Can be subclassed for returning a specific pointcut/advice\n or a freely configurable pointcut/advice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AbstractPointcutAdvisor.html
AbstractRegexpMethodPointcut	A										<section class="prog__container">Abstract base regular expression pointcut bean. JavaBean properties are:\n \npattern: regular expression for the fully-qualified method names to match.\n The exact regexp syntax will depend on the subclass (e.g. Perl5 regular expressions)\n patterns: alternative property taking a String array of patterns.\n The result will be the union of these patterns.\n \nNote: the regular expressions must be a match. For example,\n .*get.* will match com.mycom.Foo.getBar().\n get.* will not.\n\n This base class is serializable. Subclasses should declare all fields transient;\n the initPatternRepresentation(java.lang.String[]) method will be invoked again on deserialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AbstractRegexpMethodPointcut.html
AopUtils	A										<section class="prog__container">Utility methods for AOP support code.\n\n Mainly for internal use within Spring's AOP support.\n\n See AopProxyUtils for a\n collection of framework-specific AOP utility methods which depend\n on internals of Spring's AOP framework implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/AopUtils.html
ClassFilters	A										<section class="prog__container">Static utility methods for composing ClassFilters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/ClassFilters.html
ComposablePointcut	A										<section class="prog__container">Convenient class for building up pointcuts. All methods return\n ComposablePointcut, so we can use a concise idiom like:\n\n Pointcut pc = new ComposablePointcut().union(classFilter).intersection(methodMatcher).intersection(pointcut);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/ComposablePointcut.html
ControlFlowPointcut	A										<section class="prog__container">Pointcut and method matcher for use in simple cflow-style pointcut.\n Note that evaluating such pointcuts is 10-15 times slower than evaluating\n normal pointcuts, but they are useful in some cases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/ControlFlowPointcut.html
DefaultBeanFactoryPointcutAdvisor	A										<section class="prog__container">Concrete BeanFactory-based PointcutAdvisor that allows for any Advice\n to be configured as reference to an Advice bean in the BeanFactory,\n as well as the Pointcut to be configured through a bean property.\n\n Specifying the name of an advice bean instead of the advice object itself\n (if running within a BeanFactory) increases loose coupling at initialization time,\n in order to not initialize the advice object until the pointcut actually matches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DefaultBeanFactoryPointcutAdvisor.html
DefaultIntroductionAdvisor	A										<section class="prog__container">Simple IntroductionAdvisor implementation\n that by default applies to any class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DefaultIntroductionAdvisor.html
DefaultPointcutAdvisor	A										<section class="prog__container">Convenient Pointcut-driven Advisor implementation.\n\n This is the most commonly used Advisor implementation. It can be used\n with any pointcut and advice type, except for introductions. There is\n normally no need to subclass this class, or to implement custom Advisors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DefaultPointcutAdvisor.html
DelegatePerTargetObjectIntroductionInterceptor	A										<section class="prog__container">Convenient implementation of the\n IntroductionInterceptor interface.\n\n This differs from DelegatingIntroductionInterceptor in that a single\n instance of this class can be used to advise multiple target objects, and each target\n object will have its own delegate (whereas DelegatingIntroductionInterceptor\n shares the same delegate, and hence the same state across all targets).\n\n The suppressInterface method can be used to suppress interfaces\n implemented by the delegate class but which should not be introduced to the\n owning AOP proxy.\n\n An instance of this class is serializable if the delegates are.\n\n Note: There are some implementation similarities between this class and\n DelegatingIntroductionInterceptor that suggest a possible refactoring\n to extract a common ancestor class in the future.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DelegatePerTargetObjectIntroductionInterceptor.html
DelegatingIntroductionInterceptor	A										<section class="prog__container">Convenient implementation of the\n IntroductionInterceptor interface.\n\n Subclasses merely need to extend this class and implement the interfaces\n to be introduced themselves. In this case the delegate is the subclass\n instance itself. Alternatively a separate delegate may implement the\n interface, and be set via the delegate bean property.\n\n Delegates or subclasses may implement any number of interfaces.\n All interfaces except IntroductionInterceptor are picked up from\n the subclass or delegate by default.\n\n The suppressInterface method can be used to suppress interfaces\n implemented by the delegate but which should not be introduced to the owning\n AOP proxy.\n\n An instance of this class is serializable if the delegate is.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DelegatingIntroductionInterceptor.html
DynamicMethodMatcher	A										<section class="prog__container">Convenient abstract superclass for dynamic method matchers,\n which do care about arguments at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DynamicMethodMatcher.html
DynamicMethodMatcherPointcut	A										<section class="prog__container">Convenient superclass when we want to force subclasses to\n implement MethodMatcher interface, but subclasses\n will want to be pointcuts. The getClassFilter() method can\n be overriden to customize ClassFilter behaviour as well.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/DynamicMethodMatcherPointcut.html
ExpressionPointcut	A										<section class="prog__container">Interface to be implemented by pointcuts that use String expressions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/ExpressionPointcut.html
IntroductionInfoSupport	A										<section class="prog__container">Support for implementations of IntroductionInfo.\n\n Allows subclasses to conveniently add all interfaces from a given object,\n and to suppress interfaces that should not be added. Also allows for querying\n all introduced interfaces.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/IntroductionInfoSupport.html
JdkRegexpMethodPointcut	A										<section class="prog__container">Regular expression pointcut based on the java.util.regex package.\n Supports the following JavaBean properties:\n \npattern: regular expression for the fully-qualified method names to match\n patterns: alternative property taking a String array of patterns. The result will\n be the union of these patterns.\n \nNote: the regular expressions must be a match. For example,\n .*get.* will match com.mycom.Foo.getBar().\n get.* will not.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/JdkRegexpMethodPointcut.html
MethodMatchers	A										<section class="prog__container">Static utility methods for composing MethodMatchers.\n\n A MethodMatcher may be evaluated statically (based on method and target\n class) or need further evaluation dynamically (based on arguments at the\n time of method invocation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/MethodMatchers.html
NameMatchMethodPointcut	A										<section class="prog__container">Pointcut bean for simple method name matches, as alternative to regexp patterns.\n Does not handle overloaded methods: all methods *with a given name will be eligible.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/NameMatchMethodPointcut.html
NameMatchMethodPointcutAdvisor	A										<section class="prog__container">Convenient class for name-match method pointcuts that hold an Advice,\n making them an Advisor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/NameMatchMethodPointcutAdvisor.html
Pointcuts	A										<section class="prog__container">Pointcut constants for matching getters and setters,\n and static methods useful for manipulating and evaluating pointcuts.\n These methods are particularly useful for composing pointcuts\n using the union and intersection methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/Pointcuts.html
RegexpMethodPointcutAdvisor	A										<section class="prog__container">Convenient class for regexp method pointcuts that hold an Advice,\n making them an Advisor.\n\n Configure this class using the "pattern" and "patterns"\n pass-through properties. These are analogous to the pattern\n and patterns properties of AbstractRegexpMethodPointcut.\n\n Can delegate to any AbstractRegexpMethodPointcut subclass.\n By default, JdkRegexpMethodPointcut will be used. To choose\n a specific one, override the createPointcut() method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/RegexpMethodPointcutAdvisor.html
RootClassFilter	A										<section class="prog__container">Simple ClassFilter implementation that passes classes (and optionally subclasses)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/RootClassFilter.html
StaticMethodMatcher	A										<section class="prog__container">Convenient abstract superclass for static method matchers, which don't care\n about arguments at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/StaticMethodMatcher.html
StaticMethodMatcherPointcut	A										<section class="prog__container">Convenient superclass when we want to force subclasses to implement the\n MethodMatcher interface but subclasses will want to be pointcuts.\n\n The "classFilter" property can be set to customize\n ClassFilter behavior. The default is ClassFilter.TRUE.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/StaticMethodMatcherPointcut.html
StaticMethodMatcherPointcutAdvisor	A										<section class="prog__container">Convenient base class for Advisors that are also static pointcuts.\n Serializable if Advice and subclass are.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.html
AnnotationClassFilter	A										<section class="prog__container">Simple ClassFilter that looks for a specific Java 5 annotation\n being present on a class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/annotation/AnnotationClassFilter.html
AnnotationMatchingPointcut	A										<section class="prog__container">Simple Pointcut that looks for a specific Java 5 annotation\n being present on a class or\n method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.html
AnnotationMethodMatcher	A										<section class="prog__container">Simple MethodMatcher that looks for a specific Java 5 annotation\n being present on a method (checking both the method on the invoked\n interface, if any, and the corresponding method on the target class).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/support/annotation/AnnotationMethodMatcher.html
AbstractBeanFactoryBasedTargetSource	A										<section class="prog__container">Base class for TargetSource implementations\n that are based on a Spring BeanFactory,\n delegating to Spring-managed bean instances.\n\n Subclasses can create prototype instances or lazily access a\n singleton target, for example. See LazyInitTargetSource and\n AbstractPrototypeBasedTargetSource's subclasses for concrete strategies.\n\n BeanFactory-based TargetSources are serializable. This involves\n disconnecting the current target and turning into a SingletonTargetSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.html
AbstractLazyCreationTargetSource	A										<section class="prog__container">TargetSource implementation that will\n lazily create a user-managed object.\n\n Creation of the lazy target object is controlled by the user by implementing\n the createObject() method. This TargetSource will invoke\n this method the first time the proxy is accessed.\n\n Useful when you need to pass a reference to some dependency to an object\n but you don't actually want the dependency to be created until it is first used.\n A typical scenario for this is a connection to a remote resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/AbstractLazyCreationTargetSource.html
AbstractPoolingTargetSource	A										<section class="prog__container">Abstract base class for pooling TargetSource\n implementations which maintain a pool of target instances, acquiring and\n releasing a target object from the pool for each method invocation.\n This abstract base class is independent of concrete pooling technology;\n see the subclass CommonsPool2TargetSource for a concrete example.\n\n Subclasses must implement the getTarget() and\n releaseTarget(java.lang.Object) methods based on their chosen object pool.\n The AbstractPrototypeBasedTargetSource.newPrototypeInstance() method inherited from\n AbstractPrototypeBasedTargetSource can be used to create objects\n in order to put them into the pool.\n\n Subclasses must also implement some of the monitoring methods from the\n PoolingConfig interface. The getPoolingConfigMixin() method\n makes these stats available on proxied objects through an IntroductionAdvisor.\n\n This class implements the DisposableBean\n interface in order to force subclasses to implement a DisposableBean.destroy()\n method, closing down their object pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/AbstractPoolingTargetSource.html
AbstractPrototypeBasedTargetSource	A										<section class="prog__container">Base class for dynamic TargetSource implementations\n that create new prototype bean instances to support a pooling or\n new-instance-per-invocation strategy.\n\n Such TargetSources must run in a BeanFactory, as it needs to\n call the getBean method to create a new prototype instance.\n Therefore, this base class extends AbstractBeanFactoryBasedTargetSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.html
CommonsPool2TargetSource	A										<section class="prog__container">TargetSource implementation that holds\n objects in a configurable Apache Commons2 Pool.\n\n By default, an instance of GenericObjectPool is created.\n Subclasses may change the type of ObjectPool used by\n overriding the createObjectPool() method.\n\n Provides many configuration properties mirroring those of the Commons Pool\n GenericObjectPool class; these properties are passed to the\n GenericObjectPool during construction. If creating a subclass of this\n class to change the ObjectPool implementation type, pass in the values\n of configuration properties that are relevant to your chosen implementation.\n\n The testOnBorrow, testOnReturn and testWhileIdle\n properties are explicitly not mirrored because the implementation of\n PoolableObjectFactory used by this class does not implement\n meaningful validation. All exposed Commons Pool properties use the\n corresponding Commons Pool defaults.\n\n Compatible with Apache Commons Pool 2.4, as of Spring 4.2.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/CommonsPool2TargetSource.html
CommonsPoolTargetSource	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of CommonsPool2TargetSource\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/CommonsPoolTargetSource.html
EmptyTargetSource	A										<section class="prog__container">Canonical TargetSource when there is no target\n (or just the target class known), and behavior is supplied\n by interfaces and advisors only.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/EmptyTargetSource.html
HotSwappableTargetSource	A										<section class="prog__container">TargetSource implementation that\n caches a local target object, but allows the target to be swapped\n while the application is running.\n\n If configuring an object of this class in a Spring IoC container,\n use constructor injection.\n\n This TargetSource is serializable if the target is at the time\n of serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/HotSwappableTargetSource.html
LazyInitTargetSource	A										<section class="prog__container">TargetSource that lazily accesses a\n singleton bean from a BeanFactory.\n\n Useful when a proxy reference is needed on initialization but\n the actual target object should not be initialized until first use.\n When the target bean is defined in an\n ApplicationContext (or a\n BeanFactory that is eagerly pre-instantiating singleton beans)\n it must be marked as "lazy-init" too, else it will be instantiated by said\n ApplicationContext (or BeanFactory) on startup.\n For example:\n\n \n <bean id="serviceTarget" class="example.MyService" lazy-init="true">\n   ...\n </bean>\n\n <bean id="service" class="org.springframework.aop.framework.ProxyFactoryBean">\n   <property name="targetSource">\n     <bean class="org.springframework.aop.target.LazyInitTargetSource">\n       <property name="targetBeanName"><idref local="serviceTarget"/></property>\n     </bean>\n   </property>\n </bean>\n\n The "serviceTarget" bean will not get initialized until a method on the\n "service" proxy gets invoked.\n\n Subclasses can extend this class and override the postProcessTargetObject(Object) to\n perform some additional processing with the target object when it is first loaded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/LazyInitTargetSource.html
PoolingConfig	A										<section class="prog__container">Config interface for a pooling target source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/PoolingConfig.html
PrototypeTargetSource	A										<section class="prog__container">TargetSource implementation that\n creates a new instance of the target bean for each request,\n destroying each instance on release (after each request).\n\n Obtains bean instances from its containing\n BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/PrototypeTargetSource.html
SimpleBeanTargetSource	A										<section class="prog__container">Simple TargetSource implementation,\n freshly obtaining the specified target bean from its containing\n Spring BeanFactory.\n\n Can obtain any kind of target bean: singleton, scoped, or prototype.\n Typically used for scoped beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/SimpleBeanTargetSource.html
SingletonTargetSource	A										<section class="prog__container">Implementation of the TargetSource interface\n that holds a given object. This is the default implementation of the TargetSource\n interface, as used by the Spring AOP framework. There is usually no need to\n create objects of this class in application code.\n\n This class is serializable. However, the actual serializability of a\n SingletonTargetSource will depend on whether the target is serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/SingletonTargetSource.html
ThreadLocalTargetSource	A										<section class="prog__container">Alternative to an object pool. This TargetSource\n uses a threading model in which every thread has its own copy of the target.\n There's no contention for targets. Target object creation is kept to a minimum\n on the running server.\n\n Application code is written as to a normal pool; callers can't assume they\n will be dealing with the same instance in invocations in different threads.\n However, state can be relied on during the operations of a single thread:\n for example, if one caller makes repeated calls on the AOP proxy.\n\n Cleanup of thread-bound objects is performed on BeanFactory destruction,\n calling their DisposableBean.destroy() method if available.\n Be aware that many thread-bound objects can be around until the application\n actually shuts down.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/ThreadLocalTargetSource.html
ThreadLocalTargetSourceStats	A										<section class="prog__container">Statistics for a ThreadLocal TargetSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/ThreadLocalTargetSourceStats.html
AbstractRefreshableTargetSource	A										<section class="prog__container">Abstract TargetSource implementation that\n wraps a refreshable target object. Subclasses can determine whether a\n refresh is required, and need to provide fresh target objects.\n\n Implements the Refreshable interface in order to allow for\n explicit control over the refresh status.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/dynamic/AbstractRefreshableTargetSource.html
BeanFactoryRefreshableTargetSource	A										<section class="prog__container">Refreshable TargetSource that fetches fresh target beans from a BeanFactory.\n\n Can be subclassed to override requiresRefresh() to suppress\n unnecessary refreshes. By default, a refresh will be performed every time\n the "refreshCheckDelay" has elapsed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/dynamic/BeanFactoryRefreshableTargetSource.html
Refreshable	A										<section class="prog__container">Interface to be implemented by dynamic target objects,\n which support reloading and optionally polling for updates.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/target/dynamic/Refreshable.html
AnnotationVisitor	A										<section class="prog__container">A visitor to visit a Java annotation. The methods of this class must be\n called in the following order: ( visit | visitEnum |\n visitAnnotation | visitArray )* visitEnd.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/AnnotationVisitor.html
Attribute	A										<section class="prog__container">A non standard class, field, method or code attribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/Attribute.html
ByteVector	A										<section class="prog__container">A dynamically extensible vector of bytes. This class is roughly equivalent to\n a DataOutputStream on top of a ByteArrayOutputStream, but is more efficient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/ByteVector.html
ClassReader	A										<section class="prog__container">A Java class parser to make a ClassVisitor visit an existing class.\n This class parses a byte array conforming to the Java class file format and\n calls the appropriate visit methods of a given class visitor for each field,\n method and bytecode instruction encountered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/ClassReader.html
ClassVisitor	A										<section class="prog__container">A visitor to visit a Java class. The methods of this class must be called in\n the following order: visit [ visitSource ] [\n visitOuterClass ] ( visitAnnotation |\n visitTypeAnnotation | visitAttribute )* (\n visitInnerClass | visitField | visitMethod )*\n visitEnd.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/ClassVisitor.html
ClassWriter	A										<section class="prog__container">A ClassVisitor that generates classes in bytecode form. More\n precisely this visitor generates a byte array conforming to the Java class\n file format. It can be used alone, to generate a Java class "from scratch",\n or with one or more ClassReader and adapter class visitor\n to generate a modified class from one or more existing Java classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/ClassWriter.html
FieldVisitor	A										<section class="prog__container">A visitor to visit a Java field. The methods of this class must be called in\n the following order: ( visitAnnotation |\n visitTypeAnnotation | visitAttribute )* visitEnd.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/FieldVisitor.html
Handle	A										<section class="prog__container">A reference to a field or a method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/Handle.html
Label	A										<section class="prog__container">A label represents a position in the bytecode of a method. Labels are used\n for jump, goto, and switch instructions, and for try catch blocks. A label\n designates the instruction that is just after. Note however that there\n can be other elements between a label and the instruction it designates (such\n as other labels, stack map frames, line numbers, etc.).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/Label.html
MethodVisitor	A										<section class="prog__container">A visitor to visit a Java method. The methods of this class must be called in\n the following order: ( visitParameter )* [\n visitAnnotationDefault ] ( visitAnnotation |\n visitTypeAnnotation | visitAttribute )* [\n visitCode ( visitFrame | visitXInsn |\n visitLabel | visitInsnAnnotation |\n visitTryCatchBlock | visitTryCatchBlockAnnotation |\n visitLocalVariable | visitLocalVariableAnnotation |\n visitLineNumber )* visitMaxs ] visitEnd. In\n addition, the visitXInsn and visitLabel methods must\n be called in the sequential order of the bytecode instructions of the visited\n code, visitInsnAnnotation must be called after the annotated\n instruction, visitTryCatchBlock must be called before the\n labels passed as arguments have been visited,\n visitTryCatchBlockAnnotation must be called after the\n corresponding try catch block has been visited, and the\n visitLocalVariable, visitLocalVariableAnnotation and\n visitLineNumber methods must be called after the labels\n passed as arguments have been visited.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/MethodVisitor.html
Opcodes	A										<section class="prog__container">Defines the JVM opcodes, access flags and array type codes. This interface\n does not define all the JVM opcodes because some opcodes are automatically\n handled. For example, the xLOAD and xSTORE opcodes are automatically replaced\n by xLOAD_n and xSTORE_n opcodes when possible. The xLOAD_n and xSTORE_n\n opcodes are therefore not defined in this interface. Likewise for LDC,\n automatically replaced by LDC_W or LDC2_W when necessary, WIDE, GOTO_W and\n JSR_W.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/Opcodes.html
SpringAsmInfo	A										<section class="prog__container">Utility class exposing constants related to Spring's internal repackaging\n of the ASM bytecode manipulation library (currently based on version 5.0).\n\n See package-level javadocs for more\n information on org.springframework.asm.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/SpringAsmInfo.html
Type	A										<section class="prog__container">A Java field or method type. This class can be used to make it easier to\n manipulate type and method descriptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/Type.html
TypePath	A										<section class="prog__container">The path to a type argument, wildcard bound, array element type, or static\n inner type within an enclosing type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/TypePath.html
TypeReference	A										<section class="prog__container">A reference to a type appearing in a class, field or method declaration, or\n on an instruction. Such a reference designates the part of the class where\n the referenced type is appearing (e.g. an 'extends', 'implements' or 'throws'\n clause, a 'new' instruction, a 'catch' clause, a type cast, a local variable\n declaration, etc).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/asm/TypeReference.html
AbstractNestablePropertyAccessor	A										<section class="prog__container">A basic ConfigurablePropertyAccessor that provides the necessary\n infrastructure for all typical use cases.\n\n This accessor will convert collection and array values to the corresponding\n target collections or arrays, if necessary. Custom property editors that deal\n with collections or arrays can either be written via PropertyEditor's\n setValue, or against a comma-delimited String via setAsText,\n as String arrays are converted in such a format if the array itself is not\n assignable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/AbstractNestablePropertyAccessor.html
AbstractNestablePropertyAccessor.PropertyHandler	A										<section class="prog__container">Handle a given property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/AbstractNestablePropertyAccessor.PropertyHandler.html
AbstractPropertyAccessor	A										<section class="prog__container">Abstract implementation of the PropertyAccessor interface.\n Provides base implementations of all convenience methods, with the\n implementation of actual property access left to subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/AbstractPropertyAccessor.html
BeanInfoFactory	A										<section class="prog__container">Strategy interface for creating BeanInfo instances for Spring beans.\n Can be used to plug in custom bean property resolution strategies (e.g. for other\n languages on the JVM) or more efficient BeanInfo retrieval algorithms.\n\n BeanInfoFactories are instantiated by the CachedIntrospectionResults,\n by using the SpringFactoriesLoader\n utility class.\n\n When a BeanInfo is to be created, the CachedIntrospectionResults\n will iterate through the discovered factories, calling getBeanInfo(Class)\n on each one. If null is returned, the next factory will be queried.\n If none of the factories support the class, a standard BeanInfo will be\n created as a default.\n\n Note that the SpringFactoriesLoader\n sorts the BeanInfoFactory instances by\n @Order, so that ones with a\n higher precedence come first.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanInfoFactory.html
BeanInstantiationException	A										<section class="prog__container">Exception thrown when instantiation of a bean failed.\n Carries the offending bean class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanInstantiationException.html
BeanMetadataAttribute	A										<section class="prog__container">Holder for a key-value style attribute that is part of a bean definition.\n Keeps track of the definition source in addition to the key-value pair.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanMetadataAttribute.html
BeanMetadataAttributeAccessor	A										<section class="prog__container">Extension of AttributeAccessorSupport,\n holding attributes as BeanMetadataAttribute objects in order\n to keep track of the definition source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanMetadataAttributeAccessor.html
BeanMetadataElement	A										<section class="prog__container">Interface to be implemented by bean metadata elements\n that carry a configuration source object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanMetadataElement.html
BeansException	A										<section class="prog__container">Abstract superclass for all exceptions thrown in the beans package\n and subpackages.\n\n Note that this is a runtime (unchecked) exception. Beans exceptions\n are usually fatal; there is no reason for them to be checked.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeansException.html
BeanUtils	A										<section class="prog__container">Static convenience methods for JavaBeans: for instantiating beans,\n checking bean property types, copying bean properties, etc.\n\n Mainly for use within the framework, but to some degree also\n useful for application classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanUtils.html
BeanWrapper	A										<section class="prog__container">The central interface of Spring's low-level JavaBeans infrastructure.\n\n Typically not used directly but rather implicitly via a\n BeanFactory or a\n DataBinder.\n\n Provides operations to analyze and manipulate standard JavaBeans:\n the ability to get and set property values (individually or in bulk),\n get property descriptors, and query the readability/writability of properties.\n\n This interface supports nested properties enabling the setting\n of properties on subproperties to an unlimited depth.\n\n A BeanWrapper's default for the "extractOldValueForEditor" setting\n is "false", to avoid side effects caused by getter method invocations.\n Turn this to "true" to expose present property values to custom editors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanWrapper.html
BeanWrapperImpl	A										<section class="prog__container">Default BeanWrapper implementation that should be sufficient\n for all typical use cases. Caches introspection results for efficiency.\n\n Note: Auto-registers default property editors from the\n org.springframework.beans.propertyeditors package, which apply\n in addition to the JDK's standard PropertyEditors. Applications can call\n the PropertyEditorRegistrySupport.registerCustomEditor(Class, java.beans.PropertyEditor) method\n to register an editor for a particular instance (i.e. they are not shared\n across the application). See the base class\n PropertyEditorRegistrySupport for details.\n\n NOTE: As of Spring 2.5, this is - for almost all purposes - an\n internal class. It is just public in order to allow for access from\n other framework packages. For standard application access purposes, use the\n PropertyAccessorFactory.forBeanPropertyAccess(java.lang.Object) factory method instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanWrapperImpl.html
CachedIntrospectionResults	A										<section class="prog__container">Internal class that caches JavaBeans PropertyDescriptor\n information for a Java class. Not intended for direct use by application code.\n\n Necessary for own caching of descriptors within the application's\n ClassLoader, rather than rely on the JDK's system-wide BeanInfo cache\n (in order to avoid leaks on ClassLoader shutdown).\n\n Information is cached statically, so we don't need to create new\n objects of this class for every JavaBean we manipulate. Hence, this class\n implements the factory design pattern, using a private constructor and\n a static forClass(Class) factory method to obtain instances.\n\n Note that for caching to work effectively, some preconditions need to be met:\n Prefer an arrangement where the Spring jars live in the same ClassLoader as the\n application classes, which allows for clean caching along with the application's\n lifecycle in any case. For a web application, consider declaring a local\n IntrospectorCleanupListener in web.xml\n in case of a multi-ClassLoader layout, which will allow for effective caching as well.\n\n In case of a non-clean ClassLoader arrangement without a cleanup listener having\n been set up, this class will fall back to a weak-reference-based caching model that\n recreates much-requested entries every time the garbage collector removed them. In\n such a scenario, consider the IGNORE_BEANINFO_PROPERTY_NAME system property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/CachedIntrospectionResults.html
ConfigurablePropertyAccessor	A										<section class="prog__container">Interface that encapsulates configuration methods for a PropertyAccessor.\n Also extends the PropertyEditorRegistry interface, which defines methods\n for PropertyEditor management.\n\n Serves as base interface for BeanWrapper.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/ConfigurablePropertyAccessor.html
ConversionNotSupportedException	A										<section class="prog__container">Exception thrown when no suitable editor or converter can be found for a bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/ConversionNotSupportedException.html
DirectFieldAccessor	A										<section class="prog__container">ConfigurablePropertyAccessor implementation that directly accesses\n instance fields. Allows for direct binding to fields instead of going through\n JavaBean setters.\n\n As of Spring 4.2, the vast majority of the BeanWrapper features have\n been merged to AbstractPropertyAccessor, which means that property\n traversal as well as collections and map access is now supported here as well.\n\n A DirectFieldAccessor's default for the "extractOldValueForEditor" setting\n is "true", since a field can always be read without side effects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/DirectFieldAccessor.html
ExtendedBeanInfoFactory	A										<section class="prog__container">BeanInfoFactory implementation that evaluates whether bean classes have\n "non-standard" JavaBeans setter methods and are thus candidates for introspection\n by Spring's (package-visible) ExtendedBeanInfo implementation.\n\n Ordered at Ordered.LOWEST_PRECEDENCE to allow other user-defined\n BeanInfoFactory types to take precedence.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/ExtendedBeanInfoFactory.html
FatalBeanException	A										<section class="prog__container">Thrown on an unrecoverable problem encountered in the\n beans packages or sub-packages, e.g. bad class or field.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/FatalBeanException.html
InvalidPropertyException	A										<section class="prog__container">Exception thrown when referring to an invalid bean property.\n Carries the offending bean class and property name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/InvalidPropertyException.html
Mergeable	A										<section class="prog__container">Interface representing an object whose value set can be merged with\n that of a parent object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/Mergeable.html
MethodInvocationException	A										<section class="prog__container">Thrown when a bean property getter or setter method throws an exception,\n analogous to an InvocationTargetException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/MethodInvocationException.html
MutablePropertyValues	A										<section class="prog__container">Default implementation of the PropertyValues interface.\n Allows simple manipulation of properties, and provides constructors\n to support deep copy and construction from a Map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/MutablePropertyValues.html
NotReadablePropertyException	A										<section class="prog__container">Exception thrown on an attempt to get the value of a property\n that isn't readable, because there's no getter method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/NotReadablePropertyException.html
NotWritablePropertyException	A										<section class="prog__container">Exception thrown on an attempt to set the value of a property that\n is not writable (typically because there is no setter method).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/NotWritablePropertyException.html
NullValueInNestedPathException	A										<section class="prog__container">Exception thrown when navigation of a valid nested property\n path encounters a NullPointerException.\n\n For example, navigating "spouse.age" could fail because the\n spouse property of the target object has a null value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/NullValueInNestedPathException.html
PropertyAccessException	A										<section class="prog__container">Superclass for exceptions related to a property access,\n such as type mismatch or invocation target exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyAccessException.html
PropertyAccessor	A										<section class="prog__container">Common interface for classes that can access named properties\n (such as bean properties of an object or fields in an object)\n Serves as base interface for BeanWrapper.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyAccessor.html
PropertyAccessorFactory	A										<section class="prog__container">Simple factory facade for obtaining PropertyAccessor instances,\n in particular for BeanWrapper instances. Conceals the actual\n target implementation classes and their extended public signature.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyAccessorFactory.html
PropertyAccessorUtils	A										<section class="prog__container">Utility methods for classes that perform bean property access\n according to the PropertyAccessor interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyAccessorUtils.html
PropertyBatchUpdateException	A										<section class="prog__container">Combined exception, composed of individual PropertyAccessException instances.\n An object of this class is created at the beginning of the binding\n process, and errors added to it as necessary.\n\n The binding process continues when it encounters application-level\n PropertyAccessExceptions, applying those changes that can be applied\n and storing rejected changes in an object of this class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyBatchUpdateException.html
PropertyEditorRegistrar	A										<section class="prog__container">Interface for strategies that register custom\n property editors with a\n property editor registry.\n\n This is particularly useful when you need to use the same set of\n property editors in several different situations: write a corresponding\n registrar and reuse that in each case.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyEditorRegistrar.html
PropertyEditorRegistry	A										<section class="prog__container">Encapsulates methods for registering JavaBeans PropertyEditors.\n This is the central interface that a PropertyEditorRegistrar operates on.\n\n Extended by BeanWrapper; implemented by BeanWrapperImpl\n and DataBinder.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyEditorRegistry.html
PropertyEditorRegistrySupport	A										<section class="prog__container">Base implementation of the PropertyEditorRegistry interface.\n Provides management of default editors and custom editors.\n Mainly serves as base class for BeanWrapperImpl.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyEditorRegistrySupport.html
PropertyMatches	A										<section class="prog__container">Helper class for calculating property matches, according to a configurable\n distance. Provide the list of potential matches and an easy way to generate\n an error message. Works for both java bean properties and fields.\n \n Mainly for use within the framework and in particular the binding facility</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyMatches.html
PropertyValue	A										<section class="prog__container">Object to hold information and value for an individual bean property.\n Using an object here, rather than just storing all properties in\n a map keyed by property name, allows for more flexibility, and the\n ability to handle indexed properties etc in an optimized way.\n\n Note that the value doesn't need to be the final required type:\n A BeanWrapper implementation should handle any necessary conversion,\n as this object doesn't know anything about the objects it will be applied to.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyValue.html
PropertyValues	A										<section class="prog__container">Holder containing one or more PropertyValue objects,\n typically comprising one update for a specific target bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyValues.html
PropertyValuesEditor	A										<section class="prog__container">Editor for a PropertyValues object.\n\n The required format is defined in the Properties\n documentation. Each property must be on a new line.\n\n The present implementation relies on a\n PropertiesEditor\n underneath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/PropertyValuesEditor.html
SimpleTypeConverter	A										<section class="prog__container">Simple implementation of the TypeConverter interface that does not operate on\n a specific target object. This is an alternative to using a full-blown BeanWrapperImpl\n instance for arbitrary type conversion needs, while using the very same conversion\n algorithm (including delegation to PropertyEditor and\n ConversionService) underneath.\n\n Note: Due to its reliance on PropertyEditors,\n SimpleTypeConverter is not thread-safe. Use a separate instance for each thread.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/SimpleTypeConverter.html
TypeConverter	A										<section class="prog__container">Interface that defines type conversion methods. Typically (but not necessarily)\n implemented in conjunction with the PropertyEditorRegistry interface.\n\n Note: Since TypeConverter implementations are typically based on\n PropertyEditors which aren't thread-safe,\n TypeConverters themselves are not to be considered as thread-safe either.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/TypeConverter.html
TypeConverterSupport	A										<section class="prog__container">Base implementation of the TypeConverter interface, using a package-private delegate.\n Mainly serves as base class for BeanWrapperImpl.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/TypeConverterSupport.html
TypeMismatchException	A										<section class="prog__container">Exception thrown on a type mismatch when trying to set a bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/TypeMismatchException.html
AnnotationBeanUtils	A										<section class="prog__container">General utility methods for working with annotations in JavaBeans style.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/annotation/AnnotationBeanUtils.html
Aware	A										<section class="prog__container">Marker superinterface indicating that a bean is eligible to be\n notified by the Spring container of a particular framework object\n through a callback-style method. Actual method signature is\n determined by individual subinterfaces, but should typically\n consist of just one void-returning method that accepts a single\n argument.\n\n Note that merely implementing Aware provides no default\n functionality. Rather, processing must be done explicitly, for example\n in a BeanPostProcessor.\n Refer to ApplicationContextAwareProcessor\n and AbstractAutowireCapableBeanFactory\n for examples of processing *Aware interface callbacks.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/Aware.html
BeanClassLoaderAware	A										<section class="prog__container">Callback that allows a bean to be aware of the bean\n class loader; that is, the class loader used by the\n present bean factory to load bean classes.\n\n This is mainly intended to be implemented by framework classes which\n have to pick up application classes by name despite themselves potentially\n being loaded from a shared class loader.\n\n For a list of all bean lifecycle methods, see the\n BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanClassLoaderAware.html
BeanCreationException	A										<section class="prog__container">Exception thrown when a BeanFactory encounters an error when\n attempting to create a bean from a bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanCreationException.html
BeanCreationNotAllowedException	A										<section class="prog__container">Exception thrown in case of a bean being requested despite\n bean creation currently not being allowed (for example, during\n the shutdown phase of a bean factory).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanCreationNotAllowedException.html
BeanCurrentlyInCreationException	A										<section class="prog__container">Exception thrown in case of a reference to a bean that's currently in creation.\n Typically happens when constructor autowiring matches the currently constructed bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanCurrentlyInCreationException.html
BeanDefinitionStoreException	A										<section class="prog__container">Exception thrown when a BeanFactory encounters an invalid bean definition:\n e.g. in case of incomplete or contradictory bean metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanDefinitionStoreException.html
BeanExpressionException	A										<section class="prog__container">Exception that indicates an expression evaluation attempt having failed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanExpressionException.html
BeanFactory	A										<section class="prog__container">The root interface for accessing a Spring bean container.\n This is the basic client view of a bean container;\n further interfaces such as ListableBeanFactory and\n ConfigurableBeanFactory\n are available for specific purposes.\n\n This interface is implemented by objects that hold a number of bean definitions,\n each uniquely identified by a String name. Depending on the bean definition,\n the factory will return either an independent instance of a contained object\n (the Prototype design pattern), or a single shared instance (a superior\n alternative to the Singleton design pattern, in which the instance is a\n singleton in the scope of the factory). Which type of instance will be returned\n depends on the bean factory configuration: the API is the same. Since Spring\n 2.0, further scopes are available depending on the concrete application\n context (e.g. "request" and "session" scopes in a web environment).\n\n The point of this approach is that the BeanFactory is a central registry\n of application components, and centralizes configuration of application\n components (no more do individual objects need to read properties files,\n for example). See chapters 4 and 11 of "Expert One-on-One J2EE Design and\n Development" for a discussion of the benefits of this approach.\n\n Note that it is generally better to rely on Dependency Injection\n ("push" configuration) to configure application objects through setters\n or constructors, rather than use any form of "pull" configuration like a\n BeanFactory lookup. Spring's Dependency Injection functionality is\n implemented using this BeanFactory interface and its subinterfaces.\n\n Normally a BeanFactory will load bean definitions stored in a configuration\n source (such as an XML document), and use the org.springframework.beans\n package to configure the beans. However, an implementation could simply return\n Java objects it creates as necessary directly in Java code. There are no\n constraints on how the definitions could be stored: LDAP, RDBMS, XML,\n properties file, etc. Implementations are encouraged to support references\n amongst beans (Dependency Injection).\n\n In contrast to the methods in ListableBeanFactory, all of the\n operations in this interface will also check parent factories if this is a\n HierarchicalBeanFactory. If a bean is not found in this factory instance,\n the immediate parent factory will be asked. Beans in this factory instance\n are supposed to override beans of the same name in any parent factory.\n\n Bean factory implementations should support the standard bean lifecycle interfaces\n as far as possible. The full set of initialization methods and their standard order is:\n \nBeanNameAware's setBeanName\nBeanClassLoaderAware's setBeanClassLoader\nBeanFactoryAware's setBeanFactory\nEnvironmentAware's setEnvironment\nEmbeddedValueResolverAware's setEmbeddedValueResolver\nResourceLoaderAware's setResourceLoader\n (only applicable when running in an application context)\n ApplicationEventPublisherAware's setApplicationEventPublisher\n (only applicable when running in an application context)\n MessageSourceAware's setMessageSource\n (only applicable when running in an application context)\n ApplicationContextAware's setApplicationContext\n (only applicable when running in an application context)\n ServletContextAware's setServletContext\n (only applicable when running in a web application context)\n postProcessBeforeInitialization methods of BeanPostProcessors\n InitializingBean's afterPropertiesSet\na custom init-method definition\n postProcessAfterInitialization methods of BeanPostProcessors\n \nOn shutdown of a bean factory, the following lifecycle methods apply:\n \npostProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors\n DisposableBean's destroy\na custom destroy-method definition\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html
BeanFactoryAware	A										<section class="prog__container">Interface to be implemented by beans that wish to be aware of their\n owning BeanFactory.\n\n For example, beans can look up collaborating beans via the factory\n (Dependency Lookup). Note that most beans will choose to receive references\n to collaborating beans via corresponding bean properties or constructor\n arguments (Dependency Injection).\n\n For a list of all bean lifecycle methods, see the\n BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactoryAware.html
BeanFactoryUtils	A										<section class="prog__container">Convenience methods operating on bean factories, in particular\n on the ListableBeanFactory interface.\n\n Returns bean counts, bean names or bean instances,\n taking into account the nesting hierarchy of a bean factory\n (which the methods defined on the ListableBeanFactory interface don't,\n in contrast to the methods defined on the BeanFactory interface).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactoryUtils.html
BeanInitializationException	A										<section class="prog__container">Exception that a bean implementation is suggested to throw if its own\n factory-aware initialization code fails. BeansExceptions thrown by\n bean factory methods themselves should simply be propagated as-is.\n\n Note that afterPropertiesSet() or a custom "init-method"\n can throw any exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanInitializationException.html
BeanIsAbstractException	A										<section class="prog__container">Exception thrown when a bean instance has been requested for\n a bean definition which has been marked as abstract.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanIsAbstractException.html
BeanIsNotAFactoryException	A										<section class="prog__container">Exception thrown when a bean is not a factory, but a user tries to get\n at the factory for the given bean name. Whether a bean is a factory is\n determined by whether it implements the FactoryBean interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanIsNotAFactoryException.html
BeanNameAware	A										<section class="prog__container">Interface to be implemented by beans that want to be aware of their\n bean name in a bean factory. Note that it is not usually recommended\n that an object depend on its bean name, as this represents a potentially\n brittle dependence on external configuration, as well as a possibly\n unnecessary dependence on a Spring API.\n\n For a list of all bean lifecycle methods, see the\n BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanNameAware.html
BeanNotOfRequiredTypeException	A										<section class="prog__container">Thrown when a bean doesn't match the expected type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanNotOfRequiredTypeException.html
CannotLoadBeanClassException	A										<section class="prog__container">Exception thrown when the BeanFactory cannot load the specified class\n of a given bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/CannotLoadBeanClassException.html
DisposableBean	A										<section class="prog__container">Interface to be implemented by beans that want to release resources\n on destruction. A BeanFactory is supposed to invoke the destroy\n method if it disposes a cached singleton. An application context\n is supposed to dispose all of its singletons on close.\n\n An alternative to implementing DisposableBean is specifying a custom\n destroy-method, for example in an XML bean definition.\n For a list of all bean lifecycle methods, see the BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/DisposableBean.html
FactoryBean	A										<section class="prog__container">Interface to be implemented by objects used within a BeanFactory\n which are themselves factories. If a bean implements this interface,\n it is used as a factory for an object to expose, not directly as a bean\n instance that will be exposed itself.\n\n NB: A bean that implements this interface cannot be used as a\n normal bean. A FactoryBean is defined in a bean style, but the\n object exposed for bean references (getObject() is always\n the object that it creates.\n\n FactoryBeans can support singletons and prototypes, and can\n either create objects lazily on demand or eagerly on startup.\n The SmartFactoryBean interface allows for exposing\n more fine-grained behavioral metadata.\n\n This interface is heavily used within the framework itself, for\n example for the AOP ProxyFactoryBean\n or the JndiObjectFactoryBean.\n It can be used for application components as well; however,\n this is not common outside of infrastructure code.\n\n NOTE: FactoryBean objects participate in the containing\n BeanFactory's synchronization of bean creation. There is usually no\n need for internal synchronization other than for purposes of lazy\n initialization within the FactoryBean itself (or the like).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/FactoryBean.html
FactoryBeanNotInitializedException	A										<section class="prog__container">Exception to be thrown from a FactoryBean's getObject() method\n if the bean is not fully initialized yet, for example because it is involved\n in a circular reference.\n\n Note: A circular reference with a FactoryBean cannot be solved by eagerly\n caching singleton instances like with normal beans. The reason is that\n every FactoryBean needs to be fully initialized before it can\n return the created bean, while only specific normal beans need\n to be initialized - that is, if a collaborating bean actually invokes\n them on initialization instead of just storing the reference.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/FactoryBeanNotInitializedException.html
HierarchicalBeanFactory	A										<section class="prog__container">Sub-interface implemented by bean factories that can be part\n of a hierarchy.\n\n The corresponding setParentBeanFactory method for bean\n factories that allow setting the parent in a configurable\n fashion can be found in the ConfigurableBeanFactory interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/HierarchicalBeanFactory.html
InitializingBean	A										<section class="prog__container">Interface to be implemented by beans that need to react once all their\n properties have been set by a BeanFactory: for example, to perform custom\n initialization, or merely to check that all mandatory properties have been set.\n\n An alternative to implementing InitializingBean is specifying a custom\n init-method, for example in an XML bean definition.\n For a list of all bean lifecycle methods, see the BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/InitializingBean.html
InjectionPoint	A										<section class="prog__container">A simple descriptor for an injection point, pointing to a method/constructor\n parameter or a field. Exposed by UnsatisfiedDependencyException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/InjectionPoint.html
ListableBeanFactory	A										<section class="prog__container">Extension of the BeanFactory interface to be implemented by bean factories\n that can enumerate all their bean instances, rather than attempting bean lookup\n by name one by one as requested by clients. BeanFactory implementations that\n preload all their bean definitions (such as XML-based factories) may implement\n this interface.\n\n If this is a HierarchicalBeanFactory, the return values will not\n take any BeanFactory hierarchy into account, but will relate only to the beans\n defined in the current factory. Use the BeanFactoryUtils helper class\n to consider beans in ancestor factories too.\n\n The methods in this interface will just respect bean definitions of this factory.\n They will ignore any singleton beans that have been registered by other means like\n ConfigurableBeanFactory's\n registerSingleton method, with the exception of\n getBeanNamesOfType and getBeansOfType which will check\n such manually registered singletons too. Of course, BeanFactory's getBean\n does allow transparent access to such special beans as well. However, in typical\n scenarios, all beans will be defined by external bean definitions anyway, so most\n applications don't need to worry about this differentiation.\n\n NOTE: With the exception of getBeanDefinitionCount\n and containsBeanDefinition, the methods in this interface\n are not designed for frequent invocation. Implementations may be slow.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html
NamedBean	A										<section class="prog__container">Counterpart of BeanNameAware. Returns the bean name of an object.\n\n This interface can be introduced to avoid a brittle dependence on\n bean name in objects used with Spring IoC and Spring AOP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/NamedBean.html
NoSuchBeanDefinitionException	A										<section class="prog__container">Exception thrown when a BeanFactory is asked for a bean instance for which it\n cannot find a definition. This may point to a non-existing bean, a non-unique bean,\n or a manually registered singleton instance without an associated bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/NoSuchBeanDefinitionException.html
NoUniqueBeanDefinitionException	A										<section class="prog__container">Exception thrown when a BeanFactory is asked for a bean instance for which\n multiple matching candidates have been found when only one matching bean was expected.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/NoUniqueBeanDefinitionException.html
ObjectFactory	A										<section class="prog__container">Defines a factory which can return an Object instance\n (possibly shared or independent) when invoked.\n\n This interface is typically used to encapsulate a generic factory which\n returns a new instance (prototype) of some target object on each invocation.\n\n This interface is similar to FactoryBean, but implementations\n of the latter are normally meant to be defined as SPI instances in a\n BeanFactory, while implementations of this class are normally meant\n to be fed as an API to other beans (through injection). As such, the\n getObject() method has different exception handling behavior.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/ObjectFactory.html
ObjectProvider	A										<section class="prog__container">A variant of ObjectFactory designed specifically for injection points,\n allowing for programmatic optionality and lenient not-unique handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/ObjectProvider.html
SmartFactoryBean	A										<section class="prog__container">Extension of the FactoryBean interface. Implementations may\n indicate whether they always return independent instances, for the\n case where their FactoryBean.isSingleton() implementation returning\n false does not clearly indicate independent instances.\n\n Plain FactoryBean implementations which do not implement\n this extended interface are simply assumed to always return independent\n instances if their FactoryBean.isSingleton() implementation returns\n false; the exposed object is only accessed on demand.\n\n NOTE: This interface is a special purpose interface, mainly for\n internal use within the framework and within collaborating frameworks.\n In general, application-provided FactoryBeans should simply implement\n the plain FactoryBean interface. New methods might be added\n to this extended interface even in point releases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/SmartFactoryBean.html
SmartInitializingSingleton	A										<section class="prog__container">Callback interface triggered at the end of the singleton pre-instantiation phase\n during BeanFactory bootstrap. This interface can be implemented by\n singleton beans in order to perform some initialization after the regular\n singleton instantiation algorithm, avoiding side effects with accidental early\n initialization (e.g. from ListableBeanFactory.getBeansOfType(java.lang.Class<T>) calls).\n In that sense, it is an alternative to InitializingBean which gets\n triggered right at the end of a bean's local construction phase.\n\n This callback variant is somewhat similar to\n ContextRefreshedEvent but doesn't\n require an implementation of ApplicationListener,\n with no need to filter context references across a context hierarchy etc.\n It also implies a more minimal dependency on just the beans package\n and is being honored by standalone ListableBeanFactory implementations,\n not just in an ApplicationContext environment.\n\n NOTE: If you intend to start/manage asynchronous tasks, preferably\n implement Lifecycle instead which offers\n a richer model for runtime management and allows for phased startup/shutdown.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/SmartInitializingSingleton.html
UnsatisfiedDependencyException	A										<section class="prog__container">Exception thrown when a bean depends on other beans or simple properties\n that were not specified in the bean factory definition, although\n dependency checking was enabled.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/UnsatisfiedDependencyException.html
BeanFactoryLocator	A										<section class="prog__container">Defines a contract for the lookup, use, and release of a\n BeanFactory,\n or a BeanFactory subclass such as an\n ApplicationContext.\n\n Where this interface is implemented as a singleton class such as\n SingletonBeanFactoryLocator, the Spring team strongly\n suggests that it be used sparingly and with caution. By far the vast majority\n of the code inside an application is best written in a Dependency Injection\n style, where that code is served out of a\n BeanFactory/ApplicationContext container, and has\n its own dependencies supplied by the container when it is created. However,\n even such a singleton implementation sometimes has its use in the small glue\n layers of code that is sometimes needed to tie other code together. For\n example, third party code may try to construct new objects directly, without\n the ability to force it to get these objects out of a BeanFactory.\n If the object constructed by the third party code is just a small stub or\n proxy, which then uses an implementation of this class to get a\n BeanFactory from which it gets the real object, to which it\n delegates, then proper Dependency Injection has been achieved.\n\n As another example, in a complex J2EE app with multiple layers, with each\n layer having its own ApplicationContext definition (in a\n hierarchy), a class like SingletonBeanFactoryLocator may be used\n to demand load these contexts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/BeanFactoryLocator.html
BeanFactoryReference	A										<section class="prog__container">Used to track a reference to a BeanFactory obtained through\n a BeanFactoryLocator.\n\n It is safe to call release() multiple times, but\n getFactory() must not be called after calling release.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/BeanFactoryReference.html
BootstrapException	A										<section class="prog__container">Exception thrown if a bean factory could not be loaded by a bootstrap class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/BootstrapException.html
SingletonBeanFactoryLocator	A										<section class="prog__container">Keyed-singleton implementation of BeanFactoryLocator,\n which accesses shared Spring BeanFactory instances.\nPlease see the warning in BeanFactoryLocator's javadoc about appropriate usage\n of singleton style BeanFactoryLocator implementations. It is the opinion of the\n Spring team that the use of this class and similar classes is unnecessary except\n (sometimes) for a small amount of glue code. Excessive usage will lead to code\n that is more tightly coupled, and harder to modify or test.\nIn this implementation, a BeanFactory is built up from one or more XML\n definition file fragments, accessed as resources. The default resource name\n searched for is 'classpath*:beanRefFactory.xml', with the Spring-standard\n 'classpath*:' prefix ensuring that if the classpath contains multiple copies\n of this file (perhaps one in each component jar) they will be combined. To\n override the default resource name, instead of using the no-arg\n getInstance() method, use the getInstance(String selector)\n variant, which will treat the 'selector' argument as the resource name to\n search for.\nThe purpose of this 'outer' BeanFactory is to create and hold a copy of one\n or more 'inner' BeanFactory or ApplicationContext instances, and allow those\n to be obtained either directly or via an alias. As such, this class provides\n both singleton style access to one or more BeanFactories/ApplicationContexts,\n and also a level of indirection, allowing multiple pieces of code, which are\n not able to work in a Dependency Injection fashion, to refer to and use the\n same target BeanFactory/ApplicationContext instance(s), by different names.\nConsider an example application scenario:\n\n \ncom.mycompany.myapp.util.applicationContext.xml -\n ApplicationContext definition file which defines beans for 'util' layer.\n com.mycompany.myapp.dataaccess-applicationContext.xml -\n ApplicationContext definition file which defines beans for 'data access' layer.\n Depends on the above.\n com.mycompany.myapp.services.applicationContext.xml -\n ApplicationContext definition file which defines beans for 'services' layer.\n Depends on the above.\n \nIn an ideal scenario, these would be combined to create one ApplicationContext,\n or created as three hierarchical ApplicationContexts, by one piece of code\n somewhere at application startup (perhaps a Servlet filter), from which all other\n code in the application would flow, obtained as beans from the context(s). However\n when third party code enters into the picture, things can get problematic. If the\n third party code needs to create user classes, which should normally be obtained\n from a Spring BeanFactory/ApplicationContext, but can handle only newInstance()\n style object creation, then some extra work is required to actually access and\n use object from a BeanFactory/ApplicationContext. One solutions is to make the\n class created by the third party code be just a stub or proxy, which gets the\n real object from a BeanFactory/ApplicationContext, and delegates to it. However,\n it is not normally workable for the stub to create the BeanFactory on each\n use, as depending on what is inside it, that can be an expensive operation.\n Additionally, there is a fairly tight coupling between the stub and the name of\n the definition resource for the BeanFactory/ApplicationContext. This is where\n SingletonBeanFactoryLocator comes in. The stub can obtain a\n SingletonBeanFactoryLocator instance, which is effectively a singleton, and\n ask it for an appropriate BeanFactory. A subsequent invocation (assuming the\n same class loader is involved) by the stub or another piece of code, will obtain\n the same instance. The simple aliasing mechanism allows the context to be asked\n for by a name which is appropriate for (or describes) the user. The deployer can\n match alias names to actual context names.\n\n Another use of SingletonBeanFactoryLocator, is to demand-load/use one or more\n BeanFactories/ApplicationContexts. Because the definition can contain one of more\n BeanFactories/ApplicationContexts, which can be independent or in a hierarchy, if\n they are set to lazy-initialize, they will only be created when actually requested\n for use.\n\n Given the above-mentioned three ApplicationContexts, consider the simplest\n SingletonBeanFactoryLocator usage scenario, where there is only one single\n beanRefFactory.xml definition file:\n\n <?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n\n   <bean id="com.mycompany.myapp"\n         class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <list>\n         <value>com/mycompany/myapp/util/applicationContext.xml</value>\n         <value>com/mycompany/myapp/dataaccess/applicationContext.xml</value>\n         <value>com/mycompany/myapp/dataaccess/services.xml</value>\n       </list>\n     </constructor-arg>\n   </bean>\n\n </beans>\n \n\n The client code is as simple as:\n\n \n BeanFactoryLocator bfl = SingletonBeanFactoryLocator.getInstance();\n BeanFactoryReference bf = bfl.useBeanFactory("com.mycompany.myapp");\n // now use some bean from factory\n MyClass zed = bf.getFactory().getBean("mybean");\n \n\n Another relatively simple variation of the beanRefFactory.xml definition file could be:\n\n <?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n\n   <bean id="com.mycompany.myapp.util" lazy-init="true"\n         class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <value>com/mycompany/myapp/util/applicationContext.xml</value>\n     </constructor-arg>\n   </bean>\n\n   <!-- child of above -->\n   <bean id="com.mycompany.myapp.dataaccess" lazy-init="true"\n         class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <list><value>com/mycompany/myapp/dataaccess/applicationContext.xml</value></list>\n     </constructor-arg>\n     <constructor-arg>\n       <ref bean="com.mycompany.myapp.util"/>\n     </constructor-arg>\n   </bean>\n\n   <!-- child of above -->\n   <bean id="com.mycompany.myapp.services" lazy-init="true"\n         class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <list><value>com/mycompany/myapp/dataaccess.services.xml</value></value>\n     </constructor-arg>\n     <constructor-arg>\n       <ref bean="com.mycompany.myapp.dataaccess"/>\n     </constructor-arg>\n   </bean>\n\n   <!-- define an alias -->\n   <bean id="com.mycompany.myapp.mypackage"\n         class="java.lang.String">\n     <constructor-arg>\n       <value>com.mycompany.myapp.services</value>\n     </constructor-arg>\n   </bean>\n\n </beans>\n \nIn this example, there is a hierarchy of three contexts created. The (potential)\n advantage is that if the lazy flag is set to true, a context will only be created\n if it's actually used. If there is some code that is only needed some of the time,\n this mechanism can save some resources. Additionally, an alias to the last context\n has been created. Aliases allow usage of the idiom where client code asks for a\n context with an id which represents the package or module the code is in, and the\n actual definition file(s) for the SingletonBeanFactoryLocator maps that id to\n a real context id.\n\n A final example is more complex, with a beanRefFactory.xml for every module.\n All the files are automatically combined to create the final definition.\n\n beanRefFactory.xml file inside jar for util module:\n\n <?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n   <bean id="com.mycompany.myapp.util" lazy-init="true"\n        class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <value>com/mycompany/myapp/util/applicationContext.xml</value>\n     </constructor-arg>\n   </bean>\n </beans>\n \nbeanRefFactory.xml file inside jar for data-access module:\n<?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n   <!-- child of util -->\n   <bean id="com.mycompany.myapp.dataaccess" lazy-init="true"\n        class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <list><value>com/mycompany/myapp/dataaccess/applicationContext.xml</value></list>\n     </constructor-arg>\n     <constructor-arg>\n       <ref bean="com.mycompany.myapp.util"/>\n     </constructor-arg>\n   </bean>\n </beans>\n \nbeanRefFactory.xml file inside jar for services module:\n\n <?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n   <!-- child of data-access -->\n   <bean id="com.mycompany.myapp.services" lazy-init="true"\n        class="org.springframework.context.support.ClassPathXmlApplicationContext">\n     <constructor-arg>\n       <list><value>com/mycompany/myapp/dataaccess/services.xml</value></list>\n     </constructor-arg>\n     <constructor-arg>\n       <ref bean="com.mycompany.myapp.dataaccess"/>\n     </constructor-arg>\n   </bean>\n </beans>\n \nbeanRefFactory.xml file inside jar for mypackage module. This doesn't\n create any of its own contexts, but allows the other ones to be referred to be\n a name known to this module:\n\n <?xml version="1.0" encoding="UTF-8"?>\n <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">\n\n <beans>\n   <!-- define an alias for "com.mycompany.myapp.services" -->\n   <alias name="com.mycompany.myapp.services" alias="com.mycompany.myapp.mypackage"/>\n </beans>\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/SingletonBeanFactoryLocator.html
SimpleSpringBeanELResolver	A										<section class="prog__container">Simple concrete variant of SpringBeanELResolver, delegating\n to a given BeanFactory that the resolver was constructed with.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/el/SimpleSpringBeanELResolver.html
SpringBeanELResolver	A										<section class="prog__container">Unified EL ELResolver that delegates to a Spring BeanFactory,\n resolving name references to Spring-defined beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/access/el/SpringBeanELResolver.html
AnnotatedBeanDefinition	A										<section class="prog__container">Extended BeanDefinition\n interface that exposes AnnotationMetadata\n about its bean class - without requiring the class to be loaded yet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/AnnotatedBeanDefinition.html
AnnotatedGenericBeanDefinition	A										<section class="prog__container">Extension of the GenericBeanDefinition\n class, adding support for annotation metadata exposed through the\n AnnotatedBeanDefinition interface.\n\n This GenericBeanDefinition variant is mainly useful for testing code that expects\n to operate on an AnnotatedBeanDefinition, for example strategy implementations\n in Spring's component scanning support (where the default definition class is\n ScannedGenericBeanDefinition,\n which also implements the AnnotatedBeanDefinition interface).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.html
AnnotationBeanWiringInfoResolver	A										<section class="prog__container">BeanWiringInfoResolver that\n uses the Configurable annotation to identify which classes need autowiring.\n The bean name to look up will be taken from the Configurable annotation\n if specified; otherwise the default will be the fully-qualified name of the\n class being configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/AnnotationBeanWiringInfoResolver.html
Autowire	A										<section class="prog__container">Enumeration determining autowiring status: that is, whether a bean should\n have its dependencies automatically injected by the Spring container using\n setter injection. This is a core concept in Spring DI.\n\n Available for use in annotation-based configurations, such as for the\n AspectJ AnnotationBeanConfigurer aspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowire.html
Autowired	A										<section class="prog__container">Marks a constructor, field, setter method or config method as to be\n autowired by Spring's dependency injection facilities.\n\n Only one constructor (at max) of any given bean class may carry this\n annotation, indicating the constructor to autowire when used as a Spring\n bean. Such a constructor does not have to be public.\n\n Fields are injected right after construction of a bean, before any\n config methods are invoked. Such a config field does not have to be public.\n\n Config methods may have an arbitrary name and any number of arguments;\n each of those arguments will be autowired with a matching bean in the\n Spring container. Bean property setter methods are effectively just\n a special case of such a general config method. Such config methods\n do not have to be public.\n\n In the case of multiple argument methods, the 'required' parameter is\n applicable for all arguments.\n\n In case of a Collection or Map\n dependency type, the container will autowire all beans matching the\n declared value type. In case of a Map, the keys must be declared as\n type String and will be resolved to the corresponding bean names.\n\n Note that actual injection is performed through a\n BeanPostProcessor which in turn means that you cannot\n use @Autowired to inject references into\n BeanPostProcessor or\n BeanFactoryPostProcessor\n types. Please consult the javadoc for the AutowiredAnnotationBeanPostProcessor\n class (which, by default, checks for the presence of this annotation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html
AutowiredAnnotationBeanPostProcessor	A										<section class="prog__container">BeanPostProcessor implementation\n that autowires annotated fields, setter methods and arbitrary config methods.\n Such members to be injected are detected through a Java 5 annotation: by default,\n Spring's @Autowired and @Value annotations.\n\n Also supports JSR-330's @Inject annotation,\n if available, as a direct alternative to Spring's own @Autowired.\n\n Only one constructor (at max) of any given bean class may carry this\n annotation with the 'required' parameter set to true,\n indicating the constructor to autowire when used as a Spring bean.\n If multiple non-required constructors carry the annotation, they\n will be considered as candidates for autowiring. The constructor with\n the greatest number of dependencies that can be satisfied by matching\n beans in the Spring container will be chosen. If none of the candidates\n can be satisfied, then a default constructor (if present) will be used.\n An annotated constructor does not have to be public.\n\n Fields are injected right after construction of a bean, before any\n config methods are invoked. Such a config field does not have to be public.\n\n Config methods may have an arbitrary name and any number of arguments; each of\n those arguments will be autowired with a matching bean in the Spring container.\n Bean property setter methods are effectively just a special case of such a\n general config method. Config methods do not have to be public.\n\n Note: A default AutowiredAnnotationBeanPostProcessor will be registered\n by the "context:annotation-config" and "context:component-scan" XML tags.\n Remove or turn off the default annotation configuration there if you intend\n to specify a custom AutowiredAnnotationBeanPostProcessor bean definition.\n NOTE: Annotation injection will be performed before XML injection;\n thus the latter configuration will override the former for properties wired through\n both approaches.\n\n In addition to regular injection points as discussed above, this post-processor\n also handles Spring's @Lookup annotation which identifies lookup\n methods to be replaced by the container at runtime. This is essentially a type-safe\n version of getBean(Class, args) and getBean(String, args),\n See @Lookup's javadoc for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.html
BeanFactoryAnnotationUtils	A										<section class="prog__container">Convenience methods performing bean lookups related to annotations, for example\n Spring's @Qualifier annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.html
Configurable	A										<section class="prog__container">Marks a class as being eligible for Spring-driven configuration.\n\n Typically used with the AspectJ AnnotationBeanConfigurerAspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Configurable.html
CustomAutowireConfigurer	A										<section class="prog__container">A BeanFactoryPostProcessor\n implementation that allows for convenient registration of custom autowire\n qualifier types.\n\n \n <bean id="customAutowireConfigurer" class="org.springframework.beans.factory.annotation.CustomAutowireConfigurer">\n   <property name="customQualifierTypes">\n     <set>\n       <value>mypackage.MyQualifier</value>\n     </set>\n   </property>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/CustomAutowireConfigurer.html
InitDestroyAnnotationBeanPostProcessor	A										<section class="prog__container">BeanPostProcessor implementation\n that invokes annotated init and destroy methods. Allows for an annotation\n alternative to Spring's InitializingBean\n and DisposableBean callback interfaces.\n\n The actual annotation types that this post-processor checks for can be\n configured through the "initAnnotationType"\n and "destroyAnnotationType" properties.\n Any custom annotation can be used, since there are no required annotation\n attributes.\n\n Init and destroy annotations may be applied to methods of any visibility:\n public, package-protected, protected, or private. Multiple such methods\n may be annotated, but it is recommended to only annotate one single\n init method and destroy method, respectively.\n\n Spring's CommonAnnotationBeanPostProcessor\n supports the JSR-250 PostConstruct and PreDestroy\n annotations out of the box, as init annotation and destroy annotation, respectively.\n Furthermore, it also supports the Resource annotation\n for annotation-driven injection of named beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.html
InjectionMetadata	A										<section class="prog__container">Internal class for managing injection metadata.\n Not intended for direct use in applications.\n\n Used by AutowiredAnnotationBeanPostProcessor,\n CommonAnnotationBeanPostProcessor and\n PersistenceAnnotationBeanPostProcessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/InjectionMetadata.html
InjectionMetadata.InjectedElement	A										<section class="prog__container">Check whether this injector's property needs to be skipped due to\n an explicit property value having been specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/InjectionMetadata.InjectedElement.html
Lookup	A										<section class="prog__container">An annotation that indicates 'lookup' methods, to be overridden by the container\n to redirect them back to the BeanFactory\n for a getBean call. This is essentially an annotation-based version of the\n XML lookup-method attribute, resulting in the same runtime arrangement.\n\n The resolution of the target bean can either be based on the return type\n (getBean(Class)) or on a suggested bean name (getBean(String)),\n in both cases passing the method's arguments to the getBean call\n for applying them as target factory method arguments or constructor arguments.\n\n Such lookup methods can have default (stub) implementations that will simply\n get replaced by the container, or they can be declared as abstract - for the\n container to fill them in at runtime. In both cases, the container will generate\n runtime subclasses of the method's containing class via CGLIB, which is why such\n lookup methods can only work on beans that the container instantiates through\n regular constructors: i.e. lookup methods cannot get replaced on beans returned\n from factory methods where we cannot dynamically provide a subclass for them.\n\n Concrete limitations in typical Spring configuration scenarios:\n When used with component scanning or any other mechanism that filters out abstract\n beans, provide stub implementations of your lookup methods to be able to declare\n them as concrete classes. And please remember that lookup methods won't work on\n beans returned from @Bean methods in configuration classes; you'll have\n to resort to @Inject Provider&lt;TargetBean&gt; or the like instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Lookup.html
Qualifier	A										<section class="prog__container">This annotation may be used on a field or parameter as a qualifier for\n candidate beans when autowiring. It may also be used to annotate other\n custom annotations that can then in turn be used as qualifiers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Qualifier.html
QualifierAnnotationAutowireCandidateResolver	A										<section class="prog__container">AutowireCandidateResolver implementation that matches bean definition qualifiers\n against qualifier annotations on the field or parameter to be autowired.\n Also supports suggested expression values through a value annotation.\n\n Also supports JSR-330's Qualifier annotation, if available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.html
Required	A										<section class="prog__container">Marks a method (typically a JavaBean setter method) as being 'required': that is,\n the setter method must be configured to be dependency-injected with a value.\n\n Please do consult the javadoc for the RequiredAnnotationBeanPostProcessor\n class (which, by default, checks for the presence of this annotation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Required.html
RequiredAnnotationBeanPostProcessor	A										<section class="prog__container">BeanPostProcessor implementation\n that enforces required JavaBean properties to have been configured.\n Required bean properties are detected through a Java 5 annotation:\n by default, Spring's Required annotation.\n\n The motivation for the existence of this BeanPostProcessor is to allow\n developers to annotate the setter properties of their own classes with an\n arbitrary JDK 1.5 annotation to indicate that the container must check\n for the configuration of a dependency injected value. This neatly pushes\n responsibility for such checking onto the container (where it arguably belongs),\n and obviates the need (in part) for a developer to code a method that\n simply checks that all required properties have actually been set.\n\n Please note that an 'init' method may still need to implemented (and may\n still be desirable), because all that this class does is enforce that a\n 'required' property has actually been configured with a value. It does\n not check anything else... In particular, it does not check that a\n configured value is not null.\n\n Note: A default RequiredAnnotationBeanPostProcessor will be registered\n by the "context:annotation-config" and "context:component-scan" XML tags.\n Remove or turn off the default annotation configuration there if you intend\n to specify a custom RequiredAnnotationBeanPostProcessor bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.html
Value	A										<section class="prog__container">Annotation at the field or method/constructor parameter level\n that indicates a default value expression for the affected argument.\n\n Typically used for expression-driven dependency injection. Also supported\n for dynamic resolution of handler method parameters, e.g. in Spring MVC.\n\n A common use case is to assign default field values using\n "#{systemProperties.myProp}" style expressions.\n\n Note that actual processing of the @Value annotation is performed\n by a BeanPostProcessor which in turn means that you cannot use\n @Value within\n BeanPostProcessor or\n BeanFactoryPostProcessor\n types. Please consult the javadoc for the AutowiredAnnotationBeanPostProcessor\n class (which, by default, checks for the presence of this annotation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html
ConfigurableObject	A										<section class="prog__container">Marker interface for domain object that need DI through aspects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/aspectj/ConfigurableObject.html
AbstractFactoryBean	A										<section class="prog__container">Simple template superclass for FactoryBean implementations that\n creates a singleton or a prototype object, depending on a flag.\n\n If the "singleton" flag is true (the default),\n this class will create the object that it creates exactly once\n on initialization and subsequently return said singleton instance\n on all calls to the getObject() method.\n\n Else, this class will create a new instance every time the\n getObject() method is invoked. Subclasses are responsible\n for implementing the abstract createInstance() template\n method to actually create the object(s) to expose.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/AbstractFactoryBean.html
AutowireCapableBeanFactory	A										<section class="prog__container">Extension of the BeanFactory\n interface to be implemented by bean factories that are capable of\n autowiring, provided that they want to expose this functionality for\n existing bean instances.\n\n This subinterface of BeanFactory is not meant to be used in normal\n application code: stick to BeanFactory\n or ListableBeanFactory for\n typical use cases.\n\n Integration code for other frameworks can leverage this interface to\n wire and populate existing bean instances that Spring does not control\n the lifecycle of. This is particularly useful for WebWork Actions and\n Tapestry Page objects, for example.\n\n Note that this interface is not implemented by\n ApplicationContext facades,\n as it is hardly ever used by application code. That said, it is available\n from an application context too, accessible through ApplicationContext's\n ApplicationContext.getAutowireCapableBeanFactory()\n method.\n\n You may also implement the BeanFactoryAware\n interface, which exposes the internal BeanFactory even when running in an\n ApplicationContext, to get access to an AutowireCapableBeanFactory:\n simply cast the passed-in BeanFactory to AutowireCapableBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/AutowireCapableBeanFactory.html
BeanDefinition	A										<section class="prog__container">A BeanDefinition describes a bean instance, which has property values,\n constructor argument values, and further information supplied by\n concrete implementations.\n\n This is just a minimal interface: The main intention is to allow a\n BeanFactoryPostProcessor such as PropertyPlaceholderConfigurer\n to introspect and modify property values and other bean metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinition.html
BeanDefinitionHolder	A										<section class="prog__container">Holder for a BeanDefinition with name and aliases.\n Can be registered as a placeholder for an inner bean.\n\n Can also be used for programmatic registration of inner bean\n definitions. If you don't care about BeanNameAware and the like,\n registering RootBeanDefinition or ChildBeanDefinition is good enough.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinitionHolder.html
BeanDefinitionVisitor	A										<section class="prog__container">Visitor class for traversing BeanDefinition objects, in particular\n the property values and constructor argument values contained in them,\n resolving bean metadata values.\n\n Used by PropertyPlaceholderConfigurer to parse all String values\n contained in a BeanDefinition, resolving any placeholders found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinitionVisitor.html
BeanExpressionContext	A										<section class="prog__container">Context object for evaluating an expression within a bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanExpressionContext.html
BeanExpressionResolver	A										<section class="prog__container">Strategy interface for resolving a value through evaluating it\n as an expression, if applicable.\n\n A raw BeanFactory does not\n contain a default implementation of this strategy. However,\n ApplicationContext implementations\n will provide expression support out of the box.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanExpressionResolver.html
BeanFactoryPostProcessor	A										<section class="prog__container">Allows for custom modification of an application context's bean definitions,\n adapting the bean property values of the context's underlying bean factory.\n\n Application contexts can auto-detect BeanFactoryPostProcessor beans in\n their bean definitions and apply them before any other beans get created.\n\n Useful for custom config files targeted at system administrators that\n override bean properties configured in the application context.\n\n See PropertyResourceConfigurer and its concrete implementations\n for out-of-the-box solutions that address such configuration needs.\n\n A BeanFactoryPostProcessor may interact with and modify bean\n definitions, but never bean instances. Doing so may cause premature bean\n instantiation, violating the container and causing unintended side-effects.\n If bean instance interaction is required, consider implementing\n BeanPostProcessor instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html
BeanPostProcessor	A										<section class="prog__container">Factory hook that allows for custom modification of new bean instances,\n e.g. checking for marker interfaces or wrapping them with proxies.\n\n ApplicationContexts can autodetect BeanPostProcessor beans in their\n bean definitions and apply them to any beans subsequently created.\n Plain bean factories allow for programmatic registration of post-processors,\n applying to all beans created through this factory.\n\n Typically, post-processors that populate beans via marker interfaces\n or the like will implement postProcessBeforeInitialization(java.lang.Object, java.lang.String),\n while post-processors that wrap beans with proxies will normally\n implement postProcessAfterInitialization(java.lang.Object, java.lang.String).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html
BeanReference	A										<section class="prog__container">Interface that exposes a reference to a bean name in an abstract fashion.\n This interface does not necessarily imply a reference to an actual bean\n instance; it just expresses a logical reference to the name of a bean.\n\n Serves as common interface implemented by any kind of bean reference\n holder, such as RuntimeBeanReference and\n RuntimeBeanNameReference.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanReference.html
ConfigurableBeanFactory	A										<section class="prog__container">Configuration interface to be implemented by most bean factories. Provides\n facilities to configure a bean factory, in addition to the bean factory\n client methods in the BeanFactory\n interface.\n\n This bean factory interface is not meant to be used in normal application\n code: Stick to BeanFactory or\n ListableBeanFactory for typical\n needs. This extended interface is just meant to allow for framework-internal\n plug'n'play and for special access to bean factory configuration methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ConfigurableBeanFactory.html
ConfigurableListableBeanFactory	A										<section class="prog__container">Configuration interface to be implemented by most listable bean factories.\n In addition to ConfigurableBeanFactory, it provides facilities to\n analyze and modify bean definitions, and to pre-instantiate singletons.\n\n This subinterface of BeanFactory\n is not meant to be used in normal application code: Stick to\n BeanFactory or\n ListableBeanFactory for typical\n use cases. This interface is just meant to allow for framework-internal\n plug'n'play even when needing access to bean factory configuration methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ConfigurableListableBeanFactory.html
ConstructorArgumentValues	A										<section class="prog__container">Holder for constructor argument values, typically as part of a bean definition.\n\n Supports values for a specific index in the constructor argument list\n as well as for generic argument matches by type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ConstructorArgumentValues.html
ConstructorArgumentValues.ValueHolder	A										<section class="prog__container">Holder for a constructor argument value, with an optional type\n attribute indicating the target type of the actual constructor argument.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ConstructorArgumentValues.ValueHolder.html
CustomEditorConfigurer	A										<section class="prog__container">BeanFactoryPostProcessor implementation that allows for convenient\n registration of custom property editors.\n\n In case you want to register PropertyEditor instances,\n the recommended usage as of Spring 2.0 is to use custom\n PropertyEditorRegistrar implementations that in turn register any\n desired editor instances on a given\n registry. Each\n PropertyEditorRegistrar can register any number of custom editors.\n\n \n <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n   <property name="propertyEditorRegistrars">\n     <list>\n       <bean class="mypackage.MyCustomDateEditorRegistrar"/>\n       <bean class="mypackage.MyObjectEditorRegistrar"/>\n     </list>\n   </property>\n </bean>\n \n\n It's perfectly fine to register PropertyEditor classes via\n the customEditors property. Spring will create fresh instances of\n them for each editing attempt then:\n\n \n <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n   <property name="customEditors">\n     <map>\n       <entry key="java.util.Date" value="mypackage.MyCustomDateEditor"/>\n       <entry key="mypackage.MyObject" value="mypackage.MyObjectEditor"/>\n     </map>\n   </property>\n </bean>\n \n\n Note, that you shouldn't register PropertyEditor bean instances via\n the customEditors property as PropertyEditors are stateful\n and the instances will then have to be synchronized for every editing\n attempt. In case you need control over the instantiation process of\n PropertyEditors, use a PropertyEditorRegistrar to register\n them.\n\n \n Also supports "java.lang.String[]"-style array class names and primitive\n class names (e.g. "boolean"). Delegates to ClassUtils for actual\n class name resolution.\n\n NOTE: Custom property editors registered with this configurer do\n not apply to data binding. Custom editors for data binding need to\n be registered on the DataBinder:\n Use a common base class or delegate to common PropertyEditorRegistrar\n implementations to reuse editor registration there.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/CustomEditorConfigurer.html
CustomScopeConfigurer	A										<section class="prog__container">Simple BeanFactoryPostProcessor implementation that registers\n custom Scope(s) with the containing ConfigurableBeanFactory.\n\n Will register all of the supplied scopes\n with the ConfigurableListableBeanFactory that is passed to the\n postProcessBeanFactory(ConfigurableListableBeanFactory) method.\n\n This class allows for declarative registration of custom scopes.\n Alternatively, consider implementing a custom BeanFactoryPostProcessor\n that calls ConfigurableBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope) programmatically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/CustomScopeConfigurer.html
DependencyDescriptor	A										<section class="prog__container">Descriptor for a specific dependency that is about to be injected.\n Wraps a constructor parameter, a method parameter or a field,\n allowing unified access to their metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/DependencyDescriptor.html
DeprecatedBeanWarner	A										<section class="prog__container">Bean factory post processor that logs a warning for @Deprecated beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/DeprecatedBeanWarner.html
DestructionAwareBeanPostProcessor	A										<section class="prog__container">Subinterface of BeanPostProcessor that adds a before-destruction callback.\n\n The typical usage will be to invoke custom destruction callbacks on\n specific bean types, matching corresponding initialization callbacks.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/DestructionAwareBeanPostProcessor.html
EmbeddedValueResolver	A										<section class="prog__container">StringValueResolver adapter for resolving placeholders and\n expressions against a ConfigurableBeanFactory.\n\n Note that this adapter resolves expressions as well, in contrast\n to the ConfigurableBeanFactory.resolveEmbeddedValue(java.lang.String) method.\n The BeanExpressionContext used is for the plain bean factory,\n with no scope specified for any contextual objects to access.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/EmbeddedValueResolver.html
FieldRetrievingFactoryBean	A										<section class="prog__container">FactoryBean which retrieves a static or non-static field value.\n\n Typically used for retrieving public static final constants. Usage example:\n\n // standard definition for exposing a static field, specifying the "staticField" property\n <bean id="myField" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">\n   <property name="staticField" value="java.sql.Connection.TRANSACTION_SERIALIZABLE"/>\n </bean>\n\n // convenience version that specifies a static field pattern as bean name\n <bean id="java.sql.Connection.TRANSACTION_SERIALIZABLE"\n       class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean"/>\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.html
InstantiationAwareBeanPostProcessor	A										<section class="prog__container">Subinterface of BeanPostProcessor that adds a before-instantiation callback,\n and a callback after instantiation but before explicit properties are set or\n autowiring occurs.\n\n Typically used to suppress default instantiation for specific target beans,\n for example to create proxies with special TargetSources (pooling targets,\n lazily initializing targets, etc), or to implement additional injection strategies\n such as field injection.\n\n NOTE: This interface is a special purpose interface, mainly for\n internal use within the framework. It is recommended to implement the plain\n BeanPostProcessor interface as far as possible, or to derive from\n InstantiationAwareBeanPostProcessorAdapter in order to be shielded\n from extensions to this interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessor.html
InstantiationAwareBeanPostProcessorAdapter	A										<section class="prog__container">Adapter that implements all methods on SmartInstantiationAwareBeanPostProcessor\n as no-ops, which will not change normal processing of each bean instantiated\n by the container. Subclasses may override merely those methods that they are\n actually interested in.\n\n Note that this base class is only recommendable if you actually require\n InstantiationAwareBeanPostProcessor functionality. If all you need\n is plain BeanPostProcessor functionality, prefer a straight\n implementation of that (simpler) interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessorAdapter.html
ListFactoryBean	A										<section class="prog__container">Simple factory for shared List instances. Allows for central setup\n of Lists via the "list" element in XML bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ListFactoryBean.html
MapFactoryBean	A										<section class="prog__container">Simple factory for shared Map instances. Allows for central setup\n of Maps via the "map" element in XML bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/MapFactoryBean.html
MethodInvokingBean	A										<section class="prog__container">Simple method invoker bean: just invoking a target method, not expecting a result\n to expose to the container (in contrast to MethodInvokingFactoryBean).\n\n This invoker supports any kind of target method. A static method may be specified\n by setting the targetMethod property to a String representing\n the static method name, with targetClass specifying the Class\n that the static method is defined on. Alternatively, a target instance method may be\n specified, by setting the targetObject property as the target\n object, and the targetMethod property as the name of the\n method to call on that target object. Arguments for the method invocation may be\n specified by setting the arguments property.\n\n This class depends on afterPropertiesSet() being called once\n all properties have been set, as per the InitializingBean contract.\n\n An example (in an XML based bean factory definition) of a bean definition\n which uses this class to call a static initialization method:\n\n \n <bean id="myObject" class="org.springframework.beans.factory.config.MethodInvokingBean">\n   <property name="staticMethod" value="com.whatever.MyClass.init"/>\n </bean>\nAn example of calling an instance method to start some server bean:\n\n \n <bean id="myStarter" class="org.springframework.beans.factory.config.MethodInvokingBean">\n   <property name="targetObject" ref="myServer"/>\n   <property name="targetMethod" value="start"/>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/MethodInvokingBean.html
MethodInvokingFactoryBean	A										<section class="prog__container">FactoryBean which returns a value which is the result of a static or instance\n method invocation. For most use cases it is better to just use the container's\n built-in factory method support for the same purpose, since that is smarter at\n converting arguments. This factory bean is still useful though when you need to\n call a method which doesn't return any value (for example, a static class method\n to force some sort of initialization to happen). This use case is not supported\n by factory methods, since a return value is needed to obtain the bean instance.\n\n Note that as it is expected to be used mostly for accessing factory methods,\n this factory by default operates in a singleton fashion. The first request\n to getObject() by the owning bean factory will cause a method invocation,\n whose return value will be cached for subsequent requests. An internal\n singleton property may be set to "false", to cause this\n factory to invoke the target method each time it is asked for an object.\n\n NOTE: If your target method does not produce a result to expose, consider\n MethodInvokingBean instead, which avoids the type determination and\n lifecycle limitations that this MethodInvokingFactoryBean comes with.\nThis invoker supports any kind of target method. A static method may be specified\n by setting the targetMethod property to a String representing\n the static method name, with targetClass specifying the Class\n that the static method is defined on. Alternatively, a target instance method may be\n specified, by setting the targetObject property as the target\n object, and the targetMethod property as the name of the\n method to call on that target object. Arguments for the method invocation may be\n specified by setting the arguments property.\n\n This class depends on afterPropertiesSet() being called once\n all properties have been set, as per the InitializingBean contract.\n\n An example (in an XML based bean factory definition) of a bean definition\n which uses this class to call a static factory method:\n\n \n <bean id="myObject" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">\n   <property name="staticMethod" value="com.whatever.MyClassFactory.getInstance"/>\n </bean>\nAn example of calling a static method then an instance method to get at a\n Java system property. Somewhat verbose, but it works.\n\n \n <bean id="sysProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">\n   <property name="targetClass" value="java.lang.System"/>\n   <property name="targetMethod" value="getProperties"/>\n </bean>\n\n <bean id="javaVersion" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">\n   <property name="targetObject" value="sysProps"/>\n   <property name="targetMethod" value="getProperty"/>\n   <property name="arguments" value="java.version"/>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html
NamedBeanHolder	A										<section class="prog__container">A simple holder for a given bean name plus bean instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/NamedBeanHolder.html
ObjectFactoryCreatingFactoryBean	A										<section class="prog__container">A FactoryBean implementation that\n returns a value which is an ObjectFactory\n that in turn returns a bean sourced from a BeanFactory.\n\n As such, this may be used to avoid having a client object directly calling\n BeanFactory.getBean(String) to get\n a (typically prototype) bean from a\n BeanFactory, which would be a\n violation of the inversion of control principle. Instead, with the use\n of this class, the client object can be fed an\n ObjectFactory instance as a\n property which directly returns only the one target bean (again, which is\n typically a prototype bean).\n\n A sample config in an XML-based\n BeanFactory might look as follows:\n\n <beans>\n\n   <!-- Prototype bean since we have state -->\n   <bean id="myService" class="a.b.c.MyService" scope="prototype"/>\n\n   <bean id="myServiceFactory"\n       class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">\n     <property name="targetBeanName"><idref local="myService"/></property>\n   </bean>\n\n   <bean id="clientBean" class="a.b.c.MyClientBean">\n     <property name="myServiceFactory" ref="myServiceFactory"/>\n   </bean>\n\n</beans>\nThe attendant MyClientBean class implementation might look\n something like this:\n\n package a.b.c;\n\n import org.springframework.beans.factory.ObjectFactory;\n\n public class MyClientBean {\n\n   private ObjectFactory<MyService> myServiceFactory;\n\n   public void setMyServiceFactory(ObjectFactory<MyService> myServiceFactory) {\n     this.myServiceFactory = myServiceFactory;\n   }\n\n   public void someBusinessMethod() {\n     // get a 'fresh', brand new MyService instance\n     MyService service = this.myServiceFactory.getObject();\n     // use the service object to effect the business logic...\n   }\n }\nAn alternate approach to this application of an object creational pattern\n would be to use the ServiceLocatorFactoryBean\n to source (prototype) beans. The ServiceLocatorFactoryBean approach\n has the advantage of the fact that one doesn't have to depend on any\n Spring-specific interface such as ObjectFactory,\n but has the disadvantage of requiring runtime class generation. Please do\n consult the ServiceLocatorFactoryBean JavaDoc\n for a fuller discussion of this issue.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.html
PlaceholderConfigurerSupport	A										<section class="prog__container">Abstract base class for property resource configurers that resolve placeholders\n in bean definition property values. Implementations pull values from a\n properties file or other property source into bean definitions.\n\n The default placeholder syntax follows the Ant / Log4J / JSP EL style:\n\n ${...}\n\n Example XML bean definition:\n\n \n \n   \n   \n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.html
PreferencesPlaceholderConfigurer	A										<section class="prog__container">Subclass of PropertyPlaceholderConfigurer that supports JDK 1.4's\n Preferences API (java.util.prefs).\n\n Tries to resolve placeholders as keys first in the user preferences,\n then in the system preferences, then in this configurer's properties.\n Thus, behaves like PropertyPlaceholderConfigurer if no corresponding\n preferences defined.\n\n Supports custom paths for the system and user preferences trees. Also\n supports custom paths specified in placeholders ("myPath/myPlaceholderKey").\n Uses the respective root node if not specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PreferencesPlaceholderConfigurer.html
PropertiesFactoryBean	A										<section class="prog__container">Allows for making a properties file from a classpath location available\n as Properties instance in a bean factory. Can be used to populate\n any bean property of type Properties via a bean reference.\n\n Supports loading from a properties file and/or setting local properties\n on this FactoryBean. The created Properties instance will be merged from\n loaded and local values. If neither a location nor local properties are set,\n an exception will be thrown on initialization.\n\n Can create a singleton or a new object on each request.\n Default is a singleton.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertiesFactoryBean.html
PropertyOverrideConfigurer	A										<section class="prog__container">Property resource configurer that overrides bean property values in an application\n context definition. It pushes values from a properties file into bean definitions.\n\n Configuration lines are expected to be of the following form:\n\n beanName.property=value\n\n Example properties file:\n\n dataSource.driverClassName=com.mysql.jdbc.Driver\n dataSource.url=jdbc:mysql:mydb\n\n In contrast to PropertyPlaceholderConfigurer, the original definition can have default\n values or no values at all for such bean properties. If an overriding properties file does\n not have an entry for a certain bean property, the default context definition is used.\n\n Note that the context definition is not aware of being overridden;\n so this is not immediately obvious when looking at the XML definition file.\n Furthermore, note that specified override values are always literal values;\n they are not translated into bean references. This also applies when the original\n value in the XML bean definition specifies a bean reference.\n\n In case of multiple PropertyOverrideConfigurers that define different values for\n the same bean property, the last one will win (due to the overriding mechanism).\n\n Property values can be converted after reading them in, through overriding\n the convertPropertyValue method. For example, encrypted values\n can be detected and decrypted accordingly before processing them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyOverrideConfigurer.html
PropertyPathFactoryBean	A										<section class="prog__container">FactoryBean that evaluates a property path on a given target object.\n\n The target object can be specified directly or via a bean name.\n\n Usage examples:\n\n <!-- target bean to be referenced by name -->\n <bean id="tb" class="org.springframework.beans.TestBean" singleton="false">\n   <property name="age" value="10"/>\n   <property name="spouse">\n     <bean class="org.springframework.beans.TestBean">\n       <property name="age" value="11"/>\n     </bean>\n   </property>\n </bean>\n\n <!-- will result in 12, which is the value of property 'age' of the inner bean -->\n <bean id="propertyPath1" class="org.springframework.beans.factory.config.PropertyPathFactoryBean">\n   <property name="targetObject">\n     <bean class="org.springframework.beans.TestBean">\n       <property name="age" value="12"/>\n     </bean>\n   </property>\n   <property name="propertyPath" value="age"/>\n </bean>\n\n <!-- will result in 11, which is the value of property 'spouse.age' of bean 'tb' -->\n <bean id="propertyPath2" class="org.springframework.beans.factory.config.PropertyPathFactoryBean">\n   <property name="targetBeanName" value="tb"/>\n   <property name="propertyPath" value="spouse.age"/>\n </bean>\n\n <!-- will result in 10, which is the value of property 'age' of bean 'tb' -->\n <bean id="tb.age" class="org.springframework.beans.factory.config.PropertyPathFactoryBean"/>\nIf you are using Spring 2.0 and XML Schema support in your configuration file(s),\n you can also use the following style of configuration for property path access.\n (See also the appendix entitled 'XML Schema-based configuration' in the Spring\n reference manual for more examples.)\n\n  <!-- will result in 10, which is the value of property 'age' of bean 'tb' -->\n <util:property-path id="name" path="testBean.age"/>\n\n Thanks to Matthias Ernst for the suggestion and initial prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyPathFactoryBean.html
PropertyPlaceholderConfigurer	A										<section class="prog__container">PlaceholderConfigurerSupport subclass that resolves ${...} placeholders\n against local properties and/or system properties\n and environment variables.\n\n As of Spring 3.1, PropertySourcesPlaceholderConfigurer should be used preferentially over this implementation; it is\n more flexible through taking advantage of the Environment and\n PropertySource mechanisms also made available in Spring 3.1.\n\n PropertyPlaceholderConfigurer is still appropriate for use when:\n \nthe spring-context module is not available (i.e., one is using Spring's\n BeanFactory API as opposed to ApplicationContext).\n existing configuration makes use of the "systemPropertiesMode" and/or\n "systemPropertiesModeName" properties. Users are encouraged to move\n away from using these settings, and rather configure property source search order through the container's\n Environment; however, exact preservation of functionality may be maintained by continuing to\n use PropertyPlaceholderConfigurer.\n \nPrior to Spring 3.1, the <context:property-placeholder/> namespace element\n registered an instance of PropertyPlaceholderConfigurer. It will still do so if\n using the spring-context-3.0.xsd definition of the namespace. That is, you can preserve\n registration of PropertyPlaceholderConfigurer through the namespace, even if using Spring 3.1;\n simply do not update your xsi:schemaLocation and continue using the 3.0 XSD.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html
PropertyResourceConfigurer	A										<section class="prog__container">Allows for configuration of individual bean property values from a property resource,\n i.e. a properties file. Useful for custom config files targeted at system\n administrators that override bean properties configured in the application context.\n\n Two concrete implementations are provided in the distribution:\n \nPropertyOverrideConfigurer for "beanName.property=value" style overriding\n (pushing values from a properties file into bean definitions)\n PropertyPlaceholderConfigurer for replacing "${...}" placeholders\n (pulling values from a properties file into bean definitions)\n \nProperty values can be converted after reading them in, through overriding\n the convertPropertyValue(java.lang.String) method. For example, encrypted values\n can be detected and decrypted accordingly before processing them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyResourceConfigurer.html
ProviderCreatingFactoryBean	A										<section class="prog__container">A FactoryBean implementation that\n returns a value which is a JSR-330 Provider that in turn\n returns a bean sourced from a BeanFactory.\n\n This is basically a JSR-330 compliant variant of Spring's good old\n ObjectFactoryCreatingFactoryBean. It can be used for traditional\n external dependency injection configuration that targets a property or\n constructor argument of type javax.inject.Provider, as an\n alternative to JSR-330's @Inject annotation-driven approach.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ProviderCreatingFactoryBean.html
RuntimeBeanNameReference	A										<section class="prog__container">Immutable placeholder class used for a property value object when it's a\n reference to another bean name in the factory, to be resolved at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/RuntimeBeanNameReference.html
RuntimeBeanReference	A										<section class="prog__container">Immutable placeholder class used for a property value object when it's\n a reference to another bean in the factory, to be resolved at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/RuntimeBeanReference.html
Scope	A										<section class="prog__container">Strategy interface used by a ConfigurableBeanFactory,\n representing a target scope to hold bean instances in.\n This allows for extending the BeanFactory's standard scopes\n "singleton" and\n "prototype"\n with custom further scopes, registered for a\n specific key.\n\n ApplicationContext implementations\n such as a WebApplicationContext\n may register additional standard scopes specific to their environment,\n e.g. "request"\n and "session",\n based on this Scope SPI.\n\n Even if its primary use is for extended scopes in a web environment,\n this SPI is completely generic: It provides the ability to get and put\n objects from any underlying storage mechanism, such as an HTTP session\n or a custom conversation mechanism. The name passed into this class's\n get and remove methods will identify the\n target object in the current scope.\n\n Scope implementations are expected to be thread-safe.\n One Scope instance can be used with multiple bean factories\n at the same time, if desired (unless it explicitly wants to be aware of\n the containing BeanFactory), with any number of threads accessing\n the Scope concurrently from any number of factories.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/Scope.html
ServiceLocatorFactoryBean	A										<section class="prog__container">A FactoryBean implementation that takes an interface which must have one or more\n methods with the signatures MyType xxx() or MyType xxx(MyIdType id)\n (typically, MyService getService() or MyService getService(String id))\n and creates a dynamic proxy which implements that interface, delegating to an\n underlying BeanFactory.\n\n Such service locators permit the decoupling of calling code from\n the BeanFactory API, by using an\n appropriate custom locator interface. They will typically be used for\n prototype beans, i.e. for factory methods that are supposed to\n return a new instance for each call. The client receives a reference to the\n service locator via setter or constructor injection, to be able to invoke\n the locator's factory methods on demand. For singleton beans, direct\n setter or constructor injection of the target bean is preferable.\nOn invocation of the no-arg factory method, or the single-arg factory\n method with a String id of null or empty String, if exactly\n one bean in the factory matches the return type of the factory\n method, that bean is returned, otherwise a\n NoSuchBeanDefinitionException\n is thrown.\n\n On invocation of the single-arg factory method with a non-null (and\n non-empty) argument, the proxy returns the result of a\n BeanFactory.getBean(String) call,\n using a stringified version of the passed-in id as bean name.\n\n A factory method argument will usually be a String, but can also be an\n int or a custom enumeration type, for example, stringified via\n toString. The resulting String can be used as bean name as-is,\n provided that corresponding beans are defined in the bean factory.\n Alternatively, a custom\n mapping between service IDs and bean names can be defined.\n\n By way of an example, consider the following service locator interface.\n Note that this interface is not dependent on any Spring APIs.\n\n package a.b.c;\n\npublic interface ServiceFactory {\n\n    public MyService getService();\n}\nA sample config in an XML-based\n BeanFactory might look as follows:\n\n <beans>\n\n   <!-- Prototype bean since we have state -->\n   <bean id="myService" class="a.b.c.MyService" singleton="false"/>\n\n   <!-- will lookup the above 'myService' bean by *TYPE* -->\n   <bean id="myServiceFactory"\n            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">\n     <property name="serviceLocatorInterface" value="a.b.c.ServiceFactory"/>\n   </bean>\n\n   <bean id="clientBean" class="a.b.c.MyClientBean">\n     <property name="myServiceFactory" ref="myServiceFactory"/>\n   </bean>\n\n</beans>\nThe attendant MyClientBean class implementation might then\n look something like this:\n\n package a.b.c;\n\npublic class MyClientBean {\n\n    private ServiceFactory myServiceFactory;\n\n    // actual implementation provided by the Spring container\n    public void setServiceFactory(ServiceFactory myServiceFactory) {\n        this.myServiceFactory = myServiceFactory;\n    }\n\n    public void someBusinessMethod() {\n        // get a 'fresh', brand new MyService instance\n        MyService service = this.myServiceFactory.getService();\n        // use the service object to effect the business logic...\n    }\n}\nBy way of an example that looks up a bean by name, consider\n the following service locator interface. Again, note that this\n interface is not dependent on any Spring APIs.\n\n package a.b.c;\n\npublic interface ServiceFactory {\n\n    public MyService getService (String serviceName);\n}\nA sample config in an XML-based\n BeanFactory might look as follows:\n\n <beans>\n\n   <!-- Prototype beans since we have state (both extend MyService) -->\n   <bean id="specialService" class="a.b.c.SpecialService" singleton="false"/>\n   <bean id="anotherService" class="a.b.c.AnotherService" singleton="false"/>\n\n   <bean id="myServiceFactory"\n            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">\n     <property name="serviceLocatorInterface" value="a.b.c.ServiceFactory"/>\n   </bean>\n\n   <bean id="clientBean" class="a.b.c.MyClientBean">\n     <property name="myServiceFactory" ref="myServiceFactory"/>\n   </bean>\n\n</beans>\nThe attendant MyClientBean class implementation might then\n look something like this:\n\n package a.b.c;\n\npublic class MyClientBean {\n\n    private ServiceFactory myServiceFactory;\n\n    // actual implementation provided by the Spring container\n    public void setServiceFactory(ServiceFactory myServiceFactory) {\n        this.myServiceFactory = myServiceFactory;\n    }\n\n    public void someBusinessMethod() {\n        // get a 'fresh', brand new MyService instance\n        MyService service = this.myServiceFactory.getService("specialService");\n        // use the service object to effect the business logic...\n    }\n\n    public void anotherBusinessMethod() {\n        // get a 'fresh', brand new MyService instance\n        MyService service = this.myServiceFactory.getService("anotherService");\n        // use the service object to effect the business logic...\n    }\n}\nSee ObjectFactoryCreatingFactoryBean for an alternate approach.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/ServiceLocatorFactoryBean.html
SetFactoryBean	A										<section class="prog__container">Simple factory for shared Set instances. Allows for central setup\n of Sets via the "set" element in XML bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/SetFactoryBean.html
SingletonBeanRegistry	A										<section class="prog__container">Interface that defines a registry for shared bean instances.\n Can be implemented by BeanFactory\n implementations in order to expose their singleton management facility\n in a uniform manner.\n\n The ConfigurableBeanFactory interface extends this interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/SingletonBeanRegistry.html
SmartInstantiationAwareBeanPostProcessor	A										<section class="prog__container">Extension of the InstantiationAwareBeanPostProcessor interface,\n adding a callback for predicting the eventual type of a processed bean.\n\n NOTE: This interface is a special purpose interface, mainly for\n internal use within the framework. In general, application-provided\n post-processors should simply implement the plain BeanPostProcessor\n interface or derive from the InstantiationAwareBeanPostProcessorAdapter\n class. New methods might be added to this interface even in point releases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/SmartInstantiationAwareBeanPostProcessor.html
TypedStringValue	A										<section class="prog__container">Holder for a typed String value. Can be added to bean definitions\n in order to explicitly specify a target type for a String value,\n for example for collection elements.\n\n This holder will just store the String value and the target type.\n The actual conversion will be performed by the bean factory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/TypedStringValue.html
YamlMapFactoryBean	A										<section class="prog__container">Factory for a Map that reads from a YAML source, preserving the\n YAML-declared value types and their structure.\n\n YAML is a nice human-readable format for configuration, and it has some\n useful hierarchical properties. It's more or less a superset of JSON, so it\n has a lot of similar features.\n\n If multiple resources are provided the later ones will override entries in\n the earlier ones hierarchically; that is, all entries with the same nested key\n of type Map at any depth are merged. For example:\n\n \n foo:\n   bar:\n    one: two\n three: four\n \n\n plus (later in the list)\n\n \n foo:\n   bar:\n    one: 2\n five: six\n \n\n results in an effective input of\n\n \n foo:\n   bar:\n    one: 2\n three: four\n five: six\n \n\n Note that the value of "foo" in the first document is not simply replaced\n with the value in the second, but its nested values are merged.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlMapFactoryBean.html
YamlProcessor.DocumentMatcher	A										<section class="prog__container">Strategy interface used to test if properties match.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.DocumentMatcher.html
YamlProcessor	A										<section class="prog__container">Base class for YAML factories.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.html
YamlProcessor.MatchCallback	A										<section class="prog__container">Callback interface used to process the YAML parsing results.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.MatchCallback.html
YamlProcessor.MatchStatus	A										<section class="prog__container">Status returned from YamlProcessor.DocumentMatcher.matches(java.util.Properties)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.MatchStatus.html
YamlProcessor.ResolutionMethod	A										<section class="prog__container">Method to use for resolving resources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.ResolutionMethod.html
YamlProcessor.StrictMapAppenderConstructor	A										<section class="prog__container">A specialized Constructor that checks for duplicate keys.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlProcessor.StrictMapAppenderConstructor.html
YamlPropertiesFactoryBean	A										<section class="prog__container">Factory for Properties that reads from a YAML source,\n exposing a flat structure of String property values.\n\n YAML is a nice human-readable format for configuration, and it has some\n useful hierarchical properties. It's more or less a superset of JSON, so it\n has a lot of similar features.\n\n Note: All exposed values are of type String for access through\n the common Properties.getProperty(java.lang.String) method (e.g. in configuration property\n resolution through PropertiesLoaderSupport.setProperties(Properties)).\n If this is not desirable, use YamlMapFactoryBean instead.\n\n The Properties created by this factory have nested paths for hierarchical\n objects, so for instance this YAML\n\n \n environments:\n   dev:\n     url: http://dev.bar.com\n     name: Developer Setup\n   prod:\n     url: http://foo.bar.com\n     name: My Cool App\n \n\n is transformed into these properties:\n\n \n environments.dev.url=http://dev.bar.com\n environments.dev.name=Developer Setup\n environments.prod.url=http://foo.bar.com\n environments.prod.name=My Cool App\n \n\n Lists are split as property keys with [] dereferencers, for\n example this YAML:\n\n \n servers:\n - dev.bar.com\n - foo.bar.com\n \n\n becomes properties like this:\n\n \n servers[0]=dev.bar.com\n servers[1]=foo.bar.com\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlPropertiesFactoryBean.html
GroovyBeanDefinitionReader	A										<section class="prog__container">A Groovy-based reader for Spring bean definitions: like a Groovy builder,\n but more of a DSL for Spring configuration.\n\n This bean definition reader also understands XML bean definition files,\n allowing for seamless mixing and matching with Groovy bean definition files.\n\n Typically applied to a\n DefaultListableBeanFactory\n or a GenericApplicationContext,\n but can be used against any BeanDefinitionRegistry implementation.\n\n Example Syntax\n\n import org.hibernate.SessionFactory\n import org.apache.commons.dbcp.BasicDataSource\n\n def reader = new GroovyBeanDefinitionReader(myApplicationContext)\n reader.beans {\n     dataSource(BasicDataSource) {                  // <--- invokeMethod\n         driverClassName = "org.hsqldb.jdbcDriver"\n         url = "jdbc:hsqldb:mem:grailsDB"\n         username = "sa"                            // <-- setProperty\n         password = ""\n         settings = [mynew:"setting"]\n     }\n     sessionFactory(SessionFactory) {\n         dataSource = dataSource                    // <-- getProperty for retrieving references\n     }\n     myService(MyService) {\n         nestedBean = { AnotherBean bean ->         // <-- setProperty with closure for nested bean\n             dataSource = dataSource\n         }\n     }\n }\nYou can also load resources containing beans defined in a Groovy script using\n either the AbstractBeanDefinitionReader.loadBeanDefinitions(Resource...) or\n AbstractBeanDefinitionReader.loadBeanDefinitions(String...) method, with a script looking similar to\n the following.\n\n \n import org.hibernate.SessionFactory\n import org.apache.commons.dbcp.BasicDataSource\n\n beans {\n     dataSource(BasicDataSource) {\n         driverClassName = "org.hsqldb.jdbcDriver"\n         url = "jdbc:hsqldb:mem:grailsDB"\n         username = "sa"\n         password = ""\n         settings = [mynew:"setting"]\n     }\n     sessionFactory(SessionFactory) {\n         dataSource = dataSource\n     }\n     myService(MyService) {\n         nestedBean = { AnotherBean bean ->\n             dataSource = dataSource\n         }\n     }\n }</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.html
AbstractComponentDefinition	A										<section class="prog__container">Base implementation of ComponentDefinition that provides a basic implementation of\n getDescription() which delegates to ComponentDefinition.getName(). Also provides a base implementation\n of toString() which delegates to getDescription() in keeping with the recommended\n implementation strategy. Also provides default implementations of getInnerBeanDefinitions()\n and getBeanReferences() that return an empty array.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/AbstractComponentDefinition.html
AliasDefinition	A										<section class="prog__container">Representation of an alias that has been registered during the parsing process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/AliasDefinition.html
BeanComponentDefinition	A										<section class="prog__container">ComponentDefinition based on a standard BeanDefinition, exposing the given bean\n definition as well as inner bean definitions and bean references for the given bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/BeanComponentDefinition.html
BeanDefinitionParsingException	A										<section class="prog__container">Exception thrown when a bean definition reader encounters an error\n during the parsing process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/BeanDefinitionParsingException.html
BeanEntry	A										<section class="prog__container">ParseState entry representing a bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/BeanEntry.html
ComponentDefinition	A										<section class="prog__container">Interface that describes the logical view of a set of BeanDefinitions\n and BeanReferences as presented in some configuration context.\n\n With the introduction of pluggable custom XML tags,\n it is now possible for a single logical configuration entity, in this case an XML tag, to\n create multiple BeanDefinitions and RuntimeBeanReferences\n in order to provide more succinct configuration and greater convenience to end users. As such, it can\n no longer be assumed that each configuration entity (e.g. XML tag) maps to one BeanDefinition.\n For tool vendors and other users who wish to present visualization or support for configuring Spring\n applications it is important that there is some mechanism in place to tie the BeanDefinitions\n in the BeanFactory back to the configuration data in a way\n that has concrete meaning to the end user. As such, NamespaceHandler\n implementations are able to publish events in the form of a ComponentDefinition for each\n logical entity being configured. Third parties can then subscribe to these events,\n allowing for a user-centric view of the bean metadata.\n\n Each ComponentDefinition has a source object which is configuration-specific.\n In the case of XML-based configuration this is typically the Node which contains the user\n supplied configuration information. In addition to this, each BeanDefinition enclosed in a\n ComponentDefinition has its own source object which may point\n to a different, more specific, set of configuration data. Beyond this, individual pieces of bean metadata such\n as the PropertyValues may also have a source object giving an\n even greater level of detail. Source object extraction is handled through the\n SourceExtractor which can be customized as required.\n\n Whilst direct access to important BeanReferences is provided through\n getBeanReferences(), tools may wish to inspect all BeanDefinitions to gather\n the full set of BeanReferences. Implementations are required to provide\n all BeanReferences that are required to validate the configuration of the\n overall logical entity as well as those required to provide full user visualisation of the configuration.\n It is expected that certain BeanReferences will not be important to\n validation or to the user view of the configuration and as such these may be ommitted. A tool may wish to\n display any additional BeanReferences sourced through the supplied\n BeanDefinitions but this is not considered to be a typical case.\n\n Tools can determine the important of contained BeanDefinitions by checking the\n role identifier. The role is essentially a hint to the tool as to how\n important the configuration provider believes a BeanDefinition is to the end user. It is expected\n that tools will not display all BeanDefinitions for a given\n ComponentDefinition choosing instead to filter based on the role. Tools may choose to make\n this filtering user configurable. Particular notice should be given to the\n INFRASTRUCTURE role identifier. BeanDefinitions\n classified with this role are completely unimportant to the end user and are required only for\n internal implementation reasons.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ComponentDefinition.html
CompositeComponentDefinition	A										<section class="prog__container">ComponentDefinition implementation that holds one or more nested\n ComponentDefinition instances, aggregating them into a named group\n of components.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/CompositeComponentDefinition.html
ConstructorArgumentEntry	A										<section class="prog__container">ParseState entry representing a (possibly indexed)\n constructor argument.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ConstructorArgumentEntry.html
DefaultsDefinition	A										<section class="prog__container">Marker interface for a defaults definition,\n extending BeanMetadataElement to inherit source exposure.\n\n Concrete implementations are typically based on 'document defaults',\n for example specified at the root tag level within an XML document.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/DefaultsDefinition.html
EmptyReaderEventListener	A										<section class="prog__container">Empty implementation of the ReaderEventListener interface,\n providing no-op implementations of all callback methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/EmptyReaderEventListener.html
FailFastProblemReporter	A										<section class="prog__container">Simple ProblemReporter implementation that exhibits fail-fast\n behavior when errors are encountered.\n\n The first error encountered results in a BeanDefinitionParsingException\n being thrown.\n\n Warnings are written to\n the log for this class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/FailFastProblemReporter.html
ImportDefinition	A										<section class="prog__container">Representation of an import that has been processed during the parsing process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ImportDefinition.html
Location	A										<section class="prog__container">Class that models an arbitrary location in a resource.\n\n Typically used to track the location of problematic or erroneous\n metadata in XML configuration files. For example, a\n source location might be 'The bean defined on\n line 76 of beans.properties has an invalid Class'; another source might\n be the actual DOM Element from a parsed XML Document;\n or the source object might simply be null.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/Location.html
NullSourceExtractor	A										<section class="prog__container">Simple implementation of SourceExtractor that returns null\n as the source metadata.\n\n This is the default implementation and prevents too much metadata from being\n held in memory during normal (non-tooled) runtime usage.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/NullSourceExtractor.html
ParseState.Entry	A										<section class="prog__container">Marker interface for entries into the ParseState.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ParseState.Entry.html
ParseState	A										<section class="prog__container">Simple Stack-based structure for tracking the logical position during\n a parsing process. entries are added to the stack at\n each point during the parse phase in a reader-specific manner.\n\n Calling toString() will render a tree-style view of the current logical\n position in the parse phase. This representation is intended for use in\n error messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ParseState.html
PassThroughSourceExtractor	A										<section class="prog__container">Simple SourceExtractor implementation that just passes\n the candidate source metadata object through for attachment.\n\n Using this implementation means that tools will get raw access to the\n underlying configuration source metadata provided by the tool.\n\n This implementation should not be used in a production\n application since it is likely to keep too much metadata in memory\n (unnecessarily).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/PassThroughSourceExtractor.html
Problem	A										<section class="prog__container">Represents a problem with a bean definition configuration.\n Mainly serves as common argument passed into a ProblemReporter.\n\n May indicate a potentially fatal problem (an error) or just a warning.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/Problem.html
ProblemReporter	A										<section class="prog__container">SPI interface allowing tools and other external processes to handle errors\n and warnings reported during bean definition parsing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ProblemReporter.html
PropertyEntry	A										<section class="prog__container">ParseState entry representing a JavaBean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/PropertyEntry.html
QualifierEntry	A										<section class="prog__container">ParseState entry representing an autowire candidate qualifier.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/QualifierEntry.html
ReaderContext	A										<section class="prog__container">Context that gets passed along a bean definition reading process,\n encapsulating all relevant configuration as well as state.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ReaderContext.html
ReaderEventListener	A										<section class="prog__container">Interface that receives callbacks for component, alias and import\n registrations during a bean definition reading process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/ReaderEventListener.html
SourceExtractor	A										<section class="prog__container">Simple strategy allowing tools to control how source metadata is attached\n to the bean definition metadata.\n\n Configuration parsers may provide the ability to attach\n source metadata during the parse phase. They will offer this metadata in a\n generic format which can be further modified by a SourceExtractor\n before being attached to the bean definition metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/parsing/SourceExtractor.html
AbstractServiceLoaderBasedFactoryBean	A										<section class="prog__container">Abstract base class for FactoryBeans operating on the\n JDK 1.6 ServiceLoader facility.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/serviceloader/AbstractServiceLoaderBasedFactoryBean.html
ServiceFactoryBean	A										<section class="prog__container">FactoryBean that exposes the\n 'primary' service for the configured service class, obtained through\n the JDK 1.6 ServiceLoader facility.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/serviceloader/ServiceFactoryBean.html
ServiceListFactoryBean	A										<section class="prog__container">FactoryBean that exposes all\n services for the configured service class, represented as a List of service objects,\n obtained through the JDK 1.6 ServiceLoader facility.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/serviceloader/ServiceListFactoryBean.html
ServiceLoaderFactoryBean	A										<section class="prog__container">FactoryBean that exposes the\n JDK 1.6 ServiceLoader for the configured service class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/serviceloader/ServiceLoaderFactoryBean.html
AbstractAutowireCapableBeanFactory	A										<section class="prog__container">Abstract bean factory superclass that implements default bean creation,\n with the full capabilities specified by the RootBeanDefinition class.\n Implements the AutowireCapableBeanFactory\n interface in addition to AbstractBeanFactory's createBean(java.lang.Class<T>) method.\n\n Provides bean creation (with constructor resolution), property population,\n wiring (including autowiring), and initialization. Handles runtime bean\n references, resolves managed collections, calls initialization methods, etc.\n Supports autowiring constructors, properties by name, and properties by type.\n\n The main template method to be implemented by subclasses is\n AutowireCapableBeanFactory.resolveDependency(DependencyDescriptor, String, Set, TypeConverter),\n used for autowiring by type. In case of a factory which is capable of searching\n its bean definitions, matching beans will typically be implemented through such\n a search. For other factory styles, simplified matching algorithms can be implemented.\n\n Note that this class does not assume or implement bean definition\n registry capabilities. See DefaultListableBeanFactory for an implementation\n of the ListableBeanFactory and\n BeanDefinitionRegistry interfaces, which represent the API and SPI\n view of such a factory, respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.html
AbstractBeanDefinition	A										<section class="prog__container">Base class for concrete, full-fledged BeanDefinition classes,\n factoring out common properties of GenericBeanDefinition,\n RootBeanDefinition, and ChildBeanDefinition.\n\n The autowire constants match the ones defined in the\n AutowireCapableBeanFactory\n interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AbstractBeanDefinition.html
AbstractBeanDefinitionReader	A										<section class="prog__container">Abstract base class for bean definition readers which implement\n the BeanDefinitionReader interface.\n\n Provides common properties like the bean factory to work on\n and the class loader to use for loading bean classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.html
AbstractBeanFactory	A										<section class="prog__container">Abstract base class for BeanFactory\n implementations, providing the full capabilities of the\n ConfigurableBeanFactory SPI.\n Does not assume a listable bean factory: can therefore also be used\n as base class for bean factory implementations which obtain bean definitions\n from some backend resource (where bean definition access is an expensive operation).\n\n This class provides a singleton cache (through its base class\n DefaultSingletonBeanRegistry,\n singleton/prototype determination, FactoryBean\n handling, aliases, bean definition merging for child bean definitions,\n and bean destruction (DisposableBean\n interface, custom destroy methods). Furthermore, it can manage a bean factory\n hierarchy (delegating to the parent in case of an unknown bean), through implementing\n the HierarchicalBeanFactory interface.\n\n The main template methods to be implemented by subclasses are\n getBeanDefinition(java.lang.String) and createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]), retrieving a bean definition\n for a given bean name and creating a bean instance for a given bean definition,\n respectively. Default implementations of those operations can be found in\n DefaultListableBeanFactory and AbstractAutowireCapableBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AbstractBeanFactory.html
AutowireCandidateQualifier	A										<section class="prog__container">Qualifier for resolving autowire candidates. A bean definition that\n includes one or more such qualifiers enables fine-grained matching\n against annotations on a field or parameter to be autowired.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AutowireCandidateQualifier.html
AutowireCandidateResolver	A										<section class="prog__container">Strategy interface for determining whether a specific bean definition\n qualifies as an autowire candidate for a specific dependency.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/AutowireCandidateResolver.html
BeanDefinitionBuilder	A										<section class="prog__container">Programmatic means of constructing\n BeanDefinitions\n using the builder pattern. Intended primarily for use when implementing Spring 2.0\n NamespaceHandlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionBuilder.html
BeanDefinitionDefaults	A										<section class="prog__container">A simple holder for BeanDefinition property defaults.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionDefaults.html
BeanDefinitionReader	A										<section class="prog__container">Simple interface for bean definition readers.\n Specifies load methods with Resource and String location parameters.\n\n Concrete bean definition readers can of course add additional\n load and register methods for bean definitions, specific to\n their bean definition format.\n\n Note that a bean definition reader does not have to implement\n this interface. It only serves as suggestion for bean definition\n readers that want to follow standard naming conventions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionReader.html
BeanDefinitionReaderUtils	A										<section class="prog__container">Utility methods that are useful for bean definition reader implementations.\n Mainly intended for internal use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.html
BeanDefinitionRegistry	A										<section class="prog__container">Interface for registries that hold bean definitions, for example RootBeanDefinition\n and ChildBeanDefinition instances. Typically implemented by BeanFactories that\n internally work with the AbstractBeanDefinition hierarchy.\n\n This is the only interface in Spring's bean factory packages that encapsulates\n registration of bean definitions. The standard BeanFactory interfaces\n only cover access to a fully configured factory instance.\n\n Spring's bean definition readers expect to work on an implementation of this\n interface. Known implementors within the Spring core are DefaultListableBeanFactory\n and GenericApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionRegistry.html
BeanDefinitionRegistryPostProcessor	A										<section class="prog__container">Extension to the standard BeanFactoryPostProcessor SPI, allowing for\n the registration of further bean definitions before regular\n BeanFactoryPostProcessor detection kicks in. In particular,\n BeanDefinitionRegistryPostProcessor may register further bean definitions\n which in turn define BeanFactoryPostProcessor instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionRegistryPostProcessor.html
BeanDefinitionValidationException	A										<section class="prog__container">Exception thrown when the validation of a bean definition failed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanDefinitionValidationException.html
BeanNameGenerator	A										<section class="prog__container">Strategy interface for generating bean names for bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html
CglibSubclassingInstantiationStrategy	A										<section class="prog__container">Default object instantiation strategy for use in BeanFactories.\n\n Uses CGLIB to generate subclasses dynamically if methods need to be\n overridden by the container to implement Method Injection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.html
ChildBeanDefinition	A										<section class="prog__container">Bean definition for beans which inherit settings from their parent.\n Child bean definitions have a fixed dependency on a parent bean definition.\n\n A child bean definition will inherit constructor argument values,\n property values and method overrides from the parent, with the option\n to add new values. If init method, destroy method and/or static factory\n method are specified, they will override the corresponding parent settings.\n The remaining settings will always be taken from the child definition:\n depends on, autowire mode, dependency check, singleton, lazy init.\n\n NOTE: Since Spring 2.5, the preferred way to register bean\n definitions programmatically is the GenericBeanDefinition class,\n which allows to dynamically define parent dependencies through the\n GenericBeanDefinition.setParentName(java.lang.String) method. This effectively\n supersedes the ChildBeanDefinition class for most use cases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ChildBeanDefinition.html
DefaultBeanNameGenerator	A										<section class="prog__container">Default implementation of the BeanNameGenerator interface, delegating to\n BeanDefinitionReaderUtils.generateBeanName(BeanDefinition, BeanDefinitionRegistry).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/DefaultBeanNameGenerator.html
DefaultListableBeanFactory	A										<section class="prog__container">Default implementation of the\n ListableBeanFactory and\n BeanDefinitionRegistry interfaces: a full-fledged bean factory\n based on bean definition objects.\n\n Typical usage is registering all bean definitions first (possibly read\n from a bean definition file), before accessing beans. Bean definition lookup\n is therefore an inexpensive operation in a local bean definition table,\n operating on pre-built bean definition metadata objects.\n\n Can be used as a standalone bean factory, or as a superclass for custom\n bean factories. Note that readers for specific bean definition formats are\n typically implemented separately rather than as bean factory subclasses:\n see for example PropertiesBeanDefinitionReader and\n XmlBeanDefinitionReader.\n\n For an alternative implementation of the\n ListableBeanFactory interface,\n have a look at StaticListableBeanFactory, which manages existing\n bean instances rather than creating new ones based on bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/DefaultListableBeanFactory.html
DefaultSingletonBeanRegistry	A										<section class="prog__container">Generic registry for shared bean instances, implementing the\n SingletonBeanRegistry.\n Allows for registering singleton instances that should be shared\n for all callers of the registry, to be obtained via bean name.\n\n Also supports registration of\n DisposableBean instances,\n (which might or might not correspond to registered singletons),\n to be destroyed on shutdown of the registry. Dependencies between\n beans can be registered to enforce an appropriate shutdown order.\n\n This class mainly serves as base class for\n BeanFactory implementations,\n factoring out the common management of singleton bean instances. Note that\n the ConfigurableBeanFactory\n interface extends the SingletonBeanRegistry interface.\n\n Note that this class assumes neither a bean definition concept\n nor a specific creation process for bean instances, in contrast to\n AbstractBeanFactory and DefaultListableBeanFactory\n (which inherit from it). Can alternatively also be used as a nested\n helper to delegate to.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html
FactoryBeanRegistrySupport	A										<section class="prog__container">Support base class for singleton registries which need to handle\n FactoryBean instances,\n integrated with DefaultSingletonBeanRegistry's singleton management.\n\n Serves as base class for AbstractBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.html
GenericBeanDefinition	A										<section class="prog__container">GenericBeanDefinition is a one-stop shop for standard bean definition purposes.\n Like any bean definition, it allows for specifying a class plus optionally\n constructor argument values and property values. Additionally, deriving from a\n parent bean definition can be flexibly configured through the "parentName" property.\n\n In general, use this GenericBeanDefinition class for the purpose of\n registering user-visible bean definitions (which a post-processor might operate on,\n potentially even reconfiguring the parent name). Use RootBeanDefinition /\n ChildBeanDefinition where parent/child relationships happen to be pre-determined.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/GenericBeanDefinition.html
GenericTypeAwareAutowireCandidateResolver	A										<section class="prog__container">Basic AutowireCandidateResolver that performs a full generic type\n match with the candidate's type if the dependency is declared as a generic type\n (e.g. Repository<Customer>).\n\n This is the base class for\n QualifierAnnotationAutowireCandidateResolver,\n providing an implementation all non-annotation-based resolution steps at this level.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.html
InstantiationStrategy	A										<section class="prog__container">Interface responsible for creating instances corresponding to a root bean definition.\n\n This is pulled out into a strategy as various approaches are possible,\n including using CGLIB to create subclasses on the fly to support Method Injection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/InstantiationStrategy.html
LookupOverride	A										<section class="prog__container">Represents an override of a method that looks up an object in the same IoC context.\n\n Methods eligible for lookup override must not have arguments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/LookupOverride.html
ManagedArray	A										<section class="prog__container">Tag collection class used to hold managed array elements, which may\n include runtime bean references (to be resolved into bean objects).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ManagedArray.html
ManagedList	A										<section class="prog__container">Tag collection class used to hold managed List elements, which may\n include runtime bean references (to be resolved into bean objects).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ManagedList.html
ManagedMap	A										<section class="prog__container">Tag collection class used to hold managed Map values, which may\n include runtime bean references (to be resolved into bean objects).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ManagedMap.html
ManagedProperties	A										<section class="prog__container">Tag class which represents a Spring-managed Properties instance\n that supports merging of parent/child definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ManagedProperties.html
ManagedSet	A										<section class="prog__container">Tag collection class used to hold managed Set values, which may\n include runtime bean references (to be resolved into bean objects).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ManagedSet.html
MergedBeanDefinitionPostProcessor	A										<section class="prog__container">Post-processor callback interface for merged bean definitions at runtime.\n BeanPostProcessor implementations may implement this sub-interface in\n order to post-process the merged bean definition that the Spring BeanFactory\n uses to create a specific bean instance.\n\n The postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String) method may for example introspect\n the bean definition in order to prepare some cached metadata before post-processing\n actual instances of a bean. It is also allowed to modify the bean definition\n but only for bean definition properties which are actually intended\n for concurrent modification. Basically, this only applies to operations\n defined on the RootBeanDefinition itself but not to the properties\n of its base classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/MergedBeanDefinitionPostProcessor.html
MethodOverride	A										<section class="prog__container">Object representing the override of a method on a managed object by the IoC\n container.\n\n Note that the override mechanism is not intended as a generic\n means of inserting crosscutting code: use AOP for that.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/MethodOverride.html
MethodOverrides	A										<section class="prog__container">Set of method overrides, determining which, if any, methods on a\n managed object the Spring IoC container will override at runtime.\n\n The currently supported MethodOverride variants are\n LookupOverride and ReplaceOverride.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/MethodOverrides.html
MethodReplacer	A										<section class="prog__container">Interface to be implemented by classes that can reimplement any method\n on an IoC-managed object: the Method Injection form of\n Dependency Injection.\n\n Such methods may be (but need not be) abstract, in which case the\n container will create a concrete subclass to instantiate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/MethodReplacer.html
PropertiesBeanDefinitionReader	A										<section class="prog__container">Bean definition reader for a simple properties format.\n\n Provides bean definition registration methods for Map/Properties and\n ResourceBundle. Typically applied to a DefaultListableBeanFactory.\n\n Example:\n\n employee.(class)=MyClass       // bean is of class MyClass\n employee.(abstract)=true       // this bean can't be instantiated directly\n employee.group=Insurance       // real property\n employee.usesDialUp=false      // real property (potentially overridden)\n\n salesrep.(parent)=employee     // derives from "employee" bean definition\n salesrep.(lazy-init)=true      // lazily initialize this singleton bean\n salesrep.manager(ref)=tony     // reference to another bean\n salesrep.department=Sales      // real property\n\n techie.(parent)=employee       // derives from "employee" bean definition\n techie.(scope)=prototype       // bean is a prototype (not a shared instance)\n techie.manager(ref)=jeff       // reference to another bean\n techie.department=Engineering  // real property\n techie.usesDialUp=true         // real property (overriding parent value)\n\n ceo.$0(ref)=secretary          // inject 'secretary' bean as 0th constructor arg\n ceo.$1=1000000                 // inject value '1000000' at 1st constructor arg\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.html
ReplaceOverride	A										<section class="prog__container">Extension of MethodOverride that represents an arbitrary\n override of a method by the IoC container.\n\n Any non-final method can be overridden, irrespective of its\n parameters and return types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/ReplaceOverride.html
RootBeanDefinition	A										<section class="prog__container">A root bean definition represents the merged bean definition that backs\n a specific bean in a Spring BeanFactory at runtime. It might have been created\n from multiple original bean definitions that inherit from each other,\n typically registered as GenericBeanDefinitions.\n A root bean definition is essentially the 'unified' bean definition view at runtime.\n\n Root bean definitions may also be used for registering individual bean definitions\n in the configuration phase. However, since Spring 2.5, the preferred way to register\n bean definitions programmatically is the GenericBeanDefinition class.\n GenericBeanDefinition has the advantage that it allows to dynamically define\n parent dependencies, not 'hard-coding' the role as a root bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/RootBeanDefinition.html
SecurityContextProvider	A										<section class="prog__container">Provider of the security context of the code running inside the bean factory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/SecurityContextProvider.html
SimpleAutowireCandidateResolver	A										<section class="prog__container">AutowireCandidateResolver implementation to use when no annotation\n support is available. This implementation checks the bean definition only.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/SimpleAutowireCandidateResolver.html
SimpleBeanDefinitionRegistry	A										<section class="prog__container">Simple implementation of the BeanDefinitionRegistry interface.\n Provides registry capabilities only, with no factory capabilities built in.\n Can for example be used for testing bean definition readers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/SimpleBeanDefinitionRegistry.html
SimpleInstantiationStrategy	A										<section class="prog__container">Simple object instantiation strategy for use in a BeanFactory.\n\n Does not support Method Injection, although it provides hooks for subclasses\n to override to add Method Injection support, for example by overriding methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/SimpleInstantiationStrategy.html
SimpleSecurityContextProvider	A										<section class="prog__container">Simple SecurityContextProvider implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/SimpleSecurityContextProvider.html
StaticListableBeanFactory	A										<section class="prog__container">Static BeanFactory implementation\n which allows to register existing singleton instances programmatically.\n Does not have support for prototype beans or aliases.\n\n Serves as example for a simple implementation of the\n ListableBeanFactory interface,\n managing existing bean instances rather than creating new ones based on bean\n definitions, and not implementing any extended SPI interfaces (such as\n ConfigurableBeanFactory).\n\n For a full-fledged factory based on bean definitions, have a look\n at DefaultListableBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/StaticListableBeanFactory.html
BeanConfigurerSupport	A										<section class="prog__container">Convenient base class for bean configurers that can perform Dependency Injection\n on objects (however they may be created). Typically subclassed by AspectJ aspects.\n\n Subclasses may also need a custom metadata resolution strategy, in the\n BeanWiringInfoResolver interface. The default implementation looks for\n a bean with the same name as the fully-qualified class name. (This is the default\n name of the bean in a Spring XML file if the 'id' attribute is not used.)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/wiring/BeanConfigurerSupport.html
BeanWiringInfo	A										<section class="prog__container">Holder for bean wiring metadata information about a particular class. Used in\n conjunction with the Configurable\n annotation and the AspectJ AnnotationBeanConfigurerAspect.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/wiring/BeanWiringInfo.html
BeanWiringInfoResolver	A										<section class="prog__container">Strategy interface to be implemented by objects than can resolve bean name\n information, given a newly instantiated bean object. Invocations to the\n resolveWiringInfo(java.lang.Object) method on this interface will be driven by\n the AspectJ pointcut in the relevant concrete aspect.\n\n Metadata resolution strategy can be pluggable. A good default is\n ClassNameBeanWiringInfoResolver, which uses the fully-qualified\n class name as bean name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/wiring/BeanWiringInfoResolver.html
ClassNameBeanWiringInfoResolver	A										<section class="prog__container">Simple default implementation of the BeanWiringInfoResolver interface,\n looking for a bean with the same name as the fully-qualified class name.\n This matches the default name of the bean in a Spring XML file if the\n bean tag's "id" attribute is not used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/wiring/ClassNameBeanWiringInfoResolver.html
AbstractBeanDefinitionParser	A										<section class="prog__container">Abstract BeanDefinitionParser implementation providing\n a number of convenience methods and a\n template method\n that subclasses must override to provide the actual parsing logic.\n\n Use this BeanDefinitionParser implementation when you want\n to parse some arbitrarily complex XML into one or more\n BeanDefinitions. If you just want to parse some\n XML into a single BeanDefinition, you may wish to consider\n the simpler convenience extensions of this class, namely\n AbstractSingleBeanDefinitionParser and\n AbstractSimpleBeanDefinitionParser.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.html
AbstractSimpleBeanDefinitionParser	A										<section class="prog__container">Convenient base class for when there exists a one-to-one mapping\n between attribute names on the element that is to be parsed and\n the property names on the Class being configured.\n\n Extend this parser class when you want to create a single\n bean definition from a relatively simple custom XML element. The\n resulting BeanDefinition will be automatically\n registered with the relevant\n BeanDefinitionRegistry.\n\n An example will hopefully make the use of this particular parser\n class immediately clear. Consider the following class definition:\n\n public class SimpleCache implements Cache {\n\n     public void setName(String name) {...}\n     public void setTimeout(int timeout) {...}\n     public void setEvictionPolicy(EvictionPolicy policy) {...}\n\n     // remaining class definition elided for clarity...\n }\nThen let us assume the following XML tag has been defined to\n permit the easy configuration of instances of the above class;\n\n <caching:cache name="..." timeout="..." eviction-policy="..."/>\nAll that is required of the Java developer tasked with writing\n the parser to parse the above XML tag into an actual\n SimpleCache bean definition is the following:\n\n public class SimpleCacheBeanDefinitionParser extends AbstractSimpleBeanDefinitionParser {\n\n     protected Class getBeanClass(Element element) {\n         return SimpleCache.class;\n     }\n }\nPlease note that the AbstractSimpleBeanDefinitionParser\n is limited to populating the created bean definition with property values.\n if you want to parse constructor arguments and nested elements from the\n supplied XML element, then you will have to implement the\n postProcess(org.springframework.beans.factory.support.BeanDefinitionBuilder, org.w3c.dom.Element)\n method and do such parsing yourself, or (more likely) subclass the\n AbstractSingleBeanDefinitionParser or AbstractBeanDefinitionParser\n classes directly.\n\n The process of actually registering the\n SimpleCacheBeanDefinitionParser with the Spring XML parsing\n infrastructure is described in the Spring Framework reference documentation\n (in one of the appendices).\n\n For an example of this parser in action (so to speak), do look at\n the source code for the\n UtilNamespaceHandler.PropertiesBeanDefinitionParser;\n the observant (and even not so observant) reader will immediately notice that\n there is next to no code in the implementation. The\n PropertiesBeanDefinitionParser populates a\n PropertiesFactoryBean\n from an XML element that looks like this:\n\n <util:properties location="jdbc.properties"/>\nThe observant reader will notice that the sole attribute on the\n <util:properties/> element matches the\n PropertiesLoaderSupport.setLocation(org.springframework.core.io.Resource)\n method name on the PropertiesFactoryBean (the general\n usage thus illustrated holds true for any number of attributes).\n All that the PropertiesBeanDefinitionParser needs\n actually do is supply an implementation of the\n AbstractSingleBeanDefinitionParser.getBeanClass(org.w3c.dom.Element) method to return the\n PropertiesFactoryBean type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/AbstractSimpleBeanDefinitionParser.html
AbstractSingleBeanDefinitionParser	A										<section class="prog__container">Base class for those BeanDefinitionParser implementations that\n need to parse and define just a single BeanDefinition.\n\n Extend this parser class when you want to create a single bean definition\n from an arbitrarily complex XML element. You may wish to consider extending\n the AbstractSimpleBeanDefinitionParser when you want to create a\n single bean definition from a relatively simple custom XML element.\n\n The resulting BeanDefinition will be automatically registered\n with the BeanDefinitionRegistry.\n Your job simply is to parse the custom XML Element\n into a single BeanDefinition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/AbstractSingleBeanDefinitionParser.html
BeanDefinitionDecorator	A										<section class="prog__container">Interface used by the DefaultBeanDefinitionDocumentReader\n to handle custom, nested (directly under a <bean>) tags.\n\n Decoration may also occur based on custom attributes applied to the\n <bean> tag. Implementations are free to turn the metadata in the\n custom tag into as many\n BeanDefinitions as\n required and to transform the\n BeanDefinition of the enclosing\n <bean> tag, potentially even returning a completely different\n BeanDefinition to replace the\n original.\n\n BeanDefinitionDecorators should be aware that\n they may be part of a chain. In particular, a BeanDefinitionDecorator should\n be aware that a previous BeanDefinitionDecorator may have replaced the\n original BeanDefinition with a\n ProxyFactoryBean definition allowing for\n custom interceptors to be added.\n\n BeanDefinitionDecorators that wish to add an\n interceptor to the enclosing bean should extend\n AbstractInterceptorDrivenBeanDefinitionDecorator\n which handles the chaining ensuring that only one proxy is created and that it\n contains all interceptors from the chain.\n\n The parser locates a BeanDefinitionDecorator from the\n NamespaceHandler for the namespace in which the custom tag resides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeanDefinitionDecorator.html
BeanDefinitionDocumentReader	A										<section class="prog__container">SPI for parsing an XML document that contains Spring bean definitions.\n Used by XmlBeanDefinitionReader for actually parsing a DOM document.\n\n Instantiated per document to parse: implementations can hold\n state in instance variables during the execution of the\n registerBeanDefinitions method — for example, global\n settings that are defined for all bean definitions in the document.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeanDefinitionDocumentReader.html
BeanDefinitionParser	A										<section class="prog__container">Interface used by the DefaultBeanDefinitionDocumentReader to handle custom,\n top-level (directly under <beans/>) tags.\n\n Implementations are free to turn the metadata in the custom tag into as many\n BeanDefinitions as required.\n\n The parser locates a BeanDefinitionParser from the associated\n NamespaceHandler for the namespace in which the custom tag resides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeanDefinitionParser.html
BeanDefinitionParserDelegate	A										<section class="prog__container">Stateful delegate class used to parse XML bean definitions.\n Intended for use by both the main parser and any extension\n BeanDefinitionParsers or\n BeanDefinitionDecorators.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html
BeansDtdResolver	A										<section class="prog__container">EntityResolver implementation for the Spring beans DTD,\n to load the DTD from the Spring class path (or JAR file).\n\n Fetches "spring-beans-2.0.dtd" from the class path resource\n "/org/springframework/beans/factory/xml/spring-beans-2.0.dtd",\n no matter whether specified as some local URL that includes "spring-beans"\n in the DTD name or as "http://www.springframework.org/dtd/spring-beans-2.0.dtd".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeansDtdResolver.html
DefaultBeanDefinitionDocumentReader	A										<section class="prog__container">Default implementation of the BeanDefinitionDocumentReader interface that\n reads bean definitions according to the "spring-beans" DTD and XSD format\n (Spring's default XML bean definition format).\n\n The structure, elements, and attribute names of the required XML document\n are hard-coded in this class. (Of course a transform could be run if necessary\n to produce this format). <beans> does not need to be the root\n element of the XML document: this class will parse all bean definition elements\n in the XML file, regardless of the actual root element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html
DefaultDocumentLoader	A										<section class="prog__container">Spring's default DocumentLoader implementation.\n\n Simply loads documents using the standard JAXP-configured\n XML parser. If you want to change the DocumentBuilder that is used to\n load documents, then one strategy is to define a corresponding Java system property\n when starting your JVM. For example, to use the Oracle DocumentBuilder,\n you might start your application like as follows:\n\n java -Djavax.xml.parsers.DocumentBuilderFactory=oracle.xml.jaxp.JXDocumentBuilderFactory MyMainClass</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultDocumentLoader.html
DefaultNamespaceHandlerResolver	A										<section class="prog__container">Default implementation of the NamespaceHandlerResolver interface.\n Resolves namespace URIs to implementation classes based on the mappings\n contained in mapping file.\n\n By default, this implementation looks for the mapping file at\n META-INF/spring.handlers, but this can be changed using the\n DefaultNamespaceHandlerResolver(ClassLoader, String) constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultNamespaceHandlerResolver.html
DelegatingEntityResolver	A										<section class="prog__container">EntityResolver implementation that delegates to a BeansDtdResolver\n and a PluggableSchemaResolver for DTDs and XML schemas, respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DelegatingEntityResolver.html
DocumentDefaultsDefinition	A										<section class="prog__container">Simple JavaBean that holds the defaults specified at the <beans>\n level in a standard Spring XML bean definition document:\n default-lazy-init, default-autowire, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DocumentDefaultsDefinition.html
DocumentLoader	A										<section class="prog__container">Strategy interface for loading an XML Document.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/DocumentLoader.html
NamespaceHandler	A										<section class="prog__container">Base interface used by the DefaultBeanDefinitionDocumentReader\n for handling custom namespaces in a Spring XML configuration file.\n\n Implementations are expected to return implementations of the\n BeanDefinitionParser interface for custom top-level tags and\n implementations of the BeanDefinitionDecorator interface for\n custom nested tags.\n\n The parser will call parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext) when it encounters a custom tag\n directly under the <beans> tags and decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext) when\n it encounters a custom tag directly under a <bean> tag.\n\n Developers writing their own custom element extensions typically will\n not implement this interface directly, but rather make use of the provided\n NamespaceHandlerSupport class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/NamespaceHandler.html
NamespaceHandlerResolver	A										<section class="prog__container">Used by the DefaultBeanDefinitionDocumentReader to\n locate a NamespaceHandler implementation for a particular namespace URI.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/NamespaceHandlerResolver.html
NamespaceHandlerSupport	A										<section class="prog__container">Support class for implementing custom NamespaceHandlers.\n Parsing and decorating of individual Nodes is done via BeanDefinitionParser\n and BeanDefinitionDecorator strategy interfaces, respectively.\n\n Provides the registerBeanDefinitionParser(java.lang.String, org.springframework.beans.factory.xml.BeanDefinitionParser) and registerBeanDefinitionDecorator(java.lang.String, org.springframework.beans.factory.xml.BeanDefinitionDecorator)\n methods for registering a BeanDefinitionParser or BeanDefinitionDecorator\n to handle a specific element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/NamespaceHandlerSupport.html
ParserContext	A										<section class="prog__container">Context that gets passed along a bean definition parsing process,\n encapsulating all relevant configuration as well as state.\n Nested inside an XmlReaderContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/ParserContext.html
PluggableSchemaResolver	A										<section class="prog__container">EntityResolver implementation that attempts to resolve schema URLs into\n local classpath resources using a set of mappings files.\n\n By default, this class will look for mapping files in the classpath using the pattern:\n META-INF/spring.schemas allowing for multiple files to exist on the\n classpath at any one time.\n\n The format of META-INF/spring.schemas is a properties\n file where each line should be of the form systemId=schema-location\n where schema-location should also be a schema file in the classpath.\n Since systemId is commonly a URL, one must be careful to escape any ':' characters\n which are treated as delimiters in properties files.\n\n The pattern for the mapping files can be overidden using the\n PluggableSchemaResolver(ClassLoader, String) constructor</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/PluggableSchemaResolver.html
ResourceEntityResolver	A										<section class="prog__container">EntityResolver implementation that tries to resolve entity references\n through a ResourceLoader (usually,\n relative to the resource base of an ApplicationContext), if applicable.\n Extends DelegatingEntityResolver to also provide DTD and XSD lookup.\n\n Allows to use standard XML entities to include XML snippets into an\n application context definition, for example to split a large XML file\n into various modules. The include paths can be relative to the\n application context's resource base as usual, instead of relative\n to the JVM working directory (the XML parser's default).\n\n Note: In addition to relative paths, every URL that specifies a\n file in the current system root, i.e. the JVM working directory,\n will be interpreted relative to the application context too.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/ResourceEntityResolver.html
SimpleConstructorNamespaceHandler	A										<section class="prog__container">Simple NamespaceHandler implementation that maps custom\n attributes directly through to bean properties. An important point to note is\n that this NamespaceHandler does not have a corresponding schema\n since there is no way to know in advance all possible attribute names.\n\n An example of the usage of this NamespaceHandler is shown below:\n\n \n <bean id="author" class="..TestBean" c:name="Enescu" c:work-ref="compositions"/>\n \n\n Here the 'c:name' corresponds directly to the 'name\n ' argument declared on the constructor of class 'TestBean'. The\n 'c:work-ref' attributes corresponds to the 'work'\n argument and, rather than being the concrete value, it contains the name of\n the bean that will be considered as a parameter.\n\n Note: This implementation supports only named parameters - there is no\n support for indexes or types. Further more, the names are used as hints by\n the container which, by default, does type introspection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/SimpleConstructorNamespaceHandler.html
SimplePropertyNamespaceHandler	A										<section class="prog__container">Simple NamespaceHandler implementation that maps custom attributes\n directly through to bean properties. An important point to note is that this\n NamespaceHandler does not have a corresponding schema since there\n is no way to know in advance all possible attribute names.\n\n An example of the usage of this NamespaceHandler is shown below:\n\n \n <bean id="rob" class="..TestBean" p:name="Rob Harrop" p:spouse-ref="sally"/>\n\n Here the 'p:name' corresponds directly to the 'name'\n property on class 'TestBean'. The 'p:spouse-ref'\n attributes corresponds to the 'spouse' property and, rather\n than being the concrete value, it contains the name of the bean that will\n be injected into that property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandler.html
UtilNamespaceHandler	A										<section class="prog__container">NamespaceHandler for the util namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/UtilNamespaceHandler.html
XmlBeanDefinitionReader	A										<section class="prog__container">Bean definition reader for XML bean definitions.\n Delegates the actual XML document reading to an implementation\n of the BeanDefinitionDocumentReader interface.\n\n Typically applied to a\n DefaultListableBeanFactory\n or a GenericApplicationContext.\n\n This class loads a DOM document and applies the BeanDefinitionDocumentReader to it.\n The document reader will register each bean definition with the given bean factory,\n talking to the latter's implementation of the\n BeanDefinitionRegistry interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.html
XmlBeanDefinitionStoreException	A										<section class="prog__container">XML-specific BeanDefinitionStoreException subclass that wraps a\n SAXException, typically a SAXParseException\n which contains information about the error location.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/XmlBeanDefinitionStoreException.html
XmlBeanFactory	A										<section class="prog__container">Deprecated. \nas of Spring 3.1 in favor of DefaultListableBeanFactory and\n XmlBeanDefinitionReader\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/XmlBeanFactory.html
XmlReaderContext	A										<section class="prog__container">Extension of ReaderContext,\n specific to use with an XmlBeanDefinitionReader. Provides access to the\n NamespaceHandlerResolver configured in the XmlBeanDefinitionReader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/xml/XmlReaderContext.html
ByteArrayPropertyEditor	A										<section class="prog__container">Editor for byte arrays. Strings will simply be converted to\n their corresponding byte representations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ByteArrayPropertyEditor.html
CharacterEditor	A										<section class="prog__container">Editor for a Character, to populate a property\n of type Character or char from a String value.\n\n Note that the JDK does not contain a default\n property editor for char!\n BeanWrapperImpl will register this\n editor by default.\n\n Also supports conversion from a Unicode character sequence; e.g.\n u0041 ('A').</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CharacterEditor.html
CharArrayPropertyEditor	A										<section class="prog__container">Editor for char arrays. Strings will simply be converted to\n their corresponding char representations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CharArrayPropertyEditor.html
CharsetEditor	A										<section class="prog__container">Editor for java.nio.charset.Charset, translating charset\n String representations into Charset objects and back.\n\n Expects the same syntax as Charset's Charset.name(),\n e.g. UTF-8, ISO-8859-16, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CharsetEditor.html
ClassArrayEditor	A										<section class="prog__container">Property editor for an array of Classes, to enable\n the direct population of a Class[] property without having to\n use a String class name property as bridge.\n\n Also supports "java.lang.String[]"-style array class names, in contrast\n to the standard Class.forName(String) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ClassArrayEditor.html
ClassEditor	A										<section class="prog__container">Property editor for java.lang.Class, to enable the direct\n population of a Class property without recourse to having to use a\n String class name property as bridge.\n\n Also supports "java.lang.String[]"-style array class names, in contrast to the\n standard Class.forName(String) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ClassEditor.html
CurrencyEditor	A										<section class="prog__container">Editor for java.util.Currency, translating currency codes into Currency\n objects. Exposes the currency code as text representation of a Currency object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CurrencyEditor.html
CustomBooleanEditor	A										<section class="prog__container">Property editor for Boolean/boolean properties.\n\n This is not meant to be used as system PropertyEditor but rather as\n locale-specific Boolean editor within custom controller code, to parse\n UI-caused boolean strings into boolean properties of beans and check\n them in the UI form.\n\n In web MVC code, this editor will typically be registered with\n binder.registerCustomEditor calls.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CustomBooleanEditor.html
CustomCollectionEditor	A										<section class="prog__container">Property editor for Collections, converting any source Collection\n to a given target Collection type.\n\n By default registered for Set, SortedSet and List,\n to automatically convert any given Collection to one of those\n target types if the type does not match the target property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CustomCollectionEditor.html
CustomDateEditor	A										<section class="prog__container">Property editor for java.util.Date,\n supporting a custom java.text.DateFormat.\n\n This is not meant to be used as system PropertyEditor but rather\n as locale-specific date editor within custom controller code,\n parsing user-entered number strings into Date properties of beans\n and rendering them in the UI form.\n\n In web MVC code, this editor will typically be registered with\n binder.registerCustomEditor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CustomDateEditor.html
CustomMapEditor	A										<section class="prog__container">Property editor for Maps, converting any source Map\n to a given target Map type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CustomMapEditor.html
CustomNumberEditor	A										<section class="prog__container">Property editor for any Number subclass such as Short, Integer, Long,\n BigInteger, Float, Double, BigDecimal. Can use a given NumberFormat for\n (locale-specific) parsing and rendering, or alternatively the default\n decode / valueOf / toString methods.\n\n This is not meant to be used as system PropertyEditor but rather\n as locale-specific number editor within custom controller code,\n parsing user-entered number strings into Number properties of beans\n and rendering them in the UI form.\n\n In web MVC code, this editor will typically be registered with\n binder.registerCustomEditor calls.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/CustomNumberEditor.html
FileEditor	A										<section class="prog__container">Editor for java.io.File, to directly populate a File property\n from a Spring resource location.\n\n Supports Spring-style URL notation: any fully qualified standard URL\n ("file:", "http:", etc) and Spring's special "classpath:" pseudo-URL.\n\n NOTE: The behavior of this editor has changed in Spring 2.0.\n Previously, it created a File instance directly from a filename.\n As of Spring 2.0, it takes a standard Spring resource location as input;\n this is consistent with URLEditor and InputStreamEditor now.\n\n NOTE: In Spring 2.5 the following modification was made.\n If a file name is specified without a URL prefix or without an absolute path\n then we try to locate the file using standard ResourceLoader semantics.\n If the file was not found, then a File instance is created assuming the file\n name refers to a relative file location.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/FileEditor.html
InputSourceEditor	A										<section class="prog__container">Editor for org.xml.sax.InputSource, converting from a\n Spring resource location String to a SAX InputSource object.\n\n Supports Spring-style URL notation: any fully qualified standard URL\n ("file:", "http:", etc) and Spring's special "classpath:" pseudo-URL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/InputSourceEditor.html
InputStreamEditor	A										<section class="prog__container">One-way PropertyEditor which can convert from a text String to a\n java.io.InputStream, interpreting the given String as a\n Spring resource location (e.g. a URL String).\n\n Supports Spring-style URL notation: any fully qualified standard URL\n ("file:", "http:", etc.) and Spring's special "classpath:" pseudo-URL.\n\n Note that such streams usually do not get closed by Spring itself!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/InputStreamEditor.html
LocaleEditor	A										<section class="prog__container">Editor for java.util.Locale, to directly populate a Locale property.\n\n Expects the same syntax as Locale's toString, i.e. language +\n optionally country + optionally variant, separated by "_" (e.g. "en", "en_US").\n Also accepts spaces as separators, as alternative to underscores.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/LocaleEditor.html
PathEditor	A										<section class="prog__container">Editor for java.nio.file.Path, to directly populate a Path\n property instead of using a String property as bridge.\n\n Based on Paths.get(URI)'s resolution algorithm, checking\n registered NIO file system providers, including the default file system\n for "file:..." paths. Also supports Spring-style URL notation: any fully\n qualified standard URL and Spring's special "classpath:" pseudo-URL, as\n well as Spring's context-specific relative file paths. As a fallback, a\n path will be resolved in the file system via Paths#get(String)\n if no existing context-relative resource could be found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/PathEditor.html
PatternEditor	A										<section class="prog__container">Editor for java.util.regex.Pattern, to directly populate a Pattern property.\n Expects the same syntax as Pattern's compile method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/PatternEditor.html
PropertiesEditor	A										<section class="prog__container">Custom PropertyEditor for Properties objects.\n\n Handles conversion from content String to Properties object.\n Also handles Map to Properties conversion, for populating\n a Properties object via XML "map" entries.\n\n The required format is defined in the standard Properties\n documentation. Each property must be on a new line.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/PropertiesEditor.html
ReaderEditor	A										<section class="prog__container">One-way PropertyEditor which can convert from a text String to a\n java.io.Reader, interpreting the given String as a Spring\n resource location (e.g. a URL String).\n\n Supports Spring-style URL notation: any fully qualified standard URL\n ("file:", "http:", etc.) and Spring's special "classpath:" pseudo-URL.\n\n Note that such readers usually do not get closed by Spring itself!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ReaderEditor.html
ResourceBundleEditor	A										<section class="prog__container">PropertyEditor implementation for standard JDK\n ResourceBundles.\n\n Only supports conversion from a String, but not to a String.\n\n Find below some examples of using this class in a (properly configured)\n Spring container using XML-based metadata:\n\n  <bean id="errorDialog" class="...">\n    <!--\n        the 'messages' property is of type java.util.ResourceBundle.\n        the 'DialogMessages.properties' file exists at the root of the CLASSPATH\n    -->\n    <property name="messages" value="DialogMessages"/>\n </bean>\n <bean id="errorDialog" class="...">\n    <!--\n        the 'DialogMessages.properties' file exists in the 'com/messages' package\n    -->\n    <property name="messages" value="com/messages/DialogMessages"/>\n </bean>\nA 'properly configured' Spring container\n might contain a CustomEditorConfigurer\n definition such that the conversion can be effected transparently:\n\n  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n    <property name="customEditors">\n        <map>\n            <entry key="java.util.ResourceBundle">\n                <bean class="org.springframework.beans.propertyeditors.ResourceBundleEditor"/>\n            </entry>\n        </map>\n    </property>\n </bean>\nPlease note that this PropertyEditor is not\n registered by default with any of the Spring infrastructure.\n\n Thanks to David Leal Valmana for the suggestion and initial prototype.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ResourceBundleEditor.html
StringArrayPropertyEditor	A										<section class="prog__container">Custom PropertyEditor for String arrays.\n\n Strings must be in CSV format, with a customizable separator.\n By default values in the result are trimmed of whitespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/StringArrayPropertyEditor.html
StringTrimmerEditor	A										<section class="prog__container">Property editor that trims Strings.\n\n Optionally allows transforming an empty string into a null value.\n Needs to be explicitly registered, e.g. for command binding.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/StringTrimmerEditor.html
TimeZoneEditor	A										<section class="prog__container">Editor for java.util.TimeZone, translating timezone IDs into\n TimeZone objects. Exposes the TimeZone ID as a text\n representation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/TimeZoneEditor.html
URIEditor	A										<section class="prog__container">Editor for java.net.URI, to directly populate a URI property\n instead of using a String property as bridge.\n\n Supports Spring-style URI notation: any fully qualified standard URI\n ("file:", "http:", etc) and Spring's special "classpath:" pseudo-URL,\n which will be resolved to a corresponding URI.\n\n By default, this editor will encode Strings into URIs. For instance,\n a space will be encoded into %20. This behavior can be changed\n by calling the URIEditor(boolean) constructor.\n\n Note: A URI is more relaxed than a URL in that it does not require\n a valid protocol to be specified. Any scheme within a valid URI syntax\n is allowed, even without a matching protocol handler being registered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/URIEditor.html
URLEditor	A										<section class="prog__container">Editor for java.net.URL, to directly populate a URL property\n instead of using a String property as bridge.\n\n Supports Spring-style URL notation: any fully qualified standard URL\n ("file:", "http:", etc) and Spring's special "classpath:" pseudo-URL,\n as well as Spring's context-specific relative file paths.\n\n Note: A URL must specify a valid protocol, else it will be rejected\n upfront. However, the target resource does not necessarily have to exist\n at the time of URL creation; this depends on the specific resource type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/URLEditor.html
UUIDEditor	A										<section class="prog__container">Editor for java.util.UUID, translating UUID\n String representations into UUID objects and back.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/UUIDEditor.html
ZoneIdEditor	A										<section class="prog__container">Editor for java.time.ZoneId, translating zone ID Strings into ZoneId\n objects. Exposes the TimeZone ID as a text representation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/ZoneIdEditor.html
ArgumentConvertingMethodInvoker	A										<section class="prog__container">Subclass of MethodInvoker that tries to convert the given\n arguments for the actual target method via a TypeConverter.\n\n Supports flexible argument conversions, in particular for\n invoking a specific overloaded method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/ArgumentConvertingMethodInvoker.html
MutableSortDefinition	A										<section class="prog__container">Mutable implementation of the SortDefinition interface.\n Supports toggling the ascending value on setting the same property again.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/MutableSortDefinition.html
PagedListHolder	A										<section class="prog__container">PagedListHolder is a simple state holder for handling lists of objects,\n separating them into pages. Page numbering starts with 0.\n\n This is mainly targetted at usage in web UIs. Typically, an instance will be\n instantiated with a list of beans, put into the session, and exported as model.\n The properties can all be set/get programmatically, but the most common way will\n be data binding, i.e. populating the bean from request parameters. The getters\n will mainly be used by the view.\n\n Supports sorting the underlying list via a SortDefinition implementation,\n available as property "sort". By default, a MutableSortDefinition instance\n will be used, toggling the ascending value on setting the same property again.\n\n The data binding names have to be called "pageSize" and "sort.ascending",\n as expected by BeanWrapper. Note that the names and the nesting syntax match\n the respective JSTL EL expressions, like "myModelAttr.pageSize" and\n "myModelAttr.sort.ascending".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/PagedListHolder.html
PropertyComparator	A										<section class="prog__container">PropertyComparator performs a comparison of two beans,\n evaluating the specified bean property via a BeanWrapper.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/PropertyComparator.html
ResourceEditorRegistrar	A										<section class="prog__container">PropertyEditorRegistrar implementation that populates a given\n PropertyEditorRegistry\n (typically a BeanWrapper used for bean\n creation within an ApplicationContext)\n with resource editors. Used by\n AbstractApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/ResourceEditorRegistrar.html
SortDefinition	A										<section class="prog__container">Definition for sorting bean instances by a property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/SortDefinition.html
Cache	A										<section class="prog__container">Interface that defines common cache operations.\n\n Note: Due to the generic use of caching, it is recommended that\n implementations allow storage of null values (for example to\n cache methods that return null).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/Cache.html
Cache.ValueRetrievalException	A										<section class="prog__container">Wrapper exception to be thrown from Cache.get(Object, Callable)\n in case of the value loader callback failing with an exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/Cache.ValueRetrievalException.html
Cache.ValueWrapper	A										<section class="prog__container">A (wrapper) object representing a cache value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/Cache.ValueWrapper.html
CacheManager	A										<section class="prog__container">Spring's central cache manager SPI.\n Allows for retrieving named Cache regions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/CacheManager.html
AbstractCachingConfiguration	A										<section class="prog__container">Abstract base @Configuration class providing common structure\n for enabling Spring's annotation-driven cache management capability.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/AbstractCachingConfiguration.html
AnnotationCacheOperationSource.CacheOperationProvider	A										<section class="prog__container">Callback interface providing CacheOperation instance(s) based on\n a given CacheAnnotationParser.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/AnnotationCacheOperationSource.CacheOperationProvider.html
AnnotationCacheOperationSource	A										<section class="prog__container">Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.\n\n This class reads Spring's Cacheable, CachePut and CacheEvict\n annotations and exposes corresponding caching operation definition to Spring's cache\n infrastructure. This class may also serve as base class for a custom\n CacheOperationSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/AnnotationCacheOperationSource.html
Cacheable	A										<section class="prog__container">Annotation indicating that the result of invoking a method (or all methods\n in a class) can be cached.\n\n Each time an advised method is invoked, caching behavior will be applied,\n checking whether the method has been already invoked for the given arguments.\n A sensible default simply uses the method parameters to compute the key, but\n a SpEL expression can be provided via the key() attribute, or a custom\n KeyGenerator implementation can\n replace the default one (see keyGenerator()).\n\n If no value is found in the cache for the computed key, the target method\n will be invoked and the returned value stored in the associated cache. Note\n that Java8's Optional return types are automatically handled and its\n content is stored in the cache if present.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html
CacheAnnotationParser	A										<section class="prog__container">Strategy interface for parsing known caching annotation types.\n AnnotationCacheOperationSource delegates to such\n parsers for supporting specific annotation types such as Spring's own\n Cacheable, CachePut or CacheEvict.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CacheAnnotationParser.html
CacheConfig	A										<section class="prog__container">@CacheConfig provides a mechanism for sharing common cache-related\n settings at the class level.\n\n When this annotation is present on a given class, it provides a set\n of default settings for any cache operation defined in that class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CacheConfig.html
CacheEvict	A										<section class="prog__container">Annotation indicating that a method (or all methods on a class) triggers a\n cache evict operation.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CacheEvict.html
CachePut	A										<section class="prog__container">Annotation indicating that a method (or all methods on a class) triggers a\n cache put operation.\n\n In contrast to the @Cacheable annotation, this annotation\n does not cause the advised method to be skipped. Rather, it always causes the\n method to be invoked and its result to be stored in the associated cache. Note\n that Java8's Optional return types are automatically handled and its\n content is stored in the cache if present.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html
Caching	A										<section class="prog__container">Group annotation for multiple cache annotations (of different or the same type).\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/Caching.html
CachingConfigurationSelector	A										<section class="prog__container">Selects which implementation of AbstractCachingConfiguration should be used\n based on the value of EnableCaching.mode() on the importing @Configuration\n class.\n\n Detects the presence of JSR-107 and enables JCache support accordingly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachingConfigurationSelector.html
CachingConfigurer	A										<section class="prog__container">Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to\n specify explicitly how caches are resolved and how keys are generated for annotation-driven\n cache management. Consider extending CachingConfigurerSupport, which provides a\n stub implementation of all interface methods.\n\n See @EnableCaching for general examples and context; see\n cacheManager(), cacheResolver() and keyGenerator()\n for detailed instructions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html
CachingConfigurerSupport	A										<section class="prog__container">An implementation of CachingConfigurer with empty methods allowing\n sub-classes to override only the methods they're interested in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachingConfigurerSupport.html
EnableCaching	A										<section class="prog__container">Enables Spring's annotation-driven cache management capability, similar to the\n support found in Spring's <cache:*> XML namespace. To be used together\n with @Configuration\n classes as follows:\n\n \n @Configuration\n @EnableCaching\n public class AppConfig {\n\n     @Bean\n     public MyService myService() {\n         // configure and return a class having @Cacheable methods\n         return new MyService();\n     }\n\n     @Bean\n     public CacheManager cacheManager() {\n         // configure and return an implementation of Spring's CacheManager SPI\n         SimpleCacheManager cacheManager = new SimpleCacheManager();\n         cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache("default")));\n         return cacheManager;\n     }\n }\nFor reference, the example above can be compared to the following Spring XML\n configuration:\n\n \n <beans>\n\n     <cache:annotation-driven/>\n\n     <bean id="myService" class="com.foo.MyService"/>\n\n     <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">\n         <property name="caches">\n             <set>\n                 <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">\n                     <property name="name" value="default"/>\n                 </bean>\n             </set>\n         </property>\n     </bean>\n\n </beans>\n \n\n In both of the scenarios above, @EnableCaching and <cache:annotation-driven/> are responsible for registering the necessary Spring\n components that power annotation-driven cache management, such as the\n CacheInterceptor and the\n proxy- or AspectJ-based advice that weaves the interceptor into the call stack when\n @Cacheable methods are invoked.\n\n If the JSR-107 API and Spring's JCache implementation are present, the necessary\n components to manage standard cache annotations are also registered. This creates the\n proxy- or AspectJ-based advice that weaves the interceptor into the call stack when\n methods annotated with CacheResult, CachePut, CacheRemove or\n CacheRemoveAll are invoked.\n\n A bean of type CacheManager\n must be registered, as there is no reasonable default that the framework can\n use as a convention. And whereas the <cache:annotation-driven> element assumes\n a bean named "cacheManager", @EnableCaching searches for a cache\n manager bean by type. Therefore, naming of the cache manager bean method is\n not significant.\n\n For those that wish to establish a more direct relationship between\n @EnableCaching and the exact cache manager bean to be used,\n the CachingConfigurer callback interface may be implemented.\n Notice the @Override-annotated methods below:\n\n \n @Configuration\n @EnableCaching\n public class AppConfig extends CachingConfigurerSupport {\n\n     @Bean\n     public MyService myService() {\n         // configure and return a class having @Cacheable methods\n         return new MyService();\n     }\n\n     @Bean\n     @Override\n     public CacheManager cacheManager() {\n         // configure and return an implementation of Spring's CacheManager SPI\n         SimpleCacheManager cacheManager = new SimpleCacheManager();\n         cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache("default")));\n         return cacheManager;\n     }\n\n     @Bean\n     @Override\n     public KeyGenerator keyGenerator() {\n         // configure and return an implementation of Spring's KeyGenerator SPI\n         return new MyKeyGenerator();\n     }\n }\n\n This approach may be desirable simply because it is more explicit, or it may be\n necessary in order to distinguish between two CacheManager beans present in the\n same container.\n\n Notice also the keyGenerator method in the example above. This allows for\n customizing the strategy for cache key generation, per Spring's KeyGenerator SPI. Normally,\n @EnableCaching will configure Spring's\n SimpleKeyGenerator\n for this purpose, but when implementing CachingConfigurer, a key generator\n must be provided explicitly. Return null or new SimpleKeyGenerator()\n from this method if no customization is necessary.\n\n CachingConfigurer offers additional customization options: it is recommended\n to extend from CachingConfigurerSupport that provides a default implementation for all methods which\n can be useful if you do not need to customize everything. See CachingConfigurer\n Javadoc for further details.\n\n The mode() attribute controls how advice is applied; if the mode is\n AdviceMode.PROXY (the default), then the other attributes such as\n proxyTargetClass() control the behavior of the proxying.\n\n If the mode() is set to AdviceMode.ASPECTJ, then the\n proxyTargetClass() attribute is obsolete. Note also that in this case the\n spring-aspects module JAR must be present on the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html
ProxyCachingConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable proxy-based annotation-driven cache management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/ProxyCachingConfiguration.html
SpringCacheAnnotationParser	A										<section class="prog__container">Strategy implementation for parsing Spring's Caching, Cacheable,\n CacheEvict, and CachePut annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/SpringCacheAnnotationParser.html
AspectJCachingConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans\n necessary to enable AspectJ-based annotation-driven cache management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/aspectj/AspectJCachingConfiguration.html
AspectJJCacheConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable AspectJ-based annotation-driven cache management for standard JSR-107\n annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/aspectj/AspectJJCacheConfiguration.html
CaffeineCache	A										<section class="prog__container">Spring Cache adapter implementation\n on top of a Caffeine Cache instance.\n\n Requires Caffeine 2.1 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/caffeine/CaffeineCache.html
CaffeineCacheManager	A										<section class="prog__container">CacheManager implementation that lazily builds CaffeineCache\n instances for each getCache(java.lang.String) request. Also supports a 'static' mode\n where the set of cache names is pre-defined through setCacheNames(java.util.Collection<java.lang.String>),\n with no dynamic creation of further cache regions at runtime.\n\n The configuration of the underlying cache can be fine-tuned through a\n Caffeine builder or CaffeineSpec, passed into this\n CacheManager through setCaffeine(com.github.benmanes.caffeine.cache.Caffeine<java.lang.Object, java.lang.Object>)/setCaffeineSpec(com.github.benmanes.caffeine.cache.CaffeineSpec).\n A CaffeineSpec-compliant expression value can also be applied\n via the "cacheSpecification" bean property.\n\n Requires Caffeine 2.1 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/caffeine/CaffeineCacheManager.html
ConcurrentMapCache	A										<section class="prog__container">Simple Cache implementation based on the\n core JDK java.util.concurrent package.\n\n Useful for testing or simple caching scenarios, typically in combination\n with SimpleCacheManager or\n dynamically through ConcurrentMapCacheManager.\n\n Note: As ConcurrentHashMap (the default implementation used)\n does not allow for null values to be stored, this class will replace\n them with a predefined internal object. This behavior can be changed through the\n ConcurrentMapCache(String, ConcurrentMap, boolean) constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/concurrent/ConcurrentMapCache.html
ConcurrentMapCacheFactoryBean	A										<section class="prog__container">FactoryBean for easy configuration of a ConcurrentMapCache\n when used within a Spring container. Can be configured through bean properties;\n uses the assigned Spring bean name as the default cache name.\n\n Useful for testing or simple caching scenarios, typically in combination\n with SimpleCacheManager or\n dynamically through ConcurrentMapCacheManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/concurrent/ConcurrentMapCacheFactoryBean.html
ConcurrentMapCacheManager	A										<section class="prog__container">CacheManager implementation that lazily builds ConcurrentMapCache\n instances for each getCache(java.lang.String) request. Also supports a 'static' mode where\n the set of cache names is pre-defined through setCacheNames(java.util.Collection<java.lang.String>), with no\n dynamic creation of further cache regions at runtime.\n\n Note: This is by no means a sophisticated CacheManager; it comes with no\n cache configuration options. However, it may be useful for testing or simple\n caching scenarios. For advanced local caching needs, consider\n JCacheCacheManager,\n EhCacheCacheManager,\n CaffeineCacheManager or\n GuavaCacheManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/concurrent/ConcurrentMapCacheManager.html
CacheManagementConfigUtils	A										<section class="prog__container">Configuration constants for internal sharing across subpackages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/config/CacheManagementConfigUtils.html
CacheNamespaceHandler	A										<section class="prog__container">NamespaceHandler allowing for the configuration of declarative\n cache management using either XML or using annotations.\n\n This namespace handler is the central piece of functionality in the\n Spring cache management facilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/config/CacheNamespaceHandler.html
EhCacheCache	A										<section class="prog__container">Cache implementation on top of an Ehcache instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheCache.html
EhCacheCacheManager	A										<section class="prog__container">CacheManager backed by an EhCache CacheManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheCacheManager.html
EhCacheFactoryBean	A										<section class="prog__container">FactoryBean that creates a named EhCache Cache instance\n (or a decorator that implements the Ehcache interface),\n representing a cache region within an EhCache CacheManager.\n\n If the specified named cache is not configured in the cache configuration descriptor,\n this FactoryBean will construct an instance of a Cache with the provided name and the\n specified cache properties and add it to the CacheManager for later retrieval. If some\n or all properties are not set at configuration time, this FactoryBean will use defaults.\n\n Note: If the named Cache instance is found, the properties will be ignored and the\n Cache instance will be retrieved from the CacheManager.\n\n Note: As of Spring 4.1, Spring's EhCache support requires EhCache 2.5 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheFactoryBean.html
EhCacheManagerFactoryBean	A										<section class="prog__container">FactoryBean that exposes an EhCache CacheManager\n instance (independent or shared), configured from a specified config location.\n\n If no config location is specified, a CacheManager will be configured from\n "ehcache.xml" in the root of the class path (that is, default EhCache initialization\n - as defined in the EhCache docs - will apply).\n\n Setting up a separate EhCacheManagerFactoryBean is also advisable when using\n EhCacheFactoryBean, as it provides a (by default) independent CacheManager instance\n and cares for proper shutdown of the CacheManager. EhCacheManagerFactoryBean is\n also necessary for loading EhCache configuration from a non-default config location.\n\n Note: As of Spring 4.1, Spring's EhCache support requires EhCache 2.5 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.html
EhCacheManagerUtils	A										<section class="prog__container">Convenient builder methods for EhCache 2.5+ CacheManager setup,\n providing easy programmatic bootstrapping from a Spring-provided resource.\n This is primarily intended for use within @Bean methods in a\n Spring configuration class.\n\n These methods are a simple alternative to custom CacheManager setup\n code. For any advanced purposes, consider using parseConfiguration(org.springframework.core.io.Resource),\n customizing the configuration object, and then calling the\n CacheManager.CacheManager(Configuration) constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheManagerUtils.html
GuavaCache	A										<section class="prog__container">Spring Cache adapter implementation\n on top of a Guava Cache instance.\n\n Requires Google Guava 12.0 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/guava/GuavaCache.html
GuavaCacheManager	A										<section class="prog__container">CacheManager implementation that lazily builds GuavaCache\n instances for each getCache(java.lang.String) request. Also supports a 'static' mode\n where the set of cache names is pre-defined through setCacheNames(java.util.Collection<java.lang.String>),\n with no dynamic creation of further cache regions at runtime.\n\n The configuration of the underlying cache can be fine-tuned through a\n Guava CacheBuilder or CacheBuilderSpec, passed into this\n CacheManager through setCacheBuilder(com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>)/setCacheBuilderSpec(com.google.common.cache.CacheBuilderSpec).\n A CacheBuilderSpec-compliant expression value can also be applied\n via the "cacheSpecification" bean property.\n\n Requires Google Guava 12.0 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/guava/GuavaCacheManager.html
AbstractCacheInvoker	A										<section class="prog__container">A base component for invoking Cache operations and using a\n configurable CacheErrorHandler when an exception occurs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/AbstractCacheInvoker.html
AbstractCacheResolver	A										<section class="prog__container">A base CacheResolver implementation that requires the concrete\n implementation to provide the collection of cache name(s) based on the\n invocation context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/AbstractCacheResolver.html
AbstractFallbackCacheOperationSource	A										<section class="prog__container">Abstract implementation of CacheOperation that caches attributes\n for methods and implements a fallback policy: 1. specific target method;\n 2. target class; 3. declaring method; 4. declaring class/interface.\n\n Defaults to using the target class's caching attribute if none is\n associated with the target method. Any caching attribute associated with\n the target method completely overrides a class caching attribute.\n If none found on the target class, the interface that the invoked method\n has been called through (in case of a JDK proxy) will be checked.\n\n This implementation caches attributes by method after they are first\n used. If it is ever desirable to allow dynamic changing of cacheable\n attributes (which is very unlikely), caching could be made configurable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.html
BasicOperation	A										<section class="prog__container">The base interface that all cache operations must implement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/BasicOperation.html
BeanFactoryCacheOperationSourceAdvisor	A										<section class="prog__container">Advisor driven by a CacheOperationSource, used to include a\n cache advice bean for methods that are cacheable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/BeanFactoryCacheOperationSourceAdvisor.html
CacheableOperation.Builder	A										<section class="prog__container">Return an identifying description for this caching operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheableOperation.Builder.html
CacheableOperation	A										<section class="prog__container">Class describing a cache 'cacheable' operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheableOperation.html
CacheAspectSupport.CacheOperationContext	A										<section class="prog__container">Compute the key for the given caching operation.</section>	No URL found
CacheAspectSupport.CacheOperationMetadata	A										<section class="prog__container">Metadata of a cache operation that does not depend on a particular invocation\n which makes it a good candidate for caching.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheAspectSupport.CacheOperationMetadata.html
CacheAspectSupport	A										<section class="prog__container">Base class for caching aspects, such as the CacheInterceptor\n or an AspectJ aspect.\n\n This enables the underlying Spring caching infrastructure to be\n used easily to implement an aspect for any aspect system.\n\n Subclasses are responsible for calling methods in this class in\n the correct order.\n\n Uses the Strategy design pattern. A CacheResolver\n implementation will resolve the actual cache(s) to use, and a\n CacheOperationSource is used for determining caching\n operations.\n\n A cache aspect is serializable if its CacheResolver and\n CacheOperationSource are serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheAspectSupport.html
CacheErrorHandler	A										<section class="prog__container">A strategy for handling cache-related errors. In most cases, any\n exception thrown by the provider should simply be thrown back at\n the client but, in some circumstances, the infrastructure may need\n to handle cache-provider exceptions in a different way.\n\n Typically, failing to retrieve an object from the cache with\n a given id can be transparently managed as a cache miss by not\n throwing back such exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheErrorHandler.html
CacheEvictOperation.Builder	A										<section class="prog__container">Return an identifying description for this caching operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheEvictOperation.Builder.html
CacheEvictOperation	A										<section class="prog__container">Class describing a cache 'evict' operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheEvictOperation.html
CacheInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor for declarative cache\n management using the common Spring caching infrastructure\n (Cache).\n\n Derives from the CacheAspectSupport class which\n contains the integration with Spring's underlying caching API.\n CacheInterceptor simply calls the relevant superclass methods\n in the correct order.\n\n CacheInterceptors are thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheInterceptor.html
CacheOperation.Builder	A										<section class="prog__container">Return an identifying description for this caching operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheOperation.Builder.html
CacheOperation	A										<section class="prog__container">Base class for cache operations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheOperation.html
CacheOperationInvoker	A										<section class="prog__container">Abstract the invocation of a cache operation.\n\n Does not provide a way to transmit checked exceptions but\n provide a special exception that should be used to wrap any\n exception that was thrown by the underlying invocation.\n Callers are expected to handle this issue type specifically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheOperationInvoker.html
CacheOperationInvoker.ThrowableWrapper	A										<section class="prog__container">Wrap any exception thrown while invoking CacheOperationInvoker.invoke().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheOperationInvoker.ThrowableWrapper.html
CacheOperationSource	A										<section class="prog__container">Interface used by CacheInterceptor. Implementations know how to source\n cache operation attributes, whether from configuration, metadata attributes at\n source level, or elsewhere.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheOperationSource.html
CacheProxyFactoryBean	A										<section class="prog__container">Proxy factory bean for simplified declarative caching handling.\n This is a convenient alternative to a standard AOP\n ProxyFactoryBean\n with a separate CacheInterceptor definition.\n\n This class is designed to facilitate declarative cache demarcation: namely, wrapping\n a singleton target object with a caching proxy, proxying all the interfaces that the\n target implements. Exists primarily for third-party framework integration.\n Users should favor the cache: XML namespace\n @Cacheable annotation.\n See the declarative annotation-based caching section\n of the Spring reference documentation for more information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheProxyFactoryBean.html
CachePutOperation.Builder	A										<section class="prog__container">Return an identifying description for this caching operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CachePutOperation.Builder.html
CachePutOperation	A										<section class="prog__container">Class describing a cache 'put' operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CachePutOperation.html
CacheResolver	A										<section class="prog__container">Determine the Cache instance(s) to use for an intercepted method invocation.\n\n Implementations must be thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CacheResolver.html
CompositeCacheOperationSource	A										<section class="prog__container">Composite CacheOperationSource implementation that iterates\n over a given array of CacheOperationSource instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/CompositeCacheOperationSource.html
DefaultKeyGenerator	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, in favor of SimpleKeyGenerator\n or custom KeyGenerator implementations based on hash codes\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/DefaultKeyGenerator.html
KeyGenerator	A										<section class="prog__container">Cache key generator. Used for creating a key based on the given method\n (used as context) and its parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/KeyGenerator.html
NamedCacheResolver	A										<section class="prog__container">A CacheResolver that forces the resolution to a configurable\n collection of name(s) against a given CacheManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/NamedCacheResolver.html
NameMatchCacheOperationSource	A										<section class="prog__container">Simple CacheOperationSource implementation that allows attributes to be matched\n by registered name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/NameMatchCacheOperationSource.html
SimpleCacheErrorHandler	A										<section class="prog__container">A simple CacheErrorHandler that does not handle the\n exception at all, simply throwing it back at the client.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/SimpleCacheErrorHandler.html
SimpleCacheResolver	A										<section class="prog__container">A simple CacheResolver that resolves the Cache instance(s)\n based on a configurable CacheManager and the name of the\n cache(s) as provided by getCacheNames()</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/SimpleCacheResolver.html
SimpleKey	A										<section class="prog__container">A simple key as returned from the SimpleKeyGenerator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/SimpleKey.html
SimpleKeyGenerator	A										<section class="prog__container">Simple key generator. Returns the parameter itself if a single non-null value\n is given, otherwise returns a SimpleKey of the parameters.\n\n Unlike DefaultKeyGenerator, no collisions will occur with the keys\n generated by this class. The returned SimpleKey object can be safely\n used with a ConcurrentMapCache,\n however, might not be suitable for all Cache\n implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/interceptor/SimpleKeyGenerator.html
JCacheCache	A										<section class="prog__container">Cache implementation on top of a\n Cache instance.\n\n Note: This class has been updated for JCache 1.0, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/JCacheCache.html
JCacheCacheManager	A										<section class="prog__container">CacheManager implementation\n backed by a JCache CacheManager.\n\n Note: This class has been updated for JCache 1.0, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/JCacheCacheManager.html
JCacheManagerFactoryBean	A										<section class="prog__container">FactoryBean for a JCache CacheManager,\n obtaining a pre-defined CacheManager by name through the standard\n JCache Caching class.\n\n Note: This class has been updated for JCache 1.0, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/JCacheManagerFactoryBean.html
AbstractJCacheConfiguration	A										<section class="prog__container">Abstract JSR-107 specific @Configuration class providing common\n structure for enabling JSR-107 annotation-driven cache management capability.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.html
JCacheConfigurer	A										<section class="prog__container">Extension of CachingConfigurer for the JSR-107 implementation.\n\n To be implemented by classes annotated with\n EnableCaching that wish\n or need to specify explicitly how exception caches are resolved for\n annotation-driven cache management. Consider extending JCacheConfigurerSupport,\n which provides a stub implementation of all interface methods.\n\n See EnableCaching for\n general examples and context; see exceptionCacheResolver() for\n detailed instructions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/config/JCacheConfigurer.html
JCacheConfigurerSupport	A										<section class="prog__container">An extension of CachingConfigurerSupport that also implements\n JCacheConfigurer.\n\n Users of JSR-107 annotations may extend from this class rather than\n implementing from JCacheConfigurer directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/config/JCacheConfigurerSupport.html
ProxyJCacheConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable proxy-based annotation-driven JSR-107 cache management.\n\n Can safely be used alongside Spring's caching support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/config/ProxyJCacheConfiguration.html
AbstractFallbackJCacheOperationSource	A										<section class="prog__container">Abstract implementation of JCacheOperationSource that caches attributes\n for methods and implements a fallback policy: 1. specific target method;\n 2. declaring method.\n\n This implementation caches attributes by method after they are first used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.html
AnnotationJCacheOperationSource	A										<section class="prog__container">Implementation of the JCacheOperationSource interface that reads\n the JSR-107 CacheResult, CachePut, CacheRemove and\n CacheRemoveAll annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/AnnotationJCacheOperationSource.html
BeanFactoryJCacheOperationSourceAdvisor	A										<section class="prog__container">Advisor driven by a JCacheOperationSource, used to include a\n cache advice bean for methods that are cacheable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/BeanFactoryJCacheOperationSourceAdvisor.html
DefaultJCacheOperationSource	A										<section class="prog__container">The default JCacheOperationSource implementation delegating\n default operations to configurable services with sensible defaults\n when not present.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.html
JCacheAspectSupport	A										<section class="prog__container">Base class for JSR-107 caching aspects, such as the JCacheInterceptor\n or an AspectJ aspect.\n\n Use the Spring caching abstraction for cache-related operations. No JSR-107\n Cache or CacheManager are required to\n process standard JSR-107 cache annotations.\n\n The JCacheOperationSource is used for determining caching operations\n\n A cache aspect is serializable if its JCacheOperationSource is serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.html
JCacheInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor for declarative cache\n management using JSR-107 caching annotations.\n\n Derives from the JCacheAspectSupport class which\n contains the integration with Spring's underlying caching API.\n JCacheInterceptor simply calls the relevant superclass method.\n\n JCacheInterceptors are thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/JCacheInterceptor.html
JCacheOperationSource	A										<section class="prog__container">Interface used by JCacheInterceptor. Implementations know how to source\n cache operation attributes from standard JSR-107 annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/JCacheOperationSource.html
JCacheOperationSourcePointcut	A										<section class="prog__container">A Pointcut that matches if the underlying JCacheOperationSource\n has an operation for a given method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/JCacheOperationSourcePointcut.html
SimpleExceptionCacheResolver	A										<section class="prog__container">A simple CacheResolver that resolves the exception cache\n based on a configurable CacheManager and the name of the\n cache: CacheResultOperation.getExceptionCacheName()</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/interceptor/SimpleExceptionCacheResolver.html
AbstractCacheManager	A										<section class="prog__container">Abstract base class implementing the common CacheManager methods.\n Useful for 'static' environments where the backing caches do not change.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/AbstractCacheManager.html
AbstractValueAdaptingCache	A										<section class="prog__container">Common base class for Cache implementations that need to adapt\n null values (and potentially other such special values) before\n passing them on to the underlying store.\n\n Transparently replaces given null user values with an internal\n NullValue.INSTANCE, if configured to support null values\n (as indicated by isAllowNullValues().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/AbstractValueAdaptingCache.html
CompositeCacheManager	A										<section class="prog__container">Composite CacheManager implementation that iterates over\n a given collection of delegate CacheManager instances.\n\n Allows NoOpCacheManager to be automatically added to the end of\n the list for handling cache declarations without a backing store. Otherwise,\n any custom CacheManager may play that role of the last delegate as\n well, lazily creating cache regions for any requested name.\n\n Note: Regular CacheManagers that this composite manager delegates to need\n to return null from getCache(String) if they are unaware of\n the specified cache name, allowing for iteration to the next delegate in line.\n However, most CacheManager implementations fall back to lazy creation\n of named caches once requested; check out the specific configuration details\n for a 'static' mode with fixed cache names, if available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/CompositeCacheManager.html
NoOpCache	A										<section class="prog__container">A no operation Cache implementation suitable\n for disabling caching.\n\n Will simply accept any items into the cache not actually storing them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/NoOpCache.html
NoOpCacheManager	A										<section class="prog__container">A basic, no operation CacheManager implementation suitable\n for disabling caching, typically used for backing cache declarations\n without an actual backing store.\n\n Will simply accept any items into the cache not actually storing them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/NoOpCacheManager.html
NullValue	A										<section class="prog__container">Simple serializable class that serves as a null replacement\n for cache stores which otherwise do not support null values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/NullValue.html
SimpleCacheManager	A										<section class="prog__container">Simple cache manager working against a given collection of caches.\n Useful for testing or simple caching declarations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/SimpleCacheManager.html
SimpleValueWrapper	A										<section class="prog__container">Straightforward implementation of Cache.ValueWrapper,\n simply holding the value as given at construction and returning it from get().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/support/SimpleValueWrapper.html
AbstractTransactionSupportingCacheManager	A										<section class="prog__container">Base class for CacheManager implementations that want to support built-in\n awareness of Spring-managed transactions. This usually needs to be switched\n on explicitly through the setTransactionAware(boolean) bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/transaction/AbstractTransactionSupportingCacheManager.html
TransactionAwareCacheDecorator	A										<section class="prog__container">Cache decorator which synchronizes its put(java.lang.Object, java.lang.Object), evict(java.lang.Object) and clear()\n operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager,\n performing the actual cache put/evict/clear operation only in the after-commit phase of a\n successful transaction. If no transaction is active, put(java.lang.Object, java.lang.Object), evict(java.lang.Object) and\n clear() operations will be performed immediately, as usual.\n\n Use of more aggressive operations such as putIfAbsent(java.lang.Object, java.lang.Object) cannot be deferred\n to the after-commit phase of a running transaction. Use these with care.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/transaction/TransactionAwareCacheDecorator.html
TransactionAwareCacheManagerProxy	A										<section class="prog__container">Proxy for a target CacheManager, exposing transaction-aware Cache objects\n which synchronize their Cache.put(java.lang.Object, java.lang.Object) operations with Spring-managed transactions\n (through Spring's TransactionSynchronizationManager,\n performing the actual cache put operation only in the after-commit phase of a successful transaction.\n If no transaction is active, Cache.put(java.lang.Object, java.lang.Object) operations will be performed immediately, as usual.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/transaction/TransactionAwareCacheManagerProxy.html
SpringCglibInfo	A										<section class="prog__container">Empty class used to ensure that the org.springframework.cglib\n package is processed during javadoc generation.\n\n See package-level javadocs for more\n information on org.springframework.cglib.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cglib/SpringCglibInfo.html
SpringNamingPolicy	A										<section class="prog__container">Custom extension of CGLIB's DefaultNamingPolicy, modifying\n the tag in generated class names from "ByCGLIB" to "BySpringCGLIB".\n\n This is primarily designed to avoid clashes between a regular CGLIB\n version (used by some other library) and Spring's embedded variant,\n in case the same class happens to get proxied for different purposes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cglib/core/SpringNamingPolicy.html
ApplicationContext	A										<section class="prog__container">Central interface to provide configuration for an application.\n This is read-only while the application is running, but may be\n reloaded if the implementation supports this.\n\n An ApplicationContext provides:\n \nBean factory methods for accessing application components.\n Inherited from ListableBeanFactory.\n The ability to load file resources in a generic fashion.\n Inherited from the ResourceLoader interface.\n The ability to publish events to registered listeners.\n Inherited from the ApplicationEventPublisher interface.\n The ability to resolve messages, supporting internationalization.\n Inherited from the MessageSource interface.\n Inheritance from a parent context. Definitions in a descendant context\n will always take priority. This means, for example, that a single parent\n context can be used by an entire web application, while each servlet has\n its own child context that is independent of that of any other servlet.\n \nIn addition to standard BeanFactory\n lifecycle capabilities, ApplicationContext implementations detect and invoke\n ApplicationContextAware beans as well as ResourceLoaderAware,\n ApplicationEventPublisherAware and MessageSourceAware beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html
ApplicationContextAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the ApplicationContext that it runs in.\n\n Implementing this interface makes sense for example when an object\n requires access to a set of collaborating beans. Note that configuration\n via bean references is preferable to implementing this interface just\n for bean lookup purposes.\n\n This interface can also be implemented if an object needs access to file\n resources, i.e. wants to call getResource, wants to publish\n an application event, or requires access to the MessageSource. However,\n it is preferable to implement the more specific ResourceLoaderAware,\n ApplicationEventPublisherAware or MessageSourceAware interface\n in such a specific scenario.\n\n Note that file resource dependencies can also be exposed as bean properties\n of type Resource, populated via Strings\n with automatic type conversion by the bean factory. This removes the need\n for implementing any callback interface just for the purpose of accessing\n a specific file resource.\n\n ApplicationObjectSupport is a\n convenience base class for application objects, implementing this interface.\n\n For a list of all bean lifecycle methods, see the\n BeanFactory javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContextAware.html
ApplicationContextException	A										<section class="prog__container">Exception thrown during application context initialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContextException.html
ApplicationEvent	A										<section class="prog__container">Class to be extended by all application events. Abstract as it\n doesn't make sense for generic events to be published directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationEvent.html
ApplicationEventPublisher	A										<section class="prog__container">Interface that encapsulates event publication functionality.\n Serves as super-interface for ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationEventPublisher.html
ApplicationEventPublisherAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the ApplicationEventPublisher (typically the ApplicationContext)\n that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationEventPublisherAware.html
ConfigurableApplicationContext	A										<section class="prog__container">SPI interface to be implemented by most if not all application contexts.\n Provides facilities to configure an application context in addition\n to the application context client methods in the\n ApplicationContext interface.\n\n Configuration and lifecycle methods are encapsulated here to avoid\n making them obvious to ApplicationContext client code. The present\n methods should only be used by startup and shutdown code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ConfigurableApplicationContext.html
EmbeddedValueResolverAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified of a\n StringValueResolver for the  resolution of embedded definition values.\n\n This is an alternative to a full ConfigurableBeanFactory dependency via the\n ApplicationContextAware/BeanFactoryAware interfaces.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/EmbeddedValueResolverAware.html
EnvironmentAware	A										<section class="prog__container">Interface to be implemented by any bean that wishes to be notified\n of the Environment that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/EnvironmentAware.html
HierarchicalMessageSource	A										<section class="prog__container">Sub-interface of MessageSource to be implemented by objects that\n can resolve messages hierarchically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/HierarchicalMessageSource.html
Lifecycle	A										<section class="prog__container">A common interface defining methods for start/stop lifecycle control.\n The typical use case for this is to control asynchronous processing.\n NOTE: This interface does not imply specific auto-startup semantics.\n Consider implementing SmartLifecycle for that purpose.\nCan be implemented by both components (typically a Spring bean defined in a\n Spring context) and containers  (typically a Spring ApplicationContext\n itself). Containers will propagate start/stop signals to all components that\n apply within each container, e.g. for a stop/restart scenario at runtime.\n\n Can be used for direct invocations or for management operations via JMX.\n In the latter case, the MBeanExporter\n will typically be defined with an\n InterfaceBasedMBeanInfoAssembler,\n restricting the visibility of activity-controlled components to the Lifecycle\n interface.\n\n Note that the Lifecycle interface is only supported on top-level singleton\n beans. On any other component, the Lifecycle interface will remain undetected\n and hence ignored. Also, note that the extended SmartLifecycle interface\n provides integration with the application context's startup and shutdown phases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/Lifecycle.html
LifecycleProcessor	A										<section class="prog__container">Strategy interface for processing Lifecycle beans within the ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/LifecycleProcessor.html
MessageSource	A										<section class="prog__container">Strategy interface for resolving messages, with support for the parameterization\n and internationalization of such messages.\n\n Spring provides two out-of-the-box implementations for production:\n \nResourceBundleMessageSource,\n built on top of the standard ResourceBundle\nReloadableResourceBundleMessageSource,\n being able to reload message definitions without restarting the VM\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/MessageSource.html
MessageSourceAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the MessageSource (typically the ApplicationContext) that it runs in.\n\n Note that the MessageSource can usually also be passed on as bean\n reference (to arbitrary bean properties or constructor arguments), because\n it is defined as bean with name "messageSource" in the application context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/MessageSourceAware.html
MessageSourceResolvable	A										<section class="prog__container">Interface for objects that are suitable for message resolution in a\n MessageSource.\n\n Spring's own validation error classes implement this interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/MessageSourceResolvable.html
NoSuchMessageException	A										<section class="prog__container">Exception thrown when a message can't be resolved.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/NoSuchMessageException.html
PayloadApplicationEvent	A										<section class="prog__container">An ApplicationEvent that carries an arbitrary payload.\n\n Mainly intended for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/PayloadApplicationEvent.html
Phased	A										<section class="prog__container">Interface for objects that may participate in a phased\n process such as lifecycle management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/Phased.html
ResourceLoaderAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified of\n the ResourceLoader (typically the ApplicationContext) that it runs in.\n This is an alternative to a full ApplicationContext dependency via the\n ApplicationContextAware interface.\n\n Note that Resource dependencies can also be exposed as bean properties\n of type Resource, populated via Strings with automatic type conversion by\n the bean factory. This removes the need for implementing any callback\n interface just for the purpose of accessing a specific file resource.\n\n You typically need a ResourceLoader when your application object has\n to access a variety of file resources whose names are calculated. A good\n strategy is to make the object use a DefaultResourceLoader but still\n implement ResourceLoaderAware to allow for overriding when running in an\n ApplicationContext. See ReloadableResourceBundleMessageSource for an example.\n\n A passed-in ResourceLoader can also be checked for the\n ResourcePatternResolver interface and cast accordingly, to be able\n to resolve resource patterns into arrays of Resource objects. This will always\n work when running in an ApplicationContext (the context interface extends\n ResourcePatternResolver). Use a PathMatchingResourcePatternResolver as default.\n See also the ResourcePatternUtils.getResourcePatternResolver method.\n\n As alternative to a ResourcePatternResolver dependency, consider exposing\n bean properties of type Resource array, populated via pattern Strings with\n automatic type conversion by the bean factory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ResourceLoaderAware.html
SmartLifecycle	A										<section class="prog__container">An extension of the Lifecycle interface for those objects that require to\n be started upon ApplicationContext refresh and/or shutdown in a particular order.\n The isAutoStartup() return value indicates whether this object should\n be started at the time of a context refresh. The callback-accepting\n stop(Runnable) method is useful for objects that have an asynchronous\n shutdown process. Any implementation of this interface must invoke the\n callback's run() method upon shutdown completion to avoid unnecessary delays\n in the overall ApplicationContext shutdown.\n\n This interface extends Phased, and the Phased.getPhase() method's\n return value indicates the phase within which this Lifecycle component should\n be started and stopped. The startup process begins with the lowest\n phase value and ends with the highest phase value (Integer.MIN_VALUE\n is the lowest possible, and Integer.MAX_VALUE is the highest possible). The\n shutdown process will apply the reverse order. Any components with the\n same value will be arbitrarily ordered within the same phase.\n\n Example: if component B depends on component A having already started, then\n component A should have a lower phase value than component B. During the\n shutdown process, component B would be stopped before component A.\n\n Any explicit "depends-on" relationship will take precedence over\n the phase order such that the dependent bean always starts after its\n dependency and always stops before its dependency.\n\n Any Lifecycle components within the context that do not also implement\n SmartLifecycle will be treated as if they have a phase value of 0. That\n way a SmartLifecycle implementation may start before those Lifecycle\n components if it has a negative phase value, or it may start after\n those components if it has a positive phase value.\n\n Note that, due to the auto-startup support in SmartLifecycle,\n a SmartLifecycle bean instance will get initialized on startup of the\n application context in any case. As a consequence, the bean definition\n lazy-init flag has very limited actual effect on SmartLifecycle beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/SmartLifecycle.html
ContextBeanFactoryReference	A										<section class="prog__container">ApplicationContext-specific implementation of BeanFactoryReference,\n wrapping a newly created ApplicationContext, closing it on release.\n\n As per BeanFactoryReference contract, release may be called\n more than once, with subsequent calls not doing anything. However, calling\n getFactory after a release call will cause an exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/access/ContextBeanFactoryReference.html
ContextJndiBeanFactoryLocator	A										<section class="prog__container">BeanFactoryLocator implementation that creates the BeanFactory from one or\n more classpath locations specified in a JNDI environment variable.\n\n This default implementation creates a\n ClassPathXmlApplicationContext.\n Subclasses may override createBeanFactory(java.lang.String[]) for custom instantiation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/access/ContextJndiBeanFactoryLocator.html
ContextSingletonBeanFactoryLocator	A										<section class="prog__container">Variant of SingletonBeanFactoryLocator\n which creates its internal bean factory reference as an\n ApplicationContext instead of\n SingletonBeanFactoryLocator's simple BeanFactory. For almost all usage scenarios,\n this will not make a difference, since within that ApplicationContext or BeanFactory\n you are still free to define either BeanFactory or ApplicationContext instances.\n The main reason one would need to use this class is if bean post-processing\n (or other ApplicationContext specific features are needed in the bean reference\n definition itself).\n\n Note: This class uses classpath*:beanRefContext.xml\n as the default resource location for the bean factory reference definition files.\n It is not possible nor legal to share definitions with SingletonBeanFactoryLocator\n at the same time.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/access/ContextSingletonBeanFactoryLocator.html
DefaultLocatorFactory	A										<section class="prog__container">A factory class to get a default ContextSingletonBeanFactoryLocator instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/access/DefaultLocatorFactory.html
AdviceMode	A										<section class="prog__container">Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice\n should be applied.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AdviceMode.html
AnnotatedBeanDefinitionReader	A										<section class="prog__container">Convenient adapter for programmatic registration of annotated bean classes.\n This is an alternative to ClassPathBeanDefinitionScanner, applying\n the same resolution of annotations but for explicitly registered classes only.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.html
AnnotationBeanNameGenerator	A										<section class="prog__container">BeanNameGenerator\n implementation for bean classes annotated with the\n @Component annotation\n or with another annotation that is itself annotated with\n @Component as a\n meta-annotation. For example, Spring's stereotype annotations (such as\n @Repository) are\n themselves annotated with\n @Component.\n\n Also supports Java EE 6's ManagedBean and\n JSR-330's Named annotations, if available. Note that\n Spring component annotations always override such standard annotations.\n\n If the annotation's value doesn't indicate a bean name, an appropriate\n name will be built based on the short name of the class (with the first\n letter lower-cased). For example:\n\n com.xyz.FooServiceImpl -> fooServiceImpl</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationBeanNameGenerator.html
AnnotationConfigApplicationContext	A										<section class="prog__container">Standalone application context, accepting annotated classes as input - in particular\n @Configuration-annotated classes, but also plain\n @Component types and JSR-330 compliant\n classes using javax.inject annotations. Allows for registering classes one by\n one using register(Class...) as well as for classpath scanning using\n scan(String...).\n\n In case of multiple @Configuration classes, @Bean methods defined in\n later classes will override those defined in earlier classes. This can be leveraged to\n deliberately override certain bean definitions via an extra @Configuration\n class.\n\n See @Configuration Javadoc for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html
AnnotationConfigBeanDefinitionParser	A										<section class="prog__container">Parser for the <context:annotation-config/> element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigBeanDefinitionParser.html
AnnotationConfigRegistry	A										<section class="prog__container">Common interface for annotation config application contexts,\n defining register(java.lang.Class<?>...) and scan(java.lang.String...) methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigRegistry.html
AnnotationConfigUtils	A										<section class="prog__container">Utility class that allows for convenient registration of common\n BeanPostProcessor and\n BeanFactoryPostProcessor\n definitions for annotation-based configuration. Also registers a common\n AutowireCandidateResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigUtils.html
AnnotationScopeMetadataResolver	A										<section class="prog__container">A ScopeMetadataResolver implementation that by default checks for\n the presence of Spring's @Scope annotation on the bean class.\n\n The exact type of annotation that is checked for is configurable via\n setScopeAnnotationType(Class).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationScopeMetadataResolver.html
AutoProxyRegistrar	A										<section class="prog__container">Registers an auto proxy creator against the current BeanDefinitionRegistry\n as appropriate based on an @Enable* annotation having mode and\n proxyTargetClass attributes set to the correct values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AutoProxyRegistrar.html
Bean	A										<section class="prog__container">Indicates that a method produces a bean to be managed by the Spring container.\n\n Overview\nThe names and semantics of the attributes to this annotation are intentionally\n similar to those of the <bean/> element in the Spring XML schema. For\n example:\n\n \n     @Bean\n     public MyBean myBean() {\n         // instantiate and configure MyBean obj\n         return obj;\n     }\n \nBean Names\nWhile a name() attribute is available, the default strategy for\n determining the name of a bean is to use the name of the @Bean method.\n This is convenient and intuitive, but if explicit naming is desired, the\n name attribute (or its alias value) may be used. Also note\n that name accepts an array of Strings, allowing for multiple names\n (i.e. a primary bean name plus one or more aliases) for a single bean.\n\n \n     @Bean({"b1", "b2"}) // bean available as 'b1' and 'b2', but not 'myBean'\n     public MyBean myBean() {\n         // instantiate and configure MyBean obj\n         return obj;\n     }\n \nScope, DependsOn, Primary, and Lazy\nNote that the @Bean annotation does not provide attributes for scope,\n depends-on, primary, or lazy. Rather, it should be used in conjunction with\n @Scope, @DependsOn, @Primary,\n and @Lazy annotations to achieve those semantics. For example:\n\n \n     @Bean\n     @Scope("prototype")\n     public MyBean myBean() {\n         // instantiate and configure MyBean obj\n         return obj;\n     }\n \n@Bean Methods in @Configuration Classes\nTypically, @Bean methods are declared within @Configuration\n classes. In this case, bean methods may reference other @Bean methods in the\n same class by calling them directly. This ensures that references between beans\n are strongly typed and navigable. Such so-called 'inter-bean references' are\n guaranteed to respect scoping and AOP semantics, just like getBean() lookups\n would. These are the semantics known from the original 'Spring JavaConfig' project\n which require CGLIB subclassing of each such configuration class at runtime. As a\n consequence, @Configuration classes and their factory methods must not be\n marked as final or private in this mode. For example:\n\n \n @Configuration\n public class AppConfig {\n\n     @Bean\n     public FooService fooService() {\n         return new FooService(fooRepository());\n     }\n\n     @Bean\n     public FooRepository fooRepository() {\n         return new JdbcFooRepository(dataSource());\n     }\n\n     // ...\n }\n@Bean Lite Mode\n@Bean methods may also be declared within classes that are not\n annotated with @Configuration. For example, bean methods may be declared\n in a @Component class or even in a plain old class. In such cases,\n a @Bean method will get processed in a so-called 'lite' mode.\n\n Bean methods in lite mode will be treated as plain factory\n methods by the container (similar to factory-method declarations\n in XML), with scoping and lifecycle callbacks properly applied. The containing\n class remains unmodified in this case, and there are no unusual constraints for\n the containing class or the factory methods.\n\n In contrast to the semantics for bean methods in @Configuration classes,\n 'inter-bean references' are not supported in lite mode. Instead,\n when one @Bean-method invokes another @Bean-method in lite\n mode, the invocation is a standard Java method invocation; Spring does not intercept\n the invocation via a CGLIB proxy. This is analogous to inter-@Transactional\n method calls where in proxy mode, Spring does not intercept the invocation —\n Spring does so only in AspectJ mode.\n\n For example:\n\n \n @Component\n public class Calculator {\n     public int sum(int a, int b) {\n         return a+b;\n     }\n\n     @Bean\n     public MyBean myBean() {\n         return new MyBean();\n     }\n }\nBootstrapping\nSee @Configuration Javadoc for further details including how to bootstrap\n the container using AnnotationConfigApplicationContext and friends.\n\n BeanFactoryPostProcessor-returning @Bean methods\nSpecial consideration must be taken for @Bean methods that return Spring\n BeanFactoryPostProcessor\n (BFPP) types. Because BFPP objects must be instantiated very early in the\n container lifecycle, they can interfere with processing of annotations such as @Autowired,\n @Value, and @PostConstruct within @Configuration classes. To avoid these\n lifecycle issues, mark BFPP-returning @Bean methods as static. For example:\n\n \n     @Bean\n     public static PropertyPlaceholderConfigurer ppc() {\n         // instantiate, configure and return ppc ...\n     }\n \n\n By marking this method as static, it can be invoked without causing instantiation of its\n declaring @Configuration class, thus avoiding the above-mentioned lifecycle conflicts.\n Note however that static @Bean methods will not be enhanced for scoping and AOP\n semantics as mentioned above. This works out in BFPP cases, as they are not typically\n referenced by other @Bean methods. As a reminder, a WARN-level log message will be\n issued for any non-static @Bean methods having a return type assignable to\n BeanFactoryPostProcessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html
ClassPathBeanDefinitionScanner	A										<section class="prog__container">A bean definition scanner that detects bean candidates on the classpath,\n registering corresponding bean definitions with a given registry (BeanFactory\n or ApplicationContext).\n\n Candidate classes are detected through configurable type filters. The\n default filters include classes that are annotated with Spring's\n @Component,\n @Repository,\n @Service, or\n @Controller stereotype.\n\n Also supports Java EE 6's ManagedBean and\n JSR-330's Named annotations, if available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.html
ClassPathScanningCandidateComponentProvider	A										<section class="prog__container">A component provider that scans the classpath from a base package. It then\n applies exclude and include filters to the resulting classes to find candidates.\n\n This implementation is based on Spring's\n MetadataReader\n facility, backed by an ASM ClassReader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.html
CommonAnnotationBeanPostProcessor	A										<section class="prog__container">BeanPostProcessor implementation\n that supports common Java annotations out of the box, in particular the JSR-250\n annotations in the javax.annotation package. These common Java\n annotations are supported in many Java EE 5 technologies (e.g. JSF 1.2),\n as well as in Java 6's JAX-WS.\n\n This post-processor includes support for the PostConstruct\n and PreDestroy annotations - as init annotation\n and destroy annotation, respectively - through inheriting from\n InitDestroyAnnotationBeanPostProcessor with pre-configured annotation types.\n\n The central element is the Resource annotation\n for annotation-driven injection of named beans, by default from the containing\n Spring BeanFactory, with only mappedName references resolved in JNDI.\n The "alwaysUseJndiLookup" flag enforces JNDI lookups\n equivalent to standard Java EE 5 resource injection for name references\n and default names as well. The target beans can be simple POJOs, with no special\n requirements other than the type having to match.\n\n The JAX-WS WebServiceRef annotation is supported too,\n analogous to Resource but with the capability of creating\n specific JAX-WS service endpoints. This may either point to an explicitly defined\n resource by name or operate on a locally specified JAX-WS service class. Finally,\n this post-processor also supports the EJB 3 EJB annotation,\n analogous to Resource as well, with the capability to\n specify both a local bean name and a global JNDI name for fallback retrieval.\n The target beans can be plain POJOs as well as EJB 3 Session Beans in this case.\n\n The common annotations supported by this post-processor are available in\n Java 6 (JDK 1.6) as well as in Java EE 5/6 (which provides a standalone jar for\n its common annotations as well, allowing for use in any Java 5 based application).\n\n For default usage, resolving resource names as Spring bean names,\n simply define the following in your application context:\n\n \n <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>\n\n For direct JNDI access, resolving resource names as JNDI resource references\n within the Java EE application's "java:comp/env/" namespace, use the following:\n\n \n <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor">\n   <property name="alwaysUseJndiLookup" value="true"/>\n </bean>\nmappedName references will always be resolved in JNDI,\n allowing for global JNDI names (including "java:" prefix) as well. The\n "alwaysUseJndiLookup" flag just affects name references and\n default names (inferred from the field name / property name).\n\n NOTE: A default CommonAnnotationBeanPostProcessor will be registered\n by the "context:annotation-config" and "context:component-scan" XML tags.\n Remove or turn off the default annotation configuration there if you intend\n to specify a custom CommonAnnotationBeanPostProcessor bean definition!\n NOTE: Annotation injection will be performed before XML injection; thus\n the latter configuration will override the former for properties wired through\n both approaches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.html
CommonAnnotationBeanPostProcessor.LookupElement	A										<section class="prog__container">Class representing generic injection information about an annotated field\n or setter method, supporting @Resource and related annotations.</section>	No URL found
ComponentScan.Filter	A										<section class="prog__container">Declares the type filter to be used as an include filter or exclude filter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.Filter.html
ComponentScan	A										<section class="prog__container">Configures component scanning directives for use with @Configuration classes.\n Provides support parallel with Spring XML's <context:component-scan> element.\n\n Either basePackageClasses() or basePackages() (or its alias\n value()) may be specified to define specific packages to scan. If specific\n packages are not defined, scanning will occur from the package of the\n class that declares this annotation.\n\n Note that the <context:component-scan> element has an\n annotation-config attribute; however, this annotation does not. This is because\n in almost all cases when using @ComponentScan, default annotation config\n processing (e.g. processing @Autowired and friends) is assumed. Furthermore,\n when using AnnotationConfigApplicationContext, annotation config processors are\n always registered, meaning that any attempt to disable them at the\n @ComponentScan level would be ignored.\n\n See @Configuration's Javadoc for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html
ComponentScanBeanDefinitionParser	A										<section class="prog__container">Parser for the <context:component-scan/> element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.html
ComponentScans	A										<section class="prog__container">Container annotation that aggregates several ComponentScan annotations.\n\n Can be used natively, declaring several nested ComponentScan annotations.\n Can also be used in conjunction with Java 8's support for repeatable annotations,\n where ComponentScan can simply be declared several times on the same method,\n implicitly generating this container annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScans.html
Condition	A										<section class="prog__container">A single condition that must be matched in order\n for a component to be registered.\n\n Conditions are checked immediately before the bean-definition is due to be\n registered and are free to veto registration based on any criteria that can\n be determined at that point.\n\n Conditions must follow the same restrictions as BeanFactoryPostProcessor\n and take care to never interact with bean instances. For more fine-grained control\n of conditions that interact with @Configuration beans consider the\n ConfigurationCondition interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Condition.html
Conditional	A										<section class="prog__container">Indicates that a component is only eligible for registration when all\n specified conditions match.\n\n A condition is any state that can be determined programmatically\n before the bean definition is due to be registered (see Condition for details).\n\n The @Conditional annotation may be used in any of the following ways:\n \nas a type-level annotation on any class directly or indirectly annotated with\n @Component, including @Configuration classes\nas a meta-annotation, for the purpose of composing custom stereotype\n annotations\nas a method-level annotation on any @Bean method\n\nIf a @Configuration class is marked with @Conditional,\n all of the @Bean methods, @Import annotations, and\n @ComponentScan annotations associated with that\n class will be subject to the conditions.\n\n NOTE: Inheritance of @Conditional annotations\n is not supported; any conditions from superclasses or from overridden\n methods will not be considered. In order to enforce these semantics,\n @Conditional itself is not declared as\n @Inherited; furthermore, any\n custom composed annotation that is meta-annotated with\n @Conditional must not be declared as @Inherited.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html
ConditionContext	A										<section class="prog__container">Context information for use by Conditions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ConditionContext.html
Configuration	A										<section class="prog__container">Indicates that a class declares one or more @Bean methods and\n may be processed by the Spring container to generate bean definitions and\n service requests for those beans at runtime, for example:\n\n \n @Configuration\n public class AppConfig {\n\n     @Bean\n     public MyBean myBean() {\n         // instantiate, configure and return bean ...\n     }\n }\nBootstrapping @Configuration classes\nVia AnnotationConfigApplicationContext\n@Configuration classes are typically bootstrapped using either\n AnnotationConfigApplicationContext or its web-capable variant,\n AnnotationConfigWebApplicationContext. A simple example with the former follows:\n\n \n AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n ctx.register(AppConfig.class);\n ctx.refresh();\n MyBean myBean = ctx.getBean(MyBean.class);\n // use myBean ...\n \n\n See AnnotationConfigApplicationContext Javadoc for further details and see\n AnnotationConfigWebApplicationContext for web.xml configuration instructions.\n\n Via Spring <beans> XML\nAs an alternative to registering @Configuration classes directly against an\n AnnotationConfigApplicationContext, @Configuration classes may be\n declared as normal <bean> definitions within Spring XML files:\n \n <beans>\n    <context:annotation-config/>\n    <bean class="com.acme.AppConfig"/>\n </beans>\n\n In the example above, <context:annotation-config/> is required in order to\n enable ConfigurationClassPostProcessor and other annotation-related\n post processors that facilitate handling @Configuration classes.\n\n Via component scanning\n@Configuration is meta-annotated with @Component, therefore\n @Configuration classes are candidates for component scanning (typically using\n Spring XML's <context:component-scan/> element) and therefore may also take\n advantage of @Autowired/@Inject\n like any regular @Component. In particular, if a single constructor is present\n autowiring semantics will be applied transparently:\n\n \n @Configuration\n public class AppConfig {\n     private final SomeBean someBean;\n\n     public AppConfig(SomeBean someBean) {\n         this.someBean = someBean;\n     }\n\n     // @Bean definition using "SomeBean"\n\n }\n@Configuration classes may not only be bootstrapped using\n component scanning, but may also themselves configure component scanning using\n the @ComponentScan annotation:\n\n \n @Configuration\n @ComponentScan("com.acme.app.services")\n public class AppConfig {\n     // various @Bean definitions ...\n }\n\n See the @ComponentScan javadoc for details.\n\n Working with externalized values\nUsing the Environment API\n\n Externalized values may be looked up by injecting the Spring\n Environment into a @Configuration\n class the usual (e.g. using the @Autowired annotation):\n\n \n @Configuration\n public class AppConfig {\n\n     &#</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html
ConfigurationClassPostProcessor	A										<section class="prog__container">BeanFactoryPostProcessor used for bootstrapping processing of\n @Configuration classes.\n\n Registered by default when using <context:annotation-config/> or\n <context:component-scan/>. Otherwise, may be declared manually as\n with any other BeanFactoryPostProcessor.\n\n This post processor is Ordered.HIGHEST_PRECEDENCE as it is important\n that any Bean methods declared in Configuration classes have their\n respective bean definitions registered before any other BeanFactoryPostProcessor\n executes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ConfigurationClassPostProcessor.html
ConfigurationCondition.ConfigurationPhase	A										<section class="prog__container">The various configuration phases where the condition could be evaluated.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ConfigurationCondition.ConfigurationPhase.html
ConfigurationCondition	A										<section class="prog__container">A Condition that offers more fine-grained control when used with\n @Configuration. Allows certain Conditions to adapt when they match\n based on the configuration phase. For example, a condition that checks if a bean\n has already been registered might choose to only be evaluated during the\n REGISTER_BEAN ConfigurationCondition.ConfigurationPhase.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ConfigurationCondition.html
ContextAnnotationAutowireCandidateResolver	A										<section class="prog__container">Complete implementation of the\n AutowireCandidateResolver strategy\n interface, providing support for qualifier annotations as well as for lazy resolution\n driven by the Lazy annotation in the context.annotation package.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.html
DeferredImportSelector	A										<section class="prog__container">A variation of ImportSelector that runs after all @Configuration beans\n have been processed. This type of selector can be particularly useful when the selected\n imports are @Conditional.\n\n Implementations can also extend the Ordered\n interface or use the Order annotation to\n indicate a precedence against other DeferredImportSelectors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/DeferredImportSelector.html
DependsOn	A										<section class="prog__container">Beans on which the current bean depends. Any beans specified are guaranteed to be\n created by the container before this bean. Used infrequently in cases where a bean\n does not explicitly depend on another through properties or constructor arguments,\n but rather depends on the side effects of another bean's initialization.\n\n May be used on any class directly or indirectly annotated with\n Component or on methods annotated\n with Bean.\n\n Using DependsOn at the class level has no effect unless component-scanning\n is being used. If a DependsOn-annotated class is declared via XML,\n DependsOn annotation metadata is ignored, and\n <bean depends-on="..."/> is respected instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html
Description	A										<section class="prog__container">Adds a textual description to bean definitions derived from\n Component or Bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Description.html
EnableAspectJAutoProxy	A										<section class="prog__container">Enables support for handling components marked with AspectJ's @Aspect annotation,\n similar to functionality found in Spring's <aop:aspectj-autoproxy> XML element.\n To be used on @Configuration classes as follows:\n\n \n @Configuration\n @EnableAspectJAutoProxy\n public class AppConfig {\n\n     @Bean\n     public FooService fooService() {\n         return new FooService();\n     }\n\n     @Bean\n     public MyAspect myAspect() {\n         return new MyAspect();\n     }\n }\n\n Where FooService is a typical POJO component and MyAspect is an\n @Aspect-style aspect:\n\n \n public class FooService {\n\n     // various methods\n }\n\n @Aspect\n public class MyAspect {\n\n     @Before("execution(* FooService+.*(..))")\n     public void advice() {\n         // advise FooService methods as appropriate\n     }\n }\n\n In the scenario above, @EnableAspectJAutoProxy ensures that MyAspect\n will be properly processed and that FooService will be proxied mixing in the\n advice that it contributes.\n\n Users can control the type of proxy that gets created for FooService using\n the proxyTargetClass() attribute. The following enables CGLIB-style 'subclass'\n proxies as opposed to the default interface-based JDK proxy approach.\n\n \n @Configuration\n @EnableAspectJAutoProxy(proxyTargetClass=true)\n public class AppConfig {\n     // ...\n }\nNote that @Aspect beans may be component-scanned like any other. Simply\n mark the aspect with both @Aspect and @Component:\n\n \n package com.foo;\n\n @Component\n public class FooService { ... }\n\n @Aspect\n @Component\n public class MyAspect { ... }\n\n Then use the @ComponentScan annotation to pick both up:\n\n \n @Configuration\n @ComponentScan("com.foo")\n @EnableAspectJAutoProxy\n public class AppConfig {\n\n     // no explicit &#</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/EnableAspectJAutoProxy.html
EnableLoadTimeWeaving.AspectJWeaving	A										<section class="prog__container">Switches on AspectJ load-time weaving if a "META-INF/aop.xml" resource\n is present in the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.AspectJWeaving.html
EnableLoadTimeWeaving	A										<section class="prog__container">Activates a Spring LoadTimeWeaver for this application context, available as\n a bean with the name "loadTimeWeaver", similar to the <context:load-time-weaver>\n element in Spring XML.\n\n To be used on @Configuration classes;\n the simplest possible example of which follows:\n\n \n @Configuration\n @EnableLoadTimeWeaving\n public class AppConfig {\n\n     // application-specific @Bean definitions ...\n }\n\n The example above is equivalent to the following Spring XML configuration:\n\n \n <beans>\n\n     <context:load-time-weaver/>\n\n     <!-- application-specific <bean> definitions -->\n\n </beans>\n \nThe LoadTimeWeaverAware interface\n Any bean that implements the LoadTimeWeaverAware interface\n will then receive the LoadTimeWeaver reference automatically; for example,\n Spring's JPA bootstrap support.\n\n Customizing the LoadTimeWeaver\n The default weaver is determined automatically: see DefaultContextLoadTimeWeaver.\n\n To customize the weaver used, the @Configuration class annotated with\n @EnableLoadTimeWeaving may also implement the LoadTimeWeavingConfigurer\n interface and return a custom LoadTimeWeaver instance through the\n #getLoadTimeWeaver method:\n\n \n @Configuration\n @EnableLoadTimeWeaving\n public class AppConfig implements LoadTimeWeavingConfigurer {\n\n     @Override\n     public LoadTimeWeaver getLoadTimeWeaver() {\n         MyLoadTimeWeaver ltw = new MyLoadTimeWeaver();\n         ltw.addClassTransformer(myClassFileTransformer);\n         // ...\n         return ltw;\n     }\n }\nThe example above can be compared to the following Spring XML configuration:\n\n \n <beans>\n\n     <context:load-time-weaver weaverClass="com.acme.MyLoadTimeWeaver"/>\n\n </beans>\n \nThe code example differs from the XML example in that it actually instantiates the\n MyLoadTimeWeaver type, meaning that it can also configure the instance, e.g.\n calling the #addClassTransformer method. This demonstrates how the code-based\n configuration approach is more flexible through direct programmatic access.\n\n Enabling AspectJ-based weaving\n AspectJ load-time weaving may be enabled with the aspectjWeaving()\n attribute, which will cause the AspectJ class transformer to\n be registered through LoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer). AspectJ weaving will be\n activated by default if a "META-INF/aop.xml" resource is present on the classpath.\n Example:\n\n \n @Configuration\n @EnableLoadTimeWeaving(aspectjWeaving=ENABLED)\n public class AppConfig {\n }\nThe example above can be compared to the following Spring XML configuration:\n\n \n <beans>\n\n     <context:load-time-weaver aspectj-weaving="on"/>\n\n </beans>\n \nThe two examples are equivalent with one significant exception: in the XML case,\n the functionality of <context:spring-configured> is implicitly enabled when\n aspectj-weaving is "on".  This does not occur when using\n @EnableLoadTimeWeaving(aspectjWeaving=ENABLED). Instead you must explicitly add\n @EnableSpringConfigured (included in the spring-aspects module)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.html
EnableMBeanExport	A										<section class="prog__container">Enables default exporting of all standard MBeans from the Spring context, as\n well as well all @ManagedResource annotated beans.\n\n The resulting MBeanExporter\n bean is defined under the name "mbeanExporter". Alternatively, consider defining a\n custom AnnotationMBeanExporter bean explicitly.\n\n This annotation is modeled after and functionally equivalent to Spring XML's\n <context:mbean-export/> element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/EnableMBeanExport.html
FilterType	A										<section class="prog__container">Enumeration of the type filters that may be used in conjunction with\n @ComponentScan.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/FilterType.html
Import	A										<section class="prog__container">Indicates one or more @Configuration classes to import.\n\n Provides functionality equivalent to the <import/> element in Spring XML.\n Allows for importing @Configuration classes, ImportSelector and\n ImportBeanDefinitionRegistrar implementations, as well as regular component\n classes (as of 4.2; analogous to AnnotationConfigApplicationContext.register(java.lang.Class<?>...)).\n\n @Bean definitions declared in imported @Configuration classes should be\n accessed by using @Autowired\n injection. Either the bean itself can be autowired, or the configuration class instance\n declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly\n navigation between @Configuration class methods.\n\n May be declared at the class level or as a meta-annotation.\n\n If XML or other non-@Configuration bean definition resources need to be\n imported, use the @ImportResource annotation instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Import.html
ImportAware	A										<section class="prog__container">Interface to be implemented by any @Configuration class that wishes\n to be injected with the AnnotationMetadata of the @Configuration\n class that imported it. Useful in conjunction with annotations that\n use @Import as a meta-annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ImportAware.html
ImportBeanDefinitionRegistrar	A										<section class="prog__container">Interface to be implemented by types that register additional bean definitions when\n processing @Configuration classes. Useful when operating at the bean definition\n level (as opposed to @Bean method/instance level) is desired or necessary.\n\n Along with @Configuration and ImportSelector, classes of this type\n may be provided to the @Import annotation (or may also be returned from an\n ImportSelector).\n\n An ImportBeanDefinitionRegistrar may implement any of the following\n Aware interfaces, and their respective\n methods will be called prior to registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry):\n \nEnvironmentAware\nBeanFactoryAware\nBeanClassLoaderAware\nResourceLoaderAware\n\nSee implementations and associated unit tests for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.html
ImportResource	A										<section class="prog__container">Indicates one or more resources containing bean definitions to import.\n\n Like @Import, this annotation provides functionality similar to\n the <import/> element in Spring XML. It is typically used when designing\n @Configuration classes to be bootstrapped by an\n AnnotationConfigApplicationContext, but where some XML functionality such\n as namespaces is still necessary.\n\n By default, arguments to the value() attribute will be processed using a\n GroovyBeanDefinitionReader\n if ending in ".groovy"; otherwise, an\n XmlBeanDefinitionReader\n will be used to parse Spring <beans/> XML files. Optionally, the reader()\n attribute may be declared, allowing the user to choose a custom BeanDefinitionReader\n implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ImportResource.html
ImportSelector	A										<section class="prog__container">Interface to be implemented by types that determine which @Configuration\n class(es) should be imported based on a given selection criteria, usually one or more\n annotation attributes.\n\n An ImportSelector may implement any of the following\n Aware interfaces, and their respective\n methods will be called prior to selectImports(org.springframework.core.type.AnnotationMetadata):\n \nEnvironmentAware\nBeanFactoryAware\nBeanClassLoaderAware\nResourceLoaderAware\n\nImportSelectors are usually processed in the same way as regular @Import\n annotations, however, it is also possible to defer selection of imports until all\n @Configuration classes have been processed (see DeferredImportSelector\n for details).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ImportSelector.html
Jsr330ScopeMetadataResolver	A										<section class="prog__container">Simple ScopeMetadataResolver implementation that follows JSR-330 scoping rules:\n defaulting to prototype scope unless Singleton is present.\n\n This scope resolver can be used with ClassPathBeanDefinitionScanner and\n AnnotatedBeanDefinitionReader for standard JSR-330 compliance. However,\n in practice, you will typically use Spring's rich default scoping instead - or extend\n this resolver with custom scoping annotations that point to extended Spring scopes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Jsr330ScopeMetadataResolver.html
Lazy	A										<section class="prog__container">Indicates whether a bean is to be lazily initialized.\n\n May be used on any class directly or indirectly annotated with @Component or on methods annotated with\n @Bean.\n\n If this annotation is not present on a @Component or @Bean definition,\n eager initialization will occur. If present and set to true, the @Bean or\n @Component will not be initialized until referenced by another bean or explicitly\n retrieved from the enclosing BeanFactory. If present and set to false, the bean will be instantiated on\n startup by bean factories that perform eager initialization of singletons.\n\n If Lazy is present on a @Configuration class, this\n indicates that all @Bean methods within that @Configuration\n should be lazily initialized. If @Lazy is present and false on a @Bean\n method within a @Lazy-annotated @Configuration class, this indicates\n overriding the 'default lazy' behavior and that the bean should be eagerly initialized.\n\n In addition to its role for component initialization, this annotation may also be placed\n on injection points marked with Autowired\n or Inject: In that context, it leads to the creation of a\n lazy-resolution proxy for all affected dependencies, as an alternative to using\n ObjectFactory or Provider.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Lazy.html
LoadTimeWeavingConfiguration	A										<section class="prog__container">@Configuration class that registers a LoadTimeWeaver bean.\n\n This configuration class is automatically imported when using the\n EnableLoadTimeWeaving annotation. See @EnableLoadTimeWeaving\n javadoc for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/LoadTimeWeavingConfiguration.html
LoadTimeWeavingConfigurer	A										<section class="prog__container">Interface to be implemented by\n @Configuration\n classes annotated with @EnableLoadTimeWeaving that wish to\n customize the LoadTimeWeaver instance to be used.\n\n See @EnableAsync\n for usage examples and information on how a default LoadTimeWeaver\n is selected when this interface is not used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/LoadTimeWeavingConfigurer.html
MBeanExportConfiguration	A										<section class="prog__container">@Configuration class that registers a AnnotationMBeanExporter bean.\n\n This configuration class is automatically imported when using the\n EnableMBeanExport annotation. See its javadoc for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/MBeanExportConfiguration.html
MBeanExportConfiguration.SpecificPlatform	A										<section class="prog__container">Returns the enum constant of this type with the specified name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/MBeanExportConfiguration.SpecificPlatform.html
Primary	A										<section class="prog__container">Indicates that a bean should be given preference when multiple candidates\n are qualified to autowire a single-valued dependency. If exactly one\n 'primary' bean exists among the candidates, it will be the autowired value.\n\n This annotation is semantically equivalent to the <bean> element's\n primary attribute in Spring XML.\n\n May be used on any class directly or indirectly annotated with\n @Component or on methods annotated with @Bean.\n\n Example\n\n @Component\n public class FooService {\n\n     private FooRepository fooRepository;\n\n     @Autowired\n     public FooService(FooRepository fooRepository) {\n         this.fooRepository = fooRepository;\n     }\n }\n\n @Component\n public class JdbcFooRepository {\n\n     public JdbcFooService(DataSource dataSource) {\n         // ...\n     }\n }\n\n @Primary\n @Component\n public class HibernateFooRepository {\n\n     public HibernateFooService(SessionFactory sessionFactory) {\n         // ...\n     }\n }\n \nBecause HibernateFooRepository is marked with @Primary,\n it will be injected preferentially over the jdbc-based variant assuming both\n are present as beans within the same Spring application context, which is\n often the case when component-scanning is applied liberally.\n\n Note that using @Primary at the class level has no effect unless\n component-scanning is being used. If a @Primary-annotated class is\n declared via XML, @Primary annotation metadata is ignored, and\n <bean primary="true|false"/> is respected instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Primary.html
Profile	A										<section class="prog__container">Indicates that a component is eligible for registration when one or more\n specified profiles are active.\n\n A profile is a named logical grouping that may be activated\n programmatically via ConfigurableEnvironment.setActiveProfiles(java.lang.String...) or declaratively\n by setting the spring.profiles.active property as a JVM system property, as an\n environment variable, or as a Servlet context parameter in web.xml\n for web applications. Profiles may also be activated declaratively in\n integration tests via the @ActiveProfiles annotation.\n\n The @Profile annotation may be used in any of the following ways:\n \nas a type-level annotation on any class directly or indirectly annotated with\n @Component, including @Configuration classes\nas a meta-annotation, for the purpose of composing custom stereotype annotations\nas a method-level annotation on any @Bean method\n\nIf a @Configuration class is marked with @Profile, all of the\n @Bean methods and @Import annotations associated with that class\n will be bypassed unless one or more of the specified profiles are active. This is\n analogous to the behavior in Spring XML: if the profile attribute of the\n beans element is supplied e.g., <beans profile="p1,p2">, the\n beans element will not be parsed unless at least profile 'p1' or 'p2' has been\n activated. Likewise, if a @Component or @Configuration class is marked\n with @Profile({"p1", "p2"}), that class will not be registered or processed unless\n at least profile 'p1' or 'p2' has been activated.\n\n If a given profile is prefixed with the NOT operator (!), the annotated\n component will be registered if the profile is not active — for example,\n given @Profile({"p1", "!p2"}), registration will occur if profile 'p1' is active or\n if profile 'p2' is not active.\n\n If the @Profile annotation is omitted, registration will occur regardless\n of which (if any) profiles are active.\n\n When defining Spring beans via XML, the "profile" attribute of the\n <beans> element may be used. See the documentation in the\n spring-beans XSD (version 3.1 or greater) for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html
PropertySource	A										<section class="prog__container">Annotation providing a convenient and declarative mechanism for adding a\n PropertySource to Spring's\n Environment. To be used in\n conjunction with @Configuration classes.\n\n Example usage\nGiven a file app.properties containing the key/value pair\n testbean.name=myTestBean, the following @Configuration class\n uses @PropertySource to contribute app.properties to the\n Environment's set of PropertySources.\n\n \n @Configuration\n @PropertySource("classpath:/com/myco/app.properties")\n public class AppConfig {\n     @Autowired\n     Environment env;\n\n     @Bean\n     public TestBean testBean() {\n         TestBean testBean = new TestBean();\n         testBean.setName(env.getProperty("testbean.name"));\n         return testBean;\n     }\n }\n\n Notice that the Environment object is @Autowired into the\n configuration class and then used when populating the TestBean object. Given\n the configuration above, a call to testBean.getName() will return "myTestBean".\n\n Resolving ${...} placeholders in <bean> and @Value annotations\n\n In order to resolve ${...} placeholders in <bean> definitions or @Value\n annotations using properties from a PropertySource, one must register\n a PropertySourcesPlaceholderConfigurer. This happens automatically when using\n <context:property-placeholder> in XML, but must be explicitly registered using\n a static @Bean method when using @Configuration classes. See\n the "Working with externalized values" section of @Configuration's javadoc and\n "a note on BeanFactoryPostProcessor-returning @Bean methods" of @Bean's javadoc\n for details and examples.\n\n Resolving ${...} placeholders within @PropertySource resource locations\n\n Any ${...} placeholders present in a @PropertySource resource location will be resolved against the set of property sources already\n registered against the environment. For example:\n\n \n @Configuration\n @PropertySource("classpath:/com/${my.placeholder:default/path}/app.properties")\n public class AppConfig {\n     @Autowired\n     Environment env;\n\n     @Bean\n     public TestBean testBean() {\n         TestBean testBean = new TestBean();\n         testBean.setName(env.getProperty("testbean.name"));\n         return testBean;\n     }\n }\n\n Assuming that "my.placeholder" is present in one of the property sources already\n registered, e.g. system properties or environment variables, the placeholder will\n be resolved to the corresponding value. If not, then "default/path" will be used as a\n default. Expressing a default value (delimited by colon ":") is optional.  If no\n default is specified and a property cannot be resolved, an IllegalArgumentException will be thrown.\n\n A note on property overriding with @PropertySource\n\n In cases where a given property key exists in more than one .properties\n file, the last @PropertySource annotation processed will 'win' and override.\n\n For example, given two properties files a.properties and\n b.properties, consider the following two configuration classes\n that reference them with @PropertySource annotations:\n\n \n @Configuration\n @PropertySource("classpath:/com/myco/a.properties")\n public class ConfigA { }\n\n @Configuration\n @PropertySource("classpath:/com/myco/b.properties")\n public class ConfigB { }\n \n\n The override ordering depends on the order in which these classes are registered\n with the application context.\n \n AnnotationConfigApplicationContext ctx =\n     new AnnotationConfigApplicationContext();\n ctx.register(ConfigA.class);\n ctx.register(ConfigB.class);\n ctx.refresh();\n \n\n In the scenario above, the properties in b.properties will override any\n duplicates that exist in a.properties, because ConfigB was registered\n last.\n\n In certain situations, it may not be possible or practical to tightly control\n property source ordering when using @ProperySource annotations. For example,\n if the @Configuration classes above were registered via component-scanning,\n the ordering is difficult to predict. In such cases - and if overriding is important -\n it is recommended that the user fall back to using the programmatic PropertySource API.\n See ConfigurableEnvironment\n and MutablePropertySources\n javadocs for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html
PropertySources	A										<section class="prog__container">Container annotation that aggregates several PropertySource annotations.\n\n Can be used natively, declaring several nested PropertySource annotations.\n Can also be used in conjunction with Java 8's support for repeatable annotations,\n where PropertySource can simply be declared several times on the same\n type, implicitly generating this container annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySources.html
Role	A										<section class="prog__container">Indicates the 'role' hint for a given bean.\n\n May be used on any class directly or indirectly annotated with\n Component or on methods\n annotated with Bean.\n\n If this annotation is not present on a Component or Bean definition,\n the default value of BeanDefinition.ROLE_APPLICATION will apply.\n\n If Role is present on a @Configuration class,\n this indicates the role of the configuration class bean definition and\n does not cascade to all @Bean methods defined within. This behavior\n is different than that of the @Lazy annotation, for example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Role.html
ScannedGenericBeanDefinition	A										<section class="prog__container">Extension of the GenericBeanDefinition\n class, based on an ASM ClassReader, with support for annotation metadata exposed\n through the AnnotatedBeanDefinition interface.\n\n This class does not load the bean Class early.\n It rather retrieves all relevant metadata from the ".class" file itself,\n parsed with the ASM ClassReader. It is functionally equivalent to\n AnnotatedGenericBeanDefinition.AnnotatedGenericBeanDefinition(AnnotationMetadata)\n but distinguishes by type beans that have been scanned vs those that have\n been otherwise registered or detected by other means.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ScannedGenericBeanDefinition.html
Scope	A										<section class="prog__container">When used as a type-level annotation in conjunction with\n @Component,\n @Scope indicates the name of a scope to use for instances of\n the annotated type.\n\n When used as a method-level annotation in conjunction with\n @Bean, @Scope indicates the name of a scope to use\n for the instance returned from the method.\n\n In this context, scope means the lifecycle of an instance,\n such as singleton, prototype, and so forth. Scopes\n provided out of the box in Spring may be referred to using the\n SCOPE_* constants available in the ConfigurableBeanFactory\n and WebApplicationContext interfaces.\n\n To register additional custom scopes, see\n CustomScopeConfigurer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Scope.html
ScopedProxyMode	A										<section class="prog__container">Enumerates the various scoped-proxy options.\n\n For a more complete discussion of exactly what a scoped proxy is, see the\n section of the Spring reference documentation entitled 'Scoped beans as\n dependencies'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ScopedProxyMode.html
ScopeMetadata	A										<section class="prog__container">Describes scope characteristics for a Spring-managed bean including the scope\n name and the scoped-proxy behavior.\n\n The default scope is "singleton", and the default is to not create\n scoped-proxies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ScopeMetadata.html
ScopeMetadataResolver	A										<section class="prog__container">Strategy interface for resolving the scope of bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html
EnableSpringConfigured	A										<section class="prog__container">Signals the current application context to apply dependency injection to\n non-managed classes that are instantiated outside of the Spring bean factory\n (typically classes annotated with the\n @Configurable\n annotation).\n\n Similar to functionality found in Spring's\n <context:spring-configured> XML element. Often used in conjunction with\n @EnableLoadTimeWeaving.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/aspectj/EnableSpringConfigured.html
SpringConfiguredConfiguration	A										<section class="prog__container">@Configuration class that registers an AnnotationBeanConfigurerAspect\n capable of performing dependency injection services for non-Spring managed objects\n annotated with @Configurable.\n\n This configuration class is automatically imported when using the\n @EnableSpringConfigured annotation. See\n @EnableSpringConfigured's javadoc for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/aspectj/SpringConfiguredConfiguration.html
ContextNamespaceHandler	A										<section class="prog__container">NamespaceHandler\n for the 'context' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/config/ContextNamespaceHandler.html
AbstractApplicationEventMulticaster	A										<section class="prog__container">Abstract implementation of the ApplicationEventMulticaster interface,\n providing the basic listener registration facility.\n\n Doesn't permit multiple instances of the same listener by default,\n as it keeps listeners in a linked Set. The collection class used to hold\n ApplicationListener objects can be overridden through the "collectionClass"\n bean property.\n\n Implementing ApplicationEventMulticaster's actual ApplicationEventMulticaster.multicastEvent(org.springframework.context.ApplicationEvent) method\n is left to subclasses. SimpleApplicationEventMulticaster simply multicasts\n all events to all registered listeners, invoking them in the calling thread.\n Alternative implementations could be more sophisticated in those respects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/AbstractApplicationEventMulticaster.html
ApplicationContextEvent	A										<section class="prog__container">Base class for events raised for an ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ApplicationContextEvent.html
ApplicationEventMulticaster	A										<section class="prog__container">Interface to be implemented by objects that can manage a number of\n ApplicationListener objects, and publish events to them.\n\n An ApplicationEventPublisher, typically\n a Spring ApplicationContext, can use an\n ApplicationEventMulticaster as a delegate for actually publishing events.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ApplicationEventMulticaster.html
ApplicationListenerMethodAdapter	A										<section class="prog__container">GenericApplicationListener adapter that delegates the processing of\n an event to an EventListener annotated method.\n\n Delegates to processEvent(ApplicationEvent) to give sub-classes\n a chance to deviate from the default. Unwraps the content of a\n PayloadApplicationEvent if necessary to allow method declaration\n to define any arbitrary event type. If a condition is defined, it is\n evaluated prior to invoking the underlying method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ApplicationListenerMethodAdapter.html
ContextClosedEvent	A										<section class="prog__container">Event raised when an ApplicationContext gets closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ContextClosedEvent.html
ContextRefreshedEvent	A										<section class="prog__container">Event raised when an ApplicationContext gets initialized or refreshed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html
ContextStartedEvent	A										<section class="prog__container">Event raised when an ApplicationContext gets started.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ContextStartedEvent.html
ContextStoppedEvent	A										<section class="prog__container">Event raised when an ApplicationContext gets stopped.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/ContextStoppedEvent.html
DefaultEventListenerFactory	A										<section class="prog__container">Default EventListenerFactory implementation that supports the\n regular EventListener annotation.\n Used as "catch-all" implementation by default.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/DefaultEventListenerFactory.html
EventListener	A										<section class="prog__container">Annotation that marks a method as a listener for application events.\n\n If an annotated method supports a single event type, the method may\n declare a single parameter that reflects the event type to listen to.\n If an annotated method supports multiple event types, this annotation\n may refer to one or more supported event types using the classes\n attribute. See the classes() javadoc for further details.\n\n Events can be ApplicationEvent instances as well as arbitrary\n objects.\n\n Processing of @EventListener annotations is performed via\n the internal EventListenerMethodProcessor bean which gets\n registered automatically when using Java config or manually via the\n <context:annotation-config/> or <context:component-scan/>\n element when using XML config.\n\n Annotated methods may have a non-void return type. When they\n do, the result of the method invocation is sent as a new event. If the\n return type is either an array or a collection, each element is sent\n as a new individual event.\n\n It is also possible to define the order in which listeners for a\n certain event are to be invoked. To do so, add Spring's common\n @Order annotation\n alongside this event listener annotation.\n\n While it is possible for an event listener to declare that it\n throws arbitrary exception types, any checked exceptions thrown\n from an event listener will be wrapped in an\n UndeclaredThrowableException\n since the event publisher can only handle runtime exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/EventListener.html
EventListenerFactory	A										<section class="prog__container">Strategy interface for creating ApplicationListener for methods\n annotated with EventListener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/EventListenerFactory.html
EventListenerMethodProcessor	A										<section class="prog__container">Register EventListener annotated method as individual ApplicationListener\n instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/EventListenerMethodProcessor.html
EventPublicationInterceptor	A										<section class="prog__container">Interceptor that publishes an\n ApplicationEvent to all ApplicationListeners\n registered with an ApplicationEventPublisher after each\n successful method invocation.\n\n Note that this interceptor is only capable of publishing stateless\n events configured via the\n "applicationEventClass" property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/EventPublicationInterceptor.html
GenericApplicationListener	A										<section class="prog__container">Extended variant of the standard ApplicationListener interface,\n exposing further metadata such as the supported event type.\n\n As of Spring Framework 4.2, supersedes SmartApplicationListener with\n proper handling of generics-based event.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/GenericApplicationListener.html
GenericApplicationListenerAdapter	A										<section class="prog__container">GenericApplicationListener adapter that determines supported event types\n through introspecting the generically declared type of the target listener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/GenericApplicationListenerAdapter.html
SimpleApplicationEventMulticaster	A										<section class="prog__container">Simple implementation of the ApplicationEventMulticaster interface.\n\n Multicasts all events to all registered listeners, leaving it up to\n the listeners to ignore events that they are not interested in.\n Listeners will usually perform corresponding instanceof\n checks on the passed-in event object.\n\n By default, all listeners are invoked in the calling thread.\n This allows the danger of a rogue listener blocking the entire application,\n but adds minimal overhead. Specify an alternative task executor to have\n listeners executed in different threads, for example from a thread pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/SimpleApplicationEventMulticaster.html
SmartApplicationListener	A										<section class="prog__container">Extended variant of the standard ApplicationListener interface,\n exposing further metadata such as the supported event type.\n\n Users are strongly advised to use the GenericApplicationListener\n interface instead as it provides an improved detection of generics-based\n event types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/SmartApplicationListener.html
SourceFilteringListener	A										<section class="prog__container">ApplicationListener decorator that filters\n events from a specified event source, invoking its delegate listener for\n matching ApplicationEvent objects only.\n\n Can also be used as base class, overriding the onApplicationEventInternal(org.springframework.context.ApplicationEvent)\n method instead of specifying a delegate listener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/event/SourceFilteringListener.html
AnnotatedElementKey	A										<section class="prog__container">Represent an AnnotatedElement on a particular Class\n and is suitable as a key.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/AnnotatedElementKey.html
BeanExpressionContextAccessor	A										<section class="prog__container">EL property accessor that knows how to traverse the beans and contextual objects\n of a Spring BeanExpressionContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/BeanExpressionContextAccessor.html
BeanFactoryAccessor	A										<section class="prog__container">EL property accessor that knows how to traverse the beans of a\n Spring BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/BeanFactoryAccessor.html
BeanFactoryResolver	A										<section class="prog__container">EL bean resolver that operates against a Spring\n BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/BeanFactoryResolver.html
CachedExpressionEvaluator	A										<section class="prog__container">Shared utility class used to evaluate and cache SpEL expressions that\n are defined on AnnotatedElement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/CachedExpressionEvaluator.html
EnvironmentAccessor	A										<section class="prog__container">Read-only EL property accessor that knows how to retrieve keys\n of a Spring Environment instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/EnvironmentAccessor.html
MapAccessor	A										<section class="prog__container">EL property accessor that knows how to traverse the keys\n of a standard Map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/MapAccessor.html
MethodBasedEvaluationContext	A										<section class="prog__container">A method-based EvaluationContext that\n provides explicit support for method-based invocations.\n\n Expose the actual method arguments using the following aliases:\n \npX where X is the index of the argument (p0 for the first argument)\naX where X is the index of the argument (a1 for the second argument)\nthe name of the parameter as discovered by a configurable ParameterNameDiscoverer\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/MethodBasedEvaluationContext.html
StandardBeanExpressionResolver	A										<section class="prog__container">Standard implementation of the\n BeanExpressionResolver\n interface, parsing and evaluating Spring EL using Spring's expression module.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/expression/StandardBeanExpressionResolver.html
LocaleContext	A										<section class="prog__container">Strategy interface for determining the current Locale.\n\n A LocaleContext instance can be associated with a thread\n via the LocaleContextHolder class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/LocaleContext.html
LocaleContextHolder	A										<section class="prog__container">Simple holder class that associates a LocaleContext instance\n with the current thread. The LocaleContext will be inherited\n by any child threads spawned by the current thread if the\n inheritable flag is set to true.\n\n Used as a central holder for the current Locale in Spring,\n wherever necessary: for example, in MessageSourceAccessor.\n DispatcherServlet automatically exposes its current Locale here.\n Other applications can expose theirs too, to make classes like\n MessageSourceAccessor automatically use that Locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/LocaleContextHolder.html
SimpleLocaleContext	A										<section class="prog__container">Simple implementation of the LocaleContext interface,\n always returning a specified Locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/SimpleLocaleContext.html
SimpleTimeZoneAwareLocaleContext	A										<section class="prog__container">Simple implementation of the TimeZoneAwareLocaleContext interface,\n always returning a specified Locale and TimeZone.\n\n Note: Prefer the use of SimpleLocaleContext when only setting\n a Locale but no TimeZone.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/SimpleTimeZoneAwareLocaleContext.html
TimeZoneAwareLocaleContext	A										<section class="prog__container">Extension of LocaleContext, adding awareness of the current time zone.\n\n Having this variant of LocaleContext set to LocaleContextHolder means\n that some TimeZone-aware infrastructure has been configured, even if it may not\n be able to produce a non-null TimeZone at the moment.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/TimeZoneAwareLocaleContext.html
AbstractApplicationContext	A										<section class="prog__container">Abstract implementation of the ApplicationContext\n interface. Doesn't mandate the type of storage used for configuration; simply\n implements common context functionality. Uses the Template Method design pattern,\n requiring concrete subclasses to implement abstract methods.\n\n In contrast to a plain BeanFactory, an ApplicationContext is supposed\n to detect special beans defined in its internal bean factory:\n Therefore, this class automatically registers\n BeanFactoryPostProcessors,\n BeanPostProcessors\n and ApplicationListeners\n which are defined as beans in the context.\n\n A MessageSource may also be supplied\n as a bean in the context, with the name "messageSource"; otherwise, message\n resolution is delegated to the parent context. Furthermore, a multicaster\n for application events can be supplied as "applicationEventMulticaster" bean\n of type ApplicationEventMulticaster\n in the context; otherwise, a default multicaster of type\n SimpleApplicationEventMulticaster will be used.\n\n Implements resource loading through extending\n DefaultResourceLoader.\n Consequently treats non-URL resource paths as class path resources\n (supporting full class path resource names that include the package path,\n e.g. "mypackage/myresource.dat"), unless the DefaultResourceLoader.getResourceByPath(java.lang.String)\n method is overwritten in a subclass.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractApplicationContext.html
AbstractMessageSource	A										<section class="prog__container">Abstract implementation of the HierarchicalMessageSource interface,\n implementing common handling of message variants, making it easy\n to implement a specific strategy for a concrete MessageSource.\n\n Subclasses must implement the abstract resolveCode(java.lang.String, java.util.Locale)\n method. For efficient resolution of messages without arguments, the\n resolveCodeWithoutArguments(java.lang.String, java.util.Locale) method should be overridden\n as well, resolving messages without a MessageFormat being involved.\n\n Note: By default, message texts are only parsed through\n MessageFormat if arguments have been passed in for the message. In case\n of no arguments, message texts will be returned as-is. As a consequence,\n you should only use MessageFormat escaping for messages with actual\n arguments, and keep all other messages unescaped. If you prefer to\n escape all messages, set the "alwaysUseMessageFormat" flag to "true".\n\n Supports not only MessageSourceResolvables as primary messages\n but also resolution of message arguments that are in turn\n MessageSourceResolvables themselves.\n\n This class does not implement caching of messages per code, thus\n subclasses can dynamically change messages over time. Subclasses are\n encouraged to cache their messages in a modification-aware fashion,\n allowing for hot deployment of updated messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractMessageSource.html
AbstractRefreshableApplicationContext	A										<section class="prog__container">Base class for ApplicationContext\n implementations which are supposed to support multiple calls to AbstractApplicationContext.refresh(),\n creating a new internal bean factory instance every time.\n Typically (but not necessarily), such a context will be driven by\n a set of config locations to load bean definitions from.\n\n The only method to be implemented by subclasses is loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory),\n which gets invoked on each refresh. A concrete implementation is supposed to load\n bean definitions into the given\n DefaultListableBeanFactory,\n typically delegating to one or more specific bean definition readers.\n\n Note that there is a similar base class for WebApplicationContexts.\nAbstractRefreshableWebApplicationContext\n provides the same subclassing strategy, but additionally pre-implements\n all context functionality for web environments. There is also a\n pre-defined way to receive config locations for a web context.\n\n Concrete standalone subclasses of this base class, reading in a\n specific bean definition format, are ClassPathXmlApplicationContext\n and FileSystemXmlApplicationContext, which both derive from the\n common AbstractXmlApplicationContext base class;\n AnnotationConfigApplicationContext\n supports @Configuration-annotated classes as a source of bean definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractRefreshableApplicationContext.html
AbstractRefreshableConfigApplicationContext	A										<section class="prog__container">AbstractRefreshableApplicationContext subclass that adds common handling\n of specified config locations. Serves as base class for XML-based application\n context implementations such as ClassPathXmlApplicationContext and\n FileSystemXmlApplicationContext, as well as\n XmlWebApplicationContext and\n XmlPortletApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.html
AbstractResourceBasedMessageSource	A										<section class="prog__container">Abstract base class for MessageSource implementations based on\n resource bundle conventions, such as ResourceBundleMessageSource\n and ReloadableResourceBundleMessageSource. Provides common\n configuration methods and corresponding semantic definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractResourceBasedMessageSource.html
AbstractXmlApplicationContext	A										<section class="prog__container">Convenient base class for ApplicationContext\n implementations, drawing configuration from XML documents containing bean definitions\n understood by an XmlBeanDefinitionReader.\n\n Subclasses just have to implement the getConfigResources() and/or\n the AbstractRefreshableConfigApplicationContext.getConfigLocations() method. Furthermore, they might override\n the DefaultResourceLoader.getResourceByPath(java.lang.String) hook to interpret relative paths in an\n environment-specific fashion, and/or AbstractApplicationContext.getResourcePatternResolver()\n for extended pattern resolution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractXmlApplicationContext.html
ApplicationObjectSupport	A										<section class="prog__container">Convenient superclass for application objects that want to be aware of\n the application context, e.g. for custom lookup of collaborating beans\n or for context-specific resource access. It saves the application\n context reference and provides an initialization callback method.\n Furthermore, it offers numerous convenience methods for message lookup.\n\n There is no requirement to subclass this class: It just makes things\n a little easier if you need access to the context, e.g. for access to\n file resources or to the message source. Note that many application\n objects do not need to be aware of the application context at all,\n as they can receive collaborating beans via bean references.\n\n Many framework classes are derived from this class, particularly\n within the web support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ApplicationObjectSupport.html
ClassPathXmlApplicationContext	A										<section class="prog__container">Standalone XML application context, taking the context definition files\n from the class path, interpreting plain paths as class path resource names\n that include the package path (e.g. "mypackage/myresource.txt"). Useful for\n test harnesses as well as for application contexts embedded within JARs.\n\n The config location defaults can be overridden via AbstractRefreshableConfigApplicationContext.getConfigLocations(),\n Config locations can either denote concrete files like "/myfiles/context.xml"\n or Ant-style patterns like "/myfiles/*-context.xml" (see the\n AntPathMatcher javadoc for pattern details).\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files. This can be leveraged to\n deliberately override certain bean definitions via an extra XML file.\n\n This is a simple, one-stop shop convenience ApplicationContext.\n Consider using the GenericApplicationContext class in combination\n with an XmlBeanDefinitionReader\n for more flexible context setup.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html
ConversionServiceFactoryBean	A										<section class="prog__container">A factory providing convenient access to a ConversionService configured with\n converters appropriate for most environments. Set the "converters" property to supplement the default converters.\n\n This implementation creates a DefaultConversionService. Subclasses\n may override createConversionService() in order to return a\n GenericConversionService instance of their choosing.\n\n Like all FactoryBean implementations, this class is suitable for\n use when configuring a Spring application context using Spring <beans>\n XML. When configuring the container with\n @Configuration\n classes, simply instantiate, configure and return the appropriate\n ConversionService object from a @Bean method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ConversionServiceFactoryBean.html
DefaultLifecycleProcessor	A										<section class="prog__container">Default implementation of the LifecycleProcessor strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/DefaultLifecycleProcessor.html
DefaultMessageSourceResolvable	A										<section class="prog__container">Default implementation of the MessageSourceResolvable interface.\n Offers an easy way to store all the necessary values needed to resolve\n a message via a MessageSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/DefaultMessageSourceResolvable.html
DelegatingMessageSource	A										<section class="prog__container">Empty MessageSource that delegates all calls to the parent MessageSource.\n If no parent is available, it simply won't resolve any message.\n\n Used as placeholder by AbstractApplicationContext, if the context doesn't\n define its own MessageSource. Not intended for direct use in applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/DelegatingMessageSource.html
EmbeddedValueResolutionSupport	A										<section class="prog__container">Convenient base class for components with a need for embedded value resolution\n (i.e. EmbeddedValueResolverAware consumers).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/EmbeddedValueResolutionSupport.html
FileSystemXmlApplicationContext	A										<section class="prog__container">Standalone XML application context, taking the context definition files\n from the file system or from URLs, interpreting plain paths as relative\n file system locations (e.g. "mydir/myfile.txt"). Useful for test harnesses\n as well as for standalone environments.\n\n NOTE: Plain paths will always be interpreted as relative\n to the current VM working directory, even if they start with a slash.\n (This is consistent with the semantics in a Servlet container.)\n Use an explicit "file:" prefix to enforce an absolute file path.\nThe config location defaults can be overridden via AbstractRefreshableConfigApplicationContext.getConfigLocations(),\n Config locations can either denote concrete files like "/myfiles/context.xml"\n or Ant-style patterns like "/myfiles/*-context.xml" (see the\n AntPathMatcher javadoc for pattern details).\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files. This can be leveraged to\n deliberately override certain bean definitions via an extra XML file.\n\n This is a simple, one-stop shop convenience ApplicationContext.\n Consider using the GenericApplicationContext class in combination\n with an XmlBeanDefinitionReader\n for more flexible context setup.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html
GenericApplicationContext	A										<section class="prog__container">Generic ApplicationContext implementation that holds a single internal\n DefaultListableBeanFactory\n instance and does not assume a specific bean definition format. Implements\n the BeanDefinitionRegistry\n interface in order to allow for applying any bean definition readers to it.\n\n Typical usage is to register a variety of bean definitions via the\n BeanDefinitionRegistry\n interface and then call AbstractApplicationContext.refresh() to initialize those beans\n with application context semantics (handling\n ApplicationContextAware, auto-detecting\n BeanFactoryPostProcessors,\n etc).\n\n In contrast to other ApplicationContext implementations that create a new\n internal BeanFactory instance for each refresh, the internal BeanFactory of\n this context is available right from the start, to be able to register bean\n definitions on it. AbstractApplicationContext.refresh() may only be called once.\n\n Usage example:\n\n \n GenericApplicationContext ctx = new GenericApplicationContext();\n XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);\n xmlReader.loadBeanDefinitions(new ClassPathResource("applicationContext.xml"));\n PropertiesBeanDefinitionReader propReader = new PropertiesBeanDefinitionReader(ctx);\n propReader.loadBeanDefinitions(new ClassPathResource("otherBeans.properties"));\n ctx.refresh();\n\n MyBean myBean = (MyBean) ctx.getBean("myBean");\n ...\n\n For the typical case of XML bean definitions, simply use\n ClassPathXmlApplicationContext or FileSystemXmlApplicationContext,\n which are easier to set up - but less flexible, since you can just use standard\n resource locations for XML bean definitions, rather than mixing arbitrary bean\n definition formats. The equivalent in a web environment is\n XmlWebApplicationContext.\n\n For custom application context implementations that are supposed to read\n special bean definition formats in a refreshable manner, consider deriving\n from the AbstractRefreshableApplicationContext base class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/GenericApplicationContext.html
GenericGroovyApplicationContext	A										<section class="prog__container">An ApplicationContext implementation that extends\n GenericApplicationContext and implements GroovyObject such that beans\n can be retrieved with the dot de-reference syntax instead of using AbstractApplicationContext.getBean(java.lang.String).\n\n Consider this as the equivalent of GenericXmlApplicationContext for\n Groovy bean definitions, or even an upgrade thereof since it seamlessly understands\n XML bean definition files as well. The main difference is that, within a Groovy\n script, the context can be used with an inline bean definition closure as follows:\n\n \n import org.hibernate.SessionFactory\n import org.apache.commons.dbcp.BasicDataSource\n\n def context = new GenericGroovyApplicationContext()\n context.reader.beans {\n     dataSource(BasicDataSource) {                  // <--- invokeMethod\n         driverClassName = "org.hsqldb.jdbcDriver"\n         url = "jdbc:hsqldb:mem:grailsDB"\n         username = "sa"                            // <-- setProperty\n         password = ""\n         settings = [mynew:"setting"]\n     }\n     sessionFactory(SessionFactory) {\n         dataSource = dataSource                    // <-- getProperty for retrieving references\n     }\n     myService(MyService) {\n         nestedBean = { AnotherBean bean ->         // <-- setProperty with closure for nested bean\n             dataSource = dataSource\n         }\n     }\n }\n context.refresh()\n \nAlternatively, load a Groovy bean definition script like the following\n from an external resource (e.g. an "applicationContext.groovy" file):\n\n \n import org.hibernate.SessionFactory\n import org.apache.commons.dbcp.BasicDataSource\n\n beans {\n     dataSource(BasicDataSource) {\n         driverClassName = "org.hsqldb.jdbcDriver"\n         url = "jdbc:hsqldb:mem:grailsDB"\n         username = "sa"\n         password = ""\n         settings = [mynew:"setting"]\n     }\n     sessionFactory(SessionFactory) {\n         dataSource = dataSource\n     }\n     myService(MyService) {\n         nestedBean = { AnotherBean bean ->\n             dataSource = dataSource\n         }\n     }\n }\n \nWith the following Java code creating the GenericGroovyApplicationContext\n (potentially using Ant-style '*'/'**' location patterns):\n\n \n GenericGroovyApplicationContext context = new GenericGroovyApplicationContext();\n context.load("org/myapp/applicationContext.groovy");\n context.refresh();\n \nOr even more concise, provided that no extra configuration is needed:\n\n \n ApplicationContext context = new GenericGroovyApplicationContext("org/myapp/applicationContext.groovy");\n \nThis application context also understands XML bean definition files,\n allowing for seamless mixing and matching with Groovy bean definition files.\n ".xml" files will be parsed as XML content; all other kinds of resources will\n be parsed as Groovy scripts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/GenericGroovyApplicationContext.html
GenericXmlApplicationContext	A										<section class="prog__container">Convenient application context with built-in XML support.\n This is a flexible alternative to ClassPathXmlApplicationContext\n and FileSystemXmlApplicationContext, to be configured via setters,\n with an eventual AbstractApplicationContext.refresh() call activating the context.\n\n In case of multiple configuration files, bean definitions in later files\n will override those defined in earlier files. This can be leveraged to\n deliberately override certain bean definitions via an extra configuration file.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/GenericXmlApplicationContext.html
LiveBeansView	A										<section class="prog__container">Adapter for live beans view exposure, building a snapshot of current beans\n and their dependencies from either a local ApplicationContext (with a\n local LiveBeansView bean definition) or all registered ApplicationContexts\n (driven by the "spring.liveBeansView.mbeanDomain" environment property).\n\n Note: This feature is still in beta and primarily designed for use with\n Spring Tool Suite 3.1 and higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/LiveBeansView.html
LiveBeansViewMBean	A										<section class="prog__container">MBean operation interface for the LiveBeansView feature.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/LiveBeansViewMBean.html
MessageSourceAccessor	A										<section class="prog__container">Helper class for easy access to messages from a MessageSource,\n providing various overloaded getMessage methods.\n\n Available from ApplicationObjectSupport, but also reusable\n as a standalone helper to delegate to in application objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/MessageSourceAccessor.html
MessageSourceResourceBundle	A										<section class="prog__container">Helper class that allows for accessing a Spring\n MessageSource as a ResourceBundle.\n Used for example to expose a Spring MessageSource to JSTL web views.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/MessageSourceResourceBundle.html
MessageSourceSupport	A										<section class="prog__container">Base class for message source implementations, providing support infrastructure\n such as MessageFormat handling but not implementing concrete\n methods defined in the MessageSource.\n\n AbstractMessageSource derives from this class, providing concrete\n getMessage implementations that delegate to a central template\n method for message code resolution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/MessageSourceSupport.html
PropertySourcesPlaceholderConfigurer	A										<section class="prog__container">Specialization of PlaceholderConfigurerSupport that resolves ${...} placeholders\n within bean definition property values and @Value annotations against the current\n Spring Environment and its set of PropertySources.\n\n This class is designed as a general replacement for PropertyPlaceholderConfigurer\n in Spring 3.1 applications. It is used by default to support the property-placeholder\n element in working against the spring-context-3.1 XSD, whereas spring-context versions\n <= 3.0 default to PropertyPlaceholderConfigurer to ensure backward compatibility.\n See the spring-context XSD documentation for complete details.\n\n Any local properties (e.g. those added via PropertiesLoaderSupport.setProperties(java.util.Properties), PropertiesLoaderSupport.setLocations(org.springframework.core.io.Resource...)\n et al.) are added as a PropertySource. Search precedence of local properties is\n based on the value of the localOverride property, which is by\n default false meaning that local properties are to be searched last, after all\n environment property sources.\n\n See ConfigurableEnvironment\n and related javadocs for details on manipulating environment property sources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html
ReloadableResourceBundleMessageSource	A										<section class="prog__container">Spring-specific MessageSource implementation\n that accesses resource bundles using specified basenames, participating in the\n Spring ApplicationContext's resource loading.\n\n In contrast to the JDK-based ResourceBundleMessageSource, this class uses\n Properties instances as its custom data structure for messages,\n loading them via a PropertiesPersister strategy\n from Spring Resource handles. This strategy is not only capable of\n reloading files based on timestamp changes, but also of loading properties files\n with a specific character encoding. It will detect XML property files as well.\n\n Note that the basenames set as "basenames" property\n are treated in a slightly different fashion than the "basenames" property of\n ResourceBundleMessageSource. It follows the basic ResourceBundle rule of not\n specifying file extension or language codes, but can refer to any Spring resource\n location (instead of being restricted to classpath resources). With a "classpath:"\n prefix, resources can still be loaded from the classpath, but "cacheSeconds" values\n other than "-1" (caching forever) might not work reliably in this case.\n\n For a typical web application, message files could be placed in WEB-INF:\n e.g. a "WEB-INF/messages" basename would find a "WEB-INF/messages.properties",\n "WEB-INF/messages_en.properties" etc arrangement as well as "WEB-INF/messages.xml",\n "WEB-INF/messages_en.xml" etc. Note that message definitions in a previous\n resource bundle will override ones in a later bundle, due to sequential lookup.\n\n This MessageSource can easily be used outside of an\n ApplicationContext: it will use a\n DefaultResourceLoader as default,\n simply getting overridden with the ApplicationContext's resource loader\n if running in a context. It does not have any other specific dependencies.\n\n Thanks to Thomas Achleitner for providing the initial implementation of\n this message source!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ReloadableResourceBundleMessageSource.html
ReloadableResourceBundleMessageSource.PropertiesHolder	A										<section class="prog__container">PropertiesHolder for caching.\n Stores the last-modified timestamp of the source file for efficient\n change detection, and the timestamp of the last refresh attempt\n (updated every time the cache entry gets re-validated).</section>	No URL found
ResourceBundleMessageSource	A										<section class="prog__container">MessageSource implementation that\n accesses resource bundles using specified basenames. This class relies\n on the underlying JDK's ResourceBundle implementation,\n in combination with the JDK's standard message parsing provided by\n MessageFormat.\n\n This MessageSource caches both the accessed ResourceBundle instances and\n the generated MessageFormats for each message. It also implements rendering of\n no-arg messages without MessageFormat, as supported by the AbstractMessageSource\n base class. The caching provided by this MessageSource is significantly faster\n than the built-in caching of the java.util.ResourceBundle class.\n\n The basenames follow ResourceBundle conventions: essentially,\n a fully-qualified classpath location. If it doesn't contain a package qualifier\n (such as org.mypackage), it will be resolved from the classpath root.\n Note that the JDK's standard ResourceBundle treats dots as package separators:\n This means that "test.theme" is effectively equivalent to "test/theme".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ResourceBundleMessageSource.html
SimpleThreadScope	A										<section class="prog__container">A simple thread-backed Scope implementation.\n\n NOTE: This thread scope is not registered by default in common contexts.\n Instead, you need to explicitly assign it to a scope key in your setup, either through\n ConfigurableBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)\n or through a CustomScopeConfigurer bean.\n\n SimpleThreadScope does not clean up any objects associated with it.\n As such, it is typically preferable to use\n RequestScope\n in web environments.\n\n For an implementation of a thread-based Scope with support for\n destruction callbacks, refer to the\n \n  Spring by Example Custom Thread Scope Module.\n\n Thanks to Eugene Kuleshov for submitting the original prototype for a thread scope!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/SimpleThreadScope.html
StaticApplicationContext	A										<section class="prog__container">ApplicationContext implementation\n which supports programmatic registration of beans and messages,\n rather than reading bean definitions from external configuration sources.\n Mainly useful for testing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/StaticApplicationContext.html
StaticMessageSource	A										<section class="prog__container">Simple implementation of MessageSource\n which allows messages to be registered programmatically.\n This MessageSource supports basic internationalization.\n\n Intended for testing rather than for use in production systems.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/StaticMessageSource.html
AspectJWeavingEnabler	A										<section class="prog__container">Post-processor that registers AspectJ's\n ClassPreProcessorAgentAdapter\n with the Spring application context's default\n LoadTimeWeaver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/weaving/AspectJWeavingEnabler.html
DefaultContextLoadTimeWeaver	A										<section class="prog__container">Default LoadTimeWeaver bean for use in an application context,\n decorating an automatically detected internal LoadTimeWeaver.\n\n Typically registered for the default bean name\n "loadTimeWeaver"; the most convenient way to achieve this is\n Spring's <context:load-time-weaver> XML tag.\n\n This class implements a runtime environment check for obtaining the\n appropriate weaver implementation: As of Spring 4.0, it detects Oracle WebLogic 10,\n GlassFish 3, Tomcat 6, 7 and 8, JBoss AS 5, 6 and 7, IBM WebSphere 7 and 8,\n Spring's VM agent, and any ClassLoader\n supported by Spring's ReflectiveLoadTimeWeaver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.html
LoadTimeWeaverAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the application context's default LoadTimeWeaver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/weaving/LoadTimeWeaverAware.html
LoadTimeWeaverAwareProcessor	A										<section class="prog__container">BeanPostProcessor\n implementation that passes the context's default LoadTimeWeaver\n to beans that implement the LoadTimeWeaverAware interface.\n\n Application contexts\n will automatically register this with their underlying bean factory,\n provided that a default LoadTimeWeaver is actually available.\n\n Applications should not use this class directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/weaving/LoadTimeWeaverAwareProcessor.html
AliasRegistry	A										<section class="prog__container">Common interface for managing aliases. Serves as super-interface for\n BeanDefinitionRegistry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/AliasRegistry.html
AttributeAccessor	A										<section class="prog__container">Interface defining a generic contract for attaching and accessing metadata\n to/from arbitrary objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/AttributeAccessor.html
AttributeAccessorSupport	A										<section class="prog__container">Support class for AttributeAccessors, providing\n a base implementation of all methods. To be extended by subclasses.\n\n Serializable if subclasses and all attribute values are Serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/AttributeAccessorSupport.html
BridgeMethodResolver	A										<section class="prog__container">Helper for resolving synthetic bridge Methods to the\n Method being bridged.\n\n Given a synthetic bridge Method returns the Method\n being bridged. A bridge method may be created by the compiler when extending a\n parameterized type whose methods have parameterized arguments. During runtime\n invocation the bridge Method may be invoked and/or used via reflection.\n When attempting to locate annotations on Methods, it is wise to check\n for bridge Methods as appropriate and find the bridged Method.\n\n See \n The Java Language Specification for more details on the use of bridge methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/BridgeMethodResolver.html
CollectionFactory	A										<section class="prog__container">Factory for collections that is aware of Java 5, Java 6, and Spring collection types.\n\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/CollectionFactory.html
ConfigurableObjectInputStream	A										<section class="prog__container">Special ObjectInputStream subclass that resolves class names\n against a specific ClassLoader. Serves as base class for\n CodebaseAwareObjectInputStream.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ConfigurableObjectInputStream.html
ConstantException	A										<section class="prog__container">Exception thrown when the Constants class is asked for\n an invalid constant name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ConstantException.html
Constants	A										<section class="prog__container">This class can be used to parse other classes containing constant definitions\n in public static final members. The asXXXX methods of this class\n allow these constant values to be accessed via their string names.\n\n Consider class Foo containing public final static int CONSTANT1 = 66;\n An instance of this class wrapping Foo.class will return the constant value\n of 66 from its asNumber method given the argument "CONSTANT1".\n\n This class is ideal for use in PropertyEditors, enabling them to\n recognize the same names as the constants themselves, and freeing them\n from maintaining their own mapping.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/Constants.html
ControlFlow	A										<section class="prog__container">Interface to be implemented by objects that can return information about\n the current call stack. Useful in AOP (as in AspectJ cflow concept)\n but not AOP-specific.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ControlFlow.html
ControlFlowFactory	A										<section class="prog__container">Static factory to conceal the automatic choice of the ControlFlow\n implementation class.\n\n This implementation always uses the efficient Java 1.4 StackTraceElement\n mechanism for analyzing control flows.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ControlFlowFactory.html
Conventions	A										<section class="prog__container">Provides methods to support various naming and other conventions used\n throughout the framework. Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/Conventions.html
DecoratingClassLoader	A										<section class="prog__container">Base class for decorating ClassLoaders such as OverridingClassLoader\n and ShadowingClassLoader,\n providing common handling of excluded packages and classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/DecoratingClassLoader.html
DecoratingProxy	A										<section class="prog__container">Interface to be implemented by decorating proxies, in particular Spring AOP\n proxies but potentially also custom proxies with decorator semantics.\n\n Note that this interface should just be implemented if the decorated class\n is not within the hierarchy of the proxy class to begin with. In particular,\n a "target-class" proxy such as a Spring AOP CGLIB proxy should not implement\n it since any lookup on the target class can simply be performed on the proxy\n class there anyway.\n\n Defined in the core module in order to allow\n #AnnotationAwareOrderComparator\n (and potential other candidates without spring-aop dependencies) to use it\n for introspection purposes, in particular annotation lookups.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/DecoratingProxy.html
DefaultParameterNameDiscoverer	A										<section class="prog__container">Default implementation of the ParameterNameDiscoverer strategy interface,\n using the Java 8 standard reflection mechanism (if available), and falling back\n to the ASM-based LocalVariableTableParameterNameDiscoverer for checking\n debug information in the class file.\n\n Further discoverers may be added through PrioritizedParameterNameDiscoverer.addDiscoverer(ParameterNameDiscoverer).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/DefaultParameterNameDiscoverer.html
ErrorCoded	A										<section class="prog__container">Interface that can be implemented by exceptions etc that are error coded.\n The error code is a String, rather than a number, so it can be given\n user-readable values, such as "object.failureDescription".\n\n An error code can be resolved by a MessageSource, for example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ErrorCoded.html
ExceptionDepthComparator	A										<section class="prog__container">Comparator capable of sorting exceptions based on their depth from the thrown exception type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ExceptionDepthComparator.html
GenericCollectionTypeResolver	A										<section class="prog__container">Helper class for determining element types of collections and maps.\n\n Mainly intended for usage within the framework, determining the\n target type of values to be added to a collection or map\n (to be able to attempt type conversion if appropriate).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/GenericCollectionTypeResolver.html
GenericTypeResolver	A										<section class="prog__container">Helper class for resolving generic types against type variables.\n\n Mainly intended for usage within the framework, resolving method\n parameter types even when they are declared generically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/GenericTypeResolver.html
InfrastructureProxy	A										<section class="prog__container">Interface to be implemented by transparent resource proxies that need to be\n considered as equal to the underlying resource, for example for consistent\n lookup key comparisons. Note that this interface does imply such special\n semantics and does not constitute a general-purpose mixin!\n\n Such wrappers will automatically be unwrapped for key comparisons in\n TransactionSynchronizationManager.\n\n Only fully transparent proxies, e.g. for redirection or service lookups,\n are supposed to implement this interface. Proxies that decorate the target\n object with new behavior, such as AOP proxies, do not qualify here!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/InfrastructureProxy.html
JdkVersion	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of direct checks for the desired\n JDK API variants via reflection\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/JdkVersion.html
LocalVariableTableParameterNameDiscoverer	A										<section class="prog__container">Implementation of ParameterNameDiscoverer that uses the LocalVariableTable\n information in the method attributes to discover parameter names. Returns\n null if the class file was compiled without debug information.\n\n Uses ObjectWeb's ASM library for analyzing class files. Each discoverer instance\n caches the ASM discovered information for each introspected Class, in a thread-safe\n manner. It is recommended to reuse ParameterNameDiscoverer instances as far as possible.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/LocalVariableTableParameterNameDiscoverer.html
MethodClassKey	A										<section class="prog__container">A common key class for a method against a specific target class,\n including toString() representation and Comparable\n support (as suggested for custom HashMap keys as of Java 8).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/MethodClassKey.html
MethodIntrospector	A										<section class="prog__container">Defines the algorithm for searching for metadata-associated methods exhaustively\n including interfaces and parent classes while also dealing with parameterized methods\n as well as common scenarios encountered with interface and class-based proxies.\n\n Typically, but not necessarily, used for finding annotated handler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/MethodIntrospector.html
MethodIntrospector.MetadataLookup	A										<section class="prog__container">A callback interface for metadata lookup on a given method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/MethodIntrospector.MetadataLookup.html
MethodParameter	A										<section class="prog__container">Helper class that encapsulates the specification of a method parameter, i.e. a Method\n or Constructor plus a parameter index and a nested type index for a declared generic\n type. Useful as a specification object to pass along.\n\n As of 4.2, there is a SynthesizingMethodParameter\n subclass available which synthesizes annotations with attribute aliases. That subclass is used\n for web and message endpoint processing, in particular.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/MethodParameter.html
NamedInheritableThreadLocal	A										<section class="prog__container">InheritableThreadLocal subclass that exposes a specified name\n as toString() result (allowing for introspection).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NamedInheritableThreadLocal.html
NamedThreadLocal	A										<section class="prog__container">ThreadLocal subclass that exposes a specified name\n as toString() result (allowing for introspection).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NamedThreadLocal.html
NestedCheckedException	A										<section class="prog__container">Handy class for wrapping checked Exceptions with a root cause.\n\n This class is abstract to force the programmer to extend\n the class. getMessage will include nested exception\n information; printStackTrace and other like methods will\n delegate to the wrapped exception, if any.\n\n The similarity between this class and the NestedRuntimeException\n class is unavoidable, as Java forces these two classes to have different\n superclasses (ah, the inflexibility of concrete inheritance!).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NestedCheckedException.html
NestedExceptionUtils	A										<section class="prog__container">Helper class for implementing exception classes which are capable of\n holding nested exceptions. Necessary because we can't share a base\n class among different exception types.\n\n Mainly for use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NestedExceptionUtils.html
NestedIOException	A										<section class="prog__container">Subclass of IOException that properly handles a root cause,\n exposing the root cause just like NestedChecked/RuntimeException does.\n\n Proper root cause handling has not been added to standard IOException before\n Java 6, which is why we need to do it ourselves for Java 5 compatibility purposes.\n\n The similarity between this class and the NestedChecked/RuntimeException\n class is unavoidable, as this class needs to derive from IOException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NestedIOException.html
NestedRuntimeException	A										<section class="prog__container">Handy class for wrapping runtime Exceptions with a root cause.\n\n This class is abstract to force the programmer to extend\n the class. getMessage will include nested exception\n information; printStackTrace and other like methods will\n delegate to the wrapped exception, if any.\n\n The similarity between this class and the NestedCheckedException\n class is unavoidable, as Java forces these two classes to have different\n superclasses (ah, the inflexibility of concrete inheritance!).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/NestedRuntimeException.html
OrderComparator	A										<section class="prog__container">Comparator implementation for Ordered objects, sorting\n by order value ascending, respectively by priority descending.\n\n Same Order Objects\nObjects that have the same order value will be sorted with arbitrary\n ordering with respect to other objects with the same order value.\n\n Non-ordered Objects\nAny object that does not provide its own order value is implicitly\n assigned a value of Ordered.LOWEST_PRECEDENCE, thus ending up\n at the end of a sorted collection in arbitrary order with respect to\n other objects with the same order value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/OrderComparator.html
OrderComparator.OrderSourceProvider	A										<section class="prog__container">Strategy interface to provide an order source for a given object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/OrderComparator.OrderSourceProvider.html
Ordered	A										<section class="prog__container">Ordered is an interface that can be implemented by objects that\n should be orderable, for example in a Collection.\n\n The actual order can be interpreted as prioritization,\n with the first object (with the lowest order value) having the highest\n priority.\n\n Note that there is also a priority marker for this interface:\n PriorityOrdered. Order values expressed by PriorityOrdered\n objects always apply before same order values expressed by plain\nOrdered objects.\n\n Consult the Javadoc for OrderComparator for details on the\n sort semantics for non-ordered objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/Ordered.html
OverridingClassLoader	A										<section class="prog__container">ClassLoader that does not always delegate to the parent loader\n as normal class loaders do. This enables, for example, instrumentation to be\n forced in the overriding ClassLoader, or a "throwaway" class loading behavior\n where selected application classes are temporarily loaded in the overriding\n ClassLoader for introspection purposes before eventually loading an\n instrumented version of the class in the given parent ClassLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/OverridingClassLoader.html
ParameterizedTypeReference	A										<section class="prog__container">The purpose of this class is to enable capturing and passing a generic\n Type. In order to capture the generic type and retain it at runtime,\n you need to create a subclass as follows:\n\n \n ParameterizedTypeReference<List<String>> typeRef = new ParameterizedTypeReference<List<String>>() {};\n \nThe resulting typeReference instance can then be used to obtain a\n Type instance that carries parameterized type information.\n For more information on "super type tokens" see the link to Neal Gafter's blog post.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ParameterizedTypeReference.html
ParameterNameDiscoverer	A										<section class="prog__container">Interface to discover parameter names for methods and constructors.\n\n Parameter name discovery is not always possible, but various strategies are\n available to try, such as looking for debug information that may have been\n emitted at compile time, and looking for argname annotation values optionally\n accompanying AspectJ annotated methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ParameterNameDiscoverer.html
PrioritizedParameterNameDiscoverer	A										<section class="prog__container">ParameterNameDiscoverer implementation that tries several ParameterNameDiscoverers\n in succession. Those added first in the addDiscoverer method have\n highest priority. If one returns null, the next will be tried.\n\n The default behavior is always to return null\n if no discoverer matches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/PrioritizedParameterNameDiscoverer.html
PriorityOrdered	A										<section class="prog__container">Extension of the Ordered interface, expressing a priority\n ordering: order values expressed by PriorityOrdered objects\n always apply before same order values expressed by plain\nOrdered objects.\n\n This is primarily a special-purpose interface, used for objects where\n it is particularly important to recognize prioritized objects\n first, without even obtaining the remaining objects. A typical example:\n prioritized post-processors in a Spring\n ApplicationContext.\n\n Note: PriorityOrdered post-processor beans are initialized in\n a special phase, ahead of other post-processor beans. This subtly\n affects their autowiring behavior: they will only be autowired against\n beans which do not require eager initialization for type matching.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/PriorityOrdered.html
ResolvableType	A										<section class="prog__container">Encapsulates a Java Type, providing access to\n supertypes, interfaces, and\n generic parameters along with the ability to ultimately\n resolve to a Class.\n\n ResolvableTypes may be obtained from fields,\n method parameters,\n method returns or\n classes. Most methods on this class will themselves return\n ResolvableTypes, allowing easy navigation. For example:\n \n private HashMap<Integer, List<String>> myMap;\n\n public void example() {\n     ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"));\n     t.getSuperType(); // AbstractMap<Integer, List<String>>\n     t.asMap(); // Map<Integer, List<String>>\n     t.getGeneric(0).resolve(); // Integer\n     t.getGeneric(1).resolve(); // List\n     t.getGeneric(1); // List<String>\n     t.resolveGeneric(1, 0); // String\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ResolvableType.html
ResolvableTypeProvider	A										<section class="prog__container">Any object can implement this interface to provide its actual ResolvableType.\n\n Such information is very useful when figuring out if the instance matches a generic\n signature as Java does not convey the signature at runtime.\n\n Users of this interface should be careful in complex hierarchy scenarios, especially\n when the generic type signature of the class changes in sub-classes. It is always\n possible to return null to fallback on a default behaviour.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/ResolvableTypeProvider.html
SimpleAliasRegistry	A										<section class="prog__container">Simple implementation of the AliasRegistry interface.\n Serves as base class for\n BeanDefinitionRegistry\n implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/SimpleAliasRegistry.html
SmartClassLoader	A										<section class="prog__container">Interface to be implemented by a reloading-aware ClassLoader\n (e.g. a Groovy-based ClassLoader). Detected for example by\n Spring's CGLIB proxy factory for making a caching decision.\n\n If a ClassLoader does not implement this interface,\n then all of the classes obtained from it should be considered\n as not reloadable (i.e. cacheable).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/SmartClassLoader.html
SpringProperties	A										<section class="prog__container">Static holder for local Spring properties, i.e. defined at the Spring library level.\n\n Reads a spring.properties file from the root of the Spring library classpath,\n and also allows for programmatically setting properties through setProperty(java.lang.String, java.lang.String).\n When checking a property, local entries are being checked first, then falling back\n to JVM-level system properties through a System.getProperty(java.lang.String) check.\n\n This is an alternative way to set Spring-related system properties such as\n "spring.getenv.ignore" and "spring.beaninfo.ignore", in particular for scenarios\n where JVM system properties are locked on the target platform (e.g. WebSphere).\n See setFlag(java.lang.String) for a convenient way to locally set such flags to "true".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/SpringProperties.html
SpringVersion	A										<section class="prog__container">Class that exposes the Spring version. Fetches the\n "Implementation-Version" manifest attribute from the jar file.\n\n Note that some ClassLoaders do not expose the package metadata,\n hence this class might not be able to determine the Spring version\n in all environments. Consider using a reflection-based check instead:\n For example, checking for the presence of a specific Spring 2.0\n method that you intend to call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/SpringVersion.html
StandardReflectionParameterNameDiscoverer	A										<section class="prog__container">ParameterNameDiscoverer implementation which uses JDK 8's reflection facilities\n for introspecting parameter names (based on the "-parameters" compiler flag).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/StandardReflectionParameterNameDiscoverer.html
AliasFor	A										<section class="prog__container">@AliasFor is an annotation that is used to declare aliases for\n annotation attributes.\n\n Usage Scenarios\n\nExplicit aliases within an annotation: within a single\n annotation, @AliasFor can be declared on a pair of attributes to\n signal that they are interchangeable aliases for each other.\nExplicit alias for attribute in meta-annotation: if the\n annotation() attribute of @AliasFor is set to a different\n annotation than the one that declares it, the attribute() is\n interpreted as an alias for an attribute in a meta-annotation (i.e., an\n explicit meta-annotation attribute override). This enables fine-grained\n control over exactly which attributes are overridden within an annotation\n hierarchy. In fact, with @AliasFor it is even possible to declare\n an alias for the value attribute of a meta-annotation.\nImplicit aliases within an annotation: if one or\n more attributes within an annotation are declared as attribute overrides\n for the same meta-annotation attribute (either directly or transitively),\n those attributes will be treated as a set of implicit aliases\n for each other, resulting in behavior analogous to that for explicit\n aliases within an annotation.\n\nUsage Requirements\nLike with any annotation in Java, the mere presence of @AliasFor\n on its own will not enforce alias semantics. For alias semantics to be\n enforced, annotations must be loaded via the utility methods in\n AnnotationUtils. Behind the scenes, Spring will synthesize\n an annotation by wrapping it in a dynamic proxy that transparently enforces\n attribute alias semantics for annotation attributes that are\n annotated with @AliasFor. Similarly, AnnotatedElementUtils\n supports explicit meta-annotation attribute overrides when @AliasFor\n is used within an annotation hierarchy. Typically you will not need to\n manually synthesize annotations on your own since Spring will do that for\n you transparently when looking up annotations on Spring-managed components.\n\n Implementation Requirements\n\nExplicit aliases within an annotation:\n \nEach attribute that makes up an aliased pair must be annotated with\n @AliasFor, and either attribute() or value() must\n reference the other attribute in the pair.\nAliased attributes must declare the same return type.\nAliased attributes must declare a default value.\nAliased attributes must declare the same default value.\nannotation() should not be declared.\n\n\nExplicit alias for attribute in meta-annotation:\n \nThe attribute that is an alias for an attribute in a meta-annotation\n must be annotated with @AliasFor, and attribute() must\n reference the attribute in the meta-annotation.\nAliased attributes must declare the same return type.\nannotation() must reference the meta-annotation.\nThe referenced meta-annotation must be meta-present on the\n annotation class that declares @AliasFor.\n\n\nImplicit aliases within an annotation:\n \nEach attribute that belongs to a set of implicit aliases must be\n annotated with @AliasFor, and attribute() must reference\n the same attribute in the same meta-annotation (either directly or\n transitively via other explicit meta-annotation attribute overrides\n within the annotation hierarchy).\nAliased attributes must declare the same return type.\nAliased attributes must declare a default value.\nAliased attributes must declare the same default value.\nannotation() must reference an appropriate meta-annotation.\nThe referenced meta-annotation must be meta-present on the\n annotation class that declares @AliasFor.\n\n\n\nExample: Explicit Aliases within an Annotation\nIn @ContextConfiguration, value and locations\n are explicit aliases for each other.\n\n  public @interface ContextConfiguration {\n\n    @AliasFor("locations")\n    String[] value() default {};\n\n    @AliasFor("value")\n    String[] locations() default {};\n\n    // ...\n }\nExample: Explicit Alias for Attribute in Meta-annotation\nIn @XmlTestConfig, xmlFiles is an explicit alias for\n locations in @ContextConfiguration. In other words,\n xmlFiles overrides the locations attribute in\n @ContextConfiguration.\n\n  @ContextConfiguration\n public @interface XmlTestConfig {\n\n    @AliasFor(annotation = ContextConfiguration.class, attribute = "locations")\n    String[] xmlFiles();\n }\nExample: Implicit Aliases within an Annotation\nIn @MyTestConfig, value, groovyScripts, and\n xmlFiles are all explicit meta-annotation attribute overrides for\n the locations attribute in @ContextConfiguration. These\n three attributes are therefore also implicit aliases for each other.\n\n  @ContextConfiguration\n public @interface MyTestConfig {\n\n    @AliasFor(annotation = ContextConfiguration.class, attribute = "locations")\n    String[] value() default {};\n\n    @AliasFor(annotation = ContextConfiguration.class, attribute = "locations")\n    String[] groovyScripts() default {};\n\n    @AliasFor(annotation = ContextConfiguration.class, attribute = "locations")\n    String[] xmlFiles() default {};\n }\nExample: Transitive Implicit Aliases within an Annotation\nIn @GroovyOrXmlTestConfig, groovy is an explicit\n override for the groovyScripts attribute in @MyTestConfig;\n whereas, xml is an explicit override for the locations\n attribute in @ContextConfiguration. Furthermore, groovy\n and xml are transitive implicit aliases for each other, since they\n both effectively override the locations attribute in\n @ContextConfiguration.\n\n  @MyTestConfig\n public @interface GroovyOrXmlTestConfig {\n\n    @AliasFor(annotation = MyTestConfig.class, attribute = "groovyScripts")\n    String[] groovy() default {};\n\n    @AliasFor(annotation = ContextConfiguration.class, attribute = "locations")\n    String[] xml() default {};\n }\nSpring Annotations Supporting Attribute Aliases\nAs of Spring Framework 4.2, several annotations within core Spring\n have been updated to use @AliasFor to configure their internal\n attribute aliases. Consult the Javadoc for individual annotations as well\n as the reference manual for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AliasFor.html
AnnotatedElementUtils	A										<section class="prog__container">General utility methods for finding annotations, meta-annotations, and\n repeatable annotations on AnnotatedElements.\n\n AnnotatedElementUtils defines the public API for Spring's\n meta-annotation programming model with support for annotation attribute\n overrides. If you do not need support for annotation attribute\n overrides, consider using AnnotationUtils instead.\n\n Note that the features of this class are not provided by the JDK's\n introspection facilities themselves.\n\n Annotation Attribute Overrides\nSupport for meta-annotations with attribute overrides in\n composed annotations is provided by all variants of the\n getMergedAnnotationAttributes(), getMergedAnnotation(),\n getAllMergedAnnotations(), getMergedRepeatableAnnotations(),\n findMergedAnnotationAttributes(), findMergedAnnotation(),\n findAllMergedAnnotations(), and findMergedRepeatableAnnotations()\n methods.\n\n Find vs. Get Semantics\nThe search algorithms used by methods in this class follow either\n find or get semantics. Consult the javadocs for each\n individual method for details on which search algorithm is used.\n\n Get semantics are limited to searching for annotations\n that are either present on an AnnotatedElement (i.e.,\n declared locally or inherited)\n or declared within the annotation hierarchy above the\n AnnotatedElement.\n\n Find semantics are much more exhaustive, providing\n get semantics plus support for the following:\n\n \nSearching on interfaces, if the annotated element is a class\n Searching on superclasses, if the annotated element is a class\n Resolving bridged methods, if the annotated element is a method\n Searching on methods in interfaces, if the annotated element is a method\n Searching on methods in superclasses, if the annotated element is a method\n \nSupport for @Inherited\nMethods following get semantics will honor the contract of\n Java's @Inherited annotation except\n that locally declared annotations (including custom composed annotations)\n will be favored over inherited annotations. In contrast, methods following\n find semantics will completely ignore the presence of\n @Inherited since the find search algorithm manually\n traverses type and method hierarchies and thereby implicitly supports\n annotation inheritance without the need for @Inherited.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AnnotatedElementUtils.html
AnnotationAttributes	A										<section class="prog__container">LinkedHashMap subclass representing annotation attribute\n key-value pairs as read by AnnotationUtils,\n AnnotatedElementUtils, and Spring's reflection- and ASM-based\n AnnotationMetadata implementations.\n\n Provides 'pseudo-reification' to avoid noisy Map generics in the calling\n code as well as convenience methods for looking up annotation attributes\n in a type-safe fashion.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AnnotationAttributes.html
AnnotationAwareOrderComparator	A										<section class="prog__container">AnnotationAwareOrderComparator is an extension of\n OrderComparator that supports Spring's\n Ordered interface as well as the\n @Order and @Priority\n annotations, with an order value provided by an Ordered\n instance overriding a statically defined annotation value (if any).\n\n Consult the Javadoc for OrderComparator for details on the\n sort semantics for non-ordered objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AnnotationAwareOrderComparator.html
AnnotationConfigurationException	A										<section class="prog__container">Thrown by AnnotationUtils and synthesized annotations\n if an annotation is improperly configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AnnotationConfigurationException.html
AnnotationUtils	A										<section class="prog__container">General utility methods for working with annotations, handling meta-annotations,\n bridge methods (which the compiler generates for generic declarations) as well\n as super methods (for optional annotation inheritance).\n\n Note that most of the features of this class are not provided by the\n JDK's introspection facilities themselves.\n\n As a general rule for runtime-retained annotations (e.g. for transaction\n control, authorization, or service exposure), always use the lookup methods\n on this class (e.g., findAnnotation(Method, Class),\n getAnnotation(Method, Class), and getAnnotations(Method))\n instead of the plain annotation lookup methods in the JDK. You can still\n explicitly choose between a get lookup on the given class level only\n (getAnnotation(Method, Class)) and a find lookup in the entire\n inheritance hierarchy of the given method (findAnnotation(Method, Class)).\n\n Terminology\n The terms directly present, indirectly present, and\n present have the same meanings as defined in the class-level\n Javadoc for AnnotatedElement (in Java 8).\n\n An annotation is meta-present on an element if the annotation\n is declared as a meta-annotation on some other annotation which is\n present on the element. Annotation A is meta-present\n on another annotation if A is either directly present or\n meta-present on the other annotation.\n\n Meta-annotation Support\nMost find*() methods and some get*() methods in this class\n provide support for finding annotations used as meta-annotations. Consult the\n javadoc for each method in this class for details. For fine-grained support for\n meta-annotations with attribute overrides in composed annotations,\n consider using AnnotatedElementUtils's more specific methods instead.\n\n Attribute Aliases\nAll public methods in this class that return annotations, arrays of\n annotations, or AnnotationAttributes transparently support attribute\n aliases configured via @AliasFor. Consult the various\n synthesizeAnnotation*(..) methods for details.\n\n Search Scope\nThe search algorithms used by methods in this class stop searching for\n an annotation once the first annotation of the specified type has been\n found. As a consequence, additional annotations of the specified type will\n be silently ignored.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/AnnotationUtils.html
Order	A										<section class="prog__container">@Order defines the sort order for an annotated component.\n\n The value() is optional and represents an order value as defined\n in the Ordered interface. Lower values have higher priority. The\n default value is Ordered.LOWEST_PRECEDENCE, indicating\n lowest priority (losing to any other specified order value).\n\n Since Spring 4.1, the standard Priority\n annotation can be used as a drop-in replacement for this annotation.\n\n NOTE: Annotation-based ordering is supported for specific kinds\n of components only — for example, for annotation-based AspectJ\n aspects. Ordering strategies within the Spring container, on the other\n hand, are typically based on the Ordered interface in order to\n allow for programmatically configurable ordering of each instance.\n\n Consult the Javadoc for OrderComparator for details on the sort semantics for non-ordered objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/Order.html
OrderUtils	A										<section class="prog__container">General utility for determining the order of an object based on its type declaration.\n Handles Spring's Order annotation as well as Priority.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/OrderUtils.html
SynthesizedAnnotation	A										<section class="prog__container">Marker interface implemented by synthesized annotation proxies.\n\n Used to detect whether an annotation has already been synthesized.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/SynthesizedAnnotation.html
SynthesizingMethodParameter	A										<section class="prog__container">A MethodParameter variant which synthesizes annotations that\n declare attribute aliases via @AliasFor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/annotation/SynthesizingMethodParameter.html
ConversionException	A										<section class="prog__container">Base class for exceptions thrown by the conversion system.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/ConversionException.html
ConversionFailedException	A										<section class="prog__container">Exception to be thrown when an actual type conversion attempt fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/ConversionFailedException.html
ConversionService	A										<section class="prog__container">A service interface for type conversion. This is the entry point into the convert system.\n Call convert(Object, Class) to perform a thread-safe type conversion using this system.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/ConversionService.html
ConverterNotFoundException	A										<section class="prog__container">Exception to be thrown when a suitable converter could not be found\n in a given conversion service.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/ConverterNotFoundException.html
Property	A										<section class="prog__container">A description of a JavaBeans Property that allows us to avoid a dependency on\n java.beans.PropertyDescriptor. The java.beans package\n is not available in a number of environments (e.g. Android, Java ME), so this is\n desirable for portability of Spring's core conversion facility.\n\n Used to build a TypeDescriptor from a property location.\n The built TypeDescriptor can then be used to convert from/to the property type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/Property.html
TypeDescriptor	A										<section class="prog__container">Context about a type to convert from or to.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/TypeDescriptor.html
ConditionalConverter	A										<section class="prog__container">Allows a Converter, GenericConverter or ConverterFactory to\n conditionally execute based on attributes of the source and target\nTypeDescriptor.\n\n Often used to selectively match custom conversion logic based on the presence of a\n field or class-level characteristic, such as an annotation or method. For example, when\n converting from a String field to a Date field, an implementation might return\n true if the target field has also been annotated with @DateTimeFormat.\n\n As another example, when converting from a String field to an Account field,\n an implementation might return true if the target Account class defines a\n public static findAccount(String) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/ConditionalConverter.html
ConditionalGenericConverter	A										<section class="prog__container">A GenericConverter that may conditionally execute based on attributes\n of the source and target TypeDescriptor.\n\n See ConditionalConverter for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/ConditionalGenericConverter.html
Converter	A										<section class="prog__container">A converter converts a source object of type S to a target of type T.\n\n Implementations of this interface are thread-safe and can be shared.\n\n Implementations may additionally implement ConditionalConverter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html
ConverterFactory	A										<section class="prog__container">A factory for "ranged" converters that can convert objects from S to subtypes of R.\n\n Implementations may additionally implement ConditionalConverter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/ConverterFactory.html
ConverterRegistry	A										<section class="prog__container">For registering converters with a type conversion system.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/ConverterRegistry.html
ConvertingComparator	A										<section class="prog__container">A Comparator that converts values before they are compared. The specified\n Converter will be used to convert each value before it passed to the underlying\n Comparator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/ConvertingComparator.html
GenericConverter.ConvertiblePair	A										<section class="prog__container">Holder for a source-to-target class pair.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/GenericConverter.ConvertiblePair.html
GenericConverter	A										<section class="prog__container">Generic converter interface for converting between two or more types.\n\n This is the most flexible of the Converter SPI interfaces, but also the most complex.\n It is flexible in that a GenericConverter may support converting between multiple source/target\n type pairs (see getConvertibleTypes(). In addition, GenericConverter implementations\n have access to source/target field context during the type conversion\n process. This allows for resolving source and target field metadata such as annotations and\n generics information, which can be used to influence the conversion logic.\n\n This interface should generally not be used when the simpler Converter or\n ConverterFactory interface is sufficient.\n\n Implementations may additionally implement ConditionalConverter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/GenericConverter.html
ConfigurableConversionService	A										<section class="prog__container">Configuration interface to be implemented by most if not all ConversionService\n types. Consolidates the read-only operations exposed by ConversionService and\n the mutating operations of ConverterRegistry to allow for convenient ad-hoc\n addition and removal of Converters through. The latter is particularly useful when working against a\n ConfigurableEnvironment\n instance in application context bootstrapping code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/support/ConfigurableConversionService.html
ConversionServiceFactory	A										<section class="prog__container">A factory for common ConversionService\n configurations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/support/ConversionServiceFactory.html
ConvertingPropertyEditorAdapter	A										<section class="prog__container">Adapter that exposes a PropertyEditor for any given\n ConversionService and specific target type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.html
DefaultConversionService	A										<section class="prog__container">A specialization of GenericConversionService configured by default with\n converters appropriate for most environments.\n\n Designed for direct instantiation but also exposes the static\n addDefaultConverters(ConverterRegistry) utility method for ad hoc use against any\n ConverterRegistry instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/support/DefaultConversionService.html
GenericConversionService	A										<section class="prog__container">Base ConversionService implementation suitable for use in most environments.\n Indirectly implements ConverterRegistry as registration API through the\n ConfigurableConversionService interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/support/GenericConversionService.html
AbstractEnvironment	A										<section class="prog__container">Abstract base class for Environment implementations. Supports the notion of\n reserved default profile names and enables specifying active and default profiles\n through the ACTIVE_PROFILES_PROPERTY_NAME and\n DEFAULT_PROFILES_PROPERTY_NAME properties.\n\n Concrete subclasses differ primarily on which PropertySource objects they\n add by default. AbstractEnvironment adds none. Subclasses should contribute\n property sources through the protected customizePropertySources(MutablePropertySources)\n hook, while clients should customize using ConfigurableEnvironment.getPropertySources()\n and working against the MutablePropertySources API.\n See ConfigurableEnvironment javadoc for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/AbstractEnvironment.html
AbstractPropertyResolver	A										<section class="prog__container">Abstract base class for resolving properties against any underlying source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/AbstractPropertyResolver.html
CommandLinePropertySource	A										<section class="prog__container">Abstract base class for PropertySource implementations backed by command line\n arguments. The parameterized type T represents the underlying source of command\n line options. This may be as simple as a String array in the case of\n SimpleCommandLinePropertySource, or specific to a particular API such as JOpt's\n OptionSet in the case of JOptCommandLinePropertySource.\n\n Purpose and General Usage\n\n For use in standalone Spring-based applications, i.e. those that are bootstrapped via\n a traditional main method accepting a String[] of arguments from the\n command line. In many cases, processing command-line arguments directly within the\n main method may be sufficient, but in other cases, it may be desirable to\n inject arguments as values into Spring beans. It is this latter set of cases in which\n a CommandLinePropertySource becomes useful. A CommandLinePropertySource\n will typically be added to the Environment of the Spring\n ApplicationContext, at which point all command line arguments become available\n through the PropertyResolver.getProperty(String) family of methods. For example:\n\n \n public static void main(String[] args) {\n     CommandLinePropertySource clps = ...;\n     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n     ctx.getEnvironment().getPropertySources().addFirst(clps);\n     ctx.register(AppConfig.class);\n     ctx.refresh();\n }\n\n With the bootstrap logic above, the AppConfig class may @Inject the\n Spring Environment and query it directly for properties:\n\n \n @Configuration\n public class AppConfig {\n\n     @Inject Environment env;\n\n     @Bean\n     public void DataSource dataSource() {\n         MyVendorDataSource dataSource = new MyVendorDataSource();\n         dataSource.setHostname(env.getProperty("db.hostname", "localhost"));\n         dataSource.setUsername(env.getRequiredProperty("db.username"));\n         dataSource.setPassword(env.getRequiredProperty("db.password"));\n         // ...\n         return dataSource;\n     }\n }\n\n Because the CommandLinePropertySource was added to the Environment's\n set of MutablePropertySources using the #addFirst method, it has\n highest search precedence, meaning that while "db.hostname" and other properties may\n exist in other property sources such as the system environment variables, it will be\n chosen from the command line property source first. This is a reasonable approach\n given that arguments specified on the command line are naturally more specific than\n those specified as environment variables.\n\n As an alternative to injecting the Environment, Spring's @Value\n annotation may be used to inject these properties, given that a PropertySourcesPropertyResolver bean has been registered, either directly or through\n using the <context:property-placeholder> element. For example:\n\n \n @Component\n public class MyComponent {\n\n     @Value("my.property:defaultVal")\n     private String myProperty;\n\n     public void getMyProperty() {\n         return this.myProperty;\n     }\n\n     // ...\n }\nWorking with option arguments\nIndividual command line arguments are represented as properties through the usual\n PropertySource.getProperty(String) and\n PropertySource.containsProperty(String) methods. For example, given the\n following command line:\n\n --o1=v1 --o2\n\n 'o1' and 'o2' are treated as "option arguments", and the following assertions would\n evaluate true:\n\n \n CommandLinePropertySource ps = ...\n assert ps.containsProperty("o1") == true;\n assert ps.containsProperty("o2") == true;\n assert ps.containsProperty("o3") == false;\n assert ps.getProperty("o1").equals("v1");\n assert ps.getProperty("o2").equals("");\n assert ps.getProperty("o3") == null;\n \n\n Note that the 'o2' option has no argument, but getProperty("o2") resolves to\n empty string ("") as opposed to null, while getProperty("o3")\n resolves to null because it was not specified. This behavior is consistent with\n the general contract to be followed by all PropertySource implementations.\n\n Note also that while "--" was used in the examples above to denote an option\n argument, this syntax may vary across individual command line argument libraries. For\n example, a JOpt- or Commons CLI-based implementation may allow for single dash ("-")\n "short" option arguments, etc.\n\n Working with non-option arguments\nNon-option arguments are also supported through this abstraction. Any arguments\n supplied without an option-style prefix such as "-" or "--" are considered "non-option\n arguments" and available through the special "nonOptionArgs" property.  If multiple\n non-option arguments are specified, the value of this property will be a\n comma-delimited string containing all of the arguments. This approach ensures a simple\n and consistent return type (String) for all properties from a CommandLinePropertySource and at the same time lends itself to conversion when used\n in conjunction with the Spring Environment and its built-in ConversionService. Consider the following example:\n\n --o1=v1 --o2=v2 /path/to/file1 /path/to/file2\n\n In this example, "o1" and "o2" would be considered "option arguments", while the two\n filesystem paths qualify as "non-option arguments".  As such, the following assertions\n will evaluate true:\n\n \n CommandLinePropertySource ps = ...\n assert ps.containsProperty("o1") == true;\n assert ps.containsProperty("o2") == true;\n assert ps.containsProperty("nonOptionArgs") == true;\n assert ps.getProperty("o1").equals("v1");\n assert ps.getProperty("o2").equals("v2");\n assert ps.getProperty("nonOptionArgs").equals("/path/to/file1,/path/to/file2");\n \nAs mentioned above, when used in conjunction with the Spring Environment\n abstraction, this comma-delimited string may easily be converted to a String array or\n list:\n\n \n Environment env = applicationContext.getEnvironment();\n String[] nonOptionArgs = env.getProperty("nonOptionArgs", String[].class);\n assert nonOptionArgs[0].equals("/path/to/file1");\n assert nonOptionArgs[1].equals("/path/to/file2");\n \nThe name of the special "non-option arguments" property may be customized through\n the setNonOptionArgsPropertyName(String) method. Doing so is recommended as\n it gives proper semantic value to non-option arguments. For example, if filesystem\n paths are being specified as non-option arguments, it is likely preferable to refer to\n these as something like "file.locations" than the default of "nonOptionArgs":\n\n \n public static void main(String[] args) {\n     CommandLinePropertySource clps = ...;\n     clps.setNonOptionArgsPropertyName("file.locations");\n\n     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n     ctx.getEnvironment().getPropertySources().addFirst(clps);\n     ctx.register(AppConfig.class);\n     ctx.refresh();\n }\nLimitations\n\n This abstraction is not intended to expose the full power of underlying command line\n parsing APIs such as JOpt or Commons CLI. It's intent is rather just the opposite: to\n provide the simplest possible abstraction for accessing command line arguments\n after they have been parsed. So the typical case will involve fully configuring\n the underlying command line parsing API, parsing the String[] of arguments\n coming into the main method, and then simply providing the parsing results to an\n implementation of CommandLinePropertySource. At that point, all arguments can\n be considered either 'option' or 'non-option' arguments and as described above can be\n accessed through the normal PropertySource and Environment APIs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/CommandLinePropertySource.html
CompositePropertySource	A										<section class="prog__container">Composite PropertySource implementation that iterates over a set of\n PropertySource instances. Necessary in cases where multiple property sources\n share the same name, e.g. when multiple values are supplied to @PropertySource.\n\n As of Spring 4.1.2, this class extends EnumerablePropertySource instead\n of plain PropertySource, exposing getPropertyNames() based on the\n accumulated property names from all contained sources (as far as possible).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/CompositePropertySource.html
ConfigurableEnvironment	A										<section class="prog__container">Configuration interface to be implemented by most if not all Environment types.\n Provides facilities for setting active and default profiles and manipulating underlying\n property sources. Allows clients to set and validate required properties, customize the\n conversion service and more through the ConfigurablePropertyResolver\n superinterface.\n\n Manipulating property sources\nProperty sources may be removed, reordered, or replaced; and additional\n property sources may be added using the MutablePropertySources\n instance returned from getPropertySources(). The following examples\n are against the StandardEnvironment implementation of\n ConfigurableEnvironment, but are generally applicable to any implementation,\n though particular default property sources may differ.\n\n Example: adding a new property source with highest search priority\n\n   ConfigurableEnvironment environment = new StandardEnvironment();\n   MutablePropertySources propertySources = environment.getPropertySources();\n   Map myMap = new HashMap();\n   myMap.put("xyz", "myValue");\n   propertySources.addFirst(new MapPropertySource("MY_MAP", myMap));\n \nExample: removing the default system properties property source\n\n   MutablePropertySources propertySources = environment.getPropertySources();\n   propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME)\n \nExample: mocking the system environment for testing purposes\n\n   MutablePropertySources propertySources = environment.getPropertySources();\n   MockPropertySource mockEnvVars = new MockPropertySource().withProperty("xyz", "myValue");\n   propertySources.replace(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, mockEnvVars);\n \n\n When an Environment is being used by an ApplicationContext, it is\n important that any such PropertySource manipulations be performed\n before the context's refresh()\n method is called. This ensures that all property sources are available during the\n container bootstrap process, including use by property\n placeholder configurers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/ConfigurableEnvironment.html
ConfigurablePropertyResolver	A										<section class="prog__container">Configuration interface to be implemented by most if not all PropertyResolver\n types. Provides facilities for accessing and customizing the\n ConversionService\n used when converting property values from one type to another.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/ConfigurablePropertyResolver.html
EnumerablePropertySource	A										<section class="prog__container">A PropertySource implementation capable of interrogating its\n underlying source object to enumerate all possible property name/value\n pairs. Exposes the getPropertyNames() method to allow callers\n to introspect available properties without having to access the underlying\n source object. This also facilitates a more efficient implementation of\n containsProperty(String), in that it can call getPropertyNames()\n and iterate through the returned array rather than attempting a call to\n PropertySource.getProperty(String) which may be more expensive. Implementations may\n consider caching the result of getPropertyNames() to fully exploit this\n performance opportunity.\n\n Most framework-provided PropertySource implementations are enumerable;\n a counter-example would be JndiPropertySource where, due to the\n nature of JNDI it is not possible to determine all possible property names at\n any given time; rather it is only possible to try to access a property\n (via PropertySource.getProperty(String)) in order to evaluate whether it is present\n or not.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/EnumerablePropertySource.html
Environment	A										<section class="prog__container">Interface representing the environment in which the current application is running.\n Models two key aspects of the application environment: profiles and\n properties. Methods related to property access are exposed via the\n PropertyResolver superinterface.\n\n A profile is a named, logical group of bean definitions to be registered\n with the container only if the given profile is active. Beans may be assigned\n to a profile whether defined in XML or via annotations; see the spring-beans 3.1 schema\n or the @Profile annotation for\n syntax details. The role of the Environment object with relation to profiles is\n in determining which profiles (if any) are currently active, and which profiles (if any) should be active\n by default.\n\n Properties play an important role in almost all applications, and may\n originate from a variety of sources: properties files, JVM system properties, system\n environment variables, JNDI, servlet context parameters, ad-hoc Properties objects,\n Maps, and so on. The role of the environment object with relation to properties is to\n provide the user with a convenient service interface for configuring property sources\n and resolving properties from them.\n\n Beans managed within an ApplicationContext may register to be EnvironmentAware or @Inject the\n Environment in order to query profile state or resolve properties directly.\n\n In most cases, however, application-level beans should not need to interact with the\n Environment directly but instead may have to have ${...} property\n values replaced by a property placeholder configurer such as\n PropertySourcesPlaceholderConfigurer, which itself is EnvironmentAware and\n as of Spring 3.1 is registered by default when using\n <context:property-placeholder/>.\n\n Configuration of the environment object must be done through the\n ConfigurableEnvironment interface, returned from all\n AbstractApplicationContext subclass getEnvironment() methods. See\n ConfigurableEnvironment Javadoc for usage examples demonstrating manipulation\n of property sources prior to application context refresh().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/Environment.html
EnvironmentCapable	A										<section class="prog__container">Interface indicating a component that contains and exposes an Environment reference.\n\n All Spring application contexts are EnvironmentCapable, and the interface is used primarily\n for performing instanceof checks in framework methods that accept BeanFactory\n instances that may or may not actually be ApplicationContext instances in order to interact\n with the environment if indeed it is available.\n\n As mentioned, ApplicationContext\n extends EnvironmentCapable, and thus exposes a getEnvironment() method; however,\n ConfigurableApplicationContext\n redefines getEnvironment() and narrows the signature to return a ConfigurableEnvironment.\n The effect is that an Environment object is 'read-only' until it is being accessed from\n a ConfigurableApplicationContext, at which point it too may be configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/EnvironmentCapable.html
JOptCommandLinePropertySource	A										<section class="prog__container">CommandLinePropertySource implementation backed by a JOpt OptionSet.\n\n Typical usage\n Configure and execute an OptionParser against the String[] of arguments\n supplied to the main method, and create a JOptCommandLinePropertySource\n using the resulting OptionSet object:\n \n public static void main(String[] args) {\n     OptionParser parser = new OptionParser();\n     parser.accepts("option1");\n     parser.accepts("option2").withRequiredArg();\n     OptionSet options = parser.parse(args);\n     PropertySource ps = new JOptCommandLinePropertySource(options);\n     // ...\n }\n\n See CommandLinePropertySource for complete general usage examples.\n\n Requires JOpt version 4.3 or higher. Tested against JOpt up until 4.6.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/JOptCommandLinePropertySource.html
MapPropertySource	A										<section class="prog__container">PropertySource that reads keys and values from a Map object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/MapPropertySource.html
MissingRequiredPropertiesException	A										<section class="prog__container">Exception thrown when required properties are not found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/MissingRequiredPropertiesException.html
MutablePropertySources	A										<section class="prog__container">Default implementation of the PropertySources interface.\n Allows manipulation of contained property sources and provides a constructor\n for copying an existing PropertySources instance.\n\n Where precedence is mentioned in methods such as addFirst(org.springframework.core.env.PropertySource<?>)\n and addLast(org.springframework.core.env.PropertySource<?>), this is with regard to the order in which property sources\n will be searched when resolving a given property with a PropertyResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/MutablePropertySources.html
PropertiesPropertySource	A										<section class="prog__container">PropertySource implementation that extracts properties from a\n Properties object.\n\n Note that because a Properties object is technically an\n <Object, Object> Hashtable, one may contain\n non-String keys or values. This implementation, however is restricted to\n accessing only String-based keys and values, in the same fashion as\n Properties.getProperty(java.lang.String) and Properties.setProperty(java.lang.String, java.lang.String).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertiesPropertySource.html
PropertyResolver	A										<section class="prog__container">Interface for resolving properties against any underlying source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertyResolver.html
PropertySource	A										<section class="prog__container">Abstract base class representing a source of name/value property pairs. The underlying\n source object may be of any type T that encapsulates\n properties. Examples include Properties objects, Map\n objects, ServletContext and ServletConfig objects (for access to init\n parameters). Explore the PropertySource type hierarchy to see provided\n implementations.\n\n PropertySource objects are not typically used in isolation, but rather\n through a PropertySources object, which aggregates property sources and in\n conjunction with a PropertyResolver implementation that can perform\n precedence-based searches across the set of PropertySources.\n\n PropertySource identity is determined not based on the content of\n encapsulated properties, but rather based on the name of the\n PropertySource alone. This is useful for manipulating PropertySource\n objects when in collection contexts. See operations in MutablePropertySources\n as well as the named(String) and toString() methods for details.\n\n Note that when working with @Configuration classes that\n the @PropertySource\n annotation provides a convenient and declarative way of adding property sources to the\n enclosing Environment.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertySource.html
PropertySource.StubPropertySource	A										<section class="prog__container">PropertySource to be used as a placeholder in cases where an actual\n property source cannot be eagerly initialized at application context\n creation time.  For example, a ServletContext-based property source\n must wait until the ServletContext object is available to its enclosing\n ApplicationContext.  In such cases, a stub should be used to hold the\n intended default position/order of the property source, then be replaced\n during context refresh.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertySource.StubPropertySource.html
PropertySources	A										<section class="prog__container">Holder containing one or more PropertySource objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertySources.html
PropertySourcesPropertyResolver	A										<section class="prog__container">PropertyResolver implementation that resolves property values against\n an underlying set of PropertySources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertySourcesPropertyResolver.html
SimpleCommandLinePropertySource	A										<section class="prog__container">CommandLinePropertySource implementation backed by a simple String array.\n\n Purpose\n This CommandLinePropertySource implementation aims to provide the simplest\n possible approach to parsing command line arguments.  As with all CommandLinePropertySource implementations, command line arguments are broken into two\n distinct groups: option arguments and non-option arguments, as\n described below (some sections copied from Javadoc for SimpleCommandLineArgsParser):\n\n Working with option arguments\n Option arguments must adhere to the exact syntax:\n --optName[=optValue]\n That is, options must be prefixed with "--", and may or may not specify a value.\n If a value is specified, the name and value must be separated without spaces\n by an equals sign ("=").\n\n Valid examples of option arguments\n\n --foo\n --foo=bar\n --foo="bar then baz"\n --foo=bar,baz,biz\nInvalid examples of option arguments\n\n -foo\n --foo bar\n --foo = bar\n --foo=bar --foo=baz --foo=biz\nWorking with non-option arguments\n Any and all arguments specified at the command line without the "--" option\n prefix will be considered as "non-option arguments" and made available through the\n getNonOptionArgs() method.\n\n Typical usage\n\n public static void main(String[] args) {\n     PropertySource ps = new SimpleCommandLinePropertySource(args);\n     // ...\n }\n\n See CommandLinePropertySource for complete general usage examples.\n\n Beyond the basics\nWhen more fully-featured command line parsing is necessary, consider using\n the provided JOptCommandLinePropertySource, or implement your own\n CommandLinePropertySource against the command line parsing library of your\n choice!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/SimpleCommandLinePropertySource.html
StandardEnvironment	A										<section class="prog__container">Environment implementation suitable for use in 'standard' (i.e. non-web)\n applications.\n\n In addition to the usual functions of a ConfigurableEnvironment such as\n property resolution and profile-related operations, this implementation configures two\n default property sources, to be searched in the following order:\n \nsystem properties\nsystem environment variables\n\n\n That is, if the key "xyz" is present both in the JVM system properties as well as in\n the set of environment variables for the current process, the value of key "xyz" from\n system properties will return from a call to environment.getProperty("xyz").\n This ordering is chosen by default because system properties are per-JVM, while\n environment variables may be the same across many JVMs on a given system.  Giving\n system properties precedence allows for overriding of environment variables on a\n per-JVM basis.\n\n These default property sources may be removed, reordered, or replaced; and\n additional property sources may be added using the MutablePropertySources\n instance available from AbstractEnvironment.getPropertySources(). See\n ConfigurableEnvironment Javadoc for usage examples.\n\n See SystemEnvironmentPropertySource javadoc for details on special handling\n of property names in shell environments (e.g. Bash) that disallow period characters in\n variable names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/StandardEnvironment.html
SystemEnvironmentPropertySource	A										<section class="prog__container">Specialization of MapPropertySource designed for use with\n system environment variables.\n Compensates for constraints in Bash and other shells that do not allow for variables\n containing the period character and/or hyphen character; also allows for uppercase\n variations on property names for more idiomatic shell use.\n\n For example, a call to getProperty("foo.bar") will attempt to find a value\n for the original property or any 'equivalent' property, returning the first found:\n \nfoo.bar - the original name\nfoo_bar - with underscores for periods (if any)\nFOO.BAR - original, with upper case\nFOO_BAR - with underscores and upper case\n\n Any hyphen variant of the above would work as well, or even mix dot/hyphen variants.\n\n The same applies for calls to containsProperty(String), which returns\n true if any of the above properties are present, otherwise false.\n\n This feature is particularly useful when specifying active or default profiles as\n environment variables. The following is not allowable under Bash:\n\n spring.profiles.active=p1 java -classpath ... MyApp\n\n However, the following syntax is permitted and is also more conventional:\n\n SPRING_PROFILES_ACTIVE=p1 java -classpath ... MyApp\nEnable debug- or trace-level logging for this class (or package) for messages\n explaining when these 'property name resolutions' occur.\n\n This property source is included by default in StandardEnvironment\n and all its subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/SystemEnvironmentPropertySource.html
AbstractFileResolvingResource	A										<section class="prog__container">Abstract base class for resources which resolve URLs into File references,\n such as UrlResource or ClassPathResource.\n\n Detects the "file" protocol as well as the JBoss "vfs" protocol in URLs,\n resolving file system references accordingly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/AbstractFileResolvingResource.html
AbstractResource	A										<section class="prog__container">Convenience base class for Resource implementations,\n pre-implementing typical behavior.\n\n The "exists" method will check whether a File or InputStream can\n be opened; "isOpen" will always return false; "getURL" and "getFile"\n throw an exception; and "toString" will return the description.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/AbstractResource.html
ByteArrayResource	A										<section class="prog__container">Resource implementation for a given byte array.\n Creates a ByteArrayInputStream for the given byte array.\n\n Useful for loading content from any given byte array,\n without having to resort to a single-use InputStreamResource.\n Particularly useful for creating mail attachments from local content,\n where JavaMail needs to be able to read the stream multiple times.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ByteArrayResource.html
ClassPathResource	A										<section class="prog__container">Resource implementation for class path resources. Uses either a\n given ClassLoader or a given Class for loading resources.\n\n Supports resolution as java.io.File if the class path\n resource resides in the file system, but not for resources in a JAR.\n Always supports resolution as URL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ClassPathResource.html
ClassRelativeResourceLoader	A										<section class="prog__container">ResourceLoader implementation that interprets plain resource paths\n as relative to a given java.lang.Class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ClassRelativeResourceLoader.html
ContextResource	A										<section class="prog__container">Extended interface for a resource that is loaded from an enclosing\n 'context', e.g. from a ServletContext or a\n PortletContext but also from plain classpath paths\n or relative file system paths (specified without an explicit prefix,\n hence applying relative to the local ResourceLoader's context).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ContextResource.html
DefaultResourceLoader.ClassPathContextResource	A										<section class="prog__container">ClassPathResource that explicitly expresses a context-relative path\n through implementing the ContextResource interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/DefaultResourceLoader.ClassPathContextResource.html
DefaultResourceLoader	A										<section class="prog__container">Default implementation of the ResourceLoader interface.\n Used by ResourceEditor, and serves as base class for\n AbstractApplicationContext.\n Can also be used standalone.\n\n Will return a UrlResource if the location value is a URL,\n and a ClassPathResource if it is a non-URL path or a\n "classpath:" pseudo-URL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/DefaultResourceLoader.html
DescriptiveResource	A										<section class="prog__container">Simple Resource implementation that holds a resource description\n but does not point to an actually readable resource.\n\n To be used as placeholder if a Resource argument is\n expected by an API but not necessarily used for actual reading.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/DescriptiveResource.html
FileSystemResource	A										<section class="prog__container">Resource implementation for java.io.File handles.\n Supports resolution as a File and also as a URL.\n Implements the extended WritableResource interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/FileSystemResource.html
FileSystemResourceLoader	A										<section class="prog__container">ResourceLoader implementation that resolves plain paths as\n file system resources rather than as class path resources\n (the latter is DefaultResourceLoader's default strategy).\n\n NOTE: Plain paths will always be interpreted as relative\n to the current VM working directory, even if they start with a slash.\n (This is consistent with the semantics in a Servlet container.)\n Use an explicit "file:" prefix to enforce an absolute file path.\nFileSystemXmlApplicationContext\n is a full-fledged ApplicationContext implementation that provides\n the same resource path resolution strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/FileSystemResourceLoader.html
InputStreamResource	A										<section class="prog__container">Resource implementation for a given InputStream.\n Should only be used if no other specific Resource implementation\n is applicable. In particular, prefer ByteArrayResource or any of the\n file-based Resource implementations where possible.\n\n In contrast to other Resource implementations, this is a descriptor\n for an already opened resource - therefore returning true from\n isOpen(). Do not use an InputStreamResource if you need to\n keep the resource descriptor somewhere, or if you need to read from a stream\n multiple times.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/InputStreamResource.html
InputStreamSource	A										<section class="prog__container">Simple interface for objects that are sources for an InputStream.\n\n This is the base interface for Spring's more extensive Resource interface.\n\n For single-use streams, InputStreamResource can be used for any\n given InputStream. Spring's ByteArrayResource or any\n file-based Resource implementation can be used as a concrete\n instance, allowing one to read the underlying content stream multiple times.\n This makes this interface useful as an abstract content source for mail\n attachments, for example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/InputStreamSource.html
PathResource	A										<section class="prog__container">Resource implementation for java.nio.file.Path handles.\n Supports resolution as File, and also as URL.\n Implements the extended WritableResource interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/PathResource.html
ProtocolResolver	A										<section class="prog__container">A resolution strategy for protocol-specific resource handles.\n\n Used as an SPI for DefaultResourceLoader, allowing for\n custom protocols to be handled without subclassing the loader\n implementation (or application context implementation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ProtocolResolver.html
Resource	A										<section class="prog__container">Interface for a resource descriptor that abstracts from the actual\n type of underlying resource, such as a file or class path resource.\n\n An InputStream can be opened for every resource if it exists in\n physical form, but a URL or File handle can just be returned for\n certain resources. The actual behavior is implementation-specific.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/Resource.html
ResourceEditor	A										<section class="prog__container">Editor for Resource\n descriptors, to automatically convert String locations\n e.g. file:C:/myfile.txt or classpath:myfile.txt to\n Resource properties instead of using a String location property.\n\n The path may contain ${...} placeholders, to be\n resolved as Environment properties:\n e.g. ${user.dir}. Unresolvable placeholders are ignored by default.\n\n Delegates to a ResourceLoader to do the heavy lifting,\n by default using a DefaultResourceLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ResourceEditor.html
ResourceLoader	A										<section class="prog__container">Strategy interface for loading resources (e.. class path or file system\n resources). An ApplicationContext\n is required to provide this functionality, plus extended\n ResourcePatternResolver support.\n\n DefaultResourceLoader is a standalone implementation that is\n usable outside an ApplicationContext, also used by ResourceEditor.\n\n Bean properties of type Resource and Resource array can be populated\n from Strings when running in an ApplicationContext, using the particular\n context's resource loading strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ResourceLoader.html
UrlResource	A										<section class="prog__container">Resource implementation for java.net.URL locators.\n Supports resolution as a URL and also as a File in\n case of the "file:" protocol.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/UrlResource.html
VfsResource	A										<section class="prog__container">JBoss VFS based Resource implementation.\n\n As of Spring 4.0, this class supports VFS 3.x on JBoss AS 6+ (package\n org.jboss.vfs) and is in particular compatible with JBoss AS 7 and\n WildFly 8.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/VfsResource.html
VfsUtils	A										<section class="prog__container">Utility for detecting and accessing JBoss VFS in the classpath.\n\n As of Spring 4.0, this class supports VFS 3.x on JBoss AS 6+ (package\n org.jboss.vfs) and is in particular compatible with JBoss AS 7 and\n WildFly 8.\n\n Thanks go to Marius Bogoevici for the initial patch.\n Note: This is an internal class and should not be used outside the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/VfsUtils.html
WritableResource	A										<section class="prog__container">Extended interface for a resource that supports writing to it.\n Provides an OutputStream accessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/WritableResource.html
DefaultPropertySourceFactory	A										<section class="prog__container">The default implementation for PropertySourceFactory,\n wrapping every resource in a ResourcePropertySource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/DefaultPropertySourceFactory.html
EncodedResource	A										<section class="prog__container">Holder that combines a Resource descriptor with a specific encoding\n or Charset to be used for reading from the resource.\n\n Used as an argument for operations that support reading content with\n a specific encoding, typically via a java.io.Reader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/EncodedResource.html
LocalizedResourceHelper	A										<section class="prog__container">Helper class for loading a localized resource,\n specified through name, extension and current locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/LocalizedResourceHelper.html
PathMatchingResourcePatternResolver	A										<section class="prog__container">A ResourcePatternResolver implementation that is able to resolve a\n specified resource location path into one or more matching Resources.\n The source path may be a simple path which has a one-to-one mapping to a\n target Resource, or alternatively\n may contain the special "classpath*:" prefix and/or\n internal Ant-style regular expressions (matched using Spring's\n AntPathMatcher utility).\n Both of the latter are effectively wildcards.\n\n No Wildcards:\nIn the simple case, if the specified location path does not start with the\n "classpath*:" prefix, and does not contain a PathMatcher pattern,\n this resolver will simply return a single resource via a\n getResource() call on the underlying ResourceLoader.\n Examples are real URLs such as "file:C:/context.xml", pseudo-URLs\n such as "classpath:/context.xml", and simple unprefixed paths\n such as "/WEB-INF/context.xml". The latter will resolve in a\n fashion specific to the underlying ResourceLoader (e.g.\n ServletContextResource for a WebApplicationContext).\n\n Ant-style Patterns:\nWhen the path location contains an Ant-style pattern, e.g.:\n \n /WEB-INF/*-context.xml\n com/mycompany/**/applicationContext.xml\n file:C:/some/path/*-context.xml\n classpath:com/mycompany/**/applicationContext.xml\n the resolver follows a more complex but defined procedure to try to resolve\n the wildcard. It produces a Resource for the path up to the last\n non-wildcard segment and obtains a URL from it. If this URL is\n not a "jar:" URL or container-specific variant (e.g.\n "zip:" in WebLogic, "wsjar" in WebSphere", etc.),\n then a java.io.File is obtained from it, and used to resolve the\n wildcard by walking the filesystem. In the case of a jar URL, the resolver\n either gets a java.net.JarURLConnection from it, or manually parses\n the jar URL, and then traverses the contents of the jar file, to resolve the\n wildcards.\n\n Implications on portability:\nIf the specified path is already a file URL (either explicitly, or\n implicitly because the base ResourceLoader is a filesystem one,\n then wildcarding is guaranteed to work in a completely portable fashion.\n\n If the specified path is a classpath location, then the resolver must\n obtain the last non-wildcard path segment URL via a\n Classloader.getResource() call. Since this is just a\n node of the path (not the file at the end) it is actually undefined\n (in the ClassLoader Javadocs) exactly what sort of a URL is returned in\n this case. In practice, it is usually a java.io.File representing\n the directory, where the classpath resource resolves to a filesystem\n location, or a jar URL of some sort, where the classpath resource resolves\n to a jar location. Still, there is a portability concern on this operation.\n\n If a jar URL is obtained for the last non-wildcard segment, the resolver\n must be able to get a java.net.JarURLConnection from it, or\n manually parse the jar URL, to be able to walk the contents of the jar,\n and resolve the wildcard. This will work in most environments, but will\n fail in others, and it is strongly recommended that the wildcard\n resolution of resources coming from jars be thoroughly tested in your\n specific environment before you rely on it.\n\n classpath*: Prefix:\nThere is special support for retrieving multiple class path resources with\n the same name, via the "classpath*:" prefix. For example,\n "classpath*:META-INF/beans.xml" will find all "beans.xml"\n files in the class path, be it in "classes" directories or in JAR files.\n This is particularly useful for autodetecting config files of the same name\n at the same location within each jar file. Internally, this happens via a\n ClassLoader.getResources() call, and is completely portable.\n\n The "classpath*:" prefix can also be combined with a PathMatcher pattern in\n the rest of the location path, for example "classpath*:META-INF/*-beans.xml".\n In this case, the resolution strategy is fairly simple: a\n ClassLoader.getResources() call is used on the last non-wildcard\n path segment to get all the matching resources in the class loader hierarchy,\n and then off each resource the same PathMatcher resolution strategy described\n above is used for the wildcard subpath.\n\n Other notes:\nWARNING: Note that "classpath*:" when combined with\n Ant-style patterns will only work reliably with at least one root directory\n before the pattern starts, unless the actual target files reside in the file\n system. This means that a pattern like "classpath*:*.xml" will\n not retrieve files from the root of jar files but rather only from the\n root of expanded directories. This originates from a limitation in the JDK's\n ClassLoader.getResources() method which only returns file system\n locations for a passed-in empty String (indicating potential roots to search).\n This ResourcePatternResolver implementation is trying to mitigate the\n jar root lookup limitation through URLClassLoader introspection and\n "java.class.path" manifest evaluation; however, without portability guarantees.\n\n WARNING: Ant-style patterns with "classpath:" resources are not\n guaranteed to find matching resources if the root package to search is available\n in multiple class path locations. This is because a resource such as\n \n     com/mycompany/package1/service-context.xml\n \n may be in only one location, but when a path such as\n \n     classpath:com/mycompany/**/service-context.xml\n \n is used to try to resolve it, the resolver will work off the (first) URL\n returned by getResource("com/mycompany");. If this base package node\n exists in multiple classloader locations, the actual end resource may not be\n underneath. Therefore, preferably, use "classpath*:" with the same\n Ant-style pattern in such a case, which will search all class path\n locations that contain the root package.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html
PropertiesLoaderSupport	A										<section class="prog__container">Base class for JavaBean-style components that need to load properties\n from one or more resources. Supports local properties as well, with\n configurable overriding.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/PropertiesLoaderSupport.html
PropertiesLoaderUtils	A										<section class="prog__container">Convenient utility methods for loading of java.util.Properties,\n performing standard handling of input streams.\n\n For more configurable properties loading, including the option of a\n customized encoding, consider using the PropertiesLoaderSupport class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/PropertiesLoaderUtils.html
PropertySourceFactory	A										<section class="prog__container">Strategy interface for creating resource-based PropertySource wrappers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/PropertySourceFactory.html
ResourceArrayPropertyEditor	A										<section class="prog__container">Editor for Resource arrays, to\n automatically convert String location patterns\n (e.g. "file:C:/my*.txt" or "classpath*:myfile.txt")\n to Resource array properties. Can also translate a collection\n or array of location patterns into a merged Resource array.\n\n A path may contain ${...} placeholders, to be\n resolved as Environment properties:\n e.g. ${user.dir}. Unresolvable placeholders are ignored by default.\n\n Delegates to a ResourcePatternResolver,\n by default using a PathMatchingResourcePatternResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/ResourceArrayPropertyEditor.html
ResourcePatternResolver	A										<section class="prog__container">Strategy interface for resolving a location pattern (for example,\n an Ant-style path pattern) into Resource objects.\n\n This is an extension to the ResourceLoader\n interface. A passed-in ResourceLoader (for example, an\n ApplicationContext passed in via\n ResourceLoaderAware when running in a context)\n can be checked whether it implements this extended interface too.\n\n PathMatchingResourcePatternResolver is a standalone implementation\n that is usable outside an ApplicationContext, also used by\n ResourceArrayPropertyEditor for populating Resource array bean properties.\n\n Can be used with any sort of location pattern (e.g. "/WEB-INF/*-context.xml"):\n Input patterns have to match the strategy implementation. This interface just\n specifies the conversion method rather than a specific pattern format.\n\n This interface also suggests a new resource prefix "classpath*:" for all\n matching resources from the class path. Note that the resource location is\n expected to be a path without placeholders in this case (e.g. "/beans.xml");\n JAR files or classes directories can contain multiple files of the same name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/ResourcePatternResolver.html
ResourcePatternUtils	A										<section class="prog__container">Utility class for determining whether a given URL is a resource\n location that can be loaded via a ResourcePatternResolver.\n\n Callers will usually assume that a location is a relative path\n if the isUrl(String) method returns false.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/ResourcePatternUtils.html
ResourcePropertySource	A										<section class="prog__container">Subclass of PropertiesPropertySource that loads a Properties object\n from a given Resource or resource location such as\n "classpath:/com/myco/foo.properties" or "file:/path/to/file.xml".\n\n Both traditional and XML-based properties file formats are supported; however, in\n order for XML processing to take effect, the underlying Resource's\n getFilename() method must\n return a non-null value that ends in ".xml".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/ResourcePropertySource.html
ResourceRegion	A										<section class="prog__container">Region of a Resource implementation, materialized by a position\n within the Resource and a byte count for the length of that region.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/ResourceRegion.html
SpringFactoriesLoader	A										<section class="prog__container">General purpose factory loading mechanism for internal use within the framework.\n\n SpringFactoriesLoader loads and instantiates\n factories of a given type from "META-INF/spring.factories" files which\n may be present in multiple JAR files in the classpath. The spring.factories\n file must be in Properties format, where the key is the fully qualified\n name of the interface or abstract class, and the value is a comma-separated list of\n implementation class names. For example:\n\n example.MyService=example.MyServiceImpl1,example.MyServiceImpl2\n\n where example.MyService is the name of the interface, and MyServiceImpl1\n and MyServiceImpl2 are two implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/support/SpringFactoriesLoader.html
DefaultDeserializer	A										<section class="prog__container">A default Deserializer implementation that reads an input stream\n using Java serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/DefaultDeserializer.html
DefaultSerializer	A										<section class="prog__container">A Serializer implementation that writes an object to an output stream\n using Java serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/DefaultSerializer.html
Deserializer	A										<section class="prog__container">A strategy interface for converting from data in an InputStream to an Object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/Deserializer.html
Serializer	A										<section class="prog__container">A strategy interface for streaming an object to an OutputStream.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/Serializer.html
DeserializingConverter	A										<section class="prog__container">A Converter that delegates to a\n Deserializer\n to convert data in a byte array to an object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/support/DeserializingConverter.html
SerializationDelegate	A										<section class="prog__container">A convenient delegate with pre-arranged configuration state for common\n serialization needs. Implements Serializer and Deserializer\n itself, so can also be passed into such more specific callback methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/support/SerializationDelegate.html
SerializationFailedException	A										<section class="prog__container">Wrapper for the native IOException (or similar) when a\n Serializer or\n Deserializer failed.\n Thrown by SerializingConverter and DeserializingConverter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/support/SerializationFailedException.html
SerializingConverter	A										<section class="prog__container">A Converter that delegates to a\n Serializer\n to convert an object to a byte array.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/serializer/support/SerializingConverter.html
DefaultToStringStyler	A										<section class="prog__container">Spring's default toString() styler.\n\n This class is used by ToStringCreator to style toString()\n output in a consistent manner according to Spring conventions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/DefaultToStringStyler.html
DefaultValueStyler	A										<section class="prog__container">Converts objects to String form, generally for debugging purposes,\n using Spring's toString styling conventions.\n\n Uses the reflective visitor pattern underneath the hood to nicely\n encapsulate styling algorithms for each type of styled object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/DefaultValueStyler.html
StylerUtils	A										<section class="prog__container">Simple utility class to allow for convenient access to value\n styling logic, mainly to support descriptive logging messages.\n\n For more sophisticated needs, use the ValueStyler abstraction\n directly. This class simply uses a shared DefaultValueStyler\n instance underneath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/StylerUtils.html
ToStringCreator	A										<section class="prog__container">Utility class that builds pretty-printing toString() methods\n with pluggable styling conventions. By default, ToStringCreator adheres\n to Spring's toString() styling conventions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/ToStringCreator.html
ToStringStyler	A										<section class="prog__container">A strategy interface for pretty-printing toString() methods.\n Encapsulates the print algorithms; some other object such as a builder\n should provide the workflow.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/ToStringStyler.html
ValueStyler	A										<section class="prog__container">Strategy that encapsulates value String styling algorithms\n according to Spring conventions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/style/ValueStyler.html
AsyncListenableTaskExecutor	A										<section class="prog__container">Extension of the AsyncTaskExecutor interface, adding the capability to submit\n tasks for ListenableFutures.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/AsyncListenableTaskExecutor.html
AsyncTaskExecutor	A										<section class="prog__container">Extended interface for asynchronous TaskExecutor implementations,\n offering an overloaded execute(Runnable, long) variant with a start\n timeout parameter as well support for Callable.\n\n Note: The Executors class includes a set of\n methods that can convert some other common closure-like objects, for example,\n PrivilegedAction to Callable before executing them.\n\n Implementing this interface also indicates that the TaskExecutor.execute(Runnable)\n method will not execute its Runnable in the caller's thread but rather\n asynchronously in some other thread.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/AsyncTaskExecutor.html
SimpleAsyncTaskExecutor	A										<section class="prog__container">TaskExecutor implementation that fires up a new Thread for each task,\n executing it asynchronously.\n\n Supports limiting concurrent threads through the "concurrencyLimit"\n bean property. By default, the number of concurrent threads is unlimited.\n\n NOTE: This implementation does not reuse threads! Consider a\n thread-pooling TaskExecutor implementation instead, in particular for\n executing a large number of short-lived tasks.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html
SyncTaskExecutor	A										<section class="prog__container">TaskExecutor implementation that executes each task synchronously\n in the calling thread.\n\n Mainly intended for testing scenarios.\n\n Execution in the calling thread does have the advantage of participating\n in it's thread context, for example the thread context class loader or the\n thread's current transaction association. That said, in many cases,\n asynchronous execution will be preferable: choose an asynchronous\n TaskExecutor instead for such scenarios.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SyncTaskExecutor.html
TaskDecorator	A										<section class="prog__container">A callback interface for a decorator to be applied to any Runnable\n about to be executed.\n\n Note that such a decorator is not necessarily being applied to the\n user-supplied Runnable/Callable but rather to the actual\n execution callback (which may be a wrapper around the user-supplied task).\n\n The primary use case is to set some execution context around the task's\n invocation, or to provide some monitoring/statistics for task execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/TaskDecorator.html
TaskExecutor	A										<section class="prog__container">Simple task executor interface that abstracts the execution\n of a Runnable.\n\n Implementations can use all sorts of different execution strategies,\n such as: synchronous, asynchronous, using a thread pool, and more.\n\n Equivalent to JDK 1.5's Executor\n interface; extending it now in Spring 3.0, so that clients may declare\n a dependency on an Executor and receive any TaskExecutor implementation.\n This interface remains separate from the standard Executor interface\n mainly for backwards compatibility with JDK 1.4 in Spring 2.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/TaskExecutor.html
TaskRejectedException	A										<section class="prog__container">Exception thrown when a TaskExecutor rejects to accept\n a given task for execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/TaskRejectedException.html
TaskTimeoutException	A										<section class="prog__container">Exception thrown when a AsyncTaskExecutor rejects to accept\n a given task for execution because of the specified timeout.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/TaskTimeoutException.html
ConcurrentExecutorAdapter	A										<section class="prog__container">Adapter that exposes the Executor interface\n for any Spring TaskExecutor.\n\n This is less useful as of Spring 3.0, since TaskExecutor itself\n extends the Executor interface. The adapter is only relevant for\n hiding the TaskExecutor nature of a given object now,\n solely exposing the standard Executor interface to a client.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/support/ConcurrentExecutorAdapter.html
ExecutorServiceAdapter	A										<section class="prog__container">Adapter that takes a Spring TaskExecutor)\n and exposes a full java.util.concurrent.ExecutorService for it.\n\n This is primarily for adapting to client components that communicate via the\n java.util.concurrent.ExecutorService API. It can also be used as\n common ground between a local Spring TaskExecutor backend and a\n JNDI-located ManagedExecutorService in a Java EE 6 environment.\n\n NOTE: This ExecutorService adapter does not support the\n lifecycle methods in the java.util.concurrent.ExecutorService API\n ("shutdown()" etc), similar to a server-wide ManagedExecutorService\n in a Java EE 6 environment. The lifecycle is always up to the backend pool,\n with this adapter acting as an access-only proxy for that target pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/support/ExecutorServiceAdapter.html
TaskExecutorAdapter	A										<section class="prog__container">Adapter that takes a JDK java.util.concurrent.Executor and\n exposes a Spring TaskExecutor for it.\n Also detects an extended java.util.concurrent.ExecutorService, adapting\n the AsyncTaskExecutor interface accordingly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/support/TaskExecutorAdapter.html
AnnotatedTypeMetadata	A										<section class="prog__container">Defines access to the annotations of a specific type (class\n or method), in a form that does not necessarily require the\n class-loading.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/AnnotatedTypeMetadata.html
AnnotationMetadata	A										<section class="prog__container">Interface that defines abstract access to the annotations of a specific\n class, in a form that does not require that class to be loaded yet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/AnnotationMetadata.html
ClassMetadata	A										<section class="prog__container">Interface that defines abstract metadata of a specific class,\n in a form that does not require that class to be loaded yet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/ClassMetadata.html
MethodMetadata	A										<section class="prog__container">Interface that defines abstract access to the annotations of a specific\n class, in a form that does not require that class to be loaded yet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/MethodMetadata.html
StandardAnnotationMetadata	A										<section class="prog__container">AnnotationMetadata implementation that uses standard reflection\n to introspect a given Class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/StandardAnnotationMetadata.html
StandardClassMetadata	A										<section class="prog__container">ClassMetadata implementation that uses standard reflection\n to introspect a given Class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/StandardClassMetadata.html
StandardMethodMetadata	A										<section class="prog__container">MethodMetadata implementation that uses standard reflection\n to introspect a given Method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/StandardMethodMetadata.html
AnnotationMetadataReadingVisitor	A										<section class="prog__container">ASM class visitor which looks for the class name and implemented types as\n well as for the annotations defined on the class, exposing them through\n the AnnotationMetadata interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.html
CachingMetadataReaderFactory	A										<section class="prog__container">Caching implementation of the MetadataReaderFactory interface,\n caching MetadataReader per Spring Resource handle\n (i.e. per ".class" file).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/CachingMetadataReaderFactory.html
MetadataReader	A										<section class="prog__container">Simple facade for accessing class metadata,\n as read by an ASM ClassReader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/MetadataReader.html
MetadataReaderFactory	A										<section class="prog__container">Factory interface for MetadataReader instances.\n Allows for caching a MetadataReader per original resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/MetadataReaderFactory.html
MethodMetadataReadingVisitor	A										<section class="prog__container">ASM method visitor which looks for the annotations defined on a method,\n exposing them through the MethodMetadata\n interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.html
SimpleMetadataReaderFactory	A										<section class="prog__container">Simple implementation of the MetadataReaderFactory interface,\n creating a new ASM ClassReader for every request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/classreading/SimpleMetadataReaderFactory.html
AbstractClassTestingTypeFilter	A										<section class="prog__container">Type filter that exposes a\n ClassMetadata object\n to subclasses, for class testing purposes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.html
AbstractTypeHierarchyTraversingFilter	A										<section class="prog__container">Type filter that is aware of traversing over hierarchy.\n\n This filter is useful when matching needs to be made based on potentially the\n whole class/interface hierarchy. The algorithm employed uses a succeed-fast\n strategy: if at any time a match is declared, no further processing is\n carried out.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html
AnnotationTypeFilter	A										<section class="prog__container">A simple filter which matches classes with a given annotation,\n checking inherited annotations as well.\n\n The matching logic mirrors that of Class.isAnnotationPresent(Class).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AnnotationTypeFilter.html
AspectJTypeFilter	A										<section class="prog__container">Type filter that uses AspectJ type pattern for matching.\n\n A critical implementation details of this type filter is that it does not\n load the class being examined to match with a type pattern.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AspectJTypeFilter.html
AssignableTypeFilter	A										<section class="prog__container">A simple filter which matches classes that are assignable to a given type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AssignableTypeFilter.html
RegexPatternTypeFilter	A										<section class="prog__container">A simple filter for matching a fully-qualified class name with a regex Pattern.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/RegexPatternTypeFilter.html
TypeFilter	A										<section class="prog__container">Base interface for type filters using a\n MetadataReader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/TypeFilter.html
CannotAcquireLockException	A										<section class="prog__container">Exception thrown on failure to aquire a lock during an update,\n for example during a "select for update" statement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/CannotAcquireLockException.html
CannotSerializeTransactionException	A										<section class="prog__container">Exception thrown on failure to complete a transaction in serialized mode\n due to update conflicts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/CannotSerializeTransactionException.html
CleanupFailureDataAccessException	A										<section class="prog__container">Exception thrown when we couldn't cleanup after a data access operation,\n but the actual operation went OK.\n\n For example, this exception or a subclass might be thrown if a JDBC\n Connection couldn't be closed after it had been used successfully.\n\n Note that data access code might perform resources cleanup in a\n finally block and therefore log cleanup failure rather than rethrow it,\n to keep the original data access exception, if any.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/CleanupFailureDataAccessException.html
ConcurrencyFailureException	A										<section class="prog__container">Exception thrown on concurrency failure.\n\n This exception should be subclassed to indicate the type of failure:\n optimistic locking, failure to acquire lock, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/ConcurrencyFailureException.html
DataAccessException	A										<section class="prog__container">Root of the hierarchy of data access exceptions discussed in\n Expert One-On-One J2EE Design and Development.\n Please see Chapter 9 of this book for detailed discussion of the\n motivation for this package.\n\n This exception hierarchy aims to let user code find and handle the\n kind of error encountered without knowing the details of the particular\n data access API in use (e.g. JDBC). Thus it is possible to react to an\n optimistic locking failure without knowing that JDBC is being used.\n\n As this class is a runtime exception, there is no need for user code\n to catch it or subclasses if any error is to be considered fatal\n (the usual case).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DataAccessException.html
DataAccessResourceFailureException	A										<section class="prog__container">Data access exception thrown when a resource fails completely:\n for example, if we can't connect to a database using JDBC.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DataAccessResourceFailureException.html
DataIntegrityViolationException	A										<section class="prog__container">Exception thrown when an attempt to insert or update data\n results in violation of an integrity constraint. Note that this\n is not purely a relational concept; unique primary keys are\n required by most database types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DataIntegrityViolationException.html
DataRetrievalFailureException	A										<section class="prog__container">Exception thrown if certain expected data could not be retrieved, e.g.\n when looking up specific data via a known identifier. This exception\n will be thrown either by O/R mapping tools or by DAO implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DataRetrievalFailureException.html
DeadlockLoserDataAccessException	A										<section class="prog__container">Generic exception thrown when the current process was\n a deadlock loser, and its transaction rolled back.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DeadlockLoserDataAccessException.html
DuplicateKeyException	A										<section class="prog__container">Exception thrown when an attempt to insert or update data\n results in violation of an primary key or unique constraint.\n Note that this is not necessarily a purely relational concept;\n unique primary keys are required by most database types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/DuplicateKeyException.html
EmptyResultDataAccessException	A										<section class="prog__container">Data access exception thrown when a result was expected to have at least\n one row (or element) but zero rows (or elements) were actually returned.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/EmptyResultDataAccessException.html
IncorrectResultSizeDataAccessException	A										<section class="prog__container">Data access exception thrown when a result was not of the expected size,\n for example when expecting a single row but getting 0 or more than 1 rows.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/IncorrectResultSizeDataAccessException.html
IncorrectUpdateSemanticsDataAccessException	A										<section class="prog__container">Data access exception thrown when something unintended appears to have\n happened with an update, but the transaction hasn't already been rolled back.\n Thrown, for example, when we wanted to update 1 row in an RDBMS but actually\n updated 3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/IncorrectUpdateSemanticsDataAccessException.html
InvalidDataAccessApiUsageException	A										<section class="prog__container">Exception thrown on incorrect usage of the API, such as failing to\n "compile" a query object that needed compilation before execution.\n\n This represents a problem in our Java data access framework,\n not the underlying data access infrastructure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/InvalidDataAccessApiUsageException.html
InvalidDataAccessResourceUsageException	A										<section class="prog__container">Root for exceptions thrown when we use a data access resource incorrectly.\n Thrown for example on specifying bad SQL when using a RDBMS.\n Resource-specific subclasses are supplied by concrete data access packages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/InvalidDataAccessResourceUsageException.html
NonTransientDataAccessException	A										<section class="prog__container">Root of the hierarchy of data access exceptions that are considered non-transient -\n where a retry of the same operation would fail unless the cause of the Exception\n is corrected.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/NonTransientDataAccessException.html
NonTransientDataAccessResourceException	A										<section class="prog__container">Data access exception thrown when a resource fails completely and the failure is permanent.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/NonTransientDataAccessResourceException.html
OptimisticLockingFailureException	A										<section class="prog__container">Exception thrown on an optimistic locking violation.\n\n This exception will be thrown either by O/R mapping tools\n or by custom DAO implementations. Optimistic locking failure\n is typically not detected by the database itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/OptimisticLockingFailureException.html
PermissionDeniedDataAccessException	A										<section class="prog__container">Exception thrown when the underlying resource denied a permission\n to access a specific element, such as a specific database table.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/PermissionDeniedDataAccessException.html
PessimisticLockingFailureException	A										<section class="prog__container">Exception thrown on a pessimistic locking violation.\n Thrown by Spring's SQLException translation mechanism\n if a corresponding database error is encountered.\n\n Serves as superclass for more specific exceptions, like\n CannotAcquireLockException and DeadlockLoserDataAccessException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/PessimisticLockingFailureException.html
QueryTimeoutException	A										<section class="prog__container">Exception to be thrown on a query timeout. This could have different causes depending on\n the database API in use but most likely thrown after the database interrupts or stops\n the processing of a query before it has completed.\n\n This exception can be thrown by user code trapping the native database exception or\n by exception translation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/QueryTimeoutException.html
RecoverableDataAccessException	A										<section class="prog__container">Data access exception thrown when a previously failed operation might be able\n to succeed if the application performs some recovery steps and retries the entire\n transaction or in the case of a distributed transaction, the transaction branch.\n At a minimum, the recovery operation must include closing the current connection\n and getting a new connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/RecoverableDataAccessException.html
TransientDataAccessException	A										<section class="prog__container">Root of the hierarchy of data access exceptions that are considered transient -\n where a previously failed operation might be able to succeed when the operation\n is retried without any intervention by application-level functionality.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/TransientDataAccessException.html
TransientDataAccessResourceException	A										<section class="prog__container">Data access exception thrown when a resource fails temporarily\n and the operation can be retried.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/TransientDataAccessResourceException.html
TypeMismatchDataAccessException	A										<section class="prog__container">Exception thrown on mismatch between Java type and database type:\n for example on an attempt to set an object of the wrong type\n in an RDBMS column.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/TypeMismatchDataAccessException.html
UncategorizedDataAccessException	A										<section class="prog__container">Normal superclass when we can't distinguish anything more specific\n than "something went wrong with the underlying resource": for example,\n a SQLException from JDBC we can't pinpoint more precisely.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/UncategorizedDataAccessException.html
PersistenceExceptionTranslationAdvisor	A										<section class="prog__container">Spring AOP exception translation aspect for use at Repository or DAO layer level.\n Translates native persistence exceptions into Spring's DataAccessException hierarchy,\n based on a given PersistenceExceptionTranslator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/annotation/PersistenceExceptionTranslationAdvisor.html
PersistenceExceptionTranslationPostProcessor	A										<section class="prog__container">Bean post-processor that automatically applies persistence exception translation to any\n bean marked with Spring's @Repository\n annotation, adding a corresponding PersistenceExceptionTranslationAdvisor to\n the exposed proxy (either an existing AOP proxy or a newly generated proxy that\n implements all of the target's interfaces).\n\n Translates native resource exceptions to Spring's\n DataAccessException hierarchy.\n Autodetects beans that implement the\n PersistenceExceptionTranslator interface, which are subsequently asked to translate\n candidate exceptions.\n\n\n All of Spring's applicable resource factories (e.g.\n LocalContainerEntityManagerFactoryBean)\n implement the PersistenceExceptionTranslator interface out of the box.\n As a consequence, all that is usually needed to enable automatic exception\n translation is marking all affected beans (such as Repositories or DAOs)\n with the @Repository annotation, along with defining this post-processor\n as a bean in the application context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.html
ChainedPersistenceExceptionTranslator	A										<section class="prog__container">Implementation of PersistenceExceptionTranslator that supports chaining,\n allowing the addition of PersistenceExceptionTranslator instances in order.\n Returns non-null on the first (if any) match.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/support/ChainedPersistenceExceptionTranslator.html
DaoSupport	A										<section class="prog__container">Generic base class for DAOs, defining template methods for DAO initialization.\n\n Extended by Spring's specific DAO support classes, such as:\n JdbcDaoSupport, JdoDaoSupport, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/support/DaoSupport.html
DataAccessUtils	A										<section class="prog__container">Miscellaneous utility methods for DAO implementations.\n Useful with any data access technology.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/support/DataAccessUtils.html
PersistenceExceptionTranslationInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor that provides persistence exception translation\n based on a given PersistenceExceptionTranslator.\n\n Delegates to the given PersistenceExceptionTranslator to translate\n a RuntimeException thrown into Spring's DataAccessException hierarchy\n (if appropriate). If the RuntimeException in question is declared on the\n target method, it is always propagated as-is (with no translation applied).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.html
PersistenceExceptionTranslator	A										<section class="prog__container">Interface implemented by Spring integrations with data access technologies\n that throw runtime exceptions, such as JPA, TopLink, JDO and Hibernate.\n\n This allows consistent usage of combined exception translation functionality,\n without forcing a single translator to understand every single possible type\n of exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/support/PersistenceExceptionTranslator.html
AbstractRemoteSlsbInvokerInterceptor	A										<section class="prog__container">Base class for interceptors proxying remote Stateless Session Beans.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n Such an interceptor must be the last interceptor in the advice chain.\n In this case, there is no target object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/AbstractRemoteSlsbInvokerInterceptor.html
AbstractSlsbInvokerInterceptor	A										<section class="prog__container">Base class for AOP interceptors invoking local or remote Stateless Session Beans.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n Such an interceptor must be the last interceptor in the advice chain.\n In this case, there is no direct target object: The call is handled in a\n special way, getting executed on an EJB instance retrieved via an EJB home.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/AbstractSlsbInvokerInterceptor.html
EjbAccessException	A										<section class="prog__container">Exception that gets thrown when an EJB stub cannot be accessed properly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/EjbAccessException.html
LocalSlsbInvokerInterceptor	A										<section class="prog__container">Invoker for a local Stateless Session Bean.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n Caches the home object, since a local EJB home can never go stale.\n See JndiObjectLocator for info on\n how to specify the JNDI location of the target EJB.\n\n In a bean container, this class is normally best used as a singleton. However,\n if that bean container pre-instantiates singletons (as do the XML ApplicationContext\n variants) you may have a problem if the bean container is loaded before the EJB\n container loads the target EJB. That is because by default the JNDI lookup will be\n performed in the init method of this class and cached, but the EJB will not have been\n bound at the target location yet. The best solution is to set the lookupHomeOnStartup\n property to false, in which case the home will be fetched on first access to the EJB.\n (This flag is only true by default for backwards compatibility reasons).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/LocalSlsbInvokerInterceptor.html
LocalStatelessSessionProxyFactoryBean	A										<section class="prog__container">Convenient FactoryBean for local Stateless Session Bean (SLSB) proxies.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n See JndiObjectLocator for info on\n how to specify the JNDI location of the target EJB.\n\n If you want control over interceptor chaining, use an AOP ProxyFactoryBean\n with LocalSlsbInvokerInterceptor rather than rely on this class.\n\n In a bean container, this class is normally best used as a singleton. However,\n if that bean container pre-instantiates singletons (as do the XML ApplicationContext\n variants) you may have a problem if the bean container is loaded before the EJB\n container loads the target EJB. That is because by default the JNDI lookup will be\n performed in the init method of this class and cached, but the EJB will not have been\n bound at the target location yet. The best solution is to set the "lookupHomeOnStartup"\n property to "false", in which case the home will be fetched on first access to the EJB.\n (This flag is only true by default for backwards compatibility reasons).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/LocalStatelessSessionProxyFactoryBean.html
SimpleRemoteSlsbInvokerInterceptor	A										<section class="prog__container">Basic invoker for a remote Stateless Session Bean.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n "Creates" a new EJB instance for each invocation, or caches the session\n bean instance for all invocations (see setCacheSessionBean(boolean)).\n See JndiObjectLocator for info on\n how to specify the JNDI location of the target EJB.\n\n In a bean container, this class is normally best used as a singleton. However,\n if that bean container pre-instantiates singletons (as do the XML ApplicationContext\n variants) you may have a problem if the bean container is loaded before the EJB\n container loads the target EJB. That is because by default the JNDI lookup will be\n performed in the init method of this class and cached, but the EJB will not have been\n bound at the target location yet. The best solution is to set the "lookupHomeOnStartup"\n property to "false", in which case the home will be fetched on first access to the EJB.\n (This flag is only true by default for backwards compatibility reasons).\n\n This invoker is typically used with an RMI business interface, which serves\n as super-interface of the EJB component interface. Alternatively, this invoker\n can also proxy a remote SLSB with a matching non-RMI business interface, i.e. an\n interface that mirrors the EJB business methods but does not declare RemoteExceptions.\n In the latter case, RemoteExceptions thrown by the EJB stub will automatically get\n converted to Spring's unchecked RemoteAccessException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/SimpleRemoteSlsbInvokerInterceptor.html
SimpleRemoteStatelessSessionProxyFactoryBean	A										<section class="prog__container">Convenient FactoryBean for remote SLSB proxies.\n Designed for EJB 2.x, but works for EJB 3 Session Beans as well.\n\n See JndiObjectLocator for info on\n how to specify the JNDI location of the target EJB.\n\n If you want control over interceptor chaining, use an AOP ProxyFactoryBean\n with SimpleRemoteSlsbInvokerInterceptor rather than rely on this class.\n\n In a bean container, this class is normally best used as a singleton. However,\n if that bean container pre-instantiates singletons (as do the XML ApplicationContext\n variants) you may have a problem if the bean container is loaded before the EJB\n container loads the target EJB. That is because by default the JNDI lookup will be\n performed in the init method of this class and cached, but the EJB will not have been\n bound at the target location yet. The best solution is to set the lookupHomeOnStartup\n property to false, in which case the home will be fetched on first access to the EJB.\n (This flag is only true by default for backwards compatibility reasons).\n\n This proxy factory is typically used with an RMI business interface, which serves\n as super-interface of the EJB component interface. Alternatively, this factory\n can also proxy a remote SLSB with a matching non-RMI business interface, i.e. an\n interface that mirrors the EJB business methods but does not declare RemoteExceptions.\n In the latter case, RemoteExceptions thrown by the EJB stub will automatically get\n converted to Spring's unchecked RemoteAccessException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/access/SimpleRemoteStatelessSessionProxyFactoryBean.html
JeeNamespaceHandler	A										<section class="prog__container">NamespaceHandler\n for the 'jee' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/config/JeeNamespaceHandler.html
SpringBeanAutowiringInterceptor	A										<section class="prog__container">EJB3-compliant interceptor class that injects Spring beans into\n fields and methods which are annotated with @Autowired.\n Performs injection after construction as well as after activation\n of a passivated bean.\n\n To be applied through an @Interceptors annotation in\n the EJB Session Bean or Message-Driven Bean class, or through an\n interceptor-binding XML element in the EJB deployment descriptor.\n\n Delegates to Spring's AutowiredAnnotationBeanPostProcessor\n underneath, allowing for customization of its specific settings through\n overriding the configureBeanPostProcessor(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor, java.lang.Object) template method.\n\n The actual BeanFactory to obtain Spring beans from is determined\n by the getBeanFactory(java.lang.Object) template method. The default implementation\n obtains the Spring ContextSingletonBeanFactoryLocator, initialized\n from the default resource location classpath*:beanRefContext.xml,\n and obtains the single ApplicationContext defined there.\n\n NOTE: If you have more than one shared ApplicationContext definition available\n in your EJB class loader, you need to override the getBeanFactoryLocatorKey(java.lang.Object)\n method and provide a specific locator key for each autowired EJB.\n Alternatively, override the getBeanFactory(java.lang.Object) template method and\n obtain the target factory explicitly.\n\n WARNING: Do not define the same bean as Spring-managed bean and as\n EJB3 session bean in the same deployment unit. In particular, be\n careful when using the <context:component-scan> feature\n in combination with the deployment of Spring-based EJB3 session beans:\n Make sure that the EJB3 session beans are not autodetected as\n Spring-managed beans as well, using appropriate package restrictions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ejb/interceptor/SpringBeanAutowiringInterceptor.html
AccessException	A										<section class="prog__container">An AccessException is thrown by an accessor if it has an unexpected problem.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/AccessException.html
BeanResolver	A										<section class="prog__container">A bean resolver can be registered with the evaluation context\n and will kick in for @myBeanName and &myBeanName expressions.\n The & variant syntax allows access to the factory bean where\n relevant.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/BeanResolver.html
ConstructorExecutor	A										<section class="prog__container">Executors are built by resolvers and can be cached by the infrastructure to repeat an\n operation quickly without going back to the resolvers. For example, the particular\n constructor to run on a class may be discovered by the reflection constructor resolver\n - it will then build a ConstructorExecutor that executes that constructor and the\n ConstructorExecutor can be reused without needing to go back to the resolver to\n discover the constructor again.\n\n They can become stale, and in that case should throw an AccessException - this will\n cause the infrastructure to go back to the resolvers to ask for a new one.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ConstructorExecutor.html
ConstructorResolver	A										<section class="prog__container">A constructor resolver attempts locate a constructor and returns a ConstructorExecutor\n that can be used to invoke that constructor. The ConstructorExecutor will be cached but\n if it 'goes stale' the resolvers will be called again.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ConstructorResolver.html
EvaluationContext	A										<section class="prog__container">Expressions are executed in an evaluation context. It is in this context that\n references are resolved when encountered during expression evaluation.\n\n There is a default implementation of the EvaluationContext,\n StandardEvaluationContext that can\n be extended, rather than having to implement everything.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/EvaluationContext.html
EvaluationException	A										<section class="prog__container">Represent an exception that occurs during expression evaluation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/EvaluationException.html
Expression	A										<section class="prog__container">An expression capable of evaluating itself against context objects. Encapsulates the\n details of a previously parsed expression string. Provides a common abstraction for\n expression evaluation independent of any language like OGNL or the Unified EL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/Expression.html
ExpressionException	A										<section class="prog__container">Super class for exceptions that can occur whilst processing expressions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ExpressionException.html
ExpressionInvocationTargetException	A										<section class="prog__container">This exception wraps (as cause) a checked exception thrown by some method that SpEL\n invokes. It differs from a SpelEvaluationException because this indicates the\n occurrence of a checked exception that the invoked method was defined to throw.\n SpelEvaluationExceptions are for handling (and wrapping) unexpected exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ExpressionInvocationTargetException.html
ExpressionParser	A										<section class="prog__container">Parses expression strings into compiled expressions that can be evaluated.\n Supports parsing templates as well as standard expression strings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ExpressionParser.html
MethodExecutor	A										<section class="prog__container">MethodExecutors are built by the resolvers and can be cached by the infrastructure to\n repeat an operation quickly without going back to the resolvers. For example, the\n particular method to run on an object may be discovered by the reflection method\n resolver - it will then build a MethodExecutor that executes that method and the\n MethodExecutor can be reused without needing to go back to the resolver to discover\n the method again.\n\n They can become stale, and in that case should throw an AccessException:\n This will cause the infrastructure to go back to the resolvers to ask for a new one.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/MethodExecutor.html
MethodFilter	A										<section class="prog__container">MethodFilter instances allow SpEL users to fine tune the behaviour of the method\n resolution process. Method resolution (which translates from a method name in an\n expression to a real method to invoke) will normally retrieve candidate methods for\n invocation via a simple call to 'Class.getMethods()' and will choose the first one that\n is suitable for the input parameters. By registering a MethodFilter the user can\n receive a callback and change the methods that will be considered suitable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/MethodFilter.html
MethodResolver	A										<section class="prog__container">A method resolver attempts locate a method and returns a command executor that can be\n used to invoke that method. The command executor will be cached but if it 'goes stale'\n the resolvers will be called again.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/MethodResolver.html
Operation	A										<section class="prog__container">Supported operations that an OperatorOverloader can implement for any pair of\n operands.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/Operation.html
OperatorOverloader	A										<section class="prog__container">By default the mathematical operators Operation support simple types like\n numbers. By providing an implementation of OperatorOverloader, a user of the expression\n language can support these operations on other types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/OperatorOverloader.html
ParseException	A										<section class="prog__container">Represent an exception that occurs during expression parsing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ParseException.html
ParserContext	A										<section class="prog__container">Input provided to an expression parser that can influence an expression\n parsing/compilation routine.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/ParserContext.html
PropertyAccessor	A										<section class="prog__container">A property accessor is able to read from (and possibly write to) an object's properties.\n This interface places no restrictions, and so implementors are free to access properties\n directly as fields or through getters or in any other way they see as appropriate.\n\n A resolver can optionally specify an array of target classes for which it should be\n called. However, if it returns null from getSpecificTargetClasses(),\n it will be called for all property references and given a chance to determine if it\n can read or write them.\n\n Property resolvers are considered to be ordered and each will be called in turn.\n The only rule that affects the call order is that any naming the target class directly\n in getSpecificTargetClasses() will be called first, before the general resolvers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/PropertyAccessor.html
TypeComparator	A										<section class="prog__container">Instances of a type comparator should be able to compare pairs of objects for equality.\n The specification of the return value is the same as for Comparable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/TypeComparator.html
TypeConverter	A										<section class="prog__container">A type converter can convert values between different types encountered during\n expression evaluation. This is an SPI for the expression parser; see\n ConversionService for the primary\n user API to Spring's conversion facilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/TypeConverter.html
TypedValue	A										<section class="prog__container">Encapsulates an object and a TypeDescriptor that describes it.\n The type descriptor can contain generic declarations that would not\n be accessible through a simple getClass() call on the object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/TypedValue.html
TypeLocator	A										<section class="prog__container">Implementers of this interface are expected to be able to locate types.\n They may use a custom ClassLoader and/or deal with common\n package prefixes (e.g. java.lang) however they wish.\n\n See StandardTypeLocator\n for an example implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/TypeLocator.html
CompositeStringExpression	A										<section class="prog__container">Represents a template expression broken into pieces. Each piece will be an Expression\n but pure text parts to the template will be represented as LiteralExpression objects.\n An example of a template expression might be:\n\n \n "Hello ${getName()}"\n \n\n which will be represented as a CompositeStringExpression of two parts. The first part\n being a LiteralExpression representing 'Hello ' and the second part being a real\n expression that will call getName() when invoked.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/common/CompositeStringExpression.html
ExpressionUtils	A										<section class="prog__container">Common utility functions that may be used by any Expression Language provider.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/common/ExpressionUtils.html
LiteralExpression	A										<section class="prog__container">A very simple hardcoded implementation of the Expression interface that represents a\n string literal. It is used with CompositeStringExpression when representing a template\n expression which is made up of pieces - some being real expressions to be handled by an\n EL implementation like Spel, and some being just textual elements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/common/LiteralExpression.html
TemplateAwareExpressionParser	A										<section class="prog__container">An expression parser that understands templates. It can be subclassed by expression\n parsers that do not offer first class support for templating.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/common/TemplateAwareExpressionParser.html
TemplateParserContext	A										<section class="prog__container">Configurable ParserContext implementation for template parsing. Expects the\n expression prefix and suffix as constructor arguments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/common/TemplateParserContext.html
CodeFlow	A										<section class="prog__container">Manages the class being generated by the compilation process.\n\n Records intermediate compilation state as the bytecode is generated.\n Also includes various bytecode generation helper functions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/CodeFlow.html
CompilablePropertyAccessor	A										<section class="prog__container">A compilable property accessor is able to generate bytecode that represents\n the access operation, facilitating compilation to bytecode of expressions\n that use the accessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/CompilablePropertyAccessor.html
CompiledExpression	A										<section class="prog__container">Base superclass for compiled expressions. Each generated compiled expression class\n will extend this class and implement the getValue(java.lang.Object, org.springframework.expression.EvaluationContext) method. It is not intended\n to be subclassed by user code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/CompiledExpression.html
ExpressionState	A										<section class="prog__container">An ExpressionState is for maintaining per-expression-evaluation state, any changes to\n it are not seen by other expressions but it gives a place to hold local variables and\n for component expressions in a compound expression to communicate state. This is in\n contrast to the EvaluationContext, which is shared amongst expression evaluations, and\n any changes to it will be seen by other expressions or any code that chooses to ask\n questions of the context.\n\n It also acts as a place for to define common utility routines that the various AST\n nodes might need.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ExpressionState.html
InternalParseException	A										<section class="prog__container">Wraps a real parse exception. This exception flows to the top parse method and then\n the wrapped exception is thrown as the real problem.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/InternalParseException.html
SpelCompilerMode	A										<section class="prog__container">Captures the possible configuration settings for a compiler that can be\n used when evaluating expressions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelCompilerMode.html
SpelEvaluationException	A										<section class="prog__container">Root exception for Spring EL related exceptions. Rather than holding a hard coded\n string indicating the problem, it records a message key and the inserts for the\n message. See SpelMessage for the list of all possible messages that can occur.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelEvaluationException.html
SpelMessage	A										<section class="prog__container">Contains all the messages that can be produced by the Spring Expression Language.\n Each message has a kind (info, warn, error) and a code number. Tests can be written to\n expect particular code numbers rather than particular text, enabling the message text\n to more easily be modified and the tests to run successfully in different locales.\n\n When a message is formatted, it will have this kind of form\n\n \n EL1004E: (pos 34): Type cannot be found 'String'\n \n\n The prefix captures the code and the error kind, whilst the position is included\n if it is known.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelMessage.html
SpelMessage.Kind	A										<section class="prog__container">Returns the enum constant of this type with the specified name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelMessage.Kind.html
SpelNode	A										<section class="prog__container">Represents a node in the Ast for a parsed expression.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelNode.html
SpelParseException	A										<section class="prog__container">Root exception for Spring EL related exceptions. Rather than holding a hard coded\n string indicating the problem, it records a message key and the inserts for the\n message. See SpelMessage for the list of all possible messages that can occur.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelParseException.html
SpelParserConfiguration	A										<section class="prog__container">Configuration object for the SpEL expression parser.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/SpelParserConfiguration.html
Assign	A										<section class="prog__container">Represents assignment. An alternative to calling setValue() for an expression is to use\n an assign.\n\n Example: 'someNumberProperty=42'</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Assign.html
AstUtils	A										<section class="prog__container">Utilities methods for use in the Ast classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/AstUtils.html
BeanReference	A										<section class="prog__container">Represents a bean reference to a type, for example @foo or @'foo.bar'.\n For a FactoryBean the syntax &foo; can be used to access the factory itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/BeanReference.html
BooleanLiteral	A										<section class="prog__container">Represents the literal values TRUE and FALSE.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/BooleanLiteral.html
CompoundExpression	A										<section class="prog__container">Represents a DOT separated expression sequence, such as 'property1.property2.methodOne()'</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/CompoundExpression.html
ConstructorReference	A										<section class="prog__container">Represents the invocation of a constructor. Either a constructor on a regular type or\n construction of an array. When an array is constructed, an initializer can be specified.\n\n Examples:\n new String('hello world')\n new int[]{1,2,3,4}\n new int[3] new int[3]{1,2,3}</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/ConstructorReference.html
Elvis	A										<section class="prog__container">Represents the elvis operator ?:. For an expression "a?:b" if a is not null, the value\n of the expression is "a", if a is null then the value of the expression is "b".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Elvis.html
FloatLiteral	A										<section class="prog__container">Expression language AST node that represents a float literal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/FloatLiteral.html
FormatHelper	A										<section class="prog__container">Utility methods (formatters, etc) used during parsing and evaluation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/FormatHelper.html
FunctionReference	A										<section class="prog__container">A function reference is of the form "#someFunction(a,b,c)". Functions may be defined\n in the context prior to the expression being evaluated or within the expression itself\n using a lambda function definition. For example: Lambda function definition in an\n expression: "(#max = {|x,y|$x>$y?$x:$y};max(2,3))" Calling context defined function:\n "#isEven(37)". Functions may also be static java methods, registered in the context\n prior to invocation of the expression.\n\n Functions are very simplistic, the arguments are not part of the definition\n (right now), so the names must be unique.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/FunctionReference.html
Indexer	A										<section class="prog__container">An Indexer can index into some proceeding structure to access a particular piece of it.\n Supported structures are: strings / collections (lists/sets) / arrays.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Indexer.html
InlineList	A										<section class="prog__container">Represent a list in an expression, e.g. '{1,2,3}'</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/InlineList.html
InlineMap	A										<section class="prog__container">Represent a map in an expression, e.g. '{name:'foo',age:12}'</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/InlineMap.html
IntLiteral	A										<section class="prog__container">Expression language AST node that represents an integer literal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/IntLiteral.html
Literal	A										<section class="prog__container">Common superclass for nodes representing literals (boolean, string, number, etc).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Literal.html
LongLiteral	A										<section class="prog__container">Expression language AST node that represents a long integer literal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/LongLiteral.html
MethodReference	A										<section class="prog__container">Expression language AST node that represents a method reference.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/MethodReference.html
NullLiteral	A										<section class="prog__container">Expression language AST node that represents null.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/NullLiteral.html
OpAnd	A										<section class="prog__container">Represents the boolean AND operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpAnd.html
OpDec	A										<section class="prog__container">Decrement operator.  Can be used in a prefix or postfix form. This will throw\n appropriate exceptions if the operand in question does not support decrement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpDec.html
OpDivide	A										<section class="prog__container">Implements division operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpDivide.html
OpEQ	A										<section class="prog__container">Implements the equality operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpEQ.html
Operator.DescriptorComparison	A										<section class="prog__container">A descriptor comparison encapsulates the result of comparing descriptor\n for two operands and describes at what level they are compatible.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Operator.DescriptorComparison.html
Operator	A										<section class="prog__container">Common supertype for operators that operate on either one or two operands.\n In the case of multiply or divide there would be two operands, but for\n unary plus or minus, there is only one.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Operator.html
OperatorBetween	A										<section class="prog__container">Represents the between operator. The left operand to between must be a single value and\n the right operand must be a list - this operator returns true if the left operand is\n between (using the registered comparator) the two elements in the list. The definition\n of between being inclusive follows the SQL BETWEEN definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OperatorBetween.html
OperatorInstanceof	A										<section class="prog__container">The operator 'instanceof' checks if an object is of the class specified in the right\n hand operand, in the same way that instanceof does in Java.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OperatorInstanceof.html
OperatorMatches	A										<section class="prog__container">Implements the matches operator. Matches takes two operands:\n The first is a String and the second is a Java regex.\n It will return true when SpelNodeImpl.getValue(org.springframework.expression.spel.ExpressionState) is called\n if the first operand matches the regex.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OperatorMatches.html
OperatorNot	A										<section class="prog__container">Represents a NOT operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OperatorNot.html
OperatorPower	A										<section class="prog__container">The power operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OperatorPower.html
OpGE	A										<section class="prog__container">Implements greater-than-or-equal operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpGE.html
OpGT	A										<section class="prog__container">Implements the greater-than operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpGT.html
OpInc	A										<section class="prog__container">Increment operator. Can be used in a prefix or postfix form. This will throw\n appropriate exceptions if the operand in question does not support increment.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpInc.html
OpLE	A										<section class="prog__container">Implements the less-than-or-equal operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpLE.html
OpLT	A										<section class="prog__container">Implements the less-than operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpLT.html
OpMinus	A										<section class="prog__container">The minus operator supports:\n \nsubtraction of numbers\n subtraction of an int from a string of one character\n (effectively decreasing that character), so 'd'-3='a'\n \nIt can be used as a unary operator for numbers.\n The standard promotions are performed when the operand types vary (double-int=double).\n For other options it defers to the registered overloader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpMinus.html
OpModulus	A										<section class="prog__container">Implements the modulus operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpModulus.html
OpMultiply	A										<section class="prog__container">Implements the multiply operator.\n\n Conversions and promotions are handled as defined in\n Section 5.6.2 of the\n Java Language Specification, with the addiction of BigDecimal/BigInteger management:\n\n If any of the operands is of a reference type, unboxing conversion (Section 5.1.8)\n is performed. Then:\n If either operand is of type BigDecimal, the other is converted to BigDecimal.\n If either operand is of type double, the other is converted to double.\n Otherwise, if either operand is of type float, the other is converted to float.\n If either operand is of type BigInteger, the other is converted to BigInteger.\n Otherwise, if either operand is of type long, the other is converted to long.\n Otherwise, both operands are converted to type int.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpMultiply.html
OpNE	A										<section class="prog__container">Implements the not-equal operator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpNE.html
OpOr	A										<section class="prog__container">Represents the boolean OR operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpOr.html
OpPlus	A										<section class="prog__container">The plus operator will:\n \nadd numbers\n concatenate strings\n \nIt can be used as a unary operator for numbers.\n The standard promotions are performed when the operand types vary (double+int=double).\n For other options it defers to the registered overloader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/OpPlus.html
Projection	A										<section class="prog__container">Represents projection, where a given operation is performed on all elements in some\n input sequence, returning a new sequence of the same size. For example:\n "{1,2,3,4,5,6,7,8,9,10}.!{#isEven(#this)}" returns "[n, y, n, y, n, y, n, y, n, y]"</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Projection.html
PropertyOrFieldReference	A										<section class="prog__container">Represents a simple property or field reference.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/PropertyOrFieldReference.html
QualifiedIdentifier	A										<section class="prog__container">Represents a dot separated sequence of strings that indicate a package qualified type\n reference.\n\n Example: "java.lang.String" as in the expression "new java.lang.String('hello')"</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/QualifiedIdentifier.html
RealLiteral	A										<section class="prog__container">Expression language AST node that represents a real literal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/RealLiteral.html
Selection	A										<section class="prog__container">Represents selection over a map or collection.\n For example: {1,2,3,4,5,6,7,8,9,10}.?{#isEven(#this) == 'y'} returns [2, 4, 6, 8, 10]\n\n Basically a subset of the input data is returned based on the\n evaluation of the expression supplied as selection criteria.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Selection.html
SpelNodeImpl	A										<section class="prog__container">The common supertype of all AST nodes in a parsed Spring Expression Language\n format expression.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/SpelNodeImpl.html
StringLiteral	A										<section class="prog__container">Expression language AST node that represents a string literal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/StringLiteral.html
Ternary	A										<section class="prog__container">Represents a ternary expression, for example: "someCheck()?true:false".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/Ternary.html
TypeCode	A										<section class="prog__container">Captures primitive types and their corresponding class objects, plus one special entry\n that represents all reference (non-primitive) types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/TypeCode.html
TypeReference	A										<section class="prog__container">Represents a reference to a type, for example "T(String)" or "T(com.somewhere.Foo)"</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/TypeReference.html
ValueRef	A										<section class="prog__container">Represents a reference to a value.  With a reference it is possible to get or set the\n value. Passing around value references rather than the values themselves can avoid\n incorrect duplication of operand evaluation. For example in 'list[index++]++' without a\n value reference for 'list[index++]' it would be necessary to evaluate list[index++]\n twice (once to get the value, once to determine where the value goes) and that would\n double increment index.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/ValueRef.html
ValueRef.NullValueRef	A										<section class="prog__container">A ValueRef for the null value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/ValueRef.NullValueRef.html
ValueRef.TypedValueHolderValueRef	A										<section class="prog__container">A ValueRef holder for a single value, which cannot be set.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/ValueRef.TypedValueHolderValueRef.html
VariableReference	A										<section class="prog__container">Represents a variable reference, eg. #someVar. Note this is different to a *local*\n variable like $someVar</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/ast/VariableReference.html
SpelCompiler	A										<section class="prog__container">A SpelCompiler will take a regular parsed expression and create (and load) a class\n containing byte code that does the same thing as that expression. The compiled form of\n an expression will evaluate far faster than the interpreted form.\n\n The SpelCompiler is not currently handling all expression types but covers many of\n the common cases. The framework is extensible to cover more cases in the future. For\n absolute maximum speed there is *no checking* in the compiled code. The compiled\n version of the expression uses information learned during interpreted runs of the\n expression when it generates the byte code. For example if it knows that a particular\n property dereference always seems to return a Map then it will generate byte code that\n expects the result of the property dereference to be a Map. This ensures maximal\n performance but should the dereference result in something other than a map, the\n compiled expression will fail - like a ClassCastException would occur if passing data\n of an unexpected type in a regular Java program.\n\n Due to the lack of checking there are likely some expressions that should never be\n compiled, for example if an expression is continuously dealing with different types of\n data. Due to these cases the compiler is something that must be selectively turned on\n for an associated SpelExpressionParser (through the SpelParserConfiguration\n object), it is not on by default.\n\n Individual expressions can be compiled by calling SpelCompiler.compile(expression).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/standard/SpelCompiler.html
SpelExpression	A										<section class="prog__container">A SpelExpression represents a parsed (valid) expression that is ready to be\n evaluated in a specified context. An expression can be evaluated standalone or in a\n specified context. During expression evaluation the context may be asked to resolve\n references to types, beans, properties, and methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/standard/SpelExpression.html
SpelExpressionParser	A										<section class="prog__container">SpEL parser. Instances are reusable and thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/standard/SpelExpressionParser.html
ReflectionHelper	A										<section class="prog__container">Utility methods used by the reflection resolver code to discover the appropriate\n methods/constructors and fields that should be used in expressions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectionHelper.html
ReflectiveConstructorExecutor	A										<section class="prog__container">A simple ConstructorExecutor implementation that runs a constructor using reflective\n invocation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectiveConstructorExecutor.html
ReflectiveConstructorResolver	A										<section class="prog__container">A constructor resolver that uses reflection to locate the constructor that should be invoked.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectiveConstructorResolver.html
ReflectiveMethodExecutor	A										<section class="prog__container">Execute a command using the specified arguments, and using the specified expression state.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectiveMethodExecutor.html
ReflectiveMethodResolver	A										<section class="prog__container">Reflection-based MethodResolver used by default in StandardEvaluationContext\n unless explicit method resolvers have been specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectiveMethodResolver.html
ReflectivePropertyAccessor	A										<section class="prog__container">Simple PropertyAccessor that uses reflection to access properties\n for reading and writing.\n\n A property can be accessed through a public getter method (when being read)\n or a public setter method (when being written), and also as a public field.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectivePropertyAccessor.html
ReflectivePropertyAccessor.OptimalPropertyAccessor	A										<section class="prog__container">An optimized form of a PropertyAccessor that will use reflection but only knows\n how to access a particular property on a particular class. This is unlike the\n general ReflectivePropertyResolver which manages a cache of methods/fields that\n may be invoked to access different properties on different classes. This optimal\n accessor exists because looking up the appropriate reflective object by class/name\n on each read is not cheap.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/ReflectivePropertyAccessor.OptimalPropertyAccessor.html
StandardEvaluationContext	A										<section class="prog__container">Provides a default EvaluationContext implementation.\n\n To resolve properties/methods/fields this context uses a reflection mechanism.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/StandardEvaluationContext.html
StandardOperatorOverloader	A										<section class="prog__container">Execute the specified operation on two operands, returning a result.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/StandardOperatorOverloader.html
StandardTypeComparator	A										<section class="prog__container">A simple basic TypeComparator implementation.\n It supports comparison of Numbers and types implementing Comparable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/StandardTypeComparator.html
StandardTypeConverter	A										<section class="prog__container">Default implementation of the TypeConverter interface,\n delegating to a core Spring ConversionService.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/StandardTypeConverter.html
StandardTypeLocator	A										<section class="prog__container">A simple implementation of TypeLocator that uses the context ClassLoader\n (or any ClassLoader set upon it). It supports 'well-known' packages: So if a\n type cannot be found, it will try the registered imports to locate it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/expression/spel/support/StandardTypeLocator.html
Formatter	A										<section class="prog__container">Formats objects of type T.\n A Formatter is both a Printer and a Parser for an object type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/Formatter.html
FormatterRegistrar	A										<section class="prog__container">Registers Converters and Formatters with\n a FormattingConversionService through the FormatterRegistry SPI.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/FormatterRegistrar.html
FormatterRegistry	A										<section class="prog__container">A registry of field formatting logic.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/FormatterRegistry.html
Parser	A										<section class="prog__container">Parses text strings to produce instances of T.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/Parser.html
Printer	A										<section class="prog__container">Prints objects of type T for display.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/Printer.html
DateTimeFormat	A										<section class="prog__container">Declares that a field should be formatted as a date time.\n\n Supports formatting by style pattern, ISO date time pattern, or custom format pattern string.\n Can be applied to java.util.Date, java.util.Calendar, java.long.Long,\n Joda-Time value types; and as of Spring 4 and JDK 8, to JSR-310 java.time types too.\n\n For style-based formatting, set the style() attribute to be the style pattern code.\n The first character of the code is the date style, and the second character is the time style.\n Specify a character of 'S' for short style, 'M' for medium, 'L' for long, and 'F' for full.\n A date or time may be omitted by specifying the style character '-'.\n\n For ISO-based formatting, set the iso() attribute to be the desired DateTimeFormat.ISO format,\n such as DateTimeFormat.ISO.DATE. For custom formatting, set the pattern() attribute to be the\n DateTime pattern, such as yyyy/MM/dd hh:mm:ss a.\n\n Each attribute is mutually exclusive, so only set one attribute per annotation instance\n (the one most convenient one for your formatting needs).\n When the pattern attribute is specified, it takes precedence over both the style and ISO attribute.\n When the iso() attribute is specified, it takes precedence over the style attribute.\n When no annotation attributes are specified, the default format applied is style-based\n with a style code of 'SS' (short date, short time).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/annotation/DateTimeFormat.html
DateTimeFormat.ISO	A										<section class="prog__container">Common ISO date time format patterns.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html
NumberFormat	A										<section class="prog__container">Declares that a field should be formatted as a number.\n\n Supports formatting by style or custom pattern string.\n Can be applied to any JDK java.lang.Number type.\n\n For style-based formatting, set the style() attribute to be the\n desired NumberFormat.Style. For custom formatting, set the pattern()\n attribute to be the number pattern, such as #, ###.##.\n\n Each attribute is mutually exclusive, so only set one attribute per\n annotation instance (the one most convenient one for your formatting needs).\n When the pattern() attribute is specified, it takes precedence over\n the style() attribute. When no annotation attributes are specified,\n the default format applied is style-based for either number of currency,\n depending on the annotated field type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/annotation/NumberFormat.html
NumberFormat.Style	A										<section class="prog__container">Common number format styles.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html
DateFormatter	A										<section class="prog__container">A formatter for Date types.\n Allows the configuration of an explicit date pattern and locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/DateFormatter.html
DateFormatterRegistrar	A										<section class="prog__container">Configures Date formatting for use with Spring.\n\n Designed for direct instantiation but also exposes the static\n addDateConverters(ConverterRegistry) utility method for ad hoc use\n against any ConverterRegistry instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/DateFormatterRegistrar.html
DateTimeFormatAnnotationFormatterFactory	A										<section class="prog__container">Formats fields annotated with the DateTimeFormat annotation using\n a DateFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/DateTimeFormatAnnotationFormatterFactory.html
DateTimeFormatterFactory	A										<section class="prog__container">Factory that creates a Joda-Time DateTimeFormatter.\n\n Formatters will be created using the defined pattern,\n ISO, and style methods (considered in that order).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/DateTimeFormatterFactory.html
DateTimeFormatterFactoryBean	A										<section class="prog__container">FactoryBean that creates a Joda-Time DateTimeFormatter.\n See the base class for configuration details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/DateTimeFormatterFactoryBean.html
DateTimeParser	A										<section class="prog__container">Parses Joda DateTime instances using a DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/DateTimeParser.html
JodaDateTimeFormatAnnotationFormatterFactory	A										<section class="prog__container">Formats fields annotated with the DateTimeFormat annotation using Joda-Time.\n\n NOTE: Spring's Joda-Time support requires Joda-Time 2.x, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/JodaDateTimeFormatAnnotationFormatterFactory.html
JodaTimeContext	A										<section class="prog__container">A context that holds user-specific Joda-Time settings such as the user's\n Chronology (calendar system) and time zone.\n\n A null property value indicate the user has not specified a setting.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/JodaTimeContext.html
JodaTimeContextHolder	A										<section class="prog__container">A holder for a thread-local JodaTimeContext\n with user-specific Joda-Time settings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/JodaTimeContextHolder.html
JodaTimeFormatterRegistrar	A										<section class="prog__container">Configures Joda-Time's formatting system for use with Spring.\n\n NOTE: Spring's Joda-Time support requires Joda-Time 2.x, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.html
LocalDateParser	A										<section class="prog__container">Parses Joda LocalDate instances using a\n DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/LocalDateParser.html
LocalDateTimeParser	A										<section class="prog__container">Parses Joda LocalDateTime instances using a\n DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/LocalDateTimeParser.html
LocalTimeParser	A										<section class="prog__container">Parses Joda LocalTime instances using a\n DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/LocalTimeParser.html
MillisecondInstantPrinter	A										<section class="prog__container">Prints Long instances using a Joda DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/MillisecondInstantPrinter.html
ReadableInstantPrinter	A										<section class="prog__container">Prints Joda-Time ReadableInstant instances using a DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/ReadableInstantPrinter.html
ReadablePartialPrinter	A										<section class="prog__container">Prints Joda-Time ReadablePartial instances using a DateTimeFormatter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/joda/ReadablePartialPrinter.html
DateTimeContext	A										<section class="prog__container">A context that holds user-specific java.time (JSR-310) settings\n such as the user's Chronology (calendar system) and time zone.\n A null property value indicate the user has not specified a setting.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/DateTimeContext.html
DateTimeContextHolder	A										<section class="prog__container">A holder for a thread-local user DateTimeContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/DateTimeContextHolder.html
DateTimeFormatterFactory	A										<section class="prog__container">Factory that creates a JSR-310 DateTimeFormatter.\n\n Formatters will be created using the defined pattern,\n ISO, and xxxStyle methods (considered in that order).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/DateTimeFormatterFactory.html
DateTimeFormatterFactoryBean	A										<section class="prog__container">FactoryBean that creates a JSR-310 DateTimeFormatter.\n See the base class for configuration details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/DateTimeFormatterFactoryBean.html
DateTimeFormatterRegistrar	A										<section class="prog__container">Configures the JSR-310 java.time formatting system for use with Spring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/DateTimeFormatterRegistrar.html
InstantFormatter	A										<section class="prog__container">Formatter implementation for a JSR-310 Instant,\n following JSR-310's parsing rules for an Instant (that is, not using a\n configurable DateTimeFormatter): accepting the\n default ISO_INSTANT format as well as RFC_1123_DATE_TIME\n (which is commonly used for HTTP date header values), as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/InstantFormatter.html
Jsr310DateTimeFormatAnnotationFormatterFactory	A										<section class="prog__container">Formats fields annotated with the DateTimeFormat annotation using the\n JSR-310 java.time package in JDK 8.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.html
TemporalAccessorParser	A										<section class="prog__container">Parser implementation for a JSR-310 TemporalAccessor,\n using a DateTimeFormatter) (the contextual one, if available).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/TemporalAccessorParser.html
TemporalAccessorPrinter	A										<section class="prog__container">Printer implementation for a JSR-310 TemporalAccessor,\n using a DateTimeFormatter) (the contextual one, if available).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/TemporalAccessorPrinter.html
AbstractNumberFormatter	A										<section class="prog__container">Abstract formatter for Numbers,\n providing a getNumberFormat(java.util.Locale) template method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/AbstractNumberFormatter.html
CurrencyFormatter	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of the more clearly named\n CurrencyStyleFormatter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/CurrencyFormatter.html
CurrencyStyleFormatter	A										<section class="prog__container">A BigDecimal formatter for number values in currency style.\n\n Delegates to NumberFormat.getCurrencyInstance(Locale).\n Configures BigDecimal parsing so there is no loss of precision.\n Can apply a specified RoundingMode to parsed values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/CurrencyStyleFormatter.html
NumberFormatAnnotationFormatterFactory	A										<section class="prog__container">Formats fields annotated with the NumberFormat annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/NumberFormatAnnotationFormatterFactory.html
NumberFormatter	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of the more clearly named\n NumberStyleFormatter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/NumberFormatter.html
NumberStyleFormatter	A										<section class="prog__container">A general-purpose number formatter using NumberFormat's number style.\n\n Delegates to NumberFormat.getInstance(Locale).\n Configures BigDecimal parsing so there is no loss in precision.\n Allows configuration over the decimal number pattern.\n The AbstractNumberFormatter.parse(String, Locale) routine always returns a BigDecimal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/NumberStyleFormatter.html
PercentFormatter	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of the more clearly named\n PercentStyleFormatter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/PercentFormatter.html
PercentStyleFormatter	A										<section class="prog__container">A formatter for number values in percent style.\n\n Delegates to NumberFormat.getPercentInstance(Locale).\n Configures BigDecimal parsing so there is no loss in precision.\n The AbstractNumberFormatter.parse(String, Locale) routine always returns a BigDecimal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/PercentStyleFormatter.html
CurrencyUnitFormatter	A										<section class="prog__container">Formatter for JSR-354 CurrencyUnit values,\n from and to currency code Strings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/money/CurrencyUnitFormatter.html
Jsr354NumberFormatAnnotationFormatterFactory	A										<section class="prog__container">Formats MonetaryAmount fields annotated\n with Spring's common NumberFormat annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.html
MonetaryAmountFormatter	A										<section class="prog__container">Formatter for JSR-354 MonetaryAmount values,\n delegating to MonetaryAmountFormat.format(javax.money.MonetaryAmount)\n and MonetaryAmountFormat.parse(java.lang.CharSequence).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/number/money/MonetaryAmountFormatter.html
DefaultFormattingConversionService	A										<section class="prog__container">A specialization of FormattingConversionService configured by default with\n converters and formatters appropriate for most applications.\n\n Designed for direct instantiation but also exposes the static addDefaultFormatters(org.springframework.format.FormatterRegistry)\n utility method for ad hoc use against any FormatterRegistry instance, just\n as DefaultConversionService exposes its own\n addDefaultConverters method.\n\n Automatically registers formatters for JSR-354 Money & Currency, JSR-310 Date-Time\n and/or Joda-Time, depending on the presence of the corresponding API on the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/support/DefaultFormattingConversionService.html
FormatterPropertyEditorAdapter	A										<section class="prog__container">Adapter that bridges between Formatter and PropertyEditor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/support/FormatterPropertyEditorAdapter.html
FormattingConversionService	A										<section class="prog__container">A ConversionService implementation\n designed to be configured as a FormatterRegistry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/support/FormattingConversionService.html
FormattingConversionServiceFactoryBean	A										<section class="prog__container">A factory providing convenient access to a FormattingConversionService\n configured with converters and formatters for common types such as numbers and\n datetimes.\n\n Additional converters and formatters can be registered declaratively through\n setConverters(Set) and setFormatters(Set). Another option\n is to register converters and formatters in code by implementing the\n FormatterRegistrar interface. You can then configure provide the set\n of registrars to use through setFormatterRegistrars(Set).\n\n A good example for registering converters and formatters in code is\n JodaTimeFormatterRegistrar, which registers a number of\n date-related formatters and converters. For a more detailed list of cases\n see setFormatterRegistrars(Set)\nLike all FactoryBean implementations, this class is suitable for\n use when configuring a Spring application context using Spring <beans>\n XML. When configuring the container with\n @Configuration\n classes, simply instantiate, configure and return the appropriate\n FormattingConversionService object from a\n @Bean method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/support/FormattingConversionServiceFactoryBean.html
CacheControl	A										<section class="prog__container">A builder for creating "Cache-Control" HTTP response headers.\n\n Adding Cache-Control directives to HTTP responses can significantly improve the client\n experience when interacting with a web application. This builder creates opinionated\n "Cache-Control" headers with response directives only, with several use cases in mind.\n\n \nCaching HTTP responses with CacheControl cc = CacheControl.maxAge(1, TimeUnit.HOURS)\n will result in Cache-Control: "max-age=3600"\nPreventing cache with CacheControl cc = CacheControl.noStore()\n will result in Cache-Control: "no-store"\nAdvanced cases like CacheControl cc = CacheControl.maxAge(1, TimeUnit.HOURS).noTransform().cachePublic()\n will result in Cache-Control: "max-age=3600, no-transform, public"\n\nNote that to be efficient, Cache-Control headers should be written along HTTP validators\n such as "Last-Modified" or "ETag" headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/CacheControl.html
HttpEntity	A										<section class="prog__container">Represents an HTTP request or response entity, consisting of headers and body.\n\n Typically used in combination with the RestTemplate,\n like so:\n \n HttpHeaders headers = new HttpHeaders();\n headers.setContentType(MediaType.TEXT_PLAIN);\n HttpEntity<String> entity = new HttpEntity<String>(helloWorld, headers);\n URI location = template.postForLocation("http://example.com", entity);\n \n or\n \n HttpEntity<String> entity = template.getForEntity("http://example.com", String.class);\n String body = entity.getBody();\n MediaType contentType = entity.getHeaders().getContentType();\n \n Can also be used in Spring MVC, as a return value from a @Controller method:\n \n @RequestMapping("/handle")\n public HttpEntity<String> handle() {\n   HttpHeaders responseHeaders = new HttpHeaders();\n   responseHeaders.set("MyResponseHeader", "MyValue");\n   return new HttpEntity<String>("Hello World", responseHeaders);\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpEntity.html
HttpHeaders	A										<section class="prog__container">Represents HTTP request and response headers, mapping string header names to a list of string values.\n\n In addition to the normal methods defined by Map, this class offers the following\n convenience methods:\n \ngetFirst(String) returns the first value associated with a given header name\nadd(String, String) adds a header value to the list of values for a header name\nset(String, String) sets the header value to a single string value\n\nInspired by com.sun.net.httpserver.Headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpHeaders.html
HttpInputMessage	A										<section class="prog__container">Represents an HTTP input message, consisting of headers\n and a readable body.\n\n Typically implemented by an HTTP request handle on the server side,\n or an HTTP response handle on the client side.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpInputMessage.html
HttpMessage	A										<section class="prog__container">Represents the base interface for HTTP request and response messages.\n Consists of HttpHeaders, retrievable via getHeaders().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpMessage.html
HttpMethod	A										<section class="prog__container">Java 5 enumeration of HTTP request methods. Intended for use\n with ClientHttpRequest\n and RestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpMethod.html
HttpOutputMessage	A										<section class="prog__container">Represents an HTTP output message, consisting of headers\n and a writable body.\n\n Typically implemented by an HTTP request handle on the client side,\n or an HTTP response handle on the server side.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpOutputMessage.html
HttpRange	A										<section class="prog__container">Represents an HTTP (byte) range for use with the HTTP "Range" header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpRange.html
HttpRequest	A										<section class="prog__container">Represents an HTTP request message, consisting of\n method and uri.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpRequest.html
HttpStatus	A										<section class="prog__container">Enumeration of HTTP status codes.\n\n The HTTP status code series can be retrieved via series().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpStatus.html
HttpStatus.Series	A										<section class="prog__container">Enumeration of HTTP status series.\n Retrievable via HttpStatus.series().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpStatus.Series.html
InvalidMediaTypeException	A										<section class="prog__container">Exception thrown from MediaType.parseMediaType(String) in case of\n encountering an invalid media type specification String.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/InvalidMediaTypeException.html
MediaType	A										<section class="prog__container">A sub-class of MimeType that adds support for quality parameters as defined\n in the HTTP specification.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/MediaType.html
MediaTypeEditor	A										<section class="prog__container">Editor for MediaType\n descriptors, to automatically convert String specifications\n (e.g. "text/html") to MediaType properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/MediaTypeEditor.html
RequestEntity.BodyBuilder	A										<section class="prog__container">Defines a builder that adds a body to the response entity.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.BodyBuilder.html
RequestEntity.HeadersBuilder<B extends RequestEntity.HeadersBuilder>	A										<section class="prog__container">Defines a builder that adds headers to the request entity.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.HeadersBuilder.html
RequestEntity	A										<section class="prog__container">Extension of HttpEntity that adds a method and\n uri.\n Used in RestTemplate and @Controller methods.\n\n In RestTemplate, this class is used as parameter in\n exchange():\n \n MyRequest body = ...\n RequestEntity<MyRequest> request = RequestEntity.post(new URI("http://example.com/bar")).accept(MediaType.APPLICATION_JSON).body(body);\n ResponseEntity<MyResponse> response = template.exchange(request, MyResponse.class);\n \nIf you would like to provide a URI template with variables, consider using\n UriTemplate:\n \n URI uri = new UriTemplate("http://example.com/{foo}").expand("bar");\n RequestEntity<MyRequest> request = RequestEntity.post(uri).accept(MediaType.APPLICATION_JSON).body(body);\n \nCan also be used in Spring MVC, as a parameter in a @Controller method:\n \n @RequestMapping("/handle")\n public void handle(RequestEntity<String> request) {\n   HttpMethod method = request.getMethod();\n   URI url = request.getUrl();\n   String body = request.getBody();\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.html
ResponseEntity.BodyBuilder	A										<section class="prog__container">Defines a builder that adds a body to the response entity.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/ResponseEntity.BodyBuilder.html
ResponseEntity.HeadersBuilder<B extends ResponseEntity.HeadersBuilder>	A										<section class="prog__container">Defines a builder that adds headers to the response entity.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/ResponseEntity.HeadersBuilder.html
ResponseEntity	A										<section class="prog__container">Extension of HttpEntity that adds a HttpStatus status code.\n Used in RestTemplate as well @Controller methods.\n\n In RestTemplate, this class is returned by\n getForEntity() and\n exchange():\n \n ResponseEntity<String> entity = template.getForEntity("http://example.com", String.class);\n String body = entity.getBody();\n MediaType contentType = entity.getHeaders().getContentType();\n HttpStatus statusCode = entity.getStatusCode();\n \nCan also be used in Spring MVC, as the return value from a @Controller method:\n \n @RequestMapping("/handle")\n public ResponseEntity<String> handle() {\n   URI location = ...;\n   HttpHeaders responseHeaders = new HttpHeaders();\n   responseHeaders.setLocation(location);\n   responseHeaders.set("MyResponseHeader", "MyValue");\n   return new ResponseEntity<String>("Hello World", responseHeaders, HttpStatus.CREATED);\n }\n \n Or, by using a builder accessible via static methods:\n \n @RequestMapping("/handle")\n public ResponseEntity<String> handle() {\n   URI location = ...;\n   return ResponseEntity.created(location).header("MyResponseHeader", "MyValue").body("Hello World");\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html
StreamingHttpOutputMessage.Body	A										<section class="prog__container">Defines the contract for bodies that can be written directly to an OutputStream.\n It is useful with HTTP client libraries that provide indirect access to an\n OutputStream via a callback mechanism.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/StreamingHttpOutputMessage.Body.html
StreamingHttpOutputMessage	A										<section class="prog__container">Represents a HTTP output message that allows for setting a streaming body.\n Note that such messages typically do not support HttpOutputMessage.getBody() access.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/StreamingHttpOutputMessage.html
AbstractClientHttpRequest	A										<section class="prog__container">Abstract base for ClientHttpRequest that makes sure that headers\n and body are not written multiple times.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AbstractClientHttpRequest.html
AbstractClientHttpRequestFactoryWrapper	A										<section class="prog__container">Abstract base class for ClientHttpRequestFactory implementations\n that decorate another request factory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AbstractClientHttpRequestFactoryWrapper.html
AbstractClientHttpResponse	A										<section class="prog__container">Abstract base for ClientHttpResponse.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AbstractClientHttpResponse.html
AsyncClientHttpRequest	A										<section class="prog__container">Represents a client-side asynchronous HTTP request. Created via an\n implementation of the AsyncClientHttpRequestFactory.\n\n A AsyncHttpRequest can be executed,\n getting a future ClientHttpResponse which can be read from.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AsyncClientHttpRequest.html
AsyncClientHttpRequestExecution	A										<section class="prog__container">Represents the context of a client-side HTTP request execution.\n\n Used to invoke the next interceptor in the interceptor chain, or -\n if the calling interceptor is last - execute the request itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AsyncClientHttpRequestExecution.html
AsyncClientHttpRequestFactory	A										<section class="prog__container">Factory for AsyncClientHttpRequest objects.\n Requests are created by the createAsyncRequest(URI, HttpMethod) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AsyncClientHttpRequestFactory.html
AsyncClientHttpRequestInterceptor	A										<section class="prog__container">Intercepts client-side HTTP requests. Implementations of this interface can be\n registered\n with the AsyncRestTemplate as to modify\n the outgoing HttpRequest and/or register to modify the incoming\n ClientHttpResponse with help of a\n ListenableFutureAdapter.\n\n The main entry point for interceptors is intercept(org.springframework.http.HttpRequest, byte[], org.springframework.http.client.AsyncClientHttpRequestExecution).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/AsyncClientHttpRequestInterceptor.html
BufferingClientHttpRequestFactory	A										<section class="prog__container">Wrapper for a ClientHttpRequestFactory that buffers\n all outgoing and incoming streams in memory.\n\n Using this wrapper allows for multiple reads of the</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/BufferingClientHttpRequestFactory.html
ClientHttpRequest	A										<section class="prog__container">Represents a client-side HTTP request.\n Created via an implementation of the ClientHttpRequestFactory.\n\n A ClientHttpRequest can be executed,\n receiving a ClientHttpResponse which can be read from.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequest.html
ClientHttpRequestExecution	A										<section class="prog__container">Represents the context of a client-side HTTP request execution.\n\n Used to invoke the next interceptor in the interceptor chain,\n or - if the calling interceptor is last - execute the request itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestExecution.html
ClientHttpRequestFactory	A										<section class="prog__container">Factory for ClientHttpRequest objects.\n Requests are created by the createRequest(URI, HttpMethod) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestFactory.html
ClientHttpRequestInterceptor	A										<section class="prog__container">Intercepts client-side HTTP requests. Implementations of this interface can be registered with the\n RestTemplate, as to modify the outgoing ClientHttpRequest\n and/or the incoming ClientHttpResponse.\n\n The main entry point for interceptors is intercept(HttpRequest, byte[], ClientHttpRequestExecution).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestInterceptor.html
ClientHttpResponse	A										<section class="prog__container">Represents a client-side HTTP response.\n Obtained via an calling of the ClientHttpRequest.execute().\n\n A ClientHttpResponse must be closed,\n typically in a finally block.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpResponse.html
HttpComponentsAsyncClientHttpRequestFactory	A										<section class="prog__container">Asynchronous extension of the HttpComponentsClientHttpRequestFactory. Uses\n Apache HttpComponents\n HttpAsyncClient 4.0 to create requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.html
HttpComponentsClientHttpRequestFactory	A										<section class="prog__container">ClientHttpRequestFactory implementation that\n uses Apache HttpComponents\n HttpClient to create requests.\n\n Allows to use a pre-configured HttpClient instance -\n potentially with authentication, HTTP connection pooling, etc.\n\n NOTE: Requires Apache HttpComponents 4.3 or higher, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.html
InterceptingAsyncClientHttpRequestFactory	A										<section class="prog__container">Wrapper for a AsyncClientHttpRequestFactory that has support for\n AsyncClientHttpRequestInterceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/InterceptingAsyncClientHttpRequestFactory.html
InterceptingClientHttpRequestFactory	A										<section class="prog__container">Wrapper for a ClientHttpRequestFactory that has support for ClientHttpRequestInterceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/InterceptingClientHttpRequestFactory.html
Netty4ClientHttpRequestFactory	A										<section class="prog__container">ClientHttpRequestFactory implementation that\n uses Netty 4 to create requests.\n\n Allows to use a pre-configured EventLoopGroup instance - useful for sharing\n across multiple clients.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/Netty4ClientHttpRequestFactory.html
OkHttp3ClientHttpRequestFactory	A										<section class="prog__container">ClientHttpRequestFactory implementation that uses\n OkHttp 3.x to create requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.html
OkHttpClientHttpRequestFactory	A										<section class="prog__container">ClientHttpRequestFactory implementation that uses\n OkHttp 2.x to create requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/OkHttpClientHttpRequestFactory.html
SimpleClientHttpRequestFactory	A										<section class="prog__container">ClientHttpRequestFactory implementation that uses standard JDK facilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/SimpleClientHttpRequestFactory.html
AsyncHttpAccessor	A										<section class="prog__container">Base class for AsyncRestTemplate\n and other HTTP accessing gateway helpers, defining common properties\n such as the AsyncClientHttpRequestFactory to operate on.\n\n Not intended to be used directly. See\n AsyncRestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/AsyncHttpAccessor.html
BasicAuthorizationInterceptor	A										<section class="prog__container">ClientHttpRequestInterceptor to apply a BASIC authorization header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/BasicAuthorizationInterceptor.html
HttpAccessor	A										<section class="prog__container">Base class for RestTemplate\n and other HTTP accessing gateway helpers, defining common properties\n such as the ClientHttpRequestFactory to operate on.\n\n Not intended to be used directly. See RestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/HttpAccessor.html
HttpRequestWrapper	A										<section class="prog__container">Provides a convenient implementation of the HttpRequest interface\n that can be overridden to adapt the request.\n\n These methods default to calling through to the wrapped request object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/HttpRequestWrapper.html
InterceptingAsyncHttpAccessor	A										<section class="prog__container">The HTTP accessor that extends the base AsyncHttpAccessor with\n request intercepting functionality.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/InterceptingAsyncHttpAccessor.html
InterceptingHttpAccessor	A										<section class="prog__container">Base class for RestTemplate and other HTTP accessing gateway helpers, adding\n interceptor-related properties to HttpAccessor's common properties.\n\n Not intended to be used directly. See RestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/InterceptingHttpAccessor.html
ProxyFactoryBean	A										<section class="prog__container">FactoryBean that creates a java.net.Proxy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/support/ProxyFactoryBean.html
AbstractGenericHttpMessageConverter	A										<section class="prog__container">Abstract base class for most GenericHttpMessageConverter implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/AbstractGenericHttpMessageConverter.html
AbstractHttpMessageConverter	A										<section class="prog__container">Abstract base class for most HttpMessageConverter implementations.\n\n This base class adds support for setting supported MediaTypes, through the\n supportedMediaTypes bean property. It also adds\n support for Content-Type and Content-Length when writing to output messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/AbstractHttpMessageConverter.html
BufferedImageHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and write\n BufferedImages.\n\n By default, this converter can read all media types that are supported\n by the registered image readers,\n and writes using the media type of the first available\n registered image writer.\n The latter can be overridden by setting the\n defaultContentType property.\n\n If the cacheDir property is set, this converter\n will cache image data.\n\n The process(ImageReadParam) and process(ImageWriteParam)\n template methods allow subclasses to override Image I/O parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/BufferedImageHttpMessageConverter.html
ByteArrayHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and write byte arrays.\n\n By default, this converter supports all media types (&#42;&#47;&#42;), and\n writes with a Content-Type of application/octet-stream. This can be\n overridden by setting the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/ByteArrayHttpMessageConverter.html
FormHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter to read and write 'normal' HTML\n forms and also to write (but not read) multipart data (e.g. file uploads).\n\n In other words, this converter can read and write the\n "application/x-www-form-urlencoded" media type as\n MultiValueMap<String, String> and it can also\n write (but not read) the "multipart/form-data" media type as\n MultiValueMap<String, Object>.\n\n When writing multipart data, this converter uses other\n HttpMessageConverters to write the respective\n MIME parts. By default, basic converters are registered (for Strings\n and Resources). These can be overridden through the\n partConverters property.\n\n For example, the following snippet shows how to submit an HTML form:\n \n RestTemplate template = new RestTemplate();  // FormHttpMessageConverter is configured by default\n MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();\n form.add("field 1", "value 1");\n form.add("field 2", "value 2");\n form.add("field 2", "value 3");\n template.postForLocation("http://example.com/myForm", form);\n \nThe following snippet shows how to do a file upload:\n \n MultiValueMap<String, Object> parts = new LinkedMultiValueMap<String, Object>();\n parts.add("field 1", "value 1");\n parts.add("file", new ClassPathResource("myFile.jpg"));\n template.postForLocation("http://example.com/myFileUpload", parts);\n \nSome methods in this class were inspired by\n org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/FormHttpMessageConverter.html
GenericHttpMessageConverter	A										<section class="prog__container">A specialization of HttpMessageConverter that can convert an HTTP request\n into a target object of a specified generic type and a source object of a specified\n generic type into an HTTP response.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/GenericHttpMessageConverter.html
HttpMessageConversionException	A										<section class="prog__container">Thrown by HttpMessageConverter implementations when a conversion attempt fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageConversionException.html
HttpMessageConverter	A										<section class="prog__container">Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html
HttpMessageNotReadableException	A										<section class="prog__container">Thrown by HttpMessageConverter implementations when the\n HttpMessageConverter.read(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) method fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageNotReadableException.html
HttpMessageNotWritableException	A										<section class="prog__container">Thrown by HttpMessageConverter implementations when the\n HttpMessageConverter.write(T, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) method fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageNotWritableException.html
ObjectToStringHttpMessageConverter	A										<section class="prog__container">An HttpMessageConverter that uses StringHttpMessageConverter\n for reading and writing content and a ConversionService for converting\n the String content to and from the target object type.\n\n By default, this converter supports the media type text/plain only.\n This can be overridden through the supportedMediaTypes\n property.\n\n A usage example:\n\n \n <bean class="org.springframework.http.converter.ObjectToStringHttpMessageConverter">\n   <constructor-arg>\n     <bean class="org.springframework.context.support.ConversionServiceFactoryBean"/>\n   </constructor-arg>\n </bean>\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/ObjectToStringHttpMessageConverter.html
ResourceHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and write Resources\n and supports byte range requests.\n\n By default, this converter can read all media types. The Java Activation Framework (JAF) -\n if available - is used to determine the Content-Type of written resources.\n If JAF is not available, application/octet-stream is used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/ResourceHttpMessageConverter.html
ResourceRegionHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can write a single ResourceRegion,\n or Collections of ResourceRegions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/ResourceRegionHttpMessageConverter.html
StringHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and write strings.\n\n By default, this converter supports all media types (&#42;&#47;&#42;),\n and writes with a Content-Type of text/plain. This can be overridden\n by setting the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/StringHttpMessageConverter.html
AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed>	A										<section class="prog__container">Abstract base class for Atom and RSS Feed message converters, using the\n ROME tools project.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/feed/AbstractWireFeedHttpMessageConverter.html
AtomFeedHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter\n that can read and write Atom feeds. Specifically, this converter can handle Feed\n objects from the ROME project.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.\nBy default, this converter reads and writes the media type (application/atom+xml).\n This can be overridden through the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/feed/AtomFeedHttpMessageConverter.html
RssChannelHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter\n that can read and write RSS feeds. Specifically, this converter can handle Channel\n objects from the ROME project.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.\nBy default, this converter reads and writes the media type (application/rss+xml).\n This can be overridden through the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.html
AbstractJackson2HttpMessageConverter	A										<section class="prog__container">Abstract base class for Jackson based and content type independent\n HttpMessageConverter implementations.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.html
GsonBuilderUtils	A										<section class="prog__container">A simple utility class for obtaining a Google Gson 2.x GsonBuilder\n which Base64-encodes byte[] properties when reading and writing JSON.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/GsonBuilderUtils.html
GsonFactoryBean	A										<section class="prog__container">A FactoryBean for creating a Google Gson 2.x Gson instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/GsonFactoryBean.html
GsonHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter\n that can read and write JSON using the\n Google Gson library's\n Gson class.\n\n This converter can be used to bind to typed beans or untyped HashMaps.\n By default, it supports application/json and application/*+json with\n UTF-8 character set.\n\n Tested against Gson 2.6; compatible with Gson 2.0 and higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/GsonHttpMessageConverter.html
Jackson2ObjectMapperBuilder	A										<section class="prog__container">A builder used to create ObjectMapper instances with a fluent API.\n\n It customizes Jackson's default properties with the following ones:\n \nMapperFeature.DEFAULT_VIEW_INCLUSION is disabled\nDeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\n\nIt also automatically registers the following well-known modules if they are\n detected on the classpath:\n \njackson-datatype-jdk7: support for Java 7 types like Path\njackson-datatype-jdk8: support for other Java 8 types like Optional\njackson-datatype-jsr310: support for Java 8 Date & Time API types\njackson-datatype-joda: support for Joda-Time types\njackson-module-kotlin: support for Kotlin classes and data classes\n\nCompatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html
Jackson2ObjectMapperFactoryBean	A										<section class="prog__container">A FactoryBean for creating a Jackson 2.x ObjectMapper (default) or\n XmlMapper (createXmlMapper property set to true) with setters\n to enable or disable Jackson features from within XML configuration.\n\n It customizes Jackson defaults properties with the following ones:\n \nMapperFeature.DEFAULT_VIEW_INCLUSION is disabled\nDeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\n\nExample usage with\n MappingJackson2HttpMessageConverter:\n\n \n <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">\n   <property name="objectMapper">\n     <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"\n       p:autoDetectFields="false"\n       p:autoDetectGettersSetters="false"\n       p:annotationIntrospector-ref="jaxbAnnotationIntrospector" />\n   </property>\n </bean>\n \nExample usage with MappingJackson2JsonView:\n\n \n <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">\n   <property name="objectMapper">\n     <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"\n       p:failOnEmptyBeans="false"\n       p:indentOutput="true">\n       <property name="serializers">\n         <array>\n           <bean class="org.mycompany.MyCustomSerializer" />\n         </array>\n       </property>\n     </bean>\n   </property>\n </bean>\n \nIn case there are no specific setters provided (for some rarely used options),\n you can still use the more general methods  setFeaturesToEnable(java.lang.Object...) and\n setFeaturesToDisable(java.lang.Object...).\n\n \n <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">\n   <property name="featuresToEnable">\n     <array>\n       <util:constant static-field="com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE"/>\n       <util:constant static-field="com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE"/>\n     </array>\n   </property>\n   <property name="featuresToDisable">\n     <array>\n       <util:constant static-field="com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS"/>\n     </array>\n   </property>\n </bean>\n \nIt also automatically registers the following well-known modules if they are\n detected on the classpath:\n \njackson-datatype-jdk7: support for Java 7 types like Path\njackson-datatype-jdk8: support for other Java 8 types like Optional\njackson-datatype-jsr310: support for Java 8 Date & Time API types\njackson-datatype-joda: support for Joda-Time types\njackson-module-kotlin: support for Kotlin classes and data classes\n\nIn case you want to configure Jackson's ObjectMapper with a custom Module,\n you can register one or more such Modules by class name via setModulesToInstall(java.lang.Class<? extends com.fasterxml.jackson.databind.Module>...):\n\n \n <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">\n   <property name="modulesToInstall" value="myapp.jackson.MySampleModule,myapp.jackson.MyOtherModule"/>\n </bean\n \nCompatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.html
MappingJackson2HttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and\n write JSON using Jackson 2.x's ObjectMapper.\n\n This converter can be used to bind to typed beans, or untyped HashMap instances.\n\n By default, this converter supports application/json and application/*+json\n with UTF-8 character set. This can be overridden by setting the\n supportedMediaTypes property.\n\n The default constructor uses the default configuration provided by Jackson2ObjectMapperBuilder.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html
MappingJacksonInputMessage	A										<section class="prog__container">HttpInputMessage that can eventually stores a Jackson view that will be used\n to deserialize the message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJacksonInputMessage.html
MappingJacksonValue	A										<section class="prog__container">A simple holder for the POJO to serialize via\n MappingJackson2HttpMessageConverter along with further\n serialization instructions to be passed in to the converter.\n\n On the server side this wrapper is added with a\n ResponseBodyInterceptor after content negotiation selects the\n converter to use but before the write.\n\n On the client side, simply wrap the POJO and pass it in to the\n RestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJacksonValue.html
SpringHandlerInstantiator	A										<section class="prog__container">Allows for creating Jackson (JsonSerializer, JsonDeserializer,\n KeyDeserializer, TypeResolverBuilder, TypeIdResolver)\n beans with autowiring against a Spring ApplicationContext.\n\n As of Spring 4.3, this overrides all factory methods in HandlerInstantiator,\n including non-abstract ones and recently introduced ones from Jackson 2.4 and 2.5:\n for ValueInstantiator, ObjectIdGenerator, ObjectIdResolver,\n PropertyNamingStrategy, Converter, VirtualBeanPropertyWriter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/SpringHandlerInstantiator.html
ExtensionRegistryInitializer	A										<section class="prog__container">Google Protocol Messages can contain message extensions that can be parsed if\n the appropriate configuration has been registered in the ExtensionRegistry.\n\n This interface provides a facility to populate the ExtensionRegistry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.html
ProtobufHttpMessageConverter	A										<section class="prog__container">An HttpMessageConverter that reads and writes Messages\n using Google Protocol Buffers.\n\n By default, it supports "application/x-protobuf", "text/plain",\n "application/json", "application/xml", while also writing "text/html".\n\n To generate Message Java classes, you need to install the protoc binary.\n\n Requires Protobuf 2.6 and Protobuf Java Format 1.4, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.html
AllEncompassingFormHttpMessageConverter	A										<section class="prog__container">Extension of FormHttpMessageConverter,\n adding support for XML and JSON-based parts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.html
AbstractJaxb2HttpMessageConverter	A										<section class="prog__container">Abstract base class for HttpMessageConverters\n that use JAXB2. Creates JAXBContext object lazily.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/AbstractJaxb2HttpMessageConverter.html
AbstractXmlHttpMessageConverter	A										<section class="prog__container">Abstract base class for HttpMessageConverters\n that convert from/to XML.\n\n By default, subclasses of this converter support text/xml, application/xml, and application/*-xml. This can be overridden by setting the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/AbstractXmlHttpMessageConverter.html
Jaxb2RootElementHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter that can read and write XML using JAXB2.\n\n This converter can read classes annotated with XmlRootElement and\n XmlType, and write classes annotated with XmlRootElement,\n or subclasses thereof.\n\n Note that if using Spring's Marshaller/Unmarshaller abstractions from the\n spring-oxm module you should can the\n MarshallingHttpMessageConverter instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.html
MappingJackson2XmlHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter\n that can read and write XML using \n Jackson 2.x extension component for reading and writing XML encoded data.\n\n By default, this converter supports application/xml, text/xml, and\n application/*+xml with UTF-8 character set. This can be overridden by\n setting the supportedMediaTypes property.\n\n The default constructor uses the default configuration provided by Jackson2ObjectMapperBuilder.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/MappingJackson2XmlHttpMessageConverter.html
MarshallingHttpMessageConverter	A										<section class="prog__container">Implementation of HttpMessageConverter\n that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\n\n This converter requires a Marshaller and Unmarshaller before it can be used.\n These can be injected by the constructor\n or bean properties.\n\n By default, this converter supports text/xml and application/xml. This can be\n overridden by setting the supportedMediaTypes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html
XmlAwareFormHttpMessageConverter	A										<section class="prog__container">Deprecated. \nin favor of\n AllEncompassingFormHttpMessageConverter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/xml/XmlAwareFormHttpMessageConverter.html
ServerHttpAsyncRequestControl	A										<section class="prog__container">A control that can put the processing of an HTTP request in asynchronous mode during\n which the response remains open until explicitly closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServerHttpAsyncRequestControl.html
ServerHttpRequest	A										<section class="prog__container">Represents a server-side HTTP request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServerHttpRequest.html
ServerHttpResponse	A										<section class="prog__container">Represents a server-side HTTP response.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServerHttpResponse.html
ServletServerHttpAsyncRequestControl	A										<section class="prog__container">A ServerHttpAsyncRequestControl to use on Servlet containers (Servlet 3.0+).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServletServerHttpAsyncRequestControl.html
ServletServerHttpRequest	A										<section class="prog__container">ServerHttpRequest implementation that is based on a HttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServletServerHttpRequest.html
ServletServerHttpResponse	A										<section class="prog__container">ServerHttpResponse implementation that is based on a HttpServletResponse.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/ServletServerHttpResponse.html
InstrumentationSavingAgent	A										<section class="prog__container">Java agent that saves the Instrumentation interface from the JVM\n for later use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/InstrumentationSavingAgent.html
InstrumentationLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver relying on VM Instrumentation.\n\n Start the JVM specifying the Java agent to be used, like as follows:\n\n -javaagent:path/to/org.springframework.instrument.jar\nwhere org.springframework.instrument.jar is a JAR file containing\n the InstrumentationSavingAgent class, as shipped with Spring.\n\n In Eclipse, for example, set the "Run configuration"'s JVM args to be of the form:\n\n -javaagent:${project_loc}/lib/org.springframework.instrument.jar</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/InstrumentationLoadTimeWeaver.html
LoadTimeWeaver	A										<section class="prog__container">Defines the contract for adding one or more\n ClassFileTransformers to a ClassLoader.\n\n Implementations may operate on the current context ClassLoader\n or expose their own instrumentable ClassLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/LoadTimeWeaver.html
ReflectiveLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver which uses reflection to delegate to an underlying ClassLoader\n with well-known transformation hooks. The underlying ClassLoader is expected to\n support the following weaving methods (as defined in the LoadTimeWeaver\n interface):\n \npublic void addTransformer(java.lang.instrument.ClassFileTransformer):\n for registering the given ClassFileTransformer on this ClassLoader\n public ClassLoader getThrowawayClassLoader():\n for obtaining a throwaway class loader for this ClassLoader (optional;\n ReflectiveLoadTimeWeaver will fall back to a SimpleThrowawayClassLoader if\n that method isn't available)\n \nPlease note that the above methods must reside in a class that is\n publicly accessible, although the class itself does not have to be visible\n to the application's class loader.\n\n The reflective nature of this LoadTimeWeaver is particularly useful when the\n underlying ClassLoader implementation is loaded in a different class loader itself\n (such as the application server's class loader which is not visible to the\n web application). There is no direct API dependency between this LoadTimeWeaver\n adapter and the underlying ClassLoader, just a 'loose' method contract.\n\n This is the LoadTimeWeaver to use in combination with Spring's\n TomcatInstrumentableClassLoader\n for Tomcat 5.0+ as well as with the Resin application server version 3.1+.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.html
ResourceOverridingShadowingClassLoader	A										<section class="prog__container">Subclass of ShadowingClassLoader that overrides attempts to\n locate certain files.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/ResourceOverridingShadowingClassLoader.html
ShadowingClassLoader	A										<section class="prog__container">ClassLoader decorator that shadows an enclosing ClassLoader,\n applying registered transformers to all affected classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/ShadowingClassLoader.html
SimpleInstrumentableClassLoader	A										<section class="prog__container">Simplistic implementation of an instrumentable ClassLoader.\n\n Usable in tests and standalone environments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/SimpleInstrumentableClassLoader.html
SimpleLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver that builds and exposes a\n SimpleInstrumentableClassLoader.\n\n Mainly intended for testing environments, where it is sufficient to\n perform all class transformation on a newly created\n ClassLoader instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/SimpleLoadTimeWeaver.html
SimpleThrowawayClassLoader	A										<section class="prog__container">ClassLoader that can be used to load classes without bringing them\n into the parent loader. Intended to support JPA "temp class loader"\n requirement, but not JPA-specific.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/SimpleThrowawayClassLoader.html
WeavingTransformer	A										<section class="prog__container">ClassFileTransformer-based weaver, allowing for a list of transformers to be\n applied on a class byte array. Normally used inside class loaders.\n\n Note: This class is deliberately implemented for minimal external dependencies,\n since it is included in weaver jars (to be deployed into application servers).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/WeavingTransformer.html
GlassFishLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver implementation for GlassFish's\n org.glassfish.api.deployment.InstrumentableClassLoader InstrumentableClassLoader.\n\n As of Spring 4.0, this weaver supports GlassFish V3 and V4.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.html
JBossLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.\n Autodetects the specific JBoss version at runtime: currently supports\n JBoss AS 6 and 7, as well as WildFly 8 and 9 (as of Spring 4.2).\n\n NOTE: On JBoss 6, to avoid the container loading the classes before the\n application actually starts, one needs to add a WEB-INF/jboss-scanning.xml\n file to the application archive - with the following content:\n <scanning xmlns="urn:jboss:scanning:1.0"/>\nThanks to Ales Justin and Marius Bogoevici for the initial prototype.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.html
TomcatInstrumentableClassLoader	A										<section class="prog__container">Extension of Tomcat's default class loader which adds instrumentation\n to loaded classes without the need to use a VM-wide agent.\n\n To be registered using a\n Loader tag\n in Tomcat's Context\n definition in the server.xml file, with the Spring-provided "spring-instrument-tomcat.jar"\n file deployed into Tomcat's "lib" directory. The required configuration tag looks as follows:\n\n <Loader loaderClass="org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader"/>\nTypically used in combination with a\n ReflectiveLoadTimeWeaver\n defined in the Spring application context. The addTransformer and\n getThrowawayClassLoader methods mirror the corresponding methods\n in the LoadTimeWeaver interface, as expected by ReflectiveLoadTimeWeaver.\n\n NOTE: Requires Apache Tomcat version 6.0 or higher, as of Spring 4.0.\n This class is not intended to work on Tomcat 8.0+; please rely on Tomcat's own\n InstrumentableClassLoader facility instead, as autodetected by Spring's\n TomcatLoadTimeWeaver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/tomcat/TomcatInstrumentableClassLoader.html
TomcatLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver implementation\n for Tomcat's new org.apache.tomcat.InstrumentableClassLoader.\n Also capable of handling Spring's TomcatInstrumentableClassLoader when encountered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/tomcat/TomcatLoadTimeWeaver.html
WebLogicLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver implementation for WebLogic's instrumentable\n ClassLoader.\n\n NOTE: Requires BEA WebLogic version 10 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/weblogic/WebLogicLoadTimeWeaver.html
WebSphereLoadTimeWeaver	A										<section class="prog__container">LoadTimeWeaver implementation for WebSphere's instrumentable ClassLoader.\n Compatible with WebSphere 7 as well as 8.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/instrument/classloading/websphere/WebSphereLoadTimeWeaver.html
CannotCreateRecordException	A										<section class="prog__container">Exception thrown when the creating of a CCI Record failed\n for connector-internal reasons.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/CannotCreateRecordException.html
CannotGetCciConnectionException	A										<section class="prog__container">Fatal exception thrown when we can't connect to an EIS using CCI.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/CannotGetCciConnectionException.html
CciOperationNotSupportedException	A										<section class="prog__container">Exception thrown when the connector doesn't support a specific CCI operation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/CciOperationNotSupportedException.html
InvalidResultSetAccessException	A										<section class="prog__container">Exception thrown when a ResultSet has been accessed in an invalid fashion.\n Such exceptions always have a java.sql.SQLException root cause.\n\n This typically happens when an invalid ResultSet column index or name\n has been specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/InvalidResultSetAccessException.html
RecordTypeNotSupportedException	A										<section class="prog__container">Exception thrown when the creating of a CCI Record failed because\n the connector doesn't support the desired CCI Record type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/RecordTypeNotSupportedException.html
CciLocalTransactionManager	A										<section class="prog__container">PlatformTransactionManager implementation\n that manages local transactions for a single CCI ConnectionFactory.\n Binds a CCI Connection from the specified ConnectionFactory to the thread,\n potentially allowing for one thread-bound Connection per ConnectionFactory.\n\n Application code is required to retrieve the CCI Connection via\n ConnectionFactoryUtils.getConnection(ConnectionFactory) instead of a standard\n J2EE-style ConnectionFactory.getConnection() call. Spring classes such as\n CciTemplate use this strategy implicitly.\n If not used in combination with this transaction manager, the\n ConnectionFactoryUtils lookup strategy behaves exactly like the native\n DataSource lookup; it can thus be used in a portable fashion.\n\n Alternatively, you can allow application code to work with the standard\n J2EE lookup pattern ConnectionFactory.getConnection(), for example\n for legacy code that is not aware of Spring at all. In that case, define a\n TransactionAwareConnectionFactoryProxy for your target ConnectionFactory,\n which will automatically participate in Spring-managed transactions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/CciLocalTransactionManager.html
ConnectionFactoryUtils	A										<section class="prog__container">Helper class that provides static methods for obtaining CCI Connections\n from a ConnectionFactory. Includes special\n support for Spring-managed transactional Connections, e.g. managed\n by CciLocalTransactionManager or\n JtaTransactionManager.\n\n Used internally by CciTemplate,\n Spring's CCI operation objects and the CciLocalTransactionManager.\n Can also be used directly in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/ConnectionFactoryUtils.html
ConnectionHolder	A										<section class="prog__container">Connection holder, wrapping a CCI Connection.\n\n CciLocalTransactionManager binds instances of this class\n to the thread, for a given ConnectionFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/ConnectionHolder.html
ConnectionSpecConnectionFactoryAdapter	A										<section class="prog__container">An adapter for a target CCI ConnectionFactory,\n applying the given ConnectionSpec to every standard getConnection()\n call, that is, implicitly invoking getConnection(ConnectionSpec)\n on the target. All other methods simply delegate to the corresponding methods\n of the target ConnectionFactory.\n\n Can be used to proxy a target JNDI ConnectionFactory that does not have a\n ConnectionSpec configured. Client code can work with the ConnectionFactory\n without passing in a ConnectionSpec on every getConnection() call.\n\n In the following example, client code can simply transparently work with\n the preconfigured "myConnectionFactory", implicitly accessing\n "myTargetConnectionFactory" with the specified user credentials.\n\n \n <bean id="myTargetConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">\n   <property name="jndiName" value="java:comp/env/cci/mycf"/>\n </bean>\n\n <bean id="myConnectionFactory" class="org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter">\n   <property name="targetConnectionFactory" ref="myTargetConnectionFactory"/>\n   <property name="connectionSpec">\n     <bean class="your.resource.adapter.ConnectionSpecImpl">\n       <property name="username" value="myusername"/>\n       <property name="password" value="mypassword"/>\n     </bean>\n   </property>\n </bean>\nIf the "connectionSpec" is empty, this proxy will simply delegate to the\n standard getConnection() method of the target ConnectionFactory.\n This can be used to keep a UserCredentialsConnectionFactoryAdapter bean definition\n just for the option of implicitly passing in a ConnectionSpec if the\n particular target ConnectionFactory requires it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/ConnectionSpecConnectionFactoryAdapter.html
DelegatingConnectionFactory	A										<section class="prog__container">CCI ConnectionFactory implementation that delegates all calls\n to a given target ConnectionFactory.\n\n This class is meant to be subclassed, with subclasses overriding only\n those methods (such as getConnection()) that should not simply\n delegate to the target ConnectionFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/DelegatingConnectionFactory.html
NotSupportedRecordFactory	A										<section class="prog__container">Implementation of the CCI RecordFactory interface that always throws\n NotSupportedException.\n\n Useful as a placeholder for a RecordFactory argument (for example as\n defined by the RecordCreator callback), in particular when the connector's\n ConnectionFactory.getRecordFactory() implementation happens to\n throw NotSupportedException early rather than throwing the exception from\n RecordFactory's methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/NotSupportedRecordFactory.html
SingleConnectionFactory	A										<section class="prog__container">A CCI ConnectionFactory adapter that returns the same Connection on all\n getConnection calls, and ignores calls to\n Connection.close().\n\n Useful for testing and standalone environments, to keep using the same\n Connection for multiple CciTemplate calls, without having a pooling\n ConnectionFactory, also spanning any number of transactions.\n\n You can either pass in a CCI Connection directly, or let this\n factory lazily create a Connection via a given target ConnectionFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/SingleConnectionFactory.html
TransactionAwareConnectionFactoryProxy	A										<section class="prog__container">Proxy for a target CCI ConnectionFactory, adding\n awareness of Spring-managed transactions. Similar to a transactional JNDI\n ConnectionFactory as provided by a J2EE server.\n\n Data access code that should remain unaware of Spring's data access support\n can work with this proxy to seamlessly participate in Spring-managed transactions.\n Note that the transaction manager, for example the CciLocalTransactionManager,\n still needs to work with underlying ConnectionFactory, not with this proxy.\n\n Make sure that TransactionAwareConnectionFactoryProxy is the outermost\n ConnectionFactory of a chain of ConnectionFactory proxies/adapters.\n TransactionAwareConnectionFactoryProxy can delegate either directly to the\n target connection pool or to some intermediate proxy/adapter like\n ConnectionSpecConnectionFactoryAdapter.\n\n Delegates to ConnectionFactoryUtils for automatically participating in\n thread-bound transactions, for example managed by CciLocalTransactionManager.\n getConnection calls and close calls on returned Connections\n will behave properly within a transaction, i.e. always operate on the transactional\n Connection. If not within a transaction, normal ConnectionFactory behavior applies.\n\n This proxy allows data access code to work with the plain JCA CCI API and still\n participate in Spring-managed transactions, similar to CCI code in a J2EE/JTA\n environment. However, if possible, use Spring's ConnectionFactoryUtils, CciTemplate or\n CCI operation objects to get transaction participation even without a proxy for\n the target ConnectionFactory, avoiding the need to define such a proxy in the first place.\n\n NOTE: This ConnectionFactory proxy needs to return wrapped Connections\n in order to handle close calls properly. Therefore, the returned Connections cannot\n be cast to a native CCI Connection type or to a connection pool implementation type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/TransactionAwareConnectionFactoryProxy.html
CciOperations	A										<section class="prog__container">Interface that specifies a basic set of CCI operations on an EIS.\n Implemented by CciTemplate. Not often used, but a useful option\n to enhance testability, as it can easily be mocked or stubbed.\n\n Alternatively, the standard CCI infrastructure can be mocked.\n However, mocking this interface constitutes significantly less work.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/CciOperations.html
CciTemplate	A										<section class="prog__container">This is the central class in the CCI core package.\n It simplifies the use of CCI and helps to avoid common errors.\n It executes core CCI workflow, leaving application code to provide parameters\n to CCI and extract results. This class executes EIS queries or updates,\n catching ResourceExceptions and translating them to the generic exception\n hierarchy defined in the org.springframework.dao package.\n\n Code using this class can pass in and receive Record\n instances, or alternatively implement callback interfaces for creating input\n Records and extracting result objects from output Records (or CCI ResultSets).\n\n Can be used within a service implementation via direct instantiation\n with a ConnectionFactory reference, or get prepared in an application context\n and given to services as bean reference. Note: The ConnectionFactory should\n always be configured as a bean in the application context, in the first case\n given to the service directly, in the second case to the prepared template.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/CciTemplate.html
ConnectionCallback	A										<section class="prog__container">Generic callback interface for code that operates on a CCI Connection.\n Allows to execute any number of operations on a single Connection,\n using any type and number of Interaction.\n\n This is particularly useful for delegating to existing data access code\n that expects a Connection to work on and throws ResourceException. For newly\n written code, it is strongly recommended to use CciTemplate's more specific\n execute variants.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/ConnectionCallback.html
InteractionCallback	A										<section class="prog__container">Generic callback interface for code that operates on a CCI Interaction.\n Allows to execute any number of operations on a single Interaction, for\n example a single execute call or repeated execute calls with varying\n parameters.\n\n This is particularly useful for delegating to existing data access code\n that expects an Interaction to work on and throws ResourceException. For newly\n written code, it is strongly recommended to use CciTemplate's more specific\n execute variants.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/InteractionCallback.html
RecordCreator	A										<section class="prog__container">Callback interface for creating a CCI Record instance,\n usually based on the passed-in CCI RecordFactory.\n\n Used for input Record creation in CciTemplate. Alternatively,\n Record instances can be passed into CciTemplate's corresponding\n execute methods directly, either instantiated manually\n or created through CciTemplate's Record factory methods.\n\n Also used for creating default output Records in CciTemplate.\n This is useful when the JCA connector needs an explicit output Record\n instance, but no output Records should be passed into CciTemplate's\n execute methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/RecordCreator.html
RecordExtractor	A										<section class="prog__container">Callback interface for extracting a result object from a CCI Record instance.\n\n Used for output object creation in CciTemplate. Alternatively, output\n Records can also be returned to client code as-is. In case of a CCI ResultSet\n as execution result, you will almost always want to implement a RecordExtractor,\n to be able to read the ResultSet in a managed fashion, with the CCI Connection\n still open while reading the ResultSet.\n\n Implementations of this interface perform the actual work of extracting\n results, but don't need to worry about exception handling. ResourceExceptions\n will be caught and handled correctly by the CciTemplate class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/RecordExtractor.html
CciDaoSupport	A										<section class="prog__container">Convenient super class for CCI-based data access objects.\n\n Requires a ConnectionFactory to be set,\n providing a CciTemplate based\n on it to subclasses through the getCciTemplate() method.\n\n This base class is mainly intended for CciTemplate usage but can\n also be used when working with a Connection directly or when using\n org.springframework.jca.cci.object classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/support/CciDaoSupport.html
CommAreaRecord	A										<section class="prog__container">CCI Record implementation for a COMMAREA, holding a byte array.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/core/support/CommAreaRecord.html
EisOperation	A										<section class="prog__container">Base class for EIS operation objects that work with the CCI API.\n Encapsulates a CCI ConnectionFactory and a CCI InteractionSpec.\n\n Works with a CciTemplate instance underneath. EIS operation objects\n are an alternative to working with a CciTemplate directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/object/EisOperation.html
MappingCommAreaOperation	A										<section class="prog__container">EIS operation object for access to COMMAREA records.\n Subclass of the generic MappingRecordOperation class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/object/MappingCommAreaOperation.html
MappingRecordOperation	A										<section class="prog__container">EIS operation object that expects mapped input and output objects,\n converting to and from CCI Records.\n\n Concrete subclasses must implement the abstract\n createInputRecord(RecordFactory, Object) and\n extractOutputData(Record) methods, to create an input\n Record from an object and to convert an output Record into an object,\n respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/object/MappingRecordOperation.html
MappingRecordOperation.RecordCreatorImpl	A										<section class="prog__container">Implementation of RecordCreator that calls the enclosing\n class's createInputRecord method.</section>	No URL found
MappingRecordOperation.RecordExtractorImpl	A										<section class="prog__container">Implementation of RecordExtractor that calls the enclosing\n class's extractOutputData method.</section>	No URL found
SimpleRecordOperation	A										<section class="prog__container">EIS operation object that accepts a passed-in CCI input Record\n and returns a corresponding CCI output Record.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/object/SimpleRecordOperation.html
BootstrapContextAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be\n notified of the BootstrapContext (typically determined by the\n ResourceAdapterApplicationContext) that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/context/BootstrapContextAware.html
ResourceAdapterApplicationContext	A										<section class="prog__container">ApplicationContext implementation\n for a JCA ResourceAdapter. Needs to be initialized with the JCA\n BootstrapContext, passing it on to\n Spring-managed beans that implement BootstrapContextAware.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/context/ResourceAdapterApplicationContext.html
SpringContextResourceAdapter	A										<section class="prog__container">JCA 1.5 ResourceAdapter implementation\n that loads a Spring ApplicationContext,\n starting and stopping Spring-managed beans as part of the ResourceAdapter's\n lifecycle.\n\n Ideal for application contexts that do not need any HTTP entry points\n but rather just consist of message endpoints and scheduled jobs etc.\n Beans in such a context may use application server resources such as the\n JTA transaction manager and JNDI-bound JDBC DataSources and JMS\n ConnectionFactory instances, and may also register with the platform's\n JMX server - all through Spring's standard transaction management and\n JNDI and JMX support facilities.\n\n If the need for scheduling asynchronous work arises, consider using\n Spring's WorkManagerTaskExecutor\n as a standard bean definition, to be injected into application beans\n through dependency injection. This WorkManagerTaskExecutor will automatically\n use the JCA WorkManager from the BootstrapContext that has been provided\n to this ResourceAdapter.\n\n The JCA BootstrapContext may also be\n accessed directly, through application components that implement the\n BootstrapContextAware interface. When deployed using this\n ResourceAdapter, the BootstrapContext is guaranteed to be passed on\n to such components.\n\n This ResourceAdapter is to be defined in a "META-INF/ra.xml" file\n within a J2EE ".rar" deployment unit like as follows:\n\n \n <?xml version="1.0" encoding="UTF-8"?>\n <connector xmlns="http://java.sun.com/xml/ns/j2ee"\n                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n                 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd"\n                 version="1.5">\n         <vendor-name>Spring Framework</vendor-name>\n         <eis-type>Spring Connector</eis-type>\n         <resourceadapter-version>1.0</resourceadapter-version>\n         <resourceadapter>\n                 <resourceadapter-class>org.springframework.jca.context.SpringContextResourceAdapter</resourceadapter-class>\n                 <config-property>\n                         <config-property-name>ContextConfigLocation</config-property-name>\n                         <config-property-type>java.lang.String</config-property-type>\n                         <config-property-value>META-INF/applicationContext.xml</config-property-value>\n                 </config-property>\n         </resourceadapter>\n </connector>\n\n Note that "META-INF/applicationContext.xml" is the default context config\n location, so it doesn't have to specified unless you intend to specify\n different/additional config files. So in the default case, you may remove\n the entire config-property section above.\n\n For simple deployment needs, all you need to do is the following:\n Package all application classes into a RAR file (which is just a standard\n JAR file with a different file extension), add all required library jars\n into the root of the RAR archive, add a "META-INF/ra.xml" deployment\n descriptor as shown above as well as the corresponding Spring XML bean\n definition file(s) (typically "META-INF/applicationContext.xml"),\n and drop the resulting RAR file into your application server's\n deployment directory!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/context/SpringContextResourceAdapter.html
AbstractMessageEndpointFactory.AbstractMessageEndpoint	A										<section class="prog__container">Inner class for actual endpoint implementations, based on template\n method to allow for any kind of concrete endpoint implementation.</section>	No URL found
AbstractMessageEndpointFactory	A										<section class="prog__container">Abstract base implementation of the JCA 1.5/1.6/1.7\n MessageEndpointFactory interface,\n providing transaction management capabilities as well as ClassLoader\n exposure for endpoint invocations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.html
GenericMessageEndpointFactory	A										<section class="prog__container">Generic implementation of the JCA 1.5\n MessageEndpointFactory interface,\n providing transaction management capabilities for any kind of message\n listener object (e.g. MessageListener objects or\n MessageListener objects.\n\n Uses AOP proxies for concrete endpoint instances, simply wrapping\n the specified message listener object and exposing all of its implemented\n interfaces on the endpoint instance.\n\n Typically used with Spring's GenericMessageEndpointManager,\n but not tied to it. As a consequence, this endpoint factory could\n also be used with programmatic endpoint management on a native\n ResourceAdapter instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/endpoint/GenericMessageEndpointFactory.html
GenericMessageEndpointFactory.InternalResourceException	A										<section class="prog__container">Internal exception thrown when a ResourceException has been encountered\n during the endpoint invocation.\n Will only be used if the ResourceAdapter does not invoke the\n endpoint's beforeDelivery and afterDelivery\n directly, leaving it up to the concrete endpoint to apply those -\n and to handle any ResourceExceptions thrown from them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/endpoint/GenericMessageEndpointFactory.InternalResourceException.html
GenericMessageEndpointManager	A										<section class="prog__container">Generic bean that manages JCA 1.5 message endpoints within a Spring\n application context, activating and deactivating the endpoint as part\n of the application context's lifecycle.\n\n This class is completely generic in that it may work with any\n ResourceAdapter, any MessageEndpointFactory, and any ActivationSpec.\n It can be configured in standard bean style, for example through\n Spring's XML bean definition format, as follows:\n\n \n <bean class="org.springframework.jca.endpoint.GenericMessageEndpointManager">\n         <property name="resourceAdapter" ref="resourceAdapter"/>\n         <property name="messageEndpointFactory">\n     <bean class="org.springframework.jca.endpoint.GenericMessageEndpointFactory">\n       <property name="messageListener" ref="messageListener"/>\n     </bean>\n         </property>\n         <property name="activationSpec">\n     <bean class="org.apache.activemq.ra.ActiveMQActivationSpec">\n       <property name="destination" value="myQueue"/>\n       <property name="destinationType" value="javax.jms.Queue"/>\n     </bean>\n   </property>\n </bean>\n\n In this example, Spring's own GenericMessageEndpointFactory is used\n to point to a standard message listener object that happens to be supported\n by the specified target ResourceAdapter: in this case, a JMS\n MessageListener object as supported by the ActiveMQ\n message broker, defined as a Spring bean:\n\n \n <bean id="messageListener" class="com.myorg.messaging.myMessageListener">\n   ...\n </bean>\n\n The target ResourceAdapter may be configured as a local Spring bean as well\n (the typical case) or obtained from JNDI (e.g. on WebLogic). For the\n example above, a local ResourceAdapter bean could be defined as follows\n (matching the "resourceAdapter" bean reference above):\n\n \n <bean id="resourceAdapter" class="org.springframework.jca.support.ResourceAdapterFactoryBean">\n   <property name="resourceAdapter">\n     <bean class="org.apache.activemq.ra.ActiveMQResourceAdapter">\n       <property name="serverUrl" value="tcp://localhost:61616"/>\n     </bean>\n   </property>\n   <property name="workManager">\n     <bean class="org.springframework.jca.work.SimpleTaskWorkManager"/>\n   </property>\n </bean>\n\n For a different target resource, the configuration would simply point to a\n different ResourceAdapter and a different ActivationSpec object (which are\n both specific to the resource provider), and possibly a different message\n listener (e.g. a CCI MessageListener for a\n resource adapter which is based on the JCA Common Client Interface).\n\n The asynchronous execution strategy can be customized through the\n "workManager" property on the ResourceAdapterFactoryBean (as shown above).\n Check out SimpleTaskWorkManager's\n javadoc for its configuration options; alternatively, any other\n JCA-compliant WorkManager can be used (e.g. Geronimo's).\n\n Transactional execution is a responsibility of the concrete message endpoint,\n as built by the specified MessageEndpointFactory. GenericMessageEndpointFactory\n supports XA transaction participation through its "transactionManager" property,\n typically with a Spring JtaTransactionManager\n or a plain TransactionManager implementation specified there.\n\n \n <bean class="org.springframework.jca.endpoint.GenericMessageEndpointManager">\n         <property name="resourceAdapter" ref="resourceAdapter"/>\n         <property name="messageEndpointFactory">\n     <bean class="org.springframework.jca.endpoint.GenericMessageEndpointFactory">\n       <property name="messageListener" ref="messageListener"/>\n       <property name="transactionManager" ref="transactionManager"/>\n     </bean>\n         </property>\n         <property name="activationSpec">\n     <bean class="org.apache.activemq.ra.ActiveMQActivationSpec">\n       <property name="destination" value="myQueue"/>\n       <property name="destinationType" value="javax.jms.Queue"/>\n     </bean>\n   </property>\n </bean>\n\n <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>\n\n Alternatively, check out your resource provider's ActivationSpec object,\n which should support local transactions through a provider-specific config flag,\n e.g. ActiveMQActivationSpec's "useRAManagedTransaction" bean property.\n\n \n <bean class="org.springframework.jca.endpoint.GenericMessageEndpointManager">\n         <property name="resourceAdapter" ref="resourceAdapter"/>\n         <property name="messageEndpointFactory">\n     <bean class="org.springframework.jca.endpoint.GenericMessageEndpointFactory">\n       <property name="messageListener" ref="messageListener"/>\n     </bean>\n         </property>\n         <property name="activationSpec">\n     <bean class="org.apache.activemq.ra.ActiveMQActivationSpec">\n       <property name="destination" value="myQueue"/>\n       <property name="destinationType" value="javax.jms.Queue"/>\n       <property name="useRAManagedTransaction" value="true"/>\n     </bean>\n   </property>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/endpoint/GenericMessageEndpointManager.html
LocalConnectionFactoryBean	A										<section class="prog__container">FactoryBean that creates\n a local JCA connection factory in "non-managed" mode (as defined by the\n Java Connector Architecture specification). This is a direct alternative\n to a JndiObjectFactoryBean definition that\n obtains a connection factory handle from a J2EE server's naming environment.\n\n The type of the connection factory is dependent on the actual connector:\n the connector can either expose its native API (such as a JDBC\n DataSource or a JMS ConnectionFactory)\n or follow the standard Common Client Interface (CCI), as defined by the JCA spec.\n The exposed interface in the CCI case is ConnectionFactory.\n\n In order to use this FactoryBean, you must specify the connector's\n "managedConnectionFactory" (usually\n configured as separate JavaBean), which will be used to create the actual\n connection factory reference as exposed to the application. Optionally,\n you can also specify a "connectionManager",\n in order to use a custom ConnectionManager instead of the connector's default.\n\n NOTE: In non-managed mode, a connector is not deployed on an\n application server, or more specificially not interacting with an application\n server. Consequently, it cannot use a J2EE server's system contracts:\n connection management, transaction management, and security management.\n A custom ConnectionManager implementation has to be used for applying those\n services in conjunction with a standalone transaction coordinator etc.\n\n The connector will use a local ConnectionManager (included in the connector)\n by default, which cannot participate in global transactions due to the lack\n of XA enlistment. You need to specify an XA-capable ConnectionManager in\n order to make the connector interact with an XA transaction coordinator.\n Alternatively, simply use the native local transaction facilities of the\n exposed API (e.g. CCI local transactions), or use a corresponding\n implementation of Spring's PlatformTransactionManager SPI\n (e.g. CciLocalTransactionManager)\n to drive local transactions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/support/LocalConnectionFactoryBean.html
ResourceAdapterFactoryBean	A										<section class="prog__container">FactoryBean that bootstraps\n the specified JCA 1.5 ResourceAdapter,\n starting it with a local BootstrapContext\n and exposing it for bean references. It will also stop the ResourceAdapter\n on context shutdown. This corresponds to 'non-managed' bootstrap in a\n local environment, according to the JCA 1.5 specification.\n\n This is essentially an adapter for bean-style bootstrapping of a\n JCA ResourceAdapter, allowing the BootstrapContext or its elements\n (such as the JCA WorkManager) to be specified through bean properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/support/ResourceAdapterFactoryBean.html
SimpleBootstrapContext	A										<section class="prog__container">Simple implementation of the JCA 1.5 BootstrapContext\n interface, used for bootstrapping a JCA ResourceAdapter in a local environment.\n\n Delegates to the given WorkManager and XATerminator, if any. Creates simple\n local instances of java.util.Timer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/support/SimpleBootstrapContext.html
DelegatingWork	A										<section class="prog__container">Simple Work adapter that delegates to a given Runnable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/DelegatingWork.html
SimpleTaskWorkManager	A										<section class="prog__container">Simple JCA 1.5 WorkManager implementation that\n delegates to a Spring TaskExecutor.\n Provides simple task execution including start timeouts, but without support\n for a JCA ExecutionContext (i.e. without support for imported transactions).\n\n Uses a SyncTaskExecutor for doWork(javax.resource.spi.work.Work)\n calls and a SimpleAsyncTaskExecutor\n for startWork(javax.resource.spi.work.Work) and scheduleWork(javax.resource.spi.work.Work) calls, by default.\n These default task executors can be overridden through configuration.\n\n NOTE: This WorkManager does not provide thread pooling by default!\n Specify a ThreadPoolTaskExecutor\n (or any other thread-pooling TaskExecutor) as "asyncTaskExecutor" in order to\n achieve actual thread pooling.\n\n This WorkManager automatically detects a specified\n AsyncTaskExecutor implementation\n and uses its extended timeout functionality where appropriate.\n JCA WorkListeners are fully supported in any case.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/SimpleTaskWorkManager.html
WorkManagerTaskExecutor	A										<section class="prog__container">TaskExecutor implementation\n that delegates to a JCA 1.5 WorkManager, implementing the\n WorkManager interface.\n\n This is mainly intended for use within a JCA ResourceAdapter implementation,\n but may also be used in a standalone environment, delegating to a locally\n embedded WorkManager implementation (such as Geronimo's).\n\n Also implements the JCA 1.5 WorkManager interface itself, delegating all\n calls to the target WorkManager. Hence, a caller can choose whether it wants\n to talk to this executor through the Spring TaskExecutor interface or the\n JCA 1.5 WorkManager interface.\n\n This adapter is also capable of obtaining a JCA WorkManager from JNDI.\n This is for example appropriate on the Geronimo application server, where\n WorkManager GBeans (e.g. Geronimo's default "DefaultWorkManager" GBean)\n can be linked into the J2EE environment through "gbean-ref" entries\n in the geronimo-web.xml deployment descriptor.\n\n On JBoss and GlassFish, obtaining the default JCA WorkManager\n requires special lookup steps. See the\n JBossWorkManagerTaskExecutor\nGlassFishWorkManagerTaskExecutor\n classes which are the direct equivalent of this generic JCA adapter class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/WorkManagerTaskExecutor.html
GlassFishWorkManagerTaskExecutor	A										<section class="prog__container">Spring TaskExecutor adapter for the GlassFish JCA WorkManager.\n Can be defined in web applications to make a TaskExecutor reference\n available, talking to the GlassFish WorkManager (thread pool) underneath.\n\n This is the GlassFish equivalent of the CommonJ\n WorkManagerTaskExecutor\n adapter for WebLogic and WebSphere.\n\n Note: On GlassFish 4 and higher, a\n DefaultManagedTaskExecutor\n should be preferred, following JSR-236 support in Java EE 7.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/glassfish/GlassFishWorkManagerTaskExecutor.html
JBossWorkManagerTaskExecutor	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since there are no fully supported versions\n of JBoss that this class works with anymore\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/jboss/JBossWorkManagerTaskExecutor.html
JBossWorkManagerUtils	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since there are no fully supported versions\n of JBoss that this class works with anymore\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/jboss/JBossWorkManagerUtils.html
BadSqlGrammarException	A										<section class="prog__container">Exception thrown when SQL specified is invalid. Such exceptions always have\n a java.sql.SQLException root cause.\n\n It would be possible to have subclasses for no such table, no such column etc.\n A custom SQLExceptionTranslator could create such more specific exceptions,\n without affecting code using this class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/BadSqlGrammarException.html
CannotGetJdbcConnectionException	A										<section class="prog__container">Fatal exception thrown when we can't connect to an RDBMS using JDBC.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/CannotGetJdbcConnectionException.html
IncorrectResultSetColumnCountException	A										<section class="prog__container">Data access exception thrown when a result set did not have the correct column count,\n for example when expecting a single column but getting 0 or more than 1 columns.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/IncorrectResultSetColumnCountException.html
InvalidResultSetAccessException	A										<section class="prog__container">Exception thrown when a ResultSet has been accessed in an invalid fashion.\n Such exceptions always have a java.sql.SQLException root cause.\n\n This typically happens when an invalid ResultSet column index or name\n has been specified. Also thrown by disconnected SqlRowSets.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/InvalidResultSetAccessException.html
JdbcUpdateAffectedIncorrectNumberOfRowsException	A										<section class="prog__container">Exception thrown when a JDBC update affects an unexpected number of rows.\n Typically we expect an update to affect a single row, meaning it's an\n error if it affects multiple rows.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/JdbcUpdateAffectedIncorrectNumberOfRowsException.html
LobRetrievalFailureException	A										<section class="prog__container">Exception to be thrown when a LOB could not be retrieved.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/LobRetrievalFailureException.html
SQLWarningException	A										<section class="prog__container">Exception thrown when we're not ignoring SQLWarnings.\n\n If a SQLWarning is reported, the operation completed, so we will need\n to explicitly roll it back if we're not happy when looking at the warning.\n We might choose to ignore (and log) the warning, or to wrap and throw it\n in the shape of this SQLWarningException instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/SQLWarningException.html
UncategorizedSQLException	A										<section class="prog__container">Exception thrown when we can't classify a SQLException into\n one of our generic data access exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/UncategorizedSQLException.html
JdbcNamespaceHandler	A										<section class="prog__container">NamespaceHandler for JDBC configuration namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/config/JdbcNamespaceHandler.html
SortedResourcesFactoryBean	A										<section class="prog__container">FactoryBean implementation that takes a list of location Strings\n and creates a sorted array of Resource instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/config/SortedResourcesFactoryBean.html
ArgumentPreparedStatementSetter	A										<section class="prog__container">Simple adapter for PreparedStatementSetter that applies a given array of arguments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.html
ArgumentTypePreparedStatementSetter	A										<section class="prog__container">Simple adapter for PreparedStatementSetter that applies\n given arrays of arguments and JDBC argument types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.html
BatchPreparedStatementSetter	A										<section class="prog__container">Batch update callback interface used by the JdbcTemplate class.\n\n This interface sets values on a PreparedStatement provided\n by the JdbcTemplate class, for each of a number of updates in a batch using the\n same SQL. Implementations are responsible for setting any necessary parameters.\n SQL with placeholders will already have been supplied.\n\n Implementations do not need to concern themselves with SQLExceptions\n that may be thrown from operations they attempt. The JdbcTemplate class will\n catch and handle SQLExceptions appropriately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BatchPreparedStatementSetter.html
BatchUpdateUtils	A										<section class="prog__container">Generic utility methods for working with JDBC batch statements. Mainly for internal use\n within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BatchUpdateUtils.html
BeanPropertyRowMapper	A										<section class="prog__container">RowMapper implementation that converts a row into a new instance\n of the specified mapped target class. The mapped target class must be a\n top-level class and it must have a default or no-arg constructor.\n\n Column values are mapped based on matching the column name as obtained from result set\n metadata to public setters for the corresponding properties. The names are matched either\n directly or by transforming a name separating the parts with underscores to the same name\n using "camel" case.\n\n Mapping is provided for fields in the target class for many common types, e.g.:\n String, boolean, Boolean, byte, Byte, short, Short, int, Integer, long, Long,\n float, Float, double, Double, BigDecimal, java.util.Date, etc.\n\n To facilitate mapping between columns and fields that don't have matching names,\n try using column aliases in the SQL statement like "select fname as first_name from customer".\n\n For 'null' values read from the database, we will attempt to call the setter, but in the case of\n Java primitives, this causes a TypeMismatchException. This class can be configured (using the\n primitivesDefaultedForNullValue property) to trap this exception and use the primitives default value.\n Be aware that if you use the values from the generated bean to update the database the primitive value\n will have been set to the primitive's default value instead of null.\n\n Please note that this class is designed to provide convenience rather than high performance.\n For best performance, consider using a custom RowMapper implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html
CallableStatementCallback	A										<section class="prog__container">Generic callback interface for code that operates on a CallableStatement.\n Allows to execute any number of operations on a single CallableStatement,\n for example a single execute call or repeated execute calls with varying\n parameters.\n\n Used internally by JdbcTemplate, but also useful for application code.\n Note that the passed-in CallableStatement can have been created by the\n framework or by a custom CallableStatementCreator. However, the latter is\n hardly ever necessary, as most custom callback actions will perform updates\n in which case a standard CallableStatement is fine. Custom actions will\n always set parameter values themselves, so that CallableStatementCreator\n capability is not needed either.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/CallableStatementCallback.html
CallableStatementCreator	A										<section class="prog__container">One of the three central callback interfaces used by the JdbcTemplate class.\n This interface creates a CallableStatement given a connection, provided\n by the JdbcTemplate class. Implementations are responsible for providing\n SQL and any necessary parameters.\n\n Implementations do not need to concern themselves with\n SQLExceptions that may be thrown from operations they attempt.\n The JdbcTemplate class will catch and handle SQLExceptions appropriately.\n\n A PreparedStatementCreator should also implement the SqlProvider interface\n if it is able to provide the SQL it uses for PreparedStatement creation.\n This allows for better contextual information in case of exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/CallableStatementCreator.html
CallableStatementCreatorFactory	A										<section class="prog__container">Helper class that efficiently creates multiple CallableStatementCreator\n objects with different parameters based on a SQL statement and a single\n set of parameter declarations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/CallableStatementCreatorFactory.html
ColumnMapRowMapper	A										<section class="prog__container">RowMapper implementation that creates a java.util.Map\n for each row, representing all columns as key-value pairs: one\n entry for each column, with the column name as key.\n\n The Map implementation to use and the key to use for each column\n in the column Map can be customized through overriding\n createColumnMap(int) and getColumnKey(java.lang.String), respectively.\n\n Note: By default, ColumnMapRowMapper will try to build a linked Map\n with case-insensitive keys, to preserve column order as well as allow any\n casing to be used for column names. This requires Commons Collections on the\n classpath (which will be autodetected). Else, the fallback is a standard linked\n HashMap, which will still preserve column order but requires the application\n to specify the column names in the same casing as exposed by the driver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ColumnMapRowMapper.html
ConnectionCallback	A										<section class="prog__container">Generic callback interface for code that operates on a JDBC Connection.\n Allows to execute any number of operations on a single Connection,\n using any type and number of Statements.\n\n This is particularly useful for delegating to existing data access code\n that expects a Connection to work on and throws SQLException. For newly\n written code, it is strongly recommended to use JdbcTemplate's more specific\n operations, for example a query or update variant.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ConnectionCallback.html
DisposableSqlTypeValue	A										<section class="prog__container">Subinterface of SqlTypeValue that adds a cleanup callback,\n to be invoked after the value has been set and the corresponding\n statement has been executed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/DisposableSqlTypeValue.html
InterruptibleBatchPreparedStatementSetter	A										<section class="prog__container">Extension of the BatchPreparedStatementSetter interface,\n adding a batch exhaustion check.\n\n This interface allows you to signal the end of a batch rather than\n having to determine the exact batch size upfront. Batch size is still\n being honored but it is now the maximum size of the batch.\n\n The isBatchExhausted(int) method is called after each call to\n BatchPreparedStatementSetter.setValues(java.sql.PreparedStatement, int) to determine whether there were some values added,\n or if the batch was determined to be complete and no additional values\n were provided during the last call to setValues.\n\n Consider extending the\n AbstractInterruptibleBatchPreparedStatementSetter\n base class instead of implementing this interface directly, using a single\n setValuesIfAvailable callback method that checks for available\n values and sets them, returning whether values have actually been provided.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/InterruptibleBatchPreparedStatementSetter.html
JdbcOperations	A										<section class="prog__container">Interface specifying a basic set of JDBC operations.\n Implemented by JdbcTemplate. Not often used directly, but a useful\n option to enhance testability, as it can easily be mocked or stubbed.\n\n Alternatively, the standard JDBC infrastructure can be mocked.\n However, mocking this interface constitutes significantly less work.\n As an alternative to a mock objects approach to testing data access code,\n consider the powerful integration testing support provided in the\n org.springframework.test package, shipped in\n spring-test.jar.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcOperations.html
JdbcTemplate	A										<section class="prog__container">This is the central class in the JDBC core package.\n It simplifies the use of JDBC and helps to avoid common errors.\n It executes core JDBC workflow, leaving application code to provide SQL\n and extract results. This class executes SQL queries or updates, initiating\n iteration over ResultSets and catching JDBC exceptions and translating\n them to the generic, more informative exception hierarchy defined in the\n org.springframework.dao package.\n\n Code using this class need only implement callback interfaces, giving\n them a clearly defined contract. The PreparedStatementCreator callback\n interface creates a prepared statement given a Connection, providing SQL and\n any necessary parameters. The ResultSetExtractor interface extracts\n values from a ResultSet. See also PreparedStatementSetter and\n RowMapper for two popular alternative callback interfaces.\n\n Can be used within a service implementation via direct instantiation\n with a DataSource reference, or get prepared in an application context\n and given to services as bean reference. Note: The DataSource should\n always be configured as a bean in the application context, in the first case\n given to the service directly, in the second case to the prepared template.\n\n Because this class is parameterizable by the callback interfaces and\n the SQLExceptionTranslator\n interface, there should be no need to subclass it.\n\n All SQL operations performed by this class are logged at debug level,\n using "org.springframework.jdbc.core.JdbcTemplate" as log category.\n\n NOTE: An instance of this class is thread-safe once configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html
ParameterDisposer	A										<section class="prog__container">Interface to be implemented by objects that can close resources\n allocated by parameters like SqlLobValues.\n\n Typically implemented by PreparedStatementCreators and\n PreparedStatementSetters that support DisposableSqlTypeValue\n objects (e.g. SqlLobValue) as parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ParameterDisposer.html
ParameterizedPreparedStatementSetter	A										<section class="prog__container">Parameterized callback interface used by the JdbcTemplate class for\n batch updates.\n\n This interface sets values on a PreparedStatement provided\n by the JdbcTemplate class, for each of a number of updates in a batch using the\n same SQL. Implementations are responsible for setting any necessary parameters.\n SQL with placeholders will already have been supplied.\n\n Implementations do not need to concern themselves with SQLExceptions\n that may be thrown from operations they attempt. The JdbcTemplate class will\n catch and handle SQLExceptions appropriately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ParameterizedPreparedStatementSetter.html
ParameterMapper	A										<section class="prog__container">Implement this interface when parameters need to be customized based\n on the connection. We might need to do this to make use of proprietary\n features, available only with a specific Connection type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ParameterMapper.html
PreparedStatementCallback	A										<section class="prog__container">Generic callback interface for code that operates on a PreparedStatement.\n Allows to execute any number of operations on a single PreparedStatement,\n for example a single executeUpdate call or repeated\n executeUpdate calls with varying parameters.\n\n Used internally by JdbcTemplate, but also useful for application code.\n Note that the passed-in PreparedStatement can have been created by the\n framework or by a custom PreparedStatementCreator. However, the latter is\n hardly ever necessary, as most custom callback actions will perform updates\n in which case a standard PreparedStatement is fine. Custom actions will\n always set parameter values themselves, so that PreparedStatementCreator\n capability is not needed either.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/PreparedStatementCallback.html
PreparedStatementCreator	A										<section class="prog__container">One of the two central callback interfaces used by the JdbcTemplate class.\n This interface creates a PreparedStatement given a connection, provided\n by the JdbcTemplate class. Implementations are responsible for providing\n SQL and any necessary parameters.\n\n Implementations do not need to concern themselves with\n SQLExceptions that may be thrown from operations they attempt.\n The JdbcTemplate class will catch and handle SQLExceptions appropriately.\n\n A PreparedStatementCreator should also implement the SqlProvider interface\n if it is able to provide the SQL it uses for PreparedStatement creation.\n This allows for better contextual information in case of exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/PreparedStatementCreator.html
PreparedStatementCreatorFactory	A										<section class="prog__container">Helper class that efficiently creates multiple PreparedStatementCreator\n objects with different parameters based on a SQL statement and a single\n set of parameter declarations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/PreparedStatementCreatorFactory.html
PreparedStatementSetter	A										<section class="prog__container">General callback interface used by the JdbcTemplate class.\n\n This interface sets values on a PreparedStatement provided\n by the JdbcTemplate class, for each of a number of updates in a batch using the\n same SQL. Implementations are responsible for setting any necessary parameters.\n SQL with placeholders will already have been supplied.\n\n It's easier to use this interface than PreparedStatementCreator:\n The JdbcTemplate will create the PreparedStatement, with the callback\n only being responsible for setting parameter values.\n\n Implementations do not need to concern themselves with\n SQLExceptions that may be thrown from operations they attempt.\n The JdbcTemplate class will catch and handle SQLExceptions appropriately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/PreparedStatementSetter.html
ResultSetExtractor	A										<section class="prog__container">Callback interface used by JdbcTemplate's query methods.\n Implementations of this interface perform the actual work of extracting\n results from a ResultSet, but don't need to worry\n about exception handling. SQLExceptions\n will be caught and handled by the calling JdbcTemplate.\n\n This interface is mainly used within the JDBC framework itself.\n A RowMapper is usually a simpler choice for ResultSet processing,\n mapping one result object per row instead of one result object for\n the entire ResultSet.\n\n Note: In contrast to a RowCallbackHandler, a ResultSetExtractor\n object is typically stateless and thus reusable, as long as it doesn't\n access stateful resources (such as output streams when streaming LOB\n contents) or keep result state within the object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ResultSetExtractor.html
ResultSetSupportingSqlParameter	A										<section class="prog__container">Common base class for ResultSet-supporting SqlParameters like\n SqlOutParameter and SqlReturnResultSet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/ResultSetSupportingSqlParameter.html
RowCallbackHandler	A										<section class="prog__container">An interface used by JdbcTemplate for processing rows of a\n ResultSet on a per-row basis. Implementations of\n this interface perform the actual work of processing each row\n but don't need to worry about exception handling.\n SQLExceptions will be caught and handled\n by the calling JdbcTemplate.\n\n In contrast to a ResultSetExtractor, a RowCallbackHandler\n object is typically stateful: It keeps the result state within the\n object, to be available for later inspection. See\n RowCountCallbackHandler for a usage example.\n\n Consider using a RowMapper instead if you need to map\n exactly one result object per row, assembling them into a List.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/RowCallbackHandler.html
RowCountCallbackHandler	A										<section class="prog__container">Implementation of RowCallbackHandler. Convenient superclass for callback handlers.\n An instance can only be used once.\n\n We can either use this on its own (for example, in a test case, to ensure\n that our result sets have valid dimensions), or use it as a superclass\n for callback handlers that actually do something, and will benefit\n from the dimension information it provides.\n\n A usage example with JdbcTemplate:\n\n JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object\n\n RowCountCallbackHandler countCallback = new RowCountCallbackHandler();  // not reusable\n jdbcTemplate.query("select * from user", countCallback);\n int rowCount = countCallback.getRowCount();</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/RowCountCallbackHandler.html
RowMapper	A										<section class="prog__container">An interface used by JdbcTemplate for mapping rows of a\n ResultSet on a per-row basis. Implementations of this\n interface perform the actual work of mapping each row to a result object,\n but don't need to worry about exception handling.\n SQLExceptions will be caught and handled\n by the calling JdbcTemplate.\n\n Typically used either for JdbcTemplate's query methods\n or for out parameters of stored procedures. RowMapper objects are\n typically stateless and thus reusable; they are an ideal choice for\n implementing row-mapping logic in a single place.\n\n Alternatively, consider subclassing\n MappingSqlQuery from the\n jdbc.object package: Instead of working with separate\n JdbcTemplate and RowMapper objects, you can build executable query\n objects (containing row-mapping logic) in that style.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/RowMapper.html
RowMapperResultSetExtractor	A										<section class="prog__container">Adapter implementation of the ResultSetExtractor interface that delegates\n to a RowMapper which is supposed to create an object for each row.\n Each object is added to the results List of this ResultSetExtractor.\n\n Useful for the typical case of one object per row in the database table.\n The number of entries in the results list will match the number of rows.\n\n Note that a RowMapper object is typically stateless and thus reusable;\n just the RowMapperResultSetExtractor adapter is stateful.\n\n A usage example with JdbcTemplate:\n\n JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object\n RowMapper rowMapper = new UserRowMapper();  // reusable object\n\n List allUsers = (List) jdbcTemplate.query(\n     "select * from user",\n     new RowMapperResultSetExtractor(rowMapper, 10));\n\n User user = (User) jdbcTemplate.queryForObject(\n     "select * from user where id=?", new Object[] {id},\n     new RowMapperResultSetExtractor(rowMapper, 1));\nAlternatively, consider subclassing MappingSqlQuery from the jdbc.object\n package: Instead of working with separate JdbcTemplate and RowMapper objects,\n you can have executable query objects (containing row-mapping logic) there.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/RowMapperResultSetExtractor.html
SingleColumnRowMapper	A										<section class="prog__container">RowMapper implementation that converts a single column into a single\n result value per row. Expects to operate on a java.sql.ResultSet\n that just contains a single column.\n\n The type of the result value for each row can be specified. The value\n for the single column will be extracted from the ResultSet\n and converted into the specified target type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SingleColumnRowMapper.html
SqlInOutParameter	A										<section class="prog__container">Subclass of SqlOutParameter to represent an INOUT parameter.\n Will return true for SqlParameter's isInputValueProvided()\n test, in contrast to a standard SqlOutParameter.\n\n Output parameters - like all stored procedure parameters -\n must have names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlInOutParameter.html
SqlOutParameter	A										<section class="prog__container">Subclass of SqlParameter to represent an output parameter.\n No additional properties: instanceof will be used to check\n for such types.\n\n Output parameters - like all stored procedure parameters -\n must have names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlOutParameter.html
SqlParameter	A										<section class="prog__container">Object to represent a SQL parameter definition.\n\n Parameters may be anonymous, in which case "name" is null.\n However, all parameters must define a SQL type according to Types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlParameter.html
SqlParameterValue	A										<section class="prog__container">Object to represent a SQL parameter value, including parameter metadata\n such as the SQL type and the scale for numeric values.\n\n Designed for use with JdbcTemplate's operations that take an array of\n argument values: Each such argument value may be a SqlParameterValue,\n indicating the SQL type (and optionally the scale) instead of letting the\n template guess a default type. Note that this only applies to the operations with\n a 'plain' argument array, not to the overloaded variants with an explicit type array.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlParameterValue.html
SqlProvider	A										<section class="prog__container">Interface to be implemented by objects that can provide SQL strings.\n\n Typically implemented by PreparedStatementCreators, CallableStatementCreators\n and StatementCallbacks that want to expose the SQL they use to create their\n statements, to allow for better contextual information in case of exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlProvider.html
SqlReturnResultSet	A										<section class="prog__container">Represents a returned ResultSet from a stored procedure call.\n\n A ResultSetExtractor, RowCallbackHandler or RowMapper\n must be provided to handle any returned rows.\n\n Returned ResultSets - like all stored procedure\n parameters - must have names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlReturnResultSet.html
SqlReturnType	A										<section class="prog__container">Interface to be implemented for retrieving values for more complex database-specific\n types not supported by the standard CallableStatement.getObject method.\n\n Implementations perform the actual work of getting the actual values. They must\n implement the callback method getTypeValue which can throw SQLExceptions\n that will be caught and translated by the calling code. This callback method has\n access to the underlying Connection via the given CallableStatement object, if that\n should be needed to create any database-specific objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlReturnType.html
SqlReturnUpdateCount	A										<section class="prog__container">Represents a returned update count from a stored procedure call.\n\n Returned update counts - like all stored procedure\n parameters - must have names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlReturnUpdateCount.html
SqlRowSetResultSetExtractor	A										<section class="prog__container">ResultSetExtractor implementation that returns a Spring SqlRowSet\n representation for each given ResultSet.\n\n The default implementation uses a standard JDBC CachedRowSet underneath.\n This means that JDBC RowSet support needs to be available at runtime:\n by default, Sun's com.sun.rowset.CachedRowSetImpl class on Java 6,\n or the javax.sql.rowset.RowSetProvider mechanism on Java 7+ / JDBC 4.1+.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlRowSetResultSetExtractor.html
SqlTypeValue	A										<section class="prog__container">Interface to be implemented for setting values for more complex database-specific\n types not supported by the standard setObject method. This is\n effectively an extended variant of SqlValue.\n\n Implementations perform the actual work of setting the actual values. They must\n implement the callback method setTypeValue which can throw SQLExceptions\n that will be caught and translated by the calling code. This callback method has\n access to the underlying Connection via the given PreparedStatement object, if that\n should be needed to create any database-specific objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/SqlTypeValue.html
StatementCallback	A										<section class="prog__container">Generic callback interface for code that operates on a JDBC Statement.\n Allows to execute any number of operations on a single Statement,\n for example a single executeUpdate call or repeated\n executeUpdate calls with varying SQL.\n\n Used internally by JdbcTemplate, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/StatementCallback.html
StatementCreatorUtils	A										<section class="prog__container">Utility methods for PreparedStatementSetter/Creator and CallableStatementCreator\n implementations, providing sophisticated parameter management (including support\n for LOB values).\n\n Used by PreparedStatementCreatorFactory and CallableStatementCreatorFactory,\n but also available for direct use in custom setter/creator implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/StatementCreatorUtils.html
CallMetaDataContext	A										<section class="prog__container">Class to manage context metadata used for the configuration and execution of the call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/CallMetaDataContext.html
CallMetaDataProvider	A										<section class="prog__container">Interface specifying the API to be implemented by a class providing call metadata.\n\n This is intended for internal use by Spring's\n SimpleJdbcCall.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/CallMetaDataProvider.html
CallMetaDataProviderFactory	A										<section class="prog__container">Factory used to create a CallMetaDataProvider implementation\n based on the type of database being used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.html
CallParameterMetaData	A										<section class="prog__container">Holder of metadata for a specific parameter that is used for call processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/CallParameterMetaData.html
Db2CallMetaDataProvider	A										<section class="prog__container">DB2 specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.html
DerbyCallMetaDataProvider	A										<section class="prog__container">Derby specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.html
DerbyTableMetaDataProvider	A										<section class="prog__container">The Derby specific implementation of the TableMetaDataProvider.\n Overrides the Derby metadata info regarding retreiving generated keys. It seems to work OK so not sure why they\n claim it's not supported.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/DerbyTableMetaDataProvider.html
GenericCallMetaDataProvider	A										<section class="prog__container">Generic implementation for the CallMetaDataProvider interface.\n This class can be extended to provide database specific behavior.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.html
GenericTableMetaDataProvider	A										<section class="prog__container">A generic implementation of the TableMetaDataProvider that should provide\n enough features for all supported databases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.html
HanaCallMetaDataProvider	A										<section class="prog__container">SAP HANA specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/HanaCallMetaDataProvider.html
HsqlTableMetaDataProvider	A										<section class="prog__container">The HSQL specific implementation of TableMetaDataProvider.\n Supports a feature for retrieving generated keys without the JDBC 3.0\n getGeneratedKeys support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/HsqlTableMetaDataProvider.html
OracleCallMetaDataProvider	A										<section class="prog__container">Oracle specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/OracleCallMetaDataProvider.html
OracleTableMetaDataProvider	A										<section class="prog__container">Oracle-specific implementation of the TableMetaDataProvider.\n Supports a feature for including synonyms in the metadata lookup. Also supports lookup of current schema\n using the sys_context.\n\n Thanks to Mike Youngstrom and Bruce Campbell for submitting the original suggestion for the Oracle\n current schema lookup implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/OracleTableMetaDataProvider.html
PostgresCallMetaDataProvider	A										<section class="prog__container">Oracle specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/PostgresCallMetaDataProvider.html
PostgresTableMetaDataProvider	A										<section class="prog__container">The PostgreSQL specific implementation of TableMetaDataProvider.\n Supports a feature for retrieving generated keys without the JDBC 3.0\n getGeneratedKeys support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.html
SqlServerCallMetaDataProvider	A										<section class="prog__container">SQL Server specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/SqlServerCallMetaDataProvider.html
SybaseCallMetaDataProvider	A										<section class="prog__container">Sybase specific implementation for the CallMetaDataProvider interface.\n This class is intended for internal use by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/SybaseCallMetaDataProvider.html
TableMetaDataContext	A										<section class="prog__container">Class to manage context metadata used for the configuration\n and execution of operations on a database table.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/TableMetaDataContext.html
TableMetaDataProvider	A										<section class="prog__container">Interface specifying the API to be implemented by a class providing table metedata.  This is intended for internal use\n by the Simple JDBC classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/TableMetaDataProvider.html
TableMetaDataProviderFactory	A										<section class="prog__container">Factory used to create a TableMetaDataProvider implementation\n based on the type of database being used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/TableMetaDataProviderFactory.html
TableParameterMetaData	A										<section class="prog__container">Holder of metadata for a specific parameter that is used for table processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/metadata/TableParameterMetaData.html
AbstractSqlParameterSource	A										<section class="prog__container">Abstract base class for SqlParameterSource implementations.\n Provides registration of SQL types per parameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.html
BeanPropertySqlParameterSource	A										<section class="prog__container">SqlParameterSource implementation that obtains parameter values\n from bean properties of a given JavaBean object. The names of the bean\n properties have to match the parameter names.\n\n Uses a Spring BeanWrapper for bean property access underneath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/BeanPropertySqlParameterSource.html
EmptySqlParameterSource	A										<section class="prog__container">A simple empty implementation of the SqlParameterSource interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/EmptySqlParameterSource.html
MapSqlParameterSource	A										<section class="prog__container">SqlParameterSource implementation that holds a given Map of parameters.\n\n This class is intended for passing in a simple Map of parameter values\n to the methods of the NamedParameterJdbcTemplate class.\n\n The addValue methods on this class will make adding several values\n easier. The methods return a reference to the MapSqlParameterSource\n itself, so you can chain several method calls together within a single statement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.html
NamedParameterBatchUpdateUtils	A										<section class="prog__container">Generic utility methods for working with JDBC batch statements using named parameters. Mainly for internal use\n within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterBatchUpdateUtils.html
NamedParameterJdbcDaoSupport	A										<section class="prog__container">Extension of JdbcDaoSupport that exposes a NamedParameterJdbcTemplate as well.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcDaoSupport.html
NamedParameterJdbcOperations	A										<section class="prog__container">Interface specifying a basic set of JDBC operations allowing the use\n of named parameters rather than the traditional '?' placeholders.\n\n This is an alternative to the classic\n JdbcOperations interface,\n implemented by NamedParameterJdbcTemplate. This interface is not\n often used directly, but provides a useful option to enhance testability,\n as it can easily be mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcOperations.html
NamedParameterJdbcTemplate	A										<section class="prog__container">Template class with a basic set of JDBC operations, allowing the use\n of named parameters rather than traditional '?' placeholders.\n\n This class delegates to a wrapped JdbcTemplate\n once the substitution from named parameters to JDBC style '?' placeholders is\n done at execution time. It also allows for expanding a List\n of values to the appropriate number of placeholders.\n\n The underlying JdbcTemplate is\n exposed to allow for convenient access to the traditional\n JdbcTemplate methods.\n\n NOTE: An instance of this class is thread-safe once configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html
NamedParameterUtils	A										<section class="prog__container">Helper methods for named parameter parsing.\n\n Only intended for internal use within Spring's JDBC framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterUtils.html
ParsedSql	A										<section class="prog__container">Holds information about a parsed SQL statement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/ParsedSql.html
SqlParameterSource	A										<section class="prog__container">Interface that defines common functionality for objects that can\n offer parameter values for named SQL parameters, serving as argument\n for NamedParameterJdbcTemplate operations.\n\n This interface allows for the specification of SQL type in addition\n to parameter values. All parameter values and types are identified by\n specifying the name of the parameter.\n\n Intended to wrap various implementations like a Map or a JavaBean\n with a consistent interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/SqlParameterSource.html
SqlParameterSourceUtils	A										<section class="prog__container">Class that provides helper methods for the use of SqlParameterSource\n with SimpleJdbc classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.html
AbstractJdbcCall	A										<section class="prog__container">Abstract class to provide base functionality for easy stored procedure calls\n based on configuration options and database metadata.\n This class provides the base SPI for SimpleJdbcCall.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/AbstractJdbcCall.html
AbstractJdbcInsert	A										<section class="prog__container">Abstract class to provide base functionality for easy inserts\n based on configuration options and database metadata.\n This class provides the base SPI for SimpleJdbcInsert.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/AbstractJdbcInsert.html
SimpleJdbcCall	A										<section class="prog__container">A SimpleJdbcCall is a multi-threaded, reusable object representing a call\n to a stored procedure or a stored function. It provides meta data processing\n to simplify the code needed to access basic stored procedures/functions.\n All you need to provide is the name of the procedure/function and a Map\n containing the parameters when you execute the call. The names of the\n supplied parameters will be matched up with in and out parameters declared\n when the stored procedure was created.\n\n The meta data processing is based on the DatabaseMetaData provided by\n the JDBC driver. Since we rely on the JDBC driver, this "auto-detection"\n can only be used for databases that are known to provide accurate meta data.\n These currently include Derby, MySQL, Microsoft SQL Server, Oracle, DB2,\n Sybase and PostgreSQL. For any other databases you are required to declare\n all parameters explicitly. You can of course declare all parameters\n explicitly even if the database provides the necessary meta data. In that\n case your declared parameters will take precedence. You can also turn off\n any metadata processing if you want to use parameter names that do not\n match what is declared during the stored procedure compilation.\n\n The actual insert is being handled using Spring's\n JdbcTemplate.\n\n Many of the configuration methods return the current instance of the\n SimpleJdbcCall in order to provide the ability to chain multiple ones\n together in a "fluent" interface style.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcCall.html
SimpleJdbcCallOperations	A										<section class="prog__container">Interface specifying the API for a Simple JDBC Call implemented by SimpleJdbcCall.\n This interface is not often used directly, but provides the option to enhance testability,\n as it can easily be mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcCallOperations.html
SimpleJdbcInsert	A										<section class="prog__container">A SimpleJdbcInsert is a multi-threaded, reusable object providing easy insert\n capabilities for a table. It provides meta data processing to simplify the code\n needed to construct a basic insert statement. All you need to provide is the\n name of the table and a Map containing the column names and the column values.\n\n The meta data processing is based on the DatabaseMetaData provided by the\n JDBC driver. As long as the JDBC driver can provide the names of the columns\n for a specified table than we can rely on this auto-detection feature. If that\n is not the case, then the column names must be specified explicitly.\n\n The actual insert is being handled using Spring's\n JdbcTemplate.\n\n Many of the configuration methods return the current instance of the SimpleJdbcInsert\n to provide the ability to chain multiple ones together in a "fluent" interface style.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcInsert.html
SimpleJdbcInsertOperations	A										<section class="prog__container">Interface specifying the API for a Simple JDBC Insert implemented by SimpleJdbcInsert.\n This interface is not often used directly, but provides the option to enhance testability,\n as it can easily be mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcInsertOperations.html
AbstractInterruptibleBatchPreparedStatementSetter	A										<section class="prog__container">Abstract implementation of the InterruptibleBatchPreparedStatementSetter\n interface, combining the check for available values and setting of those\n into a single callback method setValuesIfAvailable(java.sql.PreparedStatement, int).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/AbstractInterruptibleBatchPreparedStatementSetter.html
AbstractLobCreatingPreparedStatementCallback	A										<section class="prog__container">Abstract PreparedStatementCallback implementation that manages a LobCreator.\n Typically used as inner class, with access to surrounding method arguments.\n\n Delegates to the setValues template method for setting values\n on the PreparedStatement, using a given LobCreator for BLOB/CLOB arguments.\n\n A usage example with JdbcTemplate:\n\n JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object\n LobHandler lobHandler = new DefaultLobHandler();  // reusable object\n\n jdbcTemplate.execute(\n     "INSERT INTO imagedb (image_name, content, description) VALUES (?, ?, ?)",\n     new AbstractLobCreatingPreparedStatementCallback(lobHandler) {\n       protected void setValues(PreparedStatement ps, LobCreator lobCreator) throws SQLException {\n         ps.setString(1, name);\n         lobCreator.setBlobAsBinaryStream(ps, 2, contentStream, contentLength);\n         lobCreator.setClobAsString(ps, 3, description);\n       }\n     }\n );</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/AbstractLobCreatingPreparedStatementCallback.html
AbstractLobStreamingResultSetExtractor	A										<section class="prog__container">Abstract ResultSetExtractor implementation that assumes streaming of LOB data.\n Typically used as inner class, with access to surrounding method arguments.\n\n Delegates to the streamData template method for streaming LOB\n content to some OutputStream, typically using a LobHandler. Converts an\n IOException thrown during streaming to a LobRetrievalFailureException.\n\n A usage example with JdbcTemplate:\n\n JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object\n final LobHandler lobHandler = new DefaultLobHandler();  // reusable object\n\n jdbcTemplate.query(\n                 "SELECT content FROM imagedb WHERE image_name=?", new Object[] {name},\n                 new AbstractLobStreamingResultSetExtractor() {\n                         public void streamData(ResultSet rs) throws SQLException, IOException {\n                                 FileCopyUtils.copy(lobHandler.getBlobAsBinaryStream(rs, 1), contentStream);\n             }\n         }\n );</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/AbstractLobStreamingResultSetExtractor.html
AbstractSqlTypeValue	A										<section class="prog__container">Abstract implementation of the SqlTypeValue interface, for convenient\n creation of type values that are supposed to be passed into the\n PreparedStatement.setObject method. The createTypeValue\n callback method has access to the underlying Connection, if that should\n be needed to create any database-specific objects.\n\n A usage example from a StoredProcedure (compare this to the plain\n SqlTypeValue version in the superclass javadoc):\n\n proc.declareParameter(new SqlParameter("myarray", Types.ARRAY, "NUMBERS"));\n ...\n\n Map<String, Object> in = new HashMap<String, Object>();\n in.put("myarray", new AbstractSqlTypeValue() {\n   public Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException {\n           oracle.sql.ArrayDescriptor desc = new oracle.sql.ArrayDescriptor(typeName, con);\n           return new oracle.sql.ARRAY(desc, con, seats);\n   }\n });\n Map out = execute(in);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/AbstractSqlTypeValue.html
JdbcBeanDefinitionReader	A										<section class="prog__container">Bean definition reader that reads values from a database table,\n based on a given SQL statement.\n\n Expects columns for bean name, property name and value as String.\n Formats for each are identical to the properties format recognized\n by PropertiesBeanDefinitionReader.\n\n NOTE: This is mainly intended as an example for a custom\n JDBC-based bean definition reader. It does not aim to offer\n comprehensive functionality.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/JdbcBeanDefinitionReader.html
JdbcDaoSupport	A										<section class="prog__container">Convenient super class for JDBC-based data access objects.\n\n Requires a DataSource to be set, providing a\n JdbcTemplate based on it to\n subclasses through the getJdbcTemplate() method.\n\n This base class is mainly intended for JdbcTemplate usage but can\n also be used when working with a Connection directly or when using\n org.springframework.jdbc.object operation objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/JdbcDaoSupport.html
SqlLobValue	A										<section class="prog__container">Object to represent an SQL BLOB/CLOB value parameter. BLOBs can either be an\n InputStream or a byte array. CLOBs can be in the form of a Reader, InputStream\n or String. Each CLOB/BLOB value will be stored together with its length.\n The type is based on which constructor is used. Objects of this class are\n immutable except for the LobCreator reference. Use them and discard them.\n\n This class holds a reference to a LocCreator that must be closed after the\n update has completed. This is done via a call to the closeLobCreator method.\n All handling of the LobCreator is done by the framework classes that use it -\n no need to set or close the LobCreator for end users of this class.\n\n A usage example:\n\n JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object\n LobHandler lobHandler = new DefaultLobHandler();  // reusable object\n\n jdbcTemplate.update(\n     "INSERT INTO imagedb (image_name, content, description) VALUES (?, ?, ?)",\n     new Object[] {\n       name,\n       new SqlLobValue(contentStream, contentLength, lobHandler),\n       new SqlLobValue(description, lobHandler)\n     },\n     new int[] {Types.VARCHAR, Types.BLOB, Types.CLOB});\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/support/SqlLobValue.html
AbstractDataSource	A										<section class="prog__container">Abstract base class for Spring's DataSource\n implementations, taking care of the padding.\n\n 'Padding' in the context of this class means default implementations\n for certain methods from the DataSource interface, such as\n getLoginTimeout(), setLoginTimeout(int), and so forth.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/AbstractDataSource.html
AbstractDriverBasedDataSource	A										<section class="prog__container">Abstract base class for JDBC DataSource implementations\n that operate on a JDBC Driver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.html
ConnectionHandle	A										<section class="prog__container">Simple interface to be implemented by handles for a JDBC Connection.\n Used by JpaDialect and JdoDialect, for example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/ConnectionHandle.html
ConnectionHolder	A										<section class="prog__container">Connection holder, wrapping a JDBC Connection.\n DataSourceTransactionManager binds instances of this class\n to the thread, for a specific DataSource.\n\n Inherits rollback-only support for nested JDBC transactions\n and reference count functionality from the base class.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/ConnectionHolder.html
ConnectionProxy	A										<section class="prog__container">Subinterface of Connection to be implemented by\n Connection proxies. Allows access to the underlying target Connection.\n\n This interface can be checked when there is a need to cast to a\n native JDBC Connection such as Oracle's OracleConnection. Spring's\n NativeJdbcExtractorAdapter\n automatically detects such proxies before delegating to the actual\n unwrapping for a specific connection pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/ConnectionProxy.html
DataSourceTransactionManager	A										<section class="prog__container">PlatformTransactionManager\n implementation for a single JDBC DataSource. This class is\n capable of working in any environment with any JDBC driver, as long as the setup\n uses a javax.sql.DataSource as its Connection factory mechanism.\n Binds a JDBC Connection from the specified DataSource to the current thread,\n potentially allowing for one thread-bound Connection per DataSource.\n\n Note: The DataSource that this transaction manager operates on needs\n to return independent Connections. The Connections may come from a pool\n (the typical case), but the DataSource must not return thread-scoped /\n request-scoped Connections or the like. This transaction manager will\n associate Connections with thread-bound transactions itself, according\n to the specified propagation behavior. It assumes that a separate,\n independent Connection can be obtained even during an ongoing transaction.\n\n Application code is required to retrieve the JDBC Connection via\n DataSourceUtils.getConnection(DataSource) instead of a standard\n Java EE-style DataSource.getConnection() call. Spring classes such as\n JdbcTemplate use this strategy implicitly.\n If not used in combination with this transaction manager, the\n DataSourceUtils lookup strategy behaves exactly like the native\n DataSource lookup; it can thus be used in a portable fashion.\n\n Alternatively, you can allow application code to work with the standard\n Java EE-style lookup pattern DataSource.getConnection(), for example for\n legacy code that is not aware of Spring at all. In that case, define a\n TransactionAwareDataSourceProxy for your target DataSource, and pass\n that proxy DataSource to your DAOs, which will automatically participate in\n Spring-managed transactions when accessing it.\n\n Supports custom isolation levels, and timeouts which get applied as\n appropriate JDBC statement timeouts. To support the latter, application code\n must either use JdbcTemplate, call\n DataSourceUtils.applyTransactionTimeout(java.sql.Statement, javax.sql.DataSource) for each created JDBC Statement,\n or go through a TransactionAwareDataSourceProxy which will create\n timeout-aware JDBC Connections and Statements automatically.\n\n Consider defining a LazyConnectionDataSourceProxy for your target\n DataSource, pointing both this transaction manager and your DAOs to it.\n This will lead to optimized handling of "empty" transactions, i.e. of transactions\n without any JDBC statements executed. A LazyConnectionDataSourceProxy will not fetch\n an actual JDBC Connection from the target DataSource until a Statement gets executed,\n lazily applying the specified transaction settings to the target Connection.\n\n This transaction manager supports nested transactions via the JDBC 3.0\n Savepoint mechanism. The\n "nestedTransactionAllowed" flag defaults\n to "true", since nested transactions will work without restrictions on JDBC\n drivers that support savepoints (such as the Oracle JDBC driver).\n\n This transaction manager can be used as a replacement for the\n JtaTransactionManager in the single\n resource case, as it does not require a container that supports JTA, typically\n in combination with a locally defined JDBC DataSource (e.g. an Apache Commons\n DBCP connection pool). Switching between this local strategy and a JTA\n environment is just a matter of configuration!\n\n As of 4.3.4, this transaction manager triggers flush callbacks on registered\n transaction synchronizations (if synchronization is generally active), assuming\n resources operating on the underlying JDBC Connection. This allows for\n setup analogous to JtaTransactionManager, in particular with respect to\n lazily registered ORM resources (e.g. a Hibernate Session).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/DataSourceTransactionManager.html
DataSourceUtils	A										<section class="prog__container">Helper class that provides static methods for obtaining JDBC Connections from\n a DataSource. Includes special support for Spring-managed\n transactional Connections, e.g. managed by DataSourceTransactionManager\n or JtaTransactionManager.\n\n Used internally by Spring's JdbcTemplate,\n Spring's JDBC operation objects and the JDBC DataSourceTransactionManager.\n Can also be used directly in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/DataSourceUtils.html
DelegatingDataSource	A										<section class="prog__container">JDBC DataSource implementation that delegates all calls\n to a given target DataSource.\n\n This class is meant to be subclassed, with subclasses overriding only\n those methods (such as getConnection()) that should not simply\n delegate to the target DataSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/DelegatingDataSource.html
DriverManagerDataSource	A										<section class="prog__container">Simple implementation of the standard JDBC DataSource interface,\n configuring the plain old JDBC DriverManager via bean properties, and\n returning a new Connection from every getConnection call.\n\n NOTE: This class is not an actual connection pool; it does not actually\n pool Connections. It just serves as simple replacement for a full-blown\n connection pool, implementing the same standard interface, but creating new\n Connections on every call.\n\n Useful for test or standalone environments outside of a J2EE container, either\n as a DataSource bean in a corresponding ApplicationContext or in conjunction with\n a simple JNDI environment. Pool-assuming Connection.close() calls will\n simply close the Connection, so any DataSource-aware persistence code should work.\n\n NOTE: Within special class loading environments such as OSGi, this class\n is effectively superseded by SimpleDriverDataSource due to general class\n loading issues with the JDBC DriverManager that be resolved through direct Driver\n usage (which is exactly what SimpleDriverDataSource does).\nIn a J2EE container, it is recommended to use a JNDI DataSource provided by\n the container. Such a DataSource can be exposed as a DataSource bean in a Spring\n ApplicationContext via JndiObjectFactoryBean,\n for seamless switching to and from a local DataSource bean like this class.\n For tests, you can then either set up a mock JNDI environment through Spring's\n SimpleNamingContextBuilder, or switch the\n bean definition to a local DataSource (which is simpler and thus recommended).\n\n If you need a "real" connection pool outside of a J2EE container, consider\n Apache Commons DBCP\n or C3P0.\n Commons DBCP's BasicDataSource and C3P0's ComboPooledDataSource are full\n connection pool beans, supporting the same basic properties as this class\n plus specific settings (such as minimal/maximal pool size etc).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/DriverManagerDataSource.html
IsolationLevelDataSourceAdapter	A										<section class="prog__container">An adapter for a target DataSource, applying the current\n Spring transaction's isolation level (and potentially specified user credentials)\n to every getConnection call. Also applies the read-only flag,\n if specified.\n\n Can be used to proxy a target JNDI DataSource that does not have the\n desired isolation level (and user credentials) configured. Client code\n can work with this DataSource as usual, not worrying about such settings.\n\n Inherits the capability to apply specific user credentials from its superclass\n UserCredentialsDataSourceAdapter; see the latter's javadoc for details\n on that functionality (e.g. UserCredentialsDataSourceAdapter.setCredentialsForCurrentThread(java.lang.String, java.lang.String)).\n\n WARNING: This adapter simply calls\n Connection.setTransactionIsolation(int) and/or\n Connection.setReadOnly(boolean) for every Connection obtained from it.\n It does, however, not reset those settings; it rather expects the target\n DataSource to perform such resetting as part of its connection pool handling.\n Make sure that the target DataSource properly cleans up such transaction state.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/IsolationLevelDataSourceAdapter.html
JdbcTransactionObjectSupport	A										<section class="prog__container">Convenient base class for JDBC-aware transaction objects.\n Can contain a ConnectionHolder, and implements the\n SavepointManager\n interface based on that ConnectionHolder.\n\n Allows for programmatic management of JDBC 3.0\n Savepoints. Spring's\n DefaultTransactionStatus\n will automatically delegate to this, as it autodetects transaction\n objects that implement the SavepointManager interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.html
LazyConnectionDataSourceProxy	A										<section class="prog__container">Proxy for a target DataSource, fetching actual JDBC Connections lazily,\n i.e. not until first creation of a Statement. Connection initialization\n properties like auto-commit mode, transaction isolation and read-only mode\n will be kept and applied to the actual JDBC Connection as soon as an\n actual Connection is fetched (if ever). Consequently, commit and rollback\n calls will be ignored if no Statements have been created.\n\n This DataSource proxy allows to avoid fetching JDBC Connections from\n a pool unless actually necessary. JDBC transaction control can happen\n without fetching a Connection from the pool or communicating with the\n database; this will be done lazily on first creation of a JDBC Statement.\n\n If you configure both a LazyConnectionDataSourceProxy and a\n TransactionAwareDataSourceProxy, make sure that the latter is the outermost\n DataSource. In such a scenario, data access code will talk to the\n transaction-aware DataSource, which will in turn work with the\n LazyConnectionDataSourceProxy.\n\n Lazy fetching of physical JDBC Connections is particularly beneficial\n in a generic transaction demarcation environment. It allows you to demarcate\n transactions on all methods that could potentially perform data access,\n without paying a performance penalty if no actual data access happens.\n\n This DataSource proxy gives you behavior analogous to JTA and a\n transactional JNDI DataSource (as provided by the J2EE server), even\n with a local transaction strategy like DataSourceTransactionManager or\n HibernateTransactionManager. It does not add value with Spring's\n JtaTransactionManager as transaction strategy.\n\n Lazy fetching of JDBC Connections is also recommended for read-only\n operations with Hibernate, in particular if the chances of resolving the\n result in the second-level cache are high. This avoids the need to\n communicate with the database at all for such read-only operations.\n You will get the same effect with non-transactional reads, but lazy fetching\n of JDBC Connections allows you to still perform reads in transactions.\n\n NOTE: This DataSource proxy needs to return wrapped Connections\n (which implement the ConnectionProxy interface) in order to handle\n lazy fetching of an actual JDBC Connection. Therefore, the returned Connections\n cannot be cast to a native JDBC Connection type such as OracleConnection or\n to a connection pool implementation type. Use a corresponding\n NativeJdbcExtractor\n or JDBC 4's Wrapper.unwrap(java.lang.Class<T>) to retrieve the native JDBC Connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.html
SimpleConnectionHandle	A										<section class="prog__container">Simple implementation of the ConnectionHandle interface,\n containing a given JDBC Connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/SimpleConnectionHandle.html
SimpleDriverDataSource	A										<section class="prog__container">Simple implementation of the standard JDBC DataSource interface,\n configuring a plain old JDBC Driver via bean properties, and\n returning a new Connection from every getConnection call.\n\n NOTE: This class is not an actual connection pool; it does not actually\n pool Connections. It just serves as simple replacement for a full-blown\n connection pool, implementing the same standard interface, but creating new\n Connections on every call.\n\n In a J2EE container, it is recommended to use a JNDI DataSource provided by\n the container. Such a DataSource can be exposed as a DataSource bean in a Spring\n ApplicationContext via JndiObjectFactoryBean,\n for seamless switching to and from a local DataSource bean like this class.\n\n If you need a "real" connection pool outside of a J2EE container, consider\n Apache Commons DBCP\n or C3P0.\n Commons DBCP's BasicDataSource and C3P0's ComboPooledDataSource are full\n connection pool beans, supporting the same basic properties as this class\n plus specific settings (such as minimal/maximal pool size etc).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/SimpleDriverDataSource.html
SingleConnectionDataSource	A										<section class="prog__container">Implementation of SmartDataSource that wraps a single JDBC Connection\n which is not closed after use. Obviously, this is not multi-threading capable.\n\n Note that at shutdown, someone should close the underlying Connection\n via the close() method. Client code will never call close\n on the Connection handle if it is SmartDataSource-aware (e.g. uses\n DataSourceUtils.releaseConnection).\n\n If client code will call close() in the assumption of a pooled\n Connection, like when using persistence tools, set "suppressClose" to "true".\n This will return a close-suppressing proxy instead of the physical Connection.\n Be aware that you will not be able to cast this to a native\n OracleConnection or the like anymore; you need to use a\n NativeJdbcExtractor then.\n\n This is primarily intended for testing. For example, it enables easy testing\n outside an application server, for code that expects to work on a DataSource.\n In contrast to DriverManagerDataSource, it reuses the same Connection\n all the time, avoiding excessive creation of physical Connections.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/SingleConnectionDataSource.html
SmartDataSource	A										<section class="prog__container">Extension of the javax.sql.DataSource interface, to be\n implemented by special DataSources that return JDBC Connections\n in an unwrapped fashion.\n\n Classes using this interface can query whether or not the Connection\n should be closed after an operation. Spring's DataSourceUtils and\n JdbcTemplate classes automatically perform such a check.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/SmartDataSource.html
TransactionAwareDataSourceProxy	A										<section class="prog__container">Proxy for a target JDBC DataSource, adding awareness of\n Spring-managed transactions. Similar to a transactional JNDI DataSource\n as provided by a J2EE server.\n\n Data access code that should remain unaware of Spring's data access support\n can work with this proxy to seamlessly participate in Spring-managed transactions.\n Note that the transaction manager, for example DataSourceTransactionManager,\n still needs to work with the underlying DataSource, not with this proxy.\n\n Make sure that TransactionAwareDataSourceProxy is the outermost DataSource\n of a chain of DataSource proxies/adapters. TransactionAwareDataSourceProxy\n can delegate either directly to the target connection pool or to some\n intermediary proxy/adapter like LazyConnectionDataSourceProxy or\n UserCredentialsDataSourceAdapter.\n\n Delegates to DataSourceUtils for automatically participating in\n thread-bound transactions, for example managed by DataSourceTransactionManager.\n getConnection calls and close calls on returned Connections\n will behave properly within a transaction, i.e. always operate on the transactional\n Connection. If not within a transaction, normal DataSource behavior applies.\n\n This proxy allows data access code to work with the plain JDBC API and still\n participate in Spring-managed transactions, similar to JDBC code in a J2EE/JTA\n environment. However, if possible, use Spring's DataSourceUtils, JdbcTemplate or\n JDBC operation objects to get transaction participation even without a proxy for\n the target DataSource, avoiding the need to define such a proxy in the first place.\n\n As a further effect, using a transaction-aware DataSource will apply remaining\n transaction timeouts to all created JDBC (Prepared/Callable)Statement. This means\n that all operations performed through standard JDBC will automatically participate\n in Spring-managed transaction timeouts.\n\n NOTE: This DataSource proxy needs to return wrapped Connections\n (which implement the ConnectionProxy interface) in order to handle\n close calls properly. Therefore, the returned Connections cannot be cast\n to a native JDBC Connection type such as OracleConnection or to a connection\n pool implementation type. Use a corresponding\n NativeJdbcExtractor\n or JDBC 4's Wrapper.unwrap(java.lang.Class<T>) to retrieve the native JDBC Connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.html
UserCredentialsDataSourceAdapter	A										<section class="prog__container">An adapter for a target JDBC DataSource, applying the specified\n user credentials to every standard getConnection() call, implicitly\n invoking getConnection(username, password) on the target.\n All other methods simply delegate to the corresponding methods of the\n target DataSource.\n\n Can be used to proxy a target JNDI DataSource that does not have user\n credentials configured. Client code can work with this DataSource as usual,\n using the standard getConnection() call.\n\n In the following example, client code can simply transparently work with\n the preconfigured "myDataSource", implicitly accessing "myTargetDataSource"\n with the specified user credentials.\n\n \n <bean id="myTargetDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">\n   <property name="jndiName" value="java:comp/env/jdbc/myds"/>\n </bean>\n\n <bean id="myDataSource" class="org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter">\n   <property name="targetDataSource" ref="myTargetDataSource"/>\n   <property name="username" value="myusername"/>\n   <property name="password" value="mypassword"/>\n </bean>\nIf the "username" is empty, this proxy will simply delegate to the\n standard getConnection() method of the target DataSource.\n This can be used to keep a UserCredentialsDataSourceAdapter bean definition\n just for the option of implicitly passing in user credentials if\n the particular target DataSource requires it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/UserCredentialsDataSourceAdapter.html
WebSphereDataSourceAdapter	A										<section class="prog__container">DataSource implementation that delegates all calls to a WebSphere\n target DataSource, typically obtained from JNDI, applying a current\n isolation level and/or current user credentials to every Connection obtained\n from it.\n\n Uses IBM-specific API to get a JDBC Connection with a specific isolation\n level (and read-only flag) from a WebSphere DataSource\n (IBM code example).\n Supports the transaction-specific isolation level exposed by\n TransactionSynchronizationManager.getCurrentTransactionIsolationLevel().\n It's also possible to specify a default isolation level, to be applied when the\n current Spring-managed transaction does not define a specific isolation level.\n\n Usage example, defining the target DataSource as an inner-bean JNDI lookup\n (of course, you can link to any WebSphere DataSource through a bean reference):\n\n \n <bean id="myDataSource" class="org.springframework.jdbc.datasource.WebSphereDataSourceAdapter">\n   <property name="targetDataSource">\n     <bean class="org.springframework.jndi.JndiObjectFactoryBean">\n       <property name="jndiName" value="jdbc/myds"/>\n     </bean>\n   </property>\n </bean>\n\n Thanks to Ricardo Olivieri for submitting the original implementation\n of this approach!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.html
ConnectionProperties	A										<section class="prog__container">ConnectionProperties serves as a simple data container that allows\n essential JDBC connection properties to be configured consistently,\n independent of the actual DataSource\n implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/ConnectionProperties.html
DataSourceFactory	A										<section class="prog__container">DataSourceFactory encapsulates the creation of a particular\n DataSource implementation such as a\n SimpleDriverDataSource or a connection pool such as Apache DBCP or C3P0.\n\n Call getConnectionProperties() to configure normalized\n DataSource properties before calling getDataSource() to\n actually get the configured DataSource instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/DataSourceFactory.html
EmbeddedDatabase	A										<section class="prog__container">EmbeddedDatabase serves as a handle to an embedded database instance.\n\n An EmbeddedDatabase is also a DataSource and adds a\n shutdown() operation so that the embedded database instance can be\n shut down gracefully.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabase.html
EmbeddedDatabaseBuilder	A										<section class="prog__container">A builder that provides a convenient API for constructing an embedded database.\n\n Usage Example\n\n EmbeddedDatabase db = new EmbeddedDatabaseBuilder()\n     .generateUniqueName(true)\n     .setType(H2)\n     .setScriptEncoding("UTF-8")\n     .ignoreFailedDrops(true)\n     .addScript("schema.sql")\n     .addScripts("user_data.sql", "country_data.sql")\n     .build();\n\n // perform actions against the db (EmbeddedDatabase extends javax.sql.DataSource)\n\n db.shutdown();\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.html
EmbeddedDatabaseConfigurer	A										<section class="prog__container">EmbeddedDatabaseConfigurer encapsulates the configuration required to\n create, connect to, and shut down a specific type of embedded database such as\n HSQL, H2, or Derby.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseConfigurer.html
EmbeddedDatabaseFactory	A										<section class="prog__container">Factory for creating an EmbeddedDatabase instance.\n\n Callers are guaranteed that the returned database has been fully\n initialized and populated.\n\n The factory can be configured as follows:\n \nCall generateUniqueDatabaseName to set a unique, random name\n for the database.\n Call setDatabaseName(java.lang.String) to set an explicit name for the database.\n Call setDatabaseType(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType) to set the database type if you wish to\n use one of the supported types.\n Call setDatabaseConfigurer(org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer) to configure support for a custom\n embedded database type.\n Call setDatabasePopulator(org.springframework.jdbc.datasource.init.DatabasePopulator) to change the algorithm used to\n populate the database.\n Call setDataSourceFactory(org.springframework.jdbc.datasource.embedded.DataSourceFactory) to change the type of\n DataSource used to connect to the database.\n \nAfter configuring the factory, call getDatabase() to obtain\n a reference to the EmbeddedDatabase instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.html
EmbeddedDatabaseFactoryBean	A										<section class="prog__container">A subclass of EmbeddedDatabaseFactory that implements FactoryBean\n for registration as a Spring bean. Returns the actual DataSource that\n provides connectivity to the embedded database to Spring.\n\n The target DataSource is returned instead of an EmbeddedDatabase\n proxy since the FactoryBean will manage the initialization and destruction\n lifecycle of the embedded database instance.\n\n Implements DisposableBean to shutdown the embedded database when the\n managing Spring container is being closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactoryBean.html
EmbeddedDatabaseType	A										<section class="prog__container">A supported embedded database type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseType.html
OutputStreamFactory	A										<section class="prog__container">Internal helper for exposing dummy OutputStreams to embedded databases\n such as Derby, preventing the creation of a log file.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/OutputStreamFactory.html
CannotReadScriptException	A										<section class="prog__container">Thrown by ScriptUtils if an SQL script cannot be read.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/CannotReadScriptException.html
CompositeDatabasePopulator	A										<section class="prog__container">Composite DatabasePopulator that delegates to a list of given\n DatabasePopulator implementations, executing all scripts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/CompositeDatabasePopulator.html
DatabasePopulator	A										<section class="prog__container">Strategy used to populate, initialize, or clean up a database.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/DatabasePopulator.html
DatabasePopulatorUtils	A										<section class="prog__container">Utility methods for executing a DatabasePopulator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.html
DataSourceInitializer	A										<section class="prog__container">Used to set up a database during\n initialization and clean up a database during\n destruction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/DataSourceInitializer.html
ResourceDatabasePopulator	A										<section class="prog__container">Populates, initializes, or cleans up a database using SQL scripts defined in\n external resources.\n\n \nCall addScript(org.springframework.core.io.Resource) to add a single SQL script location.\n Call addScripts(org.springframework.core.io.Resource...) to add multiple SQL script locations.\n Consult the setter methods in this class for further configuration options.\n Call populate(java.sql.Connection) or execute(javax.sql.DataSource) to initialize or clean up the\n database using the configured scripts.\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html
ScriptException	A										<section class="prog__container">Root of the hierarchy of data access exceptions that are related to processing\n of SQL scripts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/ScriptException.html
ScriptParseException	A										<section class="prog__container">Thrown by ScriptUtils if an SQL script cannot be properly parsed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/ScriptParseException.html
ScriptStatementFailedException	A										<section class="prog__container">Thrown by ScriptUtils if a statement in an SQL script failed when\n executing it against the target database.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.html
ScriptUtils	A										<section class="prog__container">Generic utility methods for working with SQL scripts.\n\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/ScriptUtils.html
UncategorizedScriptException	A										<section class="prog__container">Thrown when we cannot determine anything more specific than "something went\n wrong while processing an SQL script": for example, a SQLException\n from JDBC that we cannot pinpoint more precisely.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/init/UncategorizedScriptException.html
AbstractRoutingDataSource	A										<section class="prog__container">Abstract DataSource implementation that routes getConnection()\n calls to one of various target DataSources based on a lookup key. The latter is usually\n (but not necessarily) determined through some thread-bound transaction context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html
BeanFactoryDataSourceLookup	A										<section class="prog__container">DataSourceLookup implementation based on a Spring BeanFactory.\n\n Will lookup Spring managed beans identified by bean name,\n expecting them to be of type javax.sql.DataSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/BeanFactoryDataSourceLookup.html
DataSourceLookup	A										<section class="prog__container">Strategy interface for looking up DataSources by name.\n\n Used, for example, to resolve data source names in JPA\n persistence.xml files.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/DataSourceLookup.html
DataSourceLookupFailureException	A										<section class="prog__container">Exception to be thrown by a DataSourceLookup implementation,\n indicating that the specified DataSource could not be obtained.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/DataSourceLookupFailureException.html
IsolationLevelDataSourceRouter	A										<section class="prog__container">DataSource that routes to one of various target DataSources based on the\n current transaction isolation level. The target DataSources need to be\n configured with the isolation level name as key, as defined on the\n TransactionDefinition interface.\n\n This is particularly useful in combination with JTA transaction management\n (typically through Spring's JtaTransactionManager).\n Standard JTA does not support transaction-specific isolation levels. Some JTA\n providers support isolation levels as a vendor-specific extension (e.g. WebLogic),\n which is the preferred way of addressing this. As alternative (e.g. on WebSphere),\n the target database can be represented through multiple JNDI DataSources, each\n configured with a different isolation level (for the entire DataSource).\n The present DataSource router allows to transparently switch to the\n appropriate DataSource based on the current transaction's isolation level.\n\n The configuration can for example look like this, assuming that the target\n DataSources are defined as individual Spring beans with names\n "myRepeatableReadDataSource", "mySerializableDataSource" and "myDefaultDataSource":\n\n \n <bean id="dataSourceRouter" class="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter">\n   <property name="targetDataSources">\n     <map>\n       <entry key="ISOLATION_REPEATABLE_READ" value-ref="myRepeatableReadDataSource"/>\n       <entry key="ISOLATION_SERIALIZABLE" value-ref="mySerializableDataSource"/>\n     </map>\n   </property>\n   <property name="defaultTargetDataSource" ref="myDefaultDataSource"/>\n </bean>\n\n Alternatively, the keyed values can also be data source names, to be resolved\n through a DataSourceLookup: by default, JNDI\n names for a standard JNDI lookup. This allows for a single concise definition\n without the need for separate DataSource bean definitions.\n\n \n <bean id="dataSourceRouter" class="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter">\n   <property name="targetDataSources">\n     <map>\n       <entry key="ISOLATION_REPEATABLE_READ" value="java:comp/env/jdbc/myrrds"/>\n       <entry key="ISOLATION_SERIALIZABLE" value="java:comp/env/jdbc/myserds"/>\n     </map>\n   </property>\n   <property name="defaultTargetDataSource" value="java:comp/env/jdbc/mydefds"/>\n </bean>\n\n Note: If you are using this router in combination with Spring's\n JtaTransactionManager,\n don't forget to switch the "allowCustomIsolationLevels" flag to "true".\n (By default, JtaTransactionManager will only accept a default isolation level\n because of the lack of isolation level support in standard JTA itself.)\n\n \n <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">\n   <property name="allowCustomIsolationLevels" value="true"/>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/IsolationLevelDataSourceRouter.html
JndiDataSourceLookup	A										<section class="prog__container">JNDI-based DataSourceLookup implementation.\n\n For specific JNDI configuration, it is recommended to configure\n the "jndiEnvironment"/"jndiTemplate" properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/JndiDataSourceLookup.html
MapDataSourceLookup	A										<section class="prog__container">Simple DataSourceLookup implementation that relies on a map for doing lookups.\n\n Useful for testing environments or applications that need to match arbitrary\n String names to target DataSource objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/MapDataSourceLookup.html
SingleDataSourceLookup	A										<section class="prog__container">An implementation of the DataSourceLookup that simply wraps a\n single given DataSource, returned for any data source name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/SingleDataSourceLookup.html
BatchSqlUpdate	A										<section class="prog__container">SqlUpdate subclass that performs batch update operations. Encapsulates\n queuing up records to be updated, and adds them as a single batch once\n flush is called or the given batch size has been met.\n\n Note that this class is a non-thread-safe object, in contrast\n to all other JDBC operations objects in this package. You need to create\n a new instance of it for each use, or call reset before\n reuse within the same thread.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/BatchSqlUpdate.html
GenericSqlQuery	A										<section class="prog__container">A concrete variant of SqlQuery which can be configured\n with a RowMapper.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/GenericSqlQuery.html
GenericStoredProcedure	A										<section class="prog__container">Concrete implementation making it possible to define the RDBMS stored procedures\n in an application context without writing a custom Java implementation class.\n \n This implementation does not provide a typed method for invocation so executions\n must use one of the generic StoredProcedure.execute(java.util.Map) or\n StoredProcedure.execute(org.springframework.jdbc.core.ParameterMapper) methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/GenericStoredProcedure.html
MappingSqlQuery	A										<section class="prog__container">Reusable query in which concrete subclasses must implement the abstract\n mapRow(ResultSet, int) method to convert each row of the JDBC ResultSet\n into an object.\n\n Simplifies MappingSqlQueryWithParameters API by dropping parameters and\n context. Most subclasses won't care about parameters. If you don't use\n contextual information, subclass this instead of MappingSqlQueryWithParameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/MappingSqlQuery.html
MappingSqlQueryWithParameters	A										<section class="prog__container">Reusable RDBMS query in which concrete subclasses must implement\n the abstract mapRow(ResultSet, int) method to map each row of\n the JDBC ResultSet into an object.\n\n Such manual mapping is usually preferable to "automatic"\n mapping using reflection, which can become complex in non-trivial\n cases. For example, the present class allows different objects\n to be used for different rows (for example, if a subclass is indicated).\n It allows computed fields to be set. And there's no need for\n ResultSet columns to have the same names as bean properties.\n The Pareto Principle in action: going the extra mile to automate\n the extraction process makes the framework much more complex\n and delivers little real benefit.\n\n Subclasses can be constructed providing SQL, parameter types\n and a DataSource. SQL will often vary between subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.html
MappingSqlQueryWithParameters.RowMapperImpl	A										<section class="prog__container">Implementation of RowMapper that calls the enclosing\n class's mapRow method for each row.</section>	No URL found
RdbmsOperation	A										<section class="prog__container">An "RDBMS operation" is a multi-threaded, reusable object representing a query,\n update, or stored procedure call. An RDBMS operation is not a command,\n as a command is not reusable. However, execute methods may take commands as\n arguments. Subclasses should be JavaBeans, allowing easy configuration.\n\n This class and subclasses throw runtime exceptions, defined in the\n  (and as thrown by the\n org.springframework.jdbc.core package, which the classes\n in this package use under the hood to perform raw JDBC operations).\n\n Subclasses should set SQL and add parameters before invoking the\n compile() method. The order in which parameters are added is\n significant. The appropriate execute or update\n method can then be invoked.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/RdbmsOperation.html
SqlCall	A										<section class="prog__container">RdbmsOperation using a JdbcTemplate and representing a SQL-based\n call such as a stored procedure or a stored function.\n\n Configures a CallableStatementCreatorFactory based on the declared\n parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/SqlCall.html
SqlFunction	A										<section class="prog__container">SQL "function" wrapper for a query that returns a single row of results.\n The default behavior is to return an int, but that can be overridden by\n using the constructor with an extra return type parameter.\n\n Intended to use to call SQL functions that return a single result using a\n query like "select user()" or "select sysdate from dual". It is not intended\n for calling more complex stored functions or for using a CallableStatement to\n invoke a stored procedure or stored function. Use StoredProcedure or SqlCall\n for this type of processing.\n\n This is a concrete class, which there is often no need to subclass.\n Code using this package can create an object of this type, declaring SQL\n and parameters, and then invoke the appropriate run method\n repeatedly to execute the function. Subclasses are only supposed to add\n specialized run methods for specific parameter and return types.\n\n Like all RdbmsOperation objects, SqlFunction objects are thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/SqlFunction.html
SqlOperation	A										<section class="prog__container">Operation object representing a SQL-based operation such as a query or update,\n as opposed to a stored procedure.\n\n Configures a PreparedStatementCreatorFactory\n based on the declared parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/SqlOperation.html
SqlQuery	A										<section class="prog__container">Reusable operation object representing a SQL query.\n\n Subclasses must implement the newRowMapper(java.lang.Object[], java.util.Map<?, ?>) method to provide\n an object that can extract the results of iterating over the\n ResultSet created during the execution of the query.\n\n This class provides a number of public execute methods that are\n analogous to the different convenient JDO query execute methods. Subclasses\n can either rely on one of these inherited methods, or can add their own\n custom execution methods, with meaningful names and typed parameters\n (definitely a best practice). Each custom query method will invoke one of\n this class's untyped query methods.\n\n Like all RdbmsOperation classes that ship with the Spring\n Framework, SqlQuery instances are thread-safe after their\n initialization is complete. That is, after they are constructed and configured\n via their setter methods, they can be used safely from multiple threads.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/SqlQuery.html
SqlUpdate	A										<section class="prog__container">Reusable operation object representing a SQL update.\n\n This class provides a number of update methods,\n analogous to the execute methods of query objects.\n\n This class is concrete. Although it can be subclassed (for example\n to add a custom update method) it can easily be parameterized by setting\n SQL and declaring parameters.\n\n Like all RdbmsOperation classes that ship with the Spring\n Framework, SqlQuery instances are thread-safe after their\n initialization is complete. That is, after they are constructed and configured\n via their setter methods, they can be used safely from multiple threads.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/SqlUpdate.html
StoredProcedure	A										<section class="prog__container">Superclass for object abstractions of RDBMS stored procedures.\n This class is abstract and it is intended that subclasses will provide\n a typed method for invocation that delegates to the supplied\n execute(java.lang.Object...) method.\n\n The inherited sql property is the name of the stored\n procedure in the RDBMS.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/StoredProcedure.html
UpdatableSqlQuery	A										<section class="prog__container">Reusable RDBMS query in which concrete subclasses must implement\n the abstract updateRow(ResultSet, int, context) method to update each\n row of the JDBC ResultSet and optionally map contents into an object.\n\n Subclasses can be constructed providing SQL, parameter types\n and a DataSource. SQL will often vary between subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/UpdatableSqlQuery.html
UpdatableSqlQuery.RowMapperImpl	A										<section class="prog__container">Implementation of RowMapper that calls the enclosing\n class's updateRow() method for each row.</section>	No URL found
AbstractFallbackSQLExceptionTranslator	A										<section class="prog__container">Base class for SQLExceptionTranslator implementations that allow for\n fallback to some other SQLExceptionTranslator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.html
CustomSQLErrorCodesTranslation	A										<section class="prog__container">JavaBean for holding custom JDBC error codes translation for a particular\n database. The "exceptionClass" property defines which exception will be\n thrown for the list of error codes specified in the errorCodes property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/CustomSQLErrorCodesTranslation.html
CustomSQLExceptionTranslatorRegistrar	A										<section class="prog__container">Registry for registering custom SQLExceptionTranslator\n instances for specific databases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistrar.html
CustomSQLExceptionTranslatorRegistry	A										<section class="prog__container">Registry for custom SQLExceptionTranslator instances associated with\n specific databases allowing for overriding translation based on values contained in the configuration file\n named "sql-error-codes.xml".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistry.html
DatabaseMetaDataCallback	A										<section class="prog__container">A callback interface used by the JdbcUtils class. Implementations of this\n interface perform the actual work of extracting database meta data, but\n don't need to worry about exception handling. SQLExceptions will be caught\n and handled correctly by the JdbcUtils class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/DatabaseMetaDataCallback.html
DatabaseStartupValidator	A										<section class="prog__container">Bean that checks if a database has already started up. To be referenced\n via "depends-on" from beans that depend on database startup, like a Hibernate\n SessionFactory or custom data access objects that access a DataSource directly.\n\n Useful to defer application initialization until a database has started up.\n Particularly appropriate for waiting on a slowly starting Oracle database.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/DatabaseStartupValidator.html
GeneratedKeyHolder	A										<section class="prog__container">Default implementation of the KeyHolder interface, to be used for\n holding auto-generated keys (as potentially returned by JDBC insert statements).\n\n Create an instance of this class for each insert operation, and pass\n it to the corresponding JdbcTemplate\n or {org.springframework.jdbc.object.SqlUpdate} methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/GeneratedKeyHolder.html
JdbcAccessor	A										<section class="prog__container">Base class for JdbcTemplate and\n other JDBC-accessing DAO helpers, defining common properties such as\n DataSource and exception translator.\n\n Not intended to be used directly.\n See JdbcTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/JdbcAccessor.html
JdbcUtils	A										<section class="prog__container">Generic utility methods for working with JDBC. Mainly for internal use\n within the framework, but also useful for custom JDBC access code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/JdbcUtils.html
KeyHolder	A										<section class="prog__container">Interface for retrieving keys, typically used for auto-generated keys\n as potentially returned by JDBC insert statements.\n\n Implementations of this interface can hold any number of keys.\n In the general case, the keys are returned as a List containing one Map\n for each row of keys.\n\n Most applications only use on key per row and process only one row at a\n time in an insert statement. In these cases, just call getKey\n to retrieve the key. The returned value is a Number here, which is the\n usual type for auto-generated keys.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/KeyHolder.html
MetaDataAccessException	A										<section class="prog__container">Exception indicating that something went wrong during JDBC metadata lookup.\n\n This is a checked exception since we want it to be caught, logged and\n handled rather than cause the application to fail. Failure to read JDBC\n metadata is usually not a fatal problem.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/MetaDataAccessException.html
SQLErrorCodes	A										<section class="prog__container">JavaBean for holding JDBC error codes for a particular database.\n Instances of this class are normally loaded through a bean factory.\n\n Used by Spring's SQLErrorCodeSQLExceptionTranslator.\n The file "sql-error-codes.xml" in this package contains default\n SQLErrorCodes instances for various databases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLErrorCodes.html
SQLErrorCodesFactory	A										<section class="prog__container">Factory for creating SQLErrorCodes based on the\n "databaseProductName" taken from the DatabaseMetaData.\n\n Returns SQLErrorCodes populated with vendor codes\n defined in a configuration file named "sql-error-codes.xml".\n Reads the default file in this package if not overridden by a file in\n the root of the class path (for example in the "/WEB-INF/classes" directory).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLErrorCodesFactory.html
SQLErrorCodeSQLExceptionTranslator	A										<section class="prog__container">Implementation of SQLExceptionTranslator that analyzes vendor-specific error codes.\n More precise than an implementation based on SQL state, but heavily vendor-specific.\n\n This class applies the following matching rules:\n \nTry custom translation implemented by any subclass. Note that this class is\n concrete and is typically used itself, in which case this rule doesn't apply.\n Apply error code matching. Error codes are obtained from the SQLErrorCodesFactory\n by default. This factory loads a "sql-error-codes.xml" file from the class path,\n defining error code mappings for database names from database metadata.\n Fallback to a fallback translator. SQLStateSQLExceptionTranslator is the\n default fallback translator, analyzing the exception's SQL state only. On Java 6\n which introduces its own SQLException subclass hierarchy, we will\n use SQLExceptionSubclassTranslator by default, which in turns falls back\n to Spring's own SQL state translation when not encountering specific subclasses.\n \nThe configuration file named "sql-error-codes.xml" is by default read from\n this package. It can be overridden through a file of the same name in the root\n of the class path (e.g. in the "/WEB-INF/classes" directory), as long as the\n Spring JDBC package is loaded from the same ClassLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.html
SQLExceptionSubclassTranslator	A										<section class="prog__container">SQLExceptionTranslator implementation which analyzes the specific\n SQLException subclass thrown by the JDBC driver.\n\n Falls back to a standard SQLStateSQLExceptionTranslator if the JDBC\n driver does not actually expose JDBC 4 compliant SQLException subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLExceptionSubclassTranslator.html
SQLExceptionTranslator	A										<section class="prog__container">Strategy interface for translating between SQLExceptions\n and Spring's data access strategy-agnostic DataAccessException\n hierarchy.\n\n Implementations can be generic (for example, using\n SQLState codes for JDBC) or wholly\n proprietary (for example, using Oracle error codes) for greater precision.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLExceptionTranslator.html
SQLStateSQLExceptionTranslator	A										<section class="prog__container">SQLExceptionTranslator implementation that analyzes the SQL state in\n the SQLException based on the first two digits (the SQL state "class").\n Detects standard SQL state values and well-known vendor-specific SQL states.\n\n Not able to diagnose all problems, but is portable between databases and\n does not require special initialization (no database vendor detection, etc.).\n For more precise translation, consider SQLErrorCodeSQLExceptionTranslator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLStateSQLExceptionTranslator.html
SqlValue	A										<section class="prog__container">Simple interface for complex types to be set as statement parameters.\n\n Implementations perform the actual work of setting the actual values. They must\n implement the callback method setValue which can throw SQLExceptions\n that will be caught and translated by the calling code. This callback method has\n access to the underlying Connection via the given PreparedStatement object, if that\n should be needed to create any database-specific objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SqlValue.html
AbstractColumnMaxValueIncrementer	A										<section class="prog__container">Abstract base class for DataFieldMaxValueIncrementer implementations that use\n a column in a custom sequence table. Subclasses need to provide the specific handling\n of that table in their AbstractDataFieldMaxValueIncrementer.getNextKey() implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/AbstractColumnMaxValueIncrementer.html
AbstractDataFieldMaxValueIncrementer	A										<section class="prog__container">Base implementation of DataFieldMaxValueIncrementer that delegates\n to a single getNextKey() template method that returns a long.\n Uses longs for String values, padding with zeroes if required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/AbstractDataFieldMaxValueIncrementer.html
AbstractIdentityColumnMaxValueIncrementer	A										<section class="prog__container">Abstract base class for DataFieldMaxValueIncrementer implementations\n which are based on identity columns in a sequence-like table.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/AbstractIdentityColumnMaxValueIncrementer.html
AbstractSequenceMaxValueIncrementer	A										<section class="prog__container">Abstract base class for DataFieldMaxValueIncrementer implementations that use\n a database sequence. Subclasses need to provide the database-specific SQL to use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/AbstractSequenceMaxValueIncrementer.html
DataFieldMaxValueIncrementer	A										<section class="prog__container">Interface that defines contract of incrementing any data store field's\n maximum value. Works much like a sequence number generator.\n\n Typical implementations may use standard SQL, native RDBMS sequences\n or Stored Procedures to do the job.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/DataFieldMaxValueIncrementer.html
DB2MainframeSequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given sequence\n on DB2/390 or DB2/400. Thanks to Jens Eickmeyer for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/DB2MainframeSequenceMaxValueIncrementer.html
DB2SequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given sequence\n on DB2 UDB (for Unix and Windows). Thanks to Mark MacMahon for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/DB2SequenceMaxValueIncrementer.html
DerbyMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments the maximum value of a given Derby table\n with the equivalent of an auto-increment column. Note: If you use this class, your Derby key\n column should NOT be defined as an IDENTITY column, as the sequence table does the job.\n\n The sequence is kept in a table. There should be one sequence table per\n table that needs an auto-generated key.\n\n Derby requires an additional column to be used for the insert since it is impossible\n to insert a null into the identity column and have the value generated.  This is solved by\n providing the name of a dummy column that also must be created in the sequence table.\n\n Example:\n\n create table tab (id int not null primary key, text varchar(100));\n create table tab_sequence (value int generated always as identity, dummy char(1));\n insert into tab_sequence (dummy) values(null);\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.\n\n HINT: Since Derby supports the JDBC 3.0 getGeneratedKeys method,\n it is recommended to use IDENTITY columns directly in the tables and then utilizing\n a KeyHolder when calling the with the\n update(PreparedStatementCreator psc, KeyHolder generatedKeyHolder)\n method of the JdbcTemplate.\n\n Thanks to Endre Stolsvik for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/DerbyMaxValueIncrementer.html
H2SequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given H2 Database sequence.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementer.html
HsqlMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments the maximum value of a given HSQL table\n with the equivalent of an auto-increment column. Note: If you use this class, your HSQL\n key column should NOT be auto-increment, as the sequence table does the job.\n\n The sequence is kept in a table. There should be one sequence table per\n table that needs an auto-generated key.\n\n Example:\n\n create table tab (id int not null primary key, text varchar(100));\n create table tab_sequence (value identity);\n insert into tab_sequence values(0);\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.\n\n NOTE: HSQL now supports sequences and you should consider using them instead:\n HsqlSequenceMaxValueIncrementer</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/HsqlMaxValueIncrementer.html
HsqlSequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given HSQL sequence.\n Thanks to Guillaume Bilodeau for the suggestion!\n\n NOTE: This is an alternative to using a regular table to support generating\n unique keys that was necessary in previous versions of HSQL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/HsqlSequenceMaxValueIncrementer.html
MySQLMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments the maximum value of a given MySQL table\n with the equivalent of an auto-increment column. Note: If you use this class, your MySQL\n key column should NOT be auto-increment, as the sequence table does the job.\n\n The sequence is kept in a table; there should be one sequence table per\n table that needs an auto-generated key. The table type of the sequence table\n should be MyISAM so the sequences are allocated without regard to any\n transactions that might be in progress.\n\n Example:\n\n create table tab (id int unsigned not null primary key, text varchar(100));\n create table tab_sequence (value int not null) type=MYISAM;\n insert into tab_sequence values(0);\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.html
OracleSequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given Oracle sequence.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/OracleSequenceMaxValueIncrementer.html
PostgreSQLSequenceMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that retrieves the next value of a given PostgreSQL sequence.\n Thanks to Tomislav Urban for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/PostgreSQLSequenceMaxValueIncrementer.html
SqlServerMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments the maximum value of a given SQL Server table\n with the equivalent of an auto-increment column. Note: If you use this class, your table key\n column should NOT be defined as an IDENTITY column, as the sequence table does the job.\n\n This class is intended to be used with Microsoft SQL Server.\n\n The sequence is kept in a table. There should be one sequence table per\n table that needs an auto-generated key.\n\n Example:\n\n create table tab (id int not null primary key, text varchar(100))\n create table tab_sequence (id bigint identity)\n insert into tab_sequence default values\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.\n\n HINT: Since Microsoft SQL Server supports the JDBC 3.0 getGeneratedKeys\n method, it is recommended to use IDENTITY columns directly in the tables and then using a\n SimpleJdbcInsert or utilizing\n a KeyHolder when calling the with the\n update(PreparedStatementCreator psc, KeyHolder generatedKeyHolder)\n method of the JdbcTemplate.\n\n Thanks to Preben Nilsson for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/SqlServerMaxValueIncrementer.html
SybaseAnywhereMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments\n the maximum value of a given Sybase SQL Anywhere table\n with the equivalent of an auto-increment column. Note: If you use this class, your table key\n column should NOT be defined as an IDENTITY column, as the sequence table does the job.\n\n This class is intended to be used with Sybase Anywhere.\n\n The sequence is kept in a table. There should be one sequence table per\n table that needs an auto-generated key.\n\n Example:\n\n create table tab (id int not null primary key, text varchar(100))\n create table tab_sequence (id bigint identity)\n insert into tab_sequence values(DEFAULT)\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.\n\n HINT: Since Sybase Anywhere supports the JDBC 3.0 getGeneratedKeys method,\n it is recommended to use IDENTITY columns directly in the tables and then using a\n SimpleJdbcInsert or utilizing\n a KeyHolder when calling the with the\n update(PreparedStatementCreator psc, KeyHolder generatedKeyHolder)\n method of the JdbcTemplate.\n\n Thanks to Tarald Saxi Stormark for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/SybaseAnywhereMaxValueIncrementer.html
SybaseMaxValueIncrementer	A										<section class="prog__container">DataFieldMaxValueIncrementer that increments the maximum value of a given Sybase table\n with the equivalent of an auto-increment column. Note: If you use this class, your table key\n column should NOT be defined as an IDENTITY column, as the sequence table does the job.\n\n This class is intended to be used with Sybase Adaptive Server.\n\n The sequence is kept in a table. There should be one sequence table per\n table that needs an auto-generated key.\n\n Example:\n\n create table tab (id int not null primary key, text varchar(100))\n create table tab_sequence (id bigint identity)\n insert into tab_sequence values()\n\n If "cacheSize" is set, the intermediate values are served without querying the\n database. If the server or your application is stopped or crashes or a transaction\n is rolled back, the unused values will never be served. The maximum hole size in\n numbering is consequently the value of cacheSize.\n\n HINT: Since Sybase supports the JDBC 3.0 getGeneratedKeys method,\n it is recommended to use IDENTITY columns directly in the tables and then using a\n SimpleJdbcInsert or utilizing\n a KeyHolder when calling the with the\n update(PreparedStatementCreator psc, KeyHolder generatedKeyHolder)\n method of the JdbcTemplate.\n\n Thanks to Yinwei Liu for the suggestion!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/incrementer/SybaseMaxValueIncrementer.html
AbstractLobHandler	A										<section class="prog__container">Abstract base class for LobHandler implementations.\n\n Implements all accessor methods for column names through a column lookup\n and delegating to the corresponding accessor that takes a column index.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/AbstractLobHandler.html
DefaultLobHandler.DefaultLobCreator	A										<section class="prog__container">Default LobCreator implementation as an inner class.\n Can be subclassed in DefaultLobHandler extensions.</section>	No URL found
DefaultLobHandler	A										<section class="prog__container">Default implementation of the LobHandler interface.\n Invokes the direct accessor methods that java.sql.ResultSet\n and java.sql.PreparedStatement offer.\n\n By default, incoming streams are going to be passed to the appropriate\n setBinary/Ascii/CharacterStream method on the JDBC driver's\n PreparedStatement. If the specified content length is negative,\n this handler will use the JDBC 4.0 variants of the set-stream methods\n without a length parameter; otherwise, it will pass the specified length\n on to the driver.\n\n This LobHandler should work for any JDBC driver that is JDBC compliant\n in terms of the spec's suggestions regarding simple BLOB and CLOB handling.\n This does not apply to Oracle 9i's drivers at all; as of Oracle 10g,\n it does work but may still come with LOB size limitations. Consider using\n recent Oracle drivers even when working against an older database server.\n See the LobHandler javadoc for the full set of recommendations.\n\n Some JDBC drivers require values with a BLOB/CLOB target column to be\n explicitly set through the JDBC setBlob / setClob API:\n for example, PostgreSQL's driver. Switch the "wrapAsLob"\n property to "true" when operating against such a driver.\n\n On JDBC 4.0, this LobHandler also supports streaming the BLOB/CLOB content\n via the setBlob / setClob variants that take a stream\n argument directly. Consider switching the "streamAsLob"\n property to "true" when operating against a fully compliant JDBC 4.0 driver.\n\n Finally, primarily as a direct equivalent to OracleLobHandler,\n this LobHandler also supports the creation of temporary BLOB/CLOB objects.\n Consider switching the "createTemporaryLob"\n property to "true" when "streamAsLob" happens to run into LOB size limitations.\n\n See the LobHandler interface javadoc for a summary of recommendations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/DefaultLobHandler.html
JtaLobCreatorSynchronization	A										<section class="prog__container">Callback for resource cleanup at the end of a JTA transaction.\n Invokes LobCreator.close() to clean up temporary LOBs\n that might have been created.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/JtaLobCreatorSynchronization.html
LobCreator	A										<section class="prog__container">Interface that abstracts potentially database-specific creation of large binary\n fields and large text fields. Does not work with java.sql.Blob\n and java.sql.Clob instances in the API, as some JDBC drivers\n do not support these types as such.\n\n The LOB creation part is where LobHandler implementations usually\n differ. Possible strategies include usage of\n PreparedStatement.setBinaryStream/setCharacterStream but also\n PreparedStatement.setBlob/setClob with either a stream argument\n (requires JDBC 4.0) or java.sql.Blob/Clob wrapper objects.\n\n A LobCreator represents a session for creating BLOBs: It is not\n thread-safe and needs to be instantiated for each statement execution or for\n each transaction. Each LobCreator needs to be closed after completion.\n\n For convenient working with a PreparedStatement and a LobCreator,\n consider using JdbcTemplate with an\nAbstractLobCreatingPreparedStatementCallback\n implementation. See the latter's javadoc for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/LobCreator.html
LobCreatorUtils	A										<section class="prog__container">Helper class for registering a transaction synchronization for closing\n a LobCreator, preferring Spring transaction synchronization and falling\n back to plain JTA transaction synchronization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/LobCreatorUtils.html
LobHandler	A										<section class="prog__container">Abstraction for handling large binary fields and large text fields in\n specific databases, no matter if represented as simple types or Large OBjects.\n Its main purpose is to isolate Oracle 9i's peculiar handling of LOBs in\n OracleLobHandler; most other databases should be able to work\n with the provided DefaultLobHandler.\n\n Provides accessor methods for BLOBs and CLOBs, and acts as factory for\n LobCreator instances, to be used as sessions for creating BLOBs or CLOBs.\n LobCreators are typically instantiated for each statement execution or for\n each transaction; they are not thread-safe because they might track\n allocated database resources in order to free them after execution.\n\n Most databases/drivers should be able to work with DefaultLobHandler,\n which by default delegates to JDBC's direct accessor methods, avoiding the\n java.sql.Blob and java.sql.Clob API completely.\n DefaultLobHandler can also be configured to access LOBs using\n PreparedStatement.setBlob/setClob (e.g. for PostgreSQL), through\n setting the "wrapAsLob" property.\n\n Unfortunately, Oracle 9i just accepts Blob/Clob instances created via its own\n proprietary BLOB/CLOB API, and additionally doesn't accept large streams for\n PreparedStatement's corresponding setter methods. Therefore, you need to use\n OracleLobHandler there, which uses Oracle's BLOB/CLOB API for both types\n of access. The Oracle 10g+ JDBC driver will work with DefaultLobHandler\n as well, with some limitations in terms of LOB sizes depending on DBMS setup;\n as of Oracle 11g (or actually, using the 11g driver even against older databases),\n there should be no need to use OracleLobHandler at all anymore.\n\n Of course, you need to declare different field types for each database.\n In Oracle, any binary content needs to go into a BLOB, and all character content\n beyond 4000 bytes needs to go into a CLOB. In MySQL, there is no notion of a\n CLOB type but rather a LONGTEXT type that behaves like a VARCHAR. For complete\n portability, use a LobHandler for fields that might typically require LOBs on\n some database because of the field size (take Oracle's numbers as a guideline).\n\n Summarizing the recommended options (for actual LOB fields):\n\nJDBC 4.0 driver (including Oracle 11g driver): Use DefaultLobHandler,\n potentially with streamAsLob=true if your database driver requires that\n hint when populating a LOB field. Fall back to createTemporaryLob=true\n if you happen to run into LOB size limitations with your (Oracle) database setup.\n Oracle 10g driver: Use DefaultLobHandler with standard setup.\n On Oracle 10.1, set the "SetBigStringTryClob" connection property; as of Oracle 10.2,\n DefaultLobHandler should work with standard setup out of the box. Alternatively,\n consider using the proprietary OracleLobHandler (see below).\n Oracle 9i driver: Use OracleLobHandler with a connection-pool-specific\n NativeJdbcExtractor.\n PostgreSQL: Configure DefaultLobHandler with wrapAsLob=true,\n and use that LobHandler to access OID columns (but not BYTEA) in your database tables.\n For all other database drivers (and for non-LOB fields that might potentially\n turn into LOBs on some databases): Simply use a plain DefaultLobHandler.\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/LobHandler.html
OracleLobHandler	A										<section class="prog__container">Deprecated. \nin favor of DefaultLobHandler for the Oracle 10g driver and\n higher. Consider using the 10g/11g driver even against an Oracle 9i database!\n DefaultLobHandler.setCreateTemporaryLob(boolean) is the direct equivalent of this\n OracleLobHandler's implementation strategy, just using standard JDBC 4.0 API.\n That said, in most cases, regular DefaultLobHandler setup will work fine as well.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/OracleLobHandler.html
OracleLobHandler.LobCallback	A										<section class="prog__container">Internal callback interface for use with createLob.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/OracleLobHandler.LobCallback.html
OracleLobHandler.OracleLobCreator	A										<section class="prog__container">LobCreator implementation for Oracle databases.\n Creates Oracle-style temporary BLOBs and CLOBs that it frees on close.</section>	No URL found
SpringLobCreatorSynchronization	A										<section class="prog__container">Callback for resource cleanup at the end of a Spring transaction.\n Invokes LobCreator.close() to clean up temporary LOBs\n that might have been created.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/SpringLobCreatorSynchronization.html
TemporaryLobCreator	A										<section class="prog__container">LobCreator implementation based on temporary LOBs,\n using JDBC 4.0's Connection.createBlob() /\n Connection.createClob() mechanism.\n\n Used by DefaultLobHandler's DefaultLobHandler.setCreateTemporaryLob(boolean) mode.\n Can also be used directly to reuse the tracking and freeing of temporary LOBs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/lob/TemporaryLobCreator.html
C3P0NativeJdbcExtractor	A										<section class="prog__container">Implementation of the NativeJdbcExtractor interface for the\n C3P0 connection pool.\n\n Returns underlying native Connections to application code instead of C3P0's\n wrapper implementations; unwraps the Connection for native Statements.\n The returned JDBC classes can then safely be cast, e.g. to\n oracle.jdbc.OracleConnection.\n\n This NativeJdbcExtractor can be set just to allow working with\n a C3P0 DataSource: If a given object is not a C3P0 wrapper, it will be\n returned as-is.\n\n Note that this class requires C3P0 0.8.5 or later; for earlier C3P0 versions,\n use SimpleNativeJdbcExtractor (which won't work for C3P0 0.8.5 or later).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/C3P0NativeJdbcExtractor.html
CommonsDbcpNativeJdbcExtractor	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Commons DBCP 2.x and JDBC 4.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/CommonsDbcpNativeJdbcExtractor.html
JBossNativeJdbcExtractor	A										<section class="prog__container">Implementation of the NativeJdbcExtractor interface for JBoss,\n supporting JBoss Application Server 3.2.4+. As of Spring 3.1.1, it also\n supports JBoss 7.\n\n Returns the underlying native Connection, Statement, etc to\n application code instead of JBoss' wrapper implementations.\n The returned JDBC classes can then safely be cast, e.g. to\n oracle.jdbc.OracleConnection.\n\n This NativeJdbcExtractor can be set just to allow working with\n a JBoss connection pool: If a given object is not a JBoss wrapper,\n it will be returned as-is.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/JBossNativeJdbcExtractor.html
Jdbc4NativeJdbcExtractor	A										<section class="prog__container">NativeJdbcExtractor implementation that delegates to JDBC 4.0's\n unwrap method, as defined by Wrapper.\n You will typically need to specify a vendor Connection type\n / Statement type / ResultSet type\n to extract, since JDBC 4.0 only actually unwraps to a given target type.\n\n Note: Only use this when actually running against a JDBC 4.0 driver, with a\n connection pool that supports the JDBC 4.0 API (i.e. at least accepts JDBC 4.0\n API calls and passes them through to the underlying driver)! Other than that,\n there is no need for connection pool specific setup. As of JDBC 4.0,\n NativeJdbcExtractors will typically be implemented for specific drivers\n instead of for specific pools (e.g. OracleJdbc4NativeJdbcExtractor).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/Jdbc4NativeJdbcExtractor.html
NativeJdbcExtractor	A										<section class="prog__container">Interface for extracting native JDBC objects from wrapped objects coming from\n connection pools. This is necessary to allow for casting to native implementations\n like OracleConnection or OracleResultSet in application\n code, for example to create Blobs or to access vendor-specific features.\n\n Note: Setting a custom NativeJdbcExtractor is just necessary\n if you intend to cast to database-specific implementations like\n OracleConnection or OracleResultSet.\n Otherwise, any wrapped JDBC object will be fine, with no need for unwrapping.\n\n Note: To be able to support any pool's strategy of native ResultSet wrapping,\n it is advisable to get both the native Statement and the native ResultSet\n via this extractor. Some pools just allow to unwrap the Statement, some just to\n unwrap the ResultSet - the above strategy will cover both. It is typically\n not necessary to unwrap the Connection to retrieve a native ResultSet.\n\n When working with a simple connection pool that wraps Connections but not\n Statements, a SimpleNativeJdbcExtractor is often sufficient. However,\n some pools (like Apache's Commons DBCP) wrap all JDBC objects that they\n return: Therefore, you need to use a specific NativeJdbcExtractor\n (like CommonsDbcpNativeJdbcExtractor) with them.\n\n JdbcTemplate can properly apply a\n NativeJdbcExtractor if specified, unwrapping all JDBC objects\n that it creates. Note that this is just necessary if you intend to cast to\n native implementations in your data access code.\n\n OracleLobHandler,\n the Oracle-specific implementation of Spring's\n LobHandler interface, requires a\n NativeJdbcExtractor for obtaining the native OracleConnection.\n This is also necessary for other Oracle-specific features that you may want\n to leverage in your applications, such as Oracle InterMedia.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractor.html
NativeJdbcExtractorAdapter	A										<section class="prog__container">Abstract adapter class for the NativeJdbcExtractor interface,\n for simplified implementation of basic extractors.\n Basically returns the passed-in JDBC objects on all methods.\n\n getNativeConnection checks for a ConnectionProxy chain,\n for example from a TransactionAwareDataSourceProxy, before delegating to\n doGetNativeConnection for actual unwrapping. You can override\n either of the two for a specific connection pool, but the latter is\n recommended to participate in ConnectionProxy unwrapping.\n\n getNativeConnection also applies a fallback if the first\n native extraction process failed, that is, returned the same Connection as\n passed in. It assumes that some additional proxying is going in this case:\n Hence, it retrieves the underlying native Connection from the DatabaseMetaData\n via conHandle.getMetaData().getConnection() and retries the native\n extraction process based on that Connection handle. This works, for example,\n for the Connection proxies exposed by Hibernate 3.1's Session.connection().\n\n The getNativeConnectionFromStatement method is implemented\n to simply delegate to getNativeConnection with the Statement's\n Connection. This is what most extractor implementations will stick to,\n unless there's a more efficient version for a specific pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/NativeJdbcExtractorAdapter.html
OracleJdbc4NativeJdbcExtractor	A										<section class="prog__container">A Jdbc4NativeJdbcExtractor which comes pre-configured for Oracle's JDBC driver,\n specifying the following vendor-specific API types for unwrapping:\n \noracle.jdbc.OracleConnection\noracle.jdbc.OracleStatement\noracle.jdbc.OraclePreparedStatement\noracle.jdbc.OracleCallableStatement\noracle.jdbc.OracleResultSet\n\nNote: This will work with any JDBC 4.0 compliant connection pool, without a need for\n connection pool specific setup. In other words, as of JDBC 4.0, NativeJdbcExtractors\n will typically be implemented for specific drivers instead of for specific pools.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/OracleJdbc4NativeJdbcExtractor.html
SimpleNativeJdbcExtractor	A										<section class="prog__container">A simple implementation of the NativeJdbcExtractor interface.\n Assumes a pool that wraps Connection handles but not DatabaseMetaData:\n In this case, the underlying native Connection can be retrieved by simply\n calling conHandle.getMetaData().getConnection().\n All other JDBC objects will be returned as passed in.\n\n This extractor should work with any pool that does not wrap DatabaseMetaData,\n and will also work with any plain JDBC driver. Note that a pool can still wrap\n Statements, PreparedStatements, etc: The only requirement of this extractor is\n that java.sql.DatabaseMetaData does not get wrapped, returning the\n native Connection of the JDBC driver on metaData.getConnection().\n\n Customize this extractor by setting the "nativeConnectionNecessaryForXxx"\n flags accordingly: If Statements, PreparedStatements, and/or CallableStatements\n are wrapped by your pool, set the corresponding "nativeConnectionNecessaryForXxx"\n flags to "true". If none of the statement types is wrapped - or you solely need\n Connection unwrapping in the first place -, the defaults are fine.\n\n SimpleNativeJdbcExtractor is a common choice for use with OracleLobHandler, which\n just needs Connection unwrapping via the NativeJdbcExtractorAdapter.getNativeConnectionFromStatement(java.sql.Statement)\n method. This usage will work with almost any connection pool.\n\n For full usage with JdbcTemplate, i.e. to also provide Statement unwrapping:\n \nUse a default SimpleNativeJdbcExtractor for Resin and SJSAS (no JDBC\n Statement objects are wrapped, therefore no special unwrapping is necessary).\n Use a SimpleNativeJdbcExtractor with all "nativeConnectionNecessaryForXxx"\n flags set to "true" for C3P0 (all JDBC Statement objects are wrapped,\n but none of the wrappers allow for unwrapping).\n Use a CommonsDbcpNativeJdbcExtractor for Apache Commons DBCP or a\n JBossNativeJdbcExtractor for JBoss (all JDBC Statement objects are wrapped,\n but all of them can be extracted by casting to implementation classes).\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.html
WebLogicNativeJdbcExtractor	A										<section class="prog__container">Implementation of the NativeJdbcExtractor interface for WebLogic,\n supporting WebLogic Server 9.0 and higher.\n\n Returns the underlying native Connection to application code instead\n of WebLogic's wrapper implementation; unwraps the Connection for native\n statements. The returned JDBC classes can then safely be cast, e.g. to\n oracle.jdbc.OracleConnection.\n\n This NativeJdbcExtractor can be set just to allow working\n with a WebLogic DataSource: If a given object is not a WebLogic\n Connection wrapper, it will be returned as-is.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/WebLogicNativeJdbcExtractor.html
WebSphereNativeJdbcExtractor	A										<section class="prog__container">Implementation of the NativeJdbcExtractor interface for WebSphere,\n supporting WebSphere Application Server 6.1 and higher.\n\n Returns the underlying native Connection to application code instead\n of WebSphere's wrapper implementation; unwraps the Connection for\n native statements. The returned JDBC classes can then safely be cast,\n e.g. to oracle.jdbc.OracleConnection.\n\n This NativeJdbcExtractor can be set just to allow working\n with a WebSphere DataSource: If a given object is not a WebSphere\n Connection wrapper, it will be returned as-is.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/nativejdbc/WebSphereNativeJdbcExtractor.html
ResultSetWrappingSqlRowSet	A										<section class="prog__container">The default implementation of Spring's SqlRowSet interface, wrapping a\n ResultSet, catching any SQLExceptions and translating\n them to a corresponding Spring InvalidResultSetAccessException.\n\n The passed-in ResultSet should already be disconnected if the SqlRowSet is supposed\n to be usable in a disconnected fashion. This means that you will usually pass in a\n javax.sql.rowset.CachedRowSet, which implements the ResultSet interface.\n\n Note: Since JDBC 4.0, it has been clarified that any methods using a String to identify\n the column should be using the column label. The column label is assigned using the ALIAS\n keyword in the SQL query string. When the query doesn't use an ALIAS, the default label is\n the column name. Most JDBC ResultSet implementations follow this new pattern but there are\n exceptions such as the com.sun.rowset.CachedRowSetImpl class which only uses\n the column name, ignoring any column labels. As of Spring 3.0.5, ResultSetWrappingSqlRowSet\n will translate column labels to the correct column index to provide better support for the\n com.sun.rowset.CachedRowSetImpl which is the default implementation used by\n JdbcTemplate when working with RowSets.\n\n Note: This class implements the java.io.Serializable marker interface\n through the SqlRowSet interface, but is only actually serializable if the disconnected\n ResultSet/RowSet contained in it is serializable. Most CachedRowSet implementations\n are actually serializable, so this should usually work out.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.html
ResultSetWrappingSqlRowSetMetaData	A										<section class="prog__container">The default implementation of Spring's SqlRowSetMetaData interface, wrapping\n a ResultSetMetaData instance, catching any SQLExceptions\n and translating them to a corresponding Spring InvalidResultSetAccessException.\n\n Used by ResultSetWrappingSqlRowSet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.html
SqlRowSet	A										<section class="prog__container">Mirror interface for RowSet, representing\n disconnected ResultSet data.\n\n The main difference to the standard JDBC RowSet is that a\n SQLException is never thrown here. This allows a\n SqlRowSet to be used without having to deal with checked exceptions.\n A SqlRowSet will throw Spring's InvalidResultSetAccessException\n instead (when appropriate).\n\n Note: This interface extends the java.io.Serializable marker\n interface. Implementations, which typically hold disconnected data,\n are encouraged to be actually serializable (as far as possible).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/rowset/SqlRowSet.html
SqlRowSetMetaData	A										<section class="prog__container">Metadata interface for Spring's SqlRowSet, analogous to JDBC's\n ResultSetMetaData.\n\n The main difference to the standard JDBC ResultSetMetaData is that a\n SQLException is never thrown here. This allows\n SqlRowSetMetaData to be used without having to deal with checked exceptions.\n SqlRowSetMetaData will throw Spring's InvalidResultSetAccessException\n instead (when appropriate).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/rowset/SqlRowSetMetaData.html
Jdbc4SqlXmlHandler	A										<section class="prog__container">Default implementation of the SqlXmlHandler interface.\n Provides database-specific implementations for storing and\n retrieving XML documents to and from fields in a database,\n relying on the JDBC 4.0 java.sql.SQLXML facility.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/Jdbc4SqlXmlHandler.html
SqlXmlFeatureNotImplementedException	A										<section class="prog__container">Exception thrown when the underlying implementation does not support the\n requested feature of the API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/SqlXmlFeatureNotImplementedException.html
SqlXmlHandler	A										<section class="prog__container">Abstraction for handling XML fields in specific databases. Its main purpose\n is to isolate database-specific handling of XML stored in the database.\n\n JDBC 4.0 introduces the new data type java.sql.SQLXML\n but most databases and their drivers currently rely on database-specific\n data types and features.\n\n Provides accessor methods for XML fields and acts as factory for\n SqlXmlValue instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/SqlXmlHandler.html
SqlXmlObjectMappingHandler	A										<section class="prog__container">Abstraction for handling XML object mapping to fields in a database.\n\n Provides accessor methods for XML fields unmarshalled to an Object,\n and acts as factory for SqlXmlValue instances for marshalling\n purposes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/SqlXmlObjectMappingHandler.html
SqlXmlValue	A										<section class="prog__container">Subinterface of SqlValue\n that supports passing in XML data to specified column and adds a\n cleanup callback, to be invoked after the value has been set and\n the corresponding statement has been executed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/SqlXmlValue.html
XmlBinaryStreamProvider	A										<section class="prog__container">Interface defining handling involved with providing OutputStream\n data for XML input.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/XmlBinaryStreamProvider.html
XmlCharacterStreamProvider	A										<section class="prog__container">Interface defining handling involved with providing Writer\n data for XML input.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/XmlCharacterStreamProvider.html
XmlResultProvider	A										<section class="prog__container">Interface defining handling involved with providing Result\n data for XML input.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/xml/XmlResultProvider.html
IllegalStateException	A										<section class="prog__container">Runtime exception mirroring the JMS IllegalStateException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/IllegalStateException.html
InvalidClientIDException	A										<section class="prog__container">Runtime exception mirroring the JMS InvalidClientIDException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/InvalidClientIDException.html
InvalidDestinationException	A										<section class="prog__container">Runtime exception mirroring the JMS InvalidDestinationException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/InvalidDestinationException.html
InvalidSelectorException	A										<section class="prog__container">Runtime exception mirroring the JMS InvalidSelectorException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/InvalidSelectorException.html
JmsException	A										<section class="prog__container">Base class for exception thrown by the framework whenever it\n encounters a problem related to JMS.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/JmsException.html
JmsSecurityException	A										<section class="prog__container">Runtime exception mirroring the JMS JMSSecurityException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/JmsSecurityException.html
MessageEOFException	A										<section class="prog__container">Runtime exception mirroring the JMS MessageEOFException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/MessageEOFException.html
MessageFormatException	A										<section class="prog__container">Runtime exception mirroring the JMS MessageFormatException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/MessageFormatException.html
MessageNotReadableException	A										<section class="prog__container">Runtime exception mirroring the JMS MessageNotReadableException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/MessageNotReadableException.html
MessageNotWriteableException	A										<section class="prog__container">Runtime exception mirroring the JMS MessageNotWriteableException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/MessageNotWriteableException.html
ResourceAllocationException	A										<section class="prog__container">Runtime exception mirroring the JMS ResourceAllocationException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/ResourceAllocationException.html
TransactionInProgressException	A										<section class="prog__container">Runtime exception mirroring the JMS TransactionInProgressException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/TransactionInProgressException.html
TransactionRolledBackException	A										<section class="prog__container">Runtime exception mirroring the JMS TransactionRolledBackException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/TransactionRolledBackException.html
UncategorizedJmsException	A										<section class="prog__container">JmsException to be thrown when no other matching subclass found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/UncategorizedJmsException.html
EnableJms	A										<section class="prog__container">Enable JMS listener annotated endpoints that are created under the cover\n by a JmsListenerContainerFactory. To be used on\n Configuration\n classes as follows:\n\n \n @Configuration\n @EnableJms\n public class AppConfig {\n\n     @Bean\n     public DefaultJmsListenerContainerFactory myJmsListenerContainerFactory() {\n       DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n       factory.setConnectionFactory(connectionFactory());\n       factory.setDestinationResolver(destinationResolver());\n       factory.setConcurrency("5");\n       return factory;\n     }\n\n     // other @Bean definitions\n }\n\n The JmsListenerContainerFactory is responsible to create the listener container\n responsible for a particular endpoint. Typical implementations, as the\n DefaultJmsListenerContainerFactory\n used in the sample above, provides the necessary configuration options that are supported by\n the underlying MessageListenerContainer.\n\n @EnableJms enables detection of JmsListener annotations on any\n Spring-managed bean in the container. For example, given a class MyService:\n\n \n package com.acme.foo;\n\n public class MyService {\n\n     @JmsListener(containerFactory = "myJmsListenerContainerFactory", destination="myQueue")\n     public void process(String msg) {\n         // process incoming message\n     }\n }\n\n The container factory to use is identified by the containerFactory\n attribute defining the name of the JmsListenerContainerFactory bean to use.  When none\n is set a JmsListenerContainerFactory bean with name jmsListenerContainerFactory is\n assumed to be present.\n\n the following configuration would ensure that every time a Message\n is received on the Destination named "myQueue", MyService.process()\n is called with the content of the message:\n\n \n @Configuration\n @EnableJms\n public class AppConfig {\n\n     @Bean\n     public MyService myService() {\n         return new MyService();\n     }\n\n     // JMS infrastructure setup\n }\n\n Alternatively, if MyService were annotated with @Component, the\n following configuration would ensure that its @JmsListener annotated\n method is invoked with a matching incoming message:\n\n \n @Configuration\n @EnableJms\n @ComponentScan(basePackages="com.acme.foo")\n public class AppConfig {\n }\n\n Note that the created containers are not registered against the application context\n but can be easily located for management purposes using the\n JmsListenerEndpointRegistry.\n\n Annotated methods can use flexible signature; in particular, it is possible to use\n the Message abstraction and related annotations,\n see JmsListener Javadoc for more details. For instance, the following would\n inject the content of the message and a custom "myCounter" JMS header:\n\n \n @JmsListener(containerFactory = "myJmsListenerContainerFactory", destination="myQueue")\n public void process(String msg, @Header("myCounter") int counter) {\n     // process incoming message\n }\n\n These features are abstracted by the MessageHandlerMethodFactory\n that is responsible to build the necessary invoker to process the annotated method. By default,\n DefaultMessageHandlerMethodFactory is used.\n\n When more control is desired, a @Configuration class may implement\n JmsListenerConfigurer. This allows access to the underlying\n JmsListenerEndpointRegistrar\n instance. The following example demonstrates how to specify an explicit default\n JmsListenerContainerFactory\n\n @Configuration\n @EnableJms\n public class AppConfig implements JmsListenerConfigurer {\n\n     @Override\n     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {\n         registrar.setContainerFactory(myJmsListenerContainerFactory());\n     }\n\n     @Bean\n     public JmsListenerContainerFactory myJmsListenerContainerFactory() {\n         // factory settings\n     }\n\n     @Bean\n     public MyService myService() {\n         return new MyService();\n     }\n }\n\n For reference, the example above can be compared to the following Spring XML\n configuration:\n\n \n <beans>\n\n     <jms:annotation-driven container-factory="myJmsListenerContainerFactory"/>\n\n     <bean id="myJmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">\n           // factory settings\n     </bean>\n\n     <bean id="myService" class="com.acme.foo.MyService"/>\n\n </beans>\n \n\n It is also possible to specify a custom JmsListenerEndpointRegistry in case you need more control on the way the containers\n are created and managed. The example below also demonstrates how to customize the\n JmsHandlerMethodFactory to use with a custom Validator so that payloads annotated with Validated are first validated against a custom Validator.\n\n \n @Configuration\n @EnableJms\n public class AppConfig implements JmsListenerConfigurer {\n\n     @Override\n     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {\n         registrar.setEndpointRegistry(myJmsListenerEndpointRegistry());\n         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);\n     }\n\n     @Bean\n     public JmsListenerEndpointRegistry myJmsListenerEndpointRegistry() {\n         // registry configuration\n     }\n\n     @Bean\n     public JmsHandlerMethodFactory myJmsHandlerMethodFactory() {\n        DefaultJmsHandlerMethodFactory factory = new DefaultJmsHandlerMethodFactory();\n        factory.setValidator(new MyValidator());\n        return factory;\n     }\n\n     @Bean\n     public MyService myService() {\n         return new MyService();\n     }\n }\n\n For reference, the example above can be compared to the following Spring XML\n configuration:\n \n <beans>\n\n     <jms:annotation-driven registry="myJmsListenerEndpointRegistry"\n         handler-method-factory="myJmsHandlerMethodFactory"/&gt;\n\n     <bean id="myJmsListenerEndpointRegistry"\n           class="org.springframework.jms.config.JmsListenerEndpointRegistry">\n           // registry configuration\n     </bean>\n\n     <bean id="myJmsHandlerMethodFactory"\n           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory">\n         <property name="validator" ref="myValidator"/>\n     </bean>\n\n     <bean id="myService" class="com.acme.foo.MyService"/>\n\n </beans>\n \n\n Implementing JmsListenerConfigurer also allows for fine-grained\n control over endpoints registration via the JmsListenerEndpointRegistrar.\n For example, the following configures an extra endpoint:\n\n \n @Configuration\n @EnableJms\n public class AppConfig implements JmsListenerConfigurer {\n\n     @Override\n     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {\n         SimpleJmsListenerEndpoint myEndpoint = new SimpleJmsListenerEndpoint();\n         // ... configure the endpoint\n         registrar.registerEndpoint(endpoint, anotherJmsListenerContainerFactory());\n     }\n\n     @Bean\n     public MyService myService() {\n         return new MyService();\n     }\n\n     @Bean\n     public JmsListenerContainerFactory anotherJmsListenerContainerFactory() {\n         // ...\n     }\n\n     // JMS infrastructure setup\n }\n\n Note that all beans implementing JmsListenerConfigurer will be detected and\n invoked in a similar fashion. The example above can be translated in a regular bean\n definition registered in the context in case you use the XML configuration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/EnableJms.html
JmsBootstrapConfiguration	A										<section class="prog__container">@Configuration class that registers a JmsListenerAnnotationBeanPostProcessor\n bean capable of processing Spring's @JmsListener annotation. Also register\n a default JmsListenerEndpointRegistry.\n\n This configuration class is automatically imported when using the @EnableJms\n annotation. See the EnableJms javadocs for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsBootstrapConfiguration.html
JmsListener	A										<section class="prog__container">Annotation that marks a method to be the target of a JMS message listener on the\n specified destination(). The containerFactory() identifies the\n JmsListenerContainerFactory to use to build\n the JMS listener container. If not set, a default container factory is\n assumed to be available with a bean name of jmsListenerContainerFactory\n unless an explicit default has been provided through configuration.\n\n Processing of @JmsListener annotations is performed by registering a\n JmsListenerAnnotationBeanPostProcessor. This can be done manually or,\n more conveniently, through the <jms:annotation-driven/> element or\n @EnableJms annotation.\n\n Annotated JMS listener methods are allowed to have flexible signatures similar\n to what MessageMapping provides:\n \nSession to get access to the JMS session\nMessage or one of its subclasses to get access to the raw JMS message\nMessage to use Spring's messaging abstraction counterpart\n@Payload-annotated method\n arguments, including support for validation\n@Header-annotated method\n arguments to extract specific header values, including standard JMS headers defined by\n JmsHeaders\n@Headers-annotated\n method argument that must also be assignable to Map for obtaining\n access to all headers\nMessageHeaders arguments for obtaining\n access to all headers\nMessageHeaderAccessor or\n JmsMessageHeaderAccessor for convenient\n access to all method arguments\n\nAnnotated methods may have a non-void return type. When they do,\n the result of the method invocation is sent as a JMS reply to the destination\n defined by the JMSReplyTO header of the incoming message. If this header\n is not set, a default destination can be provided by adding\n @SendTo to the\n method declaration.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsListener.html
JmsListenerAnnotationBeanPostProcessor	A										<section class="prog__container">Bean post-processor that registers methods annotated with JmsListener\n to be invoked by a JMS message listener container created under the cover\n by a JmsListenerContainerFactory\n according to the attributes of the annotation.\n\n Annotated methods can use flexible arguments as defined by JmsListener.\n\n This post-processor is automatically registered by Spring's\n <jms:annotation-driven> XML element, and also by the EnableJms\n annotation.\n\n Autodetects any JmsListenerConfigurer instances in the container,\n allowing for customization of the registry to be used, the default container\n factory or for fine-grained control over endpoints registration. See the\n EnableJms javadocs for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.html
JmsListenerConfigurer	A										<section class="prog__container">Optional interface to be implemented by a Spring managed bean willing\n to customize how JMS listener endpoints are configured. Typically\n used to define the default JmsListenerContainerFactory to use or for registering JMS endpoints\n in a programmatic fashion as opposed to the declarative\n approach of using the @JmsListener annotation.\n\n See @EnableJms for detailed usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsListenerConfigurer.html
JmsListeners	A										<section class="prog__container">Container annotation that aggregates several JmsListener annotations.\n\n Can be used natively, declaring several nested JmsListener annotations.\n Can also be used in conjunction with Java 8's support for repeatable annotations,\n where JmsListener can simply be declared several times on the same method,\n implicitly generating this container annotation.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsListeners.html
AbstractJmsListenerEndpoint	A										<section class="prog__container">Base model for a JMS listener endpoint</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/AbstractJmsListenerEndpoint.html
DefaultJcaListenerContainerFactory	A										<section class="prog__container">A JmsListenerContainerFactory implementation to build a\n JCA-based JmsMessageEndpointManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/DefaultJcaListenerContainerFactory.html
DefaultJmsListenerContainerFactory	A										<section class="prog__container">A JmsListenerContainerFactory implementation to build a regular\n DefaultMessageListenerContainer.\n\n This should be the default for most users and a good transition paths\n for those that are used to build such container definition manually.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/DefaultJmsListenerContainerFactory.html
JmsListenerConfigUtils	A										<section class="prog__container">Configuration constants for internal sharing across subpackages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/JmsListenerConfigUtils.html
JmsListenerEndpoint	A										<section class="prog__container">Model for a JMS listener endpoint. Can be used against a\n JmsListenerConfigurer to register endpoints programmatically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/JmsListenerEndpoint.html
JmsListenerEndpointRegistrar	A										<section class="prog__container">Helper bean for registering JmsListenerEndpoint with\n a JmsListenerEndpointRegistry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/JmsListenerEndpointRegistrar.html
JmsListenerEndpointRegistry	A										<section class="prog__container">Creates the necessary MessageListenerContainer instances for the\n registered endpoints. Also manages the\n lifecycle of the listener containers, in particular within the lifecycle\n of the application context.\n\n Contrary to MessageListenerContainers created manually, listener\n containers managed by registry are not beans in the application context and\n are not candidates for autowiring. Use getListenerContainers() if\n you need to access this registry's listener containers for management purposes.\n If you need to access to a specific message listener container, use\n getListenerContainer(String) with the id of the endpoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/JmsListenerEndpointRegistry.html
JmsNamespaceHandler	A										<section class="prog__container">A NamespaceHandler\n for the JMS namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/JmsNamespaceHandler.html
MethodJmsListenerEndpoint	A										<section class="prog__container">A JmsListenerEndpoint providing the method to invoke to process\n an incoming message for this endpoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/MethodJmsListenerEndpoint.html
SimpleJmsListenerContainerFactory	A										<section class="prog__container">A JmsListenerContainerFactory implementation to build a\n standard SimpleMessageListenerContainer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/SimpleJmsListenerContainerFactory.html
SimpleJmsListenerEndpoint	A										<section class="prog__container">A JmsListenerEndpoint simply providing the MessageListener to\n invoke to process an incoming message for this endpoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/SimpleJmsListenerEndpoint.html
CachingConnectionFactory	A										<section class="prog__container">SingleConnectionFactory subclass that adds Session\n caching as well MessageProducer caching. This ConnectionFactory\n also switches the "reconnectOnException" property\n to "true" by default, allowing for automatic recovery of the underlying Connection.\n\n By default, only one single Session will be cached, with further requested\n Sessions being created and disposed on demand. Consider raising the\n "sessionCacheSize" value in case of a\n high-concurrency environment.\n\n When using the JMS 1.0.2 API, this ConnectionFactory will switch\n into queue/topic mode according to the JMS API methods used at runtime:\n createQueueConnection and createTopicConnection will\n lead to queue/topic mode, respectively; generic createConnection\n calls will lead to a JMS 1.1 connection which is able to serve both modes.\n\n NOTE: This ConnectionFactory requires explicit closing of all Sessions\n obtained from its shared Connection. This is the usual recommendation for\n native JMS access code anyway. However, with this ConnectionFactory, its use\n is mandatory in order to actually allow for Session reuse.\n\n Note also that MessageConsumers obtained from a cached Session won't get\n closed until the Session will eventually be removed from the pool. This may\n lead to semantic side effects in some cases. For a durable subscriber, the\n logical Session.close() call will also close the subscription.\n Re-registering a durable consumer for the same subscription on the same\n Session handle is not supported; close and reobtain a cached Session first.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/CachingConnectionFactory.html
ChainedExceptionListener	A										<section class="prog__container">Implementation of the JMS ExceptionListener interface that supports chaining,\n allowing the addition of multiple ExceptionListener instances in order.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/ChainedExceptionListener.html
ConnectionFactoryUtils	A										<section class="prog__container">Helper class for managing a JMS ConnectionFactory, in particular\n for obtaining transactional JMS resources for a given ConnectionFactory.\n\n Mainly for internal use within the framework. Used by\n JmsTemplate as well as\n DefaultMessageListenerContainer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/ConnectionFactoryUtils.html
ConnectionFactoryUtils.ResourceFactory	A										<section class="prog__container">Callback interface for resource creation.\n Serving as argument for the doGetTransactionalSession method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/ConnectionFactoryUtils.ResourceFactory.html
DelegatingConnectionFactory	A										<section class="prog__container">ConnectionFactory implementation that delegates all calls\n to a given target ConnectionFactory, adapting specific\n create(Queue/Topic)Connection calls to the target ConnectionFactory\n if necessary (e.g. when running JMS 1.0.2 API based code against a generic\n JMS 1.1 ConnectionFactory, such as ActiveMQ's PooledConnectionFactory).\n\n This class allows for being subclassed, with subclasses overriding only\n those methods (such as createConnection()) that should not simply\n delegate to the target ConnectionFactory.\n\n Can also be defined as-is, wrapping a specific target ConnectionFactory,\n using the "shouldStopConnections" flag to indicate whether Connections\n obtained from the target factory are supposed to be stopped before closed.\n The latter may be necessary for some connection pools that simply return\n released connections to the pool, not stopping them while they sit in the pool.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/DelegatingConnectionFactory.html
JmsResourceHolder	A										<section class="prog__container">JMS resource holder, wrapping a JMS Connection and a JMS Session.\n JmsTransactionManager binds instances of this class to the thread,\n for a given JMS ConnectionFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/JmsResourceHolder.html
JmsTransactionManager	A										<section class="prog__container">PlatformTransactionManager implementation\n for a single JMS ConnectionFactory. Binds a JMS\n Connection/Session pair from the specified ConnectionFactory to the thread,\n potentially allowing for one thread-bound Session per ConnectionFactory.\n\n This local strategy is an alternative to executing JMS operations within\n JTA transactions. Its advantage is that it is able to work in any environment,\n for example a standalone application or a test suite, with any message broker\n as target. However, this strategy is not able to provide XA transactions,\n for example in order to share transactions between messaging and database access.\n A full JTA/XA setup is required for XA transactions, typically using Spring's\n JtaTransactionManager as strategy.\n\n Application code is required to retrieve the transactional JMS Session via\n ConnectionFactoryUtils.getTransactionalSession(javax.jms.ConnectionFactory, javax.jms.Connection, boolean) instead of a standard\n J2EE-style ConnectionFactory.createConnection() call with subsequent\n Session creation. Spring's JmsTemplate\n will autodetect a thread-bound Session and automatically participate in it.\n\n Alternatively, you can allow application code to work with the standard\n J2EE-style lookup pattern on a ConnectionFactory, for example for legacy code\n that is not aware of Spring at all. In that case, define a\n TransactionAwareConnectionFactoryProxy for your target ConnectionFactory,\n which will automatically participate in Spring-managed transactions.\n\n The use of CachingConnectionFactory as a target for this\n transaction manager is strongly recommended. CachingConnectionFactory\n uses a single JMS Connection for all JMS access in order to avoid the overhead\n of repeated Connection creation, as well as maintaining a cache of Sessions.\n Each transaction will then share the same JMS Connection, while still using\n its own individual JMS Session.\n\n The use of a raw target ConnectionFactory would not only be inefficient\n because of the lack of resource reuse. It might also lead to strange effects\n when your JMS driver doesn't accept MessageProducer.close() calls\n and/or MessageConsumer.close() calls before Session.commit(),\n with the latter supposed to commit all the messages that have been sent through the\n producer handle and received through the consumer handle. As a safe general solution,\n always pass in a CachingConnectionFactory into this transaction manager's\n "connectionFactory" property.\n\n Transaction synchronization is turned off by default, as this manager might\n be used alongside a datastore-based Spring transaction manager such as the\n JDBC DataSourceTransactionManager,\n which has stronger needs for synchronization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/JmsTransactionManager.html
SessionProxy	A										<section class="prog__container">Subinterface of Session to be implemented by\n Session proxies. Allows access to the underlying target Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/SessionProxy.html
SingleConnectionFactory	A										<section class="prog__container">A JMS ConnectionFactory adapter that returns the same Connection\n from all createConnection() calls, and ignores calls to\n Connection.close(). According to the JMS Connection\n model, this is perfectly thread-safe (in contrast to e.g. JDBC). The\n shared Connection can be automatically recovered in case of an Exception.\n\n You can either pass in a specific JMS Connection directly or let this\n factory lazily create a Connection via a given target ConnectionFactory.\n This factory generally works with JMS 1.1 as well as the JMS 1.0.2 API.\n\n Note that when using the JMS 1.0.2 API, this ConnectionFactory will switch\n into queue/topic mode according to the JMS API methods used at runtime:\n createQueueConnection and createTopicConnection will\n lead to queue/topic mode, respectively; generic createConnection\n calls will lead to a JMS 1.1 connection which is able to serve both modes.\n\n Useful for testing and standalone environments in order to keep using the\n same Connection for multiple JmsTemplate\n calls, without having a pooling ConnectionFactory underneath. This may span\n any number of transactions, even concurrently executing transactions.\n\n Note that Spring's message listener containers support the use of\n a shared Connection within each listener container instance. Using\n SingleConnectionFactory in combination only really makes sense for\n sharing a single JMS Connection across multiple listener containers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/SingleConnectionFactory.html
SmartConnectionFactory	A										<section class="prog__container">Extension of the javax.jms.ConnectionFactory interface,\n indicating how to release Connections obtained from it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/SmartConnectionFactory.html
SynchedLocalTransactionFailedException	A										<section class="prog__container">Exception thrown when a synchronized local transaction failed to complete\n (after the main transaction has already completed).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/SynchedLocalTransactionFailedException.html
TransactionAwareConnectionFactoryProxy	A										<section class="prog__container">Proxy for a target JMS ConnectionFactory, adding awareness of\n Spring-managed transactions. Similar to a transactional JNDI ConnectionFactory\n as provided by a Java EE application server.\n\n Messaging code which should remain unaware of Spring's JMS support can work with\n this proxy to seamlessly participate in Spring-managed transactions. Note that the\n transaction manager, for example JmsTransactionManager, still needs to work\n with the underlying ConnectionFactory, not with this proxy.\n\n Make sure that TransactionAwareConnectionFactoryProxy is the outermost\n ConnectionFactory of a chain of ConnectionFactory proxies/adapters.\n TransactionAwareConnectionFactoryProxy can delegate either directly to the\n target factory or to some intermediary adapter like\n UserCredentialsConnectionFactoryAdapter.\n\n Delegates to ConnectionFactoryUtils for automatically participating\n in thread-bound transactions, for example managed by JmsTransactionManager.\n createSession calls and close calls on returned Sessions\n will behave properly within a transaction, that is, always work on the transactional\n Session. If not within a transaction, normal ConnectionFactory behavior applies.\n\n Note that transactional JMS Sessions will be registered on a per-Connection\n basis. To share the same JMS Session across a transaction, make sure that you\n operate on the same JMS Connection handle - either through reusing the handle\n or through configuring a SingleConnectionFactory underneath.\n\n Returned transactional Session proxies will implement the SessionProxy\n interface to allow for access to the underlying target Session. This is only\n intended for accessing vendor-specific Session API or for testing purposes\n (e.g. to perform manual transaction control). For typical application purposes,\n simply use the standard JMS Session interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.html
UserCredentialsConnectionFactoryAdapter	A										<section class="prog__container">An adapter for a target JMS ConnectionFactory, applying the\n given user credentials to every standard createConnection() call,\n that is, implicitly invoking createConnection(username, password)\n on the target. All other methods simply delegate to the corresponding methods\n of the target ConnectionFactory.\n\n Can be used to proxy a target JNDI ConnectionFactory that does not have user\n credentials configured. Client code can work with the ConnectionFactory without\n passing in username and password on every createConnection() call.\n\n In the following example, client code can simply transparently work\n with the preconfigured "myConnectionFactory", implicitly accessing\n "myTargetConnectionFactory" with the specified user credentials.\n\n \n <bean id="myTargetConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">\n   <property name="jndiName" value="java:comp/env/jms/mycf"/>\n </bean>\n\n <bean id="myConnectionFactory" class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter">\n   <property name="targetConnectionFactory" ref="myTargetConnectionFactory"/>\n   <property name="username" value="myusername"/>\n   <property name="password" value="mypassword"/>\n </bean>\nIf the "username" is empty, this proxy will simply delegate to the standard\n createConnection() method of the target ConnectionFactory.\n This can be used to keep a UserCredentialsConnectionFactoryAdapter bean\n definition just for the option of implicitly passing in user credentials\n if the particular target ConnectionFactory requires it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/connection/UserCredentialsConnectionFactoryAdapter.html
BrowserCallback	A										<section class="prog__container">Callback for browsing the messages in a JMS queue.\n\n To be used with JmsTemplate's callback methods that take a BrowserCallback\n argument, often implemented as an anonymous inner class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/BrowserCallback.html
JmsMessageOperations	A										<section class="prog__container">A specialization of MessageSendingOperations, MessageReceivingOperations\n and MessageRequestReplyOperations for JMS related operations that allow to specify\n a destination name rather than the actual Destination</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/JmsMessageOperations.html
JmsMessagingTemplate	A										<section class="prog__container">An implementation of JmsMessageOperations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/JmsMessagingTemplate.html
JmsOperations	A										<section class="prog__container">Specifies a basic set of JMS operations.\n\n Implemented by JmsTemplate. Not often used but a useful option\n to enhance testability, as it can easily be mocked or stubbed.\n\n Provides JmsTemplate's send(..) and\n receive(..) methods that mirror various JMS API methods.\n See the JMS specification and javadocs for details on those methods.\n\n Provides also basic request reply operation using a temporary\n queue to collect the reply.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/JmsOperations.html
JmsTemplate	A										<section class="prog__container">Helper class that simplifies synchronous JMS access code.\n\n If you want to use dynamic destination creation, you must specify\n the type of JMS destination to create, using the "pubSubDomain" property.\n For other operations, this is not necessary. Point-to-Point (Queues) is the default\n domain.\n\n Default settings for JMS Sessions are "not transacted" and "auto-acknowledge".\n As defined by the Java EE specification, the transaction and acknowledgement\n parameters are ignored when a JMS Session is created inside an active\n transaction, no matter if a JTA transaction or a Spring-managed transaction.\n To configure them for native JMS usage, specify appropriate values for\n the "sessionTransacted" and "sessionAcknowledgeMode" bean properties.\n\n This template uses a\n DynamicDestinationResolver\n and a SimpleMessageConverter\n as default strategies for resolving a destination name or converting a message,\n respectively. These defaults can be overridden through the "destinationResolver"\n and "messageConverter" bean properties.\n\n NOTE: The ConnectionFactory used with this template should\n return pooled Connections (or a single shared Connection) as well as pooled\n Sessions and MessageProducers. Otherwise, performance of ad-hoc JMS operations\n is going to suffer. The simplest option is to use the Spring-provided\n SingleConnectionFactory as a\n decorator for your target ConnectionFactory, reusing a single\n JMS Connection in a thread-safe fashion; this is often good enough for the\n purpose of sending messages via this template. In a Java EE environment,\n make sure that the ConnectionFactory is obtained from the\n application's environment naming context via JNDI; application servers\n typically expose pooled, transaction-aware factories there.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/JmsTemplate.html
MessageCreator	A										<section class="prog__container">Creates a JMS message given a Session.\n\n The Session typically is provided by an instance\n of the JmsTemplate class.\n\n Implementations do not need to concern themselves with\n checked JMSExceptions (from the 'javax.jms'\n package) that may be thrown from operations they attempt. The\n JmsTemplate will catch and handle these\n JMSExceptions appropriately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/MessageCreator.html
MessagePostProcessor	A										<section class="prog__container">To be used with JmsTemplate's send method that convert an object to a message.\n It allows for further modification of the message after it has been processed\n by the converter. This is useful for setting of JMS Header and Properties.\n\n This often as an anonymous class within a method implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/MessagePostProcessor.html
ProducerCallback	A										<section class="prog__container">Callback for sending a message to a JMS destination.\n\n To be used with JmsTemplate's callback methods that take a ProducerCallback\n argument, often implemented as an anonymous inner class.\n\n The typical implementation will perform multiple operations on the\n supplied JMS Session and MessageProducer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/ProducerCallback.html
SessionCallback	A										<section class="prog__container">Callback for executing any number of operations on a provided\n Session.\n\n To be used with the JmsTemplate.execute(SessionCallback)\n method, often implemented as an anonymous inner class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/SessionCallback.html
JmsGatewaySupport	A										<section class="prog__container">Convenient super class for application classes that need JMS access.\n\n Requires a ConnectionFactory or a JmsTemplate instance to be set.\n It will create its own JmsTemplate if a ConnectionFactory is passed in.\n A custom JmsTemplate instance can be created for a given ConnectionFactory\n through overriding the createJmsTemplate(javax.jms.ConnectionFactory) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/support/JmsGatewaySupport.html
AbstractJmsListeningContainer	A										<section class="prog__container">Common base class for all containers which need to implement listening\n based on a JMS Connection (either shared or freshly obtained for each attempt).\n Inherits basic Connection and Session configuration handling from the\n JmsAccessor base class.\n\n This class provides basic lifecycle management, in particular management\n of a shared JMS Connection. Subclasses are supposed to plug into this\n lifecycle, implementing the sharedConnectionEnabled() as well\n as the doInitialize() and doShutdown() template methods.\n\n This base class does not assume any specific listener programming model\n or listener invoker mechanism. It just provides the general runtime\n lifecycle management needed for any kind of JMS-based listening mechanism\n that operates on a JMS Connection/Session.\n\n For a concrete listener programming model, check out the\n AbstractMessageListenerContainer subclass. For a concrete listener\n invoker mechanism, check out the DefaultMessageListenerContainer class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/AbstractJmsListeningContainer.html
AbstractJmsListeningContainer.SharedConnectionNotInitializedException	A										<section class="prog__container">Exception that indicates that the initial setup of this container's\n shared JMS Connection failed. This is indicating to invokers that they need\n to establish the shared Connection themselves on first access.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/AbstractJmsListeningContainer.SharedConnectionNotInitializedException.html
AbstractMessageListenerContainer	A										<section class="prog__container">Abstract base class for Spring message listener container implementations.\n Can either host a standard JMS MessageListener or Spring's\n SessionAwareMessageListener for actual message processing.\n\n Usually holds a single JMS Connection that all listeners are supposed\n to be registered on, which is the standard JMS way of managing listener sessions.\n Can alternatively also be used with a fresh Connection per listener, for Java EE\n style XA-aware JMS messaging. The actual registration process is up to concrete\n subclasses.\n\n NOTE: The default behavior of this message listener container is to\n never propagate an exception thrown by a message listener up to the JMS\n provider. Instead, it will log any such exception at the error level.\n This means that from the perspective of the attendant JMS provider no such\n listener will ever fail. However, if error handling is necessary, then\n any implementation of the ErrorHandler strategy may be provided to\n the setErrorHandler(ErrorHandler) method. Note that JMSExceptions\n will be passed to the ErrorHandler in addition to (but after) being\n passed to an ExceptionListener, if one has been provided.\n\n The listener container offers the following message acknowledgment options:\n \n"sessionAcknowledgeMode" set to "AUTO_ACKNOWLEDGE" (default):\n This mode is container-dependent: For DefaultMessageListenerContainer,\n it means automatic message acknowledgment before listener execution, with\n no redelivery in case of an exception and no redelivery in case of other listener\n execution interruptions either. For SimpleMessageListenerContainer,\n it means automatic message acknowledgment after listener execution, with\n no redelivery in case of a user exception thrown but potential redelivery in case\n of the JVM dying during listener execution. In order to consistently arrange for\n redelivery with any container variant, consider "CLIENT_ACKNOWLEDGE" mode or -\n preferably - setting "sessionTransacted" to "true" instead.\n "sessionAcknowledgeMode" set to "DUPS_OK_ACKNOWLEDGE":\n Lazy message acknowledgment during (DefaultMessageListenerContainer)\n or shortly after (SimpleMessageListenerContainer) listener execution;\n no redelivery in case of a user exception thrown but potential redelivery in case\n of the JVM dying during listener execution. In order to consistently arrange for\n redelivery with any container variant, consider "CLIENT_ACKNOWLEDGE" mode or -\n preferably - setting "sessionTransacted" to "true" instead.\n "sessionAcknowledgeMode" set to "CLIENT_ACKNOWLEDGE":\n Automatic message acknowledgment after successful listener execution;\n best-effort redelivery in case of a user exception thrown as well as in case\n of other listener execution interruptions (such as the JVM dying).\n "sessionTransacted" set to "true":\n Transactional acknowledgment after successful listener execution;\n guaranteed redelivery in case of a user exception thrown as well as\n in case of other listener execution interruptions (such as the JVM dying).\n \nThere are two solutions to the duplicate message processing problem:\n \nEither add duplicate message detection to your listener, in the\n form of a business entity existence check or a protocol table check. This\n usually just needs to be done in case of the JMSRedelivered flag being\n set on the incoming message (otherwise just process straightforwardly).\n Note that with "sessionTransacted" set to "true", duplicate messages will\n only appear in case of the JVM dying at the most unfortunate point possible\n (i.e. after your business logic executed but before the JMS part got committed),\n so duplicate message detection is just there to cover a corner case.\n Or wrap your entire processing with an XA transaction, covering the\n reception of the JMS message as well as the execution of the business logic in\n your message listener (including database operations etc). This is only\n supported by DefaultMessageListenerContainer, through specifying\n an external "transactionManager" (typically a\n JtaTransactionManager, with\n a corresponding XA-aware JMS ConnectionFactory passed in\n as "connectionFactory").\n \n Note that XA transaction coordination adds significant runtime overhead,\n so it might be feasible to avoid it unless absolutely necessary.\n\n Recommendations:\n\nThe general recommendation is to set "sessionTransacted" to "true",\n typically in combination with local database transactions triggered by the\n listener implementation, through Spring's standard transaction facilities.\n This will work nicely in Tomcat or in a standalone environment, often\n combined with custom duplicate message detection (if it is unacceptable\n to ever process the same message twice).\n Alternatively, specify a\n JtaTransactionManager as\n "transactionManager" for a fully XA-aware JMS provider - typically when\n running on a Java EE server, but also for other environments with a JTA\n transaction manager present. This will give full "exactly-once" guarantees\n without custom duplicate message checks, at the price of additional\n runtime processing overhead.\n \nNote that the "sessionTransacted" flag is strongly recommended over\n JmsTransactionManager, provided\n that transactions do not need to be managed externally. As a consequence,\n set the transaction manager only if you are using JTA or if you need to\n synchronize with custom external transaction arrangements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/AbstractMessageListenerContainer.html
AbstractPollingMessageListenerContainer	A										<section class="prog__container">Base class for listener container implementations which are based on polling.\n Provides support for listener handling based on MessageConsumer,\n optionally participating in externally managed transactions.\n\n This listener container variant is built for repeated polling attempts,\n each invoking the receiveAndExecute(java.lang.Object, javax.jms.Session, javax.jms.MessageConsumer) method. The MessageConsumer used\n may be reobtained fo reach attempt or cached in between attempts; this is up\n to the concrete implementation. The receive timeout for each attempt can be\n configured through the "receiveTimeout" property.\n\n The underlying mechanism is based on standard JMS MessageConsumer handling,\n which is perfectly compatible with both native JMS and JMS in a Java EE environment.\n Neither the JMS MessageConsumer.setMessageListener facility  nor the JMS\n ServerSessionPool facility is required. A further advantage of this approach is\n full control over the listening process, allowing for custom scaling and throttling\n and of concurrent message processing (which is up to concrete subclasses).\n\n Message reception and listener execution can automatically be wrapped\n in transactions through passing a Spring\n PlatformTransactionManager into the\n "transactionManager" property. This will usually\n be a JtaTransactionManager in a\n Java EE enviroment, in combination with a JTA-aware JMS ConnectionFactory\n obtained from JNDI (check your application server's documentation).\n\n This base class does not assume any specific mechanism for asynchronous\n execution of polling invokers. Check out DefaultMessageListenerContainer\n for a concrete implementation which is based on Spring's\n TaskExecutor abstraction,\n including dynamic scaling of concurrent consumers and automatic self recovery.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.html
DefaultMessageListenerContainer	A										<section class="prog__container">Message listener container variant that uses plain JMS client APIs, specifically\n a loop of MessageConsumer.receive() calls that also allow for\n transactional reception of messages (registering them with XA transactions).\n Designed to work in a native JMS environment as well as in a Java EE environment,\n with only minimal differences in configuration.\n\n This is a simple but nevertheless powerful form of message listener container.\n On startup, it obtains a fixed number of JMS Sessions to invoke the listener,\n and optionally allows for dynamic adaptation at runtime (up to a maximum number).\n Like SimpleMessageListenerContainer, its main advantage is its low level\n of runtime complexity, in particular the minimal requirements on the JMS provider:\n not even the JMS ServerSessionPool facility is required. Beyond that, it is\n fully self-recovering in case the broker is temporarily unavailable, and allows\n for stops/restarts as well as runtime changes to its configuration.\n\n Actual MessageListener execution happens in asynchronous work units which are\n created through Spring's TaskExecutor\n abstraction. By default, the specified number of invoker tasks will be created\n on startup, according to the "concurrentConsumers"\n setting. Specify an alternative TaskExecutor to integrate with an existing\n thread pool facility (such as a Java EE server's), for example using a\n CommonJ WorkManager.\n With a native JMS setup, each of those listener threads is going to use a\n cached JMS Session and MessageConsumer (only refreshed in case\n of failure), using the JMS provider's resources as efficiently as possible.\n\n Message reception and listener execution can automatically be wrapped\n in transactions by passing a Spring\n PlatformTransactionManager into the\n "transactionManager" property. This will usually\n be a JtaTransactionManager in a\n Java EE environment, in combination with a JTA-aware JMS ConnectionFactory\n obtained from JNDI (check your Java EE server's documentation). Note that this\n listener container will automatically reobtain all JMS handles for each transaction\n in case an external transaction manager is specified, for compatibility with\n all Java EE servers (in particular JBoss). This non-caching behavior can be\n overridden through the "cacheLevel" /\n "cacheLevelName" property, enforcing caching of\n the Connection (or also Session and MessageConsumer)\n even if an external transaction manager is involved.\n\n Dynamic scaling of the number of concurrent invokers can be activated\n by specifying a "maxConcurrentConsumers"\n value that is higher than the "concurrentConsumers"\n value. Since the latter's default is 1, you can also simply specify a\n "maxConcurrentConsumers" of e.g. 5, which will lead to dynamic scaling up to\n 5 concurrent consumers in case of increasing message load, as well as dynamic\n shrinking back to the standard number of consumers once the load decreases.\n Consider adapting the "idleTaskExecutionLimit"\n setting to control the lifespan of each new task, to avoid frequent scaling up\n and down, in particular if the ConnectionFactory does not pool JMS\n Sessions and/or the TaskExecutor does not pool threads (check\n your configuration!). Note that dynamic scaling only really makes sense for a\n queue in the first place; for a topic, you will typically stick with the default\n number of 1 consumer, otherwise you'd receive the same message multiple times on\n the same node.\n\n Note: Don't use Spring's CachingConnectionFactory\n in combination with dynamic scaling. Ideally, don't use it with a message\n listener container at all, since it is generally preferable to let the\n listener container itself handle appropriate caching within its lifecycle.\n Also, stopping and restarting a listener container will only work with an\n independent, locally cached Connection - not with an externally cached one.\n\n It is strongly recommended to either set "sessionTransacted" to "true" or specify an external "transactionManager". See the AbstractMessageListenerContainer\n javadoc for details on acknowledge modes and native transaction options, as\n well as the AbstractPollingMessageListenerContainer javadoc for details\n on configuring an external transaction manager. Note that for the default\n "AUTO_ACKNOWLEDGE" mode, this container applies automatic message acknowledgment\n before listener execution, with no redelivery in case of an exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/DefaultMessageListenerContainer.html
MessageListenerContainer	A										<section class="prog__container">Internal abstraction used by the framework representing a message\n listener container. Not meant to be implemented externally with\n support for both JMS and JCA style containers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/MessageListenerContainer.html
SimpleMessageListenerContainer	A										<section class="prog__container">Message listener container that uses the plain JMS client API's\n MessageConsumer.setMessageListener() method to\n create concurrent MessageConsumers for the specified listeners.\n\n This is the simplest form of a message listener container.\n It creates a fixed number of JMS Sessions to invoke the listener,\n not allowing for dynamic adaptation to runtime demands. Its main\n advantage is its low level of complexity and the minimum requirements\n on the JMS provider: Not even the ServerSessionPool facility is required.\n\n See the AbstractMessageListenerContainer javadoc for details\n on acknowledge modes and transaction options. Note that this container\n exposes standard JMS behavior for the default "AUTO_ACKNOWLEDGE" mode:\n that is, automatic message acknowledgment after listener execution,\n with no redelivery in case of a user exception thrown but potential\n redelivery in case of the JVM dying during listener execution.\n\n For a different style of MessageListener handling, through looped\n MessageConsumer.receive() calls that also allow for\n transactional reception of messages (registering them with XA transactions),\n see DefaultMessageListenerContainer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/SimpleMessageListenerContainer.html
SubscriptionNameProvider	A										<section class="prog__container">Interface to be implemented by message listener objects that suggest a specific\n name for a durable subscription that they might be registered with. Otherwise\n the listener class name will be used as a default subscription name.\n\n Applies to MessageListener objects as well as to\n SessionAwareMessageListener objects and plain listener methods\n (as supported by MessageListenerAdapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/SubscriptionNameProvider.html
AbstractAdaptableMessageListener	A										<section class="prog__container">An abstract JMS MessageListener adapter providing the necessary\n infrastructure to extract the payload of a JMS Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.html
JmsResponse	A										<section class="prog__container">Return type of any JMS listener method used to indicate the actual response\n destination alongside the response itself. Typically used when said destination\n needs to be computed at runtime.\n\n The example below sends a response with the content of the result\n argument to the queueOut Queue:\n\n \n package com.acme.foo;\n\n public class MyService {\n     @JmsListener\n     public JmsResponse process(String msg) {\n         // process incoming message\n         return JmsResponse.forQueue(result, "queueOut");\n     }\n }\n\n If the destination does not need to be computed at runtime,\n @SendTo\n is the recommended declarative approach.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/JmsResponse.html
ListenerExecutionFailedException	A										<section class="prog__container">Exception to be thrown when the execution of a listener method failed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/ListenerExecutionFailedException.html
MessageListenerAdapter	A										<section class="prog__container">Message listener adapter that delegates the handling of messages to target\n listener methods via reflection, with flexible message type conversion.\n Allows listener methods to operate on message content types, completely\n independent from the JMS API.\n\n By default, the content of incoming JMS messages gets extracted before\n being passed into the target listener method, to let the target method\n operate on message content types such as String or byte array instead of\n the raw Message. Message type conversion is delegated to a Spring\n JMS MessageConverter. By default, a SimpleMessageConverter\n will be used. (If you do not want such automatic message conversion taking\n place, then be sure to set the MessageConverter\n to null.)\n\n If a target listener method returns a non-null object (typically of a\n message content type such as String or byte array), it will get\n wrapped in a JMS Message and sent to the response destination\n (either the JMS "reply-to" destination or a\n specified default\n destination).\n\n Note: The sending of response messages is only available when\n using the SessionAwareMessageListener entry point (typically through a\n Spring message listener container). Usage as standard JMS MessageListener\n does not support the generation of response messages.\n\n Find below some examples of method signatures compliant with this\n adapter class. This first example handles all Message types\n and gets passed the contents of each Message type as an\n argument. No Message will be sent back as all of these\n methods return void.\n\n public interface MessageContentsDelegate {\n    void handleMessage(String text);\n    void handleMessage(Map map);\n    void handleMessage(byte[] bytes);\n    void handleMessage(Serializable obj);\n }\n\n This next example handles all Message types and gets\n passed the actual (raw) Message as an argument. Again, no\n Message will be sent back as all of these methods return\n void.\n\n public interface RawMessageDelegate {\n    void handleMessage(TextMessage message);\n    void handleMessage(MapMessage message);\n    void handleMessage(BytesMessage message);\n    void handleMessage(ObjectMessage message);\n }\n\n This next example illustrates a Message delegate\n that just consumes the String contents of\n TextMessages. Notice also how the\n name of the Message handling method is different from the\n original (this will have to\n be configured in the attandant bean definition). Again, no Message\n will be sent back as the method returns void.\n\n public interface TextMessageContentDelegate {\n    void onMessage(String text);\n }\n\n This final example illustrates a Message delegate\n that just consumes the String contents of\n TextMessages. Notice how the return type\n of this method is String: This will result in the configured\n MessageListenerAdapter sending a TextMessage in response.\n\n public interface ResponsiveTextMessageContentDelegate {\n    String handleMessage(String text);\n }\n\n For further examples and discussion please do refer to the Spring\n reference documentation which describes this class (and it's attendant\n XML configuration) in detail.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html
MessagingMessageListenerAdapter	A										<section class="prog__container">A MessageListener adapter that invokes a configurable\n InvocableHandlerMethod.\n\n Wraps the incoming Message to Spring's Message\n abstraction, copying the JMS standard headers using a configurable\n JmsHeaderMapper.\n\n The original Message and the Session\n are provided as additional arguments so that these can be injected as\n method arguments if necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.html
ReplyFailureException	A										<section class="prog__container">Exception to be thrown when the reply of a message failed to be sent.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/adapter/ReplyFailureException.html
DefaultJmsActivationSpecFactory	A										<section class="prog__container">Default implementation of the JmsActivationSpecFactory interface.\n Supports the standard JMS properties as defined by the JCA 1.5 specification,\n as well as Spring's extended "maxConcurrency" and "prefetchSize" settings\n through autodetection of well-known vendor-specific provider properties.\n\n An ActivationSpec factory is effectively dependent on the concrete\n JMS provider, e.g. on ActiveMQ. This default implementation simply\n guesses the ActivationSpec class name from the provider's class name\n ("ActiveMQResourceAdapter" -> "ActiveMQActivationSpec" in the same package,\n or "ActivationSpecImpl" in the same package as the ResourceAdapter class),\n and populates the ActivationSpec properties as suggested by the\n JCA 1.5 specification (Appendix B). Specify the 'activationSpecClass'\n property explicitly if these default naming rules do not apply.\n\n Note: ActiveMQ, JORAM and WebSphere are supported in terms of extended\n settings (through the detection of their bean property naming conventions).\n The default ActivationSpec class detection rules may apply to other\n JMS providers as well.\n\n Thanks to Agim Emruli and Laurie Chan for pointing out WebSphere MQ\n settings and contributing corresponding tests!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/DefaultJmsActivationSpecFactory.html
JmsActivationSpecConfig	A										<section class="prog__container">Common configuration object for activating a JMS message endpoint.\n Gets converted into a provider-specific JCA 1.5 ActivationSpec\n object for activating the endpoint.\n\n Typically used in combination with JmsMessageEndpointManager,\n but not tied to it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/JmsActivationSpecConfig.html
JmsActivationSpecFactory	A										<section class="prog__container">Strategy interface for creating JCA 1.5 ActivationSpec objects\n based on a configured JmsActivationSpecConfig object.\n\n JCA 1.5 ActivationSpec objects are typically JavaBeans, but\n unfortunately provider-specific. This strategy interface allows\n for plugging in any JCA-based JMS provider, creating corresponding\n ActivationSpec objects based on common JMS configuration settings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/JmsActivationSpecFactory.html
JmsMessageEndpointFactory	A										<section class="prog__container">JMS-specific implementation of the JCA 1.5\n MessageEndpointFactory interface,\n providing transaction management capabilities for a JMS listener object\n (e.g. a MessageListener object).\n\n Uses a static endpoint implementation, simply wrapping the\n specified message listener object and exposing all of its implemented\n interfaces on the endpoint instance.\n\n Typically used with Spring's JmsMessageEndpointManager,\n but not tied to it. As a consequence, this endpoint factory could\n also be used with programmatic endpoint management on a native\n ResourceAdapter instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.html
JmsMessageEndpointFactory.JmsResourceException	A										<section class="prog__container">Internal exception thrown when a ResourceException has been encountered\n during the endpoint invocation.\n Will only be used if the ResourceAdapter does not invoke the\n endpoint's beforeDelivery and afterDelivery\n directly, leaving it up to the concrete endpoint to apply those -\n and to handle any ResourceExceptions thrown from them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.JmsResourceException.html
JmsMessageEndpointManager	A										<section class="prog__container">Extension of the generic JCA 1.5\n GenericMessageEndpointManager,\n adding JMS-specific support for ActivationSpec configuration.\n\n Allows for defining a common JmsActivationSpecConfig object\n that gets converted into a provider-specific JCA 1.5 ActivationSpec\n object for activating the endpoint.\n\n NOTE: This JCA-based endpoint manager supports standard JMS\n MessageListener endpoints only. It does not support\n Spring's SessionAwareMessageListener\n variant, simply because the JCA endpoint management contract does not allow\n for obtaining the current JMS Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/JmsMessageEndpointManager.html
StandardJmsActivationSpecFactory	A										<section class="prog__container">Standard implementation of the JmsActivationSpecFactory interface.\n Supports the standard JMS properties as defined by the JMS 1.5 specification\n (Appendix B); ignores Spring's "maxConcurrency" and "prefetchSize" settings.\n\n The 'activationSpecClass' property is required, explicitly defining\n the fully-qualified class name of the provider's ActivationSpec class\n (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").\n\n Check out DefaultJmsActivationSpecFactory for an extended variant\n of this class, supporting some further default conventions beyond the plain\n JMS 1.5 specification.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/listener/endpoint/StandardJmsActivationSpecFactory.html
JmsInvokerClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing a\n JMS-based remote service.\n\n Serializes remote invocation objects and deserializes remote invocation\n result objects. Uses Java serialization just like RMI, but with the JMS\n provider as communication infrastructure.\n\n To be configured with a QueueConnectionFactory and a\n target queue (either as Queue reference or as queue name).\n\n Thanks to James Strachan for the original prototype that this\n JMS invoker mechanism was inspired by!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/remoting/JmsInvokerClientInterceptor.html
JmsInvokerProxyFactoryBean	A										<section class="prog__container">FactoryBean for JMS invoker proxies. Exposes the proxied service for use\n as a bean reference, using the specified service interface.\n\n Serializes remote invocation objects and deserializes remote invocation\n result objects. Uses Java serialization just like RMI, but with the JMS\n provider as communication infrastructure.\n\n To be configured with a QueueConnectionFactory and a\n target queue (either as Queue reference or as queue name).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/remoting/JmsInvokerProxyFactoryBean.html
JmsInvokerServiceExporter	A										<section class="prog__container">JMS message listener that exports the specified service bean as a\n JMS service endpoint, accessible via a JMS invoker proxy.\n\n Note that this class implements Spring's\n SessionAwareMessageListener\n interface, since it requires access to the active JMS Session.\n Hence, this class can only be used with message listener containers\n which support the SessionAwareMessageListener interface (e.g. Spring's\n DefaultMessageListenerContainer).\n\n Thanks to James Strachan for the original prototype that this\n JMS invoker mechanism was inspired by!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/remoting/JmsInvokerServiceExporter.html
JmsAccessor	A										<section class="prog__container">Base class for JmsTemplate and other\n JMS-accessing gateway helpers, defining common properties such as the\n JMS ConnectionFactory to operate on. The subclass\n JmsDestinationAccessor\n adds further, destination-related properties.\n\n Not intended to be used directly.\n See JmsTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/JmsAccessor.html
JmsHeaderMapper	A										<section class="prog__container">Strategy interface for mapping messaging Message headers to an outbound\n JMS Message (e.g. to configure JMS properties) or extracting messaging\n header values from an inbound JMS Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/JmsHeaderMapper.html
JmsHeaders	A										<section class="prog__container">Pre-defined names and prefixes to be used for setting and/or retrieving\n JMS attributes from/to generic message headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/JmsHeaders.html
JmsMessageHeaderAccessor	A										<section class="prog__container">A MessageHeaderAccessor\n implementation giving access to JMS-specific headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/JmsMessageHeaderAccessor.html
JmsUtils	A										<section class="prog__container">Generic utility methods for working with JMS. Mainly for internal use\n within the framework, but also useful for custom JMS access code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/JmsUtils.html
SimpleJmsHeaderMapper	A										<section class="prog__container">Simple implementation of JmsHeaderMapper.\n\n This implementation copies JMS API headers (e.g. JMSReplyTo) to and from\n Messages. Any user-defined\n properties will also be copied from a JMS Message to a Message, and any\n other headers on a Message (beyond the JMS API headers) will likewise\n be copied to a JMS Message. Those other headers will be copied to the\n general properties of a JMS Message whereas the JMS API headers are passed\n to the appropriate setter methods (e.g. setJMSReplyTo).\n\n Constants for the JMS API headers are defined in JmsHeaders.\n Note that most of the JMS headers are read-only: the JMSDestination,\n JMSDeliveryMode, JMSExpiration, JMSMessageID, JMSPriority, JMSRedelivered\n and JMSTimestamp flags are only copied from a JMS Message. Those\n values will not be passed along from a Message to an outbound\n JMS Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/SimpleJmsHeaderMapper.html
MappingJackson2MessageConverter	A										<section class="prog__container">Message converter that uses Jackson 2.x to convert messages to and from JSON.\n Maps an object to a BytesMessage, or to a TextMessage if the\n targetType is set to MessageType.TEXT.\n Converts from a TextMessage or BytesMessage to an object.\n\n It customizes Jackson's default properties with the following ones:\n \nMapperFeature.DEFAULT_VIEW_INCLUSION is disabled\nDeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\n\nCompatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html
MarshallingMessageConverter	A										<section class="prog__container">Spring JMS MessageConverter that uses a Marshaller and Unmarshaller.\n Marshals an object to a BytesMessage, or to a TextMessage if the\n targetType is set to MessageType.TEXT.\n Unmarshals from a TextMessage or BytesMessage to an object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MarshallingMessageConverter.html
MessageConversionException	A										<section class="prog__container">Thrown by MessageConverter implementations when the conversion\n of an object to/from a Message fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MessageConversionException.html
MessageConverter	A										<section class="prog__container">Strategy interface that specifies a converter between Java objects and JMS messages.\n\n Check out SimpleMessageConverter for a default implementation,\n converting between the 'standard' message payloads and JMS Message types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MessageConverter.html
MessageType	A										<section class="prog__container">Constants that indicate a target message type to convert to: a\n TextMessage, a BytesMessage,\n a MapMessage or an ObjectMessage.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MessageType.html
MessagingMessageConverter	A										<section class="prog__container">Convert a Message from the messaging abstraction to and from a\n Message using an underlying MessageConverter\n for the payload and a JmsHeaderMapper\n to map the JMS headers to and from standard message headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/MessagingMessageConverter.html
SimpleMessageConverter	A										<section class="prog__container">A simple message converter which is able to handle TextMessages, BytesMessages,\n MapMessages, and ObjectMessages. Used as default conversion strategy\n by JmsTemplate, for\n convertAndSend and receiveAndConvert operations.\n\n Converts a String to a TextMessage, a byte array to a\n BytesMessage, a Map to a MapMessage, and\n a Serializable object to a ObjectMessage (or vice versa).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/SimpleMessageConverter.html
SmartMessageConverter	A										<section class="prog__container">An extended MessageConverter SPI with conversion hint support.\n\n In case of a conversion hint being provided, the framework will call\n the extended method if a converter implements this interface, instead\n of calling the regular toMessage variant.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/converter/SmartMessageConverter.html
BeanFactoryDestinationResolver	A										<section class="prog__container">DestinationResolver implementation based on a Spring BeanFactory.\n\n Will lookup Spring managed beans identified by bean name,\n expecting them to be of type javax.jms.Destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/BeanFactoryDestinationResolver.html
CachingDestinationResolver	A										<section class="prog__container">Extension of the DestinationResolver interface,\n exposing methods for clearing the cache.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/CachingDestinationResolver.html
DestinationResolutionException	A										<section class="prog__container">Thrown by a DestinationResolver when it cannot resolve a destination name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/DestinationResolutionException.html
DestinationResolver	A										<section class="prog__container">Strategy interface for resolving JMS destinations.\n\n Used by JmsTemplate for resolving\n destination names from simple Strings to actual\n Destination implementation instances.\n\n The default DestinationResolver implementation used by\n JmsTemplate instances is the\n DynamicDestinationResolver class. Consider using the\n JndiDestinationResolver for more advanced scenarios.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/DestinationResolver.html
DynamicDestinationResolver	A										<section class="prog__container">Simple DestinationResolver implementation resolving destination names\n as dynamic destinations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/DynamicDestinationResolver.html
JmsDestinationAccessor	A										<section class="prog__container">Base class for JmsTemplate and other\n JMS-accessing gateway helpers, adding destination-related properties to\n JmsAccessor's common properties.\n\n Not intended to be used directly.\n See JmsTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/JmsDestinationAccessor.html
JndiDestinationResolver	A										<section class="prog__container">DestinationResolver implementation which interprets destination names\n as JNDI locations (with a configurable fallback strategy).\n\n Allows for customizing the JNDI environment if necessary, for example\n specifying appropriate JNDI environment properties.\n\n Dynamic queues and topics get cached by destination name. As a consequence,\n you need to use unique destination names across both queues and topics.\n Caching can be turned off through the "cache" flag.\n\n Note that the fallback to resolution of dynamic destinations\n is turned off by default. Switch the\n "fallbackToDynamicDestination"\n flag on to enable this functionality.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/support/destination/JndiDestinationResolver.html
JmxException	A										<section class="prog__container">General base exception to be thrown on JMX errors.\n Unchecked since JMX failures are usually fatal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/JmxException.html
MBeanServerNotFoundException	A										<section class="prog__container">Exception thrown when we cannot locate an instance of an MBeanServer,\n or when more than one instance is found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/MBeanServerNotFoundException.html
InvalidInvocationException	A										<section class="prog__container">Thrown when trying to invoke an operation on a proxy that is not exposed\n by the proxied MBean resource's management interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/InvalidInvocationException.html
InvocationFailureException	A										<section class="prog__container">Thrown when an invocation on an MBean resource failed with an exception (either\n a reflection exception or an exception thrown by the target method itself).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/InvocationFailureException.html
MBeanClientInterceptor	A										<section class="prog__container">MethodInterceptor that routes calls to an\n MBean running on the supplied MBeanServerConnection.\n Works for both local and remote MBeanServerConnections.\n\n By default, the MBeanClientInterceptor will connect to the\n MBeanServer and cache MBean metadata at startup. This can\n be undesirable when running against a remote MBeanServer\n that may not be running when the application starts. Through setting the\n connectOnStartup property to "false",\n you can defer this process until the first invocation against the proxy.\n\n This functionality is usually used through MBeanProxyFactoryBean.\n See the javadoc of that class for more information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/MBeanClientInterceptor.html
MBeanConnectFailureException	A										<section class="prog__container">Thrown when an invocation failed because of an I/O problem on the\n MBeanServerConnection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/MBeanConnectFailureException.html
MBeanInfoRetrievalException	A										<section class="prog__container">Thrown if an exception is encountered when trying to retrieve\n MBean metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/MBeanInfoRetrievalException.html
MBeanProxyFactoryBean	A										<section class="prog__container">Creates a proxy to a managed resource running either locally or remotely.\n The "proxyInterface" property defines the interface that the generated\n proxy is supposed to implement. This interface should define methods and\n properties that correspond to operations and attributes in the management\n interface of the resource you wish to proxy.\n\n There is no need for the managed resource to implement the proxy interface,\n although you may find it convenient to do. It is not required that every\n operation and attribute in the management interface is matched by a\n corresponding property or method in the proxy interface.\n\n Attempting to invoke or access any method or property on the proxy\n interface that does not correspond to the management interface will lead\n to an InvalidInvocationException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/MBeanProxyFactoryBean.html
NotificationListenerRegistrar	A										<section class="prog__container">Registrar object that associates a specific NotificationListener\n with one or more MBeans in an MBeanServer\n (typically via a MBeanServerConnection).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/access/NotificationListenerRegistrar.html
MBeanExporter	A										<section class="prog__container">JMX exporter that allows for exposing any Spring-managed bean to a\n JMX MBeanServer, without the need to define any\n JMX-specific information in the bean classes.\n\n If a bean implements one of the JMX management interfaces, MBeanExporter can\n simply register the MBean with the server through its autodetection process.\n\n If a bean does not implement one of the JMX management interfaces, MBeanExporter\n will create the management information using the supplied MBeanInfoAssembler.\n\n A list of MBeanExporterListeners can be registered\n via the listeners property, allowing\n application code to be notified of MBean registration and unregistration events.\n\n This exporter is compatible with MBeans and MXBeans on Java 6 and above.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/MBeanExporter.html
MBeanExporterListener	A										<section class="prog__container">A listener that allows application code to be notified when an MBean is\n registered and unregistered via an MBeanExporter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/MBeanExporterListener.html
MBeanExportException	A										<section class="prog__container">Exception thrown in case of failure when exporting an MBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/MBeanExportException.html
MBeanExportOperations	A										<section class="prog__container">Interface that defines the set of MBean export operations that are intended to be\n accessed by application developers during application runtime.\n\n This interface should be used to export application resources to JMX using Spring's\n management interface generation capabilties and, optionally, it's ObjectName\n generation capabilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/MBeanExportOperations.html
NotificationListenerBean	A										<section class="prog__container">Helper class that aggregates a NotificationListener,\n a NotificationFilter, and an arbitrary handback\n object.\n\n Also provides support for associating the encapsulated\n NotificationListener with any number of\n MBeans from which it wishes to receive\n Notifications via the\n mappedObjectNames property.\n\n Note: This class supports Spring bean names as\n "mappedObjectNames" as well, as alternative\n to specifying JMX object names. Note that only beans exported by the\n same MBeanExporter are supported for such bean names.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/NotificationListenerBean.html
SpringModelMBean	A										<section class="prog__container">Extension of the RequiredModelMBean class that ensures the\n thread context ClassLoader is switched\n for the managed resource's ClassLoader before any invocations occur.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/SpringModelMBean.html
UnableToRegisterMBeanException	A										<section class="prog__container">Exception thrown when we are unable to register an MBean,\n for example because of a naming conflict.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/UnableToRegisterMBeanException.html
AnnotationJmxAttributeSource	A										<section class="prog__container">Implementation of the JmxAttributeSource interface that\n reads annotations and exposes the corresponding attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.html
AnnotationMBeanExporter	A										<section class="prog__container">Convenient subclass of Spring's standard MBeanExporter,\n activating Java 5 annotation usage for JMX exposure of Spring beans:\n ManagedResource, ManagedAttribute, ManagedOperation, etc.\n\n Sets a MetadataNamingStrategy and a MetadataMBeanInfoAssembler\n with an AnnotationJmxAttributeSource, and activates the\n MBeanExporter.AUTODETECT_ALL mode by default.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/AnnotationMBeanExporter.html
ManagedAttribute	A										<section class="prog__container">Method-level annotation that indicates to expose a given bean property as a\n JMX attribute, corresponding to the ManagedAttribute attribute.\n Only valid when used on a JavaBean getter or setter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedAttribute.html
ManagedMetric	A										<section class="prog__container">Method-level annotation that indicates to expose a given bean property as a\n JMX attribute, with added descriptor properties to indicate that it is a metric.\n Only valid when used on a JavaBean getter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedMetric.html
ManagedNotification	A										<section class="prog__container">Type-level annotation that indicates a JMX notification emitted by a bean.\n\n As of Spring Framework 4.2.4, this annotation is declared as repeatable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedNotification.html
ManagedNotifications	A										<section class="prog__container">Type-level annotation that indicates JMX notifications emitted by a bean,\n containing multiple ManagedNotifications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedNotifications.html
ManagedOperation	A										<section class="prog__container">Method-level annotation that indicates to expose a given method as a\n JMX operation, corresponding to the ManagedOperation attribute.\n Only valid when used on a method that is not a JavaBean getter or setter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedOperation.html
ManagedOperationParameter	A										<section class="prog__container">Method-level annotation used to provide metadata about operation parameters,\n corresponding to a ManagedOperationParameter attribute.\n Used as part of a ManagedOperationParameters annotation.\n\n As of Spring Framework 4.2.4, this annotation is declared as repeatable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedOperationParameter.html
ManagedOperationParameters	A										<section class="prog__container">Method-level annotation used to provide metadata about operation parameters,\n corresponding to an array of ManagedOperationParameter attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedOperationParameters.html
ManagedResource	A										<section class="prog__container">Class-level annotation that indicates to register instances of a class\n with a JMX server, corresponding to the ManagedResource attribute.\n\n Note: This annotation is marked as inherited, allowing for generic\n management-aware base classes. In such a scenario, it is recommended to\n not specify an object name value since this would lead to naming\n collisions in case of multiple subclasses getting registered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/annotation/ManagedResource.html
AbstractConfigurableMBeanInfoAssembler	A										<section class="prog__container">Base class for MBeanInfoAssemblers that support configurable\n JMX notification behavior.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/AbstractConfigurableMBeanInfoAssembler.html
AbstractMBeanInfoAssembler	A										<section class="prog__container">Abstract implementation of the MBeanInfoAssembler interface\n that encapsulates the creation of a ModelMBeanInfo instance\n but delegates the creation of metadata to subclasses.\n\n This class offers two flavors of Class extraction from a managed bean\n instance: getTargetClass(java.lang.Object), extracting the target class behind\n any kind of AOP proxy, and getClassToExpose(java.lang.Object), returning the\n class or interface that will be searched for annotations and exposed\n to the JMX runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/AbstractMBeanInfoAssembler.html
AbstractReflectiveMBeanInfoAssembler	A										<section class="prog__container">Builds on the AbstractMBeanInfoAssembler superclass to\n add a basic algorithm for building metadata based on the\n reflective metadata of the MBean class.\n\n The logic for creating MBean metadata from the reflective metadata\n is contained in this class, but this class makes no decisions as to\n which methods and properties are to be exposed. Instead it gives\n subclasses a chance to 'vote' on each property or method through\n the includeXXX methods.\n\n Subclasses are also given the opportunity to populate attribute\n and operation metadata with additional descriptors once the metadata\n is assembled through the populateXXXDescriptor methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.html
AutodetectCapableMBeanInfoAssembler	A										<section class="prog__container">Extends the MBeanInfoAssembler to add autodetection logic.\n Implementations of this interface are given the opportunity by the\n MBeanExporter to include additional beans in the registration process.\n\n The exact mechanism for deciding which beans to include is left to\n implementing classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/AutodetectCapableMBeanInfoAssembler.html
InterfaceBasedMBeanInfoAssembler	A										<section class="prog__container">Subclass of AbstractReflectiveMBeanInfoAssembler that allows for\n the management interface of a bean to be defined using arbitrary interfaces.\n Any methods or properties that are defined in those interfaces are exposed\n as MBean operations and attributes.\n\n By default, this class votes on the inclusion of each operation or attribute\n based on the interfaces implemented by the bean class. However, you can supply an\n array of interfaces via the managedInterfaces property that will be\n used instead. If you have multiple beans and you wish each bean to use a different\n set of interfaces, then you can map bean keys (that is the name used to pass the\n bean to the MBeanExporter) to a list of interface names using the\n interfaceMappings property.\n\n If you specify values for both interfaceMappings and\n managedInterfaces, Spring will attempt to find interfaces in the\n mappings first. If no interfaces for the bean are found, it will use the\n interfaces defined by managedInterfaces.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.html
MBeanInfoAssembler	A										<section class="prog__container">Interface to be implemented by all classes that can\n create management interface metadata for a managed resource.\n\n Used by the MBeanExporter to generate the management\n interface for any bean that is not an MBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/MBeanInfoAssembler.html
MetadataMBeanInfoAssembler	A										<section class="prog__container">Implementation of the MBeanInfoAssembler\n interface that reads the management interface information from source level metadata.\n\n Uses the JmxAttributeSource strategy interface, so that\n metadata can be read using any supported implementation. Out of the box,\n Spring provides an implementation based on JDK 1.5+ annotations,\n AnnotationJmxAttributeSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.html
MethodExclusionMBeanInfoAssembler	A										<section class="prog__container">AbstractReflectiveMBeanInfoAssembler subclass that allows\n method names to be explicitly excluded as MBean operations and attributes.\n\n Any method not explicitly excluded from the management interface will be exposed to\n JMX. JavaBean getters and setters will automatically be exposed as JMX attributes.\n\n You can supply an array of method names via the ignoredMethods\n property. If you have multiple beans and you wish each bean to use a different\n set of method names, then you can map bean keys (that is the name used to pass\n the bean to the MBeanExporter) to a list of method names using the\n ignoredMethodMappings property.\n\n If you specify values for both ignoredMethodMappings and\n ignoredMethods, Spring will attempt to find method names in the\n mappings first. If no method names for the bean are found, it will use the\n method names defined by ignoredMethods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssembler.html
MethodNameBasedMBeanInfoAssembler	A										<section class="prog__container">Subclass of AbstractReflectiveMBeanInfoAssembler that allows\n to specify method names to be exposed as MBean operations and attributes.\n JavaBean getters and setters will automatically be exposed as JMX attributes.\n\n You can supply an array of method names via the managedMethods\n property. If you have multiple beans and you wish each bean to use a different\n set of method names, then you can map bean keys (that is the name used to pass\n the bean to the MBeanExporter) to a list of method names using the\n methodMappings property.\n\n If you specify values for both methodMappings and\n managedMethods, Spring will attempt to find method names in the\n mappings first. If no method names for the bean are found, it will use the\n method names defined by managedMethods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.html
SimpleReflectiveMBeanInfoAssembler	A										<section class="prog__container">Simple subclass of AbstractReflectiveMBeanInfoAssembler\n that always votes yes for method and property inclusion, effectively exposing\n all public methods and properties as operations and attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/assembler/SimpleReflectiveMBeanInfoAssembler.html
AbstractJmxAttribute	A										<section class="prog__container">Base class for all JMX metadata classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/AbstractJmxAttribute.html
InvalidMetadataException	A										<section class="prog__container">Thrown by the JmxAttributeSource when it encounters\n incorrect metadata on a managed resource or one of its methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/InvalidMetadataException.html
JmxAttributeSource	A										<section class="prog__container">Interface used by the MetadataMBeanInfoAssembler to\n read source-level metadata from a managed resource's class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/JmxAttributeSource.html
JmxMetadataUtils	A										<section class="prog__container">Utility methods for converting Spring JMX metadata into their plain JMX equivalents.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/JmxMetadataUtils.html
ManagedAttribute	A										<section class="prog__container">Metadata that indicates to expose a given bean property as JMX attribute.\n Only valid when used on a JavaBean getter or setter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedAttribute.html
ManagedMetric	A										<section class="prog__container">Metadata that indicates to expose a given bean property as a JMX attribute,\n with additional descriptor properties that indicate that the attribute is a\n metric. Only valid when used on a JavaBean getter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedMetric.html
ManagedNotification	A										<section class="prog__container">Metadata that indicates a JMX notification emitted by a bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedNotification.html
ManagedOperation	A										<section class="prog__container">Metadata that indicates to expose a given method as JMX operation.\n Only valid when used on a method that is not a JavaBean getter or setter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedOperation.html
ManagedOperationParameter	A										<section class="prog__container">Metadata about JMX operation parameters.\n Used in conjunction with a ManagedOperation attribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedOperationParameter.html
ManagedResource	A										<section class="prog__container">Metadata indicating that instances of an annotated class\n are to be registered with a JMX server.\n Only valid when used on a Class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/metadata/ManagedResource.html
IdentityNamingStrategy	A										<section class="prog__container">An implementation of the ObjectNamingStrategy interface that\n creates a name based on the identity of a given instance.\n\n The resulting ObjectName will be in the form\n package:class=class name,hashCode=identity hash (in hex)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/naming/IdentityNamingStrategy.html
KeyNamingStrategy	A										<section class="prog__container">ObjectNamingStrategy implementation that builds\n ObjectName instances from the key used in the\n "beans" map passed to MBeanExporter.\n\n Can also check object name mappings, given as Properties\n or as mappingLocations of properties files. The key used\n to look up is the key used in MBeanExporter's "beans" map.\n If no mapping is found for a given key, the key itself is used to\n build an ObjectName.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/naming/KeyNamingStrategy.html
MetadataNamingStrategy	A										<section class="prog__container">An implementation of the ObjectNamingStrategy interface\n that reads the ObjectName from the source-level metadata.\n Falls back to the bean key (bean name) if no ObjectName\n can be found in source-level metadata.\n\n Uses the JmxAttributeSource strategy interface, so that\n metadata can be read using any supported implementation. Out of the box,\n AnnotationJmxAttributeSource\n introspects a well-defined set of Java 5 annotations that come with Spring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/naming/MetadataNamingStrategy.html
ObjectNamingStrategy	A										<section class="prog__container">Strategy interface that encapsulates the creation of ObjectName instances.\n\n Used by the MBeanExporter to obtain ObjectNames\n when registering beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/naming/ObjectNamingStrategy.html
SelfNaming	A										<section class="prog__container">Interface that allows infrastructure components to provide their own\n ObjectNames to the MBeanExporter.\n\n Note: This interface is mainly intended for internal usage.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/naming/SelfNaming.html
ModelMBeanNotificationPublisher	A										<section class="prog__container">NotificationPublisher implementation that uses the infrastructure\n provided by the ModelMBean interface to track\n javax.management.NotificationListeners\n and send Notifications to those listeners.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/notification/ModelMBeanNotificationPublisher.html
NotificationPublisher	A										<section class="prog__container">Simple interface allowing Spring-managed MBeans to publish JMX notifications\n without being aware of how those notifications are being transmitted to the\n MBeanServer.\n\n Managed resources can access a NotificationPublisher by\n implementing the NotificationPublisherAware interface. After a particular\n managed resource instance is registered with the MBeanServer,\n Spring will inject a NotificationPublisher instance into it if that\n resource implements the NotificationPublisherAware inteface.\n\n Each managed resource instance will have a distinct instance of a\n NotificationPublisher implementation. This instance will keep\n track of all the NotificationListeners\n registered for a particular mananaged resource.\n\n Any existing, user-defined MBeans should use standard JMX APIs for notification\n publication; this interface is intended for use only by Spring-created MBeans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/notification/NotificationPublisher.html
NotificationPublisherAware	A										<section class="prog__container">Interface to be implemented by any Spring-managed resource that is to be\n registered with an MBeanServer and wishes to send\n JMX javax.management.Notifications.\n\n Provides Spring-created managed resources with a NotificationPublisher\n as soon as they are registered with the MBeanServer.\n\n NOTE: This interface only applies to simple Spring-managed\n beans which happen to get exported through Spring's\n MBeanExporter.\n It does not apply to any non-exported beans; neither does it apply\n to standard MBeans exported by Spring. For standard JMX MBeans,\n consider implementing the ModelMBeanNotificationBroadcaster\n interface (or implementing a full ModelMBean).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/notification/NotificationPublisherAware.html
UnableToSendNotificationException	A										<section class="prog__container">Thrown when a JMX Notification is unable to be sent.\n\n The root cause of just why a particular notification could not be sent\n will typically be available via the Throwable.getCause() property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/export/notification/UnableToSendNotificationException.html
ConnectorServerFactoryBean	A										<section class="prog__container">FactoryBean that creates a JSR-160 JMXConnectorServer,\n optionally registers it with the MBeanServer and then starts it.\n\n The JMXConnectorServer can be started in a separate thread by setting the\n threaded property to true. You can configure this thread to be a\n daemon thread by setting the daemon property to true.\n\n The JMXConnectorServer is correctly shutdown when an instance of this\n class is destroyed on shutdown of the containing ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/ConnectorServerFactoryBean.html
JmxUtils	A										<section class="prog__container">Collection of generic utility methods to support Spring JMX.\n Includes a convenient method to locate an MBeanServer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/JmxUtils.html
MBeanRegistrationSupport	A										<section class="prog__container">Provides supporting infrastructure for registering MBeans with an\n MBeanServer. The behavior when encountering\n an existing MBean at a given ObjectName is fully configurable\n allowing for flexible registration settings.\n\n All registered MBeans are tracked and can be unregistered by calling\n the #unregisterBeans() method.\n\n Sub-classes can receive notifications when an MBean is registered or\n unregistered by overriding the onRegister(ObjectName) and\n onUnregister(ObjectName) methods respectively.\n\n By default, the registration process will fail if attempting to\n register an MBean using a ObjectName that is\n already used.\n\n By setting the registrationPolicy\n property to RegistrationPolicy.IGNORE_EXISTING the registration process\n will simply ignore existing MBeans leaving them registered. This is useful in settings\n where multiple applications want to share a common MBean in a shared MBeanServer.\n\n Setting registrationPolicy property\n to RegistrationPolicy.REPLACE_EXISTING will cause existing MBeans to be replaced\n during registration if necessary. This is useful in situations where you can't guarantee\n the state of your MBeanServer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/MBeanRegistrationSupport.html
MBeanServerConnectionFactoryBean	A										<section class="prog__container">FactoryBean that creates a JMX 1.2 MBeanServerConnection\n to a remote MBeanServer exposed via a JMXServerConnector.\n Exposes the MBeanServer for bean references.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.html
MBeanServerFactoryBean	A										<section class="prog__container">FactoryBean that obtains an MBeanServer reference\n through the standard JMX 1.2 MBeanServerFactory\n API (which is available on JDK 1.5 or as part of a JMX 1.2 provider).\n Exposes the MBeanServer for bean references.\n\n By default, MBeanServerFactoryBean will always create\n a new MBeanServer even if one is already running. To have\n the MBeanServerFactoryBean attempt to locate a running\n MBeanServer first, set the value of the\n "locateExistingServerIfPossible" property to "true".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/MBeanServerFactoryBean.html
MetricType	A										<section class="prog__container">Represents how the measurement values of a ManagedMetric will change over time.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/MetricType.html
NotificationListenerHolder	A										<section class="prog__container">Helper class that aggregates a NotificationListener,\n a NotificationFilter, and an arbitrary handback\n object, as well as the names of MBeans from which the listener wishes\n to receive Notifications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/NotificationListenerHolder.html
ObjectNameManager	A										<section class="prog__container">Helper class for the creation of ObjectName instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/ObjectNameManager.html
RegistrationPolicy	A										<section class="prog__container">Indicates registration behavior when attempting to register an MBean that already\n exists.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/RegistrationPolicy.html
WebSphereMBeanServerFactoryBean	A										<section class="prog__container">FactoryBean that obtains a WebSphere MBeanServer\n reference through WebSphere's proprietary AdminServiceFactory API,\n available on WebSphere 5.1 and higher.\n\n Exposes the MBeanServer for bean references.\n This FactoryBean is a direct alternative to MBeanServerFactoryBean,\n which uses standard JMX 1.2 API to access the platform's MBeanServer.\n\n See the javadocs for WebSphere's\n AdminServiceFactory\n and MBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jmx/support/WebSphereMBeanServerFactoryBean.html
JndiAccessor	A										<section class="prog__container">Convenient superclass for JNDI accessors, providing "jndiTemplate"\n and "jndiEnvironment" bean properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiAccessor.html
JndiCallback	A										<section class="prog__container">Callback interface to be implemented by classes that need to perform an\n operation (such as a lookup) in a JNDI context. This callback approach\n is valuable in simplifying error handling, which is performed by the\n JndiTemplate class. This is a similar to JdbcTemplate's approach.\n\n Note that there is hardly any need to implement this callback\n interface, as JndiTemplate provides all usual JNDI operations via\n convenience methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiCallback.html
JndiLocatorDelegate	A										<section class="prog__container">JndiLocatorSupport subclass with public lookup methods,\n for convenient use as a delegate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiLocatorDelegate.html
JndiLocatorSupport	A										<section class="prog__container">Convenient superclass for classes that can locate any number of JNDI objects.\n Derives from JndiAccessor to inherit the "jndiTemplate" and "jndiEnvironment"\n bean properties.\n\n JNDI names may or may not include the "java:comp/env/" prefix expected\n by J2EE applications when accessing a locally mapped (ENC - Environmental\n Naming Context) resource. If it doesn't, the "java:comp/env/" prefix will\n be prepended if the "resourceRef" property is true (the default is\n false) and no other scheme (e.g. "java:") is given.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiLocatorSupport.html
JndiLookupFailureException	A										<section class="prog__container">RuntimeException to be thrown in case of JNDI lookup failures,\n in particular from code that does not declare JNDI's checked\n NamingException: for example, from Spring's\n JndiObjectTargetSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiLookupFailureException.html
JndiObjectFactoryBean	A										<section class="prog__container">FactoryBean that looks up a\n JNDI object. Exposes the object found in JNDI for bean references,\n e.g. for data access object's "dataSource" property in case of a\n DataSource.\n\n The typical usage will be to register this as singleton factory\n (e.g. for a certain JNDI-bound DataSource) in an application context,\n and give bean references to application services that need it.\n\n The default behavior is to look up the JNDI object on startup and cache it.\n This can be customized through the "lookupOnStartup" and "cache" properties,\n using a JndiObjectTargetSource underneath. Note that you need to specify\n a "proxyInterface" in such a scenario, since the actual JNDI object type is not\n known in advance.\n\n Of course, bean classes in a Spring environment may lookup e.g. a DataSource\n from JNDI themselves. This class simply enables central configuration of the\n JNDI name, and easy switching to non-JNDI alternatives. The latter is\n particularly convenient for test setups, reuse in standalone clients, etc.\n\n Note that switching to e.g. DriverManagerDataSource is just a matter of\n configuration: Simply replace the definition of this FactoryBean with a\n DriverManagerDataSource definition!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiObjectFactoryBean.html
JndiObjectLocator	A										<section class="prog__container">Convenient superclass for JNDI-based service locators,\n providing configurable lookup of a specific JNDI resource.\n\n Exposes a "jndiName" property. This may or may not\n include the "java:comp/env/" prefix expected by J2EE applications when\n accessing a locally mapped (Environmental Naming Context) resource. If it\n doesn't, the "java:comp/env/" prefix will be prepended if the "resourceRef"\n property is true (the default is false) and no other scheme\n (e.g. "java:") is given.\n\n Subclasses may invoke the lookup() method whenever it is appropriate.\n Some classes might do this on initialization, while others might do it\n on demand. The latter strategy is more flexible in that it allows for\n initialization of the locator before the JNDI object is available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiObjectLocator.html
JndiObjectTargetSource	A										<section class="prog__container">AOP TargetSource that provides\n configurable JNDI lookups for getTarget() calls.\n\n Can be used as alternative to JndiObjectFactoryBean, to allow for\n relocating a JNDI object lazily or for each operation (see "lookupOnStartup"\n and "cache" properties). This is particularly useful during development, as it\n allows for hot restarting of the JNDI server (for example, a remote JMS server).\n\n Example:\n\n \n <bean id="queueConnectionFactoryTarget" class="org.springframework.jndi.JndiObjectTargetSource">\n   <property name="jndiName" value="JmsQueueConnectionFactory"/>\n   <property name="lookupOnStartup" value="false"/>\n </bean>\n\n <bean id="queueConnectionFactory" class="org.springframework.aop.framework.ProxyFactoryBean">\n   <property name="proxyInterfaces" value="javax.jms.QueueConnectionFactory"/>\n   <property name="targetSource" ref="queueConnectionFactoryTarget"/>\n </bean>\n\n A createQueueConnection call on the "queueConnectionFactory" proxy will\n cause a lazy JNDI lookup for "JmsQueueConnectionFactory" and a subsequent delegating\n call to the retrieved QueueConnectionFactory's createQueueConnection.\n\n Alternatively, use a JndiObjectFactoryBean with a "proxyInterface".\n "lookupOnStartup" and "cache" can then be specified on the JndiObjectFactoryBean,\n creating a JndiObjectTargetSource underneath (instead of defining separate\n ProxyFactoryBean and JndiObjectTargetSource beans).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiObjectTargetSource.html
JndiPropertySource	A										<section class="prog__container">PropertySource implementation that reads properties from an underlying Spring\n JndiLocatorDelegate.\n\n By default, the underlying JndiLocatorDelegate will be configured with its\n "resourceRef" property set to\n true, meaning that names looked up will automatically be prefixed with\n "java:comp/env/" in alignment with published\n JNDI\n naming conventions. To override this setting or to change the prefix, manually\n configure a JndiLocatorDelegate and provide it to one of the constructors here\n that accepts it. The same applies when providing custom JNDI properties. These should\n be specified using JndiAccessor.setJndiEnvironment(java.util.Properties)\n prior to construction of the JndiPropertySource.\n\n Note that StandardServletEnvironment includes a JndiPropertySource by default, and any\n customization of the underlying JndiLocatorDelegate may be performed within an\n ApplicationContextInitializer or WebApplicationInitializer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiPropertySource.html
JndiTemplate	A										<section class="prog__container">Helper class that simplifies JNDI operations. It provides methods to lookup and\n bind objects, and allows implementations of the JndiCallback interface\n to perform any operation they like with a JNDI naming context provided.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiTemplate.html
JndiTemplateEditor	A										<section class="prog__container">Properties editor for JndiTemplate objects. Allows properties of type\n JndiTemplate to be populated with a properties-format string.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/JndiTemplateEditor.html
TypeMismatchNamingException	A										<section class="prog__container">Exception thrown if a type mismatch is encountered for an object\n located in a JNDI environment. Thrown by JndiTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/TypeMismatchNamingException.html
SimpleJndiBeanFactory	A										<section class="prog__container">Simple JNDI-based implementation of Spring's\n BeanFactory interface.\n Does not support enumerating bean definitions, hence doesn't implement\n the ListableBeanFactory interface.\n\n This factory resolves given bean names as JNDI names within the\n J2EE application's "java:comp/env/" namespace. It caches the resolved\n types for all obtained objects, and optionally also caches shareable\n objects (if they are explicitly marked as\n shareable resource.\n\n The main intent of this factory is usage in combination with Spring's\n CommonAnnotationBeanPostProcessor,\n configured as "resourceFactory" for resolving @Resource\n annotations as JNDI objects without intermediate bean definitions.\n It may be used for similar lookup scenarios as well, of course,\n in particular if BeanFactory-style type checking is required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jndi/support/SimpleJndiBeanFactory.html
UsesJava7	A										<section class="prog__container">Indicates that the annotated element uses Java 7 specific API constructs,\n without implying that it strictly requires Java 7.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/lang/UsesJava7.html
UsesJava8	A										<section class="prog__container">Indicates that the annotated element uses Java 8 specific API constructs,\n without implying that it strictly requires Java 8.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/lang/UsesJava8.html
UsesSunHttpServer	A										<section class="prog__container">Indicates that the annotated element uses the Http Server available in\n com.sun.* classes, which is only available on a Sun/Oracle JVM.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/lang/UsesSunHttpServer.html
UsesSunMisc	A										<section class="prog__container">Indicates that the annotated element uses an API from the sun.misc\n package.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/lang/UsesSunMisc.html
MailAuthenticationException	A										<section class="prog__container">Exception thrown on failed authentication.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailAuthenticationException.html
MailException	A										<section class="prog__container">Base class for all mail exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailException.html
MailMessage	A										<section class="prog__container">This is a common interface for mail messages, allowing a user to set key\n values required in assembling a mail message, without needing to know if\n the underlying message is a simple text message or a more sophisticated\n MIME message.\n\n Implemented by both SimpleMailMessage and MimeMessageHelper,\n to let message population code interact with a simple message or a\n MIME message through a common interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailMessage.html
MailParseException	A										<section class="prog__container">Exception thrown if illegal message properties are encountered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailParseException.html
MailPreparationException	A										<section class="prog__container">Exception to be thrown by user code if a mail cannot be prepared properly,\n for example when a Velocity template cannot be rendered for the mail text.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailPreparationException.html
MailSender	A										<section class="prog__container">This interface defines a strategy for sending simple mails. Can be\n implemented for a variety of mailing systems due to the simple requirements.\n For richer functionality like MIME messages, consider JavaMailSender.\n\n Allows for easy testing of clients, as it does not depend on JavaMail's\n infrastructure classes: no mocking of JavaMail Session or Transport necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailSender.html
MailSendException	A										<section class="prog__container">Exception thrown when a mail sending error is encountered.\n Can register failed messages with their exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/MailSendException.html
SimpleMailMessage	A										<section class="prog__container">Models a simple mail message, including data such as the from, to, cc, subject, and text fields.\n\n Consider JavaMailSender and JavaMail MimeMessages for creating\n more sophisticated messages, for example messages with attachments, special\n character encodings, or personal names that accompany mail addresses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/SimpleMailMessage.html
ConfigurableMimeFileTypeMap	A										<section class="prog__container">Spring-configurable FileTypeMap implementation that will read\n MIME type to file extension mappings from a standard JavaMail MIME type\n mapping file, using a standard MimetypesFileTypeMap underneath.\n\n The mapping file should be in the following format, as specified by the\n Java Activation Framework:\n\n \n # map text/html to .htm and .html files\n text/html  html htm HTML HTM\n\n Lines starting with # are treated as comments and are ignored. All\n other lines are treated as mappings. Each mapping line should contain the MIME\n type as the first entry and then each file extension to map to that MIME type\n as subsequent entries. Each entry is separated by spaces or tabs.\n\n By default, the mappings in the mime.types file located in the\n same package as this class are used, which cover many common file extensions\n (in contrast to the out-of-the-box mappings in activation.jar).\n This can be overridden using the mappingLocation property.\n\n Additional mappings can be added via the mappings bean property,\n as lines that follow the mime.types file format.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/ConfigurableMimeFileTypeMap.html
InternetAddressEditor	A										<section class="prog__container">Editor for java.mail.internet.InternetAddress,\n to directly populate an InternetAddress property.\n\n Expects the same syntax as InternetAddress's constructor with\n a String argument. Converts empty Strings into null values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/InternetAddressEditor.html
JavaMailSender	A										<section class="prog__container">Extended MailSender interface for JavaMail,\n supporting MIME messages both as direct arguments and through preparation\n callbacks. Typically used in conjunction with the MimeMessageHelper\n class for convenient creation of JavaMail MimeMessages,\n including attachments etc.\n\n Clients should talk to the mail sender through this interface if they need\n mail functionality beyond SimpleMailMessage.\n The production implementation is JavaMailSenderImpl; for testing,\n mocks can be created based on this interface. Clients will typically receive\n the JavaMailSender reference through dependency injection.\n\n The recommended way of using this interface is the MimeMessagePreparator\n mechanism, possibly using a MimeMessageHelper for populating the message.\n See MimeMessageHelper's javadoc for an example.\n\n The entire JavaMail Session management is abstracted\n by the JavaMailSender. Client code should not deal with a Session in any way,\n rather leave the entire JavaMail configuration and resource handling to the\n JavaMailSender implementation. This also increases testability.\n\n A JavaMailSender client is not as easy to test as a plain\n MailSender client, but still straightforward\n compared to traditional JavaMail code: Just let createMimeMessage()\n return a plain MimeMessage created with a\n Session.getInstance(new Properties()) call, and check the passed-in\n messages in your mock implementations of the various send methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/JavaMailSender.html
JavaMailSenderImpl	A										<section class="prog__container">Production implementation of the JavaMailSender interface,\n supporting both JavaMail MimeMessages and Spring\n SimpleMailMessages. Can also be used as a\n plain MailSender implementation.\n\n Allows for defining all settings locally as bean properties.\n Alternatively, a pre-configured JavaMail Session can be\n specified, possibly pulled from an application server's JNDI environment.\n\n Non-default properties in this object will always override the settings\n in the JavaMail Session. Note that if overriding all values locally,\n there is no added value in setting a pre-configured Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/JavaMailSenderImpl.html
MimeMailMessage	A										<section class="prog__container">Implementation of the MailMessage interface for a JavaMail MIME message,\n to let message population code interact with a simple message or a MIME\n message through a common interface.\n\n Uses a MimeMessageHelper underneath. Can either be created with a\n MimeMessageHelper instance or with a JavaMail MimeMessage instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/MimeMailMessage.html
MimeMessageHelper	A										<section class="prog__container">Helper class for populating a MimeMessage.\n\n Mirrors the simple setters of SimpleMailMessage,\n directly applying the values to the underlying MimeMessage. Allows for defining\n a character encoding for the entire message, automatically applied by all methods\n of this helper class.\n\n Offers support for HTML text content, inline elements such as images, and typical\n mail attachments. Also supports personal names that accompany mail addresses. Note that\n advanced settings can still be applied directly to the underlying MimeMessage object!\n\n Typically used in MimeMessagePreparator implementations or\n JavaMailSender client code: simply instantiating it as a MimeMessage wrapper,\n invoking setters on the wrapper, using the underlying MimeMessage for mail sending.\n Also used internally by JavaMailSenderImpl.\n\n Sample code for an HTML mail with an inline image and a PDF attachment:\n\n \n mailSender.send(new MimeMessagePreparator() {\n   public void prepare(MimeMessage mimeMessage) throws MessagingException {\n     MimeMessageHelper message = new MimeMessageHelper(mimeMessage, true, "UTF-8");\n     message.setFrom("me@mail.com");\n     message.setTo("you@mail.com");\n     message.setSubject("my subject");\n     message.setText("my text <img src='cid:myLogo'>", true);\n     message.addInline("myLogo", new ClassPathResource("img/mylogo.gif"));\n     message.addAttachment("myDocument.pdf", new ClassPathResource("doc/myDocument.pdf"));\n   }\n });\n\n Consider using MimeMailMessage (which implements the common\n MailMessage interface, just like\n SimpleMailMessage) on top of this helper,\n in order to let message population code interact with a simple message\n or a MIME message through a common interface.\n\n Warning regarding multipart mails: Simple MIME messages that\n just contain HTML text but no inline elements or attachments will work on\n more or less any email client that is capable of HTML rendering. However,\n inline elements and attachments are still a major compatibility issue\n between email clients: It's virtually impossible to get inline elements\n and attachments working across Microsoft Outlook, Lotus Notes and Mac Mail.\n Consider choosing a specific multipart mode for your needs: The javadoc\n on the MULTIPART_MODE constants contains more detailed information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/MimeMessageHelper.html
MimeMessagePreparator	A										<section class="prog__container">Callback interface for the preparation of JavaMail MIME messages.\n\n The corresponding send methods of JavaMailSender\n will take care of the actual creation of a MimeMessage instance,\n and of proper exception conversion.\n\n It is often convenient to use a MimeMessageHelper for populating\n the passed-in MimeMessage, in particular when working with attachments or\n special character encodings.\n See MimeMessageHelper's javadoc for an example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mail/javamail/MimeMessagePreparator.html
Message	A										<section class="prog__container">A generic message representation with headers and body.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/Message.html
MessageChannel	A										<section class="prog__container">Defines methods for sending messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessageChannel.html
MessageDeliveryException	A										<section class="prog__container">Exception that indicates an error occurred during message delivery.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessageDeliveryException.html
MessageHandler	A										<section class="prog__container">Contract for handling a Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessageHandler.html
MessageHandlingException	A										<section class="prog__container">Exception that indicates an error occurred during message handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessageHandlingException.html
MessageHeaders	A										<section class="prog__container">The headers for a Message.\n\n IMPORTANT: This class is immutable. Any mutating operation such as\n put(..), putAll(..) and others will throw\n UnsupportedOperationException.\n Subclasses do have access to the raw headers, however, via getRawHeaders().\n\n One way to create message headers is to use the\n MessageBuilder:\n \n MessageBuilder.withPayload("foo").setHeader("key1", "value1").setHeader("key2", "value2");\n \n\n A second option is to create GenericMessage\n passing a payload as Object and headers as a java.util.Map:\n \n Map headers = new HashMap();\n headers.put("key1", "value1");\n headers.put("key2", "value2");\n new GenericMessage("foo", headers);\n \n\n A third option is to use MessageHeaderAccessor\n or one of its subclasses to create specific categories of headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessageHeaders.html
MessagingException	A										<section class="prog__container">The base exception for any failures related to messaging.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/MessagingException.html
PollableChannel	A										<section class="prog__container">A MessageChannel from which messages may be actively received through polling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/PollableChannel.html
SubscribableChannel	A										<section class="prog__container">A MessageChannel that maintains a registry of subscribers and invokes\n them to handle messages sent through this channel.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/SubscribableChannel.html
AbstractMessageConverter	A										<section class="prog__container">Abstract base class for SmartMessageConverter implementations including\n support for common properties and a partial implementation of the conversion methods,\n mainly to check if the converter supports the conversion based on the payload class\n and MIME type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/AbstractMessageConverter.html
ByteArrayMessageConverter	A										<section class="prog__container">A MessageConverter that supports MIME type "application/octet-stream" with the\n payload converted to and from a byte[].</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/ByteArrayMessageConverter.html
CompositeMessageConverter	A										<section class="prog__container">A MessageConverter that delegates to a list of registered converters\n to be invoked until one of them returns a non-null result.\n\n As of 4.2.1, this composite converter implements SmartMessageConverter\n in order to support the delegation of conversion hints.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/CompositeMessageConverter.html
ContentTypeResolver	A										<section class="prog__container">Resolve the content type for a message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/ContentTypeResolver.html
DefaultContentTypeResolver	A										<section class="prog__container">A default ContentTypeResolver that checks the\n MessageHeaders.CONTENT_TYPE header or falls back to a default value.\n\n The header value is expected to be a MimeType\n or a String that can be parsed into a MimeType.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/DefaultContentTypeResolver.html
GenericMessageConverter	A										<section class="prog__container">An extension of the SimpleMessageConverter that uses a\n ConversionService to convert the payload of the message\n to the requested type.\n\n Return null if the conversion service cannot convert\n from the payload type to the requested type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/GenericMessageConverter.html
MappingJackson2MessageConverter	A										<section class="prog__container">A Jackson 2 based MessageConverter implementation.\n\n It customizes Jackson's default properties with the following ones:\n \nMapperFeature.DEFAULT_VIEW_INCLUSION is disabled\nDeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\n\nCompatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/MappingJackson2MessageConverter.html
MarshallingMessageConverter	A										<section class="prog__container">Implementation of MessageConverter that can read and write XML using Spring's\n Marshaller and Unmarshaller abstractions.\n\n This converter requires a Marshaller and Unmarshaller before it can\n be used. These can be injected by the constructor or bean properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/MarshallingMessageConverter.html
MessageConversionException	A										<section class="prog__container">An exception raised by MessageConverter implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/MessageConversionException.html
MessageConverter	A										<section class="prog__container">A converter to turn the payload of a Message from serialized form to a typed\n Object and vice versa. The MessageHeaders.CONTENT_TYPE message header may be\n used to specify the media type of the message content.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/MessageConverter.html
SimpleMessageConverter	A										<section class="prog__container">A simple converter that simply unwraps the message payload as long as it matches the\n expected target class. Or reversely, simply wraps the payload in a message.\n\n Note that this converter ignores any content type information that may be present in\n message headers and should not be used if payload conversion is actually required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/SimpleMessageConverter.html
SmartMessageConverter	A										<section class="prog__container">An extended MessageConverter SPI with conversion hint support.\n\n In case of a conversion hint being provided, the framework will call\n these extended methods if a converter implements this interface, instead\n of calling the regular fromMessage / toMessage variants.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/SmartMessageConverter.html
StringMessageConverter	A										<section class="prog__container">A MessageConverter that supports MIME type "text/plain" with the\n payload converted to and from a String.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/converter/StringMessageConverter.html
AbstractDestinationResolvingMessagingTemplate	A										<section class="prog__container">An extension of AbstractMessagingTemplate that adds operations for sending\n messages to a resolvable destination name as defined by the following interfaces:\n \nDestinationResolvingMessageSendingOperations\nDestinationResolvingMessageReceivingOperations\nDestinationResolvingMessageRequestReplyOperations\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/AbstractDestinationResolvingMessagingTemplate.html
AbstractMessageReceivingTemplate	A										<section class="prog__container">An extension of AbstractMessageSendingTemplate that adds support for\n receive style operations as defined by MessageReceivingOperations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/AbstractMessageReceivingTemplate.html
AbstractMessageSendingTemplate	A										<section class="prog__container">Abstract base class for implementations of MessageSendingOperations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/AbstractMessageSendingTemplate.html
AbstractMessagingTemplate	A										<section class="prog__container">An extension of AbstractMessageReceivingTemplate that adds support for\n request-reply style operations as defined by MessageRequestReplyOperations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/AbstractMessagingTemplate.html
BeanFactoryMessageChannelDestinationResolver	A										<section class="prog__container">An implementation of DestinationResolver that interprets a destination\n name as the bean name of a MessageChannel and looks up the bean in\n the configured BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/BeanFactoryMessageChannelDestinationResolver.html
CachingDestinationResolverProxy	A										<section class="prog__container">DestinationResolver implementation that proxies a target DestinationResolver,\n caching its resolveDestination(java.lang.String) results. Such caching is particularly useful\n if the destination resolving process is expensive (e.g. the destination has to be\n resolved through an external system) and the resolution results are stable anyway.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/CachingDestinationResolverProxy.html
DestinationResolutionException	A										<section class="prog__container">Thrown by a DestinationResolver when it cannot resolve a destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/DestinationResolutionException.html
DestinationResolver	A										<section class="prog__container">Strategy for resolving a String destination name to an actual destination\n of type <D>.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/DestinationResolver.html
DestinationResolvingMessageReceivingOperations	A										<section class="prog__container">Extends MessageReceivingOperations and adds operations for receiving messages\n from a destination specified as a (resolvable) String name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/DestinationResolvingMessageReceivingOperations.html
DestinationResolvingMessageRequestReplyOperations	A										<section class="prog__container">Extends MessageRequestReplyOperations and adds operations for sending and\n receiving messages to and from a destination specified as a (resolvable) String name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/DestinationResolvingMessageRequestReplyOperations.html
DestinationResolvingMessageSendingOperations	A										<section class="prog__container">Extends MessageSendingOperations and adds operations for sending messages\n to a destination specified as a (resolvable) String name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.html
GenericMessagingTemplate	A										<section class="prog__container">A messaging template that resolves destinations names to MessageChannel's\n to send and receive messages from.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/GenericMessagingTemplate.html
MessagePostProcessor	A										<section class="prog__container">A contract for processing a Message after it has been created, either\n returning a modified (effectively new) message or returning the same.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/MessagePostProcessor.html
MessageReceivingOperations	A										<section class="prog__container">Operations for receiving messages from a destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/MessageReceivingOperations.html
MessageRequestReplyOperations	A										<section class="prog__container">Operations for sending messages to and receiving the reply from a destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/MessageRequestReplyOperations.html
MessageSendingOperations	A										<section class="prog__container">Operations for sending messages to a destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/core/MessageSendingOperations.html
AbstractMessageCondition<T extends AbstractMessageCondition>	A										<section class="prog__container">A base class for MessageCondition types providing implementations of\n equals(Object), hashCode(), and toString().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/AbstractMessageCondition.html
DestinationPatternsMessageCondition	A										<section class="prog__container">A MessageCondition for matching the destination of a Message against one or\n more destination patterns using a PathMatcher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/DestinationPatternsMessageCondition.html
HandlerMethod.HandlerMethodParameter	A										<section class="prog__container">A MethodParameter with HandlerMethod-specific behavior.</section>	No URL found
HandlerMethod	A										<section class="prog__container">Encapsulates information about a handler method consisting of a\n method and a bean.\n Provides convenient access to method parameters, the method return value,\n method annotations, etc.\n\n The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,\n prototype bean). Use createWithResolvedBean() to obtain a HandlerMethod\n instance with a bean instance resolved through the associated BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/HandlerMethod.html
HandlerMethodSelector	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.3, in favor of the generalized and refined MethodIntrospector\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/HandlerMethodSelector.html
MessageCondition	A										<section class="prog__container">Contract for mapping conditions to messages.\n\n Message conditions can be combined (e.g. type + method-level conditions),\n matched to a specific Message, as well as compared to each other in the\n context of a Message to determine which one matches a request more closely.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/MessageCondition.html
MessagingAdviceBean	A										<section class="prog__container">Represents a Spring-managed bean with cross-cutting functionality to be\n applied to one or more Spring beans with annotation-based message\n handling methods.\n\n Component stereotypes such as\n @Controller with annotation\n handler methods often need cross-cutting functionality across all or a subset\n of such annotated components. A primary example of this is the need for "global"\n annotated exception handler methods but the concept applies more generally.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/MessagingAdviceBean.html
DestinationVariable	A										<section class="prog__container">Annotation that indicates a method parameter should be bound to a template variable\n in a destination template string. Supported on message handling methods such as\n @MessageMapping.\n \n A @DestinationVariable template variable is always required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/DestinationVariable.html
Header	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to a message header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/Header.html
Headers	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to the headers of a\n message. The annotated parameter must be assignable to Map with\n String keys and Object values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/Headers.html
MessageExceptionHandler	A										<section class="prog__container">Annotation for handling exceptions thrown from message-handling methods within a\n specific handler class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/MessageExceptionHandler.html
MessageMapping	A										<section class="prog__container">Annotation for mapping a Message onto message-handling methods by matching\n to the message destination. This annotation can also be used on the type-level in\n which case it defines a common destination prefix or pattern for all method-level\n annotations including method-level\n @SubscribeMapping\n annotations.\n\n Handler methods which are annotated with this annotation are allowed to have\n flexible signatures. They may have arguments of the following types, in arbitrary\n order:\n \nMessage to get access to the complete message being processed.\nPayload-annotated method arguments to extract the payload of\n a message and optionally convert it using a\n MessageConverter.\n The presence of the annotation is not required since it is assumed by default\n for method arguments that are not annotated. Payload method arguments annotated\n with Validation annotations (like\n Validated) will be subject to\n JSR-303 validation.\nHeader-annotated method arguments to extract a specific\n header value along with type conversion with a\n Converter if necessary.\nHeaders-annotated argument that must also be assignable to\n Map for getting access to all headers.\nMessageHeaders arguments for\n getting access to all headers.\nMessageHeaderAccessor or\n with STOMP over WebSocket support also sub-classes such as\n SimpMessageHeaderAccessor\n for convenient access to all method arguments.\nDestinationVariable-annotated arguments for access to template\n variable values extracted from the message destination (e.g. /hotels/{hotel}).\n Variable values will be converted to the declared method argument type.\nPrincipal method arguments are supported with\n STOMP over WebSocket messages. It reflects the user logged in to the\n WebSocket session on which the message was received. Regular HTTP-based\n authentication (e.g. Spring Security based) can be used to secure the\n HTTP handshake that initiates WebSocket sessions.\n\nBy default the return value is wrapped as a message and sent to the destination\n specified with an @SendTo method-level annotation.\n\n STOMP over WebSocket\nAn @SendTo annotation is not strictly required — by default\n the message will be sent to the same destination as the incoming message but with\n an additional prefix ("/topic" by default). It is also possible to use the\n SendToUser annotation to\n have the message directed to a specific user if connected. The return value is\n converted with a MessageConverter.\n\n NOTE: When using controller interfaces (e.g. for AOP proxying),\n make sure to consistently put all your mapping annotations - such as\n @MessageMapping and @SubscribeMapping - on\n the controller interface rather than on the implementation class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/MessageMapping.html
Payload	A										<section class="prog__container">Annotation that binds a method parameter to the payload of a message. Can also\n be used to associate a payload to a method invocation. The payload may be passed\n through a MessageConverter to convert it from serialized form with a\n specific MIME type to an Object matching the target method parameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/Payload.html
SendTo	A										<section class="prog__container">Annotation that indicates a method's return value should be converted to\n a Message if necessary and sent to the specified destination.\n\n In a typical request/reply scenario, the incoming Message may\n convey the destination to use for the reply. In that case, that destination\n should take precedence.\n\n The annotation may also be placed at class-level if the provider supports\n it to indicate that all related methods should use this destination if none\n is specified otherwise.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/SendTo.html
ValueConstants	A										<section class="prog__container">Common annotation value constants.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/ValueConstants.html
AbstractMethodArgumentResolutionException	A										<section class="prog__container">Base class for exceptions resulting from the invocation of\n HandlerMethodArgumentResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.html
AbstractNamedValueMethodArgumentResolver	A										<section class="prog__container">Abstract base class for resolving method arguments from a named value. Message headers,\n and path variables are examples of named values. Each may have a name, a required flag,\n and a default value.\n\n Subclasses define how to do the following:\n \nObtain named value information for a method parameter\n Resolve names into argument values\n Handle missing argument values when argument values are required\n Optionally handle a resolved value\n \nA default value string can contain ${...} placeholders and Spring Expression\n Language #{...} expressions. For this to work a ConfigurableBeanFactory\n must be supplied to the class constructor.\n\n A ConversionService may be used to apply type conversion to the resolved\n argument value if it doesn't match the method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.html
AbstractNamedValueMethodArgumentResolver.NamedValueInfo	A										<section class="prog__container">Represents the information about a named value, including name, whether it's\n required and a default value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.NamedValueInfo.html
AnnotationExceptionHandlerMethodResolver	A										<section class="prog__container">A sub-class of AbstractExceptionHandlerMethodResolver that looks for\n MessageExceptionHandler-annotated methods in a given class. The actual\n exception types handled are extracted either from the annotation, if present,\n or from the method signature as a fallback option.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.html
DefaultMessageHandlerMethodFactory	A										<section class="prog__container">The default MessageHandlerMethodFactory implementation creating an\n InvocableHandlerMethod with the necessary\n HandlerMethodArgumentResolver instances to detect and process\n most of the use cases defined by\n MessageMapping.\n\n Extra method argument resolvers can be added to customize the method\n signature that can be handled.\n\n By default, the validation process redirects to a no-op implementation, see\n setValidator(Validator) to customize it. The ConversionService\n can be customized in a similar manner to tune how the message payload\n can be converted</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/DefaultMessageHandlerMethodFactory.html
DestinationVariableMethodArgumentResolver	A										<section class="prog__container">Resolves method parameters annotated with\n @DestinationVariable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/DestinationVariableMethodArgumentResolver.html
HeaderMethodArgumentResolver	A										<section class="prog__container">Resolves method parameters annotated with @Header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.html
HeadersMethodArgumentResolver	A										<section class="prog__container">Resolves the following method parameters:\n \nParameters assignable to Map annotated with @Headers\nParameters of type MessageHeaders\nParameters assignable to MessageHeaderAccessor\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.html
MessageHandlerMethodFactory	A										<section class="prog__container">A factory for InvocableHandlerMethod that is suitable to process\n an incoming Message\nTypically used by listener endpoints that require a flexible method\n signature.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory.html
MessageMethodArgumentResolver	A										<section class="prog__container">HandlerMethodArgumentResolver for Message method arguments.\n Validates that the generic type of the payload matches to the message value\n or otherwise applies MessageConverter to convert to the expected\n payload type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.html
MethodArgumentNotValidException	A										<section class="prog__container">Exception to be thrown when a method argument fails validation perhaps as a\n result of @Valid style validation, or perhaps because it is required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.html
MethodArgumentTypeMismatchException	A										<section class="prog__container">Exception that indicates that a method argument has not the\n expected type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/MethodArgumentTypeMismatchException.html
PayloadArgumentResolver	A										<section class="prog__container">A resolver to extract and convert the payload of a message using a\n MessageConverter. It also validates the payload using a\n Validator if the argument is annotated with a Validation annotation.\n\n This HandlerMethodArgumentResolver should be ordered last as it\n supports all types and does not require the Payload annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.html
AbstractAsyncReturnValueHandler	A										<section class="prog__container">Convenient base class for AsyncHandlerMethodReturnValueHandler\n implementations that support only asynchronous (Future-like) return values\n and merely serve as adapters of such types to Spring's\n ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/AbstractAsyncReturnValueHandler.html
AbstractExceptionHandlerMethodResolver	A										<section class="prog__container">Cache exception handling method mappings and provide options to look up a method\n that should handle an exception. If multiple methods match, they are sorted using\n ExceptionDepthComparator and the top match is returned.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.html
AbstractMethodMessageHandler	A										<section class="prog__container">Abstract base class for HandlerMethod-based message handling. Provides most of\n the logic required to discover handler methods at startup, find a matching handler\n method at runtime for a given message and invoke it.\n\n Also supports discovering and invoking exception handling methods to process\n exceptions raised during message handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.html
AsyncHandlerMethodReturnValueHandler	A										<section class="prog__container">An extension of HandlerMethodReturnValueHandler for handling async,\n Future-like return value types that support success and error callbacks.\n Essentially anything that can be adapted to a ListenableFuture.\n\n Implementations should consider extending the convenient base class\n AbstractAsyncReturnValueHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/AsyncHandlerMethodReturnValueHandler.html
CompletableFutureReturnValueHandler	A										<section class="prog__container">Support for CompletableFuture as a return value type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/CompletableFutureReturnValueHandler.html
HandlerMethodArgumentResolver	A										<section class="prog__container">Strategy interface for resolving method parameters into argument values\n in the context of a given Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolver.html
HandlerMethodArgumentResolverComposite	A										<section class="prog__container">Resolves method parameters by delegating to a list of registered\n HandlerMethodArgumentResolver. Previously resolved method parameters are cached\n for faster lookups.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.html
HandlerMethodReturnValueHandler	A										<section class="prog__container">Strategy interface to handle the value returned from the invocation of a\n method handling a Message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandler.html
HandlerMethodReturnValueHandlerComposite	A										<section class="prog__container">A HandlerMethodReturnValueHandler that wraps and delegates to others.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.html
InvocableHandlerMethod	A										<section class="prog__container">Provides a method for invoking the handler method for a given message after resolving its\n method argument values through registered HandlerMethodArgumentResolvers.\n\n Use setMessageMethodArgumentResolvers(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite) to customize the list of argument resolvers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.html
ListenableFutureReturnValueHandler	A										<section class="prog__container">Support for ListenableFuture as a return value type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/handler/invocation/ListenableFutureReturnValueHandler.html
SimpAttributes	A										<section class="prog__container">A wrapper class for access to attributes associated with a SiMP session\n (e.g. WebSocket session).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpAttributes.html
SimpAttributesContextHolder	A										<section class="prog__container">Holder class to expose SiMP attributes associated with a session (e.g. WebSocket)\n in the form of a thread-bound SimpAttributes object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpAttributesContextHolder.html
SimpMessageHeaderAccessor	A										<section class="prog__container">A base class for working with message headers in simple messaging protocols that\n support basic messaging patterns. Provides uniform access to specific values common\n across protocols such as a destination, message type (e.g. publish, subscribe, etc),\n session id, and others.\n\n Use one of the static factory method in this class, then call getters and setters,\n and at the end if necessary call MessageHeaderAccessor.toMap() to obtain the updated headers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessageHeaderAccessor.html
SimpMessageMappingInfo	A										<section class="prog__container">Encapsulates the following request mapping conditions:\n \nSimpMessageTypeMessageCondition\nDestinationPatternsMessageCondition\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessageMappingInfo.html
SimpMessageSendingOperations	A										<section class="prog__container">A specialization of MessageSendingOperations with methods for use with\n the Spring Framework support for Simple Messaging Protocols (like STOMP).\n\n For more on user destinations see\n UserDestinationResolver.\n\n Generally it is expected the user is the one authenticated with the\n WebSocket session (or by extension the user authenticated with the\n handshake request that started the session). However if the session is\n not authenticated, it is also possible to pass the session id (if known)\n in place of the user name. Keep in mind though that in that scenario,\n you must use one of the overloaded methods that accept headers making sure the\n sessionId header has been set accordingly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessageSendingOperations.html
SimpMessageType	A										<section class="prog__container">A generic representation of different kinds of messages found in simple messaging\n protocols like STOMP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessageType.html
SimpMessageTypeMessageCondition	A										<section class="prog__container">A message condition that checks the message type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessageTypeMessageCondition.html
SimpMessagingTemplate	A										<section class="prog__container">An implementation of\n SimpMessageSendingOperations.\n\n Also provides methods for sending messages to a user. See\n UserDestinationResolver\n for more on user destinations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpMessagingTemplate.html
SimpSessionScope	A										<section class="prog__container">A Scope implementation exposing the attributes of a SiMP session\n (e.g. WebSocket session).\n\n Relies on a thread-bound SimpAttributes instance exported by\n SimpAnnotationMethodMessageHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/SimpSessionScope.html
SendToUser	A										<section class="prog__container">Annotation that indicates that the return value of a message-handling method\n should be sent as a Message to the specified\n destination(s) prepended with "/user/{username}" where the user name\n is extracted from the headers of the input message being handled.\n\n The annotation may also be placed at class-level in which case all methods\n in the class where the annotation applies will inherit it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/SendToUser.html
SubscribeMapping	A										<section class="prog__container">Annotation for mapping subscription messages onto specific handler methods based\n on the destination of a subscription. Supported with STOMP over WebSocket only\n (e.g. STOMP SUBSCRIBE frame).\n\n This is a method-level annotation that can be combined with a type-level\n @MessageMapping.\n\n Supports the same method arguments as @MessageMapping; however,\n subscription messages typically do not have a body.\n\n The return value also follows the same rules as for @MessageMapping,\n except if the method is not annotated with\n SendTo or\n SendToUser, the message is sent directly back to the connected\n user and does not pass through the message broker. This is useful for\n implementing a request-reply pattern.\n\n NOTE: When using controller interfaces (e.g. for AOP proxying),\n make sure to consistently put all your mapping annotations - such as\n @MessageMapping and @SubscribeMapping - on\n the controller interface rather than on the implementation class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/SubscribeMapping.html
PrincipalMethodArgumentResolver	A										<section class="prog__container">Resolves a method parameter into an argument value from a given message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/support/PrincipalMethodArgumentResolver.html
SendToMethodReturnValueHandler	A										<section class="prog__container">A HandlerMethodReturnValueHandler for sending to destinations specified in a\n SendTo or SendToUser method-level annotations.\n\n The value returned from the method is converted, and turned to a Message and\n sent through the provided MessageChannel. The message is then enriched with the\n session id of the input message as well as the destination from the annotation(s).\n If multiple destinations are specified, a copy of the message is sent to each destination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.html
SimpAnnotationMethodMessageHandler	A										<section class="prog__container">A handler for messages delegating to @MessageMapping\n and @SubscribeMapping annotated methods.\n\n Supports Ant-style path patterns with template variables.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.html
SubscriptionMethodReturnValueHandler	A										<section class="prog__container">HandlerMethodReturnValueHandler for replying directly to a\n subscription. It is supported on methods annotated with\n SubscribeMapping such that the return value is treated as a response to be\n sent directly back on the session. This allows a client to implement\n a request-response pattern and use it for example to obtain some data upon\n initialization.\n\n The value returned from the method is converted and turned into a\n Message that is then enriched with the sessionId, subscriptionId, and\n destination of the input message.\n\n Note: this default behavior for interpreting the return\n value from an @SubscribeMapping method can be overridden through use\n of the SendTo or SendToUser annotations in which case a\n message is prepared and sent to the broker instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.html
AbstractBrokerMessageHandler	A										<section class="prog__container">Abstract base class for a MessageHandler that broker messages to\n registered subscribers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.html
AbstractSubscriptionRegistry	A										<section class="prog__container">Abstract base class for implementations of SubscriptionRegistry that\n looks up information in messages but delegates to abstract methods for the\n actual storage and retrieval.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.html
BrokerAvailabilityEvent	A										<section class="prog__container">Event raised when a broker's availabilty changes</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/BrokerAvailabilityEvent.html
DefaultSubscriptionRegistry	A										<section class="prog__container">Implementation of SubscriptionRegistry that stores subscriptions\n in memory and uses a PathMatcher\n for matching destinations.\n\n As of 4.2, this class supports a selector\n header on subscription messages with Spring EL expressions evaluated against\n the headers to filter out messages in addition to destination matching.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.html
SimpleBrokerMessageHandler	A										<section class="prog__container">A "simple" message broker that recognizes the message types defined in\n SimpMessageType, keeps track of subscriptions with the help of a\n SubscriptionRegistry and sends messages to subscribers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.html
SubscriptionRegistry	A										<section class="prog__container">A registry of subscription by session that allows looking up subscriptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/broker/SubscriptionRegistry.html
AbstractBrokerRegistration	A										<section class="prog__container">Base class for message broker registration classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/AbstractBrokerRegistration.html
AbstractMessageBrokerConfiguration	A										<section class="prog__container">Provides essential configuration for handling messages with simple messaging\n protocols such as STOMP.\n\n clientInboundChannel() and clientOutboundChannel() deliver\n messages to and from remote clients to several message handlers such as\n \nsimpAnnotationMethodMessageHandler()\nsimpleBrokerMessageHandler()\nstompBrokerRelayMessageHandler()\nuserDestinationMessageHandler()\n\n while brokerChannel() delivers messages from within the application to the\n the respective message handlers. brokerMessagingTemplate() can be injected\n into any application component to send messages.\n\n Subclasses are responsible for the part of the configuration that feed messages\n to and from the client inbound/outbound channels (e.g. STOMP over WebSocket).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.html
ChannelRegistration	A										<section class="prog__container">A registration class for customizing the configuration for a\n MessageChannel.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/ChannelRegistration.html
MessageBrokerRegistry	A										<section class="prog__container">A registry for configuring message broker options.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/MessageBrokerRegistry.html
SimpleBrokerRegistration	A										<section class="prog__container">Registration class for configuring a SimpleBrokerMessageHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/SimpleBrokerRegistration.html
StompBrokerRelayRegistration	A										<section class="prog__container">Registration class for configuring a StompBrokerRelayMessageHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/StompBrokerRelayRegistration.html
TaskExecutorRegistration	A										<section class="prog__container">A registration class for customizing the properties of ThreadPoolTaskExecutor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/config/TaskExecutorRegistration.html
BufferingStompDecoder	A										<section class="prog__container">An extension of StompDecoder\n that buffers content remaining in the input ByteBuffer after the parent\n class has read all (complete) STOMP frames from it. The remaining content\n represents an incomplete STOMP frame. When called repeatedly with additional\n data, the decode method returns one or more messages or, if there is not\n enough data still, continues to buffer.\n\n A single instance of this decoder can be invoked repeatedly to read all\n messages from a single stream (e.g. WebSocket session) as long as decoding\n does not fail. If there is an exception, StompDecoder instance should not\n be used any more as its internal state is not guaranteed to be consistent.\n It is expected that the underlying session is closed at that point.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/BufferingStompDecoder.html
ConnectionHandlingStompSession	A										<section class="prog__container">A StompSession that implements\n TcpConnectionHandler in order to send and receive messages.\n\n A ConnectionHandlingStompSession can be used with any TCP or WebSocket\n library that is adapted to the TcpConnectionHandler contract.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/ConnectionHandlingStompSession.html
ConnectionLostException	A										<section class="prog__container">Raised when the connection for a STOMP session is lost rather than closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/ConnectionLostException.html
DefaultStompSession	A										<section class="prog__container">Default implementation of ConnectionHandlingStompSession.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/DefaultStompSession.html
Reactor2StompCodec	A										<section class="prog__container">A Reactor TCP Codec for sending and receiving STOMP messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/Reactor2StompCodec.html
Reactor2TcpStompClient	A										<section class="prog__container">A STOMP over TCP client that uses\n Reactor2TcpClient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.html
StompBrokerRelayMessageHandler	A										<section class="prog__container">A MessageHandler that handles messages by\n forwarding them to a STOMP broker.\n\n For each new CONNECT message, an independent TCP\n connection to the broker is opened and used exclusively for all messages from the\n client that originated the CONNECT message. Messages from the same client are\n identified through the session id message header. Reversely, when the STOMP broker\n sends messages back on the TCP connection, those messages are enriched with the session\n id of the client and sent back downstream through the MessageChannel provided\n to the constructor.\n\n This class also automatically opens a default "system" TCP connection to the message\n broker that is used for sending messages that originate from the server application (as\n opposed to from a client). Such messages are not associated with any client and\n therefore do not have a session id header. The "system" connection is effectively\n shared and cannot be used to receive messages. Several properties are provided to\n configure the "system" connection including:\n \nsetSystemLogin(String)\nsetSystemPasscode(String)\nsetSystemHeartbeatSendInterval(long)\nsetSystemHeartbeatReceiveInterval(long)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.html
StompClientSupport	A										<section class="prog__container">Base class for STOMP client implementations.\n\n Subclasses can connect over WebSocket or TCP using any library. When creating\n a new connection, a subclass can create an instance of @link DefaultStompSession}\n which extends TcpConnectionHandler\n whose lifecycle methods the subclass must then invoke.\n\n In effect, TcpConnectionHandler and TcpConnection are the\n contracts that any subclass must adapt to while using StompEncoder\n and StompDecoder to encode and decode STOMP messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompClientSupport.html
StompCommand	A										<section class="prog__container">Represents a STOMP command.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompCommand.html
StompConversionException	A										<section class="prog__container">Raised after a failure to encode or decode a STOMP message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompConversionException.html
StompDecoder	A										<section class="prog__container">Decodes one or more STOMP frames contained in a ByteBuffer.\n\n An attempt is made to read all complete STOMP frames from the buffer, which\n could be zero, one, or more. If there is any left-over content, i.e. an incomplete\n STOMP frame, at the end the buffer is reset to point to the beginning of the\n partial content. The caller is then responsible for dealing with that\n incomplete content by buffering until there is more input available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompDecoder.html
StompEncoder	A										<section class="prog__container">An encoder for STOMP frames.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompEncoder.html
StompFrameHandler	A										<section class="prog__container">Contract to handle a STOMP frame.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompFrameHandler.html
StompHeaderAccessor	A										<section class="prog__container">A MessageHeaderAccessor to use when creating a Message from\n a decoded STOMP frame, or when encoding a Message to a STOMP frame.\n\n When created from STOMP frame content, the actual STOMP headers are\n stored in the native header sub-map managed by the parent class\n NativeMessageHeaderAccessor\n while the parent class SimpMessageHeaderAccessor manages common\n processing headers some of which are based on STOMP headers\n (e.g. destination, content-type, etc).\n\n An instance of this class can also be created by wrapping an existing\n Message. That message may have been created with the more generic\n SimpMessageHeaderAccessor in\n which case STOMP headers are created from common processing headers.\n In this case it is also necessary to invoke either\n updateStompCommandAsClientMessage() or\n updateStompCommandAsServerMessage() if sending a message and\n depending on whether a message is sent to a client or the message broker.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompHeaderAccessor.html
StompHeaders	A										<section class="prog__container">Represents STOMP frame headers.\n\n In addition to the normal methods defined by Map, this class offers\n the following convenience methods:\n \ngetFirst(String) return the first value for a header name\nadd(String, String) add to the list of values for a header name\nset(String, String) set a header name to a single string value\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompHeaders.html
StompSession	A										<section class="prog__container">Represents a STOMP session with operations to send messages, create\n subscriptions and receive messages on those subscriptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompSession.html
StompSession.Receiptable	A										<section class="prog__container">A handle to use to track receipts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompSession.Receiptable.html
StompSession.Subscription	A										<section class="prog__container">A handle to use to unsubscribe or to track a receipt.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompSession.Subscription.html
StompSessionHandler	A										<section class="prog__container">A contract for client STOMP session lifecycle events including a callback\n when the session is established and notifications of transport or message\n handling failures.\n\n This contract also extends StompFrameHandler in order to handle\n STOMP ERROR frames received from the broker.\n\n Implementations of this interface should consider extending\n StompSessionHandlerAdapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompSessionHandler.html
StompSessionHandlerAdapter	A										<section class="prog__container">Abstract adapter class for StompSessionHandler with mostly empty\n implementation methods except for getPayloadType(org.springframework.messaging.simp.stomp.StompHeaders) which returns String\n as the default Object type expected for STOMP ERROR frame payloads.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompSessionHandlerAdapter.html
DefaultUserDestinationResolver	A										<section class="prog__container">A default implementation of UserDestinationResolver that relies\n on a SimpUserRegistry to find active sessions for a user.\n\n When a user attempts to subscribe, e.g. to "/user/queue/position-updates",\n the "/user" prefix is removed and a unique suffix added based on the session\n id, e.g. "/queue/position-updates-useri9oqdfzo" to ensure different users can\n subscribe to the same logical destination without colliding.\n\n When sending to a user, e.g. "/user/{username}/queue/position-updates", the\n "/user/{username}" prefix is removed and a suffix based on active session id's\n is added, e.g. "/queue/position-updates-useri9oqdfzo".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.html
DefaultUserSessionRegistry	A										<section class="prog__container">Deprecated. \nas of 4.2 this class is no longer used, see deprecation notes\n on UserSessionRegistry for more details.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/DefaultUserSessionRegistry.html
DestinationUserNameProvider	A										<section class="prog__container">A Principal can also implement this contract when\n getName() isn't globally unique\n and therefore not suited for use with "user" destinations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/DestinationUserNameProvider.html
MultiServerUserRegistry	A										<section class="prog__container">SimpUserRegistry that looks up users in a "local" user registry as\n well as a set of "remote" user registries. The local registry is provided as\n a constructor argument while remote registries are updated via broadcasts\n handled by UserRegistryMessageHandler which in turn notifies this\n registry when updates are received.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/MultiServerUserRegistry.html
SimpSession	A										<section class="prog__container">Represents a session of connected user.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/SimpSession.html
SimpSubscription	A										<section class="prog__container">Represents a subscription within a user session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/SimpSubscription.html
SimpSubscriptionMatcher	A										<section class="prog__container">A strategy for matching subscriptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/SimpSubscriptionMatcher.html
SimpUser	A										<section class="prog__container">Represents a connected user.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/SimpUser.html
SimpUserRegistry	A										<section class="prog__container">A registry of currently connected users.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/SimpUserRegistry.html
UserDestinationMessageHandler	A										<section class="prog__container">MessageHandler with support for "user" destinations.\n\n Listens for messages with "user" destinations, translates their destination\n to actual target destinations unique to the active session(s) of a user, and\n then sends the resolved messages to the broker channel to be delivered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserDestinationMessageHandler.html
UserDestinationResolver	A										<section class="prog__container">A strategy for resolving a "user" destination by translating it to one or more\n actual destinations one per active user session. When sending a message to a\n user destination, the destination must contain the user name so it may be\n extracted and used to look up the user sessions. When subscribing to a user\n destination, the destination does not have to contain the user's own name.\n We simply use the current session.\n\n See implementation classes and the documentation for example destinations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserDestinationResolver.html
UserDestinationResult	A										<section class="prog__container">Contains the result from parsing a "user" destination from a source message\n and translating it to target destinations (one per active user session).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserDestinationResult.html
UserRegistryMessageHandler	A										<section class="prog__container">MessageHandler that handles user registry broadcasts from other\n application servers and periodically broadcasts the content of the local\n user registry.\n\n The aggregated information\n is maintained in a MultiServerUserRegistry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserRegistryMessageHandler.html
UserSessionRegistry	A										<section class="prog__container">Deprecated. \nin favor of SimpUserRegistry in combination with\n ApplicationListener listening for\n AbstractSubProtocolEvent events.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserSessionRegistry.html
UserSessionRegistryAdapter	A										<section class="prog__container">An adapter that allows a UserSessionRegistry, which is deprecated in\n favor of SimpUserRegistry, to be used as a  SimpUserRegistry.\n Due to the more limited information available, methods such as\n getUsers() and findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher) are not supported.\n\n As of 4.2, this adapter is used only in applications that explicitly\n register a custom UserSessionRegistry bean by overriding\n AbstractMessageBrokerConfiguration.userSessionRegistry().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/user/UserSessionRegistryAdapter.html
AbstractHeaderMapper	A										<section class="prog__container">A base HeaderMapper implementation</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/AbstractHeaderMapper.html
AbstractMessageChannel.ChannelInterceptorChain	A										<section class="prog__container">Assists with the invocation of the configured channel interceptors.</section>	No URL found
AbstractMessageChannel	A										<section class="prog__container">Abstract base class for MessageChannel implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/AbstractMessageChannel.html
AbstractSubscribableChannel	A										<section class="prog__container">Abstract base class for SubscribableChannel implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/AbstractSubscribableChannel.html
ChannelInterceptor	A										<section class="prog__container">Interface for interceptors that are able to view and/or modify the\n Messages being sent-to and/or received-from a\n MessageChannel.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ChannelInterceptor.html
ChannelInterceptorAdapter	A										<section class="prog__container">A ChannelInterceptor base class with empty method implementations\n as a convenience.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ChannelInterceptorAdapter.html
ErrorMessage	A										<section class="prog__container">A GenericMessage with a Throwable payload.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ErrorMessage.html
ExecutorChannelInterceptor	A										<section class="prog__container">An extension of ChannelInterceptor with callbacks to intercept the\n asynchronous sending of a Message to\n a specific subscriber through an Executor.\n Supported on MessageChannel\n implementations that can be configured with an Executor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ExecutorChannelInterceptor.html
ExecutorSubscribableChannel	A										<section class="prog__container">A SubscribableChannel that sends messages to each of its subscribers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ExecutorSubscribableChannel.html
GenericMessage	A										<section class="prog__container">An implementation of Message with a generic payload.\n Once created, a GenericMessage is immutable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/GenericMessage.html
HeaderMapper	A										<section class="prog__container">Generic strategy interface for mapping MessageHeaders to and from other\n types of objects. This would typically be used by adapters where the "other type"\n has a concept of headers or properties (HTTP, JMS, AMQP, etc).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/HeaderMapper.html
IdTimestampMessageHeaderInitializer	A										<section class="prog__container">A MessageHeaderInitializer\n to customize the strategy for ID and TIMESTAMP message header generation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/IdTimestampMessageHeaderInitializer.html
ImmutableMessageChannelInterceptor	A										<section class="prog__container">A simpler interceptor that calls MessageHeaderAccessor.setImmutable()\n on the headers of messages passed through the preSend method.\n\n When configured as the last interceptor in a chain, it allows the component\n sending the message to leave headers mutable for interceptors to modify prior\n to the message actually being sent and exposed to concurrent access.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/ImmutableMessageChannelInterceptor.html
InterceptableChannel	A										<section class="prog__container">A MessageChannel that\n maintains a list ChannelInterceptors and allows interception of message sending.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/InterceptableChannel.html
MessageBuilder	A										<section class="prog__container">A builder for creating a GenericMessage\n (or ErrorMessage if the payload is of type Throwable).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/MessageBuilder.html
MessageHandlingRunnable	A										<section class="prog__container">Extension of the Runnable interface with methods to obtain the\n MessageHandler and Message to be handled.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/MessageHandlingRunnable.html
MessageHeaderAccessor	A										<section class="prog__container">A base for classes providing strongly typed getters and setters as well as\n behavior around specific categories of headers (e.g. STOMP headers).\n Supports creating new headers, modifying existing headers (when still mutable),\n or copying and modifying existing headers.\n\n The method getMessageHeaders() provides access to the underlying,\n fully-prepared MessageHeaders that can then be used as-is (i.e.\n without copying) to create a single message as follows:\n\n \n MessageHeaderAccessor accessor = new MessageHeaderAccessor();\n accessor.setHeader("foo", "bar");\n Message message = MessageBuilder.createMessage("payload", accessor.getMessageHeaders());\n \nAfter the above, by default the MessageHeaderAccessor becomes\n immutable. However it is possible to leave it mutable for further initialization\n in the same thread, for example:\n\n \n MessageHeaderAccessor accessor = new MessageHeaderAccessor();\n accessor.setHeader("foo", "bar");\n accessor.setLeaveMutable(true);\n Message message = MessageBuilder.createMessage("payload", accessor.getMessageHeaders());\n\n // later on in the same thread...\n\n MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message);\n accessor.setHeader("bar", "baz");\n accessor.setImmutable();\n \nThe method toMap() returns a copy of the underlying headers. It can\n be used to prepare multiple messages from the same MessageHeaderAccessor\n instance:\n \n MessageHeaderAccessor accessor = new MessageHeaderAccessor();\n MessageBuilder builder = MessageBuilder.withPayload("payload").setHeaders(accessor);\n\n accessor.setHeader("foo", "bar1");\n Message message1 = builder.build();\n\n accessor.setHeader("foo", "bar2");\n Message message2 = builder.build();\n\n accessor.setHeader("foo", "bar3");\n Message  message3 = builder.build();\n \nHowever note that with the above style, the header accessor is shared and\n cannot be re-obtained later on. Alternatively it is also possible to create\n one MessageHeaderAccessor per message:\n\n \n MessageHeaderAccessor accessor1 = new MessageHeaderAccessor();\n accessor.set("foo", "bar1");\n Message message1 = MessageBuilder.createMessage("payload", accessor1.getMessageHeaders());\n\n MessageHeaderAccessor accessor2 = new MessageHeaderAccessor();\n accessor.set("foo", "bar2");\n Message message2 = MessageBuilder.createMessage("payload", accessor2.getMessageHeaders());\n\n MessageHeaderAccessor accessor3 = new MessageHeaderAccessor();\n accessor.set("foo", "bar3");\n Message message3 = MessageBuilder.createMessage("payload", accessor3.getMessageHeaders());\n \nNote that the above examples aim to demonstrate the general idea of using\n header accessors. The most likely usage however is through subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/MessageHeaderAccessor.html
MessageHeaderInitializer	A										<section class="prog__container">Callback interface for initializing a MessageHeaderAccessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/MessageHeaderInitializer.html
NativeMessageHeaderAccessor	A										<section class="prog__container">An extension of MessageHeaderAccessor that also stores and provides read/write\n access to message headers from an external source -- e.g. a Spring Message\n created to represent a STOMP message received from a STOMP client or message broker.\n Native message headers are kept in a Map<String, List<String>> under the key\n NATIVE_HEADERS.\n\n This class is not intended for direct use but is rather expected to be used\n indirectly through protocol-specific sub-classes such as\n StompHeaderAccessor.\n Such sub-classes may provide factory methods to translate message headers from\n an external messaging source (e.g. STOMP) to Spring Message headers and\n reversely to translate Spring Message headers to a message to send to an\n external source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/support/NativeMessageHeaderAccessor.html
FixedIntervalReconnectStrategy	A										<section class="prog__container">A simple strategy for making reconnect attempts at a fixed interval.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/FixedIntervalReconnectStrategy.html
ReconnectStrategy	A										<section class="prog__container">A contract to determine the frequency of reconnect attempts after connection failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/ReconnectStrategy.html
TcpConnection	A										<section class="prog__container">A contract for sending messages and managing a TCP connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/TcpConnection.html
TcpConnectionHandler	A										<section class="prog__container">A contract for managing lifecycle events for a TCP connection including\n the handling of incoming messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/TcpConnectionHandler.html
TcpOperations	A										<section class="prog__container">A contract for establishing TCP connections.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/TcpOperations.html
Reactor2TcpClient	A										<section class="prog__container">An implementation of TcpOperations\n based on the TCP client support of the Reactor project.\n\n This implementation wraps N (Reactor) clients for N connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>) calls,\n i.e. a separate (Reactor) client instance for each connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.html
Reactor2TcpConnection	A										<section class="prog__container">An implementation of TcpConnection based on the TCP client support of the Reactor project.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.html
MockEnvironment	A										<section class="prog__container">Simple ConfigurableEnvironment implementation exposing\n setProperty(String, String) and withProperty(String, String)\n methods for testing purposes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/env/MockEnvironment.html
MockPropertySource	A										<section class="prog__container">Simple PropertySource implementation for use in testing. Accepts\n a user-provided Properties object, or if omitted during construction,\n the implementation will initialize its own.\n\n The setProperty(java.lang.String, java.lang.Object) and withProperty(java.lang.String, java.lang.Object) methods are exposed for\n convenience, for example:\n \n PropertySource<?> source = new MockPropertySource().withProperty("foo", "bar");\n \n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/env/MockPropertySource.html
MockHttpInputMessage	A										<section class="prog__container">Mock implementation of HttpInputMessage.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/http/MockHttpInputMessage.html
MockHttpOutputMessage	A										<section class="prog__container">Mock implementation of HttpOutputMessage.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/http/MockHttpOutputMessage.html
MockAsyncClientHttpRequest	A										<section class="prog__container">An extension of MockClientHttpRequest that also implements\n AsyncClientHttpRequest by wrapping the response in a\n SettableListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/http/client/MockAsyncClientHttpRequest.html
MockClientHttpRequest	A										<section class="prog__container">Mock implementation of ClientHttpRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/http/client/MockClientHttpRequest.html
MockClientHttpResponse	A										<section class="prog__container">Mock implementation of ClientHttpResponse.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/http/client/MockClientHttpResponse.html
ExpectedLookupTemplate	A										<section class="prog__container">Simple extension of the JndiTemplate class that always returns a given object.\n\n Very useful for testing. Effectively a mock object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/jndi/ExpectedLookupTemplate.html
SimpleNamingContext	A										<section class="prog__container">Simple implementation of a JNDI naming context.\n Only supports binding plain Objects to String names.\n Mainly for test environments, but also usable for standalone applications.\n\n This class is not intended for direct usage by applications, although it\n can be used for example to override JndiTemplate's createInitialContext\n method in unit tests. Typically, SimpleNamingContextBuilder will be used to\n set up a JVM-level JNDI environment.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/jndi/SimpleNamingContext.html
SimpleNamingContextBuilder	A										<section class="prog__container">Simple implementation of a JNDI naming context builder.\n\n Mainly targeted at test environments, where each test case can\n configure JNDI appropriately, so that new InitialContext()\n will expose the required objects. Also usable for standalone applications,\n e.g. for binding a JDBC DataSource to a well-known JNDI location, to be\n able to use traditional J2EE data access code outside of a J2EE container.\n\n There are various choices for DataSource implementations:\n \nSingleConnectionDataSource (using the same Connection for all getConnection calls)\n DriverManagerDataSource (creating a new Connection on each getConnection call)\n Apache's Commons DBCP offers org.apache.commons.dbcp.BasicDataSource (a real pool)\n \nTypical usage in bootstrap code:\n\n \n SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder();\n DataSource ds = new DriverManagerDataSource(...);\n builder.bind("java:comp/env/jdbc/myds", ds);\n builder.activate();\n\n Note that it's impossible to activate multiple builders within the same JVM,\n due to JNDI restrictions. Thus to configure a fresh builder repeatedly, use\n the following code to get a reference to either an already activated builder\n or a newly activated one:\n\n \n SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder();\n DataSource ds = new DriverManagerDataSource(...);\n builder.bind("java:comp/env/jdbc/myds", ds);\n\n Note that you should not call activate() on a builder from\n this factory method, as there will already be an activated one in any case.\n\n An instance of this class is only necessary at setup time.\n An application does not need to keep a reference to it after activation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/jndi/SimpleNamingContextBuilder.html
MockStaticEntityMethods	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of a custom aspect for such purposes\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/staticmock/MockStaticEntityMethods.html
DelegatingServletInputStream	A										<section class="prog__container">Delegating implementation of ServletInputStream.\n\n Used by MockHttpServletRequest; typically not directly\n used for testing application controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/DelegatingServletInputStream.html
DelegatingServletOutputStream	A										<section class="prog__container">Delegating implementation of ServletOutputStream.\n\n Used by MockHttpServletResponse; typically not directly\n used for testing application controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/DelegatingServletOutputStream.html
MockAsyncContext	A										<section class="prog__container">Mock implementation of the AsyncContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockAsyncContext.html
MockBodyContent	A										<section class="prog__container">Mock implementation of the BodyContent class.\n\n Used for testing the web framework; only necessary for testing\n applications when testing custom JSP tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockBodyContent.html
MockExpressionEvaluator	A										<section class="prog__container">Mock implementation of the JSP 2.0 ExpressionEvaluator\n interface, delegating to the Apache JSTL ExpressionEvaluatorManager.\n\n Used for testing the web framework; only necessary for testing applications\n when testing custom JSP tags.\n\n Note that the Apache JSTL implementation (jstl.jar, standard.jar) has to be\n available on the class path to use this expression evaluator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockExpressionEvaluator.html
MockFilterChain	A										<section class="prog__container">Mock implementation of the FilterChain interface. Used\n for testing the web framework; also useful for testing custom\n Filter implementations.\n\n A MockFilterChain can be configured with one or more filters and a\n Servlet to invoke. The first time the chain is called, it invokes all filters\n and the Servlet, and saves the request and response. Subsequent invocations\n raise an IllegalStateException unless reset() is called.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockFilterChain.html
MockFilterConfig	A										<section class="prog__container">Mock implementation of the FilterConfig interface.\n\n Used for testing the web framework; also useful for testing\n custom Filter implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockFilterConfig.html
MockHttpServletRequest	A										<section class="prog__container">Mock implementation of the HttpServletRequest interface.\n\n The default, preferred Locale for the server mocked by this request\n is Locale.ENGLISH. This value can be changed via addPreferredLocale(java.util.Locale)\n or setPreferredLocales(java.util.List<java.util.Locale>).\n\n As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockHttpServletRequest.html
MockHttpServletResponse	A										<section class="prog__container">Mock implementation of the HttpServletResponse interface.\n\n As of Spring 4.0, this set of mocks is designed on a Servlet 3.0 baseline.\n Beyond that, MockHttpServletResponse is also compatible with Servlet\n 3.1's setContentLengthLong() method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockHttpServletResponse.html
MockHttpSession	A										<section class="prog__container">Mock implementation of the HttpSession interface.\n\n As of Spring 4.0, this set of mocks is designed on a Servlet 3.0 baseline.\n\n Used for testing the web framework; also useful for testing application\n controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockHttpSession.html
MockJspWriter	A										<section class="prog__container">Mock implementation of the JspWriter class.\n\n Used for testing the web framework; only necessary for testing\n applications when testing custom JSP tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockJspWriter.html
MockMultipartFile	A										<section class="prog__container">Mock implementation of the MultipartFile\n interface.\n\n Useful in conjunction with a MockMultipartHttpServletRequest\n for testing application controllers that access multipart uploads.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockMultipartFile.html
MockMultipartHttpServletRequest	A										<section class="prog__container">Mock implementation of the\n MultipartHttpServletRequest interface.\n\n As of Spring 4.0, this set of mocks is designed on a Servlet 3.0 baseline.\n\n Useful for testing application controllers that access multipart uploads.\n The MockMultipartFile can be used to populate these mock requests\n with files.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockMultipartHttpServletRequest.html
MockPageContext	A										<section class="prog__container">Mock implementation of the PageContext interface.\n\n Used for testing the web framework; only necessary for testing\n applications when testing custom JSP tags.\n\n Note: Expects initialization via the constructor rather than via the\n PageContext.initialize method. Does not support writing to a\n JspWriter, request dispatching, or handlePageException calls.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockPageContext.html
MockRequestDispatcher	A										<section class="prog__container">Mock implementation of the RequestDispatcher interface.\n\n Used for testing the web framework; typically not necessary for\n testing application controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockRequestDispatcher.html
MockServletConfig	A										<section class="prog__container">Mock implementation of the ServletConfig interface.\n\n Used for testing the web framework; typically not necessary for\n testing application controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockServletConfig.html
MockServletContext	A										<section class="prog__container">Mock implementation of the ServletContext interface.\n\n As of Spring 4.0, this set of mocks is designed on a Servlet 3.0 baseline.\n\n Compatible with Servlet 3.0 but can be configured to expose a specific version\n through setMajorVersion(int)/setMinorVersion(int); default is 3.0.\n Note that Servlet 3.0 support is limited: servlet, filter and listener\n registration methods are not supported; neither is JSP configuration.\n We generally do not recommend to unit test your ServletContainerInitializers and\n WebApplicationInitializers which is where those registration methods would be used.\n\n Used for testing the Spring web framework; only rarely necessary for testing\n application controllers. As long as application components don't explicitly\n access the ServletContext, ClassPathXmlApplicationContext or\n FileSystemXmlApplicationContext can be used to load the context files\n for testing, even for DispatcherServlet context definitions.\n\n For setting up a full WebApplicationContext in a test environment,\n you can use AnnotationConfigWebApplicationContext,\n XmlWebApplicationContext, or GenericWebApplicationContext,\n passing in an appropriate MockServletContext instance. You might want\n to configure your MockServletContext with a FileSystemResourceLoader\n in that case to ensure that resource paths are interpreted as relative filesystem\n locations.\n\n A common setup is to point your JVM working directory to the root of your\n web application directory, in combination with filesystem-based resource loading.\n This allows to load the context files as used in the web application, with\n relative paths getting interpreted correctly. Such a setup will work with both\n FileSystemXmlApplicationContext (which will load straight from the\n filesystem) and XmlWebApplicationContext with an underlying\n MockServletContext (as long as the MockServletContext has been\n configured with a FileSystemResourceLoader).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockServletContext.html
MockSessionCookieConfig	A										<section class="prog__container">Mock implementation of the SessionCookieConfig interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockSessionCookieConfig.html
PassThroughFilterChain	A										<section class="prog__container">Implementation of the FilterConfig interface which\n simply passes the call through to a given Filter/FilterChain combination\n (indicating the next Filter in the chain along with the FilterChain that it is\n supposed to work on) or to a given Servlet (indicating the end of the chain).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/PassThroughFilterChain.html
MockActionRequest	A										<section class="prog__container">Mock implementation of the ActionRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockActionRequest.html
MockActionResponse	A										<section class="prog__container">Mock implementation of the ActionResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockActionResponse.html
MockBaseURL	A										<section class="prog__container">Mock implementation of the BaseURL interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockBaseURL.html
MockCacheControl	A										<section class="prog__container">Mock implementation of the CacheControl interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockCacheControl.html
MockClientDataRequest	A										<section class="prog__container">Mock implementation of the ClientDataRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockClientDataRequest.html
MockEvent	A										<section class="prog__container">Mock implementation of the Event interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockEvent.html
MockEventRequest	A										<section class="prog__container">Mock implementation of the EventRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockEventRequest.html
MockEventResponse	A										<section class="prog__container">Mock implementation of the EventResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockEventResponse.html
MockMimeResponse	A										<section class="prog__container">Mock implementation of the MimeResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockMimeResponse.html
MockMultipartActionRequest	A										<section class="prog__container">Mock implementation of the\n MultipartActionRequest interface.\n\n Useful for testing application controllers that access multipart uploads.\n The MockMultipartFile can be used to\n populate these mock requests with files.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockMultipartActionRequest.html
MockPortalContext	A										<section class="prog__container">Mock implementation of the PortalContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortalContext.html
MockPortletConfig	A										<section class="prog__container">Mock implementation of the PortletConfig interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletConfig.html
MockPortletContext	A										<section class="prog__container">Mock implementation of the PortletContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletContext.html
MockPortletPreferences	A										<section class="prog__container">Mock implementation of the PortletPreferences interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletPreferences.html
MockPortletRequest	A										<section class="prog__container">Mock implementation of the PortletRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletRequest.html
MockPortletRequestDispatcher	A										<section class="prog__container">Mock implementation of the PortletRequestDispatcher interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletRequestDispatcher.html
MockPortletResponse	A										<section class="prog__container">Mock implementation of the PortletResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletResponse.html
MockPortletSession	A										<section class="prog__container">Mock implementation of the PortletSession interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletSession.html
MockPortletURL	A										<section class="prog__container">Mock implementation of the PortletURL interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockPortletURL.html
MockRenderRequest	A										<section class="prog__container">Mock implementation of the RenderRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockRenderRequest.html
MockRenderResponse	A										<section class="prog__container">Mock implementation of the RenderResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockRenderResponse.html
MockResourceRequest	A										<section class="prog__container">Mock implementation of the ResourceRequest interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockResourceRequest.html
MockResourceResponse	A										<section class="prog__container">Mock implementation of the ResourceResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockResourceResponse.html
MockResourceURL	A										<section class="prog__container">Mock implementation of the ResourceURL interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockResourceURL.html
MockStateAwareResponse	A										<section class="prog__container">Mock implementation of the StateAwareResponse interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/MockStateAwareResponse.html
ServletWrappingPortletContext	A										<section class="prog__container">Mock implementation of the PortletContext interface,\n wrapping an underlying ServletContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/portlet/ServletWrappingPortletContext.html
SpringObjenesis	A										<section class="prog__container">Spring-specific variant of ObjenesisStd / ObjenesisBase,\n providing a cache based on Class keys instead of class names,\n and allowing for selective use of the cache.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/objenesis/SpringObjenesis.html
ObjectOptimisticLockingFailureException	A										<section class="prog__container">Exception thrown on an optimistic locking violation for a mapped object.\n Provides information about the persistent class and the identifier.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/ObjectOptimisticLockingFailureException.html
ObjectRetrievalFailureException	A										<section class="prog__container">Exception thrown if a mapped object could not be retrieved via its identifier.\n Provides information about the persistent class and the identifier.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/ObjectRetrievalFailureException.html
AbstractSessionFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html
FilterDefinitionFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.html
HibernateAccessor	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateAccessor.html
HibernateCallback	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateCallback.html
HibernateExceptionTranslator	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateExceptionTranslator.html
HibernateInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 3.2.7, in favor of either HibernateTemplate usage or\n native Hibernate API usage within transactions, in combination with a general\n PersistenceExceptionTranslationPostProcessor.\n Note: This class does not have an equivalent replacement in orm.hibernate4.\n If you desperately need a scoped Session bound through AOP, consider the newly\n introduced OpenSessionInterceptor.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateInterceptor.html
HibernateJdbcException	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateJdbcException.html
HibernateObjectRetrievalFailureException	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateObjectRetrievalFailureException.html
HibernateOperations	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateOperations.html
HibernateOptimisticLockingFailureException	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateOptimisticLockingFailureException.html
HibernateQueryException	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateQueryException.html
HibernateSystemException	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateSystemException.html
HibernateTemplate	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateTemplate.html
HibernateTransactionManager	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateTransactionManager.html
LocalDataSourceConnectionProvider	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/LocalDataSourceConnectionProvider.html
LocalJtaDataSourceConnectionProvider	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/LocalJtaDataSourceConnectionProvider.html
LocalRegionFactoryProxy	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/LocalRegionFactoryProxy.html
LocalSessionFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/LocalSessionFactoryBean.html
LocalTransactionManagerLookup	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/LocalTransactionManagerLookup.html
SessionFactoryUtils	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/SessionFactoryUtils.html
SessionHolder	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/SessionHolder.html
SpringSessionContext	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/SpringSessionContext.html
SpringTransactionFactory	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/SpringTransactionFactory.html
TransactionAwareDataSourceConnectionProvider	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/TransactionAwareDataSourceConnectionProvider.html
TypeDefinitionBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/TypeDefinitionBean.html
AnnotationSessionFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/annotation/AnnotationSessionFactoryBean.html
AbstractLobType	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/AbstractLobType.html
BlobByteArrayType	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/BlobByteArrayType.html
BlobSerializableType	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/BlobSerializableType.html
BlobStringType	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/BlobStringType.html
ClobStringType	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/ClobStringType.html
HibernateDaoSupport	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/HibernateDaoSupport.html
IdTransferringMergeEventListener	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/IdTransferringMergeEventListener.html
OpenSessionInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/OpenSessionInterceptor.html
OpenSessionInViewFilter	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.html
OpenSessionInViewInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.html
ScopedBeanInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of Hibernate 4.x/5.x\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/ScopedBeanInterceptor.html
HibernateCallback	A										<section class="prog__container">Callback interface for Hibernate code. To be used with HibernateTemplate's\n execution methods, often as anonymous classes within a method implementation.\n A typical implementation will call Session.load/find/update to perform\n some operations on persistent objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateCallback.html
HibernateExceptionTranslator	A										<section class="prog__container">PersistenceExceptionTranslator capable of translating HibernateException\n instances to Spring's DataAccessException hierarchy.\n\n Extended by LocalSessionFactoryBean, so there is no need to declare this\n translator in addition to a LocalSessionFactoryBean.\n\n When configuring the container with @Configuration classes, a @Bean\n of this type must be registered manually.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateExceptionTranslator.html
HibernateJdbcException	A										<section class="prog__container">Hibernate-specific subclass of UncategorizedDataAccessException,\n for JDBC exceptions that Hibernate wrapped.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateJdbcException.html
HibernateObjectRetrievalFailureException	A										<section class="prog__container">Hibernate-specific subclass of ObjectRetrievalFailureException.\n Converts Hibernate's UnresolvableObjectException and WrongClassException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateObjectRetrievalFailureException.html
HibernateOperations	A										<section class="prog__container">Interface that specifies a basic set of Hibernate operations,\n implemented by HibernateTemplate. Not often used, but a useful\n option to enhance testability, as it can easily be mocked or stubbed.\n\n Defines HibernateTemplate's data access methods that\n mirror various Session methods. Users are\n strongly encouraged to read the Hibernate Session javadocs\n for details on the semantics of those methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateOperations.html
HibernateOptimisticLockingFailureException	A										<section class="prog__container">Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\n Converts Hibernate's StaleObjectStateException, StaleStateException\n and OptimisticEntityLockException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateOptimisticLockingFailureException.html
HibernateQueryException	A										<section class="prog__container">Hibernate-specific subclass of InvalidDataAccessResourceUsageException,\n thrown on invalid HQL query syntax.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateQueryException.html
HibernateSystemException	A										<section class="prog__container">Hibernate-specific subclass of UncategorizedDataAccessException,\n for Hibernate system errors that do not match any concrete\n org.springframework.dao exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateSystemException.html
HibernateTemplate	A										<section class="prog__container">Helper class that simplifies Hibernate data access code. Automatically\n converts HibernateExceptions into DataAccessExceptions, following the\n org.springframework.dao exception hierarchy.\n\n The central method is execute, supporting Hibernate access code\n implementing the HibernateCallback interface. It provides Hibernate Session\n handling such that neither the HibernateCallback implementation nor the calling\n code needs to explicitly care about retrieving/closing Hibernate Sessions,\n or handling Session lifecycle exceptions. For typical single step actions,\n there are various convenience methods (find, load, saveOrUpdate, delete).\n\n Can be used within a service implementation via direct instantiation\n with a SessionFactory reference, or get prepared in an application context\n and given to services as bean reference. Note: The SessionFactory should\n always be configured as bean in the application context, in the first case\n given to the service directly, in the second case to the prepared template.\n\n NOTE: Hibernate access code can also be coded in plain Hibernate style.\n Hence, for newly started projects, consider adopting the standard Hibernate\n style of coding data access objects instead, based on\n SessionFactory.getCurrentSession().\n This HibernateTemplate primarily exists as a migration helper for Hibernate 3\n based data access code, to benefit from bug fixes in Hibernate 4.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateTemplate.html
HibernateTransactionManager	A										<section class="prog__container">PlatformTransactionManager\n implementation for a single Hibernate SessionFactory.\n Binds a Hibernate Session from the specified factory to the thread,\n potentially allowing for one thread-bound Session per factory.\n SessionFactory.getCurrentSession() is required for Hibernate\n access code that needs to support this transaction handling mechanism,\n with the SessionFactory being configured with SpringSessionContext.\n\n Supports custom isolation levels, and timeouts that get applied as\n Hibernate transaction timeouts.\n\n This transaction manager is appropriate for applications that use a single\n Hibernate SessionFactory for transactional data access, but it also supports\n direct DataSource access within a transaction (i.e. plain JDBC code working\n with the same DataSource). This allows for mixing services which access Hibernate\n and services which use plain JDBC (without being aware of Hibernate)!\n Application code needs to stick to the same simple Connection lookup pattern as\n with DataSourceTransactionManager\n (i.e. DataSourceUtils.getConnection(javax.sql.DataSource)\n or going through a\n TransactionAwareDataSourceProxy).\n\n Note: To be able to register a DataSource's Connection for plain JDBC code,\n this instance needs to be aware of the DataSource (setDataSource(javax.sql.DataSource)).\n The given DataSource should obviously match the one used by the given SessionFactory.\n\n JTA (usually through JtaTransactionManager)\n is necessary for accessing multiple transactional resources within the same\n transaction. The DataSource that Hibernate uses needs to be JTA-enabled in\n such a scenario (see container setup).\n\n This transaction manager supports nested transactions via JDBC 3.0 Savepoints.\n The AbstractPlatformTransactionManager.setNestedTransactionAllowed(boolean) "nestedTransactionAllowed"} flag defaults\n to "false", though, as nested transactions will just apply to the JDBC Connection,\n not to the Hibernate Session and its cached entity objects and related context.\n You can manually set the flag to "true" if you want to use nested transactions\n for JDBC access code which participates in Hibernate transactions (provided that\n your JDBC driver supports Savepoints). Note that Hibernate itself does not\n support nested transactions! Hence, do not expect Hibernate access code to\n semantically participate in a nested transaction.\nNOTE: Hibernate 4.2+ is strongly recommended for efficient transaction\n management with Spring, in particular for transactional Spring JDBC access.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/HibernateTransactionManager.html
LocalSessionFactoryBean	A										<section class="prog__container">FactoryBean that creates a Hibernate\n SessionFactory. This is the usual way to set up a shared\n Hibernate SessionFactory in a Spring application context; the SessionFactory can\n then be passed to Hibernate-based data access objects via dependency injection.\n\n This variant of LocalSessionFactoryBean requires Hibernate 4.0 or higher.\n As of Spring 4.0, it is compatible with (the quite refactored) Hibernate 4.3 as well.\n We recommend using the latest Hibernate 4.2.x or 4.3.x version, depending on whether\n you need to remain JPA 2.0 compatible at runtime (Hibernate 4.2) or can upgrade to\n JPA 2.1 (Hibernate 4.3).\n\n This class is similar in role to the same-named class in the orm.hibernate3\n package. However, in practice, it is closer to AnnotationSessionFactoryBean\n since its core purpose is to bootstrap a SessionFactory from package scanning.\n\n NOTE: To set up Hibernate 4 for Spring-driven JTA transactions, make\n sure to either specify the "jtaTransactionManager"\n bean property or to set the "hibernate.transaction.factory_class" property to\n CMTTransactionFactory.\n Otherwise, Hibernate's smart flushing mechanism won't work properly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/LocalSessionFactoryBean.html
LocalSessionFactoryBuilder	A										<section class="prog__container">A Spring-provided extension of the standard Hibernate Configuration class,\n adding SpringSessionContext as a default and providing convenient ways\n to specify a DataSource and an application class loader.\n\n This is designed for programmatic use, e.g. in @Bean factory methods.\n Consider using LocalSessionFactoryBean for XML bean definition files.\n\n Requires Hibernate 4.0 or higher. As of Spring 4.0, it is compatible with\n (the quite refactored) Hibernate 4.3 as well. We recommend using the latest\n Hibernate 4.2.x or 4.3.x version, depending on whether you need to remain JPA 2.0\n compatible at runtime (Hibernate 4.2) or can upgrade to JPA 2.1 (Hibernate 4.3).\n\n NOTE: To set up Hibernate 4 for Spring-driven JTA transactions, make\n sure to either use the setJtaTransactionManager(java.lang.Object) method or to set the\n "hibernate.transaction.factory_class" property to CMTTransactionFactory.\n Otherwise, Hibernate's smart flushing mechanism won't work properly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.html
SessionFactoryUtils	A										<section class="prog__container">Helper class featuring methods for Hibernate Session handling.\n Also provides support for exception translation.\n\n Used internally by HibernateTransactionManager.\n Can also be used directly in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SessionFactoryUtils.html
SessionHolder	A										<section class="prog__container">Session holder, wrapping a Hibernate Session and a Hibernate Transaction.\n HibernateTransactionManager binds instances of this class to the thread,\n for a given SessionFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SessionHolder.html
SpringFlushSynchronization	A										<section class="prog__container">Simple synchronization adapter that propagates a flush() call\n to the underlying Hibernate Session. Used in combination with JTA.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SpringFlushSynchronization.html
SpringJtaSessionContext	A										<section class="prog__container">Spring-specific subclass of Hibernate's JTASessionContext,\n setting FlushMode.MANUAL for read-only transactions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SpringJtaSessionContext.html
SpringSessionContext	A										<section class="prog__container">Implementation of Hibernate 3.1's CurrentSessionContext interface\n that delegates to Spring's SessionFactoryUtils for providing a\n Spring-managed current Session.\n\n This CurrentSessionContext implementation can also be specified in custom\n SessionFactory setup through the "hibernate.current_session_context_class"\n property, with the fully qualified name of this class as value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SpringSessionContext.html
SpringSessionSynchronization	A										<section class="prog__container">Callback for resource cleanup at the end of a Spring-managed transaction\n for a pre-bound Hibernate Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/SpringSessionSynchronization.html
HibernateDaoSupport	A										<section class="prog__container">Convenient super class for Hibernate-based data access objects.\n\n Requires a SessionFactory to be set, providing a\n HibernateTemplate based on it to\n subclasses through the getHibernateTemplate() method.\n Can alternatively be initialized directly with a HibernateTemplate,\n in order to reuse the latter's settings such as the SessionFactory,\n exception translator, flush mode, etc.\n\n This class will create its own HibernateTemplate instance if a SessionFactory\n is passed in. The "allowCreate" flag on that HibernateTemplate will be "true"\n by default. A custom HibernateTemplate instance can be used through overriding\n createHibernateTemplate(org.hibernate.SessionFactory).\n\n NOTE: Hibernate access code can also be coded in plain Hibernate style.\n Hence, for newly started projects, consider adopting the standard Hibernate\n style of coding data access objects instead, based on\n SessionFactory.getCurrentSession().\n This HibernateTemplate primarily exists as a migration helper for Hibernate 3\n based data access code, to benefit from bug fixes in Hibernate 4.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/support/HibernateDaoSupport.html
OpenSessionInterceptor	A										<section class="prog__container">Simple AOP Alliance MethodInterceptor implementation that binds a new\n Hibernate Session for each method invocation, if none bound before.\n\n This is a simple Hibernate Session scoping interceptor along the lines of\n OpenSessionInViewInterceptor, just for use with AOP setup instead of\n MVC setup. It opens a new Session with flush mode "MANUAL" since the\n Session is only meant for reading, except when participating in a transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/support/OpenSessionInterceptor.html
OpenSessionInViewFilter	A										<section class="prog__container">Servlet Filter that binds a Hibernate Session to the thread for the entire\n processing of the request. Intended for the "Open Session in View" pattern,\n i.e. to allow for lazy loading in web views despite the original transactions\n already being completed.\n\n This filter makes Hibernate Sessions available via the current thread, which\n will be autodetected by transaction managers. It is suitable for service layer\n transactions via HibernateTransactionManager\n as well as for non-transactional execution (if configured appropriately).\n\n NOTE: This filter will by default not flush the Hibernate Session,\n with the flush mode set to FlushMode.NEVER. It assumes to be used\n in combination with service layer transactions that care for the flushing: The\n active transaction manager will temporarily change the flush mode to\n FlushMode.AUTO during a read-write transaction, with the flush\n mode reset to FlushMode.NEVER at the end of each transaction.\n\n WARNING: Applying this filter to existing logic can cause issues that\n have not appeared before, through the use of a single Hibernate Session for the\n processing of an entire request. In particular, the reassociation of persistent\n objects with a Hibernate Session has to occur at the very beginning of request\n processing, to avoid clashes with already loaded instances of the same objects.\n\n Looks up the SessionFactory in Spring's root web application context.\n Supports a "sessionFactoryBeanName" filter init-param in web.xml;\n the default bean name is "sessionFactory".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.html
OpenSessionInViewInterceptor	A										<section class="prog__container">Spring web request interceptor that binds a Hibernate Session to the\n thread for the entire processing of the request.\n\n This class is a concrete expression of the "Open Session in View" pattern, which\n is a pattern that allows for the lazy loading of associations in web views despite\n the original transactions already being completed.\n\n This interceptor makes Hibernate Sessions available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service layer\n transactions via HibernateTransactionManager\n as well as for non-transactional execution (if configured appropriately).\n\n In contrast to OpenSessionInViewFilter, this interceptor is configured\n in a Spring application context and can thus take advantage of bean wiring.\n\n WARNING: Applying this interceptor to existing logic can cause issues\n that have not appeared before, through the use of a single Hibernate\n Session for the processing of an entire request. In particular, the\n reassociation of persistent objects with a Hibernate Session has to\n occur at the very beginning of request processing, to avoid clashes with already\n loaded instances of the same objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.html
HibernateCallback	A										<section class="prog__container">Callback interface for Hibernate code. To be used with HibernateTemplate's\n execution methods, often as anonymous classes within a method implementation.\n A typical implementation will call Session.load/find/update to perform\n some operations on persistent objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateCallback.html
HibernateExceptionTranslator	A										<section class="prog__container">PersistenceExceptionTranslator capable of translating HibernateException\n instances to Spring's DataAccessException hierarchy. As of Spring 4.3.2 and\n Hibernate 5.2, it also converts standard JPA PersistenceException instances.\n\n Extended by LocalSessionFactoryBean, so there is no need to declare this\n translator in addition to a LocalSessionFactoryBean.\n\n When configuring the container with @Configuration classes, a @Bean\n of this type must be registered manually.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateExceptionTranslator.html
HibernateJdbcException	A										<section class="prog__container">Hibernate-specific subclass of UncategorizedDataAccessException,\n for JDBC exceptions that Hibernate wrapped.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateJdbcException.html
HibernateObjectRetrievalFailureException	A										<section class="prog__container">Hibernate-specific subclass of ObjectRetrievalFailureException.\n Converts Hibernate's UnresolvableObjectException and WrongClassException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateObjectRetrievalFailureException.html
HibernateOperations	A										<section class="prog__container">Interface that specifies a basic set of Hibernate operations,\n implemented by HibernateTemplate. Not often used, but a useful\n option to enhance testability, as it can easily be mocked or stubbed.\n\n Defines HibernateTemplate's data access methods that\n mirror various Session methods. Users are\n strongly encouraged to read the Hibernate Session javadocs\n for details on the semantics of those methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateOperations.html
HibernateOptimisticLockingFailureException	A										<section class="prog__container">Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\n Converts Hibernate's StaleObjectStateException, StaleStateException\n and OptimisticEntityLockException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateOptimisticLockingFailureException.html
HibernateQueryException	A										<section class="prog__container">Hibernate-specific subclass of InvalidDataAccessResourceUsageException,\n thrown on invalid HQL query syntax.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateQueryException.html
HibernateSystemException	A										<section class="prog__container">Hibernate-specific subclass of UncategorizedDataAccessException,\n for Hibernate system errors that do not match any concrete\n org.springframework.dao exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateSystemException.html
HibernateTemplate	A										<section class="prog__container">Helper class that simplifies Hibernate data access code. Automatically\n converts HibernateExceptions into DataAccessExceptions, following the\n org.springframework.dao exception hierarchy.\n\n The central method is execute, supporting Hibernate access code\n implementing the HibernateCallback interface. It provides Hibernate Session\n handling such that neither the HibernateCallback implementation nor the calling\n code needs to explicitly care about retrieving/closing Hibernate Sessions,\n or handling Session lifecycle exceptions. For typical single step actions,\n there are various convenience methods (find, load, saveOrUpdate, delete).\n\n Can be used within a service implementation via direct instantiation\n with a SessionFactory reference, or get prepared in an application context\n and given to services as bean reference. Note: The SessionFactory should\n always be configured as bean in the application context, in the first case\n given to the service directly, in the second case to the prepared template.\n\n NOTE: Hibernate access code can also be coded in plain Hibernate style.\n Hence, for newly started projects, consider adopting the standard Hibernate\n style of coding data access objects instead, based on\n SessionFactory.getCurrentSession().\n This HibernateTemplate primarily exists as a migration helper for Hibernate 3\n based data access code, to benefit from bug fixes in Hibernate 5.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateTemplate.html
HibernateTransactionManager	A										<section class="prog__container">PlatformTransactionManager\n implementation for a single Hibernate SessionFactory.\n Binds a Hibernate Session from the specified factory to the thread,\n potentially allowing for one thread-bound Session per factory.\n SessionFactory.getCurrentSession() is required for Hibernate\n access code that needs to support this transaction handling mechanism,\n with the SessionFactory being configured with SpringSessionContext.\n\n Supports custom isolation levels, and timeouts that get applied as\n Hibernate transaction timeouts.\n\n This transaction manager is appropriate for applications that use a single\n Hibernate SessionFactory for transactional data access, but it also supports\n direct DataSource access within a transaction (i.e. plain JDBC code working\n with the same DataSource). This allows for mixing services which access Hibernate\n and services which use plain JDBC (without being aware of Hibernate)!\n Application code needs to stick to the same simple Connection lookup pattern as\n with DataSourceTransactionManager\n (i.e. DataSourceUtils.getConnection(javax.sql.DataSource)\n or going through a\n TransactionAwareDataSourceProxy).\n\n Note: To be able to register a DataSource's Connection for plain JDBC code,\n this instance needs to be aware of the DataSource (setDataSource(javax.sql.DataSource)).\n The given DataSource should obviously match the one used by the given SessionFactory.\n\n JTA (usually through JtaTransactionManager)\n is necessary for accessing multiple transactional resources within the same\n transaction. The DataSource that Hibernate uses needs to be JTA-enabled in\n such a scenario (see container setup).\n\n This transaction manager supports nested transactions via JDBC 3.0 Savepoints.\n The AbstractPlatformTransactionManager.setNestedTransactionAllowed(boolean) "nestedTransactionAllowed"} flag defaults\n to "false", though, as nested transactions will just apply to the JDBC Connection,\n not to the Hibernate Session and its cached entity objects and related context.\n You can manually set the flag to "true" if you want to use nested transactions\n for JDBC access code which participates in Hibernate transactions (provided that\n your JDBC driver supports Savepoints). Note that Hibernate itself does not\n support nested transactions! Hence, do not expect Hibernate access code to\n semantically participate in a nested transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/HibernateTransactionManager.html
LocalSessionFactoryBean	A										<section class="prog__container">FactoryBean that creates a Hibernate\n SessionFactory. This is the usual way to set up a shared\n Hibernate SessionFactory in a Spring application context; the SessionFactory can\n then be passed to Hibernate-based data access objects via dependency injection.\n\n Compatible with Hibernate 5.0/5.1 as well as 5.2, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/LocalSessionFactoryBean.html
LocalSessionFactoryBuilder	A										<section class="prog__container">A Spring-provided extension of the standard Hibernate Configuration class,\n adding SpringSessionContext as a default and providing convenient ways\n to specify a DataSource and an application class loader.\n\n This is designed for programmatic use, e.g. in @Bean factory methods.\n Consider using LocalSessionFactoryBean for XML bean definition files.\n\n Compatible with Hibernate 5.0/5.1 as well as 5.2, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.html
SessionFactoryUtils	A										<section class="prog__container">Helper class featuring methods for Hibernate Session handling.\n Also provides support for exception translation.\n\n Used internally by HibernateTransactionManager.\n Can also be used directly in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SessionFactoryUtils.html
SessionHolder	A										<section class="prog__container">Session holder, wrapping a Hibernate Session and a Hibernate Transaction.\n HibernateTransactionManager binds instances of this class to the thread,\n for a given SessionFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SessionHolder.html
SpringFlushSynchronization	A										<section class="prog__container">Simple synchronization adapter that propagates a flush() call\n to the underlying Hibernate Session. Used in combination with JTA.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SpringFlushSynchronization.html
SpringJtaSessionContext	A										<section class="prog__container">Spring-specific subclass of Hibernate's JTASessionContext,\n setting FlushMode.MANUAL for read-only transactions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SpringJtaSessionContext.html
SpringSessionContext	A										<section class="prog__container">Implementation of Hibernate 3.1's CurrentSessionContext interface\n that delegates to Spring's SessionFactoryUtils for providing a\n Spring-managed current Session.\n\n This CurrentSessionContext implementation can also be specified in custom\n SessionFactory setup through the "hibernate.current_session_context_class"\n property, with the fully qualified name of this class as value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SpringSessionContext.html
SpringSessionSynchronization	A										<section class="prog__container">Callback for resource cleanup at the end of a Spring-managed transaction\n for a pre-bound Hibernate Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/SpringSessionSynchronization.html
HibernateDaoSupport	A										<section class="prog__container">Convenient super class for Hibernate-based data access objects.\n\n Requires a SessionFactory to be set, providing a\n HibernateTemplate based on it to\n subclasses through the getHibernateTemplate() method.\n Can alternatively be initialized directly with a HibernateTemplate,\n in order to reuse the latter's settings such as the SessionFactory,\n exception translator, flush mode, etc.\n\n This class will create its own HibernateTemplate instance if a SessionFactory\n is passed in. The "allowCreate" flag on that HibernateTemplate will be "true"\n by default. A custom HibernateTemplate instance can be used through overriding\n createHibernateTemplate(org.hibernate.SessionFactory).\n\n NOTE: Hibernate access code can also be coded in plain Hibernate style.\n Hence, for newly started projects, consider adopting the standard Hibernate\n style of coding data access objects instead, based on\n SessionFactory.getCurrentSession().\n This HibernateTemplate primarily exists as a migration helper for Hibernate 3\n based data access code, to benefit from bug fixes in Hibernate 5.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/support/HibernateDaoSupport.html
OpenSessionInterceptor	A										<section class="prog__container">Simple AOP Alliance MethodInterceptor implementation that binds a new\n Hibernate Session for each method invocation, if none bound before.\n\n This is a simple Hibernate Session scoping interceptor along the lines of\n OpenSessionInViewInterceptor, just for use with AOP setup instead of\n MVC setup. It opens a new Session with flush mode "MANUAL" since the\n Session is only meant for reading, except when participating in a transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/support/OpenSessionInterceptor.html
OpenSessionInViewFilter	A										<section class="prog__container">Servlet Filter that binds a Hibernate Session to the thread for the entire\n processing of the request. Intended for the "Open Session in View" pattern,\n i.e. to allow for lazy loading in web views despite the original transactions\n already being completed.\n\n This filter makes Hibernate Sessions available via the current thread, which\n will be autodetected by transaction managers. It is suitable for service layer\n transactions via HibernateTransactionManager\n as well as for non-transactional execution (if configured appropriately).\n\n NOTE: This filter will by default not flush the Hibernate Session,\n with the flush mode set to FlushMode.NEVER. It assumes to be used\n in combination with service layer transactions that care for the flushing: The\n active transaction manager will temporarily change the flush mode to\n FlushMode.AUTO during a read-write transaction, with the flush\n mode reset to FlushMode.NEVER at the end of each transaction.\n\n WARNING: Applying this filter to existing logic can cause issues that\n have not appeared before, through the use of a single Hibernate Session for the\n processing of an entire request. In particular, the reassociation of persistent\n objects with a Hibernate Session has to occur at the very beginning of request\n processing, to avoid clashes with already loaded instances of the same objects.\n\n Looks up the SessionFactory in Spring's root web application context.\n Supports a "sessionFactoryBeanName" filter init-param in web.xml;\n the default bean name is "sessionFactory".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/support/OpenSessionInViewFilter.html
OpenSessionInViewInterceptor	A										<section class="prog__container">Spring web request interceptor that binds a Hibernate Session to the\n thread for the entire processing of the request.\n\n This class is a concrete expression of the "Open Session in View" pattern, which\n is a pattern that allows for the lazy loading of associations in web views despite\n the original transactions already being completed.\n\n This interceptor makes Hibernate Sessions available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service layer\n transactions via HibernateTransactionManager\n as well as for non-transactional execution (if configured appropriately).\n\n In contrast to OpenSessionInViewFilter, this interceptor is configured\n in a Spring application context and can thus take advantage of bean wiring.\n\n WARNING: Applying this interceptor to existing logic can cause issues\n that have not appeared before, through the use of a single Hibernate\n Session for the processing of an entire request. In particular, the\n reassociation of persistent objects with a Hibernate Session has to\n occur at the very beginning of request processing, to avoid clashes with already\n loaded instances of the same objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/hibernate5/support/OpenSessionInViewInterceptor.html
DefaultJdoDialect	A										<section class="prog__container">Default implementation of the JdoDialect interface.\n As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0).\n Used as default dialect by JdoTransactionManager.\n\n Simply begins a standard JDO transaction in beginTransaction.\n Returns a handle for a JDO DataStoreConnection on getJdbcConnection.\n Calls the corresponding JDO PersistenceManager operation on flush\n Uses a Spring SQLExceptionTranslator for exception translation, if applicable.\n\n Note that, even with JDO 3.0, vendor-specific subclasses are still necessary\n for special transaction semantics and more sophisticated exception translation.\n Furthermore, vendor-specific subclasses are encouraged to expose the native JDBC\n Connection on getJdbcConnection, rather than JDO 3.0's wrapper handle.\n\n This class also implements the PersistenceExceptionTranslator interface,\n as autodetected by Spring's PersistenceExceptionTranslationPostProcessor,\n for AOP-based translation of native exceptions to Spring DataAccessExceptions.\n Hence, the presence of a standard DefaultJdoDialect bean automatically enables\n a PersistenceExceptionTranslationPostProcessor to translate JDO exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/DefaultJdoDialect.html
JdoDialect	A										<section class="prog__container">SPI strategy that allows for customizing integration with a specific JDO provider,\n in particular regarding transaction management and exception translation. To be\n implemented for specific JDO providers such as JPOX, Kodo, Lido, Versant Open Access.\n\n JDO 3.0 defines standard ways for most of the functionality covered here.\n Hence, Spring's DefaultJdoDialect uses the corresponding JDO 3.0 methods\n by default, to be overridden in a vendor-specific fashion if necessary.\n Vendor-specific subclasses of DefaultJdoDialect are still required for special\n transaction semantics and more sophisticated exception translation (if needed).\n\n In general, it is recommended to derive from DefaultJdoDialect instead\n of implementing this interface directly. This allows for inheriting common\n behavior (present and future) from DefaultJdoDialect, only overriding\n specific hooks to plug in concrete vendor-specific behavior.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoDialect.html
JdoObjectRetrievalFailureException	A										<section class="prog__container">JDO-specific subclass of ObjectRetrievalFailureException.\n Converts JDO's JDOObjectNotFoundException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoObjectRetrievalFailureException.html
JdoOptimisticLockingFailureException	A										<section class="prog__container">JDO-specific subclass of ObjectOptimisticLockingFailureException.\n Converts JDO's JDOOptimisticVerificationException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoOptimisticLockingFailureException.html
JdoResourceFailureException	A										<section class="prog__container">JDO-specific subclass of DataAccessResourceFailureException.\n Converts JDO's JDODataStoreException and JDOFatalDataStoreException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoResourceFailureException.html
JdoSystemException	A										<section class="prog__container">JDO-specific subclass of UncategorizedDataAccessException,\n for JDO system errors that do not match any concrete\n org.springframework.dao exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoSystemException.html
JdoTransactionManager	A										<section class="prog__container">PlatformTransactionManager implementation for a\n single JDO PersistenceManagerFactory. Binds a JDO PersistenceManager\n from the specified factory to the thread, potentially allowing for one thread-bound\n PersistenceManager per factory. PersistenceManagerFactoryUtils and\n SpringPersistenceManagerProxyBean are aware\n of thread-bound persistence managers and participate in such transactions automatically.\n Using either of those (or going through a TransactionAwarePersistenceManagerFactoryProxy\n is required for JDO access code supporting this transaction management mechanism.\n\n This transaction manager is appropriate for applications that use a single\n JDO PersistenceManagerFactory for transactional data access. JTA (usually through\n JtaTransactionManager) is necessary\n for accessing multiple transactional resources within the same transaction.\n Note that you need to configure your JDO provider accordingly in order to make\n it participate in JTA transactions.\n\n This transaction manager also supports direct DataSource access within a\n transaction (i.e. plain JDBC code working with the same DataSource).\n This allows for mixing services which access JDO and services which use plain\n JDBC (without being aware of JDO)! Application code needs to stick to the\n same simple Connection lookup pattern as with\n DataSourceTransactionManager\n (i.e. DataSourceUtils.getConnection(javax.sql.DataSource)\n or going through a\n TransactionAwareDataSourceProxy).\n\n Note: To be able to register a DataSource's Connection for plain JDBC code,\n this instance needs to be aware of the DataSource (setDataSource(javax.sql.DataSource)).\n The given DataSource should obviously match the one used by the given\n PersistenceManagerFactory. This transaction manager will autodetect the DataSource\n that acts as "connectionFactory" of the PersistenceManagerFactory, so you usually\n don't need to explicitly specify the "dataSource" property.\n\n This transaction manager supports nested transactions via JDBC 3.0 Savepoints.\n The AbstractPlatformTransactionManager.setNestedTransactionAllowed(boolean) "nestedTransactionAllowed"} flag defaults\n to "false", though, as nested transactions will just apply to the JDBC Connection,\n not to the JDO PersistenceManager and its cached entity objects and related context.\n You can manually set the flag to "true" if you want to use nested transactions\n for JDBC access code which participates in JDO transactions (provided that your\n JDBC driver supports Savepoints). Note that JDO itself does not support\n nested transactions! Hence, do not expect JDO access code to semantically\n participate in a nested transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoTransactionManager.html
JdoUsageException	A										<section class="prog__container">JDO-specific subclass of InvalidDataAccessApiUsageException.\n Converts JDO's JDOUserException and JDOFatalUserException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/JdoUsageException.html
LocalPersistenceManagerFactoryBean	A										<section class="prog__container">FactoryBean that creates a\n JDO PersistenceManagerFactory. This is the usual way to\n set up a shared JDO PersistenceManagerFactory in a Spring application context;\n the PersistenceManagerFactory can then be passed to JDO-based DAOs via\n dependency injection. Note that switching to a JNDI lookup or to a bean-style\n PersistenceManagerFactory instance is just a matter of configuration!\n\n NOTE: This class requires JDO 3.0 or higher, as of Spring 4.0.\n It will also expose the JPA EntityManagerFactory as long\n as the JDO provider creates a javax.jdo.JDOEntityManagerFactory reference\n underneath, which means that this class can be used as a replacement for\n LocalEntityManagerFactoryBean in such a scenario.\n\n Configuration settings can either be read from a properties file,\n specified as "configLocation", or locally specified. Properties\n specified as "jdoProperties" here will override any settings in a file.\n You may alternatively specify a "persistenceManagerFactoryName",\n referring to a PMF definition in "META-INF/jdoconfig.xml"\n (see setPersistenceManagerFactoryName(java.lang.String)).\n\n This class also implements the\n PersistenceExceptionTranslator\n interface, as autodetected by Spring's\n PersistenceExceptionTranslationPostProcessor,\n for AOP-based translation of native exceptions to Spring DataAccessExceptions.\n Hence, the presence of a LocalPersistenceManagerFactoryBean automatically enables\n a PersistenceExceptionTranslationPostProcessor to translate JDO exceptions.\n\n Alternative: Configuration of a PersistenceManagerFactory provider bean\nAs alternative to the properties-driven approach that this FactoryBean offers\n (which is analogous to using the standard JDOHelper class with a Properties\n object that is populated with standard JDO properties), you can set up an\n instance of your PersistenceManagerFactory implementation class directly.\n\n Like a DataSource, a PersistenceManagerFactory is encouraged to\n support bean-style configuration, which makes it very easy to set up as\n Spring-managed bean. The implementation class becomes the bean class;\n the remaining properties are applied as bean properties (starting with\n lower-case characters, in contrast to the corresponding JDO properties).\n\n For example, in case of JPOX:\n\n \n <bean id="persistenceManagerFactory" class="org.jpox.PersistenceManagerFactoryImpl" destroy-method="close">\n   <property name="connectionFactory" ref="dataSource"/>\n   <property name="nontransactionalRead" value="true"/>\n </bean>\n \nNote that such direct setup of a PersistenceManagerFactory implementation\n is the only way to pass an external connection factory (i.e. a JDBC DataSource)\n into a JDO PersistenceManagerFactory. With the standard properties-driven approach,\n you can only use an internal connection pool or a JNDI DataSource.\n\n The close() method is standardized in JDO; don't forget to\n specify it as "destroy-method" for any PersistenceManagerFactory instance.\n Note that this FactoryBean will automatically invoke close() for\n the PersistenceManagerFactory that it creates, without any special configuration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/LocalPersistenceManagerFactoryBean.html
PersistenceManagerFactoryUtils	A										<section class="prog__container">Helper class featuring methods for JDO PersistenceManager handling,\n allowing for reuse of PersistenceManager instances within transactions.\n Also provides support for exception translation.\n\n Used internally by JdoTransactionManager.\n Can also be used directly in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/PersistenceManagerFactoryUtils.html
PersistenceManagerHolder	A										<section class="prog__container">Holder wrapping a JDO PersistenceManager.\n JdoTransactionManager binds instances of this class\n to the thread, for a given PersistenceManagerFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/PersistenceManagerHolder.html
TransactionAwarePersistenceManagerFactoryProxy	A										<section class="prog__container">Proxy for a target JDO PersistenceManagerFactory,\n returning the current thread-bound PersistenceManager (the Spring-managed\n transactional PersistenceManager or the single OpenPersistenceManagerInView\n PersistenceManager) on getPersistenceManager(), if any.\n\n Essentially, getPersistenceManager() calls get seamlessly\n forwarded to PersistenceManagerFactoryUtils.getPersistenceManager(javax.jdo.PersistenceManagerFactory, boolean).\n Furthermore, PersistenceManager.close calls get forwarded to\n PersistenceManagerFactoryUtils.releasePersistenceManager(javax.jdo.PersistenceManager, javax.jdo.PersistenceManagerFactory).\n\n The main advantage of this proxy is that it allows DAOs to work with a\n plain JDO PersistenceManagerFactory reference, while still participating in\n Spring's (or a J2EE server's) resource and transaction management. DAOs will\n only rely on the JDO API in such a scenario, without any Spring dependencies.\n\n Note that the behavior of this proxy matches the behavior that the JDO spec\n defines for a PersistenceManagerFactory as exposed by a JCA connector, when\n deployed in a J2EE server. Hence, DAOs could seamlessly switch between a JNDI\n PersistenceManagerFactory and this proxy for a local PersistenceManagerFactory,\n receiving the reference through Dependency Injection. This will work without\n any Spring API dependencies in the DAO code!\n\n Of course, you can still access the target PersistenceManagerFactory\n even when your DAOs go through this proxy, by defining a bean reference\n that points directly at your target PersistenceManagerFactory bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/TransactionAwarePersistenceManagerFactoryProxy.html
OpenPersistenceManagerInViewFilter	A										<section class="prog__container">Servlet Filter that binds a JDO PersistenceManager to the thread for the\n entire processing of the request. Intended for the "Open PersistenceManager in\n View" pattern, i.e. to allow for lazy loading in web views despite the\n original transactions already being completed.\n\n This filter makes JDO PersistenceManagers available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service\n layer transactions via JdoTransactionManager\n or JtaTransactionManager as well\n as for non-transactional read-only execution.\n\n Looks up the PersistenceManagerFactory in Spring's root web application context.\n Supports a "persistenceManagerFactoryBeanName" filter init-param in web.xml;\n the default bean name is "persistenceManagerFactory".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewFilter.html
OpenPersistenceManagerInViewInterceptor	A										<section class="prog__container">Spring web request interceptor that binds a JDO PersistenceManager to the\n thread for the entire processing of the request. Intended for the "Open\n PersistenceManager in View" pattern, i.e. to allow for lazy loading in\n web views despite the original transactions already being completed.\n\n This interceptor makes JDO PersistenceManagers available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service\n layer transactions via JdoTransactionManager\n or JtaTransactionManager as well\n as for non-transactional read-only execution.\n\n In contrast to OpenPersistenceManagerInViewFilter, this interceptor\n is set up in a Spring application context and can thus take advantage of\n bean wiring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewInterceptor.html
SpringPersistenceManagerProxyBean	A										<section class="prog__container">Proxy that implements the PersistenceManager interface,\n delegating to the current thread-bound PersistenceManager (the Spring-managed\n transactional PersistenceManager or the single OpenPersistenceManagerInView\n PersistenceManager, if any) on each invocation. This class makes such a\n Spring-style PersistenceManager proxy available for bean references.\n\n The main advantage of this proxy is that it allows DAOs to work with a\n plain JDO PersistenceManager reference in JDO 3.0 style\n (see PersistenceManagerFactory.getPersistenceManagerProxy()),\n while still participating in Spring's resource and transaction management.\n\n The behavior of this proxy matches the behavior that the JDO 3.0 spec\n defines for a PersistenceManager proxy. Hence, DAOs could seamlessly switch\n between StandardPersistenceManagerProxyBean and this Spring-style proxy,\n receiving the reference through Dependency Injection. This will work without\n any Spring API dependencies in the DAO code!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/support/SpringPersistenceManagerProxyBean.html
StandardPersistenceManagerProxyBean	A										<section class="prog__container">Proxy that implements the PersistenceManager interface,\n delegating to a thread-bound PersistenceManager on each invocation -\n as defined by the JDO 3.0 specification. This class makes such a standard\n JDO PersistenceManager proxy available for bean references.\n\n The main advantage of this proxy is that it allows DAOs to work with a\n plain JDO PersistenceManager reference in JDO 3.0 style\n (see PersistenceManagerFactory.getPersistenceManagerProxy()),\n exposing the exact behavior that the target JDO provider implements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jdo/support/StandardPersistenceManagerProxyBean.html
AbstractEntityManagerFactoryBean	A										<section class="prog__container">Abstract FactoryBean that creates\n a local JPA EntityManagerFactory instance within\n a Spring application context.\n\n Encapsulates the common functionality between the different JPA bootstrap\n contracts (standalone as well as container).\n\n Implements support for standard JPA configuration conventions as well as\n Spring's customizable JpaVendorAdapter mechanism, and controls the\n EntityManagerFactory's lifecycle.\n\n This class also implements the\n PersistenceExceptionTranslator\n interface, as autodetected by Spring's\n PersistenceExceptionTranslationPostProcessor,\n for AOP-based translation of native exceptions to Spring DataAccessExceptions.\n Hence, the presence of e.g. LocalEntityManagerFactoryBean automatically enables\n a PersistenceExceptionTranslationPostProcessor to translate JPA exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.html
DefaultJpaDialect	A										<section class="prog__container">Default implementation of the JpaDialect interface.\n Used as default dialect by JpaTransactionManager.\n\n Simply begins a standard JPA transaction in beginTransaction(javax.persistence.EntityManager, org.springframework.transaction.TransactionDefinition) and\n performs standard exception translation through EntityManagerFactoryUtils.\n\n NOTE: Spring's JPA support requires JPA 2.0 or higher, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/DefaultJpaDialect.html
EntityManagerFactoryAccessor	A										<section class="prog__container">Base class for any class that needs to access a JPA EntityManagerFactory,\n usually in order to obtain a JPA EntityManager. Defines common properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/EntityManagerFactoryAccessor.html
EntityManagerFactoryInfo	A										<section class="prog__container">Metadata interface for a Spring-managed JPA EntityManagerFactory.\n\n This facility can be obtained from Spring-managed EntityManagerFactory\n proxies through casting the EntityManagerFactory handle to this interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/EntityManagerFactoryInfo.html
EntityManagerFactoryUtils	A										<section class="prog__container">Helper class featuring methods for JPA EntityManager handling,\n allowing for reuse of EntityManager instances within transactions.\n Also provides support for exception translation.\n\n Mainly intended for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/EntityManagerFactoryUtils.html
EntityManagerHolder	A										<section class="prog__container">Holder wrapping a JPA EntityManager.\n JpaTransactionManager binds instances of this class to the thread,\n for a given EntityManagerFactory.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/EntityManagerHolder.html
EntityManagerProxy	A										<section class="prog__container">Subinterface of EntityManager to be implemented by\n EntityManager proxies. Allows access to the underlying target EntityManager.\n\n This interface is mainly intended for framework usage. Application code\n should prefer the use of the EntityManager.getDelegate()\n method to access native functionality of the underlying resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/EntityManagerProxy.html
ExtendedEntityManagerCreator	A										<section class="prog__container">Delegate for creating a variety of EntityManager\n proxies that follow the JPA spec's semantics for "extended" EntityManagers.\n\n Supports several different variants of "extended" EntityManagers:\n in particular, an "application-managed extended EntityManager", as defined\n by EntityManagerFactory.createEntityManager(),\n as well as a "container-managed extended EntityManager", as defined by\n PersistenceContextType.EXTENDED.\n\n The original difference between "application-managed" and "container-managed"\n was the need for explicit joining of an externally managed transaction through\n the EntityManager.joinTransaction() method in the "application" case\n versus the automatic joining on each user-level EntityManager operation in the\n "container" case. As of JPA 2.1, both join modes are available with both kinds of\n EntityManagers, so the difference between "application-" and "container-managed"\n is now primarily in the join mode default and in the restricted lifecycle of a\n container-managed EntityManager (i.e. tied to the object that it is injected into).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/ExtendedEntityManagerCreator.html
JpaDialect	A										<section class="prog__container">SPI strategy that encapsulates certain functionality that standard JPA 2.0 does\n not offer, such as access to the underlying JDBC Connection. This strategy is\n mainly intended for standalone usage of a JPA provider; most of its functionality\n is not relevant when running with JTA transactions.\n\n In general, it is recommended to derive from DefaultJpaDialect instead\n of implementing this interface directly. This allows for inheriting common behavior\n (present and future) from DefaultJpaDialect, only overriding specific hooks to\n plug in concrete vendor-specific behavior.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaDialect.html
JpaObjectRetrievalFailureException	A										<section class="prog__container">JPA-specific subclass of ObjectRetrievalFailureException.\n Converts JPA's EntityNotFoundException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaObjectRetrievalFailureException.html
JpaOptimisticLockingFailureException	A										<section class="prog__container">JPA-specific subclass of ObjectOptimisticLockingFailureException.\n Converts JPA's OptimisticLockException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaOptimisticLockingFailureException.html
JpaSystemException	A										<section class="prog__container">JPA-specific subclass of UncategorizedDataAccessException,\n for JPA system errors that do not match any concrete\n org.springframework.dao exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaSystemException.html
JpaTransactionManager	A										<section class="prog__container">PlatformTransactionManager implementation\n for a single JPA EntityManagerFactory. Binds a JPA\n EntityManager from the specified factory to the thread, potentially allowing for\n one thread-bound EntityManager per factory. SharedEntityManagerCreator and\n @PersistenceContext are aware of thread-bound entity managers and participate\n in such transactions automatically. Using either is required for JPA access code\n supporting this transaction management mechanism.\n\n This transaction manager is appropriate for applications that use a single\n JPA EntityManagerFactory for transactional data access. JTA (usually through\n JtaTransactionManager) is necessary\n for accessing multiple transactional resources within the same transaction.\n Note that you need to configure your JPA provider accordingly in order to make\n it participate in JTA transactions.\n\n This transaction manager also supports direct DataSource access within a\n transaction (i.e. plain JDBC code working with the same DataSource).\n This allows for mixing services which access JPA and services which use plain\n JDBC (without being aware of JPA)! Application code needs to stick to the\n same simple Connection lookup pattern as with\n DataSourceTransactionManager\n (i.e. DataSourceUtils.getConnection(javax.sql.DataSource)\n or going through a\n TransactionAwareDataSourceProxy).\n Note that this requires a vendor-specific JpaDialect to be configured.\n\n Note: To be able to register a DataSource's Connection for plain JDBC code,\n this instance needs to be aware of the DataSource (setDataSource(javax.sql.DataSource)).\n The given DataSource should obviously match the one used by the given\n EntityManagerFactory. This transaction manager will autodetect the DataSource\n used as the connection factory of the EntityManagerFactory, so you usually\n don't need to explicitly specify the "dataSource" property.\n\n This transaction manager supports nested transactions via JDBC 3.0 Savepoints.\n The "nestedTransactionAllowed" flag defaults\n to false though, since nested transactions will just apply to the JDBC\n Connection, not to the JPA EntityManager and its cached entity objects and related\n context. You can manually set the flag to true if you want to use nested\n transactions for JDBC access code which participates in JPA transactions (provided\n that your JDBC driver supports Savepoints). Note that JPA itself does not support\n nested transactions! Hence, do not expect JPA access code to semantically\n participate in a nested transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html
JpaVendorAdapter	A										<section class="prog__container">SPI interface that allows to plug in vendor-specific behavior\n into Spring's EntityManagerFactory creators. Serves as single\n configuration point for all vendor-specific properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaVendorAdapter.html
LocalContainerEntityManagerFactoryBean	A										<section class="prog__container">FactoryBean that creates a JPA\n EntityManagerFactory according to JPA's standard\n container bootstrap contract. This is the most powerful way to set\n up a shared JPA EntityManagerFactory in a Spring application context;\n the EntityManagerFactory can then be passed to JPA-based DAOs via\n dependency injection. Note that switching to a JNDI lookup or to a\n LocalEntityManagerFactoryBean definition is just a matter of\n configuration!\n\n As with LocalEntityManagerFactoryBean, configuration settings\n are usually read in from a META-INF/persistence.xml config file,\n residing in the class path, according to the general JPA configuration contract.\n However, this FactoryBean is more flexible in that you can override the location\n of the persistence.xml file, specify the JDBC DataSources to link to,\n etc. Furthermore, it allows for pluggable class instrumentation through Spring's\n LoadTimeWeaver abstraction,\n instead of being tied to a special VM agent specified on JVM startup.\n\n Internally, this FactoryBean parses the persistence.xml file\n itself and creates a corresponding PersistenceUnitInfo\n object (with further configuration merged in, such as JDBC DataSources and the\n Spring LoadTimeWeaver), to be passed to the chosen JPA\n PersistenceProvider. This corresponds to a\n local JPA container with full support for the standard JPA container contract.\n\n The exposed EntityManagerFactory object will implement all the interfaces of\n the underlying native EntityManagerFactory returned by the PersistenceProvider,\n plus the EntityManagerFactoryInfo interface which exposes additional\n metadata as assembled by this FactoryBean.\n\n NOTE: Spring's JPA support requires JPA 2.0 or higher, as of Spring 4.0.\n JPA 1.0 based applications are still supported; however, a JPA 2.0/2.1 compliant\n persistence provider is needed at runtime. Spring's persistence unit bootstrapping\n automatically detects JPA 2.0 vs 2.1 through checking the JPA API on the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html
LocalEntityManagerFactoryBean	A										<section class="prog__container">FactoryBean that creates a JPA\n EntityManagerFactory according to JPA's standard\n standalone bootstrap contract. This is the simplest way to set up a\n shared JPA EntityManagerFactory in a Spring application context; the\n EntityManagerFactory can then be passed to JPA-based DAOs via\n dependency injection. Note that switching to a JNDI lookup or to a\n LocalContainerEntityManagerFactoryBean\n definition is just a matter of configuration!\n\n Configuration settings are usually read from a META-INF/persistence.xml\n config file, residing in the class path, according to the JPA standalone bootstrap\n contract. Additionally, most JPA providers will require a special VM agent\n (specified on JVM startup) that allows them to instrument application classes.\n See the Java Persistence API specification and your provider documentation\n for setup details.\n\n This EntityManagerFactory bootstrap is appropriate for standalone applications\n which solely use JPA for data access. If you want to set up your persistence\n provider for an external DataSource and/or for global transactions which span\n multiple resources, you will need to either deploy it into a full Java EE\n application server and access the deployed EntityManagerFactory via JNDI,\n or use Spring's LocalContainerEntityManagerFactoryBean with appropriate\n configuration for local setup according to JPA's container contract.\n\n Note: This FactoryBean has limited configuration power in terms of\n what configuration it is able to pass to the JPA provider. If you need more\n flexible configuration, for example passing a Spring-managed JDBC DataSource\n to the JPA provider, consider using Spring's more powerful\n LocalContainerEntityManagerFactoryBean instead.\n\n NOTE: Spring's JPA support requires JPA 2.0 or higher, as of Spring 4.0.\n JPA 1.0 based applications are still supported; however, a JPA 2.0/2.1 compliant\n persistence provider is needed at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/LocalEntityManagerFactoryBean.html
SharedEntityManagerCreator	A										<section class="prog__container">Delegate for creating a shareable JPA EntityManager\n reference for a given EntityManagerFactory.\n\n A shared EntityManager will behave just like an EntityManager fetched from\n an application server's JNDI environment, as defined by the JPA specification.\n It will delegate all calls to the current transactional EntityManager, if any;\n otherwise it will fall back to a newly created EntityManager per operation.\n\n For a behavioral definition of such a shared transactional EntityManager,\n see PersistenceContextType.TRANSACTION and its\n discussion in the JPA spec document. This is also the default being used\n for the annotation-based PersistenceContext.type().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/SharedEntityManagerCreator.html
DefaultPersistenceUnitManager	A										<section class="prog__container">Default implementation of the PersistenceUnitManager interface.\n Used as internal default by\n LocalContainerEntityManagerFactoryBean.\n\n Supports standard JPA scanning for persistence.xml files,\n with configurable file locations, JDBC DataSource lookup and load-time weaving.\n\n The default XML file location is classpath*:META-INF/persistence.xml,\n scanning for all matching files in the classpath (as defined in the JPA specification).\n DataSource names are by default interpreted as JNDI names, and no load time weaving\n is available (which requires weaving to be turned off in the persistence provider).\n\n NOTE: Spring's JPA support requires JPA 2.0 or higher, as of Spring 4.0.\n Spring's persistence unit bootstrapping automatically detects JPA 2.1 at runtime.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.html
MutablePersistenceUnitInfo	A										<section class="prog__container">Spring's base implementation of the JPA\n PersistenceUnitInfo interface,\n used to bootstrap an EntityManagerFactory in a container.\n\n This implementation is largely a JavaBean, offering mutators\n for all standard PersistenceUnitInfo properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/persistenceunit/MutablePersistenceUnitInfo.html
PersistenceUnitManager	A										<section class="prog__container">Interface that defines an abstraction for finding and managing\n JPA PersistenceUnitInfos. Used by\n LocalContainerEntityManagerFactoryBean\n in order to obtain a PersistenceUnitInfo\n for building a concrete EntityManagerFactory.\n\n Obtaining a PersistenceUnitInfo instance is an exclusive process.\n A PersistenceUnitInfo instance is not available for further calls\n anymore once it has been obtained.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/persistenceunit/PersistenceUnitManager.html
PersistenceUnitPostProcessor	A										<section class="prog__container">Callback interface for post-processing a JPA PersistenceUnitInfo.\n Implementations can be registered with a DefaultPersistenceUnitManager\n or via a LocalContainerEntityManagerFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/persistenceunit/PersistenceUnitPostProcessor.html
SmartPersistenceUnitInfo	A										<section class="prog__container">Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration\n between Spring's LocalContainerEntityManagerFactoryBean\n and PersistenceUnitManager implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/persistenceunit/SmartPersistenceUnitInfo.html
OpenEntityManagerInViewFilter	A										<section class="prog__container">Servlet Filter that binds a JPA EntityManager to the thread for the\n entire processing of the request. Intended for the "Open EntityManager in\n View" pattern, i.e. to allow for lazy loading in web views despite the\n original transactions already being completed.\n\n This filter makes JPA EntityManagers available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service\n layer transactions via JpaTransactionManager\n or JtaTransactionManager as well\n as for non-transactional read-only execution.\n\n Looks up the EntityManagerFactory in Spring's root web application context.\n Supports an "entityManagerFactoryBeanName" filter init-param in web.xml;\n the default bean name is "entityManagerFactory". As an alternative, the\n "persistenceUnitName" init-param allows for retrieval by logical unit name\n (as specified in persistence.xml).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewFilter.html
OpenEntityManagerInViewInterceptor	A										<section class="prog__container">Spring web request interceptor that binds a JPA EntityManager to the\n thread for the entire processing of the request. Intended for the "Open\n EntityManager in View" pattern, i.e. to allow for lazy loading in\n web views despite the original transactions already being completed.\n\n This interceptor makes JPA EntityManagers available via the current thread,\n which will be autodetected by transaction managers. It is suitable for service\n layer transactions via JpaTransactionManager\n or JtaTransactionManager as well\n as for non-transactional read-only execution.\n\n In contrast to OpenEntityManagerInViewFilter, this interceptor is set\n up in a Spring application context and can thus take advantage of bean wiring.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html
PersistenceAnnotationBeanPostProcessor	A										<section class="prog__container">BeanPostProcessor that processes PersistenceUnit\n and PersistenceContext annotations, for injection of\n the corresponding JPA resources EntityManagerFactory\n and EntityManager. Any such annotated fields or methods\n in any Spring-managed object will automatically be injected.\n\n This post-processor will inject sub-interfaces of EntityManagerFactory\n and EntityManager if the annotated fields or methods are declared as such.\n The actual type will be verified early, with the exception of a shared ("transactional")\n EntityManager reference, where type mismatches might be detected as late\n as on the first actual invocation.\n\n Note: In the present implementation, PersistenceAnnotationBeanPostProcessor\n only supports @PersistenceUnit and @PersistenceContext\n with the "unitName" attribute, or no attribute at all (for the default unit).\n If those annotations are present with the "name" attribute at the class level,\n they will simply be ignored, since those only serve as deployment hint\n (as per the Java EE specification).\n\n This post-processor can either obtain EntityManagerFactory beans defined\n in the Spring application context (the default), or obtain EntityManagerFactory\n references from JNDI ("persistence unit references"). In the bean case,\n the persistence unit name will be matched against the actual deployed unit,\n with the bean name used as fallback unit name if no deployed name found.\n Typically, Spring's LocalContainerEntityManagerFactoryBean\n will be used for setting up such EntityManagerFactory beans. Alternatively,\n such beans may also be obtained from JNDI, e.g. using the jee:jndi-lookup\n XML configuration element (with the bean name matching the requested unit name).\n In both cases, the post-processor definition will look as simple as this:\n\n \n <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>\n\n In the JNDI case, specify the corresponding JNDI names in this post-processor's\n "persistenceUnits" map, typically with matching\n persistence-unit-ref entries in the Java EE deployment descriptor.\n By default, those names are considered as resource references (according to the\n Java EE resource-ref convention), located underneath the "java:comp/env/" namespace.\n For example:\n\n \n <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">\n   <property name="persistenceUnits">\n     <map/gt;\n       <entry key="unit1" value="persistence/unit1"/>\n       <entry key="unit2" value="persistence/unit2"/>\n     </map/gt;\n   </property>\n </bean>\n\n In this case, the specified persistence units will always be resolved in JNDI\n rather than as Spring-defined beans. The entire persistence unit deployment,\n including the weaving of persistent classes, is then up to the Java EE server.\n Persistence contexts (i.e. EntityManager references) will be built based on\n those server-provided EntityManagerFactory references, using Spring's own\n transaction synchronization facilities for transactional EntityManager handling\n (typically with Spring's @Transactional annotation for demarcation\n and JtaTransactionManager as backend).\n\n If you prefer the Java EE server's own EntityManager handling, specify entries\n in this post-processor's "persistenceContexts" map\n (or "extendedPersistenceContexts" map,\n typically with matching persistence-context-ref entries in the\n Java EE deployment descriptor. For example:\n\n \n <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">\n   <property name="persistenceContexts">\n     <map/gt;\n       <entry key="unit1" value="persistence/context1"/>\n       <entry key="unit2" value="persistence/context2"/>\n     </map/gt;\n   </property>\n </bean>\n\n If the application only obtains EntityManager references in the first place,\n this is all you need to specify. If you need EntityManagerFactory references\n as well, specify entries for both "persistenceUnits" and "persistenceContexts",\n pointing to matching JNDI locations.\n\n NOTE: In general, do not inject EXTENDED EntityManagers into STATELESS beans,\n i.e. do not use @PersistenceContext with type EXTENDED in\n Spring beans defined with scope 'singleton' (Spring's default scope).\n Extended EntityManagers are not thread-safe, hence they must not be used\n in concurrently accessed beans (which Spring-managed singletons usually are).\n\n Note: A default PersistenceAnnotationBeanPostProcessor will be registered\n by the "context:annotation-config" and "context:component-scan" XML tags.\n Remove or turn off the default annotation configuration there if you intend\n to specify a custom PersistenceAnnotationBeanPostProcessor bean definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.html
SharedEntityManagerBean	A										<section class="prog__container">FactoryBean that exposes a shared JPA EntityManager\n reference for a given EntityManagerFactory. Typically used for an EntityManagerFactory\n created by LocalContainerEntityManagerFactoryBean,\n as direct alternative to a JNDI lookup for a Java EE server's EntityManager reference.\n\n The shared EntityManager will behave just like an EntityManager fetched from an\n application server's JNDI environment, as defined by the JPA specification.\n It will delegate all calls to the current transactional EntityManager, if any;\n otherwise, it will fall back to a newly created EntityManager per operation.\n\n Can be passed to DAOs that expect a shared EntityManager reference rather than an\n EntityManagerFactory. Note that Spring's JpaTransactionManager\n always needs an EntityManagerFactory in order to create new transactional EntityManager instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/support/SharedEntityManagerBean.html
AbstractJpaVendorAdapter	A										<section class="prog__container">Abstract JpaVendorAdapter implementation that defines common properties,\n to be translated into vendor-specific JPA properties by concrete subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/AbstractJpaVendorAdapter.html
Database	A										<section class="prog__container">Enumeration for common database platforms. Allows strong typing of database type\n and portable configuration between JpaVendorDialect implementations.\n\n If a given PersistenceProvider supports a database not listed here,\n the strategy class can still be specified using the fully-qualified class name.\n This enumeration is merely a convenience. The database products listed here\n are the same as those explicitly supported for Spring JDBC exception translation\n in sql-error-codes.xml.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/Database.html
EclipseLinkJpaDialect	A										<section class="prog__container">JpaDialect implementation for Eclipse\n Persistence Services (EclipseLink). Developed and tested against EclipseLink 2.4.\n\n By default, this class acquires an early EclipseLink transaction with an early\n JDBC Connection for non-read-only transactions. This allows for mixing JDBC and\n JPA/EclipseLink operations in the same transaction, with cross visibility of\n their impact. If this is not needed, set the "lazyDatabaseTransaction" flag to\n true or consistently declare all affected transactions as read-only.\n As of Spring 4.1.2, this will reliably avoid early JDBC Connection retrieval\n and therefore keep EclipseLink in shared cache mode.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.html
EclipseLinkJpaVendorAdapter	A										<section class="prog__container">JpaVendorAdapter implementation for Eclipse\n Persistence Services (EclipseLink). Developed and tested against EclipseLink 2.4.\n\n Exposes EclipseLink's persistence provider and EntityManager extension interface,\n and adapts AbstractJpaVendorAdapter's common configuration settings.\n No support for the detection of annotated packages (through\n SmartPersistenceUnitInfo.getManagedPackages())\n since EclipseLink doesn't use package-level metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.html
HibernateJpaDialect	A										<section class="prog__container">JpaDialect implementation for\n Hibernate EntityManager. Developed and tested against Hibernate 3.6,\n 4.2/4.3 as well as 5.0/5.1/5.2.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/HibernateJpaDialect.html
HibernateJpaSessionFactoryBean	A										<section class="prog__container">Simple FactoryBean that exposes the underlying SessionFactory\n behind a Hibernate-backed JPA EntityManagerFactory.\n\n Primarily available for resolving a SessionFactory by JPA persistence unit name\n via the "persistenceUnitName" bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/HibernateJpaSessionFactoryBean.html
HibernateJpaVendorAdapter	A										<section class="prog__container">JpaVendorAdapter implementation for Hibernate\n EntityManager. Developed and tested against Hibernate 3.6, 4.2/4.3 as well as 5.x.\n Hibernate 4.2+ is strongly recommended for use with Spring 4.0+.\nExposes Hibernate's persistence provider and EntityManager extension interface,\n and adapts AbstractJpaVendorAdapter's common configuration settings.\n Also supports the detection of annotated packages (through\n SmartPersistenceUnitInfo.getManagedPackages()),\n e.g. containing Hibernate FilterDef annotations,\n along with Spring-driven entity scanning which requires no persistence.xml\n (LocalContainerEntityManagerFactoryBean.setPackagesToScan(java.lang.String...)).\n\n Note that the package location of Hibernate's JPA support changed from 4.2 to 4.3:\n from org.hibernate.ejb.HibernateEntityManager(Factory) to\n org.hibernate.jpa.HibernateEntityManager(Factory). As of Spring 4.0,\n we're exposing the correct, non-deprecated variant depending on the Hibernate\n version encountered at runtime, in order to avoid deprecation log entries.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.html
OpenJpaDialect	A										<section class="prog__container">JpaDialect implementation for Apache OpenJPA.\n Developed and tested against OpenJPA 2.2.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/OpenJpaDialect.html
OpenJpaVendorAdapter	A										<section class="prog__container">JpaVendorAdapter implementation for Apache OpenJPA.\n Developed and tested against OpenJPA 2.2.\n\n Exposes OpenJPA's persistence provider and EntityManager extension interface,\n and adapts AbstractJpaVendorAdapter's common configuration settings.\n No support for the detection of annotated packages (through\n SmartPersistenceUnitInfo.getManagedPackages())\n since OpenJPA doesn't use package-level metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/OpenJpaVendorAdapter.html
GenericMarshaller	A										<section class="prog__container">Subinterface of Marshaller that has support for Java 5 generics.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/GenericMarshaller.html
GenericUnmarshaller	A										<section class="prog__container">Subinterface of Unmarshaller that has support for Java 5 generics.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/GenericUnmarshaller.html
Marshaller	A										<section class="prog__container">Defines the contract for Object XML Mapping Marshallers. Implementations of this interface\n can serialize a given Object to an XML Stream.\n\n Although the marshal method accepts a java.lang.Object as its\n first parameter, most Marshaller implementations cannot handle arbitrary\n Objects. Instead, a object class must be registered with the marshaller,\n or have a common base class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/Marshaller.html
MarshallingException	A										<section class="prog__container">Base class for exception thrown when a marshalling or unmarshalling error occurs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/MarshallingException.html
MarshallingFailureException	A										<section class="prog__container">Exception thrown on marshalling failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/MarshallingFailureException.html
UncategorizedMappingException	A										<section class="prog__container">Exception that indicates that the cause cannot be distinguished further.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/UncategorizedMappingException.html
Unmarshaller	A										<section class="prog__container">Defines the contract for Object XML Mapping unmarshallers. Implementations of this\n interface can deserialize a given XML Stream to an Object graph.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/Unmarshaller.html
UnmarshallingFailureException	A										<section class="prog__container">Exception thrown on unmarshalling failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/UnmarshallingFailureException.html
ValidationFailureException	A										<section class="prog__container">Exception thrown on marshalling validation failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/ValidationFailureException.html
XmlMappingException	A										<section class="prog__container">Root of the hierarchy of Object XML Mapping exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/XmlMappingException.html
CastorMappingException	A										<section class="prog__container">Exception thrown by CastorMarshaller whenever it encounters a mapping problem.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/castor/CastorMappingException.html
CastorMarshaller	A										<section class="prog__container">Implementation of the Marshaller interface for Castor. By default, Castor does\n not require any further configuration, though setting target classes, target packages or\n providing a mapping file can be used to have more control over the behavior of Castor.\n\n If a target class is specified using setTargetClass, the CastorMarshaller\n can only be used to unmarshal XML that represents that specific class. If you want to unmarshal\n multiple classes, you have to provide a mapping file using setMappingLocations.\n\n Due to limitations of Castor's API, it is required to set the encoding used for\n writing to output streams. It defaults to UTF-8.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/castor/CastorMarshaller.html
CastorMarshallerBeanDefinitionParser	A										<section class="prog__container">Parser for the <oxm:castor-marshaller/> element.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/config/CastorMarshallerBeanDefinitionParser.html
OxmNamespaceHandler	A										<section class="prog__container">NamespaceHandler for the 'oxm' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/config/OxmNamespaceHandler.html
Jaxb2Marshaller	A										<section class="prog__container">Implementation of the GenericMarshaller interface for JAXB 2.1/2.2,\n as included in JDK 6 update 4+ and Java 7/8.\n\n The typical usage will be to set either the "contextPath" or the "classesToBeBound"\n property on this bean, possibly customize the marshaller and unmarshaller by setting\n properties, schemas, adapters, and listeners, and to refer to it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html
JibxMarshaller	A										<section class="prog__container">Implementation of the Marshaller and Unmarshaller interfaces for JiBX.\n\n The typical usage will be to set the targetClass and optionally the\n bindingName property on this bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/jibx/JibxMarshaller.html
MimeContainer	A										<section class="prog__container">Represents a container for MIME attachments\n Concrete implementations might adapt a SOAPMessage or an email message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/mime/MimeContainer.html
MimeMarshaller	A										<section class="prog__container">Subinterface of Marshaller that can use MIME attachments to optimize\n storage of binary data. Attachments can be added as MTOM, XOP, or SwA.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/mime/MimeMarshaller.html
MimeUnmarshaller	A										<section class="prog__container">Subinterface of Unmarshaller that can use MIME attachments\n to optimize storage of binary data. Attachments can be added as MTOM, XOP, or SwA.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/mime/MimeUnmarshaller.html
AbstractMarshaller	A										<section class="prog__container">Abstract implementation of the Marshaller and Unmarshaller interface.\n This implementation inspects the given Source or Result, and\n delegates further handling to overridable template methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/support/AbstractMarshaller.html
MarshallingSource	A										<section class="prog__container">Source implementation that uses a Marshaller.Can be constructed with a\n Marshaller and an object to be marshalled.\n\n Even though MarshallingSource extends from SAXSource, calling the methods of\n SAXSource is not supported. In general, the only supported operation on this class is\n to use the XMLReader obtained via SAXSource.getXMLReader() to parse the input source obtained via SAXSource.getInputSource(). Calling setXMLReader(XMLReader) or setInputSource(InputSource) will result in\n UnsupportedOperationExceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/support/MarshallingSource.html
SaxResourceUtils	A										<section class="prog__container">Convenient utility methods for dealing with SAX.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/support/SaxResourceUtils.html
XmlBeansMarshaller	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, following the XMLBeans retirement at Apache\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html
XmlOptionsFactoryBean	A										<section class="prog__container">FactoryBean that configures an XMLBeans XmlOptions object\n and provides it as a bean reference.\n\n Typical usage will be to set XMLBeans options on this bean, and refer to it\n in the XmlBeansMarshaller.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/xmlbeans/XmlOptionsFactoryBean.html
CatchAllConverter	A										<section class="prog__container">XStream Converter that supports all classes but throws exceptions\n for (un)marshalling.\n\n Main purpose of this class is to\n register\n this converter as a catch-all converter with a\n normal\n or higher priority, in addition to converters that explicitly support the domain\n classes that should be supported. As a result, default XStream converters with lower\n priorities and possible security vulnerabilities do not get invoked.\n\n For instance:\n\n XStreamMarshaller unmarshaller = new XStreamMarshaller();\n unmarshaller.getXStream().registerConverter(new MyDomainClassConverter(), XStream.PRIORITY_VERY_HIGH);\n unmarshaller.getXStream().registerConverter(new CatchAllConverter(), XStream.PRIORITY_NORMAL);\n MyDomainClass o = unmarshaller.unmarshal(source);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/xstream/CatchAllConverter.html
XStreamMarshaller	A										<section class="prog__container">Implementation of the Marshaller interface for XStream.\n\n By default, XStream does not require any further configuration and can (un)marshal\n any class on the classpath. As such, it is not recommended to use the\n XStreamMarshaller to unmarshal XML from external sources (i.e. the Web),\n as this can result in security vulnerabilities. If you do use the\n XStreamMarshaller to unmarshal external XML, set the\n supportedClasses and\n converters properties (possibly using\n a CatchAllConverter) or override the customizeXStream(XStream)\n method to make sure it only accepts the classes you want it to support.\n\n Due to XStream's API, it is required to set the encoding used for writing to\n OutputStreams. It defaults to UTF-8.\n\n NOTE: XStream is an XML serialization library, not a data binding library.\n Therefore, it has limited namespace support. As such, it is rather unsuitable for\n usage within Web Services.\n\n This marshaller requires XStream 1.4.5 or higher, as of Spring 4.3.\n Note that XStream construction has been reworked in 4.0, with the\n stream driver and the class loader getting passed into XStream itself now.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/oxm/xstream/XStreamMarshaller.html
RemoteAccessException	A										<section class="prog__container">Generic remote access exception. A service proxy for any remoting\n protocol should throw this exception or subclasses of it, in order\n to transparently expose a plain Java business interface.\n\n When using conforming proxies, switching the actual remoting protocol\n e.g. from Hessian to Burlap does not affect client code. Clients work\n with a plain natural Java business interface that the service exposes.\n A client object simply receives an implementation for the interface that\n it needs via a bean reference, like it does for a local bean as well.\n\n A client may catch RemoteAccessException if it wants to, but as\n remote access errors are typically unrecoverable, it will probably let\n such exceptions propagate to a higher level that handles them generically.\n In this case, the client code doesn't show any signs of being involved in\n remote access, as there aren't any remoting-specific dependencies.\n\n Even when switching from a remote service proxy to a local implementation\n of the same interface, this amounts to just a matter of configuration. Obviously,\n the client code should be somewhat aware that it might be working\n against a remote service, for example in terms of repeated method calls that\n cause unnecessary roundtrips etc. However, it doesn't have to be aware whether\n it is actually working against a remote service or a local implementation,\n or with which remoting protocol it is working under the hood.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteAccessException.html
RemoteConnectFailureException	A										<section class="prog__container">RemoteAccessException subclass to be thrown when no connection\n could be established with a remote service.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteConnectFailureException.html
RemoteInvocationFailureException	A										<section class="prog__container">RemoteAccessException subclass to be thrown when the execution\n of the target method failed on the server side, for example\n when a method was not found on the target object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteInvocationFailureException.html
RemoteLookupFailureException	A										<section class="prog__container">RemoteAccessException subclass to be thrown in case of a lookup failure,\n typically if the lookup happens on demand for each method invocation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteLookupFailureException.html
RemoteProxyFailureException	A										<section class="prog__container">RemoteAccessException subclass to be thrown in case of a failure\n within the client-side proxy for a remote service, for example\n when a method was not found on the underlying RMI stub.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteProxyFailureException.html
RemoteTimeoutException	A										<section class="prog__container">RemoteAccessException subclass to be thrown when the execution\n of the target method did not complete before a configurable\n timeout, for example when a reply message was not received.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/RemoteTimeoutException.html
BurlapClientInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since Burlap hasn't evolved in years\n and is effectively retired (in contrast to its sibling Hessian)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/BurlapClientInterceptor.html
BurlapExporter	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since Burlap hasn't evolved in years\n and is effectively retired (in contrast to its sibling Hessian)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/BurlapExporter.html
BurlapProxyFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since Burlap hasn't evolved in years\n and is effectively retired (in contrast to its sibling Hessian)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/BurlapProxyFactoryBean.html
BurlapServiceExporter	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since Burlap hasn't evolved in years\n and is effectively retired (in contrast to its sibling Hessian)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/BurlapServiceExporter.html
HessianClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing a Hessian service.\n Supports authentication via username and password.\n The service URL must be an HTTP URL exposing a Hessian service.\n\n Hessian is a slim, binary RPC protocol.\n For information on Hessian, see the\n Hessian website\nNote: As of Spring 4.0, this client requires Hessian 4.0 or above.\nNote: There is no requirement for services accessed with this proxy factory\n to have been exported using Spring's HessianServiceExporter, as there is\n no special handling involved. As a consequence, you can also access services that\n have been exported using Caucho's HessianServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/HessianClientInterceptor.html
HessianExporter	A										<section class="prog__container">General stream-based protocol exporter for a Hessian endpoint.\n\n Hessian is a slim, binary RPC protocol.\n For information on Hessian, see the\n Hessian website.\n Note: As of Spring 4.0, this exporter requires Hessian 4.0 or above.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/HessianExporter.html
HessianProxyFactoryBean	A										<section class="prog__container">FactoryBean for Hessian proxies. Exposes the proxied service\n for use as a bean reference, using the specified service interface.\n\n Hessian is a slim, binary RPC protocol.\n For information on Hessian, see the\n Hessian website\nNote: As of Spring 4.0, this proxy factory requires Hessian 4.0 or above.\nThe service URL must be an HTTP URL exposing a Hessian service.\n For details, see the HessianClientInterceptor javadoc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/HessianProxyFactoryBean.html
HessianServiceExporter	A										<section class="prog__container">Servlet-API-based HTTP request handler that exports the specified service bean\n as Hessian service endpoint, accessible via a Hessian proxy.\n\n Note: Spring also provides an alternative version of this exporter,\n for Sun's JRE 1.6 HTTP server: SimpleHessianServiceExporter.\n\n Hessian is a slim, binary RPC protocol.\n For information on Hessian, see the\n Hessian website.\n Note: As of Spring 4.0, this exporter requires Hessian 4.0 or above.\nHessian services exported with this class can be accessed by\n any Hessian client, as there isn't any special handling involved.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/HessianServiceExporter.html
SimpleBurlapServiceExporter	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since Burlap hasn't evolved in years\n and is effectively retired (in contrast to its sibling Hessian)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/SimpleBurlapServiceExporter.html
SimpleHessianServiceExporter	A										<section class="prog__container">HTTP request handler that exports the specified service bean as\n Hessian service endpoint, accessible via a Hessian proxy.\n Designed for Sun's JRE 1.6 HTTP server, implementing the\n HttpHandler interface.\n\n Hessian is a slim, binary RPC protocol.\n For information on Hessian, see the\n Hessian website.\n Note: As of Spring 4.0, this exporter requires Hessian 4.0 or above.\nHessian services exported with this class can be accessed by\n any Hessian client, as there isn't any special handling involved.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/caucho/SimpleHessianServiceExporter.html
AbstractHttpInvokerRequestExecutor	A										<section class="prog__container">Abstract base implementation of the HttpInvokerRequestExecutor interface.\n\n Pre-implements serialization of RemoteInvocation objects and\n deserialization of RemoteInvocationResults objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.html
HttpComponentsHttpInvokerRequestExecutor	A										<section class="prog__container">HttpInvokerRequestExecutor implementation that uses\n Apache HttpComponents HttpClient\n to execute POST requests.\n\n Allows to use a pre-configured HttpClient\n instance, potentially with authentication, HTTP connection pooling, etc.\n Also designed for easy subclassing, providing specific template methods.\n\n As of Spring 4.1, this request executor requires Apache HttpComponents 4.3 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.html
HttpInvokerClientConfiguration	A										<section class="prog__container">Configuration interface for executing HTTP invoker requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerClientConfiguration.html
HttpInvokerClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing an\n HTTP invoker service. The service URL must be an HTTP URL exposing\n an HTTP invoker service.\n\n Serializes remote invocation objects and deserializes remote invocation\n result objects. Uses Java serialization just like RMI, but provides the\n same ease of setup as Caucho's HTTP-based Hessian and Burlap protocols.\n\n HTTP invoker is a very extensible and customizable protocol.\n It supports the RemoteInvocationFactory mechanism, like RMI invoker,\n allowing to include additional invocation attributes (for example,\n a security context). Furthermore, it allows to customize request\n execution via the HttpInvokerRequestExecutor strategy.\n\n Can use the JDK's RMIClassLoader to load\n classes from a given codebase, performing\n on-demand dynamic code download from a remote location. The codebase\n can consist of multiple URLs, separated by spaces. Note that\n RMIClassLoader requires a SecurityManager to be set, analogous to\n when using dynamic class download with standard RMI!\n (See the RMI documentation for details.)</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.html
HttpInvokerProxyFactoryBean	A										<section class="prog__container">FactoryBean for HTTP invoker proxies. Exposes the proxied service\n for use as a bean reference, using the specified service interface.\n\n The service URL must be an HTTP URL exposing an HTTP invoker service.\n Optionally, a codebase URL can be specified for on-demand dynamic code download\n from a remote location. For details, see HttpInvokerClientInterceptor docs.\n\n Serializes remote invocation objects and deserializes remote invocation\n result objects. Uses Java serialization just like RMI, but provides the\n same ease of setup as Caucho's HTTP-based Hessian and Burlap protocols.\n\n HTTP invoker is the recommended protocol for Java-to-Java remoting.\n It is more powerful and more extensible than Hessian and Burlap, at the\n expense of being tied to Java. Nevertheless, it is as easy to set up as\n Hessian and Burlap, which is its main advantage compared to RMI.\n\n WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:\n Manipulated input streams could lead to unwanted code execution on the server\n during the deserialization step. As a consequence, do not expose HTTP invoker\n endpoints to untrusted clients but rather just between your own services.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.html
HttpInvokerRequestExecutor	A										<section class="prog__container">Strategy interface for actual execution of an HTTP invoker request.\n Used by HttpInvokerClientInterceptor and its subclass\n HttpInvokerProxyFactoryBean.\n\n Two implementations are provided out of the box:\n \nSimpleHttpInvokerRequestExecutor:\n Uses JDK facilities to execute POST requests, without support\n for HTTP authentication or advanced configuration options.\n HttpComponentsHttpInvokerRequestExecutor:\n Uses Apache's Commons HttpClient to execute POST requests,\n allowing to use a preconfigured HttpClient instance\n (potentially with authentication, HTTP connection pooling, etc).\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerRequestExecutor.html
HttpInvokerServiceExporter	A										<section class="prog__container">Servlet-API-based HTTP request handler that exports the specified service bean\n as HTTP invoker service endpoint, accessible via an HTTP invoker proxy.\n\n Note: Spring also provides an alternative version of this exporter,\n for Sun's JRE 1.6 HTTP server: SimpleHttpInvokerServiceExporter.\n\n Deserializes remote invocation objects and serializes remote invocation\n result objects. Uses Java serialization just like RMI, but provides the\n same ease of setup as Caucho's HTTP-based Hessian and Burlap protocols.\n\n HTTP invoker is the recommended protocol for Java-to-Java remoting.\n It is more powerful and more extensible than Hessian and Burlap, at the\n expense of being tied to Java. Nevertheless, it is as easy to set up as\n Hessian and Burlap, which is its main advantage compared to RMI.\n\n WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:\n Manipulated input streams could lead to unwanted code execution on the server\n during the deserialization step. As a consequence, do not expose HTTP invoker\n endpoints to untrusted clients but rather just between your own services.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html
SimpleHttpInvokerRequestExecutor	A										<section class="prog__container">HttpInvokerRequestExecutor implementation that uses standard J2SE facilities\n to execute POST requests, without support for HTTP authentication or\n advanced configuration options.\n\n Designed for easy subclassing, customizing specific template methods.\n However, consider HttpComponentsHttpInvokerRequestExecutor for\n more sophisticated needs: The J2SE HttpURLConnection is rather limited\n in its capabilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/SimpleHttpInvokerRequestExecutor.html
SimpleHttpInvokerServiceExporter	A										<section class="prog__container">HTTP request handler that exports the specified service bean as\n HTTP invoker service endpoint, accessible via an HTTP invoker proxy.\n Designed for Sun's JRE 1.6 HTTP server, implementing the\n HttpHandler interface.\n\n Deserializes remote invocation objects and serializes remote invocation\n result objects. Uses Java serialization just like RMI, but provides the\n same ease of setup as Caucho's HTTP-based Hessian and Burlap protocols.\n\n HTTP invoker is the recommended protocol for Java-to-Java remoting.\n It is more powerful and more extensible than Hessian and Burlap, at the\n expense of being tied to Java. Nevertheless, it is as easy to set up as\n Hessian and Burlap, which is its main advantage compared to RMI.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/SimpleHttpInvokerServiceExporter.html
AbstractJaxWsServiceExporter	A										<section class="prog__container">Abstract exporter for JAX-WS services, autodetecting annotated service beans\n (through the JAX-WS WebService annotation). Compatible with\n JAX-WS 2.1 and 2.2, as included in JDK 6 update 4+ and Java 7/8.\n\n Subclasses need to implement the publishEndpoint(javax.xml.ws.Endpoint, javax.jws.WebService) template methods\n for actual endpoint exposure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/AbstractJaxWsServiceExporter.html
JaxWsPortClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing a\n specific port of a JAX-WS service. Compatible with JAX-WS 2.1 and 2.2,\n as included in JDK 6 update 4+ and Java 7/8.\n\n Uses either LocalJaxWsServiceFactory's facilities underneath,\n or takes an explicit reference to an existing JAX-WS Service instance\n (e.g. obtained via JndiObjectFactoryBean).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.html
JaxWsPortProxyFactoryBean	A										<section class="prog__container">FactoryBean for a specific port of a\n JAX-WS service. Exposes a proxy for the port, to be used for bean references.\n Inherits configuration properties from JaxWsPortClientInterceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/JaxWsPortProxyFactoryBean.html
JaxWsSoapFaultException	A										<section class="prog__container">Spring SoapFaultException adapter for the JAX-WS\n SOAPFaultException class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/JaxWsSoapFaultException.html
LocalJaxWsServiceFactory	A										<section class="prog__container">Factory for locally defined JAX-WS Service references.\n Uses the JAX-WS Service.create(java.net.URL, javax.xml.namespace.QName) factory API underneath.\n\n Serves as base class for LocalJaxWsServiceFactoryBean as well as\n JaxWsPortClientInterceptor and JaxWsPortProxyFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/LocalJaxWsServiceFactory.html
LocalJaxWsServiceFactoryBean	A										<section class="prog__container">FactoryBean for locally\n defined JAX-WS Service references.\n Uses LocalJaxWsServiceFactory's facilities underneath.\n\n Alternatively, JAX-WS Service references can be looked up\n in the JNDI environment of the J2EE container.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/LocalJaxWsServiceFactoryBean.html
SimpleHttpServerJaxWsServiceExporter	A										<section class="prog__container">Simple exporter for JAX-WS services, autodetecting annotated service beans\n (through the JAX-WS WebService annotation) and exporting\n them through the HTTP server included in Sun's JDK 1.6. The full address\n for each service will consist of the server's base address with the\n service name appended (e.g. "http://localhost:8080/OrderService").\n\n Note that this exporter will only work on Sun's JDK 1.6 or higher, as well\n as on JDKs that ship Sun's entire class library as included in the Sun JDK.\n For a portable JAX-WS exporter, have a look at SimpleJaxWsServiceExporter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/SimpleHttpServerJaxWsServiceExporter.html
SimpleJaxWsServiceExporter	A										<section class="prog__container">Simple exporter for JAX-WS services, autodetecting annotated service beans\n (through the JAX-WS WebService annotation) and exporting\n them with a configured base address (by default "http://localhost:8080/")\n using the JAX-WS provider's built-in publication support. The full address\n for each service will consist of the base address with the service name\n appended (e.g. "http://localhost:8080/OrderService").\n\n Note that this exporter will only work if the JAX-WS runtime actually\n supports publishing with an address argument, i.e. if the JAX-WS runtime\n ships an internal HTTP server. This is the case with the JAX-WS runtime\n that's included in Sun's JDK 6 but not with the standalone JAX-WS 2.1 RI.\n\n For explicit configuration of JAX-WS endpoints with Sun's JDK 6\n HTTP server, consider using SimpleHttpServerJaxWsServiceExporter!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.html
CodebaseAwareObjectInputStream	A										<section class="prog__container">Special ObjectInputStream subclass that falls back to a specified codebase\n to load classes from if not found locally. In contrast to standard RMI\n conventions for dynamic class download, it is the client that determines\n the codebase URL here, rather than the "java.rmi.server.codebase" system\n property on the server.\n\n Uses the JDK's RMIClassLoader to load classes from the specified codebase.\n The codebase can consist of multiple URLs, separated by spaces.\n Note that RMIClassLoader requires a SecurityManager to be set, like when\n using dynamic class download with standard RMI! (See the RMI documentation\n for details.)\n\n Despite residing in the RMI package, this class is not used for\n RmiClientInterceptor, which uses the standard RMI infrastructure instead\n and thus is only able to rely on RMI's standard dynamic class download via\n "java.rmi.server.codebase". CodebaseAwareObjectInputStream is used by\n HttpInvokerClientInterceptor (see the "codebaseUrl" property there).\n\n Thanks to Lionel Mestre for suggesting the option and providing\n a prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/CodebaseAwareObjectInputStream.html
JndiRmiClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing RMI services from JNDI.\n Typically used for RMI-IIOP (CORBA), but can also be used for EJB home objects\n (for example, a Stateful Session Bean home). In contrast to a plain JNDI lookup,\n this accessor also performs narrowing through PortableRemoteObject.\n\n With conventional RMI services, this invoker is typically used with the RMI\n service interface. Alternatively, this invoker can also proxy a remote RMI service\n with a matching non-RMI business interface, i.e. an interface that mirrors the RMI\n service methods but does not declare RemoteExceptions. In the latter case,\n RemoteExceptions thrown by the RMI stub will automatically get converted to\n Spring's unchecked RemoteAccessException.\n\n The JNDI environment can be specified as "jndiEnvironment" property,\n or be configured in a jndi.properties file or as system properties.\n For example:\n\n <property name="jndiEnvironment">\n         <props>\n                 <prop key="java.naming.factory.initial">com.sun.jndi.cosnaming.CNCtxFactory</prop>\n                 <prop key="java.naming.provider.url">iiop://localhost:1050</prop>\n         </props>\n </property></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/JndiRmiClientInterceptor.html
JndiRmiProxyFactoryBean	A										<section class="prog__container">FactoryBean for RMI proxies from JNDI.\n\n Typically used for RMI-IIOP (CORBA), but can also be used for EJB home objects\n (for example, a Stateful Session Bean home). In contrast to a plain JNDI lookup,\n this accessor also performs narrowing through PortableRemoteObject.\n\n With conventional RMI services, this invoker is typically used with the RMI\n service interface. Alternatively, this invoker can also proxy a remote RMI service\n with a matching non-RMI business interface, i.e. an interface that mirrors the RMI\n service methods but does not declare RemoteExceptions. In the latter case,\n RemoteExceptions thrown by the RMI stub will automatically get converted to\n Spring's unchecked RemoteAccessException.\n\n The JNDI environment can be specified as "jndiEnvironment" property,\n or be configured in a jndi.properties file or as system properties.\n For example:\n\n <property name="jndiEnvironment">\n         <props>\n                 <prop key="java.naming.factory.initial">com.sun.jndi.cosnaming.CNCtxFactory</prop>\n                 <prop key="java.naming.provider.url">iiop://localhost:1050</prop>\n         </props>\n </property></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.html
JndiRmiServiceExporter	A										<section class="prog__container">Service exporter which binds RMI services to JNDI.\n Typically used for RMI-IIOP (CORBA).\n\n Exports services via the PortableRemoteObject class.\n You need to run "rmic" with the "-iiop" option to generate corresponding\n stubs and skeletons for each exported service.\n\n Also supports exposing any non-RMI service via RMI invokers, to be accessed\n via JndiRmiClientInterceptor / JndiRmiProxyFactoryBean's\n automatic detection of such invokers.\n\n With an RMI invoker, RMI communication works on the RmiInvocationHandler\n level, needing only one stub for any service. Service interfaces do not have to\n extend java.rmi.Remote or throw java.rmi.RemoteException\n on all methods, but in and out parameters have to be serializable.\n\n The JNDI environment can be specified as "jndiEnvironment" bean property,\n or be configured in a jndi.properties file or as system properties.\n For example:\n\n <property name="jndiEnvironment">\n         <props>\n                 <prop key="java.naming.factory.initial">com.sun.jndi.cosnaming.CNCtxFactory</prop>\n                 <prop key="java.naming.provider.url">iiop://localhost:1050</prop>\n         </props>\n </property></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/JndiRmiServiceExporter.html
RemoteInvocationSerializingExporter	A										<section class="prog__container">Abstract base class for remote service exporters that explicitly deserialize\n RemoteInvocation objects and serialize\n RemoteInvocationResult objects,\n for example Spring's HTTP invoker.\n\n Provides template methods for ObjectInputStream and\n ObjectOutputStream handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.html
RmiBasedExporter	A										<section class="prog__container">Convenient superclass for RMI-based remote exporters. Provides a facility\n to automatically wrap a given plain Java service object with an\n RmiInvocationWrapper, exposing the RmiInvocationHandler remote interface.\n\n Using the RMI invoker mechanism, RMI communication operates at the RmiInvocationHandler\n level, sharing a common invoker stub for any number of services. Service interfaces are not\n required to extend java.rmi.Remote or declare java.rmi.RemoteException\n on all service methods. However, in and out parameters still have to be serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiBasedExporter.html
RmiClientInterceptor	A										<section class="prog__container">MethodInterceptor for accessing conventional\n RMI services or RMI invokers. The service URL must be a valid RMI URL\n (e.g. "rmi://localhost:1099/myservice").\n\n RMI invokers work at the RmiInvocationHandler level, needing only one stub for\n any service. Service interfaces do not have to extend java.rmi.Remote\n or throw java.rmi.RemoteException. Spring's unchecked\n RemoteAccessException will be thrown on remote invocation failure.\n Of course, in and out parameters have to be serializable.\n\n With conventional RMI services, this invoker is typically used with the RMI\n service interface. Alternatively, this invoker can also proxy a remote RMI service\n with a matching non-RMI business interface, i.e. an interface that mirrors the RMI\n service methods but does not declare RemoteExceptions. In the latter case,\n RemoteExceptions thrown by the RMI stub will automatically get converted to\n Spring's unchecked RemoteAccessException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiClientInterceptor.html
RmiClientInterceptorUtils	A										<section class="prog__container">Factored-out methods for performing invocations within an RMI client.\n Can handle both RMI and non-RMI service interfaces working on an RMI stub.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiClientInterceptorUtils.html
RmiInvocationHandler	A										<section class="prog__container">Interface for RMI invocation handlers instances on the server,\n wrapping exported services. A client uses a stub implementing\n this interface to access such a service.\n\n This is an SPI interface, not to be used directly by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiInvocationHandler.html
RmiProxyFactoryBean	A										<section class="prog__container">FactoryBean for RMI proxies, supporting both conventional RMI services\n and RMI invokers. Exposes the proxied service for use as a bean reference,\n using the specified service interface. Proxies will throw Spring's unchecked\n RemoteAccessException on remote invocation failure instead of RMI's RemoteException.\n\n The service URL must be a valid RMI URL like "rmi://localhost:1099/myservice".\n RMI invokers work at the RmiInvocationHandler level, using the same invoker stub\n for any service. Service interfaces do not have to extend java.rmi.Remote\n or throw java.rmi.RemoteException. Of course, in and out parameters\n have to be serializable.\n\n With conventional RMI services, this proxy factory is typically used with the\n RMI service interface. Alternatively, this factory can also proxy a remote RMI\n service with a matching non-RMI business interface, i.e. an interface that mirrors\n the RMI service methods but does not declare RemoteExceptions. In the latter case,\n RemoteExceptions thrown by the RMI stub will automatically get converted to\n Spring's unchecked RemoteAccessException.\n\n The major advantage of RMI, compared to Hessian and Burlap, is serialization.\n Effectively, any serializable Java object can be transported without hassle.\n Hessian and Burlap have their own (de-)serialization mechanisms, but are\n HTTP-based and thus much easier to setup than RMI. Alternatively, consider\n Spring's HTTP invoker to combine Java serialization with HTTP-based transport.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiProxyFactoryBean.html
RmiRegistryFactoryBean	A										<section class="prog__container">FactoryBean that locates a Registry and\n exposes it for bean references. Can also create a local RMI registry\n on the fly if none exists already.\n\n Can be used to set up and pass around the actual Registry object to\n applications objects that need to work with RMI. One example for such an\n object that needs to work with RMI is Spring's RmiServiceExporter,\n which either works with a passed-in Registry reference or falls back to\n the registry as specified by its local properties and defaults.\n\n Also useful to enforce creation of a local RMI registry at a given port,\n for example for a JMX connector. If used in conjunction with\n ConnectorServerFactoryBean,\n it is recommended to mark the connector definition (ConnectorServerFactoryBean)\n as "depends-on" the registry definition (RmiRegistryFactoryBean),\n to guarantee starting up the registry first.\n\n Note: The implementation of this class mirrors the corresponding logic\n in RmiServiceExporter, and also offers the same customization hooks.\n RmiServiceExporter implements its own registry lookup as a convenience:\n It is very common to simply rely on the registry defaults.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiRegistryFactoryBean.html
RmiServiceExporter	A										<section class="prog__container">RMI exporter that exposes the specified service as RMI object with the specified name.\n Such services can be accessed via plain RMI or via RmiProxyFactoryBean.\n Also supports exposing any non-RMI service via RMI invokers, to be accessed via\n RmiClientInterceptor / RmiProxyFactoryBean's automatic detection\n of such invokers.\n\n With an RMI invoker, RMI communication works on the RmiInvocationHandler\n level, needing only one stub for any service. Service interfaces do not have to\n extend java.rmi.Remote or throw java.rmi.RemoteException\n on all methods, but in and out parameters have to be serializable.\n\n The major advantage of RMI, compared to Hessian and Burlap, is serialization.\n Effectively, any serializable Java object can be transported without hassle.\n Hessian and Burlap have their own (de-)serialization mechanisms, but are\n HTTP-based and thus much easier to setup than RMI. Alternatively, consider\n Spring's HTTP invoker to combine Java serialization with HTTP-based transport.\n\n Note: RMI makes a best-effort attempt to obtain the fully qualified host name.\n If one cannot be determined, it will fall back and use the IP address. Depending\n on your network configuration, in some cases it will resolve the IP to the loopback\n address. To ensure that RMI will use the host name bound to the correct network\n interface, you should pass the java.rmi.server.hostname property to the\n JVM that will export the registry and/or the service using the "-D" JVM argument.\n For example: -Djava.rmi.server.hostname=myserver.com</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/rmi/RmiServiceExporter.html
SoapFaultException	A										<section class="prog__container">RemoteInvocationFailureException subclass that provides the details\n of a SOAP fault.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/soap/SoapFaultException.html
DefaultRemoteInvocationExecutor	A										<section class="prog__container">Default implementation of the RemoteInvocationExecutor interface.\n Simply delegates to RemoteInvocation's invoke method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/DefaultRemoteInvocationExecutor.html
DefaultRemoteInvocationFactory	A										<section class="prog__container">Default implementation of the RemoteInvocationFactory interface.\n Simply creates a new standard RemoteInvocation object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/DefaultRemoteInvocationFactory.html
RemoteAccessor	A										<section class="prog__container">Abstract base class for classes that access a remote service.\n Provides a "serviceInterface" bean property.\n\n Note that the service interface being used will show some signs of\n remotability, like the granularity of method calls that it offers.\n Furthermore, it has to have serializable arguments etc.\n\n Accessors are supposed to throw Spring's generic\n RemoteAccessException in case\n of remote invocation failure, provided that the service interface\n does not declare java.rmi.RemoteException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteAccessor.html
RemoteExporter	A										<section class="prog__container">Abstract base class for classes that export a remote service.\n Provides "service" and "serviceInterface" bean properties.\n\n Note that the service interface being used will show some signs of\n remotability, like the granularity of method calls that it offers.\n Furthermore, it has to have serializable arguments etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteExporter.html
RemoteInvocation	A										<section class="prog__container">Encapsulates a remote invocation, providing core method invocation properties\n in a serializable fashion. Used for RMI and HTTP-based serialization invokers.\n\n This is an SPI class, typically not used directly by applications.\n Can be subclassed for additional invocation parameters.\n\n Both RemoteInvocation and RemoteInvocationResult are designed\n for use with standard Java serialization as well as JavaBean-style serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocation.html
RemoteInvocationBasedAccessor	A										<section class="prog__container">Abstract base class for remote service accessors that are based\n on serialization of RemoteInvocation objects.\n\n Provides a "remoteInvocationFactory" property, with a\n DefaultRemoteInvocationFactory as default strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationBasedAccessor.html
RemoteInvocationBasedExporter	A										<section class="prog__container">Abstract base class for remote service exporters that are based\n on deserialization of RemoteInvocation objects.\n\n Provides a "remoteInvocationExecutor" property, with a\n DefaultRemoteInvocationExecutor as default strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationBasedExporter.html
RemoteInvocationExecutor	A										<section class="prog__container">Strategy interface for executing a RemoteInvocation on a target object.\n\n Used by RmiServiceExporter (for RMI invokers)\n and by HttpInvokerServiceExporter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationExecutor.html
RemoteInvocationFactory	A										<section class="prog__container">Strategy interface for creating a RemoteInvocation from an AOP Alliance\n MethodInvocation.\n\n Used by RmiClientInterceptor (for RMI invokers)\n and by HttpInvokerClientInterceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationFactory.html
RemoteInvocationResult	A										<section class="prog__container">Encapsulates a remote invocation result, holding a result value or an exception.\n Used for HTTP-based serialization invokers.\n\n This is an SPI class, typically not used directly by applications.\n Can be subclassed for additional invocation parameters.\n\n Both RemoteInvocation and RemoteInvocationResult are designed\n for use with standard Java serialization as well as JavaBean-style serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationResult.html
RemoteInvocationTraceInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor for tracing remote invocations.\n Automatically applied by RemoteExporter and its subclasses.\n\n Logs an incoming remote call as well as the finished processing of a remote call\n at DEBUG level. If the processing of a remote call results in a checked exception,\n the exception will get logged at INFO level; if it results in an unchecked\n exception (or error), the exception will get logged at WARN level.\n\n The logging of exceptions is particularly useful to save the stacktrace\n information on the server-side rather than just propagating the exception\n to the client (who might or might not log it properly).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationTraceInterceptor.html
RemoteInvocationUtils	A										<section class="prog__container">General utilities for handling remote invocations.\n\n Mainly intended for use within the remoting framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemoteInvocationUtils.html
RemotingSupport	A										<section class="prog__container">Generic support base class for remote accessor and exporters,\n providing common bean ClassLoader handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/RemotingSupport.html
SimpleHttpServerFactoryBean	A										<section class="prog__container">FactoryBean that creates a simple\n HTTP server, based on the HTTP server that is included in Sun's JRE 1.6.\n Starts the HTTP server on initialization and stops it on destruction.\n Exposes the resulting HttpServer object.\n\n Allows for registering HttpHandlers\n for specific context paths. Alternatively,\n register such context-specific handlers programmatically on the\n HttpServer itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/SimpleHttpServerFactoryBean.html
UrlBasedRemoteAccessor	A										<section class="prog__container">Abstract base class for classes that access remote services via URLs.\n Provides a "serviceUrl" bean property, which is considered as required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/remoting/support/UrlBasedRemoteAccessor.html
SchedulingAwareRunnable	A										<section class="prog__container">Extension of the Runnable interface, adding special callbacks\n for long-running operations.\n\n This interface closely corresponds to the CommonJ Work interface,\n but is kept separate to avoid a required CommonJ dependency.\n\n Scheduling-capable TaskExecutors are encouraged to check a submitted\n Runnable, detecting whether this interface is implemented and reacting\n as appropriately as they are able to.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/SchedulingAwareRunnable.html
SchedulingException	A										<section class="prog__container">General exception to be thrown on scheduling failures,\n such as the scheduler already having shut down.\n Unchecked since scheduling failures are usually fatal.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/SchedulingException.html
SchedulingTaskExecutor	A										<section class="prog__container">A TaskExecutor extension exposing\n scheduling characteristics that are relevant to potential task submitters.\n\n Scheduling clients are encouraged to submit\n Runnables that match the exposed preferences\n of the TaskExecutor implementation in use.\n\n Note: SchedulingTaskExecutor implementations are encouraged to also\n implement the AsyncListenableTaskExecutor\n interface. This is not required due to the dependency on Spring 4.0's new\n ListenableFuture interface,\n which would make it impossible for third-party executor implementations\n to remain compatible with both Spring 4.0 and Spring 3.x.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/SchedulingTaskExecutor.html
TaskScheduler	A										<section class="prog__container">Task scheduler interface that abstracts the scheduling of\n Runnables based on different kinds of triggers.\n\n This interface is separate from SchedulingTaskExecutor since it\n usually represents for a different kind of backend, i.e. a thread pool with\n different characteristics and capabilities. Implementations may implement\n both interfaces if they can handle both kinds of execution characteristics.\n\n The 'default' implementation is\n ThreadPoolTaskScheduler,\n wrapping a native ScheduledExecutorService\n and adding extended trigger capabilities.\n\n This interface is roughly equivalent to a JSR-236\n ManagedScheduledExecutorService as supported in Java EE 6\n environments. However, at the time of the Spring 3.0 release, the\n JSR-236 interfaces have not been released in official form yet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/TaskScheduler.html
Trigger	A										<section class="prog__container">Common interface for trigger objects that determine the next execution time\n of a task that they get associated with.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/Trigger.html
TriggerContext	A										<section class="prog__container">Context object encapsulating last execution times and last completion time\n of a given task.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/TriggerContext.html
AbstractAsyncConfiguration	A										<section class="prog__container">Abstract base Configuration class providing common structure for enabling\n Spring's asynchronous method execution capability.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.html
AnnotationAsyncExecutionInterceptor	A										<section class="prog__container">Specialization of AsyncExecutionInterceptor that delegates method execution to\n an Executor based on the Async annotation. Specifically designed to\n support use of Async.value() executor qualification mechanism introduced in\n Spring 3.1.2. Supports detecting qualifier metadata via @Async at the method or\n declaring class level. See getExecutorQualifier(Method) for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AnnotationAsyncExecutionInterceptor.html
Async	A										<section class="prog__container">Annotation that marks a method as a candidate for asynchronous execution.\n Can also be used at the type level, in which case all of the type's methods are\n considered as asynchronous.\n\n In terms of target method signatures, any parameter types are supported.\n However, the return type is constrained to either void or\n Future. In the latter case, you may declare the\n more specific ListenableFuture or\n CompletableFuture types which allow for richer\n interaction with the asynchronous task and for immediate composition with\n further processing steps.\n\n A Future handle returned from the proxy will be an actual asynchronous\n Future that can be used to track the result of the asynchronous method\n execution. However, since the target method needs to implement the same signature,\n it will have to return a temporary Future handle that just passes a value\n through: e.g. Spring's AsyncResult, EJB 3.1's AsyncResult,\n or CompletableFuture.completedFuture(Object).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html
AsyncAnnotationAdvisor	A										<section class="prog__container">Advisor that activates asynchronous method execution through the Async\n annotation. This annotation can be used at the method and type level in\n implementation classes as well as in service interfaces.\n\n This advisor detects the EJB 3.1 javax.ejb.Asynchronous\n annotation as well, treating it exactly like Spring's own Async.\n Furthermore, a custom async annotation type may get specified through the\n "asyncAnnotationType" property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.html
AsyncAnnotationBeanPostProcessor	A										<section class="prog__container">Bean post-processor that automatically applies asynchronous invocation\n behavior to any bean that carries the Async annotation at class or\n method-level by adding a corresponding AsyncAnnotationAdvisor to the\n exposed proxy (either an existing AOP proxy or a newly generated proxy that\n implements all of the target's interfaces).\n\n The TaskExecutor responsible for the asynchronous execution may\n be provided as well as the annotation type that indicates a method should be\n invoked asynchronously. If no annotation type is specified, this post-\n processor will detect both Spring's @Async annotation as well\n as the EJB 3.1 javax.ejb.Asynchronous annotation.\n\n For methods having a void return type, any exception thrown\n during the asynchronous method invocation cannot be accessed by the\n caller. An AsyncUncaughtExceptionHandler can be specified to handle\n these cases.\n\n Note: The underlying async advisor applies before existing advisors by default,\n in order to switch to async execution as early as possible in the invocation chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.html
AsyncConfigurationSelector	A										<section class="prog__container">Selects which implementation of AbstractAsyncConfiguration should be used based\n on the value of EnableAsync.mode() on the importing @Configuration class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncConfigurationSelector.html
AsyncConfigurer	A										<section class="prog__container">Interface to be implemented by @Configuration classes annotated with @EnableAsync that wish to customize the\n Executor instance used when processing async method invocations or the\n AsyncUncaughtExceptionHandler instance used to process exception thrown from\n async method with void return type.\n\n Consider using AsyncConfigurerSupport providing default implementations for\n both methods if only one element needs to be customized. Furthermore, backward compatibility\n of this interface will be insured in case new customization options are introduced\n in the future.\n\n See @EnableAsync for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncConfigurer.html
AsyncConfigurerSupport	A										<section class="prog__container">A convenience AsyncConfigurer that implements all methods\n so that the defaults are used. Provides a backward compatible alternative\n of implementing AsyncConfigurer directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncConfigurerSupport.html
AsyncResult	A										<section class="prog__container">A pass-through Future handle that can be used for method signatures\n which are declared with a Future return type for asynchronous execution.\n\n As of Spring 4.1, this class implements ListenableFuture, not just\n plain Future, along with the corresponding support\n in @Async processing.\n\n As of Spring 4.2, this class also supports passing execution exceptions back\n to the caller.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/AsyncResult.html
EnableAsync	A										<section class="prog__container">Enables Spring's asynchronous method execution capability, similar to functionality\n found in Spring's <task:*> XML namespace.\n\n To be used together with @Configuration classes as follows,\n enabling annotation-driven async processing for an entire Spring application context:\n\n \n @Configuration\n @EnableAsync\n public class AppConfig {\n\n }\nMyAsyncBean is a user-defined type with one or more methods annotated with\n either Spring's @Async annotation, the EJB 3.1 @javax.ejb.Asynchronous\n annotation, or any custom annotation specified via the annotation() attribute.\n The aspect is added transparently for any registered bean, for instance via this\n configuration:\n\n \n @Configuration\n public class AnotherAppConfig {\n\n     @Bean\n     public MyAsyncBean asyncBean() {\n         return new MyAsyncBean();\n     }\n }\nThe mode() attribute controls how advice is applied; if the mode is\n AdviceMode.PROXY (the default), then the other attributes control the behavior\n of the proxying.\n\n Note that if the mode() is set to AdviceMode.ASPECTJ, then the\n value of the proxyTargetClass() attribute will be ignored. Note also that in\n this case the spring-aspects module JAR must be present on the classpath.\n\n By default, Spring will be searching for an associated thread pool definition:\n either a unique TaskExecutor bean in the context,\n or an Executor bean named "taskExecutor" otherwise. If\n neither of the two is resolvable, a SimpleAsyncTaskExecutor\n will be used to process async method invocations. Besides, annotated methods having a\n void return type cannot transmit any exception back to the caller. By default,\n such uncaught exceptions are only logged.\n\n To customize all this, implement AsyncConfigurer and provide:\n \nyour own Executor through the\n getAsyncExecutor() method, and\nyour own AsyncUncaughtExceptionHandler through the getAsyncUncaughtExceptionHandler()\n method.\n\n\n @Configuration\n @EnableAsync\n public class AppConfig implements AsyncConfigurer {\n\n     @Override\n     public Executor getAsyncExecutor() {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(7);\n         executor.setMaxPoolSize(42);\n         executor.setQueueCapacity(11);\n         executor.setThreadNamePrefix("MyExecutor-");\n         executor.initialize();\n         return executor;\n     }\n\n     @Override\n     public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n         return MyAsyncUncaughtExceptionHandler();\n     }\n }\nIf only one item needs to be customized, null can be returned to\n keep the default settings. Consider also extending from AsyncConfigurerSupport\n when possible.\n\n Note: In the above example the ThreadPoolTaskExecutor is not a fully managed\n Spring bean. Add the @Bean annotation to the getAsyncExecutor() method\n if you want a fully managed bean. In such circumstances it is no longer necessary to\n manually call the executor.initialize() method as this will be invoked\n automatically when the bean is initialized.\n\n For reference, the example above can be compared to the following Spring XML\n configuration:\n\n \n <beans>\n\n     <task:annotation-driven executor="myExecutor" exception-handler="exceptionHandler"/>\n\n     <task:executor id="myExecutor" pool-size="7-42" queue-capacity="11"/>\n\n     <bean id="asyncBean" class="com.foo.MyAsyncBean"/>\n\n     <bean id="exceptionHandler" class="com.foo.MyAsyncUncaughtExceptionHandler"/>\n\n </beans>\n \n\n The above XML-based and JavaConfig-based examples are equivalent except for the\n setting of the thread name prefix of the Executor; this is because\n the <task:executor> element does not expose such an attribute. This\n demonstrates how the JavaConfig-based approach allows for maximum configurability\n through direct access to actual componentry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableAsync.html
EnableScheduling	A										<section class="prog__container">Enables Spring's scheduled task execution capability, similar to\n functionality found in Spring's <task:*> XML namespace. To be used\n on @Configuration classes as follows:\n\n \n @Configuration\n @EnableScheduling\n public class AppConfig {\n\n     // various @Bean definitions\n }\n\n This enables detection of @Scheduled annotations on any Spring-managed\n bean in the container. For example, given a class MyTask\n\n package com.myco.tasks;\n\n public class MyTask {\n\n     @Scheduled(fixedRate=1000)\n     public void work() {\n         // task execution logic\n     }\n }\n\n the following configuration would ensure that MyTask.work() is called\n once every 1000 ms:\n\n \n @Configuration\n @EnableScheduling\n public class AppConfig {\n\n     @Bean\n     public MyTask task() {\n         return new MyTask();\n     }\n }\n\n Alternatively, if MyTask were annotated with @Component, the\n following configuration would ensure that its @Scheduled method is\n invoked at the desired interval:\n\n \n @Configuration\n @EnableScheduling\n @ComponentScan(basePackages="com.myco.tasks")\n public class AppConfig {\n }\n\n Methods annotated with @Scheduled may even be declared directly within\n @Configuration classes:\n\n \n @Configuration\n @EnableScheduling\n public class AppConfig {\n\n     @Scheduled(fixedRate=1000)\n     public void work() {\n         // task execution logic\n     }\n }\nBy default, will be searching for an associated scheduler definition: either\n a unique TaskScheduler bean in the context,\n or a TaskScheduler bean named "taskScheduler" otherwise; the same lookup\n will also be performed for a ScheduledExecutorService\n bean. If neither of the two is resolvable, a local single-threaded default\n scheduler will be created and used within the registrar.\n\n When more control is desired, a @Configuration class may implement\n SchedulingConfigurer. This allows access to the underlying\n ScheduledTaskRegistrar instance. For example, the following example\n demonstrates how to customize the Executor used to execute scheduled\n tasks:\n\n \n @Configuration\n @EnableScheduling\n public class AppConfig implements SchedulingConfigurer {\n\n     @Override\n     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n         taskRegistrar.setScheduler(taskExecutor());\n     }\n\n     @Bean(destroyMethod="shutdown")\n     public Executor taskExecutor() {\n         return Executors.newScheduledThreadPool(100);\n     }\n }\nNote in the example above the use of @Bean(destroyMethod="shutdown").\n This ensures that the task executor is properly shut down when the Spring\n application context itself is closed.\n\n Implementing SchedulingConfigurer also allows for fine-grained\n control over task registration via the ScheduledTaskRegistrar.\n For example, the following configures the execution of a particular bean\n method per a custom Trigger implementation:\n\n \n @Configuration\n @EnableScheduling\n public class AppConfig implements SchedulingConfigurer {\n\n     @Override\n     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n         taskRegistrar.setScheduler(taskScheduler());\n         taskRegistrar.addTriggerTask(\n             new Runnable() {\n                 public void run() {\n                     myTask().work();\n                 }\n             },\n             new CustomTrigger()\n         );\n     }\n\n     @Bean(destroyMethod="shutdown")\n     public Executor taskScheduler() {\n         return Executors.newScheduledThreadPool(42);\n     }\n\n     @Bean\n     public MyTask myTask() {\n         return new MyTask();\n     }\n }\nFor reference, the example above can be compared to the following Spring XML\n configuration:\n\n \n <beans>\n\n     <task:annotation-driven scheduler="taskScheduler"/>\n\n     <task:scheduler id="taskScheduler" pool-size="42"/>\n\n     <task:scheduled-tasks scheduler="taskScheduler">\n         <task:scheduled ref="myTask" method="work" fixed-rate="1000"/>\n     </task:scheduled-tasks>\n\n     <bean id="myTask" class="com.foo.MyTask"/>\n\n </beans>\n \n\n The examples are equivalent save that in XML a fixed-rate period is used\n instead of a custom Trigger implementation; this is because the\n task: namespace scheduled cannot easily expose such support. This is\n but one demonstration how the code-based approach allows for maximum configurability\n through direct access to actual componentry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html
ProxyAsyncConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable proxy-based asynchronous method execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.html
Scheduled	A										<section class="prog__container">An annotation that marks a method to be scheduled. Exactly one of\n the cron(), fixedDelay(), or fixedRate()\n attributes must be specified.\n\n The annotated method must expect no arguments. It will typically have\n a void return type; if not, the returned value will be ignored\n when called through the scheduler.\n\n Processing of @Scheduled annotations is performed by\n registering a ScheduledAnnotationBeanPostProcessor. This can be\n done manually or, more conveniently, through the <task:annotation-driven/>\n element or @EnableScheduling annotation.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html
ScheduledAnnotationBeanPostProcessor	A										<section class="prog__container">Bean post-processor that registers methods annotated with @Scheduled\n to be invoked by a TaskScheduler according\n to the "fixedRate", "fixedDelay", or "cron" expression provided via the annotation.\n\n This post-processor is automatically registered by Spring's\n <task:annotation-driven> XML element, and also by the\n @EnableScheduling annotation.\n\n Autodetects any SchedulingConfigurer instances in the container,\n allowing for customization of the scheduler to be used or for fine-grained\n control over task registration (e.g. registration of Trigger tasks.\n See the @EnableScheduling javadocs for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.html
Schedules	A										<section class="prog__container">Container annotation that aggregates several Scheduled annotations.\n\n Can be used natively, declaring several nested Scheduled annotations.\n Can also be used in conjunction with Java 8's support for repeatable annotations,\n where Scheduled can simply be declared several times on the same method,\n implicitly generating this container annotation.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Schedules.html
SchedulingConfiguration	A										<section class="prog__container">@Configuration class that registers a ScheduledAnnotationBeanPostProcessor\n bean capable of processing Spring's @Scheduled annotation.\n\n This configuration class is automatically imported when using the\n @EnableScheduling annotation. See\n @EnableScheduling's javadoc for complete usage details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/SchedulingConfiguration.html
SchedulingConfigurer	A										<section class="prog__container">Optional interface to be implemented by @Configuration classes annotated\n with @EnableScheduling. Typically used for setting a specific\n TaskScheduler bean to be used when\n executing scheduled tasks or for registering scheduled tasks in a programmatic\n fashion as opposed to the declarative approach of using the @Scheduled\n annotation. For example, this may be necessary when implementing Trigger-based tasks, which are not supported by\n the @Scheduled annotation.\n\n See @EnableScheduling for detailed usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/SchedulingConfigurer.html
AspectJAsyncConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable AspectJ-based asynchronous method execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.html
DelegatingTimerListener	A										<section class="prog__container">Simple TimerListener adapter that delegates to a given Runnable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/DelegatingTimerListener.html
DelegatingWork	A										<section class="prog__container">Simple Work adapter that delegates to a given Runnable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/DelegatingWork.html
ScheduledTimerListener	A										<section class="prog__container">JavaBean that describes a scheduled TimerListener, consisting of\n the TimerListener itself (or a Runnable to create a TimerListener for)\n and a delay plus period. Period needs to be specified;\n there is no point in a default for it.\n\n The CommonJ TimerManager does not offer more sophisticated scheduling\n options such as cron expressions. Consider using Quartz for such\n advanced needs.\n\n Note that the TimerManager uses a TimerListener instance that is\n shared between repeated executions, in contrast to Quartz which\n instantiates a new Job for each execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/ScheduledTimerListener.html
TimerManagerAccessor	A										<section class="prog__container">Base class for classes that are accessing a CommonJ TimerManager\n Defines common configuration settings and common lifecycle handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/TimerManagerAccessor.html
TimerManagerFactoryBean	A										<section class="prog__container">FactoryBean that retrieves a\n CommonJ TimerManager and exposes it for bean references.\n\n This is the central convenience class for setting up a\n CommonJ TimerManager in a Spring context.\nAllows for registration of ScheduledTimerListeners. This is the main\n purpose of this class; the TimerManager itself could also be fetched\n from JNDI via JndiObjectFactoryBean.\n In scenarios that just require static registration of tasks at startup,\n there is no need to access the TimerManager itself in application code.\n\n Note that the TimerManager uses a TimerListener instance that is\n shared between repeated executions, in contrast to Quartz which\n instantiates a new Job for each execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/TimerManagerFactoryBean.html
TimerManagerTaskScheduler	A										<section class="prog__container">Implementation of Spring's TaskScheduler interface, wrapping\n a CommonJ TimerManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.html
WorkManagerTaskExecutor	A										<section class="prog__container">TaskExecutor implementation that delegates to a CommonJ WorkManager,\n implementing the WorkManager interface,\n which either needs to be specified as reference or through the JNDI name.\n\n This is the central convenience class for setting up a\n CommonJ WorkManager in a Spring context.\nAlso implements the CommonJ WorkManager interface itself, delegating all\n calls to the target WorkManager. Hence, a caller can choose whether it wants\n to talk to this executor through the Spring TaskExecutor interface or the\n CommonJ WorkManager interface.\n\n The CommonJ WorkManager will usually be retrieved from the application\n server's JNDI environment, as defined in the server's management console.\n\n Note: On the upcoming EE 7 compliant versions of WebLogic and WebSphere, a\n DefaultManagedTaskExecutor\n should be preferred, following JSR-236 support in Java EE 7.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.html
ConcurrentTaskExecutor	A										<section class="prog__container">Adapter that takes a java.util.concurrent.Executor and exposes\n a Spring TaskExecutor for it.\n Also detects an extended java.util.concurrent.ExecutorService, adapting\n the AsyncTaskExecutor interface accordingly.\n\n Autodetects a JSR-236 ManagedExecutorService\n in order to expose ManagedTask adapters for it,\n exposing a long-running hint based on SchedulingAwareRunnable and an identity\n name based on the given Runnable/Callable's toString(). For JSR-236 style\n lookup in a Java EE 7 environment, consider using DefaultManagedTaskExecutor.\n\n Note that there is a pre-built ThreadPoolTaskExecutor that allows\n for defining a ThreadPoolExecutor in bean style,\n exposing it as a Spring TaskExecutor directly.\n This is a convenient alternative to a raw ThreadPoolExecutor definition with\n a separate definition of the present adapter class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.html
ConcurrentTaskExecutor.ManagedTaskBuilder	A										<section class="prog__container">Delegate that wraps a given Runnable/Callable  with a JSR-236 ManagedTask,\n exposing a long-running hint based on SchedulingAwareRunnable\n and a given identity name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.ManagedTaskBuilder.html
ConcurrentTaskScheduler	A										<section class="prog__container">Adapter that takes a java.util.concurrent.ScheduledExecutorService and\n exposes a Spring TaskScheduler for it.\n Extends ConcurrentTaskExecutor in order to implement the\n SchedulingTaskExecutor interface as well.\n\n Autodetects a JSR-236 ManagedScheduledExecutorService\n in order to use it for trigger-based scheduling if possible, instead of Spring's\n local trigger management which ends up delegating to regular delay-based scheduling\n against the java.util.concurrent.ScheduledExecutorService API. For JSR-236 style\n lookup in a Java EE 7 environment, consider using DefaultManagedTaskScheduler.\n\n Note that there is a pre-built ThreadPoolTaskScheduler that allows for\n defining a ScheduledThreadPoolExecutor in bean style,\n exposing it as a Spring TaskScheduler directly.\n This is a convenient alternative to a raw ScheduledThreadPoolExecutor definition with\n a separate definition of the present adapter class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.html
CustomizableThreadFactory	A										<section class="prog__container">Implementation of the ThreadFactory interface,\n allowing for customizing the created threads (name, priority, etc).\n\n See the base class CustomizableThreadCreator\n for details on the available configuration options.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/CustomizableThreadFactory.html
DefaultManagedAwareThreadFactory	A										<section class="prog__container">JNDI-based variant of CustomizableThreadFactory, performing a default lookup\n for JSR-236's "java:comp/DefaultManagedThreadFactory" in a Java EE 7 environment,\n falling back to the local CustomizableThreadFactory setup if not found.\n\n This is a convenient way to use managed threads when running in a Java EE 7\n environment, simply using regular local threads otherwise - without conditional\n setup (i.e. without profiles).\n\n Note: This class is not strictly JSR-236 based; it can work with any regular\n ThreadFactory that can be found in JNDI. Therefore,\n the default JNDI name "java:comp/DefaultManagedThreadFactory" can be customized\n through the "jndiName" bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/DefaultManagedAwareThreadFactory.html
DefaultManagedTaskExecutor	A										<section class="prog__container">JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for\n JSR-236's "java:comp/DefaultManagedExecutorService" in a Java EE 7 environment.\n\n Note: This class is not strictly JSR-236 based; it can work with any regular\n Executor that can be found in JNDI.\n The actual adapting to ManagedExecutorService\n happens in the base class ConcurrentTaskExecutor itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/DefaultManagedTaskExecutor.html
DefaultManagedTaskScheduler	A										<section class="prog__container">JNDI-based variant of ConcurrentTaskScheduler, performing a default lookup for\n JSR-236's "java:comp/DefaultManagedScheduledExecutorService" in a Java EE 7 environment.\n\n Note: This class is not strictly JSR-236 based; it can work with any regular\n ScheduledExecutorService that can be found in JNDI.\n The actual adapting to ManagedScheduledExecutorService\n happens in the base class ConcurrentTaskScheduler itself.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/DefaultManagedTaskScheduler.html
ExecutorConfigurationSupport	A										<section class="prog__container">Base class for classes that are setting up a\n java.util.concurrent.ExecutorService\n (typically a ThreadPoolExecutor).\n Defines common configuration settings and common lifecycle handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.html
ForkJoinPoolFactoryBean	A										<section class="prog__container">A Spring FactoryBean that builds and exposes a preconfigured ForkJoinPool.\n May be used on Java 7 and 8 as well as on Java 6 with jsr166.jar on the classpath\n (ideally on the VM bootstrap classpath).\n\n For details on the ForkJoinPool API and its use with RecursiveActions, see the\n JDK 7 javadoc.\n\n jsr166.jar, containing java.util.concurrent updates for Java 6, can be obtained\n from the concurrency interest website.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ForkJoinPoolFactoryBean.html
ScheduledExecutorFactoryBean	A										<section class="prog__container">FactoryBean that sets up\n a ScheduledExecutorService\n (by default: a ScheduledThreadPoolExecutor)\n and exposes it for bean references.\n\n Allows for registration of ScheduledExecutorTasks,\n automatically starting the ScheduledExecutorService on initialization and\n cancelling it on destruction of the context. In scenarios that only require static\n registration of tasks at startup, there is no need to access the\n ScheduledExecutorService instance itself in application code at all;\n ScheduledExecutorFactoryBean is then just being used for lifecycle integration.\n\n For an alternative, you may set up a ScheduledThreadPoolExecutor instance\n directly using constructor injection, or use a factory method definition that points\n to the Executors class.\n This is strongly recommended in particular for common @Bean methods in\n configuration classes, where this FactoryBean variant would force you to\n return the FactoryBean type instead of ScheduledExecutorService.\nNote that ScheduledExecutorService\n uses a Runnable instance that is shared between repeated executions,\n in contrast to Quartz which instantiates a new Job for each execution.\n\n WARNING: Runnables submitted via a native\n ScheduledExecutorService are removed from\n the execution schedule once they throw an exception. If you would prefer\n to continue execution after such an exception, switch this FactoryBean's\n "continueScheduledExecutionAfterException"\n property to "true".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.html
ScheduledExecutorTask	A										<section class="prog__container">JavaBean that describes a scheduled executor task, consisting of the\n Runnable and a delay plus period. The period needs to be specified;\n there is no point in a default for it.\n\n The ScheduledExecutorService does not offer\n more sophisticated scheduling options such as cron expressions.\n Consider using ThreadPoolTaskScheduler for such needs.\n\n Note that the ScheduledExecutorService mechanism\n uses a Runnable instance that is shared between repeated executions,\n in contrast to Quartz which creates a new Job instance for each execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ScheduledExecutorTask.html
ThreadPoolExecutorFactoryBean	A										<section class="prog__container">JavaBean that allows for configuring a ThreadPoolExecutor\n in bean style (through its "corePoolSize", "maxPoolSize", "keepAliveSeconds",\n "queueCapacity" properties) and exposing it as a bean reference of its native\n ExecutorService type.\n\n For an alternative, you may set up a ThreadPoolExecutor instance directly\n using constructor injection, or use a factory method definition that points to the\n Executors class.\n This is strongly recommended in particular for common @Bean methods in\n configuration classes, where this FactoryBean variant would force you to\n return the FactoryBean type instead of the actual Executor type.\nIf you need a timing-based ScheduledExecutorService\n instead, consider ScheduledExecutorFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.html
ThreadPoolTaskExecutor	A										<section class="prog__container">JavaBean that allows for configuring a ThreadPoolExecutor\n in bean style (through its "corePoolSize", "maxPoolSize", "keepAliveSeconds", "queueCapacity"\n properties) and exposing it as a Spring TaskExecutor.\n This class is also well suited for management and monitoring (e.g. through JMX),\n providing several useful attributes: "corePoolSize", "maxPoolSize", "keepAliveSeconds"\n (all supporting updates at runtime); "poolSize", "activeCount" (for introspection only).\n\n For an alternative, you may set up a ThreadPoolExecutor instance directly using\n constructor injection, or use a factory method definition that points to the\n Executors class. To expose such a raw Executor as a\n Spring TaskExecutor, simply wrap it with a\n ConcurrentTaskExecutor adapter.\n\n NOTE: This class implements Spring's\n TaskExecutor interface as well as the\n Executor interface, with the former being the primary\n interface, the other just serving as secondary convenience. For this reason, the\n exception handling follows the TaskExecutor contract rather than the Executor contract,\n in particular regarding the TaskRejectedException.\n\n If you prefer native ExecutorService exposure instead,\n consider ThreadPoolExecutorFactoryBean as an alternative to this class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html
ThreadPoolTaskScheduler	A										<section class="prog__container">Implementation of Spring's TaskScheduler interface, wrapping\n a native ScheduledThreadPoolExecutor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.html
AnnotationDrivenBeanDefinitionParser	A										<section class="prog__container">Parser for the 'annotation-driven' element of the 'task' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.html
ContextLifecycleScheduledTaskRegistrar	A										<section class="prog__container">ScheduledTaskRegistrar subclass which redirects the actual scheduling\n of tasks to the afterSingletonsInstantiated() callback (as of 4.1.2).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/ContextLifecycleScheduledTaskRegistrar.html
CronTask	A										<section class="prog__container">TriggerTask implementation defining a Runnable to be executed according\n to a standard\n cron expression.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/CronTask.html
ExecutorBeanDefinitionParser	A										<section class="prog__container">Parser for the 'executor' element of the 'task' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.html
IntervalTask	A										<section class="prog__container">Task implementation defining a Runnable to be executed at a given\n millisecond interval which may be treated as fixed-rate or fixed-delay depending on\n context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/IntervalTask.html
ScheduledTask	A										<section class="prog__container">A representation of a scheduled task,\n used as a return value for scheduling methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/ScheduledTask.html
ScheduledTaskRegistrar	A										<section class="prog__container">Helper bean for registering tasks with a TaskScheduler, typically using cron\n expressions.\n\n As of Spring 3.1, ScheduledTaskRegistrar has a more prominent user-facing\n role when used in conjunction with the @EnableAsync annotation and its\n SchedulingConfigurer callback interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/ScheduledTaskRegistrar.html
ScheduledTasksBeanDefinitionParser	A										<section class="prog__container">Parser for the 'scheduled-tasks' element of the scheduling namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.html
SchedulerBeanDefinitionParser	A										<section class="prog__container">Parser for the 'scheduler' element of the 'task' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/SchedulerBeanDefinitionParser.html
Task	A										<section class="prog__container">Holder class defining a Runnable to be executed as a task, typically at a\n scheduled time or interval. See subclass hierarchy for various scheduling approaches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/Task.html
TaskExecutorFactoryBean	A										<section class="prog__container">FactoryBean for creating ThreadPoolTaskExecutor instances,\n primarily used behind the XML task namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/TaskExecutorFactoryBean.html
TaskManagementConfigUtils	A										<section class="prog__container">Configuration constants for internal sharing across subpackages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/TaskManagementConfigUtils.html
TaskNamespaceHandler	A										<section class="prog__container">NamespaceHandler for the 'task' namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/TaskNamespaceHandler.html
TriggerTask	A										<section class="prog__container">Task implementation defining a Runnable to be executed\n according to a given Trigger.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/config/TriggerTask.html
AdaptableJobFactory	A										<section class="prog__container">JobFactory implementation that supports Runnable\n objects as well as standard Quartz Job instances.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/AdaptableJobFactory.html
CronTriggerFactoryBean	A										<section class="prog__container">A Spring FactoryBean for creating a Quartz CronTrigger\n instance, supporting bean-style usage for trigger configuration.\n\n CronTrigger(Impl) itself is already a JavaBean but lacks sensible defaults.\n This class uses the Spring bean name as job name, the Quartz default group ("DEFAULT")\n as job group, the current time as start time, and indefinite repetition, if not specified.\n\n This class will also register the trigger with the job name and group of\n a given JobDetail. This allows SchedulerFactoryBean\n to automatically register a trigger for the corresponding JobDetail,\n instead of registering the JobDetail separately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/CronTriggerFactoryBean.html
DelegatingJob	A										<section class="prog__container">Simple Quartz Job adapter that delegates to a\n given Runnable instance.\n\n Typically used in combination with property injection on the\n Runnable instance, receiving parameters from the Quartz JobDataMap\n that way instead of via the JobExecutionContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/DelegatingJob.html
JobDetailFactoryBean	A										<section class="prog__container">A Spring FactoryBean for creating a Quartz JobDetail\n instance, supporting bean-style usage for JobDetail configuration.\n\n JobDetail(Impl) itself is already a JavaBean but lacks\n sensible defaults. This class uses the Spring bean name as job name,\n and the Quartz default group ("DEFAULT") as job group if not specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/JobDetailFactoryBean.html
JobMethodInvocationFailedException	A										<section class="prog__container">Unchecked exception that wraps an exception thrown from a target method.\n Propagated to the Quartz scheduler from a Job that reflectively invokes\n an arbitrary target method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/JobMethodInvocationFailedException.html
LocalDataSourceJobStore	A										<section class="prog__container">Subclass of Quartz's JobStoreCMT class that delegates to a Spring-managed\n DataSource instead of using a Quartz-managed connection pool. This JobStore\n will be used if SchedulerFactoryBean's "dataSource" property is set.\n\n Supports both transactional and non-transactional DataSource access.\n With a non-XA DataSource and local Spring transactions, a single DataSource\n argument is sufficient. In case of an XA DataSource and global JTA transactions,\n SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,\n passing in a non-XA DataSource that will not participate in global transactions.\n\n Operations performed by this JobStore will properly participate in any\n kind of Spring-managed transaction, as it uses Spring's DataSourceUtils\n connection handling methods that are aware of a current transaction.\n\n Note that all Quartz Scheduler operations that affect the persistent\n job store should usually be performed within active transactions,\n as they assume to get proper locks etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/LocalDataSourceJobStore.html
LocalTaskExecutorThreadPool	A										<section class="prog__container">Quartz ThreadPool adapter that delegates to a Spring-managed\n TaskExecutor instance, specified on SchedulerFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.html
MethodInvokingJobDetailFactoryBean	A										<section class="prog__container">FactoryBean that exposes a\n JobDetail object which delegates job execution to a\n specified (static or non-static) method. Avoids the need for implementing\n a one-line Quartz Job that just invokes an existing service method on a\n Spring-managed target bean.\n\n Inherits common configuration properties from the MethodInvoker\n base class, such as "targetObject" and\n "targetMethod", adding support for lookup of the target\n bean by name through the "targetBeanName" property\n (as alternative to specifying a "targetObject" directly, allowing for\n non-singleton target objects).\n\n Supports both concurrently running jobs and non-currently running\n jobs through the "concurrent" property. Jobs created by this\n MethodInvokingJobDetailFactoryBean are by default volatile and durable\n (according to Quartz terminology).\n\n NOTE: JobDetails created via this FactoryBean are not\n serializable and thus not suitable for persistent job stores.\n You need to implement your own Quartz Job as a thin wrapper for each case\n where you want a persistent job to delegate to a specific service method.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.html
MethodInvokingJobDetailFactoryBean.MethodInvokingJob	A										<section class="prog__container">Quartz Job implementation that invokes a specified method.\n Automatically applied by MethodInvokingJobDetailFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.MethodInvokingJob.html
MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob	A										<section class="prog__container">Extension of the MethodInvokingJob, implementing the StatefulJob interface.\n Quartz checks whether or not jobs are stateful and if so,\n won't let jobs interfere with each other.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob.html
QuartzJobBean	A										<section class="prog__container">Simple implementation of the Quartz Job interface, applying the\n passed-in JobDataMap and also the SchedulerContext as bean property\n values. This is appropriate because a new Job instance will be created\n for each execution. JobDataMap entries will override SchedulerContext\n entries with the same keys.\n\n For example, let's assume that the JobDataMap contains a key\n "myParam" with value "5": The Job implementation can then expose\n a bean property "myParam" of type int to receive such a value,\n i.e. a method "setMyParam(int)". This will also work for complex\n types like business objects etc.\n\n Note that the preferred way to apply dependency injection\n to Job instances is via a JobFactory: that is, to specify\n SpringBeanJobFactory as Quartz JobFactory (typically via\n SchedulerFactoryBean.setJobFactory(org.quartz.spi.JobFactory) SchedulerFactoryBean's "jobFactory" property}).\n This allows to implement dependency-injected Quartz Jobs without\n a dependency on Spring base classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/QuartzJobBean.html
ResourceLoaderClassLoadHelper	A										<section class="prog__container">Wrapper that adapts from the Quartz ClassLoadHelper interface\n onto Spring's ResourceLoader interface. Used by default when\n the SchedulerFactoryBean runs in a Spring ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.html
SchedulerAccessor	A										<section class="prog__container">Common base class for accessing a Quartz Scheduler, i.e. for registering jobs,\n triggers and listeners on a Scheduler instance.\n\n For concrete usage, check out the SchedulerFactoryBean and\n SchedulerAccessorBean classes.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerAccessor.html
SchedulerAccessorBean	A										<section class="prog__container">Spring bean-style class for accessing a Quartz Scheduler, i.e. for registering jobs,\n triggers and listeners on a given Scheduler instance.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerAccessorBean.html
SchedulerContextAware	A										<section class="prog__container">Callback interface to be implemented by Spring-managed\n Quartz artifacts that need access to the SchedulerContext\n (without having natural access to it).\n\n Currently only supported for custom JobFactory implementations\n that are passed in via Spring's SchedulerFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerContextAware.html
SchedulerFactoryBean	A										<section class="prog__container">FactoryBean that creates and configures a Quartz Scheduler,\n manages its lifecycle as part of the Spring application context, and exposes the\n Scheduler as bean reference for dependency injection.\n\n Allows registration of JobDetails, Calendars and Triggers, automatically\n starting the scheduler on initialization and shutting it down on destruction.\n In scenarios that just require static registration of jobs at startup, there\n is no need to access the Scheduler instance itself in application code.\n\n For dynamic registration of jobs at runtime, use a bean reference to\n this SchedulerFactoryBean to get direct access to the Quartz Scheduler\n (org.quartz.Scheduler). This allows you to create new jobs\n and triggers, and also to control and monitor the entire Scheduler.\n\n Note that Quartz instantiates a new Job for each execution, in\n contrast to Timer which uses a TimerTask instance that is shared\n between repeated executions. Just JobDetail descriptors are shared.\n\n When using persistent jobs, it is strongly recommended to perform all\n operations on the Scheduler within Spring-managed (or plain JTA) transactions.\n Else, database locking will not properly work and might even break.\n (See setDataSource javadoc for details.)\n\n The preferred way to achieve transactional execution is to demarcate\n declarative transactions at the business facade level, which will\n automatically apply to Scheduler operations performed within those scopes.\n Alternatively, you may add transactional advice for the Scheduler itself.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerFactoryBean.html
SimpleThreadPoolTaskExecutor	A										<section class="prog__container">Subclass of Quartz's SimpleThreadPool that implements Spring's\n TaskExecutor interface\n and listens to Spring lifecycle callbacks.\n\n Can be shared between a Quartz Scheduler (specified as "taskExecutor")\n and other TaskExecutor users, or even used completely independent of\n a Quartz Scheduler (as plain TaskExecutor backend).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.html
SimpleTriggerFactoryBean	A										<section class="prog__container">A Spring FactoryBean for creating a Quartz SimpleTrigger\n instance, supporting bean-style usage for trigger configuration.\n\n SimpleTrigger(Impl) itself is already a JavaBean but lacks sensible defaults.\n This class uses the Spring bean name as job name, the Quartz default group ("DEFAULT")\n as job group, the current time as start time, and indefinite repetition, if not specified.\n\n This class will also register the trigger with the job name and group of\n a given JobDetail. This allows SchedulerFactoryBean\n to automatically register a trigger for the corresponding JobDetail,\n instead of registering the JobDetail separately.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.html
SpringBeanJobFactory	A										<section class="prog__container">Subclass of AdaptableJobFactory that also supports Spring-style\n dependency injection on bean properties. This is essentially the direct\n equivalent of Spring's QuartzJobBean in the shape of a Quartz\n JobFactory.\n\n Applies scheduler context, job data map and trigger data map entries\n as bean property values. If no matching bean property is found, the entry\n is by default simply ignored. This is analogous to QuartzJobBean's behavior.\n\n Compatible with Quartz 2.1.4 and higher, as of Spring 4.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/quartz/SpringBeanJobFactory.html
CronSequenceGenerator	A										<section class="prog__container">Date sequence generator for a\n Crontab pattern,\n allowing clients to specify a pattern that the sequence matches.\n\n The pattern is a list of six single space-separated fields: representing\n second, minute, hour, day, month, weekday. Month and weekday names can be\n given as the first three letters of the English names.\n\n Example patterns:\n \n"0 0 * * * *" = the top of every hour of every day.\n"*/10 * * * * *" = every ten seconds.\n"0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.\n"0 * 6,19 * * *" = 6:00 AM and 7:00 PM every day.\n"0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.\n"0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays\n"0 0 0 25 12 ?" = every Christmas Day at midnight\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html
CronTrigger	A										<section class="prog__container">Trigger implementation for cron expressions.\n Wraps a CronSequenceGenerator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronTrigger.html
DelegatingErrorHandlingRunnable	A										<section class="prog__container">Runnable wrapper that catches any exception or error thrown from its\n delegate Runnable and allows an ErrorHandler to handle it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/DelegatingErrorHandlingRunnable.html
MethodInvokingRunnable	A										<section class="prog__container">Adapter that implements the Runnable interface as a configurable\n method invocation based on Spring's MethodInvoker.\n\n Inherits common configuration properties from\n MethodInvoker.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/MethodInvokingRunnable.html
PeriodicTrigger	A										<section class="prog__container">A trigger for periodic task execution. The period may be applied as either\n fixed-rate or fixed-delay, and an initial delay value may also be configured.\n The default initial delay is 0, and the default behavior is fixed-delay\n (i.e. the interval between successive executions is measured from each\n completion time). To measure the interval between the\n scheduled start time of each execution instead, set the\n 'fixedRate' property to true.\n\n Note that the TaskScheduler interface already defines methods for scheduling\n tasks at fixed-rate or with fixed-delay. Both also support an optional value\n for the initial delay. Those methods should be used directly whenever\n possible. The value of this Trigger implementation is that it can be used\n within components that rely on the Trigger abstraction. For example, it may\n be convenient to allow periodic triggers, cron-based triggers, and even\n custom Trigger implementations to be used interchangeably.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/PeriodicTrigger.html
ScheduledMethodRunnable	A										<section class="prog__container">Variant of MethodInvokingRunnable meant to be used for processing\n of no-arg scheduled methods. Propagates user exceptions to the caller,\n assuming that an error strategy for Runnables is in place.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/ScheduledMethodRunnable.html
SimpleTriggerContext	A										<section class="prog__container">Simple data holder implementation of the TriggerContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/SimpleTriggerContext.html
TaskUtils	A										<section class="prog__container">Utility methods for decorating tasks with error handling.\n\n NOTE: This class is intended for internal use by Spring's scheduler\n implementations. It is only public so that it may be accessed from impl classes\n within other packages. It is not intended for general use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/TaskUtils.html
ScriptCompilationException	A										<section class="prog__container">Exception to be thrown on script compilation failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/ScriptCompilationException.html
ScriptEvaluator	A										<section class="prog__container">Spring's strategy interface for evaluating a script.\n\n Aside from language-specific implementations, Spring also ships\n a version based on the standard javax.script package (JSR-223):\n StandardScriptEvaluator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/ScriptEvaluator.html
ScriptFactory	A										<section class="prog__container">Script definition interface, encapsulating the configuration\n of a specific script as well as a factory method for\n creating the actual scripted Java Object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/ScriptFactory.html
ScriptSource	A										<section class="prog__container">Interface that defines the source of a script.\n Tracks whether the underlying script has been modified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/ScriptSource.html
BshScriptEvaluator	A										<section class="prog__container">BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/bsh/BshScriptEvaluator.html
BshScriptFactory	A										<section class="prog__container">ScriptFactory implementation\n for a BeanShell script.\n\n Typically used in combination with a\n ScriptFactoryPostProcessor;\n see the latter's javadoc for a configuration example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/bsh/BshScriptFactory.html
BshScriptUtils.BshExecutionException	A										<section class="prog__container">Exception to be thrown on script execution failure.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/bsh/BshScriptUtils.BshExecutionException.html
BshScriptUtils	A										<section class="prog__container">Utility methods for handling BeanShell-scripted objects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/bsh/BshScriptUtils.html
LangNamespaceHandler	A										<section class="prog__container">NamespaceHandler that supports the wiring of\n objects backed by dynamic languages such as Groovy, JRuby and\n BeanShell. The following is an example (from the reference\n documentation) that details the wiring of a Groovy backed bean:\n\n \n <lang:groovy id="messenger"\n     refresh-check-delay="5000"\n     script-source="classpath:Messenger.groovy">\n <lang:property name="message" value="I Can Do The Frug"/>\n </lang:groovy>\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/config/LangNamespaceHandler.html
LangNamespaceUtils	A										<section class="prog__container">Register a ScriptFactoryPostProcessor bean definition in the supplied\n BeanDefinitionRegistry if the ScriptFactoryPostProcessor hasn't\n already been registered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/config/LangNamespaceUtils.html
GroovyObjectCustomizer	A										<section class="prog__container">Strategy used by GroovyScriptFactory to allow the customization of\n a created GroovyObject.\n\n This is useful to allow the authoring of DSLs, the replacement of missing\n methods, and so forth. For example, a custom MetaClass\n could be specified.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/groovy/GroovyObjectCustomizer.html
GroovyScriptEvaluator	A										<section class="prog__container">Groovy-based implementation of Spring's ScriptEvaluator strategy interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/groovy/GroovyScriptEvaluator.html
GroovyScriptFactory	A										<section class="prog__container">ScriptFactory implementation\n for a Groovy script.\n\n Typically used in combination with a\n ScriptFactoryPostProcessor;\n see the latter's javadoc for a configuration example.\n\n Note: Spring 4.0 supports Groovy 1.8 and higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/groovy/GroovyScriptFactory.html
JRubyScriptFactory	A										<section class="prog__container">Deprecated. \nin favor of JRuby support via the JSR-223 abstraction\n (StandardScriptFactory)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/jruby/JRubyScriptFactory.html
JRubyScriptUtils	A										<section class="prog__container">Deprecated. \nin favor of JRuby support via the JSR-223 abstraction\n (StandardScriptFactory)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/jruby/JRubyScriptUtils.html
JRubyScriptUtils.JRubyExecutionException	A										<section class="prog__container">Exception thrown in response to a JRuby RaiseException\n being thrown from a JRuby method invocation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/jruby/JRubyScriptUtils.JRubyExecutionException.html
RefreshableScriptTargetSource	A										<section class="prog__container">Subclass of BeanFactoryRefreshableTargetSource that determines whether\n a refresh is required through the given ScriptFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/RefreshableScriptTargetSource.html
ResourceScriptSource	A										<section class="prog__container">ScriptSource implementation\n based on Spring's Resource\n abstraction. Loads the script text from the underlying Resource's\n File or\n InputStream,\n and tracks the last-modified timestamp of the file (if possible).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/ResourceScriptSource.html
ScriptFactoryPostProcessor	A										<section class="prog__container">BeanPostProcessor that\n handles ScriptFactory definitions,\n replacing each factory with the actual scripted Java object generated by it.\n\n This is similar to the\n FactoryBean mechanism, but is\n specifically tailored for scripts and not built into Spring's core\n container itself but rather implemented as an extension.\n\n NOTE: The most important characteristic of this post-processor\n is that constructor arguments are applied to the\n ScriptFactory instance\n while bean property values are applied to the generated scripted object.\n Typically, constructor arguments include a script source locator and\n potentially script interfaces, while bean property values include\n references and config values to inject into the scripted object itself.\n\n The following ScriptFactoryPostProcessor will automatically\n be applied to the two\n ScriptFactory definitions below.\n At runtime, the actual scripted objects will be exposed for\n "bshMessenger" and "groovyMessenger", rather than the\n ScriptFactory instances. Both of\n those are supposed to be castable to the example's Messenger\n interfaces here.\n\n <bean class="org.springframework.scripting.support.ScriptFactoryPostProcessor"/>\n\n <bean id="bshMessenger" class="org.springframework.scripting.bsh.BshScriptFactory">\n   <constructor-arg value="classpath:mypackage/Messenger.bsh"/>\n   <constructor-arg value="mypackage.Messenger"/>\n   <property name="message" value="Hello World!"/>\n </bean>\n\n <bean id="groovyMessenger" class="org.springframework.scripting.groovy.GroovyScriptFactory">\n   <constructor-arg value="classpath:mypackage/Messenger.groovy"/>\n   <property name="message" value="Hello World!"/>\n </bean>\nNOTE: Please note that the above excerpt from a Spring\n XML bean definition file uses just the <bean/>-style syntax\n (in an effort to illustrate using the ScriptFactoryPostProcessor itself).\n In reality, you would never create a <bean/> definition for a\n ScriptFactoryPostProcessor explicitly; rather you would import the\n tags from the 'lang' namespace and simply create scripted\n beans using the tags in that namespace... as part of doing so, a\n ScriptFactoryPostProcessor will implicitly be created for you.\n\n The Spring reference documentation contains numerous examples of using\n tags in the 'lang' namespace; by way of an example, find below\n a Groovy-backed bean defined using the 'lang:groovy' tag.\n\n \n <?xml version="1.0" encoding="UTF-8"?>\n <beans xmlns="http://www.springframework.org/schema/beans"\n     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n     xmlns:lang="http://www.springframework.org/schema/lang">\n\n   <!-- this is the bean definition for the Groovy-backed Messenger implementation -->\n   <lang:groovy id="messenger" script-source="classpath:Messenger.groovy">\n     <lang:property name="message" value="I Can Do The Frug" />\n   </lang:groovy>\n\n   <!-- an otherwise normal bean that will be injected by the Groovy-backed Messenger -->\n   <bean id="bookingService" class="x.y.DefaultBookingService">\n     <property name="messenger" ref="messenger" />\n   </bean>\n\n </beans></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/ScriptFactoryPostProcessor.html
StandardScriptEvalException	A										<section class="prog__container">Exception decorating a ScriptException coming out of\n JSR-223 script evaluation, i.e. a ScriptEngine.eval(java.lang.String, javax.script.ScriptContext)\n call or Invocable.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...) /\n Invocable.invokeFunction(java.lang.String, java.lang.Object...) call.\n\n This exception does not print the Java stacktrace, since the JSR-223\n ScriptException results in a rather convoluted text output.\n From that perspective, this exception is primarily a decorator for a\n ScriptException root cause passed into an outer exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/StandardScriptEvalException.html
StandardScriptEvaluator	A										<section class="prog__container">javax.script (JSR-223) based implementation of Spring's ScriptEvaluator\n strategy interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/StandardScriptEvaluator.html
StandardScriptFactory	A										<section class="prog__container">ScriptFactory implementation based\n on the JSR-223 script engine abstraction (as included in Java 6+).\n Supports JavaScript, Groovy, JRuby and other JSR-223 compliant engines.\n\n Typically used in combination with a\n ScriptFactoryPostProcessor;\n see the latter's javadoc for a configuration example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/StandardScriptFactory.html
StandardScriptUtils	A										<section class="prog__container">Common operations for dealing with a JSR-223 ScriptEngine.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/StandardScriptUtils.html
StaticScriptSource	A										<section class="prog__container">Static implementation of the\n ScriptSource interface,\n encapsulating a given String that contains the script source text.\n Supports programmatic updates of the script String.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scripting/support/StaticScriptSource.html
Component	A										<section class="prog__container">Indicates that an annotated class is a "component".\n Such classes are considered as candidates for auto-detection\n when using annotation-based configuration and classpath scanning.\n\n Other class-level annotations may be considered as identifying\n a component as well, typically a special kind of component:\n e.g. the @Repository annotation or AspectJ's\n @Aspect annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Component.html
Controller	A										<section class="prog__container">Indicates that an annotated class is a "Controller" (e.g. a web controller).\n\n This annotation serves as a specialization of @Component,\n allowing for implementation classes to be autodetected through classpath scanning.\n It is typically used in combination with annotated handler methods based on the\n RequestMapping annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Controller.html
Repository	A										<section class="prog__container">Indicates that an annotated class is a "Repository", originally defined by\n Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,\n retrieval, and search behavior which emulates a collection of objects".\n\n Teams implementing traditional J2EE patterns such as "Data Access Object"\n may also apply this stereotype to DAO classes, though care should be taken to\n understand the distinction between Data Access Object and DDD-style repositories\n before doing so. This annotation is a general-purpose stereotype and individual teams\n may narrow their semantics and use as appropriate.\n\n A class thus annotated is eligible for Spring\n DataAccessException translation\n when used in conjunction with a PersistenceExceptionTranslationPostProcessor. The annotated class is also clarified as\n to its role in the overall application architecture for the purpose of tooling,\n aspects, etc.\n\n As of Spring 2.5, this annotation also serves as a specialization of\n @Component, allowing for implementation classes to be autodetected\n through classpath scanning.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Repository.html
Service	A										<section class="prog__container">Indicates that an annotated class is a "Service", originally defined by Domain-Driven\n Design (Evans, 2003) as "an operation offered as an interface that stands alone in the\n model, with no encapsulated state."\n\n May also indicate that a class is a "Business Service Facade" (in the Core J2EE\n patterns sense), or something similar. This annotation is a general-purpose stereotype\n and individual teams may narrow their semantics and use as appropriate.\n\n This annotation serves as a specialization of @Component,\n allowing for implementation classes to be autodetected through classpath scanning.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html
Commit	A										<section class="prog__container">@Commit is a test annotation that is used to indicate that a\n test-managed transaction should be committed after\n the test method has completed.\n\n Consult the class-level Javadoc for\n TransactionalTestExecutionListener\n for an explanation of test-managed transactions.\n\n When declared as a class-level annotation, @Commit defines\n the default commit semantics for all test methods within the test class\n hierarchy. When declared as a method-level annotation, @Commit\n defines commit semantics for the specific test method, potentially\n overriding class-level default commit or rollback semantics.\n\n Warning: @Commit can be used as direct\n replacement for @Rollback(false); however, it should\n not be declared alongside @Rollback. Declaring\n @Commit and @Rollback on the same test method or on the\n same test class is unsupported and may lead to unpredictable results.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/Commit.html
DirtiesContext.ClassMode	A										<section class="prog__container">Defines modes which determine how @DirtiesContext is\n interpreted when used to annotate a test class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.ClassMode.html
DirtiesContext.HierarchyMode	A										<section class="prog__container">Defines modes which determine how the context cache is cleared\n when @DirtiesContext is used in a test whose context is\n configured as part of a hierarchy via\n @ContextHierarchy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.HierarchyMode.html
DirtiesContext	A										<section class="prog__container">Test annotation which indicates that the\n ApplicationContext\n associated with a test is dirty and should therefore be closed\n and removed from the context cache.\n\n Use this annotation if a test has modified the context — for\n example, by modifying the state of a singleton bean, modifying the state\n of an embedded database, etc. Subsequent tests that request the same\n context will be supplied a new context.\n\n @DirtiesContext may be used as a class-level and method-level\n annotation within the same class or class hierarchy. In such scenarios, the\n ApplicationContext will be marked as dirty before or\n after any such annotated method as well as before or after the current test\n class, depending on the configured methodMode() and classMode().\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.\n\n Supported Test Phases\n\nBefore current test class: when declared at the class\n level with class mode set to BEFORE_CLASS\nBefore each test method in current test class: when\n declared at the class level with class mode set to\n BEFORE_EACH_TEST_METHOD\nBefore current test method: when declared at the\n method level with method mode set to\n BEFORE_METHOD\nAfter current test method: when declared at the\n method level with method mode set to\n AFTER_METHOD\nAfter each test method in current test class: when\n declared at the class level with class mode set to\n AFTER_EACH_TEST_METHOD\nAfter current test class: when declared at the\n class level with class mode set to\n AFTER_CLASS\n\nBEFORE_* modes are supported by the\n DirtiesContextBeforeModesTestExecutionListener;\n AFTER_* modes are supported by the\n DirtiesContextTestExecutionListener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html
DirtiesContext.MethodMode	A										<section class="prog__container">Defines modes which determine how @DirtiesContext is\n interpreted when used to annotate a test method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.MethodMode.html
IfProfileValue	A										<section class="prog__container">Test annotation to indicate whether a test is enabled or disabled for a\n specific testing profile.\n\n In the context of this annotation, the term profile refers to\n a Java system property by default; however, the semantics can be changed\n by implementing a custom ProfileValueSource. If the configured\n ProfileValueSource returns a matching value() for the\n declared name(), the test will be enabled. Otherwise, the test\n will be disabled and effectively ignored.\n\n @IfProfileValue can be applied at the class level, the method\n level, or both. Class-level usage of @IfProfileValue takes\n precedence over method-level usage for any methods within that class or\n its subclasses. Specifically, a test is enabled if it is enabled both at\n the class level and at the method level; the absence of\n @IfProfileValue means the test is implicitly enabled. This is\n analogous to the semantics of JUnit's @Ignore\n annotation, except that the presence of @Ignore always disables\n a test.\n\n Example\n When using SystemProfileValueSource as the ProfileValueSource\n implementation (which is configured by default), you can configure a test\n method to run only on Java VMs from Oracle as follows:\n\n \n @IfProfileValue(name = "java.vendor", value = "Oracle Corporation")\n public void testSomething() {\n     // ...\n }\n'OR' Semantics\nYou can alternatively configure @IfProfileValue with OR\n semantics for multiple values(). The following test will be enabled\n if a ProfileValueSource has been appropriately configured for the\n "test-groups" profile with a value of either unit-tests\nor integration-tests. This functionality is similar to\n TestNG's support for test groups and JUnit's experimental support\n for test categories.\n\n \n @IfProfileValue(name = "test-groups", values = { "unit-tests", "integration-tests" })\n public void testWhichRunsForUnitOrIntegrationTestGroups() {\n     // ...\n }\n@IfProfileValue vs. @Profile\nAlthough the @IfProfileValue and\n @Profile annotations\n both involve profiles, they are not directly related. @Profile\n involves bean definition profiles configured in the\n Environment; whereas,\n @IfProfileValue is used to enable or disable tests.\n\n Meta-annotation Support\nAs of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/IfProfileValue.html
ProfileValueSource	A										<section class="prog__container">\n Strategy interface for retrieving profile values for a given\n testing environment.\n \n\n Concrete implementations must provide a public no-args\n constructor.\n \n\n Spring provides the following out-of-the-box implementations:\n \n\nSystemProfileValueSource\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/ProfileValueSource.html
ProfileValueSourceConfiguration	A										<section class="prog__container">ProfileValueSourceConfiguration is a class-level annotation which\n is used to specify what type of ProfileValueSource to use when\n retrieving profile values configured via the @IfProfileValue annotation.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/ProfileValueSourceConfiguration.html
ProfileValueUtils	A										<section class="prog__container">General utility methods for working with profile values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/ProfileValueUtils.html
Repeat	A										<section class="prog__container">Test annotation to indicate that a test method should be invoked repeatedly.\n\n Note that the scope of execution to be repeated includes execution of the\n test method itself as well as any set up or tear down of\n the test fixture.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/Repeat.html
Rollback	A										<section class="prog__container">@Rollback is a test annotation that is used to indicate whether\n a test-managed transaction should be rolled back after\n the test method has completed.\n\n Consult the class-level Javadoc for\n TransactionalTestExecutionListener\n for an explanation of test-managed transactions.\n\n When declared as a class-level annotation, @Rollback defines\n the default rollback semantics for all test methods within the test class\n hierarchy. When declared as a method-level annotation, @Rollback\n defines rollback semantics for the specific test method, potentially\n overriding class-level default commit or rollback semantics.\n\n As of Spring Framework 4.2, @Commit can be used as direct\n replacement for @Rollback(false).\n\n Warning: Declaring @Commit and @Rollback\n on the same test method or on the same test class is unsupported and may\n lead to unpredictable results.\n\n This annotation may be used as a meta-annotation to create\n custom composed annotations. Consult the source code for\n @Commit for a concrete example.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/Rollback.html
SystemProfileValueSource	A										<section class="prog__container">Implementation of ProfileValueSource which uses system properties as\n the underlying source.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/SystemProfileValueSource.html
TestAnnotationUtils	A										<section class="prog__container">Collection of utility methods for working with Spring's core testing annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/TestAnnotationUtils.html
Timed	A										<section class="prog__container">Test-specific annotation to indicate that a test method has to finish\n execution in a specified time period.\n\n If the text execution takes longer than the specified time period, then\n the test is considered to have failed.\n\n Note that the time period includes execution of the test method itself,\n any repetitions of the test, and any set up or\n tear down of the test fixture.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/annotation/Timed.html
ActiveProfiles	A										<section class="prog__container">ActiveProfiles is a class-level annotation that is used to declare\n which active bean definition profiles should be used when loading\n an ApplicationContext\n for test classes.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ActiveProfiles.html
ActiveProfilesResolver	A										<section class="prog__container">Strategy interface for programmatically resolving which active bean\n definition profiles should be used when loading an\n ApplicationContext\n for a test class.\n\n A custom ActiveProfilesResolver can be registered via the\n resolver attribute of @ActiveProfiles.\n\n Concrete implementations must provide a public no-args constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ActiveProfilesResolver.html
BootstrapContext	A										<section class="prog__container">BootstrapContext encapsulates the context in which the Spring\n TestContext Framework is bootstrapped.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/BootstrapContext.html
BootstrapWith	A										<section class="prog__container">@BootstrapWith defines class-level metadata that is used to determine\n how to bootstrap the Spring TestContext Framework.\n\n This annotation may also be used as a meta-annotation to create\n custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/BootstrapWith.html
CacheAwareContextLoaderDelegate	A										<section class="prog__container">A CacheAwareContextLoaderDelegate is responsible for loading and closing application\n contexts, interacting transparently with a\n ContextCache\n behind the scenes.\n\n Note: CacheAwareContextLoaderDelegate does not extend the\n ContextLoader or SmartContextLoader interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/CacheAwareContextLoaderDelegate.html
ContextConfiguration	A										<section class="prog__container">@ContextConfiguration defines class-level metadata that is used to determine\n how to load and configure an ApplicationContext for integration tests.\n\n Supported Resource Types\n\n Prior to Spring 3.1, only path-based resource locations (typically XML configuration\n files) were supported. As of Spring 3.1, context loaders may\n choose to support either path-based or class-based resources. As of\n Spring 4.0.4, context loaders may choose to support path-based\n and class-based resources simultaneously. Consequently\n @ContextConfiguration can be used to declare either path-based resource\n locations (via the locations() or value() attribute) or\n annotated classes (via the classes() attribute). Note, however, that most\n implementations of SmartContextLoader only support a single resource type. As\n of Spring 4.1, path-based resource locations may be either XML configuration files or\n Groovy scripts (if Groovy is on the classpath). Of course, third-party frameworks may\n choose to support additional types of path-based resources.\n\n Annotated Classes\n\n The term annotated class can refer to any of the following.\n\n \nA class annotated with @Configuration\nA component (i.e., a class annotated with\n @Component,\n @Service,\n @Repository, etc.)\nA JSR-330 compliant class that is annotated with javax.inject annotations\nAny other class that contains @Bean-methods\n\n\n Consult the Javadoc for @Configuration\n and @Bean for further\n information regarding the configuration and semantics of annotated classes.\n\n \n As of Spring Framework 4.0, this annotation may be used as a meta-annotation\n to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html
ContextConfigurationAttributes	A										<section class="prog__container">ContextConfigurationAttributes encapsulates the context configuration\n attributes declared via @ContextConfiguration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextConfigurationAttributes.html
ContextCustomizer	A										<section class="prog__container">Strategy interface for customizing application contexts that are created and managed by the Spring\n TestContext Framework.\n\n Customizers are created by ContextCustomizerFactory implementations.\n\n Implementations must implement correct equals and hashCode\n methods since customizers form part of the MergedContextConfiguration\n which is used as a cache key.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextCustomizer.html
ContextCustomizerFactory	A										<section class="prog__container">Factory for creating ContextCustomizers.\n\n Factories are invoked after ContextLoaders have\n processed context configuration attributes but before the\n MergedContextConfiguration is created.\n\n By default, the Spring TestContext Framework will use the\n SpringFactoriesLoader\n mechanism for loading factories configured in all META-INF/spring.factories\n files on the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextCustomizerFactory.html
ContextHierarchy	A										<section class="prog__container">@ContextHierarchy is a class-level annotation that is used to define\n a hierarchy of ApplicationContexts for integration tests.\n\n Examples\nThe following JUnit-based examples demonstrate common configuration\n scenarios for integration tests that require the use of context hierarchies.\n\n Single Test Class with Context Hierarchy\nControllerIntegrationTests represents a typical integration testing\n scenario for a Spring MVC web application by declaring a context hierarchy\n consisting of two levels, one for the root WebApplicationContext\n (with TestAppConfig) and one for the dispatcher servlet\nWebApplicationContext (with WebConfig). The WebApplicationContext that is autowired into the test instance is\n the one for the child context (i.e., the lowest context in the hierarchy).\n\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @WebAppConfiguration\n @ContextHierarchy({\n     @ContextConfiguration(classes = TestAppConfig.class),\n     @ContextConfiguration(classes = WebConfig.class)\n })\n public class ControllerIntegrationTests {\n\n     @Autowired\n     private WebApplicationContext wac;\n\n     // ...\n }\nClass Hierarchy with Implicit Parent Context\nThe following test classes define a context hierarchy within a test class\n hierarchy. AbstractWebTests declares the configuration for a root\n WebApplicationContext in a Spring-powered web application. Note,\n however, that AbstractWebTests does not declare @ContextHierarchy;\n consequently, subclasses of AbstractWebTests can optionally participate\n in a context hierarchy or follow the standard semantics for @ContextConfiguration.\n SoapWebServiceTests and RestWebServiceTests both extend\n AbstractWebTests and define a context hierarchy via @ContextHierarchy.\n The result is that three application contexts will be loaded (one for each\n declaration of @ContextConfiguration, and the application context\n loaded based on the configuration in AbstractWebTests will be set as\n the parent context for each of the contexts loaded for the concrete subclasses.\n\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @WebAppConfiguration\n @ContextConfiguration("file:src/main/webapp/WEB-INF/applicationContext.xml")\n public abstract class AbstractWebTests {}\n\n @ContextHierarchy(@ContextConfiguration("/spring/soap-ws-config.xml")\n public class SoapWebServiceTests extends AbstractWebTests {}\n\n @ContextHierarchy(@ContextConfiguration("/spring/rest-ws-config.xml")\n public class RestWebServiceTests extends AbstractWebTests {}\nClass Hierarchy with Merged Context Hierarchy Configuration\nThe following classes demonstrate the use of named hierarchy levels\n in order to merge the configuration for specific levels in a context\n hierarchy. BaseTests defines two levels in the hierarchy, parent\n and child. ExtendedTests extends BaseTests and instructs\n the Spring TestContext Framework to merge the context configuration for the\n child hierarchy level, simply by ensuring that the names declared via\n ContextConfiguration.name() are both "child". The result is that\n three application contexts will be loaded: one for "/app-config.xml",\n one for "/user-config.xml", and one for {"/user-config.xml",\n "/order-config.xml"}. As with the previous example, the application\n context loaded from "/app-config.xml" will be set as the parent context\n for the contexts loaded from "/user-config.xml" and {"/user-config.xml",\n "/order-config.xml"}.\n\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextHierarchy({\n     @ContextConfiguration(name = "parent", locations = "/app-config.xml"),\n     @ContextConfiguration(name = "child",  locations = "/user-config.xml")\n })\n public class BaseTests {}\n\n @ContextHierarchy(\n     @ContextConfiguration(name = "child",  locations = "/order-config.xml")\n )\n public class ExtendedTests extends BaseTests {}\nClass Hierarchy with Overridden Context Hierarchy Configuration\nIn contrast to the previous example, this example demonstrates how to\n override the configuration for a given named level in a context hierarchy\n by setting the ContextConfiguration.inheritLocations() flag to false.\n Consequently, the application context for ExtendedTests will be loaded\n only from "/test-user-config.xml" and will have its parent set to the\n context loaded from "/app-config.xml".\n\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextHierarchy({\n     @ContextConfiguration(name = "parent", locations = "/app-config.xml"),\n     @ContextConfiguration(name = "child",  locations = "/user-config.xml")\n })\n public class BaseTests {}\n\n @ContextHierarchy(\n     @ContextConfiguration(name = "child",  locations = "/test-user-config.xml", inheritLocations=false)\n )\n public class ExtendedTests extends BaseTests {}\nAs of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextHierarchy.html
ContextLoader	A										<section class="prog__container">Strategy interface for loading an application context\n for an integration test managed by the Spring TestContext Framework.\n\n Note: as of Spring 3.1, implement SmartContextLoader instead\n of this interface in order to provide support for annotated classes, active\n bean definition profiles, and application context initializers.\n\n Clients of a ContextLoader should call\n processLocations() prior to\n calling loadContext() in case the\n ContextLoader provides custom support for modifying or generating locations.\n The results of processLocations()\n should then be supplied to loadContext().\n\n Concrete implementations must provide a public no-args constructor.\n\n Spring provides the following out-of-the-box implementations:\n \nGenericXmlContextLoader\nGenericPropertiesContextLoader\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextLoader.html
MergedContextConfiguration	A										<section class="prog__container">MergedContextConfiguration encapsulates the merged\n context configuration declared on a test class and all of its superclasses\n via @ContextConfiguration,\n @ActiveProfiles, and\n @TestPropertySource.\n\n Merged context resource locations, annotated classes, active profiles,\n property resource locations, and in-lined properties represent all declared\n values in the test class hierarchy taking into consideration the semantics\n of the ContextConfiguration.inheritLocations(),\n ActiveProfiles.inheritProfiles(),\n TestPropertySource.inheritLocations(), and\n TestPropertySource.inheritProperties() flags.\n\n A SmartContextLoader uses MergedContextConfiguration\n to load an ApplicationContext.\n\n MergedContextConfiguration is also used by the\n ContextCache\n as the key for caching an\n ApplicationContext\n that was loaded using properties of this MergedContextConfiguration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/MergedContextConfiguration.html
SmartContextLoader	A										<section class="prog__container">Strategy interface for loading an application context\n for an integration test managed by the Spring TestContext Framework.\n\n The SmartContextLoader SPI supersedes the ContextLoader SPI\n introduced in Spring 2.5: a SmartContextLoader can choose to process\n either resource locations or annotated classes. Furthermore, a\n SmartContextLoader can set active bean definition profiles in the\n context that it loads (see MergedContextConfiguration.getActiveProfiles()\n and loadContext(MergedContextConfiguration)).\n\n See the Javadoc for @ContextConfiguration\n for a definition of annotated class.\n\n Clients of a SmartContextLoader should call\n processContextConfiguration() prior to calling\n loadContext(). This gives a\n SmartContextLoader the opportunity to provide custom support for\n modifying resource locations or detecting default resource locations or\n default configuration classes. The results of\n processContextConfiguration() should be merged for all classes in the\n hierarchy of the root test class and then supplied to\n loadContext().\n\n Even though SmartContextLoader extends ContextLoader,\n clients should favor SmartContextLoader-specific methods over those\n defined in ContextLoader, particularly because a\n SmartContextLoader may choose not to support methods defined in the\n ContextLoader SPI.\n\n Concrete implementations must provide a public no-args constructor.\n\n Spring provides the following out-of-the-box implementations:\n \nDelegatingSmartContextLoader\nAnnotationConfigContextLoader\nGenericXmlContextLoader\nGenericPropertiesContextLoader\nWebDelegatingSmartContextLoader\nAnnotationConfigWebContextLoader\nGenericXmlWebContextLoader\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/SmartContextLoader.html
TestContext	A										<section class="prog__container">TestContext encapsulates the context in which a test is executed,\n agnostic of the actual testing framework in use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestContext.html
TestContextBootstrapper	A										<section class="prog__container">TestContextBootstrapper defines the SPI for bootstrapping the\n Spring TestContext Framework.\n\n A TestContextBootstrapper is used by the TestContextManager to\n get the TestExecutionListeners for the\n current test and to build the TestContext that\n it manages.\n\n Configuration\nA custom bootstrapping strategy can be configured for a test class (or\n test class hierarchy) via @BootstrapWith, either\n directly or as a meta-annotation.\n\n If a bootstrapper is not explicitly configured via @BootstrapWith,\n either the DefaultTestContextBootstrapper or the\n WebTestContextBootstrapper will be used, depending on the presence of\n @WebAppConfiguration.\n\n Implementation Notes\nConcrete implementations must provide a public no-args constructor.\n\n WARNING: this SPI will likely change in the future in\n order to accommodate new requirements. Implementers are therefore strongly encouraged\n not to implement this interface directly but rather to extend\nAbstractTestContextBootstrapper or one of its concrete subclasses instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestContextBootstrapper.html
TestContextManager	A										<section class="prog__container">TestContextManager is the main entry point into the Spring\n TestContext Framework.\n\n Specifically, a TestContextManager is responsible for managing a\n single TestContext and signaling events to all registered\n TestExecutionListeners at the following test\n execution points:\n\n \nbefore test class execution: prior to any\n before class callbacks of a particular testing framework (e.g.,\n JUnit 4's @BeforeClass)\ntest instance preparation:\n immediately following instantiation of the test instance\nbefore test method execution:\n prior to any before method callbacks of a particular testing framework\n (e.g., JUnit 4's @Before)\nafter test method\n execution: after any after method callbacks of a particular testing\n framework (e.g., JUnit 4's @After)\nafter test class execution: after any\n after class callbacks of a particular testing framework (e.g., JUnit\n 4's @AfterClass)\n\nSupport for loading and accessing\n application contexts,\n dependency injection of test instances,\n transactional\n execution of test methods, etc. is provided by\n ContextLoaders and TestExecutionListeners, which are configured via\n @ContextConfiguration and\n @TestExecutionListeners.\n\n Bootstrapping of the TestContext, the default ContextLoader,\n default TestExecutionListeners, and their collaborators is performed\n by a TestContextBootstrapper, which is configured via\n @BootstrapWith.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestContextManager.html
TestExecutionListener	A										<section class="prog__container">TestExecutionListener defines a listener API for reacting to\n test execution events published by the TestContextManager with which\n the listener is registered.\n\n Concrete implementations must provide a public no-args constructor,\n so that listeners can be instantiated transparently by tools and configuration\n mechanisms.\n\n Implementations may optionally declare the position in which they should\n be ordered among the chain of default listeners via the\n Ordered interface or\n @Order annotation. See\n TestContextBootstrapper.getTestExecutionListeners() for details.\n\n Spring provides the following out-of-the-box implementations (all of\n which implement Ordered):\n \nServletTestExecutionListener\nDirtiesContextBeforeModesTestExecutionListener\nDependencyInjectionTestExecutionListener\nDirtiesContextTestExecutionListener\nTransactionalTestExecutionListener\nSqlScriptsTestExecutionListener\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html
TestExecutionListeners	A										<section class="prog__container">TestExecutionListeners defines class-level metadata for configuring\n which TestExecutionListeners should be\n registered with a TestContextManager.\n\n Typically, @TestExecutionListeners will be used in conjunction\n with @ContextConfiguration.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListeners.html
TestExecutionListeners.MergeMode	A										<section class="prog__container">Enumeration of modes that dictate whether or not explicitly\n declared listeners are merged with the default listeners when\n @TestExecutionListeners is declared on a class that does\n not inherit listeners from a superclass.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListeners.MergeMode.html
TestPropertySource	A										<section class="prog__container">@TestPropertySource is a class-level annotation that is used to\n configure the locations() of properties files and inlined\n properties() to be added to the Environment's set of\n PropertySources for an\n ApplicationContext\n for integration tests.\n\n Precedence\nTest property sources have higher precedence than those loaded from the\n operating system's environment or Java system properties as well as property\n sources added by the application declaratively via\n @PropertySource\n or programmatically (e.g., via an\n ApplicationContextInitializer\n or some other means). Thus, test property sources can be used to selectively\n override properties defined in system and application property sources.\n Furthermore, inlined properties() have higher precedence than\n properties loaded from resource locations().\n\n Default Properties File Detection\nIf @TestPropertySource is declared as an empty annotation\n (i.e., without explicit values for locations() or properties()),\n an attempt will be made to detect a default properties file relative\n to the class that declared the annotation. For example, if the annotated test\n class is com.example.MyTest, the corresponding default properties file\n is "classpath:com/example/MyTest.properties". If the default cannot be\n detected, an IllegalStateException will be thrown.\n\n Enabling @TestPropertySource\n@TestPropertySource is enabled if the configured\n context loader honors it. Every\n SmartContextLoader that is a subclass of either\n AbstractGenericContextLoader or\n AbstractGenericWebContextLoader\n provides automatic support for @TestPropertySource, and this includes\n every SmartContextLoader provided by the Spring TestContext Framework.\n\n Miscellaneous\n\nTypically, @TestPropertySource will be used in conjunction with\n @ContextConfiguration.\nThis annotation may be used as a meta-annotation to create\n custom composed annotations; however, caution should be taken if\n this annotation and @ContextConfiguration are combined on a composed\n annotation since the locations and inheritLocations attributes\n of both annotations can lead to ambiguity during the attribute resolution\n process.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html
ContextCache	A										<section class="prog__container">ContextCache defines the SPI for caching Spring\n ApplicationContexts within the\n Spring TestContext Framework.\n\n A ContextCache maintains a cache of ApplicationContexts\n keyed by MergedContextConfiguration instances, potentially configured\n with a maximum size and\n a custom eviction policy.\n\n Rationale\nContext caching can have significant performance benefits if context\n initialization is complex. Although the initialization of a Spring context\n itself is typically very quick, some beans in a context — for example,\n an embedded database or a LocalContainerEntityManagerFactoryBean for\n working with JPA — may take several seconds to initialize. Hence it\n often makes sense to perform that initialization only once per test suite or\n JVM process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/cache/ContextCache.html
ContextCacheUtils	A										<section class="prog__container">Collection of utilities for working with ContextCaches.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/cache/ContextCacheUtils.html
DefaultCacheAwareContextLoaderDelegate	A										<section class="prog__container">Default implementation of the CacheAwareContextLoaderDelegate interface.\n\n To use a static DefaultContextCache, invoke the\n DefaultCacheAwareContextLoaderDelegate() constructor; otherwise,\n invoke the DefaultCacheAwareContextLoaderDelegate(ContextCache)\n and provide a custom ContextCache implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/cache/DefaultCacheAwareContextLoaderDelegate.html
DefaultContextCache	A										<section class="prog__container">Default implementation of the ContextCache API.\n\n Uses a synchronized Map configured with a maximum size\n and a least recently used (LRU) eviction policy to cache\n ApplicationContext instances.\n\n The maximum size may be supplied as a constructor argument or set via a system property or Spring property named\n spring.test.context.cache.maxSize.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/cache/DefaultContextCache.html
Sql.ExecutionPhase	A										<section class="prog__container">Enumeration of phases that dictate when SQL scripts are executed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/Sql.ExecutionPhase.html
Sql	A										<section class="prog__container">@Sql is used to annotate a test class or test method to configure\n SQL scripts() and statements() to be executed against a given\n database during integration tests.\n\n Method-level declarations override class-level declarations.\n\n Script execution is performed by the SqlScriptsTestExecutionListener,\n which is enabled by default.\n\n The configuration options provided by this annotation and\n @SqlConfig are equivalent to those supported by\n ScriptUtils and\n ResourceDatabasePopulator\n but are a superset of those provided by the <jdbc:initialize-database/>\n XML namespace element. Consult the javadocs of individual attributes in this\n annotation and @SqlConfig for details.\n\n Beginning with Java 8, @Sql can be used as a\n repeatable annotation. Otherwise,\n @SqlGroup can be used as an explicit container for declaring\n multiple instances of @Sql.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations with attribute overrides.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/Sql.html
SqlConfig.ErrorMode	A										<section class="prog__container">Enumeration of modes that dictate how errors are handled while\n executing SQL statements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlConfig.ErrorMode.html
SqlConfig	A										<section class="prog__container">@SqlConfig defines metadata that is used to determine how to parse\n and execute SQL scripts configured via the @Sql annotation.\n\n Configuration Scope\nWhen declared as a class-level annotation on an integration test class,\n @SqlConfig serves as global configuration\n for all SQL scripts within the test class hierarchy. When declared directly\n via the config attribute of the @Sql annotation,\n @SqlConfig serves as local configuration\n for the SQL scripts declared within the enclosing @Sql annotation.\n\n Default Values\nEvery attribute in @SqlConfig has an implicit default value\n which is documented in the javadocs of the corresponding attribute. Due to the\n rules defined for annotation attributes in the Java Language Specification, it\n is unfortunately not possible to assign a value of null to an annotation\n attribute. Thus, in order to support overrides of inherited global\n configuration, @SqlConfig attributes have an explicit\ndefault value of either "" for Strings or DEFAULT for\n Enums. This approach allows local declarations of @SqlConfig to\n selectively override individual attributes from global declarations of\n @SqlConfig by providing a value other than "" or DEFAULT.\n\n Inheritance and Overrides\nGlobal @SqlConfig attributes are inherited whenever local\n @SqlConfig attributes do not supply an explicit value other than\n "" or DEFAULT. Explicit local configuration therefore\n overrides global configuration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlConfig.html
SqlConfig.TransactionMode	A										<section class="prog__container">Enumeration of modes that dictate whether SQL scripts should be\n executed within a transaction and what the transaction propagation behavior\n should be.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlConfig.TransactionMode.html
SqlGroup	A										<section class="prog__container">Container annotation that aggregates several @Sql annotations.\n\n Can be used natively, declaring several nested @Sql annotations.\n Can also be used in conjunction with Java 8's support for repeatable\n annotations, where @Sql can simply be declared several times on the\n same class or method, implicitly generating this container annotation.\n\n This annotation may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlGroup.html
SqlScriptsTestExecutionListener	A										<section class="prog__container">TestExecutionListener that provides support for executing SQL\n scripts and inlined statements\n configured via the @Sql annotation.\n\n Scripts and inlined statements will be executed before\n or after execution of the corresponding\n test method, depending on the configured\n value of the executionPhase flag.\n\n Scripts and inlined statements will be executed without a transaction,\n within an existing Spring-managed transaction, or within an isolated transaction,\n depending on the configured value of SqlConfig.transactionMode() and the\n presence of a transaction manager.\n\n Script Resources\nFor details on default script detection and how script resource locations\n are interpreted, see Sql.scripts().\n\n Required Spring Beans\nA PlatformTransactionManager and a DataSource,\n just a PlatformTransactionManager, or just a DataSource\n must be defined as beans in the Spring ApplicationContext for the\n corresponding test. Consult the javadocs for SqlConfig.transactionMode(),\n SqlConfig.transactionManager(), SqlConfig.dataSource(),\n TestContextTransactionUtils.retrieveDataSource(org.springframework.test.context.TestContext, java.lang.String), and\n TestContextTransactionUtils.retrieveTransactionManager(org.springframework.test.context.TestContext, java.lang.String) for details\n on permissible configuration constellations and on the algorithms used to\n locate these beans.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.html
AbstractJUnit4SpringContextTests	A										<section class="prog__container">Abstract base test class which integrates the Spring TestContext\n Framework with explicit ApplicationContext testing support\n in a JUnit environment.\n\n Concrete subclasses should typically declare a class-level\n @ContextConfiguration annotation to\n configure the application context resource locations or annotated classes. If your test does not\n need to load an application context, you may choose to omit the\n @ContextConfiguration declaration and to configure\n the appropriate TestExecutionListeners manually.\nThe following TestExecutionListeners are configured by default:\n\n \nServletTestExecutionListener\nDirtiesContextBeforeModesTestExecutionListener\nDependencyInjectionTestExecutionListener\nDirtiesContextTestExecutionListener\n\nThis class serves only as a convenience for extension.\n \nIf you do not wish for your test classes to be tied to a Spring-specific\n class hierarchy, you may configure your own custom test classes by using\n SpringRunner, @ContextConfiguration,\n @TestExecutionListeners, etc.\nIf you wish to extend this class and use a runner other than the\n SpringRunner, as of Spring Framework 4.2 you can use\n SpringClassRule and\n SpringMethodRule\n and specify your runner of choice via @RunWith(...).\n\nNOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/AbstractJUnit4SpringContextTests.html
AbstractTransactionalJUnit4SpringContextTests	A										<section class="prog__container">Abstract transactional extension of\n AbstractJUnit4SpringContextTests which adds convenience functionality\n for JDBC access. Expects a DataSource bean and a\n PlatformTransactionManager bean to be defined in the Spring\n application context.\n\n This class exposes a JdbcTemplate and provides an easy way to\n count the number of rows in a table\n (potentially with a WHERE clause),\n delete from tables,\n drop tables, and\n execute SQL scripts within a transaction.\n\n Concrete subclasses must fulfill the same requirements outlined in\n AbstractJUnit4SpringContextTests.\n\n The following TestExecutionListeners are configured by default:\n\n \nServletTestExecutionListener\nDependencyInjectionTestExecutionListener\nDirtiesContextTestExecutionListener\nTransactionalTestExecutionListener\nSqlScriptsTestExecutionListener\n\nThis class serves only as a convenience for extension.\n \nIf you do not wish for your test classes to be tied to a Spring-specific\n class hierarchy, you may configure your own custom test classes by using\n SpringRunner, @ContextConfiguration,\n @TestExecutionListeners, etc.\nIf you wish to extend this class and use a runner other than the\n SpringRunner, as of Spring Framework 4.2 you can use\n SpringClassRule and\n SpringMethodRule\n and specify your runner of choice via @RunWith(...).\n\nNOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.html
SpringJUnit4ClassRunner	A										<section class="prog__container">SpringJUnit4ClassRunner is a custom extension of JUnit's\n BlockJUnit4ClassRunner which provides functionality of the\n Spring TestContext Framework to standard JUnit tests by means of the\n TestContextManager and associated support classes and annotations.\n\n To use this class, simply annotate a JUnit 4 based test class with\n @RunWith(SpringJUnit4ClassRunner.class) or @RunWith(SpringRunner.class).\n\n The following list constitutes all annotations currently supported directly\n or indirectly by SpringJUnit4ClassRunner. (Note that additional\n annotations may be supported by various\n TestExecutionListener\n or TestContextBootstrapper\n implementations.)\n\n@Test(expected=...)\n@Test(timeout=...)\n@Timed\n@Repeat\n@Ignore\n@ProfileValueSourceConfiguration\n@IfProfileValue\n\nIf you would like to use the Spring TestContext Framework with a runner\n other than this one, use SpringClassRule and SpringMethodRule.\n\n NOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html
SpringRunner	A										<section class="prog__container">SpringRunner is an alias for the SpringJUnit4ClassRunner.\n\n To use this class, simply annotate a JUnit 4 based test class with\n @RunWith(SpringRunner.class).\n\n If you would like to use the Spring TestContext Framework with a runner other than\n this one, use SpringClassRule\n and SpringMethodRule.\n\n NOTE: This class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringRunner.html
SpringClassRule	A										<section class="prog__container">SpringClassRule is a custom JUnit TestRule that supports\n class-level features of the Spring TestContext Framework\n in standard JUnit tests by means of the TestContextManager and\n associated support classes and annotations.\n\n In contrast to the SpringJUnit4ClassRunner, Spring's rule-based JUnit support has the advantage\n that it is independent of any Runner and\n can therefore be combined with existing alternative runners like JUnit's\n Parameterized or third-party runners such as the MockitoJUnitRunner.\n\n In order to achieve the same functionality as the SpringJUnit4ClassRunner,\n however, a SpringClassRule must be combined with a SpringMethodRule,\n since SpringClassRule only supports the class-level features of the\n SpringJUnit4ClassRunner.\n\n Example Usage\n public class ExampleSpringIntegrationTest {\n\n    @ClassRule\n    public static final SpringClassRule SPRING_CLASS_RULE = new SpringClassRule();\n\n    @Rule\n    public final SpringMethodRule springMethodRule = new SpringMethodRule();\n\n    // ...\n }\nThe following list constitutes all annotations currently supported directly\n or indirectly by SpringClassRule. (Note that additional annotations\n may be supported by various\n TestExecutionListener or\n TestContextBootstrapper\n implementations.)\n\n@ProfileValueSourceConfiguration\n@IfProfileValue\n\nNOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/rules/SpringClassRule.html
SpringMethodRule	A										<section class="prog__container">SpringMethodRule is a custom JUnit MethodRule that\n supports instance-level and method-level features of the\n Spring TestContext Framework in standard JUnit tests by means\n of the TestContextManager and associated support classes and\n annotations.\n\n In contrast to the SpringJUnit4ClassRunner, Spring's rule-based JUnit support has the advantage\n that it is independent of any Runner and\n can therefore be combined with existing alternative runners like JUnit's\n Parameterized or third-party runners such as the MockitoJUnitRunner.\n\n In order to achieve the same functionality as the SpringJUnit4ClassRunner,\n however, a SpringMethodRule must be combined with a SpringClassRule,\n since SpringMethodRule only supports the instance-level and method-level\n features of the SpringJUnit4ClassRunner.\n\n Example Usage\n public class ExampleSpringIntegrationTest {\n\n    @ClassRule\n    public static final SpringClassRule SPRING_CLASS_RULE = new SpringClassRule();\n\n    @Rule\n    public final SpringMethodRule springMethodRule = new SpringMethodRule();\n\n    // ...\n }\nThe following list constitutes all annotations currently supported directly\n or indirectly by SpringMethodRule. (Note that additional annotations\n may be supported by various\n TestExecutionListener or\n TestContextBootstrapper\n implementations.)\n\n@Timed\n@Repeat\n@ProfileValueSourceConfiguration\n@IfProfileValue\n\nNOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/rules/SpringMethodRule.html
ProfileValueChecker	A										<section class="prog__container">ProfileValueChecker is a custom JUnit Statement that checks\n whether a test class or test method is enabled in the current environment\n via Spring's @IfProfileValue annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/ProfileValueChecker.html
RunAfterTestClassCallbacks	A										<section class="prog__container">RunAfterTestClassCallbacks is a custom JUnit Statement which allows\n the Spring TestContext Framework to be plugged into the JUnit execution chain\n by calling afterTestClass() on the supplied\n TestContextManager.\n\n NOTE: This class requires JUnit 4.9 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/RunAfterTestClassCallbacks.html
RunAfterTestMethodCallbacks	A										<section class="prog__container">RunAfterTestMethodCallbacks is a custom JUnit Statement which allows\n the Spring TestContext Framework to be plugged into the JUnit execution chain\n by calling afterTestMethod() on the supplied\n TestContextManager.\n\n NOTE: This class requires JUnit 4.9 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/RunAfterTestMethodCallbacks.html
RunBeforeTestClassCallbacks	A										<section class="prog__container">RunBeforeTestClassCallbacks is a custom JUnit Statement which allows\n the Spring TestContext Framework to be plugged into the JUnit execution chain\n by calling beforeTestClass() on the\n supplied TestContextManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/RunBeforeTestClassCallbacks.html
RunBeforeTestMethodCallbacks	A										<section class="prog__container">RunBeforeTestMethodCallbacks is a custom JUnit Statement which allows\n the Spring TestContext Framework to be plugged into the JUnit execution chain\n by calling beforeTestMethod() on the supplied TestContextManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/RunBeforeTestMethodCallbacks.html
RunPrepareTestInstanceCallbacks	A										<section class="prog__container">RunPrepareTestInstanceCallbacks is a custom JUnit Statement which\n allows the Spring TestContext Framework to be plugged into the JUnit\n execution chain by calling prepareTestInstance() on the supplied TestContextManager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/RunPrepareTestInstanceCallbacks.html
SpringFailOnTimeout	A										<section class="prog__container">SpringFailOnTimeout is a custom JUnit Statement which adds\n support for Spring's @Timed\n annotation by throwing an exception if the next statement in the execution\n chain takes more than the specified number of milliseconds.\n\n In contrast to JUnit's\n FailOnTimeout,\n the next statement will be executed in the same thread as the\n caller and will therefore not be aborted preemptively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/SpringFailOnTimeout.html
SpringRepeat	A										<section class="prog__container">SpringRepeat is a custom JUnit Statement which adds support\n for Spring's @Repeat\n annotation by repeating the test the specified number of times.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/statements/SpringRepeat.html
AbstractContextLoader	A										<section class="prog__container">Abstract application context loader that provides a basis for all concrete\n implementations of the ContextLoader SPI. Provides a\n Template Method based approach for processing\n resource locations.\n\n As of Spring 3.1, AbstractContextLoader also provides a basis\n for all concrete implementations of the SmartContextLoader SPI. For\n backwards compatibility with the ContextLoader SPI,\n processContextConfiguration(ContextConfigurationAttributes) delegates\n to processLocations(Class, String...).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractContextLoader.html
AbstractDelegatingSmartContextLoader	A										<section class="prog__container">AbstractDelegatingSmartContextLoader serves as an abstract base class\n for implementations of the SmartContextLoader SPI that delegate to a\n set of candidate SmartContextLoaders (i.e., one that supports XML\n configuration files or Groovy scripts and one that supports annotated classes)\n to determine which context loader is appropriate for a given test class's\n configuration. Each candidate is given a chance to\n process the\n ContextConfigurationAttributes for each class in the test class hierarchy\n that is annotated with @ContextConfiguration, and\n the candidate that supports the merged, processed configuration will be used to\n actually load the context.\n\n Any reference to an XML-based loader can be interpreted to mean\n a context loader that supports only XML configuration files or one that\n supports both XML configuration files and Groovy scripts simultaneously.\n\n Placing an empty @ContextConfiguration annotation on a test class signals\n that default resource locations (e.g., XML configuration files or Groovy scripts)\n or default\n configuration classes\n should be detected. Furthermore, if a specific ContextLoader or\n SmartContextLoader is not explicitly declared via\n @ContextConfiguration, a concrete subclass of\n AbstractDelegatingSmartContextLoader will be used as the default loader,\n thus providing automatic support for either path-based resource locations\n (e.g., XML configuration files and Groovy scripts) or annotated classes,\n but not both simultaneously.\n\n As of Spring 3.2, a test class may optionally declare neither path-based\n resource locations nor annotated classes and instead declare only application context initializers. In such\n cases, an attempt will still be made to detect defaults, but their absence will\n not result in an exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractDelegatingSmartContextLoader.html
AbstractDirtiesContextTestExecutionListener	A										<section class="prog__container">Abstract base class for TestExecutionListener implementations that\n provide support for marking the ApplicationContext associated with\n a test as dirty for both test classes and test methods annotated\n with the @DirtiesContext annotation.\n\n The core functionality for this class was extracted from\n DirtiesContextTestExecutionListener in Spring Framework 4.2.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractDirtiesContextTestExecutionListener.html
AbstractGenericContextLoader	A										<section class="prog__container">Abstract, generic extension of AbstractContextLoader that loads a\n GenericApplicationContext.\n\n \nIf instances of concrete subclasses are invoked via the\n ContextLoader SPI, the\n context will be loaded from the locations provided to\n loadContext(String...).\nIf instances of concrete subclasses are invoked via the\n SmartContextLoader\n SPI, the context will be loaded from the MergedContextConfiguration\n provided to loadContext(MergedContextConfiguration). In such cases, a\n SmartContextLoader will decide whether to load the context from\n locations or annotated classes.\n\nConcrete subclasses must provide an appropriate implementation of\n createBeanDefinitionReader(),\n potentially overriding loadBeanDefinitions()\n as well.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractGenericContextLoader.html
AbstractTestContextBootstrapper	A										<section class="prog__container">Abstract implementation of the TestContextBootstrapper interface which\n provides most of the behavior required by a bootstrapper.\n\n Concrete subclasses typically will only need to provide implementations for\n the following methods:\n \ngetDefaultContextLoaderClass(java.lang.Class<?>)\nprocessMergedContextConfiguration(org.springframework.test.context.MergedContextConfiguration)\n\nTo plug in custom\n ContextCache\n support, override getCacheAwareContextLoaderDelegate().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractTestContextBootstrapper.html
AbstractTestExecutionListener	A										<section class="prog__container">Abstract implementation of the TestExecutionListener interface which\n provides empty method stubs. Subclasses can extend this class and override\n only those methods suitable for the task at hand.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AbstractTestExecutionListener.html
AnnotationConfigContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericContextLoader that loads\n bean definitions from annotated classes.\n\n See the Javadoc for\n @ContextConfiguration\n for a definition of annotated class.\n\n Note: AnnotationConfigContextLoader supports annotated classes\n rather than the String-based resource locations defined by the legacy\n ContextLoader API. Thus,\n although AnnotationConfigContextLoader extends\n AbstractGenericContextLoader, AnnotationConfigContextLoader\n does not support any String-based methods defined by\n AbstractContextLoader or AbstractGenericContextLoader.\n Consequently, AnnotationConfigContextLoader should chiefly be\n considered a SmartContextLoader\n rather than a ContextLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AnnotationConfigContextLoader.html
AnnotationConfigContextLoaderUtils	A										<section class="prog__container">Utility methods for SmartContextLoaders that deal\n with annotated classes (e.g., @Configuration classes).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.html
DefaultActiveProfilesResolver	A										<section class="prog__container">Default implementation of the ActiveProfilesResolver strategy that\n resolves active bean definition profiles based solely on profiles\n configured declaratively via ActiveProfiles.profiles() or\n ActiveProfiles.value().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DefaultActiveProfilesResolver.html
DefaultBootstrapContext	A										<section class="prog__container">Default implementation of the BootstrapContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DefaultBootstrapContext.html
DefaultTestContext	A										<section class="prog__container">Default implementation of the TestContext interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DefaultTestContext.html
DefaultTestContextBootstrapper	A										<section class="prog__container">Default implementation of the TestContextBootstrapper SPI.\n\n Uses DelegatingSmartContextLoader as the default ContextLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DefaultTestContextBootstrapper.html
DelegatingSmartContextLoader	A										<section class="prog__container">DelegatingSmartContextLoader is a concrete implementation of\n AbstractDelegatingSmartContextLoader that delegates to a\n GenericXmlContextLoader (or a GenericGroovyXmlContextLoader if Groovy\n is present in the classpath) and an AnnotationConfigContextLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DelegatingSmartContextLoader.html
DependencyInjectionTestExecutionListener	A										<section class="prog__container">TestExecutionListener which provides support for dependency\n injection and initialization of test instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DependencyInjectionTestExecutionListener.html
DirtiesContextBeforeModesTestExecutionListener	A										<section class="prog__container">TestExecutionListener which provides support for marking the\n ApplicationContext associated with a test as dirty for\n both test classes and test methods annotated with the\n @DirtiesContext annotation.\n\n This listener supports test methods with the\n method mode set to\n BEFORE_METHOD and test classes with the\n class mode set to\n BEFORE_EACH_TEST_METHOD or\n BEFORE_CLASS. For support for AFTER\n modes, see DirtiesContextTestExecutionListener.\n\n When merging\nTestExecutionListeners with the defaults, this listener will\n automatically be ordered before the DependencyInjectionTestExecutionListener;\n otherwise, this listener must be manually configured to execute before the\n DependencyInjectionTestExecutionListener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DirtiesContextBeforeModesTestExecutionListener.html
DirtiesContextTestExecutionListener	A										<section class="prog__container">TestExecutionListener which provides support for marking the\n ApplicationContext associated with a test as dirty for\n both test classes and test methods annotated with the\n @DirtiesContext annotation.\n\n This listener supports test methods with the\n method mode set to\n AFTER_METHOD and test classes with the\n class mode set to\n AFTER_EACH_TEST_METHOD or\n AFTER_CLASS. For support for BEFORE\n modes, see DirtiesContextBeforeModesTestExecutionListener.\n\n When merging\nTestExecutionListeners with the defaults, this listener will\n automatically be ordered after the DependencyInjectionTestExecutionListener;\n otherwise, this listener must be manually configured to execute after the\n DependencyInjectionTestExecutionListener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DirtiesContextTestExecutionListener.html
GenericGroovyXmlContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericContextLoader that reads\n bean definitions from Groovy scripts and XML configuration files.\n\n Default resource locations are detected using the suffixes\n "-context.xml" and "Context.groovy".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/GenericGroovyXmlContextLoader.html
GenericPropertiesContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericContextLoader that reads\n bean definitions from Java Properties resources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/GenericPropertiesContextLoader.html
GenericXmlContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericContextLoader that reads\n bean definitions from XML resources.\n\n Default resource locations are detected using the suffix\n "-context.xml".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/GenericXmlContextLoader.html
TestPropertySourceUtils	A										<section class="prog__container">Utility methods for working with @TestPropertySource\n and adding test PropertySources to the Environment.\n\n Primarily intended for use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/TestPropertySourceUtils.html
AbstractTestNGSpringContextTests	A										<section class="prog__container">Abstract base test class which integrates the Spring TestContext Framework\n with explicit ApplicationContext testing support in a TestNG\n environment.\n\n Concrete subclasses:\n \nTypically declare a class-level @ContextConfiguration annotation to configure the application context resource locations\n or annotated classes. If your test\n does not need to load an application context, you may choose to omit the\n @ContextConfiguration declaration and to\n configure the appropriate\n TestExecutionListeners\n manually.\nMust have constructors which either implicitly or explicitly delegate to\n super();.\n\nThe following TestExecutionListeners are configured by default:\n\n \nServletTestExecutionListener\nDirtiesContextBeforeModesTestExecutionListener\nDependencyInjectionTestExecutionListener\nDirtiesContextTestExecutionListener\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/testng/AbstractTestNGSpringContextTests.html
AbstractTransactionalTestNGSpringContextTests	A										<section class="prog__container">Abstract transactional extension of\n AbstractTestNGSpringContextTests which adds convenience functionality\n for JDBC access. Expects a DataSource bean and a\n PlatformTransactionManager bean to be defined in the Spring\n application context.\n\n This class exposes a JdbcTemplate and provides an easy way to\n count the number of rows in a table\n (potentially with a WHERE clause),\n delete from tables,\n drop tables, and\n execute SQL scripts within a transaction.\n\n Concrete subclasses must fulfill the same requirements outlined in\n AbstractTestNGSpringContextTests.\n\n The following TestExecutionListeners are configured by default:\n\n \nServletTestExecutionListener\nDependencyInjectionTestExecutionListener\nDirtiesContextTestExecutionListener\nTransactionalTestExecutionListener\nSqlScriptsTestExecutionListener\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.html
AfterTransaction	A										<section class="prog__container">Test annotation which indicates that the annotated void method\n should be executed after a transaction is ended for a test method\n configured to run within a transaction via Spring's @Transactional\n annotation.\n\n As of Spring Framework 4.3, @AfterTransaction may be declared on\n Java 8 based interface default methods.\n\n @AfterTransaction methods declared in superclasses or as interface\n default methods will be executed after those of the current test class.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/AfterTransaction.html
BeforeTransaction	A										<section class="prog__container">Test annotation which indicates that the annotated void method\n should be executed before a transaction is started for a test method\n configured to run within a transaction via Spring's @Transactional\n annotation.\n\n As of Spring Framework 4.3, @BeforeTransaction may be declared on\n Java 8 based interface default methods.\n\n @BeforeTransaction methods declared in superclasses or as interface\n default methods will be executed before those of the current test class.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/BeforeTransaction.html
TestContextTransactionUtils	A										<section class="prog__container">Utility methods for working with transactions and data access related beans\n within the Spring TestContext Framework.\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TestContextTransactionUtils.html
TestTransaction	A										<section class="prog__container">TestTransaction provides a collection of static utility methods for\n programmatic interaction with test-managed transactions within\n test methods, before methods, and after methods.\n\n Consult the javadocs for TransactionalTestExecutionListener\n for a detailed explanation of test-managed transactions.\n\n Support for TestTransaction is automatically available whenever\n the TransactionalTestExecutionListener is enabled. Note that the\n TransactionalTestExecutionListener is typically enabled by default,\n but it can also be manually enabled via the\n @TestExecutionListeners annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TestTransaction.html
TransactionalTestExecutionListener	A										<section class="prog__container">TestExecutionListener that provides support for executing tests\n within test-managed transactions by honoring Spring's\n @Transactional\n annotation.\n\n Test-managed Transactions\nTest-managed transactions are transactions that are managed\n declaratively via this listener or programmatically via\n TestTransaction. Such transactions should not be confused with\n Spring-managed transactions (i.e., those managed directly\n by Spring within the ApplicationContext loaded for tests) or\n application-managed transactions (i.e., those managed\n programmatically within application code that is invoked via tests).\n Spring-managed and application-managed transactions will typically\n participate in test-managed transactions; however, caution should be\n taken if Spring-managed or application-managed transactions are\n configured with any propagation type other than\n REQUIRED\n or SUPPORTS.\n\n Enabling and Disabling Transactions\nAnnotating a test method with @Transactional causes the test\n to be run within a transaction that will, by default, be automatically\n rolled back after completion of the test. If a test class is\n annotated with @Transactional, each test method within that class\n hierarchy will be run within a transaction. Test methods that are\n not annotated with @Transactional (at the class or method\n level) will not be run within a transaction. Furthermore, tests that\n are annotated with @Transactional but have the\n propagation\n type set to\n NOT_SUPPORTED\n will not be run within a transaction.\n\n Declarative Rollback and Commit Behavior\nBy default, test transactions will be automatically rolled back\n after completion of the test; however, transactional commit and rollback\n behavior can be configured declaratively via the @Commit\n and @Rollback annotations at the class level and at the\n method level.\n\n Programmatic Transaction Management\nAs of Spring Framework 4.1, it is possible to interact with test-managed\n transactions programmatically via the static methods in TestTransaction.\n TestTransaction may be used within test methods,\n before methods, and after methods.\n\n Executing Code outside of a Transaction\nWhen executing transactional tests, it is sometimes useful to be able to\n execute certain set up or tear down code outside of a\n transaction. TransactionalTestExecutionListener provides such\n support for methods annotated with @BeforeTransaction\n or @AfterTransaction. As of Spring Framework 4.3,\n @BeforeTransaction and @AfterTransaction may also be declared\n on Java 8 based interface default methods.\n\n Configuring a Transaction Manager\nTransactionalTestExecutionListener expects a\n PlatformTransactionManager bean to be defined in the Spring\n ApplicationContext for the test. In case there are multiple\n instances of PlatformTransactionManager within the test's\n ApplicationContext, a qualifier may be declared via\n @Transactional\n (e.g., @Transactional("myTxMgr") or @Transactional(transactionManger = "myTxMgr"),\n or TransactionManagementConfigurer can be implemented by an\n @Configuration\n class. See TestContextTransactionUtils.retrieveTransactionManager(org.springframework.test.context.TestContext, java.lang.String)\n for details on the algorithm used to look up a transaction manager in\n the test's ApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TransactionalTestExecutionListener.html
TransactionConfiguration	A										<section class="prog__container">Deprecated. \nAs of Spring Framework 4.2, use @Rollback or\n @Commit at the class level and the transactionManager\n qualifier in @Transactional.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TransactionConfiguration.html
TransactionConfigurationAttributes	A										<section class="prog__container">Deprecated. \nAs of Spring Framework 4.2, this class is officially deprecated\n and will be removed when @TransactionConfiguration is removed.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TransactionConfigurationAttributes.html
TestContextResourceUtils	A										<section class="prog__container">Utility methods for working with resources within the Spring TestContext\n Framework. Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/util/TestContextResourceUtils.html
AbstractGenericWebContextLoader	A										<section class="prog__container">Abstract, generic extension of AbstractContextLoader that loads a\n GenericWebApplicationContext.\n\n If instances of concrete subclasses are invoked via the\n SmartContextLoader\n SPI, the context will be loaded from the MergedContextConfiguration\n provided to loadContext(MergedContextConfiguration). In such cases, a\n SmartContextLoader will decide whether to load the context from\n locations or annotated classes. Note that AbstractGenericWebContextLoader does not support the loadContext(String... locations) method from the legacy\n ContextLoader SPI.\n\n Concrete subclasses must provide an appropriate implementation of\n loadBeanDefinitions(org.springframework.web.context.support.GenericWebApplicationContext, org.springframework.test.context.web.WebMergedContextConfiguration).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/AbstractGenericWebContextLoader.html
AnnotationConfigWebContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericWebContextLoader that loads\n bean definitions from annotated classes.\n\n See the Javadoc for\n @ContextConfiguration\n for a definition of annotated class.\n\n Note: AnnotationConfigWebContextLoader supports annotated classes\n rather than the String-based resource locations defined by the legacy\n ContextLoader API. Thus,\n although AnnotationConfigWebContextLoader extends\n AbstractGenericWebContextLoader, AnnotationConfigWebContextLoader\n does not support any String-based methods defined by\n AbstractContextLoader or AbstractGenericWebContextLoader.\n Consequently, AnnotationConfigWebContextLoader should chiefly be\n considered a SmartContextLoader\n rather than a ContextLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/AnnotationConfigWebContextLoader.html
GenericGroovyXmlWebContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericWebContextLoader that loads\n bean definitions from Groovy scripts and XML configuration files.\n\n Default resource locations are detected using the suffixes\n "-context.xml" and "Context.groovy".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/GenericGroovyXmlWebContextLoader.html
GenericXmlWebContextLoader	A										<section class="prog__container">Concrete implementation of AbstractGenericWebContextLoader that loads\n bean definitions from XML resources.\n\n Default resource locations are detected using the suffix\n "-context.xml".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/GenericXmlWebContextLoader.html
ServletTestExecutionListener	A										<section class="prog__container">TestExecutionListener which provides mock Servlet API support to\n WebApplicationContexts loaded by the Spring\n TestContext Framework.\n\n Specifically, ServletTestExecutionListener sets up thread-local\n state via Spring Web's RequestContextHolder during test instance preparation and before each test method and creates a MockHttpServletRequest, MockHttpServletResponse, and\n ServletWebRequest based on the MockServletContext present in\n the WebApplicationContext. This listener also ensures that the\n MockHttpServletResponse and ServletWebRequest can be injected\n into the test instance, and once the test is complete this listener cleans up thread-local state.\n\n Note that ServletTestExecutionListener is enabled by default but\n generally takes no action if the test\n class is not annotated with @WebAppConfiguration.\n See the javadocs for individual methods in this class for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/ServletTestExecutionListener.html
WebAppConfiguration	A										<section class="prog__container">@WebAppConfiguration is a class-level annotation that is used to\n declare that the ApplicationContext loaded for an integration test\n should be a WebApplicationContext.\n\n The presence of @WebAppConfiguration on a test class indicates that\n a WebApplicationContext should be loaded for the test using a default\n for the path to the root of the web application. To override the default,\n specify an explicit resource path via the value() attribute.\n\n Note that @WebAppConfiguration must be used in conjunction with\n @ContextConfiguration,\n either within a single test class or within a test class hierarchy.\n\n As of Spring Framework 4.0, this annotation may be used as a\n meta-annotation to create custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/WebAppConfiguration.html
WebDelegatingSmartContextLoader	A										<section class="prog__container">WebDelegatingSmartContextLoader is a concrete implementation of\n AbstractDelegatingSmartContextLoader that delegates to a\n GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if\n Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/WebDelegatingSmartContextLoader.html
WebMergedContextConfiguration	A										<section class="prog__container">WebMergedContextConfiguration encapsulates the merged\n context configuration declared on a test class and all of its superclasses\n via @ContextConfiguration,\n @WebAppConfiguration, and\n @ActiveProfiles.\n\n WebMergedContextConfiguration extends the contract of\n MergedContextConfiguration by adding support for the resource base path configured via @WebAppConfiguration.\n This allows the TestContext\n to properly cache the corresponding WebApplicationContext\n that was loaded using properties of this WebMergedContextConfiguration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/WebMergedContextConfiguration.html
WebTestContextBootstrapper	A										<section class="prog__container">Web-specific implementation of the TestContextBootstrapper SPI.\n\n \nUses WebDelegatingSmartContextLoader as the default ContextLoader\n if the test class is annotated with @WebAppConfiguration\n and otherwise delegates to the superclass.\n Builds a WebMergedContextConfiguration if the test class is annotated\n with @WebAppConfiguration.\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/web/WebTestContextBootstrapper.html
JdbcTestUtils	A										<section class="prog__container">JdbcTestUtils is a collection of JDBC related utility functions\n intended to simplify standard database testing scenarios.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/jdbc/JdbcTestUtils.html
AopTestUtils	A										<section class="prog__container">AopTestUtils is a collection of AOP-related utility methods for\n use in unit and integration testing scenarios.\n\n For Spring's core AOP utilities, see\n AopUtils and\n AopProxyUtils.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/AopTestUtils.html
AssertionErrors	A										<section class="prog__container">JUnit independent assertion class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/AssertionErrors.html
JsonExpectationsHelper	A										<section class="prog__container">A helper class for assertions on JSON content.\n\n Use of this class requires the JSONassert library.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/JsonExpectationsHelper.html
JsonPathExpectationsHelper	A										<section class="prog__container">A helper class for applying assertions via JSON path expressions.\n\n Based on the JsonPath\n project: requiring version 0.9+, with 1.1+ strongly recommended.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/JsonPathExpectationsHelper.html
MatcherAssertionErrors	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of the original\n MatcherAssert class with JUnit 4.9 / Hamcrest 1.3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/MatcherAssertionErrors.html
MetaAnnotationUtils	A										<section class="prog__container">MetaAnnotationUtils is a collection of utility methods that complements\n the standard support already available in AnnotationUtils.\n\n Whereas AnnotationUtils provides utilities for getting or\n finding an annotation, MetaAnnotationUtils goes a step further\n by providing support for determining the root class on which an\n annotation is declared, either directly or indirectly via a composed\n annotation. This additional information is encapsulated in an\n MetaAnnotationUtils.AnnotationDescriptor.\n\n The additional information provided by an AnnotationDescriptor is\n required by the Spring TestContext Framework in order to be able to\n support class hierarchy traversals for annotations such as\n @ContextConfiguration,\n @TestExecutionListeners,\n and @ActiveProfiles\n which offer support for merging and overriding various inherited\n annotation attributes (e.g.\n ContextConfiguration.inheritLocations()).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/MetaAnnotationUtils.html
MetaAnnotationUtils.UntypedAnnotationDescriptor	A										<section class="prog__container">Untyped extension of AnnotationDescriptor that is used\n to describe the declaration of one of several candidate annotation types\n where the actual annotation type cannot be predetermined.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/MetaAnnotationUtils.UntypedAnnotationDescriptor.html
ReflectionTestUtils	A										<section class="prog__container">ReflectionTestUtils is a collection of reflection-based utility\n methods for use in unit and integration testing scenarios.\n\n There are often times when it would be beneficial to be able to set a\n non-public field, invoke a non-public setter method, or\n invoke a non-public configuration or lifecycle\n callback method when testing code involving, for example:\n\n \nORM frameworks such as JPA and Hibernate which condone the usage of\n private or protected field access as opposed to\n public setter methods for properties in a domain entity.\nSpring's support for annotations such as\n @Autowired,\n @Inject, and\n @Resource which provides dependency\n injection for private or protected fields, setter methods,\n and configuration methods.\nUse of annotations such as @PostConstruct\n and @PreDestroy for lifecycle callback\n methods.\n\nIn addition, several methods in this class provide support for static\n fields — for example, setField(Class, String, Object),\n getField(Class, String), etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/ReflectionTestUtils.html
XmlExpectationsHelper	A										<section class="prog__container">A helper class for assertions on XML content.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/XmlExpectationsHelper.html
XpathExpectationsHelper	A										<section class="prog__container">A helper class for applying assertions via XPath expressions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/XpathExpectationsHelper.html
ModelAndViewAssert	A										<section class="prog__container">A collection of assertions intended to simplify testing scenarios dealing\n with Spring Web MVC ModelAndView objects.\n \n Intended for use with JUnit 4 and TestNG. All assert*() methods\n throw AssertionErrors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html
AbstractRequestExpectationManager	A										<section class="prog__container">Base class for RequestExpectationManager implementations responsible\n for storing expectations and actual requests, and checking for unsatisfied\n expectations at the end.\n\n Subclasses are responsible for validating each request by matching it to\n to expectations following the order of declaration or not.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/AbstractRequestExpectationManager.html
AbstractRequestExpectationManager.RequestExpectationGroup	A										<section class="prog__container">Helper class to manage a group of request expectations. It helps with\n operations against the entire group such as finding a match and updating\n (add or remove) based on expected request count.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/AbstractRequestExpectationManager.RequestExpectationGroup.html
DefaultRequestExpectation	A										<section class="prog__container">Default implementation of RequestExpectation that simply delegates\n to the request matchers and the response creator it contains.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/DefaultRequestExpectation.html
DefaultRequestExpectation.RequestCount	A										<section class="prog__container">Helper class that keeps track of actual vs expected request count.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/DefaultRequestExpectation.RequestCount.html
ExpectedCount	A										<section class="prog__container">A simple type representing a range for an expected count.\n\n Examples:\n \n import static org.springframework.test.web.client.ExpectedCount.*\n\n once()\n manyTimes()\n times(5)\n min(2)\n max(4)\n between(2, 4)\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/ExpectedCount.html
MockMvcClientHttpRequestFactory	A										<section class="prog__container">A ClientHttpRequestFactory for requests executed via MockMvc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.html
MockRestServiceServer	A										<section class="prog__container">Main entry point for client-side REST testing. Used for tests\n that involve direct or indirect use of the RestTemplate. Provides a\n way to set up expected requests that will be performed through the\n RestTemplate as well as mock responses to send back thus removing the\n need for an actual server.\n\n Below is an example that assumes static imports from\n MockRestRequestMatchers, MockRestResponseCreators,\n and ExpectedCount:\n\n \n RestTemplate restTemplate = new RestTemplate()\n MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build();\n\n server.expect(manyTimes(), requestTo("/hotels/42")).andExpect(method(HttpMethod.GET))\n     .andRespond(withSuccess("{ \"id\" : \"42\", \"name\" : \"Holiday Inn\"}", MediaType.APPLICATION_JSON));\n\n Hotel hotel = restTemplate.getForObject("/hotels/{id}", Hotel.class, 42);\n // Use the hotel instance...\n\n // Verify all expectations met\n server.verify();\n \nNote that as an alternative to the above you can also set the\n MockMvcClientHttpRequestFactory on a RestTemplate which\n allows executing requests against an instance of\n MockMvc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.html
MockRestServiceServer.MockRestServiceServerBuilder	A										<section class="prog__container">Builder to create a MockRestServiceServer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.MockRestServiceServerBuilder.html
RequestExpectation	A										<section class="prog__container">An extension of ResponseActions that also implements\n RequestMatcher and ResponseCreator\nWhile ResponseActions is the API for defining expectations this\n sub-interface is the internal SPI for matching these expectations to actual\n requests and for creating responses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/RequestExpectation.html
RequestExpectationManager	A										<section class="prog__container">Abstraction for creating HTTP request expectations, applying them to actual\n requests (in strict or random order), and verifying whether expectations\n have been met.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/RequestExpectationManager.html
RequestMatcher	A										<section class="prog__container">A contract for matching requests to expectations.\n\n See MockRestRequestMatchers for static factory methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/RequestMatcher.html
ResponseActions	A										<section class="prog__container">A contract for setting up request expectations and defining a response.\n Implementations can be obtained through MockRestServiceServer.expect(RequestMatcher).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/ResponseActions.html
ResponseCreator	A										<section class="prog__container">A contract for creating a ClientHttpResponse.\n Implementations can be obtained via MockRestResponseCreators.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/ResponseCreator.html
SimpleRequestExpectationManager	A										<section class="prog__container">Simple RequestExpectationManager that matches requests to expectations\n sequentially, i.e. in the order of declaration of expectations.\n\n When request expectations have an expected count greater than one,\n only the first execution is expected to match the order of declaration.\n Subsequent request executions may be inserted anywhere thereafter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/SimpleRequestExpectationManager.html
UnorderedRequestExpectationManager	A										<section class="prog__container">RequestExpectationManager that matches requests to expectations\n regardless of the order of declaration of expected requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/UnorderedRequestExpectationManager.html
ContentRequestMatchers	A										<section class="prog__container">Factory for request content RequestMatcher's. An instance of this\n class is typically accessed via MockRestRequestMatchers.content().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/match/ContentRequestMatchers.html
JsonPathRequestMatchers	A										<section class="prog__container">Factory for assertions on the request content using\n JsonPath expressions.\n An instance of this class is typically accessed via\n MockRestRequestMatchers.jsonPath(String, Matcher) or\n MockRestRequestMatchers.jsonPath(String, Object...).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/match/JsonPathRequestMatchers.html
MockRestRequestMatchers	A										<section class="prog__container">Static factory methods for RequestMatcher classes. Typically used to\n provide input for MockRestServiceServer.expect(RequestMatcher).\n\n Eclipse Users\nConsider adding this class as a Java editor favorite. To navigate to\n this setting, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/match/MockRestRequestMatchers.html
XpathRequestMatchers	A										<section class="prog__container">Factory methods for request content RequestMatcher's using an XPath\n expression. An instance of this class is typically accessed via\n RequestMatchers.xpath(..).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/match/XpathRequestMatchers.html
DefaultResponseCreator	A										<section class="prog__container">A ResponseCreator with builder-style methods for adding response details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/response/DefaultResponseCreator.html
MockRestResponseCreators	A										<section class="prog__container">Static factory methods for obtaining a ResponseCreator instance.\n\n Eclipse users: consider adding this class as a Java editor\n favorite. To navigate, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/response/MockRestResponseCreators.html
DispatcherServletCustomizer	A										<section class="prog__container">Strategy interface for customizing DispatcherServlet instances that are\n managed by MockMvc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/DispatcherServletCustomizer.html
MockMvc	A										<section class="prog__container">Main entry point for server-side Spring MVC test support.\nExample\n\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;\n\n // ...\n\n WebApplicationContext wac = ...;\n\n MockMvc mockMvc = webAppContextSetup(wac).build();\n\n mockMvc.perform(get("/form"))\n     .andExpect(status().isOk())\n     .andExpect(content().mimeType("text/html"))\n     .andExpect(forwardedUrl("/WEB-INF/layouts/main.jsp"));\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html
MockMvcBuilder	A										<section class="prog__container">Builds a MockMvc instance.\n\n See static factory methods in\n MockMvcBuilders.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvcBuilder.html
MockMvcBuilderSupport	A										<section class="prog__container">Base class for MockMvc builder implementations, providing the capability to\n create a MockMvc instance.\n\n DefaultMockMvcBuilder,\n which derives from this class, provides a concrete build method,\n and delegates to abstract methods to obtain a WebApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvcBuilderSupport.html
MvcResult	A										<section class="prog__container">Provides access to the result of an executed request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MvcResult.html
RequestBuilder	A										<section class="prog__container">Builds a MockHttpServletRequest.\n\n See static factory methods in\n MockMvcRequestBuilders.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/RequestBuilder.html
ResultActions	A										<section class="prog__container">Allows applying actions, such as expectations, on the result of an executed\n request.\n\n See static factory methods in\n MockMvcResultMatchers and\n MockMvcResultHandlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/ResultActions.html
ResultHandler	A										<section class="prog__container">A ResultHandler performs a generic action on the result of an\n executed request — for example, printing debug information.\n\n See static factory methods in\n MockMvcResultHandlers.\n\n Example\n\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;\n\n // ...\n\n WebApplicationContext wac = ...;\n\n MockMvc mockMvc = webAppContextSetup(wac).build();\n\n mockMvc.perform(get("/form")).andDo(print());\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/ResultHandler.html
ResultMatcher	A										<section class="prog__container">A ResultMatcher matches the result of an executed request against\n some expectation.\n\n See static factory methods in\n MockMvcResultMatchers.\n\n Example Using Status and Content Result Matchers\n\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;\n\n // ...\n\n WebApplicationContext wac = ...;\n\n MockMvc mockMvc = webAppContextSetup(wac).build();\n\n mockMvc.perform(get("/form"))\n   .andExpect(status().isOk())\n   .andExpect(content().mimeType(MediaType.APPLICATION_JSON));\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/ResultMatcher.html
SmartRequestBuilder	A										<section class="prog__container">Extended variant of a RequestBuilder that applies its\n RequestPostProcessors\n as a separate step from the RequestBuilder.buildRequest(javax.servlet.ServletContext) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/SmartRequestBuilder.html
DelegatingWebConnection	A										<section class="prog__container">Implementation of WebConnection that allows delegating to various\n WebConnection implementations.\n\n For example, if you host your JavaScript on the domain code.jquery.com,\n you might want to use the following.\n\n \n WebClient webClient = new WebClient();\n\n MockMvc mockMvc = ...\n MockMvcWebConnection mockConnection = new MockMvcWebConnection(mockMvc, webClient);\n\n WebRequestMatcher cdnMatcher = new UrlRegexRequestMatcher(".*?//code.jquery.com/.*");\n WebConnection httpConnection = new HttpWebConnection(webClient);\n WebConnection webConnection = new DelegatingWebConnection(mockConnection, new DelegateWebConnection(cdnMatcher, httpConnection));\n\n webClient.setWebConnection(webConnection);\n\n WebClient webClient = new WebClient();\n webClient.setWebConnection(webConnection);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnection.html
HostRequestMatcher	A										<section class="prog__container">A WebRequestMatcher that allows matching on the host and optionally\n the port of WebRequest#getUrl().\n\n For example, the following would match any request to the host\n "code.jquery.com" without regard for the port.\n\n WebRequestMatcher cdnMatcher = new HostMatcher("code.jquery.com");\nMultiple hosts can also be passed in. For example, the following would\n match any request to the host "code.jquery.com" or the host\n "cdn.com" without regard for the port.\n\n WebRequestMatcher cdnMatcher = new HostMatcher("code.jquery.com", "cdn.com");\nAlternatively, one can also specify the port. For example, the following would match\n any request to the host "code.jquery.com" with the port of 80.\n\n WebRequestMatcher cdnMatcher = new HostMatcher("code.jquery.com:80");\nThe above cdnMatcher would match "http://code.jquery.com/jquery.js"\n which has a default port of 80 and "http://code.jquery.com:80/jquery.js".\n However, it would not match "https://code.jquery.com/jquery.js"\n which has a default port of 443.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/HostRequestMatcher.html
MockMvcWebClientBuilder	A										<section class="prog__container">MockMvcWebClientBuilder simplifies the creation of an HtmlUnit\n WebClient that delegates to a MockMvc instance.\n\n The MockMvc instance used by the builder may be\n supplied directly or created transparently\n from a WebApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.html
MockMvcWebConnection	A										<section class="prog__container">MockMvcWebConnection enables MockMvc to transform a\n WebRequest into a WebResponse.\n This is the core integration with HtmlUnit.\n Example usage can be seen below.\n\n \n WebClient webClient = new WebClient();\n MockMvc mockMvc = ...\n MockMvcWebConnection webConnection = new MockMvcWebConnection(mockMvc, webClient);\n webClient.setWebConnection(webConnection);\n\n // Use webClient as normal ...\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.html
MockMvcWebConnectionBuilderSupport<T extends MockMvcWebConnectionBuilderSupport>	A										<section class="prog__container">Support class that simplifies the creation of a WebConnection that\n uses MockMvc and optionally delegates to a real WebConnection\n for specific requests.\n\n The default is to use MockMvc for requests to localhost\n and otherwise use a real WebConnection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnectionBuilderSupport.html
UrlRegexRequestMatcher	A										<section class="prog__container">A WebRequestMatcher that allows matching on\n WebRequest#getUrl().toExternalForm() using a regular expression.\n\n For example, if you would like to match on the domain code.jquery.com,\n you might want to use the following.\n\n \n WebRequestMatcher cdnMatcher = new UrlRegexRequestMatcher(".*?//code.jquery.com/.*");\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/UrlRegexRequestMatcher.html
WebRequestMatcher	A										<section class="prog__container">Strategy for matching on a WebRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/WebRequestMatcher.html
MockMvcHtmlUnitDriverBuilder	A										<section class="prog__container">MockMvcHtmlUnitDriverBuilder simplifies the building of an\n HtmlUnitDriver that delegates to MockMvc and optionally\n delegates to an actual connection for specific requests.\n\n By default, the driver will delegate to MockMvc to handle\n requests to localhost and to a WebClient to handle any\n other URL (i.e. to perform an actual HTTP request).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilder.html
WebConnectionHtmlUnitDriver	A										<section class="prog__container">WebConnectionHtmlUnitDriver enables configuration of the\n WebConnection for an HtmlUnitDriver instance.\n\n This is useful because it allows a\n MockMvcWebConnection to be injected.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/htmlunit/webdriver/WebConnectionHtmlUnitDriver.html
ConfigurableSmartRequestBuilder<B extends ConfigurableSmartRequestBuilder>	A										<section class="prog__container">An extension of SmartRequestBuilder that can be configured with RequestPostProcessors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/ConfigurableSmartRequestBuilder.html
MockHttpServletRequestBuilder	A										<section class="prog__container">Default builder for MockHttpServletRequest required as input to perform\n requests in MockMvc.\n\n Application tests will typically access this builder through the static factory\n methods in MockMvcRequestBuilders.\n Although this class cannot be extended, additional ways to initialize\n the MockHttpServletRequest can be plugged in via\n with(RequestPostProcessor).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html
MockMultipartHttpServletRequestBuilder	A										<section class="prog__container">Default builder for MockMultipartHttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.html
MockMvcRequestBuilders	A										<section class="prog__container">Static factory methods for RequestBuilders.\n\n Integration with the Spring TestContext Framework\nMethods in this class will reuse a\n MockServletContext\n that was created by the Spring TestContext Framework.\n\n Eclipse Users\nConsider adding this class as a Java editor favorite. To navigate to\n this setting, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html
RequestPostProcessor	A										<section class="prog__container">Extension point for applications or 3rd party libraries that wish to further\n initialize a MockHttpServletRequest instance after it has been built\n by MockHttpServletRequestBuilder or its subclass\n MockMultipartHttpServletRequestBuilder.\n\n Implementations of this interface can be provided to\n MockHttpServletRequestBuilder.with(RequestPostProcessor) at the time\n when a request is about to be constructed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/RequestPostProcessor.html
ContentResultMatchers	A										<section class="prog__container">Factory for response content assertions.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.content().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/ContentResultMatchers.html
CookieResultMatchers	A										<section class="prog__container">Factory for response cookie assertions.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.cookie().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/CookieResultMatchers.html
FlashAttributeResultMatchers	A										<section class="prog__container">Factory for "output" flash attribute assertions.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.flash().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/FlashAttributeResultMatchers.html
HandlerResultMatchers	A										<section class="prog__container">Factory for assertions on the selected handler or handler method.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.handler().\n\n Note: Expectations that assert the controller method\n used to process the request work only for requests processed with\n RequestMappingHandlerMapping and RequestMappingHandlerAdapter\n which is used by default with the Spring MVC Java config and XML namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html
HeaderResultMatchers	A										<section class="prog__container">Factory for response header assertions.\n An instance of this class is available via\n MockMvcResultMatchers.header().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/HeaderResultMatchers.html
JsonPathResultMatchers	A										<section class="prog__container">Factory for assertions on the response content using\n JsonPath expressions.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.jsonPath(String, Matcher) or\n MockMvcResultMatchers.jsonPath(String, Object...).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/JsonPathResultMatchers.html
MockMvcResultHandlers	A										<section class="prog__container">Static factory methods for ResultHandler-based result actions.\n\n Eclipse Users\nConsider adding this class as a Java editor favorite. To navigate to\n this setting, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultHandlers.html
MockMvcResultMatchers	A										<section class="prog__container">Static factory methods for ResultMatcher-based result actions.\n\n Eclipse Users\nConsider adding this class as a Java editor favorite. To navigate to\n this setting, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html
ModelResultMatchers	A										<section class="prog__container">Factory for assertions on the model.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.model().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/ModelResultMatchers.html
PrintingResultHandler	A										<section class="prog__container">Result handler that prints MvcResult details to a given output\n stream — for example: System.out, System.err, a\n custom java.io.PrintWriter, etc.\n\n An instance of this class is typically accessed via one of the\n print or log\n methods in MockMvcResultHandlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/PrintingResultHandler.html
PrintingResultHandler.ResultValuePrinter	A										<section class="prog__container">A contract for how to actually write result information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/PrintingResultHandler.ResultValuePrinter.html
RequestResultMatchers	A										<section class="prog__container">Factory for assertions on the request.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.request().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/RequestResultMatchers.html
StatusResultMatchers	A										<section class="prog__container">Factory for assertions on the response status.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.status().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/StatusResultMatchers.html
ViewResultMatchers	A										<section class="prog__container">Factory for assertions on the selected view.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.view().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/ViewResultMatchers.html
XpathResultMatchers	A										<section class="prog__container">Factory for assertions on the response content using XPath expressions.\n An instance of this class is typically accessed via\n MockMvcResultMatchers.xpath(java.lang.String, java.lang.Object...).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/XpathResultMatchers.html
AbstractMockMvcBuilder<B extends AbstractMockMvcBuilder>	A										<section class="prog__container">An abstract implementation of MockMvcBuilder\n with common methods for configuring filters, default request properties, global\n expectations and global result actions.\n \n Sub-classes can use different strategies to prepare a WebApplicationContext to\n pass to the DispatcherServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/AbstractMockMvcBuilder.html
ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder>	A										<section class="prog__container">Defines common methods for building a MockMvc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/ConfigurableMockMvcBuilder.html
DefaultMockMvcBuilder	A										<section class="prog__container">A concrete implementation of AbstractMockMvcBuilder that provides\n the WebApplicationContext supplied to it as a constructor argument.\n\n In addition, if the ServletContext in the supplied\n WebApplicationContext does not contain an entry for the\n WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE\n key, the root WebApplicationContext will be detected and stored\n in the ServletContext under the\n ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE key.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/DefaultMockMvcBuilder.html
MockMvcBuilders	A										<section class="prog__container">The main class to import in order to access all available MockMvcBuilders.\n\n Eclipse Users\nConsider adding this class as a Java editor favorite. To navigate to\n this setting, open the Preferences and type "favorites".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html
MockMvcConfigurer	A										<section class="prog__container">Allows a sub-class to encapsulate logic for pre-configuring a\n ConfigurableMockMvcBuilder for some specific purpose. A 3rd party\n library may use this to provide shortcuts for setting up MockMvc.\n\n Can be plugged in via ConfigurableMockMvcBuilder.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer) with\n instances of this type likely created via static methods, e.g.:\n\n \n        MockMvcBuilders.webAppContextSetup(context).apply(mySetup("foo","bar")).build();\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcConfigurer.html
MockMvcConfigurerAdapter	A										<section class="prog__container">An empty method implementation of MockMvcConfigurer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcConfigurerAdapter.html
StandaloneMockMvcBuilder	A										<section class="prog__container">A MockMvcBuilder that accepts @Controller registrations\n thus allowing full control over the instantiation and initialization of\n controllers and their dependencies similar to plain unit tests, and also\n making it possible to test one controller at a time.\n\n This builder creates the minimum infrastructure required by the\n DispatcherServlet to serve requests with annotated controllers and\n also provides methods for customization. The resulting configuration and\n customization options are equivalent to using MVC Java config except\n using builder style methods.\n\n To configure view resolution, either select a "fixed" view to use for every\n request performed (see setSingleView(View)) or provide a list of\n ViewResolvers (see setViewResolvers(ViewResolver...)).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.html
CannotCreateTransactionException	A										<section class="prog__container">Exception thrown when a transaction can't be created using an\n underlying transaction API such as JTA.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/CannotCreateTransactionException.html
HeuristicCompletionException	A										<section class="prog__container">Exception that represents a transaction failure caused by a heuristic\n decision on the side of the transaction coordinator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/HeuristicCompletionException.html
IllegalTransactionStateException	A										<section class="prog__container">Exception thrown when the existence or non-existence of a transaction\n amounts to an illegal state according to the transaction propagation\n behavior that applies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/IllegalTransactionStateException.html
InvalidIsolationLevelException	A										<section class="prog__container">Exception that gets thrown when an invalid isolation level is specified,\n i.e. an isolation level that the transaction manager implementation\n doesn't support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/InvalidIsolationLevelException.html
InvalidTimeoutException	A										<section class="prog__container">Exception that gets thrown when an invalid timeout is specified,\n that is, the specified timeout valid is out of range or the\n transaction manager implementation doesn't support timeouts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/InvalidTimeoutException.html
NestedTransactionNotSupportedException	A										<section class="prog__container">Exception thrown when attempting to work with a nested transaction\n but nested transactions are not supported by the underlying backend.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/NestedTransactionNotSupportedException.html
NoTransactionException	A										<section class="prog__container">Exception thrown when an operation is attempted that\n relies on an existing transaction (such as setting\n rollback status) and there is no existing transaction.\n This represents an illegal usage of the transaction API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/NoTransactionException.html
PlatformTransactionManager	A										<section class="prog__container">This is the central interface in Spring's transaction infrastructure.\n Applications can use this directly, but it is not primarily meant as API:\n Typically, applications will work with either TransactionTemplate or\n declarative transaction demarcation through AOP.\n\n For implementors, it is recommended to derive from the provided\n AbstractPlatformTransactionManager\n class, which pre-implements the defined propagation behavior and takes care\n of transaction synchronization handling. Subclasses have to implement\n template methods for specific states of the underlying transaction,\n for example: begin, suspend, resume, commit.\n\n The default implementations of this strategy interface are\n JtaTransactionManager and\n DataSourceTransactionManager,\n which can serve as an implementation guide for other transaction strategies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html
SavepointManager	A										<section class="prog__container">Interface that specifies an API to programmatically manage transaction\n savepoints in a generic fashion. Extended by TransactionStatus to\n expose savepoint management functionality for a specific transaction.\n\n Note that savepoints can only work within an active transaction.\n Just use this programmatic savepoint handling for advanced needs;\n else, a subtransaction with PROPAGATION_NESTED is preferable.\n\n This interface is inspired by JDBC 3.0's Savepoint mechanism\n but is independent from any specific persistence technology.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/SavepointManager.html
TransactionDefinition	A										<section class="prog__container">Interface that defines Spring-compliant transaction properties.\n Based on the propagation behavior definitions analogous to EJB CMT attributes.\n\n Note that isolation level and timeout settings will not get applied unless\n an actual new transaction gets started. As only PROPAGATION_REQUIRED,\n PROPAGATION_REQUIRES_NEW and PROPAGATION_NESTED can cause\n that, it usually doesn't make sense to specify those settings in other cases.\n Furthermore, be aware that not all transaction managers will support those\n advanced features and thus might throw corresponding exceptions when given\n non-default values.\n\n The read-only flag applies to any transaction context,\n whether backed by an actual resource transaction or operating non-transactionally\n at the resource level. In the latter case, the flag will only apply to managed\n resources within the application, such as a Hibernate Session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionDefinition.html
TransactionException	A										<section class="prog__container">Superclass for all transaction exceptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionException.html
TransactionStatus	A										<section class="prog__container">Representation of the status of a transaction.\n\n Transactional code can use this to retrieve status information,\n and to programmatically request a rollback (instead of throwing\n an exception that causes an implicit rollback).\n\n Derives from the SavepointManager interface to provide access\n to savepoint management facilities. Note that savepoint management\n is only available if supported by the underlying transaction manager.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionStatus.html
TransactionSuspensionNotSupportedException	A										<section class="prog__container">Exception thrown when attempting to suspend an existing transaction\n but transaction suspension is not supported by the underlying backend.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionSuspensionNotSupportedException.html
TransactionSystemException	A										<section class="prog__container">Exception thrown when a general transaction system error is encountered,\n like on commit or rollback.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionSystemException.html
TransactionTimedOutException	A										<section class="prog__container">Exception to be thrown when a transaction has timed out.\n\n Thrown by Spring's local transaction strategies if the deadline\n for a transaction has been reached when an operation is attempted,\n according to the timeout specified for the given transaction.\n\n Beyond such checks before each transactional operation, Spring's\n local transaction strategies will also pass appropriate timeout values\n to resource operations (for example to JDBC Statements, letting the JDBC\n driver respect the timeout). Such operations will usually throw native\n resource exceptions (for example, JDBC SQLExceptions) if their operation\n timeout has been exceeded, to be converted to Spring's DataAccessException\n in the respective DAO (which might use Spring's JdbcTemplate, for example).\n\n In a JTA environment, it is up to the JTA transaction coordinator\n to apply transaction timeouts. Usually, the corresponding JTA-aware\n connection pool will perform timeout checks and throw corresponding\n native resource exceptions (for example, JDBC SQLExceptions).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionTimedOutException.html
TransactionUsageException	A										<section class="prog__container">Superclass for exceptions caused by inappropriate usage of\n a Spring transaction API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionUsageException.html
UnexpectedRollbackException	A										<section class="prog__container">Thrown when an attempt to commit a transaction resulted\n in an unexpected rollback.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/UnexpectedRollbackException.html
AbstractTransactionManagementConfiguration	A										<section class="prog__container">Abstract base @Configuration class providing common structure for enabling\n Spring's annotation-driven transaction management capability.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.html
AnnotationTransactionAttributeSource	A										<section class="prog__container">Implementation of the\n TransactionAttributeSource\n interface for working with transaction metadata in JDK 1.5+ annotation format.\n\n This class reads Spring's JDK 1.5+ Transactional annotation and\n exposes corresponding transaction attributes to Spring's transaction infrastructure.\n Also supports JTA 1.2's Transactional and EJB3's\n TransactionAttribute annotation (if present).\n This class may also serve as base class for a custom TransactionAttributeSource,\n or get customized through TransactionAnnotationParser strategies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.html
Ejb3TransactionAnnotationParser	A										<section class="prog__container">Strategy implementation for parsing EJB3's TransactionAttribute\n annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.html
EnableTransactionManagement	A										<section class="prog__container">Enables Spring's annotation-driven transaction management capability, similar to\n the support found in Spring's <tx:*> XML namespace. To be used on\n @Configuration\n classes as follows:\n\n \n @Configuration\n @EnableTransactionManagement\n public class AppConfig {\n\n     @Bean\n     public FooRepository fooRepository() {\n         // configure and return a class having @Transactional methods\n         return new JdbcFooRepository(dataSource());\n     }\n\n     @Bean\n     public DataSource dataSource() {\n         // configure and return the necessary JDBC DataSource\n     }\n\n     @Bean\n     public PlatformTransactionManager txManager() {\n         return new DataSourceTransactionManager(dataSource());\n     }\n }\nFor reference, the example above can be compared to the following Spring XML\n configuration:\n\n \n <beans>\n\n     <tx:annotation-driven/>\n\n     <bean id="fooRepository" class="com.foo.JdbcFooRepository">\n         <constructor-arg ref="dataSource"/>\n     </bean>\n\n     <bean id="dataSource" class="com.vendor.VendorDataSource"/>\n\n     <bean id="transactionManager" class="org.sfwk...DataSourceTransactionManager">\n         <constructor-arg ref="dataSource"/>\n     </bean>\n\n </beans>\n \n\n In both of the scenarios above, @EnableTransactionManagement and <tx:annotation-driven/> are responsible for registering the necessary Spring\n components that power annotation-driven transaction management, such as the\n TransactionInterceptor and the proxy- or AspectJ-based advice that weave the\n interceptor into the call stack when JdbcFooRepository's @Transactional\n methods are invoked.\n\n A minor difference between the two examples lies in the naming of the PlatformTransactionManager bean: In the @Bean case, the name is\n "txManager" (per the name of the method); in the XML case, the name is\n "transactionManager". The <tx:annotation-driven/> is hard-wired to\n look for a bean named "transactionManager" by default, however\n @EnableTransactionManagement is more flexible; it will fall back to a by-type\n lookup for any PlatformTransactionManager bean in the container. Thus the name\n can be "txManager", "transactionManager", or "tm": it simply does not matter.\n\n For those that wish to establish a more direct relationship between\n @EnableTransactionManagement and the exact transaction manager bean to be used,\n the TransactionManagementConfigurer callback interface may be implemented -\n notice the implements clause and the @Override-annotated method below:\n\n \n @Configuration\n @EnableTransactionManagement\n public class AppConfig implements TransactionManagementConfigurer {\n\n     @Bean\n     public FooRepository fooRepository() {\n         // configure and return a class having @Transactional methods\n         return new JdbcFooRepository(dataSource());\n     }\n\n     @Bean\n     public DataSource dataSource() {\n         // configure and return the necessary JDBC DataSource\n     }\n\n     @Bean\n     public PlatformTransactionManager txManager() {\n         return new DataSourceTransactionManager(dataSource());\n     }\n\n     @Override\n     public PlatformTransactionManager annotationDrivenTransactionManager() {\n         return txManager();\n     }\n }\n\n This approach may be desirable simply because it is more explicit, or it may be\n necessary in order to distinguish between two PlatformTransactionManager beans\n present in the same container.  As the name suggests, the\n annotationDrivenTransactionManager() will be the one used for processing\n @Transactional methods. See TransactionManagementConfigurer Javadoc\n for further details.\n\n The mode() attribute controls how advice is applied; if the mode is\n AdviceMode.PROXY (the default), then the other attributes control the behavior\n of the proxying.\n\n If the mode() is set to AdviceMode.ASPECTJ, then the\n proxyTargetClass() attribute is obsolete. Note also that in this case the\n spring-aspects module JAR must be present on the classpath.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html
Isolation	A										<section class="prog__container">Enumeration that represents transaction isolation levels for use\n with the Transactional annotation, corresponding to the\n TransactionDefinition interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Isolation.html
JtaTransactionAnnotationParser	A										<section class="prog__container">Strategy implementation for parsing JTA 1.2's Transactional annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/JtaTransactionAnnotationParser.html
Propagation	A										<section class="prog__container">Enumeration that represents transaction propagation behaviors for use\n with the Transactional annotation, corresponding to the\n TransactionDefinition interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Propagation.html
ProxyTransactionManagementConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans\n necessary to enable proxy-based annotation-driven transaction management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/ProxyTransactionManagementConfiguration.html
SpringTransactionAnnotationParser	A										<section class="prog__container">Strategy implementation for parsing Spring's Transactional annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.html
Transactional	A										<section class="prog__container">Describes transaction attributes on a method or class.\n\n This annotation type is generally directly comparable to Spring's\n RuleBasedTransactionAttribute\n class, and in fact AnnotationTransactionAttributeSource will directly\n convert the data to the latter class, so that Spring's transaction support code\n does not have to know about annotations. If no rules are relevant to the exception,\n it will be treated like\n DefaultTransactionAttribute\n (rolling back on runtime exceptions).\n\n For specific information about the semantics of this annotation's attributes,\n consult the TransactionDefinition and\n TransactionAttribute javadocs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html
TransactionAnnotationParser	A										<section class="prog__container">Strategy interface for parsing known transaction annotation types.\n AnnotationTransactionAttributeSource delegates to such\n parsers for supporting specific annotation types such as Spring's own\n Transactional, JTA 1.2's Transactional\n or EJB3's TransactionAttribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/TransactionAnnotationParser.html
TransactionManagementConfigurationSelector	A										<section class="prog__container">Selects which implementation of AbstractTransactionManagementConfiguration\n should be used based on the value of EnableTransactionManagement.mode() on the\n importing @Configuration class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/TransactionManagementConfigurationSelector.html
TransactionManagementConfigurer	A										<section class="prog__container">Interface to be implemented by @Configuration classes annotated with @EnableTransactionManagement that wish to\n or need to explicitly specify the default PlatformTransactionManager bean to be\n used for annotation-driven transaction management, as opposed to the default approach\n of a by-type lookup. One reason this might be necessary is if there are two\n PlatformTransactionManager beans present in the container.\n\n See @EnableTransactionManagement for general examples and context;\n see annotationDrivenTransactionManager() for detailed instructions.\n\n Note that in by-type lookup disambiguation cases, an alternative approach to\n implementing this interface is to simply mark one of the offending\n PlatformTransactionManager @Bean methods as\n @Primary.\n This is even generally preferred since it doesn't lead to early initialization\n of the PlatformTransactionManager bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/TransactionManagementConfigurer.html
AspectJTransactionManagementConfiguration	A										<section class="prog__container">@Configuration class that registers the Spring infrastructure beans necessary\n to enable AspectJ-based annotation-driven transaction management.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.html
JtaTransactionManagerBeanDefinitionParser	A										<section class="prog__container">Parser for the <tx:jta-transaction-manager/> XML configuration element,\n autodetecting WebLogic and WebSphere servers and exposing the corresponding\n JtaTransactionManager subclass.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.html
JtaTransactionManagerFactoryBean	A										<section class="prog__container">A FactoryBean equivalent to the <tx:jta-transaction-manager/> XML element,\n autodetecting WebLogic and WebSphere servers and exposing the corresponding\n JtaTransactionManager subclass.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/config/JtaTransactionManagerFactoryBean.html
TransactionManagementConfigUtils	A										<section class="prog__container">Configuration constants for internal sharing across subpackages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/config/TransactionManagementConfigUtils.html
TxNamespaceHandler	A										<section class="prog__container">NamespaceHandler allowing for the configuration of\n declarative transaction management using either XML or using annotations.\n\n This namespace handler is the central piece of functionality in the\n Spring transaction management facilities and offers two approaches\n to declaratively manage transactions.\n\n One approach uses transaction semantics defined in XML using the\n <tx:advice> elements, the other uses annotations\n in combination with the <tx:annotation-driven> element.\n Both approached are detailed to great extent in the Spring reference manual.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/config/TxNamespaceHandler.html
TransactionalEventListener	A										<section class="prog__container">An EventListener that is invoked according to a TransactionPhase.\n\n If the event is not published within the boundaries of a managed transaction, the event\n is discarded unless the fallbackExecution() flag is explicitly set. If a\n transaction is running, the event is processed according to its TransactionPhase.\n\n Adding @Order on your annotated method\n allows you to prioritize that listener amongst other listeners running in the same phase.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/event/TransactionalEventListener.html
TransactionalEventListenerFactory	A										<section class="prog__container">EventListenerFactory implementation that handles TransactionalEventListener\n annotated method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/event/TransactionalEventListenerFactory.html
TransactionPhase	A										<section class="prog__container">The phase at which a transactional event listener applies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/event/TransactionPhase.html
AbstractFallbackTransactionAttributeSource	A										<section class="prog__container">Abstract implementation of TransactionAttributeSource that caches\n attributes for methods and implements a fallback policy: 1. specific target\n method; 2. target class; 3. declaring method; 4. declaring class/interface.\n\n Defaults to using the target class's transaction attribute if none is\n associated with the target method. Any transaction attribute associated with\n the target method completely overrides a class transaction attribute.\n If none found on the target class, the interface that the invoked method\n has been called through (in case of a JDK proxy) will be checked.\n\n This implementation caches attributes by method after they are first used.\n If it is ever desirable to allow dynamic changing of transaction attributes\n (which is very unlikely), caching could be made configurable. Caching is\n desirable because of the cost of evaluating rollback rules.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.html
BeanFactoryTransactionAttributeSourceAdvisor	A										<section class="prog__container">Advisor driven by a TransactionAttributeSource, used to include\n a transaction advice bean for methods that are transactional.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/BeanFactoryTransactionAttributeSourceAdvisor.html
CompositeTransactionAttributeSource	A										<section class="prog__container">Composite TransactionAttributeSource implementation that iterates\n over a given array of TransactionAttributeSource instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/CompositeTransactionAttributeSource.html
DefaultTransactionAttribute	A										<section class="prog__container">Spring's common transaction attribute implementation.\n Rolls back on runtime, but not checked, exceptions by default.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/DefaultTransactionAttribute.html
DelegatingTransactionAttribute	A										<section class="prog__container">TransactionAttribute implementation that delegates all calls to a given target\n TransactionAttribute instance. Abstract because it is meant to be subclassed,\n with subclasses overriding specific methods that are not supposed to simply delegate\n to the target instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/DelegatingTransactionAttribute.html
MatchAlwaysTransactionAttributeSource	A										<section class="prog__container">Very simple implementation of TransactionAttributeSource which will always return\n the same TransactionAttribute for all methods fed to it. The TransactionAttribute\n may be specified, but will otherwise default to PROPAGATION_REQUIRED. This may be\n used in the cases where you want to use the same transaction attribute with all\n methods being handled by a transaction interceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.html
MethodMapTransactionAttributeSource	A										<section class="prog__container">Simple TransactionAttributeSource implementation that\n allows attributes to be stored per method in a Map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.html
NameMatchTransactionAttributeSource	A										<section class="prog__container">Simple TransactionAttributeSource implementation that\n allows attributes to be matched by registered name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/NameMatchTransactionAttributeSource.html
NoRollbackRuleAttribute	A										<section class="prog__container">Tag subclass of RollbackRuleAttribute that has the opposite behavior\n to the RollbackRuleAttribute superclass.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/NoRollbackRuleAttribute.html
RollbackRuleAttribute	A										<section class="prog__container">Rule determining whether or not a given exception (and any subclasses)\n should cause a rollback.\n\n Multiple such rules can be applied to determine whether a transaction\n should commit or rollback after an exception has been thrown.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/RollbackRuleAttribute.html
RuleBasedTransactionAttribute	A										<section class="prog__container">TransactionAttribute implementation that works out whether a given exception\n should cause transaction rollback by applying a number of rollback rules,\n both positive and negative. If no rules are relevant to the exception, it\n behaves like DefaultTransactionAttribute (rolling back on runtime exceptions).\n\n TransactionAttributeEditor creates objects of this class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/RuleBasedTransactionAttribute.html
TransactionalProxy	A										<section class="prog__container">A marker interface for manually created transactional proxies.\n\n TransactionAttributeSourcePointcut will ignore such existing\n transactional proxies during AOP auto-proxying and therefore avoid\n re-processing transaction metadata on them.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionalProxy.html
TransactionAspectSupport	A										<section class="prog__container">Base class for transactional aspects, such as the TransactionInterceptor\n or an AspectJ aspect.\n\n This enables the underlying Spring transaction infrastructure to be used easily\n to implement an aspect for any aspect system.\n\n Subclasses are responsible for calling methods in this class in the correct order.\n\n If no transaction name has been specified in the TransactionAttribute,\n the exposed name will be the fully-qualified class name + "." + method name\n (by default).\n\n Uses the Strategy design pattern. A PlatformTransactionManager\n implementation will perform the actual transaction management, and a\n TransactionAttributeSource is used for determining transaction definitions.\n\n A transaction aspect is serializable if its PlatformTransactionManager\n and TransactionAttributeSource are serializable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAspectSupport.html
TransactionAspectSupport.InvocationCallback	A										<section class="prog__container">Simple callback interface for proceeding with the target invocation.\n Concrete interceptors/aspects adapt this to their invocation mechanism.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAspectSupport.InvocationCallback.html
TransactionAspectSupport.TransactionInfo	A										<section class="prog__container">Opaque object used to hold Transaction information. Subclasses\n must pass it back to methods on this class, but not see its internals.</section>	No URL found
TransactionAttribute	A										<section class="prog__container">This interface adds a rollbackOn specification to TransactionDefinition.\n As custom rollbackOn is only possible with AOP, this class resides\n in the AOP transaction package.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAttribute.html
TransactionAttributeEditor	A										<section class="prog__container">PropertyEditor for TransactionAttribute objects. Accepts a String of form\n PROPAGATION_NAME, ISOLATION_NAME, readOnly, timeout_NNNN,+Exception1,-Exception2\nwhere only propagation code is required. For example:\n PROPAGATION_MANDATORY, ISOLATION_DEFAULT\nThe tokens can be in any order. Propagation and isolation codes\n must use the names of the constants in the TransactionDefinition class. Timeout values\n are in seconds. If no timeout is specified, the transaction manager will apply a default\n timeout specific to the particular transaction manager.\n\n A "+" before an exception name substring indicates that transactions should commit\n even if this exception is thrown; a "-" that they should roll back.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAttributeEditor.html
TransactionAttributeSource	A										<section class="prog__container">Strategy interface used by TransactionInterceptor for metadata retrieval.\n\n Implementations know how to source transaction attributes, whether from configuration,\n metadata attributes at source level (such as Java 5 annotations), or anywhere else.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAttributeSource.html
TransactionAttributeSourceAdvisor	A										<section class="prog__container">Advisor driven by a TransactionAttributeSource, used to include\n a TransactionInterceptor only for methods that are transactional.\n\n Because the AOP framework caches advice calculations, this is normally\n faster than just letting the TransactionInterceptor run and find out\n itself that it has no work to do.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAttributeSourceAdvisor.html
TransactionAttributeSourceEditor	A										<section class="prog__container">Property editor that converts a String into a TransactionAttributeSource.\n The transaction attribute string must be parseable by the\n TransactionAttributeEditor in this package.\n\n Strings are in property syntax, with the form:\nFQCN.methodName=&lt;transaction attribute string&gt;\nFor example:\ncom.mycompany.mycode.MyClass.myMethod=PROPAGATION_MANDATORY,ISOLATION_DEFAULT\nNOTE: The specified class must be the one where the methods are\n defined; in case of implementing an interface, the interface class name.\n\n Note: Will register all overloaded methods for a given name.\n Does not support explicit registration of certain overloaded methods.\n Supports "xxx*" mappings, e.g. "notify*" for "notify" and "notifyAll".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionAttributeSourceEditor.html
TransactionInterceptor	A										<section class="prog__container">AOP Alliance MethodInterceptor for declarative transaction\n management using the common Spring transaction infrastructure\n (PlatformTransactionManager).\n\n Derives from the TransactionAspectSupport class which\n contains the integration with Spring's underlying transaction API.\n TransactionInterceptor simply calls the relevant superclass methods\n such as TransactionAspectSupport.invokeWithinTransaction(java.lang.reflect.Method, java.lang.Class<?>, org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback) in the correct order.\n\n TransactionInterceptors are thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionInterceptor.html
TransactionProxyFactoryBean	A										<section class="prog__container">Proxy factory bean for simplified declarative transaction handling.\n This is a convenient alternative to a standard AOP\n ProxyFactoryBean\n with a separate TransactionInterceptor definition.\n\n HISTORICAL NOTE: This class was originally designed to cover the\n typical case of declarative transaction demarcation: namely, wrapping a singleton\n target object with a transactional proxy, proxying all the interfaces that the target\n implements. However, in Spring versions 2.0 and beyond, the functionality provided here\n is superseded by the more convenient tx: XML namespace. See the declarative transaction management section of the\n Spring reference documentation to understand the modern options for managing\n transactions in Spring applications. For these reasons, users should favor of\n the tx: XML namespace as well as\n the @Transactional\n and @EnableTransactionManagement annotations.\nThere are three main properties that need to be specified:\n \n"transactionManager": the PlatformTransactionManager implementation to use\n (for example, a JtaTransactionManager instance)\n "target": the target object that a transactional proxy should be created for\n "transactionAttributes": the transaction attributes (for example, propagation\n behavior and "readOnly" flag) per target method name (or method name pattern)\n \nIf the "transactionManager" property is not set explicitly and this FactoryBean\n is running in a ListableBeanFactory, a single matching bean of type\n PlatformTransactionManager will be fetched from the BeanFactory.\n\n In contrast to TransactionInterceptor, the transaction attributes are\n specified as properties, with method names as keys and transaction attribute\n descriptors as values. Method names are always applied to the target class.\n\n Internally, a TransactionInterceptor instance is used, but the user of this\n class does not have to care. Optionally, a method pointcut can be specified\n to cause conditional invocation of the underlying TransactionInterceptor.\n\n The "preInterceptors" and "postInterceptors" properties can be set to add\n additional interceptors to the mix, like\n PerformanceMonitorInterceptor.\n\n HINT: This class is often used with parent / child bean definitions.\n Typically, you will define the transaction manager and default transaction\n attributes (for method name patterns) in an abstract parent bean definition,\n deriving concrete child bean definitions for specific target objects.\n This reduces the per-bean definition effort to a minimum.\n\n \n <bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"\n     abstract="true">\n   <property name="transactionManager" ref="transactionManager"/>\n   <property name="transactionAttributes">\n     <props>\n       <prop key="insert*">PROPAGATION_REQUIRED</prop>\n       <prop key="update*">PROPAGATION_REQUIRED</prop>\n       <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>\n     </props>\n   </property>\n </bean>\n\n <bean id="myProxy" parent="baseTransactionProxy">\n   <property name="target" ref="myTarget"/>\n </bean>\n\n <bean id="yourProxy" parent="baseTransactionProxy">\n   <property name="target" ref="yourTarget"/>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionProxyFactoryBean.html
JtaAfterCompletionSynchronization	A										<section class="prog__container">Adapter for a JTA Synchronization, invoking the afterCommit /\n afterCompletion callbacks of Spring TransactionSynchronization\n objects callbacks after the outer JTA transaction has completed.\n Applied when participating in an existing (non-Spring) JTA transaction.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/JtaAfterCompletionSynchronization.html
JtaTransactionManager	A										<section class="prog__container">PlatformTransactionManager implementation\n for JTA, delegating to a backend JTA provider. This is typically used to delegate\n to a Java EE server's transaction coordinator, but may also be configured with a\n local JTA provider which is embedded within the application.\n\n This transaction manager is appropriate for handling distributed transactions,\n i.e. transactions that span multiple resources, and for controlling transactions on\n application server resources (e.g. JDBC DataSources available in JNDI) in general.\n For a single JDBC DataSource, DataSourceTransactionManager is perfectly sufficient,\n and for accessing a single resource with Hibernate (including transactional cache),\n HibernateTransactionManager is appropriate, for example.\n\n For typical JTA transactions (REQUIRED, SUPPORTS, MANDATORY, NEVER), a plain\n JtaTransactionManager definition is all you need, portable across all Java EE servers.\n This corresponds to the functionality of the JTA UserTransaction, for which Java EE\n specifies a standard JNDI name ("java:comp/UserTransaction"). There is no need to\n configure a server-specific TransactionManager lookup for this kind of JTA usage.\n\n Transaction suspension (REQUIRES_NEW, NOT_SUPPORTED) is just available with a\n JTA TransactionManager being registered. Common TransactionManager locations are\n autodetected by JtaTransactionManager, provided that the "autodetectTransactionManager"\n flag is set to "true" (which it is by default).\n\n Note: Support for the JTA TransactionManager interface is not required by Java EE.\n Almost all Java EE servers expose it, but do so as extension to EE. There might be some\n issues with compatibility, despite the TransactionManager interface being part of JTA.\n As a consequence, Spring provides various vendor-specific PlatformTransactionManagers,\n which are recommended to be used if appropriate: WebLogicJtaTransactionManager\n and WebSphereUowTransactionManager. For all other Java EE servers, the\n standard JtaTransactionManager is sufficient.\n\n This pure JtaTransactionManager class supports timeouts but not per-transaction\n isolation levels. Custom subclasses may override the doJtaBegin(org.springframework.transaction.jta.JtaTransactionObject, org.springframework.transaction.TransactionDefinition) method for\n specific JTA extensions in order to provide this functionality; Spring includes a\n corresponding WebLogicJtaTransactionManager class for WebLogic Server. Such\n adapters for specific Java EE transaction coordinators may also expose transaction\n names for monitoring; with standard JTA, transaction names will simply be ignored.\n\n Consider using Spring's tx:jta-transaction-manager configuration\n element for automatically picking the appropriate JTA platform transaction manager\n (automatically detecting WebLogic and WebSphere).\nJTA 1.1 adds the TransactionSynchronizationRegistry facility, as public Java EE 5\n API in addition to the standard JTA UserTransaction handle. As of Spring 2.5, this\n JtaTransactionManager autodetects the TransactionSynchronizationRegistry and uses\n it for registering Spring-managed synchronizations when participating in an existing\n JTA transaction (e.g. controlled by EJB CMT). If no TransactionSynchronizationRegistry\n is available, then such synchronizations will be registered via the (non-EE) JTA\n TransactionManager handle.\n\n This class is serializable. However, active synchronizations do not survive serialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/JtaTransactionManager.html
JtaTransactionObject	A										<section class="prog__container">JTA transaction object, representing a UserTransaction.\n Used as transaction object by Spring's JtaTransactionManager.\n\n Note: This is an SPI class, not intended to be used by applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/JtaTransactionObject.html
ManagedTransactionAdapter	A										<section class="prog__container">Adapter for a managed JTA Transaction handle, taking a JTA\n TransactionManager reference and creating\n a JTA Transaction handle for it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/ManagedTransactionAdapter.html
SimpleTransactionFactory	A										<section class="prog__container">Default implementation of the TransactionFactory strategy interface,\n simply wrapping a standard JTA TransactionManager.\n\n Does not support transaction names; simply ignores any specified name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/SimpleTransactionFactory.html
SpringJtaSynchronizationAdapter	A										<section class="prog__container">Adapter that implements the JTA Synchronization\n interface delegating to an underlying Spring\n TransactionSynchronization.\n\n Useful for synchronizing Spring resource management code with plain\n JTA / EJB CMT transactions, despite the original code being built for\n Spring transaction synchronization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/SpringJtaSynchronizationAdapter.html
TransactionFactory	A										<section class="prog__container">Strategy interface for creating JTA Transaction\n objects based on specified transactional characteristics.\n\n The default implementation, SimpleTransactionFactory, simply\n wraps a standard JTA TransactionManager.\n This strategy interface allows for more sophisticated implementations\n that adapt to vendor-specific JTA extensions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/TransactionFactory.html
UserTransactionAdapter	A										<section class="prog__container">Adapter for a JTA UserTransaction handle, taking a JTA\n TransactionManager reference and creating\n a JTA UserTransaction handle for it.\n\n The JTA UserTransaction interface is an exact subset of the JTA\n TransactionManager interface. Unfortunately, it does not serve as\n super-interface of TransactionManager, though, which requires an\n adapter such as this class to be used when intending to talk to\n a TransactionManager handle through the UserTransaction interface.\n\n Used internally by Spring's JtaTransactionManager for certain\n scenarios. Not intended for direct use in application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/UserTransactionAdapter.html
WebLogicJtaTransactionManager	A										<section class="prog__container">Special JtaTransactionManager variant for BEA WebLogic (9.0 and higher).\n Supports the full power of Spring's transaction definitions on WebLogic's\n transaction coordinator, beyond standard JTA: transaction names,\n per-transaction isolation levels, and proper resuming of transactions in all cases.\n\n Uses WebLogic's special begin(name) method to start a JTA transaction,\n in order to make Spring-driven transactions visible in WebLogic's transaction\n monitor. In case of Spring's declarative transactions, the exposed name will\n (by default) be the fully-qualified class name + "." + method name.\n\n Supports a per-transaction isolation level through WebLogic's corresponding\n JTA transaction property "ISOLATION LEVEL". This will apply the specified isolation\n level (e.g. ISOLATION_SERIALIZABLE) to all JDBC Connections that participate in the\n given transaction.\n\n Invokes WebLogic's special forceResume method if standard JTA resume\n failed, to also resume if the target transaction was marked rollback-only.\n If you're not relying on this feature of transaction suspension in the first\n place, Spring's standard JtaTransactionManager will behave properly too.\n\n By default, the JTA UserTransaction and TransactionManager handles are\n fetched directly from WebLogic's TransactionHelper. This can be\n overridden by specifying "userTransaction"/"userTransactionName" and\n "transactionManager"/"transactionManagerName", passing in existing handles\n or specifying corresponding JNDI locations to look up.\n\n NOTE: This JtaTransactionManager is intended to refine specific transaction\n demarcation behavior on Spring's side. It will happily co-exist with independently\n configured WebLogic transaction strategies in your persistence provider, with no\n need to specifically connect those setups in any way.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/WebLogicJtaTransactionManager.html
WebSphereUowTransactionManager	A										<section class="prog__container">WebSphere-specific PlatformTransactionManager implementation that delegates\n to a UOWManager instance, obtained from WebSphere's\n JNDI environment. This allows Spring to leverage the full power of the WebSphere\n transaction coordinator, including transaction suspension, in a manner that is\n perfectly compliant with officially supported WebSphere API.\n\n The CallbackPreferringPlatformTransactionManager interface\n implemented by this class indicates that callers should preferably pass in\n a TransactionCallback through the execute(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>) method, which\n will be handled through the callback-based WebSphere UOWManager API instead\n of through standard JTA API (UserTransaction / TransactionManager). This avoids\n the use of the non-public javax.transaction.TransactionManager\n API on WebSphere, staying within supported WebSphere API boundaries.\n\n This transaction manager implementation derives from Spring's standard\n JtaTransactionManager, inheriting the capability to support programmatic\n transaction demarcation via getTransaction / commit /\n rollback calls through a JTA UserTransaction handle, for callers\n that do not use the TransactionCallback-based execute(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>) method. However,\n transaction suspension is not supported in this getTransaction\n style (unless you explicitly specify a JtaTransactionManager.setTransactionManager(javax.transaction.TransactionManager) reference,\n despite the official WebSphere recommendations). Use the execute(org.springframework.transaction.TransactionDefinition, org.springframework.transaction.support.TransactionCallback<T>) style\n for any code that might require transaction suspension.\n\n This transaction manager is compatible with WebSphere 6.1.0.9 and above.\n The default JNDI location for the UOWManager is "java:comp/websphere/UOWManager".\n If the location happens to differ according to your WebSphere documentation,\n simply specify the actual location through this transaction manager's\n "uowManagerName" bean property.\n\n NOTE: This JtaTransactionManager is intended to refine specific transaction\n demarcation behavior on Spring's side. It will happily co-exist with independently\n configured WebSphere transaction strategies in your persistence provider, with no\n need to specifically connect those setups in any way.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/jta/WebSphereUowTransactionManager.html
AbstractPlatformTransactionManager	A										<section class="prog__container">Abstract base class that implements Spring's standard transaction workflow,\n serving as basis for concrete platform transaction managers like\n JtaTransactionManager.\n\n This base class provides the following workflow handling:\n \ndetermines if there is an existing transaction;\n applies the appropriate propagation behavior;\n suspends and resumes transactions if necessary;\n checks the rollback-only flag on commit;\n applies the appropriate modification on rollback\n (actual rollback or setting rollback-only);\n triggers registered synchronization callbacks\n (if transaction synchronization is active).\n \nSubclasses have to implement specific template methods for specific\n states of a transaction, e.g.: begin, suspend, resume, commit, rollback.\n The most important of them are abstract and must be provided by a concrete\n implementation; for the rest, defaults are provided, so overriding is optional.\n\n Transaction synchronization is a generic mechanism for registering callbacks\n that get invoked at transaction completion time. This is mainly used internally\n by the data access support classes for JDBC, Hibernate, JPA, etc when running\n within a JTA transaction: They register resources that are opened within the\n transaction for closing at transaction completion time, allowing e.g. for reuse\n of the same Hibernate Session within the transaction. The same mechanism can\n also be leveraged for custom synchronization needs in an application.\n\n The state of this class is serializable, to allow for serializing the\n transaction strategy along with proxies that carry a transaction interceptor.\n It is up to subclasses if they wish to make their state to be serializable too.\n They should implement the java.io.Serializable marker interface in\n that case, and potentially a private readObject() method (according\n to Java serialization rules) if they need to restore any transient state.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/AbstractPlatformTransactionManager.html
AbstractPlatformTransactionManager.SuspendedResourcesHolder	A										<section class="prog__container">Holder for suspended resources.\n Used internally by suspend and resume.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/AbstractPlatformTransactionManager.SuspendedResourcesHolder.html
AbstractTransactionStatus	A										<section class="prog__container">Abstract base implementation of the\n TransactionStatus interface.\n\n Pre-implements the handling of local rollback-only and completed flags, and\n delegation to an underlying SavepointManager.\n Also offers the option of a holding a savepoint within the transaction.\n\n Does not assume any specific internal transaction handling, such as an\n underlying transaction object, and no transaction synchronization mechanism.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/AbstractTransactionStatus.html
CallbackPreferringPlatformTransactionManager	A										<section class="prog__container">Extension of the PlatformTransactionManager\n interface, exposing a method for executing a given callback within a transaction.\n\n Implementors of this interface automatically express a preference for\n callbacks over programmatic getTransaction, commit\n and rollback calls. Calling code may check whether a given\n transaction manager implements this interface to choose to prepare a\n callback instead of explicit transaction demarcation control.\n\n Spring's TransactionTemplate and\n TransactionInterceptor\n detect and use this PlatformTransactionManager variant automatically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/CallbackPreferringPlatformTransactionManager.html
DefaultTransactionDefinition	A										<section class="prog__container">Default implementation of the TransactionDefinition interface,\n offering bean-style configuration and sensible default values\n (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).\n\n Base class for both TransactionTemplate and\n DefaultTransactionAttribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/DefaultTransactionDefinition.html
DefaultTransactionStatus	A										<section class="prog__container">Default implementation of the TransactionStatus\n interface, used by AbstractPlatformTransactionManager. Based on the concept\n of an underlying "transaction object".\n\n Holds all status information that AbstractPlatformTransactionManager\n needs internally, including a generic transaction object determined by the\n concrete transaction manager implementation.\n\n Supports delegating savepoint-related methods to a transaction object\n that implements the SavepointManager interface.\n\n NOTE: This is not intended for use with other PlatformTransactionManager\n implementations, in particular not for mock transaction managers in testing environments.\n Use the alternative SimpleTransactionStatus class or a mock for the plain\n TransactionStatus interface instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/DefaultTransactionStatus.html
DelegatingTransactionDefinition	A										<section class="prog__container">TransactionDefinition implementation that delegates all calls to a given target\n TransactionDefinition instance. Abstract because it is meant to be subclassed,\n with subclasses overriding specific methods that are not supposed to simply delegate\n to the target instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/DelegatingTransactionDefinition.html
ResourceHolder	A										<section class="prog__container">Generic interface to be implemented by resource holders.\n Allows Spring's transaction infrastructure to introspect\n and reset the holder when necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/ResourceHolder.html
ResourceHolderSupport	A										<section class="prog__container">Convenient base class for resource holders.\n\n Features rollback-only support for nested transactions.\n Can expire after a certain number of seconds or milliseconds,\n to determine transactional timeouts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/ResourceHolderSupport.html
ResourceTransactionManager	A										<section class="prog__container">Extension of the PlatformTransactionManager\n interface, indicating a native resource transaction manager, operating on a single\n target resource. Such transaction managers differ from JTA transaction managers in\n that they do not use XA transaction enlistment for an open number of resources but\n rather focus on leveraging the native power and simplicity of a single target resource.\n\n This interface is mainly used for abstract introspection of a transaction manager,\n giving clients a hint on what kind of transaction manager they have been given\n and on what concrete resource the transaction manager is operating on.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/ResourceTransactionManager.html
SimpleTransactionScope	A										<section class="prog__container">A simple transaction-backed Scope implementation, delegating to\n TransactionSynchronizationManager's resource binding mechanism.\n\n NOTE: Like SimpleThreadScope,\n this transaction scope is not registered by default in common contexts. Instead,\n you need to explicitly assign it to a scope key in your setup, either through\n ConfigurableBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)\n or through a CustomScopeConfigurer bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/SimpleTransactionScope.html
SimpleTransactionStatus	A										<section class="prog__container">A simple TransactionStatus\n implementation.\n\n Derives from AbstractTransactionStatus and adds an explicit\n "newTransaction" flag.\n\n This class is not used by any of Spring's pre-built\n PlatformTransactionManager\n implementations. It is mainly provided as a start for custom transaction\n manager implementations and as a static mock for testing transactional\n code (either as part of a mock PlatformTransactionManager or\n as argument passed into a TransactionCallback to be tested).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/SimpleTransactionStatus.html
SmartTransactionObject	A										<section class="prog__container">Interface to be implemented by transaction objects that are able to\n return an internal rollback-only marker, typically from a another\n transaction that has participated and marked it as rollback-only.\n\n Autodetected by DefaultTransactionStatus, to always return a\n current rollbackOnly flag even if not resulting from the current\n TransactionStatus.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/SmartTransactionObject.html
TransactionCallback	A										<section class="prog__container">Callback interface for transactional code. Used with TransactionTemplate's\n execute method, often as anonymous class within a method implementation.\n\n Typically used to assemble various calls to transaction-unaware data access\n services into a higher-level service method with transaction demarcation. As an\n alternative, consider the use of declarative transaction demarcation (e.g. through\n Spring's Transactional annotation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionCallback.html
TransactionCallbackWithoutResult	A										<section class="prog__container">Simple convenience class for TransactionCallback implementation.\n Allows for implementing a doInTransaction version without result,\n i.e. without the need for a return statement.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionCallbackWithoutResult.html
TransactionOperations	A										<section class="prog__container">Interface specifying basic transaction execution operations.\n Implemented by TransactionTemplate. Not often used directly,\n but a useful option to enhance testability, as it can easily be\n mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionOperations.html
TransactionSynchronization	A										<section class="prog__container">Interface for transaction synchronization callbacks.\n Supported by AbstractPlatformTransactionManager.\n\n TransactionSynchronization implementations can implement the Ordered interface\n to influence their execution order. A synchronization that does not implement the\n Ordered interface is appended to the end of the synchronization chain.\n\n System synchronizations performed by Spring itself use specific order values,\n allowing for fine-grained interaction with their execution order (if necessary).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronization.html
TransactionSynchronizationAdapter	A										<section class="prog__container">Simple TransactionSynchronization adapter containing empty\n method implementations, for easier overriding of single methods.\n\n Also implements the Ordered interface to enable the execution\n order of synchronizations to be controlled declaratively. The default\n order is Ordered.LOWEST_PRECEDENCE, indicating\n late execution; return a lower value for earlier execution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronizationAdapter.html
TransactionSynchronizationManager	A										<section class="prog__container">Central delegate that manages resources and transaction synchronizations per thread.\n To be used by resource management code but not by typical application code.\n\n Supports one resource per key without overwriting, that is, a resource needs\n to be removed before a new one can be set for the same key.\n Supports a list of transaction synchronizations if synchronization is active.\n\n Resource management code should check for thread-bound resources, e.g. JDBC\n Connections or Hibernate Sessions, via getResource. Such code is\n normally not supposed to bind resources to threads, as this is the responsibility\n of transaction managers. A further option is to lazily bind on first use if\n transaction synchronization is active, for performing transactions that span\n an arbitrary number of resources.\n\n Transaction synchronization must be activated and deactivated by a transaction\n manager via initSynchronization() and clearSynchronization().\n This is automatically supported by AbstractPlatformTransactionManager,\n and thus by all standard Spring transaction managers, such as\n JtaTransactionManager and\n DataSourceTransactionManager.\n\n Resource management code should only register synchronizations when this\n manager is active, which can be checked via isSynchronizationActive();\n it should perform immediate resource cleanup else. If transaction synchronization\n isn't active, there is either no current transaction, or the transaction manager\n doesn't support transaction synchronization.\n\n Synchronization is for example used to always return the same resources\n within a JTA transaction, e.g. a JDBC Connection or a Hibernate Session for\n any given DataSource or SessionFactory, respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronizationManager.html
TransactionSynchronizationUtils	A										<section class="prog__container">Utility methods for triggering specific TransactionSynchronization\n callback methods on all currently registered synchronizations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronizationUtils.html
TransactionTemplate	A										<section class="prog__container">Template class that simplifies programmatic transaction demarcation and\n transaction exception handling.\n\n The central method is execute(org.springframework.transaction.support.TransactionCallback<T>), supporting transactional code that\n implements the TransactionCallback interface. This template handles\n the transaction lifecycle and possible exceptions such that neither the\n TransactionCallback implementation nor the calling code needs to explicitly\n handle transactions.\n\n Typical usage: Allows for writing low-level data access objects that use\n resources such as JDBC DataSources but are not transaction-aware themselves.\n Instead, they can implicitly participate in transactions handled by higher-level\n application services utilizing this class, making calls to the low-level\n services via an inner-class callback object.\n\n Can be used within a service implementation via direct instantiation with\n a transaction manager reference, or get prepared in an application context\n and passed to services as bean reference. Note: The transaction manager should\n always be configured as bean in the application context: in the first case given\n to the service directly, in the second case given to the prepared template.\n\n Supports setting the propagation behavior and the isolation level by name,\n for convenient configuration in context definitions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionTemplate.html
ExtendedModelMap	A										<section class="prog__container">Subclass of ModelMap that implements the Model interface.\n Java 5 specific like the Model interface itself.\n\n This is an implementation class exposed to handler methods by Spring MVC, typically via\n a declaration of the Model interface. There is no need to\n build it within user code; a plain ModelMap or even a just\n a regular Map with String keys will be good enough to return a user model.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/ExtendedModelMap.html
Model	A										<section class="prog__container">Java-5-specific interface that defines a holder for model attributes.\n Primarily designed for adding attributes to the model.\n Allows for accessing the overall model as a java.util.Map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/Model.html
ModelMap	A										<section class="prog__container">Implementation of Map for use when building model data for use\n with UI tools. Supports chained calls and generation of model attribute names.\n\n This class serves as generic model holder for both Servlet and Portlet MVC,\n but is not tied to either of those. Check out the Model interface for\n a Java-5-based interface variant that serves the same purpose.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/ModelMap.html
HierarchicalThemeSource	A										<section class="prog__container">Sub-interface of ThemeSource to be implemented by objects that\n can resolve theme messages hierarchically.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/HierarchicalThemeSource.html
Theme	A										<section class="prog__container">A Theme can resolve theme-specific messages, codes, file paths, etcetera\n (e.g. CSS and image files in a web environment).\n The exposed MessageSource supports\n theme-specific parameterization and internationalization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/Theme.html
ThemeSource	A										<section class="prog__container">Interface to be implemented by objects that can resolve Themes.\n This enables parameterization and internationalization of messages\n for a given 'theme'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/ThemeSource.html
DelegatingThemeSource	A										<section class="prog__container">Empty ThemeSource that delegates all calls to the parent ThemeSource.\n If no parent is available, it simply won't resolve any theme.\n\n Used as placeholder by UiApplicationContextUtils, if a context doesn't\n define its own ThemeSource. Not intended for direct use in applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/support/DelegatingThemeSource.html
ResourceBundleThemeSource	A										<section class="prog__container">ThemeSource implementation that looks up an individual\n ResourceBundle per theme. The theme name gets\n interpreted as ResourceBundle basename, supporting a common\n basename prefix for all themes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/support/ResourceBundleThemeSource.html
SimpleTheme	A										<section class="prog__container">Default Theme implementation, wrapping a name and an\n underlying MessageSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/support/SimpleTheme.html
UiApplicationContextUtils	A										<section class="prog__container">Utility class for UI application context implementations.\n Provides support for a special bean named "themeSource",\n of type ThemeSource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/context/support/UiApplicationContextUtils.html
FreeMarkerConfigurationFactory	A										<section class="prog__container">Factory that configures a FreeMarker Configuration. Can be used standalone, but\n typically you will either use FreeMarkerConfigurationFactoryBean for preparing a\n Configuration as bean reference, or FreeMarkerConfigurer for web views.\n\n The optional "configLocation" property sets the location of a FreeMarker\n properties file, within the current application. FreeMarker properties can be\n overridden via "freemarkerSettings". All of these properties will be set by\n calling FreeMarker's Configuration.setSettings() method and are\n subject to constraints set by FreeMarker.\n\n The "freemarkerVariables" property can be used to specify a Map of\n shared variables that will be applied to the Configuration via the\n setAllSharedVariables() method. Like setSettings(),\n these entries are subject to FreeMarker constraints.\n\n The simplest way to use this class is to specify a "templateLoaderPath";\n FreeMarker does not need any further configuration then.\n\n Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.html
FreeMarkerConfigurationFactoryBean	A										<section class="prog__container">Factory bean that creates a FreeMarker Configuration and provides it as\n bean reference. This bean is intended for any kind of usage of FreeMarker\n in application code, e.g. for generating email content. For web views,\n FreeMarkerConfigurer is used to set up a FreeMarkerConfigurationFactory.\n\n The simplest way to use this class is to specify just a "templateLoaderPath";\n you do not need any further configuration then. For example, in a web\n application context:\n\n  <bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">\n   <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>\n </bean>\n\n See the base class FreeMarkerConfigurationFactory for configuration details.\n\n Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/freemarker/FreeMarkerConfigurationFactoryBean.html
FreeMarkerTemplateUtils	A										<section class="prog__container">Utility class for working with FreeMarker.\n Provides convenience methods to process a FreeMarker template with a model.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/freemarker/FreeMarkerTemplateUtils.html
SpringTemplateLoader	A										<section class="prog__container">FreeMarker TemplateLoader adapter that loads via a Spring ResourceLoader.\n Used by FreeMarkerConfigurationFactory for any resource loader path that cannot\n be resolved to a File.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/freemarker/SpringTemplateLoader.html
JasperReportsUtils	A										<section class="prog__container">Utility methods for working with JasperReports. Provides a set of convenience\n methods for generating reports in a CSV, HTML, PDF and XLS formats.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which has been deprecated in early 2014.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/jasperreports/JasperReportsUtils.html
SpringResourceLoader	A										<section class="prog__container">Velocity ResourceLoader adapter that loads via a Spring ResourceLoader.\n Used by VelocityEngineFactory for any resource loader path that cannot\n be resolved to a java.io.File.\n\n Note that this loader does not allow for modification detection:\n Use Velocity's default FileResourceLoader for java.io.File\n resources.\n\n Expects "spring.resource.loader" and "spring.resource.loader.path"\n application attributes in the Velocity runtime: the former of type\n org.springframework.core.io.ResourceLoader, the latter a String.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/velocity/SpringResourceLoader.html
VelocityEngineFactory	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/velocity/VelocityEngineFactory.html
VelocityEngineFactoryBean	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/velocity/VelocityEngineFactoryBean.html
VelocityEngineUtils	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/velocity/VelocityEngineUtils.html
AlternativeJdkIdGenerator	A										<section class="prog__container">An IdGenerator that uses SecureRandom for the initial seed and\n Random thereafter, instead of calling UUID.randomUUID() every\n time as JdkIdGenerator does.\n This provides a better balance between securely random ids and performance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AlternativeJdkIdGenerator.html
AntPathMatcher.AntPathStringMatcher	A										<section class="prog__container">Tests whether or not a string matches against a pattern via a Pattern.\n The pattern may contain special characters: '*' means zero or more characters; '?' means one and\n only one character; '{' and '}' indicate a URI template pattern. For example /users/{user}.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.AntPathStringMatcher.html
AntPathMatcher.AntPatternComparator	A										<section class="prog__container">The default Comparator implementation returned by\n AntPathMatcher.getPatternComparator(String).\n In order, the most "generic" pattern is determined by the following:\n \nif it's null or a capture all pattern (i.e. it is equal to "/**")\nif the other pattern is an actual match\nif it's a catch-all pattern (i.e. it ends with "**"\nif it's got more "*" than the other pattern\nif it's got more "{foo}" than the other pattern\nif it's shorter than the other pattern\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.AntPatternComparator.html
AntPathMatcher	A										<section class="prog__container">PathMatcher implementation for Ant-style path patterns.\n\n Part of this mapping code has been kindly borrowed from Apache Ant.\n\n The mapping matches URLs using the following rules:\n\n? matches one character\n* matches zero or more characters\n** matches zero or more directories in a path\n{spring:[a-z]+} matches the regexp [a-z]+ as a path variable named "spring"\n\nExamples\n\ncom/t?st.jsp — matches com/test.jsp but also\n com/tast.jsp or com/txst.jsp\ncom/*.jsp — matches all .jsp files in the\n com directory\ncom/**/test.jsp — matches all test.jsp\n files underneath the com path\norg/springframework/**/*.jsp — matches all\n .jsp files underneath the org/springframework path\norg/**/servlet/bla.jsp — matches\n org/springframework/servlet/bla.jsp but also\n org/springframework/testing/servlet/bla.jsp and org/servlet/bla.jsp\ncom/{filename:\\w+}.jsp will match com/test.jsp and assign the value test\n to the filename variable\n\nNote: a pattern and a path must both be absolute or must\n both be relative in order for the two to match. Therefore it is recommended\n that users of this implementation to sanitize patterns in order to prefix\n them with "/" as it makes sense in the context in which they're used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html
Assert	A										<section class="prog__container">Assertion utility class that assists in validating arguments.\n\n Useful for identifying programmer errors early and clearly at runtime.\n\n For example, if the contract of a public method states it does not\n allow null arguments, Assert can be used to validate that\n contract. Doing this clearly indicates a contract violation when it\n occurs and protects the class's invariants.\n\n Typically used to validate method arguments rather than configuration\n properties, to check for cases that are usually programmer errors rather\n than configuration errors. In contrast to configuration initialization\n code, there is usually no point in falling back to defaults in such methods.\n\n This class is similar to JUnit's assertion library. If an argument value is\n deemed invalid, an IllegalArgumentException is thrown (typically).\n For example:\n\n \n Assert.notNull(clazz, "The class must not be null");\n Assert.isTrue(i > 0, "The value must be greater than zero");\nMainly for internal use within the framework; consider\n Apache's Commons Lang\n for a more comprehensive suite of String utilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/Assert.html
AutoPopulatingList.ElementFactory	A										<section class="prog__container">Factory interface for creating elements for an index-based access\n data structure such as a List.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AutoPopulatingList.ElementFactory.html
AutoPopulatingList.ElementInstantiationException	A										<section class="prog__container">Exception to be thrown from ElementFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AutoPopulatingList.ElementInstantiationException.html
AutoPopulatingList	A										<section class="prog__container">Simple List wrapper class that allows for elements to be\n automatically populated as they are requested. This is particularly\n useful for data binding to Lists, allowing for elements\n to be created and added to the List in a "just in time" fashion.\n\n Note: This class is not thread-safe. To create a thread-safe version,\n use the Collections.synchronizedList(java.util.List<T>) utility methods.\n\n Inspired by LazyList from Commons Collections.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AutoPopulatingList.html
Base64Utils	A										<section class="prog__container">A simple utility class for Base64 encoding and decoding.\n\n Adapts to either Java 8's Base64 class or Apache Commons Codec's\n Base64 class. With neither Java 8 nor Commons\n Codec present, encode(byte[])/decode(byte[]) calls will throw an IllegalStateException.\n However, as of Spring 4.2, encodeToString(byte[]) and decodeFromString(java.lang.String) will\n nevertheless work since they can delegate to the JAXB DatatypeConverter as a fallback.\n However, this does not apply when using the "UrlSafe" methods for RFC 4648 "URL and\n Filename Safe Alphabet"; a delegate is required.\n\n Note: Apache Commons Codec does not add padding (=) when encoding\n with the URL and Filename Safe Alphabet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/Base64Utils.html
ClassUtils	A										<section class="prog__container">Miscellaneous class utility methods.\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ClassUtils.html
CollectionUtils	A										<section class="prog__container">Miscellaneous collection utility methods.\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/CollectionUtils.html
CommonsLogWriter	A										<section class="prog__container">java.io.Writer adapter for a Commons Logging Log.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/CommonsLogWriter.html
CompositeIterator	A										<section class="prog__container">Composite iterator that combines multiple other iterators,\n as registered via add(Iterator).\n\n This implementation maintains a linked set of iterators\n which are invoked in sequence until all iterators are exhausted.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/CompositeIterator.html
ConcurrencyThrottleSupport	A										<section class="prog__container">Support class for throttling concurrent access to a specific resource.\n\n Designed for use as a base class, with the subclass invoking\n the beforeAccess() and afterAccess() methods at\n appropriate points of its workflow. Note that afterAccess\n should usually be called in a finally block!\n\n The default concurrency limit of this support class is -1\n ("unbounded concurrency"). Subclasses may override this default;\n check the javadoc of the concrete class that you're using.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrencyThrottleSupport.html
ConcurrentReferenceHashMap.Entry	A										<section class="prog__container">A single map entry.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrentReferenceHashMap.Entry.html
ConcurrentReferenceHashMap	A										<section class="prog__container">A ConcurrentHashMap that uses soft or\n weak references for both keys and values.\n\n This class can be used as an alternative to\n Collections.synchronizedMap(new WeakHashMap<K, Reference<V>>()) in order to\n support better performance when accessed concurrently. This implementation follows the\n same design constraints as ConcurrentHashMap with the exception that\n null values and null keys are supported.\n\n NOTE: The use of references means that there is no guarantee that items\n placed into the map will be subsequently available. The garbage collector may discard\n references at any time, so it may appear that an unknown thread is silently removing\n entries.\n\n If not explicitly specified, this implementation will use\n soft entry references.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrentReferenceHashMap.html
ConcurrentReferenceHashMap.Reference	A										<section class="prog__container">A reference to an ConcurrentReferenceHashMap.Entry contained in the map. Implementations are usually\n wrappers around specific Java reference implementations (e.g., SoftReference).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrentReferenceHashMap.Reference.html
ConcurrentReferenceHashMap.ReferenceManager	A										<section class="prog__container">Strategy class used to manage ConcurrentReferenceHashMap.References. This class can be overridden if\n alternative reference types need to be supported.</section>	No URL found
ConcurrentReferenceHashMap.ReferenceType	A										<section class="prog__container">Various reference types supported by this map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrentReferenceHashMap.ReferenceType.html
ConcurrentReferenceHashMap.Restructure	A										<section class="prog__container">The types of restructuring that can be performed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ConcurrentReferenceHashMap.Restructure.html
ConcurrentReferenceHashMap.Segment	A										<section class="prog__container">A single segment used to divide the map to allow better concurrent performance.</section>	No URL found
CustomizableThreadCreator	A										<section class="prog__container">Simple customizable helper class for creating new Thread instances.\n Provides various bean properties: thread name prefix, thread priority, etc.\n\n Serves as base class for thread factories such as\n CustomizableThreadFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/CustomizableThreadCreator.html
DefaultPropertiesPersister	A										<section class="prog__container">Default implementation of the PropertiesPersister interface.\n Follows the native parsing of java.util.Properties.\n\n Allows for reading from any Reader and writing to any Writer, for example\n to specify a charset for a properties file. This is a capability that standard\n java.util.Properties unfortunately lacked up until JDK 5:\n You were only able to load files using the ISO-8859-1 charset there.\n\n Loading from and storing to a stream delegates to Properties.load\n and Properties.store, respectively, to be fully compatible with\n the Unicode conversion as implemented by the JDK Properties class. As of JDK 6,\n Properties.load/store will also be used for readers/writers,\n effectively turning this class into a plain backwards compatibility adapter.\n\n The persistence code that works with Reader/Writer follows the JDK's parsing\n strategy but does not implement Unicode conversion, because the Reader/Writer\n should already apply proper decoding/encoding of characters. If you use prefer\n to escape unicode characters in your properties files, do not specify\n an encoding for a Reader/Writer (like ReloadableResourceBundleMessageSource's\n "defaultEncoding" and "fileEncodings" properties).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/DefaultPropertiesPersister.html
DigestUtils	A										<section class="prog__container">Miscellaneous methods for calculating digests.\n\n Mainly for internal use within the framework; consider\n Apache Commons Codec\n for a more comprehensive suite of digest utilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/DigestUtils.html
ErrorHandler	A										<section class="prog__container">A strategy for handling errors. This is especially useful for handling\n errors that occur during asynchronous execution of tasks that have been\n submitted to a TaskScheduler. In such cases, it may not be possible to\n throw the error to the original caller.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ErrorHandler.html
ExceptionTypeFilter	A										<section class="prog__container">An InstanceFilter implementation that handles exception types. A type\n will match against a given candidate if it is assignable to that candidate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ExceptionTypeFilter.html
FastByteArrayOutputStream	A										<section class="prog__container">A speedy alternative to ByteArrayOutputStream. Note that\n this variant does not extend ByteArrayOutputStream, unlike\n its sibling ResizableByteArrayOutputStream.\n\n Unlike ByteArrayOutputStream, this implementation is backed\n by a LinkedList of byte[] instead of 1 constantly\n resizing byte[]. It does not copy buffers when it gets expanded.\n\n The initial buffer is only created when the stream is first written.\n There is also no copying of the internal buffer if its contents is extracted\n with the writeTo(OutputStream) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/FastByteArrayOutputStream.html
FileCopyUtils	A										<section class="prog__container">Simple utility methods for file and stream copying. All copy methods use a block size\n of 4096 bytes, and close all affected streams when done. A variation of the copy\n methods from this class that leave streams open can be found in StreamUtils.\n\n Mainly for use within the framework, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/FileCopyUtils.html
FileSystemUtils	A										<section class="prog__container">Utility methods for working with the file system.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/FileSystemUtils.html
IdGenerator	A										<section class="prog__container">Contract for generating universally unique identifiers (UUIDs).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/IdGenerator.html
InstanceFilter	A										<section class="prog__container">A simple instance filter that checks if a given instance match based on\n a collection of includes and excludes element.\n\n Subclasses may want to override match(Object, Object) to provide\n a custom matching algorithm.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/InstanceFilter.html
InvalidMimeTypeException	A										<section class="prog__container">Exception thrown from MimeTypeUtils.parseMimeType(String) in case of\n encountering an invalid content type specification String.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/InvalidMimeTypeException.html
JdkIdGenerator	A										<section class="prog__container">An IdGenerator that calls UUID.randomUUID().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/JdkIdGenerator.html
LinkedCaseInsensitiveMap	A										<section class="prog__container">LinkedHashMap variant that stores String keys in a case-insensitive\n manner, for example for key-based access in a results table.\n\n Preserves the original order as well as the original casing of keys,\n while allowing for contains, get and remove calls with any case of key.\n\n Does not support null keys.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/LinkedCaseInsensitiveMap.html
LinkedMultiValueMap	A										<section class="prog__container">Simple implementation of MultiValueMap that wraps a LinkedHashMap,\n storing multiple values in a LinkedList.\n\n This Map implementation is generally not thread-safe. It is primarily designed\n for data structures exposed from request objects, for use in a single thread only.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/LinkedMultiValueMap.html
Log4jConfigurer	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of Apache Log4j 2\n (following Apache's EOL declaration for log4j 1.x)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/Log4jConfigurer.html
MethodInvoker	A										<section class="prog__container">Helper class that allows for specifying a method to invoke in a declarative\n fashion, be it static or non-static.\n\n Usage: Specify "targetClass"/"targetMethod" or "targetObject"/"targetMethod",\n optionally specify arguments, prepare the invoker. Afterwards, you may\n invoke the method any number of times, obtaining the invocation result.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/MethodInvoker.html
MimeType	A										<section class="prog__container">Represents a MIME Type, as originally defined in RFC 2046 and subsequently used in\n other Internet protocols including HTTP.\n\n This class, however, does not contain support for the q-parameters used\n in HTTP content negotiation. Those can be found in the sub-class\n org.springframework.http.MediaType in the spring-web module.\n\n Consists of a type and a subtype.\n Also has functionality to parse media types from a string using\n valueOf(String). For more parsing options see MimeTypeUtils.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/MimeType.html
MimeTypeUtils	A										<section class="prog__container">Miscellaneous MimeType utility methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/MimeTypeUtils.html
MultiValueMap	A										<section class="prog__container">Extension of the Map interface that stores multiple values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/MultiValueMap.html
NumberUtils	A										<section class="prog__container">Miscellaneous utility methods for number conversion and parsing.\n Mainly for internal use within the framework; consider Apache's\n Commons Lang for a more comprehensive suite of number utilities.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/NumberUtils.html
ObjectUtils	A										<section class="prog__container">Miscellaneous object utility methods.\n\n Mainly for internal use within the framework.\n\n Thanks to Alex Ruiz for contributing several enhancements to this class!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ObjectUtils.html
PathMatcher	A										<section class="prog__container">Strategy interface for String-based path matching.\n\n Used by PathMatchingResourcePatternResolver,\n AbstractUrlHandlerMapping,\n PropertiesMethodNameResolver,\n and WebContentInterceptor.\n\n The default implementation is AntPathMatcher, supporting the\n Ant-style pattern syntax.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/PathMatcher.html
PatternMatchUtils	A										<section class="prog__container">Utility methods for simple pattern matching, in particular for\n Spring's typical "xxx*", "*xxx" and "*xxx*" pattern styles.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/PatternMatchUtils.html
PropertiesPersister	A										<section class="prog__container">Strategy interface for persisting java.util.Properties,\n allowing for pluggable parsing strategies.\n\n The default implementation is DefaultPropertiesPersister,\n providing the native parsing of java.util.Properties,\n but allowing for reading from any Reader and writing to any Writer\n (which allows to specify an encoding for a properties file).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/PropertiesPersister.html
PropertyPlaceholderHelper	A										<section class="prog__container">Utility class for working with Strings that have placeholder values in them. A placeholder takes the form\n ${name}. Using PropertyPlaceholderHelper these placeholders can be substituted for\n user-supplied values.  Values for substitution can be supplied using a Properties instance or\n using a PropertyPlaceholderHelper.PlaceholderResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/PropertyPlaceholderHelper.html
PropertyPlaceholderHelper.PlaceholderResolver	A										<section class="prog__container">Strategy interface used to resolve replacement values for placeholders contained in Strings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/PropertyPlaceholderHelper.PlaceholderResolver.html
ReflectionUtils.FieldCallback	A										<section class="prog__container">Callback interface invoked on each field in the hierarchy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ReflectionUtils.FieldCallback.html
ReflectionUtils.FieldFilter	A										<section class="prog__container">Callback optionally used to filter fields to be operated on by a field callback.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ReflectionUtils.FieldFilter.html
ReflectionUtils	A										<section class="prog__container">Simple utility class for working with the reflection API and handling\n reflection exceptions.\n\n Only intended for internal use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ReflectionUtils.html
ReflectionUtils.MethodCallback	A										<section class="prog__container">Action to take on each method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ReflectionUtils.MethodCallback.html
ReflectionUtils.MethodFilter	A										<section class="prog__container">Callback optionally used to filter methods to be operated on by a method callback.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ReflectionUtils.MethodFilter.html
ResizableByteArrayOutputStream	A										<section class="prog__container">An extension of ByteArrayOutputStream that:\n \nhas public grow(int)\n and resize(int) methods\n to get more control over the size of the internal buffer\nhas a higher initial capacity (256) by default\n\nAs of 4.2, this class has been superseded by FastByteArrayOutputStream\n for Spring's internal use where no assignability to ByteArrayOutputStream\n is needed (since FastByteArrayOutputStream is more efficient with buffer\n resize management but doesn't extend the standard ByteArrayOutputStream).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ResizableByteArrayOutputStream.html
ResourceUtils	A										<section class="prog__container">Utility methods for resolving resource locations to files in the\n file system. Mainly for internal use within the framework.\n\n Consider using Spring's Resource abstraction in the core package\n for handling all kinds of file resources in a uniform manner.\n ResourceLoader's getResource()\n method can resolve any location to a Resource\n object, which in turn allows one to obtain a java.io.File in the\n file system through its getFile() method.\n\n The main reason for these utility methods for resource location handling\n is to support Log4jConfigurer, which must be able to resolve\n resource locations before the logging system has been initialized.\n Spring's Resource abstraction in the core package, on the other hand,\n already expects the logging system to be available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/ResourceUtils.html
SerializationUtils	A										<section class="prog__container">Static utilities for serialization and deserialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/SerializationUtils.html
SimpleIdGenerator	A										<section class="prog__container">A simple IdGenerator that starts at 1 and increments by 1 with each call.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/SimpleIdGenerator.html
SocketUtils	A										<section class="prog__container">Simple utility methods for working with network sockets — for example,\n for finding available ports on localhost.\n\n Within this class, a TCP port refers to a port for a ServerSocket;\n whereas, a UDP port refers to a port for a DatagramSocket.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/SocketUtils.html
StopWatch	A										<section class="prog__container">Simple stop watch, allowing for timing of a number of tasks,\n exposing total running time and running time for each named task.\n\n Conceals use of System.currentTimeMillis(), improving the\n readability of application code and reducing the likelihood of calculation errors.\n\n Note that this object is not designed to be thread-safe and does not\n use synchronization.\n\n This class is normally used to verify performance during proof-of-concepts\n and in development, rather than as part of production applications.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StopWatch.html
StopWatch.TaskInfo	A										<section class="prog__container">Inner class to hold data about one task executed within the stop watch.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StopWatch.TaskInfo.html
StreamUtils	A										<section class="prog__container">Simple utility methods for dealing with streams. The copy methods of this class are\n similar to those defined in FileCopyUtils except that all affected streams are\n left open when done. All copy methods use a block size of 4096 bytes.\n\n Mainly for use within the framework, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StreamUtils.html
StringUtils	A										<section class="prog__container">Miscellaneous String utility methods.\n\n Mainly for internal use within the framework; consider\n Apache's Commons Lang\n for a more comprehensive suite of String utilities.\n\n This class delivers some simple functionality that should really be\n provided by the core Java String and StringBuilder\n classes. It also provides easy-to-use methods to convert between\n delimited strings, such as CSV strings, and collections and arrays.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StringUtils.html
StringValueResolver	A										<section class="prog__container">Simple strategy interface for resolving a String value.\n Used by ConfigurableBeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StringValueResolver.html
SystemPropertyUtils	A										<section class="prog__container">Helper class for resolving placeholders in texts. Usually applied to file paths.\n\n A text may contain ${...} placeholders, to be resolved as system properties:\n e.g. ${user.dir}. Default values can be supplied using the ":" separator\n between key and value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/SystemPropertyUtils.html
TypeUtils	A										<section class="prog__container">Utility to work with Java 5 generic type parameters.\n Mainly for internal use within the framework.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/TypeUtils.html
WeakReferenceMonitor	A										<section class="prog__container">Track references to arbitrary objects using proxy and weak references. To\n monitor a handle, one should call monitor(Object, ReleaseListener),\n with the given handle object usually being a holder that uses the target\n object underneath, and the release listener performing cleanup of the\n target object once the handle is not strongly referenced anymore.\n\n When a given handle becomes weakly reachable, the specified listener\n will be called by a background thread. This thread will only be started\n lazily and will be stopped once no handles are registered for monitoring\n anymore, to be restarted if further handles are added.\n\n Thanks to Tomasz Wysocki for the suggestion and the original\n implementation of this class!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/WeakReferenceMonitor.html
WeakReferenceMonitor.ReleaseListener	A										<section class="prog__container">Listener that is notified when the handle is being released.\n To be implemented by users of this reference monitor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/WeakReferenceMonitor.ReleaseListener.html
BackOff	A										<section class="prog__container">Provide a BackOffExecution that indicates the rate at which\n an operation should be retried.\n\n Users of this interface are expected to use it like this:\n\n \n BackOffExecution exec = backOff.start();\n\n // In the operation recovery/retry loop:\n long waitInterval = exec.nextBackOff();\n if (waitInterval == BackOffExecution.STOP) {\n     // do not retry operation\n }\n else {\n     // sleep, e.g. Thread.sleep(waitInterval)\n     // retry operation\n }\n }\n\n Once the underlying operation has completed successfully,\n the execution instance can be simply discarded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/backoff/BackOff.html
BackOffExecution	A										<section class="prog__container">Represent a particular back-off execution.\n\n Implementations do not need to be thread safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/backoff/BackOffExecution.html
ExponentialBackOff	A										<section class="prog__container">Implementation of BackOff that increases the back off period for each\n retry attempt. When the interval has reached the max interval, it is no longer increased. Stops retrying once the\n max elapsed time has been reached.\n\n Example: The default interval is 2000L ms,\n the default multiplier is 1.5, and the default max\n interval is 30000L. For 10 attempts the sequence will be\n as follows:\n\n \n request#     back off\n\n  1              2000\n  2              3000\n  3              4500\n  4              6750\n  5             10125\n  6             15187\n  7             22780\n  8             30000\n  9             30000\n 10             30000\n \nNote that the default max elapsed time is Long.MAX_VALUE. Use\n setMaxElapsedTime(long) to limit the maximum length of time\n that an instance should accumulate before returning\n BackOffExecution.STOP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/backoff/ExponentialBackOff.html
FixedBackOff	A										<section class="prog__container">A simple BackOff implementation that provides a fixed interval\n between two attempts and a maximum number of retries.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/backoff/FixedBackOff.html
BooleanComparator	A										<section class="prog__container">A Comparator for Boolean objects that can sort either true or false first.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/comparator/BooleanComparator.html
CompoundComparator	A										<section class="prog__container">A comparator that chains a sequence of one or more Comparators.\n\n A compound comparator calls each Comparator in sequence until a single\n Comparator returns a non-zero result, or the comparators are exhausted and\n zero is returned.\n\n This facilitates in-memory sorting similar to multi-column sorting in SQL.\n The order of any single Comparator in the list can also be reversed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/comparator/CompoundComparator.html
InstanceComparator	A										<section class="prog__container">Compares objects based on an arbitrary class order. Allows objects to be sorted based\n on the types of class that they inherit, for example: this comparator can be used to\n sort a list Numbers such that Longs occur before Integers.\n\n Only the specified instanceOrder classes are considered during comparison.\n If two objects are both instances of the ordered type this comparator will return a\n 0. Consider combining with a CompoundComparator if additional sorting\n is required.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/comparator/InstanceComparator.html
InvertibleComparator	A										<section class="prog__container">A decorator for a comparator, with an "ascending" flag denoting\n whether comparison results should be treated in forward (standard\n ascending) order or flipped for reverse (descending) order.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/comparator/InvertibleComparator.html
NullSafeComparator	A										<section class="prog__container">A Comparator that will safely compare nulls to be lower or higher than\n other objects. Can decorate a given Comparator or work on Comparables.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/comparator/NullSafeComparator.html
CompletableToListenableFutureAdapter	A										<section class="prog__container">Adapts a CompletableFuture into a ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.html
FailureCallback	A										<section class="prog__container">Failure callback for a ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/FailureCallback.html
FutureAdapter	A										<section class="prog__container">Abstract class that adapts a Future parameterized over S into a Future\n parameterized over T. All methods are delegated to the adaptee, where get()\n and get(long, TimeUnit) call adapt(Object) on the adaptee's result.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/FutureAdapter.html
ListenableFuture	A										<section class="prog__container">Extend Future with the capability to accept completion callbacks.\n If the future has completed when the callback is added, the callback is\n triggered immediately.\n Inspired by com.google.common.util.concurrent.ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html
ListenableFutureAdapter	A										<section class="prog__container">Abstract class that adapts a ListenableFuture parameterized over S into a\n ListenableFuture parameterized over T. All methods are delegated to the\n adaptee, where FutureAdapter.get(), FutureAdapter.get(long, java.util.concurrent.TimeUnit),\n and SuccessCallback.onSuccess(Object) call FutureAdapter.adapt(Object)\n on the adaptee's result.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFutureAdapter.html
ListenableFutureCallback	A										<section class="prog__container">Callback mechanism for the outcome, success or failure, from a\n ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFutureCallback.html
ListenableFutureCallbackRegistry	A										<section class="prog__container">Helper class for ListenableFuture implementations that maintains a\n of success and failure callbacks and helps to notify them.\n\n Inspired by com.google.common.util.concurrent.ExecutionList.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.html
ListenableFutureTask	A										<section class="prog__container">Extension of FutureTask that implements ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFutureTask.html
SettableListenableFuture	A										<section class="prog__container">A ListenableFuture\n whose value can be set via set(Object) or\n setException(Throwable). It may also be cancelled.\n\n Inspired by com.google.common.util.concurrent.SettableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/SettableListenableFuture.html
SuccessCallback	A										<section class="prog__container">Success callback for a ListenableFuture.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/concurrent/SuccessCallback.html
DomUtils	A										<section class="prog__container">Convenience methods for working with the DOM API,\n in particular for working with DOM Nodes and DOM Elements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/DomUtils.html
SimpleNamespaceContext	A										<section class="prog__container">Simple javax.xml.namespace.NamespaceContext implementation.\n Follows the standard NamespaceContext contract, and is loadable\n via a java.util.Map or java.util.Properties object</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/SimpleNamespaceContext.html
SimpleSaxErrorHandler	A										<section class="prog__container">Simple org.xml.sax.ErrorHandler implementation:\n logs warnings using the given Commons Logging logger instance,\n and rethrows errors to discontinue the XML transformation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/SimpleSaxErrorHandler.html
SimpleTransformErrorListener	A										<section class="prog__container">Simple javax.xml.transform.ErrorListener implementation:\n logs warnings using the given Commons Logging logger instance,\n and rethrows errors to discontinue the XML transformation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/SimpleTransformErrorListener.html
StaxUtils	A										<section class="prog__container">Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3 compatibility;\n as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher.\n\n In particular, methods for using StAX (javax.xml.stream) in combination with the TrAX API\n (javax.xml.transform), and converting StAX readers/writers into SAX readers/handlers and vice-versa.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/StaxUtils.html
TransformerUtils	A										<section class="prog__container">Contains common behavior relating to Transformers, and the\n javax.xml.transform package in general.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/TransformerUtils.html
XmlValidationModeDetector	A										<section class="prog__container">Detects whether an XML stream is using DTD- or XSD-based validation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/xml/XmlValidationModeDetector.html
AbstractBindingResult	A										<section class="prog__container">Abstract implementation of the BindingResult interface and\n its super-interface Errors. Encapsulates common management of\n ObjectErrors and FieldErrors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/AbstractBindingResult.html
AbstractErrors	A										<section class="prog__container">Abstract implementation of the Errors interface. Provides common\n access to evaluated errors; however, does not define concrete management\n of ObjectErrors and FieldErrors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/AbstractErrors.html
AbstractPropertyBindingResult	A										<section class="prog__container">Abstract base class for BindingResult implementations that work with\n Spring's PropertyAccessor mechanism.\n Pre-implements field access through delegation to the corresponding\n PropertyAccessor methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/AbstractPropertyBindingResult.html
BeanPropertyBindingResult	A										<section class="prog__container">Default implementation of the Errors and BindingResult\n interfaces, for the registration and evaluation of binding errors on\n JavaBean objects.\n\n Performs standard JavaBean property access, also supporting nested\n properties. Normally, application code will work with the\n Errors interface or the BindingResult interface.\n A DataBinder returns its BindingResult via\n DataBinder.getBindingResult().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BeanPropertyBindingResult.html
BindException	A										<section class="prog__container">Thrown when binding errors are considered fatal. Implements the\n BindingResult interface (and its super-interface Errors)\n to allow for the direct analysis of binding errors.\n\n As of Spring 2.0, this is a special-purpose class. Normally,\n application code will work with the BindingResult interface,\n or with a DataBinder that in turn exposes a BindingResult via\n DataBinder.getBindingResult().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindException.html
BindingErrorProcessor	A										<section class="prog__container">Strategy for processing DataBinder's missing field errors,\n and for translating a PropertyAccessException to a\n FieldError.\n\n The error processor is pluggable so you can treat errors differently\n if you want to. A default implementation is provided for typical needs.\n\n Note: As of Spring 2.0, this interface operates on a given BindingResult,\n to be compatible with any binding strategy (bean property, direct field access, etc).\n It can still receive a BindException as argument (since a BindException implements\n the BindingResult interface as well) but no longer operates on it directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingErrorProcessor.html
BindingResult	A										<section class="prog__container">General interface that represents binding results. Extends the\n interface for error registration capabilities,\n allowing for a Validator to be applied, and adds\n binding-specific analysis and model building.\n\n Serves as result holder for a DataBinder, obtained via\n the DataBinder.getBindingResult() method. BindingResult\n implementations can also be used directly, for example to invoke\n a Validator on it (e.g. as part of a unit test).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingResult.html
BindingResultUtils	A										<section class="prog__container">Convenience methods for looking up BindingResults in a model Map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingResultUtils.html
DataBinder	A										<section class="prog__container">Binder that allows for setting property values onto a target object,\n including support for validation and binding result analysis.\n The binding process can be customized through specifying allowed fields,\n required fields, custom editors, etc.\n\n Note that there are potential security implications in failing to set an array\n of allowed fields. In the case of HTTP form POST data for example, malicious clients\n can attempt to subvert an application by supplying values for fields or properties\n that do not exist on the form. In some cases this could lead to illegal data being\n set on command objects or their nested objects. For this reason, it is\n highly recommended to specify the allowedFields property\n on the DataBinder.\n\n The binding results can be examined via the BindingResult interface,\n extending the Errors interface: see the getBindingResult() method.\n Missing fields and property access exceptions will be converted to FieldErrors,\n collected in the Errors instance, using the following error codes:\n\n \nMissing field error: "required"\n Type mismatch error: "typeMismatch"\n Method invocation error: "methodInvocation"\n \nBy default, binding errors get resolved through the BindingErrorProcessor\n strategy, processing for missing fields and property access exceptions: see the\n setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor) method. You can override the default strategy\n if needed, for example to generate different error codes.\n\n Custom validation errors can be added afterwards. You will typically want to resolve\n such error codes into proper user-visible error messages; this can be achieved through\n resolving each error via a MessageSource, which is\n able to resolve an ObjectError/FieldError through its\n MessageSource.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)\n method. The list of message codes can be customized through the MessageCodesResolver\n strategy: see the setMessageCodesResolver(org.springframework.validation.MessageCodesResolver) method. DefaultMessageCodesResolver's\n javadoc states details on the default resolution rules.\n\n This generic data binder can be used in any kind of environment.\n It is typically used by Spring web MVC controllers, via the web-specific\n subclasses ServletRequestDataBinder\n and PortletRequestDataBinder.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/DataBinder.html
DefaultBindingErrorProcessor	A										<section class="prog__container">Default BindingErrorProcessor implementation.\n\n Uses the "required" error code and the field name to resolve message codes\n for a missing field error.\n\n Creates a FieldError for each PropertyAccessException\n given, using the PropertyAccessException's error code ("typeMismatch",\n "methodInvocation") for resolving message codes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/DefaultBindingErrorProcessor.html
DefaultMessageCodesResolver.Format	A										<section class="prog__container">Common message code formats.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html
DefaultMessageCodesResolver	A										<section class="prog__container">Default implementation of the MessageCodesResolver interface.\n\n Will create two message codes for an object error, in the following order (when\n using the prefixed\nformatter):\n \n1.: code + "." + object name\n 2.: code\n \nWill create four message codes for a field specification, in the following order:\n \n1.: code + "." + object name + "." + field\n 2.: code + "." + field\n 3.: code + "." + field type\n 4.: code\n \nFor example, in case of code "typeMismatch", object name "user", field "age":\n \n1. try "typeMismatch.user.age"\n 2. try "typeMismatch.age"\n 3. try "typeMismatch.int"\n 4. try "typeMismatch"\n \nThis resolution algorithm thus can be leveraged for example to show\n specific messages for binding errors like "required" and "typeMismatch":\n \nat the object + field level ("age" field, but only on "user");\n at the field level (all "age" fields, no matter which object name);\n or at the general level (all fields, on any object).\n \nIn case of array, List or Map properties,\n both codes for specific elements and for the whole collection are\n generated. Assuming a field "name" of an array "groups" in object "user":\n \n1. try "typeMismatch.user.groups[0].name"\n 2. try "typeMismatch.user.groups.name"\n 3. try "typeMismatch.groups[0].name"\n 4. try "typeMismatch.groups.name"\n 5. try "typeMismatch.name"\n 6. try "typeMismatch.java.lang.String"\n 7. try "typeMismatch"\n \nBy default the errorCodes will be placed at the beginning of constructed\n message strings. The messageCodeFormatter property can be used to specify an alternative concatenation\n format.\n\n In order to group all codes into a specific category within your resource bundles,\n e.g. "validation.typeMismatch.name" instead of the default "typeMismatch.name",\n consider specifying a prefix to be applied.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.html
DirectFieldBindingResult	A										<section class="prog__container">Special implementation of the Errors and BindingResult interfaces,\n supporting registration and evaluation of binding errors on value objects.\n Performs direct field access instead of going through JavaBean getters.\n\n Since Spring 4.1 this implementation is able to traverse nested fields.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/DirectFieldBindingResult.html
Errors	A										<section class="prog__container">Stores and exposes information about data-binding and validation\n errors for a specific object.\n\n Field names can be properties of the target object (e.g. "name"\n when binding to a customer object), or nested fields in case of\n subobjects (e.g. "address.street"). Supports subtree navigation\n via setNestedPath(String): for example, an\n AddressValidator validates "address", not being aware\n that this is a subobject of customer.\n\n Note: Errors objects are single-threaded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/Errors.html
FieldError	A										<section class="prog__container">Encapsulates a field error, that is, a reason for rejecting a specific\n field value.\n\n See the DefaultMessageCodesResolver javadoc for details on\n how a message code list is built for a FieldError.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/FieldError.html
MapBindingResult	A										<section class="prog__container">Map-based implementation of the BindingResult interface,\n supporting registration and evaluation of binding errors on\n Map attributes.\n\n Can be used as errors holder for custom binding onto a\n Map, for example when invoking a Validator for a Map object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/MapBindingResult.html
MessageCodeFormatter	A										<section class="prog__container">A strategy interface for formatting message codes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/MessageCodeFormatter.html
MessageCodesResolver	A										<section class="prog__container">Strategy interface for building message codes from validation error codes.\n Used by DataBinder to build the codes list for ObjectErrors and FieldErrors.\n\n The resulting message codes correspond to the codes of a\n MessageSourceResolvable (as implemented by ObjectError and FieldError).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/MessageCodesResolver.html
ObjectError	A										<section class="prog__container">Encapsulates an object error, that is, a global reason for rejecting\n an object.\n\n See the DefaultMessageCodesResolver javadoc for details on\n how a message code list is built for an ObjectError.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/ObjectError.html
SmartValidator	A										<section class="prog__container">Extended variant of the Validator interface, adding support for\n validation 'hints'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/SmartValidator.html
ValidationUtils	A										<section class="prog__container">Utility class offering convenient methods for invoking a Validator\n and for rejecting empty fields.\n\n Checks for an empty field in Validator implementations can become\n one-liners when using rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String) or rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/ValidationUtils.html
Validator	A										<section class="prog__container">A validator for application-specific objects.\n\n This interface is totally divorced from any infrastructure\n or context; that is to say it is not coupled to validating\n only objects in the web tier, the data-access tier, or the\n whatever-tier. As such it is amenable to being used in any layer\n of an application, and supports the encapsulation of validation\n logic as a first-class citizen in its own right.\n\n Find below a simple but complete Validator\n implementation, which validates that the various String\n properties of a UserLogin instance are not empty\n (that is they are not null and do not consist\n wholly of whitespace), and that any password that is present is\n at least 'MINIMUM_PASSWORD_LENGTH' characters in length.\n\n  public class UserLoginValidator implements Validator {\n\n    private static final int MINIMUM_PASSWORD_LENGTH = 6;\n\n    public boolean supports(Class clazz) {\n       return UserLogin.class.isAssignableFrom(clazz);\n    }\n\n    public void validate(Object target, Errors errors) {\n       ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userName", "field.required");\n       ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "field.required");\n       UserLogin login = (UserLogin) target;\n       if (login.getPassword() != null\n             && login.getPassword().trim().length() < MINIMUM_PASSWORD_LENGTH) {\n          errors.rejectValue("password", "field.min.length",\n                new Object[]{Integer.valueOf(MINIMUM_PASSWORD_LENGTH)},\n                "The password must be at least [" + MINIMUM_PASSWORD_LENGTH + "] characters in length.");\n       }\n    }\n }\nSee also the Spring reference manual for a fuller discussion of\n the Validator interface and it's role in an enterprise\n application.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/Validator.html
Validated	A										<section class="prog__container">Variant of JSR-303's Valid, supporting the\n specification of validation groups. Designed for convenient use with\n Spring's JSR-303 support but not JSR-303 specific.\n\n Can be used e.g. with Spring MVC handler methods arguments.\n Supported through SmartValidator's\n validation hint concept, with validation group classes acting as hint objects.\n\n Can also be used with method level validation, indicating that a specific\n class is supposed to be validated at the method level (acting as a pointcut\n for the corresponding validation interceptor), but also optionally specifying\n the validation groups for method-level validation in the annotated class.\n Applying this annotation at the method level allows for overriding the\n validation groups for a specific method but does not serve as a pointcut;\n a class-level annotation is nevertheless necessary to trigger method validation\n for a specific bean to begin with. Can also be used as a meta-annotation on a\n custom stereotype annotation or a custom group-specific validated annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/annotation/Validated.html
BeanValidationPostProcessor	A										<section class="prog__container">Simple BeanPostProcessor that checks JSR-303 constraint annotations\n in Spring-managed beans, throwing an initialization exception in case of\n constraint violations right before calling the bean's init method (if any).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.html
CustomValidatorBean	A										<section class="prog__container">Configurable bean class that exposes a specific JSR-303 Validator\n through its original interface as well as through the Spring\n Validator interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/CustomValidatorBean.html
LocaleContextMessageInterpolator	A										<section class="prog__container">Delegates to a target MessageInterpolator implementation but enforces Spring's\n managed Locale. Typically used to wrap the validation provider's default interpolator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/LocaleContextMessageInterpolator.html
LocalValidatorFactoryBean	A										<section class="prog__container">This is the central class for javax.validation (JSR-303) setup in a Spring\n application context: It bootstraps a javax.validation.ValidationFactory and\n exposes it through the Spring Validator interface\n as well as through the JSR-303 Validator interface and the\n ValidatorFactory interface itself.\n\n When talking to an instance of this bean through the Spring or JSR-303 Validator interfaces,\n you'll be talking to the default Validator of the underlying ValidatorFactory. This is very\n convenient in that you don't have to perform yet another call on the factory, assuming that\n you will almost always use the default Validator anyway. This can also be injected directly\n into any target dependency of type Validator!\n\n As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support\n for Hibernate Validator 4.3 and 5.x (see setValidationMessageSource(org.springframework.context.MessageSource)).\n\n Note that Bean Validation 1.1's #forExecutables method isn't supported: We do not\n expect that method to be called by application code; consider MethodValidationInterceptor\n instead. If you really need programmatic #forExecutables access, inject this class as\n a ValidatorFactory and call getValidator() on it, then #forExecutables\n on the returned native Validator reference instead of directly on this class.\n\n This class is also being used by Spring's MVC configuration namespace, in case of the\n javax.validation API being present but no explicit Validator having been configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.html
MessageSourceResourceBundleLocator	A										<section class="prog__container">Implementation of Hibernate Validator 4.3/5.x's ResourceBundleLocator interface,\n exposing a Spring MessageSource as localized MessageSourceResourceBundle.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/MessageSourceResourceBundleLocator.html
MethodValidationInterceptor	A										<section class="prog__container">An AOP Alliance MethodInterceptor implementation that delegates to a\n JSR-303 provider for performing method-level validation on annotated methods.\n\n Applicable methods have JSR-303 constraint annotations on their parameters\n and/or on their return value (in the latter case specified at the method level,\n typically as inline annotation).\n\n E.g.: public @NotNull Object myValidMethod(@NotNull String arg1, @Max(10) int arg2)\nValidation groups can be specified through Spring's Validated annotation\n at the type level of the containing target class, applying to all public service methods\n of that class. By default, JSR-303 will validate against its default group only.\n\n As of Spring 4.0, this functionality requires either a Bean Validation 1.1 provider\n (such as Hibernate Validator 5.x) or the Bean Validation 1.0 API with Hibernate Validator\n 4.3. The actual provider will be autodetected and automatically adapted.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/MethodValidationInterceptor.html
MethodValidationPostProcessor	A										<section class="prog__container">A convenient BeanPostProcessor implementation that delegates to a\n JSR-303 provider for performing method-level validation on annotated methods.\n\n Applicable methods have JSR-303 constraint annotations on their parameters\n and/or on their return value (in the latter case specified at the method level,\n typically as inline annotation), e.g.:\n\n \n public @NotNull Object myValidMethod(@NotNull String arg1, @Max(10) int arg2)\n \nTarget classes with such annotated methods need to be annotated with Spring's\n Validated annotation at the type level, for their methods to be searched for\n inline constraint annotations. Validation groups can be specified through @Validated\n as well. By default, JSR-303 will validate against its default group only.\n\n As of Spring 4.0, this functionality requires either a Bean Validation 1.1 provider\n (such as Hibernate Validator 5.x) or the Bean Validation 1.0 API with Hibernate Validator\n 4.3. The actual provider will be autodetected and automatically adapted.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.html
OptionalValidatorFactoryBean	A										<section class="prog__container">LocalValidatorFactoryBean subclass that simply turns\n Validator calls into no-ops\n in case of no Bean Validation provider being available.\n\n This is the actual class used by Spring's MVC configuration namespace,\n in case of the javax.validation API being present but no explicit\n Validator having been configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/OptionalValidatorFactoryBean.html
SpringConstraintValidatorFactory	A										<section class="prog__container">JSR-303 ConstraintValidatorFactory implementation that delegates to a\n Spring BeanFactory for creating autowired ConstraintValidator instances.\n\n Note that this class is meant for programmatic use, not for declarative use\n in a standard validation.xml file. Consider\n SpringWebConstraintValidatorFactory\n for declarative use in a web application, e.g. with JAX-RS or JAX-WS.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/SpringConstraintValidatorFactory.html
SpringValidatorAdapter	A										<section class="prog__container">Adapter that takes a JSR-303 javax.validator.Validator\n and exposes it as a Spring Validator\n while also exposing the original JSR-303 Validator interface itself.\n\n Can be used as a programmatic wrapper. Also serves as base class for\n CustomValidatorBean and LocalValidatorFactoryBean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/beanvalidation/SpringValidatorAdapter.html
BindingAwareModelMap	A										<section class="prog__container">Subclass of ExtendedModelMap that automatically removes\n a BindingResult object if the corresponding\n target attribute gets replaced through regular Map operations.\n\n This is the class exposed to handler methods by Spring MVC, typically consumed through\n a declaration of the Model interface. There is no need to\n build it within user code; a plain ModelMap or even a just\n a regular Map with String keys will be good enough to return a user model.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/support/BindingAwareModelMap.html
HttpMediaTypeException	A										<section class="prog__container">Abstract base for exceptions related to media types. Adds a list of supported MediaTypes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpMediaTypeException.html
HttpMediaTypeNotAcceptableException	A										<section class="prog__container">Exception thrown when the request handler cannot generate a response that is acceptable by the client.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpMediaTypeNotAcceptableException.html
HttpMediaTypeNotSupportedException	A										<section class="prog__container">Exception thrown when a client POSTs, PUTs, or PATCHes content of a type\n not supported by request handler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpMediaTypeNotSupportedException.html
HttpRequestHandler	A										<section class="prog__container">Plain handler interface for components that process HTTP requests,\n analogous to a Servlet. Only declares ServletException\n and IOException, to allow for usage within any\n HttpServlet. This interface is essentially the\n direct equivalent of an HttpServlet, reduced to a central handle method.\n\n The easiest way to expose an HttpRequestHandler bean in Spring style\n is to define it in Spring's root web application context and define\n an HttpRequestHandlerServlet\n in web.xml, pointing to the target HttpRequestHandler bean\n through its servlet-name which needs to match the target bean name.\n\n Supported as a handler type within Spring's\n DispatcherServlet, being able\n to interact with the dispatcher's advanced mapping and interception\n facilities. This is the recommended way of exposing an HttpRequestHandler,\n while keeping the handler implementations free of direct dependencies\n on a DispatcherServlet environment.\n\n Typically implemented to generate binary responses directly,\n with no separate view resource involved. This differentiates it from a\n Controller within Spring's Web MVC\n framework. The lack of a ModelAndView\n return value gives a clearer signature to callers other than the\n DispatcherServlet, indicating that there will never be a view to render.\n\n As of Spring 2.0, Spring's HTTP-based remote exporters, such as\n HttpInvokerServiceExporter\n and HessianServiceExporter,\n implement this interface rather than the more extensive Controller interface,\n for minimal dependencies on Spring-specific web infrastructure.\n\n Note that HttpRequestHandlers may optionally implement the\n LastModified interface,\n just like Controllers can, provided that they run within Spring's\n DispatcherServlet. However, this is usually not necessary, since\n HttpRequestHandlers typically only support POST requests to begin with.\n Alternatively, a handler may implement the "If-Modified-Since" HTTP\n header processing manually within its handle method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpRequestHandler.html
HttpRequestMethodNotSupportedException	A										<section class="prog__container">Exception thrown when a request handler does not support a\n specific request method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpRequestMethodNotSupportedException.html
HttpSessionRequiredException	A										<section class="prog__container">Exception thrown when an HTTP request handler requires a pre-existing session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpSessionRequiredException.html
SpringServletContainerInitializer	A										<section class="prog__container">Servlet 3.0 ServletContainerInitializer designed to support code-based\n configuration of the servlet container using Spring's WebApplicationInitializer\n SPI as opposed to (or possibly in combination with) the traditional\n web.xml-based approach.\n\n Mechanism of Operation\n This class will be loaded and instantiated and have its onStartup(java.util.Set<java.lang.Class<?>>, javax.servlet.ServletContext)\n method invoked by any Servlet 3.0-compliant container during container startup assuming\n that the spring-web module JAR is present on the classpath. This occurs through\n the JAR Services API ServiceLoader.load(Class) method detecting the\n spring-web module's META-INF/services/javax.servlet.ServletContainerInitializer\n service provider configuration file. See the\n \n JAR Services API documentation as well as section 8.2.4 of the Servlet 3.0\n Final Draft specification for complete details.\n\n In combination with web.xml\n A web application can choose to limit the amount of classpath scanning the Servlet\n container does at startup either through the metadata-complete attribute in\n web.xml, which controls scanning for Servlet annotations or through an\n <absolute-ordering> element also in web.xml, which controls which\n web fragments (i.e. jars) are allowed to perform a ServletContainerInitializer\n scan. When using this feature, the SpringServletContainerInitializer\n can be enabled by adding "spring_web" to the list of named web fragments in\n web.xml as follows:\n\n \n <absolute-ordering>\n   <name>some_web_fragment</name>\n   <name>spring_web</name>\n </absolute-ordering>\n \nRelationship to Spring's WebApplicationInitializer\n Spring's WebApplicationInitializer SPI consists of just one method:\n WebApplicationInitializer.onStartup(ServletContext). The signature is intentionally\n quite similar to ServletContainerInitializer.onStartup(Set, ServletContext):\n simply put, SpringServletContainerInitializer is responsible for instantiating\n and delegating the ServletContext to any user-defined\n WebApplicationInitializer implementations. It is then the responsibility of\n each WebApplicationInitializer to do the actual work of initializing the\n ServletContext. The exact process of delegation is described in detail in the\n onStartup documentation below.\n\n General Notes\n In general, this class should be viewed as supporting infrastructure for\n the more important and user-facing WebApplicationInitializer SPI. Taking\n advantage of this container initializer is also completely optional: while\n it is true that this initializer will be loaded and invoked under all Servlet 3.0+\n runtimes, it remains the user's choice whether to make any\n WebApplicationInitializer implementations available on the classpath. If no\n WebApplicationInitializer types are detected, this container initializer will\n have no effect.\n\n Note that use of this container initializer and of WebApplicationInitializer\n is not in any way "tied" to Spring MVC other than the fact that the types are shipped\n in the spring-web module JAR. Rather, they can be considered general-purpose\n in their ability to facilitate convenient code-based configuration of the\n ServletContext. In other words, any servlet, listener, or filter may be\n registered within a WebApplicationInitializer, not just Spring MVC-specific\n components.\n\n This class is neither designed for extension nor intended to be extended.\n It should be considered an internal type, with WebApplicationInitializer\n being the public-facing SPI.\n\n See Also\n See WebApplicationInitializer Javadoc for examples and detailed usage\n recommendations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/SpringServletContainerInitializer.html
WebApplicationInitializer	A										<section class="prog__container">Interface to be implemented in Servlet 3.0+ environments in order to configure the\n ServletContext programmatically -- as opposed to (or possibly in conjunction\n with) the traditional web.xml-based approach.\n\n Implementations of this SPI will be detected automatically by SpringServletContainerInitializer, which itself is bootstrapped automatically\n by any Servlet 3.0 container. See its\n Javadoc for details on this bootstrapping mechanism.\n\n Example\nThe traditional, XML-based approach\n Most Spring users building a web application will need to register Spring's DispatcherServlet. For reference, in WEB-INF/web.xml, this would typically be done as\n follows:\n \n <servlet>\n   <servlet-name>dispatcher</servlet-name>\n   <servlet-class>\n     org.springframework.web.servlet.DispatcherServlet\n   </servlet-class>\n   <init-param>\n     <param-name>contextConfigLocation</param-name>\n     <param-value>/WEB-INF/spring/dispatcher-config.xml</param-value>\n   </init-param>\n   <load-on-startup>1</load-on-startup>\n </servlet>\n\n <servlet-mapping>\n   <servlet-name>dispatcher</servlet-name>\n   <url-pattern>/</url-pattern>\n </servlet-mapping>\nThe code-based approach with WebApplicationInitializer\n Here is the equivalent DispatcherServlet registration logic,\n WebApplicationInitializer-style:\n \n public class MyWebAppInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext container) {\n      XmlWebApplicationContext appContext = new XmlWebApplicationContext();\n      appContext.setConfigLocation("/WEB-INF/spring/dispatcher-config.xml");\n\n      ServletRegistration.Dynamic dispatcher =\n        container.addServlet("dispatcher", new DispatcherServlet(appContext));\n      dispatcher.setLoadOnStartup(1);\n      dispatcher.addMapping("/");\n    }\n\n }\n\n As an alternative to the above, you can also extend from AbstractDispatcherServletInitializer.\n\n As you can see, thanks to Servlet 3.0's new ServletContext.addServlet(java.lang.String, java.lang.String) method\n we're actually registering an instance of the DispatcherServlet, and\n this means that the DispatcherServlet can now be treated like any other object\n -- receiving constructor injection of its application context in this case.\n\n This style is both simpler and more concise. There is no concern for dealing with\n init-params, etc, just normal JavaBean-style properties and constructor arguments. You\n are free to create and work with your Spring application contexts as necessary before\n injecting them into the DispatcherServlet.\n\n Most major Spring Web components have been updated to support this style of\n registration.  You'll find that DispatcherServlet, FrameworkServlet,\n ContextLoaderListener and DelegatingFilterProxy all now support\n constructor arguments. Even if a component (e.g. non-Spring, other third party) has not\n been specifically updated for use within WebApplicationInitializers, they still\n may be used in any case. The Servlet 3.0 ServletContext API allows for setting\n init-params, context-params, etc programmatically.\n\n A 100% code-based approach to configuration\n In the example above, WEB-INF/web.xml was successfully replaced with code in\n the form of a WebApplicationInitializer, but the actual\n dispatcher-config.xml Spring configuration remained XML-based.\n WebApplicationInitializer is a perfect fit for use with Spring's code-based\n @Configuration classes. See @Configuration Javadoc for\n complete details, but the following example demonstrates refactoring to use Spring's\n AnnotationConfigWebApplicationContext in lieu of XmlWebApplicationContext, and\n user-defined @Configuration classes AppConfig and\n DispatcherConfig instead of Spring XML files. This example also goes a bit\n beyond those above to demonstrate typical configuration of the 'root' application\n context and registration of the ContextLoaderListener:\n \n public class MyWebAppInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext container) {\n      // Create the 'root' Spring application context\n      AnnotationConfigWebApplicationContext rootContext =\n        new AnnotationConfigWebApplicationContext();\n      rootContext.register(AppConfig.class);\n\n      // Manage the lifecycle of the root application context\n      container.addListener(new ContextLoaderListener(rootContext));\n\n      // Create the dispatcher servlet's Spring application context\n      AnnotationConfigWebApplicationContext dispatcherContext =\n        new AnnotationConfigWebApplicationContext();\n      dispatcherContext.register(DispatcherConfig.class);\n\n      // Register and map the dispatcher servlet\n      ServletRegistration.Dynamic dispatcher =\n        container.addServlet("dispatcher", new DispatcherServlet(dispatcherContext));\n      dispatcher.setLoadOnStartup(1);\n      dispatcher.addMapping("/");\n    }\n\n }\n\n As an alternative to the above, you can also extend from AbstractAnnotationConfigDispatcherServletInitializer.\n\n Remember that WebApplicationInitializer implementations are detected\n automatically -- so you are free to package them within your application as you\n see fit.\n\n Ordering WebApplicationInitializer execution\nWebApplicationInitializer implementations may optionally be annotated at the\n class level with Spring's @Order\n annotation or may implement Spring's Ordered\n interface. If so, the initializers will be ordered prior to invocation. This provides\n a mechanism for users to ensure the order in which servlet container initialization\n occurs. Use of this feature is expected to be rare, as typical applications will likely\n centralize all container initialization within a single WebApplicationInitializer.\n\n Caveats\nweb.xml versioning\nWEB-INF/web.xml and WebApplicationInitializer use are not mutually\n exclusive; for example, web.xml can register one servlet, and a WebApplicationInitializer can register another. An initializer can even\n modify registrations performed in web.xml through methods such as\n ServletContext.getServletRegistration(String). However, if\n WEB-INF/web.xml is present in the application, its version attribute\n must be set to "3.0" or greater, otherwise ServletContainerInitializer\n bootstrapping will be ignored by the servlet container.\nMapping to '/' under Tomcat\nApache Tomcat maps its internal DefaultServlet to "/", and on Tomcat versions\n <= 7.0.14, this servlet mapping cannot be overridden programmatically.\n 7.0.15 fixes this issue. Overriding the "/" servlet mapping has also been tested\n successfully under GlassFish 3.1.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html
AbstractMappingContentNegotiationStrategy	A										<section class="prog__container">Base class for ContentNegotiationStrategy implementations with the\n steps to resolve a request to media types.\n\n First a key (e.g. "json", "pdf") must be extracted from the request (e.g.\n file extension, query param). The key must then be resolved to media type(s)\n through the base class MappingMediaTypeFileExtensionResolver which\n stores such mappings.\n\n The method handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String) allow sub-classes to plug in additional\n ways of looking up media types (e.g. through the Java Activation framework,\n or ServletContext.getMimeType(java.lang.String). Media types resolved\n via base classes are then added to the base class\n MappingMediaTypeFileExtensionResolver, i.e. cached for new lookups.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.html
ContentNegotiationManager	A										<section class="prog__container">Central class to determine requested media types\n for a request. This is done by delegating to a list of configured\n ContentNegotiationStrategy instances.\n\n Also provides methods to look up file extensions for a media type.\n This is done by delegating to the list of configured\n MediaTypeFileExtensionResolver instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManager.html
ContentNegotiationManagerFactoryBean	A										<section class="prog__container">Factory to create a ContentNegotiationManager and configure it with\n one or more ContentNegotiationStrategy instances via simple setters.\n The following table shows setters, resulting strategy instances, and if in\n use by default:\n\n \n\nProperty Setter\nUnderlying Strategy\nDefault Setting\n\n\nsetFavorPathExtension(boolean)\nPath Extension strategy\nOn\n\n\nfavorParameter\nParameter strategy\nOff\n\n\nignoreAcceptHeader\nHeader strategy\nOn\n\n\ndefaultContentType\nFixed content strategy\nNot set\n\n\ndefaultContentTypeStrategy\nContentNegotiationStrategy\nNot set\n\n\nThe order in which strategies are configured is fixed. Setters may only\n turn individual strategies on or off. If you need a custom order for any\n reason simply instantiate ContentNegotiationManager directly.\n\n For the path extension and parameter strategies you may explicitly add\n MediaType mappings. This will be used to resolve path\n extensions or a parameter value such as "json" to a media type such as\n "application/json".\n\n The path extension strategy will also use ServletContext.getMimeType(java.lang.String)\n and the Java Activation framework (JAF), if available, to resolve a path\n extension to a MediaType. You may suppress the use of JAF.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html
ContentNegotiationStrategy	A										<section class="prog__container">A strategy for resolving the requested media types for a request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationStrategy.html
FixedContentNegotiationStrategy	A										<section class="prog__container">A ContentNegotiationStrategy that returns a fixed content type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/FixedContentNegotiationStrategy.html
HeaderContentNegotiationStrategy	A										<section class="prog__container">A ContentNegotiationStrategy that checks the 'Accept' request header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/HeaderContentNegotiationStrategy.html
MappingMediaTypeFileExtensionResolver	A										<section class="prog__container">An implementation of MediaTypeFileExtensionResolver that maintains\n lookups between file extensions and MediaTypes in both directions.\n\n Initially created with a map of file extensions and media types.\n Subsequently subclasses can use addMapping(java.lang.String, org.springframework.http.MediaType) to add more mappings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.html
MediaTypeFileExtensionResolver	A										<section class="prog__container">Strategy to resolve MediaType to a list of file extensions.\n For example resolve "application/json" to "json".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/MediaTypeFileExtensionResolver.html
ParameterContentNegotiationStrategy	A										<section class="prog__container">A ContentNegotiationStrategy that resolves a query parameter to a key\n to be used to look up a media type. The default parameter name is format.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ParameterContentNegotiationStrategy.html
PathExtensionContentNegotiationStrategy	A										<section class="prog__container">A ContentNegotiationStrategy that resolves the file extension in the\n request path to a key to be used to look up a media type.\n\n If the file extension is not found in the explicit registrations provided\n to the constructor, the Java Activation Framework (JAF) is used as a fallback\n mechanism.\n\n The presence of the JAF is detected and enabled automatically but the\n setUseJaf(boolean) property may be set to false.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.html
ServletPathExtensionContentNegotiationStrategy	A										<section class="prog__container">Extends PathExtensionContentNegotiationStrategy that also uses\n ServletContext.getMimeType(String) to resolve file extensions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy.html
EscapedErrors	A										<section class="prog__container">Errors wrapper that adds automatic HTML escaping to the wrapped instance,\n for convenient usage in HTML views. Can be retrieved easily via\n RequestContext's getErrors method.\n\n Note that BindTag does not use this class to avoid unnecessary\n creation of ObjectError instances. It just escapes the messages and values\n that get copied into the respective BindStatus instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/EscapedErrors.html
MethodArgumentNotValidException	A										<section class="prog__container">Exception to be thrown when validation on an argument annotated with @Valid fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/MethodArgumentNotValidException.html
MissingPathVariableException	A										<section class="prog__container">ServletRequestBindingException subclass that indicates that a path\n variable expected in the method parameters of an @RequestMapping\n method is not present among the URI variables extracted from the URL.\n Typically that means the URI template does not match the path variable name\n declared on the method parameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/MissingPathVariableException.html
MissingServletRequestParameterException	A										<section class="prog__container">ServletRequestBindingException subclass that indicates a missing parameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/MissingServletRequestParameterException.html
ServletRequestBindingException	A										<section class="prog__container">Fatal binding exception, thrown when we want to\n treat binding exceptions as unrecoverable.\n\n Extends ServletException for convenient throwing in any Servlet resource\n (such as a Filter), and NestedServletException for proper root cause handling\n (as the plain ServletException doesn't expose its root cause at all).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/ServletRequestBindingException.html
ServletRequestDataBinder	A										<section class="prog__container">Special DataBinder to perform data binding\n from servlet request parameters to JavaBeans, including support for multipart files.\n\n See the DataBinder/WebDataBinder superclasses for customization options,\n which include specifying allowed/required fields, and registering custom\n property editors.\n\n Can also be used for manual data binding in custom web controllers:\n for example, in a plain Controller implementation or in a MultiActionController\n handler method. Simply instantiate a ServletRequestDataBinder for each binding\n process, and invoke bind with the current ServletRequest as argument:\n\n \n MyBean myBean = new MyBean();\n // apply binder to custom target object\n ServletRequestDataBinder binder = new ServletRequestDataBinder(myBean);\n // register custom editors, if desired\n binder.registerCustomEditor(...);\n // trigger actual binding of request parameters\n binder.bind(request);\n // optionally evaluate binding errors\n Errors errors = binder.getErrors();\n ...</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/ServletRequestDataBinder.html
ServletRequestParameterPropertyValues	A										<section class="prog__container">PropertyValues implementation created from parameters in a ServletRequest.\n Can look for all property values beginning with a certain prefix and\n prefix separator (default is "_").\n\n For example, with a prefix of "spring", "spring_param1" and\n "spring_param2" result in a Map with "param1" and "param2" as keys.\n\n This class is not immutable to be able to efficiently remove property\n values that should be ignored for binding.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/ServletRequestParameterPropertyValues.html
ServletRequestUtils	A										<section class="prog__container">Parameter extraction methods, for an approach distinct from data binding,\n in which parameters of specific types are required.\n\n This approach is very useful for simple submissions, where binding\n request parameters to a command object would be overkill.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/ServletRequestUtils.html
UnsatisfiedServletRequestParameterException	A										<section class="prog__container">ServletRequestBindingException subclass that indicates an unsatisfied\n parameter condition, as typically expressed using an @RequestMapping\n annotation at the @Controller type level.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.html
WebDataBinder	A										<section class="prog__container">Special DataBinder for data binding from web request parameters\n to JavaBean objects. Designed for web environments, but not dependent on\n the Servlet API; serves as base class for more specific DataBinder variants,\n such as ServletRequestDataBinder.\n\n Includes support for field markers which address a common problem with\n HTML checkboxes and select options: detecting that a field was part of\n the form, but did not generate a request parameter because it was empty.\n A field marker allows to detect that state and reset the corresponding\n bean property accordingly. Default values, for parameters that are otherwise\n not present, can specify a value for the field other then empty.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/WebDataBinder.html
ControllerAdvice	A										<section class="prog__container">Indicates the annotated class assists a "Controller".\n\n Serves as a specialization of @Component, allowing for\n implementation classes to be autodetected through classpath scanning.\n\n It is typically used to define @ExceptionHandler,\n @InitBinder, and @ModelAttribute\n methods that apply to all @RequestMapping methods.\n\n One of annotations(), basePackageClasses(),\n basePackages() or its alias value()\n may be specified to define specific subsets of Controllers\n to assist. When multiple selectors are applied, OR logic is applied -\n meaning selected Controllers should match at least one selector.\n\n The default behavior (i.e. if used without any selector),\n the @ControllerAdvice annotated class will\n assist all known Controllers.\n\n Note that those checks are done at runtime, so adding many attributes and using\n multiple strategies may have negative impacts (complexity, performance).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html
CookieValue	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to an HTTP cookie.\n\n Supported for annotated handler methods in Servlet and Portlet environments.\n\n The method parameter may be declared as type Cookie\n or as cookie value type (String, int, etc.).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/CookieValue.html
CrossOrigin	A										<section class="prog__container">Marks the annotated method or type as permitting cross origin requests.\n\n By default all origins and headers are permitted, credentials are allowed,\n and the maximum age is set to 1800 seconds (30 minutes). The list of HTTP\n methods is set to the methods on the @RequestMapping if not\n explicitly set on @CrossOrigin.\n\n NOTE: @CrossOrigin is processed if an appropriate\n HandlerMapping-HandlerAdapter pair is configured such as the\n RequestMappingHandlerMapping-RequestMappingHandlerAdapter\n pair which are the default in the MVC Java config and the MVC namespace.\n In particular @CrossOrigin is not supported with the\n DefaultAnnotationHandlerMapping-AnnotationMethodHandlerAdapter\n pair both of which are also deprecated.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html
DeleteMapping	A										<section class="prog__container">Annotation for mapping HTTP DELETE requests onto specific handler\n methods.\n\n Specifically, @DeleteMapping is a composed annotation that\n acts as a shortcut for @RequestMapping(method = RequestMethod.DELETE).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/DeleteMapping.html
ExceptionHandler	A										<section class="prog__container">Annotation for handling exceptions in specific handler classes and/or\n handler methods. Provides consistent style between Servlet and Portlet\n environments, with the semantics adapting to the concrete environment.\n\n Handler methods which are annotated with this annotation are allowed to\n have very flexible signatures. They may have parameters of the following\n types, in arbitrary order:\n \nAn exception argument: declared as a general Exception or as a more\n specific exception. This also serves as a mapping hint if the annotation\n itself does not narrow the exception types through its value().\n Request and/or response objects (Servlet API or Portlet API).\n You may choose any specific request/response type, e.g.\n ServletRequest / HttpServletRequest\n or PortletRequest / ActionRequest /\n RenderRequest. Note that in the Portlet case,\n an explicitly declared action/render argument is also used for mapping\n specific request types onto a handler method (in case of no other\n information given that differentiates between action and render requests).\n Session object (Servlet API or Portlet API): either\n HttpSession or PortletSession.\n An argument of this type will enforce the presence of a corresponding session.\n As a consequence, such an argument will never be null.\n Note that session access may not be thread-safe, in particular in a\n Servlet environment: Consider switching the\n "synchronizeOnSession" flag to "true" if multiple requests are allowed to\n access a session concurrently.\nWebRequest or\n NativeWebRequest.\n Allows for generic request parameter access as well as request/session\n attribute access, without ties to the native Servlet/Portlet API.\n Locale for the current request locale\n (determined by the most specific locale resolver available,\n i.e. the configured LocaleResolver\n in a Servlet environment and the portal locale in a Portlet environment).\n InputStream / Reader for access\n to the request's content. This will be the raw InputStream/Reader as\n exposed by the Servlet/Portlet API.\n OutputStream / Writer for generating\n the response's content. This will be the raw OutputStream/Writer as\n exposed by the Servlet/Portlet API.\n Model as an alternative to returning\n a model map from the handler method. Note that the provided model is not\n pre-populated with regular model attributes and therefore always empty,\n as a convenience for preparing the model for an exception-specific view.\n \nThe following return types are supported for handler methods:\n \nA ModelAndView object (Servlet MVC or Portlet MVC).\n A Model object, with the view name implicitly\n determined through a RequestToViewNameTranslator.\n A Map object for exposing a model,\n with the view name implicitly determined through a\n RequestToViewNameTranslator.\n A View object.\n A String value which is interpreted as view name.\n @ResponseBody annotated methods (Servlet-only)\n to set the response content. The return value will be converted to the\n response stream using\n message converters.\n An HttpEntity<?> or\n ResponseEntity<?> object\n (Servlet-only) to set response headers and content. The ResponseEntity body\n will be converted and written to the response stream using\n message converters.\n void if the method handles the response itself (by\n writing the response content directly, declaring an argument of type\n ServletResponse / HttpServletResponse\n / RenderResponse for that purpose)\n or if the view name is supposed to be implicitly determined through a\n RequestToViewNameTranslator\n (not declaring a response argument in the handler method signature;\n only applicable in a Servlet environment).\n \nIn Servlet environments, you can combine the ExceptionHandler annotation\n with @ResponseStatus, to define the response status\n for the HTTP response.\n\n Note: In Portlet environments, ExceptionHandler annotated methods\n will only be called during the render and resource phases - just like\n HandlerExceptionResolver beans would.\n Exceptions carried over from the action and event phases will be invoked during\n the render phase as well, with exception handler methods having to be present\n on the controller class that defines the applicable render method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html
GetMapping	A										<section class="prog__container">Annotation for mapping HTTP GET requests onto specific handler\n methods.\n\n Specifically, @GetMapping is a composed annotation that\n acts as a shortcut for @RequestMapping(method = RequestMethod.GET).\n\n Difference between @GetMapping & @RequestMapping\n@GetMapping does not support the consumes\n attribute of @RequestMapping.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html
InitBinder	A										<section class="prog__container">Annotation that identifies methods which initialize the\n WebDataBinder which\n will be used for populating command and form object arguments\n of annotated handler methods.\n\n Such init-binder methods support all arguments that RequestMapping\n supports, except for command/form objects and corresponding validation result\n objects. Init-binder methods must not have a return value; they are usually\n declared as void.\n\n Typical arguments are WebDataBinder\n in combination with WebRequest\n or Locale, allowing to register context-specific editors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html
Mapping	A										<section class="prog__container">Meta annotation that indicates a web mapping annotation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/Mapping.html
MatrixVariable	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to a\n name-value pair within a path segment. Supported for RequestMapping\n annotated handler methods in Servlet environments.\n\n If the method parameter type is Map and a matrix variable\n name is specified, then the matrix variable value is converted to a\n Map assuming an appropriate conversion strategy is available.\n\n If the method parameter is Map<String, String> or\n MultiValueMap<String, String>\n and a variable name is not specified, then the map is populated with all\n matrix variable names and values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/MatrixVariable.html
ModelAttribute	A										<section class="prog__container">Annotation that binds a method parameter or method return value\n to a named model attribute, exposed to a web view. Supported\n for controller classes with @RequestMapping\n methods.\n\n Can be used to expose command objects to a web view, using\n specific attribute names, through annotating corresponding\n parameters of an @RequestMapping method.\n\n Can also be used to expose reference data to a web view\n through annotating accessor methods in a controller class with\n @RequestMapping methods. Such accessor\n methods are allowed to have any arguments that\n @RequestMapping methods support, returning\n the model attribute value to expose.\n\n Note however that reference data and all other model content is\n not available to web views when request processing results in an\n Exception since the exception could be raised at any time\n making the content of the model unreliable. For this reason\n @ExceptionHandler methods do not provide\n access to a Model argument.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html
PatchMapping	A										<section class="prog__container">Annotation for mapping HTTP PATCH requests onto specific handler\n methods.\n\n Specifically, @PatchMapping is a composed annotation that\n acts as a shortcut for @RequestMapping(method = RequestMethod.PATCH).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/PatchMapping.html
PathVariable	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to a URI template\n variable. Supported for RequestMapping annotated handler methods in Servlet\n environments.\n\n If the method parameter is Map<String, String> or\n MultiValueMap<String, String>\n then the map is populated with all path variable names and values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html
PostMapping	A										<section class="prog__container">Annotation for mapping HTTP POST requests onto specific handler\n methods.\n\n Specifically, @PostMapping is a composed annotation that\n acts as a shortcut for @RequestMapping(method = RequestMethod.POST).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/PostMapping.html
PutMapping	A										<section class="prog__container">Annotation for mapping HTTP PUT requests onto specific handler\n methods.\n\n Specifically, @PutMapping is a composed annotation that\n acts as a shortcut for @RequestMapping(method = RequestMethod.PUT).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/PutMapping.html
RequestAttribute	A										<section class="prog__container">Annotation to bind a method parameter to a request attribute.\n\n The main motivation is to provide convenient access to request attributes\n from a controller method with an optional/required check and a cast to the\n target method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestAttribute.html
RequestBody	A										<section class="prog__container">Annotation indicating a method parameter should be bound to the body of the web request.\n The body of the request is passed through an HttpMessageConverter to resolve the\n method argument depending on the content type of the request. Optionally, automatic\n validation can be applied by annotating the argument with @Valid.\n\n Supported for annotated handler methods in Servlet environments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html
RequestHeader	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to a web request header.\n\n Supported for annotated handler methods in Servlet and Portlet environments.\n\n If the method parameter is Map<String, String>,\n MultiValueMap<String, String>,\n or HttpHeaders then the map is\n populated with all header names and values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestHeader.html
RequestMapping	A										<section class="prog__container">Annotation for mapping web requests onto specific handler classes and/or\n handler methods. Provides a consistent style between Servlet and Portlet\n environments, with the semantics adapting to the concrete environment.\n\n NOTE: The set of features supported for Servlets is a superset\n of the set of features supported for Portlets. The places where this applies\n are marked with the label "Servlet-only" in this source file. For Servlet\n environments there are some further distinctions depending on whether an\n application is configured with "@MVC 3.0" or\n "@MVC 3.1" support classes. The places where this applies are\n marked with "@MVC 3.1-only" in this source file. For more\n details see the note on the new support classes added in Spring MVC 3.1\n further below.\n\n Handler methods which are annotated with this annotation are allowed to\n have very flexible signatures. They may have parameters of the following\n types, in arbitrary order (except for validation results, which need to\n follow right after the corresponding command object, if desired):\n \nRequest and/or response objects (Servlet API or Portlet API).\n You may choose any specific request/response type, e.g.\n ServletRequest / HttpServletRequest\n or PortletRequest / ActionRequest /\n RenderRequest. Note that in the Portlet case,\n an explicitly declared action/render argument is also used for mapping\n specific request types onto a handler method (in case of no other\n information given that differentiates between action and render requests).\n Session object (Servlet API or Portlet API): either\n HttpSession or PortletSession.\n An argument of this type will enforce the presence of a corresponding session.\n As a consequence, such an argument will never be null.\n Note that session access may not be thread-safe, in particular in a\n Servlet environment: Consider switching the\n "synchronizeOnSession" flag to "true" if multiple requests are allowed to\n access a session concurrently.\nWebRequest or\n NativeWebRequest.\n Allows for generic request parameter access as well as request/session\n attribute access, without ties to the native Servlet/Portlet API.\n Locale for the current request locale\n (determined by the most specific locale resolver available,\n i.e. the configured LocaleResolver\n in a Servlet environment and the portal locale in a Portlet environment).\n InputStream / Reader for access\n to the request's content. This will be the raw InputStream/Reader as\n exposed by the Servlet/Portlet API.\n OutputStream / Writer for generating\n the response's content. This will be the raw OutputStream/Writer as\n exposed by the Servlet/Portlet API.\n HttpMethod for the HTTP request method\n@PathVariable annotated parameters (Servlet-only)\n for access to URI template values (i.e. /hotels/{hotel}). Variable values will be\n converted to the declared method argument type. By default, the URI template\n will match against the regular expression [^\.]* (i.e. any character\n other than period), but this can be changed by specifying another regular\n expression, like so: /hotels/{hotel:\d+}.\n Additionally, @PathVariable can be used on a\n Map<String, String> to gain access to all\n URI template variables.\n @MatrixVariable annotated parameters (Servlet-only)\n for access to name-value pairs located in URI path segments. Matrix variables\n must be represented with a URI template variable. For example /hotels/{hotel}\n where the incoming URL may be "/hotels/42;q=1".\n Additionally, @MatrixVariable can be used on a\n Map<String, String> to gain access to all\n matrix variables in the URL or to those in a specific path variable.\n @RequestParam annotated parameters for access to\n specific Servlet/Portlet request parameters. Parameter values will be\n converted to the declared method argument type. Additionally,\n @RequestParam can be used on a Map<String, String> or\n MultiValueMap<String, String>\n method parameter to gain access to all request parameters.\n @RequestHeader annotated parameters for access to\n specific Servlet/Portlet request HTTP headers. Parameter values will be\n converted to the declared method argument type. Additionally,\n @RequestHeader can be used on a Map<String, String>,\n MultiValueMap<String, String>, or\n HttpHeaders method parameter to\n gain access to all request headers.\n @RequestBody annotated parameters (Servlet-only)\n for access to the Servlet request HTTP contents. The request stream will be\n converted to the declared method argument type using\n message\n converters. Such parameters may optionally be annotated with @Valid\n and also support access to validation results through an\n Errors argument.\n Instead a MethodArgumentNotValidException\n exception is raised.\n @RequestPart annotated parameters\n (Servlet-only, @MVC 3.1-only)\n for access to the content\n of a part of "multipart/form-data" request. The request part stream will be\n converted to the declared method argument type using\n message\n converters. Such parameters may optionally be annotated with @Valid\n and support access to validation results through a\n Errors argument.\n Instead a MethodArgumentNotValidException\n exception is raised.\n @SessionAttribute annotated parameters for access\n to existing, permanent session attributes (e.g. user authentication object)\n as opposed to model attributes temporarily stored in the session as part of\n a controller workflow via SessionAttributes.\n @RequestAttribute annotated parameters for access\n to request attributes.\n HttpEntity<?> parameters\n (Servlet-only) for access to the Servlet request HTTP headers and contents.\n The request stream will be converted to the entity body using\n message\n converters.\n Map / Model /\n ModelMap for enriching the implicit model\n that will be exposed to the web view.\n RedirectAttributes\n (Servlet-only, @MVC 3.1-only) to specify the exact set of attributes\n to use in case of a redirect and also to add flash attributes (attributes\n stored temporarily on the server-side to make them available to the request\n after the redirect). RedirectAttributes is used instead of the\n implicit model if the method returns a "redirect:" prefixed view name or\n RedirectView.\n Command/form objects to bind parameters to: as bean properties or fields,\n with customizable type conversion, depending on InitBinder methods\n and/or the HandlerAdapter configuration - see the "webBindingInitializer"\n property on RequestMappingHandlerMethodAdapter.\n Such command objects along with their validation results will be exposed\n as model attributes, by default using the non-qualified command class name\n in property notation (e.g. "orderAddress" for type "mypackage.OrderAddress").\n Specify a parameter-level @ModelAttribute annotation for\n declaring a specific model attribute name.\n Errors /\n BindingResult validation results\n for a preceding command/form object (the immediate preceding argument).\n SessionStatus status handle\n for marking form processing as complete (triggering the cleanup of session\n attributes that have been indicated by the @SessionAttributes\n annotation at the handler type level).\n UriComponentsBuilder\n (Servlet-only, @MVC 3.1-only)\n for preparing a URL relative to the current request's host, port, scheme,\n context path, and the literal part of the servlet mapping.\n \nNote: Java 8's java.util.Optional is supported\n as a method parameter type with annotations that provide a required\n attribute (e.g. @RequestParam, @RequestHeader, etc.). The use\n of java.util.Optional in those cases is equivalent to having\n required=false.\n\n The following return types are supported for handler methods:\n \nA ModelAndView object (Servlet MVC or Portlet MVC),\n with the model implicitly enriched with command objects and the results\n of @ModelAttribute annotated reference data accessor methods.\n A Model object, with the view name implicitly\n determined through a RequestToViewNameTranslator\n and the model implicitly enriched with command objects and the results\n of @ModelAttribute annotated reference data accessor methods.\n A Map object for exposing a model,\n with the view name implicitly determined through a\n RequestToViewNameTranslator\n and the model implicitly enriched with command objects and the results\n of @ModelAttribute annotated reference data accessor methods.\n A View object, with the\n model implicitly determined through command objects and\n @ModelAttribute annotated reference data accessor methods.\n The handler method may also programmatically enrich the model by\n declaring a Model argument (see above).\n A String value which is interpreted as view name,\n with the model implicitly determined through command objects and\n @ModelAttribute annotated reference data accessor methods.\n The handler method may also programmatically enrich the model by\n declaring a ModelMap argument\n (see above).\n @ResponseBody annotated methods (Servlet-only)\n for access to the Servlet response HTTP contents. The return value will\n be converted to the response stream using\n message\n converters.\n An HttpEntity<?> or\n ResponseEntity<?> object\n (Servlet-only) to access to the Servlet response HTTP headers and contents.\n The entity body will be converted to the response stream using\n message\n converters.\n An HttpHeaders object to\n return a response with no body.\nA Callable which is used by Spring MVC to obtain the return\n value asynchronously in a separate thread transparently managed by Spring MVC\n on behalf of the application.\n A DeferredResult\n which the application uses to produce a return value in a separate\n thread of its own choosing, as an alternative to returning a Callable.\n A ListenableFuture\n which the application uses to produce a return value in a separate\n thread of its own choosing, as an alternative to returning a Callable.\n A CompletionStage (implemented by\n CompletableFuture for example)\n which the application uses to produce a return value in a separate\n thread of its own choosing, as an alternative to returning a Callable.\n A ResponseBodyEmitter\n can be used to write multiple objects to the response asynchronously;\n also supported as the body within ResponseEntity.\nAn SseEmitter\n can be used to write Server-Sent Events to the response asynchronously;\n also supported as the body within ResponseEntity.\nA StreamingResponseBody\n can be used to write to the response asynchronously;\n also supported as the body within ResponseEntity.\nvoid if the method handles the response itself (by\n writing the response content directly, declaring an argument of type\n ServletResponse / HttpServletResponse\n / RenderResponse for that purpose)\n or if the view name is supposed to be implicitly determined through a\n RequestToViewNameTranslator\n (not declaring a response argument in the handler method signature;\n only applicable in a Servlet environment).\n Any other return type will be considered as single model attribute\n to be exposed to the view, using the attribute name specified through\n @ModelAttribute at the method level (or the default attribute\n name based on the return type's class name otherwise). The model will be\n implicitly enriched with command objects and the results of\n @ModelAttribute annotated reference data accessor methods.\n \nNOTE: @RequestMapping will only be processed if an\n an appropriate HandlerMapping-HandlerAdapter pair\n is configured. This is the case by default in both the\n DispatcherServlet and the DispatcherPortlet.\n However, if you are defining custom HandlerMappings or\n HandlerAdapters, then you need to add\n DefaultAnnotationHandlerMapping and\n AnnotationMethodHandlerAdapter to your configuration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html
RequestMethod	A										<section class="prog__container">Java 5 enumeration of HTTP request methods. Intended for use with the\n RequestMapping.method() attribute of the RequestMapping annotation.\n\n Note that, by default, DispatcherServlet\n supports GET, HEAD, POST, PUT, PATCH and DELETE only. DispatcherServlet will\n process TRACE and OPTIONS with the default HttpServlet behavior unless explicitly\n told to dispatch those request types as well: Check out the "dispatchOptionsRequest"\n and "dispatchTraceRequest" properties, switching them to "true" if necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html
RequestParam	A										<section class="prog__container">Annotation which indicates that a method parameter should be bound to a web\n request parameter.\n\n Supported for annotated handler methods in Servlet and Portlet environments.\n\n If the method parameter type is Map and a request parameter name\n is specified, then the request parameter value is converted to a Map\n assuming an appropriate conversion strategy is available.\n\n If the method parameter is Map<String, String> or\n MultiValueMap<String, String>\n and a parameter name is not specified, then the map parameter is populated\n with all request parameter names and values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html
RequestPart	A										<section class="prog__container">Annotation that can be used to associate the part of a "multipart/form-data" request\n with a method argument.\n\n Supported method argument types include MultipartFile\n in conjunction with Spring's MultipartResolver abstraction,\n javax.servlet.http.Part in conjunction with Servlet 3.0 multipart requests,\n or otherwise for any other method argument, the content of the part is passed through an\n HttpMessageConverter taking into consideration the 'Content-Type' header\n of the request part. This is analogous to what @RequestBody does to resolve\n an argument based on the content of a non-multipart regular request.\n\n Note that @RequestParam annotation can also be used to associate the\n part of a "multipart/form-data" request with a method argument supporting the same\n method argument types. The main difference is that when the method argument is not a\n String, @RequestParam relies on type conversion via a registered\n Converter or PropertyEditor while @RequestPart relies\n on HttpMessageConverters taking into consideration the 'Content-Type' header\n of the request part. @RequestParam is likely to be used with name-value form\n fields while @RequestPart is likely to be used with parts containing more\n complex content (e.g. JSON, XML).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestPart.html
ResponseBody	A										<section class="prog__container">Annotation that indicates a method return value should be bound to the web\n response body. Supported for annotated handler methods in Servlet environments.\n\n As of version 4.0 this annotation can also be added on the type level in\n which case it is inherited and does not need to be added on the method level.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html
ResponseStatus	A										<section class="prog__container">Marks a method or exception class with the status code() and\n reason() that should be returned.\n\n The status code is applied to the HTTP response when the handler\n method is invoked and overrides status information set by other means,\n like ResponseEntity or "redirect:".\n\n Warning: when using this annotation on an exception\n class, or when setting the reason attribute of this annotation,\n the HttpServletResponse.sendError method will be used.\n\n With HttpServletResponse.sendError, the response is considered\n complete and should not be written to any further. Furthermore, the Servlet\n container will typically write an HTML error page therefore making the\n use of a reason unsuitable for REST APIs. For such cases it is\n preferable to use a ResponseEntity as\n a return type and avoid the use of @ResponseStatus altogether.\n\n Note that a controller class may also be annotated with\n @ResponseStatus and is then inherited by all @RequestMapping\n methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ResponseStatus.html
RestController	A										<section class="prog__container">A convenience annotation that is itself annotated with\n @Controller and @ResponseBody.\n \n Types that carry this annotation are treated as controllers where\n @RequestMapping methods assume\n @ResponseBody semantics by default.\n\n NOTE: @RestController is processed if an appropriate\n HandlerMapping-HandlerAdapter pair is configured such as the\n RequestMappingHandlerMapping-RequestMappingHandlerAdapter\n pair which are the default in the MVC Java config and the MVC namespace.\n In particular @RestController is not supported with the\n DefaultAnnotationHandlerMapping-AnnotationMethodHandlerAdapter\n pair both of which are also deprecated.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html
RestControllerAdvice	A										<section class="prog__container">A convenience annotation that is itself annotated with\n @ControllerAdvice\n and @ResponseBody.\n\n Types that carry this annotation are treated as controller advice where\n @ExceptionHandler methods assume\n @ResponseBody semantics by default.\n\n NOTE: @RestControllerAdvice is processed if an appropriate\n HandlerMapping-HandlerAdapter pair is configured such as the\n RequestMappingHandlerMapping-RequestMappingHandlerAdapter pair\n which are the default in the MVC Java config and the MVC namespace.\n In particular @RestControllerAdvice is not supported with the\n DefaultAnnotationHandlerMapping-AnnotationMethodHandlerAdapter\n pair both of which are also deprecated.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestControllerAdvice.html
SessionAttribute	A										<section class="prog__container">Annotation to bind a method parameter to a session attribute.\n\n The main motivation is to provide convenient access to existing, permanent\n session attributes (e.g. user authentication object) with an optional/required\n check and a cast to the target method parameter type.\n\n For use cases that require adding or removing session attributes consider\n injecting org.springframework.web.context.request.WebRequest or\n javax.servlet.http.HttpSession into the controller method.\n\n For temporary storage of model attributes in the session as part of the\n workflow for a controller, consider using SessionAttributes instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/SessionAttribute.html
SessionAttributes	A										<section class="prog__container">Annotation that indicates the session attributes that a specific handler uses.\n\n This will typically list the names of model attributes which should be\n transparently stored in the session or some conversational storage,\n serving as form-backing beans. Declared at the type level, applying\n to the model attributes that the annotated handler class operates on.\n\n NOTE: Session attributes as indicated using this annotation\n correspond to a specific handler's model attributes, getting transparently\n stored in a conversational session. Those attributes will be removed once\n the handler indicates completion of its conversational session. Therefore,\n use this facility for such conversational attributes which are supposed\n to be stored in the session temporarily during the course of a\n specific handler's conversation.\n\n For permanent session attributes, e.g. a user authentication object,\n use the traditional session.setAttribute method instead.\n Alternatively, consider using the attribute management capabilities of the\n generic WebRequest interface.\n\n NOTE: When using controller interfaces (e.g. for AOP proxying),\n make sure to consistently put all your mapping annotations —\n such as @RequestMapping and @SessionAttributes — on\n the controller interface rather than on the implementation class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/SessionAttributes.html
ValueConstants	A										<section class="prog__container">Common value constants shared between bind annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ValueConstants.html
HandlerMethodInvocationException	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of the HandlerMethod-based MVC infrastructure\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/support/HandlerMethodInvocationException.html
HandlerMethodInvoker	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of the HandlerMethod-based MVC infrastructure\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.html
HandlerMethodResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of the HandlerMethod-based MVC infrastructure\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/support/HandlerMethodResolver.html
ConfigurableWebBindingInitializer	A										<section class="prog__container">Convenient WebBindingInitializer for declarative configuration\n in a Spring application context. Allows for reusing pre-configured\n initializers with multiple controller/handlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/ConfigurableWebBindingInitializer.html
DefaultDataBinderFactory	A										<section class="prog__container">Create a WebRequestDataBinder instance and initialize it with a\n WebBindingInitializer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/DefaultDataBinderFactory.html
DefaultSessionAttributeStore	A										<section class="prog__container">Default implementation of the SessionAttributeStore interface,\n storing the attributes in the WebRequest session (i.e. HttpSession\n or PortletSession).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/DefaultSessionAttributeStore.html
SessionAttributeStore	A										<section class="prog__container">Strategy interface for storing model attributes in a backend session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/SessionAttributeStore.html
SessionStatus	A										<section class="prog__container">Simple interface that can be injected into handler methods, allowing them to\n signal that their session processing is complete. The handler invoker may\n then follow up with appropriate cleanup, e.g. of session attributes which\n have been implicitly created during this handler's processing (according to\n the\n @SessionAttributes\n annotation).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/SessionStatus.html
SimpleSessionStatus	A										<section class="prog__container">Simple implementation of the SessionStatus interface,\n keeping the complete flag as an instance variable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/SimpleSessionStatus.html
SpringWebConstraintValidatorFactory	A										<section class="prog__container">JSR-303 ConstraintValidatorFactory implementation that delegates to\n the current Spring WebApplicationContext for creating autowired\n ConstraintValidator instances.\n\n In contrast to\n SpringConstraintValidatorFactory,\n this variant is meant for declarative use in a standard validation.xml file,\n e.g. in combination with JAX-RS or JAX-WS.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/SpringWebConstraintValidatorFactory.html
WebArgumentResolver	A										<section class="prog__container">SPI for resolving custom arguments for a specific handler method parameter.\n Typically implemented to detect special parameter types, resolving\n well-known argument values for them.\n\n A typical implementation could look like as follows:\n\n \n public class MySpecialArgumentResolver implements WebArgumentResolver {\n\n   public Object resolveArgument(MethodParameter methodParameter, NativeWebRequest webRequest) {\n     if (methodParameter.getParameterType().equals(MySpecialArg.class)) {\n       return new MySpecialArg("myValue");\n     }\n     return UNRESOLVED;\n   }\n }</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/WebArgumentResolver.html
WebBindingInitializer	A										<section class="prog__container">Callback interface for initializing a WebDataBinder\n for performing data binding in the context of a specific web request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/WebBindingInitializer.html
WebDataBinderFactory	A										<section class="prog__container">A factory for creating a WebDataBinder instance for a named target object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/WebDataBinderFactory.html
WebRequestDataBinder	A										<section class="prog__container">Special DataBinder to perform data binding\n from web request parameters to JavaBeans, including support for multipart files.\n\n See the DataBinder/WebDataBinder superclasses for customization options,\n which include specifying allowed/required fields, and registering custom\n property editors.\n\n Can also used for manual data binding in custom web controllers or interceptors\n that build on Spring's WebRequest\n abstraction: e.g. in a WebRequestInterceptor\n implementation. Simply instantiate a WebRequestDataBinder for each binding\n process, and invoke bind with the current WebRequest as argument:\n\n \n MyBean myBean = new MyBean();\n // apply binder to custom target object\n WebRequestDataBinder binder = new WebRequestDataBinder(myBean);\n // register custom editors, if desired\n binder.registerCustomEditor(...);\n // trigger actual binding of request parameters\n binder.bind(request);\n // optionally evaluate binding errors\n Errors errors = binder.getErrors();\n ...</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/support/WebRequestDataBinder.html
AsyncRequestCallback	A										<section class="prog__container">Callback interface for code that operates on an AsyncClientHttpRequest. Allows\n to manipulate the request headers, and write to the request body.\n\n Used internally by the AsyncRestTemplate, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/AsyncRequestCallback.html
AsyncRestOperations	A										<section class="prog__container">Interface specifying a basic set of asynchronous RESTful operations. Implemented by\n AsyncRestTemplate. Not often used directly, but a useful option to enhance\n testability, as it can easily be mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/AsyncRestOperations.html
AsyncRestTemplate	A										<section class="prog__container">Spring's central class for asynchronous client-side HTTP access.\n Exposes similar methods as RestTemplate, but returns ListenableFuture\n wrappers as opposed to concrete results.\n\n The AsyncRestTemplate exposes a synchronous RestTemplate via the\n getRestOperations() method, and it shares its\n error handler and\n message converters with this\n RestTemplate.\n\n Note: by default AsyncRestTemplate relies on\n standard JDK facilities to establish HTTP connections. You can switch to use\n a different HTTP library such as Apache HttpComponents, Netty, and OkHttp by\n using a constructor accepting an AsyncClientHttpRequestFactory.\n\n For more information, please refer to the RestTemplate API documentation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/AsyncRestTemplate.html
DefaultResponseErrorHandler	A										<section class="prog__container">Default implementation of the ResponseErrorHandler interface.\n\n This error handler checks for the status code on the ClientHttpResponse: any\n code with series HttpStatus.Series.CLIENT_ERROR or\n HttpStatus.Series.SERVER_ERROR is considered to be an\n error. This behavior can be changed by overriding the hasError(HttpStatus)\n method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/DefaultResponseErrorHandler.html
HttpClientErrorException	A										<section class="prog__container">Exception thrown when an HTTP 4xx is received.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/HttpClientErrorException.html
HttpMessageConverterExtractor	A										<section class="prog__container">Response extractor that uses the given entity converters\n to convert the response into a type T.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/HttpMessageConverterExtractor.html
HttpServerErrorException	A										<section class="prog__container">Exception thrown when an HTTP 5xx is received.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/HttpServerErrorException.html
HttpStatusCodeException	A										<section class="prog__container">Abstract base class for exceptions based on an HttpStatus.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/HttpStatusCodeException.html
RequestCallback	A										<section class="prog__container">Callback interface for code that operates on a ClientHttpRequest. Allows to manipulate the request\n headers, and write to the request body.\n\n Used internally by the RestTemplate, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RequestCallback.html
ResourceAccessException	A										<section class="prog__container">Exception thrown when an I/O error occurs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/ResourceAccessException.html
ResponseErrorHandler	A										<section class="prog__container">Strategy interface used by the RestTemplate to determine whether a particular response has an error or not.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/ResponseErrorHandler.html
ResponseExtractor	A										<section class="prog__container">Generic callback interface used by RestTemplate's retrieval methods\n Implementations of this interface perform the actual work of extracting data\n from a ClientHttpResponse, but don't need to worry about exception\n handling or closing resources.\n\n Used internally by the RestTemplate, but also useful for application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/ResponseExtractor.html
RestClientException	A										<section class="prog__container">Base class for exceptions thrown by RestTemplate whenever it encounters\n client-side HTTP errors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestClientException.html
RestClientResponseException	A										<section class="prog__container">Common base class for exceptions that contain actual HTTP response data.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestClientResponseException.html
RestOperations	A										<section class="prog__container">Interface specifying a basic set of RESTful operations. Implemented by RestTemplate.\n Not often used directly, but a useful option to enhance testability, as it can easily\n be mocked or stubbed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestOperations.html
RestTemplate	A										<section class="prog__container">Spring's central class for synchronous client-side HTTP access.\n It simplifies communication with HTTP servers, and enforces RESTful principles.\n It handles HTTP connections, leaving application code to provide URLs\n (with possible template variables) and extract results.\n\n Note: by default the RestTemplate relies on standard JDK\n facilities to establish HTTP connections. You can switch to use a different\n HTTP library such as Apache HttpComponents, Netty, and OkHttp through the\n HttpAccessor.setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory) property.\n\n The main entry points of this template are the methods named after the six main HTTP methods:\n \nHTTP methodRestTemplate methods\nDELETEdelete(java.lang.String, java.lang.Object...)\nGETgetForObject(java.lang.String, java.lang.Class<T>, java.lang.Object...)\ngetForEntity(java.lang.String, java.lang.Class<T>, java.lang.Object...)\nHEADheadForHeaders(java.lang.String, java.lang.Object...)\nOPTIONSoptionsForAllow(java.lang.String, java.lang.Object...)\nPOSTpostForLocation(java.lang.String, java.lang.Object, java.lang.Object...)\npostForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...)\nPUTput(java.lang.String, java.lang.Object, java.lang.Object...)\nanyexchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...)\nexecute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.lang.Object...) \nIn addition the exchange and execute methods are generalized versions of\n the above methods and can be used to support additional, less frequent combinations (e.g.\n HTTP PATCH, HTTP PUT with response body, etc.). Note however that the underlying HTTP\n library used must also support the desired combination.\n\n For each HTTP method there are three variants: two accept a URI template string\n and URI variables (array or map) while a third accepts a URI.\n Note that for URI templates it is assumed encoding is necessary, e.g.\n restTemplate.getForObject("http://example.com/hotel list") becomes\n "http://example.com/hotel%20list". This also means if the URI template\n or URI variables are already encoded, double encoding will occur, e.g.\n http://example.com/hotel%20list becomes\n http://example.com/hotel%2520list). To avoid that use a URI method\n variant to provide (or re-use) a previously encoded URI. To prepare such an URI\n with full control over encoding, consider using\n UriComponentsBuilder.\n\n Internally the template uses HttpMessageConverter instances to\n convert HTTP messages to and from POJOs. Converters for the main mime types\n are registered by default but you can also register additional converters\n via setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>).\n\n This template uses a\n SimpleClientHttpRequestFactory and a\n DefaultResponseErrorHandler as default strategies for creating HTTP\n connections or handling HTTP errors, respectively. These defaults can be overridden\n through HttpAccessor.setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory) and setErrorHandler(org.springframework.web.client.ResponseErrorHandler) respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html
UnknownHttpStatusCodeException	A										<section class="prog__container">Exception thrown when an unknown (or custom) HTTP status code is received.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/UnknownHttpStatusCodeException.html
RestGatewaySupport	A										<section class="prog__container">Convenient super class for application classes that need REST access.\n\n Requires a ClientHttpRequestFactory or a RestTemplate instance to be set.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/support/RestGatewaySupport.html
AbstractContextLoaderInitializer	A										<section class="prog__container">Convenient base class for WebApplicationInitializer implementations\n that register a ContextLoaderListener in the servlet context.\n\n The only method required to be implemented by subclasses is\n createRootApplicationContext(), which gets invoked from\n registerContextLoaderListener(ServletContext).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/AbstractContextLoaderInitializer.html
ConfigurableWebApplicationContext	A										<section class="prog__container">Interface to be implemented by configurable web application contexts.\n Supported by ContextLoader and\n FrameworkServlet.\n\n Note: The setters of this interface need to be called before an\n invocation of the ConfigurableApplicationContext.refresh() method inherited from\n ConfigurableApplicationContext.\n They do not cause an initialization of the context on their own.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ConfigurableWebApplicationContext.html
ConfigurableWebEnvironment	A										<section class="prog__container">Specialization of ConfigurableEnvironment allowing initialization of\n servlet-related PropertySource objects at the\n earliest moment that the ServletContext and (optionally) ServletConfig\n become available.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ConfigurableWebEnvironment.html
ContextCleanupListener	A										<section class="prog__container">Web application listener that cleans up remaining disposable attributes\n in the ServletContext, i.e. attributes which implement DisposableBean\n and haven't been removed before. This is typically used for destroying objects\n in "application" scope, for which the lifecycle implies destruction at the\n very end of the web application's shutdown phase.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ContextCleanupListener.html
ContextLoader	A										<section class="prog__container">Performs the actual initialization work for the root application context.\n Called by ContextLoaderListener.\n\n Looks for a "contextClass" parameter at the\n web.xml context-param level to specify the context class type, falling\n back to XmlWebApplicationContext\n if not found. With the default ContextLoader implementation, any context class\n specified needs to implement the ConfigurableWebApplicationContext interface.\n\n Processes a "contextConfigLocation" context-param\n and passes its value to the context instance, parsing it into potentially multiple\n file paths which can be separated by any number of commas and spaces, e.g.\n "WEB-INF/applicationContext1.xml, WEB-INF/applicationContext2.xml".\n Ant-style path patterns are supported as well, e.g.\n "WEB-INF/*Context.xml,WEB-INF/spring*.xml" or "WEB-INF/**/*Context.xml".\n If not explicitly specified, the context implementation is supposed to use a\n default location (with XmlWebApplicationContext: "/WEB-INF/applicationContext.xml").\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in previously loaded files, at least when using one of\n Spring's default ApplicationContext implementations. This can be leveraged\n to deliberately override certain bean definitions via an extra XML file.\n\n Above and beyond loading the root application context, this class can optionally\n load or obtain and hook up a shared parent context to the root application context.\n See the loadParentContext(ServletContext) method for more information.\n\n As of Spring 3.1, ContextLoader supports injecting the root web\n application context via the ContextLoader(WebApplicationContext)\n constructor, allowing for programmatic configuration in Servlet 3.0+ environments.\n See WebApplicationInitializer for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ContextLoader.html
ContextLoaderListener	A										<section class="prog__container">Bootstrap listener to start up and shut down Spring's root WebApplicationContext.\n Simply delegates to ContextLoader as well as to ContextCleanupListener.\n\n This listener should be registered after Log4jConfigListener\n in web.xml, if the latter is used.\n\n As of Spring 3.1, ContextLoaderListener supports injecting the root web\n application context via the ContextLoaderListener(WebApplicationContext)\n constructor, allowing for programmatic configuration in Servlet 3.0+ environments.\n See WebApplicationInitializer for usage examples.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ContextLoaderListener.html
ServletConfigAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified of the\n ServletConfig (typically determined by the WebApplicationContext)\n that it runs in.\n\n Note: Only satisfied if actually running within a Servlet-specific\n WebApplicationContext. Otherwise, no ServletConfig will be set.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ServletConfigAware.html
ServletContextAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified of the\n ServletContext (typically determined by the WebApplicationContext)\n that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/ServletContextAware.html
WebApplicationContext	A										<section class="prog__container">Interface to provide configuration for a web application. This is read-only while\n the application is running, but may be reloaded if the implementation supports this.\n\n This interface adds a getServletContext() method to the generic\n ApplicationContext interface, and defines a well-known application attribute name\n that the root context must be bound to in the bootstrap process.\n\n Like generic application contexts, web application contexts are hierarchical.\n There is a single root context per application, while each servlet in the application\n (including a dispatcher servlet in the MVC framework) has its own child context.\n\n In addition to standard application context lifecycle capabilities,\n WebApplicationContext implementations need to detect ServletContextAware\n beans and invoke the setServletContext method accordingly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/WebApplicationContext.html
ApplicationScope	A										<section class="prog__container">@ApplicationScope is a specialization of @Scope for a\n component whose lifecycle is bound to the current web application.\n\n Specifically, @ApplicationScope is a composed annotation that\n acts as a shortcut for @Scope("application") with the default\n proxyMode() set to TARGET_CLASS.\n\n @ApplicationScope may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/annotation/ApplicationScope.html
RequestScope	A										<section class="prog__container">@RequestScope is a specialization of @Scope for a\n component whose lifecycle is bound to the current web request.\n\n Specifically, @RequestScope is a composed annotation that\n acts as a shortcut for @Scope("request") with the default\n proxyMode() set to TARGET_CLASS.\n\n @RequestScope may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/annotation/RequestScope.html
SessionScope	A										<section class="prog__container">@SessionScope is a specialization of @Scope for a\n component whose lifecycle is bound to the current web session.\n\n Specifically, @SessionScope is a composed annotation that\n acts as a shortcut for @Scope("session") with the default\n proxyMode() set to TARGET_CLASS.\n\n @SessionScope may be used as a meta-annotation to create custom\n composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/annotation/SessionScope.html
AbstractRequestAttributes	A										<section class="prog__container">Abstract support class for RequestAttributes implementations,\n offering a request completion mechanism for request-specific destruction\n callbacks and for updating accessed session attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/AbstractRequestAttributes.html
AbstractRequestAttributesScope	A										<section class="prog__container">Abstract Scope implementation that reads from a particular scope\n in the current thread-bound RequestAttributes object.\n\n Subclasses simply need to implement getScope() to instruct\n this class which RequestAttributes scope to read attributes from.\n\n Subclasses may wish to override the get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>) and remove(java.lang.String)\n methods to add synchronization around the call back into this super class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/AbstractRequestAttributesScope.html
AsyncWebRequestInterceptor	A										<section class="prog__container">Extends WebRequestInterceptor with a callback method invoked during\n asynchronous request handling.\n\n When a handler starts asynchronous request handling, the DispatcherServlet\n exits without invoking postHandle and afterCompletion, as it\n normally does, since the results of request handling (e.g. ModelAndView) are\n not available in the current thread and handling is not yet complete.\n In such scenarios, the afterConcurrentHandlingStarted(WebRequest)\n method is invoked instead allowing implementations to perform tasks such as\n cleaning up thread bound attributes.\n\n When asynchronous handling completes, the request is dispatched to the\n container for further processing. At this stage the DispatcherServlet invokes\n preHandle, postHandle and afterCompletion as usual.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/AsyncWebRequestInterceptor.html
DestructionCallbackBindingListener	A										<section class="prog__container">Adapter that implements the Servlet HttpSessionBindingListener interface,\n wrapping a session destruction callback.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/DestructionCallbackBindingListener.html
FacesRequestAttributes	A										<section class="prog__container">RequestAttributes adapter for a JSF FacesContext.\n Used as default in a JSF environment, wrapping the current FacesContext.\n\n NOTE: In contrast to ServletRequestAttributes, this variant does\n not support destruction callbacks for scoped attributes, neither for the\n request scope nor for the session scope. If you rely on such implicit destruction\n callbacks, consider defining a Spring RequestContextListener in your\n web.xml.\n\n Requires JSF 2.0 or higher, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/FacesRequestAttributes.html
FacesWebRequest	A										<section class="prog__container">WebRequest adapter for a JSF FacesContext.\n\n Requires JSF 2.0 or higher, as of Spring 4.0.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/FacesWebRequest.html
Log4jNestedDiagnosticContextInterceptor	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of Apache Log4j 2\n (following Apache's EOL declaration for log4j 1.x)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/Log4jNestedDiagnosticContextInterceptor.html
NativeWebRequest	A										<section class="prog__container">Extension of the WebRequest interface, exposing the\n native request and response objects in a generic fashion.\n\n Mainly intended for framework-internal usage,\n in particular for generic argument resolution code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/NativeWebRequest.html
RequestAttributes	A										<section class="prog__container">Abstraction for accessing attribute objects associated with a request.\n Supports access to request-scoped attributes as well as to session-scoped\n attributes, with the optional notion of a "global session".\n\n Can be implemented for any kind of request/session mechanism,\n in particular for servlet requests and portlet requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/RequestAttributes.html
RequestContextHolder	A										<section class="prog__container">Holder class to expose the web request in the form of a thread-bound\n RequestAttributes object. The request will be inherited\n by any child threads spawned by the current thread if the\n inheritable flag is set to true.\n\n Use RequestContextListener or\n RequestContextFilter to expose\n the current web request. Note that\n DispatcherServlet and\n DispatcherPortlet already\n expose the current request by default.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/RequestContextHolder.html
RequestContextListener	A										<section class="prog__container">Servlet listener that exposes the request to the current thread,\n through both LocaleContextHolder and\n RequestContextHolder. To be registered as listener in web.xml.\n\n Alternatively, Spring's RequestContextFilter\n and Spring's DispatcherServlet also expose\n the same request context to the current thread. In contrast to this listener,\n advanced options are available there (e.g. "threadContextInheritable").\n\n This listener is mainly for use with third-party servlets, e.g. the JSF FacesServlet.\n Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/RequestContextListener.html
RequestScope	A										<section class="prog__container">Request-backed Scope\n implementation.\n\n Relies on a thread-bound RequestAttributes instance, which\n can be exported through RequestContextListener,\n RequestContextFilter or\n DispatcherServlet.\n\n This Scope will also work for Portlet environments,\n through an alternate RequestAttributes implementation\n (as exposed out-of-the-box by Spring's\n DispatcherPortlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/RequestScope.html
ServletRequestAttributes	A										<section class="prog__container">Servlet-based implementation of the RequestAttributes interface.\n\n Accesses objects from servlet request and HTTP session scope,\n with no distinction between "session" and "global session".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/ServletRequestAttributes.html
ServletWebRequest	A										<section class="prog__container">WebRequest adapter for an HttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/ServletWebRequest.html
SessionScope	A										<section class="prog__container">Session-backed Scope\n implementation.\n\n Relies on a thread-bound RequestAttributes instance, which\n can be exported through RequestContextListener,\n RequestContextFilter or\n DispatcherServlet.\n\n This Scope will also work for Portlet environments,\n through an alternate RequestAttributes implementation\n (as exposed out-of-the-box by Spring's\n DispatcherPortlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/SessionScope.html
WebRequest	A										<section class="prog__container">Generic interface for a web request. Mainly intended for generic web\n request interceptors, giving them access to general request metadata,\n not for actual handling of the request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/WebRequest.html
WebRequestInterceptor	A										<section class="prog__container">Interface for general web request interception. Allows for being applied\n to Servlet request as well as Portlet request environments, by building\n on the WebRequest abstraction.\n\n This interface assumes MVC-style request processing: A handler gets executed,\n exposes a set of model objects, then a view gets rendered based on that model.\n Alternatively, a handler may also process the request completely, with no\n view to be rendered.\n\n In an async processing scenario, the handler may be executed in a separate\n thread while the main thread exits without rendering or invoking the\n postHandle and afterCompletion callbacks. When concurrent\n handler execution completes, the request is dispatched back in order to\n proceed with rendering the model and all methods of this contract are invoked\n again. For further options and comments see\n org.springframework.web.context.request.async.AsyncWebRequestInterceptor\nThis interface is deliberately minimalistic to keep the dependencies of\n generic request interceptors as minimal as feasible.\n\n NOTE: While this interceptor is applied to the entire request processing\n in a Servlet environment, it is by default only applied to the render phase\n in a Portlet environment, preparing and rendering a Portlet view. To apply\n WebRequestInterceptors to the action phase as well, set the HandlerMapping's\n "applyWebRequestInterceptorsToRenderPhaseOnly" flag to "false". Alternatively,\n consider using the Portlet-specific HandlerInterceptor mechanism for such needs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/WebRequestInterceptor.html
AsyncRequestTimeoutException	A										<section class="prog__container">Exception to be thrown when an async request times out.\n Alternatively an applications can register a\n DeferredResultProcessingInterceptor or a\n CallableProcessingInterceptor to handle the timeout through\n the MVC Java config or the MVC XML namespace or directly through properties\n of the RequestMappingHandlerAdapter.\n\n By default the exception will be handled as a 503 error.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/AsyncRequestTimeoutException.html
AsyncWebRequest	A										<section class="prog__container">Extends NativeWebRequest with methods for asynchronous request processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/AsyncWebRequest.html
CallableProcessingInterceptor	A										<section class="prog__container">Intercepts concurrent request handling, where the concurrent result is\n obtained by executing a Callable on behalf of the application with\n an AsyncTaskExecutor.\n\n A CallableProcessingInterceptor is invoked before and after the\n invocation of the Callable task in the asynchronous thread, as well\n as on timeout from a container thread, or after completing for any reason\n including a timeout or network error.\n\n As a general rule exceptions raised by interceptor methods will cause\n async processing to resume by dispatching back to the container and using\n the Exception instance as the concurrent result. Such exceptions will then\n be processed through the HandlerExceptionResolver mechanism.\n\n The afterTimeout method\n can select a value to be used to resume processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/CallableProcessingInterceptor.html
CallableProcessingInterceptorAdapter	A										<section class="prog__container">Abstract adapter class for the CallableProcessingInterceptor interface,\n for simplified implementation of individual methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.html
DeferredResult.DeferredResultHandler	A										<section class="prog__container">Handles a DeferredResult value when set.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.DeferredResultHandler.html
DeferredResult	A										<section class="prog__container">DeferredResult provides an alternative to using a Callable for\n asynchronous request processing. While a Callable is executed concurrently\n on behalf of the application, with a DeferredResult the application can\n produce the result from a thread of its choice.\n\n Subclasses can extend this class to easily associate additional data or behavior\n with the DeferredResult. For example, one might want to associate the user\n used to create the DeferredResult by extending the class and adding an\n additional property for the user. In this way, the user could easily be accessed\n later without the need to use a data structure to do the mapping.\n\n An example of associating additional behavior to this class might be realized\n by extending the class to implement an additional interface. For example, one\n might want to implement Comparable so that when the DeferredResult\n is added to a PriorityQueue it is handled in the correct order.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html
DeferredResultProcessingInterceptor	A										<section class="prog__container">Intercepts concurrent request handling, where the concurrent result is\n obtained by waiting for a DeferredResult to be set from a thread\n chosen by the application (e.g. in response to some external event).\n\n A DeferredResultProcessingInterceptor is invoked before the start\n of async processing, after the DeferredResult is set as well as on\n timeout, or after completing for any reason including a timeout or network\n error.\n\n As a general rule exceptions raised by interceptor methods will cause\n async processing to resume by dispatching back to the container and using\n the Exception instance as the concurrent result. Such exceptions will then\n be processed through the HandlerExceptionResolver mechanism.\n\n The afterTimeout\n method can set the DeferredResult in order to resume processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResultProcessingInterceptor.html
DeferredResultProcessingInterceptorAdapter	A										<section class="prog__container">Abstract adapter class for the DeferredResultProcessingInterceptor\n interface for simplified implementation of individual methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResultProcessingInterceptorAdapter.html
NoSupportAsyncWebRequest	A										<section class="prog__container">An AsyncWebRequest to use when there is no underlying async support.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/NoSupportAsyncWebRequest.html
StandardServletAsyncWebRequest	A										<section class="prog__container">A Servlet 3.0 implementation of AsyncWebRequest.\n\n The servlet and all filters involved in an async request must have async\n support enabled using the Servlet API or by adding an\n <async-supported>true</async-supported> element to servlet and filter\n declarations in web.xml.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.html
TimeoutCallableProcessingInterceptor	A										<section class="prog__container">Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not\n already committed. As of 4.2.8 this is done indirectly by setting the result\n to an AsyncRequestTimeoutException which is then handled by\n Spring MVC's default exception handling as a 503 error.\n\n Registered at the end, after all other interceptors and\n therefore invoked only if no other interceptor handles the timeout.\n\n Note that according to RFC 7231, a 503 without a 'Retry-After' header is\n interpreted as a 500 error and the client should not retry. Applications\n can install their own interceptor to handle a timeout and add a 'Retry-After'\n header if necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/TimeoutCallableProcessingInterceptor.html
TimeoutDeferredResultProcessingInterceptor	A										<section class="prog__container">Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not\n already committed. As of 4.2.8 this is done indirectly by returning\n AsyncRequestTimeoutException as the result of processing which is\n then handled by Spring MVC's default exception handling as a 503 error.\n\n Registered at the end, after all other interceptors and\n therefore invoked only if no other interceptor handles the timeout.\n\n Note that according to RFC 7231, a 503 without a 'Retry-After' header is\n interpreted as a 500 error and the client should not retry. Applications\n can install their own interceptor to handle a timeout and add a 'Retry-After'\n header if necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/TimeoutDeferredResultProcessingInterceptor.html
WebAsyncManager	A										<section class="prog__container">The central class for managing asynchronous request processing, mainly intended\n as an SPI and not typically used directly by application classes.\n\n An async scenario starts with request processing as usual in a thread (T1).\n Concurrent request handling can be initiated by calling\n startCallableProcessing or\n startDeferredResultProcessing,\n both of which produce a result in a separate thread (T2). The result is saved\n and the request dispatched to the container, to resume processing with the saved\n result in a third thread (T3). Within the dispatched thread (T3), the saved\n result can be accessed via getConcurrentResult() or its presence\n detected via hasConcurrentResult().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/WebAsyncManager.html
WebAsyncTask	A										<section class="prog__container">Holder for a Callable, a timeout value, and a task executor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/WebAsyncTask.html
WebAsyncUtils	A										<section class="prog__container">Utility methods related to processing asynchronous web requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/WebAsyncUtils.html
AbstractRefreshableWebApplicationContext	A										<section class="prog__container">AbstractRefreshableApplicationContext\n subclass which implements the\n ConfigurableWebApplicationContext\n interface for web environments. Provides a "configLocations" property,\n to be populated through the ConfigurableWebApplicationContext interface\n on web application startup.\n\n This class is as easy to subclass as AbstractRefreshableApplicationContext:\n All you need to implements is the AbstractRefreshableApplicationContext.loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory) method;\n see the superclass javadoc for details. Note that implementations are supposed\n to load bean definitions from the files specified by the locations returned\n by the getConfigLocations() method.\n\n Interprets resource paths as servlet context resources, i.e. as paths beneath\n the web application root. Absolute paths, e.g. for files outside the web app root,\n can be accessed via "file:" URLs, as implemented by\n DefaultResourceLoader.\n\n In addition to the special beans detected by\n AbstractApplicationContext,\n this class detects a bean of type ThemeSource\n in the context, under the special bean name "themeSource".\n\n This is the web context to be subclassed for a different bean definition format.\n Such a context implementation can be specified as "contextClass" context-param\n for ContextLoader or as "contextClass"\n init-param for FrameworkServlet,\n replacing the default XmlWebApplicationContext. It will then automatically\n receive the "contextConfigLocation" context-param or init-param, respectively.\n\n Note that WebApplicationContext implementations are generally supposed\n to configure themselves based on the configuration received through the\n ConfigurableWebApplicationContext interface. In contrast, a standalone\n application context might allow for configuration in custom startup code\n (for example, GenericApplicationContext).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.html
AnnotationConfigWebApplicationContext	A										<section class="prog__container">WebApplicationContext\n implementation which accepts annotated classes as input - in particular\n @Configuration-annotated\n classes, but also plain @Component\n classes and JSR-330 compliant classes using javax.inject annotations. Allows\n for registering classes one by one (specifying class names as config location) as well\n as for classpath scanning (specifying base packages as config location).\n\n This is essentially the equivalent of\n AnnotationConfigApplicationContext for a web environment.\n\n To make use of this application context, the\n "contextClass" context-param for\n ContextLoader and/or "contextClass" init-param for FrameworkServlet must be set to\n the fully-qualified name of this class.\n\n As of Spring 3.1, this class may also be directly instantiated and injected into\n Spring's DispatcherServlet or ContextLoaderListener when using the\n new WebApplicationInitializer\n code-based alternative to web.xml. See its Javadoc for details and usage examples.\n\n Unlike XmlWebApplicationContext, no default configuration class locations\n are assumed. Rather, it is a requirement to set the\n "contextConfigLocation"\n context-param for ContextLoader and/or "contextConfigLocation" init-param for\n FrameworkServlet.  The param-value may contain both fully-qualified\n class names and base packages to scan for components. See loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)\n for exact details on how these locations are processed.\n\n As an alternative to setting the "contextConfigLocation" parameter, users may\n implement an ApplicationContextInitializer and set the\n "contextInitializerClasses"\n context-param / init-param. In such cases, users should favor the AbstractApplicationContext.refresh()\n and scan(String...) methods over the AbstractRefreshableConfigApplicationContext.setConfigLocation(String)\n method, which is primarily for use by ContextLoader.\n\n Note: In case of multiple @Configuration classes, later @Bean\n definitions will override ones defined in earlier loaded files. This can be leveraged\n to deliberately override certain bean definitions via an extra Configuration class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html
ContextExposingHttpServletRequest	A										<section class="prog__container">HttpServletRequest decorator that makes all Spring beans in a\n given WebApplicationContext accessible as request attributes,\n through lazy checking once an attribute gets accessed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ContextExposingHttpServletRequest.html
GenericWebApplicationContext	A										<section class="prog__container">Subclass of GenericApplicationContext, suitable for web environments.\n\n Implements the\n ConfigurableWebApplicationContext,\n but is not intended for declarative setup in web.xml. Instead,\n it is designed for programmatic setup, for example for building nested contexts or\n for use within Spring 3.1 WebApplicationInitializers.\n\n If you intend to implement a WebApplicationContext that reads bean definitions\n from configuration files, consider deriving from AbstractRefreshableWebApplicationContext,\n reading the bean definitions in an implementation of the loadBeanDefinitions\n method.\nInterprets resource paths as servlet context resources, i.e. as paths beneath\n the web application root. Absolute paths, e.g. for files outside the web app root,\n can be accessed via "file:" URLs, as implemented by AbstractApplicationContext.\n\n In addition to the special beans detected by\n AbstractApplicationContext,\n this class detects a ThemeSource bean in the context, with the name "themeSource".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/GenericWebApplicationContext.html
GroovyWebApplicationContext	A										<section class="prog__container">WebApplicationContext implementation which takes\n its configuration from Groovy bean definition scripts and/or XML files, as understood by\n an GroovyBeanDefinitionReader.\n This is essentially the equivalent of\n GenericGroovyApplicationContext\n for a web environment.\n\n By default, the configuration will be taken from "/WEB-INF/applicationContext.groovy"\n for the root context, and "/WEB-INF/test-servlet.groovy" for a context with the namespace\n "test-servlet" (like for a DispatcherServlet instance with the servlet-name "test").\n\n The config location defaults can be overridden via the "contextConfigLocation"\n context-param of ContextLoader and servlet\n init-param of FrameworkServlet. Config locations\n can either denote concrete files like "/WEB-INF/context.groovy" or Ant-style patterns\n like "/WEB-INF/*-context.groovy" (see PathMatcher\n javadoc for pattern details). Note that ".xml" files will be parsed as XML content;\n all other kinds of resources will be parsed as Groovy scripts.\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files. This can be leveraged to\n deliberately override certain bean definitions via an extra Groovy script.\n\n For a WebApplicationContext that reads in a different bean definition format,\n create an analogous subclass of AbstractRefreshableWebApplicationContext.\n Such a context implementation can be specified as "contextClass" context-param\n for ContextLoader or "contextClass" init-param for FrameworkServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/GroovyWebApplicationContext.html
HttpRequestHandlerServlet	A										<section class="prog__container">Simple HttpServlet that delegates to an HttpRequestHandler bean defined\n in Spring's root web application context. The target bean name must match the\n HttpRequestHandlerServlet servlet-name as defined in web.xml.\n\n This can for example be used to expose a single Spring remote exporter,\n such as HttpInvokerServiceExporter\n or HessianServiceExporter,\n per HttpRequestHandlerServlet definition. This is a minimal alternative\n to defining remote exporters as beans in a DispatcherServlet context\n (with advanced mapping and interception facilities being available there).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/HttpRequestHandlerServlet.html
LiveBeansViewServlet	A										<section class="prog__container">Servlet variant of LiveBeansView's MBean exposure.\n\n Generates a JSON snapshot for current beans and their dependencies in\n all ApplicationContexts that live within the current web application.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/LiveBeansViewServlet.html
RequestHandledEvent	A										<section class="prog__container">Event raised when a request is handled within an ApplicationContext.\n\n Supported by Spring's own FrameworkServlet (through a specific\n ServletRequestHandledEvent subclass), but can also be raised by any\n other web component. Used, for example, by Spring's out-of-the-box\n PerformanceMonitorListener.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/RequestHandledEvent.html
ServletConfigPropertySource	A										<section class="prog__container">PropertySource that reads init parameters from a ServletConfig object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletConfigPropertySource.html
ServletContextAttributeExporter	A										<section class="prog__container">Exporter that takes Spring-defined objects and exposes them as\n ServletContext attributes. Usually, bean references will be used\n to export Spring-defined beans as ServletContext attributes.\n\n Useful to make Spring-defined beans available to code that is\n not aware of Spring at all, but rather just of the Servlet API.\n Client code can then use plain ServletContext attribute lookups\n to access those objects, despite them being defined in a Spring\n application context.\n\n Alternatively, consider using the WebApplicationContextUtils\n class to access Spring-defined beans via the WebApplicationContext\n interface. This makes client code aware of Spring API, of course.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextAttributeExporter.html
ServletContextAttributeFactoryBean	A										<section class="prog__container">FactoryBean that fetches a specific, existing ServletContext attribute.\n Exposes that ServletContext attribute when used as bean reference,\n effectively making it available as named Spring bean instance.\n\n Intended to link in ServletContext attributes that exist before\n the startup of the Spring application context. Typically, such\n attributes will have been put there by third-party web frameworks.\n In a purely Spring-based web application, no such linking in of\n ServletContext attributes will be necessary.\n\n NOTE: As of Spring 3.0, you may also use the "contextAttributes" default\n bean which is of type Map, and dereference it using an "#{contextAttributes.myKey}"\n expression to access a specific attribute by name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextAttributeFactoryBean.html
ServletContextAwareProcessor	A										<section class="prog__container">BeanPostProcessor\n implementation that passes the ServletContext to beans that implement\n the ServletContextAware interface.\n\n Web application contexts will automatically register this with their\n underlying bean factory. Applications do not use this directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextAwareProcessor.html
ServletContextLiveBeansView	A										<section class="prog__container">LiveBeansView subclass which looks for all ApplicationContexts\n in the web application, as exposed in ServletContext attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextLiveBeansView.html
ServletContextParameterFactoryBean	A										<section class="prog__container">FactoryBean that retrieves a specific ServletContext init parameter\n (that is, a "context-param" defined in web.xml).\n Exposes that ServletContext init parameter when used as bean reference,\n effectively making it available as named Spring bean instance.\n\n NOTE: As of Spring 3.0, you may also use the "contextParameters" default\n bean which is of type Map, and dereference it using an "#{contextParameters.myKey}"\n expression to access a specific parameter by name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextParameterFactoryBean.html
ServletContextPropertySource	A										<section class="prog__container">PropertySource that reads init parameters from a ServletContext object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextPropertySource.html
ServletContextResource	A										<section class="prog__container">Resource implementation for\n ServletContext resources, interpreting\n relative paths within the web application root directory.\n\n Always supports stream access and URL access, but only allows\n java.io.File access when the web application archive\n is expanded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextResource.html
ServletContextResourceLoader	A										<section class="prog__container">ResourceLoader implementation that resolves paths as ServletContext\n resources, for use outside a WebApplicationContext (for example,\n in an HttpServletBean or GenericFilterBean subclass).\n\n Within a WebApplicationContext, resource paths are automatically\n resolved as ServletContext resources by the context implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextResourceLoader.html
ServletContextResourcePatternResolver	A										<section class="prog__container">ServletContext-aware subclass of PathMatchingResourcePatternResolver,\n able to find matching resources below the web application root directory\n via ServletContext.getResourcePaths(java.lang.String). Falls back to the superclass'\n file system checking for other resources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextResourcePatternResolver.html
ServletContextScope	A										<section class="prog__container">Scope wrapper for a ServletContext, i.e. for global web application attributes.\n\n This differs from traditional Spring singletons in that it exposes attributes in the\n ServletContext. Those attributes will get destroyed whenever the entire application\n shuts down, which might be earlier or later than the shutdown of the containing Spring\n ApplicationContext.\n\n The associated destruction mechanism relies on a\n ContextCleanupListener being registered in\n web.xml. Note that ContextLoaderListener\n includes ContextCleanupListener's functionality.\n\n This scope is registered as default scope with key\n "application".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextScope.html
ServletRequestHandledEvent	A										<section class="prog__container">Servlet-specific subclass of RequestHandledEvent,\n adding servlet-specific context information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/ServletRequestHandledEvent.html
SpringBeanAutowiringSupport	A										<section class="prog__container">Convenient base class for self-autowiring classes that gets constructed\n within a Spring-based web application. Resolves @Autowired\n annotations in the endpoint class against beans in the current Spring\n root web application context (as determined by the current thread's\n context ClassLoader, which needs to be the web application's ClassLoader).\n Can alternatively be used as a delegate instead of as a base class.\n\n A typical usage of this base class is a JAX-WS endpoint class:\n Such a Spring-based JAX-WS endpoint implementation will follow the\n standard JAX-WS contract for endpoint classes but will be 'thin'\n in that it delegates the actual work to one or more Spring-managed\n service beans - typically obtained using @Autowired.\n The lifecycle of such an endpoint instance will be managed by the\n JAX-WS runtime, hence the need for this base class to provide\n @Autowired processing based on the current Spring context.\n\n NOTE: If there is an explicit way to access the ServletContext,\n prefer such a way over using this class. The WebApplicationContextUtils\n class allows for easy access to the Spring root web application context\n based on the ServletContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/SpringBeanAutowiringSupport.html
StandardServletEnvironment	A										<section class="prog__container">Environment implementation to be used by Servlet-based web\n applications. All web-related (servlet-based) ApplicationContext classes\n initialize an instance by default.\n\n Contributes ServletConfig, ServletContext, and JNDI-based\n PropertySource instances. See customizePropertySources(org.springframework.core.env.MutablePropertySources) method\n documentation for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/StandardServletEnvironment.html
StaticWebApplicationContext	A										<section class="prog__container">Static WebApplicationContext\n implementation for testing. Not intended for use in production applications.\n\n Implements the ConfigurableWebApplicationContext\n interface to allow for direct replacement of an XmlWebApplicationContext,\n despite not actually supporting external configuration files.\n\n Interprets resource paths as servlet context resources, i.e. as paths beneath\n the web application root. Absolute paths, e.g. for files outside the web app root,\n can be accessed via "file:" URLs, as implemented by\n DefaultResourceLoader.\n\n In addition to the special beans detected by\n AbstractApplicationContext,\n this class detects a bean of type ThemeSource\n in the context, under the special bean name "themeSource".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/StaticWebApplicationContext.html
WebApplicationContextUtils	A										<section class="prog__container">Convenience methods for retrieving the root WebApplicationContext for\n a given ServletContext. This is useful for programmatically accessing\n a Spring application context from within custom web views or MVC actions.\n\n Note that there are more convenient ways of accessing the root context for\n many web frameworks, either part of Spring or available as an external library.\n This helper class is just the most generic way to access the root context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/WebApplicationContextUtils.html
WebApplicationObjectSupport	A										<section class="prog__container">Convenient superclass for application objects running in a WebApplicationContext.\n Provides getWebApplicationContext(), getServletContext(), and\n getTempDir() accessors.\n\n Note: It is generally recommended to use individual callback interfaces for the actual\n callbacks needed. This broad base class is primarily intended for use within the framework,\n in case of ServletContext access etc typically being needed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/WebApplicationObjectSupport.html
XmlWebApplicationContext	A										<section class="prog__container">WebApplicationContext implementation\n which takes its configuration from XML documents, understood by an\n XmlBeanDefinitionReader.\n This is essentially the equivalent of\n GenericXmlApplicationContext\n for a web environment.\n\n By default, the configuration will be taken from "/WEB-INF/applicationContext.xml"\n for the root context, and "/WEB-INF/test-servlet.xml" for a context with the namespace\n "test-servlet" (like for a DispatcherServlet instance with the servlet-name "test").\n\n The config location defaults can be overridden via the "contextConfigLocation"\n context-param of ContextLoader and servlet\n init-param of FrameworkServlet. Config locations\n can either denote concrete files like "/WEB-INF/context.xml" or Ant-style patterns\n like "/WEB-INF/*-context.xml" (see PathMatcher\n javadoc for pattern details).\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files. This can be leveraged to\n deliberately override certain bean definitions via an extra XML file.\n\n For a WebApplicationContext that reads in a different bean definition format,\n create an analogous subclass of AbstractRefreshableWebApplicationContext.\n Such a context implementation can be specified as "contextClass" context-param\n for ContextLoader or "contextClass" init-param for FrameworkServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/support/XmlWebApplicationContext.html
CorsConfiguration	A										<section class="prog__container">A container for CORS configuration along with methods to check against the\n actual origin, HTTP methods, and headers of a given request.\n\n By default a newly created CorsConfiguration does not permit any\n cross-origin requests and must be configured explicitly to indicate what\n should be allowed.\n\n Use applyPermitDefaultValues() to flip the initialization model\n to start with open defaults that permit all cross-origin requests for GET,\n HEAD, and POST requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html
CorsConfigurationSource	A										<section class="prog__container">Interface to be implemented by classes (usually HTTP request handlers) that\n provides a CorsConfiguration instance based on the provided request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/CorsConfigurationSource.html
CorsProcessor	A										<section class="prog__container">A strategy that takes a request and a CorsConfiguration and updates\n the response.\n\n This component is not concerned with how a CorsConfiguration is\n selected but rather takes follow-up actions such as applying CORS validation\n checks and either rejecting the response or adding CORS headers to the\n response.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/CorsProcessor.html
CorsUtils	A										<section class="prog__container">Utility class for CORS request handling based on the\n CORS W3C recommandation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/CorsUtils.html
DefaultCorsProcessor	A										<section class="prog__container">The default implementation of CorsProcessor, as defined by the\n CORS W3C recommendation.\n\n Note that when input CorsConfiguration is null, this\n implementation does not reject simple or actual requests outright but simply\n avoid adding CORS headers to the response. CORS processing is also skipped\n if the response already contains CORS headers, or if the request is detected\n as a same-origin one.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/DefaultCorsProcessor.html
UrlBasedCorsConfigurationSource	A										<section class="prog__container">Provide a per request CorsConfiguration instance based on a\n collection of CorsConfiguration mapped on path patterns.\n\n Exact path mapping URIs (such as "/admin") are supported\n as well as Ant-style path patterns (such as "/admin/**").</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/UrlBasedCorsConfigurationSource.html
AbstractRequestLoggingFilter	A										<section class="prog__container">Base class for Filters that perform logging operations before and after a request\n is processed.\n\n Subclasses should override the beforeRequest(HttpServletRequest, String) and\n afterRequest(HttpServletRequest, String) methods to perform the actual logging\n around the request.\n\n Subclasses are passed the message to write to the log in the beforeRequest and\n afterRequest methods. By default, only the URI of the request is logged. However,\n setting the includeQueryString property to true will cause the query string\n of the request to be included also. The payload (body) of the request can be logged via the\n includePayload flag. Note that this will only log that which is read, which might\n not be the entire payload.\n\n Prefixes and suffixes for the before and after messages can be configured using the\n beforeMessagePrefix, afterMessagePrefix, beforeMessageSuffix and\n afterMessageSuffix properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/AbstractRequestLoggingFilter.html
CharacterEncodingFilter	A										<section class="prog__container">Servlet Filter that allows one to specify a character encoding for requests.\n This is useful because current browsers typically do not set a character\n encoding even if specified in the HTML page or form.\n\n This filter can either apply its encoding if the request does not already\n specify an encoding, or enforce this filter's encoding in any case\n ("forceEncoding"="true"). In the latter case, the encoding will also be\n applied as default response encoding (although this will usually be overridden\n by a full content type set in the view).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CharacterEncodingFilter.html
CommonsRequestLoggingFilter	A										<section class="prog__container">Simple request logging filter that writes the request URI\n (and optionally the query string) to the Commons Log.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CommonsRequestLoggingFilter.html
CompositeFilter	A										<section class="prog__container">A generic composite servlet Filter that just delegates its behavior\n to a chain (list) of user-supplied filters, achieving the functionality of a\n FilterChain, but conveniently using only Filter instances.\n\n This is useful for filters that require dependency injection, and can\n therefore be set up in a Spring application context. Typically, this\n composite would be used in conjunction with DelegatingFilterProxy,\n so that it can be declared in Spring but applied to a servlet context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CompositeFilter.html
CorsFilter	A										<section class="prog__container">Filter that handles CORS preflight requests and intercepts\n CORS simple and actual requests thanks to a CorsProcessor implementation\n (DefaultCorsProcessor by default) in order to add the relevant CORS\n response headers (like Access-Control-Allow-Origin) using the provided\n CorsConfigurationSource (for example an UrlBasedCorsConfigurationSource\n instance.\n\n This is an alternative to Spring MVC Java config and XML namespace CORS configuration,\n useful for applications depending only on spring-web (not on spring-webmvc) or for\n security constraints requiring CORS checks to be performed at Filter\n level.\n\n This filter could be used in conjunction with DelegatingFilterProxy in order\n to help with its initialization.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CorsFilter.html
DelegatingFilterProxy	A										<section class="prog__container">Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that\n implements the Filter interface. Supports a "targetBeanName" filter init-param\n in web.xml, specifying the name of the target bean in the Spring\n application context.\n\n web.xml will usually contain a DelegatingFilterProxy definition,\n with the specified filter-name corresponding to a bean name in\n Spring's root application context. All calls to the filter proxy will then\n be delegated to that bean in the Spring context, which is required to implement\n the standard Servlet Filter interface.\n\n This approach is particularly useful for Filter implementation with complex\n setup needs, allowing to apply the full Spring bean definition machinery to\n Filter instances. Alternatively, consider standard Filter setup in combination\n with looking up service beans from the Spring root application context.\n\n NOTE: The lifecycle methods defined by the Servlet Filter interface\n will by default not be delegated to the target bean, relying on the\n Spring application context to manage the lifecycle of that bean. Specifying\n the "targetFilterLifecycle" filter init-param as "true" will enforce invocation\n of the Filter.init and Filter.destroy lifecycle methods\n on the target bean, letting the servlet container manage the filter lifecycle.\n\n As of Spring 3.1, DelegatingFilterProxy has been updated to optionally accept\n constructor parameters when using Servlet 3.0's instance-based filter registration\n methods, usually in conjunction with Spring 3.1's\n WebApplicationInitializer SPI. These constructors allow\n for providing the delegate Filter bean directly, or providing the application context\n and bean name to fetch, avoiding the need to look up the application context from the\n ServletContext.\n\n This class was originally inspired by Spring Security's FilterToBeanProxy\n class, written by Ben Alex.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/DelegatingFilterProxy.html
ForwardedHeaderFilter	A										<section class="prog__container">Filter that wraps the request in order to override its\n getServerName(),\n getServerPort(),\n getScheme(), and\n isSecure() methods with values derived\n from "Forwarded" or "X-Forwarded-*" headers. In effect the wrapped request\n reflects the client-originated protocol and address.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/ForwardedHeaderFilter.html
GenericFilterBean	A										<section class="prog__container">Simple base implementation of Filter which treats\n its config parameters (init-param entries within the\n filter tag in web.xml) as bean properties.\n\n A handy superclass for any type of filter. Type conversion of config\n parameters is automatic, with the corresponding setter method getting\n invoked with the converted value. It is also possible for subclasses to\n specify required properties. Parameters without matching bean property\n setter will simply be ignored.\n\n This filter leaves actual filtering to subclasses, which have to\n implement the Filter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) method.\n\n This generic filter base class has no dependency on the Spring\n ApplicationContext concept.\n Filters usually don't load their own context but rather access service\n beans from the Spring root application context, accessible via the\n filter's ServletContext (see\n WebApplicationContextUtils).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/GenericFilterBean.html
HiddenHttpMethodFilter	A										<section class="prog__container">Filter that converts posted method parameters into HTTP methods,\n retrievable via HttpServletRequest.getMethod(). Since browsers currently only\n support GET and POST, a common technique - used by the Prototype library, for instance -\n is to use a normal POST with an additional hidden form field (_method)\n to pass the "real" HTTP method along. This filter reads that parameter and changes\n the HttpServletRequestWrapper.getMethod() return value accordingly.\n\n The name of the request parameter defaults to _method, but can be\n adapted via the methodParam property.\n\n NOTE: This filter needs to run after multipart processing in case of a multipart\n POST request, due to its inherent need for checking a POST body parameter.\n So typically, put a Spring MultipartFilter\nbefore this HiddenHttpMethodFilter in your web.xml filter chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html
HttpPutFormContentFilter	A										<section class="prog__container">Filter that makes form encoded data available through\n the ServletRequest.getParameter*() family of methods during HTTP PUT\n or PATCH requests.\n\n The Servlet spec requires form data to be available for HTTP POST but\n not for HTTP PUT or PATCH requests. This filter intercepts HTTP PUT and PATCH\n requests where content type is 'application/x-www-form-urlencoded',\n reads form encoded content from the body of the request, and wraps the ServletRequest\n in order to make the form data available as request parameters just like\n it is for HTTP POST requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/HttpPutFormContentFilter.html
Log4jNestedDiagnosticContextFilter	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of Apache Log4j 2\n (following Apache's EOL declaration for log4j 1.x)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/Log4jNestedDiagnosticContextFilter.html
OncePerRequestFilter	A										<section class="prog__container">Filter base class that aims to guarantee a single execution per request\n dispatch, on any servlet container. It provides a doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain)\n method with HttpServletRequest and HttpServletResponse arguments.\n\n As of Servlet 3.0, a filter may be invoked as part of a\n REQUEST or\n ASYNC dispatches that occur in\n separate threads. A filter can be configured in web.xml whether it\n should be involved in async dispatches. However, in some cases servlet\n containers assume different default configuration. Therefore sub-classes can\n override the method shouldNotFilterAsyncDispatch() to declare\n statically if they should indeed be invoked, once, during both types\n of dispatches in order to provide thread initialization, logging, security,\n and so on. This mechanism complements and does not replace the need to\n configure a filter in web.xml with dispatcher types.\n\n Subclasses may use isAsyncDispatch(HttpServletRequest) to\n determine when a filter is invoked as part of an async dispatch, and use\n isAsyncStarted(HttpServletRequest) to determine when the request\n has been placed in async mode and therefore the current dispatch won't be\n the last one for the given request.\n\n Yet another dispatch type that also occurs in its own thread is\n ERROR. Subclasses can override\n shouldNotFilterErrorDispatch() if they wish to declare statically\n if they should be invoked once during error dispatches.\n\n The getAlreadyFilteredAttributeName() method determines how to\n identify that a request is already filtered. The default implementation is\n based on the configured name of the concrete filter instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html
RequestContextFilter	A										<section class="prog__container">Servlet Filter that exposes the request to the current thread,\n through both LocaleContextHolder and\n RequestContextHolder. To be registered as filter in web.xml.\n\n Alternatively, Spring's RequestContextListener\n and Spring's DispatcherServlet also expose\n the same request context to the current thread.\n\n This filter is mainly for use with third-party servlets, e.g. the JSF FacesServlet.\n Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/RequestContextFilter.html
ServletContextRequestLoggingFilter	A										<section class="prog__container">Simple request logging filter that writes the request URI\n (and optionally the query string) to the ServletContext log.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/ServletContextRequestLoggingFilter.html
ShallowEtagHeaderFilter	A										<section class="prog__container">Filter that generates an ETag value based on the\n content on the response. This ETag is compared to the If-None-Match\n header of the request. If these headers are equal, the response content is\n not sent, but rather a 304 "Not Modified" status instead.\n\n Since the ETag is based on the response content, the response\n (e.g. a View) is still rendered.\n As such, this filter only saves bandwidth, not server performance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/ShallowEtagHeaderFilter.html
DecoratingNavigationHandler	A										<section class="prog__container">Base class for JSF NavigationHandler implementations that want\n to be capable of decorating an original NavigationHandler.\n\n Supports the standard JSF style of decoration (through a constructor argument)\n as well as an overloaded handleNavigation method with explicit\n NavigationHandler argument (passing in the original NavigationHandler). Subclasses\n are forced to implement this overloaded handleNavigation method.\n Standard JSF invocations will automatically delegate to the overloaded method,\n with the constructor-injected NavigationHandler as argument.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/DecoratingNavigationHandler.html
DelegatingNavigationHandlerProxy	A										<section class="prog__container">JSF NavigationHandler implementation that delegates to a NavigationHandler\n bean obtained from the Spring root WebApplicationContext.\n\n Configure this handler proxy in your faces-config.xml file\n as follows:\n\n \n <application>\n   ...\n   <navigation-handler>\n           org.springframework.web.jsf.DelegatingNavigationHandlerProxy\n   </navigation-handler>\n   ...\n </application>\n\n By default, the Spring ApplicationContext will be searched for the NavigationHandler\n under the bean name "jsfNavigationHandler". In the simplest case, this is a plain\n Spring bean definition like the following. However, all of Spring's bean configuration\n power can be applied to such a bean, in particular all flavors of dependency injection.\n\n \n <bean name="jsfNavigationHandler" class="mypackage.MyNavigationHandler">\n   <property name="myProperty" ref="myOtherBean"/>\n </bean>\n\n The target NavigationHandler bean will typically extend the standard JSF\n NavigationHandler class. However, note that decorating the original\n NavigationHandler (the JSF provider's default handler) is not supported\n in such a scenario, since we can't inject the original handler in standard\n JSF style (that is, as constructor argument).\n\n For decorating the original NavigationHandler, make sure that your\n target bean extends Spring's DecoratingNavigationHandler class. This\n allows to pass in the original handler as method argument, which this proxy\n automatically detects. Note that a DecoratingNavigationHandler subclass\n will still work as standard JSF NavigationHandler as well!\n\n This proxy may be subclassed to change the bean name used to search for the\n navigation handler, change the strategy used to obtain the target handler,\n or change the strategy used to access the ApplicationContext (normally obtained\n via FacesContextUtils.getWebApplicationContext(FacesContext)).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/DelegatingNavigationHandlerProxy.html
DelegatingPhaseListenerMulticaster	A										<section class="prog__container">JSF PhaseListener implementation that delegates to one or more Spring-managed\n PhaseListener beans coming from the Spring root WebApplicationContext.\n\n Configure this listener multicaster in your faces-config.xml file\n as follows:\n\n \n <application>\n   ...\n   <phase-listener>\n     org.springframework.web.jsf.DelegatingPhaseListenerMulticaster\n   </phase-listener>\n   ...\n </application>\n\n The multicaster will delegate all beforePhase and afterPhase\n events to all target PhaseListener beans. By default, those will simply be obtained\n by type: All beans in the Spring root WebApplicationContext that implement the\n PhaseListener interface will be fetched and invoked.\n\n Note: This multicaster's getPhaseId() method will always return\n ANY_PHASE. The phase id exposed by the target listener beans\n will be ignored; all events will be propagated to all listeners.\nThis multicaster may be subclassed to change the strategy used to obtain\n the listener beans, or to change the strategy used to access the ApplicationContext\n (normally obtained via FacesContextUtils.getWebApplicationContext(FacesContext)).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/DelegatingPhaseListenerMulticaster.html
FacesContextUtils	A										<section class="prog__container">Convenience methods to retrieve Spring's root WebApplicationContext\n for a given JSF FacesContext. This is useful for accessing a\n Spring application context from custom JSF-based code.\n\n Analogous to Spring's WebApplicationContextUtils for the ServletContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/FacesContextUtils.html
SpringBeanFacesELResolver	A										<section class="prog__container">JSF ELResolver that delegates to the Spring root WebApplicationContext,\n resolving name references to Spring-defined beans.\n\n Configure this resolver in your faces-config.xml file as follows:\n\n \n <application>\n   ...\n   <el-resolver>org.springframework.web.jsf.el.SpringBeanFacesELResolver</el-resolver>\n </application>\n\n All your JSF expressions can then implicitly refer to the names of\n Spring-managed service layer beans, for example in property values of\n JSF-managed beans:\n\n \n <managed-bean>\n   <managed-bean-name>myJsfManagedBean</managed-bean-name>\n   <managed-bean-class>example.MyJsfManagedBean</managed-bean-class>\n   <managed-bean-scope>session</managed-bean-scope>\n   <managed-property>\n     <property-name>mySpringManagedBusinessObject</property-name>\n     <value>#{mySpringManagedBusinessObject}</value>\n   </managed-property>\n </managed-bean>\n\n with "mySpringManagedBusinessObject" defined as Spring bean in\n applicationContext.xml:\n\n \n <bean id="mySpringManagedBusinessObject" class="example.MySpringManagedBusinessObject">\n   ...\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/el/SpringBeanFacesELResolver.html
WebApplicationContextFacesELResolver	A										<section class="prog__container">Special JSF ELResolver that exposes the Spring WebApplicationContext\n instance under a variable named "webApplicationContext".\n\n In contrast to SpringBeanFacesELResolver, this ELResolver variant\n does not resolve JSF variable names as Spring bean names. It rather\n exposes Spring's root WebApplicationContext itself under a special name,\n and is able to resolve "webApplicationContext.mySpringManagedBusinessObject"\n dereferences to Spring-defined beans in that application context.\n\n Configure this resolver in your faces-config.xml file as follows:\n\n \n <application>\n   ...\n   <el-resolver>org.springframework.web.jsf.el.WebApplicationContextFacesELResolver</el-resolver>\n </application></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.html
ControllerAdviceBean	A										<section class="prog__container">Encapsulates information about an @ControllerAdvice\n Spring-managed bean without necessarily requiring it to be instantiated.\n\n The findAnnotatedBeans(ApplicationContext) method can be used to\n discover such beans. However, a ControllerAdviceBean may be created\n from any object, including ones without an @ControllerAdvice.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/ControllerAdviceBean.html
HandlerMethod.HandlerMethodParameter	A										<section class="prog__container">A MethodParameter with HandlerMethod-specific behavior.</section>	No URL found
HandlerMethod	A										<section class="prog__container">Encapsulates information about a handler method consisting of a\n method and a bean.\n Provides convenient access to method parameters, the method return value,\n method annotations, etc.\n\n The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,\n prototype bean). Use createWithResolvedBean() to obtain a HandlerMethod\n instance with a bean instance resolved through the associated BeanFactory.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/HandlerMethod.html
HandlerMethodSelector	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.3, in favor of the generalized and refined MethodIntrospector\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/HandlerMethodSelector.html
AbstractCookieValueMethodArgumentResolver	A										<section class="prog__container">A base abstract class to resolve method arguments annotated with\n @CookieValue. Subclasses extract the cookie value from the request.\n\n An @CookieValue is a named value that is resolved from a cookie.\n It has a required flag and a default value to fall back on when the cookie\n does not exist.\n\n A WebDataBinder may be invoked to apply type conversion to the\n resolved cookie value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/AbstractCookieValueMethodArgumentResolver.html
AbstractNamedValueMethodArgumentResolver	A										<section class="prog__container">Abstract base class for resolving method arguments from a named value.\n Request parameters, request headers, and path variables are examples of named\n values. Each may have a name, a required flag, and a default value.\n Subclasses define how to do the following:\n \nObtain named value information for a method parameter\n Resolve names into argument values\n Handle missing argument values when argument values are required\n Optionally handle a resolved value\n \nA default value string can contain ${...} placeholders and Spring Expression\n Language #{...} expressions. For this to work a\n ConfigurableBeanFactory must be supplied to the class constructor.\n A WebDataBinder is created to apply type conversion to the resolved\n argument value if it doesn't match the method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.html
AbstractNamedValueMethodArgumentResolver.NamedValueInfo	A										<section class="prog__container">Represents the information about a named value, including name, whether it's required and a default value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.NamedValueInfo.html
AbstractWebArgumentResolverAdapter	A										<section class="prog__container">An abstract base class adapting a WebArgumentResolver to the\n HandlerMethodArgumentResolver contract.\n\n Note: This class is provided for backwards compatibility.\n However it is recommended to re-write a WebArgumentResolver as\n HandlerMethodArgumentResolver. Since supportsParameter(org.springframework.core.MethodParameter)\n can only be implemented by actually resolving the value and then checking\n the result is not WebArgumentResolver#UNRESOLVED any exceptions\n raised must be absorbed and ignored since it's not clear whether the adapter\n doesn't support the parameter or whether it failed for an internal reason.\n The HandlerMethodArgumentResolver contract also provides access to\n model attributes and to WebDataBinderFactory (for type conversion).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/AbstractWebArgumentResolverAdapter.html
ErrorsMethodArgumentResolver	A										<section class="prog__container">Resolves Errors method arguments.\n\n An Errors method argument is expected to appear immediately after\n the model attribute in the method signature. It is resolved by expecting the\n last two attributes added to the model to be the model attribute and its\n BindingResult.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.html
ExceptionHandlerMethodResolver	A										<section class="prog__container">Discovers @ExceptionHandler methods in a given class,\n including all of its superclasses, and helps to resolve a given Exception\n to the exception types supported by a given Method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.html
ExpressionValueMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with @Value.\n\n An @Value does not have a name but gets resolved from the default\n value string, which may contain ${...} placeholder or Spring Expression\n Language #{...} expressions.\n\n A WebDataBinder may be invoked to apply type conversion to\n resolved argument value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ExpressionValueMethodArgumentResolver.html
InitBinderDataBinderFactory	A										<section class="prog__container">Adds initialization to a WebDataBinder via @InitBinder methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/InitBinderDataBinderFactory.html
MapMethodProcessor	A										<section class="prog__container">Resolves Map method arguments and handles Map return values.\n\n A Map return value can be interpreted in more than one ways depending\n on the presence of annotations like @ModelAttribute or\n @ResponseBody. Therefore this handler should be configured after\n the handlers that support these annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/MapMethodProcessor.html
MethodArgumentConversionNotSupportedException	A										<section class="prog__container">A ConversionNotSupportedException raised while resolving a method argument.\n Provides access to the target MethodParameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/MethodArgumentConversionNotSupportedException.html
MethodArgumentTypeMismatchException	A										<section class="prog__container">A TypeMismatchException raised while resolving a controller method argument.\n Provides access to the target MethodParameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/MethodArgumentTypeMismatchException.html
ModelAttributeMethodProcessor	A										<section class="prog__container">Resolve @ModelAttribute annotated method arguments and handle\n return values from @ModelAttribute annotated methods.\n\n Model attributes are obtained from the model or created with a default\n constructor (and then added to the model). Once created the attribute is\n populated via data binding to Servlet request parameters. Validation may be\n applied if the argument is annotated with @javax.validation.Valid.\n or Spring's own @org.springframework.validation.annotation.Validated.\n\n When this handler is created with annotationNotRequired=true\n any non-simple type argument and return value is regarded as a model\n attribute with or without the presence of an @ModelAttribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.html
ModelFactory	A										<section class="prog__container">Assist with initialization of the Model before controller method\n invocation and with updates to it after the invocation.\n\n On initialization the model is populated with attributes temporarily stored\n in the session and through the invocation of @ModelAttribute methods.\n\n On update model attributes are synchronized with the session and also\n BindingResult attributes are added if missing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ModelFactory.html
ModelMethodProcessor	A										<section class="prog__container">Resolves Model arguments and handles Model return values.\n\n A Model return type has a set purpose. Therefore this handler\n should be configured ahead of handlers that support any return value type\n annotated with @ModelAttribute or @ResponseBody to ensure\n they don't take over.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/ModelMethodProcessor.html
RequestHeaderMapMethodArgumentResolver	A										<section class="prog__container">Resolves Map method arguments annotated with @RequestHeader.\n For individual header values annotated with @RequestHeader see\n RequestHeaderMethodArgumentResolver instead.\n\n The created Map contains all request header name/value pairs.\n The method parameter type may be a MultiValueMap to receive all\n values for a header, not only the first one.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.html
RequestHeaderMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with @RequestHeader except for\n Map arguments. See RequestHeaderMapMethodArgumentResolver for\n details on Map arguments annotated with @RequestHeader.\n\n An @RequestHeader is a named value resolved from a request header.\n It has a required flag and a default value to fall back on when the request\n header does not exist.\n\n A WebDataBinder is invoked to apply type conversion to resolved\n request header values that don't yet match the method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolver.html
RequestParamMapMethodArgumentResolver	A										<section class="prog__container">Resolves Map method arguments annotated with an @RequestParam\n where the annotation does not specify a request parameter name.\n See RequestParamMethodArgumentResolver for resolving Map\n method arguments with a request parameter name.\n\n The created Map contains all request parameter name/value pairs.\n If the method parameter type is MultiValueMap instead, the created\n map contains all request parameters and all there values for cases where\n request parameters have multiple values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/RequestParamMapMethodArgumentResolver.html
RequestParamMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with @RequestParam, arguments of\n type MultipartFile in conjunction with Spring's MultipartResolver\n abstraction, and arguments of type javax.servlet.http.Part in conjunction\n with Servlet 3.0 multipart requests. This resolver can also be created in default\n resolution mode in which simple types (int, long, etc.) not annotated with\n @RequestParam are also treated as request parameters with\n the parameter name derived from the argument name.\n\n If the method parameter type is Map, the name specified in the\n annotation is used to resolve the request parameter String value. The value is\n then converted to a Map via type conversion assuming a suitable\n Converter or PropertyEditor has been registered.\n Or if a request parameter name is not specified the\n RequestParamMapMethodArgumentResolver is used instead to provide\n access to all request parameters in the form of a map.\n\n A WebDataBinder is invoked to apply type conversion to resolved request\n header values that don't yet match the method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.html
SessionAttributesHandler	A										<section class="prog__container">Manages controller-specific session attributes declared via\n @SessionAttributes. Actual storage is\n delegated to a SessionAttributeStore instance.\n\n When a controller annotated with @SessionAttributes adds\n attributes to its model, those attributes are checked against names and\n types specified via @SessionAttributes. Matching model attributes\n are saved in the HTTP session and remain there until the controller calls\n SessionStatus.setComplete().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/SessionAttributesHandler.html
SessionStatusMethodArgumentResolver	A										<section class="prog__container">Resolves a SessionStatus argument by obtaining it from\n the ModelAndViewContainer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/SessionStatusMethodArgumentResolver.html
AsyncHandlerMethodReturnValueHandler	A										<section class="prog__container">A HandlerMethodReturnValueHandler that handles return values that\n represent asynchronous computation. Such handlers need to be invoked with\n precedence over other handlers that might otherwise match the return value\n type: e.g. a method that returns a Promise type that is also annotated with\n @ResponseBody.\n\n In HandlerMethodReturnValueHandler.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest), implementations of this class should create\n a DeferredResult or\n adapt to it and then invoke WebAsyncManager to start async processing.\n For example:\n \n DeferredResult deferredResult = (DeferredResult) returnValue;\n WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/AsyncHandlerMethodReturnValueHandler.html
CompositeUriComponentsContributor	A										<section class="prog__container">A UriComponentsContributor containing a list of other contributors\n to delegate and also encapsulating a specific ConversionService to\n use for formatting method argument values to Strings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/CompositeUriComponentsContributor.html
HandlerMethodArgumentResolver	A										<section class="prog__container">Strategy interface for resolving method parameters into argument values in\n the context of a given request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html
HandlerMethodArgumentResolverComposite	A										<section class="prog__container">Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\n Previously resolved method parameters are cached for faster lookups.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.html
HandlerMethodReturnValueHandler	A										<section class="prog__container">Strategy interface to handle the value returned from the invocation of a\n handler method .</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodReturnValueHandler.html
HandlerMethodReturnValueHandlerComposite	A										<section class="prog__container">Handles method return values by delegating to a list of registered HandlerMethodReturnValueHandlers.\n Previously resolved return types are cached for faster lookups.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodReturnValueHandlerComposite.html
InvocableHandlerMethod	A										<section class="prog__container">Provides a method for invoking the handler method for a given request after resolving its\n method argument values through registered HandlerMethodArgumentResolvers.\n\n Argument resolution often requires a WebDataBinder for data binding or for type\n conversion. Use the setDataBinderFactory(WebDataBinderFactory) property to supply\n a binder factory to pass to argument resolvers.\n\n Use setHandlerMethodArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolverComposite) to customize the list of argument resolvers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/InvocableHandlerMethod.html
ModelAndViewContainer	A										<section class="prog__container">Records model and view related decisions made by\n HandlerMethodArgumentResolvers and\n HandlerMethodReturnValueHandlers during the course of invocation of\n a controller method.\n\n The setRequestHandled(boolean) flag can be used to indicate the request\n has been handled directly and view resolution is not required.\n\n A default Model is automatically created at instantiation.\n An alternate model instance may be provided via setRedirectModel(org.springframework.ui.ModelMap)\n for use in a redirect scenario. When setRedirectModelScenario(boolean) is set\n to true signalling a redirect scenario, the getModel()\n returns the redirect model instead of the default model.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/ModelAndViewContainer.html
UriComponentsContributor	A										<section class="prog__container">Strategy for contributing to the building of a UriComponents by\n looking at a method parameter and an argument value and deciding what\n part of the target URL should be updated.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/support/UriComponentsContributor.html
MaxUploadSizeExceededException	A										<section class="prog__container">MultipartException subclass thrown when an upload exceeds the\n maximum upload size allowed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MaxUploadSizeExceededException.html
MultipartException	A										<section class="prog__container">Exception thrown when multipart resolution fails.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartException.html
MultipartFile	A										<section class="prog__container">A representation of an uploaded file received in a multipart request.\n\n The file contents are either stored in memory or temporarily on disk.\n In either case, the user is responsible for copying file contents to a\n session-level or persistent store as and if desired. The temporary storages\n will be cleared at the end of request processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html
MultipartHttpServletRequest	A										<section class="prog__container">Provides additional methods for dealing with multipart content within a\n servlet request, allowing to access uploaded files.\n Implementations also need to override the standard\n ServletRequest methods for parameter access, making\n multipart parameters available.\n\n A concrete implementation is\n DefaultMultipartHttpServletRequest.\n As an intermediate step,\n AbstractMultipartHttpServletRequest\n can be subclassed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartHttpServletRequest.html
MultipartRequest	A										<section class="prog__container">This interface defines the multipart request access operations\n that are exposed for actual multipart requests. It is extended\n by MultipartHttpServletRequest and the Portlet\n MultipartActionRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartRequest.html
MultipartResolver	A										<section class="prog__container">A strategy interface for multipart file upload resolution in accordance\n with RFC 1867.\n Implementations are typically usable both within an application context\n and standalone.\n\n There are two concrete implementations included in Spring, as of Spring 3.1:\n \nCommonsMultipartResolver\n for Apache Commons FileUpload\n StandardServletMultipartResolver\n for the Servlet 3.0+ Part API\n \nThere is no default resolver implementation used for Spring\n DispatcherServlets,\n as an application might choose to parse its multipart requests itself. To define\n an implementation, create a bean with the id "multipartResolver" in a\n DispatcherServlet's\n application context. Such a resolver gets applied to all requests handled\n by that DispatcherServlet.\n\n If a DispatcherServlet detects a\n multipart request, it will resolve it via the configured MultipartResolver\n and pass on a wrapped HttpServletRequest. Controllers\n can then cast their given request to the MultipartHttpServletRequest\n interface, which allows for access to any MultipartFiles.\n Note that this cast is only supported in case of an actual multipart request.\n\n \n public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {\n   MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n   MultipartFile multipartFile = multipartRequest.getFile("image");\n   ...\n }\n\n Instead of direct access, command or form controllers can register a\n ByteArrayMultipartFileEditor\n or StringMultipartFileEditor\n with their data binder, to automatically apply multipart content to form\n bean properties.\n\n As an alternative to using a MultipartResolver with a\n DispatcherServlet,\n a MultipartFilter can be\n registered in web.xml. It will delegate to a corresponding\n MultipartResolver bean in the root application context. This is mainly\n intended for applications that do not use Spring's own web MVC framework.\n\n Note: There is hardly ever a need to access the MultipartResolver\n itself from application code. It will simply do its work behind the scenes,\n making MultipartHttpServletRequests\n available to controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartResolver.html
CommonsFileUploadSupport	A										<section class="prog__container">Base class for multipart resolvers that use Apache Commons FileUpload\n 1.2 or above.\n\n Provides common configuration properties and parsing functionality\n for multipart requests, using a Map of Spring CommonsMultipartFile instances\n as representation of uploaded files and a String-based parameter Map as\n representation of uploaded form fields.\n\n Subclasses implement concrete resolution strategies for Servlet or Portlet\n environments: see CommonsMultipartResolver and CommonsPortletMultipartResolver,\n respectively. This base class is not tied to either of those APIs, factoring\n out common functionality.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/commons/CommonsFileUploadSupport.html
CommonsFileUploadSupport.MultipartParsingResult	A										<section class="prog__container">Holder for a Map of Spring MultipartFiles and a Map of\n multipart parameters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/commons/CommonsFileUploadSupport.MultipartParsingResult.html
CommonsMultipartFile	A										<section class="prog__container">MultipartFile implementation for Apache Commons FileUpload.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/commons/CommonsMultipartFile.html
CommonsMultipartResolver	A										<section class="prog__container">Servlet-based MultipartResolver implementation for\n Apache Commons FileUpload\n 1.2 or above.\n\n Provides "maxUploadSize", "maxInMemorySize" and "defaultEncoding" settings as\n bean properties (inherited from CommonsFileUploadSupport). See corresponding\n ServletFileUpload / DiskFileItemFactory properties ("sizeMax", "sizeThreshold",\n "headerEncoding") for details in terms of defaults and accepted values.\n\n Saves temporary files to the servlet container's temporary directory.\n Needs to be initialized either by an application context or\n via the constructor that takes a ServletContext (for standalone usage).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/commons/CommonsMultipartResolver.html
AbstractMultipartHttpServletRequest	A										<section class="prog__container">Abstract base implementation of the MultipartHttpServletRequest interface.\n Provides management of pre-generated MultipartFile instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/AbstractMultipartHttpServletRequest.html
ByteArrayMultipartFileEditor	A										<section class="prog__container">Custom PropertyEditor for converting\n MultipartFiles to byte arrays.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/ByteArrayMultipartFileEditor.html
DefaultMultipartHttpServletRequest	A										<section class="prog__container">Default implementation of the\n MultipartHttpServletRequest\n interface. Provides management of pre-generated parameter values.\n\n Used by CommonsMultipartResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest.html
MissingServletRequestPartException	A										<section class="prog__container">Raised when the part of a "multipart/form-data" request identified by its\n name cannot be found.\n\n This may be because the request is not a multipart/form-data request,\n because the part is not present in the request, or because the web\n application is not configured correctly for processing  multipart requests,\n e.g. no MultipartResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/MissingServletRequestPartException.html
MultipartFilter	A										<section class="prog__container">Servlet Filter that resolves multipart requests via a MultipartResolver.\n in the root web application context.\n\n Looks up the MultipartResolver in Spring's root web application context.\n Supports a "multipartResolverBeanName" filter init-param in web.xml;\n the default bean name is "filterMultipartResolver".\n\n If no MultipartResolver bean is found, this filter falls back to a default\n MultipartResolver: StandardServletMultipartResolver for Servlet 3.0,\n based on a multipart-config section in web.xml.\n Note however that at present the Servlet specification only defines how to\n enable multipart configuration on a Servlet and as a result multipart request\n processing is likely not possible in a Filter unless the Servlet container\n provides a workaround such as Tomcat's "allowCasualMultipartParsing" property.\n\n MultipartResolver lookup is customizable: Override this filter's\n lookupMultipartResolver method to use a custom MultipartResolver\n instance, for example if not using a Spring web application context.\n Note that the lookup method should not create a new MultipartResolver instance\n for each call but rather return a reference to a pre-built instance.\n\n Note: This filter is an alternative to using DispatcherServlet's\n MultipartResolver support, for example for web applications with custom web views\n which do not use Spring's web MVC, or for custom filters applied before a Spring MVC\n DispatcherServlet (e.g. HiddenHttpMethodFilter).\n In any case, this filter should not be combined with servlet-specific multipart resolution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/MultipartFilter.html
MultipartResolutionDelegate	A										<section class="prog__container">A common delegate for HandlerMethodArgumentResolver implementations\n which need to resolve MultipartFile and Part arguments.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/MultipartResolutionDelegate.html
RequestPartServletServerHttpRequest	A										<section class="prog__container">ServerHttpRequest implementation that accesses one part of a multipart\n request. If using MultipartResolver configuration the part is accessed\n through a MultipartFile. Or if using Servlet 3.0 multipart processing\n the part is accessed through ServletRequest.getPart.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/RequestPartServletServerHttpRequest.html
StandardMultipartHttpServletRequest	A										<section class="prog__container">Spring MultipartHttpServletRequest adapter, wrapping a Servlet 3.0 HttpServletRequest\n and its Part objects. Parameters get exposed through the native request's getParameter\n methods - without any custom processing on our side.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.html
StandardServletMultipartResolver	A										<section class="prog__container">Standard implementation of the MultipartResolver interface,\n based on the Servlet 3.0 Part API.\n To be added as "multipartResolver" bean to a Spring DispatcherServlet context,\n without any extra configuration at the bean level (see below).\n\n Note: In order to use Servlet 3.0 based multipart parsing,\n you need to mark the affected servlet with a "multipart-config" section in\n web.xml, or with a MultipartConfigElement\n in programmatic servlet registration, or (in case of a custom servlet class)\n possibly with a MultipartConfig annotation\n on your servlet class. Configuration settings such as maximum sizes or\n storage locations need to be applied at that servlet registration level;\n Servlet 3.0 does not allow for them to be set at the MultipartResolver level.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/StandardServletMultipartResolver.html
StringMultipartFileEditor	A										<section class="prog__container">Custom PropertyEditor for converting\n MultipartFiles to Strings.\n\n Allows one to specify the charset to use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/support/StringMultipartFileEditor.html
DispatcherPortlet	A										<section class="prog__container">Central dispatcher for use within the Portlet MVC framework, e.g. for web UI\n controllers. Dispatches to registered handlers for processing a portlet request.\n\n This portlet is very flexible: It can be used with just about any workflow,\n with the installation of the appropriate adapter classes. It offers the following\n functionality that distinguishes it from other request-driven Portlet MVC frameworks:\n\n \nIt is based around a JavaBeans configuration mechanism.\n\n It can use any HandlerMapping implementation - pre-built or provided\n as part of an application - to control the routing of requests to handler objects.\n Default is a DefaultAnnotationHandlerMapping.\n HandlerMapping objects can be defined as beans in the portlet's application context,\n implementing the HandlerMapping interface, overriding the default HandlerMapping\n if present. HandlerMappings can be given any bean name (they are tested by type).\n\n It can use any HandlerAdapter; this allows for using any handler interface.\n The default adapter is SimpleControllerHandlerAdapter\n for Spring's Controller interface.\n A default AnnotationMethodHandlerAdapter\n will be registered as well. HandlerAdapter objects can be added as beans in the\n application context, overriding the default HandlerAdapter. Like HandlerMappings,\n HandlerAdapters can be given any bean name (they are tested by type).\n\n The dispatcher's exception resolution strategy can be specified via a\n HandlerExceptionResolver, for example mapping certain exceptions to\n error pages. Default is none. Additional HandlerExceptionResolvers can be added\n through the application context. HandlerExceptionResolver can be given any\n bean name (they are tested by type).\n\n Its view resolution strategy can be specified via a ViewResolver\n implementation, resolving symbolic view names into View objects. Default is\n InternalResourceViewResolver.\n ViewResolver objects can be added as beans in the application context,\n overriding the default ViewResolver. ViewResolvers can be given any bean name\n (they are tested by type).\n\n The dispatcher's strategy for resolving multipart requests is determined by a\n PortletMultipartResolver\n implementation. An implementations for Apache Commons FileUpload is included:\n CommonsPortletMultipartResolver.\n The MultipartResolver bean name is "portletMultipartResolver"; default is none.\n \nNOTE: The @RequestMapping annotation will only be processed if a\n corresponding HandlerMapping (for type-level annotations) and/or\n HandlerAdapter (for method-level annotations) is present in the dispatcher.\n This is the case by default. However, if you are defining custom HandlerMappings\n or HandlerAdapters, then you need to make sure that a corresponding custom\n DefaultAnnotationHandlerMapping and/or AnnotationMethodHandlerAdapter\n is defined as well - provided that you intend to use @RequestMapping.\n\n A web application can define any number of DispatcherPortlets.\n Each portlet will operate in its own namespace, loading its own application context\n with mappings, handlers, etc. Only the root application context as loaded by\n ContextLoaderListener, if any, will be shared.\n\n Thanks to Rainer Schmitz, Nick Lothian and Eric Dalquist for their suggestions!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/DispatcherPortlet.html
FrameworkPortlet	A										<section class="prog__container">Base portlet for Spring's portlet framework. Provides integration with\n a Spring application context, in a JavaBean-based overall solution.\n\n This class offers the following functionality:\n \nManages a Portlet ApplicationContext\n instance per portlet. The portlet's configuration is determined by beans\n in the portlet's namespace.\n Publishes events on request processing, whether or not a request is\n successfully handled.\n \nSubclasses must implement doActionService(javax.portlet.ActionRequest, javax.portlet.ActionResponse) and doRenderService(javax.portlet.RenderRequest, javax.portlet.RenderResponse)\n to handle action and render requests. Because this extends GenericPortletBean\n rather than Portlet directly, bean properties are mapped onto it. Subclasses can\n override initFrameworkPortlet() for custom initialization.\n\n Regards a "contextClass" parameter at the portlet init-param level,\n falling back to the default context class\n (XmlPortletApplicationContext)\n if not found. Note that, with the default FrameworkPortlet,\n a context class needs to implement the\n ConfigurablePortletApplicationContext SPI.\n\n Passes a "contextConfigLocation" portlet init-param to the context instance,\n parsing it into potentially multiple file paths which can be separated by any\n number of commas and spaces, like "test-portlet.xml, myPortlet.xml".\n If not explicitly specified, the context implementation is supposed to build a\n default location from the namespace of the portlet.\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files, at least when using one of\n Spring's default ApplicationContext implementations. This can be leveraged\n to deliberately override certain bean definitions via an extra XML file.\n\n The default namespace is "'portlet-name'-portlet", e.g. "test-portlet" for a\n portlet-name "test" (leading to a "/WEB-INF/test-portlet.xml" default location\n with XmlPortletApplicationContext). The namespace can also be set explicitly via\n the "namespace" portlet init-param.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/FrameworkPortlet.html
GenericPortletBean	A										<section class="prog__container">Simple extension of javax.portlet.GenericPortlet that treats\n its config parameters as bean properties.\n\n A very handy superclass for any type of portlet. Type conversion is automatic.\n It is also possible for subclasses to specify required properties.\n\n This portlet leaves request handling to subclasses, inheriting the default\n behaviour of GenericPortlet (doDispatch, processAction, etc).\n\n This portlet superclass has no dependency on a Spring application context,\n in contrast to the FrameworkPortlet class which loads its own context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/GenericPortletBean.html
HandlerAdapter	A										<section class="prog__container">Portlet MVC framework SPI interface, allowing parameterization of core MVC workflow.\n\n Interface that must be implemented for each handler type to handle a request.\n This interface is used to allow the DispatcherPortlet to be indefinitely\n extensible. The DispatcherPortlet accesses all installed handlers through this\n interface, meaning that it does not contain code specific to any handler type.\n\n Note that a handler can be of type Object. This is to enable handlers from\n other frameworks to be integrated with this framework without custom coding.\n\n This interface is not intended for application developers. It is available\n to handlers who want to develop their own web workflow.\n\n Note: Implementations can implement the Ordered interface to be able to\n specify a sorting order and thus a priority for getting applied by\n DispatcherPortlet. Non-Ordered instances get treated as lowest priority.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/HandlerAdapter.html
HandlerExceptionResolver	A										<section class="prog__container">Interface to be implemented by objects than can resolve exceptions thrown\n during handler mapping or execution, in the typical case to error views.\n Implementors are typically registered as beans in the application context.\n\n Error views are analogous to the error page JSPs, but can be used with\n any kind of exception including any checked exception, with potentially\n fine-granular mappings for specific handlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/HandlerExceptionResolver.html
HandlerExecutionChain	A										<section class="prog__container">Handler execution chain, consisting of handler object and any handler interceptors.\n Returned by HandlerMapping's HandlerMapping.getHandler(javax.portlet.PortletRequest) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/HandlerExecutionChain.html
HandlerInterceptor	A										<section class="prog__container">Workflow interface that allows for customized handler execution chains.\n Applications can register any number of existing or custom interceptors\n for certain groups of handlers, to add common pre-processing behavior\n without needing to modify each handler implementation.\n\n A HandlerInterceptor gets called before the appropriate\n HandlerAdapter triggers the\n execution of the handler itself. This mechanism can be used for a large\n field of preprocessing aspects, e.g. for authorization checks,\n or common handler behavior like locale or theme changes. Its main purpose\n is to permit the factoring out of otherwise repetitive handler code.\n\n Typically an interceptor chain is defined per\n HandlerMapping bean, sharing its\n granularity. To be able to apply a certain interceptor chain to a group of\n handlers, one needs to map the desired handlers via one\n HandlerMapping bean. The interceptors themselves are defined as\n beans in the application context, referenced by the mapping bean definition\n via its\n "interceptors"\n property (in XML: a <list> of <ref> elements).\n\n A HandlerInterceptor is basically similar to a Servlet\n Filter, but in contrast to the latter it allows\n custom pre-processing with the option to prohibit the execution of the handler\n itself, and custom post-processing. Filters are more powerful;\n for example they allow for exchanging the request and response objects that\n are handed down the chain. Note that a filter gets configured in\n web.xml, a HandlerInterceptor in the application context.\n\n As a basic guideline, fine-grained handler-related pre-processing tasks are\n candidates for HandlerInterceptor implementations, especially\n factored-out common handler code and authorization checks. On the other hand,\n a Filter is well-suited for request content and view content\n handling, like multipart forms and GZIP compression. This typically shows when\n one needs to map the filter to certain content types (e.g. images), or to all\n requests.\n\n Be aware that filters cannot be applied to portlet requests (they\n only operate on servlet requests), so for portlet requests interceptors are\n essential.\n\n If we assume a "sunny day" request cycle (i.e. a request where nothing goes wrong\n and all is well), the workflow of a HandlerInterceptor will be as\n follows:\n\n Action Request:\n\nDispatcherPortlet maps the action request to a particular handler and\n assembles a handler execution chain consisting of the handler that is to be invoked\n and all of the HandlerInterceptor instances that apply to the request.\npreHandleAction(..)\n is called; if the invocation of this method returns true then this workflow continues.\nThe target handler handles the action request (via\n HandlerAdapter.handleAction(..)).\nafterActionCompletion(..)\n is called.\n\nRender Request:\n\nDispatcherPortlet maps the render request to a particular handler and\n assembles a handler execution chain consisting of the handler that is to be invoked\n and all of the HandlerInterceptor instances that apply to the request.\npreHandleRender(..)\n is called; if the invocation of this method returns true then this workflow continues.\nThe target handler handles the render request (via\n HandlerAdapter.handleRender(..)).\npostHandleRender(..)\n is called.\nIf the HandlerAdapter returned a ModelAndView, then\n DispatcherPortlet renders the view accordingly.\n afterRenderCompletion(..)\n is called.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/HandlerInterceptor.html
HandlerMapping	A										<section class="prog__container">Interface to be implemented by objects that define a mapping between\n requests and handler objects.\n\n This class can be implemented by application developers, although this is not\n necessary, as PortletModeHandlerMapping,\n ParameterHandlerMapping and\n PortletModeParameterHandlerMapping\n are included in the framework. The first is the default if no HandlerMapping\n bean is registered in the portlet application context.\n\n HandlerMapping implementations can support mapped interceptors but do not\n have to. A handler will always be wrapped in a HandlerExecutionChain\n instance, optionally accompanied by some HandlerInterceptor instances.\n The DispatcherPortlet will first call each HandlerInterceptor's\n preHandle method in the given order, finally invoking the handler\n itself if all preHandle methods have returned true.\n\n The ability to parameterize this mapping is a powerful and unusual\n capability of this Portlet MVC framework. For example, it is possible to\n write a custom mapping based on session state, cookie state or many other\n variables. No other MVC framework seems to be equally flexible.\n\n Note: Implementations can implement the Ordered\n interface to be able to specify a sorting order and thus a priority for getting\n applied by DispatcherPortlet. Non-Ordered instances get treated as lowest priority.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/HandlerMapping.html
ModelAndView	A										<section class="prog__container">Holder for both Model and View in the web MVC framework.\n Note that these are entirely distinct. This class merely holds\n both to make it possible for a controller to return both model\n and view in a single return value.\n\n Represents a model and view returned by a handler, to be resolved\n by a DispatcherPortlet. The view can take the form of a String\n view name which will need to be resolved by a ViewResolver object;\n alternatively a view object can be specified directly. The model\n is a Map, allowing the use of multiple objects keyed by name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/ModelAndView.html
ModelAndViewDefiningException	A										<section class="prog__container">Exception to be thrown on error conditions that should forward\n to a specific view with a specific model.\n\n Can be thrown at any time during handler processing.\n This includes any template methods of pre-built controllers.\n For example, a form controller might abort to a specific error page\n if certain parameters do not allow to proceed with the normal workflow.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/ModelAndViewDefiningException.html
NoHandlerFoundException	A										<section class="prog__container">Exception to be thrown if DispatcherPortlet is unable to determine\n a corresponding handler for an incoming portlet request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/NoHandlerFoundException.html
MissingPortletRequestParameterException	A										<section class="prog__container">PortletRequestBindingException subclass that indicates a missing parameter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/MissingPortletRequestParameterException.html
PortletRequestBindingException	A										<section class="prog__container">Fatal binding exception, thrown when we want to\n treat binding exceptions as unrecoverable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/PortletRequestBindingException.html
PortletRequestDataBinder	A										<section class="prog__container">Special DataBinder to perform data binding\n from portlet request parameters to JavaBeans, including support for multipart files.\n\n See the DataBinder/WebDataBinder superclasses for customization options,\n which include specifying allowed/required fields, and registering custom\n property editors.\n\n Can also be used for manual data binding in custom web controllers:\n for example, in a plain Portlet Controller implementation. Simply instantiate\n a PortletRequestDataBinder for each binding process, and invoke bind\n with the current PortletRequest as argument:\n\n \n MyBean myBean = new MyBean();\n // apply binder to custom target object\n PortletRequestDataBinder binder = new PortletRequestDataBinder(myBean);\n // register custom editors, if desired\n binder.registerCustomEditor(...);\n // trigger actual binding of request parameters\n binder.bind(request);\n // optionally evaluate binding errors\n Errors errors = binder.getErrors();\n ...</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/PortletRequestDataBinder.html
PortletRequestParameterPropertyValues	A										<section class="prog__container">PropertyValues implementation created from parameters in a PortletRequest.\n Can look for all property values beginning with a certain prefix and\n prefix separator (default is "_").\n\n For example, with a prefix of "spring", "spring_param1" and\n "spring_param2" result in a Map with "param1" and "param2" as keys.\n\n This class is not immutable to be able to efficiently remove property\n values that should be ignored for binding.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/PortletRequestParameterPropertyValues.html
PortletRequestUtils	A										<section class="prog__container">Parameter extraction methods, for an approach distinct from data binding,\n in which parameters of specific types are required.\n\n This approach is very useful for simple submissions, where binding\n request parameters to a command object would be overkill.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/PortletRequestUtils.html
ActionMapping	A										<section class="prog__container">Annotation for mapping Portlet action requests onto handler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/annotation/ActionMapping.html
EventMapping	A										<section class="prog__container">Annotation for mapping Portlet event requests onto handler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/annotation/EventMapping.html
RenderMapping	A										<section class="prog__container">Annotation for mapping Portlet render requests onto handler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/annotation/RenderMapping.html
ResourceMapping	A										<section class="prog__container">Annotation for mapping Portlet resource requests onto handler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/bind/annotation/ResourceMapping.html
AbstractRefreshablePortletApplicationContext	A										<section class="prog__container">AbstractRefreshableApplicationContext\n subclass which implements the ConfigurablePortletApplicationContext\n interface for portlet environments. Provides a "configLocations" property,\n to be populated through the ConfigurablePortletApplicationContext interface\n on portlet application startup.\n\n This class is as easy to subclass as AbstractRefreshableApplicationContext:\n All you need to implements is the AbstractRefreshableApplicationContext.loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory) method;\n see the superclass javadoc for details. Note that implementations are supposed\n to load bean definitions from the files specified by the locations returned\n by the getConfigLocations() method.\n\n Interprets resource paths as servlet context resources, i.e. as paths beneath\n the web application root. Absolute paths, e.g. for files outside the web app root,\n can be accessed via "file:" URLs, as implemented by\n DefaultResourceLoader.\n\n This is the portlet context to be subclassed for a different bean definition format.\n Such a context implementation can be specified as "contextClass" init-param\n for FrameworkPortlet, replacing the default XmlPortletApplicationContext.\n It will then automatically receive the "contextConfigLocation" init-param.\n\n Note that Portlet-based context implementations are generally supposed\n to configure themselves based on the configuration received through the\n ConfigurablePortletApplicationContext interface. In contrast, a standalone\n application context might allow for configuration in custom startup code\n (for example, GenericApplicationContext).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.html
ConfigurablePortletApplicationContext	A										<section class="prog__container">Interface to be implemented by configurable portlet application contexts.\n Supported by FrameworkPortlet.\n\n Note: The setters of this interface need to be called before an\n invocation of the ConfigurableApplicationContext.refresh() method inherited from\n ConfigurableApplicationContext.\n They do not cause an initialization of the context on their own.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/ConfigurablePortletApplicationContext.html
PortletApplicationContextUtils	A										<section class="prog__container">Convenience methods for retrieving the root WebApplicationContext for\n a given PortletContext. This is useful for programmatically accessing\n a Spring application context from within custom Portlet implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletApplicationContextUtils.html
PortletApplicationObjectSupport	A										<section class="prog__container">Convenient superclass for application objects running in a Portlet ApplicationContext.\n Provides getApplicationContext, getServletContext, and getTempDir methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletApplicationObjectSupport.html
PortletConfigAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the PortletConfig (typically determined by the PortletApplicationContext)\n that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletConfigAware.html
PortletConfigPropertySource	A										<section class="prog__container">PropertySource that reads init parameters from a PortletConfig object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletConfigPropertySource.html
PortletContextAware	A										<section class="prog__container">Interface to be implemented by any object that wishes to be notified\n of the PortletContext (typically determined by the PortletApplicationContext)\n that it runs in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextAware.html
PortletContextAwareProcessor	A										<section class="prog__container">BeanPostProcessor\n implementation that passes the PortletContext to beans that implement\n the PortletContextAware interface.\n\n Portlet application contexts will automatically register this with their\n underlying bean factory. Applications do not use this directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextAwareProcessor.html
PortletContextPropertySource	A										<section class="prog__container">PropertySource that reads init parameters from a PortletContext object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextPropertySource.html
PortletContextResource	A										<section class="prog__container">Resource implementation for\n PortletContext resources, interpreting\n relative paths within the portlet application root directory.\n\n Always supports stream access and URL access, but only allows\n java.io.File access when the portlet application archive\n is expanded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextResource.html
PortletContextResourceLoader	A										<section class="prog__container">ResourceLoader implementation that resolves paths as PortletContext\n resources, for use outside a Portlet ApplicationContext (for example,\n in a GenericPortletBean subclass).\n\n Within a WebApplicationContext, resource paths are automatically\n resolved as PortletContext resources by the context implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextResourceLoader.html
PortletContextResourcePatternResolver	A										<section class="prog__container">PortletContext-aware subclass of PathMatchingResourcePatternResolver,\n able to find matching resources below the web application root directory\n via Portlet API's PortletContext.getResourcePaths.\n Falls back to the superclass' file system checking for other resources.\n\n The advantage of using PortletContext.getResourcePaths to\n find matching files is that it will work in a WAR file which has not been\n expanded too.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextResourcePatternResolver.html
PortletContextScope	A										<section class="prog__container">Scope wrapper for a PortletContext, i.e. for global web application attributes.\n\n This differs from traditional Spring singletons in that it exposes attributes in the\n PortletContext. Those attributes will get destroyed whenever the entire application\n shuts down, which might be earlier or later than the shutdown of the containing Spring\n ApplicationContext.\n\n The associated destruction mechanism relies on a\n ContextCleanupListener being registered in\n web.xml. Note that ContextLoaderListener\n includes ContextCleanupListener's functionality.\n\n This scope is registered as default scope with key\n "application".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletContextScope.html
PortletRequestAttributes	A										<section class="prog__container">Portlet-based implementation of the\n RequestAttributes interface.\n\n Accesses objects from portlet request and portlet session scope,\n with a distinction between "session" (the PortletSession's "portlet scope")\n and "global session" (the PortletSession's "application scope").</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletRequestAttributes.html
PortletRequestHandledEvent	A										<section class="prog__container">Portlet-specific subclass of RequestHandledEvent,\n adding portlet-specific context information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletRequestHandledEvent.html
PortletWebRequest	A										<section class="prog__container">WebRequest adapter\n for a PortletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/PortletWebRequest.html
StandardPortletEnvironment	A										<section class="prog__container">Environment implementation to be used by Servlet-based web\n applications. All Portlet-related ApplicationContext classes\n initialize an instance by default.\n\n Contributes ServletContext, PortletContext,\n PortletConfig and JNDI-based PropertySource instances.\n See the customizePropertySources(org.springframework.core.env.MutablePropertySources) method for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/StandardPortletEnvironment.html
StaticPortletApplicationContext	A										<section class="prog__container">Static Portlet-based ApplicationContext\n implementation for testing. Not intended for use in production applications.\n\n Implements the\n ConfigurablePortletApplicationContext\n interface to allow for direct replacement of an XmlPortletApplicationContext,\n despite not actually supporting external configuration files.\n\n Interprets resource paths as portlet context resources, that is, as paths\n beneath the portlet application root. Absolute paths, for example for files\n outside the portlet app root, can be accessed via "file:" URLs, as implemented\n by DefaultResourceLoader.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/StaticPortletApplicationContext.html
XmlPortletApplicationContext	A										<section class="prog__container">Portlet-based WebApplicationContext\n implementation which takes its configuration from XML documents, understood\n by an XmlBeanDefinitionReader.\n This is essentially the equivalent of\n AbstractXmlApplicationContext\n for a portlet environment.\n\n By default, the configuration will be taken from "/WEB-INF/applicationContext.xml"\n for the root context, and "/WEB-INF/test-portlet.xml" for a context with the namespace\n "test-portlet" (like for a DispatcherPortlet instance with the portlet-name "test").\n\n The config location defaults can be overridden via the "contextConfigLocation"\n portlet init-param of FrameworkPortlet.\n Config locations can either denote concrete files like "/WEB-INF/context.xml"\n or Ant-style patterns like "/WEB-INF/*-context.xml" (see\n PathMatcher javadoc for pattern details).\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files. This can be leveraged to\n deliberately override certain bean definitions via an extra XML file.\n\n For a Portlet-based context that reads in a different bean definition format,\n create an analogous subclass of AbstractRefreshablePortletApplicationContext.\n Such a context implementation can be specified as "contextClass" init-param\n for a FrameworkPortlet instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/context/XmlPortletApplicationContext.html
AbstractHandlerExceptionResolver	A										<section class="prog__container">Abstract base class for HandlerExceptionResolver implementations.\n\n Provides a set of mapped handlers that the resolver should map to,\n and the Ordered implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.html
AbstractHandlerMapping	A										<section class="prog__container">Abstract base class for HandlerMapping\n implementations. Supports ordering, a default handler, and handler interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/AbstractHandlerMapping.html
AbstractMapBasedHandlerMapping	A										<section class="prog__container">Abstract base class for HandlerMapping\n implementations that rely on a map which caches handler objects per lookup key.\n Supports arbitrary lookup keys, and automatically resolves handler bean names\n into handler bean instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.html
AbstractMapBasedHandlerMapping.PortletRequestMappingPredicate	A										<section class="prog__container">Predicate interface for determining a match with a given request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.PortletRequestMappingPredicate.html
HandlerInterceptorAdapter	A										<section class="prog__container">Abstract adapter class for the HandlerInterceptor interface,\n for simplified implementation of pre-only/post-only interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/HandlerInterceptorAdapter.html
ParameterHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n to map from a request parameter to request handler beans.\n\n The default name of the parameter is "action", but can be changed using\n setParameterName().\n\n The bean configuration for this mapping will look somthing like this:\n\n \n <bean id="parameterHandlerMapping" class="org.springframework.web.portlet.handler.ParameterHandlerMapping">\n   <property name="parameterMap">\n     <map>\n             <entry key="add"><ref bean="addItemHandler"/></entry>\n       <entry key="edit"><ref bean="editItemHandler"/></entry>\n       <entry key="delete"><ref bean="deleteItemHandler"/></entry>\n     </map>\n   </property>\n </bean>\n\n Thanks to Rainer Schmitz for suggesting this mapping strategy!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/ParameterHandlerMapping.html
ParameterMappingInterceptor	A										<section class="prog__container">Interceptor to forward a request parameter from the ActionRequest to the\n RenderRequest.\n\n This can be useful when using ParameterHandlerMapping\n or PortletModeParameterHandlerMapping.\n It will ensure that the parameter that was used to map the ActionRequest\n to a handler will be forwarded to the RenderRequest so that it will also be\n mapped the same way.\n\n When using this Interceptor, you can still change the value of the mapping parameter\n in your handler in order to change where the render request will get mapped.\n\n Be aware that this Interceptor does call ActionResponse.setRenderParameter,\n which means that you will not be able to call ActionResponse.sendRedirect in\n your handler.  If you may need to issue a redirect, then you should avoid this Interceptor\n and either write a different one that does this in a different way, or manually forward\n the parameter from within your handler(s).\n\n Thanks to Rainer Schmitz for suggesting this mapping strategy!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/ParameterMappingInterceptor.html
PortletContentGenerator	A										<section class="prog__container">Convenient superclass for any kind of web content generator,\n like AbstractController.\n Can also be used for custom handlers that have their own\n HandlerAdapter.\n\n Supports portlet cache control options.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/PortletContentGenerator.html
PortletModeHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n interface to map from the current PortletMode to request handler beans.\n\n The bean configuration for this mapping will look something like this:\n \n        <bean id="portletModeHandlerMapping" class="org.springframework.web.portlet.handler.PortletModeHandlerMapping">\n                <property name="portletModeMap">\n                        <map>\n                                <entry key="view"><ref bean="viewHandler"/></entry>\n                                <entry key="edit"><ref bean="editHandler"/></entry>\n                                <entry key="help"><ref bean="helpHandler"/></entry>\n                        </map>\n                </property>\n        </bean>\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/PortletModeHandlerMapping.html
PortletModeParameterHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n interface to map from the current PortletMode and a request parameter to\n request handler beans. The mapping consists of two levels: first the\n PortletMode and then the parameter value. In order to be mapped,\n both elements must match the mapping definition.\n\n This is a combination of the methods used in PortletModeHandlerMapping\n and ParameterHandlerMapping.  Unlike\n those two classes, this mapping cannot be initialized with properties since it\n requires a two-level map.\n\n The default name of the parameter is "action", but can be changed using\n setParameterName().\n\n By default, the same parameter value may not be used in two different portlet\n modes.  This is so that if the portal itself changes the portlet mode, the request\n will no longer be valid in the mapping.  This behavior can be changed with\n setAllowDupParameters().\n\n The bean configuration for this mapping will look somthing like this:\n\n \n <bean id="portletModeParameterHandlerMapping" class="org.springframework.web.portlet.handler.PortletModeParameterHandlerMapping">\n   <property name="portletModeParameterMap">\n     <map>\n       <entry key="view"> <!-- portlet mode: view -->\n         <map>\n           <entry key="add"><ref bean="addItemHandler"/></entry>\n           <entry key="edit"><ref bean="editItemHandler"/></entry>\n           <entry key="delete"><ref bean="deleteItemHandler"/></entry>\n         </map>\n       </entry>\n       <entry key="edit"> <!-- portlet mode: edit -->\n         <map>\n           <entry key="prefs"><ref bean="preferencesHandler"/></entry>\n           <entry key="resetPrefs"><ref bean="resetPreferencesHandler"/></entry>\n         </map>\n       </entry>\n     </map>\n   </property>\n </bean>\nThis mapping can be chained ahead of a PortletModeHandlerMapping,\n which can then provide defaults for each mode and an overall default as well.\n\n Thanks to Rainer Schmitz and Yujin Kim for suggesting this mapping strategy!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/PortletModeParameterHandlerMapping.html
PortletRequestMethodNotSupportedException	A										<section class="prog__container">Exception thrown when a request handler does not support a\n specific request method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/PortletRequestMethodNotSupportedException.html
PortletSessionRequiredException	A										<section class="prog__container">Exception thrown when a portlet content generator requires a pre-existing session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/PortletSessionRequiredException.html
SimpleMappingExceptionResolver	A										<section class="prog__container">HandlerExceptionResolver implementation\n that allows for mapping exception class names to view names, either for a\n set of given handlers or for all handlers in the DispatcherPortlet.\n\n Error views are analogous to error page JSPs, but can be used with any\n kind of exception including any checked one, with fine-granular mappings for\n specific handlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/SimpleMappingExceptionResolver.html
SimplePortletHandlerAdapter	A										<section class="prog__container">Adapter to use the Portlet interface with the generic DispatcherPortlet.\n Calls the Portlet's render and processAction\n methods to handle a request.\n\n This adapter is not activated by default; it needs to be defined as a\n bean in the DispatcherPortlet context. It will automatically apply to\n mapped handler beans that implement the Portlet interface then.\n\n Note that Portlet instances defined as bean will not receive initialization\n and destruction callbacks, unless a special post-processor such as\n SimplePortletPostProcessor is defined in the DispatcherPortlet context.\n\n Alternatively, consider wrapping a Portlet with Spring's\n PortletWrappingController. This is particularly appropriate for\n existing Portlet classes, allowing to specify Portlet initialization\n parameters, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/SimplePortletHandlerAdapter.html
SimplePortletPostProcessor	A										<section class="prog__container">BeanPostProcessor\n that applies initialization and destruction callbacks to beans that\n implement the Portlet interface.\n\n After initialization of the bean instance, the Portlet init\n method will be called with a PortletConfig that contains the bean name\n of the Portlet and the PortletContext that it is running in.\n\n Before destruction of the bean instance, the Portlet destroy\n will be called.\n\n Note that this post-processor does not support Portlet initialization\n parameters. Bean instances that implement the Portlet interface are\n supposed to be configured like any other Spring bean, that is, through\n constructor arguments or bean properties.\n\n For reuse of a Portlet implementation in a plain Portlet container\n and as a bean in a Spring context, consider deriving from Spring's\n GenericPortletBean base class that\n applies Portlet initialization parameters as bean properties, supporting\n both the standard Portlet and the Spring bean initialization style.\n\n Alternatively, consider wrapping a Portlet with Spring's\n PortletWrappingController.\n This is particularly appropriate for existing Portlet classes,\n allowing to specify Portlet initialization parameters etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/SimplePortletPostProcessor.html
UserRoleAuthorizationInterceptor	A										<section class="prog__container">Interceptor that checks the authorization of the current user via the\n user's roles, as evaluated by PortletRequest's isUserInRole method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/UserRoleAuthorizationInterceptor.html
WebRequestHandlerInterceptorAdapter	A										<section class="prog__container">Adapter that implements the Portlet HandlerInterceptor interface\n and wraps an underlying WebRequestInterceptor.\n\n NOTE: The WebRequestInterceptor is by default only applied to the Portlet\n render phase, which is dealing with preparing and rendering a Portlet view.\n The Portlet action phase will only be intercepted with WebRequestInterceptor calls\n if the renderPhaseOnly flag is explicitly set to false.\n In general, it is recommended to use the Portlet-specific HandlerInterceptor\n mechanism for differentiating between action and render interception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/handler/WebRequestHandlerInterceptorAdapter.html
CommonsPortletMultipartResolver	A										<section class="prog__container">PortletMultipartResolver implementation for\n Apache Commons FileUpload\n 1.2 or above.\n\n Provides "maxUploadSize", "maxInMemorySize" and "defaultEncoding" settings as\n bean properties (inherited from CommonsFileUploadSupport). See corresponding\n PortletFileUpload / DiskFileItemFactory properties ("sizeMax", "sizeThreshold",\n "headerEncoding") for details in terms of defaults and accepted values.\n\n Saves temporary files to the portlet container's temporary directory.\n Needs to be initialized either by an application context or\n via the constructor that takes a PortletContext (for standalone usage).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/multipart/CommonsPortletMultipartResolver.html
DefaultMultipartActionRequest	A										<section class="prog__container">Default implementation of the MultipartActionRequest interface.\n Provides management of pre-generated parameter values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/multipart/DefaultMultipartActionRequest.html
MultipartActionRequest	A										<section class="prog__container">Interface which provides additional methods for dealing with multipart\n content within a portlet request, allowing to access uploaded files.\n Implementations also need to override the standard ActionRequest\n methods for parameter access, making multipart parameters available.\n\n A concrete implementation is DefaultMultipartActionRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/multipart/MultipartActionRequest.html
PortletMultipartResolver	A										<section class="prog__container">Portlet version of Spring's multipart resolution strategy for file uploads\n as defined in RFC 1867.\n\n Implementations are typically usable both within any application context\n and standalone.\n\n There is one concrete implementation included in Spring:\n \nCommonsMultipartResolver\n for Apache Commons FileUpload\n \nThere is no default resolver implementation used for Spring\n DispatcherPortlets,\n as an application might choose to parse its multipart requests itself. To\n define an implementation, create a bean with the id "portletMultipartResolver"\n in a DispatcherPortlet's application context. Such a resolver\n gets applied to all requests handled by that DispatcherPortlet.\n\n If a DispatcherPortlet detects a multipart request, it will\n resolve it via the configured\n PortletMultipartResolver\n and pass on a wrapped Portlet ActionRequest. Controllers can then\n cast their given request to the MultipartActionRequest interface,\n being able to access MultipartFiles. Note that this cast is only\n supported in case of an actual multipart request.\n\n  public void handleActionRequest(ActionRequest request, ActionResponse response) {\n   MultipartActionRequest multipartRequest = (MultipartActionRequest) request;\n   MultipartFile multipartFile = multipartRequest.getFile("image");\n   ...\n }\n\n Instead of direct access, command or form controllers can register a\n ByteArrayMultipartFileEditor\n or StringMultipartFileEditor\n with their data binder, to automatically apply multipart content to form\n bean properties.\n\n Note: There is hardly ever a need to access the MultipartResolver\n itself from application code. It will simply do its work behind the scenes,\n making MultipartActionRequests available to controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/multipart/PortletMultipartResolver.html
AbstractController	A										<section class="prog__container">Convenient superclass for controller implementations, using the Template\n Method design pattern.\n\n As stated in the Controller\n interface, a lot of functionality is already provided by certain abstract\n base controllers. The AbstractController is one of the most important\n abstract base controller providing basic features such controlling if a\n session is required and render caching.\n\n Workflow\n (and that defined by interface):\n\nIf this is an action request, handleActionRequest\n will be called by the DispatcherPortlet once to perform the action defined by this\n controller.\nIf a session is required, try to get it (PortletException if not found).\nCall method handleActionRequestInternal,\n (optionally synchronizing around the call on the PortletSession),\n which should be overridden by extending classes to provide actual functionality to\n perform the desired action of the controller.  This will be executed only once.\nFor a straight render request, or the render phase of an action request (assuming the\n same controller is called for the render phase -- see tip below),\n handleRenderRequest will be called by the DispatcherPortlet\n repeatedly to render the display defined by this controller.\nIf a session is required, try to get it (PortletException if none found).\nIt will control caching as defined by the cacheSeconds property.\nCall method handleRenderRequestInternal,\n (optionally synchronizing around the call on the PortletSession),\n which should be overridden by extending classes to provide actual functionality to\n return ModelAndView objects.\n This will be executed repeatedly as the portal updates the current displayed page.\n\nExposed configuration properties\n (and those defined by interface):\n\n\nname</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/AbstractController.html
Controller	A										<section class="prog__container">Base portlet Controller interface, representing a component that receives\n RenderRequest/RenderResponse and ActionRequest/ActionResponse like a\n Portlet but is able to participate in an MVC workflow.\n\n Any implementation of the portlet Controller interface should be a\n reusable, threadsafe class, capable of handling multiple\n portlet requests throughout the lifecycle of an application. To be able to\n configure Controller(s) in an easy way, Controllers are usually JavaBeans.\nWorkflow:\nAfter the DispatcherPortlet has received a request and has done its work\n to resolve locales, themes and suchlike, it tries to resolve a\n Controller to handle that request, using a\n HandlerMapping.\n When a Controller has been found, the\n handleRenderRequest or handleActionRequest\n method will be invoked, which is responsible for handling the actual\n request and - if applicable - returning an appropriate ModelAndView.\n So actually, these method are the main entrypoint for the\n DispatcherPortlet\n which delegates requests to controllers.\nSo basically any direct implementation of the Controller interface\n just handles RenderRequests/ActionRequests and should return a ModelAndView, to be\n further used by the DispatcherPortlet. Any additional functionality such as\n optional validation, form handling, etc should be obtained through extending\n one of the abstract controller classes mentioned above.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/Controller.html
EventAwareController	A										<section class="prog__container">Extension of the Portlet Controller interface that allows\n for handling Portlet 2.0 event requests as well. Can also be\n implemented by AbstractController subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/EventAwareController.html
ParameterizableViewController	A										<section class="prog__container">Trivial controller that always returns a named view. The view can be configured\n using an exposed configuration property. This controller offers an alternative\n to sending a request straight to a view such as a JSP. The advantage here is\n that the client is not exposed to the concrete view technology but rather just\n to the controller URL; the concrete view will be determined by the ViewResolver.\n\n Workflow\n (and that defined by superclass):\n\nRender request is received by the controller\ncall to handleRenderRequestInternal which\n just returns the view, named by the configuration property viewName.\n\nThis controller does not handle action requests.\n\n Exposed configuration properties\n (and those defined by superclass):\n\n\nname\ndefault\ndescription\n\n\nviewName\nnull\nthe name of the view the viewResolver will use to forward to (if this property\n is not set, an exception will be thrown during initialization)\n\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/ParameterizableViewController.html
PortletModeNameViewController	A										<section class="prog__container">Trivial controller that transforms the PortletMode to a view name.\n The advantage here is that the client is not exposed to\n the concrete view technology but rather just to the controller URL;\n the concrete view will be determined by the ViewResolver.\nExample: PortletMode.VIEW -> "view"\nThis controller does not handle action requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/PortletModeNameViewController.html
PortletWrappingController	A										<section class="prog__container">Controller implementation that wraps a portlet instance which it manages\n internally. Such a wrapped portlet is not known outside of this controller;\n its entire lifecycle is covered here.\n\n Useful to invoke an existing portlet via Spring's dispatching infrastructure,\n for example to apply Spring\n HandlerInterceptors\n to its requests.\n\n Example:\n<bean id="wrappingController" class="org.springframework.web.portlet.mvc.PortletWrappingController">\n   <property name="portletClass">\n     <value>org.springframework.web.portlet.sample.HelloWorldPortlet</value>\n   </property>\n   <property name="portletName">\n     <value>hello-world</value>\n   </property>\n   <property name="initParameters">\n     <props>\n       <prop key="config">/WEB-INF/hello-world-portlet-config.xml</prop>\n     </props>\n   </property>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/PortletWrappingController.html
ResourceAwareController	A										<section class="prog__container">Extension of the Portlet Controller interface that allows\n for handling Portlet 2.0 resource requests as well. Can also be\n implemented by AbstractController subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/ResourceAwareController.html
SimpleControllerHandlerAdapter	A										<section class="prog__container">Adapter to use the Controller workflow interface with the generic DispatcherPortlet.\n\n This is an SPI class, not used directly by application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/SimpleControllerHandlerAdapter.html
AnnotationMethodHandlerAdapter	A										<section class="prog__container">Implementation of the HandlerAdapter\n interface that maps handler methods based on portlet modes, action/render phases\n and request parameters expressed through the RequestMapping annotation.\n\n Supports request parameter binding through the RequestParam annotation.\n Also supports the ModelAttribute annotation for exposing model attribute\n values to the view, as well as InitBinder for binder initialization methods\n and SessionAttributes for automatic session management of specific attributes.\n\n This adapter can be customized through various bean properties.\n A common use case is to apply shared binder initialization logic through\n a custom WebBindingInitializer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.html
AnnotationMethodHandlerExceptionResolver	A										<section class="prog__container">Implementation of the HandlerExceptionResolver interface that handles\n exceptions through the ExceptionHandler annotation.\n\n This exception resolver is enabled by default in the DispatcherPortlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.html
DefaultAnnotationHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n interface that maps handlers based on portlet modes expressed through the\n RequestMapping annotation at the type or method level.\n\n Registered by default in DispatcherPortlet.\n NOTE: If you define custom HandlerMapping beans in your DispatcherPortlet context,\n you need to add a DefaultAnnotationHandlerMapping bean explicitly, since custom\n HandlerMapping beans replace the default mapping strategies. Defining a\n DefaultAnnotationHandlerMapping also allows for registering custom interceptors:\n\n \n <bean class="org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping">\n   <property name="interceptors">\n     ...\n   </property>\n </bean>\n\n Annotated controllers are usually marked with the Controller stereotype\n at the type level. This is not strictly necessary when RequestMapping is\n applied at the type level (since such a handler usually implements the\n Controller interface). However,\n Controller is required for detecting RequestMapping annotations\n at the method level.\n\n NOTE: Method-level mappings are only allowed to narrow the mapping\n expressed at the class level (if any). A portlet mode in combination with specific\n parameter conditions needs to uniquely map onto one specific handler bean,\n not spread across multiple handler beans. It is strongly recommended to\n co-locate related handler methods into the same bean.\n\n The AnnotationMethodHandlerAdapter is responsible for processing\n annotated handler methods, as mapped by this HandlerMapping. For\n RequestMapping at the type level, specific HandlerAdapters such as\n SimpleControllerHandlerAdapter apply.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.html
PortletUtils	A										<section class="prog__container">Miscellaneous utilities for portlet applications.\n Used by various framework classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/util/PortletUtils.html
AsyncHandlerInterceptor	A										<section class="prog__container">Extends HandlerInterceptor with a callback method invoked after the\n start of asynchronous request handling.\n\n When a handler starts an asynchronous request, the DispatcherServlet\n exits without invoking postHandle and afterCompletion as it\n normally does for a synchronous request, since the result of request handling\n (e.g. ModelAndView) is likely not yet ready and will be produced concurrently\n from another thread. In such scenarios, afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)\n is invoked instead, allowing implementations to perform tasks such as cleaning\n up thread-bound attributes before releasing the thread to the Servlet container.\n\n When asynchronous handling completes, the request is dispatched to the\n container for further processing. At this stage the DispatcherServlet\n invokes preHandle, postHandle, and afterCompletion.\n To distinguish between the initial request and the subsequent dispatch\n after asynchronous handling completes, interceptors can check whether the\n javax.servlet.DispatcherType of ServletRequest\n is "REQUEST" or "ASYNC".\n\n Note that HandlerInterceptor implementations may need to do work\n when an async request times out or completes with a network error. For such\n cases the Servlet container does not dispatch and therefore the\n postHandle and afterCompletion methods will not be invoked.\n Instead, interceptors can register to track an asynchronous request through\n the registerCallbackInterceptor and registerDeferredResultInterceptor\n methods on WebAsyncManager. This can be done proactively on every request from\n preHandle regardless of whether async request processing will start.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/AsyncHandlerInterceptor.html
DispatcherServlet	A										<section class="prog__container">Central dispatcher for HTTP request handlers/controllers, e.g. for web UI controllers\n or HTTP-based remote service exporters. Dispatches to registered handlers for processing\n a web request, providing convenient mapping and exception handling facilities.\n\n This servlet is very flexible: It can be used with just about any workflow, with the\n installation of the appropriate adapter classes. It offers the following functionality\n that distinguishes it from other request-driven web MVC frameworks:\n\n \nIt is based around a JavaBeans configuration mechanism.\n\n It can use any HandlerMapping implementation - pre-built or provided as part\n of an application - to control the routing of requests to handler objects. Default is\n BeanNameUrlHandlerMapping and\n DefaultAnnotationHandlerMapping.\n HandlerMapping objects can be defined as beans in the servlet's application context,\n implementing the HandlerMapping interface, overriding the default HandlerMapping if\n present. HandlerMappings can be given any bean name (they are tested by type).\n\n It can use any HandlerAdapter; this allows for using any handler interface.\n Default adapters are HttpRequestHandlerAdapter,\n SimpleControllerHandlerAdapter, for Spring's\n HttpRequestHandler and\n Controller interfaces, respectively. A default\n AnnotationMethodHandlerAdapter\n will be registered as well. HandlerAdapter objects can be added as beans in the\n application context, overriding the default HandlerAdapters. Like HandlerMappings,\n HandlerAdapters can be given any bean name (they are tested by type).\n\n The dispatcher's exception resolution strategy can be specified via a\n HandlerExceptionResolver, for example mapping certain exceptions to error pages.\n Default are\n AnnotationMethodHandlerExceptionResolver,\n ResponseStatusExceptionResolver, and\n DefaultHandlerExceptionResolver.\n These HandlerExceptionResolvers can be overridden through the application context.\n HandlerExceptionResolver can be given any bean name (they are tested by type).\n\n Its view resolution strategy can be specified via a ViewResolver\n implementation, resolving symbolic view names into View objects. Default is\n InternalResourceViewResolver.\n ViewResolver objects can be added as beans in the application context, overriding the\n default ViewResolver. ViewResolvers can be given any bean name (they are tested by type).\n\n If a View or view name is not supplied by the user, then the configured\n RequestToViewNameTranslator will translate the current request into a view name.\n The corresponding bean name is "viewNameTranslator"; the default is\n DefaultRequestToViewNameTranslator.\n\n The dispatcher's strategy for resolving multipart requests is determined by a\n MultipartResolver implementation.\n Implementations for Apache Commons FileUpload and Servlet 3 are included; the typical\n choice is CommonsMultipartResolver.\n The MultipartResolver bean name is "multipartResolver"; default is none.\n\n Its locale resolution strategy is determined by a LocaleResolver.\n Out-of-the-box implementations work via HTTP accept header, cookie, or session.\n The LocaleResolver bean name is "localeResolver"; default is\n AcceptHeaderLocaleResolver.\n\n Its theme resolution strategy is determined by a ThemeResolver.\n Implementations for a fixed theme and for cookie and session storage are included.\n The ThemeResolver bean name is "themeResolver"; default is\n FixedThemeResolver.\n \nNOTE: The @RequestMapping annotation will only be processed if a\n corresponding HandlerMapping (for type-level annotations) and/or\n HandlerAdapter (for method-level annotations) is present in the dispatcher.\n This is the case by default. However, if you are defining custom HandlerMappings\n or HandlerAdapters, then you need to make sure that a corresponding custom\n DefaultAnnotationHandlerMapping and/or AnnotationMethodHandlerAdapter\n is defined as well - provided that you intend to use @RequestMapping.\n\n A web application can define any number of DispatcherServlets.\n Each servlet will operate in its own namespace, loading its own application context\n with mappings, handlers, etc. Only the root application context as loaded by\n ContextLoaderListener, if any, will be shared.\n\n As of Spring 3.1, DispatcherServlet may now be injected with a web\n application context, rather than creating its own internally. This is useful in Servlet\n 3.0+ environments, which support programmatic registration of servlet instances.\n See the DispatcherServlet(WebApplicationContext) javadoc for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html
FlashMap	A										<section class="prog__container">A FlashMap provides a way for one request to store attributes intended for\n use in another. This is most commonly needed when redirecting from one URL\n to another -- e.g. the Post/Redirect/Get pattern. A FlashMap is saved before\n the redirect (typically in the session) and is made available after the\n redirect and removed immediately.\n\n A FlashMap can be set up with a request path and request parameters to\n help identify the target request. Without this information, a FlashMap is\n made available to the next request, which may or may not be the intended\n recipient. On a redirect, the target URL is known and a FlashMap can be\n updated with that information. This is done automatically when the\n org.springframework.web.servlet.view.RedirectView is used.\n\n Note: annotated controllers will usually not use FlashMap directly.\n See org.springframework.web.servlet.mvc.support.RedirectAttributes\n for an overview of using flash attributes in annotated controllers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/FlashMap.html
FlashMapManager	A										<section class="prog__container">A strategy interface for retrieving and saving FlashMap instances.\n See FlashMap for a general overview of flash attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/FlashMapManager.html
FrameworkServlet	A										<section class="prog__container">Base servlet for Spring's web framework. Provides integration with\n a Spring application context, in a JavaBean-based overall solution.\n\n This class offers the following functionality:\n \nManages a WebApplicationContext instance per servlet. The servlet's configuration is determined\n by beans in the servlet's namespace.\n Publishes events on request processing, whether or not a request is\n successfully handled.\n \nSubclasses must implement doService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) to handle requests. Because this extends\n HttpServletBean rather than HttpServlet directly, bean properties are\n automatically mapped onto it. Subclasses can override initFrameworkServlet()\n for custom initialization.\n\n Detects a "contextClass" parameter at the servlet init-param level,\n falling back to the default context class,\n XmlWebApplicationContext, if not found. Note that, with the default\n FrameworkServlet, a custom context class needs to implement the\n ConfigurableWebApplicationContext SPI.\n\n Accepts an optional "contextInitializerClasses" servlet init-param that\n specifies one or more ApplicationContextInitializer classes. The managed web application context will be\n delegated to these initializers, allowing for additional programmatic configuration,\n e.g. adding property sources or activating profiles against the context's\n environment. See also ContextLoader which\n supports a "contextInitializerClasses" context-param with identical semantics for\n the "root" web application context.\n\n Passes a "contextConfigLocation" servlet init-param to the context instance,\n parsing it into potentially multiple file paths which can be separated by any\n number of commas and spaces, like "test-servlet.xml, myServlet.xml".\n If not explicitly specified, the context implementation is supposed to build a\n default location from the namespace of the servlet.\n\n Note: In case of multiple config locations, later bean definitions will\n override ones defined in earlier loaded files, at least when using Spring's\n default ApplicationContext implementation. This can be leveraged to\n deliberately override certain bean definitions via an extra XML file.\n\n The default namespace is "'servlet-name'-servlet", e.g. "test-servlet" for a\n servlet-name "test" (leading to a "/WEB-INF/test-servlet.xml" default location\n with XmlWebApplicationContext). The namespace can also be set explicitly via\n the "namespace" servlet init-param.\n\n As of Spring 3.1, FrameworkServlet may now be injected with a web\n application context, rather than creating its own internally. This is useful in Servlet\n 3.0+ environments, which support programmatic registration of servlet instances. See\n FrameworkServlet(WebApplicationContext) Javadoc for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/FrameworkServlet.html
HandlerAdapter	A										<section class="prog__container">MVC framework SPI, allowing parameterization of the core MVC workflow.\n\n Interface that must be implemented for each handler type to handle a request.\n This interface is used to allow the DispatcherServlet to be indefinitely\n extensible. The DispatcherServlet accesses all installed handlers through\n this interface, meaning that it does not contain code specific to any handler type.\n\n Note that a handler can be of type Object. This is to enable\n handlers from other frameworks to be integrated with this framework without\n custom coding, as well as to allow for annotation-driven handler objects that\n do not obey any specific Java interface.\n\n This interface is not intended for application developers. It is available\n to handlers who want to develop their own web workflow.\n\n Note: HandlerAdapter implementors may implement the Ordered interface to be able to specify a sorting\n order (and thus a priority) for getting applied by the DispatcherServlet.\n Non-Ordered instances get treated as lowest priority.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerAdapter.html
HandlerExceptionResolver	A										<section class="prog__container">Interface to be implemented by objects that can resolve exceptions thrown during\n handler mapping or execution, in the typical case to error views. Implementors are\n typically registered as beans in the application context.\n\n Error views are analogous to JSP error pages but can be used with any kind of\n exception including any checked exception, with potentially fine-grained mappings for\n specific handlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerExceptionResolver.html
HandlerExecutionChain	A										<section class="prog__container">Handler execution chain, consisting of handler object and any handler interceptors.\n Returned by HandlerMapping's HandlerMapping.getHandler(javax.servlet.http.HttpServletRequest) method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerExecutionChain.html
HandlerInterceptor	A										<section class="prog__container">Workflow interface that allows for customized handler execution chains.\n Applications can register any number of existing or custom interceptors\n for certain groups of handlers, to add common preprocessing behavior\n without needing to modify each handler implementation.\n\n A HandlerInterceptor gets called before the appropriate HandlerAdapter\n triggers the execution of the handler itself. This mechanism can be used\n for a large field of preprocessing aspects, e.g. for authorization checks,\n or common handler behavior like locale or theme changes. Its main purpose\n is to allow for factoring out repetitive handler code.\n\n In an asynchronous processing scenario, the handler may be executed in a\n separate thread while the main thread exits without rendering or invoking the\n postHandle and afterCompletion callbacks. When concurrent\n handler execution completes, the request is dispatched back in order to\n proceed with rendering the model and all methods of this contract are invoked\n again. For further options and details see\n org.springframework.web.servlet.AsyncHandlerInterceptor\nTypically an interceptor chain is defined per HandlerMapping bean,\n sharing its granularity. To be able to apply a certain interceptor chain\n to a group of handlers, one needs to map the desired handlers via one\n HandlerMapping bean. The interceptors themselves are defined as beans\n in the application context, referenced by the mapping bean definition\n via its "interceptors" property (in XML: a <list> of <ref>).\n\n HandlerInterceptor is basically similar to a Servlet Filter, but in\n contrast to the latter it just allows custom pre-processing with the option\n of prohibiting the execution of the handler itself, and custom post-processing.\n Filters are more powerful, for example they allow for exchanging the request\n and response objects that are handed down the chain. Note that a filter\n gets configured in web.xml, a HandlerInterceptor in the application context.\n\n As a basic guideline, fine-grained handler-related preprocessing tasks are\n candidates for HandlerInterceptor implementations, especially factored-out\n common handler code and authorization checks. On the other hand, a Filter\n is well-suited for request content and view content handling, like multipart\n forms and GZIP compression. This typically shows when one needs to map the\n filter to certain content types (e.g. images), or to all requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html
HandlerMapping	A										<section class="prog__container">Interface to be implemented by objects that define a mapping between\n requests and handler objects.\n\n This class can be implemented by application developers, although this is not\n necessary, as BeanNameUrlHandlerMapping\n and DefaultAnnotationHandlerMapping\n are included in the framework. The former is the default if no\n HandlerMapping bean is registered in the application context.\n\n HandlerMapping implementations can support mapped interceptors but do not\n have to. A handler will always be wrapped in a HandlerExecutionChain\n instance, optionally accompanied by some HandlerInterceptor instances.\n The DispatcherServlet will first call each HandlerInterceptor's\n preHandle method in the given order, finally invoking the handler\n itself if all preHandle methods have returned true.\n\n The ability to parameterize this mapping is a powerful and unusual\n capability of this MVC framework. For example, it is possible to write\n a custom mapping based on session state, cookie state or many other\n variables. No other MVC framework seems to be equally flexible.\n\n Note: Implementations can implement the Ordered\n interface to be able to specify a sorting order and thus a priority for getting\n applied by DispatcherServlet. Non-Ordered instances get treated as lowest priority.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerMapping.html
HttpServletBean	A										<section class="prog__container">Simple extension of HttpServlet which treats\n its config parameters (init-param entries within the\n servlet tag in web.xml) as bean properties.\n\n A handy superclass for any type of servlet. Type conversion of config\n parameters is automatic, with the corresponding setter method getting\n invoked with the converted value. It is also possible for subclasses to\n specify required properties. Parameters without matching bean property\n setter will simply be ignored.\n\n This servlet leaves request handling to subclasses, inheriting the default\n behavior of HttpServlet (doGet, doPost, etc).\n\n This generic servlet base class has no dependency on the Spring\n ApplicationContext concept. Simple\n servlets usually don't load their own context but rather access service\n beans from the Spring root application context, accessible via the\n filter's ServletContext (see\n WebApplicationContextUtils).\n\n The FrameworkServlet class is a more specific servlet base\n class which loads its own application context. FrameworkServlet serves\n as direct base class of Spring's full-fledged DispatcherServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/HttpServletBean.html
LocaleContextResolver	A										<section class="prog__container">Extension of LocaleResolver, adding support for a rich locale context\n (potentially including locale and time zone information).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/LocaleContextResolver.html
LocaleResolver	A										<section class="prog__container">Interface for web-based locale resolution strategies that allows for\n both locale resolution via the request and locale modification via\n request and response.\n\n This interface allows for implementations based on request, session,\n cookies, etc. The default implementation is\n AcceptHeaderLocaleResolver,\n simply using the request's locale provided by the respective HTTP header.\n\n Use RequestContext.getLocale()\n to retrieve the current locale in controllers or views, independent\n of the actual resolution strategy.\n\n Note: As of Spring 4.0, there is an extended strategy interface\n called LocaleContextResolver, allowing for resolution of\n a LocaleContext object,\n potentially including associated time zone information. Spring's\n provided resolver implementations implement the extended\n LocaleContextResolver interface wherever appropriate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/LocaleResolver.html
ModelAndView	A										<section class="prog__container">Holder for both Model and View in the web MVC framework.\n Note that these are entirely distinct. This class merely holds\n both to make it possible for a controller to return both model\n and view in a single return value.\n\n Represents a model and view returned by a handler, to be resolved\n by a DispatcherServlet. The view can take the form of a String\n view name which will need to be resolved by a ViewResolver object;\n alternatively a View object can be specified directly. The model\n is a Map, allowing the use of multiple objects keyed by name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ModelAndView.html
ModelAndViewDefiningException	A										<section class="prog__container">Exception to be thrown on error conditions that should forward\n to a specific view with a specific model.\n\n Can be thrown at any time during handler processing.\n This includes any template methods of pre-built controllers.\n For example, a form controller might abort to a specific error page\n if certain parameters do not allow to proceed with the normal workflow.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ModelAndViewDefiningException.html
NoHandlerFoundException	A										<section class="prog__container">By default when the DispatcherServlet can't find a handler for a request it\n sends a 404 response. However if its property "throwExceptionIfNoHandlerFound"\n is set to true this exception is raised and may be handled with\n a configured HandlerExceptionResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/NoHandlerFoundException.html
RequestToViewNameTranslator	A										<section class="prog__container">Strategy interface for translating an incoming\n HttpServletRequest into a\n logical view name when no view name is explicitly supplied.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/RequestToViewNameTranslator.html
ResourceServlet	A										<section class="prog__container">Simple servlet that can expose an internal resource, including a\n default URL if the specified resource is not found. An alternative,\n for example, to trying and catching exceptions when using JSP include.\n\n A further usage of this servlet is the ability to apply last-modified\n timestamps to quasi-static resources (typically JSPs). This can happen\n as bridge to parameter-specified resources, or as proxy for a specific\n target resource (or a list of specific target resources to combine).\n\n A typical usage would map a URL like "/ResourceServlet" onto an instance\n of this servlet, and use the "JSP include" action to include this URL,\n with the "resource" parameter indicating the actual target path in the WAR.\n\n The defaultUrl property can be set to the internal\n resource path of a default URL, to be rendered when the target resource\n is not found or not specified in the first place.\n\n The "resource" parameter and the defaultUrl property can\n also specify a list of target resources to combine. Those resources will be\n included one by one to build the response. If last-modified determination\n is active, the newest timestamp among those files will be used.\n\n The allowedResources property can be set to a URL\n pattern of resources that should be available via this servlet.\n If not set, any target resource can be requested, including resources\n in the WEB-INF directory!\n\n If using this servlet for direct access rather than via includes,\n the contentType property should be specified to apply a\n proper content type. Note that a content type header in the target JSP will\n be ignored when including the resource via a RequestDispatcher include.\n\n To apply last-modified timestamps for the target resource, set the\n applyLastModified property to true. This servlet will then\n return the file timestamp of the target resource as last-modified value,\n falling back to the startup time of this servlet if not retrievable.\n\n Note that applying the last-modified timestamp in the above fashion\n just makes sense if the target resource does not generate content that\n depends on the HttpSession or cookies; it is just allowed to evaluate\n request parameters.\n\n A typical case for such last-modified usage is a JSP that just makes\n minimal usage of basic means like includes or message resolution to\n build quasi-static content. Regenerating such content on every request\n is unnecessary; it can be cached as long as the file hasn't changed.\n\n Note that this servlet will apply the last-modified timestamp if you\n tell it to do so: It's your decision whether the content of the target\n resource can be cached in such a fashion. Typical use cases are helper\n resources that are not fronted by a controller, like JavaScript files\n that are generated by a JSP (without depending on the HttpSession).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ResourceServlet.html
SmartView	A										<section class="prog__container">Provides additional information about a View such as whether it\n performs redirects.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/SmartView.html
ThemeResolver	A										<section class="prog__container">Interface for web-based theme resolution strategies that allows for\n both theme resolution via the request and theme modification via\n request and response.\n\n This interface allows for implementations based on session,\n cookies, etc. The default implementation is\n FixedThemeResolver,\n simply using a configured default theme.\n\n Note that this resolver is only responsible for determining the\n current theme name. The Theme instance for the resolved theme name\n gets looked up by DispatcherServlet via the respective ThemeSource,\n i.e. the current WebApplicationContext.\n\n Use RequestContext.getTheme()\n to retrieve the current theme in controllers or views, independent\n of the actual resolution strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ThemeResolver.html
View	A										<section class="prog__container">MVC View for a web interaction. Implementations are responsible for rendering\n content, and exposing the model. A single view exposes multiple model attributes.\n\n This class and the MVC approach associated with it is discussed in Chapter 12 of\n Expert One-On-One J2EE Design and Development\n by Rod Johnson (Wrox, 2002).\n\n View implementations may differ widely. An obvious implementation would be\n JSP-based. Other implementations might be XSLT-based, or use an HTML generation library.\n This interface is designed to avoid restricting the range of possible implementations.\n\n Views should be beans. They are likely to be instantiated as beans by a ViewResolver.\n As this interface is stateless, view implementations should be thread-safe.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/View.html
ViewRendererServlet	A										<section class="prog__container">ViewRendererServlet is a bridge servlet, mainly for the Portlet MVC support.\n\n For usage with Portlets, this Servlet is necessary to force the portlet container\n to convert the PortletRequest to a ServletRequest, which it has to do when\n including a resource via the PortletRequestDispatcher. This allows for reuse\n of the entire Servlet-based View support even in a Portlet environment.\n\n The actual mapping of the bridge servlet is configurable in the DispatcherPortlet,\n via a "viewRendererUrl" property. The default is "/WEB-INF/servlet/view", which is\n just available for internal resource dispatching.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ViewRendererServlet.html
ViewResolver	A										<section class="prog__container">Interface to be implemented by objects that can resolve views by name.\n\n View state doesn't change during the running of the application,\n so implementations are free to cache views.\n\n Implementations are encouraged to support internationalization,\n i.e. localized view resolution.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/ViewResolver.html
CorsBeanDefinitionParser	A										<section class="prog__container">BeanDefinitionParser that parses a\n cors element in order to set the CORS configuration in the various\n {AbstractHandlerMapping} beans created by AnnotationDrivenBeanDefinitionParser,\n ResourcesBeanDefinitionParser and ViewControllerBeanDefinitionParser.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/CorsBeanDefinitionParser.html
FreeMarkerConfigurerBeanDefinitionParser	A										<section class="prog__container">Parse the  MVC namespace element and register\n FreeMarkerConfigurer bean</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/FreeMarkerConfigurerBeanDefinitionParser.html
GroovyMarkupConfigurerBeanDefinitionParser	A										<section class="prog__container">Parse the  MVC namespace element and register a\n GroovyConfigurer bean</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/GroovyMarkupConfigurerBeanDefinitionParser.html
MvcNamespaceHandler	A										<section class="prog__container">NamespaceHandler for Spring MVC configuration namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/MvcNamespaceHandler.html
ScriptTemplateConfigurerBeanDefinitionParser	A										<section class="prog__container">Parse the  MVC namespace element and register a\n ScriptTemplateConfigurer bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/ScriptTemplateConfigurerBeanDefinitionParser.html
TilesConfigurerBeanDefinitionParser	A										<section class="prog__container">Parse the  MVC namespace element and register\n a corresponding TilesConfigurer bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/TilesConfigurerBeanDefinitionParser.html
VelocityConfigurerBeanDefinitionParser	A										<section class="prog__container">Parse the  MVC namespace element and register an\n VelocityConfigurer bean</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/VelocityConfigurerBeanDefinitionParser.html
ViewResolversBeanDefinitionParser	A										<section class="prog__container">Parse the view-resolvers MVC namespace element and register\n ViewResolver bean definitions.\n\n All registered resolvers are wrapped in a single (composite) ViewResolver\n with its order property set to 0 so that other external resolvers may be ordered\n before or after it.\n\n When content negotiation is enabled the order property is set to highest priority\n instead with the ContentNegotiatingViewResolver encapsulating all other registered\n view resolver instances. That way the resolvers registered through the MVC namespace\n form self-encapsulated resolver chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.html
AsyncSupportConfigurer	A										<section class="prog__container">Helps with configuring options for asynchronous request processing.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/AsyncSupportConfigurer.html
ContentNegotiationConfigurer	A										<section class="prog__container">Creates a ContentNegotiationManager and configures it with\n one or more ContentNegotiationStrategy instances. The following shows\n the resulting strategy instances, the methods used to configured them, and\n whether enabled by default:\n\n \n\nConfigurer Property\nUnderlying Strategy\nDefault Setting\n\n\nfavorPathExtension(boolean)\nPath Extension strategy\nOn\n\n\nfavorParameter(boolean)\nParameter strategy\nOff\n\n\nignoreAcceptHeader(boolean)\nHeader strategy\nOn\n\n\ndefaultContentType(org.springframework.http.MediaType)\nFixed content strategy\nNot set\n\n\ndefaultContentTypeStrategy(org.springframework.web.accept.ContentNegotiationStrategy)\nContentNegotiationStrategy\nNot set\n\n\nThe order in which strategies are configured is fixed. You can only turn\n them on or off.\n\n For the path extension and parameter strategies you may explicitly add\n MediaType mappings. Those will be used to resolve path\n extensions and/or a query parameter value such as "json" to a concrete media\n type such as "application/json".\n\n The path extension strategy will also use ServletContext.getMimeType(java.lang.String)\n and the Java Activation framework (JAF), if available, to resolve a path\n extension to a MediaType. You may however suppress the use\n of JAF.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html
CorsRegistration	A										<section class="prog__container">Assists with the creation of a CorsConfiguration instance mapped to\n a path pattern. By default all origins, headers, and credentials for\n GET, HEAD, and POST requests are allowed while the\n max age is set to 30 minutes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html
CorsRegistry	A										<section class="prog__container">CorsRegistry assists with the registration of CorsConfiguration\n mapped to a path pattern.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistry.html
DefaultServletHandlerConfigurer	A										<section class="prog__container">Configures a request handler for serving static resources by forwarding the request to the Servlet container's\n "default" Servlet. This is intended to be used when the Spring MVC DispatcherServlet is mapped to "/"\n thus overriding the Servlet container's default handling of static resources. Since this handler is configured\n at the lowest precedence, effectively it allows all other handler mappings to handle the request, and if none\n of them do, this handler can forward it to the "default" Servlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/DefaultServletHandlerConfigurer.html
DelegatingWebMvcConfiguration	A										<section class="prog__container">A subclass of WebMvcConfigurationSupport that detects and delegates\n to all beans of type WebMvcConfigurer allowing them to customize the\n configuration provided by WebMvcConfigurationSupport. This is the\n class actually imported by @EnableWebMvc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.html
EnableWebMvc	A										<section class="prog__container">Adding this annotation to an @Configuration class imports the Spring MVC\n configuration from WebMvcConfigurationSupport, e.g.:\n\n \n @Configuration\n @EnableWebMvc\n @ComponentScan(basePackageClasses = { MyConfiguration.class })\n public class MyWebConfiguration {\n\n }\n \nTo customize the imported configuration, implement the interface\n WebMvcConfigurer or more likely extend the empty method base class\n WebMvcConfigurerAdapter and override individual methods, e.g.:\n\n \n @Configuration\n @EnableWebMvc\n @ComponentScan(basePackageClasses = { MyConfiguration.class })\n public class MyConfiguration extends WebMvcConfigurerAdapter {\n\n           @Override\n           public void addFormatters(FormatterRegistry formatterRegistry) {\n         formatterRegistry.addConverter(new MyConverter());\n           }\n\n           @Override\n           public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n         converters.add(new MyHttpMessageConverter());\n           }\n\n     // More overridden methods ...\n }\n \nIf WebMvcConfigurer does not expose some advanced setting that\n needs to be configured, consider removing the @EnableWebMvc\n annotation and extending directly from WebMvcConfigurationSupport\n or DelegatingWebMvcConfiguration, e.g.:\n\n \n @Configuration\n @ComponentScan(basePackageClasses = { MyConfiguration.class })\n public class MyConfiguration extends WebMvcConfigurationSupport {\n\n           @Override\n           public void addFormatters(FormatterRegistry formatterRegistry) {\n         formatterRegistry.addConverter(new MyConverter());\n           }\n\n           @Bean\n           public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n         // Create or delegate to "super" to create and\n         // customize properties of RequestMappingHandlerAdapter\n           }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html
InterceptorRegistration	A										<section class="prog__container">Assists with the creation of a MappedInterceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/InterceptorRegistration.html
InterceptorRegistry	A										<section class="prog__container">Helps with configuring a list of mapped interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/InterceptorRegistry.html
PathMatchConfigurer	A										<section class="prog__container">Helps with configuring HandlerMappings path matching options such as trailing\n slash match, suffix registration, path matcher and path helper.\n\n Configured path matcher and path helper instances are shared for:\n \nRequestMappings\nViewControllerMappings\nResourcesMappings\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.html
RedirectViewControllerRegistration	A										<section class="prog__container">Assist with the registration of a single redirect view controller.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/RedirectViewControllerRegistration.html
ResourceChainRegistration	A										<section class="prog__container">Assists with the registration of resource resolvers and transformers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ResourceChainRegistration.html
ResourceHandlerRegistration	A										<section class="prog__container">Encapsulates information required to create a resource handler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.html
ResourceHandlerRegistry	A										<section class="prog__container">Stores registrations of resource handlers for serving static resources such as images, css files and others\n through Spring MVC including setting cache headers optimized for efficient loading in a web browser.\n Resources can be served out of locations under web application root, from the classpath, and others.\n\n To create a resource handler, use addResourceHandler(String...) providing the URL path patterns\n for which the handler should be invoked to serve static resources (e.g. "/resources/**").\n\n Then use additional methods on the returned ResourceHandlerRegistration to add one or more\n locations from which to serve static content from (e.g. {"/",\n "classpath:/META-INF/public-web-resources/"}) or to specify a cache period for served resources.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.html
UrlBasedViewResolverRegistration	A										<section class="prog__container">Assist with configuring a UrlBasedViewResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/UrlBasedViewResolverRegistration.html
ViewControllerRegistration	A										<section class="prog__container">Assist with the registration of a single view controller.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.html
ViewControllerRegistry	A										<section class="prog__container">Assists with the registration of simple automated controllers pre-configured\n with status code and/or a view.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ViewControllerRegistry.html
ViewResolverRegistry	A										<section class="prog__container">Assist with the configuration of a chain of\n ViewResolver instances.\n This class is expected to be used via WebMvcConfigurer.configureViewResolvers(org.springframework.web.servlet.config.annotation.ViewResolverRegistry).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.html
WebMvcConfigurationSupport	A										<section class="prog__container">This is the main class providing the configuration behind the MVC Java config.\n It is typically imported by adding @EnableWebMvc to an\n application @Configuration class. An alternative more\n advanced option is to extend directly from this class and override methods as\n necessary remembering to add @Configuration to the\n subclass and @Bean to overridden @Bean methods.\n For more details see the Javadoc of @EnableWebMvc.\n\n This class registers the following HandlerMappings:\n\nRequestMappingHandlerMapping\n ordered at 0 for mapping requests to annotated controller methods.\n HandlerMapping\n ordered at 1 to map URL paths directly to view names.\n BeanNameUrlHandlerMapping\n ordered at 2 to map URL paths to controller bean names.\n HandlerMapping\n ordered at Integer.MAX_VALUE-1 to serve static resource requests.\n HandlerMapping\n ordered at Integer.MAX_VALUE to forward requests to the default servlet.\n \nRegisters these HandlerAdapters:\n \nRequestMappingHandlerAdapter\n for processing requests with annotated controller methods.\n HttpRequestHandlerAdapter\n for processing requests with HttpRequestHandlers.\n SimpleControllerHandlerAdapter\n for processing requests with interface-based Controllers.\n \nRegisters a HandlerExceptionResolverComposite with this chain of\n exception resolvers:\n \nExceptionHandlerExceptionResolver for handling exceptions\n through @ExceptionHandler methods.\n ResponseStatusExceptionResolver for exceptions annotated\n with @ResponseStatus.\n DefaultHandlerExceptionResolver for resolving known Spring\n exception types\n \nRegisters an AntPathMatcher and a UrlPathHelper\n to be used by:\n \nthe RequestMappingHandlerMapping,\n the HandlerMapping for ViewControllers\n and the HandlerMapping for serving resources\n \n Note that those beans can be configured with a PathMatchConfigurer.\n\n Both the RequestMappingHandlerAdapter and the\n ExceptionHandlerExceptionResolver are configured with default\n instances of the following by default:\n \na ContentNegotiationManager\na DefaultFormattingConversionService\na OptionalValidatorFactoryBean\n if a JSR-303 implementation is available on the classpath\n a range of HttpMessageConverters depending on the third-party\n libraries available on the classpath.\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.html
WebMvcConfigurer	A										<section class="prog__container">Defines callback methods to customize the Java-based configuration for\n Spring MVC enabled via @EnableWebMvc.\n\n @EnableWebMvc-annotated configuration classes may implement\n this interface to be called back and given a chance to customize the\n default configuration. Consider extending WebMvcConfigurerAdapter,\n which provides a stub implementation of all interface methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html
WebMvcConfigurerAdapter	A										<section class="prog__container">An implementation of WebMvcConfigurer with empty methods allowing\n subclasses to override only the methods they're interested in.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.html
AbstractDetectingUrlHandlerMapping	A										<section class="prog__container">Abstract implementation of the HandlerMapping\n interface, detecting URL mappings for handler beans through introspection of all\n defined beans in the application context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractDetectingUrlHandlerMapping.html
AbstractHandlerExceptionResolver	A										<section class="prog__container">Abstract base class for HandlerExceptionResolver implementations.\n\n Supports mapped handlers and\n handler classes that the resolver\n should be applied to and implements the Ordered interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.html
AbstractHandlerMapping	A										<section class="prog__container">Abstract base class for HandlerMapping\n implementations. Supports ordering, a default handler, handler interceptors,\n including handler interceptors mapped by path patterns.\n\n Note: This base class does not support exposure of the\n HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE. Support for this attribute\n is up to concrete subclasses, typically based on request URL mappings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractHandlerMapping.html
AbstractHandlerMethodExceptionResolver	A										<section class="prog__container">Abstract base class for\n HandlerExceptionResolver\n implementations that support handling exceptions from handlers of type HandlerMethod.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.html
AbstractHandlerMethodMapping	A										<section class="prog__container">Abstract base class for HandlerMapping implementations that define\n a mapping between a request and a HandlerMethod.\n\n For each registered handler method, a unique mapping is maintained with\n subclasses defining the details of the mapping type <T>.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.html
AbstractUrlHandlerMapping	A										<section class="prog__container">Abstract base class for URL-mapped HandlerMapping\n implementations. Provides infrastructure for mapping handlers to URLs and configurable\n URL lookup. For information on the latter, see "alwaysUseFullPath" property.\n\n Supports direct matches, e.g. a registered "/test" matches "/test", and\n various Ant-style pattern matches, e.g. a registered "/t*" pattern matches\n both "/test" and "/team", "/test/*" matches all paths in the "/test" directory,\n "/test/**" matches all paths below "/test". For details, see the\n AntPathMatcher javadoc.\n\n Will search all path patterns to find the most exact match for the\n current request path. The most exact match is defined as the longest\n path pattern that matches the current request path.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.html
BeanNameUrlHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n interface that map from URLs to beans with names that start with a slash ("/"),\n similar to how Struts maps URLs to action names.\n\n This is the default implementation used by the\n DispatcherServlet, along with\n DefaultAnnotationHandlerMapping.\n Alternatively, SimpleUrlHandlerMapping allows for customizing a\n handler mapping declaratively.\n\n The mapping is from URL to bean name. Thus an incoming URL "/foo" would map\n to a handler named "/foo", or to "/foo /foo2" in case of multiple mappings to\n a single handler. Note: In XML definitions, you'll need to use an alias\n name="/foo" in the bean definition, as the XML id may not contain slashes.\n\n Supports direct matches (given "/test" -> registered "/test") and "*"\n matches (given "/test" -> registered "/t*"). Note that the default is\n to map within the current servlet mapping if applicable; see the\n "alwaysUseFullPath" property for details.\n For details on the pattern options, see the\n AntPathMatcher javadoc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/BeanNameUrlHandlerMapping.html
ConversionServiceExposingInterceptor	A										<section class="prog__container">Interceptor that places the configured ConversionService in request scope\n so it's available during request processing. The request attribute name is\n "org.springframework.core.convert.ConversionService", the value of\n ConversionService.class.getName().\n\n Mainly for use within JSP tags such as the spring:eval tag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/ConversionServiceExposingInterceptor.html
DispatcherServletWebRequest	A										<section class="prog__container">ServletWebRequest subclass that is aware of\n DispatcherServlet's\n request context, such as the Locale determined by the configured\n LocaleResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/DispatcherServletWebRequest.html
HandlerExceptionResolverComposite	A										<section class="prog__container">A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/HandlerExceptionResolverComposite.html
HandlerInterceptorAdapter	A										<section class="prog__container">Abstract adapter class for the AsyncHandlerInterceptor interface,\n for simplified implementation of pre-only/post-only interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/HandlerInterceptorAdapter.html
HandlerMappingIntrospector	A										<section class="prog__container">Helper class to get information from the HandlerMapping that would\n serve a specific request.\n\n Provides the following methods:\n \ngetMatchableHandlerMapping(javax.servlet.http.HttpServletRequest) — obtain a HandlerMapping\n to check request-matching criteria against.\n getCorsConfiguration(javax.servlet.http.HttpServletRequest) — obtain the CORS configuration for the\n request.\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/HandlerMappingIntrospector.html
HandlerMethodMappingNamingStrategy	A										<section class="prog__container">A strategy for assigning a name to a handler method's mapping.\n\n The strategy can be configured on\n AbstractHandlerMethodMapping. It is used to assign a name to the mapping of\n every registered handler method. The names can then be queried via\n AbstractHandlerMethodMapping#getHandlerMethodsForMappingName.\n\n Applications can build a URL to a controller method by name with the help\n of the static method\n MvcUriComponentsBuilder#fromMappingName or in JSPs through the "mvcUrl"\n function registered by the Spring tag library.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/HandlerMethodMappingNamingStrategy.html
MappedInterceptor	A										<section class="prog__container">Contains and delegates calls to a HandlerInterceptor along with\n include (and optionally exclude) path patterns to which the interceptor should apply.\n Also provides matching logic to test if the interceptor applies to a given request path.\n\n A MappedInterceptor can be registered directly with any\n AbstractHandlerMethodMapping. Furthermore, beans of type MappedInterceptor\n are automatically detected by AbstractHandlerMethodMapping (including\n ancestor ApplicationContext's) which effectively means the interceptor is\n registered "globally" with all handler mappings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/MappedInterceptor.html
MatchableHandlerMapping	A										<section class="prog__container">Additional interface that a HandlerMapping can implement to expose\n a request matching API aligned with its internal request matching\n configuration and implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/MatchableHandlerMapping.html
RequestMatchResult	A										<section class="prog__container">Container for the result from request pattern matching via\n MatchableHandlerMapping with a method to further extract\n URI template variables from the pattern.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/RequestMatchResult.html
SimpleMappingExceptionResolver	A										<section class="prog__container">HandlerExceptionResolver implementation\n that allows for mapping exception class names to view names, either for a set of\n given handlers or for all handlers in the DispatcherServlet.\n\n Error views are analogous to error page JSPs, but can be used with any kind of\n exception including any checked one, with fine-granular mappings for specific handlers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.html
SimpleServletHandlerAdapter	A										<section class="prog__container">Adapter to use the Servlet interface with the generic DispatcherServlet.\n Calls the Servlet's service method to handle a request.\n\n Last-modified checking is not explicitly supported: This is typically\n handled by the Servlet implementation itself (usually deriving from\n the HttpServlet base class).\n\n This adapter is not activated by default; it needs to be defined as a\n bean in the DispatcherServlet context. It will automatically apply to\n mapped handler beans that implement the Servlet interface then.\n\n Note that Servlet instances defined as bean will not receive initialization\n and destruction callbacks, unless a special post-processor such as\n SimpleServletPostProcessor is defined in the DispatcherServlet context.\n\n Alternatively, consider wrapping a Servlet with Spring's\n ServletWrappingController. This is particularly appropriate for\n existing Servlet classes, allowing to specify Servlet initialization\n parameters etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/SimpleServletHandlerAdapter.html
SimpleServletPostProcessor	A										<section class="prog__container">BeanPostProcessor\n that applies initialization and destruction callbacks to beans that\n implement the Servlet interface.\n\n After initialization of the bean instance, the Servlet init\n method will be called with a ServletConfig that contains the bean name\n of the Servlet and the ServletContext that it is running in.\n\n Before destruction of the bean instance, the Servlet destroy\n will be called.\n\n Note that this post-processor does not support Servlet initialization\n parameters. Bean instances that implement the Servlet interface are\n supposed to be configured like any other Spring bean, that is, through\n constructor arguments or bean properties.\n\n For reuse of a Servlet implementation in a plain Servlet container\n and as a bean in a Spring context, consider deriving from Spring's\n HttpServletBean base class that\n applies Servlet initialization parameters as bean properties, supporting\n both the standard Servlet and the Spring bean initialization style.\n\n Alternatively, consider wrapping a Servlet with Spring's\n ServletWrappingController.\n This is particularly appropriate for existing Servlet classes,\n allowing to specify Servlet initialization parameters etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/SimpleServletPostProcessor.html
SimpleUrlHandlerMapping	A										<section class="prog__container">Implementation of the HandlerMapping\n interface to map from URLs to request handler beans. Supports both mapping to bean\n instances and mapping to bean names; the latter is required for non-singleton handlers.\n\n The "urlMap" property is suitable for populating the handler map with\n bean references, e.g. via the map element in XML bean definitions.\n\n Mappings to bean names can be set via the "mappings" property, in a form\n accepted by the java.util.Properties class, like as follows:\n/welcome.html=ticketController\n /show.html=ticketController\n \n The syntax is PATH=HANDLER_BEAN_NAME.\n If the path doesn't begin with a slash, one is prepended.\n\n Supports direct matches (given "/test" -> registered "/test") and "*"\n pattern matches (given "/test" -> registered "/t*"). Note that the default\n is to map within the current servlet mapping if applicable; see the\n "alwaysUseFullPath" property. For details on the\n pattern options, see the AntPathMatcher javadoc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.html
UserRoleAuthorizationInterceptor	A										<section class="prog__container">Interceptor that checks the authorization of the current user via the\n user's roles, as evaluated by HttpServletRequest's isUserInRole method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/UserRoleAuthorizationInterceptor.html
WebRequestHandlerInterceptorAdapter	A										<section class="prog__container">Adapter that implements the Servlet HandlerInterceptor interface\n and wraps an underlying WebRequestInterceptor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/handler/WebRequestHandlerInterceptorAdapter.html
AbstractLocaleContextResolver	A										<section class="prog__container">Abstract base class for LocaleContextResolver implementations.\n Provides support for a default locale and a default time zone.\n\n Also provides pre-implemented versions of resolveLocale(javax.servlet.http.HttpServletRequest) and setLocale(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.util.Locale),\n delegating to LocaleContextResolver.resolveLocaleContext(javax.servlet.http.HttpServletRequest) and LocaleContextResolver.setLocaleContext(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.context.i18n.LocaleContext).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/AbstractLocaleContextResolver.html
AbstractLocaleResolver	A										<section class="prog__container">Abstract base class for LocaleResolver implementations.\n Provides support for a default locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/AbstractLocaleResolver.html
AcceptHeaderLocaleResolver	A										<section class="prog__container">LocaleResolver implementation that simply uses the primary locale\n specified in the "accept-language" header of the HTTP request (that is,\n the locale sent by the client browser, normally that of the client's OS).\n\n Note: Does not support setLocale, since the accept header\n can only be changed through changing the client's locale settings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.html
CookieLocaleResolver	A										<section class="prog__container">LocaleResolver implementation that uses a cookie sent back to the user\n in case of a custom setting, with a fallback to the specified default locale\n or the request's accept-header locale.\n\n This is particularly useful for stateless applications without user sessions.\n The cookie may optionally contain an associated time zone value as well;\n alternatively, you may specify a default time zone.\n\n Custom controllers can override the user's locale and time zone by calling\n #setLocale(Context) on the resolver, e.g. responding to a locale change\n request. As a more convenient alternative, consider using\n RequestContext.changeLocale(java.util.Locale).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/CookieLocaleResolver.html
FixedLocaleResolver	A										<section class="prog__container">LocaleResolver implementation\n that always returns a fixed default locale and optionally time zone.\n Default is the current JVM's default locale.\n\n Note: Does not support setLocale(Context), as the fixed\n locale and time zone cannot be changed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/FixedLocaleResolver.html
LocaleChangeInterceptor	A										<section class="prog__container">Interceptor that allows for changing the current locale on every request,\n via a configurable request parameter (default parameter name: "locale").</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/LocaleChangeInterceptor.html
SessionLocaleResolver	A										<section class="prog__container">LocaleResolver implementation that\n uses a locale attribute in the user's session in case of a custom setting,\n with a fallback to the specified default locale or the request's\n accept-header locale.\n\n This is most appropriate if the application needs user sessions anyway,\n i.e. when the HttpSession does not have to be created just for storing\n the user's locale. The session may optionally contain an associated time zone\n attribute as well; alternatively, you may specify a default time zone.\n\n Custom controllers can override the user's locale and time zone by calling\n #setLocale(Context) on the resolver, e.g. responding to a locale change\n request. As a more convenient alternative, consider using\n RequestContext.changeLocale(java.util.Locale).\n\n In contrast to CookieLocaleResolver, this strategy stores locally\n chosen locale settings in the Servlet container's HttpSession. As a\n consequence, those settings are just temporary for each session and therefore\n lost when each session terminates.\n\n Note that there is no direct relationship with external session management\n mechanisms such as the "Spring Session" project. This LocaleResolver\n will simply evaluate and modify corresponding HttpSession attributes\n against the current HttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/i18n/SessionLocaleResolver.html
AbstractController	A										<section class="prog__container">Convenient superclass for controller implementations, using the Template Method\n design pattern.\n\n Workflow\n (and that defined by interface):\n\nhandleRequest()\n will be called by the DispatcherServlet\nInspection of supported methods (ServletException if request method\n is not support)\nIf session is required, try to get it (ServletException if not found)\nSet caching headers if needed according to the cacheSeconds property\nCall abstract method handleRequestInternal()\n (optionally synchronizing around the call on the HttpSession),\n which should be implemented by extending classes to provide actual\n functionality to return ModelAndView objects.\n\nExposed configuration properties\n (and those defined by interface):\n\n\nname</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/AbstractController.html
AbstractUrlViewController	A										<section class="prog__container">Abstract base class for Controllers that return a view name\n based on the request URL.\n\n Provides infrastructure for determining view names from URLs and configurable\n URL lookup. For information on the latter, see alwaysUseFullPath\n and urlDecode properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/AbstractUrlViewController.html
Controller	A										<section class="prog__container">Base Controller interface, representing a component that receives\n HttpServletRequest and HttpServletResponse\n instances just like a HttpServlet but is able to\n participate in an MVC workflow. Controllers are comparable to the\n notion of a Struts Action.\n\n Any implementation of the Controller interface should be a\n reusable, thread-safe class, capable of handling multiple\n HTTP requests throughout the lifecycle of an application. To be able to\n configure a Controller easily, Controller implementations are encouraged\n to be (and usually are) JavaBeans.\n\n Workflow\nAfter a DispatcherServlet has received a request and has\n done its work to resolve locales, themes, and suchlike, it then tries\n to resolve a Controller, using a\n HandlerMapping.\n When a Controller has been found to handle the request, the\n handleRequest\n method of the located Controller will be invoked; the located Controller\n is then responsible for handling the actual request and — if applicable\n — returning an appropriate\n ModelAndView.\n So actually, this method is the main entry point for the\n DispatcherServlet\n which delegates requests to controllers.\n\n So basically any direct implementation of the Controller interface\n just handles HttpServletRequests and should return a ModelAndView, to be further\n interpreted by the DispatcherServlet. Any additional functionality such as\n optional validation, form handling, etc. should be obtained through extending\n AbstractController\n or one of its subclasses.\n\n Notes on design and testing\nThe Controller interface is explicitly designed to operate on HttpServletRequest\n and HttpServletResponse objects, just like an HttpServlet. It does not aim to\n decouple itself from the Servlet API, in contrast to, for example, WebWork, JSF or Tapestry.\n Instead, the full power of the Servlet API is available, allowing Controllers to be\n general-purpose: a Controller is able to not only handle web user interface\n requests but also to process remoting protocols or to generate reports on demand.\n\n Controllers can easily be tested by passing in mock objects for the\n HttpServletRequest and HttpServletResponse objects as parameters to the\n handleRequest\n method. As a convenience, Spring ships with a set of Servlet API mocks\n that are suitable for testing any kind of web components, but are particularly\n suitable for testing Spring web controllers. In contrast to a Struts Action,\n there is no need to mock the ActionServlet or any other infrastructure;\n mocking HttpServletRequest and HttpServletResponse is sufficient.\n\n If Controllers need to be aware of specific environment references, they can\n choose to implement specific awareness interfaces, just like any other bean in a\n Spring (web) application context can do, for example:\n \norg.springframework.context.ApplicationContextAware\norg.springframework.context.ResourceLoaderAware\norg.springframework.web.context.ServletContextAware\n\nSuch environment references can easily be passed in testing environments,\n through the corresponding setters defined in the respective awareness interfaces.\n In general, it is recommended to keep the dependencies as minimal as possible:\n for example, if all you need is resource loading, implement ResourceLoaderAware only.\n Alternatively, derive from the WebApplicationObjectSupport base class, which gives\n you all those references through convenient accessors but requires an\n ApplicationContext reference on initialization.\n\n Controllers can optionally implement the LastModified interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/Controller.html
HttpRequestHandlerAdapter	A										<section class="prog__container">Adapter to use the plain HttpRequestHandler\n interface with the generic DispatcherServlet.\n Supports handlers that implement the LastModified interface.\n\n This is an SPI class, not used directly by application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/HttpRequestHandlerAdapter.html
LastModified	A										<section class="prog__container">Supports last-modified HTTP requests to facilitate content caching.\n Same contract as for the Servlet API's getLastModified method.\n\n Delegated to by a HandlerAdapter.getLastModified(javax.servlet.http.HttpServletRequest, java.lang.Object)\n implementation. By default, any Controller or HttpRequestHandler within Spring's\n default framework can implement this interface to enable last-modified checking.\n\n Note: Alternative handler implementation approaches have different\n last-modified handling styles. For example, Spring 2.5's annotated controller\n approach (using @RequestMapping) provides last-modified support\n through the WebRequest.checkNotModified(long)\n method, allowing for last-modified checking within the main handler method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/LastModified.html
ParameterizableViewController	A										<section class="prog__container">Trivial controller that always returns a pre-configured view and optionally\n sets the response status code. The view and status can be configured using\n the provided configuration properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/ParameterizableViewController.html
ServletForwardingController	A										<section class="prog__container">Spring Controller implementation that forwards to a named servlet,\n i.e. the "servlet-name" in web.xml rather than a URL path mapping.\n A target servlet doesn't even need a "servlet-mapping" in web.xml\n in the first place: A "servlet" declaration is sufficient.\n\n Useful to invoke an existing servlet via Spring's dispatching infrastructure,\n for example to apply Spring HandlerInterceptors to its requests. This will work\n even in a minimal Servlet container that does not support Servlet filters.\n\n Example: web.xml, mapping all "/myservlet" requests to a Spring dispatcher.\n Also defines a custom "myServlet", but without servlet mapping.\n\n \n <servlet>\n   <servlet-name>myServlet</servlet-name>\n   <servlet-class>mypackage.TestServlet</servlet-class>\n </servlet>\n\n <servlet>\n   <servlet-name>myDispatcher</servlet-name>\n   <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n </servlet>\n\n <servlet-mapping>\n   <servlet-name>myDispatcher</servlet-name>\n   <url-pattern>/myservlet</url-pattern>\n </servlet-mapping>\nExample: myDispatcher-servlet.xml, in turn forwarding "/myservlet" to your\n servlet (identified by servlet name). All such requests will go through the\n configured HandlerInterceptor chain (e.g. an OpenSessionInViewInterceptor).\n From the servlet point of view, everything will work as usual.\n\n \n <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">\n   <property name="interceptors">\n     <list>\n       <ref bean="openSessionInViewInterceptor"/>\n     </list>\n   </property>\n   <property name="mappings">\n     <props>\n       <prop key="/myservlet">myServletForwardingController</prop>\n     </props>\n   </property>\n </bean>\n\n <bean id="myServletForwardingController" class="org.springframework.web.servlet.mvc.ServletForwardingController">\n   <property name="servletName"><value>myServlet</value></property>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/ServletForwardingController.html
ServletWrappingController	A										<section class="prog__container">Spring Controller implementation that wraps a servlet instance which it manages\n internally. Such a wrapped servlet is not known outside of this controller;\n its entire lifecycle is covered here (in contrast to ServletForwardingController).\n\n Useful to invoke an existing servlet via Spring's dispatching infrastructure,\n for example to apply Spring HandlerInterceptors to its requests.\n\n Note that Struts has a special requirement in that it parses web.xml\n to find its servlet mapping. Therefore, you need to specify the DispatcherServlet's\n servlet name as "servletName" on this controller, so that Struts finds the\n DispatcherServlet's mapping (thinking that it refers to the ActionServlet).\n\n Example: a DispatcherServlet XML context, forwarding "*.do" to the Struts\n ActionServlet wrapped by a ServletWrappingController. All such requests will go\n through the configured HandlerInterceptor chain (e.g. an OpenSessionInViewInterceptor).\n From the Struts point of view, everything will work as usual.\n\n \n <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">\n   <property name="interceptors">\n     <list>\n       <ref bean="openSessionInViewInterceptor"/>\n     </list>\n   </property>\n   <property name="mappings">\n     <props>\n       <prop key="*.do">strutsWrappingController</prop>\n     </props>\n   </property>\n </bean>\n\n <bean id="strutsWrappingController" class="org.springframework.web.servlet.mvc.ServletWrappingController">\n   <property name="servletClass">\n     <value>org.apache.struts.action.ActionServlet</value>\n   </property>\n   <property name="servletName">\n     <value>action</value>\n   </property>\n   <property name="initParameters">\n     <props>\n       <prop key="config">/WEB-INF/struts-config.xml</prop>\n     </props>\n   </property>\n </bean></section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/ServletWrappingController.html
SimpleControllerHandlerAdapter	A										<section class="prog__container">Adapter to use the plain Controller workflow interface with\n the generic DispatcherServlet.\n Supports handlers that implement the LastModified interface.\n\n This is an SPI class, not used directly by application code.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/SimpleControllerHandlerAdapter.html
UrlFilenameViewController	A										<section class="prog__container">Simple Controller implementation that transforms the virtual\n path of a URL into a view name and returns that view.\n\n Can optionally prepend a prefix and/or append a\n suffix to build the viewname from the URL filename.\n\n Find some examples below:\n \n"/index" -> "index"\n"/index.html" -> "index"\n"/index.html" + prefix "pre_" and suffix "_suf" -> "pre_index_suf"\n"/products/view.html" -> "products/view"\n\nThanks to David Barri for suggesting prefix/suffix support!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/UrlFilenameViewController.html
WebContentInterceptor	A										<section class="prog__container">Handler interceptor that checks the request and prepares the response.\n Checks for supported methods and a required session, and applies the\n specified CacheControl builder.\n See superclass bean properties for configuration options.\n\n All the settings supported by this interceptor can also be set on\n AbstractController. This interceptor is mainly intended for applying\n checks and preparations to a set of controllers mapped by a HandlerMapping.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/WebContentInterceptor.html
AnnotationMethodHandlerAdapter	A										<section class="prog__container">Deprecated. \nas of Spring 3.2, in favor of\n RequestMappingHandlerAdapter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.html
AnnotationMethodHandlerExceptionResolver	A										<section class="prog__container">Deprecated. \nas of Spring 3.2, in favor of\n ExceptionHandlerExceptionResolver\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.html
DefaultAnnotationHandlerMapping	A										<section class="prog__container">Deprecated. \nas of Spring 3.2, in favor of\n RequestMappingHandlerMapping\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.html
ModelAndViewResolver	A										<section class="prog__container">SPI for resolving custom return values from a specific handler method.\n Typically implemented to detect special return types, resolving\n well-known result values for them.\n\n A typical implementation could look like as follows:\n\n \n public class MyModelAndViewResolver implements ModelAndViewResolver {\n\n     public ModelAndView resolveModelAndView(Method handlerMethod, Class handlerType,\n             Object returnValue, ExtendedModelMap implicitModel, NativeWebRequest webRequest) {\n         if (returnValue instanceof MySpecialRetVal.class)) {\n             return new MySpecialRetVal(returnValue);\n         }\n         return UNRESOLVED;\n     }\n }</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.html
ResponseStatusExceptionResolver	A										<section class="prog__container">A HandlerExceptionResolver that uses the @ResponseStatus\n annotation to map exceptions to HTTP status codes.\n\n This exception resolver is enabled by default in the\n DispatcherServlet\n and the MVC Java config and the MVC namespace.\n\n As of 4.2 this resolver also looks recursively for @ResponseStatus\n present on cause exceptions, and as of 4.2.2 this resolver supports\n attribute overrides for @ResponseStatus in custom composed annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.html
AbstractRequestCondition<T extends AbstractRequestCondition>	A										<section class="prog__container">A base class for RequestCondition types providing implementations of\n equals(Object), hashCode(), and toString().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.html
CompositeRequestCondition	A										<section class="prog__container">Implements the RequestCondition contract by delegating to multiple\n RequestCondition types and using a logical conjunction (' && ') to\n ensure all conditions match a given request.\n\n When CompositeRequestCondition instances are combined or compared\n they are expected to (a) contain the same number of conditions and (b) that\n conditions in the respective index are of the same type. It is acceptable to\n provide null conditions or no conditions at all to the constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.html
ConsumesRequestCondition	A										<section class="prog__container">A logical disjunction (' || ') request condition to match a request's\n 'Content-Type' header to a list of media type expressions. Two kinds of\n media type expressions are supported, which are described in\n RequestMapping.consumes() and RequestMapping.headers()\n where the header name is 'Content-Type'. Regardless of which syntax is\n used, the semantics are the same.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.html
HeadersRequestCondition	A										<section class="prog__container">A logical conjunction (' && ') request condition that matches a request against\n a set of header expressions with syntax defined in RequestMapping.headers().\n\n Expressions passed to the constructor with header names 'Accept' or\n 'Content-Type' are ignored. See ConsumesRequestCondition and\n ProducesRequestCondition for those.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.html
MediaTypeExpression	A										<section class="prog__container">A contract for media type expressions (e.g. "text/plain", "!text/plain") as\n defined in the @RequestMapping annotation for "consumes" and\n "produces" conditions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/MediaTypeExpression.html
NameValueExpression	A										<section class="prog__container">A contract for "name!=value" style expression used to specify request\n parameters and request header conditions in @RequestMapping.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/NameValueExpression.html
ParamsRequestCondition	A										<section class="prog__container">A logical conjunction (' && ') request condition that matches a request against\n a set parameter expressions with syntax defined in RequestMapping.params().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.html
PatternsRequestCondition	A										<section class="prog__container">A logical disjunction (' || ') request condition that matches a request\n against a set of URL path patterns.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.html
ProducesRequestCondition	A										<section class="prog__container">A logical disjunction (' || ') request condition to match a request's 'Accept' header\n to a list of media type expressions. Two kinds of media type expressions are\n supported, which are described in RequestMapping.produces() and\n RequestMapping.headers() where the header name is 'Accept'.\n Regardless of which syntax is used, the semantics are the same.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.html
RequestCondition	A										<section class="prog__container">Contract for request mapping conditions.\n\n Request conditions can be combined via combine(Object), matched to\n a request via getMatchingCondition(HttpServletRequest), and compared\n to each other via compareTo(Object, HttpServletRequest) to determine\n which is a closer match for a given request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/RequestCondition.html
RequestConditionHolder	A										<section class="prog__container">A holder for a RequestCondition useful when the type of the request\n condition is not known ahead of time, e.g. custom condition. Since this\n class is also an implementation of RequestCondition, effectively it\n decorates the held request condition and allows it to be combined and compared\n with other request conditions in a type and null safe way.\n\n When two RequestConditionHolder instances are combined or compared\n with each other, it is expected the conditions they hold are of the same type.\n If they are not, a ClassCastException is raised.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/RequestConditionHolder.html
RequestMethodsRequestCondition	A										<section class="prog__container">A logical disjunction (' || ') request condition that matches a request\n against a set of RequestMethods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.html
AbstractHandlerMethodAdapter	A										<section class="prog__container">Abstract base class for HandlerAdapter implementations that support\n handlers of type HandlerMethod.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.html
RequestMappingInfo.Builder	A										<section class="prog__container">Defines a builder for creating a RequestMappingInfo.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfo.Builder.html
RequestMappingInfo.BuilderConfiguration	A										<section class="prog__container">Container for configuration options used for request mapping purposes.\n Such configuration is required to create RequestMappingInfo instances but\n is typically used across all RequestMappingInfo instances.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfo.BuilderConfiguration.html
RequestMappingInfo	A										<section class="prog__container">A RequestCondition that consists of the following other conditions:\n \nPatternsRequestCondition\nRequestMethodsRequestCondition\nParamsRequestCondition\nHeadersRequestCondition\nConsumesRequestCondition\nProducesRequestCondition\nRequestCondition (optional, custom request condition)\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfo.html
RequestMappingInfoHandlerMapping	A										<section class="prog__container">Abstract base class for classes for which RequestMappingInfo defines\n the mapping between a request and a handler method.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.html
RequestMappingInfoHandlerMethodMappingNamingStrategy	A										<section class="prog__container">A HandlerMethodMappingNamingStrategy for RequestMappingInfo-based handler\n method mappings.\n\n If the RequestMappingInfo name attribute is set, its value is used.\n Otherwise the name is based on the capital letters of the class name,\n followed by "#" as a separator, and the method name. For example "TC#getFoo"\n for a class named TestController with method getFoo.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMethodMappingNamingStrategy.html
AbstractJsonpResponseBodyAdvice	A										<section class="prog__container">A convenient base class for a ResponseBodyAdvice to instruct the\n MappingJackson2HttpMessageConverter\n to serialize with JSONP formatting.\n\n Sub-classes must specify the query parameter name(s) to check for the name\n of the JSONP callback function.\n\n Sub-classes are likely to be annotated with the @ControllerAdvice\n annotation and auto-detected or otherwise must be registered directly with the\n RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/AbstractJsonpResponseBodyAdvice.html
AbstractMappingJacksonResponseBodyAdvice	A										<section class="prog__container">A convenient base class for ResponseBodyAdvice implementations\n that customize the response before JSON serialization with\n AbstractJackson2HttpMessageConverter's concrete subclasses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.html
AbstractMessageConverterMethodArgumentResolver	A										<section class="prog__container">A base class for resolving method argument values by reading from the body of\n a request with HttpMessageConverters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.html
AbstractMessageConverterMethodProcessor	A										<section class="prog__container">Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle\n method return values by writing to the response with HttpMessageConverters.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.html
AsyncTaskMethodReturnValueHandler	A										<section class="prog__container">Handles return values of type WebAsyncTask.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/AsyncTaskMethodReturnValueHandler.html
CallableMethodReturnValueHandler	A										<section class="prog__container">Handles return values of type Callable.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/CallableMethodReturnValueHandler.html
CompletionStageReturnValueHandler	A										<section class="prog__container">Deprecated. \nas of 4.3 DeferredResultMethodReturnValueHandler supports\n CompletionStage return values via an adapter mechanism.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/CompletionStageReturnValueHandler.html
DeferredResultAdapter	A										<section class="prog__container">Contract to adapt a single-value async return value to DeferredResult.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/DeferredResultAdapter.html
DeferredResultMethodReturnValueHandler	A										<section class="prog__container">Handler for return values of type DeferredResult, ListenableFuture,\n CompletionStage and any other async type with a registered adapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.html
ExceptionHandlerExceptionResolver	A										<section class="prog__container">An AbstractHandlerMethodExceptionResolver that resolves exceptions\n through @ExceptionHandler methods.\n\n Support for custom argument and return value types can be added via\n setCustomArgumentResolvers(java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>) and setCustomReturnValueHandlers(java.util.List<org.springframework.web.method.support.HandlerMethodReturnValueHandler>).\n Or alternatively to re-configure all argument and return value types use\n setArgumentResolvers(java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>) and setReturnValueHandlers(List).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html
ExtendedServletRequestDataBinder	A										<section class="prog__container">Subclass of ServletRequestDataBinder that adds URI template variables\n to the values used for data binding.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExtendedServletRequestDataBinder.html
HttpEntityMethodProcessor	A										<section class="prog__container">Resolves HttpEntity and RequestEntity method argument values\n and also handles HttpEntity and ResponseEntity return values.\n\n An HttpEntity return type has a specific purpose. Therefore this\n handler should be configured ahead of handlers that support any return\n value type annotated with @ModelAttribute or @ResponseBody\n to ensure they don't take over.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.html
HttpHeadersReturnValueHandler	A										<section class="prog__container">Handles HttpHeaders return values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/HttpHeadersReturnValueHandler.html
JsonViewRequestBodyAdvice	A										<section class="prog__container">A RequestBodyAdvice implementation that adds support for Jackson's\n @JsonView annotation declared on a Spring MVC @HttpEntity\n or @RequestBody method parameter.\n\n The deserialization view specified in the annotation will be passed in to the\n MappingJackson2HttpMessageConverter\n which will then use it to deserialize the request body with.\n\n Note that despite @JsonView allowing for more than one class to\n be specified, the use for a request body advice is only supported with\n exactly one class argument. Consider the use of a composite interface.\n\n Jackson 2.5 or later is required for parameter-level use of @JsonView.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/JsonViewRequestBodyAdvice.html
JsonViewResponseBodyAdvice	A										<section class="prog__container">A ResponseBodyAdvice implementation that adds support for Jackson's\n @JsonView annotation declared on a Spring MVC @RequestMapping\n or @ExceptionHandler method.\n\n The serialization view specified in the annotation will be passed in to the\n MappingJackson2HttpMessageConverter\n which will then use it to serialize the response body.\n\n Note that despite @JsonView allowing for more than one class to\n be specified, the use for a response body advice is only supported with\n exactly one class argument. Consider the use of a composite interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.html
ListenableFutureReturnValueHandler	A										<section class="prog__container">Deprecated. \nas of 4.3 DeferredResultMethodReturnValueHandler supports\n ListenableFuture return values via an adapter mechanism.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.html
MatrixVariableMapMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments of type Map annotated with\n @MatrixVariable where the annotation does not\n specify a name. If a name is specified then the argument will by resolved by the\n MatrixVariableMethodArgumentResolver instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.html
MatrixVariableMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with @MatrixVariable.\n\n If the method parameter is of type Map and no name is specified, then it will\n by resolved by the MatrixVariableMapMethodArgumentResolver instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMethodArgumentResolver.html
ModelAndViewMethodReturnValueHandler	A										<section class="prog__container">Handles return values of type ModelAndView copying view and model\n information to the ModelAndViewContainer.\n\n If the return value is null, the\n ModelAndViewContainer.setRequestHandled(boolean) flag is set to\n true to indicate the request was handled directly.\n\n A ModelAndView return type has a set purpose. Therefore this\n handler should be configured ahead of handlers that support any return\n value type annotated with @ModelAttribute or @ResponseBody\n to ensure they don't take over.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.html
ModelAndViewResolverMethodReturnValueHandler	A										<section class="prog__container">This return value handler is intended to be ordered after all others as it\n attempts to handle _any_ return value type (i.e. returns true for\n all return types).\n\n The return value is handled either with a ModelAndViewResolver\n or otherwise by regarding it as a model attribute if it is a non-simple\n type. If neither of these succeeds (essentially simple type other than\n String), UnsupportedOperationException is raised.\n\n Note: This class is primarily needed to support\n ModelAndViewResolver, which unfortunately cannot be properly\n adapted to the HandlerMethodReturnValueHandler contract since the\n HandlerMethodReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter) method\n cannot be implemented. Hence ModelAndViewResolvers are limited\n to always being invoked at the end after all other return value\n handlers have been given a chance. It is recommended to re-implement\n a ModelAndViewResolver as HandlerMethodReturnValueHandler,\n which also provides better access to the return type and method information.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewResolverMethodReturnValueHandler.html
MvcUriComponentsBuilder	A										<section class="prog__container">Creates instances of UriComponentsBuilder\n by pointing to Spring MVC controllers and @RequestMapping methods.\n\n The static fromXxx(...) methods prepare links relative to the\n current request as determined by a call to\n ServletUriComponentsBuilder.fromCurrentServletMapping().\n\n The static fromXxx(UriComponentsBuilder,...) methods can be given\n the baseUrl when operating outside the context of a request.\n\n You can also create an MvcUriComponentsBuilder instance with a baseUrl\n via relativeTo(org.springframework.web.util.UriComponentsBuilder)\n and then use the non-static withXxx(...) method variants.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.html
MvcUriComponentsBuilder.MethodArgumentBuilder	A										<section class="prog__container">Deprecated. \nas of 4.2, this is deprecated in favor of alternative constructors\n that accept a controllerType argument\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.MethodArgumentBuilder.html
PathVariableMapMethodArgumentResolver	A										<section class="prog__container">Resolves Map method arguments annotated with an @PathVariable\n where the annotation does not specify a path variable name. The created\n Map contains all URI template name/value pairs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.html
PathVariableMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with an @PathVariable.\n\n An @PathVariable is a named value that gets resolved from a URI template variable.\n It is always required and does not have a default value to fall back on. See the base class\n AbstractNamedValueMethodArgumentResolver\n for more information on how named values are processed.\n\n If the method parameter type is Map, the name specified in the annotation is used\n to resolve the URI variable String value. The value is then converted to a Map via\n type conversion, assuming a suitable Converter or PropertyEditor has been\n registered.\n\n A WebDataBinder is invoked to apply type conversion to resolved path variable\n values that don't yet match the method parameter type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/PathVariableMethodArgumentResolver.html
RedirectAttributesMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments of type RedirectAttributes.\n\n This resolver must be listed ahead of\n ModelMethodProcessor and\n MapMethodProcessor,\n which support Map and Model arguments both of which are\n "super" types of RedirectAttributes and would also attempt to\n resolve a RedirectAttributes argument.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RedirectAttributesMethodArgumentResolver.html
RequestAttributeMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with an @RequestAttribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestAttributeMethodArgumentResolver.html
RequestBodyAdvice	A										<section class="prog__container">Allows customizing the request before its body is read and converted into an\n Object and also allows for processing of the resulting Object before it is\n passed into a controller method as an @RequestBody or an\n HttpEntity method argument.\n\n Implementations of this contract may be registered directly with the\n RequestMappingHandlerAdapter or more likely annotated with\n @ControllerAdvice in which case they are auto-detected.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdvice.html
RequestBodyAdviceAdapter	A										<section class="prog__container">A convenient starting point for implementing\n ResponseBodyAdvice with default method implementations.\n\n Sub-classes are required to implement RequestBodyAdvice.supports(org.springframework.core.MethodParameter, java.lang.reflect.Type, java.lang.Class<? extends org.springframework.http.converter.HttpMessageConverter<?>>) to return true\n depending on when the advice applies.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdviceAdapter.html
RequestMappingHandlerAdapter	A										<section class="prog__container">An AbstractHandlerMethodAdapter that supports HandlerMethods\n with their method argument and return type signature, as defined via\n @RequestMapping.\n\n Support for custom argument and return value types can be added via\n setCustomArgumentResolvers(java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>) and setCustomReturnValueHandlers(java.util.List<org.springframework.web.method.support.HandlerMethodReturnValueHandler>).\n Or alternatively, to re-configure all argument and return value types,\n use setArgumentResolvers(java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>) and setReturnValueHandlers(java.util.List<org.springframework.web.method.support.HandlerMethodReturnValueHandler>).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.html
RequestMappingHandlerMapping	A										<section class="prog__container">Creates RequestMappingInfo instances from type and method-level\n @RequestMapping annotations in\n @Controller classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.html
RequestPartMethodArgumentResolver	A										<section class="prog__container">Resolves the following method arguments:\n \nAnnotated with @RequestPart\nOf type MultipartFile in conjunction with Spring's MultipartResolver abstraction\n Of type javax.servlet.http.Part in conjunction with Servlet 3.0 multipart requests\n \nWhen a parameter is annotated with @RequestPart, the content of the part is\n passed through an HttpMessageConverter to resolve the method argument with the\n 'Content-Type' of the request part in mind. This is analogous to what @RequestBody\n does to resolve an argument based on the content of a regular request.\n\n When a parameter is not annotated or the name of the part is not specified,\n it is derived from the name of the method argument.\n\n Automatic validation may be applied if the argument is annotated with\n @javax.validation.Valid. In case of validation failure, a MethodArgumentNotValidException\n is raised and a 400 response status code returned if\n DefaultHandlerExceptionResolver is configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.html
RequestResponseBodyMethodProcessor	A										<section class="prog__container">Resolves method arguments annotated with @RequestBody and handles return\n values from methods annotated with @ResponseBody by reading and writing\n to the body of the request or response with an HttpMessageConverter.\n\n An @RequestBody method argument is also validated if it is annotated\n with @javax.validation.Valid. In case of validation failure,\n MethodArgumentNotValidException is raised and results in an HTTP 400\n response status code if DefaultHandlerExceptionResolver is configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.html
ResponseBodyAdvice	A										<section class="prog__container">Allows customizing the response after the execution of an @ResponseBody\n or a ResponseEntity controller method but before the body is written\n with an HttpMessageConverter.\n\n Implementations may be may be registered directly with\n RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver\n or more likely annotated with @ControllerAdvice in which case they\n will be auto-detected by both.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.html
ResponseBodyEmitter.DataWithMediaType	A										<section class="prog__container">A simple holder of data to be written along with a MediaType hint for\n selecting a message converter to write with.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.DataWithMediaType.html
ResponseBodyEmitter	A										<section class="prog__container">A controller method return value type for asynchronous request processing\n where one or more objects are written to the response.\n\n While DeferredResult\n is used to produce a single result, a ResponseBodyEmitter can be used\n to send multiple objects where each object is written with a compatible\n HttpMessageConverter.\n\n Supported as a return type on its own as well as within a\n ResponseEntity.\n\n \n @RequestMapping(value="/stream", method=RequestMethod.GET)\n public ResponseBodyEmitter handle() {\n           ResponseBodyEmitter emitter = new ResponseBodyEmitter();\n           // Pass the emitter to another component...\n           return emitter;\n }\n\n // in another thread\n emitter.send(foo1);\n\n // and again\n emitter.send(foo2);\n\n // and done\n emitter.complete();\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.html
ResponseBodyEmitterAdapter	A										<section class="prog__container">Contract to adapt streaming async types to ResponseBodyEmitter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterAdapter.html
ResponseBodyEmitterReturnValueHandler	A										<section class="prog__container">Handler for return values of type ResponseBodyEmitter (and the\n ResponseEntity<ResponseBodyEmitter> sub-class) as well as any other\n async type with a registered adapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.html
ResponseEntityExceptionHandler	A										<section class="prog__container">A convenient base class for @ControllerAdvice classes\n that wish to provide centralized exception handling across all\n @RequestMapping methods through @ExceptionHandler methods.\n\n This base class provides an @ExceptionHandler method for handling\n internal Spring MVC exceptions. This method returns a ResponseEntity\n for writing to the response with a message converter.\n in contrast to\n DefaultHandlerExceptionResolver which returns a\n ModelAndView.\n\n If there is no need to write error content to the response body, or when\n using view resolution (e.g., via ContentNegotiatingViewResolver),\n then DefaultHandlerExceptionResolver is good enough.\n\n Note that in order for an @ControllerAdvice sub-class to be\n detected, ExceptionHandlerExceptionResolver must be configured.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html
ServletCookieValueMethodArgumentResolver	A										<section class="prog__container">An AbstractCookieValueMethodArgumentResolver\n that resolves cookie values from an HttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletCookieValueMethodArgumentResolver.html
ServletInvocableHandlerMethod	A										<section class="prog__container">Extends InvocableHandlerMethod with the ability to handle return\n values through a registered HandlerMethodReturnValueHandler and\n also supports setting the response status based on a method-level\n @ResponseStatus annotation.\n\n A null return value (including void) may be interpreted as the\n end of request processing in combination with a @ResponseStatus\n annotation, a not-modified check condition\n (see ServletWebRequest.checkNotModified(long)), or\n a method argument that provides access to the response stream.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.html
ServletModelAttributeMethodProcessor	A										<section class="prog__container">A Servlet-specific ModelAttributeMethodProcessor that applies data\n binding through a WebDataBinder of type ServletRequestDataBinder.\n\n Also adds a fall-back strategy to instantiate the model attribute from a\n URI template variable or from a request parameter if the name matches the\n model attribute name and there is an appropriate type conversion strategy.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletModelAttributeMethodProcessor.html
ServletRequestDataBinderFactory	A										<section class="prog__container">Creates a ServletRequestDataBinder.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletRequestDataBinderFactory.html
ServletRequestMethodArgumentResolver	A										<section class="prog__container">Resolves request-related method argument values of the following types:\n \nWebRequest\nServletRequest\nMultipartRequest\nHttpSession\nPrincipal\nLocale\nTimeZone (as of Spring 4.0)\n ZoneId (as of Spring 4.0 and Java 8)\nInputStream\nReader\nHttpMethod (as of Spring 4.0)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.html
ServletResponseMethodArgumentResolver	A										<section class="prog__container">Resolves response-related method argument values of types:\n \nServletResponse\nOutputStream\nWriter\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletResponseMethodArgumentResolver.html
ServletWebArgumentResolverAdapter	A										<section class="prog__container">A Servlet-specific AbstractWebArgumentResolverAdapter that creates a\n NativeWebRequest from ServletRequestAttributes.\n\n Note: This class is provided for backwards compatibility.\n However it is recommended to re-write a WebArgumentResolver as\n HandlerMethodArgumentResolver. For more details see javadoc of\n AbstractWebArgumentResolverAdapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletWebArgumentResolverAdapter.html
SessionAttributeMethodArgumentResolver	A										<section class="prog__container">Resolves method arguments annotated with an @SessionAttribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SessionAttributeMethodArgumentResolver.html
SseEmitter	A										<section class="prog__container">A specialization of ResponseBodyEmitter for sending\n Server-Sent Events.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.html
SseEmitter.SseEventBuilder	A										<section class="prog__container">A builder for an SSE event.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.SseEventBuilder.html
StreamingResponseBody	A										<section class="prog__container">A controller method return value type for asynchronous request processing\n where the application can write directly to the response OutputStream\n without holding up the Servlet container thread.\n\n Note: when using this option it is highly recommended to\n configure explicitly the TaskExecutor used in Spring MVC for executing\n asynchronous requests. Both the MVC Java config and the MVC namespaces provide\n options to configure asynchronous handling. If not using those, an application\n can set the taskExecutor property of\n RequestMappingHandlerAdapter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html
StreamingResponseBodyReturnValueHandler	A										<section class="prog__container">Supports return values of type\n StreamingResponseBody\n and also ResponseEntity<StreamingResponseBody>.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.html
UriComponentsBuilderMethodArgumentResolver	A										<section class="prog__container">Resolvers argument values of type UriComponentsBuilder.\n\n The returned instance is initialized via\n ServletUriComponentsBuilder.fromServletMapping(HttpServletRequest).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/UriComponentsBuilderMethodArgumentResolver.html
ViewMethodReturnValueHandler	A										<section class="prog__container">Handles return values that are of type View.\n\n A null return value is left as-is leaving it to the configured\n RequestToViewNameTranslator to select a view name by convention.\n\n A View return type has a set purpose. Therefore this handler\n should be configured ahead of handlers that support any return value type\n annotated with @ModelAttribute or @ResponseBody to ensure\n they don't take over.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ViewMethodReturnValueHandler.html
ViewNameMethodReturnValueHandler	A										<section class="prog__container">Handles return values of types void and String interpreting them\n as view name reference. As of 4.2, it also handles general CharSequence\n types, e.g. StringBuilder or Groovy's GString, as view names.\n\n A null return value, either due to a void return type or\n as the actual return value is left as-is allowing the configured\n RequestToViewNameTranslator to select a view name by convention.\n\n A String return value can be interpreted in more than one ways depending\n on the presence of annotations like @ModelAttribute or\n @ResponseBody. Therefore this handler should be configured after\n the handlers that support these annotations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ViewNameMethodReturnValueHandler.html
AbstractUrlMethodNameResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/AbstractUrlMethodNameResolver.html
InternalPathMethodNameResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/InternalPathMethodNameResolver.html
MethodNameResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/MethodNameResolver.html
MultiActionController	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html
NoSuchRequestHandlingMethodException	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/NoSuchRequestHandlingMethodException.html
ParameterMethodNameResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/ParameterMethodNameResolver.html
PropertiesMethodNameResolver	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/multiaction/PropertiesMethodNameResolver.html
AbstractControllerUrlHandlerMapping	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/AbstractControllerUrlHandlerMapping.html
ControllerBeanNameHandlerMapping	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/ControllerBeanNameHandlerMapping.html
ControllerClassNameHandlerMapping	A										<section class="prog__container">Deprecated. \nas of 4.3, in favor of annotation-driven handler methods\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.html
DefaultHandlerExceptionResolver	A										<section class="prog__container">Default implementation of the HandlerExceptionResolver interface that resolves standard Spring exceptions and translates\n them to corresponding HTTP status codes.\n\n This exception resolver is enabled by default in the common Spring\n DispatcherServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.html
RedirectAttributes	A										<section class="prog__container">A specialization of the Model interface that controllers can use to\n select attributes for a redirect scenario. Since the intent of adding\n redirect attributes is very explicit --  i.e. to be used for a redirect URL,\n attribute values may be formatted as Strings and stored that way to make\n them eligible to be appended to the query string or expanded as URI\n variables in org.springframework.web.servlet.view.RedirectView.\n\n This interface also provides a way to add flash attributes. For a\n general overview of flash attributes see FlashMap. You can use\n RedirectAttributes to store flash attributes and they will be\n automatically propagated to the "output" FlashMap of the current request.\n\n Example usage in an @Controller:\n \n @RequestMapping(value = "/accounts", method = RequestMethod.POST)\n public String handle(Account account, BindingResult result, RedirectAttributes redirectAttrs) {\n   if (result.hasErrors()) {\n     return "accounts/new";\n   }\n   // Save account ...\n   redirectAttrs.addAttribute("id", account.getId()).addFlashAttribute("message", "Account created!");\n   return "redirect:/accounts/{id}";\n }\n \nA RedirectAttributes model is empty when the method is called and is never\n used unless the method returns a redirect view name or a RedirectView.\n\n After the redirect, flash attributes are automatically added to the model\n of the controller that serves the target URL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/RedirectAttributes.html
RedirectAttributesModelMap	A										<section class="prog__container">A ModelMap implementation of RedirectAttributes that formats\n values as Strings using a DataBinder. Also provides a place to store\n flash attributes so they can survive a redirect without the need to be\n embedded in the redirect URL.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/support/RedirectAttributesModelMap.html
AbstractResourceResolver	A										<section class="prog__container">Base class for ResourceResolver\n implementations. Provides consistent logging.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/AbstractResourceResolver.html
AbstractVersionStrategy.FileNameVersionPathStrategy	A										<section class="prog__container">File name-based VersionPathStrategy,\n e.g. "path/foo-{version}.css".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/AbstractVersionStrategy.FileNameVersionPathStrategy.html
AbstractVersionStrategy	A										<section class="prog__container">Abstract base class for VersionStrategy implementations.\n\n Supports versions as:\n \nprefix in the request path, like "version/static/myresource.js"\n file name suffix in the request path, like "static/myresource-version.js"\n \nNote: This base class does not provide support for generating the\n version string.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/AbstractVersionStrategy.html
AbstractVersionStrategy.PrefixVersionPathStrategy	A										<section class="prog__container">A prefix-based VersionPathStrategy,\n e.g. "{version}/path/foo.js".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/AbstractVersionStrategy.PrefixVersionPathStrategy.html
AppCacheManifestTransformer	A										<section class="prog__container">A ResourceTransformer implementation that helps handling resources\n within HTML5 AppCache manifests for HTML5 offline applications.\n\n This transformer:\n \nmodifies links to match the public URL paths that should be exposed to clients,\n using configured ResourceResolver strategies\n appends a comment in the manifest, containing a Hash (e.g. "# Hash: 9de0f09ed7caf84e885f1f0f11c7e326"),\n thus changing the content of the manifest in order to trigger an appcache reload in the browser.\n \n\n All files that have the ".manifest" file extension, or the extension given in the constructor,\n will be transformed by this class.\n\n This hash is computed using the content of the appcache manifest and the content of the linked resources;\n so changing a resource linked in the manifest or the manifest itself should invalidate the browser cache.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/AppCacheManifestTransformer.html
CachingResourceResolver	A										<section class="prog__container">A ResourceResolver that\n resolves resources from a Cache or otherwise\n delegates to the resolver chain and saves the result in the cache.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/CachingResourceResolver.html
CachingResourceTransformer	A										<section class="prog__container">A ResourceTransformer that checks a\n Cache to see if a previously transformed resource\n exists in the cache and returns it if found, and otherwise delegates to the resolver\n chain and saves the result in the cache.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/CachingResourceTransformer.html
ContentVersionStrategy	A										<section class="prog__container">A VersionStrategy that calculates an Hex MD5 hashes from the content\n of the resource and appends it to the file name, e.g.\n "styles/main-e36d2e05253c6c7085a91522ce43a0b4.css".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ContentVersionStrategy.html
CssLinkResourceTransformer.AbstractCssLinkParser	A										<section class="prog__container">Invoked after a keyword match, after whitespaces removed, and when\n the next char is neither a single nor double quote.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/CssLinkResourceTransformer.AbstractCssLinkParser.html
CssLinkResourceTransformer	A										<section class="prog__container">A ResourceTransformer implementation that modifies links in a CSS\n file to match the public URL paths that should be exposed to clients (e.g.\n with an MD5 content-based hash inserted in the URL).\n\n The implementation looks for links in CSS @import statements and\n also inside CSS url() functions. All links are then passed through the\n ResourceResolverChain and resolved relative to the location of the\n containing CSS file. If successfully resolved, the link is modified, otherwise\n the original link is preserved.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/CssLinkResourceTransformer.html
DefaultServletHttpRequestHandler	A										<section class="prog__container">An HttpRequestHandler for serving static files using the Servlet container's "default" Servlet.\n\n This handler is intended to be used with a "/*" mapping when the\n DispatcherServlet\n is mapped to "/", thus  overriding the Servlet container's default handling of static resources.\n The mapping to this handler should generally be ordered as the last in the chain so that it will\n only execute when no other more specific mappings (i.e., to controllers) can be matched.\n\n Requests are handled by forwarding through the RequestDispatcher obtained via the\n name specified through the "defaultServletName" property.\n In most cases, the defaultServletName does not need to be set explicitly, as the\n handler checks at initialization time for the presence of the default Servlet of well-known\n containers such as Tomcat, Jetty, Resin, WebLogic and WebSphere. However, when running in a\n container where the default Servlet's name is not known, or where it has been customized\n via server configuration, the  defaultServletName will need to be set explicitly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.html
EncodedResource	A										<section class="prog__container">Interface for a resource descriptor that describes the encoding\n applied to the entire resource content.\n\n This information is required if the client consuming that resource\n needs additional decoding capabilities to retrieve the resource's content.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/EncodedResource.html
FixedVersionStrategy	A										<section class="prog__container">A VersionStrategy that relies on a fixed version applied as a request\n path prefix, e.g. reduced SHA, version name, release date, etc.\n\n This is useful for example when ContentVersionStrategy cannot be\n used such as when using JavaScript module loaders which are in charge of\n loading the JavaScript resources and need to know their relative paths.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/FixedVersionStrategy.html
GzipResourceResolver	A										<section class="prog__container">A ResourceResolver that delegates to the chain to locate a resource\n and then attempts to find a variation with the ".gz" extension.\n\n The resolver gets involved only if the "Accept-Encoding" request header\n contains the value "gzip" indicating the client accepts gzipped responses.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/GzipResourceResolver.html
PathResourceResolver	A										<section class="prog__container">A simple ResourceResolver that tries to find a resource under the given\n locations matching to the request path.\n\n This resolver does not delegate to the ResourceResolverChain and is\n expected to be configured at the end in a chain of resolvers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/PathResourceResolver.html
ResourceHttpRequestHandler	A										<section class="prog__container">HttpRequestHandler that serves static resources in an optimized way\n according to the guidelines of Page Speed, YSlow, etc.\n\n The "locations" property takes a list of Spring\n Resource locations from which static resources are allowed to\n be served by this handler. Resources could be served from a classpath location,\n e.g. "classpath:/META-INF/public-web-resources/", allowing convenient packaging\n and serving of resources such as .js, .css, and others in jar files.\n\n This request handler may also be configured with a\n resourcesResolver and\n resourceTransformer chains to support\n arbitrary resolution and transformation of resources being served. By default a\n PathResourceResolver simply finds resources based on the configured\n "locations". An application can configure additional resolvers and\n transformers such as the VersionResourceResolver which can resolve\n and prepare URLs for resources with a version in the URL.\n\n This handler also properly evaluates the Last-Modified header (if\n present) so that a 304 status code will be returned as appropriate,\n avoiding unnecessary overhead for resources that are already cached by the\n client.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.html
ResourceResolver	A										<section class="prog__container">A strategy for resolving a request to a server-side resource.\n\n Provides mechanisms for resolving an incoming request to an actual\n Resource and for obtaining the\n public URL path that clients should use when requesting the resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceResolver.html
ResourceResolverChain	A										<section class="prog__container">A contract for invoking a chain of ResourceResolvers where each resolver\n is given a reference to the chain allowing it to delegate when necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceResolverChain.html
ResourceTransformer	A										<section class="prog__container">An abstraction for transforming the content of a resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceTransformer.html
ResourceTransformerChain	A										<section class="prog__container">A contract for invoking a chain of ResourceTransformers where each resolver\n is given a reference to the chain allowing it to delegate when necessary.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceTransformerChain.html
ResourceTransformerSupport	A										<section class="prog__container">A base class for a ResourceTransformer with an optional helper method\n for resolving public links within a transformed resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceTransformerSupport.html
ResourceUrlEncodingFilter	A										<section class="prog__container">A filter that wraps the HttpServletResponse and overrides its\n encodeURL method in order to\n translate internal resource request URLs into public URL paths for external\n use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.html
ResourceUrlProvider	A										<section class="prog__container">A central component to use to obtain the public URL path that clients should\n use to access a static resource.\n\n This class is aware of Spring MVC handler mappings used to serve static\n resources and uses the ResourceResolver chains of the configured\n ResourceHttpRequestHandlers to make its decisions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html
ResourceUrlProviderExposingInterceptor	A										<section class="prog__container">An interceptor that exposes the ResourceUrlProvider instance it\n is configured with as a request attribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProviderExposingInterceptor.html
TransformedResource	A										<section class="prog__container">An extension of ByteArrayResource\n that a ResourceTransformer can use to represent an original\n resource preserving all other information except the content.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/TransformedResource.html
VersionedResource	A										<section class="prog__container">Interface for a resource descriptor that describes its version with a\n version string that can be derived from its content and/or metadata.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/VersionedResource.html
VersionPathStrategy	A										<section class="prog__container">A strategy for extracting and embedding a resource version in its URL path.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/VersionPathStrategy.html
VersionResourceResolver	A										<section class="prog__container">Resolves request paths containing a version string that can be used as part\n of an HTTP caching strategy in which a resource is cached with a date in the\n distant future (e.g. 1 year) and cached until the version, and therefore the\n URL, is changed.\n\n Different versioning strategies exist, and this resolver must be configured\n with one or more such strategies along with path mappings to indicate which\n strategy applies to which resources.\n\n ContentVersionStrategy is a good default choice except in cases\n where it cannot be used. Most notably the ContentVersionStrategy\n cannot be combined with JavaScript module loaders. For such cases the\n FixedVersionStrategy is a better choice.\n\n Note that using this resolver to serve CSS files means that the\n CssLinkResourceTransformer should also be used in order to modify\n links within CSS files to also contain the appropriate versions generated\n by this resolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/VersionResourceResolver.html
VersionStrategy	A										<section class="prog__container">An extension of VersionPathStrategy that adds a method\n to determine the actual version of a Resource.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/VersionStrategy.html
WebJarsResourceResolver	A										<section class="prog__container">A ResourceResolver that delegates to the chain to locate a resource and then\n attempts to find a matching versioned resource contained in a WebJar JAR file.\n\n This allows WebJars.org users to write version agnostic paths in their templates,\n like <script src="/jquery/jquery.min.js"/>.\n This path will be resolved to the unique version <script src="/jquery/1.2.0/jquery.min.js"/>,\n which is a better fit for HTTP caching and version management in applications.\n\n This also resolves resources for version agnostic HTTP requests "GET /jquery/jquery.min.js".\n\n This resolver requires the "org.webjars:webjars-locator" library on classpath,\n and is automatically registered if that library is present.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/resource/WebJarsResourceResolver.html
AbstractAnnotationConfigDispatcherServletInitializer	A										<section class="prog__container">Base class for WebApplicationInitializer\n implementations that register a\n DispatcherServlet\n configured with annotated classes, e.g. Spring's\n @Configuration classes.\n\n Concrete implementations are required to implement getRootConfigClasses()\n and getServletConfigClasses() as well as AbstractDispatcherServletInitializer.getServletMappings().\n Further template and customization methods are provided by\n AbstractDispatcherServletInitializer.\n\n This is the preferred approach for applications that use Java-based\n Spring configuration.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.html
AbstractDispatcherServletInitializer	A										<section class="prog__container">Base class for WebApplicationInitializer\n implementations that register a DispatcherServlet in the servlet context.\n\n Concrete implementations are required to implement\n createServletApplicationContext(), as well as getServletMappings(),\n both of which get invoked from registerDispatcherServlet(ServletContext).\n Further customization can be achieved by overriding\n customizeRegistration(ServletRegistration.Dynamic).\n\n Because this class extends from AbstractContextLoaderInitializer, concrete\n implementations are also required to implement AbstractContextLoaderInitializer.createRootApplicationContext()\n to set up a parent "root" application context. If a root context is\n not desired, implementations can simply return null in the\n createRootApplicationContext() implementation.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.html
AbstractFlashMapManager	A										<section class="prog__container">A base class for FlashMapManager implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/AbstractFlashMapManager.html
BindStatus	A										<section class="prog__container">Simple adapter to expose the bind status of a field or object.\n Set as a variable both by the JSP bind tag and Velocity/FreeMarker macros.\n\n Obviously, object status representations (i.e. errors at the object level\n rather than the field level) do not have an expression and a value but only\n error codes and messages. For simplicity's sake and to be able to use the same\n tags and macros, the same status class is used for both scenarios.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/BindStatus.html
JspAwareRequestContext	A										<section class="prog__container">JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for\n population of the context from a javax.servlet.jsp.PageContext.\n\n This context will detect a JSTL locale attribute in page/request/session/application\n scope, in addition to the fallback locale strategy provided by the base class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/JspAwareRequestContext.html
JstlUtils	A										<section class="prog__container">Helper class for preparing JSTL views,\n in particular for exposing a JSTL localization context.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/JstlUtils.html
RequestContext	A										<section class="prog__container">Context holder for request-specific state, like current web application context, current locale,\n current theme, and potential binding errors. Provides easy access to localized messages and\n Errors instances.\n\n Suitable for exposition to views, and usage within JSP's "useBean" tag, JSP scriptlets, JSTL EL,\n etc. Necessary for views that do not have access to the servlet request, like FreeMarker templates.\n\n Can be instantiated manually, or automatically exposed to views as model attribute via AbstractView's\n "requestContextAttribute" property.\n\n Will also work outside of DispatcherServlet requests, accessing the root WebApplicationContext\n and using an appropriate fallback for the locale (the HttpServletRequest's primary locale).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/RequestContext.html
RequestContextUtils	A										<section class="prog__container">Utility class for easy access to request-specific state which has been\n set by the DispatcherServlet.\n\n Supports lookup of current WebApplicationContext, LocaleResolver,\n Locale, ThemeResolver, Theme, and MultipartResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/RequestContextUtils.html
RequestDataValueProcessor	A										<section class="prog__container">A contract for inspecting and potentially modifying request data values such\n as URL query parameters or form field values before they are rendered by a\n view or before a redirect.\n\n Implementations may use this contract for example as part of a solution\n to provide data integrity, confidentiality, protection against cross-site\n request forgery (CSRF), and others or for other tasks such as automatically\n adding a hidden field to all forms and URLs.\n\n View technologies that support this contract can obtain an instance to\n delegate to via RequestContext.getRequestDataValueProcessor().</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/RequestDataValueProcessor.html
ServletUriComponentsBuilder	A										<section class="prog__container">A UriComponentsBuilder that extracts information from the HttpServletRequest.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/ServletUriComponentsBuilder.html
SessionFlashMapManager	A										<section class="prog__container">Store and retrieve FlashMap instances to and from the HTTP session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/SessionFlashMapManager.html
WebContentGenerator	A										<section class="prog__container">Convenient superclass for any kind of web content generator,\n like AbstractController\n and WebContentInterceptor.\n Can also be used for custom handlers that have their own\n HandlerAdapter.\n\n Supports HTTP cache control options. The usage of corresponding HTTP\n headers can be controlled via the "cacheSeconds"\n and "cacheControl" properties.\n\n NOTE: As of Spring 4.2, this generator's default behavior changed when\n using only setCacheSeconds(int), sending HTTP response headers that are in line\n with current browsers and proxies implementations (i.e. no HTTP 1.0 headers anymore)\n Reverting to the previous behavior can be easily done by using one of the newly\n deprecated methods setUseExpiresHeader(boolean), setUseCacheControlHeader(boolean),\n setUseCacheControlNoStore(boolean) or setAlwaysMustRevalidate(boolean).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html
ArgumentAware	A										<section class="prog__container">Allows implementing tag to utilize nested spring:argument tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/ArgumentAware.html
ArgumentTag	A										<section class="prog__container">JSP tag for collecting arguments and passing them to an ArgumentAware\n ancestor in the tag hierarchy.\n\n This tag must be nested under an argument aware tag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/ArgumentTag.html
BindErrorsTag	A										<section class="prog__container">JSP tag that evaluates content if there are binding errors\n for a certain bean. Exports an "errors" variable of type\n Errors for the given bean.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/BindErrorsTag.html
BindTag	A										<section class="prog__container">Bind tag, supporting evaluation of binding errors for a certain\n bean or bean property. Exposes a "status" variable of type\n BindStatus,\n to both Java expressions and JSP EL expressions.\n\n Can be used to bind to any bean or bean property in the model.\n The specified path determines whether the tag exposes the status of the\n bean itself (showing object-level errors), a specific bean property\n (showing field errors), or a matching set of bean properties\n (showing all corresponding field errors).\n\n The Errors object that has\n been bound using this tag is exposed to collaborating tags, as well\n as the bean property that this errors object applies to. Nested tags\n such as the TransformTag can access those exposed properties.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/BindTag.html
EditorAwareTag	A										<section class="prog__container">Interface to be implemented by JSP tags that expose a\n PropertyEditor for a property that they are currently bound to.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/EditorAwareTag.html
EscapeBodyTag	A										<section class="prog__container">Custom JSP tag to escape its enclosed body content,\n applying HTML escaping and/or JavaScript escaping.\n\n Provides a "htmlEscape" property for explicitly specifying whether to\n apply HTML escaping. If not set, a page-level default (e.g. from the\n HtmlEscapeTag) or an application-wide default (the "defaultHtmlEscape"\n context-param in web.xml) is used.\n\n Provides a "javaScriptEscape" property for specifying whether to apply\n JavaScript escaping. Can be combined with HTML escaping or used standalone.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/EscapeBodyTag.html
EvalTag	A										<section class="prog__container">JSP tag for evaluating expressions with the Spring Expression Language (SpEL).\n Supports the standard JSP evaluation context consisting of implicit variables and scoped attributes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/EvalTag.html
HtmlEscapeTag	A										<section class="prog__container">Sets default HTML escape value for the current page. The actual value\n can be overridden by escaping-aware tags. The default is "false".\n\n Note: You can also set a "defaultHtmlEscape" web.xml context-param.\n A page-level setting overrides a context-param.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/HtmlEscapeTag.html
HtmlEscapingAwareTag	A										<section class="prog__container">Superclass for tags that output content that might get HTML-escaped.\n\n Provides a "htmlEscape" property for explicitly specifying whether to\n apply HTML escaping. If not set, a page-level default (e.g. from the\n HtmlEscapeTag) or an application-wide default (the "defaultHtmlEscape"\n context-param in web.xml) is used.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/HtmlEscapingAwareTag.html
MessageTag	A										<section class="prog__container">Custom JSP tag to look up a message in the scope of this page. Messages are\n resolved using the ApplicationContext and thus support internationalization.\n\n Detects an HTML escaping setting, either on this tag instance, the page level,\n or the web.xml level. Can also apply JavaScript escaping.\n\n If "code" isn't set or cannot be resolved, "text" will be used as default\n message. Thus, this tag can also be used for HTML escaping of any texts.\n\n Message arguments can be specified via the arguments\n attribute or by using nested <spring:argument> tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/MessageTag.html
NestedPathTag	A										<section class="prog__container">Nested-path tag, to support and assist with nested beans or bean properties\n in the model. Exports a "nestedPath" variable of type String in request scope,\n visible to the current page and also included pages, if any.\n\n The BindTag will auto-detect the current nested path and automatically\n prepend it to its own path to form a complete path to the bean or bean property.\n\n This tag will also prepend any existing nested path that is currently set.\n Thus, you can nest multiple nested-path tags.\n\n Thanks to Seth Ladd for the suggestion and the original implementation!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/NestedPathTag.html
Param	A										<section class="prog__container">Bean used to pass name-value pair parameters from a ParamTag to a\n ParamAware tag.\n\n Attributes are the raw values passed to the spring:param tag and have not\n been encoded or escaped.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/Param.html
ParamAware	A										<section class="prog__container">Allows implementing tag to utilize nested spring:param tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/ParamAware.html
ParamTag	A										<section class="prog__container">JSP tag for collecting name-value parameters and passing them to a\n ParamAware ancestor in the tag hierarchy.\n\n This tag must be nested under a param aware tag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/ParamTag.html
RequestContextAwareTag	A										<section class="prog__container">Superclass for all tags that require a RequestContext.\n\n The RequestContext instance provides easy access\n to current state like the\n WebApplicationContext,\n the Locale, the\n Theme, etc.\n\n Mainly intended for\n DispatcherServlet requests;\n will use fallbacks when used outside DispatcherServlet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/RequestContextAwareTag.html
ThemeTag	A										<section class="prog__container">Custom tag to look up a theme message in the scope of this page.\n Messages are looked up using the ApplicationContext's ThemeSource,\n and thus should support internationalization.\n\n Regards a HTML escaping setting, either on this tag instance,\n the page level, or the web.xml level.\n\n If "code" isn't set or cannot be resolved, "text" will be used\n as default message.\n\n Message arguments can be specified via the arguments\n attribute or by using nested <spring:argument> tags.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/ThemeTag.html
TransformTag	A										<section class="prog__container">Tag for transforming reference data values from form controllers and\n other objects inside a spring:bind tag (or a data-bound\n form element tag from Spring's form tag library).\n\n The BindTag has a PropertyEditor that it uses to transform properties of\n a bean to a String, usable in HTML forms. This tag uses that PropertyEditor\n to transform objects passed into this tag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/TransformTag.html
UrlTag	A										<section class="prog__container">JSP tag for creating URLs. Modeled after the JSTL c:url tag with backwards\n compatibility in mind.\n\n Enhancements to the JSTL functionality include:\n \nURL encoded template URI variables\nHTML/XML escaping of URLs\nJavaScript escaping of URLs\n\nTemplate URI variables are indicated in the 'value'\n attribute and marked by braces '{variableName}'. The braces and attribute name are\n replaced by the URL encoded value of a parameter defined with the spring:param tag\n in the body of the url tag. If no parameter is available the literal value is\n passed through. Params matched to template variables will not be added to the query\n string.\n\n Use of the spring:param tag for URI template variables is strongly recommended\n over direct EL substitution as the values are URL encoded.  Failure to properly\n encode URL can leave an application vulnerable to XSS and other injection attacks.\n\n URLs can be HTML/XML escaped by setting the 'htmlEscape' attribute to 'true'.  Detects an HTML escaping setting, either on\n this tag instance, the page level, or the web.xml level. The default\n is 'false'.  When setting the URL value into a variable, escaping is not recommended.\n\n Example usage:\n <spring:url value="/url/path/{variableName}">\n   <spring:param name="variableName" value="more than JSTL c:url" />\n </spring:url>\n Results in:\n /currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/UrlTag.html
AbstractCheckedElementTag	A										<section class="prog__container">Abstract base class to provide common methods for\n implementing databinding-aware JSP tags for rendering an HTML 'input'\n element with a 'type' of 'checkbox' or 'radio'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractCheckedElementTag.html
AbstractDataBoundFormElementTag	A										<section class="prog__container">Base tag for all data-binding aware JSP form tags.\n\n Provides the common path and id properties.\n Provides sub-classes with utility methods for accessing the BindStatus\n of their bound value and also for interacting\n with the TagWriter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractDataBoundFormElementTag.html
AbstractFormTag	A										<section class="prog__container">Base class for all JSP form tags. Provides utility methods for\n null-safe EL evaluation and for accessing and working with a TagWriter.\n\n Subclasses should implement the writeTagContent(TagWriter) to perform\n actual tag rendering.\n\n Subclasses (or test classes) can override the createTagWriter() method to\n redirect output to a Writer other than the JspWriter\n associated with the current PageContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractFormTag.html
AbstractHtmlElementBodyTag	A										<section class="prog__container">Convenient super class for many html tags that render content using the databinding\n features of the AbstractHtmlElementTag. The only thing\n sub-tags need to do is override renderDefaultContent(TagWriter).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractHtmlElementBodyTag.html
AbstractHtmlElementTag	A										<section class="prog__container">Base class for databinding-aware JSP tags that render HTML element. Provides\n a set of properties corresponding to the set of HTML attributes that are common\n across elements.\n\n Additionally, this base class allows for rendering non-standard attributes\n as part of the tag's output.  These attributes are accessible to subclasses if\n needed via the dynamicAttributes\n map.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractHtmlElementTag.html
AbstractHtmlInputElementTag	A										<section class="prog__container">Base class for databinding-aware JSP tags that render HTML form input element.\n\n Provides a set of properties corresponding to the set of HTML attributes\n that are common across form input elements.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractHtmlInputElementTag.html
AbstractMultiCheckedElementTag	A										<section class="prog__container">Abstract base class to provide common methods for implementing\n databinding-aware JSP tags for rendering multiple\n HTML 'input' elements with a 'type'\n of 'checkbox' or 'radio'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractMultiCheckedElementTag.html
AbstractSingleCheckedElementTag	A										<section class="prog__container">Abstract base class to provide common methods for implementing\n databinding-aware JSP tags for rendering a single\n HTML 'input' element with a 'type'\n of 'checkbox' or 'radio'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/AbstractSingleCheckedElementTag.html
ButtonTag	A										<section class="prog__container">An HTML button tag. This tag is provided for completeness if the application\n relies on a RequestDataValueProcessor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/ButtonTag.html
CheckboxesTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering multiple HTML 'input'\n elements with a 'type' of 'checkbox'.\n\n Intended to be used with a Collection as the AbstractMultiCheckedElementTag.getItems() bound value}.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/CheckboxesTag.html
CheckboxTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'input'\n element with a 'type' of 'checkbox'.\n\n May be used in one of three different approaches depending on the\n type of the bound value.\n\n Approach One\n When the bound value is of type Boolean then the 'input(checkbox)'\n is marked as 'checked' if the bound value is true. The 'value'\n attribute corresponds to the resolved value of the value property.\n Approach Two\n When the bound value is of type Collection then the 'input(checkbox)'\n is marked as 'checked' if the configured value is present in\n the bound Collection.\n Approach Three\n For any other bound value type, the 'input(checkbox)' is marked as 'checked'\n if the configured value is equal to the bound value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/CheckboxTag.html
ErrorsTag	A										<section class="prog__container">Form tag for displaying errors for a particular field or object.\n\n This tag supports three main usage patterns:\n\n \nField only - set 'path' to the field name (or path)\nObject errors only - omit 'path'\nAll errors - set 'path' to '*'\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/ErrorsTag.html
FormTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'form' whose\n inner elements are bound to properties on a form object.\n\n Users should place the form object into the\n ModelAndView when\n populating the data for their view. The name of this form object can be\n configured using the "modelAttribute" property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/FormTag.html
HiddenInputTag	A										<section class="prog__container">Data-binding aware JSP tag for rendering a hidden HTML 'input' field\n containing the databound value.\n\n Example (binding to 'name' property of form backing object):\n Since:</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/HiddenInputTag.html
InputTag	A										<section class="prog__container">Data-binding-aware JSP tag for rendering an HTML 'input'\n element with a 'type' of 'text'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/InputTag.html
LabelTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'label' element\n that defines text that is associated with a single form element.\n\n See the "formTags" showcase application that ships with the\n full Spring distribution for an example of this class in action.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/LabelTag.html
OptionsTag	A										<section class="prog__container">Convenient tag that allows one to supply a collection of objects\n that are to be rendered as 'option' tags within a\n 'select' tag.\n\n Must be used within a 'select' tag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/OptionsTag.html
OptionTag	A										<section class="prog__container">JSP tag for rendering an HTML 'option' tag.\n\n Must be used nested inside a SelectTag.\nProvides full support for databinding by marking an\n 'option' as 'selected' if the value\n matches the value bound to the out SelectTag.\n\n The value property is required and corresponds to\n the 'value' attribute of the rendered 'option'.\n\n An optional label property can be specified, the\n value of which corresponds to inner text of the rendered\n 'option' tag. If no label is specified\n then the value property will be used when rendering\n the inner text.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/OptionTag.html
PasswordInputTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'input'\n element with a 'type' of 'password'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/PasswordInputTag.html
RadioButtonsTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering multiple HTML 'input'\n elements with a 'type' of 'radio'.\n\n Rendered elements are marked as 'checked' if the configured\n value matches the bound value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/RadioButtonsTag.html
RadioButtonTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'input'\n element with a 'type' of 'radio'.\n\n Rendered elements are marked as 'checked' if the configured\n value matches the bound value.\n\n A typical usage pattern will involved multiple tag instances bound\n to the same property but with different values.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/RadioButtonTag.html
SelectTag	A										<section class="prog__container">Databinding-aware JSP tag that renders an HTML 'select'\n element.\n\n Inner 'option' tags can be rendered using one of the\n approaches supported by the OptionWriter class.\n\n Also supports the use of nested OptionTags or\n (typically one) nested OptionsTag.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/SelectTag.html
TagWriter	A										<section class="prog__container">Utility class for writing HTML content to a Writer instance.\n\n Intended to support output from JSP tag libraries.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/TagWriter.html
TextareaTag	A										<section class="prog__container">Databinding-aware JSP tag for rendering an HTML 'textarea'.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/form/TextareaTag.html
AbstractThemeResolver	A										<section class="prog__container">Abstract base class for ThemeResolver implementations.\n Provides support for a default theme name.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/theme/AbstractThemeResolver.html
CookieThemeResolver	A										<section class="prog__container">ThemeResolver implementation that uses a cookie sent back to the user\n in case of a custom setting, with a fallback to the default theme.\n This is particularly useful for stateless applications without user sessions.\n\n Custom controllers can thus override the user's theme by calling\n setThemeName, e.g. responding to a certain theme change request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/theme/CookieThemeResolver.html
FixedThemeResolver	A										<section class="prog__container">ThemeResolver implementation\n that simply uses a fixed theme. The fixed name can be defined via\n the "defaultThemeName" property; out of the box, it is "theme".\n\n Note: Does not support setThemeName, as the fixed theme\n cannot be changed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/theme/FixedThemeResolver.html
SessionThemeResolver	A										<section class="prog__container">ThemeResolver implementation that\n uses a theme attribute in the user's session in case of a custom setting,\n with a fallback to the default theme. This is most appropriate if the\n application needs user sessions anyway.\n\n Custom controllers can override the user's theme by calling\n setThemeName, e.g. responding to a theme change request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/theme/SessionThemeResolver.html
ThemeChangeInterceptor	A										<section class="prog__container">Interceptor that allows for changing the current theme on every request,\n via a configurable request parameter (default parameter name: "theme").</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/theme/ThemeChangeInterceptor.html
AbstractCachingViewResolver	A										<section class="prog__container">Convenient base class for ViewResolver\n implementations. Caches View objects\n once resolved: This means that view resolution won't be a performance problem,\n no matter how costly initial view retrieval is.\n\n Subclasses need to implement the loadView(java.lang.String, java.util.Locale) template method,\n building the View object for a specific view name and locale.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/AbstractCachingViewResolver.html
AbstractTemplateView	A										<section class="prog__container">Adapter base class for template-based view technologies such as\n Velocity and FreeMarker, with the ability to use request and session\n attributes in their model and the option to expose helper objects\n for Spring's Velocity/FreeMarker macro library.\n\n JSP/JSTL and other view technologies automatically have access to the\n HttpServletRequest object and thereby the request/session attributes\n for the current user. Furthermore, they are able to create and cache\n helper objects as request attributes themselves.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/AbstractTemplateView.html
AbstractTemplateViewResolver	A										<section class="prog__container">Abstract base class for template view resolvers,\n in particular for Velocity and FreeMarker views.\n\n Provides a convenient way to specify AbstractTemplateView's\n exposure flags for request attributes, session attributes,\n and Spring's macro helpers.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/AbstractTemplateViewResolver.html
AbstractUrlBasedView	A										<section class="prog__container">Abstract base class for URL-based views. Provides a consistent way of\n holding the URL that a View wraps, in the form of a "url" bean property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/AbstractUrlBasedView.html
AbstractView	A										<section class="prog__container">Abstract base class for View\n implementations. Subclasses should be JavaBeans, to allow for\n convenient configuration as Spring-managed bean instances.\n\n Provides support for static attributes, to be made available to the view,\n with a variety of ways to specify them. Static attributes will be merged\n with the given dynamic attributes (the model that the controller returned)\n for each render operation.\n\n Extends WebApplicationObjectSupport, which will be helpful to\n some views. Subclasses just need to implement the actual rendering.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/AbstractView.html
BeanNameViewResolver	A										<section class="prog__container">A simple implementation of ViewResolver\n that interprets a view name as a bean name in the current application context,\n i.e. typically in the XML file of the executing DispatcherServlet.\n\n This resolver can be handy for small applications, keeping all definitions\n ranging from controllers to views in the same place. For larger applications,\n XmlViewResolver will be the better choice, as it separates the XML\n view bean definitions into a dedicated views file.\n\n Note: Neither this ViewResolver nor XmlViewResolver supports\n internationalization. Consider ResourceBundleViewResolver if you need\n to apply different view resources per locale.\n\n Note: This ViewResolver implements the Ordered interface\n in order to allow for flexible participation in ViewResolver chaining.\n For example, some special views could be defined via this ViewResolver\n (giving it 0 as "order" value), while all remaining views could be resolved by\n a UrlBasedViewResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/BeanNameViewResolver.html
ContentNegotiatingViewResolver	A										<section class="prog__container">Implementation of ViewResolver that resolves a view based on the request file name\n or Accept header.\n\n The ContentNegotiatingViewResolver does not resolve views itself, but delegates to\n other ViewResolvers. By default, these other view resolvers are picked up automatically\n from the application context, though they can also be set explicitly by using the\n viewResolvers property. Note that in order for this\n view resolver to work properly, the order property needs to be set to a higher\n precedence than the others (the default is Ordered.HIGHEST_PRECEDENCE).\n\n This view resolver uses the requested media type to select a suitable\n View for a request. The requested media type is determined through the configured\n ContentNegotiationManager. Once the requested media type has been determined, this resolver\n queries each delegate view resolver for a View and determines if the requested media type\n is compatible with the view's\n content type). The most compatible view is returned.\n\n Additionally, this view resolver exposes the defaultViews property,\n allowing you to override the views provided by the view resolvers. Note that these default views are\n offered as candidates, and still need have the content type requested (via file extension, parameter,\n or Accept header, described above).\n\n For example, if the request path is /view.html, this view resolver will look for a view\n that has the text/html content type (based on the html file extension). A request\n for /view with a text/html request Accept header has the same result.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html
DefaultRequestToViewNameTranslator	A										<section class="prog__container">RequestToViewNameTranslator that simply transforms the URI of\n the incoming request into a view name.\n\n Can be explicitly defined as the viewNameTranslator bean in a\n DispatcherServlet context.\n Otherwise, a plain default instance will be used.\n\n The default transformation simply strips leading and trailing slashes\n as well as the file extension of the URI, and returns the result as the\n view name with the configured prefix and a\n suffix added as appropriate.\n\n The stripping of the leading slash and file extension can be disabled\n using the stripLeadingSlash and\n stripExtension properties, respectively.\n\n Find below some examples of request to view name translation.\n \nhttp://localhost:8080/gamecast/display.html » display\nhttp://localhost:8080/gamecast/displayShoppingCart.html » displayShoppingCart\nhttp://localhost:8080/gamecast/admin/index.html » admin/index\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/DefaultRequestToViewNameTranslator.html
InternalResourceView	A										<section class="prog__container">Wrapper for a JSP or other resource within the same web application.\n Exposes model objects as request attributes and forwards the request to\n the specified resource URL using a RequestDispatcher.\n\n A URL for this view is supposed to specify a resource within the web\n application, suitable for RequestDispatcher's forward or\n include method.\n\n If operating within an already included request or within a response that\n has already been committed, this view will fall back to an include instead of\n a forward. This can be enforced by calling response.flushBuffer()\n (which will commit the response) before rendering the view.\n\n Typical usage with InternalResourceViewResolver looks as follows,\n from the perspective of the DispatcherServlet context definition:\n\n <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n   <property name="prefix" value="/WEB-INF/jsp/"/>\n   <property name="suffix" value=".jsp"/>\n </bean>\n\n Every view name returned from a handler will be translated to a JSP\n resource (for example: "myView" -> "/WEB-INF/jsp/myView.jsp"), using\n this view class by default.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/InternalResourceView.html
InternalResourceViewResolver	A										<section class="prog__container">Convenient subclass of UrlBasedViewResolver that supports\n InternalResourceView (i.e. Servlets and JSPs) and subclasses\n such as JstlView.\n\n The view class for all views generated by this resolver can be specified\n via UrlBasedViewResolver.setViewClass(java.lang.Class<?>). See UrlBasedViewResolver's javadoc for details.\n The default is InternalResourceView, or JstlView if the\n JSTL API is present.\n\n BTW, it's good practice to put JSP files that just serve as views under\n WEB-INF, to hide them from direct access (e.g. via a manually entered URL).\n Only controllers will be able to access them then.\n\n Note: When chaining ViewResolvers, an InternalResourceViewResolver\n always needs to be last, as it will attempt to resolve any view name,\n no matter whether the underlying resource actually exists.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/InternalResourceViewResolver.html
JstlView	A										<section class="prog__container">Specialization of InternalResourceView for JSTL pages,\n i.e. JSP pages that use the JSP Standard Tag Library.\n\n Exposes JSTL-specific request attributes specifying locale\n and resource bundle for JSTL's formatting and message tags,\n using Spring's locale and MessageSource.\n\n Typical usage with InternalResourceViewResolver would look as follows,\n from the perspective of the DispatcherServlet context definition:\n\n \n <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n   <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>\n   <property name="prefix" value="/WEB-INF/jsp/"/>\n   <property name="suffix" value=".jsp"/>\n </bean>\n\n <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">\n   <property name="basename" value="messages"/>\n </bean>\n\n Every view name returned from a handler will be translated to a JSP\n resource (for example: "myView" -> "/WEB-INF/jsp/myView.jsp"), using\n this view class to enable explicit JSTL support.\n\n The specified MessageSource loads messages from "messages.properties" etc\n files in the class path. This will automatically be exposed to views as\n JSTL localization context, which the JSTL fmt tags (message etc) will use.\n Consider using Spring's ReloadableResourceBundleMessageSource instead of\n the standard ResourceBundleMessageSource for more sophistication.\n Of course, any other Spring components can share the same MessageSource.\n\n This is a separate class mainly to avoid JSTL dependencies in\n InternalResourceView itself. JSTL has not been part of standard\n J2EE up until J2EE 1.4, so we can't assume the JSTL API jar to be\n available on the class path.\n\n Hint: Set the AbstractView.setExposeContextBeansAsAttributes(boolean) flag to "true"\n in order to make all Spring beans in the application context accessible\n within JSTL expressions (e.g. in a c:out value expression).\n This will also make all such beans accessible in plain ${...}\n expressions in a JSP 2.0 page.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/JstlView.html
RedirectView	A										<section class="prog__container">View that redirects to an absolute, context relative, or current request\n relative URL. The URL may be a URI template in which case the URI template\n variables will be replaced with values available in the model. By default\n all primitive model attributes (or collections thereof) are exposed as HTTP\n query parameters (assuming they've not been used as URI template variables),\n but this behavior can be changed by overriding the\n isEligibleProperty(String, Object) method.\n\n A URL for this view is supposed to be a HTTP redirect URL, i.e.\n suitable for HttpServletResponse's sendRedirect method, which\n is what actually does the redirect if the HTTP 1.0 flag is on, or via sending\n back an HTTP 303 code - if the HTTP 1.0 compatibility flag is off.\n\n Note that while the default value for the "contextRelative" flag is off,\n you will probably want to almost always set it to true. With the flag off,\n URLs starting with "/" are considered relative to the web server root, while\n with the flag on, they are considered relative to the web application root.\n Since most web applications will never know or care what their context path\n actually is, they are much better off setting this flag to true, and submitting\n paths which are to be considered relative to the web application root.\n\n NOTE when using this redirect view in a Portlet environment: Make sure\n that your controller respects the Portlet sendRedirect constraints.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/RedirectView.html
ResourceBundleViewResolver	A										<section class="prog__container">A ViewResolver implementation that uses\n bean definitions in a ResourceBundle, specified by the bundle basename.\n\n The bundle is typically defined in a properties file, located in the classpath.\n The default bundle basename is "views".\n\n This ViewResolver supports localized view definitions, using the\n default support of PropertyResourceBundle. For example, the\n basename "views" will be resolved as class path resources "views_de_AT.properties",\n "views_de.properties", "views.properties" - for a given Locale "de_AT".\n\n Note: This ViewResolver implements the Ordered interface\n in order to allow for flexible participation in ViewResolver chaining.\n For example, some special views could be defined via this ViewResolver\n (giving it 0 as "order" value), while all remaining views could be resolved by\n a UrlBasedViewResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/ResourceBundleViewResolver.html
UrlBasedViewResolver	A										<section class="prog__container">Simple implementation of the ViewResolver\n interface, allowing for direct resolution of symbolic view names to URLs,\n without explicit mapping definition. This is useful if your symbolic names\n match the names of your view resources in a straightforward manner\n (i.e. the symbolic name is the unique part of the resource's filename),\n without the need for a dedicated mapping to be defined for each view.\n\n Supports AbstractUrlBasedView subclasses like InternalResourceView,\n VelocityView and\n FreeMarkerView.\n The view class for all views generated by this resolver can be specified\n via the "viewClass" property.\n\n View names can either be resource URLs themselves, or get augmented by a\n specified prefix and/or suffix. Exporting an attribute that holds the\n RequestContext to all views is explicitly supported.\n\n Example: prefix="/WEB-INF/jsp/", suffix=".jsp", viewname="test" ->\n "/WEB-INF/jsp/test.jsp"\n\n As a special feature, redirect URLs can be specified via the "redirect:"\n prefix. E.g.: "redirect:myAction.do" will trigger a redirect to the given\n URL, rather than resolution as standard view name. This is typically used\n for redirecting to a controller URL after finishing a form workflow.\n\n Furthermore, forward URLs can be specified via the "forward:" prefix. E.g.:\n "forward:myAction.do" will trigger a forward to the given URL, rather than\n resolution as standard view name. This is typically used for controller URLs;\n it is not supposed to be used for JSP URLs - use logical view names there.\n\n Note: This class does not support localized resolution, i.e. resolving\n a symbolic view name to different resources depending on the current locale.\n\n Note: When chaining ViewResolvers, a UrlBasedViewResolver will check whether\n the specified resource actually exists.\n However, with InternalResourceView, it is not generally possible to\n determine the existence of the target resource upfront. In such a scenario,\n a UrlBasedViewResolver will always return View for any given view name;\n as a consequence, it should be configured as the last ViewResolver in the chain.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/UrlBasedViewResolver.html
ViewResolverComposite	A										<section class="prog__container">A ViewResolver that delegates to others.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/ViewResolverComposite.html
XmlViewResolver	A										<section class="prog__container">A ViewResolver implementation that uses\n bean definitions in a dedicated XML file for view definitions, specified by\n resource location. The file will typically be located in the WEB-INF directory;\n the default is "/WEB-INF/views.xml".\n\n This ViewResolver does not support internationalization at the level\n of its definition resources. Consider ResourceBundleViewResolver if you\n need to apply different view resources per locale.\n\n Note: This ViewResolver implements the Ordered interface\n in order to allow for flexible participation in ViewResolver chaining.\n For example, some special views could be defined via this ViewResolver\n (giving it 0 as "order" value), while all remaining views could be resolved by\n a UrlBasedViewResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/XmlViewResolver.html
AbstractExcelView	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of AbstractXlsView and its\n AbstractXlsxView and AbstractXlsxStreamingView variants\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractExcelView.html
AbstractJExcelView	A										<section class="prog__container">Deprecated. \nas of Spring 4.0, since JExcelAPI is an abandoned project\n (no release since 2009, with serious bugs remaining)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractJExcelView.html
AbstractPdfStamperView	A										<section class="prog__container">Abstract superclass for PDF views that operate on an existing\n document with an AcroForm. Application-specific view classes\n will extend this class to merge the PDF form with model data.\n\n Thanks to Bryant Larsen for the suggestion and the original prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractPdfStamperView.html
AbstractPdfView	A										<section class="prog__container">Abstract superclass for PDF views, using Bruno Lowagie's\n iText package.\n Application-specific view classes will extend this class.\n The view will be held in the subclass itself, not in a template.\n\n Note: Internet Explorer requires a ".pdf" extension, as\n it doesn't always respect the declared content type.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractPdfView.html
AbstractXlsView	A										<section class="prog__container">Convenient superclass for Excel document views in traditional XLS format.\n Compatible with Apache POI 3.5 and higher.\n\n For working with the workbook in the subclass, see\n Apache's POI site</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractXlsView.html
AbstractXlsxStreamingView	A										<section class="prog__container">Convenient superclass for Excel document views in the Office 2007 XLSX format,\n using POI's streaming variant. Compatible with Apache POI 3.9 and higher.\n\n For working with the workbook in subclasses, see\n Apache's POI site.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractXlsxStreamingView.html
AbstractXlsxView	A										<section class="prog__container">Convenient superclass for Excel document views in the Office 2007 XLSX format\n (as supported by POI-OOXML). Compatible with Apache POI 3.5 and higher.\n\n For working with the workbook in subclasses, see\n Apache's POI site.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/document/AbstractXlsxView.html
AbstractAtomFeedView	A										<section class="prog__container">Abstract superclass for Atom Feed views, using the\n ROME package.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.\nApplication-specific view classes will extend this class.\n The view will be held in the subclass itself, not in a template.\n Main entry points are the AbstractFeedView.buildFeedMetadata(java.util.Map<java.lang.String, java.lang.Object>, T, javax.servlet.http.HttpServletRequest) and buildFeedEntries(java.util.Map<java.lang.String, java.lang.Object>, com.rometools.rome.feed.atom.Feed, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse).\n\n Thanks to Jettro Coenradie and Sergio Bossa for the original feed view prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/feed/AbstractAtomFeedView.html
AbstractFeedView<T extends com.rometools.rome.feed.WireFeed>	A										<section class="prog__container">Abstract base class for Atom and RSS Feed views, using the\n ROME package.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.\nApplication-specific view classes will typically extend from either\n AbstractRssFeedView or AbstractAtomFeedView instead of from this class.\n\n Thanks to Jettro Coenradie and Sergio Bossa for the original feed view prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/feed/AbstractFeedView.html
AbstractRssFeedView	A										<section class="prog__container">Abstract superclass for RSS Feed views, using the\n ROME package.\n\n >NOTE: As of Spring 4.1, this is based on the com.rometools\n variant of ROME, version 1.5. Please upgrade your build dependency.\nApplication-specific view classes will extend this class.\n The view will be held in the subclass itself, not in a template.\n Main entry points are the AbstractFeedView.buildFeedMetadata(java.util.Map<java.lang.String, java.lang.Object>, T, javax.servlet.http.HttpServletRequest) and buildFeedItems(java.util.Map<java.lang.String, java.lang.Object>, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse).\n\n Thanks to Jettro Coenradie and Sergio Bossa for the original feed view prototype!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/feed/AbstractRssFeedView.html
FreeMarkerConfig	A										<section class="prog__container">Interface to be implemented by objects that configure and manage a\n FreeMarker Configuration object in a web environment. Detected and\n used by FreeMarkerView.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerConfig.html
FreeMarkerConfigurer	A										<section class="prog__container">JavaBean to configure FreeMarker for web usage, via the "configLocation"\n and/or "freemarkerSettings" and/or "templateLoaderPath" properties.\n The simplest way to use this class is to specify just a "templateLoaderPath";\n you do not need any further configuration then.\n\n \n <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">\n   <property name="templateLoaderPath"><value>/WEB-INF/freemarker/</value></property>\n </bean>\n\n This bean must be included in the application context of any application\n using Spring's FreeMarkerView for web MVC. It exists purely to configure FreeMarker.\n It is not meant to be referenced by application components but just internally\n by FreeMarkerView. Implements FreeMarkerConfig to be found by FreeMarkerView without\n depending on the bean name the configurer. Each DispatcherServlet can define its\n own FreeMarkerConfigurer if desired.\n\n Note that you can also refer to a preconfigured FreeMarker Configuration\n instance, for example one set up by FreeMarkerConfigurationFactoryBean, via\n the "configuration" property. This allows to share a FreeMarker Configuration\n for web and email usage, for example.\n\n This configurer registers a template loader for this package, allowing to\n reference the "spring.ftl" macro library (contained in this package and thus\n in spring.jar) like this:\n\n \n <#import "/spring.ftl" as spring/>\n <@spring.bind "person.age"/>\n age is ${spring.status.value}\n\n Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerConfigurer.html
FreeMarkerView	A										<section class="prog__container">View using the FreeMarker template engine.\n\n Exposes the following JavaBean properties:\n \nurl: the location of the FreeMarker template to be wrapped,\n relative to the FreeMarker template context (directory).\n encoding (optional, default is determined by FreeMarker configuration):\n the encoding of the FreeMarker template file\n \nDepends on a single FreeMarkerConfig object such as FreeMarkerConfigurer\n being accessible in the current web application context, with any bean name.\n Alternatively, you can set the FreeMarker Configuration object as bean property.\n See setConfiguration(freemarker.template.Configuration) for more details on the impacts of this approach.\n\n Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerView.html
FreeMarkerViewResolver	A										<section class="prog__container">Convenience subclass of UrlBasedViewResolver\n that supports FreeMarkerView (i.e. FreeMarker templates) and custom subclasses of it.\n\n The view class for all views generated by this resolver can be specified\n via the "viewClass" property. See UrlBasedViewResolver's javadoc for details.\n\n Note: When chaining ViewResolvers, a FreeMarkerViewResolver will\n check for the existence of the specified template resources and only return\n a non-null View object if the template was actually found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerViewResolver.html
GroovyMarkupConfig	A										<section class="prog__container">Interface to be implemented by objects that configure and manage a Groovy\n MarkupTemplateEngine for automatic lookup in a web environment.\n Detected and used by GroovyMarkupView.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/groovy/GroovyMarkupConfig.html
GroovyMarkupConfigurer	A										<section class="prog__container">An extension of Groovy's TemplateConfiguration and\n an implementation of Spring MVC's GroovyMarkupConfig for creating\n a MarkupTemplateEngine for use in a web application. The most basic\n way to configure this class is to set the "resourceLoaderPath". For example:\n\n \n\n // Add the following to an @Configuration class\n\n @Bean\n public GroovyMarkupConfig groovyMarkupConfigurer() {\n     GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();\n     configurer.setResourceLoaderPath("classpath:/WEB-INF/groovymarkup/");\n     return configurer;\n }\n \n\n By default this bean will create a MarkupTemplateEngine with:\n \na parent ClassLoader for loading Groovy templates with their references\n the default configuration in the base class TemplateConfiguration\na TemplateResolver for resolving template files\n \n\n You can provide the MarkupTemplateEngine instance directly to this bean\n in which case all other properties will not be effectively ignored.\n\n This bean must be included in the application context of any application\n using the Spring MVC GroovyMarkupView for rendering. It exists purely\n for the purpose of configuring Groovy's Markup templates. It is not meant to be\n referenced by application components directly. It implements GroovyMarkupConfig\n to be found by GroovyMarkupView without depending on a bean name. Each\n DispatcherServlet can define its own GroovyMarkupConfigurer if desired.\n\n Note that resource caching is enabled by default in MarkupTemplateEngine.\n Use the TemplateConfiguration.setCacheTemplates(boolean) to configure that as necessary.\n\n Spring's Groovy Markup template support requires Groovy 2.3.1 or higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/groovy/GroovyMarkupConfigurer.html
GroovyMarkupView	A										<section class="prog__container">An AbstractTemplateView subclass based on Groovy XML/XHTML markup templates.\n\n Spring's Groovy Markup Template support requires Groovy 2.3.1 and higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/groovy/GroovyMarkupView.html
GroovyMarkupViewResolver	A										<section class="prog__container">Convenience subclass of @link AbstractTemplateViewResolver} that supports\n GroovyMarkupView (i.e. Groovy XML/XHTML markup templates) and\n custom subclasses of it.\n\n The view class for all views created by this resolver can be specified\n via the UrlBasedViewResolver.setViewClass(Class) property.\n\n Note: When chaining ViewResolvers this resolver will check for the\n existence of the specified template resources and only return a non-null\n View object if a template is actually found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/groovy/GroovyMarkupViewResolver.html
AbstractJasperReportsSingleFormatView	A										<section class="prog__container">Extends AbstractJasperReportsView to provide basic rendering logic\n for views that use a fixed format, e.g. always PDF or always HTML.\n\n Subclasses need to implement two template methods: createExporter\n to create a JasperReports exporter for a specific output format, and\n useWriter to determine whether to write text or binary content.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsSingleFormatView.html
AbstractJasperReportsView	A										<section class="prog__container">Base class for all JasperReports views. Applies on-the-fly compilation\n of report designs as required and coordinates the rendering process.\n The resource path of the main report needs to be specified as url.\n\n This class is responsible for getting report data from the model that has\n been provided to the view. The default implementation checks for a model object\n under the specified reportDataKey first, then falls back to looking\n for a value of type JRDataSource, java.util.Collection,\n object array (in that order).\n\n If no JRDataSource can be found in the model, then reports will\n be filled using the configured javax.sql.DataSource if any. If neither\n a JRDataSource or javax.sql.DataSource is available then\n an IllegalArgumentException is raised.\n\n Provides support for sub-reports through the subReportUrls and\n subReportDataKeys properties.\n\n When using sub-reports, the master report should be configured using the\n url property and the sub-reports files should be configured using\n the subReportUrls property. Each entry in the subReportUrls\n Map corresponds to an individual sub-report. The key of an entry must match up\n to a sub-report parameter in your report file of type\n net.sf.jasperreports.engine.JasperReport,\n and the value of an entry must be the URL for the sub-report file.\n\n For sub-reports that require an instance of JRDataSource, that is,\n they don't have a hard-coded query for data retrieval, you can include the\n appropriate data in your model as would with the data source for the parent report.\n However, you must provide a List of parameter names that need to be converted to\n JRDataSource instances for the sub-report via the\n subReportDataKeys property. When using JRDataSource\n instances for sub-reports, you must specify a value for the\n reportDataKey property, indicating the data to use for the main report.\n\n Allows for exporter parameters to be configured declatively using the\n exporterParameters property. This is a Map typed\n property where the key of an entry corresponds to the fully-qualified name\n of the static field for the JRExporterParameter and the value\n of an entry is the value you want to assign to the exporter parameter.\n\n Response headers can be controlled via the headers property. Spring\n will attempt to set the correct value for the Content-Diposition header\n so that reports render correctly in Internet Explorer. However, you can override this\n setting through the headers property.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.html
ConfigurableJasperReportsView	A										<section class="prog__container">Configurable JasperReports View, allowing to specify the JasperReports exporter\n to be specified through bean properties rather than through the view class name.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/ConfigurableJasperReportsView.html
JasperReportsCsvView	A										<section class="prog__container">Implementation of AbstractJasperReportsSingleFormatView\n that renders report results in CSV format.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsCsvView.html
JasperReportsHtmlView	A										<section class="prog__container">Implementation of AbstractJasperReportsSingleFormatView\n that renders report results in HTML format.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsHtmlView.html
JasperReportsMultiFormatView	A										<section class="prog__container">JasperReports view class that allows for the actual rendering format\n to be specified at runtime using a parameter contained in the model.\n\n This view works on the concept of a format key and a mapping key.\n The format key is used to pass the mapping key from your Controller\n to Spring through as part of the model and the mapping key is used to map\n a logical format to an actual JasperReports view class.\n\n For example, you might add the following code to your Controller:\n\n \n Map model = new HashMap();\n model.put("format", "pdf");\n\n Here format is the format key and pdf is the mapping key.\n When rendering a report, this class looks for a model parameter under the\n format key, which by default is format. It then uses the value of\n this parameter to lookup the actual View class to use.\n\n The default mappings for the format lookup are:\n\n \ncsv - JasperReportsCsvView\nhtml - JasperReportsHtmlView\npdf - JasperReportsPdfView\nxls - JasperReportsXlsView\nxlsx - JasperReportsXlsxView (as of Spring 4.2)\n \nThe format key can be changed using the formatKey property.\n The applicable key-to-view-class mappings can be configured using the\n formatMappings property.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsMultiFormatView.html
JasperReportsPdfView	A										<section class="prog__container">Implementation of AbstractJasperReportsSingleFormatView\n that renders report results in PDF format.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsPdfView.html
JasperReportsViewResolver	A										<section class="prog__container">ViewResolver implementation that\n resolves instances of AbstractJasperReportsView by translating\n the supplied view name into the URL of the report file.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsViewResolver.html
JasperReportsXlsView	A										<section class="prog__container">Implementation of AbstractJasperReportsSingleFormatView\n that renders report results in XLS format.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsXlsView.html
JasperReportsXlsxView	A										<section class="prog__container">Implementation of AbstractJasperReportsSingleFormatView\n that renders report results in XLSX format.\n\n This class is compatible with classic JasperReports releases back until 2.x.\n As a consequence, it keeps using the JRExporter\n API which got deprecated as of JasperReports 5.5.2 (early 2014).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/jasperreports/JasperReportsXlsxView.html
AbstractJackson2View	A										<section class="prog__container">Abstract base class for Jackson based and content type independent\n AbstractView implementations.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/json/AbstractJackson2View.html
MappingJackson2JsonView	A										<section class="prog__container">Spring MVC View that renders JSON content by serializing the model for the current request\n using Jackson 2's ObjectMapper.\n\n By default, the entire contents of the model map (with the exception of framework-specific classes)\n will be encoded as JSON. If the model contains only one key, you can have it extracted encoded as JSON\n alone via  setExtractValueFromSingleKeyModel(boolean).\n\n The default constructor uses the default configuration provided by Jackson2ObjectMapperBuilder.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/json/MappingJackson2JsonView.html
ScriptTemplateConfig	A										<section class="prog__container">Interface to be implemented by objects that configure and manage a\n JSR-223 ScriptEngine for automatic lookup in a web environment.\n Detected and used by ScriptTemplateView.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateConfig.html
ScriptTemplateConfigurer	A										<section class="prog__container">An implementation of Spring MVC's ScriptTemplateConfig for creating\n a ScriptEngine for use in a web application.\n\n \n\n // Add the following to an @Configuration class\n @Bean\n public ScriptTemplateConfigurer mustacheConfigurer() {\n    ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer();\n    configurer.setEngineName("nashorn");\n    configurer.setScripts("mustache.js");\n    configurer.setRenderObject("Mustache");\n    configurer.setRenderFunction("render");\n    return configurer;\n }\n \nNOTE: It is possible to use non thread-safe script engines with\n templating libraries not designed for concurrency, like Handlebars or React running on\n Nashorn, by setting the sharedEngine property to false.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.html
ScriptTemplateView	A										<section class="prog__container">An AbstractUrlBasedView subclass designed to run any template library\n based on a JSR-223 script engine.\n\n If not set, each property is auto-detected by looking up a single\n ScriptTemplateConfig bean in the web application context and using\n it to obtain the configured properties.\n\n Nashorn Javascript engine requires Java 8+, and may require setting the\n sharedEngine property to false in order to run properly. See\n ScriptTemplateConfigurer.setSharedEngine(Boolean) for more details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html
ScriptTemplateViewResolver	A										<section class="prog__container">Convenience subclass of UrlBasedViewResolver that supports\n ScriptTemplateView and custom subclasses of it.\n\n The view class for all views created by this resolver can be specified\n via the UrlBasedViewResolver.setViewClass(Class) property.\n\n Note: When chaining ViewResolvers this resolver will check for the\n existence of the specified template resources and only return a non-null\n View object if a template is actually found.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.html
AbstractSpringPreparerFactory	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/AbstractSpringPreparerFactory.html
SimpleSpringPreparerFactory	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/SimpleSpringPreparerFactory.html
SpringBeanPreparerFactory	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/SpringBeanPreparerFactory.html
SpringLocaleResolver	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.html
SpringWildcardServletTilesApplicationContext	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/SpringWildcardServletTilesApplicationContext.html
TilesConfigurer	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesConfigurer.html
TilesView	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesView.html
TilesViewResolver	A										<section class="prog__container">Deprecated. \nas of Spring 4.2, in favor of Tiles 3\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesViewResolver.html
AbstractSpringPreparerFactory	A										<section class="prog__container">Abstract implementation of the Tiles PreparerFactory\n interface, obtaining the current Spring WebApplicationContext and delegating to\n getPreparer(String, org.springframework.web.context.WebApplicationContext).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/AbstractSpringPreparerFactory.html
SimpleSpringPreparerFactory	A										<section class="prog__container">Tiles PreparerFactory implementation\n that expects preparer class names and builds preparer instances for those,\n creating them through the Spring ApplicationContext in order to apply\n Spring container callbacks and configured Spring BeanPostProcessors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/SimpleSpringPreparerFactory.html
SpringBeanPreparerFactory	A										<section class="prog__container">Tiles PreparerFactory implementation\n that expects preparer bean names and obtains preparer beans from the\n Spring ApplicationContext. The full bean creation process will be in\n the control of the Spring application context in this case, allowing\n for the use of scoped beans etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/SpringBeanPreparerFactory.html
SpringLocaleResolver	A										<section class="prog__container">Tiles LocaleResolver adapter that delegates to a Spring\n LocaleResolver, exposing the\n DispatcherServlet-managed locale.\n\n This adapter gets automatically registered by TilesConfigurer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/SpringLocaleResolver.html
SpringWildcardServletTilesApplicationContext	A										<section class="prog__container">Spring-specific subclass of the Tiles ServletApplicationContext.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/SpringWildcardServletTilesApplicationContext.html
TilesConfigurer	A										<section class="prog__container">Helper class to configure Tiles 3.x for the Spring Framework. See\n http://tiles.apache.org\n for more information about Tiles, which basically is a templating mechanism\n for web applications using JSPs and other template engines.\n\n The TilesConfigurer simply configures a TilesContainer using a set of files\n containing definitions, to be accessed by TilesView instances. This is a\n Spring-based alternative (for usage in Spring configuration) to the Tiles-provided\n ServletContextListener\n (e.g. CompleteAutoloadTilesListener\n for usage in web.xml.\n\n TilesViews can be managed by any ViewResolver.\n For simple convention-based view resolution, consider using TilesViewResolver.\n\n A typical TilesConfigurer bean definition looks as follows:\n\n \n <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">\n   <property name="definitions">\n     <list>\n       <value>/WEB-INF/defs/general.xml</value>\n       <value>/WEB-INF/defs/widgets.xml</value>\n       <value>/WEB-INF/defs/administrator.xml</value>\n       <value>/WEB-INF/defs/customer.xml</value>\n       <value>/WEB-INF/defs/templates.xml</value>\n     </list>\n   </property>\n </bean>\n \n\n The values in the list are the actual Tiles XML files containing the definitions.\n If the list is not specified, the default is "/WEB-INF/tiles.xml".\n\n Note that in Tiles 3 an underscore in the name of a file containing Tiles\n definitions is used to indicate locale information, for example:\n\n \n <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">\n   <property name="definitions">\n     <list>\n       <value>/WEB-INF/defs/tiles.xml</value>\n       <value>/WEB-INF/defs/tiles_fr_FR.xml</value>\n     </list>\n   </property>\n </bean>\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/TilesConfigurer.html
TilesView	A										<section class="prog__container">View implementation that renders\n through the Tiles Request API. The "url" property is interpreted as name of a\n Tiles definition.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/TilesView.html
TilesViewResolver	A										<section class="prog__container">Convenience subclass of UrlBasedViewResolver that supports\n TilesView (i.e. Tiles definitions) and custom subclasses of it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/tiles3/TilesViewResolver.html
VelocityConfig	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityConfig.html
VelocityConfigurer	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityConfigurer.html
VelocityLayoutView	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityLayoutView.html
VelocityLayoutViewResolver	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityLayoutViewResolver.html
VelocityToolboxView	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityToolboxView.html
VelocityView	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityView.html
VelocityViewResolver	A										<section class="prog__container">Deprecated. \nas of Spring 4.3, in favor of FreeMarker\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/velocity/VelocityViewResolver.html
MappingJackson2XmlView	A										<section class="prog__container">Spring MVC View that renders XML content by serializing the model for the current request\n using Jackson 2's XmlMapper.\n\n The Object to be serialized is supplied as a parameter in the model. The first serializable\n entry is used. Users can either specify a specific entry in the model via the\n sourceKey property.\n\n The default constructor uses the default configuration provided by Jackson2ObjectMapperBuilder.\n\n Compatible with Jackson 2.6 and higher, as of Spring 4.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/xml/MappingJackson2XmlView.html
MarshallingView	A										<section class="prog__container">Spring-MVC View that allows for response context to be rendered as the result\n of marshalling by a Marshaller.\n\n The Object to be marshalled is supplied as a parameter in the model and then\n detected during response rendering. Users can\n either specify a specific entry in the model via the sourceKey\n property or have Spring locate the Source object.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/xml/MarshallingView.html
XsltView	A										<section class="prog__container">XSLT-driven View that allows for response context to be rendered as the\n result of an XSLT transformation.\n\n The XSLT Source object is supplied as a parameter in the model and then\n detected during response rendering. Users can either specify\n a specific entry in the model via the sourceKey property or\n have Spring locate the Source object. This class also provides basic conversion\n of objects into Source implementations. See here\n for more details.\n\n All model parameters are passed to the XSLT Transformer as parameters.\n In addition the user can configure output properties\n to be passed to the Transformer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/xslt/XsltView.html
XsltViewResolver	A										<section class="prog__container">ViewResolver implementation that\n resolves instances of XsltView by translating the supplied view name\n into the URL of the XSLT stylesheet.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/xslt/XsltViewResolver.html
AbstractWebSocketMessage	A										<section class="prog__container">A message that can be handled or sent on a WebSocket connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/AbstractWebSocketMessage.html
BinaryMessage	A										<section class="prog__container">A binary WebSocket message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/BinaryMessage.html
CloseStatus	A										<section class="prog__container">Represents a WebSocket close status code and reason. Status codes in the 1xxx range are\n pre-defined by the protocol. Optionally, a status code may be sent with a reason.\n\n See RFC 6455, Section 7.4.1\n "Defined Status Codes".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/CloseStatus.html
PingMessage	A										<section class="prog__container">A WebSocket ping message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/PingMessage.html
PongMessage	A										<section class="prog__container">A WebSocket pong message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/PongMessage.html
SubProtocolCapable	A										<section class="prog__container">An interface for WebSocket handlers that support sub-protocols as defined in RFC 6455.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/SubProtocolCapable.html
TextMessage	A										<section class="prog__container">A text WebSocket message.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/TextMessage.html
WebSocketExtension	A										<section class="prog__container">Represents a WebSocket extension as defined in the RFC 6455.\n WebSocket extensions add protocol features to the WebSocket protocol. The extensions\n used within a session are negotiated during the handshake phase as follows:\n \nthe client may ask for specific extensions in the HTTP handshake request\nthe server responds with the final list of extensions to use in the current session\n\nWebSocket Extension HTTP headers may include parameters and follow\n RFC 7230 section 3.2\nNote that the order of extensions in HTTP headers defines their order of execution,\n e.g. extensions "foo, bar" will be executed as "bar(foo(message))".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketExtension.html
WebSocketHandler	A										<section class="prog__container">A handler for WebSocket messages and lifecycle events.\n\n Implementations of this interface are encouraged to handle exceptions locally where\n it makes sense or alternatively let the exception bubble up in which case by default\n the exception is logged and the session closed with\n SERVER_ERROR(1011). The exception handling\n strategy is provided by\n ExceptionWebSocketHandlerDecorator and it can be customized or replaced by decorating\n the WebSocketHandler with a different decorator.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketHandler.html
WebSocketHttpHeaders	A										<section class="prog__container">An HttpHeaders variant that adds support for\n the HTTP headers defined by the WebSocket specification RFC 6455.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketHttpHeaders.html
WebSocketMessage	A										<section class="prog__container">A message that can be handled or sent on a WebSocket connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketMessage.html
WebSocketSession	A										<section class="prog__container">A WebSocket session abstraction. Allows sending messages over a WebSocket\n connection and closing it.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketSession.html
AbstractWebSocketSession	A										<section class="prog__container">An abstract base class for implementations of WebSocketSession.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/AbstractWebSocketSession.html
NativeWebSocketSession	A										<section class="prog__container">A WebSocketSession that exposes the underlying, native WebSocketSession\n through a getter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/NativeWebSocketSession.html
JettyWebSocketHandlerAdapter	A										<section class="prog__container">Adapts WebSocketHandler to the Jetty 9 WebSocket API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.html
JettyWebSocketSession	A										<section class="prog__container">A WebSocketSession for use with the Jetty 9 WebSocket API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.html
ConvertingEncoderDecoderSupport.BinaryDecoder	A										<section class="prog__container">A binary javax.websocket.Encoder that delegates\n to Spring's conversion service. See ConvertingEncoderDecoderSupport for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.BinaryDecoder.html
ConvertingEncoderDecoderSupport.BinaryEncoder	A										<section class="prog__container">A binary javax.websocket.Encoder that delegates\n to Spring's conversion service. See ConvertingEncoderDecoderSupport for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.BinaryEncoder.html
ConvertingEncoderDecoderSupport	A										<section class="prog__container">Base class that can be used to implement a standard Encoder\n and/or Decoder. It provides encode and decode method\n implementations that delegate to a Spring ConversionService.\n\n By default, this class looks up a ConversionService registered in the\n active ApplicationContext under\n the name 'webSocketConversionService'. This works fine for both client\n and server endpoints, in a Servlet container environment. If not running in a\n Servlet container, subclasses will need to override the\n getConversionService() method to provide an alternative lookup strategy.\n\n Subclasses can extend this class and should also implement one or\n both of Encoder and Decoder.\n For convenience ConvertingEncoderDecoderSupport.BinaryEncoder,\n ConvertingEncoderDecoderSupport.BinaryDecoder,\n ConvertingEncoderDecoderSupport.TextEncoder and\n ConvertingEncoderDecoderSupport.TextDecoder subclasses are provided.\n\n Since JSR-356 only allows Encoder/Decoder to be registered by type, instances\n of this class are therefore managed by the WebSocket runtime, and do not need to\n be registered as Spring Beans. They can, however, by injected with Spring-managed\n dependencies via @Autowire.\n\n Converters to convert between the type and String or\n ByteBuffer should be registered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.html
ConvertingEncoderDecoderSupport.TextDecoder	A										<section class="prog__container">A Text javax.websocket.Encoder that delegates\n to Spring's conversion service. See ConvertingEncoderDecoderSupport for details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.TextDecoder.html
ConvertingEncoderDecoderSupport.TextEncoder	A										<section class="prog__container">A text javax.websocket.Encoder that delegates\n to Spring's conversion service. See ConvertingEncoderDecoderSupport for\n details.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.TextEncoder.html
StandardToWebSocketExtensionAdapter	A										<section class="prog__container">A sub-class of WebSocketExtension that\n can be constructed from an Extension.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/StandardToWebSocketExtensionAdapter.html
StandardWebSocketHandlerAdapter	A										<section class="prog__container">Adapts a WebSocketHandler to the standard WebSocket for Java API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.html
StandardWebSocketSession	A										<section class="prog__container">A WebSocketSession for use with the standard WebSocket for Java API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.html
WebSocketToStandardExtensionAdapter	A										<section class="prog__container">Adapt an instance of WebSocketExtension to\n the Extension interface.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/standard/WebSocketToStandardExtensionAdapter.html
AbstractWebSocketClient	A										<section class="prog__container">Abstract base class for WebSocketClient implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/AbstractWebSocketClient.html
ConnectionManagerSupport	A										<section class="prog__container">A base class for WebSocket connection managers. Provides a declarative style of\n connecting to a WebSocket server given a URI to connect to. The connection occurs when\n the Spring ApplicationContext is refreshed, if the autoStartup property is set\n to true, or if set to false, the start() and #stop methods can\n be invoked manually.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/ConnectionManagerSupport.html
WebSocketClient	A										<section class="prog__container">Contract for initiating a WebSocket request. As an alternative considering using the\n declarative style WebSocketConnectionManager that starts a WebSocket connection\n to a pre-configured URI when the application starts.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/WebSocketClient.html
WebSocketConnectionManager	A										<section class="prog__container">A WebSocket connection manager that is given a URI, a WebSocketClient, and a\n WebSocketHandler, connects to a WebSocket server through ConnectionManagerSupport.start() and\n ConnectionManagerSupport.stop() methods. If ConnectionManagerSupport.setAutoStartup(boolean) is set to true\n this will be done automatically when the Spring ApplicationContext is refreshed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/WebSocketConnectionManager.html
JettyWebSocketClient	A										<section class="prog__container">Initiates WebSocket requests to a WebSocket server programmatically\n through the Jetty WebSocket API.\n\n As of 4.1 this class implements Lifecycle rather than\n SmartLifecycle. Use\n WebSocketConnectionManager instead to auto-start a WebSocket connection.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/jetty/JettyWebSocketClient.html
AnnotatedEndpointConnectionManager	A										<section class="prog__container">A WebSocket connection manager that is given a URI, a\n ClientEndpoint-annotated endpoint, connects to a\n WebSocket server through the ConnectionManagerSupport.start() and ConnectionManagerSupport.stop() methods.\n If ConnectionManagerSupport.setAutoStartup(boolean) is set to true this will be\n done automatically when the Spring ApplicationContext is refreshed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/standard/AnnotatedEndpointConnectionManager.html
EndpointConnectionManager	A										<section class="prog__container">A WebSocket connection manager that is given a URI, an Endpoint, connects to a\n WebSocket server through the ConnectionManagerSupport.start() and ConnectionManagerSupport.stop() methods. If\n ConnectionManagerSupport.setAutoStartup(boolean) is set to true this will be done automatically\n when the Spring ApplicationContext is refreshed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/standard/EndpointConnectionManager.html
StandardWebSocketClient	A										<section class="prog__container">A WebSocketClient based on standard Java WebSocket API.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/standard/StandardWebSocketClient.html
WebSocketContainerFactoryBean	A										<section class="prog__container">A FactoryBean for creating and configuring a WebSocketContainer\n through Spring XML configuration. In Java configuration, ignore this class and use\n ContainerProvider.getWebSocketContainer() instead.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/client/standard/WebSocketContainerFactoryBean.html
WebSocketMessageBrokerStats	A										<section class="prog__container">A central class for aggregating information about internal state and counters\n from key infrastructure components of the setup that comes with\n @EnableWebSocketMessageBroker for Java config and\n <websocket:message-broker> for XML.\n\n By default aggregated information is logged every 15 minutes at INFO level.\n The frequency of logging can be changed via setLoggingPeriod(long).\n\n This class is declared as a Spring bean by the above configuration with the\n name "webSocketMessageBrokerStats" and can be easily exported to JMX, e.g. with\n the MBeanExporter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/WebSocketMessageBrokerStats.html
WebSocketNamespaceHandler	A										<section class="prog__container">NamespaceHandler for Spring WebSocket\n configuration namespace.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/WebSocketNamespaceHandler.html
AbstractWebSocketHandlerRegistration	A										<section class="prog__container">Base class for WebSocketHandlerRegistrations that gathers all the configuration\n options but allows sub-classes to put together the actual HTTP request mappings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.html
AbstractWebSocketMessageBrokerConfigurer	A										<section class="prog__container">A convenient abstract base class for WebSocketMessageBrokerConfigurer\n implementations providing empty method implementations for optional methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.html
DelegatingWebSocketConfiguration	A										<section class="prog__container">A variation of WebSocketConfigurationSupport that detects implementations of\n WebSocketConfigurer in Spring configuration and invokes them in order to\n configure WebSocket request handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/DelegatingWebSocketConfiguration.html
DelegatingWebSocketMessageBrokerConfiguration	A										<section class="prog__container">A WebSocketMessageBrokerConfigurationSupport extension that detects\n beans of type WebSocketMessageBrokerConfigurer and delegates to all\n of them allowing callback style customization of the configuration provided\n in WebSocketMessageBrokerConfigurationSupport.\n\n This class is typically imported via EnableWebSocketMessageBroker.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/DelegatingWebSocketMessageBrokerConfiguration.html
EnableWebSocket	A										<section class="prog__container">Add this annotation to an @Configuration class to configure\n processing WebSocket requests:\n\n \n @Configuration\n @EnableWebSocket\n public class MyWebSocketConfig {\n\n }\n \nCustomize the imported configuration by implementing the\n WebSocketConfigurer interface:\n\n \n @Configuration\n @EnableWebSocket\n public class MyConfiguration implements WebSocketConfigurer {\n\n           @Override\n           public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n         registry.addHandler(echoWebSocketHandler(), "/echo").withSockJS();\n           }\n\n           @Bean\n           public WebSocketHandler echoWebSocketHandler() {\n         return new EchoWebSocketHandler();\n     }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/EnableWebSocket.html
EnableWebSocketMessageBroker	A										<section class="prog__container">Add this annotation to an @Configuration class to enable broker-backed\n messaging over WebSocket using a higher-level messaging sub-protocol.\n\n \n @Configuration\n @EnableWebSocketMessageBroker\n public class MyWebSocketConfig {\n\n }\n \nCustomize the imported configuration by implementing the\n WebSocketMessageBrokerConfigurer interface or more likely extend the\n convenient base class AbstractWebSocketMessageBrokerConfigurer:\n\n \n @Configuration\n @EnableWebSocketMessageBroker\n public class MyConfiguration extends AbstractWebSocketMessageBrokerConfigurer {\n\n     @Override\n     public void registerStompEndpoints(StompEndpointRegistry registry) {\n         registry.addEndpoint("/portfolio").withSockJS();\n     }\n\n     @Bean\n     public void configureMessageBroker(MessageBrokerRegistry registry) {\n         registry.enableStompBrokerRelay("/queue/", "/topic/");\n         registry.setApplicationDestinationPrefixes("/app/");\n     }\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/EnableWebSocketMessageBroker.html
ServletWebSocketHandlerRegistration	A										<section class="prog__container">A helper class for configuring WebSocketHandler request handling\n including SockJS fallback options.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.html
ServletWebSocketHandlerRegistry	A										<section class="prog__container">A WebSocketHandlerRegistry that maps WebSocketHandlers to URLs for use\n in a Servlet container.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.html
SockJsServiceRegistration	A										<section class="prog__container">A helper class for configuring SockJS fallback options, typically used indirectly, in\n conjunction with @EnableWebSocket and\n WebSocketConfigurer.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.html
StompEndpointRegistry	A										<section class="prog__container">A contract for registering STOMP over WebSocket endpoints.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/StompEndpointRegistry.html
StompWebSocketEndpointRegistration	A										<section class="prog__container">A contract for configuring a STOMP over WebSocket endpoint.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration.html
WebMvcStompEndpointRegistry	A										<section class="prog__container">A registry for STOMP over WebSocket endpoints that maps the endpoints with a\n HandlerMapping for use in Spring MVC.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.html
WebMvcStompWebSocketEndpointRegistration	A										<section class="prog__container">An abstract base class for configuring STOMP over WebSocket/SockJS endpoints.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistration.html
WebSocketConfigurationSupport	A										<section class="prog__container">Configuration support for WebSocket request handling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.html
WebSocketConfigurer	A										<section class="prog__container">Defines callback methods to configure the WebSocket request handling\n via @EnableWebSocket.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketConfigurer.html
WebSocketHandlerRegistration	A										<section class="prog__container">Provides methods for configuring a WebSocket handler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration.html
WebSocketHandlerRegistry	A										<section class="prog__container">Provides methods for configuring WebSocketHandler request mappings.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistry.html
WebSocketMessageBrokerConfigurationSupport	A										<section class="prog__container">Extends AbstractMessageBrokerConfiguration and adds configuration for\n receiving and responding to STOMP messages from WebSocket clients.\n\n Typically used in conjunction with\n @EnableWebSocketMessageBroker but can\n also be extended directly.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.html
WebSocketMessageBrokerConfigurer	A										<section class="prog__container">Defines methods for configuring message handling with simple messaging\n protocols (e.g. STOMP) from WebSocket clients.\n\n Typically used to customize the configuration provided via\n @EnableWebSocketMessageBroker.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurer.html
WebSocketTransportRegistration	A										<section class="prog__container">Configure the processing of messages received from and sent to WebSocket clients.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/config/annotation/WebSocketTransportRegistration.html
AbstractWebSocketHandler	A										<section class="prog__container">A convenient base class for WebSocketHandler implementation with empty methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/AbstractWebSocketHandler.html
BeanCreatingHandlerProvider	A										<section class="prog__container">Instantiates a target handler through a Spring BeanFactory and also provides\n an equivalent destroy method. Mainly for internal use to assist with initializing and\n destroying handlers with per-connection lifecycle.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/BeanCreatingHandlerProvider.html
BinaryWebSocketHandler	A										<section class="prog__container">A convenient base class for WebSocketHandler implementations\n that process binary messages only.\n\n Text messages are rejected with CloseStatus.NOT_ACCEPTABLE.\n All other methods have empty implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/BinaryWebSocketHandler.html
ConcurrentWebSocketSessionDecorator	A										<section class="prog__container">Wrap a WebSocketSession\n to guarantee only one thread can send messages at a time.\n\n If a send is slow, subsequent attempts to send more messages from other\n threads will not be able to acquire the flush lock and messages will be\n buffered instead -- at that time, the specified buffer-size limit and\n send-time limit will be checked and the session closed if the limits are\n exceeded.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.html
ExceptionWebSocketHandlerDecorator	A										<section class="prog__container">An exception handling WebSocketHandlerDecorator.\n Traps all Throwable instances that escape from the decorated\n handler and closes the session with CloseStatus.SERVER_ERROR.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.html
LoggingWebSocketHandlerDecorator	A										<section class="prog__container">A WebSocketHandlerDecorator that adds logging to WebSocket lifecycle events.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.html
PerConnectionWebSocketHandler	A										<section class="prog__container">A WebSocketHandler that initializes and destroys a WebSocketHandler\n instance for each WebSocket connection and delegates all other methods to it.\n\n Essentially create an instance of this class once, providing the type of\n WebSocketHandler class to create for each connection, and then pass it to any\n API method that expects a WebSocketHandler.\n\n If initializing the target WebSocketHandler type requires a Spring\n BeanFctory, then the setBeanFactory(BeanFactory) property accordingly. Simply\n declaring this class as a Spring bean will do that. Otherwise, WebSocketHandler\n instances of the target type will be created using the default constructor.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/PerConnectionWebSocketHandler.html
SessionLimitExceededException	A										<section class="prog__container">Raised when a WebSocket session has exceeded limits it has been configured\n for, e.g. timeout, buffer size, etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/SessionLimitExceededException.html
TextWebSocketHandler	A										<section class="prog__container">A convenient base class for WebSocketHandler implementations\n that process text messages only.\n\n Binary messages are rejected with CloseStatus.NOT_ACCEPTABLE.\n All other methods have empty implementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/TextWebSocketHandler.html
WebSocketHandlerDecorator	A										<section class="prog__container">Wraps another WebSocketHandler\n instance and delegates to it.\n\n Also provides a getDelegate() method to return the decorated\n handler as well as a getLastHandler() method to go through all nested\n delegates and return the "last" handler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/WebSocketHandlerDecorator.html
WebSocketHandlerDecoratorFactory	A										<section class="prog__container">A factory for applying decorators to a WebSocketHandler.\n\n Decoration should be done through sub-classing\n WebSocketHandlerDecorator to allow any code to traverse decorators and/or\n unwrap the original handler when necessary .</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/WebSocketHandlerDecoratorFactory.html
WebSocketSessionDecorator	A										<section class="prog__container">Wraps another WebSocketSession instance\n and delegates to it.\n\n Also provides a getDelegate() method to return the decorated session\n as well as a getLastSession() method to go through all nested delegates\n and return the "last" session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/handler/WebSocketSessionDecorator.html
AbstractSubProtocolEvent	A										<section class="prog__container">A base class for events for a message received from a WebSocket client and\n parsed into a higher-level sub-protocol (e.g. STOMP).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/AbstractSubProtocolEvent.html
DefaultSimpUserRegistry	A										<section class="prog__container">A default implementation of SimpUserRegistry that relies on\n AbstractSubProtocolEvent application context events to keep track of\n connected users and their subscriptions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/DefaultSimpUserRegistry.html
SessionConnectedEvent	A										<section class="prog__container">A connected event represents the server response to a client's connect request.\n See SessionConnectEvent.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SessionConnectedEvent.html
SessionConnectEvent	A										<section class="prog__container">Event raised when a new WebSocket client using a Simple Messaging Protocol\n (e.g. STOMP) as the WebSocket sub-protocol issues a connect request.\n\n Note that this is not the same as the WebSocket session getting established\n but rather the client's first attempt to connect within the sub-protocol,\n for example sending the STOMP CONNECT frame.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SessionConnectEvent.html
SessionDisconnectEvent	A										<section class="prog__container">Event raised when the session of a WebSocket client using a Simple Messaging\n Protocol (e.g. STOMP) as the WebSocket sub-protocol is closed.\n\n Note that this event may be raised more than once for a single session and\n therefore event consumers should be idempotent and ignore a duplicate event.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SessionDisconnectEvent.html
SessionSubscribeEvent	A										<section class="prog__container">Event raised when a new WebSocket client using a Simple Messaging Protocol\n (e.g. STOMP) sends a subscription request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SessionSubscribeEvent.html
SessionUnsubscribeEvent	A										<section class="prog__container">Event raised when a new WebSocket client using a Simple Messaging Protocol\n (e.g. STOMP) sends a request to remove a subscription.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SessionUnsubscribeEvent.html
StompSubProtocolErrorHandler	A										<section class="prog__container">A SubProtocolErrorHandler for use with STOMP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/StompSubProtocolErrorHandler.html
StompSubProtocolHandler	A										<section class="prog__container">A SubProtocolHandler for STOMP that supports versions 1.0, 1.1, and 1.2\n of the STOMP specification.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/StompSubProtocolHandler.html
SubProtocolErrorHandler	A										<section class="prog__container">A contract for handling sub-protocol errors sent to clients.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SubProtocolErrorHandler.html
SubProtocolHandler	A										<section class="prog__container">A contract for handling WebSocket messages as part of a higher level protocol, referred\n to as "sub-protocol" in the WebSocket RFC specification. Handles both\n WebSocketMessages from a client as well as Messages to a client.\n \n Implementations of this interface can be configured on a\n SubProtocolWebSocketHandler which selects a sub-protocol handler to delegate\n messages to based on the sub-protocol requested by the client through the\n Sec-WebSocket-Protocol request header.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SubProtocolHandler.html
SubProtocolWebSocketHandler	A										<section class="prog__container">An implementation of WebSocketHandler that delegates incoming WebSocket\n messages to a SubProtocolHandler along with a MessageChannel to which\n the sub-protocol handler can send messages from WebSocket clients to the application.\n\n Also an implementation of MessageHandler that finds the WebSocket session\n associated with the Message and passes it, along with the message, to the\n sub-protocol handler to send messages from the application back to the client.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.html
WebSocketAnnotationMethodMessageHandler	A										<section class="prog__container">A sub-class of SimpAnnotationMethodMessageHandler to provide support\n for ControllerAdvice with global @MessageExceptionHandler methods.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/WebSocketAnnotationMethodMessageHandler.html
WebSocketStompClient	A										<section class="prog__container">A STOMP over WebSocket client that connects using an implementation of\n WebSocketClient\n including SockJsClient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/messaging/WebSocketStompClient.html
HandshakeFailureException	A										<section class="prog__container">Thrown when handshake processing failed to complete due to an internal, unrecoverable\n error. This implies a server error (HTTP status code 500) as opposed to a failure in\n the handshake negotiation.\n\n By contrast, when handshake negotiation fails, the response status code will be 200\n and the response headers and body will have been updated to reflect the cause for the\n failure. A HandshakeHandler implementation will have protected methods to\n customize updates to the response in those cases.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/HandshakeFailureException.html
HandshakeHandler	A										<section class="prog__container">Contract for processing a WebSocket handshake request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/HandshakeHandler.html
HandshakeInterceptor	A										<section class="prog__container">Interceptor for WebSocket handshake requests. Can be used to inspect the\n handshake request and response as well as to pass attributes to the target\n WebSocketHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/HandshakeInterceptor.html
RequestUpgradeStrategy	A										<section class="prog__container">A server-specific strategy for performing the actual upgrade to a WebSocket exchange.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/RequestUpgradeStrategy.html
JettyRequestUpgradeStrategy	A										<section class="prog__container">A RequestUpgradeStrategy for use with Jetty 9.0-9.3. Based on Jetty's\n internal org.eclipse.jetty.websocket.server.WebSocketHandler class.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.html
AbstractStandardUpgradeStrategy	A										<section class="prog__container">A base class for RequestUpgradeStrategy implementations that build\n on the standard WebSocket API for Java (JSR-356).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/AbstractStandardUpgradeStrategy.html
AbstractTyrusRequestUpgradeStrategy	A										<section class="prog__container">A base class for RequestUpgradeStrategy implementations on top of\n JSR-356 based servers which include Tyrus as their WebSocket engine.\n\n Works with Tyrus 1.3.5 (WebLogic 12.1.3), Tyrus 1.7 (GlassFish 4.1.0),\n Tyrus 1.11 (WebLogic 12.2.1), and Tyrus 1.12 (GlassFish 4.1.1).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.html
AbstractTyrusRequestUpgradeStrategy.TyrusEndpointHelper	A										<section class="prog__container">Helps with the creation, registration, and un-registration of endpoints.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.TyrusEndpointHelper.html
GlassFishRequestUpgradeStrategy	A										<section class="prog__container">A WebSocket RequestUpgradeStrategy for Oracle's GlassFish 4.1 and higher.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.html
ServerEndpointExporter	A										<section class="prog__container">Detects beans of type ServerEndpointConfig and registers\n with the standard Java WebSocket runtime. Also detects beans annotated with\n ServerEndpoint and registers them as well. Although not required, it is likely\n annotated endpoints should have their configurator property set to\n SpringConfigurator.\n\n When this class is used, by declaring it in Spring configuration, it should be\n possible to turn off a Servlet container's scan for WebSocket endpoints. This can be\n done with the help of the <absolute-ordering> element in web.xml.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/ServerEndpointExporter.html
ServerEndpointRegistration	A										<section class="prog__container">An implementation of ServerEndpointConfig for use in\n Spring applications. A ServerEndpointRegistration bean is detected by\n ServerEndpointExporter and registered with a Java WebSocket runtime at startup.\n\n Class constructors accept a singleton Endpoint instance\n or an Endpoint specified by type Class. When specified by type, the endpoint\n will be instantiated and initialized through the Spring ApplicationContext before\n each client WebSocket connection.\n\n This class also extends\n ServerEndpointConfig.Configurator to make it easier to\n override methods for customizing the handshake process.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/ServerEndpointRegistration.html
ServletServerContainerFactoryBean	A										<section class="prog__container">A FactoryBean for configuring ServerContainer.\n Since there is usually only one ServerContainer instance accessible under a\n well-known javax.servlet.ServletContext attribute, simply declaring this\n FactoryBean and using its setters allows for configuring the ServerContainer\n through Spring configuration.\n\n This is useful even if the ServerContainer is not injected into any other\n bean within the Spring application context. For example, an application can configure\n a DefaultHandshakeHandler,\n a SockJsService, or\n ServerEndpointExporter, and separately declare this FactoryBean in order\n to customize the properties of the (one and only) ServerContainer instance.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/ServletServerContainerFactoryBean.html
SpringConfigurator	A										<section class="prog__container">A ServerEndpointConfig.Configurator for initializing\n ServerEndpoint-annotated classes through Spring.\n\n \n\n @ServerEndpoint(value = "/echo", configurator = SpringConfigurator.class)\n public class EchoEndpoint {\n     // ...\n }\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/SpringConfigurator.html
TomcatRequestUpgradeStrategy	A										<section class="prog__container">A WebSocket RequestUpgradeStrategy for Apache Tomcat. Compatible with\n all versions of Tomcat that support JSR-356, i.e. Tomcat 7.0.47+ and higher.\n\n To modify properties of the underlying ServerContainer\n you can use ServletServerContainerFactoryBean in XML configuration or,\n when using Java configuration, access the container instance through the\n "javax.websocket.server.ServerContainer" ServletContext attribute.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/TomcatRequestUpgradeStrategy.html
UndertowRequestUpgradeStrategy	A										<section class="prog__container">A WebSocket RequestUpgradeStrategy for WildFly and its underlying\n Undertow web server. Also compatible with embedded Undertow usage.\n\n Designed for Undertow 1.3.5+ as of Spring Framework 4.3, with a fallback\n strategy for Undertow 1.0 to 1.3 - as included in WildFly 8.x, 9 and 10.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.html
WebLogicRequestUpgradeStrategy	A										<section class="prog__container">A WebSocket RequestUpgradeStrategy for Oracle's WebLogic.\n Supports 12.1.3 as well as 12.2.1, as of Spring Framework 4.2.3.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/WebLogicRequestUpgradeStrategy.html
WebSphereRequestUpgradeStrategy	A										<section class="prog__container">WebSphere support for upgrading an HttpServletRequest during a\n WebSocket handshake. To modify properties of the underlying\n ServerContainer you can use\n ServletServerContainerFactoryBean in XML configuration or, when using\n Java configuration, access the container instance through the\n "javax.websocket.server.ServerContainer" ServletContext attribute.\n\n Tested with WAS Liberty beta (August 2015) for the upcoming 8.5.5.7 release.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/standard/WebSphereRequestUpgradeStrategy.html
AbstractHandshakeHandler	A										<section class="prog__container">A base class for HandshakeHandler implementations, independent from the Servlet API.\n\n Performs initial validation of the WebSocket handshake request - possibly rejecting it\n through the appropriate HTTP status code - while also allowing its subclasses to override\n various parts of the negotiation process (e.g. origin validation, sub-protocol negotiation,\n extensions negotiation, etc).\n\n If the negotiation succeeds, the actual upgrade is delegated to a server-specific\n RequestUpgradeStrategy, which will update\n the response as necessary and initialize the WebSocket. Currently supported servers are\n Jetty 9.0-9.3, Tomcat 7.0.47+ and 8.x, Undertow 1.0-1.3, GlassFish 4.1+, WebLogic 12.1.3+.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/AbstractHandshakeHandler.html
DefaultHandshakeHandler	A										<section class="prog__container">A default HandshakeHandler implementation,\n extending AbstractHandshakeHandler with Servlet-specific initialization support.\n See AbstractHandshakeHandler's javadoc for details on supported servers etc.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/DefaultHandshakeHandler.html
HandshakeInterceptorChain	A										<section class="prog__container">A helper class that assists with invoking a list of handshake interceptors.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/HandshakeInterceptorChain.html
HttpSessionHandshakeInterceptor	A										<section class="prog__container">An interceptor to copy information from the HTTP session to the "handshake\n attributes" map to made available viaWebSocketSession.getAttributes().\n\n Copies a subset or all HTTP session attributes and/or the HTTP session id\n under the key HTTP_SESSION_ID_ATTR_NAME.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/HttpSessionHandshakeInterceptor.html
OriginHandshakeInterceptor	A										<section class="prog__container">An interceptor to check request Origin header value against a\n collection of allowed origins.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/OriginHandshakeInterceptor.html
WebSocketHandlerMapping	A										<section class="prog__container">An extension of SimpleUrlHandlerMapping that is also a\n SmartLifecycle container and propagates start and stop calls to any\n handlers that implement Lifecycle. The handlers are typically expected\n to be WebSocketHttpRequestHandler or SockJsHttpRequestHandler.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/WebSocketHandlerMapping.html
WebSocketHttpRequestHandler	A										<section class="prog__container">A HttpRequestHandler for processing WebSocket handshake requests.\n\n This is the main class to use when configuring a server WebSocket at a specific URL.\n It is a very thin wrapper around a WebSocketHandler and a HandshakeHandler,\n also adapting the HttpServletRequest and HttpServletResponse to\n ServerHttpRequest and ServerHttpResponse, respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.html
SockJsException	A										<section class="prog__container">Base class for exceptions raised while processing SockJS HTTP requests.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/SockJsException.html
SockJsMessageDeliveryException	A										<section class="prog__container">An exception thrown when a message frame was successfully received over an HTTP POST\n and parsed but one or more of the messages it contained could not be delivered to the\n WebSocketHandler either because the handler failed or because the connection got\n closed.\n\n The SockJS session is not automatically closed after this exception.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/SockJsMessageDeliveryException.html
SockJsService	A										<section class="prog__container">The main entry point for processing HTTP requests from SockJS clients.\n\n In a Servlet 3+ container, SockJsHttpRequestHandler\n can be used to invoke this service. The processing servlet, as well as all filters involved,\n must have asynchronous support enabled through the ServletContext API or by adding an\n <async-support>true</async-support> element to servlet and filter declarations\n in web.xml.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/SockJsService.html
SockJsTransportFailureException	A										<section class="prog__container">Indicates a serious failure that occurred in the SockJS implementation as opposed to\n in user code (e.g. IOException while writing to the response). When this exception\n is raised, the SockJS session is typically closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/SockJsTransportFailureException.html
AbstractClientSockJsSession	A										<section class="prog__container">Base class for SockJS client implementations of WebSocketSession.\n Provides processing of incoming SockJS message frames and delegates lifecycle\n events and messages to the (application) WebSocketHandler.\n Sub-classes implement actual send as well as disconnect logic.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/AbstractClientSockJsSession.html
AbstractXhrTransport	A										<section class="prog__container">Abstract base class for XHR transport implementations to extend.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.html
InfoReceiver	A										<section class="prog__container">A component that can execute the SockJS "Info" request that needs to be\n performed before the SockJS session starts in order to check server endpoint\n capabilities such as whether the endpoint permits use of WebSocket.\n\n Typically XhrTransport implementations are also implementations\n of this contract.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/InfoReceiver.html
JettyXhrTransport	A										<section class="prog__container">An XHR transport based on Jetty's HttpClient.\n\n When used for testing purposes (e.g. load testing) the HttpClient\n properties must be set to allow a larger than usual number of connections and\n threads. For example:\n\n \n HttpClient httpClient = new HttpClient();\n httpClient.setMaxConnectionsPerDestination(1000);\n httpClient.setExecutor(new QueuedThreadPool(500));\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/JettyXhrTransport.html
RestTemplateXhrTransport	A										<section class="prog__container">An XhrTransport implementation that uses a\n RestTemplate.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/RestTemplateXhrTransport.html
SockJsClient	A										<section class="prog__container">A SockJS implementation of\n WebSocketClient\n with fallback alternatives that simulate a WebSocket interaction through plain\n HTTP streaming and long polling techniques..\n\n Implements Lifecycle in order to propagate lifecycle events to\n the transports it is configured with.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/SockJsClient.html
SockJsUrlInfo	A										<section class="prog__container">Container for the base URL of a SockJS endpoint with additional helper methods\n to derive related SockJS URLs as the info URL and\n transport URLs.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/SockJsUrlInfo.html
Transport	A										<section class="prog__container">A client-side implementation for a SockJS transport.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/Transport.html
TransportRequest	A										<section class="prog__container">Exposes information, typically to Transport and\n session implementations, about a request\n to connect to a SockJS server endpoint over a given transport.\n\n Note that a single request to connect via SockJsClient may result\n in multiple instances of TransportRequest, one for each transport\n before a connection is successfully established.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/TransportRequest.html
UndertowXhrTransport	A										<section class="prog__container">An XHR transport based on Undertow's UndertowClient.\n Compatible with Undertow 1.0 to 1.3, as of Spring Framework 4.2.2.\n\n When used for testing purposes (e.g. load testing) or for specific use cases\n (like HTTPS configuration), a custom OptionMap should be provided:\n\n \n OptionMap optionMap = OptionMap.builder()\n   .set(Options.WORKER_IO_THREADS, 8)\n   .set(Options.TCP_NODELAY, true)\n   .set(Options.KEEP_ALIVE, true)\n   .set(Options.WORKER_NAME, "SockJSClient")\n   .getMap();\n\n UndertowXhrTransport transport = new UndertowXhrTransport(optionMap);\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.html
WebSocketClientSockJsSession	A										<section class="prog__container">An extension of AbstractClientSockJsSession wrapping and delegating\n to an actual WebSocket session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/WebSocketClientSockJsSession.html
WebSocketTransport	A										<section class="prog__container">A SockJS Transport that uses a\n WebSocketClient.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/WebSocketTransport.html
XhrClientSockJsSession	A										<section class="prog__container">An extension of AbstractClientSockJsSession for use with HTTP\n transports simulating a WebSocket session.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/XhrClientSockJsSession.html
XhrTransport	A										<section class="prog__container">A SockJS Transport that uses HTTP requests to simulate a WebSocket\n interaction. The connect method of the base Transport interface\n is used to receive messages from the server while the\n executeSendRequest(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage) method here is used to send messages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/client/XhrTransport.html
AbstractSockJsMessageCodec	A										<section class="prog__container">An base class for SockJS message codec that provides an implementation of\n encode(String[]).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec.html
DefaultSockJsFrameFormat	A										<section class="prog__container">A default implementation of\n SockJsFrameFormat that relies\n on String.format(String, Object...)..</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/DefaultSockJsFrameFormat.html
Jackson2SockJsMessageCodec	A										<section class="prog__container">A Jackson 2.6+ codec for encoding and decoding SockJS messages.\n\n It customizes Jackson's default properties with the following ones:\n \nMapperFeature.DEFAULT_VIEW_INCLUSION is disabled\nDeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\n\nNote that Jackson's JSR-310 and Joda-Time support modules will be registered automatically\n when available (and when Java 8 and Joda-Time themselves are available, respectively).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.html
SockJsFrame	A										<section class="prog__container">Represents a SockJS frame. Provides factory methods to create SockJS frames.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/SockJsFrame.html
SockJsFrameFormat	A										<section class="prog__container">Applies a transport-specific format to the content of a SockJS frame resulting\n in a content that can be written out. Primarily for use in HTTP server-side\n transports that push data.\n\n Formatting may vary from simply appending a new line character for XHR\n polling and streaming transports, to a jsonp-style callback function,\n surrounding script tags, and more.\n\n For the various SockJS frame formats in use, see implementations of\n AbstractHttpSendingTransportHandler.getFrameFormat</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/SockJsFrameFormat.html
SockJsFrameType	A										<section class="prog__container">SockJS frame types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/SockJsFrameType.html
SockJsMessageCodec	A										<section class="prog__container">Encode and decode messages to and from a SockJS message frame,\n essentially an array of JSON-encoded messages. For example:\n\n \n a["message1","message2"]\n </section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/frame/SockJsMessageCodec.html
AbstractSockJsService	A										<section class="prog__container">An abstract base class for SockJsService implementations that provides SockJS\n path resolution and handling of static SockJS requests (e.g. "/info", "/iframe.html",\n etc). Sub-classes must handle session URLs (i.e. transport-specific requests).\n\n By default, only same origin requests are allowed. Use setAllowedOrigins(java.util.Collection<java.lang.String>)\n to specify a list of allowed origins (a list containing "*" will allow all origins).</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/support/AbstractSockJsService.html
SockJsHttpRequestHandler	A										<section class="prog__container">An HttpRequestHandler that allows mapping a SockJsService to requests\n in a Servlet container.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/support/SockJsHttpRequestHandler.html
SockJsServiceConfig	A										<section class="prog__container">Provides transport handling code with access to the SockJsService configuration\n options they need to have access to. Mainly for internal use.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/SockJsServiceConfig.html
SockJsSession	A										<section class="prog__container">SockJS extension of Spring's standard WebSocketSession.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/SockJsSession.html
SockJsSessionFactory	A										<section class="prog__container">A factory for creating a SockJS session. TransportHandlers typically also serve\n as SockJS session factories.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/SockJsSessionFactory.html
TransportHandler	A										<section class="prog__container">Handle a SockJS session URL, i.e. transport-specific request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/TransportHandler.html
TransportHandlingSockJsService	A										<section class="prog__container">A basic implementation of SockJsService\n with support for SPI-based transport handling and session management.\n\n Based on the TransportHandler SPI. TransportHandlers may additionally\n implement the SockJsSessionFactory and HandshakeHandler interfaces.\n\n See the AbstractSockJsService base class for important details on request mapping.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.html
TransportType	A										<section class="prog__container">SockJS transport types.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/TransportType.html
AbstractHttpReceivingTransportHandler	A										<section class="prog__container">Base class for HTTP transport handlers that receive messages via HTTP POST.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler.html
AbstractHttpSendingTransportHandler	A										<section class="prog__container">Base class for HTTP transport handlers that push messages to connected clients.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler.html
AbstractTransportHandler	A										<section class="prog__container">Common base class for TransportHandler inplementations.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/AbstractTransportHandler.html
DefaultSockJsService	A										<section class="prog__container">A default implementation of SockJsService\n with all default TransportHandler implementations pre-registered.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/DefaultSockJsService.html
EventSourceTransportHandler	A										<section class="prog__container">A TransportHandler for sending messages via Server-Sent events:\n http://dev.w3.org/html5/eventsource/.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/EventSourceTransportHandler.html
HtmlFileTransportHandler	A										<section class="prog__container">An HTTP TransportHandler that uses a famous browser document.domain technique:\n \n http://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler.html
JsonpPollingTransportHandler	A										<section class="prog__container">A TransportHandler that sends messages via JSONP polling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/JsonpPollingTransportHandler.html
JsonpReceivingTransportHandler	A										<section class="prog__container">A TransportHandler that receives messages over HTTP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler.html
SockJsWebSocketHandler	A										<section class="prog__container">An implementation of WebSocketHandler that adds SockJS messages frames, sends\n SockJS heartbeat messages, and delegates lifecycle events and messages to a target\n WebSocketHandler.\n\n Methods in this class allow exceptions from the wrapped WebSocketHandler to\n propagate. However, any exceptions resulting from SockJS message handling (e.g. while\n sending SockJS frames or heartbeat messages) are caught and treated as transport\n errors, i.e. routed to the\n handleTransportError method of the wrapped handler and the session closed.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/SockJsWebSocketHandler.html
WebSocketTransportHandler	A										<section class="prog__container">WebSocket-based TransportHandler. Uses SockJsWebSocketHandler and\n WebSocketServerSockJsSession to add SockJS processing.\n\n Also implements HandshakeHandler to support raw WebSocket communication at\n SockJS URL "/websocket".</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/WebSocketTransportHandler.html
XhrPollingTransportHandler	A										<section class="prog__container">A TransportHandler based on XHR (long) polling.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/XhrPollingTransportHandler.html
XhrReceivingTransportHandler	A										<section class="prog__container">A TransportHandler that receives messages over HTTP.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/XhrReceivingTransportHandler.html
XhrStreamingTransportHandler	A										<section class="prog__container">A TransportHandler that sends messages over an HTTP streaming request.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/XhrStreamingTransportHandler.html
AbstractHttpSockJsSession	A										<section class="prog__container">An abstract base class for use with HTTP transport SockJS sessions.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.html
AbstractSockJsSession	A										<section class="prog__container">An abstract base class for SockJS sessions implementing SockJsSession.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.html
PollingSockJsSession	A										<section class="prog__container">A SockJS session for use with polling HTTP transports.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.html
StreamingSockJsSession	A										<section class="prog__container">A SockJS session for use with streaming HTTP transports.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/session/StreamingSockJsSession.html
WebSocketServerSockJsSession	A										<section class="prog__container">A SockJS session for use with the WebSocket transport.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/session/WebSocketServerSockJsSession.html
AbstractUriTemplateHandler	A										<section class="prog__container">Abstract base class for UriTemplateHandler implementations.\n\n Support setBaseUrl(java.lang.String) and setDefaultUriVariables(java.util.Map<java.lang.String, ?>) properties\n that should be relevant regardless of the URI template expand and encode\n mechanism used in sub-classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/AbstractUriTemplateHandler.html
ContentCachingRequestWrapper	A										<section class="prog__container">HttpServletRequest wrapper that caches all content read from\n the input stream and reader,\n and allows this content to be retrieved via a byte array.\n\n Used e.g. by AbstractRequestLoggingFilter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/ContentCachingRequestWrapper.html
ContentCachingResponseWrapper	A										<section class="prog__container">HttpServletResponse wrapper that caches all content written to\n the output stream and writer,\n and allows this content to be retrieved via a byte array.\n\n Used e.g. by ShallowEtagHeaderFilter.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/ContentCachingResponseWrapper.html
CookieGenerator	A										<section class="prog__container">Helper class for cookie generation, carrying cookie descriptor settings\n as bean properties and being able to add and remove cookie to/from a\n given response.\n\n Can serve as base class for components that generate specific cookies,\n such as CookieLocaleResolver and CookieThemeResolver.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/CookieGenerator.html
DefaultUriTemplateHandler	A										<section class="prog__container">Default implementation of UriTemplateHandler based on the use of\n UriComponentsBuilder for expanding and encoding variables.\n\n There are also several properties to customize how URI template handling\n is performed, including a baseUrl to be used as a prefix\n for all URI templates and a couple of encoding related options —\n parsePath and strictEncoding\n respectively.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/DefaultUriTemplateHandler.html
HtmlUtils	A										<section class="prog__container">Utility class for HTML escaping. Escapes and unescapes\n based on the W3C HTML 4.01 recommendation, handling\n character entity references.\n\n Reference:\n http://www.w3.org/TR/html4/charset.html\nFor a comprehensive set of String escaping utilities,\n consider Apache Commons Lang and its StringEscapeUtils class.\n We are not using that class here to avoid a runtime dependency\n on Commons Lang just for HTML escaping. Furthermore, Spring's\n HTML escaping is more flexible and 100% HTML 4.0 compliant.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/HtmlUtils.html
HttpSessionMutexListener	A										<section class="prog__container">Servlet HttpSessionListener that automatically exposes the session mutex\n when an HttpSession gets created. To be registered as a listener in\n web.xml.\n\n The session mutex is guaranteed to be the same object during\n the entire lifetime of the session, available under the key defined\n by the SESSION_MUTEX_ATTRIBUTE constant. It serves as a\n safe reference to synchronize on for locking on the current session.\n\n In many cases, the HttpSession reference itself is a safe mutex\n as well, since it will always be the same object reference for the\n same active logical session. However, this is not guaranteed across\n different servlet containers; the only 100% safe way is a session mutex.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/HttpSessionMutexListener.html
IntrospectorCleanupListener	A										<section class="prog__container">Listener that flushes the JDK's JavaBeans Introspector\n cache on web app shutdown. Register this listener in your web.xml to\n guarantee proper release of the web application class loader and its loaded classes.\n\n If the JavaBeans Introspector has been used to analyze application classes,\n the system-level Introspector cache will hold a hard reference to those classes.\n Consequently, those classes and the web application class loader will not be\n garbage-collected on web app shutdown! This listener performs proper cleanup,\n to allow for garbage collection to take effect.\n\n Unfortunately, the only way to clean up the Introspector is to flush\n the entire cache, as there is no way to specifically determine the\n application's classes referenced there. This will remove cached\n introspection results for all other applications in the server too.\n\n Note that this listener is not necessary when using Spring's beans\n infrastructure within the application, as Spring's own introspection results\n cache will immediately flush an analyzed class from the JavaBeans Introspector\n cache and only hold a cache within the application's own ClassLoader.\n\n Although Spring itself does not create JDK Introspector leaks, note that this\n listener should nevertheless be used in scenarios where the Spring framework classes\n themselves reside in a 'common' ClassLoader (such as the system ClassLoader).\n In such a scenario, this listener will properly clean up Spring's introspection cache.\n\n Application classes hardly ever need to use the JavaBeans Introspector\n directly, so are normally not the cause of Introspector resource leaks.\n Rather, many libraries and frameworks do not clean up the Introspector:\n e.g. Struts and Quartz.\n\n Note that a single such Introspector leak will cause the entire web\n app class loader to not get garbage collected! This has the consequence that\n you will see all the application's static class resources (like singletons)\n around after web app shutdown, which is not the fault of those classes!\n\n This listener should be registered as the first one in web.xml,\n before any application listeners such as Spring's ContextLoaderListener.\n This allows the listener to take full effect at the right time of the lifecycle.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/IntrospectorCleanupListener.html
JavaScriptUtils	A										<section class="prog__container">Utility class for JavaScript escaping.\n Escapes based on the JavaScript 1.5 recommendation.\n\n Reference:\n \n JavaScript Guide on Mozilla Developer Network.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/JavaScriptUtils.html
Log4jConfigListener	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of Apache Log4j 2\n (following Apache's EOL declaration for log4j 1.x)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/Log4jConfigListener.html
Log4jWebConfigurer	A										<section class="prog__container">Deprecated. \nas of Spring 4.2.1, in favor of Apache Log4j 2\n (following Apache's EOL declaration for log4j 1.x)\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/Log4jWebConfigurer.html
NestedServletException	A										<section class="prog__container">Subclass of ServletException that properly handles a root cause in terms\n of message and stacktrace, just like NestedChecked/RuntimeException does.\n\n Note that the plain ServletException doesn't expose its root cause at all,\n neither in the exception message nor in printed stack traces! While this might\n be fixed in later Servlet API variants (which even differ per vendor for the\n same API version), it is not reliably available on Servlet 2.4 (the minimum\n version required by Spring 3.x), which is why we need to do it ourselves.\n\n The similarity between this class and the NestedChecked/RuntimeException\n class is unavoidable, as this class needs to derive from ServletException.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/NestedServletException.html
ServletContextPropertyUtils	A										<section class="prog__container">Helper class for resolving placeholders in texts. Usually applied to file paths.\n\n A text may contain ${...} placeholders, to be resolved as servlet context\n init parameters or system properties: e.g. ${user.dir}. Default values can\n be supplied using the ":" separator between key and value.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/ServletContextPropertyUtils.html
TagUtils	A										<section class="prog__container">Utility class for tag library related code, exposing functionality\n such as translating Strings to web scopes.\n\n \n\npage will be transformed to\n PageContext.PAGE_SCOPE\nrequest will be transformed to\n PageContext.REQUEST_SCOPE\nsession will be transformed to\n PageContext.SESSION_SCOPE\napplication will be transformed to\n PageContext.APPLICATION_SCOPE\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/TagUtils.html
UriComponents	A										<section class="prog__container">Represents an immutable collection of URI components, mapping component type to\n String values. Contains convenience getters for all components. Effectively similar\n to URI, but with more powerful encoding options and support for\n URI template variables.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriComponents.html
UriComponents.UriTemplateVariables	A										<section class="prog__container">Defines the contract for URI Template variables</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriComponents.UriTemplateVariables.html
UriComponentsBuilder	A										<section class="prog__container">Builder for UriComponents.\n\n Typical usage involves:\n \nCreate a UriComponentsBuilder with one of the static factory methods\n (such as fromPath(String) or fromUri(URI))\nSet the various URI components through the respective methods (scheme(String),\n userInfo(String), host(String), port(int), path(String),\n pathSegment(String...), queryParam(String, Object...), and\n fragment(String).\nBuild the UriComponents instance with the build() method.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriComponentsBuilder.html
UriTemplate	A										<section class="prog__container">Represents a URI template. A URI template is a URI-like String that contains variables\n enclosed by braces ({}), which can be expanded to produce an actual URI.\n\n See expand(Map), expand(Object[]), and match(String)\n for example usages.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriTemplate.html
UriTemplateHandler	A										<section class="prog__container">Strategy for expanding a URI template with full control over the URI template\n syntax and the encoding of variables. Also a convenient central point for\n pre-processing all URI templates for example to insert a common base path.\n\n Supported as a property on the RestTemplate as well as the\n AsyncRestTemplate. The DefaultUriTemplateHandler is built\n on Spring's URI template support via UriComponentsBuilder. An\n alternative implementation may be used to plug external URI template libraries.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriTemplateHandler.html
UriUtils	A										<section class="prog__container">Utility class for URI encoding and decoding based on RFC 3986.\n Offers encoding methods for the various URI components.\n\n All encode*(String, String) methods in this class operate in a similar way:\n \nValid characters for the specific URI component as defined in RFC 3986 stay the same.\nAll other characters are converted into one or more bytes in the given encoding scheme.\n Each of the resulting bytes is written as a hexadecimal string in the "%xy"\n format.\n</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriUtils.html
UrlPathHelper	A										<section class="prog__container">Helper class for URL path matching. Provides support for URL paths in\n RequestDispatcher includes and support for consistent URL decoding.\n\n Used by AbstractUrlHandlerMapping,\n AbstractUrlMethodNameResolver\n and RequestContext for path matching\n and/or URI determination.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UrlPathHelper.html
WebAppRootListener	A										<section class="prog__container">Listener that sets a system property to the web application root directory.\n The key of the system property can be defined with the "webAppRootKey" init\n parameter at the servlet context level (i.e. context-param in web.xml),\n the default key is "webapp.root".\n\n Can be used for toolkits that support substitution with system properties\n (i.e. System.getProperty values), like log4j's "${key}" syntax within log\n file locations.\n\n Note: This listener should be placed before ContextLoaderListener in web.xml,\n at least when used for log4j. Log4jConfigListener sets the system property\n implicitly, so there's no need for this listener in addition to it.\n\n WARNING: Some containers, e.g. Tomcat, do NOT keep system properties separate\n per web app. You have to use unique "webAppRootKey" context-params per web app\n then, to avoid clashes. Other containers like Resin do isolate each web app's\n system properties: Here you can use the default key (i.e. no "webAppRootKey"\n context-param at all) without worrying.\n\n WARNING: The WAR file containing the web application needs to be expanded\n to allow for setting the web app root system property. This is by default not\n the case when a WAR file gets deployed to WebLogic, for example. Do not use\n this listener in such an environment!</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/WebAppRootListener.html
WebUtils	A										<section class="prog__container">Miscellaneous utilities for web applications.\n Used by various framework classes.</section>	http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/WebUtils.html
