git-add <pathspec>…​	A										Files to add content from.  Fileglobs (e.g. *.c) can
be given to add all matching files.  Also a
leading directory name (e.g. dir to add dir/file1
and dir/file2) can be given to update the index to
match the current state of the directory as a whole (e.g.
specifying dir will record not just a file dir/file1
modified in the working tree, a file dir/file2 added to
the working tree, but also a file dir/file3 removed from
the working tree.  Note that older versions of Git used
to ignore removed files; use --no-all option if you want
to add modified or new files but ignore removed    ones.	https://git-scm.com/docs/add.html
git-add -n	A										Don’t actually add the file(s), just show if they exist and/or will
be ignored.	https://git-scm.com/docs/add.html
git-add --dry-run	A										Don’t actually add the file(s), just show if they exist and/or will
be ignored.	https://git-scm.com/docs/add.html
git-add -v	A										Be verbose.	https://git-scm.com/docs/add.html
git-add --verbose	A										Be verbose.	https://git-scm.com/docs/add.html
git-add -f	A										Allow adding otherwise ignored files.	https://git-scm.com/docs/add.html
git-add --force	A										Allow adding otherwise ignored files.	https://git-scm.com/docs/add.html
git-add -i	A										Add modified contents in the working tree interactively to
the index. Optional path arguments may be supplied to limit
operation to a subset of the working tree. See “Interactive
mode” for details.	https://git-scm.com/docs/add.html
git-add --interactive	A										Add modified contents in the working tree interactively to
the index. Optional path arguments may be supplied to limit
operation to a subset of the working tree. See “Interactive
mode” for details.	https://git-scm.com/docs/add.html
git-add -p	A										Interactively choose hunks of patch between the index and the
work tree and add them to the index. This gives the user a chance
to review the difference before adding modified contents to the
index.	https://git-scm.com/docs/add.html
git-add --patch	A										Interactively choose hunks of patch between the index and the
work tree and add them to the index. This gives the user a chance
to review the difference before adding modified contents to the
index.	https://git-scm.com/docs/add.html
git-add -e	A										Open the diff vs. the index in an editor and let the user
edit it.  After the editor was closed, adjust the hunk headers
and apply the patch to the index.	https://git-scm.com/docs/add.html
git-add --edit	A										Open the diff vs. the index in an editor and let the user
edit it.  After the editor was closed, adjust the hunk headers
and apply the patch to the index.	https://git-scm.com/docs/add.html
git-add -u	A										Update the index just where it already has an entry matching
<pathspec>.  This removes as well as modifies index entries to
match the working tree, but adds no new files.	https://git-scm.com/docs/add.html
git-add --update	A										Update the index just where it already has an entry matching
<pathspec>.  This removes as well as modifies index entries to
match the working tree, but adds no new files.	https://git-scm.com/docs/add.html
git-add -A	A										Update the index not only where the working tree has a file
matching <pathspec> but also where the index already has an
entry.    This adds, modifies, and removes index entries to
match the working tree.	https://git-scm.com/docs/add.html
git-add --all	A										Update the index not only where the working tree has a file
matching <pathspec> but also where the index already has an
entry.    This adds, modifies, and removes index entries to
match the working tree.	https://git-scm.com/docs/add.html
git-add --no-ignore-removal	A										Update the index not only where the working tree has a file
matching <pathspec> but also where the index already has an
entry.    This adds, modifies, and removes index entries to
match the working tree.	https://git-scm.com/docs/add.html
git-add --no-all	A										Update the index by adding new files that are unknown to the
index and files modified in the working tree, but ignore
files that have been removed from the working tree.  This
option is a no-op when no <pathspec> is used.	https://git-scm.com/docs/add.html
git-add --ignore-removal	A										Update the index by adding new files that are unknown to the
index and files modified in the working tree, but ignore
files that have been removed from the working tree.  This
option is a no-op when no <pathspec> is used.	https://git-scm.com/docs/add.html
git-add -N	A										Record only the fact that the path will be added later. An entry
for the path is placed in the index with no content. This is
useful for, among other things, showing the unstaged content of
such files with git diff and committing them with git commit
-a.	https://git-scm.com/docs/add.html
git-add --intent-to-add	A										Record only the fact that the path will be added later. An entry
for the path is placed in the index with no content. This is
useful for, among other things, showing the unstaged content of
such files with git diff and committing them with git commit
-a.	https://git-scm.com/docs/add.html
git-add --refresh	A										Don’t add the file(s), but only refresh their stat()
information in the index.	https://git-scm.com/docs/add.html
git-add --ignore-errors	A										If some files could not be added because of errors indexing
them, do not abort the operation, but continue adding the
others. The command shall still exit with non-zero status.
The configuration variable add.ignoreErrors can be set to
true to make this the default behaviour.	https://git-scm.com/docs/add.html
git-add --ignore-missing	A										This option can only be used together with --dry-run. By using
this option the user can check if any of the given files would
be ignored, no matter if they are already present in the work
tree or not.	https://git-scm.com/docs/add.html
git-add --	A										This option can be used to separate command-line options from
the list of files, (useful when filenames might be mistaken
for command-line options).	https://git-scm.com/docs/add.html
git-add	A										Add file contents to the index
<pre><code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n      [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/add.html
git-am (<mbox>|<Maildir>)…​	A										The list of mailbox files to read patches from. If you do not
supply this argument, the command reads from the standard input.
If you supply directories, they will be treated as Maildirs.	https://git-scm.com/docs/am.html
git-am -s	A										Add a Signed-off-by: line to the commit message, using
the committer identity of yourself.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/am.html
git-am --signoff	A										Add a Signed-off-by: line to the commit message, using
the committer identity of yourself.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/am.html
git-am -k	A										Pass -k flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --keep	A										Pass -k flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --keep-non-patch	A										Pass -b flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --[no-]keep-cr	A										With --keep-cr, call git mailsplit (see git-mailsplit[1])
with the same option, to prevent it from stripping CR at the end of
lines. am.keepcr configuration variable can be used to specify the
default behaviour.  --no-keep-cr is useful to override am.keepcr.	https://git-scm.com/docs/am.html
git-am -c	A										Remove everything in body before a scissors line (see
git-mailinfo[1]). Can be activated by default using
the mailinfo.scissors configuration variable.	https://git-scm.com/docs/am.html
git-am --scissors	A										Remove everything in body before a scissors line (see
git-mailinfo[1]). Can be activated by default using
the mailinfo.scissors configuration variable.	https://git-scm.com/docs/am.html
git-am --no-scissors	A										Ignore scissors lines (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am -m	A										Pass the -m flag to git mailinfo (see git-mailinfo[1]),
so that the Message-ID header is added to the commit message.
The am.messageid configuration variable can be used to specify
the default behaviour.	https://git-scm.com/docs/am.html
git-am --message-id	A										Pass the -m flag to git mailinfo (see git-mailinfo[1]),
so that the Message-ID header is added to the commit message.
The am.messageid configuration variable can be used to specify
the default behaviour.	https://git-scm.com/docs/am.html
git-am --no-message-id	A										Do not add the Message-ID header to the commit message.
no-message-id is useful to override am.messageid.	https://git-scm.com/docs/am.html
git-am -q	A										Be quiet. Only print error messages.	https://git-scm.com/docs/am.html
git-am --quiet	A										Be quiet. Only print error messages.	https://git-scm.com/docs/am.html
git-am -u	A										Pass -u flag to git mailinfo (see git-mailinfo[1]).
The proposed commit log message taken from the e-mail
is re-coded into UTF-8 encoding (configuration variable
i18n.commitencoding can be used to specify project’s
preferred encoding if it is not UTF-8).	https://git-scm.com/docs/am.html
git-am --utf8	A										Pass -u flag to git mailinfo (see git-mailinfo[1]).
The proposed commit log message taken from the e-mail
is re-coded into UTF-8 encoding (configuration variable
i18n.commitencoding can be used to specify project’s
preferred encoding if it is not UTF-8).	https://git-scm.com/docs/am.html
git-am --no-utf8	A										Pass -n flag to git mailinfo (see
git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am -3	A										When the patch does not apply cleanly, fall back on
3-way merge if the patch records the identity of blobs
it is supposed to apply to and we have those blobs
available locally. --no-3way can be used to override
am.threeWay configuration variable. For more information,
see am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --3way	A										When the patch does not apply cleanly, fall back on
3-way merge if the patch records the identity of blobs
it is supposed to apply to and we have those blobs
available locally. --no-3way can be used to override
am.threeWay configuration variable. For more information,
see am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --no-3way	A										When the patch does not apply cleanly, fall back on
3-way merge if the patch records the identity of blobs
it is supposed to apply to and we have those blobs
available locally. --no-3way can be used to override
am.threeWay configuration variable. For more information,
see am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --ignore-space-change	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --ignore-whitespace	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --whitespace=<option>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am -C<n>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am -p<n>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --directory=<dir>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --exclude=<path>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --include=<path>	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --reject	A										These flags are passed to the git apply (see git-apply[1])
program that applies
the patch.	https://git-scm.com/docs/am.html
git-am --patch-format	A										By default the command will try to detect the patch format
automatically. This option allows the user to bypass the automatic
detection and specify the patch format that the patch(es) should be
interpreted as. Valid formats are mbox, stgit, stgit-series and hg.	https://git-scm.com/docs/am.html
git-am -i	A										Run interactively.	https://git-scm.com/docs/am.html
git-am --interactive	A										Run interactively.	https://git-scm.com/docs/am.html
git-am --committer-date-is-author-date	A										By default the command records the date from the e-mail
message as the commit author date, and uses the time of
commit creation as the committer date. This allows the
user to lie about the committer date by using the same
value as the author date.	https://git-scm.com/docs/am.html
git-am --ignore-date	A										By default the command records the date from the e-mail
message as the commit author date, and uses the time of
commit creation as the committer date. This allows the
user to lie about the author date by using the same
value as the committer date.	https://git-scm.com/docs/am.html
git-am --skip	A										Skip the current patch.  This is only meaningful when
restarting an aborted patch.	https://git-scm.com/docs/am.html
git-am -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/am.html
git-am --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/am.html
git-am --continue	A										After a patch failure (e.g. attempting to apply
conflicting patch), the user has applied it by hand and
the index file stores the result of the application.
Make a commit using the authorship and commit log
extracted from the e-mail message and the current index
file, and continue.	https://git-scm.com/docs/am.html
git-am -r	A										After a patch failure (e.g. attempting to apply
conflicting patch), the user has applied it by hand and
the index file stores the result of the application.
Make a commit using the authorship and commit log
extracted from the e-mail message and the current index
file, and continue.	https://git-scm.com/docs/am.html
git-am --resolved	A										After a patch failure (e.g. attempting to apply
conflicting patch), the user has applied it by hand and
the index file stores the result of the application.
Make a commit using the authorship and commit log
extracted from the e-mail message and the current index
file, and continue.	https://git-scm.com/docs/am.html
git-am --resolvemsg=<msg>	A										When a patch failure occurs, <msg> will be printed
to the screen before exiting.  This overrides the
standard message informing you to use --continue
or --skip to handle the failure.  This is solely
for internal use between git rebase and git am.	https://git-scm.com/docs/am.html
git-am --abort	A										Restore the original branch and abort the patching operation.	https://git-scm.com/docs/am.html
git-am	A										Apply a series of patches from a mailbox
<pre><code>git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]\n     [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n     [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n     [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]\n     [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]\n     [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]\n     [(<mbox> | <Maildir>)…​]\ngit am (--continue | --skip | --abort)</pre></code>	https://git-scm.com/docs/am.html
git-apply <patch>…​	A										The files to read the patch from.  - can be used to read
from the standard input.	https://git-scm.com/docs/apply.html
git-apply --stat	A										Instead of applying the patch, output diffstat for the
input.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --numstat	A										Similar to --stat, but shows the number of added and
deleted lines in decimal notation and the pathname without
abbreviation, to make it more machine friendly.  For
binary files, outputs two - instead of saying
0 0.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --summary	A										Instead of applying the patch, output a condensed
summary of information obtained from git diff extended
headers, such as creations, renames and mode changes.
Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --check	A										Instead of applying the patch, see if the patch is
applicable to the current working tree and/or the index
file and detects errors.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --index	A										When --check is in effect, or when applying the patch
(which is the default when none of the options that
disables it is in effect), make sure the patch is
applicable to what the current index file records.  If
the file to be patched in the working tree is not
up-to-date, it is flagged as an error.  This flag also
causes the index file to be updated.	https://git-scm.com/docs/apply.html
git-apply --cached	A										Apply a patch without touching the working tree. Instead take the
cached data, apply the patch, and store the result in the index
without using the working tree. This implies --index.	https://git-scm.com/docs/apply.html
git-apply -3	A										When the patch does not apply cleanly, fall back on 3-way merge if
the patch records the identity of blobs it is supposed to apply to,
and we have those blobs available locally, possibly leaving the
conflict markers in the files in the working tree for the user to
resolve.  This option implies the --index option, and is incompatible
with the --reject and the --cached options.	https://git-scm.com/docs/apply.html
git-apply --3way	A										When the patch does not apply cleanly, fall back on 3-way merge if
the patch records the identity of blobs it is supposed to apply to,
and we have those blobs available locally, possibly leaving the
conflict markers in the files in the working tree for the user to
resolve.  This option implies the --index option, and is incompatible
with the --reject and the --cached options.	https://git-scm.com/docs/apply.html
git-apply --build-fake-ancestor=<file>	A										Newer git diff output has embedded index information
for each blob to help identify the original version that
the patch applies to.  When this flag is given, and if
the original versions of the blobs are available locally,
builds a temporary index containing those blobs.	https://git-scm.com/docs/apply.html
git-apply -R	A										Apply the patch in reverse.	https://git-scm.com/docs/apply.html
git-apply --reverse	A										Apply the patch in reverse.	https://git-scm.com/docs/apply.html
git-apply --reject	A										For atomicity, git apply by default fails the whole patch and
does not touch the working tree when some of the hunks
do not apply.  This option makes it apply
the parts of the patch that are applicable, and leave the
rejected hunks in corresponding *.rej files.	https://git-scm.com/docs/apply.html
git-apply -z	A										When --numstat has been given, do not munge pathnames,
but use a NUL-terminated machine-readable format.	https://git-scm.com/docs/apply.html
git-apply -p<n>	A										Remove <n> leading slashes from traditional diff paths. The
default is 1.	https://git-scm.com/docs/apply.html
git-apply -C<n>	A										Ensure at least <n> lines of surrounding context match before
and after each change.  When fewer lines of surrounding
context exist they all must match.  By default no context is
ever ignored.	https://git-scm.com/docs/apply.html
git-apply --unidiff-zero	A										By default, git apply expects that the patch being
applied is a unified diff with at least one line of context.
This provides good safety measures, but breaks down when
applying a diff generated with --unified=0. To bypass these
checks use --unidiff-zero.	https://git-scm.com/docs/apply.html
git-apply --apply	A										If you use any of the options marked "Turns off
apply" above, git apply reads and outputs the
requested information without actually applying the
patch.  Give this flag after those flags to also apply
the patch.	https://git-scm.com/docs/apply.html
git-apply --no-add	A										When applying a patch, ignore additions made by the
patch.  This can be used to extract the common part between
two files by first running diff on them and applying
the result with this option, which would apply the
deletion part but not the addition part.	https://git-scm.com/docs/apply.html
git-apply --allow-binary-replacement	A										Historically we did not allow binary patch applied
without an explicit permission from the user, and this
flag was the way to do so.  Currently we always allow binary
patch application, so this is a no-op.	https://git-scm.com/docs/apply.html
git-apply --binary	A										Historically we did not allow binary patch applied
without an explicit permission from the user, and this
flag was the way to do so.  Currently we always allow binary
patch application, so this is a no-op.	https://git-scm.com/docs/apply.html
git-apply --exclude=<path-pattern>	A										Don’t apply changes to files matching the given path pattern. This can
be useful when importing patchsets, where you want to exclude certain
files or directories.	https://git-scm.com/docs/apply.html
git-apply --include=<path-pattern>	A										Apply changes to files matching the given path pattern. This can
be useful when importing patchsets, where you want to include certain
files or directories.	https://git-scm.com/docs/apply.html
git-apply --ignore-space-change	A										When applying a patch, ignore changes in whitespace in context
lines if necessary.
Context lines will preserve their whitespace, and they will not
undergo whitespace fixing regardless of the value of the
--whitespace option. New lines will still be fixed, though.	https://git-scm.com/docs/apply.html
git-apply --ignore-whitespace	A										When applying a patch, ignore changes in whitespace in context
lines if necessary.
Context lines will preserve their whitespace, and they will not
undergo whitespace fixing regardless of the value of the
--whitespace option. New lines will still be fixed, though.	https://git-scm.com/docs/apply.html
git-apply --whitespace=<action>	A										When applying a patch, detect a new or modified line that has
whitespace errors.  What are considered whitespace errors is
controlled by core.whitespace configuration.  By default,
trailing whitespaces (including lines that solely consist of
whitespaces) and a space character that is immediately followed
by a tab character inside the initial indent of the line are
considered whitespace errors.	https://git-scm.com/docs/apply.html
git-apply --inaccurate-eof	A										Under certain circumstances, some versions of diff do not correctly
detect a missing new-line at the end of the file. As a result, patches
created by such diff programs do not record incomplete lines
correctly. This option adds support for applying such patches by
working around this bug.	https://git-scm.com/docs/apply.html
git-apply -v	A										Report progress to stderr. By default, only a message about the
current patch being applied will be printed. This option will cause
additional information to be reported.	https://git-scm.com/docs/apply.html
git-apply --verbose	A										Report progress to stderr. By default, only a message about the
current patch being applied will be printed. This option will cause
additional information to be reported.	https://git-scm.com/docs/apply.html
git-apply --recount	A										Do not trust the line counts in the hunk headers, but infer them
by inspecting the patch (e.g. after editing the patch without
adjusting the hunk headers appropriately).	https://git-scm.com/docs/apply.html
git-apply --directory=<root>	A										Prepend <root> to all filenames.  If a "-p" argument was also passed,
it is applied before prepending the new root.	https://git-scm.com/docs/apply.html
git-apply --unsafe-paths	A										By default, a patch that affects outside the working area
(either a Git controlled working tree, or the current working
directory when "git apply" is used as a replacement of GNU
patch) is rejected as a mistake (or a mischief).	https://git-scm.com/docs/apply.html
git-apply	A										Apply a patch to files and/or to the index
<pre><code>git apply [--stat] [--numstat] [--summary] [--check] [--index] [--3way]\n      [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]\n      [--allow-binary-replacement | --binary] [--reject] [-z]\n      [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]\n      [--ignore-space-change | --ignore-whitespace]\n      [--whitespace=(nowarn|warn|fix|error|error-all)]\n      [--exclude=<path>] [--include=<path>] [--directory=<root>]\n      [--verbose] [--unsafe-paths] [<patch>…​]</pre></code>	https://git-scm.com/docs/apply.html
git-archive --format=<fmt>	A										Format of the resulting archive: tar or zip. If this option
is not given, and the output file is specified, the format is
inferred from the filename if possible (e.g. writing to "foo.zip"
makes the output to be in the zip format). Otherwise the output
format is tar.	https://git-scm.com/docs/archive.html
git-archive -l	A										Show all available formats.	https://git-scm.com/docs/archive.html
git-archive --list	A										Show all available formats.	https://git-scm.com/docs/archive.html
git-archive -v	A										Report progress to stderr.	https://git-scm.com/docs/archive.html
git-archive --verbose	A										Report progress to stderr.	https://git-scm.com/docs/archive.html
git-archive --prefix=<prefix>/	A										Prepend <prefix>/ to each filename in the archive.	https://git-scm.com/docs/archive.html
git-archive -o <file>	A										Write the archive to <file> instead of stdout.	https://git-scm.com/docs/archive.html
git-archive --output=<file>	A										Write the archive to <file> instead of stdout.	https://git-scm.com/docs/archive.html
git-archive --worktree-attributes	A										Look for attributes in .gitattributes files in the working tree
as well (see ATTRIBUTES).	https://git-scm.com/docs/archive.html
git-archive <extra>	A										This can be any options that the archiver backend understands.
See next section.	https://git-scm.com/docs/archive.html
git-archive --remote=<repo>	A										Instead of making a tar archive from the local repository,
retrieve a tar archive from a remote repository. Note that the
remote repository may place restrictions on which sha1
expressions may be allowed in <tree-ish>. See
git-upload-archive[1] for details.	https://git-scm.com/docs/archive.html
git-archive --exec=<git-upload-archive>	A										Used with --remote to specify the path to the
git-upload-archive on the remote side.	https://git-scm.com/docs/archive.html
git-archive <tree-ish>	A										The tree or commit to produce an archive for.	https://git-scm.com/docs/archive.html
git-archive <path>	A										Without an optional path parameter, all files and subdirectories
of the current working directory are included in the archive.
If one or more paths are specified, only these are included.	https://git-scm.com/docs/archive.html
git-archive	A										Create an archive of files from a named tree
<pre><code>git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]\n          [-o <file> | --output=<file>] [--worktree-attributes]\n          [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>\n          [<path>…​]</pre></code>	https://git-scm.com/docs/archive.html
git-bisect --no-checkout	A										Do not checkout the new working tree at each iteration of the bisection
process. Instead just update a special reference named BISECT_HEAD to make
it point to the commit that should be tested.	https://git-scm.com/docs/bisect.html
git-bisect	A										Use binary search to find the commit that introduced a bug
<pre><code>git bisect <subcommand> <options></pre></code>	https://git-scm.com/docs/bisect.html
git-blame -b	A										Show blank SHA-1 for boundary commits.  This can also
be controlled via the blame.blankboundary config option.	https://git-scm.com/docs/blame.html
git-blame --root	A										Do not treat root commits as boundaries.  This can also be
controlled via the blame.showRoot config option.	https://git-scm.com/docs/blame.html
git-blame --show-stats	A										Include additional statistics at the end of blame output.	https://git-scm.com/docs/blame.html
git-blame -L <start>,<end>	A										Annotate only the given line range. May be specified multiple times.
Overlapping ranges are allowed.	https://git-scm.com/docs/blame.html
git-blame -L :<funcname>	A										Annotate only the given line range. May be specified multiple times.
Overlapping ranges are allowed.	https://git-scm.com/docs/blame.html
git-blame -l	A										Show long rev (Default: off).	https://git-scm.com/docs/blame.html
git-blame -t	A										Show raw timestamp (Default: off).	https://git-scm.com/docs/blame.html
git-blame -S <revs-file>	A										Use revisions from revs-file instead of calling git-rev-list[1].	https://git-scm.com/docs/blame.html
git-blame --reverse	A										Walk history forward instead of backward. Instead of showing
the revision in which a line appeared, this shows the last
revision in which a line has existed. This requires a range of
revision like START..END where the path to blame exists in
START.	https://git-scm.com/docs/blame.html
git-blame -p	A										Show in a format designed for machine consumption.	https://git-scm.com/docs/blame.html
git-blame --porcelain	A										Show in a format designed for machine consumption.	https://git-scm.com/docs/blame.html
git-blame --line-porcelain	A										Show the porcelain format, but output commit information for
each line, not just the first time a commit is referenced.
Implies --porcelain.	https://git-scm.com/docs/blame.html
git-blame --incremental	A										Show the result incrementally in a format designed for
machine consumption.	https://git-scm.com/docs/blame.html
git-blame --encoding=<encoding>	A										Specifies the encoding used to output author names
and commit summaries. Setting it to none makes blame
output unconverted data. For more information see the
discussion about encoding in the git-log[1]
manual page.	https://git-scm.com/docs/blame.html
git-blame --contents <file>	A										When <rev> is not specified, the command annotates the
changes starting backwards from the working tree copy.
This flag makes the command pretend as if the working
tree copy has the contents of the named file (specify
- to make the command read from the standard input).	https://git-scm.com/docs/blame.html
git-blame --date <format>	A										Specifies the format used to output dates. If --date is not
provided, the value of the blame.date config variable is
used. If the blame.date config variable is also not set, the
iso format is used. For supported values, see the discussion
of the --date option at git-log[1].	https://git-scm.com/docs/blame.html
git-blame --[no-]progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal. This flag
enables progress reporting even if not attached to a
terminal. Can’t use --progress together with --porcelain
or --incremental.	https://git-scm.com/docs/blame.html
git-blame -M|<num>|	A										Detect moved or copied lines within a file. When a commit
moves or copies a block of lines (e.g. the original file
has A and then B, and the commit changes it to B and then
A), the traditional blame algorithm notices only half of
the movement and typically blames the lines that were moved
up (i.e. B) to the parent and assigns blame to the lines that
were moved down (i.e. A) to the child commit.  With this
option, both groups of lines are blamed on the parent by
running extra passes of inspection.	https://git-scm.com/docs/blame.html
git-blame -C|<num>|	A										In addition to -M, detect lines moved or copied from other
files that were modified in the same commit.  This is
useful when you reorganize your program and move code
around across files.  When this option is given twice,
the command additionally looks for copies from other
files in the commit that creates the file. When this
option is given three times, the command additionally
looks for copies from other files in any commit.	https://git-scm.com/docs/blame.html
git-blame -h	A										Show help message.	https://git-scm.com/docs/blame.html
git-blame -c	A										Use the same output mode as git-annotate[1] (Default: off).	https://git-scm.com/docs/blame.html
git-blame --score-debug	A										Include debugging information related to the movement of
lines between files (see -C) and lines moved within a
file (see -M).  The first number listed is the score.
This is the number of alphanumeric characters detected
as having been moved between or within files.  This must be above
a certain threshold for git blame to consider those lines
of code to have been moved.	https://git-scm.com/docs/blame.html
git-blame -f	A										Show the filename in the original commit.  By default
the filename is shown if there is any line that came from a
file with a different name, due to rename detection.	https://git-scm.com/docs/blame.html
git-blame --show-name	A										Show the filename in the original commit.  By default
the filename is shown if there is any line that came from a
file with a different name, due to rename detection.	https://git-scm.com/docs/blame.html
git-blame -n	A										Show the line number in the original commit (Default: off).	https://git-scm.com/docs/blame.html
git-blame --show-number	A										Show the line number in the original commit (Default: off).	https://git-scm.com/docs/blame.html
git-blame -s	A										Suppress the author name and timestamp from the output.	https://git-scm.com/docs/blame.html
git-blame -e	A										Show the author email instead of author name (Default: off).
This can also be controlled via the blame.showEmail config
option.	https://git-scm.com/docs/blame.html
git-blame --show-email	A										Show the author email instead of author name (Default: off).
This can also be controlled via the blame.showEmail config
option.	https://git-scm.com/docs/blame.html
git-blame -w	A										Ignore whitespace when comparing the parent’s version and
the child’s to find where the lines came from.	https://git-scm.com/docs/blame.html
git-blame --abbrev=<n>	A										Instead of using the default 7+1 hexadecimal digits as the
abbreviated object name, use <n>+1 digits. Note that 1 column
is used for a caret to mark the boundary commit.	https://git-scm.com/docs/blame.html
git-blame	A										Show what revision and author last modified each line of a file
<pre><code>git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n        [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n        [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>]\n        [--] <file></pre></code>	https://git-scm.com/docs/blame.html
git-branch -d	A										Delete a branch. The branch must be fully merged in its
upstream branch, or in HEAD if no upstream was set with
--track or --set-upstream.	https://git-scm.com/docs/branch.html
git-branch --delete	A										Delete a branch. The branch must be fully merged in its
upstream branch, or in HEAD if no upstream was set with
--track or --set-upstream.	https://git-scm.com/docs/branch.html
git-branch -D	A										Shortcut for --delete --force.	https://git-scm.com/docs/branch.html
git-branch -l	A										Create the branch’s reflog.  This activates recording of
all changes made to the branch ref, enabling use of date
based sha1 expressions such as "<branchname>@{yesterday}".
Note that in non-bare repositories, reflogs are usually
enabled by default by the core.logallrefupdates config option.	https://git-scm.com/docs/branch.html
git-branch --create-reflog	A										Create the branch’s reflog.  This activates recording of
all changes made to the branch ref, enabling use of date
based sha1 expressions such as "<branchname>@{yesterday}".
Note that in non-bare repositories, reflogs are usually
enabled by default by the core.logallrefupdates config option.	https://git-scm.com/docs/branch.html
git-branch -f	A										Reset <branchname> to <startpoint> if <branchname> exists
already. Without -f git branch refuses to change an existing branch.
In combination with -d (or --delete), allow deleting the
branch irrespective of its merged status. In combination with
-m (or --move), allow renaming the branch even if the new
branch name already exists.	https://git-scm.com/docs/branch.html
git-branch --force	A										Reset <branchname> to <startpoint> if <branchname> exists
already. Without -f git branch refuses to change an existing branch.
In combination with -d (or --delete), allow deleting the
branch irrespective of its merged status. In combination with
-m (or --move), allow renaming the branch even if the new
branch name already exists.	https://git-scm.com/docs/branch.html
git-branch -m	A										Move/rename a branch and the corresponding reflog.	https://git-scm.com/docs/branch.html
git-branch --move	A										Move/rename a branch and the corresponding reflog.	https://git-scm.com/docs/branch.html
git-branch -M	A										Shortcut for --move --force.	https://git-scm.com/docs/branch.html
git-branch --color[=<when>]	A										Color branches to highlight current, local, and
remote-tracking branches.
The value must be always (the default), never, or auto.	https://git-scm.com/docs/branch.html
git-branch --no-color	A										Turn off branch colors, even when the configuration file gives the
default to color output.
Same as --color=never.	https://git-scm.com/docs/branch.html
git-branch --column[=<options>]	A										Display branch listing in columns. See configuration variable
column.branch for option syntax.--column and --no-column
without options are equivalent to always and never respectively.	https://git-scm.com/docs/branch.html
git-branch --no-column	A										Display branch listing in columns. See configuration variable
column.branch for option syntax.--column and --no-column
without options are equivalent to always and never respectively.	https://git-scm.com/docs/branch.html
git-branch -r	A										List or delete (if used with -d) the remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch --remotes	A										List or delete (if used with -d) the remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch -a	A										List both remote-tracking branches and local branches.	https://git-scm.com/docs/branch.html
git-branch --all	A										List both remote-tracking branches and local branches.	https://git-scm.com/docs/branch.html
git-branch --list	A										Activate the list mode. git branch <pattern> would try to create a branch,
use git branch --list <pattern> to list matching branches.	https://git-scm.com/docs/branch.html
git-branch -v	A										When in list mode,
show sha1 and commit subject line for each head, along with
relationship to upstream branch (if any). If given twice, print
the name of the upstream branch, as well (see also git remote
show <remote>).	https://git-scm.com/docs/branch.html
git-branch -vv	A										When in list mode,
show sha1 and commit subject line for each head, along with
relationship to upstream branch (if any). If given twice, print
the name of the upstream branch, as well (see also git remote
show <remote>).	https://git-scm.com/docs/branch.html
git-branch --verbose	A										When in list mode,
show sha1 and commit subject line for each head, along with
relationship to upstream branch (if any). If given twice, print
the name of the upstream branch, as well (see also git remote
show <remote>).	https://git-scm.com/docs/branch.html
git-branch -q	A										Be more quiet when creating or deleting a branch, suppressing
non-error messages.	https://git-scm.com/docs/branch.html
git-branch --quiet	A										Be more quiet when creating or deleting a branch, suppressing
non-error messages.	https://git-scm.com/docs/branch.html
git-branch --abbrev=<length>	A										Alter the sha1’s minimum display length in the output listing.
The default value is 7 and can be overridden by the core.abbrev
config option.	https://git-scm.com/docs/branch.html
git-branch --no-abbrev	A										Display the full sha1s in the output listing rather than abbreviating them.	https://git-scm.com/docs/branch.html
git-branch -t	A										When creating a new branch, set up branch.<name>.remote and
branch.<name>.merge configuration entries to mark the
start-point branch as "upstream" from the new branch. This
configuration will tell git to show the relationship between the
two branches in git status and git branch -v. Furthermore,
it directs git pull without arguments to pull from the
upstream when the new branch is checked out.	https://git-scm.com/docs/branch.html
git-branch --track	A										When creating a new branch, set up branch.<name>.remote and
branch.<name>.merge configuration entries to mark the
start-point branch as "upstream" from the new branch. This
configuration will tell git to show the relationship between the
two branches in git status and git branch -v. Furthermore,
it directs git pull without arguments to pull from the
upstream when the new branch is checked out.	https://git-scm.com/docs/branch.html
git-branch --no-track	A										Do not set up "upstream" configuration, even if the
branch.autoSetupMerge configuration variable is true.	https://git-scm.com/docs/branch.html
git-branch --set-upstream	A										If specified branch does not exist yet or if --force has been
given, acts exactly like --track. Otherwise sets up configuration
like --track would when creating the branch, except that where
branch points to is not changed.	https://git-scm.com/docs/branch.html
git-branch -u <upstream>	A										Set up <branchname>'s tracking information so <upstream> is
considered <branchname>'s upstream branch. If no <branchname>
is specified, then it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --set-upstream-to=<upstream>	A										Set up <branchname>'s tracking information so <upstream> is
considered <branchname>'s upstream branch. If no <branchname>
is specified, then it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --unset-upstream	A										Remove the upstream information for <branchname>. If no branch
is specified it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --edit-description	A										Open an editor and edit the text to explain what the branch is
for, to be used by various other commands (e.g. format-patch,
request-pull, and merge (if enabled)). Multi-line explanations
may be used.	https://git-scm.com/docs/branch.html
git-branch --contains [<commit>]	A										Only list branches which contain the specified commit (HEAD
if not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch --merged [<commit>]	A										Only list branches whose tips are reachable from the
specified commit (HEAD if not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch --no-merged [<commit>]	A										Only list branches whose tips are not reachable from the
specified commit (HEAD if not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch <branchname>	A										The name of the branch to create or delete.
The new branch name must pass all checks defined by
git-check-ref-format[1].  Some of these checks
may restrict the characters allowed in a branch name.	https://git-scm.com/docs/branch.html
git-branch <start-point>	A										The new branch head will point to this commit.  It may be
given as a branch name, a commit-id, or a tag.  If this
option is omitted, the current HEAD will be used instead.	https://git-scm.com/docs/branch.html
git-branch <oldbranch>	A										The name of an existing branch to rename.	https://git-scm.com/docs/branch.html
git-branch <newbranch>	A										The new name for an existing branch. The same restrictions as for
<branchname> apply.	https://git-scm.com/docs/branch.html
git-branch --sort=<key>	A										Sort based on the key given. Prefix - to sort in descending
order of the value. You may use the --sort=<key> option
multiple times, in which case the last key becomes the primary
key. The keys supported are the same as those in git
for-each-ref. Sort order defaults to sorting based on the
full refname (including refs/... prefix). This lists
detached HEAD (if present) first, then local branches and
finally remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch --points-at <object>	A										Only list branches of the given object.	https://git-scm.com/docs/branch.html
git-branch	A										List, create, or delete branches
<pre><code>git branch [--color[=<when>] | --no-color] [-r | -a]\n    [--list] [-v [--abbrev=<length> | --no-abbrev]]\n    [--column[=<options>] | --no-column]\n    [(--merged | --no-merged | --contains) [<commit>]] [--sort=<key>]\n    [--points-at <object>] [<pattern>…​]\ngit branch [--set-upstream | --track | --no-track] [-l] [-f] <branchname> [<start-point>]\ngit branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]\ngit branch --unset-upstream [<branchname>]\ngit branch (-m | -M) [<oldbranch>] <newbranch>\ngit branch (-d | -D) [-r] <branchname>…​\ngit branch --edit-description [<branchname>]</pre></code>	https://git-scm.com/docs/branch.html
git-bundle create <file>	A										Used to create a bundle named file.  This requires the
git-rev-list-args arguments to define the bundle contents.	https://git-scm.com/docs/bundle.html
git-bundle verify <file>	A										Used to check that a bundle file is valid and will apply
cleanly to the current repository.  This includes checks on the
bundle format itself as well as checking that the prerequisite
commits exist and are fully linked in the current repository.
git bundle prints a list of missing commits, if any, and exits
with a non-zero status.	https://git-scm.com/docs/bundle.html
git-bundle list-heads <file>	A										Lists the references defined in the bundle.  If followed by a
list of references, only references matching those given are
printed out.	https://git-scm.com/docs/bundle.html
git-bundle unbundle <file>	A										Passes the objects in the bundle to git index-pack
for storage in the repository, then prints the names of all
defined references. If a list of references is given, only
references matching those in the list are printed. This command is
really plumbing, intended to be called only by git fetch.	https://git-scm.com/docs/bundle.html
git-bundle <git-rev-list-args>	A										A list of arguments, acceptable to git rev-parse and
git rev-list (and containing a named ref, see SPECIFYING REFERENCES
below), that specifies the specific objects and references
to transport.  For example, master~10..master causes the
current master reference to be packaged along with all objects
added since its 10th ancestor commit.  There is no explicit
limit to the number of references and objects that may be
packaged.	https://git-scm.com/docs/bundle.html
git-bundle [<refname>…​]	A										A list of references used to limit the references reported as
available. This is principally of use to git fetch, which
expects to receive only those references asked for and not
necessarily everything in the pack (in this case, git bundle acts
like git fetch-pack).	https://git-scm.com/docs/bundle.html
git-bundle	A										Move objects and refs by archive
<pre><code>git bundle create <file> <git-rev-list-args>\ngit bundle verify <file>\ngit bundle list-heads <file> [<refname>…​]\ngit bundle unbundle <file> [<refname>…​]</pre></code>	https://git-scm.com/docs/bundle.html
git-cat-file <object>	A										The name of the object to show.
For a more complete list of ways to spell object names, see
the "SPECIFYING REVISIONS" section in gitrevisions[7].	https://git-scm.com/docs/cat-file.html
git-cat-file -t	A										Instead of the content, show the object type identified by
<object>.	https://git-scm.com/docs/cat-file.html
git-cat-file -s	A										Instead of the content, show the object size identified by
<object>.	https://git-scm.com/docs/cat-file.html
git-cat-file -e	A										Suppress all output; instead exit with zero status if <object>
exists and is a valid object.	https://git-scm.com/docs/cat-file.html
git-cat-file -p	A										Pretty-print the contents of <object> based on its type.	https://git-scm.com/docs/cat-file.html
git-cat-file <type>	A										Typically this matches the real type of <object> but asking
for a type that can trivially be dereferenced from the given
<object> is also permitted.  An example is to ask for a
"tree" with <object> being a commit object that contains it,
or to ask for a "blob" with <object> being a tag object that
points at it.	https://git-scm.com/docs/cat-file.html
git-cat-file --textconv	A										Show the content as transformed by a textconv filter. In this case,
<object> has be of the form <tree-ish>:<path>, or :<path> in order
to apply the filter to the content recorded in the index at <path>.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch	A										Print object information and contents for each object provided
on stdin.  May not be combined with any other options or arguments.
See the section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch=<format>	A										Print object information and contents for each object provided
on stdin.  May not be combined with any other options or arguments.
See the section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-check	A										Print object information for each object provided on stdin.  May
not be combined with any other options or arguments.  See the
section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-check=<format>	A										Print object information for each object provided on stdin.  May
not be combined with any other options or arguments.  See the
section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-all-objects	A										Instead of reading a list of objects on stdin, perform the
requested batch operation on all objects in the repository and
any alternate object stores (not just reachable objects).
Requires --batch or --batch-check be specified. Note that
the objects are visited in order sorted by their hashes.	https://git-scm.com/docs/cat-file.html
git-cat-file --buffer	A										Normally batch output is flushed after each object is output, so
that a process can interactively read and write from
cat-file. With this option, the output uses normal stdio
buffering; this is much more efficient when invoking
--batch-check on a large number of objects.	https://git-scm.com/docs/cat-file.html
git-cat-file --allow-unknown-type	A										Allow -s or -t to query broken/corrupt objects of unknown type.	https://git-scm.com/docs/cat-file.html
git-cat-file --follow-symlinks	A										With --batch or --batch-check, follow symlinks inside the
repository when requesting objects with extended SHA-1
expressions of the form tree-ish:path-in-tree.  Instead of
providing output about the link itself, provide output about
the linked-to object.  If a symlink points outside the
tree-ish (e.g. a link to /foo or a root-level link to ../foo),
the portion of the link which is outside the tree will be
printed.	https://git-scm.com/docs/cat-file.html
git-cat-file	A										Provide content or type and size information for repository objects
<pre><code>git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv ) <object>\ngit cat-file (--batch | --batch-check) [--follow-symlinks]</pre></code>	https://git-scm.com/docs/cat-file.html
git-checkout -q	A										Quiet, suppress feedback messages.	https://git-scm.com/docs/checkout.html
git-checkout --quiet	A										Quiet, suppress feedback messages.	https://git-scm.com/docs/checkout.html
git-checkout --[no-]progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal, unless --quiet
is specified. This flag enables progress reporting even if not
attached to a terminal, regardless of --quiet.	https://git-scm.com/docs/checkout.html
git-checkout -f	A										When switching branches, proceed even if the index or the
working tree differs from HEAD.  This is used to throw away
local changes.	https://git-scm.com/docs/checkout.html
git-checkout --force	A										When switching branches, proceed even if the index or the
working tree differs from HEAD.  This is used to throw away
local changes.	https://git-scm.com/docs/checkout.html
git-checkout --ours	A										When checking out paths from the index, check out stage #2
(ours) or #3 (theirs) for unmerged paths.	https://git-scm.com/docs/checkout.html
git-checkout --theirs	A										When checking out paths from the index, check out stage #2
(ours) or #3 (theirs) for unmerged paths.	https://git-scm.com/docs/checkout.html
git-checkout -b <new_branch>	A										Create a new branch named <new_branch> and start it at
<start_point>; see git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout -B <new_branch>	A										Creates the branch <new_branch> and start it at <start_point>;
if it already exists, then reset it to <start_point>. This is
equivalent to running "git branch" with "-f"; see
git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout -t	A										When creating a new branch, set up "upstream" configuration. See
"--track" in git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout --track	A										When creating a new branch, set up "upstream" configuration. See
"--track" in git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout --no-track	A										Do not set up "upstream" configuration, even if the
branch.autoSetupMerge configuration variable is true.	https://git-scm.com/docs/checkout.html
git-checkout -l	A										Create the new branch’s reflog; see git-branch[1] for
details.	https://git-scm.com/docs/checkout.html
git-checkout --detach	A										Rather than checking out a branch to work on it, check out a
commit for inspection and discardable experiments.
This is the default behavior of "git checkout <commit>" when
<commit> is not a branch name.  See the "DETACHED HEAD" section
below for details.	https://git-scm.com/docs/checkout.html
git-checkout --orphan <new_branch>	A										Create a new orphan branch, named <new_branch>, started from
<start_point> and switch to it.  The first commit made on this
new branch will have no parents and it will be the root of a new
history totally disconnected from all the other branches and
commits.	https://git-scm.com/docs/checkout.html
git-checkout --ignore-skip-worktree-bits	A										In sparse checkout mode, git checkout -- <paths> would
update only entries matched by <paths> and sparse patterns
in $GIT_DIR/info/sparse-checkout. This option ignores
the sparse patterns and adds back any files in <paths>.	https://git-scm.com/docs/checkout.html
git-checkout -m	A										When switching branches,
if you have local modifications to one or more files that
are different between the current branch and the branch to
which you are switching, the command refuses to switch
branches in order to preserve your modifications in context.
However, with this option, a three-way merge between the current
branch, your working tree contents, and the new branch
is done, and you will be on the new branch.	https://git-scm.com/docs/checkout.html
git-checkout --merge	A										When switching branches,
if you have local modifications to one or more files that
are different between the current branch and the branch to
which you are switching, the command refuses to switch
branches in order to preserve your modifications in context.
However, with this option, a three-way merge between the current
branch, your working tree contents, and the new branch
is done, and you will be on the new branch.	https://git-scm.com/docs/checkout.html
git-checkout --conflict=<style>	A										The same as --merge option above, but changes the way the
conflicting hunks are presented, overriding the
merge.conflictStyle configuration variable.  Possible values are
"merge" (default) and "diff3" (in addition to what is shown by
"merge" style, shows the original contents).	https://git-scm.com/docs/checkout.html
git-checkout -p	A										Interactively select hunks in the difference between the
<tree-ish> (or the index, if unspecified) and the working
tree.  The chosen hunks are then applied in reverse to the
working tree (and if a <tree-ish> was specified, the index).	https://git-scm.com/docs/checkout.html
git-checkout --patch	A										Interactively select hunks in the difference between the
<tree-ish> (or the index, if unspecified) and the working
tree.  The chosen hunks are then applied in reverse to the
working tree (and if a <tree-ish> was specified, the index).	https://git-scm.com/docs/checkout.html
git-checkout --ignore-other-worktrees	A										git checkout refuses when the wanted ref is already checked
out by another worktree. This option makes it check the ref
out anyway. In other words, the ref can be held by more than one
worktree.	https://git-scm.com/docs/checkout.html
git-checkout <branch>	A										Branch to checkout; if it refers to a branch (i.e., a name that,
when prepended with "refs/heads/", is a valid ref), then that
branch is checked out. Otherwise, if it refers to a valid
commit, your HEAD becomes "detached" and you are no longer on
any branch (see below for details).	https://git-scm.com/docs/checkout.html
git-checkout <new_branch>	A										Name for the new branch.	https://git-scm.com/docs/checkout.html
git-checkout <start_point>	A										The name of a commit at which to start the new branch; see
git-branch[1] for details. Defaults to HEAD.	https://git-scm.com/docs/checkout.html
git-checkout <tree-ish>	A										Tree to checkout from (when paths are given). If not specified,
the index will be used.	https://git-scm.com/docs/checkout.html
git-checkout	A										Switch branches or restore working tree files
<pre><code>git checkout [-q] [-f] [-m] [<branch>]\ngit checkout [-q] [-f] [-m] --detach [<branch>]\ngit checkout [-q] [-f] [-m] [--detach] <commit>\ngit checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]\ngit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>…​\ngit checkout [-p|--patch] [<tree-ish>] [--] [<paths>…​]</pre></code>	https://git-scm.com/docs/checkout.html
git-cherry-pick <commit>…​	A										Commits to cherry-pick.
For a more complete list of ways to spell commits, see
gitrevisions[7].
Sets of commits can be passed but no traversal is done by
default, as if the --no-walk option was specified, see
git-rev-list[1]. Note that specifying a range will
feed all <commit>…​ arguments to a single revision walk
(see a later example that uses maint master..next).	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -e	A										With this option, git cherry-pick will let you edit the commit
message prior to committing.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --edit	A										With this option, git cherry-pick will let you edit the commit
message prior to committing.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -x	A										When recording the commit, append a line that says
"(cherry picked from commit …​)" to the original commit
message in order to indicate which commit this change was
cherry-picked from.  This is done only for cherry
picks without conflicts.  Do not use this option if
you are cherry-picking from your private branch because
the information is useless to the recipient.  If on the
other hand you are cherry-picking between two publicly
visible branches (e.g. backporting a fix to a
maintenance branch for an older release from a
development branch), adding this information can be
useful.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -r	A										It used to be that the command defaulted to do -x
described above, and -r was to disable it.  Now the
default is not to do -x so this option is a no-op.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -m parent-number	A										Usually you cannot cherry-pick a merge because you do not know which
side of the merge should be considered the mainline.  This
option specifies the parent number (starting from 1) of
the mainline and allows cherry-pick to replay the change
relative to the specified parent.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --mainline parent-number	A										Usually you cannot cherry-pick a merge because you do not know which
side of the merge should be considered the mainline.  This
option specifies the parent number (starting from 1) of
the mainline and allows cherry-pick to replay the change
relative to the specified parent.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -n	A										Usually the command automatically creates a sequence of commits.
This flag applies the changes necessary to cherry-pick
each named commit to your working tree and the index,
without making any commit.  In addition, when this
option is used, your index does not have to match the
HEAD commit.  The cherry-pick is done against the
beginning state of your index.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --no-commit	A										Usually the command automatically creates a sequence of commits.
This flag applies the changes necessary to cherry-pick
each named commit to your working tree and the index,
without making any commit.  In addition, when this
option is used, your index does not have to match the
HEAD commit.  The cherry-pick is done against the
beginning state of your index.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -s	A										Add Signed-off-by line at the end of the commit message.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --signoff	A										Add Signed-off-by line at the end of the commit message.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --ff	A										If the current HEAD is the same as the parent of the
cherry-pick’ed commit, then a fast forward to this commit will
be performed.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --allow-empty	A										By default, cherry-picking an empty commit will fail,
indicating that an explicit invocation of git commit
--allow-empty is required. This option overrides that
behavior, allowing empty commits to be preserved automatically
in a cherry-pick. Note that when "--ff" is in effect, empty
commits that meet the "fast-forward" requirement will be kept
even without this option.  Note also, that use of this option only
keeps commits that were initially empty (i.e. the commit recorded the
same tree as its parent).  Commits which are made empty due to a
previous commit are dropped.  To force the inclusion of those commits
use --keep-redundant-commits.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --allow-empty-message	A										By default, cherry-picking a commit with an empty message will fail.
This option overrides that behavior, allowing commits with empty
messages to be cherry picked.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --keep-redundant-commits	A										If a commit being cherry picked duplicates a commit already in the
current history, it will become empty.  By default these
redundant commits cause cherry-pick to stop so the user can
examine the commit. This option overrides that behavior and
creates an empty commit object.  Implies --allow-empty.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --strategy=<strategy>	A										Use the given merge strategy.  Should only be used once.
See the MERGE STRATEGIES section in git-merge[1]
for details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -X<option>	A										Pass the merge strategy-specific option through to the
merge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --strategy-option=<option>	A										Pass the merge strategy-specific option through to the
merge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick	A										Apply the changes introduced by some existing commits
<pre><code>git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]\n          [-S[<keyid>]] <commit>…​\ngit cherry-pick --continue\ngit cherry-pick --quit\ngit cherry-pick --abort</pre></code>	https://git-scm.com/docs/cherry-pick.html
git-clean -d	A										Remove untracked directories in addition to untracked files.
If an untracked directory is managed by a different Git
repository, it is not removed by default.  Use -f option twice
if you really want to remove such a directory.	https://git-scm.com/docs/clean.html
git-clean -f	A										If the Git configuration variable clean.requireForce is not set
to false, git clean will refuse to delete files or directories
unless given -f, -n or -i. Git will refuse to delete directories
with .git sub directory or file unless a second -f
is given.	https://git-scm.com/docs/clean.html
git-clean --force	A										If the Git configuration variable clean.requireForce is not set
to false, git clean will refuse to delete files or directories
unless given -f, -n or -i. Git will refuse to delete directories
with .git sub directory or file unless a second -f
is given.	https://git-scm.com/docs/clean.html
git-clean -i	A										Show what would be done and clean files interactively. See
“Interactive mode” for details.	https://git-scm.com/docs/clean.html
git-clean --interactive	A										Show what would be done and clean files interactively. See
“Interactive mode” for details.	https://git-scm.com/docs/clean.html
git-clean -n	A										Don’t actually remove anything, just show what would be done.	https://git-scm.com/docs/clean.html
git-clean --dry-run	A										Don’t actually remove anything, just show what would be done.	https://git-scm.com/docs/clean.html
git-clean -q	A										Be quiet, only report errors, but not the files that are
successfully removed.	https://git-scm.com/docs/clean.html
git-clean --quiet	A										Be quiet, only report errors, but not the files that are
successfully removed.	https://git-scm.com/docs/clean.html
git-clean -e <pattern>	A										In addition to those found in .gitignore (per directory) and
$GIT_DIR/info/exclude, also consider these patterns to be in the
set of the ignore rules in effect.	https://git-scm.com/docs/clean.html
git-clean --exclude=<pattern>	A										In addition to those found in .gitignore (per directory) and
$GIT_DIR/info/exclude, also consider these patterns to be in the
set of the ignore rules in effect.	https://git-scm.com/docs/clean.html
git-clean -x	A										Don’t use the standard ignore rules read from .gitignore (per
directory) and $GIT_DIR/info/exclude, but do still use the ignore
rules given with -e options.  This allows removing all untracked
files, including build products.  This can be used (possibly in
conjunction with git reset) to create a pristine
working directory to test a clean build.	https://git-scm.com/docs/clean.html
git-clean -X	A										Remove only files ignored by Git.  This may be useful to rebuild
everything from scratch, but keep manually created files.	https://git-scm.com/docs/clean.html
git-clean	A										Remove untracked files from the working tree
<pre><code>git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <path>…​</pre></code>	https://git-scm.com/docs/clean.html
git-clone --local	A										When the repository to clone from is on a local machine,
this flag bypasses the normal "Git aware" transport
mechanism and clones the repository by making a copy of
HEAD and everything under objects and refs directories.
The files under .git/objects/ directory are hardlinked
to save space when possible.	https://git-scm.com/docs/clone.html
git-clone -l	A										When the repository to clone from is on a local machine,
this flag bypasses the normal "Git aware" transport
mechanism and clones the repository by making a copy of
HEAD and everything under objects and refs directories.
The files under .git/objects/ directory are hardlinked
to save space when possible.	https://git-scm.com/docs/clone.html
git-clone --no-hardlinks	A										Force the cloning process from a repository on a local
filesystem to copy the files under the .git/objects
directory instead of using hardlinks. This may be desirable
if you are trying to make a back-up of your repository.	https://git-scm.com/docs/clone.html
git-clone --shared	A										When the repository to clone is on the local machine,
instead of using hard links, automatically setup
.git/objects/info/alternates to share the objects
with the source repository.  The resulting repository
starts out without any object of its own.	https://git-scm.com/docs/clone.html
git-clone -s	A										When the repository to clone is on the local machine,
instead of using hard links, automatically setup
.git/objects/info/alternates to share the objects
with the source repository.  The resulting repository
starts out without any object of its own.	https://git-scm.com/docs/clone.html
git-clone --reference <repository>	A										If the reference repository is on the local machine,
automatically setup .git/objects/info/alternates to
obtain objects from the reference repository.  Using
an already existing repository as an alternate will
require fewer objects to be copied from the repository
being cloned, reducing network and local storage costs.	https://git-scm.com/docs/clone.html
git-clone --dissociate	A										Borrow the objects from reference repositories specified
with the --reference options only to reduce network
transfer, and stop borrowing from them after a clone is made
by making necessary local copies of borrowed objects.  This
option can also be used when cloning locally from a
repository that already borrows objects from another
repository—​the new repository will borrow objects from the
same repository, and this option can be used to stop the
borrowing.	https://git-scm.com/docs/clone.html
git-clone --quiet	A										Operate quietly.  Progress is not reported to the standard
error stream.	https://git-scm.com/docs/clone.html
git-clone -q	A										Operate quietly.  Progress is not reported to the standard
error stream.	https://git-scm.com/docs/clone.html
git-clone --verbose	A										Run verbosely. Does not affect the reporting of progress status
to the standard error stream.	https://git-scm.com/docs/clone.html
git-clone -v	A										Run verbosely. Does not affect the reporting of progress status
to the standard error stream.	https://git-scm.com/docs/clone.html
git-clone --progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal, unless -q
is specified. This flag forces progress status even if the
standard error stream is not directed to a terminal.	https://git-scm.com/docs/clone.html
git-clone --no-checkout	A										No checkout of HEAD is performed after the clone is complete.	https://git-scm.com/docs/clone.html
git-clone -n	A										No checkout of HEAD is performed after the clone is complete.	https://git-scm.com/docs/clone.html
git-clone --bare	A										Make a bare Git repository.  That is, instead of
creating <directory> and placing the administrative
files in <directory>/.git, make the <directory>
itself the $GIT_DIR. This obviously implies the -n
because there is nowhere to check out the working tree.
Also the branch heads at the remote are copied directly
to corresponding local branch heads, without mapping
them to refs/remotes/origin/.  When this option is
used, neither remote-tracking branches nor the related
configuration variables are created.	https://git-scm.com/docs/clone.html
git-clone --mirror	A										Set up a mirror of the source repository.  This implies --bare.
Compared to --bare, --mirror not only maps local branches of the
source to local branches of the target, it maps all refs (including
remote-tracking branches, notes etc.) and sets up a refspec configuration such
that all these refs are overwritten by a git remote update in the
target repository.	https://git-scm.com/docs/clone.html
git-clone --origin <name>	A										Instead of using the remote name origin to keep track
of the upstream repository, use <name>.	https://git-scm.com/docs/clone.html
git-clone -o <name>	A										Instead of using the remote name origin to keep track
of the upstream repository, use <name>.	https://git-scm.com/docs/clone.html
git-clone --branch <name>	A										Instead of pointing the newly created HEAD to the branch pointed
to by the cloned repository’s HEAD, point to <name> branch
instead. In a non-bare repository, this is the branch that will
be checked out.
--branch can also take tags and detaches the HEAD at that commit
in the resulting repository.	https://git-scm.com/docs/clone.html
git-clone -b <name>	A										Instead of pointing the newly created HEAD to the branch pointed
to by the cloned repository’s HEAD, point to <name> branch
instead. In a non-bare repository, this is the branch that will
be checked out.
--branch can also take tags and detaches the HEAD at that commit
in the resulting repository.	https://git-scm.com/docs/clone.html
git-clone --upload-pack <upload-pack>	A										When given, and the repository to clone from is accessed
via ssh, this specifies a non-default path for the command
run on the other end.	https://git-scm.com/docs/clone.html
git-clone -u <upload-pack>	A										When given, and the repository to clone from is accessed
via ssh, this specifies a non-default path for the command
run on the other end.	https://git-scm.com/docs/clone.html
git-clone --template=<template_directory>	A										Specify the directory from which templates will be used;
(See the "TEMPLATE DIRECTORY" section of git-init[1].)	https://git-scm.com/docs/clone.html
git-clone --config <key>=<value>	A										Set a configuration variable in the newly-created repository;
this takes effect immediately after the repository is
initialized, but before the remote history is fetched or any
files checked out.  The key is in the same format as expected by
git-config[1] (e.g., core.eol=true). If multiple
values are given for the same key, each value will be written to
the config file. This makes it safe, for example, to add
additional fetch refspecs to the origin remote.	https://git-scm.com/docs/clone.html
git-clone -c <key>=<value>	A										Set a configuration variable in the newly-created repository;
this takes effect immediately after the repository is
initialized, but before the remote history is fetched or any
files checked out.  The key is in the same format as expected by
git-config[1] (e.g., core.eol=true). If multiple
values are given for the same key, each value will be written to
the config file. This makes it safe, for example, to add
additional fetch refspecs to the origin remote.	https://git-scm.com/docs/clone.html
git-clone --depth <depth>	A										Create a shallow clone with a history truncated to the
specified number of commits. Implies --single-branch unless
--no-single-branch is given to fetch the histories near the
tips of all branches. If you want to clone submodules shallowly,
also pass --shallow-submodules.	https://git-scm.com/docs/clone.html
git-clone --[no-]single-branch	A										Clone only the history leading to the tip of a single branch,
either specified by the --branch option or the primary
branch remote’s HEAD points at.
Further fetches into the resulting repository will only update the
remote-tracking branch for the branch this option was used for the
initial cloning.  If the HEAD at the remote did not point at any
branch when --single-branch clone was made, no remote-tracking
branch is created.	https://git-scm.com/docs/clone.html
git-clone --recursive	A										After the clone is created, initialize all submodules within,
using their default settings. This is equivalent to running
git submodule update --init --recursive immediately after
the clone is finished. This option is ignored if the cloned
repository does not have a worktree/checkout (i.e. if any of
--no-checkout/-n, --bare, or --mirror is given)	https://git-scm.com/docs/clone.html
git-clone --recurse-submodules	A										After the clone is created, initialize all submodules within,
using their default settings. This is equivalent to running
git submodule update --init --recursive immediately after
the clone is finished. This option is ignored if the cloned
repository does not have a worktree/checkout (i.e. if any of
--no-checkout/-n, --bare, or --mirror is given)	https://git-scm.com/docs/clone.html
git-clone --[no-]shallow-submodules	A										All submodules which are cloned will be shallow with a depth of 1.	https://git-scm.com/docs/clone.html
git-clone --separate-git-dir=<git dir>	A										Instead of placing the cloned repository where it is supposed
to be, place the cloned repository at the specified directory,
then make a filesystem-agnostic Git symbolic link to there.
The result is Git repository can be separated from working
tree.	https://git-scm.com/docs/clone.html
git-clone -j <n>	A										The number of submodules fetched at the same time.
Defaults to the submodule.fetchJobs option.	https://git-scm.com/docs/clone.html
git-clone --jobs <n>	A										The number of submodules fetched at the same time.
Defaults to the submodule.fetchJobs option.	https://git-scm.com/docs/clone.html
git-clone <repository>	A										The (possibly remote) repository to clone from.  See the
URLS section below for more information on specifying
repositories.	https://git-scm.com/docs/clone.html
git-clone <directory>	A										The name of a new directory to clone into.  The "humanish"
part of the source repository is used if no directory is
explicitly given (repo for /path/to/repo.git and foo
for host.xz:foo/.git).  Cloning into an existing directory
is only allowed if the directory is empty.	https://git-scm.com/docs/clone.html
git-clone	A										Clone a repository into a new directory
<pre><code>git clone [--template=<template_directory>]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n      [--dissociate] [--separate-git-dir <git dir>]\n      [--depth <depth>] [--[no-]single-branch]\n      [--recursive | --recurse-submodules] [--[no-]shallow-submodules]\n      [--jobs <n>] [--] <repository> [<directory>]</pre></code>	https://git-scm.com/docs/clone.html
git-commit-tree <tree>	A										An existing tree object	https://git-scm.com/docs/commit-tree.html
git-commit-tree -p <parent>	A										Each -p indicates the id of a parent commit object.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -m <message>	A										A paragraph in the commit log message. This can be given more than
once and each <message> becomes its own paragraph.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -F <file>	A										Read the commit log message from the given file. Use - to read
from the standard input.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/commit-tree.html
git-commit-tree --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/commit-tree.html
git-commit-tree --no-gpg-sign	A										Do not GPG-sign commit, to countermand a --gpg-sign option
given earlier on the command line.	https://git-scm.com/docs/commit-tree.html
git-commit-tree	A										Create a new commit object
<pre><code>git commit-tree <tree> [(-p <parent>)…​]\ngit commit-tree [(-p <parent>)…​] [-S[<keyid>]] [(-m <message>)…​]\n          [(-F <file>)…​] <tree></pre></code>	https://git-scm.com/docs/commit-tree.html
git-commit -a	A										Tell the command to automatically stage files that have
been modified and deleted, but new files you have not
told Git about are not affected.	https://git-scm.com/docs/commit.html
git-commit --all	A										Tell the command to automatically stage files that have
been modified and deleted, but new files you have not
told Git about are not affected.	https://git-scm.com/docs/commit.html
git-commit -p	A										Use the interactive patch selection interface to chose
which changes to commit. See git-add[1] for
details.	https://git-scm.com/docs/commit.html
git-commit --patch	A										Use the interactive patch selection interface to chose
which changes to commit. See git-add[1] for
details.	https://git-scm.com/docs/commit.html
git-commit -C <commit>	A										Take an existing commit object, and reuse the log message
and the authorship information (including the timestamp)
when creating the commit.	https://git-scm.com/docs/commit.html
git-commit --reuse-message=<commit>	A										Take an existing commit object, and reuse the log message
and the authorship information (including the timestamp)
when creating the commit.	https://git-scm.com/docs/commit.html
git-commit -c <commit>	A										Like -C, but with -c the editor is invoked, so that
the user can further edit the commit message.	https://git-scm.com/docs/commit.html
git-commit --reedit-message=<commit>	A										Like -C, but with -c the editor is invoked, so that
the user can further edit the commit message.	https://git-scm.com/docs/commit.html
git-commit --fixup=<commit>	A										Construct a commit message for use with rebase --autosquash.
The commit message will be the subject line from the specified
commit with a prefix of "fixup! ".  See git-rebase[1]
for details.	https://git-scm.com/docs/commit.html
git-commit --squash=<commit>	A										Construct a commit message for use with rebase --autosquash.
The commit message subject line is taken from the specified
commit with a prefix of "squash! ".  Can be used with additional
commit message options (-m/-c/-C/-F). See
git-rebase[1] for details.	https://git-scm.com/docs/commit.html
git-commit --reset-author	A										When used with -C/-c/--amend options, or when committing after a
a conflicting cherry-pick, declare that the authorship of the
resulting commit now belongs to the committer. This also renews
the author timestamp.	https://git-scm.com/docs/commit.html
git-commit --short	A										When doing a dry-run, give the output in the short-format. See
git-status[1] for details. Implies --dry-run.	https://git-scm.com/docs/commit.html
git-commit --branch	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/commit.html
git-commit --porcelain	A										When doing a dry-run, give the output in a porcelain-ready
format. See git-status[1] for details. Implies
--dry-run.	https://git-scm.com/docs/commit.html
git-commit --long	A										When doing a dry-run, give the output in a the long-format.
Implies --dry-run.	https://git-scm.com/docs/commit.html
git-commit -z	A										When showing short or porcelain status output, terminate
entries in the status output with NUL, instead of LF. If no
format is given, implies the --porcelain output format.	https://git-scm.com/docs/commit.html
git-commit --null	A										When showing short or porcelain status output, terminate
entries in the status output with NUL, instead of LF. If no
format is given, implies the --porcelain output format.	https://git-scm.com/docs/commit.html
git-commit -F <file>	A										Take the commit message from the given file.  Use - to
read the message from the standard input.	https://git-scm.com/docs/commit.html
git-commit --file=<file>	A										Take the commit message from the given file.  Use - to
read the message from the standard input.	https://git-scm.com/docs/commit.html
git-commit --author=<author>	A										Override the commit author. Specify an explicit author using the
standard A U Thor <author@example.com> format. Otherwise <author>
is assumed to be a pattern and is used to search for an existing
commit by that author (i.e. rev-list --all -i --author=<author>);
the commit author is then copied from the first such commit found.	https://git-scm.com/docs/commit.html
git-commit --date=<date>	A										Override the author date used in the commit.	https://git-scm.com/docs/commit.html
git-commit -m <msg>	A										Use the given <msg> as the commit message.
If multiple -m options are given, their values are
concatenated as separate paragraphs.	https://git-scm.com/docs/commit.html
git-commit --message=<msg>	A										Use the given <msg> as the commit message.
If multiple -m options are given, their values are
concatenated as separate paragraphs.	https://git-scm.com/docs/commit.html
git-commit -t <file>	A										When editing the commit message, start the editor with the
contents in the given file.  The commit.template configuration
variable is often used to give this option implicitly to the
command.  This mechanism can be used by projects that want to
guide participants with some hints on what to write in the message
in what order.  If the user exits the editor without editing the
message, the commit is aborted.  This has no effect when a message
is given by other means, e.g. with the -m or -F options.	https://git-scm.com/docs/commit.html
git-commit --template=<file>	A										When editing the commit message, start the editor with the
contents in the given file.  The commit.template configuration
variable is often used to give this option implicitly to the
command.  This mechanism can be used by projects that want to
guide participants with some hints on what to write in the message
in what order.  If the user exits the editor without editing the
message, the commit is aborted.  This has no effect when a message
is given by other means, e.g. with the -m or -F options.	https://git-scm.com/docs/commit.html
git-commit -s	A										Add Signed-off-by line by the committer at the end of the commit
log message.  The meaning of a signoff depends on the project,
but it typically certifies that committer has
the rights to submit this work under the same license and
agrees to a Developer Certificate of Origin
(see http://developercertificate.org/ for more information).	https://git-scm.com/docs/commit.html
git-commit --signoff	A										Add Signed-off-by line by the committer at the end of the commit
log message.  The meaning of a signoff depends on the project,
but it typically certifies that committer has
the rights to submit this work under the same license and
agrees to a Developer Certificate of Origin
(see http://developercertificate.org/ for more information).	https://git-scm.com/docs/commit.html
git-commit -n	A										This option bypasses the pre-commit and commit-msg hooks.
See also githooks[5].	https://git-scm.com/docs/commit.html
git-commit --no-verify	A										This option bypasses the pre-commit and commit-msg hooks.
See also githooks[5].	https://git-scm.com/docs/commit.html
git-commit --allow-empty	A										Usually recording a commit that has the exact same tree as its
sole parent commit is a mistake, and the command prevents you
from making such a commit.  This option bypasses the safety, and
is primarily for use by foreign SCM interface scripts.	https://git-scm.com/docs/commit.html
git-commit --allow-empty-message	A										Like --allow-empty this command is primarily for use by foreign
SCM interface scripts. It allows you to create a commit with an
empty commit message without using plumbing commands like
git-commit-tree[1].	https://git-scm.com/docs/commit.html
git-commit --cleanup=<mode>	A										This option determines how the supplied commit message should be
cleaned up before committing.  The <mode> can be strip,
whitespace, verbatim, scissors or default.	https://git-scm.com/docs/commit.html
git-commit strip	A										Strip leading and trailing empty lines, trailing whitespace,
commentary and collapse consecutive empty lines.	https://git-scm.com/docs/commit.html
git-commit whitespace	A										Same as strip except #commentary is not removed.	https://git-scm.com/docs/commit.html
git-commit verbatim	A										Do not change the message at all.	https://git-scm.com/docs/commit.html
git-commit scissors	A										Same as whitespace, except that everything from (and
including) the line
"# ------------------------ >8 ------------------------"
is truncated if the message is to be edited. "#" can be
customized with core.commentChar.	https://git-scm.com/docs/commit.html
git-commit default	A										Same as strip if the message is to be edited.
Otherwise whitespace.	https://git-scm.com/docs/commit.html
git-commit -e	A										The message taken from file with -F, command line with
-m, and from commit object with -C are usually used as
the commit log message unmodified. This option lets you
further edit the message taken from these sources.	https://git-scm.com/docs/commit.html
git-commit --edit	A										The message taken from file with -F, command line with
-m, and from commit object with -C are usually used as
the commit log message unmodified. This option lets you
further edit the message taken from these sources.	https://git-scm.com/docs/commit.html
git-commit --no-edit	A										Use the selected commit message without launching an editor.
For example, git commit --amend --no-edit amends a commit
without changing its commit message.	https://git-scm.com/docs/commit.html
git-commit --amend	A										Replace the tip of the current branch by creating a new
commit. The recorded tree is prepared as usual (including
the effect of the -i and -o options and explicit
pathspec), and the message from the original commit is used
as the starting point, instead of an empty message, when no
other message is specified from the command line via options
such as -m, -F, -c, etc.  The new commit has the same
parents and author as the current one (the --reset-author
option can countermand this).	https://git-scm.com/docs/commit.html
git-commit --no-post-rewrite	A										Bypass the post-rewrite hook.	https://git-scm.com/docs/commit.html
git-commit -i	A										Before making a commit out of staged contents so far,
stage the contents of paths given on the command line
as well.  This is usually not what you want unless you
are concluding a conflicted merge.	https://git-scm.com/docs/commit.html
git-commit --include	A										Before making a commit out of staged contents so far,
stage the contents of paths given on the command line
as well.  This is usually not what you want unless you
are concluding a conflicted merge.	https://git-scm.com/docs/commit.html
git-commit -o	A										Make a commit by taking the updated working tree contents
of the paths specified on the
command line, disregarding any contents that have been
staged for other paths. This is the default mode of operation of
git commit if any paths are given on the command line,
in which case this option can be omitted.
If this option is specified together with --amend, then
no paths need to be specified, which can be used to amend
the last commit without committing changes that have
already been staged.	https://git-scm.com/docs/commit.html
git-commit --only	A										Make a commit by taking the updated working tree contents
of the paths specified on the
command line, disregarding any contents that have been
staged for other paths. This is the default mode of operation of
git commit if any paths are given on the command line,
in which case this option can be omitted.
If this option is specified together with --amend, then
no paths need to be specified, which can be used to amend
the last commit without committing changes that have
already been staged.	https://git-scm.com/docs/commit.html
git-commit -u[<mode>]	A										Show untracked files.	https://git-scm.com/docs/commit.html
git-commit --untracked-files[=<mode>]	A										Show untracked files.	https://git-scm.com/docs/commit.html
git-commit -v	A										Show unified diff between the HEAD commit and what
would be committed at the bottom of the commit message
template to help the user describe the commit by reminding
what changes the commit has.
Note that this diff output doesn’t have its
lines prefixed with #. This diff will not be a part
of the commit message. See the commit.verbose configuration
variable in git-config[1].	https://git-scm.com/docs/commit.html
git-commit --verbose	A										Show unified diff between the HEAD commit and what
would be committed at the bottom of the commit message
template to help the user describe the commit by reminding
what changes the commit has.
Note that this diff output doesn’t have its
lines prefixed with #. This diff will not be a part
of the commit message. See the commit.verbose configuration
variable in git-config[1].	https://git-scm.com/docs/commit.html
git-commit -q	A										Suppress commit summary message.	https://git-scm.com/docs/commit.html
git-commit --quiet	A										Suppress commit summary message.	https://git-scm.com/docs/commit.html
git-commit --dry-run	A										Do not create a commit, but show a list of paths that are
to be committed, paths with local changes that will be left
uncommitted and paths that are untracked.	https://git-scm.com/docs/commit.html
git-commit --status	A										Include the output of git-status[1] in the commit
message template when using an editor to prepare the commit
message.  Defaults to on, but can be used to override
configuration variable commit.status.	https://git-scm.com/docs/commit.html
git-commit --no-status	A										Do not include the output of git-status[1] in the
commit message template when using an editor to prepare the
default commit message.	https://git-scm.com/docs/commit.html
git-commit -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/commit.html
git-commit --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/commit.html
git-commit --no-gpg-sign	A										Countermand commit.gpgSign configuration variable that is
set to force each and every commit to be signed.	https://git-scm.com/docs/commit.html
git-commit --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/commit.html
git-commit <file>…​	A										When files are given on the command line, the command
commits the contents of the named files, without
recording the changes already staged.  The contents of
these files are also staged for the next commit on top
of what have been staged before.	https://git-scm.com/docs/commit.html
git-commit	A										Record changes to the repository
<pre><code>git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n       [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n       [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n       [-i | -o] [-S[<keyid>]] [--] [<file>…​]</pre></code>	https://git-scm.com/docs/commit.html
git-config --replace-all	A										Default behavior is to replace at most one line. This replaces
all lines matching the key (and optionally the value_regex).	https://git-scm.com/docs/config.html
git-config --add	A										Adds a new line to the option without altering any existing
values.  This is the same as providing ^$ as the value_regex
in --replace-all.	https://git-scm.com/docs/config.html
git-config --get	A										Get the value for a given key (optionally filtered by a regex
matching the value). Returns error code 1 if the key was not
found and the last value if multiple key values were found.	https://git-scm.com/docs/config.html
git-config --get-all	A										Like get, but returns all values for a multi-valued key.	https://git-scm.com/docs/config.html
git-config --get-regexp	A										Like --get-all, but interprets the name as a regular expression and
writes out the key names.  Regular expression matching is currently
case-sensitive and done against a canonicalized version of the key
in which section and variable names are lowercased, but subsection
names are not.	https://git-scm.com/docs/config.html
git-config --get-urlmatch name URL	A										When given a two-part name section.key, the value for
section.<url>.key whose <url> part matches the best to the
given URL is returned (if no such key exists, the value for
section.key is used as a fallback).  When given just the
section as name, do so for all the keys in the section and
list them.  Returns error code 1 if no value is found.	https://git-scm.com/docs/config.html
git-config --global	A										For writing options: write to global ~/.gitconfig file
rather than the repository .git/config, write to
$XDG_CONFIG_HOME/git/config file if this file exists and the
~/.gitconfig file doesn’t.	https://git-scm.com/docs/config.html
git-config --system	A										For writing options: write to system-wide
$(prefix)/etc/gitconfig rather than the repository
.git/config.	https://git-scm.com/docs/config.html
git-config --local	A										For writing options: write to the repository .git/config file.
This is    the default behavior.	https://git-scm.com/docs/config.html
git-config -f config-file	A										Use the given config file instead of the one specified by GIT_CONFIG.	https://git-scm.com/docs/config.html
git-config --file config-file	A										Use the given config file instead of the one specified by GIT_CONFIG.	https://git-scm.com/docs/config.html
git-config --blob blob	A										Similar to --file but use the given blob instead of a file. E.g.
you can use master:.gitmodules to read values from the file
.gitmodules in the master branch. See "SPECIFYING REVISIONS"
section in gitrevisions[7] for a more complete list of
ways to spell blob names.	https://git-scm.com/docs/config.html
git-config --remove-section	A										Remove the given section from the configuration file.	https://git-scm.com/docs/config.html
git-config --rename-section	A										Rename the given section to a new name.	https://git-scm.com/docs/config.html
git-config --unset	A										Remove the line matching the key from config file.	https://git-scm.com/docs/config.html
git-config --unset-all	A										Remove all lines matching the key from config file.	https://git-scm.com/docs/config.html
git-config -l	A										List all variables set in config file, along with their values.	https://git-scm.com/docs/config.html
git-config --list	A										List all variables set in config file, along with their values.	https://git-scm.com/docs/config.html
git-config --bool	A										git config will ensure that the output is "true" or "false"	https://git-scm.com/docs/config.html
git-config --int	A										git config will ensure that the output is a simple
decimal number.  An optional value suffix of k, m, or g
in the config file will cause the value to be multiplied
by 1024, 1048576, or 1073741824 prior to output.	https://git-scm.com/docs/config.html
git-config --bool-or-int	A										git config will ensure that the output matches the format of
either --bool or --int, as described above.	https://git-scm.com/docs/config.html
git-config --path	A										git-config will expand leading ~ to the value of
$HOME, and ~user to the home directory for the
specified user.  This option has no effect when setting the
value (but you can use git config bla ~/ from the
command line to let your shell do the expansion).	https://git-scm.com/docs/config.html
git-config -z	A										For all options that output values and/or keys, always
end values with the null character (instead of a
newline). Use newline instead as a delimiter between
key and value. This allows for secure parsing of the
output without getting confused e.g. by values that
contain line breaks.	https://git-scm.com/docs/config.html
git-config --null	A										For all options that output values and/or keys, always
end values with the null character (instead of a
newline). Use newline instead as a delimiter between
key and value. This allows for secure parsing of the
output without getting confused e.g. by values that
contain line breaks.	https://git-scm.com/docs/config.html
git-config --name-only	A										Output only the names of config variables for --list or
--get-regexp.	https://git-scm.com/docs/config.html
git-config --show-origin	A										Augment the output of all queried config options with the
origin type (file, standard input, blob, command line) and
the actual origin (config file path, ref, or blob id if
applicable).	https://git-scm.com/docs/config.html
git-config --get-colorbool name [stdout-is-tty]	A										Find the color setting for name (e.g. color.diff) and output
"true" or "false".  stdout-is-tty should be either "true" or
"false", and is taken into account when configuration says
"auto".  If stdout-is-tty is missing, then checks the standard
output of the command itself, and exits with status 0 if color
is to be used, or exits with status 1 otherwise.
When the color setting for name is undefined, the command uses
color.ui as fallback.	https://git-scm.com/docs/config.html
git-config --get-color name [default]	A										Find the color configured for name (e.g. color.diff.new) and
output it as the ANSI color escape sequence to the standard
output.  The optional default parameter is used instead, if
there is no color configured for name.	https://git-scm.com/docs/config.html
git-config -e	A										Opens an editor to modify the specified config file; either
--system, --global, or repository (default).	https://git-scm.com/docs/config.html
git-config --edit	A										Opens an editor to modify the specified config file; either
--system, --global, or repository (default).	https://git-scm.com/docs/config.html
git-config --[no-]includes	A										Respect include.* directives in config files when looking up
values. Defaults to off when a specific file is given (e.g.,
using --file, --global, etc) and on when searching all
config files.	https://git-scm.com/docs/config.html
git-config	A										Get and set repository or global options
<pre><code>git config [<file-option>] [type] [--show-origin] [-z|--null] name [value [value_regex]]\ngit config [<file-option>] [type] --add name value\ngit config [<file-option>] [type] --replace-all name value [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] --get name [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] --get-all name [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]\ngit config [<file-option>] [type] [-z|--null] --get-urlmatch name URL\ngit config [<file-option>] --unset name [value_regex]\ngit config [<file-option>] --unset-all name [value_regex]\ngit config [<file-option>] --rename-section old_name new_name\ngit config [<file-option>] --remove-section name\ngit config [<file-option>] [--show-origin] [-z|--null] [--name-only] -l | --list\ngit config [<file-option>] --get-color name [default]\ngit config [<file-option>] --get-colorbool name [stdout-is-tty]\ngit config [<file-option>] -e | --edit</pre></code>	https://git-scm.com/docs/config.html
git-count-objects -v	A										Report in more detail:	https://git-scm.com/docs/count-objects.html
git-count-objects --verbose	A										Report in more detail:	https://git-scm.com/docs/count-objects.html
git-count-objects -H	A										Print sizes in human readable format	https://git-scm.com/docs/count-objects.html
git-count-objects --human-readable	A										Print sizes in human readable format	https://git-scm.com/docs/count-objects.html
git-count-objects	A										Count unpacked number of objects and their disk consumption
<pre><code>git count-objects [-v] [-H | --human-readable]</pre></code>	https://git-scm.com/docs/count-objects.html
git-daemon --strict-paths	A										Match paths exactly (i.e. don’t allow "/foo/repo" when the real path is
"/foo/repo.git" or "/foo/repo/.git") and don’t do user-relative paths.
git daemon will refuse to start when this option is enabled and no
whitelist is specified.	https://git-scm.com/docs/daemon.html
git-daemon --base-path=<path>	A										Remap all the path requests as relative to the given path.
This is sort of "Git root" - if you run git daemon with
--base-path=/srv/git on example.com, then if you later try to pull
git://example.com/hello.git, git daemon will interpret the path
as /srv/git/hello.git.	https://git-scm.com/docs/daemon.html
git-daemon --base-path-relaxed	A										If --base-path is enabled and repo lookup fails, with this option
git daemon will attempt to lookup without prefixing the base path.
This is useful for switching to --base-path usage, while still
allowing the old paths.	https://git-scm.com/docs/daemon.html
git-daemon --interpolated-path=<pathtemplate>	A										To support virtual hosting, an interpolated path template can be
used to dynamically construct alternate paths.  The template
supports %H for the target hostname as supplied by the client but
converted to all lowercase, %CH for the canonical hostname,
%IP for the server’s IP address, %P for the port number,
and %D for the absolute path of the named repository.
After interpolation, the path is validated against the directory
whitelist.	https://git-scm.com/docs/daemon.html
git-daemon --export-all	A										Allow pulling from all directories that look like Git repositories
(have the objects and refs subdirectories), even if they
do not have the git-daemon-export-ok file.	https://git-scm.com/docs/daemon.html
git-daemon --inetd	A										Have the server run as an inetd service. Implies --syslog.
Incompatible with --detach, --port, --listen, --user and --group
options.	https://git-scm.com/docs/daemon.html
git-daemon --listen=<host_or_ipaddr>	A										Listen on a specific IP address or hostname.  IP addresses can
be either an IPv4 address or an IPv6 address if supported.  If IPv6
is not supported, then --listen=hostname is also not supported and
--listen must be given an IPv4 address.
Can be given more than once.
Incompatible with --inetd option.	https://git-scm.com/docs/daemon.html
git-daemon --port=<n>	A										Listen on an alternative port.  Incompatible with --inetd option.	https://git-scm.com/docs/daemon.html
git-daemon --init-timeout=<n>	A										Timeout (in seconds) between the moment the connection is established
and the client request is received (typically a rather low value, since
that should be basically immediate).	https://git-scm.com/docs/daemon.html
git-daemon --timeout=<n>	A										Timeout (in seconds) for specific client sub-requests. This includes
the time it takes for the server to process the sub-request and the
time spent waiting for the next client’s request.	https://git-scm.com/docs/daemon.html
git-daemon --max-connections=<n>	A										Maximum number of concurrent clients, defaults to 32.  Set it to
zero for no limit.	https://git-scm.com/docs/daemon.html
git-daemon --syslog	A										Log to syslog instead of stderr. Note that this option does not imply
--verbose, thus by default only error conditions will be logged.	https://git-scm.com/docs/daemon.html
git-daemon --user-path	A										Allow ~user notation to be used in requests.  When
specified with no parameter, requests to
git://host/~alice/foo is taken as a request to access
foo repository in the home directory of user alice.
If --user-path=path is specified, the same request is
taken as a request to access path/foo repository in
the home directory of user alice.	https://git-scm.com/docs/daemon.html
git-daemon --user-path=<path>	A										Allow ~user notation to be used in requests.  When
specified with no parameter, requests to
git://host/~alice/foo is taken as a request to access
foo repository in the home directory of user alice.
If --user-path=path is specified, the same request is
taken as a request to access path/foo repository in
the home directory of user alice.	https://git-scm.com/docs/daemon.html
git-daemon --verbose	A										Log details about the incoming connections and requested files.	https://git-scm.com/docs/daemon.html
git-daemon --reuseaddr	A										Use SO_REUSEADDR when binding the listening socket.
This allows the server to restart without waiting for
old connections to time out.	https://git-scm.com/docs/daemon.html
git-daemon --detach	A										Detach from the shell. Implies --syslog.	https://git-scm.com/docs/daemon.html
git-daemon --pid-file=<file>	A										Save the process id in file.  Ignored when the daemon
is run under --inetd.	https://git-scm.com/docs/daemon.html
git-daemon --user=<user>	A										Change daemon’s uid and gid before entering the service loop.
When only --user is given without --group, the
primary group ID for the user is used.  The values of
the option are given to getpwnam(3) and getgrnam(3)
and numeric IDs are not supported.	https://git-scm.com/docs/daemon.html
git-daemon --group=<group>	A										Change daemon’s uid and gid before entering the service loop.
When only --user is given without --group, the
primary group ID for the user is used.  The values of
the option are given to getpwnam(3) and getgrnam(3)
and numeric IDs are not supported.	https://git-scm.com/docs/daemon.html
git-daemon --enable=<service>	A										Enable/disable the service site-wide per default.  Note
that a service disabled site-wide can still be enabled
per repository if it is marked overridable and the
repository enables the service with a configuration
item.	https://git-scm.com/docs/daemon.html
git-daemon --disable=<service>	A										Enable/disable the service site-wide per default.  Note
that a service disabled site-wide can still be enabled
per repository if it is marked overridable and the
repository enables the service with a configuration
item.	https://git-scm.com/docs/daemon.html
git-daemon --allow-override=<service>	A										Allow/forbid overriding the site-wide default with per
repository configuration.  By default, all the services
may be overridden.	https://git-scm.com/docs/daemon.html
git-daemon --forbid-override=<service>	A										Allow/forbid overriding the site-wide default with per
repository configuration.  By default, all the services
may be overridden.	https://git-scm.com/docs/daemon.html
git-daemon --[no-]informative-errors	A										When informative errors are turned on, git-daemon will report
more verbose errors to the client, differentiating conditions
like "no such repository" from "repository not exported". This
is more convenient for clients, but may leak information about
the existence of unexported repositories.  When informative
errors are not enabled, all errors report "access denied" to the
client. The default is --no-informative-errors.	https://git-scm.com/docs/daemon.html
git-daemon --access-hook=<path>	A										Every time a client connects, first run an external command
specified by the <path> with service name (e.g. "upload-pack"),
path to the repository, hostname (%H), canonical hostname
(%CH), IP address (%IP), and TCP port (%P) as its command-line
arguments. The external command can decide to decline the
service by exiting with a non-zero status (or to allow it by
exiting with a zero status).  It can also look at the $REMOTE_ADDR
and $REMOTE_PORT environment variables to learn about the
requestor when making this decision.	https://git-scm.com/docs/daemon.html
git-daemon <directory>	A										A directory to add to the whitelist of allowed directories. Unless
--strict-paths is specified this will also include subdirectories
of each named directory.	https://git-scm.com/docs/daemon.html
git-daemon	A										A really simple server for Git repositories
<pre><code>git daemon [--verbose] [--syslog] [--export-all]\n         [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]\n         [--strict-paths] [--base-path=<path>] [--base-path-relaxed]\n         [--user-path | --user-path=<path>]\n         [--interpolated-path=<pathtemplate>]\n         [--reuseaddr] [--detach] [--pid-file=<file>]\n         [--enable=<service>] [--disable=<service>]\n         [--allow-override=<service>] [--forbid-override=<service>]\n         [--access-hook=<path>] [--[no-]informative-errors]\n         [--inetd |\n          [--listen=<host_or_ipaddr>] [--port=<n>]\n          [--user=<user> [--group=<group>]]]\n         [<directory>…​]</pre></code>	https://git-scm.com/docs/daemon.html
git-describe <commit-ish>…​	A										Commit-ish object names to describe.  Defaults to HEAD if omitted.	https://git-scm.com/docs/describe.html
git-describe --dirty[=<mark>]	A										Describe the working tree.
It means describe HEAD and appends <mark> (-dirty by
default) if the working tree is dirty.	https://git-scm.com/docs/describe.html
git-describe --all	A										Instead of using only the annotated tags, use any ref
found in refs/ namespace.  This option enables matching
any known branch, remote-tracking branch, or lightweight tag.	https://git-scm.com/docs/describe.html
git-describe --tags	A										Instead of using only the annotated tags, use any tag
found in refs/tags namespace.  This option enables matching
a lightweight (non-annotated) tag.	https://git-scm.com/docs/describe.html
git-describe --contains	A										Instead of finding the tag that predates the commit, find
the tag that comes after the commit, and thus contains it.
Automatically implies --tags.	https://git-scm.com/docs/describe.html
git-describe --abbrev=<n>	A										Instead of using the default 7 hexadecimal digits as the
abbreviated object name, use <n> digits, or as many digits
as needed to form a unique object name.  An <n> of 0
will suppress long format, only showing the closest tag.	https://git-scm.com/docs/describe.html
git-describe --candidates=<n>	A										Instead of considering only the 10 most recent tags as
candidates to describe the input commit-ish consider
up to <n> candidates.  Increasing <n> above 10 will take
slightly longer but may produce a more accurate result.
An <n> of 0 will cause only exact matches to be output.	https://git-scm.com/docs/describe.html
git-describe --exact-match	A										Only output exact matches (a tag directly references the
supplied commit).  This is a synonym for --candidates=0.	https://git-scm.com/docs/describe.html
git-describe --debug	A										Verbosely display information about the searching strategy
being employed to standard error.  The tag name will still
be printed to standard out.	https://git-scm.com/docs/describe.html
git-describe --long	A										Always output the long format (the tag, the number of commits
and the abbreviated commit name) even when it matches a tag.
This is useful when you want to see parts of the commit object name
in "describe" output, even when the commit in question happens to be
a tagged version.  Instead of just emitting the tag name, it will
describe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2
that points at object deadbee…​.).	https://git-scm.com/docs/describe.html
git-describe --match <pattern>	A										Only consider tags matching the given glob(7) pattern,
excluding the "refs/tags/" prefix.  This can be used to avoid
leaking private tags from the repository.	https://git-scm.com/docs/describe.html
git-describe --always	A										Show uniquely abbreviated commit object as fallback.	https://git-scm.com/docs/describe.html
git-describe --first-parent	A										Follow only the first parent commit upon seeing a merge commit.
This is useful when you wish to not match tags on branches merged
in the history of the target commit.	https://git-scm.com/docs/describe.html
git-describe	A										Describe a commit using the most recent tag reachable from it
<pre><code>git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>…​]\ngit describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]</pre></code>	https://git-scm.com/docs/describe.html
git-diff-index -p	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index -u	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index --patch	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index -s	A										Suppress diff output. Useful for commands like git show that
show the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-patch	A										Suppress diff output. Useful for commands like git show that
show the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff-index.html
git-diff-index -U<n>	A										Generate diffs with <n> lines of context instead of
the usual three.
Implies -p.	https://git-scm.com/docs/diff-index.html
git-diff-index --unified=<n>	A										Generate diffs with <n> lines of context instead of
the usual three.
Implies -p.	https://git-scm.com/docs/diff-index.html
git-diff-index --raw	A										Generate the diff in raw format.
This is the default.	https://git-scm.com/docs/diff-index.html
git-diff-index --patch-with-raw	A										Synonym for -p --raw.	https://git-scm.com/docs/diff-index.html
git-diff-index --compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/diff-index.html
git-diff-index --minimal	A										Spend extra time to make sure the smallest possible
diff is produced.	https://git-scm.com/docs/diff-index.html
git-diff-index --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/diff-index.html
git-diff-index --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/diff-index.html
git-diff-index --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/diff-index.html
git-diff-index default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/diff-index.html
git-diff-index minimal	A										Spend extra time to make sure the smallest possible diff is
produced.	https://git-scm.com/docs/diff-index.html
git-diff-index patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/diff-index.html
git-diff-index histogram	A										This algorithm extends the patience algorithm to "support
low-occurrence common elements".	https://git-scm.com/docs/diff-index.html
git-diff-index --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary
will be used for the filename part, and the rest for the graph
part. Maximum width defaults to terminal width, or 80 columns
if not connected to a terminal, and can be overridden by
<width>. The width of the filename part can be limited by
giving another width <name-width> after a comma. The width
of the graph part can be limited by using
--stat-graph-width=<width> (affects all commands generating
a stat graph) or by setting diff.statGraphWidth=<width>
(does not affect git format-patch).
By giving a third parameter <count>, you can limit the
output to the first <count> lines, followed by ... if
there are more.	https://git-scm.com/docs/diff-index.html
git-diff-index --numstat	A										Similar to --stat, but shows number of added and
deleted lines in decimal notation and pathname without
abbreviation, to make it more machine friendly.  For
binary files, outputs two - instead of saying
0 0.	https://git-scm.com/docs/diff-index.html
git-diff-index --shortstat	A										Output only the last line of the --stat format containing total
number of modified files, as well as number of added and deleted
lines.	https://git-scm.com/docs/diff-index.html
git-diff-index --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each
sub-directory. The behavior of --dirstat can be customized by
passing it a comma separated list of parameters.
The defaults are controlled by the diff.dirstat configuration
variable (see git-config[1]).
The following parameters are available:	https://git-scm.com/docs/diff-index.html
git-diff-index changes	A										Compute the dirstat numbers by counting the lines that have been
removed from the source, or added to the destination. This ignores
the amount of pure code movements within a file.  In other words,
rearranging lines in a file is not counted as much as other changes.
This is the default behavior when no parameter is given.	https://git-scm.com/docs/diff-index.html
git-diff-index lines	A										Compute the dirstat numbers by doing the regular line-based diff
analysis, and summing the removed/added line counts. (For binary
files, count 64-byte chunks instead, since binary files have no
natural concept of lines). This is a more expensive --dirstat
behavior than the changes behavior, but it does count rearranged
lines within a file as much as other changes. The resulting output
is consistent with what you get from the other --*stat options.	https://git-scm.com/docs/diff-index.html
git-diff-index files	A										Compute the dirstat numbers by counting the number of files changed.
Each changed file counts equally in the dirstat analysis. This is
the computationally cheapest --dirstat behavior, since it does
not have to look at the file contents at all.	https://git-scm.com/docs/diff-index.html
git-diff-index cumulative	A										Count changes in a child directory for the parent directory as well.
Note that when using cumulative, the sum of the percentages
reported may exceed 100%. The default (non-cumulative) behavior can
be specified with the noncumulative parameter.	https://git-scm.com/docs/diff-index.html
git-diff-index <limit>	A										An integer parameter specifies a cut-off percent (3% by default).
Directories contributing less than this percentage of the changes
are not shown in the output.	https://git-scm.com/docs/diff-index.html
git-diff-index --summary	A										Output a condensed summary of extended header information
such as creations, renames and mode changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --patch-with-stat	A										Synonym for -p --stat.	https://git-scm.com/docs/diff-index.html
git-diff-index -z	A										When --raw, --numstat, --name-only or --name-status has been
given, do not munge pathnames and use NULs as output field terminators.	https://git-scm.com/docs/diff-index.html
git-diff-index --name-only	A										Show only names of changed files.	https://git-scm.com/docs/diff-index.html
git-diff-index --name-status	A										Show only names and status of changed files. See the description
of the --diff-filter option on what the status letters mean.	https://git-scm.com/docs/diff-index.html
git-diff-index --submodule[=<format>]	A										Specify how differences in submodules are shown.  When --submodule
or --submodule=log is given, the log format is used.  This format lists
the commits in the range like git-submodule[1] summary does.
Omitting the --submodule option or specifying --submodule=short,
uses the short format. This format just shows the names of the commits
at the beginning and end of the range.  Can be tweaked via the
diff.submodule configuration variable.	https://git-scm.com/docs/diff-index.html
git-diff-index --color[=<when>]	A										Show colored diff.
--color (i.e. without =<when>) is the same as --color=always.
<when> can be one of always, never, or auto.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-color	A										Turn off colored diff.
It is the same as --color=never.	https://git-scm.com/docs/diff-index.html
git-diff-index --word-diff[=<mode>]	A										Show a word diff, using the <mode> to delimit changed words.
By default, words are delimited by whitespace; see
--word-diff-regex below.  The <mode> defaults to plain, and
must be one of:	https://git-scm.com/docs/diff-index.html
git-diff-index color	A										Highlight changed words using only colors.  Implies --color.	https://git-scm.com/docs/diff-index.html
git-diff-index plain	A										Show words as [-removed-] and {+added+}.  Makes no
attempts to escape the delimiters if they appear in the input,
so the output may be ambiguous.	https://git-scm.com/docs/diff-index.html
git-diff-index porcelain	A										Use a special line-based format intended for script
consumption.  Added/removed/unchanged runs are printed in the
usual unified diff format, starting with a +/-/` `
character at the beginning of the line and extending to the
end of the line.  Newlines in the input are represented by a
tilde ~ on a line of its own.	https://git-scm.com/docs/diff-index.html
git-diff-index none	A										Disable word diff again.	https://git-scm.com/docs/diff-index.html
git-diff-index --word-diff-regex=<regex>	A										Use <regex> to decide what a word is, instead of considering
runs of non-whitespace to be a word.  Also implies
--word-diff unless it was already enabled.	https://git-scm.com/docs/diff-index.html
git-diff-index --color-words[=<regex>]	A										Equivalent to --word-diff=color plus (if a regex was
specified) --word-diff-regex=<regex>.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-renames	A										Turn off rename detection, even when the configuration
file gives the default to do so.	https://git-scm.com/docs/diff-index.html
git-diff-index --check	A										Warn if changes introduce conflict markers or whitespace errors.
What are considered whitespace errors is controlled by core.whitespace
configuration.  By default, trailing whitespaces (including
lines that solely consist of whitespaces) and a space character
that is immediately followed by a tab character inside the
initial indent of the line are considered whitespace errors.
Exits with non-zero status if problems are found. Not compatible
with --exit-code.	https://git-scm.com/docs/diff-index.html
git-diff-index --ws-error-highlight=<kind>	A										Highlight whitespace errors on lines specified by <kind>
in the color specified by color.diff.whitespace.  <kind>
is a comma separated list of old, new, context.  When
this option is not given, only whitespace errors in new
lines are highlighted.  E.g. --ws-error-highlight=new,old
highlights whitespace errors on both deleted and added lines.
all can be used as a short-hand for old,new,context.	https://git-scm.com/docs/diff-index.html
git-diff-index --full-index	A										Instead of the first handful of characters, show the full
pre- and post-image blob object names on the "index"
line when generating patch format output.	https://git-scm.com/docs/diff-index.html
git-diff-index --binary	A										In addition to --full-index, output a binary diff that
can be applied with git-apply.	https://git-scm.com/docs/diff-index.html
git-diff-index --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object
name in diff-raw format output and diff-tree header
lines, show only a partial prefix.  This is
independent of the --full-index option above, which controls
the diff-patch output format.  Non default number of
digits can be specified with --abbrev=<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/diff-index.html
git-diff-index --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/diff-index.html
git-diff-index -M[<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-renames[=<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff-index.html
git-diff-index -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-copies-harder	A										For performance reasons, by default, -C option finds copies only
if the original file of the copy was modified in the same
changeset.  This flag makes the command
inspect unmodified files as candidates for the source of
copy.  This is a very expensive operation for large
projects, so use it with caution.  Giving more than one
-C option has the same effect.	https://git-scm.com/docs/diff-index.html
git-diff-index -D	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/diff-index.html
git-diff-index --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/diff-index.html
git-diff-index -l<num>	A										The -M and -C options require O(n^2) processing time where n
is the number of potential rename/copy targets.  This
option prevents rename/copy detection from running if
the number of rename/copy targets exceeds the specified
number.	https://git-scm.com/docs/diff-index.html
git-diff-index --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]	A										Select only files that are Added (A), Copied (C),
Deleted (D), Modified (M), Renamed (R), have their
type (i.e. regular file, symlink, submodule, …​) changed (T),
are Unmerged (U), are
Unknown (X), or have had their pairing Broken (B).
Any combination of the filter characters (including none) can be used.
When * (All-or-none) is added to the combination, all
paths are selected if there is any file that matches
other criteria in the comparison; if there is no file
that matches other criteria, nothing is selected.	https://git-scm.com/docs/diff-index.html
git-diff-index -S<string>	A										Look for differences that change the number of occurrences of
the specified string (i.e. addition/deletion) in a file.
Intended for the scripter’s use.	https://git-scm.com/docs/diff-index.html
git-diff-index -G<regex>	A										Look for differences whose patch text contains added/removed
lines that match <regex>.	https://git-scm.com/docs/diff-index.html
git-diff-index --pickaxe-all	A										When -S or -G finds a change, show all the changes in that
changeset, not just the files that contain the change
in <string>.	https://git-scm.com/docs/diff-index.html
git-diff-index --pickaxe-regex	A										Treat the <string> given to -S as an extended POSIX regular
expression to match.	https://git-scm.com/docs/diff-index.html
git-diff-index -O<orderfile>	A										Output the patch in the order specified in the
<orderfile>, which has one shell glob pattern per line.
This overrides the diff.orderFile configuration variable
(see git-config[1]).  To cancel diff.orderFile,
use -O/dev/null.	https://git-scm.com/docs/diff-index.html
git-diff-index -R	A										Swap two inputs; that is, show differences from index or
on-disk file to tree contents.	https://git-scm.com/docs/diff-index.html
git-diff-index --relative[=<path>]	A										When run from a subdirectory of the project, it can be
told to exclude changes outside the directory and show
pathnames relative to it with this option.  When you are
not in a subdirectory (e.g. in a bare repository), you
can name which subdirectory to make the output relative
to by giving a <path> as an argument.	https://git-scm.com/docs/diff-index.html
git-diff-index -a	A										Treat all files as text.	https://git-scm.com/docs/diff-index.html
git-diff-index --text	A										Treat all files as text.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/diff-index.html
git-diff-index -b	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/diff-index.html
git-diff-index -w	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/diff-index.html
git-diff-index --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number
of lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/diff-index.html
git-diff-index -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --exit-code	A										Make the program exit with codes similar to diff(1).
That is, it exits with 1 if there were differences and
0 means no differences.	https://git-scm.com/docs/diff-index.html
git-diff-index --quiet	A										Disable all output of the program. Implies --exit-code.	https://git-scm.com/docs/diff-index.html
git-diff-index --ext-diff	A										Allow an external diff helper to be executed. If you set an
external diff driver with gitattributes[5], you need
to use this option with git-log[1] and friends.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/diff-index.html
git-diff-index --textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be
either "none", "untracked", "dirty" or "all", which is the default.
Using "none" will consider the submodule modified when it either contains
untracked or modified files or its HEAD differs from the commit recorded
in the superproject and can be used to override any settings of the
ignore option in git-config[1] or gitmodules[5]. When
"untracked" is used submodules are not considered dirty when they only
contain untracked content (but they are still scanned for modified
content). Using "dirty" ignores all changes to the work tree of submodules,
only changes to the commits stored in the superproject are shown (this was
the behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/diff-index.html
git-diff-index --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/diff-index.html
git-diff-index --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/diff-index.html
git-diff-index --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/diff-index.html
git-diff-index <tree-ish>	A										The id of a tree object to diff against.	https://git-scm.com/docs/diff-index.html
git-diff-index --cached	A										do not consider the on-disk file at all	https://git-scm.com/docs/diff-index.html
git-diff-index -m	A										By default, files recorded in the index but not checked
out are reported as deleted.  This flag makes
git diff-index say that all non-checked-out files are up
to date.	https://git-scm.com/docs/diff-index.html
git-diff-index	A										Compare a tree to the working tree or index
<pre><code>git diff-index [-m] [--cached] [<common diff options>] <tree-ish> [<path>…​]</pre></code>	https://git-scm.com/docs/diff-index.html
git-diff -p	A										Generate patch (see section on generating patches).
This is the default.	https://git-scm.com/docs/diff.html
git-diff -u	A										Generate patch (see section on generating patches).
This is the default.	https://git-scm.com/docs/diff.html
git-diff --patch	A										Generate patch (see section on generating patches).
This is the default.	https://git-scm.com/docs/diff.html
git-diff -s	A										Suppress diff output. Useful for commands like git show that
show the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff.html
git-diff --no-patch	A										Suppress diff output. Useful for commands like git show that
show the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff.html
git-diff -U<n>	A										Generate diffs with <n> lines of context instead of
the usual three.
Implies -p.	https://git-scm.com/docs/diff.html
git-diff --unified=<n>	A										Generate diffs with <n> lines of context instead of
the usual three.
Implies -p.	https://git-scm.com/docs/diff.html
git-diff --raw	A										Generate the diff in raw format.	https://git-scm.com/docs/diff.html
git-diff --patch-with-raw	A										Synonym for -p --raw.	https://git-scm.com/docs/diff.html
git-diff --compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/diff.html
git-diff --no-compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/diff.html
git-diff --minimal	A										Spend extra time to make sure the smallest possible
diff is produced.	https://git-scm.com/docs/diff.html
git-diff --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/diff.html
git-diff --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/diff.html
git-diff --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/diff.html
git-diff default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/diff.html
git-diff minimal	A										Spend extra time to make sure the smallest possible diff is
produced.	https://git-scm.com/docs/diff.html
git-diff patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/diff.html
git-diff histogram	A										This algorithm extends the patience algorithm to "support
low-occurrence common elements".	https://git-scm.com/docs/diff.html
git-diff --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary
will be used for the filename part, and the rest for the graph
part. Maximum width defaults to terminal width, or 80 columns
if not connected to a terminal, and can be overridden by
<width>. The width of the filename part can be limited by
giving another width <name-width> after a comma. The width
of the graph part can be limited by using
--stat-graph-width=<width> (affects all commands generating
a stat graph) or by setting diff.statGraphWidth=<width>
(does not affect git format-patch).
By giving a third parameter <count>, you can limit the
output to the first <count> lines, followed by ... if
there are more.	https://git-scm.com/docs/diff.html
git-diff --numstat	A										Similar to --stat, but shows number of added and
deleted lines in decimal notation and pathname without
abbreviation, to make it more machine friendly.  For
binary files, outputs two - instead of saying
0 0.	https://git-scm.com/docs/diff.html
git-diff --shortstat	A										Output only the last line of the --stat format containing total
number of modified files, as well as number of added and deleted
lines.	https://git-scm.com/docs/diff.html
git-diff --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each
sub-directory. The behavior of --dirstat can be customized by
passing it a comma separated list of parameters.
The defaults are controlled by the diff.dirstat configuration
variable (see git-config[1]).
The following parameters are available:	https://git-scm.com/docs/diff.html
git-diff changes	A										Compute the dirstat numbers by counting the lines that have been
removed from the source, or added to the destination. This ignores
the amount of pure code movements within a file.  In other words,
rearranging lines in a file is not counted as much as other changes.
This is the default behavior when no parameter is given.	https://git-scm.com/docs/diff.html
git-diff lines	A										Compute the dirstat numbers by doing the regular line-based diff
analysis, and summing the removed/added line counts. (For binary
files, count 64-byte chunks instead, since binary files have no
natural concept of lines). This is a more expensive --dirstat
behavior than the changes behavior, but it does count rearranged
lines within a file as much as other changes. The resulting output
is consistent with what you get from the other --*stat options.	https://git-scm.com/docs/diff.html
git-diff files	A										Compute the dirstat numbers by counting the number of files changed.
Each changed file counts equally in the dirstat analysis. This is
the computationally cheapest --dirstat behavior, since it does
not have to look at the file contents at all.	https://git-scm.com/docs/diff.html
git-diff cumulative	A										Count changes in a child directory for the parent directory as well.
Note that when using cumulative, the sum of the percentages
reported may exceed 100%. The default (non-cumulative) behavior can
be specified with the noncumulative parameter.	https://git-scm.com/docs/diff.html
git-diff <limit>	A										An integer parameter specifies a cut-off percent (3% by default).
Directories contributing less than this percentage of the changes
are not shown in the output.	https://git-scm.com/docs/diff.html
git-diff --summary	A										Output a condensed summary of extended header information
such as creations, renames and mode changes.	https://git-scm.com/docs/diff.html
git-diff --patch-with-stat	A										Synonym for -p --stat.	https://git-scm.com/docs/diff.html
git-diff -z	A										When --raw, --numstat, --name-only or --name-status has been
given, do not munge pathnames and use NULs as output field terminators.	https://git-scm.com/docs/diff.html
git-diff --name-only	A										Show only names of changed files.	https://git-scm.com/docs/diff.html
git-diff --name-status	A										Show only names and status of changed files. See the description
of the --diff-filter option on what the status letters mean.	https://git-scm.com/docs/diff.html
git-diff --submodule[=<format>]	A										Specify how differences in submodules are shown.  When --submodule
or --submodule=log is given, the log format is used.  This format lists
the commits in the range like git-submodule[1] summary does.
Omitting the --submodule option or specifying --submodule=short,
uses the short format. This format just shows the names of the commits
at the beginning and end of the range.  Can be tweaked via the
diff.submodule configuration variable.	https://git-scm.com/docs/diff.html
git-diff --color[=<when>]	A										Show colored diff.
--color (i.e. without =<when>) is the same as --color=always.
<when> can be one of always, never, or auto.
It can be changed by the color.ui and color.diff
configuration settings.	https://git-scm.com/docs/diff.html
git-diff --no-color	A										Turn off colored diff.
This can be used to override configuration settings.
It is the same as --color=never.	https://git-scm.com/docs/diff.html
git-diff --word-diff[=<mode>]	A										Show a word diff, using the <mode> to delimit changed words.
By default, words are delimited by whitespace; see
--word-diff-regex below.  The <mode> defaults to plain, and
must be one of:	https://git-scm.com/docs/diff.html
git-diff color	A										Highlight changed words using only colors.  Implies --color.	https://git-scm.com/docs/diff.html
git-diff plain	A										Show words as [-removed-] and {+added+}.  Makes no
attempts to escape the delimiters if they appear in the input,
so the output may be ambiguous.	https://git-scm.com/docs/diff.html
git-diff porcelain	A										Use a special line-based format intended for script
consumption.  Added/removed/unchanged runs are printed in the
usual unified diff format, starting with a +/-/` `
character at the beginning of the line and extending to the
end of the line.  Newlines in the input are represented by a
tilde ~ on a line of its own.	https://git-scm.com/docs/diff.html
git-diff none	A										Disable word diff again.	https://git-scm.com/docs/diff.html
git-diff --word-diff-regex=<regex>	A										Use <regex> to decide what a word is, instead of considering
runs of non-whitespace to be a word.  Also implies
--word-diff unless it was already enabled.	https://git-scm.com/docs/diff.html
git-diff --color-words[=<regex>]	A										Equivalent to --word-diff=color plus (if a regex was
specified) --word-diff-regex=<regex>.	https://git-scm.com/docs/diff.html
git-diff --no-renames	A										Turn off rename detection, even when the configuration
file gives the default to do so.	https://git-scm.com/docs/diff.html
git-diff --check	A										Warn if changes introduce conflict markers or whitespace errors.
What are considered whitespace errors is controlled by core.whitespace
configuration.  By default, trailing whitespaces (including
lines that solely consist of whitespaces) and a space character
that is immediately followed by a tab character inside the
initial indent of the line are considered whitespace errors.
Exits with non-zero status if problems are found. Not compatible
with --exit-code.	https://git-scm.com/docs/diff.html
git-diff --ws-error-highlight=<kind>	A										Highlight whitespace errors on lines specified by <kind>
in the color specified by color.diff.whitespace.  <kind>
is a comma separated list of old, new, context.  When
this option is not given, only whitespace errors in new
lines are highlighted.  E.g. --ws-error-highlight=new,old
highlights whitespace errors on both deleted and added lines.
all can be used as a short-hand for old,new,context.	https://git-scm.com/docs/diff.html
git-diff --full-index	A										Instead of the first handful of characters, show the full
pre- and post-image blob object names on the "index"
line when generating patch format output.	https://git-scm.com/docs/diff.html
git-diff --binary	A										In addition to --full-index, output a binary diff that
can be applied with git-apply.	https://git-scm.com/docs/diff.html
git-diff --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object
name in diff-raw format output and diff-tree header
lines, show only a partial prefix.  This is
independent of the --full-index option above, which controls
the diff-patch output format.  Non default number of
digits can be specified with --abbrev=<n>.	https://git-scm.com/docs/diff.html
git-diff -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/diff.html
git-diff --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/diff.html
git-diff -M[<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff.html
git-diff --find-renames[=<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff.html
git-diff -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff.html
git-diff --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff.html
git-diff --find-copies-harder	A										For performance reasons, by default, -C option finds copies only
if the original file of the copy was modified in the same
changeset.  This flag makes the command
inspect unmodified files as candidates for the source of
copy.  This is a very expensive operation for large
projects, so use it with caution.  Giving more than one
-C option has the same effect.	https://git-scm.com/docs/diff.html
git-diff -D	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/diff.html
git-diff --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/diff.html
git-diff -l<num>	A										The -M and -C options require O(n^2) processing time where n
is the number of potential rename/copy targets.  This
option prevents rename/copy detection from running if
the number of rename/copy targets exceeds the specified
number.	https://git-scm.com/docs/diff.html
git-diff --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]	A										Select only files that are Added (A), Copied (C),
Deleted (D), Modified (M), Renamed (R), have their
type (i.e. regular file, symlink, submodule, …​) changed (T),
are Unmerged (U), are
Unknown (X), or have had their pairing Broken (B).
Any combination of the filter characters (including none) can be used.
When * (All-or-none) is added to the combination, all
paths are selected if there is any file that matches
other criteria in the comparison; if there is no file
that matches other criteria, nothing is selected.	https://git-scm.com/docs/diff.html
git-diff -S<string>	A										Look for differences that change the number of occurrences of
the specified string (i.e. addition/deletion) in a file.
Intended for the scripter’s use.	https://git-scm.com/docs/diff.html
git-diff -G<regex>	A										Look for differences whose patch text contains added/removed
lines that match <regex>.	https://git-scm.com/docs/diff.html
git-diff --pickaxe-all	A										When -S or -G finds a change, show all the changes in that
changeset, not just the files that contain the change
in <string>.	https://git-scm.com/docs/diff.html
git-diff --pickaxe-regex	A										Treat the <string> given to -S as an extended POSIX regular
expression to match.	https://git-scm.com/docs/diff.html
git-diff -O<orderfile>	A										Output the patch in the order specified in the
<orderfile>, which has one shell glob pattern per line.
This overrides the diff.orderFile configuration variable
(see git-config[1]).  To cancel diff.orderFile,
use -O/dev/null.	https://git-scm.com/docs/diff.html
git-diff -R	A										Swap two inputs; that is, show differences from index or
on-disk file to tree contents.	https://git-scm.com/docs/diff.html
git-diff --relative[=<path>]	A										When run from a subdirectory of the project, it can be
told to exclude changes outside the directory and show
pathnames relative to it with this option.  When you are
not in a subdirectory (e.g. in a bare repository), you
can name which subdirectory to make the output relative
to by giving a <path> as an argument.	https://git-scm.com/docs/diff.html
git-diff -a	A										Treat all files as text.	https://git-scm.com/docs/diff.html
git-diff --text	A										Treat all files as text.	https://git-scm.com/docs/diff.html
git-diff --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/diff.html
git-diff -b	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/diff.html
git-diff --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/diff.html
git-diff -w	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/diff.html
git-diff --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/diff.html
git-diff --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/diff.html
git-diff --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number
of lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/diff.html
git-diff -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff.html
git-diff --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff.html
git-diff --exit-code	A										Make the program exit with codes similar to diff(1).
That is, it exits with 1 if there were differences and
0 means no differences.	https://git-scm.com/docs/diff.html
git-diff --quiet	A										Disable all output of the program. Implies --exit-code.	https://git-scm.com/docs/diff.html
git-diff --ext-diff	A										Allow an external diff helper to be executed. If you set an
external diff driver with gitattributes[5], you need
to use this option with git-log[1] and friends.	https://git-scm.com/docs/diff.html
git-diff --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/diff.html
git-diff --textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/diff.html
git-diff --no-textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/diff.html
git-diff --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be
either "none", "untracked", "dirty" or "all", which is the default.
Using "none" will consider the submodule modified when it either contains
untracked or modified files or its HEAD differs from the commit recorded
in the superproject and can be used to override any settings of the
ignore option in git-config[1] or gitmodules[5]. When
"untracked" is used submodules are not considered dirty when they only
contain untracked content (but they are still scanned for modified
content). Using "dirty" ignores all changes to the work tree of submodules,
only changes to the commits stored in the superproject are shown (this was
the behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/diff.html
git-diff --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/diff.html
git-diff --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/diff.html
git-diff --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/diff.html
git-diff <path>…​	A										The <paths> parameters, when given, are used to limit
the diff to the named paths (you can give directory
names and get diff for all files under them).	https://git-scm.com/docs/diff.html
git-diff	A										Show changes between commits, commit and working tree, etc
<pre><code>git diff [options] [<commit>] [--] [<path>…​]\ngit diff [options] --cached [<commit>] [--] [<path>…​]\ngit diff [options] <commit> <commit> [--] [<path>…​]\ngit diff [options] <blob> <blob>\ngit diff [options] [--no-index] [--] <path> <path></pre></code>	https://git-scm.com/docs/diff.html
git-fast-import --force	A										Force updating modified existing branches, even if doing
so would cause commits to be lost (as the new commit does
not contain the old commit).	https://git-scm.com/docs/fast-import.html
git-fast-import --quiet	A										Disable all non-fatal output, making fast-import silent when it
is successful.  This option disables the output shown by
--stats.	https://git-scm.com/docs/fast-import.html
git-fast-import --stats	A										Display some basic statistics about the objects fast-import has
created, the packfiles they were stored into, and the
memory used by fast-import during this run.  Showing this output
is currently the default, but can be disabled with --quiet.	https://git-scm.com/docs/fast-import.html
git-fast-import --cat-blob-fd=<fd>	A										Write responses to get-mark, cat-blob, and ls queries to the
file descriptor <fd> instead of stdout.  Allows progress
output intended for the end-user to be separated from other
output.	https://git-scm.com/docs/fast-import.html
git-fast-import --date-format=<fmt>	A										Specify the type of dates the frontend will supply to
fast-import within author, committer and tagger commands.
See “Date Formats” below for details about which formats
are supported, and their syntax.	https://git-scm.com/docs/fast-import.html
git-fast-import --done	A										Terminate with error if there is no done command at the end of
the stream.  This option might be useful for detecting errors
that cause the frontend to terminate before it has started to
write a stream.	https://git-scm.com/docs/fast-import.html
git-fast-import --export-marks=<file>	A										Dumps the internal marks table to <file> when complete.
Marks are written one per line as :markid SHA-1.
Frontends can use this file to validate imports after they
have been completed, or to save the marks table across
incremental runs.  As <file> is only opened and truncated
at checkpoint (or completion) the same path can also be
safely given to --import-marks.	https://git-scm.com/docs/fast-import.html
git-fast-import --import-marks=<file>	A										Before processing any input, load the marks specified in
<file>.  The input file must exist, must be readable, and
must use the same format as produced by --export-marks.
Multiple options may be supplied to import more than one
set of marks.  If a mark is defined to different values,
the last file wins.	https://git-scm.com/docs/fast-import.html
git-fast-import --import-marks-if-exists=<file>	A										Like --import-marks but instead of erroring out, silently
skips the file if it does not exist.	https://git-scm.com/docs/fast-import.html
git-fast-import --[no-]relative-marks	A										After specifying --relative-marks the paths specified
with --import-marks= and --export-marks= are relative
to an internal directory in the current repository.
In git-fast-import this means that the paths are relative
to the .git/info/fast-import directory. However, other
importers may use a different location.	https://git-scm.com/docs/fast-import.html
git-fast-import --active-branches=<n>	A										Maximum number of branches to maintain active at once.
See “Memory Utilization” below for details.  Default is 5.	https://git-scm.com/docs/fast-import.html
git-fast-import --big-file-threshold=<n>	A										Maximum size of a blob that fast-import will attempt to
create a delta for, expressed in bytes.  The default is 512m
(512 MiB).  Some importers may wish to lower this on systems
with constrained memory.	https://git-scm.com/docs/fast-import.html
git-fast-import --depth=<n>	A										Maximum delta depth, for blob and tree deltification.
Default is 10.	https://git-scm.com/docs/fast-import.html
git-fast-import --export-pack-edges=<file>	A										After creating a packfile, print a line of data to
<file> listing the filename of the packfile and the last
commit on each branch that was written to that packfile.
This information may be useful after importing projects
whose total object set exceeds the 4 GiB packfile limit,
as these commits can be used as edge points during calls
to git pack-objects.	https://git-scm.com/docs/fast-import.html
git-fast-import --max-pack-size=<n>	A										Maximum size of each output packfile.
The default is unlimited.	https://git-scm.com/docs/fast-import.html
git-fast-import	A										Backend for fast Git data importers
<pre><code>frontend | git fast-import [options]</pre></code>	https://git-scm.com/docs/fast-import.html
git-fetch --all	A										Fetch all remotes.	https://git-scm.com/docs/fetch.html
git-fetch -a	A										Append ref names and object names of fetched refs to the
existing contents of .git/FETCH_HEAD.  Without this
option old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/fetch.html
git-fetch --append	A										Append ref names and object names of fetched refs to the
existing contents of .git/FETCH_HEAD.  Without this
option old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/fetch.html
git-fetch --depth=<depth>	A										Limit fetching to the specified number of commits from the tip of
each remote branch history. If fetching to a shallow repository
created by git clone with --depth=<depth> option (see
git-clone[1]), deepen or shorten the history to the specified
number of commits. Tags for the deepened commits are not fetched.	https://git-scm.com/docs/fetch.html
git-fetch --unshallow	A										If the source repository is complete, convert a shallow
repository to a complete one, removing all the limitations
imposed by shallow repositories.	https://git-scm.com/docs/fetch.html
git-fetch --update-shallow	A										By default when fetching from a shallow repository,
git fetch refuses refs that require updating
.git/shallow. This option updates .git/shallow and accept such
refs.	https://git-scm.com/docs/fetch.html
git-fetch --dry-run	A										Show what would be done, without making any changes.	https://git-scm.com/docs/fetch.html
git-fetch -f	A										When git fetch is used with <rbranch>:<lbranch>
refspec, it refuses to update the local branch
<lbranch> unless the remote branch <rbranch> it
fetches is a descendant of <lbranch>.  This option
overrides that check.	https://git-scm.com/docs/fetch.html
git-fetch --force	A										When git fetch is used with <rbranch>:<lbranch>
refspec, it refuses to update the local branch
<lbranch> unless the remote branch <rbranch> it
fetches is a descendant of <lbranch>.  This option
overrides that check.	https://git-scm.com/docs/fetch.html
git-fetch -k	A										Keep downloaded pack.	https://git-scm.com/docs/fetch.html
git-fetch --keep	A										Keep downloaded pack.	https://git-scm.com/docs/fetch.html
git-fetch --multiple	A										Allow several <repository> and <group> arguments to be
specified. No <refspec>s may be specified.	https://git-scm.com/docs/fetch.html
git-fetch -p	A										Before fetching, remove any remote-tracking references that no
longer exist on the remote.  Tags are not subject to pruning
if they are fetched only because of the default tag
auto-following or due to a --tags option.  However, if tags
are fetched due to an explicit refspec (either on the command
line or in the remote configuration, for example if the remote
was cloned with the --mirror option), then they are also
subject to pruning.	https://git-scm.com/docs/fetch.html
git-fetch --prune	A										Before fetching, remove any remote-tracking references that no
longer exist on the remote.  Tags are not subject to pruning
if they are fetched only because of the default tag
auto-following or due to a --tags option.  However, if tags
are fetched due to an explicit refspec (either on the command
line or in the remote configuration, for example if the remote
was cloned with the --mirror option), then they are also
subject to pruning.	https://git-scm.com/docs/fetch.html
git-fetch -n	A										By default, tags that point at objects that are downloaded
from the remote repository are fetched and stored locally.
This option disables this automatic tag following. The default
behavior for a remote may be specified with the remote.<name>.tagOpt
setting. See git-config[1].	https://git-scm.com/docs/fetch.html
git-fetch --no-tags	A										By default, tags that point at objects that are downloaded
from the remote repository are fetched and stored locally.
This option disables this automatic tag following. The default
behavior for a remote may be specified with the remote.<name>.tagOpt
setting. See git-config[1].	https://git-scm.com/docs/fetch.html
git-fetch --refmap=<refspec>	A										When fetching refs listed on the command line, use the
specified refspec (can be given more than once) to map the
refs to remote-tracking branches, instead of the values of
remote.*.fetch configuration variables for the remote
repository.  See section on "Configured Remote-tracking
Branches" for details.	https://git-scm.com/docs/fetch.html
git-fetch -t	A										Fetch all tags from the remote (i.e., fetch remote tags
refs/tags/* into local tags with the same name), in addition
to whatever else would otherwise be fetched.  Using this
option alone does not subject tags to pruning, even if --prune
is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see --prune).	https://git-scm.com/docs/fetch.html
git-fetch --tags	A										Fetch all tags from the remote (i.e., fetch remote tags
refs/tags/* into local tags with the same name), in addition
to whatever else would otherwise be fetched.  Using this
option alone does not subject tags to pruning, even if --prune
is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see --prune).	https://git-scm.com/docs/fetch.html
git-fetch --recurse-submodules[=yes|on-demand|no]	A										This option controls if and under what conditions new commits of
populated submodules should be fetched too. It can be used as a
boolean option to completely disable recursion when set to no or to
unconditionally recurse into all populated submodules when set to
yes, which is the default when this option is used without any
value. Use on-demand to only recurse into a populated submodule
when the superproject retrieves a commit that updates the submodule’s
reference to a commit that isn’t already in the local submodule
clone.	https://git-scm.com/docs/fetch.html
git-fetch -j	A										Number of parallel children to be used for fetching submodules.
Each will fetch from different submodules, such that fetching many
submodules will be faster. By default submodules will be fetched
one at a time.	https://git-scm.com/docs/fetch.html
git-fetch --jobs=<n>	A										Number of parallel children to be used for fetching submodules.
Each will fetch from different submodules, such that fetching many
submodules will be faster. By default submodules will be fetched
one at a time.	https://git-scm.com/docs/fetch.html
git-fetch --no-recurse-submodules	A										Disable recursive fetching of submodules (this has the same effect as
using the --recurse-submodules=no option).	https://git-scm.com/docs/fetch.html
git-fetch --submodule-prefix=<path>	A										Prepend <path> to paths printed in informative messages
such as "Fetching submodule foo".  This option is used
internally when recursing over submodules.	https://git-scm.com/docs/fetch.html
git-fetch --recurse-submodules-default=[yes|on-demand]	A										This option is used internally to temporarily provide a
non-negative default value for the --recurse-submodules
option.  All other methods of configuring fetch’s submodule
recursion (such as settings in gitmodules[5] and
git-config[1]) override this option, as does
specifying --[no-]recurse-submodules directly.	https://git-scm.com/docs/fetch.html
git-fetch -u	A										By default git fetch refuses to update the head which
corresponds to the current branch.  This flag disables the
check.  This is purely for the internal use for git pull
to communicate with git fetch, and unless you are
implementing your own Porcelain you are not supposed to
use it.	https://git-scm.com/docs/fetch.html
git-fetch --update-head-ok	A										By default git fetch refuses to update the head which
corresponds to the current branch.  This flag disables the
check.  This is purely for the internal use for git pull
to communicate with git fetch, and unless you are
implementing your own Porcelain you are not supposed to
use it.	https://git-scm.com/docs/fetch.html
git-fetch --upload-pack <upload-pack>	A										When given, and the repository to fetch from is handled
by git fetch-pack, --exec=<upload-pack> is passed to
the command to specify non-default path for the command
run on the other end.	https://git-scm.com/docs/fetch.html
git-fetch -q	A										Pass --quiet to git-fetch-pack and silence any other internally
used git commands. Progress is not reported to the standard error
stream.	https://git-scm.com/docs/fetch.html
git-fetch --quiet	A										Pass --quiet to git-fetch-pack and silence any other internally
used git commands. Progress is not reported to the standard error
stream.	https://git-scm.com/docs/fetch.html
git-fetch -v	A										Be verbose.	https://git-scm.com/docs/fetch.html
git-fetch --verbose	A										Be verbose.	https://git-scm.com/docs/fetch.html
git-fetch --progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal, unless -q
is specified. This flag forces progress status even if the
standard error stream is not directed to a terminal.	https://git-scm.com/docs/fetch.html
git-fetch -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/fetch.html
git-fetch --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/fetch.html
git-fetch -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/fetch.html
git-fetch --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/fetch.html
git-fetch <repository>	A										The "remote" repository that is the source of a fetch
or pull operation.  This parameter can be either a URL
(see the section GIT URLS below) or the name
of a remote (see the section REMOTES below).	https://git-scm.com/docs/fetch.html
git-fetch <group>	A										A name referring to a list of repositories as the value
of remotes.<group> in the configuration file.
(See git-config[1]).	https://git-scm.com/docs/fetch.html
git-fetch <refspec>	A										Specifies which refs to fetch and which local refs to update.
When no <refspec>s appear on the command line, the refs to fetch
are read from remote.<repository>.fetch variables instead
(see CONFIGURED REMOTE-TRACKING BRANCHES below).	https://git-scm.com/docs/fetch.html
git-fetch	A										Download objects and refs from another repository
<pre><code>git fetch [<options>] [<repository> [<refspec>…​]]\ngit fetch [<options>] <group>\ngit fetch --multiple [<options>] [(<repository> | <group>)…​]\ngit fetch --all [<options>]</pre></code>	https://git-scm.com/docs/fetch.html
git-filter-branch --env-filter <command>	A										This filter may be used if you only need to modify the environment
in which the commit will be performed.  Specifically, you might
want to rewrite the author/committer name/email/time environment
variables (see git-commit-tree[1] for details).  Do not forget
to re-export the variables.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --tree-filter <command>	A										This is the filter for rewriting the tree and its contents.
The argument is evaluated in shell with the working
directory set to the root of the checked out tree.  The new tree
is then used as-is (new files are auto-added, disappeared files
are auto-removed - neither .gitignore files nor any other ignore
rules HAVE ANY EFFECT!).	https://git-scm.com/docs/filter-branch.html
git-filter-branch --index-filter <command>	A										This is the filter for rewriting the index.  It is similar to the
tree filter but does not check out the tree, which makes it much
faster.  Frequently used with git rm --cached
--ignore-unmatch ..., see EXAMPLES below.  For hairy
cases, see git-update-index[1].	https://git-scm.com/docs/filter-branch.html
git-filter-branch --parent-filter <command>	A										This is the filter for rewriting the commit’s parent list.
It will receive the parent string on stdin and shall output
the new parent string on stdout.  The parent string is in
the format described in git-commit-tree[1]: empty for
the initial commit, "-p parent" for a normal commit and
"-p parent1 -p parent2 -p parent3 …​" for a merge commit.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --msg-filter <command>	A										This is the filter for rewriting the commit messages.
The argument is evaluated in the shell with the original
commit message on standard input; its standard output is
used as the new commit message.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --commit-filter <command>	A										This is the filter for performing the commit.
If this filter is specified, it will be called instead of the
git commit-tree command, with arguments of the form
"<TREE_ID> [(-p <PARENT_COMMIT_ID>)…​]" and the log message on
stdin.  The commit id is expected on stdout.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --tag-name-filter <command>	A										This is the filter for rewriting tag names. When passed,
it will be called for every tag ref that points to a rewritten
object (or to a tag object which points to a rewritten object).
The original tag name is passed via standard input, and the new
tag name is expected on standard output.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --subdirectory-filter <directory>	A										Only look at the history which touches the given subdirectory.
The result will contain that directory (and only that) as its
project root. Implies Remap to ancestor.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --prune-empty	A										Some kind of filters will generate empty commits, that left the tree
untouched.  This switch allow git-filter-branch to ignore such
commits.  Though, this switch only applies for commits that have one
and only one parent, it will hence keep merges points. Also, this
option is not compatible with the use of --commit-filter. Though you
just need to use the function git_commit_non_empty_tree "$@" instead
of the git commit-tree "$@" idiom in your commit filter to make that
happen.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --original <namespace>	A										Use this option to set the namespace where the original commits
will be stored. The default value is refs/original.	https://git-scm.com/docs/filter-branch.html
git-filter-branch -d <directory>	A										Use this option to set the path to the temporary directory used for
rewriting.  When applying a tree filter, the command needs to
temporarily check out the tree to some directory, which may consume
considerable space in case of large projects.  By default it
does this in the .git-rewrite/ directory but you can override
that choice by this parameter.	https://git-scm.com/docs/filter-branch.html
git-filter-branch -f	A										git filter-branch refuses to start with an existing temporary
directory or when there are already refs starting with
refs/original/, unless forced.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --force	A										git filter-branch refuses to start with an existing temporary
directory or when there are already refs starting with
refs/original/, unless forced.	https://git-scm.com/docs/filter-branch.html
git-filter-branch <rev-list options>…​	A										Arguments for git rev-list.  All positive refs included by
these options are rewritten.  You may also specify options
such as --all, but you must use -- to separate them from
the git filter-branch options. Implies Remap to ancestor.	https://git-scm.com/docs/filter-branch.html
git-filter-branch	A										Rewrite branches
<pre><code>git filter-branch [--env-filter <command>] [--tree-filter <command>]\n    [--index-filter <command>] [--parent-filter <command>]\n    [--msg-filter <command>] [--commit-filter <command>]\n    [--tag-name-filter <command>] [--subdirectory-filter <directory>]\n    [--prune-empty]\n    [--original <namespace>] [-d <directory>] [-f | --force]\n    [--] [<rev-list options>…​]</pre></code>	https://git-scm.com/docs/filter-branch.html
git-for-each-ref <count>	A										By default the command shows all refs that match
<pattern>.  This option makes it stop after showing
that many refs.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <key>	A										A field name to sort on.  Prefix - to sort in
descending order of the value.  When unspecified,
refname is used.  You may use the --sort=<key> option
multiple times, in which case the last key becomes the primary
key.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <format>	A										A string that interpolates %(fieldname) from the
object pointed at by a ref being shown.  If fieldname
is prefixed with an asterisk (*) and the ref points
at a tag object, the value for the field in the object
tag refers is used.  When unspecified, defaults to
%(objectname) SPC %(objecttype) TAB %(refname).
It also interpolates %% to %, and %xx where xx
are hex digits interpolates to character with hex code
xx; for example %00 interpolates to \0 (NUL),
%09 to \t (TAB) and %0a to \n (LF).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <pattern>…​	A										If one or more patterns are given, only refs are shown that
match against at least one pattern, either using fnmatch(3) or
literally, in the latter case matching completely or from the
beginning up to a slash.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --shell	A										If given, strings that substitute %(fieldname)
placeholders are quoted as string literals suitable for
the specified host language.  This is meant to produce
a scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --perl	A										If given, strings that substitute %(fieldname)
placeholders are quoted as string literals suitable for
the specified host language.  This is meant to produce
a scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --python	A										If given, strings that substitute %(fieldname)
placeholders are quoted as string literals suitable for
the specified host language.  This is meant to produce
a scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --tcl	A										If given, strings that substitute %(fieldname)
placeholders are quoted as string literals suitable for
the specified host language.  This is meant to produce
a scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --points-at <object>	A										Only list refs which points at the given object.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --merged [<object>]	A										Only list refs whose tips are reachable from the
specified commit (HEAD if not specified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --no-merged [<object>]	A										Only list refs whose tips are not reachable from the
specified commit (HEAD if not specified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --contains [<object>]	A										Only list refs which contain the specified commit (HEAD if not
specified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref	A										Output information on each ref
<pre><code>git for-each-ref [--count=<count>] [--shell|--perl|--python|--tcl]\n           [(--sort=<key>)…​] [--format=<format>] [<pattern>…​]\n           [--points-at <object>] [(--merged | --no-merged) [<object>]]\n           [--contains [<object>]]</pre></code>	https://git-scm.com/docs/for-each-ref.html
git-format-patch -p	A										Generate plain patches without any diffstats.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-stat	A										Generate plain patches without any diffstats.	https://git-scm.com/docs/format-patch.html
git-format-patch -U<n>	A										Generate diffs with <n> lines of context instead of
the usual three.	https://git-scm.com/docs/format-patch.html
git-format-patch --unified=<n>	A										Generate diffs with <n> lines of context instead of
the usual three.	https://git-scm.com/docs/format-patch.html
git-format-patch --compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-compaction-heuristic	A										These are to help debugging and tuning an experimental
heuristic (which is off by default) that shifts the hunk
boundary in an attempt to make the resulting patch easier
to read.	https://git-scm.com/docs/format-patch.html
git-format-patch --minimal	A										Spend extra time to make sure the smallest possible
diff is produced.	https://git-scm.com/docs/format-patch.html
git-format-patch --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/format-patch.html
git-format-patch --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/format-patch.html
git-format-patch --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/format-patch.html
git-format-patch default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/format-patch.html
git-format-patch minimal	A										Spend extra time to make sure the smallest possible diff is
produced.	https://git-scm.com/docs/format-patch.html
git-format-patch patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/format-patch.html
git-format-patch histogram	A										This algorithm extends the patience algorithm to "support
low-occurrence common elements".	https://git-scm.com/docs/format-patch.html
git-format-patch --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary
will be used for the filename part, and the rest for the graph
part. Maximum width defaults to terminal width, or 80 columns
if not connected to a terminal, and can be overridden by
<width>. The width of the filename part can be limited by
giving another width <name-width> after a comma. The width
of the graph part can be limited by using
--stat-graph-width=<width> (affects all commands generating
a stat graph) or by setting diff.statGraphWidth=<width>
(does not affect git format-patch).
By giving a third parameter <count>, you can limit the
output to the first <count> lines, followed by ... if
there are more.	https://git-scm.com/docs/format-patch.html
git-format-patch --numstat	A										Similar to --stat, but shows number of added and
deleted lines in decimal notation and pathname without
abbreviation, to make it more machine friendly.  For
binary files, outputs two - instead of saying
0 0.	https://git-scm.com/docs/format-patch.html
git-format-patch --shortstat	A										Output only the last line of the --stat format containing total
number of modified files, as well as number of added and deleted
lines.	https://git-scm.com/docs/format-patch.html
git-format-patch --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each
sub-directory. The behavior of --dirstat can be customized by
passing it a comma separated list of parameters.
The defaults are controlled by the diff.dirstat configuration
variable (see git-config[1]).
The following parameters are available:	https://git-scm.com/docs/format-patch.html
git-format-patch changes	A										Compute the dirstat numbers by counting the lines that have been
removed from the source, or added to the destination. This ignores
the amount of pure code movements within a file.  In other words,
rearranging lines in a file is not counted as much as other changes.
This is the default behavior when no parameter is given.	https://git-scm.com/docs/format-patch.html
git-format-patch lines	A										Compute the dirstat numbers by doing the regular line-based diff
analysis, and summing the removed/added line counts. (For binary
files, count 64-byte chunks instead, since binary files have no
natural concept of lines). This is a more expensive --dirstat
behavior than the changes behavior, but it does count rearranged
lines within a file as much as other changes. The resulting output
is consistent with what you get from the other --*stat options.	https://git-scm.com/docs/format-patch.html
git-format-patch files	A										Compute the dirstat numbers by counting the number of files changed.
Each changed file counts equally in the dirstat analysis. This is
the computationally cheapest --dirstat behavior, since it does
not have to look at the file contents at all.	https://git-scm.com/docs/format-patch.html
git-format-patch cumulative	A										Count changes in a child directory for the parent directory as well.
Note that when using cumulative, the sum of the percentages
reported may exceed 100%. The default (non-cumulative) behavior can
be specified with the noncumulative parameter.	https://git-scm.com/docs/format-patch.html
git-format-patch <limit>	A										An integer parameter specifies a cut-off percent (3% by default).
Directories contributing less than this percentage of the changes
are not shown in the output.	https://git-scm.com/docs/format-patch.html
git-format-patch --summary	A										Output a condensed summary of extended header information
such as creations, renames and mode changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-renames	A										Turn off rename detection, even when the configuration
file gives the default to do so.	https://git-scm.com/docs/format-patch.html
git-format-patch --full-index	A										Instead of the first handful of characters, show the full
pre- and post-image blob object names on the "index"
line when generating patch format output.	https://git-scm.com/docs/format-patch.html
git-format-patch --binary	A										In addition to --full-index, output a binary diff that
can be applied with git-apply.	https://git-scm.com/docs/format-patch.html
git-format-patch --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object
name in diff-raw format output and diff-tree header
lines, show only a partial prefix.  This is
independent of the --full-index option above, which controls
the diff-patch output format.  Non default number of
digits can be specified with --abbrev=<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/format-patch.html
git-format-patch --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and
create. This serves two purposes:	https://git-scm.com/docs/format-patch.html
git-format-patch -M[<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-renames[=<n>]	A										Detect renames.
If n is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the
file’s size). For example, -M90% means Git should consider a
delete/add pair to be a rename if more than 90% of the file
hasn’t changed.  Without a % sign, the number is to be read as
a fraction, with a decimal point before it.  I.e., -M5 becomes
0.5, and is thus the same as -M50%.  Similarly, -M05 is
the same as -M5%.  To limit detection to exact renames, use
-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/format-patch.html
git-format-patch -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.
If n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-copies-harder	A										For performance reasons, by default, -C option finds copies only
if the original file of the copy was modified in the same
changeset.  This flag makes the command
inspect unmodified files as candidates for the source of
copy.  This is a very expensive operation for large
projects, so use it with caution.  Giving more than one
-C option has the same effect.	https://git-scm.com/docs/format-patch.html
git-format-patch -D	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/format-patch.html
git-format-patch --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not
the diff between the preimage and /dev/null. The resulting patch
is not meant to be applied with patch or git apply; this is
solely for people who want to just concentrate on reviewing the
text after the change. In addition, the output obviously lack
enough information to apply such a patch in reverse, even manually,
hence the name of the option.	https://git-scm.com/docs/format-patch.html
git-format-patch -l<num>	A										The -M and -C options require O(n^2) processing time where n
is the number of potential rename/copy targets.  This
option prevents rename/copy detection from running if
the number of rename/copy targets exceeds the specified
number.	https://git-scm.com/docs/format-patch.html
git-format-patch -O<orderfile>	A										Output the patch in the order specified in the
<orderfile>, which has one shell glob pattern per line.
This overrides the diff.orderFile configuration variable
(see git-config[1]).  To cancel diff.orderFile,
use -O/dev/null.	https://git-scm.com/docs/format-patch.html
git-format-patch -a	A										Treat all files as text.	https://git-scm.com/docs/format-patch.html
git-format-patch --text	A										Treat all files as text.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/format-patch.html
git-format-patch -b	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace
at line end, and considers all other sequences of one or
more whitespace characters to be equivalent.	https://git-scm.com/docs/format-patch.html
git-format-patch -w	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores
differences even if one line has whitespace where the other
line has none.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/format-patch.html
git-format-patch --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number
of lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/format-patch.html
git-format-patch -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --ext-diff	A										Allow an external diff helper to be executed. If you set an
external diff driver with gitattributes[5], you need
to use this option with git-log[1] and friends.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/format-patch.html
git-format-patch --textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-textconv	A										Allow (or disallow) external text conversion filters to be run
when comparing binary files. See gitattributes[5] for
details. Because textconv filters are typically a one-way
conversion, the resulting diff is suitable for human
consumption, but cannot be applied. For this reason, textconv
filters are enabled by default only for git-diff[1] and
git-log[1], but not for git-format-patch[1] or
diff plumbing commands.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be
either "none", "untracked", "dirty" or "all", which is the default.
Using "none" will consider the submodule modified when it either contains
untracked or modified files or its HEAD differs from the commit recorded
in the superproject and can be used to override any settings of the
ignore option in git-config[1] or gitmodules[5]. When
"untracked" is used submodules are not considered dirty when they only
contain untracked content (but they are still scanned for modified
content). Using "dirty" ignores all changes to the work tree of submodules,
only changes to the commits stored in the superproject are shown (this was
the behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/format-patch.html
git-format-patch --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/format-patch.html
git-format-patch --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/format-patch.html
git-format-patch --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/format-patch.html
git-format-patch -<n>	A										Prepare patches from the topmost <n> commits.	https://git-scm.com/docs/format-patch.html
git-format-patch -o <dir>	A										Use <dir> to store the resulting files, instead of the
current working directory.	https://git-scm.com/docs/format-patch.html
git-format-patch --output-directory <dir>	A										Use <dir> to store the resulting files, instead of the
current working directory.	https://git-scm.com/docs/format-patch.html
git-format-patch -n	A										Name output in [PATCH n/m] format, even with a single patch.	https://git-scm.com/docs/format-patch.html
git-format-patch --numbered	A										Name output in [PATCH n/m] format, even with a single patch.	https://git-scm.com/docs/format-patch.html
git-format-patch -N	A										Name output in [PATCH] format.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-numbered	A										Name output in [PATCH] format.	https://git-scm.com/docs/format-patch.html
git-format-patch --start-number <n>	A										Start numbering the patches at <n> instead of 1.	https://git-scm.com/docs/format-patch.html
git-format-patch --numbered-files	A										Output file names will be a simple number sequence
without the default first line of the commit appended.	https://git-scm.com/docs/format-patch.html
git-format-patch -k	A										Do not strip/add [PATCH] from the first line of the
commit log message.	https://git-scm.com/docs/format-patch.html
git-format-patch --keep-subject	A										Do not strip/add [PATCH] from the first line of the
commit log message.	https://git-scm.com/docs/format-patch.html
git-format-patch -s	A										Add Signed-off-by: line to the commit message, using
the committer identity of yourself.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/format-patch.html
git-format-patch --signoff	A										Add Signed-off-by: line to the commit message, using
the committer identity of yourself.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/format-patch.html
git-format-patch --stdout	A										Print all commits to the standard output in mbox format,
instead of creating a file for each one.	https://git-scm.com/docs/format-patch.html
git-format-patch --attach[=<boundary>]	A										Create multipart/mixed attachment, the first part of
which is the commit message and the patch itself in the
second part, with Content-Disposition: attachment.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-attach	A										Disable the creation of an attachment, overriding the
configuration setting.	https://git-scm.com/docs/format-patch.html
git-format-patch --inline[=<boundary>]	A										Create multipart/mixed attachment, the first part of
which is the commit message and the patch itself in the
second part, with Content-Disposition: inline.	https://git-scm.com/docs/format-patch.html
git-format-patch --thread[=<style>]	A										Controls addition of In-Reply-To and References headers to
make the second and subsequent mails appear as replies to the
first.  Also controls generation of the Message-Id header to
reference.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-thread	A										Controls addition of In-Reply-To and References headers to
make the second and subsequent mails appear as replies to the
first.  Also controls generation of the Message-Id header to
reference.	https://git-scm.com/docs/format-patch.html
git-format-patch --in-reply-to=Message-Id	A										Make the first mail (or all the mails with --no-thread) appear as a
reply to the given Message-Id, which avoids breaking threads to
provide a new patch series.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-if-in-upstream	A										Do not include a patch that matches a commit in
<until>..<since>.  This will examine all patches reachable
from <since> but not from <until> and compare them with the
patches being generated, and any patch that matches is
ignored.	https://git-scm.com/docs/format-patch.html
git-format-patch --subject-prefix=<Subject-Prefix>	A										Instead of the standard [PATCH] prefix in the subject
line, instead use [<Subject-Prefix>]. This
allows for useful naming of a patch series, and can be
combined with the --numbered option.	https://git-scm.com/docs/format-patch.html
git-format-patch -v <n>	A										Mark the series as the <n>-th iteration of the topic. The
output filenames have v<n> prepended to them, and the
subject prefix ("PATCH" by default, but configurable via the
--subject-prefix option) has ` v<n>` appended to it.  E.g.
--reroll-count=4 may produce v4-0001-add-makefile.patch
file that has "Subject: [PATCH v4 1/20] Add makefile" in it.	https://git-scm.com/docs/format-patch.html
git-format-patch --reroll-count=<n>	A										Mark the series as the <n>-th iteration of the topic. The
output filenames have v<n> prepended to them, and the
subject prefix ("PATCH" by default, but configurable via the
--subject-prefix option) has ` v<n>` appended to it.  E.g.
--reroll-count=4 may produce v4-0001-add-makefile.patch
file that has "Subject: [PATCH v4 1/20] Add makefile" in it.	https://git-scm.com/docs/format-patch.html
git-format-patch --to=<email>	A										Add a To: header to the email headers. This is in addition
to any configured headers, and may be used multiple times.
The negated form --no-to discards all To: headers added so
far (from config or command line).	https://git-scm.com/docs/format-patch.html
git-format-patch --cc=<email>	A										Add a Cc: header to the email headers. This is in addition
to any configured headers, and may be used multiple times.
The negated form --no-cc discards all Cc: headers added so
far (from config or command line).	https://git-scm.com/docs/format-patch.html
git-format-patch --from	A										Use ident in the From: header of each commit email. If the
author ident of the commit is not textually identical to the
provided ident, place a From: header in the body of the
message with the original author. If no ident is given, use
the committer ident.	https://git-scm.com/docs/format-patch.html
git-format-patch --from=<ident>	A										Use ident in the From: header of each commit email. If the
author ident of the commit is not textually identical to the
provided ident, place a From: header in the body of the
message with the original author. If no ident is given, use
the committer ident.	https://git-scm.com/docs/format-patch.html
git-format-patch --add-header=<header>	A										Add an arbitrary header to the email headers.  This is in addition
to any configured headers, and may be used multiple times.
For example, --add-header="Organization: git-foo".
The negated form --no-add-header discards all (To:,
Cc:, and custom) headers added so far from config or command
line.	https://git-scm.com/docs/format-patch.html
git-format-patch --[no-]cover-letter	A										In addition to the patches, generate a cover letter file
containing the branch description, shortlog and the overall diffstat.  You can
fill in a description in the file before sending it out.	https://git-scm.com/docs/format-patch.html
git-format-patch --notes[=<ref>]	A										Append the notes (see git-notes[1]) for the commit
after the three-dash line.	https://git-scm.com/docs/format-patch.html
git-format-patch --[no]-signature=<signature>	A										Add a signature to each message produced. Per RFC 3676 the signature
is separated from the body by a line with '-- ' on it. If the
signature option is omitted the signature defaults to the Git version
number.	https://git-scm.com/docs/format-patch.html
git-format-patch --signature-file=<file>	A										Works just like --signature except the signature is read from a file.	https://git-scm.com/docs/format-patch.html
git-format-patch --suffix=.<sfx>	A										Instead of using .patch as the suffix for generated
filenames, use specified suffix.  A common alternative is
--suffix=.txt.  Leaving this empty will remove the .patch
suffix.	https://git-scm.com/docs/format-patch.html
git-format-patch -q	A										Do not print the names of the generated files to standard output.	https://git-scm.com/docs/format-patch.html
git-format-patch --quiet	A										Do not print the names of the generated files to standard output.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-binary	A										Do not output contents of changes in binary files, instead
display a notice that those files changed.  Patches generated
using this option cannot be applied properly, but they are
still useful for code review.	https://git-scm.com/docs/format-patch.html
git-format-patch --zero-commit	A										Output an all-zero hash in each patch’s From header instead
of the hash of the commit.	https://git-scm.com/docs/format-patch.html
git-format-patch --base=<commit>	A										Record the base tree information to identify the state the
patch series applies to.  See the BASE TREE INFORMATION section
below for details.	https://git-scm.com/docs/format-patch.html
git-format-patch --root	A										Treat the revision argument as a <revision range>, even if it
is just a single commit (that would normally be treated as a
<since>).  Note that root commits included in the specified
range are always formatted as creation patches, independently
of this flag.	https://git-scm.com/docs/format-patch.html
git-format-patch	A										Prepare patches for e-mail submission
<pre><code>git format-patch [-k] [(-o|--output-directory) <dir> | --stdout]\n           [--no-thread | --thread[=<style>]]\n           [(--attach|--inline)[=<boundary>] | --no-attach]\n           [-s | --signoff]\n           [--signature=<signature> | --no-signature]\n           [--signature-file=<file>]\n           [-n | --numbered | -N | --no-numbered]\n           [--start-number <n>] [--numbered-files]\n           [--in-reply-to=Message-Id] [--suffix=.<sfx>]\n           [--ignore-if-in-upstream]\n           [--subject-prefix=Subject-Prefix] [(--reroll-count|-v) <n>]\n           [--to=<email>] [--cc=<email>]\n           [--[no-]cover-letter] [--quiet] [--notes[=<ref>]]\n           [<common diff options>]\n           [ <since> | <revision range> ]</pre></code>	https://git-scm.com/docs/format-patch.html
git-fsck <object>	A										An object to treat as the head of an unreachability trace.	https://git-scm.com/docs/fsck.html
git-fsck --unreachable	A										Print out objects that exist but that aren’t reachable from any
of the reference nodes.	https://git-scm.com/docs/fsck.html
git-fsck --[no-]dangling	A										Print objects that exist but that are never directly used (default).
--no-dangling can be used to omit this information from the output.	https://git-scm.com/docs/fsck.html
git-fsck --root	A										Report root nodes.	https://git-scm.com/docs/fsck.html
git-fsck --tags	A										Report tags.	https://git-scm.com/docs/fsck.html
git-fsck --cache	A										Consider any object recorded in the index also as a head node for
an unreachability trace.	https://git-scm.com/docs/fsck.html
git-fsck --no-reflogs	A										Do not consider commits that are referenced only by an
entry in a reflog to be reachable.  This option is meant
only to search for commits that used to be in a ref, but
now aren’t, but are still in that corresponding reflog.	https://git-scm.com/docs/fsck.html
git-fsck --full	A										Check not just objects in GIT_OBJECT_DIRECTORY
($GIT_DIR/objects), but also the ones found in alternate
object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES
or $GIT_DIR/objects/info/alternates,
and in packed Git archives found in $GIT_DIR/objects/pack
and corresponding pack subdirectories in alternate
object pools.  This is now default; you can turn it off
with --no-full.	https://git-scm.com/docs/fsck.html
git-fsck --connectivity-only	A										Check only the connectivity of tags, commits and tree objects. By
avoiding to unpack blobs, this speeds up the operation, at the
expense of missing corrupt objects or other problematic issues.	https://git-scm.com/docs/fsck.html
git-fsck --strict	A										Enable more strict checking, namely to catch a file mode
recorded with g+w bit set, which was created by older
versions of Git.  Existing repositories, including the
Linux kernel, Git itself, and sparse repository have old
objects that triggers this check, but it is recommended
to check new projects with this flag.	https://git-scm.com/docs/fsck.html
git-fsck --verbose	A										Be chatty.	https://git-scm.com/docs/fsck.html
git-fsck --lost-found	A										Write dangling objects into .git/lost-found/commit/ or
.git/lost-found/other/, depending on type.  If the object is
a blob, the contents are written into the file, rather than
its object name.	https://git-scm.com/docs/fsck.html
git-fsck --[no-]progress	A										Progress status is reported on the standard error stream by
default when it is attached to a terminal, unless
--no-progress or --verbose is specified. --progress forces
progress status even if the standard error stream is not
directed to a terminal.	https://git-scm.com/docs/fsck.html
git-fsck	A										Verifies the connectivity and validity of the objects in the database
<pre><code>git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n     [--[no-]full] [--strict] [--verbose] [--lost-found]\n     [--[no-]dangling] [--[no-]progress] [--connectivity-only] [<object>*]</pre></code>	https://git-scm.com/docs/fsck.html
git-gc --aggressive	A										Usually git gc runs very quickly while providing good disk
space utilization and performance.  This option will cause
git gc to more aggressively optimize the repository at the expense
of taking much more time.  The effects of this optimization are
persistent, so this option only needs to be used occasionally; every
few hundred changesets or so.	https://git-scm.com/docs/gc.html
git-gc --auto	A										With this option, git gc checks whether any housekeeping is
required; if not, it exits without performing any work.
Some git commands run git gc --auto after performing
operations that could create many loose objects.	https://git-scm.com/docs/gc.html
git-gc --prune=<date>	A										Prune loose objects older than date (default is 2 weeks ago,
overridable by the config variable gc.pruneExpire).
--prune=all prunes loose objects regardless of their age (do
not use --prune=all unless you know exactly what you are doing.
Unless the repository is quiescent, you will lose newly created
objects that haven’t been anchored with the refs and end up
corrupting your repository).  --prune is on by default.	https://git-scm.com/docs/gc.html
git-gc --no-prune	A										Do not prune any loose objects.	https://git-scm.com/docs/gc.html
git-gc --quiet	A										Suppress all progress reports.	https://git-scm.com/docs/gc.html
git-gc --force	A										Force git gc to run even if there may be another git gc
instance running on this repository.	https://git-scm.com/docs/gc.html
git-gc	A										Cleanup unnecessary files and optimize the local repository
<pre><code>git gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force]</pre></code>	https://git-scm.com/docs/gc.html
git-grep --cached	A										Instead of searching tracked files in the working tree, search
blobs registered in the index file.	https://git-scm.com/docs/grep.html
git-grep --no-index	A										Search files in the current directory that is not managed by Git.	https://git-scm.com/docs/grep.html
git-grep --untracked	A										In addition to searching in the tracked files in the working
tree, search also in untracked files.	https://git-scm.com/docs/grep.html
git-grep --no-exclude-standard	A										Also search in ignored files by not honoring the .gitignore
mechanism. Only useful with --untracked.	https://git-scm.com/docs/grep.html
git-grep --exclude-standard	A										Do not pay attention to ignored files specified via the    .gitignore
mechanism.  Only useful when searching files in the current directory
with --no-index.	https://git-scm.com/docs/grep.html
git-grep -a	A										Process binary files as if they were text.	https://git-scm.com/docs/grep.html
git-grep --text	A										Process binary files as if they were text.	https://git-scm.com/docs/grep.html
git-grep --textconv	A										Honor textconv filter settings.	https://git-scm.com/docs/grep.html
git-grep --no-textconv	A										Do not honor textconv filter settings.
This is the default.	https://git-scm.com/docs/grep.html
git-grep -i	A										Ignore case differences between the patterns and the
files.	https://git-scm.com/docs/grep.html
git-grep --ignore-case	A										Ignore case differences between the patterns and the
files.	https://git-scm.com/docs/grep.html
git-grep -I	A										Don’t match the pattern in binary files.	https://git-scm.com/docs/grep.html
git-grep --max-depth <depth>	A										For each <pathspec> given on command line, descend at most <depth>
levels of directories. A negative value means no limit.
This option is ignored if <pathspec> contains active wildcards.
In other words if "a*" matches a directory named "a*",
"*" is matched literally so --max-depth is still effective.	https://git-scm.com/docs/grep.html
git-grep -w	A										Match the pattern only at word boundary (either begin at the
beginning of a line, or preceded by a non-word character; end at
the end of a line or followed by a non-word character).	https://git-scm.com/docs/grep.html
git-grep --word-regexp	A										Match the pattern only at word boundary (either begin at the
beginning of a line, or preceded by a non-word character; end at
the end of a line or followed by a non-word character).	https://git-scm.com/docs/grep.html
git-grep -v	A										Select non-matching lines.	https://git-scm.com/docs/grep.html
git-grep --invert-match	A										Select non-matching lines.	https://git-scm.com/docs/grep.html
git-grep -h	A										By default, the command shows the filename for each
match.  -h option is used to suppress this output.
-H is there for completeness and does not do anything
except it overrides -h given earlier on the command
line.	https://git-scm.com/docs/grep.html
git-grep -H	A										By default, the command shows the filename for each
match.  -h option is used to suppress this output.
-H is there for completeness and does not do anything
except it overrides -h given earlier on the command
line.	https://git-scm.com/docs/grep.html
git-grep --full-name	A										When run from a subdirectory, the command usually
outputs paths relative to the current directory.  This
option forces paths to be output relative to the project
top directory.	https://git-scm.com/docs/grep.html
git-grep -E	A										Use POSIX extended/basic regexp for patterns.  Default
is to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep --extended-regexp	A										Use POSIX extended/basic regexp for patterns.  Default
is to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep -G	A										Use POSIX extended/basic regexp for patterns.  Default
is to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep --basic-regexp	A										Use POSIX extended/basic regexp for patterns.  Default
is to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep -P	A										Use Perl-compatible regexp for patterns. Requires libpcre to be
compiled in.	https://git-scm.com/docs/grep.html
git-grep --perl-regexp	A										Use Perl-compatible regexp for patterns. Requires libpcre to be
compiled in.	https://git-scm.com/docs/grep.html
git-grep -F	A										Use fixed strings for patterns (don’t interpret pattern
as a regex).	https://git-scm.com/docs/grep.html
git-grep --fixed-strings	A										Use fixed strings for patterns (don’t interpret pattern
as a regex).	https://git-scm.com/docs/grep.html
git-grep -n	A										Prefix the line number to matching lines.	https://git-scm.com/docs/grep.html
git-grep --line-number	A										Prefix the line number to matching lines.	https://git-scm.com/docs/grep.html
git-grep -l	A										Instead of showing every matched line, show only the
names of files that contain (or do not contain) matches.
For better compatibility with git diff, --name-only is a
synonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --files-with-matches	A										Instead of showing every matched line, show only the
names of files that contain (or do not contain) matches.
For better compatibility with git diff, --name-only is a
synonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --name-only	A										Instead of showing every matched line, show only the
names of files that contain (or do not contain) matches.
For better compatibility with git diff, --name-only is a
synonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep -L	A										Instead of showing every matched line, show only the
names of files that contain (or do not contain) matches.
For better compatibility with git diff, --name-only is a
synonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --files-without-match	A										Instead of showing every matched line, show only the
names of files that contain (or do not contain) matches.
For better compatibility with git diff, --name-only is a
synonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep -O[<pager>]	A										Open the matching files in the pager (not the output of grep).
If the pager happens to be "less" or "vi", and the user
specified only one pattern, the first file is positioned at
the first match automatically. The pager argument is
optional; if specified, it must be stuck to the option
without a space. If pager is unspecified, the default pager
will be used (see core.pager in git-config[1]).	https://git-scm.com/docs/grep.html
git-grep --open-files-in-pager[=<pager>]	A										Open the matching files in the pager (not the output of grep).
If the pager happens to be "less" or "vi", and the user
specified only one pattern, the first file is positioned at
the first match automatically. The pager argument is
optional; if specified, it must be stuck to the option
without a space. If pager is unspecified, the default pager
will be used (see core.pager in git-config[1]).	https://git-scm.com/docs/grep.html
git-grep -z	A										Output \0 instead of the character that normally follows a
file name.	https://git-scm.com/docs/grep.html
git-grep --null	A										Output \0 instead of the character that normally follows a
file name.	https://git-scm.com/docs/grep.html
git-grep -c	A										Instead of showing every matched line, show the number of
lines that match.	https://git-scm.com/docs/grep.html
git-grep --count	A										Instead of showing every matched line, show the number of
lines that match.	https://git-scm.com/docs/grep.html
git-grep --color[=<when>]	A										Show colored matches.
The value must be always (the default), never, or auto.	https://git-scm.com/docs/grep.html
git-grep --no-color	A										Turn off match highlighting, even when the configuration file
gives the default to color output.
Same as --color=never.	https://git-scm.com/docs/grep.html
git-grep --break	A										Print an empty line between matches from different files.	https://git-scm.com/docs/grep.html
git-grep --heading	A										Show the filename above the matches in that file instead of
at the start of each shown line.	https://git-scm.com/docs/grep.html
git-grep -p	A										Show the preceding line that contains the function name of
the match, unless the matching line is a function name itself.
The name is determined in the same way as git diff works out
patch hunk headers (see Defining a custom hunk-header in
gitattributes[5]).	https://git-scm.com/docs/grep.html
git-grep --show-function	A										Show the preceding line that contains the function name of
the match, unless the matching line is a function name itself.
The name is determined in the same way as git diff works out
patch hunk headers (see Defining a custom hunk-header in
gitattributes[5]).	https://git-scm.com/docs/grep.html
git-grep -<num>	A										Show <num> leading and trailing lines, and place a line
containing -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -C <num>	A										Show <num> leading and trailing lines, and place a line
containing -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --context <num>	A										Show <num> leading and trailing lines, and place a line
containing -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -A <num>	A										Show <num> trailing lines, and place a line containing
-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --after-context <num>	A										Show <num> trailing lines, and place a line containing
-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -B <num>	A										Show <num> leading lines, and place a line containing
-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --before-context <num>	A										Show <num> leading lines, and place a line containing
-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -W	A										Show the surrounding text from the previous line containing a
function name up to the one before the next function name,
effectively showing the whole function in which the match was
found.	https://git-scm.com/docs/grep.html
git-grep --function-context	A										Show the surrounding text from the previous line containing a
function name up to the one before the next function name,
effectively showing the whole function in which the match was
found.	https://git-scm.com/docs/grep.html
git-grep --threads <num>	A										Number of grep worker threads to use.
See grep.threads in CONFIGURATION for more information.	https://git-scm.com/docs/grep.html
git-grep -f <file>	A										Read patterns from <file>, one per line.	https://git-scm.com/docs/grep.html
git-grep -e	A										The next parameter is the pattern. This option has to be
used for patterns starting with - and should be used in
scripts passing user input to grep.  Multiple patterns are
combined by or.	https://git-scm.com/docs/grep.html
git-grep --and	A										Specify how multiple patterns are combined using Boolean
expressions.  --or is the default operator.  --and has
higher precedence than --or.  -e has to be used for all
patterns.	https://git-scm.com/docs/grep.html
git-grep --or	A										Specify how multiple patterns are combined using Boolean
expressions.  --or is the default operator.  --and has
higher precedence than --or.  -e has to be used for all
patterns.	https://git-scm.com/docs/grep.html
git-grep --not	A										Specify how multiple patterns are combined using Boolean
expressions.  --or is the default operator.  --and has
higher precedence than --or.  -e has to be used for all
patterns.	https://git-scm.com/docs/grep.html
git-grep ( …​ )	A										Specify how multiple patterns are combined using Boolean
expressions.  --or is the default operator.  --and has
higher precedence than --or.  -e has to be used for all
patterns.	https://git-scm.com/docs/grep.html
git-grep --all-match	A										When giving multiple pattern expressions combined with --or,
this flag is specified to limit the match to files that
have lines to match all of them.	https://git-scm.com/docs/grep.html
git-grep -q	A										Do not output matched lines; instead, exit with status 0 when
there is a match and with non-zero status when there isn’t.	https://git-scm.com/docs/grep.html
git-grep --quiet	A										Do not output matched lines; instead, exit with status 0 when
there is a match and with non-zero status when there isn’t.	https://git-scm.com/docs/grep.html
git-grep <tree>…​	A										Instead of searching tracked files in the working tree, search
blobs in the given trees.	https://git-scm.com/docs/grep.html
git-grep --	A										Signals the end of options; the rest of the parameters
are <pathspec> limiters.	https://git-scm.com/docs/grep.html
git-grep <pathspec>…​	A										If given, limit the search to paths matching at least one pattern.
Both leading paths match and glob(7) patterns are supported.	https://git-scm.com/docs/grep.html
git-grep	A										Print lines matching a pattern
<pre><code>git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n       [-v | --invert-match] [-h|-H] [--full-name]\n       [-E | --extended-regexp] [-G | --basic-regexp]\n       [-P | --perl-regexp]\n       [-F | --fixed-strings] [-n | --line-number]\n       [-l | --files-with-matches] [-L | --files-without-match]\n       [(-O | --open-files-in-pager) [<pager>]]\n       [-z | --null]\n       [-c | --count] [--all-match] [-q | --quiet]\n       [--max-depth <depth>]\n       [--color[=<when>] | --no-color]\n       [--break] [--heading] [-p | --show-function]\n       [-A <post-context>] [-B <pre-context>] [-C <context>]\n       [-W | --function-context]\n       [--threads <num>]\n       [-f <file>] [-e] <pattern>\n       [--and|--or|--not|(|)|-e <pattern>…​]\n       [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>…​]\n       [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/grep.html
git-hash-object -t <type>	A										Specify the type (default: "blob").	https://git-scm.com/docs/hash-object.html
git-hash-object -w	A										Actually write the object into the object database.	https://git-scm.com/docs/hash-object.html
git-hash-object --stdin	A										Read the object from standard input instead of from a file.	https://git-scm.com/docs/hash-object.html
git-hash-object --stdin-paths	A										Read file names from the standard input, one per line, instead
of from the command-line.	https://git-scm.com/docs/hash-object.html
git-hash-object --path	A										Hash object as it were located at the given path. The location of
file does not directly influence on the hash value, but path is
used to determine what Git filters should be applied to the object
before it can be placed to the object database, and, as result of
applying filters, the actual blob put into the object database may
differ from the given file. This option is mainly useful for hashing
temporary files located outside of the working directory or files
read from stdin.	https://git-scm.com/docs/hash-object.html
git-hash-object --no-filters	A										Hash the contents as is, ignoring any input filter that would
have been chosen by the attributes mechanism, including the end-of-line
conversion. If the file is read from standard input then this
is always implied, unless the --path option is given.	https://git-scm.com/docs/hash-object.html
git-hash-object --literally	A										Allow --stdin to hash any garbage into a loose object which might not
otherwise pass standard object parsing or git-fsck checks. Useful for
stress-testing Git itself or reproducing characteristics of corrupt or
bogus objects encountered in the wild.	https://git-scm.com/docs/hash-object.html
git-hash-object	A										Compute object ID and optionally creates a blob from a file
<pre><code>git hash-object [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>…​\ngit hash-object [-t <type>] [-w] --stdin-paths [--no-filters]</pre></code>	https://git-scm.com/docs/hash-object.html
git-help -a	A										Prints all the available commands on the standard output. This
option overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help --all	A										Prints all the available commands on the standard output. This
option overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help -g	A										Prints a list of useful guides on the standard output. This
option overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help --guides	A										Prints a list of useful guides on the standard output. This
option overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help -i	A										Display manual page for the command in the info format. The
info program will be used for that purpose.	https://git-scm.com/docs/help.html
git-help --info	A										Display manual page for the command in the info format. The
info program will be used for that purpose.	https://git-scm.com/docs/help.html
git-help -m	A										Display manual page for the command in the man format. This
option may be used to override a value set in the
help.format configuration variable.	https://git-scm.com/docs/help.html
git-help --man	A										Display manual page for the command in the man format. This
option may be used to override a value set in the
help.format configuration variable.	https://git-scm.com/docs/help.html
git-help -w	A										Display manual page for the command in the web (HTML)
format. A web browser will be used for that purpose.	https://git-scm.com/docs/help.html
git-help --web	A										Display manual page for the command in the web (HTML)
format. A web browser will be used for that purpose.	https://git-scm.com/docs/help.html
git-help	A										Display help information about Git
<pre><code>git help [-a|--all] [-g|--guide]\n       [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]</pre></code>	https://git-scm.com/docs/help.html
git-init -q	A										Only print error and warning messages; all other output will be suppressed.	https://git-scm.com/docs/init.html
git-init --quiet	A										Only print error and warning messages; all other output will be suppressed.	https://git-scm.com/docs/init.html
git-init --bare	A										Create a bare repository. If GIT_DIR environment is not set, it is set to the
current working directory.	https://git-scm.com/docs/init.html
git-init --template=<template_directory>	A										Specify the directory from which templates will be used.  (See the "TEMPLATE
DIRECTORY" section below.)	https://git-scm.com/docs/init.html
git-init --separate-git-dir=<git dir>	A										Instead of initializing the repository as a directory to either $GIT_DIR or
./.git/, create a text file there containing the path to the actual
repository.  This file acts as filesystem-agnostic Git symbolic link to the
repository.	https://git-scm.com/docs/init.html
git-init --shared[=(false|true|umask|group|all|world|everybody|0xxx)]	A										Specify that the Git repository is to be shared amongst several users.  This
allows users belonging to the same group to push into that
repository.  When specified, the config variable "core.sharedRepository" is
set so that files and directories under $GIT_DIR are created with the
requested permissions.  When not specified, Git will use permissions reported
by umask(2).	https://git-scm.com/docs/init.html
git-init umask (or false)	A										Use permissions reported by umask(2). The default, when --shared is not
specified.	https://git-scm.com/docs/init.html
git-init group (or true)	A										Make the repository group-writable, (and g+sx, since the git group may be not
the primary group of all users). This is used to loosen the permissions of an
otherwise safe umask(2) value. Note that the umask still applies to the other
permission bits (e.g. if umask is 0022, using group will not remove read
privileges from other (non-group) users). See 0xxx for how to exactly specify
the repository permissions.	https://git-scm.com/docs/init.html
git-init all (or world or everybody)	A										Same as group, but make the repository readable by all users.	https://git-scm.com/docs/init.html
git-init 0xxx	A										0xxx is an octal number and each file will have mode 0xxx. 0xxx will
override users' umask(2) value (and not only loosen permissions as group and
all does). 0640 will create a repository which is group-readable, but not
group-writable or accessible to others. 0660 will create a repo that is
readable and writable to the current user and group, but inaccessible to others.	https://git-scm.com/docs/init.html
git-init	A										Create an empty Git repository or reinitialize an existing one
<pre><code>git init [-q | --quiet] [--bare] [--template=<template_directory>]\n      [--separate-git-dir <git dir>]\n      [--shared[=<permissions>]] [directory]</pre></code>	https://git-scm.com/docs/init.html
git-instaweb -l	A										Only bind the web server to the local IP (127.0.0.1).	https://git-scm.com/docs/instaweb.html
git-instaweb --local	A										Only bind the web server to the local IP (127.0.0.1).	https://git-scm.com/docs/instaweb.html
git-instaweb -d	A										The HTTP daemon command-line that will be executed.
Command-line options may be specified here, and the
configuration file will be added at the end of the command-line.
Currently apache2, lighttpd, mongoose, plackup and webrick are supported.
(Default: lighttpd)	https://git-scm.com/docs/instaweb.html
git-instaweb --httpd	A										The HTTP daemon command-line that will be executed.
Command-line options may be specified here, and the
configuration file will be added at the end of the command-line.
Currently apache2, lighttpd, mongoose, plackup and webrick are supported.
(Default: lighttpd)	https://git-scm.com/docs/instaweb.html
git-instaweb -m	A										The module path (only needed if httpd is Apache).
(Default: /usr/lib/apache2/modules)	https://git-scm.com/docs/instaweb.html
git-instaweb --module-path	A										The module path (only needed if httpd is Apache).
(Default: /usr/lib/apache2/modules)	https://git-scm.com/docs/instaweb.html
git-instaweb -p	A										The port number to bind the httpd to.  (Default: 1234)	https://git-scm.com/docs/instaweb.html
git-instaweb --port	A										The port number to bind the httpd to.  (Default: 1234)	https://git-scm.com/docs/instaweb.html
git-instaweb -b	A										The web browser that should be used to view the gitweb
page. This will be passed to the git web{litdd}browse helper
script along with the URL of the gitweb instance. See
git-web{litdd}browse[1] for more information about this. If
the script fails, the URL will be printed to stdout.	https://git-scm.com/docs/instaweb.html
git-instaweb --browser	A										The web browser that should be used to view the gitweb
page. This will be passed to the git web{litdd}browse helper
script along with the URL of the gitweb instance. See
git-web{litdd}browse[1] for more information about this. If
the script fails, the URL will be printed to stdout.	https://git-scm.com/docs/instaweb.html
git-instaweb start	A										Start the httpd instance and exit.  Regenerate configuration files
as necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb --start	A										Start the httpd instance and exit.  Regenerate configuration files
as necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb stop	A										Stop the httpd instance and exit.  This does not generate
any of the configuration files for spawning a new instance,
nor does it close the browser.	https://git-scm.com/docs/instaweb.html
git-instaweb --stop	A										Stop the httpd instance and exit.  This does not generate
any of the configuration files for spawning a new instance,
nor does it close the browser.	https://git-scm.com/docs/instaweb.html
git-instaweb restart	A										Restart the httpd instance and exit.  Regenerate configuration files
as necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb --restart	A										Restart the httpd instance and exit.  Regenerate configuration files
as necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb	A										Instantly browse your working repository in gitweb
<pre><code>git instaweb [--local] [--httpd=<httpd>] [--port=<port>]\n               [--browser=<browser>]\ngit instaweb [--start] [--stop] [--restart]</pre></code>	https://git-scm.com/docs/instaweb.html
git-log --follow	A										Continue listing the history of a file beyond renames
(works only for a single file).	https://git-scm.com/docs/log.html
git-log --no-decorate	A										Print out the ref names of any commits that are shown. If short is
specified, the ref name prefixes refs/heads/, refs/tags/ and
refs/remotes/ will not be printed. If full is specified, the
full ref name (including prefix) will be printed. If auto is
specified, then if the output is going to a terminal, the ref names
are shown as if short were given, otherwise no ref names are
shown. The default option is short.	https://git-scm.com/docs/log.html
git-log --decorate[=short|full|auto|no]	A										Print out the ref names of any commits that are shown. If short is
specified, the ref name prefixes refs/heads/, refs/tags/ and
refs/remotes/ will not be printed. If full is specified, the
full ref name (including prefix) will be printed. If auto is
specified, then if the output is going to a terminal, the ref names
are shown as if short were given, otherwise no ref names are
shown. The default option is short.	https://git-scm.com/docs/log.html
git-log --source	A										Print out the ref name given on the command line by which each
commit was reached.	https://git-scm.com/docs/log.html
git-log --use-mailmap	A										Use mailmap file to map author and committer names and email
addresses to canonical real names and email addresses. See
git-shortlog[1].	https://git-scm.com/docs/log.html
git-log --full-diff	A										Without this flag, git log -p <path>... shows commits that
touch the specified paths, and diffs about the same specified
paths.  With this, the full diff is shown for commits that touch
the specified paths; this means that "<path>…​" limits only
commits, and doesn’t limit diff for those commits.	https://git-scm.com/docs/log.html
git-log --log-size	A										Include a line “log size <number>” in the output for each commit,
where <number> is the length of that commit’s message in bytes.
Intended to speed up tools that read log messages from git log
output by allowing them to allocate space in advance.	https://git-scm.com/docs/log.html
git-log -L <start>,<end>:<file>	A										Trace the evolution of the line range given by "<start>,<end>"
(or the function name regex <funcname>) within the <file>.  You may
not give any pathspec limiters.  This is currently limited to
a walk starting from a single revision, i.e., you may only
give zero or one positive revision arguments.
You can specify this option more than once.	https://git-scm.com/docs/log.html
git-log -L :<funcname>:<file>	A										Trace the evolution of the line range given by "<start>,<end>"
(or the function name regex <funcname>) within the <file>.  You may
not give any pathspec limiters.  This is currently limited to
a walk starting from a single revision, i.e., you may only
give zero or one positive revision arguments.
You can specify this option more than once.	https://git-scm.com/docs/log.html
git-log <revision range>	A										Show only commits in the specified revision range.  When no
<revision range> is specified, it defaults to HEAD (i.e. the
whole history leading to the current commit).  origin..HEAD
specifies all the commits reachable from the current commit
(i.e. HEAD), but not from origin. For a complete list of
ways to spell <revision range>, see the Specifying Ranges
section of gitrevisions[7].	https://git-scm.com/docs/log.html
git-log [\--] <path>…​	A										Show only commits that are enough to explain how the files
that match the specified paths came to be.  See History
Simplification below for details and other simplification
modes.	https://git-scm.com/docs/log.html
git-log -<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log -n <number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log --max-count=<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log --skip=<number>	A										Skip number commits before starting to show the commit output.	https://git-scm.com/docs/log.html
git-log --since=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/log.html
git-log --after=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/log.html
git-log --until=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/log.html
git-log --before=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/log.html
git-log --author=<pattern>	A										Limit the commits output to ones with author/committer
header lines that match the specified pattern (regular
expression).  With more than one --author=<pattern>,
commits whose author matches any of the given patterns are
chosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/log.html
git-log --committer=<pattern>	A										Limit the commits output to ones with author/committer
header lines that match the specified pattern (regular
expression).  With more than one --author=<pattern>,
commits whose author matches any of the given patterns are
chosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/log.html
git-log --grep-reflog=<pattern>	A										Limit the commits output to ones with reflog entries that
match the specified pattern (regular expression). With
more than one --grep-reflog, commits whose reflog message
matches any of the given patterns are chosen.  It is an
error to use this option unless --walk-reflogs is in use.	https://git-scm.com/docs/log.html
git-log --grep=<pattern>	A										Limit the commits output to ones with log message that
matches the specified pattern (regular expression).  With
more than one --grep=<pattern>, commits whose message
matches any of the given patterns are chosen (but see
--all-match).	https://git-scm.com/docs/log.html
git-log --all-match	A										Limit the commits output to ones that match all given --grep,
instead of ones that match at least one.	https://git-scm.com/docs/log.html
git-log --invert-grep	A										Limit the commits output to ones with log message that do not
match the pattern specified with --grep=<pattern>.	https://git-scm.com/docs/log.html
git-log -i	A										Match the regular expression limiting patterns without regard to letter
case.	https://git-scm.com/docs/log.html
git-log --regexp-ignore-case	A										Match the regular expression limiting patterns without regard to letter
case.	https://git-scm.com/docs/log.html
git-log --basic-regexp	A										Consider the limiting patterns to be basic regular expressions;
this is the default.	https://git-scm.com/docs/log.html
git-log -E	A										Consider the limiting patterns to be extended regular expressions
instead of the default basic regular expressions.	https://git-scm.com/docs/log.html
git-log --extended-regexp	A										Consider the limiting patterns to be extended regular expressions
instead of the default basic regular expressions.	https://git-scm.com/docs/log.html
git-log -F	A										Consider the limiting patterns to be fixed strings (don’t interpret
pattern as a regular expression).	https://git-scm.com/docs/log.html
git-log --fixed-strings	A										Consider the limiting patterns to be fixed strings (don’t interpret
pattern as a regular expression).	https://git-scm.com/docs/log.html
git-log --perl-regexp	A										Consider the limiting patterns to be Perl-compatible regular expressions.
Requires libpcre to be compiled in.	https://git-scm.com/docs/log.html
git-log --remove-empty	A										Stop when a given path disappears from the tree.	https://git-scm.com/docs/log.html
git-log --merges	A										Print only merge commits. This is exactly the same as --min-parents=2.	https://git-scm.com/docs/log.html
git-log --no-merges	A										Do not print commits with more than one parent. This is
exactly the same as --max-parents=1.	https://git-scm.com/docs/log.html
git-log --min-parents=<number>	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --max-parents=<number>	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --no-min-parents	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --no-max-parents	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --first-parent	A										Follow only the first parent commit upon seeing a merge
commit.  This option can give a better overview when
viewing the evolution of a particular topic branch,
because merges into a topic branch tend to be only about
adjusting to updated upstream from time to time, and
this option allows you to ignore the individual commits
brought in to your history by such a merge. Cannot be
combined with --bisect.	https://git-scm.com/docs/log.html
git-log --not	A										Reverses the meaning of the ^ prefix (or lack thereof)
for all following revision specifiers, up to the next --not.	https://git-scm.com/docs/log.html
git-log --all	A										Pretend as if all the refs in refs/ are listed on the
command line as <commit>.	https://git-scm.com/docs/log.html
git-log --branches[=<pattern>]	A										Pretend as if all the refs in refs/heads are listed
on the command line as <commit>. If <pattern> is given, limit
branches to ones matching given shell glob. If pattern lacks ?,
*, or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --tags[=<pattern>]	A										Pretend as if all the refs in refs/tags are listed
on the command line as <commit>. If <pattern> is given, limit
tags to ones matching given shell glob. If pattern lacks ?, *,
or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --remotes[=<pattern>]	A										Pretend as if all the refs in refs/remotes are listed
on the command line as <commit>. If <pattern> is given, limit
remote-tracking branches to ones matching given shell glob.
If pattern lacks ?, *, or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --glob=<glob-pattern>	A										Pretend as if all the refs matching shell glob <glob-pattern>
are listed on the command line as <commit>. Leading refs/,
is automatically prepended if missing. If pattern lacks ?, *,
or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,
--branches, --tags, --remotes, or --glob would otherwise
consider. Repetitions of this option accumulate exclusion patterns
up to the next --all, --branches, --tags, --remotes, or
--glob option (other options or arguments do not clear
accumulated patterns).	https://git-scm.com/docs/log.html
git-log --reflog	A										Pretend as if all objects mentioned by reflogs are listed on the
command line as <commit>.	https://git-scm.com/docs/log.html
git-log --ignore-missing	A										Upon seeing an invalid object name in the input, pretend as if
the bad input was not given.	https://git-scm.com/docs/log.html
git-log --bisect	A										Pretend as if the bad bisection ref refs/bisect/bad
was listed and as if it was followed by --not and the good
bisection refs refs/bisect/good-* on the command
line. Cannot be combined with --first-parent.	https://git-scm.com/docs/log.html
git-log --stdin	A										In addition to the <commit> listed on the command
line, read them from the standard input. If a -- separator is
seen, stop reading commits and start reading paths to limit the
result.	https://git-scm.com/docs/log.html
git-log --cherry-mark	A										Like --cherry-pick (see below) but mark equivalent commits
with = rather than omitting them, and inequivalent ones with +.	https://git-scm.com/docs/log.html
git-log --cherry-pick	A										Omit any commit that introduces the same change as
another commit on the “other side” when the set of
commits are limited with symmetric difference.	https://git-scm.com/docs/log.html
git-log --left-only	A										List only commits on the respective side of a symmetric range,
i.e. only those which would be marked < resp. > by
--left-right.	https://git-scm.com/docs/log.html
git-log --right-only	A										List only commits on the respective side of a symmetric range,
i.e. only those which would be marked < resp. > by
--left-right.	https://git-scm.com/docs/log.html
git-log --cherry	A										A synonym for --right-only --cherry-mark --no-merges; useful to
limit the output to the commits on our side and mark those that
have been applied to the other side of a forked history with
git log --cherry upstream...mybranch, similar to
git cherry upstream mybranch.	https://git-scm.com/docs/log.html
git-log -g	A										Instead of walking the commit ancestry chain, walk
reflog entries from the most recent one to older ones.
When this option is used you cannot specify commits to
exclude (that is, ^commit, commit1..commit2,
and commit1...commit2 notations cannot be used).	https://git-scm.com/docs/log.html
git-log --walk-reflogs	A										Instead of walking the commit ancestry chain, walk
reflog entries from the most recent one to older ones.
When this option is used you cannot specify commits to
exclude (that is, ^commit, commit1..commit2,
and commit1...commit2 notations cannot be used).	https://git-scm.com/docs/log.html
git-log --merge	A										After a failed merge, show refs that touch files having a
conflict and don’t exist on all heads to merge.	https://git-scm.com/docs/log.html
git-log --boundary	A										Output excluded boundary commits. Boundary commits are
prefixed with -.	https://git-scm.com/docs/log.html
git-log <paths>	A										Commits modifying the given <paths> are selected.	https://git-scm.com/docs/log.html
git-log --simplify-by-decoration	A										Commits that are referred by some branch or tag are selected.	https://git-scm.com/docs/log.html
git-log Default mode	A										Simplifies the history to the simplest history explaining the
final state of the tree. Simplest because it prunes some side
branches if the end result is the same (i.e. merging branches
with the same content)	https://git-scm.com/docs/log.html
git-log --full-history	A										Same as the default mode, but does not prune some history.	https://git-scm.com/docs/log.html
git-log --dense	A										Only the selected commits are shown, plus some to have a
meaningful history.	https://git-scm.com/docs/log.html
git-log --sparse	A										All commits in the simplified history are shown.	https://git-scm.com/docs/log.html
git-log --simplify-merges	A										Additional option to --full-history to remove some needless
merges from the resulting history, as there are no selected
commits contributing to this merge.	https://git-scm.com/docs/log.html
git-log --ancestry-path	A										When given a range of commits to display (e.g. commit1..commit2
or commit2 ^commit1), only display commits that exist
directly on the ancestry chain between the commit1 and
commit2, i.e. commits that are both descendants of commit1,
and ancestors of commit2.	https://git-scm.com/docs/log.html
git-log Default mode	A										Commits are included if they are not TREESAME to any parent
(though this can be changed, see --sparse below).  If the
commit was a merge, and it was TREESAME to one parent, follow
only that parent.  (Even if there are several TREESAME
parents, follow only one of them.)  Otherwise, follow all
parents.	https://git-scm.com/docs/log.html
git-log --full-history without parent rewriting	A										This mode differs from the default in one point: always follow
all parents of a merge, even if it is TREESAME to one of them.
Even if more than one side of the merge has commits that are
included, this does not imply that the merge itself is!  In
the example, we get	https://git-scm.com/docs/log.html
git-log --full-history with parent rewriting	A										Ordinary commits are only included if they are !TREESAME
(though this can be changed, see --sparse below).	https://git-scm.com/docs/log.html
git-log --dense	A										Commits that are walked are included if they are not TREESAME
to any parent.	https://git-scm.com/docs/log.html
git-log --sparse	A										All commits that are walked are included.	https://git-scm.com/docs/log.html
git-log --simplify-merges	A										First, build a history graph in the same way that
--full-history with parent rewriting does (see above).	https://git-scm.com/docs/log.html
git-log --ancestry-path	A										Limit the displayed commits to those directly on the ancestry
chain between the “from” and “to” commits in the given commit
range. I.e. only display commits that are ancestor of the “to”
commit and descendants of the “from” commit.	https://git-scm.com/docs/log.html
git-log --date-order	A										Show no parents before all of its children are shown, but
otherwise show commits in the commit timestamp order.	https://git-scm.com/docs/log.html
git-log --author-date-order	A										Show no parents before all of its children are shown, but
otherwise show commits in the author timestamp order.	https://git-scm.com/docs/log.html
git-log --topo-order	A										Show no parents before all of its children are shown, and
avoid showing commits on multiple lines of history
intermixed.	https://git-scm.com/docs/log.html
git-log --reverse	A										Output the commits in reverse order.
Cannot be combined with --walk-reflogs.	https://git-scm.com/docs/log.html
git-log --no-walk[=(sorted|unsorted)]	A										Only show the given commits, but do not traverse their ancestors.
This has no effect if a range is specified. If the argument
unsorted is given, the commits are shown in the order they were
given on the command line. Otherwise (if sorted or no argument
was given), the commits are shown in reverse chronological order
by commit time.
Cannot be combined with --graph.	https://git-scm.com/docs/log.html
git-log --do-walk	A										Overrides a previous --no-walk.	https://git-scm.com/docs/log.html
git-log --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/log.html
git-log --format=<format>	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/log.html
git-log --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object
name, show only a partial prefix.  Non default number of
digits can be specified with "--abbrev=<n>" (which also modifies
diff output, if it is displayed).	https://git-scm.com/docs/log.html
git-log --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates
--abbrev-commit and those options which imply it such as
"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/log.html
git-log --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"
used together.	https://git-scm.com/docs/log.html
git-log --encoding=<encoding>	A										The commit objects record the encoding used for the log message
in their encoding header; this option can be used to tell the
command to re-code the commit log message in the encoding
preferred by the user.  For non plumbing commands this
defaults to UTF-8. Note that if an object claims to be encoded
in X and we are outputting in X, we will output the object
verbatim; this means that invalid sequences in the original
commit may be copied to the output.	https://git-scm.com/docs/log.html
git-log --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/log.html
git-log --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/log.html
git-log --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/log.html
git-log --notes[=<treeish>]	A										Show the notes (see git-notes[1]) that annotate the
commit, when showing the commit log message.  This is the default
for git log, git show and git whatchanged commands when
there is no --pretty, --format, or --oneline option given
on the command line.	https://git-scm.com/docs/log.html
git-log --no-notes	A										Do not show notes. This negates the above --notes option, by
resetting the list of notes refs from which notes are shown.
Options are parsed in the order given on the command line, so e.g.
"--notes --notes=foo --no-notes --notes=bar" will only show notes
from "refs/notes/bar".	https://git-scm.com/docs/log.html
git-log --show-notes[=<treeish>]	A										These options are deprecated. Use the above --notes/--no-notes
options instead.	https://git-scm.com/docs/log.html
git-log --[no-]standard-notes	A										These options are deprecated. Use the above --notes/--no-notes
options instead.	https://git-scm.com/docs/log.html
git-log --show-signature	A										Check the validity of a signed commit object by passing the signature
to gpg --verify and show the output.	https://git-scm.com/docs/log.html
git-log --relative-date	A										Synonym for --date=relative.	https://git-scm.com/docs/log.html
git-log --date=<format>	A										Only takes effect for dates shown in human-readable format, such
as when using --pretty. log.date config variable sets a default
value for the log command’s --date option. By default, dates
are shown in the original time zone (either committer’s or
author’s). If -local is appended to the format (e.g.,
iso-local), the user’s local time zone is used instead.	https://git-scm.com/docs/log.html
git-log --parents	A										Print also the parents of the commit (in the form "commit parent…​").
Also enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/log.html
git-log --children	A										Print also the children of the commit (in the form "commit child…​").
Also enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/log.html
git-log --left-right	A										Mark which side of a symmetric diff a commit is reachable from.
Commits from the left side are prefixed with < and those from
the right with >.  If combined with --boundary, those
commits are prefixed with -.	https://git-scm.com/docs/log.html
git-log --graph	A										Draw a text-based graphical representation of the commit history
on the left hand side of the output.  This may cause extra lines
to be printed in between commits, in order for the graph history
to be drawn properly.
Cannot be combined with --no-walk.	https://git-scm.com/docs/log.html
git-log --show-linear-break[=<barrier>]	A										When --graph is not used, all history branches are flattened
which can make it hard to see that the two consecutive commits
do not belong to a linear branch. This option puts a barrier
in between them in that case. If <barrier> is specified, it
is the string that will be shown instead of the default one.	https://git-scm.com/docs/log.html
git-log -c	A										With this option, diff output for a merge commit
shows the differences from each of the parents to the merge result
simultaneously instead of showing pairwise diff between a parent
and the result one at a time. Furthermore, it lists only files
which were modified from all parents.	https://git-scm.com/docs/log.html
git-log --cc	A										This flag implies the -c option and further compresses the
patch output by omitting uninteresting hunks whose contents in
the parents have only two variants and the merge result picks
one of them without modification.	https://git-scm.com/docs/log.html
git-log -m	A										This flag makes the merge commits show the full diff like
regular commits; for each merge parent, a separate log entry
and diff is generated. An exception is that only diff against
the first parent is shown when --first-parent option is given;
in that case, the output represents the changes the merge
brought into the then-current branch.	https://git-scm.com/docs/log.html
git-log -r	A										Show recursive diffs.	https://git-scm.com/docs/log.html
git-log -t	A										Show the tree objects in the diff output. This implies -r.	https://git-scm.com/docs/log.html
git-log	A										Show commit logs
<pre><code>git log [<options>] [<revision range>] [[\--] <path>…​]</pre></code>	https://git-scm.com/docs/log.html
git-ls-files -c	A										Show cached files in the output (default)	https://git-scm.com/docs/ls-files.html
git-ls-files --cached	A										Show cached files in the output (default)	https://git-scm.com/docs/ls-files.html
git-ls-files -d	A										Show deleted files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --deleted	A										Show deleted files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -m	A										Show modified files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --modified	A										Show modified files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -o	A										Show other (i.e. untracked) files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --others	A										Show other (i.e. untracked) files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -i	A										Show only ignored files in the output. When showing files in the
index, print only those matched by an exclude pattern. When
showing "other" files, show only those matched by an exclude
pattern.	https://git-scm.com/docs/ls-files.html
git-ls-files --ignored	A										Show only ignored files in the output. When showing files in the
index, print only those matched by an exclude pattern. When
showing "other" files, show only those matched by an exclude
pattern.	https://git-scm.com/docs/ls-files.html
git-ls-files -s	A										Show staged contents' object name, mode bits and stage number in the output.	https://git-scm.com/docs/ls-files.html
git-ls-files --stage	A										Show staged contents' object name, mode bits and stage number in the output.	https://git-scm.com/docs/ls-files.html
git-ls-files --directory	A										If a whole directory is classified as "other", show just its
name (with a trailing slash) and not its whole contents.	https://git-scm.com/docs/ls-files.html
git-ls-files --no-empty-directory	A										Do not list empty directories. Has no effect without --directory.	https://git-scm.com/docs/ls-files.html
git-ls-files -u	A										Show unmerged files in the output (forces --stage)	https://git-scm.com/docs/ls-files.html
git-ls-files --unmerged	A										Show unmerged files in the output (forces --stage)	https://git-scm.com/docs/ls-files.html
git-ls-files -k	A										Show files on the filesystem that need to be removed due
to file/directory conflicts for checkout-index to
succeed.	https://git-scm.com/docs/ls-files.html
git-ls-files --killed	A										Show files on the filesystem that need to be removed due
to file/directory conflicts for checkout-index to
succeed.	https://git-scm.com/docs/ls-files.html
git-ls-files -z	A										\0 line termination on output.	https://git-scm.com/docs/ls-files.html
git-ls-files -x <pattern>	A										Skip untracked files matching pattern.
Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS
below for more information.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude=<pattern>	A										Skip untracked files matching pattern.
Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS
below for more information.	https://git-scm.com/docs/ls-files.html
git-ls-files -X <file>	A										Read exclude patterns from <file>; 1 per line.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-from=<file>	A										Read exclude patterns from <file>; 1 per line.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-per-directory=<file>	A										Read additional exclude patterns that apply only to the
directory and its subdirectories in <file>.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-standard	A										Add the standard Git exclusions: .git/info/exclude, .gitignore
in each directory, and the user’s global exclusion file.	https://git-scm.com/docs/ls-files.html
git-ls-files --error-unmatch	A										If any <file> does not appear in the index, treat this as an
error (return 1).	https://git-scm.com/docs/ls-files.html
git-ls-files --with-tree=<tree-ish>	A										When using --error-unmatch to expand the user supplied
<file> (i.e. path pattern) arguments to paths, pretend
that paths which were removed in the index since the
named <tree-ish> are still present.  Using this option
with -s or -u options does not make any sense.	https://git-scm.com/docs/ls-files.html
git-ls-files -t	A										This feature is semi-deprecated. For scripting purpose,
git-status[1] --porcelain and
git-diff-files[1] --name-status are almost always
superior alternatives, and users should look at
git-status[1] --short or git-diff[1]
--name-status for more user-friendly alternatives.	https://git-scm.com/docs/ls-files.html
git-ls-files H	A										cached	https://git-scm.com/docs/ls-files.html
git-ls-files S	A										skip-worktree	https://git-scm.com/docs/ls-files.html
git-ls-files M	A										unmerged	https://git-scm.com/docs/ls-files.html
git-ls-files R	A										removed/deleted	https://git-scm.com/docs/ls-files.html
git-ls-files C	A										modified/changed	https://git-scm.com/docs/ls-files.html
git-ls-files K	A										to be killed	https://git-scm.com/docs/ls-files.html
git-ls-files ?	A										other	https://git-scm.com/docs/ls-files.html
git-ls-files -v	A										Similar to -t, but use lowercase letters for files
that are marked as assume unchanged (see
git-update-index[1]).	https://git-scm.com/docs/ls-files.html
git-ls-files --full-name	A										When run from a subdirectory, the command usually
outputs paths relative to the current directory.  This
option forces paths to be output relative to the project
top directory.	https://git-scm.com/docs/ls-files.html
git-ls-files --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object
lines, show only a partial prefix.
Non default number of digits can be specified with --abbrev=<n>.	https://git-scm.com/docs/ls-files.html
git-ls-files --debug	A										After each line that describes a file, add more data about its
cache entry.  This is intended to show as much information as
possible for manual inspection; the exact format may change at
any time.	https://git-scm.com/docs/ls-files.html
git-ls-files --eol	A										Show <eolinfo> and <eolattr> of files.
<eolinfo> is the file content identification used by Git when
the "text" attribute is "auto" (or not set and core.autocrlf is not false).
<eolinfo> is either "-text", "none", "lf", "crlf", "mixed" or "".	https://git-scm.com/docs/ls-files.html
git-ls-files --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/ls-files.html
git-ls-files <file>	A										Files to show. If no files are given all files which match the other
specified criteria are shown.	https://git-scm.com/docs/ls-files.html
git-ls-files	A										Show information about files in the index and the working tree
<pre><code>git ls-files [-z] [-t] [-v]\n        (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*\n        (-[c|d|o|i|s|u|k|m])*\n        [--eol]\n        [-x <pattern>|--exclude=<pattern>]\n        [-X <file>|--exclude-from=<file>]\n        [--exclude-per-directory=<file>]\n        [--exclude-standard]\n        [--error-unmatch] [--with-tree=<tree-ish>]\n        [--full-name] [--abbrev] [--] [<file>…​]</pre></code>	https://git-scm.com/docs/ls-files.html
git-merge-base -a	A										Output all merge bases for the commits, instead of just one.	https://git-scm.com/docs/merge-base.html
git-merge-base --all	A										Output all merge bases for the commits, instead of just one.	https://git-scm.com/docs/merge-base.html
git-merge-base	A										Find as good common ancestors as possible for a merge
<pre><code>git merge-base [-a|--all] <commit> <commit>…​\ngit merge-base [-a|--all] --octopus <commit>…​\ngit merge-base --is-ancestor <commit> <commit>\ngit merge-base --independent <commit>…​\ngit merge-base --fork-point <ref> [<commit>]</pre></code>	https://git-scm.com/docs/merge-base.html
git-merge --commit	A										Perform the merge and commit the result. This option can
be used to override --no-commit.	https://git-scm.com/docs/merge.html
git-merge --no-commit	A										Perform the merge and commit the result. This option can
be used to override --no-commit.	https://git-scm.com/docs/merge.html
git-merge --edit	A											Invoke an editor before committing successful mechanical merge to
	further edit the auto-generated merge message, so that the user
	can explain and justify the merge. The --no-edit option can be
	used to accept the auto-generated message (this is generally
	discouraged).
The --edit (or -e) option is still useful if you are
giving a draft message with the -m option from the command line
and want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge -e	A											Invoke an editor before committing successful mechanical merge to
	further edit the auto-generated merge message, so that the user
	can explain and justify the merge. The --no-edit option can be
	used to accept the auto-generated message (this is generally
	discouraged).
The --edit (or -e) option is still useful if you are
giving a draft message with the -m option from the command line
and want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge --no-edit	A											Invoke an editor before committing successful mechanical merge to
	further edit the auto-generated merge message, so that the user
	can explain and justify the merge. The --no-edit option can be
	used to accept the auto-generated message (this is generally
	discouraged).
The --edit (or -e) option is still useful if you are
giving a draft message with the -m option from the command line
and want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge --ff	A										When the merge resolves as a fast-forward, only update the branch
pointer, without creating a merge commit.  This is the default
behavior.	https://git-scm.com/docs/merge.html
git-merge --no-ff	A										Create a merge commit even when the merge resolves as a
fast-forward.  This is the default behaviour when merging an
annotated (and possibly signed) tag.	https://git-scm.com/docs/merge.html
git-merge --ff-only	A										Refuse to merge and exit with a non-zero status unless the
current HEAD is already up-to-date or the merge can be
resolved as a fast-forward.	https://git-scm.com/docs/merge.html
git-merge --log[=<n>]	A										In addition to branch names, populate the log message with
one-line descriptions from at most <n> actual commits that are being
merged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/merge.html
git-merge --no-log	A										In addition to branch names, populate the log message with
one-line descriptions from at most <n> actual commits that are being
merged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/merge.html
git-merge --stat	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge -n	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge --no-stat	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge --squash	A										Produce the working tree and index state as if a real merge
happened (except for the merge information), but do not actually
make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD
(to cause the next git commit command to create a merge
commit).  This allows you to create a single commit on top of
the current branch whose effect is the same as merging another
branch (or more in case of an octopus).	https://git-scm.com/docs/merge.html
git-merge --no-squash	A										Produce the working tree and index state as if a real merge
happened (except for the merge information), but do not actually
make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD
(to cause the next git commit command to create a merge
commit).  This allows you to create a single commit on top of
the current branch whose effect is the same as merging another
branch (or more in case of an octopus).	https://git-scm.com/docs/merge.html
git-merge -s <strategy>	A										Use the given merge strategy; can be supplied more than
once to specify them in the order they should be tried.
If there is no -s option, a built-in list of strategies
is used instead (git merge-recursive when merging a single
head, git merge-octopus otherwise).	https://git-scm.com/docs/merge.html
git-merge --strategy=<strategy>	A										Use the given merge strategy; can be supplied more than
once to specify them in the order they should be tried.
If there is no -s option, a built-in list of strategies
is used instead (git merge-recursive when merging a single
head, git merge-octopus otherwise).	https://git-scm.com/docs/merge.html
git-merge -X <option>	A										Pass merge strategy specific option through to the merge
strategy.	https://git-scm.com/docs/merge.html
git-merge --strategy-option=<option>	A										Pass merge strategy specific option through to the merge
strategy.	https://git-scm.com/docs/merge.html
git-merge --verify-signatures	A										Verify that the tip commit of the side branch being merged is
signed with a valid key, i.e. a key that has a valid uid: in the
default trust model, this means the signing key has been signed by
a trusted key.  If the tip commit of the side branch is not signed
with a valid key, the merge is aborted.	https://git-scm.com/docs/merge.html
git-merge --no-verify-signatures	A										Verify that the tip commit of the side branch being merged is
signed with a valid key, i.e. a key that has a valid uid: in the
default trust model, this means the signing key has been signed by
a trusted key.  If the tip commit of the side branch is not signed
with a valid key, the merge is aborted.	https://git-scm.com/docs/merge.html
git-merge --summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be
removed in the future.	https://git-scm.com/docs/merge.html
git-merge --no-summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be
removed in the future.	https://git-scm.com/docs/merge.html
git-merge -q	A										Operate quietly. Implies --no-progress.	https://git-scm.com/docs/merge.html
git-merge --quiet	A										Operate quietly. Implies --no-progress.	https://git-scm.com/docs/merge.html
git-merge -v	A										Be verbose.	https://git-scm.com/docs/merge.html
git-merge --verbose	A										Be verbose.	https://git-scm.com/docs/merge.html
git-merge --progress	A										Turn progress on/off explicitly. If neither is specified,
progress is shown if standard error is connected to a terminal.
Note that not all merge strategies may support progress
reporting.	https://git-scm.com/docs/merge.html
git-merge --no-progress	A										Turn progress on/off explicitly. If neither is specified,
progress is shown if standard error is connected to a terminal.
Note that not all merge strategies may support progress
reporting.	https://git-scm.com/docs/merge.html
git-merge --allow-unrelated-histories	A										By default, git merge command refuses to merge histories
that do not share a common ancestor.  This option can be
used to override this safety when merging histories of two
projects that started their lives independently. As that is
a very rare occasion, no configuration variable to enable
this by default exists and will not be added.	https://git-scm.com/docs/merge.html
git-merge -S[<keyid>]	A										GPG-sign the resulting merge commit. The keyid argument is
optional and defaults to the committer identity; if specified,
it must be stuck to the option without a space.	https://git-scm.com/docs/merge.html
git-merge --gpg-sign[=<keyid>]	A										GPG-sign the resulting merge commit. The keyid argument is
optional and defaults to the committer identity; if specified,
it must be stuck to the option without a space.	https://git-scm.com/docs/merge.html
git-merge -m <msg>	A										Set the commit message to be used for the merge commit (in
case one is created).	https://git-scm.com/docs/merge.html
git-merge --[no-]rerere-autoupdate	A										Allow the rerere mechanism to update the index with the
result of auto-conflict resolution if possible.	https://git-scm.com/docs/merge.html
git-merge --abort	A										Abort the current conflict resolution process, and
try to reconstruct the pre-merge state.	https://git-scm.com/docs/merge.html
git-merge <commit>…​	A										Commits, usually other branch heads, to merge into our branch.
Specifying more than one commit will create a merge with
more than two parents (affectionately called an Octopus merge).	https://git-scm.com/docs/merge.html
git-merge	A										Join two or more development histories together
<pre><code>git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n    [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n    [--[no-]allow-unrelated-histories]\n    [--[no-]rerere-autoupdate] [-m <msg>] [<commit>…​]\ngit merge <msg> HEAD <commit>…​\ngit merge --abort</pre></code>	https://git-scm.com/docs/merge.html
git-mergetool -t <tool>	A										Use the merge resolution program specified by <tool>.
Valid values include emerge, gvimdiff, kdiff3,
meld, vimdiff, and tortoisemerge. Run git mergetool --tool-help
for the list of valid <tool> settings.	https://git-scm.com/docs/mergetool.html
git-mergetool --tool=<tool>	A										Use the merge resolution program specified by <tool>.
Valid values include emerge, gvimdiff, kdiff3,
meld, vimdiff, and tortoisemerge. Run git mergetool --tool-help
for the list of valid <tool> settings.	https://git-scm.com/docs/mergetool.html
git-mergetool --tool-help	A										Print a list of merge tools that may be used with --tool.	https://git-scm.com/docs/mergetool.html
git-mergetool -y	A										Don’t prompt before each invocation of the merge resolution
program.
This is the default if the merge resolution program is
explicitly specified with the --tool option or with the
merge.tool configuration variable.	https://git-scm.com/docs/mergetool.html
git-mergetool --no-prompt	A										Don’t prompt before each invocation of the merge resolution
program.
This is the default if the merge resolution program is
explicitly specified with the --tool option or with the
merge.tool configuration variable.	https://git-scm.com/docs/mergetool.html
git-mergetool --prompt	A										Prompt before each invocation of the merge resolution program
to give the user a chance to skip the path.	https://git-scm.com/docs/mergetool.html
git-mergetool	A										Run merge conflict resolution tools to resolve merge conflicts
<pre><code>git mergetool [--tool=<tool>] [-y | --[no-]prompt] [<file>…​]</pre></code>	https://git-scm.com/docs/mergetool.html
git-mv -f	A										Force renaming or moving of a file even if the target exists	https://git-scm.com/docs/mv.html
git-mv --force	A										Force renaming or moving of a file even if the target exists	https://git-scm.com/docs/mv.html
git-mv -k	A										Skip move or rename actions which would lead to an error
condition. An error happens when a source is neither existing nor
controlled by Git, or when it would overwrite an existing
file unless -f is given.	https://git-scm.com/docs/mv.html
git-mv -n	A										Do nothing; only show what would happen	https://git-scm.com/docs/mv.html
git-mv --dry-run	A										Do nothing; only show what would happen	https://git-scm.com/docs/mv.html
git-mv -v	A										Report the names of files as they are moved.	https://git-scm.com/docs/mv.html
git-mv --verbose	A										Report the names of files as they are moved.	https://git-scm.com/docs/mv.html
git-mv	A										Move or rename a file, a directory, or a symlink
<pre><code>git mv <options>…​ <args>…​</pre></code>	https://git-scm.com/docs/mv.html
git-pull -q	A										This is passed to both underlying git-fetch to squelch reporting of
during transfer, and underlying git-merge to squelch output during
merging.	https://git-scm.com/docs/pull.html
git-pull --quiet	A										This is passed to both underlying git-fetch to squelch reporting of
during transfer, and underlying git-merge to squelch output during
merging.	https://git-scm.com/docs/pull.html
git-pull -v	A										Pass --verbose to git-fetch and git-merge.	https://git-scm.com/docs/pull.html
git-pull --verbose	A										Pass --verbose to git-fetch and git-merge.	https://git-scm.com/docs/pull.html
git-pull --[no-]recurse-submodules[=yes|on-demand|no]	A										This option controls if new commits of all populated submodules should
be fetched too (see git-config[1] and gitmodules[5]).
That might be necessary to get the data needed for merging submodule
commits, a feature Git learned in 1.7.3. Notice that the result of a
merge will not be checked out in the submodule, "git submodule update"
has to be called afterwards to bring the work tree up to date with the
merge result.	https://git-scm.com/docs/pull.html
git-pull --commit	A										Perform the merge and commit the result. This option can
be used to override --no-commit.	https://git-scm.com/docs/pull.html
git-pull --no-commit	A										Perform the merge and commit the result. This option can
be used to override --no-commit.	https://git-scm.com/docs/pull.html
git-pull --edit	A										Invoke an editor before committing successful mechanical merge to
further edit the auto-generated merge message, so that the user
can explain and justify the merge. The --no-edit option can be
used to accept the auto-generated message (this is generally
discouraged).	https://git-scm.com/docs/pull.html
git-pull -e	A										Invoke an editor before committing successful mechanical merge to
further edit the auto-generated merge message, so that the user
can explain and justify the merge. The --no-edit option can be
used to accept the auto-generated message (this is generally
discouraged).	https://git-scm.com/docs/pull.html
git-pull --no-edit	A										Invoke an editor before committing successful mechanical merge to
further edit the auto-generated merge message, so that the user
can explain and justify the merge. The --no-edit option can be
used to accept the auto-generated message (this is generally
discouraged).	https://git-scm.com/docs/pull.html
git-pull --ff	A										When the merge resolves as a fast-forward, only update the branch
pointer, without creating a merge commit.  This is the default
behavior.	https://git-scm.com/docs/pull.html
git-pull --no-ff	A										Create a merge commit even when the merge resolves as a
fast-forward.  This is the default behaviour when merging an
annotated (and possibly signed) tag.	https://git-scm.com/docs/pull.html
git-pull --ff-only	A										Refuse to merge and exit with a non-zero status unless the
current HEAD is already up-to-date or the merge can be
resolved as a fast-forward.	https://git-scm.com/docs/pull.html
git-pull --log[=<n>]	A										In addition to branch names, populate the log message with
one-line descriptions from at most <n> actual commits that are being
merged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/pull.html
git-pull --no-log	A										In addition to branch names, populate the log message with
one-line descriptions from at most <n> actual commits that are being
merged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/pull.html
git-pull --stat	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull -n	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull --no-stat	A										Show a diffstat at the end of the merge. The diffstat is also
controlled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull --squash	A										Produce the working tree and index state as if a real merge
happened (except for the merge information), but do not actually
make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD
(to cause the next git commit command to create a merge
commit).  This allows you to create a single commit on top of
the current branch whose effect is the same as merging another
branch (or more in case of an octopus).	https://git-scm.com/docs/pull.html
git-pull --no-squash	A										Produce the working tree and index state as if a real merge
happened (except for the merge information), but do not actually
make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD
(to cause the next git commit command to create a merge
commit).  This allows you to create a single commit on top of
the current branch whose effect is the same as merging another
branch (or more in case of an octopus).	https://git-scm.com/docs/pull.html
git-pull -s <strategy>	A										Use the given merge strategy; can be supplied more than
once to specify them in the order they should be tried.
If there is no -s option, a built-in list of strategies
is used instead (git merge-recursive when merging a single
head, git merge-octopus otherwise).	https://git-scm.com/docs/pull.html
git-pull --strategy=<strategy>	A										Use the given merge strategy; can be supplied more than
once to specify them in the order they should be tried.
If there is no -s option, a built-in list of strategies
is used instead (git merge-recursive when merging a single
head, git merge-octopus otherwise).	https://git-scm.com/docs/pull.html
git-pull -X <option>	A										Pass merge strategy specific option through to the merge
strategy.	https://git-scm.com/docs/pull.html
git-pull --strategy-option=<option>	A										Pass merge strategy specific option through to the merge
strategy.	https://git-scm.com/docs/pull.html
git-pull --verify-signatures	A										Verify that the tip commit of the side branch being merged is
signed with a valid key, i.e. a key that has a valid uid: in the
default trust model, this means the signing key has been signed by
a trusted key.  If the tip commit of the side branch is not signed
with a valid key, the merge is aborted.	https://git-scm.com/docs/pull.html
git-pull --no-verify-signatures	A										Verify that the tip commit of the side branch being merged is
signed with a valid key, i.e. a key that has a valid uid: in the
default trust model, this means the signing key has been signed by
a trusted key.  If the tip commit of the side branch is not signed
with a valid key, the merge is aborted.	https://git-scm.com/docs/pull.html
git-pull --summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be
removed in the future.	https://git-scm.com/docs/pull.html
git-pull --no-summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be
removed in the future.	https://git-scm.com/docs/pull.html
git-pull --allow-unrelated-histories	A										By default, git merge command refuses to merge histories
that do not share a common ancestor.  This option can be
used to override this safety when merging histories of two
projects that started their lives independently. As that is
a very rare occasion, no configuration variable to enable
this by default exists and will not be added.	https://git-scm.com/docs/pull.html
git-pull -r	A										When true, rebase the current branch on top of the upstream
branch after fetching. If there is a remote-tracking branch
corresponding to the upstream branch and the upstream branch
was rebased since last fetched, the rebase uses that information
to avoid rebasing non-local changes.	https://git-scm.com/docs/pull.html
git-pull --rebase[=false|true|preserve|interactive]	A										When true, rebase the current branch on top of the upstream
branch after fetching. If there is a remote-tracking branch
corresponding to the upstream branch and the upstream branch
was rebased since last fetched, the rebase uses that information
to avoid rebasing non-local changes.	https://git-scm.com/docs/pull.html
git-pull --no-rebase	A										Override earlier --rebase.	https://git-scm.com/docs/pull.html
git-pull --autostash	A										Before starting rebase, stash local modifications away (see
git-stash[1]) if needed, and apply the stash when
done. --no-autostash is useful to override the rebase.autoStash
configuration variable (see git-config[1]).	https://git-scm.com/docs/pull.html
git-pull --no-autostash	A										Before starting rebase, stash local modifications away (see
git-stash[1]) if needed, and apply the stash when
done. --no-autostash is useful to override the rebase.autoStash
configuration variable (see git-config[1]).	https://git-scm.com/docs/pull.html
git-pull --all	A										Fetch all remotes.	https://git-scm.com/docs/pull.html
git-pull -a	A										Append ref names and object names of fetched refs to the
existing contents of .git/FETCH_HEAD.  Without this
option old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/pull.html
git-pull --append	A										Append ref names and object names of fetched refs to the
existing contents of .git/FETCH_HEAD.  Without this
option old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/pull.html
git-pull --depth=<depth>	A										Limit fetching to the specified number of commits from the tip of
each remote branch history. If fetching to a shallow repository
created by git clone with --depth=<depth> option (see
git-clone[1]), deepen or shorten the history to the specified
number of commits. Tags for the deepened commits are not fetched.	https://git-scm.com/docs/pull.html
git-pull --unshallow	A										If the source repository is complete, convert a shallow
repository to a complete one, removing all the limitations
imposed by shallow repositories.	https://git-scm.com/docs/pull.html
git-pull --update-shallow	A										By default when fetching from a shallow repository,
git fetch refuses refs that require updating
.git/shallow. This option updates .git/shallow and accept such
refs.	https://git-scm.com/docs/pull.html
git-pull -f	A										When git fetch is used with <rbranch>:<lbranch>
refspec, it refuses to update the local branch
<lbranch> unless the remote branch <rbranch> it
fetches is a descendant of <lbranch>.  This option
overrides that check.	https://git-scm.com/docs/pull.html
git-pull --force	A										When git fetch is used with <rbranch>:<lbranch>
refspec, it refuses to update the local branch
<lbranch> unless the remote branch <rbranch> it
fetches is a descendant of <lbranch>.  This option
overrides that check.	https://git-scm.com/docs/pull.html
git-pull -k	A										Keep downloaded pack.	https://git-scm.com/docs/pull.html
git-pull --keep	A										Keep downloaded pack.	https://git-scm.com/docs/pull.html
git-pull --no-tags	A										By default, tags that point at objects that are downloaded
from the remote repository are fetched and stored locally.
This option disables this automatic tag following. The default
behavior for a remote may be specified with the remote.<name>.tagOpt
setting. See git-config[1].	https://git-scm.com/docs/pull.html
git-pull -u	A										By default git fetch refuses to update the head which
corresponds to the current branch.  This flag disables the
check.  This is purely for the internal use for git pull
to communicate with git fetch, and unless you are
implementing your own Porcelain you are not supposed to
use it.	https://git-scm.com/docs/pull.html
git-pull --update-head-ok	A										By default git fetch refuses to update the head which
corresponds to the current branch.  This flag disables the
check.  This is purely for the internal use for git pull
to communicate with git fetch, and unless you are
implementing your own Porcelain you are not supposed to
use it.	https://git-scm.com/docs/pull.html
git-pull --upload-pack <upload-pack>	A										When given, and the repository to fetch from is handled
by git fetch-pack, --exec=<upload-pack> is passed to
the command to specify non-default path for the command
run on the other end.	https://git-scm.com/docs/pull.html
git-pull --progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal, unless -q
is specified. This flag forces progress status even if the
standard error stream is not directed to a terminal.	https://git-scm.com/docs/pull.html
git-pull -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/pull.html
git-pull --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/pull.html
git-pull -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/pull.html
git-pull --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/pull.html
git-pull <repository>	A										The "remote" repository that is the source of a fetch
or pull operation.  This parameter can be either a URL
(see the section GIT URLS below) or the name
of a remote (see the section REMOTES below).	https://git-scm.com/docs/pull.html
git-pull <refspec>	A										Specifies which refs to fetch and which local refs to update.
When no <refspec>s appear on the command line, the refs to fetch
are read from remote.<repository>.fetch variables instead
(see git-fetch[1]).	https://git-scm.com/docs/pull.html
git-pull	A										Fetch from and integrate with another repository or a local branch
<pre><code>git pull [options] [<repository> [<refspec>…​]]</pre></code>	https://git-scm.com/docs/pull.html
git-push <repository>	A										The "remote" repository that is destination of a push
operation.  This parameter can be either a URL
(see the section GIT URLS below) or the name
of a remote (see the section REMOTES below).	https://git-scm.com/docs/push.html
git-push <refspec>…​	A										Specify what destination ref to update with what source object.
The format of a <refspec> parameter is an optional plus
+, followed by the source object <src>, followed
by a colon :, followed by the destination ref <dst>.	https://git-scm.com/docs/push.html
git-push --all	A										Push all branches (i.e. refs under refs/heads/); cannot be
used with other <refspec>.	https://git-scm.com/docs/push.html
git-push --prune	A										Remove remote branches that don’t have a local counterpart. For example
a remote branch tmp will be removed if a local branch with the same
name doesn’t exist any more. This also respects refspecs, e.g.
git push --prune remote refs/heads/*:refs/tmp/* would
make sure that remote refs/tmp/foo will be removed if refs/heads/foo
doesn’t exist.	https://git-scm.com/docs/push.html
git-push --mirror	A										Instead of naming each ref to push, specifies that all
refs under refs/ (which includes but is not
limited to refs/heads/, refs/remotes/, and refs/tags/)
be mirrored to the remote repository.  Newly created local
refs will be pushed to the remote end, locally updated refs
will be force updated on the remote end, and deleted refs
will be removed from the remote end.  This is the default
if the configuration option remote.<remote>.mirror is
set.	https://git-scm.com/docs/push.html
git-push -n	A										Do everything except actually send the updates.	https://git-scm.com/docs/push.html
git-push --dry-run	A										Do everything except actually send the updates.	https://git-scm.com/docs/push.html
git-push --porcelain	A										Produce machine-readable output.  The output status line for each ref
will be tab-separated and sent to stdout instead of stderr.  The full
symbolic names of the refs will be given.	https://git-scm.com/docs/push.html
git-push --delete	A										All listed refs are deleted from the remote repository. This is
the same as prefixing all refs with a colon.	https://git-scm.com/docs/push.html
git-push --tags	A										All refs under refs/tags are pushed, in
addition to refspecs explicitly listed on the command
line.	https://git-scm.com/docs/push.html
git-push --follow-tags	A										Push all the refs that would be pushed without this option,
and also push annotated tags in refs/tags that are missing
from the remote but are pointing at commit-ish that are
reachable from the refs being pushed.  This can also be specified
with configuration variable push.followTags.  For more
information, see push.followTags in git-config[1].	https://git-scm.com/docs/push.html
git-push --[no-]signed	A										GPG-sign the push request to update refs on the receiving
side, to allow it to be checked by the hooks and/or be
logged.  If false or --no-signed, no signing will be
attempted.  If true or --signed, the push will fail if the
server does not support signed pushes.  If set to if-asked,
sign if and only if the server supports signed pushes.  The push
will also fail if the actual call to gpg --sign fails.  See
git-receive-pack[1] for the details on the receiving end.	https://git-scm.com/docs/push.html
git-push --sign=(true|false|if-asked)	A										GPG-sign the push request to update refs on the receiving
side, to allow it to be checked by the hooks and/or be
logged.  If false or --no-signed, no signing will be
attempted.  If true or --signed, the push will fail if the
server does not support signed pushes.  If set to if-asked,
sign if and only if the server supports signed pushes.  The push
will also fail if the actual call to gpg --sign fails.  See
git-receive-pack[1] for the details on the receiving end.	https://git-scm.com/docs/push.html
git-push --[no-]atomic	A										Use an atomic transaction on the remote side if available.
Either all refs are updated, or on error, no refs are updated.
If the server does not support atomic pushes the push will fail.	https://git-scm.com/docs/push.html
git-push --receive-pack=<git-receive-pack>	A										Path to the git-receive-pack program on the remote
end.  Sometimes useful when pushing to a remote
repository over ssh, and you do not have the program in
a directory on the default $PATH.	https://git-scm.com/docs/push.html
git-push --exec=<git-receive-pack>	A										Path to the git-receive-pack program on the remote
end.  Sometimes useful when pushing to a remote
repository over ssh, and you do not have the program in
a directory on the default $PATH.	https://git-scm.com/docs/push.html
git-push --[no-]force-with-lease	A										Usually, "git push" refuses to update a remote ref that is
not an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push --force-with-lease=<refname>	A										Usually, "git push" refuses to update a remote ref that is
not an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push --force-with-lease=<refname>:<expect>	A										Usually, "git push" refuses to update a remote ref that is
not an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push -f	A										Usually, the command refuses to update a remote ref that is
not an ancestor of the local ref used to overwrite it.
Also, when --force-with-lease option is used, the command refuses
to update a remote ref whose current value does not match
what is expected.	https://git-scm.com/docs/push.html
git-push --force	A										Usually, the command refuses to update a remote ref that is
not an ancestor of the local ref used to overwrite it.
Also, when --force-with-lease option is used, the command refuses
to update a remote ref whose current value does not match
what is expected.	https://git-scm.com/docs/push.html
git-push --repo=<repository>	A										This option is equivalent to the <repository> argument. If both
are specified, the command-line argument takes precedence.	https://git-scm.com/docs/push.html
git-push -u	A										For every branch that is up to date or successfully pushed, add
upstream (tracking) reference, used by argument-less
git-pull[1] and other commands. For more information,
see branch.<name>.merge in git-config[1].	https://git-scm.com/docs/push.html
git-push --set-upstream	A										For every branch that is up to date or successfully pushed, add
upstream (tracking) reference, used by argument-less
git-pull[1] and other commands. For more information,
see branch.<name>.merge in git-config[1].	https://git-scm.com/docs/push.html
git-push --[no-]thin	A										These options are passed to git-send-pack[1]. A thin transfer
significantly reduces the amount of sent data when the sender and
receiver share many of the same objects in common. The default is
\--thin.	https://git-scm.com/docs/push.html
git-push -q	A										Suppress all output, including the listing of updated refs,
unless an error occurs. Progress is not reported to the standard
error stream.	https://git-scm.com/docs/push.html
git-push --quiet	A										Suppress all output, including the listing of updated refs,
unless an error occurs. Progress is not reported to the standard
error stream.	https://git-scm.com/docs/push.html
git-push -v	A										Run verbosely.	https://git-scm.com/docs/push.html
git-push --verbose	A										Run verbosely.	https://git-scm.com/docs/push.html
git-push --progress	A										Progress status is reported on the standard error stream
by default when it is attached to a terminal, unless -q
is specified. This flag forces progress status even if the
standard error stream is not directed to a terminal.	https://git-scm.com/docs/push.html
git-push --no-recurse-submodules	A										May be used to make sure all submodule commits used by the
revisions to be pushed are available on a remote-tracking branch.
If check is used Git will verify that all submodule commits that
changed in the revisions to be pushed are available on at least one
remote of the submodule. If any commits are missing the push will
be aborted and exit with non-zero status. If on-demand is used
all submodules that changed in the revisions to be pushed will be
pushed. If on-demand was not able to push all necessary revisions
it will also be aborted and exit with non-zero status. A value of
no or using --no-recurse-submodules can be used to override the
push.recurseSubmodules configuration variable when no submodule
recursion is required.	https://git-scm.com/docs/push.html
git-push --recurse-submodules=check|on-demand|no	A										May be used to make sure all submodule commits used by the
revisions to be pushed are available on a remote-tracking branch.
If check is used Git will verify that all submodule commits that
changed in the revisions to be pushed are available on at least one
remote of the submodule. If any commits are missing the push will
be aborted and exit with non-zero status. If on-demand is used
all submodules that changed in the revisions to be pushed will be
pushed. If on-demand was not able to push all necessary revisions
it will also be aborted and exit with non-zero status. A value of
no or using --no-recurse-submodules can be used to override the
push.recurseSubmodules configuration variable when no submodule
recursion is required.	https://git-scm.com/docs/push.html
git-push --[no-]verify	A										Toggle the pre-push hook (see githooks[5]).  The
default is --verify, giving the hook a chance to prevent the
push.  With --no-verify, the hook is bypassed completely.	https://git-scm.com/docs/push.html
git-push -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/push.html
git-push --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/push.html
git-push -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/push.html
git-push --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/push.html
git-push	A										Update remote refs along with associated objects
<pre><code>git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n       [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n       [-u | --set-upstream]\n       [--[no-]signed|--sign=(true|false|if-asked)]\n       [--force-with-lease[=<refname>[:<expect>]]]\n       [--no-verify] [<repository> [<refspec>…​]]</pre></code>	https://git-scm.com/docs/push.html
git-read-tree -m	A										Perform a merge, not just a read.  The command will
refuse to run if your index file has unmerged entries,
indicating that you have not finished previous merge you
started.	https://git-scm.com/docs/read-tree.html
git-read-tree --reset	A										Same as -m, except that unmerged entries are discarded
instead of failing.	https://git-scm.com/docs/read-tree.html
git-read-tree -u	A										After a successful merge, update the files in the work
tree with the result of the merge.	https://git-scm.com/docs/read-tree.html
git-read-tree -i	A										Usually a merge requires the index file as well as the
files in the working tree to be up to date with the
current head commit, in order not to lose local
changes.  This flag disables the check with the working
tree and is meant to be used when creating a merge of
trees that are not directly related to the current
working tree status into a temporary index file.	https://git-scm.com/docs/read-tree.html
git-read-tree -n	A										Check if the command would error out, without updating the index
or the files in the working tree for real.	https://git-scm.com/docs/read-tree.html
git-read-tree --dry-run	A										Check if the command would error out, without updating the index
or the files in the working tree for real.	https://git-scm.com/docs/read-tree.html
git-read-tree -v	A										Show the progress of checking files out.	https://git-scm.com/docs/read-tree.html
git-read-tree --trivial	A										Restrict three-way merge by git read-tree to happen
only if there is no file-level merging required, instead
of resolving merge for trivial cases and leaving
conflicting files unresolved in the index.	https://git-scm.com/docs/read-tree.html
git-read-tree --aggressive	A										Usually a three-way merge by git read-tree resolves
the merge for really trivial cases and leaves other
cases unresolved in the index, so that porcelains can
implement different merge policies.  This flag makes the
command resolve a few more cases internally:	https://git-scm.com/docs/read-tree.html
git-read-tree --prefix=<prefix>/	A										Keep the current index contents, and read the contents
of the named tree-ish under the directory at <prefix>.
The command will refuse to overwrite entries that already
existed in the original index file. Note that the <prefix>/
value must end with a slash.	https://git-scm.com/docs/read-tree.html
git-read-tree --exclude-per-directory=<gitignore>	A										When running the command with -u and -m options, the
merge result may need to overwrite paths that are not
tracked in the current branch.  The command usually
refuses to proceed with the merge to avoid losing such a
path.  However this safety valve sometimes gets in the
way.  For example, it often happens that the other
branch added a file that used to be a generated file in
your branch, and the safety valve triggers when you try
to switch to that branch after you ran make but before
running make clean to remove the generated file.  This
option tells the command to read per-directory exclude
file (usually .gitignore) and allows such an untracked
but explicitly ignored file to be overwritten.	https://git-scm.com/docs/read-tree.html
git-read-tree --index-output=<file>	A										Instead of writing the results out to $GIT_INDEX_FILE,
write the resulting index in the named file.  While the
command is operating, the original index file is locked
with the same mechanism as usual.  The file must allow
to be rename(2)ed into from a temporary file that is
created next to the usual index file; typically this
means it needs to be on the same filesystem as the index
file itself, and you need write permission to the
directories the index file and index output file are
located in.	https://git-scm.com/docs/read-tree.html
git-read-tree --no-sparse-checkout	A										Disable sparse checkout support even if core.sparseCheckout
is true.	https://git-scm.com/docs/read-tree.html
git-read-tree --empty	A										Instead of reading tree object(s) into the index, just empty
it.	https://git-scm.com/docs/read-tree.html
git-read-tree <tree-ish#>	A										The id of the tree object(s) to be read/merged.	https://git-scm.com/docs/read-tree.html
git-read-tree	A										Reads tree information into the index
<pre><code>git read-tree [[-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>]\n        [-u [--exclude-per-directory=<gitignore>] | -i]]\n        [--index-output=<file>] [--no-sparse-checkout]\n        (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])</pre></code>	https://git-scm.com/docs/read-tree.html
git-rebase --onto <newbase>	A										Starting point at which to create the new commits. If the
--onto option is not specified, the starting point is
<upstream>.  May be any valid commit, and not just an
existing branch name.	https://git-scm.com/docs/rebase.html
git-rebase <upstream>	A										Upstream branch to compare against.  May be any valid commit,
not just an existing branch name. Defaults to the configured
upstream for the current branch.	https://git-scm.com/docs/rebase.html
git-rebase <branch>	A										Working branch; defaults to HEAD.	https://git-scm.com/docs/rebase.html
git-rebase --continue	A										Restart the rebasing process after having resolved a merge conflict.	https://git-scm.com/docs/rebase.html
git-rebase --abort	A										Abort the rebase operation and reset HEAD to the original
branch. If <branch> was provided when the rebase operation was
started, then HEAD will be reset to <branch>. Otherwise HEAD
will be reset to where it was when the rebase operation was
started.	https://git-scm.com/docs/rebase.html
git-rebase --keep-empty	A										Keep the commits that do not change anything from its
parents in the result.	https://git-scm.com/docs/rebase.html
git-rebase --skip	A										Restart the rebasing process by skipping the current patch.	https://git-scm.com/docs/rebase.html
git-rebase --edit-todo	A										Edit the todo list during an interactive rebase.	https://git-scm.com/docs/rebase.html
git-rebase -m	A										Use merging strategies to rebase.  When the recursive (default) merge
strategy is used, this allows rebase to be aware of renames on the
upstream side.	https://git-scm.com/docs/rebase.html
git-rebase --merge	A										Use merging strategies to rebase.  When the recursive (default) merge
strategy is used, this allows rebase to be aware of renames on the
upstream side.	https://git-scm.com/docs/rebase.html
git-rebase -s <strategy>	A										Use the given merge strategy.
If there is no -s option git merge-recursive is used
instead.  This implies --merge.	https://git-scm.com/docs/rebase.html
git-rebase --strategy=<strategy>	A										Use the given merge strategy.
If there is no -s option git merge-recursive is used
instead.  This implies --merge.	https://git-scm.com/docs/rebase.html
git-rebase -X <strategy-option>	A										Pass the <strategy-option> through to the merge strategy.
This implies --merge and, if no strategy has been
specified, -s recursive.  Note the reversal of ours and
theirs as noted above for the -m option.	https://git-scm.com/docs/rebase.html
git-rebase --strategy-option=<strategy-option>	A										Pass the <strategy-option> through to the merge strategy.
This implies --merge and, if no strategy has been
specified, -s recursive.  Note the reversal of ours and
theirs as noted above for the -m option.	https://git-scm.com/docs/rebase.html
git-rebase -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/rebase.html
git-rebase --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/rebase.html
git-rebase -q	A										Be quiet. Implies --no-stat.	https://git-scm.com/docs/rebase.html
git-rebase --quiet	A										Be quiet. Implies --no-stat.	https://git-scm.com/docs/rebase.html
git-rebase -v	A										Be verbose. Implies --stat.	https://git-scm.com/docs/rebase.html
git-rebase --verbose	A										Be verbose. Implies --stat.	https://git-scm.com/docs/rebase.html
git-rebase --stat	A										Show a diffstat of what changed upstream since the last rebase. The
diffstat is also controlled by the configuration option rebase.stat.	https://git-scm.com/docs/rebase.html
git-rebase -n	A										Do not show a diffstat as part of the rebase process.	https://git-scm.com/docs/rebase.html
git-rebase --no-stat	A										Do not show a diffstat as part of the rebase process.	https://git-scm.com/docs/rebase.html
git-rebase --no-verify	A										This option bypasses the pre-rebase hook.  See also githooks[5].	https://git-scm.com/docs/rebase.html
git-rebase --verify	A										Allows the pre-rebase hook to run, which is the default.  This option can
be used to override --no-verify.  See also githooks[5].	https://git-scm.com/docs/rebase.html
git-rebase -C<n>	A										Ensure at least <n> lines of surrounding context match before
and after each change.  When fewer lines of surrounding
context exist they all must match.  By default no context is
ever ignored.	https://git-scm.com/docs/rebase.html
git-rebase -f	A										Force a rebase even if the current branch is up-to-date and
the command without --force would return without doing anything.	https://git-scm.com/docs/rebase.html
git-rebase --force-rebase	A										Force a rebase even if the current branch is up-to-date and
the command without --force would return without doing anything.	https://git-scm.com/docs/rebase.html
git-rebase --fork-point	A										Use reflog to find a better common ancestor between <upstream>
and <branch> when calculating which commits have been
introduced by <branch>.	https://git-scm.com/docs/rebase.html
git-rebase --no-fork-point	A										Use reflog to find a better common ancestor between <upstream>
and <branch> when calculating which commits have been
introduced by <branch>.	https://git-scm.com/docs/rebase.html
git-rebase --ignore-whitespace	A										These flag are passed to the git apply program
(see git-apply[1]) that applies the patch.
Incompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --whitespace=<option>	A										These flag are passed to the git apply program
(see git-apply[1]) that applies the patch.
Incompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --committer-date-is-author-date	A										These flags are passed to git am to easily change the dates
of the rebased commits (see git-am[1]).
Incompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --ignore-date	A										These flags are passed to git am to easily change the dates
of the rebased commits (see git-am[1]).
Incompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase -i	A										Make a list of the commits which are about to be rebased.  Let the
user edit that list before rebasing.  This mode can also be used to
split commits (see SPLITTING COMMITS below).	https://git-scm.com/docs/rebase.html
git-rebase --interactive	A										Make a list of the commits which are about to be rebased.  Let the
user edit that list before rebasing.  This mode can also be used to
split commits (see SPLITTING COMMITS below).	https://git-scm.com/docs/rebase.html
git-rebase -p	A										Recreate merge commits instead of flattening the history by replaying
commits a merge commit introduces. Merge conflict resolutions or manual
amendments to merge commits are not preserved.	https://git-scm.com/docs/rebase.html
git-rebase --preserve-merges	A										Recreate merge commits instead of flattening the history by replaying
commits a merge commit introduces. Merge conflict resolutions or manual
amendments to merge commits are not preserved.	https://git-scm.com/docs/rebase.html
git-rebase -x <cmd>	A										Append "exec <cmd>" after each line creating a commit in the
final history. <cmd> will be interpreted as one or more shell
commands.	https://git-scm.com/docs/rebase.html
git-rebase --exec <cmd>	A										Append "exec <cmd>" after each line creating a commit in the
final history. <cmd> will be interpreted as one or more shell
commands.	https://git-scm.com/docs/rebase.html
git-rebase --root	A										Rebase all commits reachable from <branch>, instead of
limiting them with an <upstream>.  This allows you to rebase
the root commit(s) on a branch.  When used with --onto, it
will skip changes already contained in <newbase> (instead of
<upstream>) whereas without --onto it will operate on every change.
When used together with both --onto and --preserve-merges,
all root commits will be rewritten to have <newbase> as parent
instead.	https://git-scm.com/docs/rebase.html
git-rebase --autosquash	A										When the commit log message begins with "squash! …​" (or
"fixup! …​"), and there is a commit whose title begins with
the same …​, automatically modify the todo list of rebase -i
so that the commit marked for squashing comes right after the
commit to be modified, and change the action of the moved
commit from pick to squash (or fixup).  Ignores subsequent
"fixup! " or "squash! " after the first, in case you referred to an
earlier fixup/squash with git commit --fixup/--squash.	https://git-scm.com/docs/rebase.html
git-rebase --no-autosquash	A										When the commit log message begins with "squash! …​" (or
"fixup! …​"), and there is a commit whose title begins with
the same …​, automatically modify the todo list of rebase -i
so that the commit marked for squashing comes right after the
commit to be modified, and change the action of the moved
commit from pick to squash (or fixup).  Ignores subsequent
"fixup! " or "squash! " after the first, in case you referred to an
earlier fixup/squash with git commit --fixup/--squash.	https://git-scm.com/docs/rebase.html
git-rebase --autostash	A										Automatically create a temporary stash before the operation
begins, and apply it after the operation ends.  This means
that you can run rebase on a dirty worktree.  However, use
with care: the final stash application after a successful
rebase might result in non-trivial conflicts.	https://git-scm.com/docs/rebase.html
git-rebase --no-autostash	A										Automatically create a temporary stash before the operation
begins, and apply it after the operation ends.  This means
that you can run rebase on a dirty worktree.  However, use
with care: the final stash application after a successful
rebase might result in non-trivial conflicts.	https://git-scm.com/docs/rebase.html
git-rebase --no-ff	A										With --interactive, cherry-pick all rebased commits instead of
fast-forwarding over the unchanged ones.  This ensures that the
entire history of the rebased branch is composed of new commits.	https://git-scm.com/docs/rebase.html
git-rebase	A										Reapply commits on top of another base tip
<pre><code>git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]\n    [<upstream> [<branch>]]\ngit rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]\n    --root [<branch>]\ngit rebase --continue | --skip | --abort | --edit-todo</pre></code>	https://git-scm.com/docs/rebase.html
git-reflog --all	A										Process the reflogs of all references.	https://git-scm.com/docs/reflog.html
git-reflog --expire=<time>	A										Prune entries older than the specified time. If this option is
not specified, the expiration time is taken from the
configuration setting gc.reflogExpire, which in turn
defaults to 90 days. --expire=all prunes entries regardless
of their age; --expire=never turns off pruning of reachable
entries (but see --expire-unreachable).	https://git-scm.com/docs/reflog.html
git-reflog --expire-unreachable=<time>	A										Prune entries older than <time> that are not reachable from
the current tip of the branch. If this option is not
specified, the expiration time is taken from the configuration
setting gc.reflogExpireUnreachable, which in turn defaults
to 30 days. --expire-unreachable=all prunes unreachable
entries regardless of their age; --expire-unreachable=never
turns off early pruning of unreachable entries (but see
--expire).	https://git-scm.com/docs/reflog.html
git-reflog --updateref	A										Update the reference to the value of the top reflog entry (i.e.
<ref>@{0}) if the previous top entry was pruned.  (This
option is ignored for symbolic references.)	https://git-scm.com/docs/reflog.html
git-reflog --rewrite	A										If a reflog entry’s predecessor is pruned, adjust its "old"
SHA-1 to be equal to the "new" SHA-1 field of the entry that
now precedes it.	https://git-scm.com/docs/reflog.html
git-reflog --stale-fix	A										Prune any reflog entries that point to "broken commits". A
broken commit is a commit that is not reachable from any of
the reference tips and that refers, directly or indirectly, to
a missing commit, tree, or blob object.	https://git-scm.com/docs/reflog.html
git-reflog -n	A										Do not actually prune any entries; just show what would have
been pruned.	https://git-scm.com/docs/reflog.html
git-reflog --dry-run	A										Do not actually prune any entries; just show what would have
been pruned.	https://git-scm.com/docs/reflog.html
git-reflog --verbose	A										Print extra information on screen.	https://git-scm.com/docs/reflog.html
git-reflog	A										Manage reflog information
<pre><code>git reflog <subcommand> <options></pre></code>	https://git-scm.com/docs/reflog.html
git-remote -v	A										Be a little more verbose and show remote url after name.
NOTE: This must be placed between remote and subcommand.	https://git-scm.com/docs/remote.html
git-remote --verbose	A										Be a little more verbose and show remote url after name.
NOTE: This must be placed between remote and subcommand.	https://git-scm.com/docs/remote.html
git-remote	A										Manage set of tracked repositories
<pre><code>git remote [-v | --verbose]\ngit remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=<fetch|push>] <name> <url>\ngit remote rename <old> <new>\ngit remote remove <name>\ngit remote set-head <name> (-a | --auto | -d | --delete | <branch>)\ngit remote set-branches [--add] <name> <branch>…​\ngit remote get-url [--push] [--all] <name>\ngit remote set-url [--push] <name> <newurl> [<oldurl>]\ngit remote set-url --add [--push] <name> <newurl>\ngit remote set-url --delete [--push] <name> <url>\ngit remote [-v | --verbose] show [-n] <name>…​\ngit remote prune [-n | --dry-run] <name>…​\ngit remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)…​]</pre></code>	https://git-scm.com/docs/remote.html
git-request-pull -p	A										Include patch text in the output.	https://git-scm.com/docs/request-pull.html
git-request-pull <start>	A										Commit to start at.  This names a commit that is already in
the upstream history.	https://git-scm.com/docs/request-pull.html
git-request-pull <url>	A										The repository URL to be pulled from.	https://git-scm.com/docs/request-pull.html
git-request-pull <end>	A										Commit to end at (defaults to HEAD).  This names the commit
at the tip of the history you are asking to be pulled.	https://git-scm.com/docs/request-pull.html
git-request-pull	A										Generates a summary of pending changes
<pre><code>git request-pull [-p] <start> <url> [<end>]</pre></code>	https://git-scm.com/docs/request-pull.html
git-reset -q	A										Be quiet, only report errors.	https://git-scm.com/docs/reset.html
git-reset --quiet	A										Be quiet, only report errors.	https://git-scm.com/docs/reset.html
git-reset	A										Reset current HEAD to the specified state
<pre><code>git reset [-q] [<tree-ish>] [--] <paths>…​\ngit reset (--patch | -p) [<tree-ish>] [--] [<paths>…​]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]</pre></code>	https://git-scm.com/docs/reset.html
git-rev-list -<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list -n <number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-count=<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list --skip=<number>	A										Skip number commits before starting to show the commit output.	https://git-scm.com/docs/rev-list.html
git-rev-list --since=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --after=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --until=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --before=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-age=<timestamp>	A										Limit the commits output to specified time range.	https://git-scm.com/docs/rev-list.html
git-rev-list --min-age=<timestamp>	A										Limit the commits output to specified time range.	https://git-scm.com/docs/rev-list.html
git-rev-list --author=<pattern>	A										Limit the commits output to ones with author/committer
header lines that match the specified pattern (regular
expression).  With more than one --author=<pattern>,
commits whose author matches any of the given patterns are
chosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/rev-list.html
git-rev-list --committer=<pattern>	A										Limit the commits output to ones with author/committer
header lines that match the specified pattern (regular
expression).  With more than one --author=<pattern>,
commits whose author matches any of the given patterns are
chosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/rev-list.html
git-rev-list --grep-reflog=<pattern>	A										Limit the commits output to ones with reflog entries that
match the specified pattern (regular expression). With
more than one --grep-reflog, commits whose reflog message
matches any of the given patterns are chosen.  It is an
error to use this option unless --walk-reflogs is in use.	https://git-scm.com/docs/rev-list.html
git-rev-list --grep=<pattern>	A										Limit the commits output to ones with log message that
matches the specified pattern (regular expression).  With
more than one --grep=<pattern>, commits whose message
matches any of the given patterns are chosen (but see
--all-match).	https://git-scm.com/docs/rev-list.html
git-rev-list --all-match	A										Limit the commits output to ones that match all given --grep,
instead of ones that match at least one.	https://git-scm.com/docs/rev-list.html
git-rev-list --invert-grep	A										Limit the commits output to ones with log message that do not
match the pattern specified with --grep=<pattern>.	https://git-scm.com/docs/rev-list.html
git-rev-list -i	A										Match the regular expression limiting patterns without regard to letter
case.	https://git-scm.com/docs/rev-list.html
git-rev-list --regexp-ignore-case	A										Match the regular expression limiting patterns without regard to letter
case.	https://git-scm.com/docs/rev-list.html
git-rev-list --basic-regexp	A										Consider the limiting patterns to be basic regular expressions;
this is the default.	https://git-scm.com/docs/rev-list.html
git-rev-list -E	A										Consider the limiting patterns to be extended regular expressions
instead of the default basic regular expressions.	https://git-scm.com/docs/rev-list.html
git-rev-list --extended-regexp	A										Consider the limiting patterns to be extended regular expressions
instead of the default basic regular expressions.	https://git-scm.com/docs/rev-list.html
git-rev-list -F	A										Consider the limiting patterns to be fixed strings (don’t interpret
pattern as a regular expression).	https://git-scm.com/docs/rev-list.html
git-rev-list --fixed-strings	A										Consider the limiting patterns to be fixed strings (don’t interpret
pattern as a regular expression).	https://git-scm.com/docs/rev-list.html
git-rev-list --perl-regexp	A										Consider the limiting patterns to be Perl-compatible regular expressions.
Requires libpcre to be compiled in.	https://git-scm.com/docs/rev-list.html
git-rev-list --remove-empty	A										Stop when a given path disappears from the tree.	https://git-scm.com/docs/rev-list.html
git-rev-list --merges	A										Print only merge commits. This is exactly the same as --min-parents=2.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-merges	A										Do not print commits with more than one parent. This is
exactly the same as --max-parents=1.	https://git-scm.com/docs/rev-list.html
git-rev-list --min-parents=<number>	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-parents=<number>	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-min-parents	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-max-parents	A										Show only commits which have at least (or at most) that many parent
commits. In particular, --max-parents=1 is the same as --no-merges,
--min-parents=2 is the same as --merges.  --max-parents=0
gives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --first-parent	A										Follow only the first parent commit upon seeing a merge
commit.  This option can give a better overview when
viewing the evolution of a particular topic branch,
because merges into a topic branch tend to be only about
adjusting to updated upstream from time to time, and
this option allows you to ignore the individual commits
brought in to your history by such a merge. Cannot be
combined with --bisect.	https://git-scm.com/docs/rev-list.html
git-rev-list --not	A										Reverses the meaning of the ^ prefix (or lack thereof)
for all following revision specifiers, up to the next --not.	https://git-scm.com/docs/rev-list.html
git-rev-list --all	A										Pretend as if all the refs in refs/ are listed on the
command line as <commit>.	https://git-scm.com/docs/rev-list.html
git-rev-list --branches[=<pattern>]	A										Pretend as if all the refs in refs/heads are listed
on the command line as <commit>. If <pattern> is given, limit
branches to ones matching given shell glob. If pattern lacks ?,
*, or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --tags[=<pattern>]	A										Pretend as if all the refs in refs/tags are listed
on the command line as <commit>. If <pattern> is given, limit
tags to ones matching given shell glob. If pattern lacks ?, *,
or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --remotes[=<pattern>]	A										Pretend as if all the refs in refs/remotes are listed
on the command line as <commit>. If <pattern> is given, limit
remote-tracking branches to ones matching given shell glob.
If pattern lacks ?, *, or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --glob=<glob-pattern>	A										Pretend as if all the refs matching shell glob <glob-pattern>
are listed on the command line as <commit>. Leading refs/,
is automatically prepended if missing. If pattern lacks ?, *,
or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,
--branches, --tags, --remotes, or --glob would otherwise
consider. Repetitions of this option accumulate exclusion patterns
up to the next --all, --branches, --tags, --remotes, or
--glob option (other options or arguments do not clear
accumulated patterns).	https://git-scm.com/docs/rev-list.html
git-rev-list --reflog	A										Pretend as if all objects mentioned by reflogs are listed on the
command line as <commit>.	https://git-scm.com/docs/rev-list.html
git-rev-list --ignore-missing	A										Upon seeing an invalid object name in the input, pretend as if
the bad input was not given.	https://git-scm.com/docs/rev-list.html
git-rev-list --stdin	A										In addition to the <commit> listed on the command
line, read them from the standard input. If a -- separator is
seen, stop reading commits and start reading paths to limit the
result.	https://git-scm.com/docs/rev-list.html
git-rev-list --quiet	A										Don’t print anything to standard output.  This form
is primarily meant to allow the caller to
test the exit status to see if a range of objects is fully
connected (or not).  It is faster than redirecting stdout
to /dev/null as the output does not have to be formatted.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry-mark	A										Like --cherry-pick (see below) but mark equivalent commits
with = rather than omitting them, and inequivalent ones with +.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry-pick	A										Omit any commit that introduces the same change as
another commit on the “other side” when the set of
commits are limited with symmetric difference.	https://git-scm.com/docs/rev-list.html
git-rev-list --left-only	A										List only commits on the respective side of a symmetric range,
i.e. only those which would be marked < resp. > by
--left-right.	https://git-scm.com/docs/rev-list.html
git-rev-list --right-only	A										List only commits on the respective side of a symmetric range,
i.e. only those which would be marked < resp. > by
--left-right.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry	A										A synonym for --right-only --cherry-mark --no-merges; useful to
limit the output to the commits on our side and mark those that
have been applied to the other side of a forked history with
git log --cherry upstream...mybranch, similar to
git cherry upstream mybranch.	https://git-scm.com/docs/rev-list.html
git-rev-list -g	A										Instead of walking the commit ancestry chain, walk
reflog entries from the most recent one to older ones.
When this option is used you cannot specify commits to
exclude (that is, ^commit, commit1..commit2,
and commit1...commit2 notations cannot be used).	https://git-scm.com/docs/rev-list.html
git-rev-list --walk-reflogs	A										Instead of walking the commit ancestry chain, walk
reflog entries from the most recent one to older ones.
When this option is used you cannot specify commits to
exclude (that is, ^commit, commit1..commit2,
and commit1...commit2 notations cannot be used).	https://git-scm.com/docs/rev-list.html
git-rev-list --merge	A										After a failed merge, show refs that touch files having a
conflict and don’t exist on all heads to merge.	https://git-scm.com/docs/rev-list.html
git-rev-list --boundary	A										Output excluded boundary commits. Boundary commits are
prefixed with -.	https://git-scm.com/docs/rev-list.html
git-rev-list --use-bitmap-index	A										Try to speed up the traversal using the pack bitmap index (if
one is available). Note that when traversing with --objects,
trees and blobs will not have their associated path printed.	https://git-scm.com/docs/rev-list.html
git-rev-list <paths>	A										Commits modifying the given <paths> are selected.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-by-decoration	A										Commits that are referred by some branch or tag are selected.	https://git-scm.com/docs/rev-list.html
git-rev-list Default mode	A										Simplifies the history to the simplest history explaining the
final state of the tree. Simplest because it prunes some side
branches if the end result is the same (i.e. merging branches
with the same content)	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history	A										Same as the default mode, but does not prune some history.	https://git-scm.com/docs/rev-list.html
git-rev-list --dense	A										Only the selected commits are shown, plus some to have a
meaningful history.	https://git-scm.com/docs/rev-list.html
git-rev-list --sparse	A										All commits in the simplified history are shown.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-merges	A										Additional option to --full-history to remove some needless
merges from the resulting history, as there are no selected
commits contributing to this merge.	https://git-scm.com/docs/rev-list.html
git-rev-list --ancestry-path	A										When given a range of commits to display (e.g. commit1..commit2
or commit2 ^commit1), only display commits that exist
directly on the ancestry chain between the commit1 and
commit2, i.e. commits that are both descendants of commit1,
and ancestors of commit2.	https://git-scm.com/docs/rev-list.html
git-rev-list Default mode	A										Commits are included if they are not TREESAME to any parent
(though this can be changed, see --sparse below).  If the
commit was a merge, and it was TREESAME to one parent, follow
only that parent.  (Even if there are several TREESAME
parents, follow only one of them.)  Otherwise, follow all
parents.	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history without parent rewriting	A										This mode differs from the default in one point: always follow
all parents of a merge, even if it is TREESAME to one of them.
Even if more than one side of the merge has commits that are
included, this does not imply that the merge itself is!  In
the example, we get	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history with parent rewriting	A										Ordinary commits are only included if they are !TREESAME
(though this can be changed, see --sparse below).	https://git-scm.com/docs/rev-list.html
git-rev-list --dense	A										Commits that are walked are included if they are not TREESAME
to any parent.	https://git-scm.com/docs/rev-list.html
git-rev-list --sparse	A										All commits that are walked are included.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-merges	A										First, build a history graph in the same way that
--full-history with parent rewriting does (see above).	https://git-scm.com/docs/rev-list.html
git-rev-list --ancestry-path	A										Limit the displayed commits to those directly on the ancestry
chain between the “from” and “to” commits in the given commit
range. I.e. only display commits that are ancestor of the “to”
commit and descendants of the “from” commit.	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect	A										Limit output to the one commit object which is roughly halfway between
included and excluded commits. Note that the bad bisection ref
refs/bisect/bad is added to the included commits (if it
exists) and the good bisection refs refs/bisect/good-* are
added to the excluded commits (if they exist). Thus, supposing there
are no refs in refs/bisect/, if	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect-vars	A										This calculates the same as --bisect, except that refs in
refs/bisect/ are not used, and except that this outputs
text ready to be eval’ed by the shell. These lines will assign the
name of the midpoint revision to the variable bisect_rev, and the
expected number of commits to be tested after bisect_rev is tested
to bisect_nr, the expected number of commits to be tested if
bisect_rev turns out to be good to bisect_good, the expected
number of commits to be tested if bisect_rev turns out to be bad to
bisect_bad, and the number of commits we are bisecting right now to
bisect_all.	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect-all	A										This outputs all the commit objects between the included and excluded
commits, ordered by their distance to the included and excluded
commits. Refs in refs/bisect/ are not used. The farthest
from them is displayed first. (This is the only one displayed by
--bisect.)	https://git-scm.com/docs/rev-list.html
git-rev-list --date-order	A										Show no parents before all of its children are shown, but
otherwise show commits in the commit timestamp order.	https://git-scm.com/docs/rev-list.html
git-rev-list --author-date-order	A										Show no parents before all of its children are shown, but
otherwise show commits in the author timestamp order.	https://git-scm.com/docs/rev-list.html
git-rev-list --topo-order	A										Show no parents before all of its children are shown, and
avoid showing commits on multiple lines of history
intermixed.	https://git-scm.com/docs/rev-list.html
git-rev-list --reverse	A										Output the commits in reverse order.
Cannot be combined with --walk-reflogs.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects	A										Print the object IDs of any object referenced by the listed
commits.  --objects foo ^bar thus means “send me
all object IDs which I need to download if I have the commit
object bar but not foo”.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects-edge	A										Similar to --objects, but also print the IDs of excluded
commits prefixed with a “-” character.  This is used by
git-pack-objects[1] to build a “thin” pack, which records
objects in deltified form based on objects contained in these
excluded commits to reduce network traffic.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects-edge-aggressive	A										Similar to --objects-edge, but it tries harder to find excluded
commits at the cost of increased time.  This is used instead of
--objects-edge to build “thin” packs for shallow repositories.	https://git-scm.com/docs/rev-list.html
git-rev-list --indexed-objects	A										Pretend as if all trees and blobs used by the index are listed
on the command line.  Note that you probably want to use
--objects, too.	https://git-scm.com/docs/rev-list.html
git-rev-list --unpacked	A										Only useful with --objects; print the object IDs that are not
in packs.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-walk[=(sorted|unsorted)]	A										Only show the given commits, but do not traverse their ancestors.
This has no effect if a range is specified. If the argument
unsorted is given, the commits are shown in the order they were
given on the command line. Otherwise (if sorted or no argument
was given), the commits are shown in reverse chronological order
by commit time.
Cannot be combined with --graph.	https://git-scm.com/docs/rev-list.html
git-rev-list --do-walk	A										Overrides a previous --no-walk.	https://git-scm.com/docs/rev-list.html
git-rev-list --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/rev-list.html
git-rev-list --format=<format>	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/rev-list.html
git-rev-list --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object
name, show only a partial prefix.  Non default number of
digits can be specified with "--abbrev=<n>" (which also modifies
diff output, if it is displayed).	https://git-scm.com/docs/rev-list.html
git-rev-list --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates
--abbrev-commit and those options which imply it such as
"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/rev-list.html
git-rev-list --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"
used together.	https://git-scm.com/docs/rev-list.html
git-rev-list --encoding=<encoding>	A										The commit objects record the encoding used for the log message
in their encoding header; this option can be used to tell the
command to re-code the commit log message in the encoding
preferred by the user.  For non plumbing commands this
defaults to UTF-8. Note that if an object claims to be encoded
in X and we are outputting in X, we will output the object
verbatim; this means that invalid sequences in the original
commit may be copied to the output.	https://git-scm.com/docs/rev-list.html
git-rev-list --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --show-signature	A										Check the validity of a signed commit object by passing the signature
to gpg --verify and show the output.	https://git-scm.com/docs/rev-list.html
git-rev-list --relative-date	A										Synonym for --date=relative.	https://git-scm.com/docs/rev-list.html
git-rev-list --date=<format>	A										Only takes effect for dates shown in human-readable format, such
as when using --pretty. log.date config variable sets a default
value for the log command’s --date option. By default, dates
are shown in the original time zone (either committer’s or
author’s). If -local is appended to the format (e.g.,
iso-local), the user’s local time zone is used instead.	https://git-scm.com/docs/rev-list.html
git-rev-list --header	A										Print the contents of the commit in raw-format; each record is
separated with a NUL character.	https://git-scm.com/docs/rev-list.html
git-rev-list --parents	A										Print also the parents of the commit (in the form "commit parent…​").
Also enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/rev-list.html
git-rev-list --children	A										Print also the children of the commit (in the form "commit child…​").
Also enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/rev-list.html
git-rev-list --timestamp	A										Print the raw commit timestamp.	https://git-scm.com/docs/rev-list.html
git-rev-list --left-right	A										Mark which side of a symmetric diff a commit is reachable from.
Commits from the left side are prefixed with < and those from
the right with >.  If combined with --boundary, those
commits are prefixed with -.	https://git-scm.com/docs/rev-list.html
git-rev-list --graph	A										Draw a text-based graphical representation of the commit history
on the left hand side of the output.  This may cause extra lines
to be printed in between commits, in order for the graph history
to be drawn properly.
Cannot be combined with --no-walk.	https://git-scm.com/docs/rev-list.html
git-rev-list --show-linear-break[=<barrier>]	A										When --graph is not used, all history branches are flattened
which can make it hard to see that the two consecutive commits
do not belong to a linear branch. This option puts a barrier
in between them in that case. If <barrier> is specified, it
is the string that will be shown instead of the default one.	https://git-scm.com/docs/rev-list.html
git-rev-list --count	A										Print a number stating how many commits would have been
listed, and suppress all other output.  When used together
with --left-right, instead print the counts for left and
right commits, separated by a tab. When used together with
--cherry-mark, omit patch equivalent commits from these
counts and print the count for equivalent commits separated
by a tab.	https://git-scm.com/docs/rev-list.html
git-rev-list	A										Lists commit objects in reverse chronological order
<pre><code>git rev-list [ --max-count=<number> ]\n         [ --skip=<number> ]\n         [ --max-age=<timestamp> ]\n         [ --min-age=<timestamp> ]\n         [ --sparse ]\n         [ --merges ]\n         [ --no-merges ]\n         [ --min-parents=<number> ]\n         [ --no-min-parents ]\n         [ --max-parents=<number> ]\n         [ --no-max-parents ]\n         [ --first-parent ]\n         [ --remove-empty ]\n         [ --full-history ]\n         [ --not ]\n         [ --all ]\n         [ --branches[=<pattern>] ]\n         [ --tags[=<pattern>] ]\n         [ --remotes[=<pattern>] ]\n         [ --glob=<glob-pattern> ]\n         [ --ignore-missing ]\n         [ --stdin ]\n         [ --quiet ]\n         [ --topo-order ]\n         [ --parents ]\n         [ --timestamp ]\n         [ --left-right ]\n         [ --left-only ]\n         [ --right-only ]\n         [ --cherry-mark ]\n         [ --cherry-pick ]\n         [ --encoding=<encoding> ]\n         [ --(author|committer|grep)=<pattern> ]\n         [ --regexp-ignore-case | -i ]\n         [ --extended-regexp | -E ]\n         [ --fixed-strings | -F ]\n         [ --date=<format>]\n         [ [ --objects | --objects-edge | --objects-edge-aggressive ]\n           [ --unpacked ] ]\n         [ --pretty | --header ]\n         [ --bisect ]\n         [ --bisect-vars ]\n         [ --bisect-all ]\n         [ --merge ]\n         [ --reverse ]\n         [ --walk-reflogs ]\n         [ --no-walk ] [ --do-walk ]\n         [ --count ]\n         [ --use-bitmap-index ]\n         <commit>…​ [ -- <paths>…​ ]</pre></code>	https://git-scm.com/docs/rev-list.html
git-rev-parse --parseopt	A										Use git rev-parse in option parsing mode (see PARSEOPT section below).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --sq-quote	A										Use git rev-parse in shell quoting mode (see SQ-QUOTE
section below). In contrast to the --sq option below, this
mode does only quoting. Nothing else is done to command input.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --keep-dashdash	A										Only meaningful in --parseopt mode. Tells the option parser to echo
out the first -- met instead of skipping it.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --stop-at-non-option	A										Only meaningful in --parseopt mode.  Lets the option parser stop at
the first non-option argument.  This can be used to parse sub-commands
that take options themselves.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --stuck-long	A										Only meaningful in --parseopt mode. Output the options in their
long form if available, and with their arguments stuck.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --revs-only	A										Do not output flags and parameters not meant for
git rev-list command.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --no-revs	A										Do not output flags and parameters meant for
git rev-list command.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --flags	A										Do not output non-flag parameters.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --no-flags	A										Do not output flag parameters.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --default <arg>	A										If there is no parameter given by the user, use <arg>
instead.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --prefix <arg>	A										Behave as if git rev-parse was invoked from the <arg>
subdirectory of the working tree.  Any relative filenames are
resolved as if they are prefixed by <arg> and will be printed
in that form.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --verify	A										Verify that exactly one parameter is provided, and that it
can be turned into a raw 20-byte SHA-1 that can be used to
access the object database. If so, emit it to the standard
output; otherwise, error out.	https://git-scm.com/docs/rev-parse.html
git-rev-parse -q	A										Only meaningful in --verify mode. Do not output an error
message if the first argument is not a valid object name;
instead exit with non-zero status silently.
SHA-1s for valid object names are printed to stdout on success.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --quiet	A										Only meaningful in --verify mode. Do not output an error
message if the first argument is not a valid object name;
instead exit with non-zero status silently.
SHA-1s for valid object names are printed to stdout on success.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --sq	A										Usually the output is made one line per flag and
parameter.  This option makes output a single line,
properly quoted for consumption by shell.  Useful when
you expect your parameter to contain whitespaces and
newlines (e.g. when using pickaxe -S with
git diff-*). In contrast to the --sq-quote option,
the command input is still interpreted as usual.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --not	A										When showing object names, prefix them with ^ and
strip ^ prefix from the object names that already have
one.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --abbrev-ref[=(strict|loose)]	A										A non-ambiguous short name of the objects name.
The option core.warnAmbiguousRefs is used to select the strict
abbreviation mode.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --short	A										Instead of outputting the full SHA-1 values of object names try to
abbreviate them to a shorter unique name. When no length is specified
7 is used. The minimum length is 4.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --short=number	A										Instead of outputting the full SHA-1 values of object names try to
abbreviate them to a shorter unique name. When no length is specified
7 is used. The minimum length is 4.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --symbolic	A										Usually the object names are output in SHA-1 form (with
possible ^ prefix); this option makes them output in a
form as close to the original input as possible.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --symbolic-full-name	A										This is similar to --symbolic, but it omits input that
are not refs (i.e. branch or tag names; or more
explicitly disambiguating "heads/master" form, when you
want to name the "master" branch when there is an
unfortunately named tag "master"), and show them as full
refnames (e.g. "refs/heads/master").	https://git-scm.com/docs/rev-parse.html
git-rev-parse --all	A										Show all refs found in refs/.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --branches[=pattern]	A										Show all branches, tags, or remote-tracking branches,
respectively (i.e., refs found in refs/heads,
refs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --tags[=pattern]	A										Show all branches, tags, or remote-tracking branches,
respectively (i.e., refs found in refs/heads,
refs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --remotes[=pattern]	A										Show all branches, tags, or remote-tracking branches,
respectively (i.e., refs found in refs/heads,
refs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --glob=pattern	A										Show all refs matching the shell glob pattern pattern. If
the pattern does not start with refs/, this is automatically
prepended.  If the pattern does not contain a globbing
character (?, *, or [), it is turned into a prefix
match by appending /*.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,
--branches, --tags, --remotes, or --glob would otherwise
consider. Repetitions of this option accumulate exclusion patterns
up to the next --all, --branches, --tags, --remotes, or
--glob option (other options or arguments do not clear
accumulated patterns).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --disambiguate=<prefix>	A										Show every object whose name begins with the given prefix.
The <prefix> must be at least 4 hexadecimal digits long to
avoid listing each and every object in the repository by
mistake.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --local-env-vars	A										List the GIT_* environment variables that are local to the
repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).
Only the names of the variables are listed, not their value,
even if they are set.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-dir	A										Show $GIT_DIR if defined. Otherwise show the path to
the .git directory. The path shown, when relative, is
relative to the current working directory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-common-dir	A										Show $GIT_COMMON_DIR if defined, else $GIT_DIR.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-inside-git-dir	A										When the current working directory is below the repository
directory print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-inside-work-tree	A										When the current working directory is inside the work tree of the
repository print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-bare-repository	A										When the repository is bare print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --resolve-git-dir <path>	A										Check if <path> is a valid repository or a gitfile that
points at a valid repository, and print the location of the
repository.  If <path> is a gitfile then the resolved path
to the real repository is printed.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-path <path>	A										Resolve "$GIT_DIR/<path>" and takes other path relocation
variables such as $GIT_OBJECT_DIRECTORY,
$GIT_INDEX_FILE…​ into account. For example, if
$GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse
--git-path objects/abc" returns /foo/bar/abc.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-cdup	A										When the command is invoked from a subdirectory, show the
path of the top-level directory relative to the current
directory (typically a sequence of "../", or an empty string).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-prefix	A										When the command is invoked from a subdirectory, show the
path of the current directory relative to the top-level
directory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-toplevel	A										Show the absolute path of the top-level directory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --shared-index-path	A										Show the path to the shared index file in split index mode, or
empty if not in split-index mode.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --since=datestring	A										Parse the date string, and output the corresponding
--max-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --after=datestring	A										Parse the date string, and output the corresponding
--max-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --until=datestring	A										Parse the date string, and output the corresponding
--min-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --before=datestring	A										Parse the date string, and output the corresponding
--min-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse <args>…​	A										Flags and parameters to be parsed.	https://git-scm.com/docs/rev-parse.html
git-rev-parse	A										Pick out and massage parameters
<pre><code>git rev-parse [ --option ] <args>…​</pre></code>	https://git-scm.com/docs/rev-parse.html
git-revert <commit>…​	A										Commits to revert.
For a more complete list of ways to spell commit names, see
gitrevisions[7].
Sets of commits can also be given but no traversal is done by
default, see git-rev-list[1] and its --no-walk
option.	https://git-scm.com/docs/revert.html
git-revert -e	A										With this option, git revert will let you edit the commit
message prior to committing the revert. This is the default if
you run the command from a terminal.	https://git-scm.com/docs/revert.html
git-revert --edit	A										With this option, git revert will let you edit the commit
message prior to committing the revert. This is the default if
you run the command from a terminal.	https://git-scm.com/docs/revert.html
git-revert -m parent-number	A										Usually you cannot revert a merge because you do not know which
side of the merge should be considered the mainline.  This
option specifies the parent number (starting from 1) of
the mainline and allows revert to reverse the change
relative to the specified parent.	https://git-scm.com/docs/revert.html
git-revert --mainline parent-number	A										Usually you cannot revert a merge because you do not know which
side of the merge should be considered the mainline.  This
option specifies the parent number (starting from 1) of
the mainline and allows revert to reverse the change
relative to the specified parent.	https://git-scm.com/docs/revert.html
git-revert --no-edit	A										With this option, git revert will not start the commit
message editor.	https://git-scm.com/docs/revert.html
git-revert -n	A										Usually the command automatically creates some commits with
commit log messages stating which commits were
reverted.  This flag applies the changes necessary
to revert the named commits to your working tree
and the index, but does not make the commits.  In addition,
when this option is used, your index does not have to match
the HEAD commit.  The revert is done against the
beginning state of your index.	https://git-scm.com/docs/revert.html
git-revert --no-commit	A										Usually the command automatically creates some commits with
commit log messages stating which commits were
reverted.  This flag applies the changes necessary
to revert the named commits to your working tree
and the index, but does not make the commits.  In addition,
when this option is used, your index does not have to match
the HEAD commit.  The revert is done against the
beginning state of your index.	https://git-scm.com/docs/revert.html
git-revert -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/revert.html
git-revert --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and
defaults to the committer identity; if specified, it must be
stuck to the option without a space.	https://git-scm.com/docs/revert.html
git-revert -s	A										Add Signed-off-by line at the end of the commit message.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/revert.html
git-revert --signoff	A										Add Signed-off-by line at the end of the commit message.
See the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/revert.html
git-revert --strategy=<strategy>	A										Use the given merge strategy.  Should only be used once.
See the MERGE STRATEGIES section in git-merge[1]
for details.	https://git-scm.com/docs/revert.html
git-revert -X<option>	A										Pass the merge strategy-specific option through to the
merge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/revert.html
git-revert --strategy-option=<option>	A										Pass the merge strategy-specific option through to the
merge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/revert.html
git-revert	A										Revert some existing commits
<pre><code>git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>…​\ngit revert --continue\ngit revert --quit\ngit revert --abort</pre></code>	https://git-scm.com/docs/revert.html
git-rm <file>…​	A										Files to remove.  Fileglobs (e.g. *.c) can be given to
remove all matching files.  If you want Git to expand
file glob characters, you may need to shell-escape them.
A leading directory name
(e.g. dir to remove dir/file1 and dir/file2) can be
given to remove all files in the directory, and recursively
all sub-directories,
but this requires the -r option to be explicitly given.	https://git-scm.com/docs/rm.html
git-rm -f	A										Override the up-to-date check.	https://git-scm.com/docs/rm.html
git-rm --force	A										Override the up-to-date check.	https://git-scm.com/docs/rm.html
git-rm -n	A										Don’t actually remove any file(s).  Instead, just show
if they exist in the index and would otherwise be removed
by the command.	https://git-scm.com/docs/rm.html
git-rm --dry-run	A										Don’t actually remove any file(s).  Instead, just show
if they exist in the index and would otherwise be removed
by the command.	https://git-scm.com/docs/rm.html
git-rm -r	A										Allow recursive removal when a leading directory name is
given.	https://git-scm.com/docs/rm.html
git-rm --	A										This option can be used to separate command-line options from
the list of files, (useful when filenames might be mistaken
for command-line options).	https://git-scm.com/docs/rm.html
git-rm --cached	A										Use this option to unstage and remove paths only from the index.
Working tree files, whether modified or not, will be
left alone.	https://git-scm.com/docs/rm.html
git-rm --ignore-unmatch	A										Exit with a zero status even if no files matched.	https://git-scm.com/docs/rm.html
git-rm -q	A										git rm normally outputs one line (in the form of an rm command)
for each file removed. This option suppresses that output.	https://git-scm.com/docs/rm.html
git-rm --quiet	A										git rm normally outputs one line (in the form of an rm command)
for each file removed. This option suppresses that output.	https://git-scm.com/docs/rm.html
git-rm	A										Remove files from the working tree and from the index
<pre><code>git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] <file>…​</pre></code>	https://git-scm.com/docs/rm.html
git-send-email --annotate	A										Review and edit each patch you’re about to send. Default is the value
of sendemail.annotate. See the CONFIGURATION section for
sendemail.multiEdit.	https://git-scm.com/docs/send-email.html
git-send-email --bcc=<address>,…​	A										Specify a "Bcc:" value for each email. Default is the value of
sendemail.bcc.	https://git-scm.com/docs/send-email.html
git-send-email --cc=<address>,…​	A										Specify a starting "Cc:" value for each email.
Default is the value of sendemail.cc.	https://git-scm.com/docs/send-email.html
git-send-email --compose	A										Invoke a text editor (see GIT_EDITOR in git-var[1])
to edit an introductory message for the patch series.	https://git-scm.com/docs/send-email.html
git-send-email --from=<address>	A										Specify the sender of the emails.  If not specified on the command line,
the value of the sendemail.from configuration option is used.  If
neither the command-line option nor sendemail.from are set, then the
user will be prompted for the value.  The default for the prompt will be
the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not
set, as returned by "git var -l".	https://git-scm.com/docs/send-email.html
git-send-email --in-reply-to=<identifier>	A										Make the first mail (or all the mails with --no-thread) appear as a
reply to the given Message-Id, which avoids breaking threads to
provide a new patch series.
The second and subsequent emails will be sent as replies according to
the --[no]-chain-reply-to setting.	https://git-scm.com/docs/send-email.html
git-send-email --subject=<string>	A										Specify the initial subject of the email thread.
Only necessary if --compose is also set.  If --compose
is not set, this will be prompted for.	https://git-scm.com/docs/send-email.html
git-send-email --to=<address>,…​	A										Specify the primary recipient of the emails generated. Generally, this
will be the upstream maintainer of the project involved. Default is the
value of the sendemail.to configuration value; if that is unspecified,
and --to-cmd is not specified, this will be prompted for.	https://git-scm.com/docs/send-email.html
git-send-email --8bit-encoding=<encoding>	A										When encountering a non-ASCII message or subject that does not
declare its encoding, add headers/quoting to indicate it is
encoded in <encoding>.  Default is the value of the
sendemail.assume8bitEncoding; if that is unspecified, this
will be prompted for if any non-ASCII files are encountered.	https://git-scm.com/docs/send-email.html
git-send-email --compose-encoding=<encoding>	A										Specify encoding of compose message. Default is the value of the
sendemail.composeencoding; if that is unspecified, UTF-8 is assumed.	https://git-scm.com/docs/send-email.html
git-send-email --transfer-encoding=(7bit|8bit|quoted-printable|base64)	A										Specify the transfer encoding to be used to send the message over SMTP.
7bit will fail upon encountering a non-ASCII message.  quoted-printable
can be useful when the repository contains files that contain carriage
returns, but makes the raw patch email file (as saved from a MUA) much
harder to inspect manually.  base64 is even more fool proof, but also
even more opaque.  Default is the value of the sendemail.transferEncoding
configuration value; if that is unspecified, git will use 8bit and not
add a Content-Transfer-Encoding header.	https://git-scm.com/docs/send-email.html
git-send-email --xmailer	A										Add (or prevent adding) the "X-Mailer:" header.  By default,
the header is added, but it can be turned off by setting the
sendemail.xmailer configuration variable to false.	https://git-scm.com/docs/send-email.html
git-send-email --no-xmailer	A										Add (or prevent adding) the "X-Mailer:" header.  By default,
the header is added, but it can be turned off by setting the
sendemail.xmailer configuration variable to false.	https://git-scm.com/docs/send-email.html
git-send-email --envelope-sender=<address>	A										Specify the envelope sender used to send the emails.
This is useful if your default address is not the address that is
subscribed to a list. In order to use the From address, set the
value to "auto". If you use the sendmail binary, you must have
suitable privileges for the -f parameter.  Default is the value of the
sendemail.envelopeSender configuration variable; if that is
unspecified, choosing the envelope sender is left to your MTA.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-encryption=<encryption>	A										Specify the encryption to use, either ssl or tls.  Any other
value reverts to plain SMTP.  Default is the value of
sendemail.smtpEncryption.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-domain=<FQDN>	A										Specifies the Fully Qualified Domain Name (FQDN) used in the
HELO/EHLO command to the SMTP server.  Some servers require the
FQDN to match your IP address.  If not set, git send-email attempts
to determine your FQDN automatically.  Default is the value of
sendemail.smtpDomain.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-auth=<mechanisms>	A										Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
forces using only the listed mechanisms. Example:	https://git-scm.com/docs/send-email.html
git-send-email --smtp-pass[=<password>]	A										Password for SMTP-AUTH. The argument is optional: If no
argument is specified, then the empty string is used as
the password. Default is the value of sendemail.smtpPass,
however --smtp-pass always overrides this value.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server=<host>	A										If set, specifies the outgoing SMTP server to use (e.g.
smtp.example.com or a raw IP address).  Alternatively it can
specify a full pathname of a sendmail-like program instead;
the program must support the -i option.  Default value can
be specified by the sendemail.smtpServer configuration
option; the built-in default is /usr/sbin/sendmail or
/usr/lib/sendmail if such program is available, or
localhost otherwise.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server-port=<port>	A										Specifies a port different from the default port (SMTP
servers typically listen to smtp port 25, but may also listen to
submission port 587, or the common SSL smtp port 465);
symbolic port names (e.g. "submission" instead of 587)
are also accepted. The port can also be set with the
sendemail.smtpServerPort configuration variable.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server-option=<option>	A										If set, specifies the outgoing SMTP server option to use.
Default value can be specified by the sendemail.smtpServerOption
configuration option.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-ssl	A										Legacy alias for --smtp-encryption ssl.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-ssl-cert-path	A										Path to a store of trusted CA certificates for SMTP SSL/TLS
certificate validation (either a directory that has been processed
by c_rehash, or a single file containing one or more PEM format
certificates concatenated together: see verify(1) -CAfile and
-CApath for more information on these). Set it to an empty string
to disable certificate verification. Defaults to the value of the
sendemail.smtpsslcertpath configuration variable, if set, or the
backing SSL library’s compiled-in default otherwise (which should
be the best choice on most platforms).	https://git-scm.com/docs/send-email.html
git-send-email --smtp-user=<user>	A										Username for SMTP-AUTH. Default is the value of sendemail.smtpUser;
if a username is not specified (with --smtp-user or sendemail.smtpUser),
then authentication is not attempted.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-debug=0|1	A										Enable (1) or disable (0) debug output. If enabled, SMTP
commands and replies will be printed. Useful to debug TLS
connection and authentication problems.	https://git-scm.com/docs/send-email.html
git-send-email --to-cmd=<command>	A										Specify a command to execute once per patch file which
should generate patch file specific "To:" entries.
Output of this command must be single email address per line.
Default is the value of sendemail.tocmd configuration value.	https://git-scm.com/docs/send-email.html
git-send-email --cc-cmd=<command>	A										Specify a command to execute once per patch file which
should generate patch file specific "Cc:" entries.
Output of this command must be single email address per line.
Default is the value of sendemail.ccCmd configuration value.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]chain-reply-to	A										If this is set, each email will be sent as a reply to the previous
email sent.  If disabled with "--no-chain-reply-to", all emails after
the first will be sent as replies to the first email sent.  When using
this, it is recommended that the first file given be an overview of the
entire patch series. Disabled by default, but the sendemail.chainReplyTo
configuration variable can be used to enable it.	https://git-scm.com/docs/send-email.html
git-send-email --identity=<identity>	A										A configuration identity. When given, causes values in the
sendemail.<identity> subsection to take precedence over
values in the sendemail section. The default identity is
the value of sendemail.identity.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]signed-off-by-cc	A										If this is set, add emails found in Signed-off-by: or Cc: lines to the
cc list. Default is the value of sendemail.signedoffbycc configuration
value; if that is unspecified, default to --signed-off-by-cc.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]cc-cover	A										If this is set, emails found in Cc: headers in the first patch of
the series (typically the cover letter) are added to the cc list
for each email set. Default is the value of sendemail.cccover
configuration value; if that is unspecified, default to --no-cc-cover.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]to-cover	A										If this is set, emails found in To: headers in the first patch of
the series (typically the cover letter) are added to the to list
for each email set. Default is the value of sendemail.tocover
configuration value; if that is unspecified, default to --no-to-cover.	https://git-scm.com/docs/send-email.html
git-send-email --suppress-cc=<category>	A										Specify an additional category of recipients to suppress the
auto-cc of:	https://git-scm.com/docs/send-email.html
git-send-email --[no-]suppress-from	A										If this is set, do not add the From: address to the cc: list.
Default is the value of sendemail.suppressFrom configuration
value; if that is unspecified, default to --no-suppress-from.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]thread	A										If this is set, the In-Reply-To and References headers will be
added to each email sent.  Whether each mail refers to the
previous email (deep threading per git format-patch
wording) or to the first email (shallow threading) is
governed by "--[no-]chain-reply-to".	https://git-scm.com/docs/send-email.html
git-send-email --confirm=<mode>	A										Confirm just before sending:	https://git-scm.com/docs/send-email.html
git-send-email --dry-run	A										Do everything except actually send the emails.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]format-patch	A										When an argument may be understood either as a reference or as a file name,
choose to understand it as a format-patch argument (--format-patch)
or as a file name (--no-format-patch). By default, when such a conflict
occurs, git send-email will fail.	https://git-scm.com/docs/send-email.html
git-send-email --quiet	A										Make git-send-email less verbose.  One line per email should be
all that is output.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]validate	A										Perform sanity checks on patches.
Currently, validation means the following:	https://git-scm.com/docs/send-email.html
git-send-email --force	A										Send emails even if safety checks would prevent it.	https://git-scm.com/docs/send-email.html
git-send-email --dump-aliases	A										Instead of the normal operation, dump the shorthand alias names from
the configured alias file(s), one per line in alphabetical order. Note,
this only includes the alias name and not its expanded email addresses.
See sendemail.aliasesfile for more information about aliases.	https://git-scm.com/docs/send-email.html
git-send-email	A										Send a collection of patches as emails
<pre><code>git send-email [options] <file|directory|rev-list options>…​\ngit send-email --dump-aliases</pre></code>	https://git-scm.com/docs/send-email.html
git-shortlog -n	A										Sort output according to the number of commits per author instead
of author alphabetic order.	https://git-scm.com/docs/shortlog.html
git-shortlog --numbered	A										Sort output according to the number of commits per author instead
of author alphabetic order.	https://git-scm.com/docs/shortlog.html
git-shortlog -s	A										Suppress commit description and provide a commit count summary only.	https://git-scm.com/docs/shortlog.html
git-shortlog --summary	A										Suppress commit description and provide a commit count summary only.	https://git-scm.com/docs/shortlog.html
git-shortlog -e	A										Show the email address of each author.	https://git-scm.com/docs/shortlog.html
git-shortlog --email	A										Show the email address of each author.	https://git-scm.com/docs/shortlog.html
git-shortlog --format[=<format>]	A										Instead of the commit subject, use some other information to
describe each commit.  <format> can be any string accepted
by the --format option of git log, such as * [%h] %s.
(See the "PRETTY FORMATS" section of git-log[1].)	https://git-scm.com/docs/shortlog.html
git-shortlog -w[<width>[,<indent1>[,<indent2>]]]	A										Linewrap the output by wrapping each line at width.  The first
line of each entry is indented by indent1 spaces, and the second
and subsequent lines are indented by indent2 spaces. width,
indent1, and indent2 default to 76, 6 and 9 respectively.	https://git-scm.com/docs/shortlog.html
git-shortlog <revision range>	A										Show only commits in the specified revision range.  When no
<revision range> is specified, it defaults to HEAD (i.e. the
whole history leading to the current commit).  origin..HEAD
specifies all the commits reachable from the current commit
(i.e. HEAD), but not from origin. For a complete list of
ways to spell <revision range>, see the "Specifying Ranges"
section of gitrevisions[7].	https://git-scm.com/docs/shortlog.html
git-shortlog [\--] <path>…​	A										Consider only commits that are enough to explain how the files
that match the specified paths came to be.	https://git-scm.com/docs/shortlog.html
git-shortlog	A										Summarize git log output
<pre><code>git log --pretty=short | git shortlog [<options>]\ngit shortlog [<options>] [<revision range>] [[\--] <path>…​]</pre></code>	https://git-scm.com/docs/shortlog.html
git-show-ref --head	A										Show the HEAD reference, even if it would normally be filtered out.	https://git-scm.com/docs/show-ref.html
git-show-ref --tags	A										Limit to "refs/heads" and "refs/tags", respectively.  These options
are not mutually exclusive; when given both, references stored in
"refs/heads" and "refs/tags" are displayed.	https://git-scm.com/docs/show-ref.html
git-show-ref --heads	A										Limit to "refs/heads" and "refs/tags", respectively.  These options
are not mutually exclusive; when given both, references stored in
"refs/heads" and "refs/tags" are displayed.	https://git-scm.com/docs/show-ref.html
git-show-ref -d	A										Dereference tags into object IDs as well. They will be shown with "^{}"
appended.	https://git-scm.com/docs/show-ref.html
git-show-ref --dereference	A										Dereference tags into object IDs as well. They will be shown with "^{}"
appended.	https://git-scm.com/docs/show-ref.html
git-show-ref -s	A										Only show the SHA-1 hash, not the reference name. When combined with
--dereference the dereferenced tag will still be shown after the SHA-1.	https://git-scm.com/docs/show-ref.html
git-show-ref --hash[=<n>]	A										Only show the SHA-1 hash, not the reference name. When combined with
--dereference the dereferenced tag will still be shown after the SHA-1.	https://git-scm.com/docs/show-ref.html
git-show-ref --verify	A										Enable stricter reference checking by requiring an exact ref path.
Aside from returning an error code of 1, it will also print an error
message if --quiet was not specified.	https://git-scm.com/docs/show-ref.html
git-show-ref --abbrev[=<n>]	A										Abbreviate the object name.  When using --hash, you do
not have to say --hash --abbrev; --hash=n would do.	https://git-scm.com/docs/show-ref.html
git-show-ref -q	A										Do not print any results to stdout. When combined with --verify this
can be used to silently check if a reference exists.	https://git-scm.com/docs/show-ref.html
git-show-ref --quiet	A										Do not print any results to stdout. When combined with --verify this
can be used to silently check if a reference exists.	https://git-scm.com/docs/show-ref.html
git-show-ref --exclude-existing[=<pattern>]	A										Make git show-ref act as a filter that reads refs from stdin of the
form "^(?:<anything>\s)?<refname>(?:\^{})?$"
and performs the following actions on each:
(1) strip "^{}" at the end of line if any;
(2) ignore if pattern is provided and does not head-match refname;
(3) warn if refname is not a well-formed refname and skip;
(4) ignore if refname is a ref that exists in the local repository;
(5) otherwise output the line.	https://git-scm.com/docs/show-ref.html
git-show-ref <pattern>…​	A										Show references matching one or more patterns. Patterns are matched from
the end of the full name, and only complete parts are matched, e.g.
master matches refs/heads/master, refs/remotes/origin/master,
refs/tags/jedi/master but not refs/heads/mymaster or
refs/remotes/master/jedi.	https://git-scm.com/docs/show-ref.html
git-show-ref	A										List references in a local repository
<pre><code>git show-ref [-q|--quiet] [--verify] [--head] [-d|--dereference]\n         [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]\n         [--heads] [--] [<pattern>…​]\ngit show-ref --exclude-existing[=<pattern>]</pre></code>	https://git-scm.com/docs/show-ref.html
git-show <object>…​	A										The names of objects to show.
For a more complete list of ways to spell object names, see
"SPECIFYING REVISIONS" section in gitrevisions[7].	https://git-scm.com/docs/show.html
git-show --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/show.html
git-show --format=<format>	A										Pretty-print the contents of the commit logs in a given format,
where <format> can be one of oneline, short, medium,
full, fuller, email, raw, format:<string>
and tformat:<string>.  When <format> is none of the above,
and has %placeholder in it, it acts as if
--pretty=tformat:<format> were given.	https://git-scm.com/docs/show.html
git-show --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object
name, show only a partial prefix.  Non default number of
digits can be specified with "--abbrev=<n>" (which also modifies
diff output, if it is displayed).	https://git-scm.com/docs/show.html
git-show --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates
--abbrev-commit and those options which imply it such as
"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/show.html
git-show --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"
used together.	https://git-scm.com/docs/show.html
git-show --encoding=<encoding>	A										The commit objects record the encoding used for the log message
in their encoding header; this option can be used to tell the
command to re-code the commit log message in the encoding
preferred by the user.  For non plumbing commands this
defaults to UTF-8. Note that if an object claims to be encoded
in X and we are outputting in X, we will output the object
verbatim; this means that invalid sequences in the original
commit may be copied to the output.	https://git-scm.com/docs/show.html
git-show --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/show.html
git-show --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/show.html
git-show --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces
to fill to the next display column that is multiple of <n>)
in the log message before showing it in the output.
--expand-tabs is a short-hand for --expand-tabs=8, and
--no-expand-tabs is a short-hand for --expand-tabs=0,
which disables tab expansion.	https://git-scm.com/docs/show.html
git-show --notes[=<treeish>]	A										Show the notes (see git-notes[1]) that annotate the
commit, when showing the commit log message.  This is the default
for git log, git show and git whatchanged commands when
there is no --pretty, --format, or --oneline option given
on the command line.	https://git-scm.com/docs/show.html
git-show --no-notes	A										Do not show notes. This negates the above --notes option, by
resetting the list of notes refs from which notes are shown.
Options are parsed in the order given on the command line, so e.g.
"--notes --notes=foo --no-notes --notes=bar" will only show notes
from "refs/notes/bar".	https://git-scm.com/docs/show.html
git-show --show-notes[=<treeish>]	A										These options are deprecated. Use the above --notes/--no-notes
options instead.	https://git-scm.com/docs/show.html
git-show --[no-]standard-notes	A										These options are deprecated. Use the above --notes/--no-notes
options instead.	https://git-scm.com/docs/show.html
git-show --show-signature	A										Check the validity of a signed commit object by passing the signature
to gpg --verify and show the output.	https://git-scm.com/docs/show.html
git-show	A										Show various types of objects
<pre><code>git show [options] <object>…​</pre></code>	https://git-scm.com/docs/show.html
git-stash save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]	A										Save your local modifications to a new stash, and run git reset
--hard to revert them.  The <message> part is optional and gives
the description along with the stashed state.  For quickly making
a snapshot, you can omit both "save" and <message>, but giving
only <message> does not trigger this action to prevent a misspelled
subcommand from making an unwanted stash.	https://git-scm.com/docs/stash.html
git-stash list [<options>]	A										List the stashes that you currently have.  Each stash is listed
with its name (e.g. stash@{0} is the latest stash, stash@{1} is
the one before, etc.), the name of the branch that was current when the
stash was made, and a short description of the commit the stash was
based on.	https://git-scm.com/docs/stash.html
git-stash show [<stash>]	A										Show the changes recorded in the stash as a diff between the
stashed state and its original parent. When no <stash> is given,
shows the latest one. By default, the command shows the diffstat, but
it will accept any format known to git diff (e.g., git stash show
-p stash@{1} to view the second most recent stash in patch form).
You can use stash.showStat and/or stash.showPatch config variables
to change the default behavior.	https://git-scm.com/docs/stash.html
git-stash pop [--index] [-q|--quiet] [<stash>]	A										Remove a single stashed state from the stash list and apply it
on top of the current working tree state, i.e., do the inverse
operation of git stash save. The working directory must
match the index.	https://git-scm.com/docs/stash.html
git-stash apply [--index] [-q|--quiet] [<stash>]	A										Like pop, but do not remove the state from the stash list. Unlike pop,
<stash> may be any commit that looks like a commit created by
stash save or stash create.	https://git-scm.com/docs/stash.html
git-stash branch <branchname> [<stash>]	A										Creates and checks out a new branch named <branchname> starting from
the commit at which the <stash> was originally created, applies the
changes recorded in <stash> to the new working tree and index.
If that succeeds, and <stash> is a reference of the form
stash@{<revision>}, it then drops the <stash>. When no <stash>
is given, applies the latest one.	https://git-scm.com/docs/stash.html
git-stash clear	A										Remove all the stashed states. Note that those states will then
be subject to pruning, and may be impossible to recover (see
Examples below for a possible strategy).	https://git-scm.com/docs/stash.html
git-stash drop [-q|--quiet] [<stash>]	A										Remove a single stashed state from the stash list. When no <stash>
is given, it removes the latest one. i.e. stash@{0}, otherwise
<stash> must be a valid stash log reference of the form
stash@{<revision>}.	https://git-scm.com/docs/stash.html
git-stash create	A										Create a stash (which is a regular commit object) and return its
object name, without storing it anywhere in the ref namespace.
This is intended to be useful for scripts.  It is probably not
the command you want to use; see "save" above.	https://git-scm.com/docs/stash.html
git-stash store	A										Store a given stash created via git stash create (which is a
dangling merge commit) in the stash ref, updating the stash
reflog.  This is intended to be useful for scripts.  It is
probably not the command you want to use; see "save" above.	https://git-scm.com/docs/stash.html
git-stash	A										Stash the changes in a dirty working directory away
<pre><code>git stash list [<options>]\ngit stash show [<stash>]\ngit stash drop [-q|--quiet] [<stash>]\ngit stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]\ngit stash branch <branchname> [<stash>]\ngit stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n         [-u|--include-untracked] [-a|--all] [<message>]]\ngit stash clear\ngit stash create [<message>]\ngit stash store [-m|--message <message>] [-q|--quiet] <commit></pre></code>	https://git-scm.com/docs/stash.html
git-status -s	A										Give the output in the short-format.	https://git-scm.com/docs/status.html
git-status --short	A										Give the output in the short-format.	https://git-scm.com/docs/status.html
git-status -b	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/status.html
git-status --branch	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/status.html
git-status --porcelain	A										Give the output in an easy-to-parse format for scripts.
This is similar to the short output, but will remain stable
across Git versions and regardless of user configuration. See
below for details.	https://git-scm.com/docs/status.html
git-status --long	A										Give the output in the long-format. This is the default.	https://git-scm.com/docs/status.html
git-status -v	A										In addition to the names of files that have been changed, also
show the textual changes that are staged to be committed
(i.e., like the output of git diff --cached). If -v is specified
twice, then also show the changes in the working tree that
have not yet been staged (i.e., like the output of git diff).	https://git-scm.com/docs/status.html
git-status --verbose	A										In addition to the names of files that have been changed, also
show the textual changes that are staged to be committed
(i.e., like the output of git diff --cached). If -v is specified
twice, then also show the changes in the working tree that
have not yet been staged (i.e., like the output of git diff).	https://git-scm.com/docs/status.html
git-status -u[<mode>]	A										Show untracked files.	https://git-scm.com/docs/status.html
git-status --untracked-files[=<mode>]	A										Show untracked files.	https://git-scm.com/docs/status.html
git-status --ignore-submodules[=<when>]	A										Ignore changes to submodules when looking for changes. <when> can be
either "none", "untracked", "dirty" or "all", which is the default.
Using "none" will consider the submodule modified when it either contains
untracked or modified files or its HEAD differs from the commit recorded
in the superproject and can be used to override any settings of the
ignore option in git-config[1] or gitmodules[5]. When
"untracked" is used submodules are not considered dirty when they only
contain untracked content (but they are still scanned for modified
content). Using "dirty" ignores all changes to the work tree of submodules,
only changes to the commits stored in the superproject are shown (this was
the behavior before 1.7.0). Using "all" hides all changes to submodules
(and suppresses the output of submodule summaries when the config option
status.submoduleSummary is set).	https://git-scm.com/docs/status.html
git-status --ignored	A										Show ignored files as well.	https://git-scm.com/docs/status.html
git-status -z	A										Terminate entries with NUL, instead of LF.  This implies
the --porcelain output format if no other format is given.	https://git-scm.com/docs/status.html
git-status --column[=<options>]	A										Display untracked files in columns. See configuration variable
column.status for option syntax.--column and --no-column
without options are equivalent to always and never
respectively.	https://git-scm.com/docs/status.html
git-status --no-column	A										Display untracked files in columns. See configuration variable
column.status for option syntax.--column and --no-column
without options are equivalent to always and never
respectively.	https://git-scm.com/docs/status.html
git-status	A										Show the working tree status
<pre><code>git status [<options>…​] [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/status.html
git-submodule -q	A										Only print error messages.	https://git-scm.com/docs/submodule.html
git-submodule --quiet	A										Only print error messages.	https://git-scm.com/docs/submodule.html
git-submodule --all	A										This option is only valid for the deinit command. Unregister all
submodules in the working tree.	https://git-scm.com/docs/submodule.html
git-submodule -b	A										Branch of repository to add as submodule.
The name of the branch is recorded as submodule.<name>.branch in
.gitmodules for update --remote.	https://git-scm.com/docs/submodule.html
git-submodule --branch	A										Branch of repository to add as submodule.
The name of the branch is recorded as submodule.<name>.branch in
.gitmodules for update --remote.	https://git-scm.com/docs/submodule.html
git-submodule -f	A										This option is only valid for add, deinit and update commands.
When running add, allow adding an otherwise ignored submodule path.
When running deinit the submodule working trees will be removed even
if they contain local changes.
When running update (only effective with the checkout procedure),
throw away local changes in submodules when switching to a
different commit; and always run a checkout operation in the
submodule, even if the commit listed in the index of the
containing repository matches the commit checked out in the
submodule.	https://git-scm.com/docs/submodule.html
git-submodule --force	A										This option is only valid for add, deinit and update commands.
When running add, allow adding an otherwise ignored submodule path.
When running deinit the submodule working trees will be removed even
if they contain local changes.
When running update (only effective with the checkout procedure),
throw away local changes in submodules when switching to a
different commit; and always run a checkout operation in the
submodule, even if the commit listed in the index of the
containing repository matches the commit checked out in the
submodule.	https://git-scm.com/docs/submodule.html
git-submodule --cached	A										This option is only valid for status and summary commands.  These
commands typically use the commit found in the submodule HEAD, but
with this option, the commit stored in the index is used instead.	https://git-scm.com/docs/submodule.html
git-submodule --files	A										This option is only valid for the summary command. This command
compares the commit in the index with that in the submodule HEAD
when this option is used.	https://git-scm.com/docs/submodule.html
git-submodule -n	A										This option is only valid for the summary command.
Limit the summary size (number of commits shown in total).
Giving 0 will disable the summary; a negative number means unlimited
(the default). This limit only applies to modified submodules. The
size is always limited to 1 for added/deleted/typechanged submodules.	https://git-scm.com/docs/submodule.html
git-submodule --summary-limit	A										This option is only valid for the summary command.
Limit the summary size (number of commits shown in total).
Giving 0 will disable the summary; a negative number means unlimited
(the default). This limit only applies to modified submodules. The
size is always limited to 1 for added/deleted/typechanged submodules.	https://git-scm.com/docs/submodule.html
git-submodule --remote	A										This option is only valid for the update command.  Instead of using
the superproject’s recorded SHA-1 to update the submodule, use the
status of the submodule’s remote-tracking branch.  The remote used
is branch’s remote (branch.<name>.remote), defaulting to origin.
The remote branch used defaults to master, but the branch name may
be overridden by setting the submodule.<name>.branch option in
either .gitmodules or .git/config (with .git/config taking
precedence).	https://git-scm.com/docs/submodule.html
git-submodule -N	A										This option is only valid for the update command.
Don’t fetch new objects from the remote site.	https://git-scm.com/docs/submodule.html
git-submodule --no-fetch	A										This option is only valid for the update command.
Don’t fetch new objects from the remote site.	https://git-scm.com/docs/submodule.html
git-submodule --checkout	A										This option is only valid for the update command.
Checkout the commit recorded in the superproject on a detached HEAD
in the submodule. This is the default behavior, the main use of
this option is to override submodule.$name.update when set to
a value other than checkout.
If the key submodule.$name.update is either not explicitly set or
set to checkout, this option is implicit.	https://git-scm.com/docs/submodule.html
git-submodule --merge	A										This option is only valid for the update command.
Merge the commit recorded in the superproject into the current branch
of the submodule. If this option is given, the submodule’s HEAD will
not be detached. If a merge failure prevents this process, you will
have to resolve the resulting conflicts within the submodule with the
usual conflict resolution tools.
If the key submodule.$name.update is set to merge, this option is
implicit.	https://git-scm.com/docs/submodule.html
git-submodule --rebase	A										This option is only valid for the update command.
Rebase the current branch onto the commit recorded in the
superproject. If this option is given, the submodule’s HEAD will not
be detached. If a merge failure prevents this process, you will have
to resolve these failures with git-rebase[1].
If the key submodule.$name.update is set to rebase, this option is
implicit.	https://git-scm.com/docs/submodule.html
git-submodule --init	A										This option is only valid for the update command.
Initialize all submodules for which "git submodule init" has not been
called so far before updating.	https://git-scm.com/docs/submodule.html
git-submodule --name	A										This option is only valid for the add command. It sets the submodule’s
name to the given string instead of defaulting to its path. The name
must be valid as a directory name and may not end with a /.	https://git-scm.com/docs/submodule.html
git-submodule --reference <repository>	A										This option is only valid for add and update commands.  These
commands sometimes need to clone a remote repository. In this case,
this option will be passed to the git-clone[1] command.	https://git-scm.com/docs/submodule.html
git-submodule --recursive	A										This option is only valid for foreach, update, status and sync commands.
Traverse submodules recursively. The operation is performed not
only in the submodules of the current repo, but also
in any nested submodules inside those submodules (and so on).	https://git-scm.com/docs/submodule.html
git-submodule --depth	A										This option is valid for add and update commands. Create a shallow
clone with a history truncated to the specified number of revisions.
See git-clone[1]	https://git-scm.com/docs/submodule.html
git-submodule -j <n>	A										This option is only valid for the update command.
Clone new submodules in parallel with as many jobs.
Defaults to the submodule.fetchJobs option.	https://git-scm.com/docs/submodule.html
git-submodule --jobs <n>	A										This option is only valid for the update command.
Clone new submodules in parallel with as many jobs.
Defaults to the submodule.fetchJobs option.	https://git-scm.com/docs/submodule.html
git-submodule <path>…​	A										Paths to submodule(s). When specified this will restrict the command
to only operate on the submodules found at the specified paths.
(This argument is required with add).	https://git-scm.com/docs/submodule.html
git-submodule	A										Initialize, update or inspect submodules
<pre><code>git submodule [--quiet] add [-b <branch>] [-f|--force] [--name <name>]\n          [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]\ngit submodule [--quiet] status [--cached] [--recursive] [--] [<path>…​]\ngit submodule [--quiet] init [--] [<path>…​]\ngit submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…​)\ngit submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]\n          [-f|--force] [--rebase|--merge] [--reference <repository>]\n          [--depth <depth>] [--recursive] [--jobs <n>] [--] [<path>…​]\ngit submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) <n>]\n          [commit] [--] [<path>…​]\ngit submodule [--quiet] foreach [--recursive] <command>\ngit submodule [--quiet] sync [--recursive] [--] [<path>…​]</pre></code>	https://git-scm.com/docs/submodule.html
git-svn --shared[=(false|true|umask|group|all|world|everybody)]	A										Only used with the init command.
These are passed directly to git init.	https://git-scm.com/docs/svn.html
git-svn --template=<template_directory>	A										Only used with the init command.
These are passed directly to git init.	https://git-scm.com/docs/svn.html
git-svn -r <arg>	A										Used with the fetch command.	https://git-scm.com/docs/svn.html
git-svn --revision <arg>	A										Used with the fetch command.	https://git-scm.com/docs/svn.html
git-svn -	A										Only used with the set-tree command.	https://git-scm.com/docs/svn.html
git-svn --stdin	A										Only used with the set-tree command.	https://git-scm.com/docs/svn.html
git-svn --rmdir	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -e	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn --edit	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -l<num>	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn --find-copies-harder	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -A<filename>	A										Syntax is compatible with the file used by git cvsimport:	https://git-scm.com/docs/svn.html
git-svn --authors-file=<filename>	A										Syntax is compatible with the file used by git cvsimport:	https://git-scm.com/docs/svn.html
git-svn --authors-prog=<filename>	A										If this option is specified, for each SVN committer name that
does not exist in the authors file, the given file is executed
with the committer name as the first argument.  The program is
expected to return a single line of the form "Name <email>",
which will be treated as if included in the authors file.	https://git-scm.com/docs/svn.html
git-svn -q	A										Make git svn less verbose. Specify a second time to make it
even less verbose.	https://git-scm.com/docs/svn.html
git-svn --quiet	A										Make git svn less verbose. Specify a second time to make it
even less verbose.	https://git-scm.com/docs/svn.html
git-svn -m	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --merge	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -s<strategy>	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --strategy=<strategy>	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -p	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --preserve-merges	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -n	A										This can be used with the dcommit, rebase, branch and
tag commands.	https://git-scm.com/docs/svn.html
git-svn --dry-run	A										This can be used with the dcommit, rebase, branch and
tag commands.	https://git-scm.com/docs/svn.html
git-svn --use-log-author	A										When retrieving svn commits into Git (as part of fetch, rebase, or
dcommit operations), look for the first From: or Signed-off-by: line
in the log message and use that as the author string.	https://git-scm.com/docs/svn.html
git-svn --add-author-from	A										When committing to svn from Git (as part of commit-diff, set-tree or dcommit
operations), if the existing log message doesn’t already have a
From: or Signed-off-by: line, append a From: line based on the
Git commit’s author string.  If you use this, then --use-log-author
will retrieve a valid author string for all commits.	https://git-scm.com/docs/svn.html
git-svn	A										Bidirectional operation between a Subversion repository and Git
<pre><code>git svn <command> [options] [arguments]</pre></code>	https://git-scm.com/docs/svn.html
git-symbolic-ref -d	A										Delete the symbolic ref <name>.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --delete	A										Delete the symbolic ref <name>.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref -q	A										Do not issue an error message if the <name> is not a
symbolic ref but a detached HEAD; instead exit with
non-zero status silently.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --quiet	A										Do not issue an error message if the <name> is not a
symbolic ref but a detached HEAD; instead exit with
non-zero status silently.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --short	A										When showing the value of <name> as a symbolic ref, try to shorten the
value, e.g. from refs/heads/master to master.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref -m	A										Update the reflog for <name> with <reason>.  This is valid only
when creating or updating a symbolic ref.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref	A										Read, modify and delete symbolic refs
<pre><code>git symbolic-ref [-m <reason>] <name> <ref>\ngit symbolic-ref [-q] [--short] <name>\ngit symbolic-ref --delete [-q] <name></pre></code>	https://git-scm.com/docs/symbolic-ref.html
git-tag -a	A										Make an unsigned, annotated tag object	https://git-scm.com/docs/tag.html
git-tag --annotate	A										Make an unsigned, annotated tag object	https://git-scm.com/docs/tag.html
git-tag -s	A										Make a GPG-signed tag, using the default e-mail address’s key.	https://git-scm.com/docs/tag.html
git-tag --sign	A										Make a GPG-signed tag, using the default e-mail address’s key.	https://git-scm.com/docs/tag.html
git-tag -u <keyid>	A										Make a GPG-signed tag, using the given key.	https://git-scm.com/docs/tag.html
git-tag --local-user=<keyid>	A										Make a GPG-signed tag, using the given key.	https://git-scm.com/docs/tag.html
git-tag -f	A										Replace an existing tag with the given name (instead of failing)	https://git-scm.com/docs/tag.html
git-tag --force	A										Replace an existing tag with the given name (instead of failing)	https://git-scm.com/docs/tag.html
git-tag -d	A										Delete existing tags with the given names.	https://git-scm.com/docs/tag.html
git-tag --delete	A										Delete existing tags with the given names.	https://git-scm.com/docs/tag.html
git-tag -v	A										Verify the GPG signature of the given tag names.	https://git-scm.com/docs/tag.html
git-tag --verify	A										Verify the GPG signature of the given tag names.	https://git-scm.com/docs/tag.html
git-tag -n<num>	A										<num> specifies how many lines from the annotation, if any,
are printed when using -l.
The default is not to print any annotation lines.
If no number is given to -n, only the first line is printed.
If the tag is not annotated, the commit message is displayed instead.	https://git-scm.com/docs/tag.html
git-tag -l <pattern>	A										List tags with names that match the given pattern (or all if no
pattern is given).  Running "git tag" without arguments also
lists all tags. The pattern is a shell wildcard (i.e., matched
using fnmatch(3)).  Multiple patterns may be given; if any of
them matches, the tag is shown.	https://git-scm.com/docs/tag.html
git-tag --list <pattern>	A										List tags with names that match the given pattern (or all if no
pattern is given).  Running "git tag" without arguments also
lists all tags. The pattern is a shell wildcard (i.e., matched
using fnmatch(3)).  Multiple patterns may be given; if any of
them matches, the tag is shown.	https://git-scm.com/docs/tag.html
git-tag --sort=<key>	A										Sort based on the key given.  Prefix - to sort in
descending order of the value. You may use the --sort=<key> option
multiple times, in which case the last key becomes the primary
key. Also supports "version:refname" or "v:refname" (tag
names are treated as versions). The "version:refname" sort
order can also be affected by the
"versionsort.prereleaseSuffix" configuration variable.
The keys supported are the same as those in git for-each-ref.
Sort order defaults to the value configured for the tag.sort
variable if it exists, or lexicographic order otherwise. See
git-config[1].	https://git-scm.com/docs/tag.html
git-tag --column[=<options>]	A										Display tag listing in columns. See configuration variable
column.tag for option syntax.--column and --no-column
without options are equivalent to always and never respectively.	https://git-scm.com/docs/tag.html
git-tag --no-column	A										Display tag listing in columns. See configuration variable
column.tag for option syntax.--column and --no-column
without options are equivalent to always and never respectively.	https://git-scm.com/docs/tag.html
git-tag --contains [<commit>]	A										Only list tags which contain the specified commit (HEAD if not
specified).	https://git-scm.com/docs/tag.html
git-tag --points-at <object>	A										Only list tags of the given object.	https://git-scm.com/docs/tag.html
git-tag -m <msg>	A										Use the given tag message (instead of prompting).
If multiple -m options are given, their values are
concatenated as separate paragraphs.
Implies -a if none of -a, -s, or -u <keyid>
is given.	https://git-scm.com/docs/tag.html
git-tag --message=<msg>	A										Use the given tag message (instead of prompting).
If multiple -m options are given, their values are
concatenated as separate paragraphs.
Implies -a if none of -a, -s, or -u <keyid>
is given.	https://git-scm.com/docs/tag.html
git-tag -F <file>	A										Take the tag message from the given file.  Use - to
read the message from the standard input.
Implies -a if none of -a, -s, or -u <keyid>
is given.	https://git-scm.com/docs/tag.html
git-tag --file=<file>	A										Take the tag message from the given file.  Use - to
read the message from the standard input.
Implies -a if none of -a, -s, or -u <keyid>
is given.	https://git-scm.com/docs/tag.html
git-tag --cleanup=<mode>	A										This option sets how the tag message is cleaned up.
The  <mode> can be one of verbatim, whitespace and strip.  The
strip mode is default. The verbatim mode does not change message at
all, whitespace removes just leading/trailing whitespace lines and
strip removes both whitespace and commentary.	https://git-scm.com/docs/tag.html
git-tag --create-reflog	A										Create a reflog for the tag.	https://git-scm.com/docs/tag.html
git-tag <tagname>	A										The name of the tag to create, delete, or describe.
The new tag name must pass all checks defined by
git-check-ref-format[1].  Some of these checks
may restrict the characters allowed in a tag name.	https://git-scm.com/docs/tag.html
git-tag <commit>	A										The object that the new tag will refer to, usually a commit.
Defaults to HEAD.	https://git-scm.com/docs/tag.html
git-tag <object>	A										The object that the new tag will refer to, usually a commit.
Defaults to HEAD.	https://git-scm.com/docs/tag.html
git-tag <format>	A										A string that interpolates %(fieldname) from the object
pointed at by a ref being shown.  The format is the same as
that of git-for-each-ref[1].  When unspecified,
defaults to %(refname:strip=2).	https://git-scm.com/docs/tag.html
git-tag --[no-]merged [<commit>]	A										Only list tags whose tips are reachable, or not reachable
if --no-merged is used, from the specified commit (HEAD
if not specified).	https://git-scm.com/docs/tag.html
git-tag	A										Create, list, delete or verify a tag object signed with GPG
<pre><code>git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>]\n    <tagname> [<commit> | <object>]\ngit tag -d <tagname>…​\ngit tag [-n[<num>]] -l [--contains <commit>] [--points-at <object>]\n    [--column[=<options>] | --no-column] [--create-reflog] [--sort=<key>]\n    [--format=<format>] [--[no-]merged [<commit>]] [<pattern>…​]\ngit tag -v <tagname>…​</pre></code>	https://git-scm.com/docs/tag.html
git-update-index --add	A										If a specified file isn’t in the index already then it’s
added.
Default behaviour is to ignore new files.	https://git-scm.com/docs/update-index.html
git-update-index --remove	A										If a specified file is in the index but is missing then it’s
removed.
Default behavior is to ignore removed file.	https://git-scm.com/docs/update-index.html
git-update-index --refresh	A										Looks at the current index and checks to see if merges or
updates are needed by checking stat() information.	https://git-scm.com/docs/update-index.html
git-update-index -q	A										    Quiet.  If --refresh finds that the index needs an update, the
    default behavior is to error out.  This option makes
git update-index continue anyway.	https://git-scm.com/docs/update-index.html
git-update-index --ignore-submodules	A										Do not try to update submodules.  This option is only respected
when passed before --refresh.	https://git-scm.com/docs/update-index.html
git-update-index --unmerged	A										    If --refresh finds unmerged changes in the index, the default
behavior is to error out.  This option makes git update-index
    continue anyway.	https://git-scm.com/docs/update-index.html
git-update-index --ignore-missing	A										Ignores missing files during a --refresh	https://git-scm.com/docs/update-index.html
git-update-index --cacheinfo <mode>,<object>,<path>	A										Directly insert the specified info into the index.  For
backward compatibility, you can also give these three
arguments as three separate parameters, but new users are
encouraged to use a single-parameter form.	https://git-scm.com/docs/update-index.html
git-update-index --cacheinfo <mode> <object> <path>	A										Directly insert the specified info into the index.  For
backward compatibility, you can also give these three
arguments as three separate parameters, but new users are
encouraged to use a single-parameter form.	https://git-scm.com/docs/update-index.html
git-update-index --index-info	A										Read index information from stdin.	https://git-scm.com/docs/update-index.html
git-update-index --chmod=(+|-)x	A										Set the execute permissions on the updated files.	https://git-scm.com/docs/update-index.html
git-update-index --[no-]assume-unchanged	A										When this flag is specified, the object names recorded
for the paths are not updated.  Instead, this option
sets/unsets the "assume unchanged" bit for the
paths.  When the "assume unchanged" bit is on, the user
promises not to change the file and allows Git to assume
that the working tree file matches what is recorded in
the index.  If you want to change the working tree file,
you need to unset the bit to tell Git.  This is
sometimes helpful when working with a big project on a
filesystem that has very slow lstat(2) system call
(e.g. cifs).	https://git-scm.com/docs/update-index.html
git-update-index --really-refresh	A										Like --refresh, but checks stat information unconditionally,
without regard to the "assume unchanged" setting.	https://git-scm.com/docs/update-index.html
git-update-index --[no-]skip-worktree	A										When one of these flags is specified, the object name recorded
for the paths are not updated. Instead, these options
set and unset the "skip-worktree" bit for the paths. See
section "Skip-worktree bit" below for more information.	https://git-scm.com/docs/update-index.html
git-update-index -g	A										Runs git update-index itself on the paths whose index
entries are different from those from the HEAD commit.	https://git-scm.com/docs/update-index.html
git-update-index --again	A										Runs git update-index itself on the paths whose index
entries are different from those from the HEAD commit.	https://git-scm.com/docs/update-index.html
git-update-index --unresolve	A										Restores the unmerged or needs updating state of a
file during a merge if it was cleared by accident.	https://git-scm.com/docs/update-index.html
git-update-index --info-only	A										Do not create objects in the object database for all
<file> arguments that follow this flag; just insert
their object IDs into the index.	https://git-scm.com/docs/update-index.html
git-update-index --force-remove	A										Remove the file from the index even when the working directory
still has such a file. (Implies --remove.)	https://git-scm.com/docs/update-index.html
git-update-index --replace	A										By default, when a file path exists in the index,
git update-index refuses an attempt to add path/file.
Similarly if a file path/file exists, a file path
cannot be added.  With --replace flag, existing entries
that conflict with the entry being added are
automatically removed with warning messages.	https://git-scm.com/docs/update-index.html
git-update-index --stdin	A										Instead of taking list of paths from the command line,
read list of paths from the standard input.  Paths are
separated by LF (i.e. one path per line) by default.	https://git-scm.com/docs/update-index.html
git-update-index --verbose	A										Report what is being added and removed from index.	https://git-scm.com/docs/update-index.html
git-update-index --index-version <n>	A										Write the resulting index out in the named on-disk format version.
Supported versions are 2, 3 and 4. The current default version is 2
or 3, depending on whether extra features are used, such as
git add -N.	https://git-scm.com/docs/update-index.html
git-update-index -z	A										Only meaningful with --stdin or --index-info; paths are
separated with NUL character instead of LF.	https://git-scm.com/docs/update-index.html
git-update-index --split-index	A										Enable or disable split index mode. If enabled, the index is
split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.
Changes are accumulated in $GIT_DIR/index while the shared
index file contains all index entries stays unchanged. If
split-index mode is already enabled and --split-index is
given again, all changes in $GIT_DIR/index are pushed back to
the shared index file. This mode is designed for very large
indexes that take a significant amount of time to read or write.	https://git-scm.com/docs/update-index.html
git-update-index --no-split-index	A										Enable or disable split index mode. If enabled, the index is
split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.
Changes are accumulated in $GIT_DIR/index while the shared
index file contains all index entries stays unchanged. If
split-index mode is already enabled and --split-index is
given again, all changes in $GIT_DIR/index are pushed back to
the shared index file. This mode is designed for very large
indexes that take a significant amount of time to read or write.	https://git-scm.com/docs/update-index.html
git-update-index --untracked-cache	A										Enable or disable untracked cache feature. Please use
--test-untracked-cache before enabling it.	https://git-scm.com/docs/update-index.html
git-update-index --no-untracked-cache	A										Enable or disable untracked cache feature. Please use
--test-untracked-cache before enabling it.	https://git-scm.com/docs/update-index.html
git-update-index --test-untracked-cache	A										Only perform tests on the working directory to make sure
untracked cache can be used. You have to manually enable
untracked cache using --untracked-cache or
--force-untracked-cache or the core.untrackedCache
configuration variable afterwards if you really want to use
it. If a test fails the exit code is 1 and a message
explains what is not working as needed, otherwise the exit
code is 0 and OK is printed.	https://git-scm.com/docs/update-index.html
git-update-index --force-untracked-cache	A										Same as --untracked-cache. Provided for backwards
compatibility with older versions of Git where
--untracked-cache used to imply --test-untracked-cache but
this option would enable the extension unconditionally.	https://git-scm.com/docs/update-index.html
git-update-index --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/update-index.html
git-update-index <file>	A										Files to act on.
Note that files beginning with . are discarded. This includes
./file and dir/./file. If you don’t want this, then use
cleaner names.
The same applies to directories ending / and paths with //	https://git-scm.com/docs/update-index.html
git-update-index	A										Register file contents in the working tree to the index
<pre><code>git update-index\n         [--add] [--remove | --force-remove] [--replace]\n         [--refresh] [-q] [--unmerged] [--ignore-missing]\n         [(--cacheinfo <mode>,<object>,<file>)…​]\n         [--chmod=(+|-)x]\n         [--[no-]assume-unchanged]\n         [--[no-]skip-worktree]\n         [--ignore-submodules]\n         [--[no-]split-index]\n         [--[no-|test-|force-]untracked-cache]\n         [--really-refresh] [--unresolve] [--again | -g]\n         [--info-only] [--index-info]\n         [-z] [--stdin] [--index-version <n>]\n         [--verbose]\n         [--] [<file>…​]</pre></code>	https://git-scm.com/docs/update-index.html
git-update-ref	A										Update the object name stored in a ref safely
<pre><code>git update-ref [-m <reason>] (-d <ref> [<oldvalue>] | [--no-deref] [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])</pre></code>	https://git-scm.com/docs/update-ref.html
git-update-server-info -f	A										Update the info files from scratch.	https://git-scm.com/docs/update-server-info.html
git-update-server-info --force	A										Update the info files from scratch.	https://git-scm.com/docs/update-server-info.html
git-update-server-info	A										Update auxiliary info file to help dumb servers
<pre><code>git update-server-info [--force]</pre></code>	https://git-scm.com/docs/update-server-info.html
git-verify-pack <pack>.idx …​	A										The idx files to verify.	https://git-scm.com/docs/verify-pack.html
git-verify-pack -v	A										After verifying the pack, show list of objects contained
in the pack and a histogram of delta chain length.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --verbose	A										After verifying the pack, show list of objects contained
in the pack and a histogram of delta chain length.	https://git-scm.com/docs/verify-pack.html
git-verify-pack -s	A										Do not verify the pack contents; only show the histogram of delta
chain length.  With --verbose, list of objects is also shown.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --stat-only	A										Do not verify the pack contents; only show the histogram of delta
chain length.  With --verbose, list of objects is also shown.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/verify-pack.html
git-verify-pack	A										Validate packed Git archive files
<pre><code>git verify-pack [-v|--verbose] [-s|--stat-only] [--] <pack>.idx …​</pre></code>	https://git-scm.com/docs/verify-pack.html
git-write-tree --missing-ok	A										Normally git write-tree ensures that the objects referenced by the
directory exist in the object database.  This option disables this
check.	https://git-scm.com/docs/write-tree.html
git-write-tree --prefix=<prefix>/	A										Writes a tree object that represents a subdirectory
<prefix>.  This can be used to write the tree object
for a subproject that is in the named subdirectory.	https://git-scm.com/docs/write-tree.html
git-write-tree	A										Create a tree object from the current index
<pre><code>git write-tree [--missing-ok] [--prefix=<prefix>/]</pre></code>	https://git-scm.com/docs/write-tree.html
