git-add <pathspec>…​	A										Files to add content from.  Fileglobs (e.g. *.c) can\nbe given to add all matching files.  Also a\nleading directory name (e.g. dir to add dir/file1\nand dir/file2) can be given to update the index to\nmatch the current state of the directory as a whole (e.g.\nspecifying dir will record not just a file dir/file1\nmodified in the working tree, a file dir/file2 added to\nthe working tree, but also a file dir/file3 removed from\nthe working tree.  Note that older versions of Git used\nto ignore removed files; use --no-all option if you want\nto add modified or new files but ignore removed    ones.	https://git-scm.com/docs/add.html
git-add -n	A										Don’t actually add the file(s), just show if they exist and/or will\nbe ignored.	https://git-scm.com/docs/add.html
git-add --dry-run	A										Don’t actually add the file(s), just show if they exist and/or will\nbe ignored.	https://git-scm.com/docs/add.html
git-add -v	A										Be verbose.	https://git-scm.com/docs/add.html
git-add --verbose	A										Be verbose.	https://git-scm.com/docs/add.html
git-add -f	A										Allow adding otherwise ignored files.	https://git-scm.com/docs/add.html
git-add --force	A										Allow adding otherwise ignored files.	https://git-scm.com/docs/add.html
git-add -i	A										Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details.	https://git-scm.com/docs/add.html
git-add --interactive	A										Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details.	https://git-scm.com/docs/add.html
git-add -p	A										Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex.	https://git-scm.com/docs/add.html
git-add --patch	A										Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex.	https://git-scm.com/docs/add.html
git-add -e	A										Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index.	https://git-scm.com/docs/add.html
git-add --edit	A										Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index.	https://git-scm.com/docs/add.html
git-add -u	A										Update the index just where it already has an entry matching\n<pathspec>.  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files.	https://git-scm.com/docs/add.html
git-add --update	A										Update the index just where it already has an entry matching\n<pathspec>.  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files.	https://git-scm.com/docs/add.html
git-add -A	A										Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry.    This adds, modifies, and removes index entries to\nmatch the working tree.	https://git-scm.com/docs/add.html
git-add --all	A										Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry.    This adds, modifies, and removes index entries to\nmatch the working tree.	https://git-scm.com/docs/add.html
git-add --no-ignore-removal	A										Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry.    This adds, modifies, and removes index entries to\nmatch the working tree.	https://git-scm.com/docs/add.html
git-add --no-all	A										Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used.	https://git-scm.com/docs/add.html
git-add --ignore-removal	A										Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used.	https://git-scm.com/docs/add.html
git-add -N	A										Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a.	https://git-scm.com/docs/add.html
git-add --intent-to-add	A										Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a.	https://git-scm.com/docs/add.html
git-add --refresh	A										Don’t add the file(s), but only refresh their stat()\ninformation in the index.	https://git-scm.com/docs/add.html
git-add --ignore-errors	A										If some files could not be added because of errors indexing\nthem, do not abort the operation, but continue adding the\nothers. The command shall still exit with non-zero status.\nThe configuration variable add.ignoreErrors can be set to\ntrue to make this the default behaviour.	https://git-scm.com/docs/add.html
git-add --ignore-missing	A										This option can only be used together with --dry-run. By using\nthis option the user can check if any of the given files would\nbe ignored, no matter if they are already present in the work\ntree or not.	https://git-scm.com/docs/add.html
git-add --chmod=(+|-)x	A										Override the executable bit of the added files.  The executable\nbit is only changed in the index, the files on disk are left\nunchanged.	https://git-scm.com/docs/add.html
git-add --	A										This option can be used to separate command-line options from\nthe list of files, (useful when filenames might be mistaken\nfor command-line options).	https://git-scm.com/docs/add.html
git-add	A										Add file contents to the index
<pre><code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n      [--chmod=(+|-)x] [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/add.html
git-am (<mbox>|<Maildir>)…​	A										The list of mailbox files to read patches from. If you do not\nsupply this argument, the command reads from the standard input.\nIf you supply directories, they will be treated as Maildirs.	https://git-scm.com/docs/am.html
git-am -s	A										Add a Signed-off-by: line to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/am.html
git-am --signoff	A										Add a Signed-off-by: line to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/am.html
git-am -k	A										Pass -k flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --keep	A										Pass -k flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --keep-non-patch	A										Pass -b flag to git mailinfo (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am --[no-]keep-cr	A										With --keep-cr, call git mailsplit (see git-mailsplit[1])\nwith the same option, to prevent it from stripping CR at the end of\nlines. am.keepcr configuration variable can be used to specify the\ndefault behaviour.  --no-keep-cr is useful to override am.keepcr.	https://git-scm.com/docs/am.html
git-am -c	A										Remove everything in body before a scissors line (see\ngit-mailinfo[1]). Can be activated by default using\nthe mailinfo.scissors configuration variable.	https://git-scm.com/docs/am.html
git-am --scissors	A										Remove everything in body before a scissors line (see\ngit-mailinfo[1]). Can be activated by default using\nthe mailinfo.scissors configuration variable.	https://git-scm.com/docs/am.html
git-am --no-scissors	A										Ignore scissors lines (see git-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am -m	A										Pass the -m flag to git mailinfo (see git-mailinfo[1]),\nso that the Message-ID header is added to the commit message.\nThe am.messageid configuration variable can be used to specify\nthe default behaviour.	https://git-scm.com/docs/am.html
git-am --message-id	A										Pass the -m flag to git mailinfo (see git-mailinfo[1]),\nso that the Message-ID header is added to the commit message.\nThe am.messageid configuration variable can be used to specify\nthe default behaviour.	https://git-scm.com/docs/am.html
git-am --no-message-id	A										Do not add the Message-ID header to the commit message.\nno-message-id is useful to override am.messageid.	https://git-scm.com/docs/am.html
git-am -q	A										Be quiet. Only print error messages.	https://git-scm.com/docs/am.html
git-am --quiet	A										Be quiet. Only print error messages.	https://git-scm.com/docs/am.html
git-am -u	A										Pass -u flag to git mailinfo (see git-mailinfo[1]).\nThe proposed commit log message taken from the e-mail\nis re-coded into UTF-8 encoding (configuration variable\ni18n.commitencoding can be used to specify project’s\npreferred encoding if it is not UTF-8).	https://git-scm.com/docs/am.html
git-am --utf8	A										Pass -u flag to git mailinfo (see git-mailinfo[1]).\nThe proposed commit log message taken from the e-mail\nis re-coded into UTF-8 encoding (configuration variable\ni18n.commitencoding can be used to specify project’s\npreferred encoding if it is not UTF-8).	https://git-scm.com/docs/am.html
git-am --no-utf8	A										Pass -n flag to git mailinfo (see\ngit-mailinfo[1]).	https://git-scm.com/docs/am.html
git-am -3	A										When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --3way	A										When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --no-3way	A										When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1].	https://git-scm.com/docs/am.html
git-am --ignore-space-change	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --ignore-whitespace	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --whitespace=<option>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am -C<n>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am -p<n>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --directory=<dir>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --exclude=<path>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --include=<path>	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --reject	A										These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch.	https://git-scm.com/docs/am.html
git-am --patch-format	A										By default the command will try to detect the patch format\nautomatically. This option allows the user to bypass the automatic\ndetection and specify the patch format that the patch(es) should be\ninterpreted as. Valid formats are mbox, mboxrd,\nstgit, stgit-series and hg.	https://git-scm.com/docs/am.html
git-am -i	A										Run interactively.	https://git-scm.com/docs/am.html
git-am --interactive	A										Run interactively.	https://git-scm.com/docs/am.html
git-am --committer-date-is-author-date	A										By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the committer date by using the same\nvalue as the author date.	https://git-scm.com/docs/am.html
git-am --ignore-date	A										By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the author date by using the same\nvalue as the committer date.	https://git-scm.com/docs/am.html
git-am --skip	A										Skip the current patch.  This is only meaningful when\nrestarting an aborted patch.	https://git-scm.com/docs/am.html
git-am -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/am.html
git-am --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/am.html
git-am --continue	A										After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue.	https://git-scm.com/docs/am.html
git-am -r	A										After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue.	https://git-scm.com/docs/am.html
git-am --resolved	A										After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue.	https://git-scm.com/docs/am.html
git-am --resolvemsg=<msg>	A										When a patch failure occurs, <msg> will be printed\nto the screen before exiting.  This overrides the\nstandard message informing you to use --continue\nor --skip to handle the failure.  This is solely\nfor internal use between git rebase and git am.	https://git-scm.com/docs/am.html
git-am --abort	A										Restore the original branch and abort the patching operation.	https://git-scm.com/docs/am.html
git-am	A										Apply a series of patches from a mailbox
<pre><code>git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]\n     [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n     [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n     [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]\n     [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]\n     [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]\n     [(<mbox> | <Maildir>)…​]\ngit am (--continue | --skip | --abort)</pre></code>	https://git-scm.com/docs/am.html
git-apply <patch>…​	A										The files to read the patch from.  - can be used to read\nfrom the standard input.	https://git-scm.com/docs/apply.html
git-apply --stat	A										Instead of applying the patch, output diffstat for the\ninput.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --numstat	A										Similar to --stat, but shows the number of added and\ndeleted lines in decimal notation and the pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --summary	A										Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames and mode changes.\nTurns off "apply".	https://git-scm.com/docs/apply.html
git-apply --check	A										Instead of applying the patch, see if the patch is\napplicable to the current working tree and/or the index\nfile and detects errors.  Turns off "apply".	https://git-scm.com/docs/apply.html
git-apply --index	A										When --check is in effect, or when applying the patch\n(which is the default when none of the options that\ndisables it is in effect), make sure the patch is\napplicable to what the current index file records.  If\nthe file to be patched in the working tree is not\nup-to-date, it is flagged as an error.  This flag also\ncauses the index file to be updated.	https://git-scm.com/docs/apply.html
git-apply --cached	A										Apply a patch without touching the working tree. Instead take the\ncached data, apply the patch, and store the result in the index\nwithout using the working tree. This implies --index.	https://git-scm.com/docs/apply.html
git-apply -3	A										When the patch does not apply cleanly, fall back on 3-way merge if\nthe patch records the identity of blobs it is supposed to apply to,\nand we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option, and is incompatible\nwith the --reject and the --cached options.	https://git-scm.com/docs/apply.html
git-apply --3way	A										When the patch does not apply cleanly, fall back on 3-way merge if\nthe patch records the identity of blobs it is supposed to apply to,\nand we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option, and is incompatible\nwith the --reject and the --cached options.	https://git-scm.com/docs/apply.html
git-apply --build-fake-ancestor=<file>	A										Newer git diff output has embedded index information\nfor each blob to help identify the original version that\nthe patch applies to.  When this flag is given, and if\nthe original versions of the blobs are available locally,\nbuilds a temporary index containing those blobs.	https://git-scm.com/docs/apply.html
git-apply -R	A										Apply the patch in reverse.	https://git-scm.com/docs/apply.html
git-apply --reverse	A										Apply the patch in reverse.	https://git-scm.com/docs/apply.html
git-apply --reject	A										For atomicity, git apply by default fails the whole patch and\ndoes not touch the working tree when some of the hunks\ndo not apply.  This option makes it apply\nthe parts of the patch that are applicable, and leave the\nrejected hunks in corresponding *.rej files.	https://git-scm.com/docs/apply.html
git-apply -z	A										When --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format.	https://git-scm.com/docs/apply.html
git-apply -p<n>	A										Remove <n> leading slashes from traditional diff paths. The\ndefault is 1.	https://git-scm.com/docs/apply.html
git-apply -C<n>	A										Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored.	https://git-scm.com/docs/apply.html
git-apply --unidiff-zero	A										By default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0. To bypass these\nchecks use --unidiff-zero.	https://git-scm.com/docs/apply.html
git-apply --apply	A										If you use any of the options marked "Turns off\napply" above, git apply reads and outputs the\nrequested information without actually applying the\npatch.  Give this flag after those flags to also apply\nthe patch.	https://git-scm.com/docs/apply.html
git-apply --no-add	A										When applying a patch, ignore additions made by the\npatch.  This can be used to extract the common part between\ntwo files by first running diff on them and applying\nthe result with this option, which would apply the\ndeletion part but not the addition part.	https://git-scm.com/docs/apply.html
git-apply --allow-binary-replacement	A										Historically we did not allow binary patch applied\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently we always allow binary\npatch application, so this is a no-op.	https://git-scm.com/docs/apply.html
git-apply --binary	A										Historically we did not allow binary patch applied\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently we always allow binary\npatch application, so this is a no-op.	https://git-scm.com/docs/apply.html
git-apply --exclude=<path-pattern>	A										Don’t apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to exclude certain\nfiles or directories.	https://git-scm.com/docs/apply.html
git-apply --include=<path-pattern>	A										Apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to include certain\nfiles or directories.	https://git-scm.com/docs/apply.html
git-apply --ignore-space-change	A										When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the\n--whitespace option. New lines will still be fixed, though.	https://git-scm.com/docs/apply.html
git-apply --ignore-whitespace	A										When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the\n--whitespace option. New lines will still be fixed, though.	https://git-scm.com/docs/apply.html
git-apply --whitespace=<action>	A										When applying a patch, detect a new or modified line that has\nwhitespace errors.  What are considered whitespace errors is\ncontrolled by core.whitespace configuration.  By default,\ntrailing whitespaces (including lines that solely consist of\nwhitespaces) and a space character that is immediately followed\nby a tab character inside the initial indent of the line are\nconsidered whitespace errors.	https://git-scm.com/docs/apply.html
git-apply --inaccurate-eof	A										Under certain circumstances, some versions of diff do not correctly\ndetect a missing new-line at the end of the file. As a result, patches\ncreated by such diff programs do not record incomplete lines\ncorrectly. This option adds support for applying such patches by\nworking around this bug.	https://git-scm.com/docs/apply.html
git-apply -v	A										Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported.	https://git-scm.com/docs/apply.html
git-apply --verbose	A										Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported.	https://git-scm.com/docs/apply.html
git-apply --recount	A										Do not trust the line counts in the hunk headers, but infer them\nby inspecting the patch (e.g. after editing the patch without\nadjusting the hunk headers appropriately).	https://git-scm.com/docs/apply.html
git-apply --directory=<root>	A										Prepend <root> to all filenames.  If a "-p" argument was also passed,\nit is applied before prepending the new root.	https://git-scm.com/docs/apply.html
git-apply --unsafe-paths	A										By default, a patch that affects outside the working area\n(either a Git controlled working tree, or the current working\ndirectory when "git apply" is used as a replacement of GNU\npatch) is rejected as a mistake (or a mischief).	https://git-scm.com/docs/apply.html
git-apply	A										Apply a patch to files and/or to the index
<pre><code>git apply [--stat] [--numstat] [--summary] [--check] [--index] [--3way]\n      [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]\n      [--allow-binary-replacement | --binary] [--reject] [-z]\n      [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]\n      [--ignore-space-change | --ignore-whitespace]\n      [--whitespace=(nowarn|warn|fix|error|error-all)]\n      [--exclude=<path>] [--include=<path>] [--directory=<root>]\n      [--verbose] [--unsafe-paths] [<patch>…​]</pre></code>	https://git-scm.com/docs/apply.html
git-archive --format=<fmt>	A										Format of the resulting archive: tar or zip. If this option\nis not given, and the output file is specified, the format is\ninferred from the filename if possible (e.g. writing to "foo.zip"\nmakes the output to be in the zip format). Otherwise the output\nformat is tar.	https://git-scm.com/docs/archive.html
git-archive -l	A										Show all available formats.	https://git-scm.com/docs/archive.html
git-archive --list	A										Show all available formats.	https://git-scm.com/docs/archive.html
git-archive -v	A										Report progress to stderr.	https://git-scm.com/docs/archive.html
git-archive --verbose	A										Report progress to stderr.	https://git-scm.com/docs/archive.html
git-archive --prefix=<prefix>/	A										Prepend <prefix>/ to each filename in the archive.	https://git-scm.com/docs/archive.html
git-archive -o <file>	A										Write the archive to <file> instead of stdout.	https://git-scm.com/docs/archive.html
git-archive --output=<file>	A										Write the archive to <file> instead of stdout.	https://git-scm.com/docs/archive.html
git-archive --worktree-attributes	A										Look for attributes in .gitattributes files in the working tree\nas well (see ATTRIBUTES).	https://git-scm.com/docs/archive.html
git-archive <extra>	A										This can be any options that the archiver backend understands.\nSee next section.	https://git-scm.com/docs/archive.html
git-archive --remote=<repo>	A										Instead of making a tar archive from the local repository,\nretrieve a tar archive from a remote repository. Note that the\nremote repository may place restrictions on which sha1\nexpressions may be allowed in <tree-ish>. See\ngit-upload-archive[1] for details.	https://git-scm.com/docs/archive.html
git-archive --exec=<git-upload-archive>	A										Used with --remote to specify the path to the\ngit-upload-archive on the remote side.	https://git-scm.com/docs/archive.html
git-archive <tree-ish>	A										The tree or commit to produce an archive for.	https://git-scm.com/docs/archive.html
git-archive <path>	A										Without an optional path parameter, all files and subdirectories\nof the current working directory are included in the archive.\nIf one or more paths are specified, only these are included.	https://git-scm.com/docs/archive.html
git-archive	A										Create an archive of files from a named tree
<pre><code>git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]\n          [-o <file> | --output=<file>] [--worktree-attributes]\n          [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>\n          [<path>…​]</pre></code>	https://git-scm.com/docs/archive.html
git-bisect --no-checkout	A										Do not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update a special reference named BISECT_HEAD to make\nit point to the commit that should be tested.	https://git-scm.com/docs/bisect.html
git-bisect	A										Use binary search to find the commit that introduced a bug
<pre><code>git bisect <subcommand> <options></pre></code>	https://git-scm.com/docs/bisect.html
git-blame -b	A										Show blank SHA-1 for boundary commits.  This can also\nbe controlled via the blame.blankboundary config option.	https://git-scm.com/docs/blame.html
git-blame --root	A										Do not treat root commits as boundaries.  This can also be\ncontrolled via the blame.showRoot config option.	https://git-scm.com/docs/blame.html
git-blame --show-stats	A										Include additional statistics at the end of blame output.	https://git-scm.com/docs/blame.html
git-blame -L <start>,<end>	A										Annotate only the given line range. May be specified multiple times.\nOverlapping ranges are allowed.	https://git-scm.com/docs/blame.html
git-blame -L :<funcname>	A										Annotate only the given line range. May be specified multiple times.\nOverlapping ranges are allowed.	https://git-scm.com/docs/blame.html
git-blame -l	A										Show long rev (Default: off).	https://git-scm.com/docs/blame.html
git-blame -t	A										Show raw timestamp (Default: off).	https://git-scm.com/docs/blame.html
git-blame -S <revs-file>	A										Use revisions from revs-file instead of calling git-rev-list[1].	https://git-scm.com/docs/blame.html
git-blame --reverse	A										Walk history forward instead of backward. Instead of showing\nthe revision in which a line appeared, this shows the last\nrevision in which a line has existed. This requires a range of\nrevision like START..END where the path to blame exists in\nSTART.	https://git-scm.com/docs/blame.html
git-blame -p	A										Show in a format designed for machine consumption.	https://git-scm.com/docs/blame.html
git-blame --porcelain	A										Show in a format designed for machine consumption.	https://git-scm.com/docs/blame.html
git-blame --line-porcelain	A										Show the porcelain format, but output commit information for\neach line, not just the first time a commit is referenced.\nImplies --porcelain.	https://git-scm.com/docs/blame.html
git-blame --incremental	A										Show the result incrementally in a format designed for\nmachine consumption.	https://git-scm.com/docs/blame.html
git-blame --encoding=<encoding>	A										Specifies the encoding used to output author names\nand commit summaries. Setting it to none makes blame\noutput unconverted data. For more information see the\ndiscussion about encoding in the git-log[1]\nmanual page.	https://git-scm.com/docs/blame.html
git-blame --contents <file>	A										When <rev> is not specified, the command annotates the\nchanges starting backwards from the working tree copy.\nThis flag makes the command pretend as if the working\ntree copy has the contents of the named file (specify\n- to make the command read from the standard input).	https://git-scm.com/docs/blame.html
git-blame --date <format>	A										Specifies the format used to output dates. If --date is not\nprovided, the value of the blame.date config variable is\nused. If the blame.date config variable is also not set, the\niso format is used. For supported values, see the discussion\nof the --date option at git-log[1].	https://git-scm.com/docs/blame.html
git-blame --[no-]progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal. This flag\nenables progress reporting even if not attached to a\nterminal. Can’t use --progress together with --porcelain\nor --incremental.	https://git-scm.com/docs/blame.html
git-blame -M|<num>|	A										Detect moved or copied lines within a file. When a commit\nmoves or copies a block of lines (e.g. the original file\nhas A and then B, and the commit changes it to B and then\nA), the traditional blame algorithm notices only half of\nthe movement and typically blames the lines that were moved\nup (i.e. B) to the parent and assigns blame to the lines that\nwere moved down (i.e. A) to the child commit.  With this\noption, both groups of lines are blamed on the parent by\nrunning extra passes of inspection.	https://git-scm.com/docs/blame.html
git-blame -C|<num>|	A										In addition to -M, detect lines moved or copied from other\nfiles that were modified in the same commit.  This is\nuseful when you reorganize your program and move code\naround across files.  When this option is given twice,\nthe command additionally looks for copies from other\nfiles in the commit that creates the file. When this\noption is given three times, the command additionally\nlooks for copies from other files in any commit.	https://git-scm.com/docs/blame.html
git-blame -h	A										Show help message.	https://git-scm.com/docs/blame.html
git-blame -c	A										Use the same output mode as git-annotate[1] (Default: off).	https://git-scm.com/docs/blame.html
git-blame --score-debug	A										Include debugging information related to the movement of\nlines between files (see -C) and lines moved within a\nfile (see -M).  The first number listed is the score.\nThis is the number of alphanumeric characters detected\nas having been moved between or within files.  This must be above\na certain threshold for git blame to consider those lines\nof code to have been moved.	https://git-scm.com/docs/blame.html
git-blame -f	A										Show the filename in the original commit.  By default\nthe filename is shown if there is any line that came from a\nfile with a different name, due to rename detection.	https://git-scm.com/docs/blame.html
git-blame --show-name	A										Show the filename in the original commit.  By default\nthe filename is shown if there is any line that came from a\nfile with a different name, due to rename detection.	https://git-scm.com/docs/blame.html
git-blame -n	A										Show the line number in the original commit (Default: off).	https://git-scm.com/docs/blame.html
git-blame --show-number	A										Show the line number in the original commit (Default: off).	https://git-scm.com/docs/blame.html
git-blame -s	A										Suppress the author name and timestamp from the output.	https://git-scm.com/docs/blame.html
git-blame -e	A										Show the author email instead of author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption.	https://git-scm.com/docs/blame.html
git-blame --show-email	A										Show the author email instead of author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption.	https://git-scm.com/docs/blame.html
git-blame -w	A										Ignore whitespace when comparing the parent’s version and\nthe child’s to find where the lines came from.	https://git-scm.com/docs/blame.html
git-blame --abbrev=<n>	A										Instead of using the default 7+1 hexadecimal digits as the\nabbreviated object name, use <n>+1 digits. Note that 1 column\nis used for a caret to mark the boundary commit.	https://git-scm.com/docs/blame.html
git-blame	A										Show what revision and author last modified each line of a file
<pre><code>git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n        [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n        [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>]\n        [--] <file></pre></code>	https://git-scm.com/docs/blame.html
git-branch -d	A										Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with\n--track or --set-upstream.	https://git-scm.com/docs/branch.html
git-branch --delete	A										Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with\n--track or --set-upstream.	https://git-scm.com/docs/branch.html
git-branch -D	A										Shortcut for --delete --force.	https://git-scm.com/docs/branch.html
git-branch -l	A										Create the branch’s reflog.  This activates recording of\nall changes made to the branch ref, enabling use of date\nbased sha1 expressions such as "<branchname>@{yesterday}".\nNote that in non-bare repositories, reflogs are usually\nenabled by default by the core.logallrefupdates config option.	https://git-scm.com/docs/branch.html
git-branch --create-reflog	A										Create the branch’s reflog.  This activates recording of\nall changes made to the branch ref, enabling use of date\nbased sha1 expressions such as "<branchname>@{yesterday}".\nNote that in non-bare repositories, reflogs are usually\nenabled by default by the core.logallrefupdates config option.	https://git-scm.com/docs/branch.html
git-branch -f	A										Reset <branchname> to <startpoint> if <branchname> exists\nalready. Without -f git branch refuses to change an existing branch.\nIn combination with -d (or --delete), allow deleting the\nbranch irrespective of its merged status. In combination with\n-m (or --move), allow renaming the branch even if the new\nbranch name already exists.	https://git-scm.com/docs/branch.html
git-branch --force	A										Reset <branchname> to <startpoint> if <branchname> exists\nalready. Without -f git branch refuses to change an existing branch.\nIn combination with -d (or --delete), allow deleting the\nbranch irrespective of its merged status. In combination with\n-m (or --move), allow renaming the branch even if the new\nbranch name already exists.	https://git-scm.com/docs/branch.html
git-branch -m	A										Move/rename a branch and the corresponding reflog.	https://git-scm.com/docs/branch.html
git-branch --move	A										Move/rename a branch and the corresponding reflog.	https://git-scm.com/docs/branch.html
git-branch -M	A										Shortcut for --move --force.	https://git-scm.com/docs/branch.html
git-branch --color[=<when>]	A										Color branches to highlight current, local, and\nremote-tracking branches.\nThe value must be always (the default), never, or auto.	https://git-scm.com/docs/branch.html
git-branch --no-color	A										Turn off branch colors, even when the configuration file gives the\ndefault to color output.\nSame as --color=never.	https://git-scm.com/docs/branch.html
git-branch --column[=<options>]	A										Display branch listing in columns. See configuration variable\ncolumn.branch for option syntax.--column and --no-column\nwithout options are equivalent to always and never respectively.	https://git-scm.com/docs/branch.html
git-branch --no-column	A										Display branch listing in columns. See configuration variable\ncolumn.branch for option syntax.--column and --no-column\nwithout options are equivalent to always and never respectively.	https://git-scm.com/docs/branch.html
git-branch -r	A										List or delete (if used with -d) the remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch --remotes	A										List or delete (if used with -d) the remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch -a	A										List both remote-tracking branches and local branches.	https://git-scm.com/docs/branch.html
git-branch --all	A										List both remote-tracking branches and local branches.	https://git-scm.com/docs/branch.html
git-branch --list	A										Activate the list mode. git branch <pattern> would try to create a branch,\nuse git branch --list <pattern> to list matching branches.	https://git-scm.com/docs/branch.html
git-branch -v	A										When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe name of the upstream branch, as well (see also git remote\nshow <remote>).	https://git-scm.com/docs/branch.html
git-branch -vv	A										When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe name of the upstream branch, as well (see also git remote\nshow <remote>).	https://git-scm.com/docs/branch.html
git-branch --verbose	A										When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe name of the upstream branch, as well (see also git remote\nshow <remote>).	https://git-scm.com/docs/branch.html
git-branch -q	A										Be more quiet when creating or deleting a branch, suppressing\nnon-error messages.	https://git-scm.com/docs/branch.html
git-branch --quiet	A										Be more quiet when creating or deleting a branch, suppressing\nnon-error messages.	https://git-scm.com/docs/branch.html
git-branch --abbrev=<length>	A										Alter the sha1’s minimum display length in the output listing.\nThe default value is 7 and can be overridden by the core.abbrev\nconfig option.	https://git-scm.com/docs/branch.html
git-branch --no-abbrev	A										Display the full sha1s in the output listing rather than abbreviating them.	https://git-scm.com/docs/branch.html
git-branch -t	A										When creating a new branch, set up branch.<name>.remote and\nbranch.<name>.merge configuration entries to mark the\nstart-point branch as "upstream" from the new branch. This\nconfiguration will tell git to show the relationship between the\ntwo branches in git status and git branch -v. Furthermore,\nit directs git pull without arguments to pull from the\nupstream when the new branch is checked out.	https://git-scm.com/docs/branch.html
git-branch --track	A										When creating a new branch, set up branch.<name>.remote and\nbranch.<name>.merge configuration entries to mark the\nstart-point branch as "upstream" from the new branch. This\nconfiguration will tell git to show the relationship between the\ntwo branches in git status and git branch -v. Furthermore,\nit directs git pull without arguments to pull from the\nupstream when the new branch is checked out.	https://git-scm.com/docs/branch.html
git-branch --no-track	A										Do not set up "upstream" configuration, even if the\nbranch.autoSetupMerge configuration variable is true.	https://git-scm.com/docs/branch.html
git-branch --set-upstream	A										If specified branch does not exist yet or if --force has been\ngiven, acts exactly like --track. Otherwise sets up configuration\nlike --track would when creating the branch, except that where\nbranch points to is not changed.	https://git-scm.com/docs/branch.html
git-branch -u <upstream>	A										Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --set-upstream-to=<upstream>	A										Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --unset-upstream	A										Remove the upstream information for <branchname>. If no branch\nis specified it defaults to the current branch.	https://git-scm.com/docs/branch.html
git-branch --edit-description	A										Open an editor and edit the text to explain what the branch is\nfor, to be used by various other commands (e.g. format-patch,\nrequest-pull, and merge (if enabled)). Multi-line explanations\nmay be used.	https://git-scm.com/docs/branch.html
git-branch --contains [<commit>]	A										Only list branches which contain the specified commit (HEAD\nif not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch --merged [<commit>]	A										Only list branches whose tips are reachable from the\nspecified commit (HEAD if not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch --no-merged [<commit>]	A										Only list branches whose tips are not reachable from the\nspecified commit (HEAD if not specified). Implies --list.	https://git-scm.com/docs/branch.html
git-branch <branchname>	A										The name of the branch to create or delete.\nThe new branch name must pass all checks defined by\ngit-check-ref-format[1].  Some of these checks\nmay restrict the characters allowed in a branch name.	https://git-scm.com/docs/branch.html
git-branch <start-point>	A										The new branch head will point to this commit.  It may be\ngiven as a branch name, a commit-id, or a tag.  If this\noption is omitted, the current HEAD will be used instead.	https://git-scm.com/docs/branch.html
git-branch <oldbranch>	A										The name of an existing branch to rename.	https://git-scm.com/docs/branch.html
git-branch <newbranch>	A										The new name for an existing branch. The same restrictions as for\n<branchname> apply.	https://git-scm.com/docs/branch.html
git-branch --sort=<key>	A										Sort based on the key given. Prefix - to sort in descending\norder of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. The keys supported are the same as those in git\nfor-each-ref. Sort order defaults to sorting based on the\nfull refname (including refs/... prefix). This lists\ndetached HEAD (if present) first, then local branches and\nfinally remote-tracking branches.	https://git-scm.com/docs/branch.html
git-branch --points-at <object>	A										Only list branches of the given object.	https://git-scm.com/docs/branch.html
git-branch	A										List, create, or delete branches
<pre><code>git branch [--color[=<when>] | --no-color] [-r | -a]\n    [--list] [-v [--abbrev=<length> | --no-abbrev]]\n    [--column[=<options>] | --no-column]\n    [(--merged | --no-merged | --contains) [<commit>]] [--sort=<key>]\n    [--points-at <object>] [<pattern>…​]\ngit branch [--set-upstream | --track | --no-track] [-l] [-f] <branchname> [<start-point>]\ngit branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]\ngit branch --unset-upstream [<branchname>]\ngit branch (-m | -M) [<oldbranch>] <newbranch>\ngit branch (-d | -D) [-r] <branchname>…​\ngit branch --edit-description [<branchname>]</pre></code>	https://git-scm.com/docs/branch.html
git-bundle create <file>	A										Used to create a bundle named file.  This requires the\ngit-rev-list-args arguments to define the bundle contents.	https://git-scm.com/docs/bundle.html
git-bundle verify <file>	A										Used to check that a bundle file is valid and will apply\ncleanly to the current repository.  This includes checks on the\nbundle format itself as well as checking that the prerequisite\ncommits exist and are fully linked in the current repository.\ngit bundle prints a list of missing commits, if any, and exits\nwith a non-zero status.	https://git-scm.com/docs/bundle.html
git-bundle list-heads <file>	A										Lists the references defined in the bundle.  If followed by a\nlist of references, only references matching those given are\nprinted out.	https://git-scm.com/docs/bundle.html
git-bundle unbundle <file>	A										Passes the objects in the bundle to git index-pack\nfor storage in the repository, then prints the names of all\ndefined references. If a list of references is given, only\nreferences matching those in the list are printed. This command is\nreally plumbing, intended to be called only by git fetch.	https://git-scm.com/docs/bundle.html
git-bundle <git-rev-list-args>	A										A list of arguments, acceptable to git rev-parse and\ngit rev-list (and containing a named ref, see SPECIFYING REFERENCES\nbelow), that specifies the specific objects and references\nto transport.  For example, master~10..master causes the\ncurrent master reference to be packaged along with all objects\nadded since its 10th ancestor commit.  There is no explicit\nlimit to the number of references and objects that may be\npackaged.	https://git-scm.com/docs/bundle.html
git-bundle [<refname>…​]	A										A list of references used to limit the references reported as\navailable. This is principally of use to git fetch, which\nexpects to receive only those references asked for and not\nnecessarily everything in the pack (in this case, git bundle acts\nlike git fetch-pack).	https://git-scm.com/docs/bundle.html
git-bundle	A										Move objects and refs by archive
<pre><code>git bundle create <file> <git-rev-list-args>\ngit bundle verify <file>\ngit bundle list-heads <file> [<refname>…​]\ngit bundle unbundle <file> [<refname>…​]</pre></code>	https://git-scm.com/docs/bundle.html
git-cat-file <object>	A										The name of the object to show.\nFor a more complete list of ways to spell object names, see\nthe "SPECIFYING REVISIONS" section in gitrevisions[7].	https://git-scm.com/docs/cat-file.html
git-cat-file -t	A										Instead of the content, show the object type identified by\n<object>.	https://git-scm.com/docs/cat-file.html
git-cat-file -s	A										Instead of the content, show the object size identified by\n<object>.	https://git-scm.com/docs/cat-file.html
git-cat-file -e	A										Suppress all output; instead exit with zero status if <object>\nexists and is a valid object.	https://git-scm.com/docs/cat-file.html
git-cat-file -p	A										Pretty-print the contents of <object> based on its type.	https://git-scm.com/docs/cat-file.html
git-cat-file <type>	A										Typically this matches the real type of <object> but asking\nfor a type that can trivially be dereferenced from the given\n<object> is also permitted.  An example is to ask for a\n"tree" with <object> being a commit object that contains it,\nor to ask for a "blob" with <object> being a tag object that\npoints at it.	https://git-scm.com/docs/cat-file.html
git-cat-file --textconv	A										Show the content as transformed by a textconv filter. In this case,\n<object> has be of the form <tree-ish>:<path>, or :<path> in order\nto apply the filter to the content recorded in the index at <path>.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch	A										Print object information and contents for each object provided\non stdin.  May not be combined with any other options or arguments.\nSee the section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch=<format>	A										Print object information and contents for each object provided\non stdin.  May not be combined with any other options or arguments.\nSee the section BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-check	A										Print object information for each object provided on stdin.  May\nnot be combined with any other options or arguments.  See the\nsection BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-check=<format>	A										Print object information for each object provided on stdin.  May\nnot be combined with any other options or arguments.  See the\nsection BATCH OUTPUT below for details.	https://git-scm.com/docs/cat-file.html
git-cat-file --batch-all-objects	A										Instead of reading a list of objects on stdin, perform the\nrequested batch operation on all objects in the repository and\nany alternate object stores (not just reachable objects).\nRequires --batch or --batch-check be specified. Note that\nthe objects are visited in order sorted by their hashes.	https://git-scm.com/docs/cat-file.html
git-cat-file --buffer	A										Normally batch output is flushed after each object is output, so\nthat a process can interactively read and write from\ncat-file. With this option, the output uses normal stdio\nbuffering; this is much more efficient when invoking\n--batch-check on a large number of objects.	https://git-scm.com/docs/cat-file.html
git-cat-file --allow-unknown-type	A										Allow -s or -t to query broken/corrupt objects of unknown type.	https://git-scm.com/docs/cat-file.html
git-cat-file --follow-symlinks	A										With --batch or --batch-check, follow symlinks inside the\nrepository when requesting objects with extended SHA-1\nexpressions of the form tree-ish:path-in-tree.  Instead of\nproviding output about the link itself, provide output about\nthe linked-to object.  If a symlink points outside the\ntree-ish (e.g. a link to /foo or a root-level link to ../foo),\nthe portion of the link which is outside the tree will be\nprinted.	https://git-scm.com/docs/cat-file.html
git-cat-file	A										Provide content or type and size information for repository objects
<pre><code>git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv ) <object>\ngit cat-file (--batch | --batch-check) [--follow-symlinks]</pre></code>	https://git-scm.com/docs/cat-file.html
git-checkout -q	A										Quiet, suppress feedback messages.	https://git-scm.com/docs/checkout.html
git-checkout --quiet	A										Quiet, suppress feedback messages.	https://git-scm.com/docs/checkout.html
git-checkout --[no-]progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet.	https://git-scm.com/docs/checkout.html
git-checkout -f	A										When switching branches, proceed even if the index or the\nworking tree differs from HEAD.  This is used to throw away\nlocal changes.	https://git-scm.com/docs/checkout.html
git-checkout --force	A										When switching branches, proceed even if the index or the\nworking tree differs from HEAD.  This is used to throw away\nlocal changes.	https://git-scm.com/docs/checkout.html
git-checkout --ours	A										When checking out paths from the index, check out stage #2\n(ours) or #3 (theirs) for unmerged paths.	https://git-scm.com/docs/checkout.html
git-checkout --theirs	A										When checking out paths from the index, check out stage #2\n(ours) or #3 (theirs) for unmerged paths.	https://git-scm.com/docs/checkout.html
git-checkout -b <new_branch>	A										Create a new branch named <new_branch> and start it at\n<start_point>; see git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout -B <new_branch>	A										Creates the branch <new_branch> and start it at <start_point>;\nif it already exists, then reset it to <start_point>. This is\nequivalent to running "git branch" with "-f"; see\ngit-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout -t	A										When creating a new branch, set up "upstream" configuration. See\n"--track" in git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout --track	A										When creating a new branch, set up "upstream" configuration. See\n"--track" in git-branch[1] for details.	https://git-scm.com/docs/checkout.html
git-checkout --no-track	A										Do not set up "upstream" configuration, even if the\nbranch.autoSetupMerge configuration variable is true.	https://git-scm.com/docs/checkout.html
git-checkout -l	A										Create the new branch’s reflog; see git-branch[1] for\ndetails.	https://git-scm.com/docs/checkout.html
git-checkout --detach	A										Rather than checking out a branch to work on it, check out a\ncommit for inspection and discardable experiments.\nThis is the default behavior of "git checkout <commit>" when\n<commit> is not a branch name.  See the "DETACHED HEAD" section\nbelow for details.	https://git-scm.com/docs/checkout.html
git-checkout --orphan <new_branch>	A										Create a new orphan branch, named <new_branch>, started from\n<start_point> and switch to it.  The first commit made on this\nnew branch will have no parents and it will be the root of a new\nhistory totally disconnected from all the other branches and\ncommits.	https://git-scm.com/docs/checkout.html
git-checkout --ignore-skip-worktree-bits	A										In sparse checkout mode, git checkout -- <paths> would\nupdate only entries matched by <paths> and sparse patterns\nin $GIT_DIR/info/sparse-checkout. This option ignores\nthe sparse patterns and adds back any files in <paths>.	https://git-scm.com/docs/checkout.html
git-checkout -m	A										When switching branches,\nif you have local modifications to one or more files that\nare different between the current branch and the branch to\nwhich you are switching, the command refuses to switch\nbranches in order to preserve your modifications in context.\nHowever, with this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch\nis done, and you will be on the new branch.	https://git-scm.com/docs/checkout.html
git-checkout --merge	A										When switching branches,\nif you have local modifications to one or more files that\nare different between the current branch and the branch to\nwhich you are switching, the command refuses to switch\nbranches in order to preserve your modifications in context.\nHowever, with this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch\nis done, and you will be on the new branch.	https://git-scm.com/docs/checkout.html
git-checkout --conflict=<style>	A										The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the\nmerge.conflictStyle configuration variable.  Possible values are\n"merge" (default) and "diff3" (in addition to what is shown by\n"merge" style, shows the original contents).	https://git-scm.com/docs/checkout.html
git-checkout -p	A										Interactively select hunks in the difference between the\n<tree-ish> (or the index, if unspecified) and the working\ntree.  The chosen hunks are then applied in reverse to the\nworking tree (and if a <tree-ish> was specified, the index).	https://git-scm.com/docs/checkout.html
git-checkout --patch	A										Interactively select hunks in the difference between the\n<tree-ish> (or the index, if unspecified) and the working\ntree.  The chosen hunks are then applied in reverse to the\nworking tree (and if a <tree-ish> was specified, the index).	https://git-scm.com/docs/checkout.html
git-checkout --ignore-other-worktrees	A										git checkout refuses when the wanted ref is already checked\nout by another worktree. This option makes it check the ref\nout anyway. In other words, the ref can be held by more than one\nworktree.	https://git-scm.com/docs/checkout.html
git-checkout <branch>	A										Branch to checkout; if it refers to a branch (i.e., a name that,\nwhen prepended with "refs/heads/", is a valid ref), then that\nbranch is checked out. Otherwise, if it refers to a valid\ncommit, your HEAD becomes "detached" and you are no longer on\nany branch (see below for details).	https://git-scm.com/docs/checkout.html
git-checkout <new_branch>	A										Name for the new branch.	https://git-scm.com/docs/checkout.html
git-checkout <start_point>	A										The name of a commit at which to start the new branch; see\ngit-branch[1] for details. Defaults to HEAD.	https://git-scm.com/docs/checkout.html
git-checkout <tree-ish>	A										Tree to checkout from (when paths are given). If not specified,\nthe index will be used.	https://git-scm.com/docs/checkout.html
git-checkout	A										Switch branches or restore working tree files
<pre><code>git checkout [-q] [-f] [-m] [<branch>]\ngit checkout [-q] [-f] [-m] --detach [<branch>]\ngit checkout [-q] [-f] [-m] [--detach] <commit>\ngit checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]\ngit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>…​\ngit checkout [-p|--patch] [<tree-ish>] [--] [<paths>…​]</pre></code>	https://git-scm.com/docs/checkout.html
git-cherry-pick <commit>…​	A										Commits to cherry-pick.\nFor a more complete list of ways to spell commits, see\ngitrevisions[7].\nSets of commits can be passed but no traversal is done by\ndefault, as if the --no-walk option was specified, see\ngit-rev-list[1]. Note that specifying a range will\nfeed all <commit>…​ arguments to a single revision walk\n(see a later example that uses maint master..next).	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -e	A										With this option, git cherry-pick will let you edit the commit\nmessage prior to committing.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --edit	A										With this option, git cherry-pick will let you edit the commit\nmessage prior to committing.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -x	A										When recording the commit, append a line that says\n"(cherry picked from commit …​)" to the original commit\nmessage in order to indicate which commit this change was\ncherry-picked from.  This is done only for cherry\npicks without conflicts.  Do not use this option if\nyou are cherry-picking from your private branch because\nthe information is useless to the recipient.  If on the\nother hand you are cherry-picking between two publicly\nvisible branches (e.g. backporting a fix to a\nmaintenance branch for an older release from a\ndevelopment branch), adding this information can be\nuseful.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -r	A										It used to be that the command defaulted to do -x\ndescribed above, and -r was to disable it.  Now the\ndefault is not to do -x so this option is a no-op.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -m parent-number	A										Usually you cannot cherry-pick a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows cherry-pick to replay the change\nrelative to the specified parent.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --mainline parent-number	A										Usually you cannot cherry-pick a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows cherry-pick to replay the change\nrelative to the specified parent.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -n	A										Usually the command automatically creates a sequence of commits.\nThis flag applies the changes necessary to cherry-pick\neach named commit to your working tree and the index,\nwithout making any commit.  In addition, when this\noption is used, your index does not have to match the\nHEAD commit.  The cherry-pick is done against the\nbeginning state of your index.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --no-commit	A										Usually the command automatically creates a sequence of commits.\nThis flag applies the changes necessary to cherry-pick\neach named commit to your working tree and the index,\nwithout making any commit.  In addition, when this\noption is used, your index does not have to match the\nHEAD commit.  The cherry-pick is done against the\nbeginning state of your index.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -s	A										Add Signed-off-by line at the end of the commit message.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --signoff	A										Add Signed-off-by line at the end of the commit message.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --ff	A										If the current HEAD is the same as the parent of the\ncherry-pick’ed commit, then a fast forward to this commit will\nbe performed.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --allow-empty	A										By default, cherry-picking an empty commit will fail,\nindicating that an explicit invocation of git commit\n--allow-empty is required. This option overrides that\nbehavior, allowing empty commits to be preserved automatically\nin a cherry-pick. Note that when "--ff" is in effect, empty\ncommits that meet the "fast-forward" requirement will be kept\neven without this option.  Note also, that use of this option only\nkeeps commits that were initially empty (i.e. the commit recorded the\nsame tree as its parent).  Commits which are made empty due to a\nprevious commit are dropped.  To force the inclusion of those commits\nuse --keep-redundant-commits.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --allow-empty-message	A										By default, cherry-picking a commit with an empty message will fail.\nThis option overrides that behavior, allowing commits with empty\nmessages to be cherry picked.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --keep-redundant-commits	A										If a commit being cherry picked duplicates a commit already in the\ncurrent history, it will become empty.  By default these\nredundant commits cause cherry-pick to stop so the user can\nexamine the commit. This option overrides that behavior and\ncreates an empty commit object.  Implies --allow-empty.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --strategy=<strategy>	A										Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge[1]\nfor details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick -X<option>	A										Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick --strategy-option=<option>	A										Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/cherry-pick.html
git-cherry-pick	A										Apply the changes introduced by some existing commits
<pre><code>git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]\n          [-S[<keyid>]] <commit>…​\ngit cherry-pick --continue\ngit cherry-pick --quit\ngit cherry-pick --abort</pre></code>	https://git-scm.com/docs/cherry-pick.html
git-clean -d	A										Remove untracked directories in addition to untracked files.\nIf an untracked directory is managed by a different Git\nrepository, it is not removed by default.  Use -f option twice\nif you really want to remove such a directory.	https://git-scm.com/docs/clean.html
git-clean -f	A										If the Git configuration variable clean.requireForce is not set\nto false, git clean will refuse to delete files or directories\nunless given -f, -n or -i. Git will refuse to delete directories\nwith .git sub directory or file unless a second -f\nis given.	https://git-scm.com/docs/clean.html
git-clean --force	A										If the Git configuration variable clean.requireForce is not set\nto false, git clean will refuse to delete files or directories\nunless given -f, -n or -i. Git will refuse to delete directories\nwith .git sub directory or file unless a second -f\nis given.	https://git-scm.com/docs/clean.html
git-clean -i	A										Show what would be done and clean files interactively. See\n“Interactive mode” for details.	https://git-scm.com/docs/clean.html
git-clean --interactive	A										Show what would be done and clean files interactively. See\n“Interactive mode” for details.	https://git-scm.com/docs/clean.html
git-clean -n	A										Don’t actually remove anything, just show what would be done.	https://git-scm.com/docs/clean.html
git-clean --dry-run	A										Don’t actually remove anything, just show what would be done.	https://git-scm.com/docs/clean.html
git-clean -q	A										Be quiet, only report errors, but not the files that are\nsuccessfully removed.	https://git-scm.com/docs/clean.html
git-clean --quiet	A										Be quiet, only report errors, but not the files that are\nsuccessfully removed.	https://git-scm.com/docs/clean.html
git-clean -e <pattern>	A										In addition to those found in .gitignore (per directory) and\n$GIT_DIR/info/exclude, also consider these patterns to be in the\nset of the ignore rules in effect.	https://git-scm.com/docs/clean.html
git-clean --exclude=<pattern>	A										In addition to those found in .gitignore (per directory) and\n$GIT_DIR/info/exclude, also consider these patterns to be in the\nset of the ignore rules in effect.	https://git-scm.com/docs/clean.html
git-clean -x	A										Don’t use the standard ignore rules read from .gitignore (per\ndirectory) and $GIT_DIR/info/exclude, but do still use the ignore\nrules given with -e options.  This allows removing all untracked\nfiles, including build products.  This can be used (possibly in\nconjunction with git reset) to create a pristine\nworking directory to test a clean build.	https://git-scm.com/docs/clean.html
git-clean -X	A										Remove only files ignored by Git.  This may be useful to rebuild\neverything from scratch, but keep manually created files.	https://git-scm.com/docs/clean.html
git-clean	A										Remove untracked files from the working tree
<pre><code>git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <path>…​</pre></code>	https://git-scm.com/docs/clean.html
git-clone --local	A										When the repository to clone from is on a local machine,\nthis flag bypasses the normal "Git aware" transport\nmechanism and clones the repository by making a copy of\nHEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible.	https://git-scm.com/docs/clone.html
git-clone -l	A										When the repository to clone from is on a local machine,\nthis flag bypasses the normal "Git aware" transport\nmechanism and clones the repository by making a copy of\nHEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible.	https://git-scm.com/docs/clone.html
git-clone --no-hardlinks	A										Force the cloning process from a repository on a local\nfilesystem to copy the files under the .git/objects\ndirectory instead of using hardlinks. This may be desirable\nif you are trying to make a back-up of your repository.	https://git-scm.com/docs/clone.html
git-clone --shared	A										When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup\n.git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own.	https://git-scm.com/docs/clone.html
git-clone -s	A										When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup\n.git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own.	https://git-scm.com/docs/clone.html
git-clone --reference <repository>	A										If the reference repository is on the local machine,\nautomatically setup .git/objects/info/alternates to\nobtain objects from the reference repository.  Using\nan already existing repository as an alternate will\nrequire fewer objects to be copied from the repository\nbeing cloned, reducing network and local storage costs.	https://git-scm.com/docs/clone.html
git-clone --dissociate	A										Borrow the objects from reference repositories specified\nwith the --reference options only to reduce network\ntransfer, and stop borrowing from them after a clone is made\nby making necessary local copies of borrowed objects.  This\noption can also be used when cloning locally from a\nrepository that already borrows objects from another\nrepository—​the new repository will borrow objects from the\nsame repository, and this option can be used to stop the\nborrowing.	https://git-scm.com/docs/clone.html
git-clone --quiet	A										Operate quietly.  Progress is not reported to the standard\nerror stream.	https://git-scm.com/docs/clone.html
git-clone -q	A										Operate quietly.  Progress is not reported to the standard\nerror stream.	https://git-scm.com/docs/clone.html
git-clone --verbose	A										Run verbosely. Does not affect the reporting of progress status\nto the standard error stream.	https://git-scm.com/docs/clone.html
git-clone -v	A										Run verbosely. Does not affect the reporting of progress status\nto the standard error stream.	https://git-scm.com/docs/clone.html
git-clone --progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.	https://git-scm.com/docs/clone.html
git-clone --no-checkout	A										No checkout of HEAD is performed after the clone is complete.	https://git-scm.com/docs/clone.html
git-clone -n	A										No checkout of HEAD is performed after the clone is complete.	https://git-scm.com/docs/clone.html
git-clone --bare	A										Make a bare Git repository.  That is, instead of\ncreating <directory> and placing the administrative\nfiles in <directory>/.git, make the <directory>\nitself the $GIT_DIR. This obviously implies the -n\nbecause there is nowhere to check out the working tree.\nAlso the branch heads at the remote are copied directly\nto corresponding local branch heads, without mapping\nthem to refs/remotes/origin/.  When this option is\nused, neither remote-tracking branches nor the related\nconfiguration variables are created.	https://git-scm.com/docs/clone.html
git-clone --mirror	A										Set up a mirror of the source repository.  This implies --bare.\nCompared to --bare, --mirror not only maps local branches of the\nsource to local branches of the target, it maps all refs (including\nremote-tracking branches, notes etc.) and sets up a refspec configuration such\nthat all these refs are overwritten by a git remote update in the\ntarget repository.	https://git-scm.com/docs/clone.html
git-clone --origin <name>	A										Instead of using the remote name origin to keep track\nof the upstream repository, use <name>.	https://git-scm.com/docs/clone.html
git-clone -o <name>	A										Instead of using the remote name origin to keep track\nof the upstream repository, use <name>.	https://git-scm.com/docs/clone.html
git-clone --branch <name>	A										Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out.\n--branch can also take tags and detaches the HEAD at that commit\nin the resulting repository.	https://git-scm.com/docs/clone.html
git-clone -b <name>	A										Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out.\n--branch can also take tags and detaches the HEAD at that commit\nin the resulting repository.	https://git-scm.com/docs/clone.html
git-clone --upload-pack <upload-pack>	A										When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end.	https://git-scm.com/docs/clone.html
git-clone -u <upload-pack>	A										When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end.	https://git-scm.com/docs/clone.html
git-clone --template=<template_directory>	A										Specify the directory from which templates will be used;\n(See the "TEMPLATE DIRECTORY" section of git-init[1].)	https://git-scm.com/docs/clone.html
git-clone --config <key>=<value>	A										Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The key is in the same format as expected by\ngit-config[1] (e.g., core.eol=true). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote.	https://git-scm.com/docs/clone.html
git-clone -c <key>=<value>	A										Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The key is in the same format as expected by\ngit-config[1] (e.g., core.eol=true). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote.	https://git-scm.com/docs/clone.html
git-clone --depth <depth>	A										Create a shallow clone with a history truncated to the\nspecified number of commits. Implies --single-branch unless\n--no-single-branch is given to fetch the histories near the\ntips of all branches. If you want to clone submodules shallowly,\nalso pass --shallow-submodules.	https://git-scm.com/docs/clone.html
git-clone --[no-]single-branch	A										Clone only the history leading to the tip of a single branch,\neither specified by the --branch option or the primary\nbranch remote’s HEAD points at.\nFurther fetches into the resulting repository will only update the\nremote-tracking branch for the branch this option was used for the\ninitial cloning.  If the HEAD at the remote did not point at any\nbranch when --single-branch clone was made, no remote-tracking\nbranch is created.	https://git-scm.com/docs/clone.html
git-clone --recursive	A										After the clone is created, initialize all submodules within,\nusing their default settings. This is equivalent to running\ngit submodule update --init --recursive immediately after\nthe clone is finished. This option is ignored if the cloned\nrepository does not have a worktree/checkout (i.e. if any of\n--no-checkout/-n, --bare, or --mirror is given)	https://git-scm.com/docs/clone.html
git-clone --recurse-submodules	A										After the clone is created, initialize all submodules within,\nusing their default settings. This is equivalent to running\ngit submodule update --init --recursive immediately after\nthe clone is finished. This option is ignored if the cloned\nrepository does not have a worktree/checkout (i.e. if any of\n--no-checkout/-n, --bare, or --mirror is given)	https://git-scm.com/docs/clone.html
git-clone --[no-]shallow-submodules	A										All submodules which are cloned will be shallow with a depth of 1.	https://git-scm.com/docs/clone.html
git-clone --separate-git-dir=<git dir>	A										Instead of placing the cloned repository where it is supposed\nto be, place the cloned repository at the specified directory,\nthen make a filesystem-agnostic Git symbolic link to there.\nThe result is Git repository can be separated from working\ntree.	https://git-scm.com/docs/clone.html
git-clone -j <n>	A										The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option.	https://git-scm.com/docs/clone.html
git-clone --jobs <n>	A										The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option.	https://git-scm.com/docs/clone.html
git-clone <repository>	A										The (possibly remote) repository to clone from.  See the\nURLS section below for more information on specifying\nrepositories.	https://git-scm.com/docs/clone.html
git-clone <directory>	A										The name of a new directory to clone into.  The "humanish"\npart of the source repository is used if no directory is\nexplicitly given (repo for /path/to/repo.git and foo\nfor host.xz:foo/.git).  Cloning into an existing directory\nis only allowed if the directory is empty.	https://git-scm.com/docs/clone.html
git-clone	A										Clone a repository into a new directory
<pre><code>git clone [--template=<template_directory>]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n      [--dissociate] [--separate-git-dir <git dir>]\n      [--depth <depth>] [--[no-]single-branch]\n      [--recursive | --recurse-submodules] [--[no-]shallow-submodules]\n      [--jobs <n>] [--] <repository> [<directory>]</pre></code>	https://git-scm.com/docs/clone.html
git-commit-tree <tree>	A										An existing tree object	https://git-scm.com/docs/commit-tree.html
git-commit-tree -p <parent>	A										Each -p indicates the id of a parent commit object.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -m <message>	A										A paragraph in the commit log message. This can be given more than\nonce and each <message> becomes its own paragraph.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -F <file>	A										Read the commit log message from the given file. Use - to read\nfrom the standard input.	https://git-scm.com/docs/commit-tree.html
git-commit-tree -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/commit-tree.html
git-commit-tree --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/commit-tree.html
git-commit-tree --no-gpg-sign	A										Do not GPG-sign commit, to countermand a --gpg-sign option\ngiven earlier on the command line.	https://git-scm.com/docs/commit-tree.html
git-commit-tree	A										Create a new commit object
<pre><code>git commit-tree <tree> [(-p <parent>)…​]\ngit commit-tree [(-p <parent>)…​] [-S[<keyid>]] [(-m <message>)…​]\n          [(-F <file>)…​] <tree></pre></code>	https://git-scm.com/docs/commit-tree.html
git-commit -a	A										Tell the command to automatically stage files that have\nbeen modified and deleted, but new files you have not\ntold Git about are not affected.	https://git-scm.com/docs/commit.html
git-commit --all	A										Tell the command to automatically stage files that have\nbeen modified and deleted, but new files you have not\ntold Git about are not affected.	https://git-scm.com/docs/commit.html
git-commit -p	A										Use the interactive patch selection interface to chose\nwhich changes to commit. See git-add[1] for\ndetails.	https://git-scm.com/docs/commit.html
git-commit --patch	A										Use the interactive patch selection interface to chose\nwhich changes to commit. See git-add[1] for\ndetails.	https://git-scm.com/docs/commit.html
git-commit -C <commit>	A										Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit.	https://git-scm.com/docs/commit.html
git-commit --reuse-message=<commit>	A										Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit.	https://git-scm.com/docs/commit.html
git-commit -c <commit>	A										Like -C, but with -c the editor is invoked, so that\nthe user can further edit the commit message.	https://git-scm.com/docs/commit.html
git-commit --reedit-message=<commit>	A										Like -C, but with -c the editor is invoked, so that\nthe user can further edit the commit message.	https://git-scm.com/docs/commit.html
git-commit --fixup=<commit>	A										Construct a commit message for use with rebase --autosquash.\nThe commit message will be the subject line from the specified\ncommit with a prefix of "fixup! ".  See git-rebase[1]\nfor details.	https://git-scm.com/docs/commit.html
git-commit --squash=<commit>	A										Construct a commit message for use with rebase --autosquash.\nThe commit message subject line is taken from the specified\ncommit with a prefix of "squash! ".  Can be used with additional\ncommit message options (-m/-c/-C/-F). See\ngit-rebase[1] for details.	https://git-scm.com/docs/commit.html
git-commit --reset-author	A										When used with -C/-c/--amend options, or when committing after a\na conflicting cherry-pick, declare that the authorship of the\nresulting commit now belongs to the committer. This also renews\nthe author timestamp.	https://git-scm.com/docs/commit.html
git-commit --short	A										When doing a dry-run, give the output in the short-format. See\ngit-status[1] for details. Implies --dry-run.	https://git-scm.com/docs/commit.html
git-commit --branch	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/commit.html
git-commit --porcelain	A										When doing a dry-run, give the output in a porcelain-ready\nformat. See git-status[1] for details. Implies\n--dry-run.	https://git-scm.com/docs/commit.html
git-commit --long	A										When doing a dry-run, give the output in a the long-format.\nImplies --dry-run.	https://git-scm.com/docs/commit.html
git-commit -z	A										When showing short or porcelain status output, terminate\nentries in the status output with NUL, instead of LF. If no\nformat is given, implies the --porcelain output format.	https://git-scm.com/docs/commit.html
git-commit --null	A										When showing short or porcelain status output, terminate\nentries in the status output with NUL, instead of LF. If no\nformat is given, implies the --porcelain output format.	https://git-scm.com/docs/commit.html
git-commit -F <file>	A										Take the commit message from the given file.  Use - to\nread the message from the standard input.	https://git-scm.com/docs/commit.html
git-commit --file=<file>	A										Take the commit message from the given file.  Use - to\nread the message from the standard input.	https://git-scm.com/docs/commit.html
git-commit --author=<author>	A										Override the commit author. Specify an explicit author using the\nstandard A U Thor <author@example.com> format. Otherwise <author>\nis assumed to be a pattern and is used to search for an existing\ncommit by that author (i.e. rev-list --all -i --author=<author>);\nthe commit author is then copied from the first such commit found.	https://git-scm.com/docs/commit.html
git-commit --date=<date>	A										Override the author date used in the commit.	https://git-scm.com/docs/commit.html
git-commit -m <msg>	A										Use the given <msg> as the commit message.\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.	https://git-scm.com/docs/commit.html
git-commit --message=<msg>	A										Use the given <msg> as the commit message.\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.	https://git-scm.com/docs/commit.html
git-commit -t <file>	A										When editing the commit message, start the editor with the\ncontents in the given file.  The commit.template configuration\nvariable is often used to give this option implicitly to the\ncommand.  This mechanism can be used by projects that want to\nguide participants with some hints on what to write in the message\nin what order.  If the user exits the editor without editing the\nmessage, the commit is aborted.  This has no effect when a message\nis given by other means, e.g. with the -m or -F options.	https://git-scm.com/docs/commit.html
git-commit --template=<file>	A										When editing the commit message, start the editor with the\ncontents in the given file.  The commit.template configuration\nvariable is often used to give this option implicitly to the\ncommand.  This mechanism can be used by projects that want to\nguide participants with some hints on what to write in the message\nin what order.  If the user exits the editor without editing the\nmessage, the commit is aborted.  This has no effect when a message\nis given by other means, e.g. with the -m or -F options.	https://git-scm.com/docs/commit.html
git-commit -s	A										Add Signed-off-by line by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project,\nbut it typically certifies that committer has\nthe rights to submit this work under the same license and\nagrees to a Developer Certificate of Origin\n(see http://developercertificate.org/ for more information).	https://git-scm.com/docs/commit.html
git-commit --signoff	A										Add Signed-off-by line by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project,\nbut it typically certifies that committer has\nthe rights to submit this work under the same license and\nagrees to a Developer Certificate of Origin\n(see http://developercertificate.org/ for more information).	https://git-scm.com/docs/commit.html
git-commit -n	A										This option bypasses the pre-commit and commit-msg hooks.\nSee also githooks[5].	https://git-scm.com/docs/commit.html
git-commit --no-verify	A										This option bypasses the pre-commit and commit-msg hooks.\nSee also githooks[5].	https://git-scm.com/docs/commit.html
git-commit --allow-empty	A										Usually recording a commit that has the exact same tree as its\nsole parent commit is a mistake, and the command prevents you\nfrom making such a commit.  This option bypasses the safety, and\nis primarily for use by foreign SCM interface scripts.	https://git-scm.com/docs/commit.html
git-commit --allow-empty-message	A										Like --allow-empty this command is primarily for use by foreign\nSCM interface scripts. It allows you to create a commit with an\nempty commit message without using plumbing commands like\ngit-commit-tree[1].	https://git-scm.com/docs/commit.html
git-commit --cleanup=<mode>	A										This option determines how the supplied commit message should be\ncleaned up before committing.  The <mode> can be strip,\nwhitespace, verbatim, scissors or default.	https://git-scm.com/docs/commit.html
git-commit strip	A										Strip leading and trailing empty lines, trailing whitespace,\ncommentary and collapse consecutive empty lines.	https://git-scm.com/docs/commit.html
git-commit whitespace	A										Same as strip except #commentary is not removed.	https://git-scm.com/docs/commit.html
git-commit verbatim	A										Do not change the message at all.	https://git-scm.com/docs/commit.html
git-commit scissors	A										Same as whitespace, except that everything from (and\nincluding) the line\n"# ------------------------ >8 ------------------------"\nis truncated if the message is to be edited. "#" can be\ncustomized with core.commentChar.	https://git-scm.com/docs/commit.html
git-commit default	A										Same as strip if the message is to be edited.\nOtherwise whitespace.	https://git-scm.com/docs/commit.html
git-commit -e	A										The message taken from file with -F, command line with\n-m, and from commit object with -C are usually used as\nthe commit log message unmodified. This option lets you\nfurther edit the message taken from these sources.	https://git-scm.com/docs/commit.html
git-commit --edit	A										The message taken from file with -F, command line with\n-m, and from commit object with -C are usually used as\nthe commit log message unmodified. This option lets you\nfurther edit the message taken from these sources.	https://git-scm.com/docs/commit.html
git-commit --no-edit	A										Use the selected commit message without launching an editor.\nFor example, git commit --amend --no-edit amends a commit\nwithout changing its commit message.	https://git-scm.com/docs/commit.html
git-commit --amend	A										Replace the tip of the current branch by creating a new\ncommit. The recorded tree is prepared as usual (including\nthe effect of the -i and -o options and explicit\npathspec), and the message from the original commit is used\nas the starting point, instead of an empty message, when no\nother message is specified from the command line via options\nsuch as -m, -F, -c, etc.  The new commit has the same\nparents and author as the current one (the --reset-author\noption can countermand this).	https://git-scm.com/docs/commit.html
git-commit --no-post-rewrite	A										Bypass the post-rewrite hook.	https://git-scm.com/docs/commit.html
git-commit -i	A										Before making a commit out of staged contents so far,\nstage the contents of paths given on the command line\nas well.  This is usually not what you want unless you\nare concluding a conflicted merge.	https://git-scm.com/docs/commit.html
git-commit --include	A										Before making a commit out of staged contents so far,\nstage the contents of paths given on the command line\nas well.  This is usually not what you want unless you\nare concluding a conflicted merge.	https://git-scm.com/docs/commit.html
git-commit -o	A										Make a commit by taking the updated working tree contents\nof the paths specified on the\ncommand line, disregarding any contents that have been\nstaged for other paths. This is the default mode of operation of\ngit commit if any paths are given on the command line,\nin which case this option can be omitted.\nIf this option is specified together with --amend, then\nno paths need to be specified, which can be used to amend\nthe last commit without committing changes that have\nalready been staged.	https://git-scm.com/docs/commit.html
git-commit --only	A										Make a commit by taking the updated working tree contents\nof the paths specified on the\ncommand line, disregarding any contents that have been\nstaged for other paths. This is the default mode of operation of\ngit commit if any paths are given on the command line,\nin which case this option can be omitted.\nIf this option is specified together with --amend, then\nno paths need to be specified, which can be used to amend\nthe last commit without committing changes that have\nalready been staged.	https://git-scm.com/docs/commit.html
git-commit -u[<mode>]	A										Show untracked files.	https://git-scm.com/docs/commit.html
git-commit --untracked-files[=<mode>]	A										Show untracked files.	https://git-scm.com/docs/commit.html
git-commit -v	A										Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn’t have its\nlines prefixed with #. This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config[1].	https://git-scm.com/docs/commit.html
git-commit --verbose	A										Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn’t have its\nlines prefixed with #. This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config[1].	https://git-scm.com/docs/commit.html
git-commit -q	A										Suppress commit summary message.	https://git-scm.com/docs/commit.html
git-commit --quiet	A										Suppress commit summary message.	https://git-scm.com/docs/commit.html
git-commit --dry-run	A										Do not create a commit, but show a list of paths that are\nto be committed, paths with local changes that will be left\nuncommitted and paths that are untracked.	https://git-scm.com/docs/commit.html
git-commit --status	A										Include the output of git-status[1] in the commit\nmessage template when using an editor to prepare the commit\nmessage.  Defaults to on, but can be used to override\nconfiguration variable commit.status.	https://git-scm.com/docs/commit.html
git-commit --no-status	A										Do not include the output of git-status[1] in the\ncommit message template when using an editor to prepare the\ndefault commit message.	https://git-scm.com/docs/commit.html
git-commit -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/commit.html
git-commit --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/commit.html
git-commit --no-gpg-sign	A										Countermand commit.gpgSign configuration variable that is\nset to force each and every commit to be signed.	https://git-scm.com/docs/commit.html
git-commit --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/commit.html
git-commit <file>…​	A										When files are given on the command line, the command\ncommits the contents of the named files, without\nrecording the changes already staged.  The contents of\nthese files are also staged for the next commit on top\nof what have been staged before.	https://git-scm.com/docs/commit.html
git-commit	A										Record changes to the repository
<pre><code>git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n       [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n       [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n       [-i | -o] [-S[<keyid>]] [--] [<file>…​]</pre></code>	https://git-scm.com/docs/commit.html
git-config --replace-all	A										Default behavior is to replace at most one line. This replaces\nall lines matching the key (and optionally the value_regex).	https://git-scm.com/docs/config.html
git-config --add	A										Adds a new line to the option without altering any existing\nvalues.  This is the same as providing ^$ as the value_regex\nin --replace-all.	https://git-scm.com/docs/config.html
git-config --get	A										Get the value for a given key (optionally filtered by a regex\nmatching the value). Returns error code 1 if the key was not\nfound and the last value if multiple key values were found.	https://git-scm.com/docs/config.html
git-config --get-all	A										Like get, but returns all values for a multi-valued key.	https://git-scm.com/docs/config.html
git-config --get-regexp	A										Like --get-all, but interprets the name as a regular expression and\nwrites out the key names.  Regular expression matching is currently\ncase-sensitive and done against a canonicalized version of the key\nin which section and variable names are lowercased, but subsection\nnames are not.	https://git-scm.com/docs/config.html
git-config --get-urlmatch name URL	A										When given a two-part name section.key, the value for\nsection.<url>.key whose <url> part matches the best to the\ngiven URL is returned (if no such key exists, the value for\nsection.key is used as a fallback).  When given just the\nsection as name, do so for all the keys in the section and\nlist them.  Returns error code 1 if no value is found.	https://git-scm.com/docs/config.html
git-config --global	A										For writing options: write to global ~/.gitconfig file\nrather than the repository .git/config, write to\n$XDG_CONFIG_HOME/git/config file if this file exists and the\n~/.gitconfig file doesn’t.	https://git-scm.com/docs/config.html
git-config --system	A										For writing options: write to system-wide\n$(prefix)/etc/gitconfig rather than the repository\n.git/config.	https://git-scm.com/docs/config.html
git-config --local	A										For writing options: write to the repository .git/config file.\nThis is    the default behavior.	https://git-scm.com/docs/config.html
git-config -f config-file	A										Use the given config file instead of the one specified by GIT_CONFIG.	https://git-scm.com/docs/config.html
git-config --file config-file	A										Use the given config file instead of the one specified by GIT_CONFIG.	https://git-scm.com/docs/config.html
git-config --blob blob	A										Similar to --file but use the given blob instead of a file. E.g.\nyou can use master:.gitmodules to read values from the file\n.gitmodules in the master branch. See "SPECIFYING REVISIONS"\nsection in gitrevisions[7] for a more complete list of\nways to spell blob names.	https://git-scm.com/docs/config.html
git-config --remove-section	A										Remove the given section from the configuration file.	https://git-scm.com/docs/config.html
git-config --rename-section	A										Rename the given section to a new name.	https://git-scm.com/docs/config.html
git-config --unset	A										Remove the line matching the key from config file.	https://git-scm.com/docs/config.html
git-config --unset-all	A										Remove all lines matching the key from config file.	https://git-scm.com/docs/config.html
git-config -l	A										List all variables set in config file, along with their values.	https://git-scm.com/docs/config.html
git-config --list	A										List all variables set in config file, along with their values.	https://git-scm.com/docs/config.html
git-config --bool	A										git config will ensure that the output is "true" or "false"	https://git-scm.com/docs/config.html
git-config --int	A										git config will ensure that the output is a simple\ndecimal number.  An optional value suffix of k, m, or g\nin the config file will cause the value to be multiplied\nby 1024, 1048576, or 1073741824 prior to output.	https://git-scm.com/docs/config.html
git-config --bool-or-int	A										git config will ensure that the output matches the format of\neither --bool or --int, as described above.	https://git-scm.com/docs/config.html
git-config --path	A										git-config will expand leading ~ to the value of\n$HOME, and ~user to the home directory for the\nspecified user.  This option has no effect when setting the\nvalue (but you can use git config bla ~/ from the\ncommand line to let your shell do the expansion).	https://git-scm.com/docs/config.html
git-config -z	A										For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks.	https://git-scm.com/docs/config.html
git-config --null	A										For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks.	https://git-scm.com/docs/config.html
git-config --name-only	A										Output only the names of config variables for --list or\n--get-regexp.	https://git-scm.com/docs/config.html
git-config --show-origin	A										Augment the output of all queried config options with the\norigin type (file, standard input, blob, command line) and\nthe actual origin (config file path, ref, or blob id if\napplicable).	https://git-scm.com/docs/config.html
git-config --get-colorbool name [stdout-is-tty]	A										Find the color setting for name (e.g. color.diff) and output\n"true" or "false".  stdout-is-tty should be either "true" or\n"false", and is taken into account when configuration says\n"auto".  If stdout-is-tty is missing, then checks the standard\noutput of the command itself, and exits with status 0 if color\nis to be used, or exits with status 1 otherwise.\nWhen the color setting for name is undefined, the command uses\ncolor.ui as fallback.	https://git-scm.com/docs/config.html
git-config --get-color name [default]	A										Find the color configured for name (e.g. color.diff.new) and\noutput it as the ANSI color escape sequence to the standard\noutput.  The optional default parameter is used instead, if\nthere is no color configured for name.	https://git-scm.com/docs/config.html
git-config -e	A										Opens an editor to modify the specified config file; either\n--system, --global, or repository (default).	https://git-scm.com/docs/config.html
git-config --edit	A										Opens an editor to modify the specified config file; either\n--system, --global, or repository (default).	https://git-scm.com/docs/config.html
git-config --[no-]includes	A										Respect include.* directives in config files when looking up\nvalues. Defaults to off when a specific file is given (e.g.,\nusing --file, --global, etc) and on when searching all\nconfig files.	https://git-scm.com/docs/config.html
git-config	A										Get and set repository or global options
<pre><code>git config [<file-option>] [type] [--show-origin] [-z|--null] name [value [value_regex]]\ngit config [<file-option>] [type] --add name value\ngit config [<file-option>] [type] --replace-all name value [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] --get name [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] --get-all name [value_regex]\ngit config [<file-option>] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]\ngit config [<file-option>] [type] [-z|--null] --get-urlmatch name URL\ngit config [<file-option>] --unset name [value_regex]\ngit config [<file-option>] --unset-all name [value_regex]\ngit config [<file-option>] --rename-section old_name new_name\ngit config [<file-option>] --remove-section name\ngit config [<file-option>] [--show-origin] [-z|--null] [--name-only] -l | --list\ngit config [<file-option>] --get-color name [default]\ngit config [<file-option>] --get-colorbool name [stdout-is-tty]\ngit config [<file-option>] -e | --edit</pre></code>	https://git-scm.com/docs/config.html
git-count-objects -v	A										Report in more detail:	https://git-scm.com/docs/count-objects.html
git-count-objects --verbose	A										Report in more detail:	https://git-scm.com/docs/count-objects.html
git-count-objects -H	A										Print sizes in human readable format	https://git-scm.com/docs/count-objects.html
git-count-objects --human-readable	A										Print sizes in human readable format	https://git-scm.com/docs/count-objects.html
git-count-objects	A										Count unpacked number of objects and their disk consumption
<pre><code>git count-objects [-v] [-H | --human-readable]</pre></code>	https://git-scm.com/docs/count-objects.html
git-daemon --strict-paths	A										Match paths exactly (i.e. don’t allow "/foo/repo" when the real path is\n"/foo/repo.git" or "/foo/repo/.git") and don’t do user-relative paths.\ngit daemon will refuse to start when this option is enabled and no\nwhitelist is specified.	https://git-scm.com/docs/daemon.html
git-daemon --base-path=<path>	A										Remap all the path requests as relative to the given path.\nThis is sort of "Git root" - if you run git daemon with\n--base-path=/srv/git on example.com, then if you later try to pull\ngit://example.com/hello.git, git daemon will interpret the path\nas /srv/git/hello.git.	https://git-scm.com/docs/daemon.html
git-daemon --base-path-relaxed	A										If --base-path is enabled and repo lookup fails, with this option\ngit daemon will attempt to lookup without prefixing the base path.\nThis is useful for switching to --base-path usage, while still\nallowing the old paths.	https://git-scm.com/docs/daemon.html
git-daemon --interpolated-path=<pathtemplate>	A										To support virtual hosting, an interpolated path template can be\nused to dynamically construct alternate paths.  The template\nsupports %H for the target hostname as supplied by the client but\nconverted to all lowercase, %CH for the canonical hostname,\n%IP for the server’s IP address, %P for the port number,\nand %D for the absolute path of the named repository.\nAfter interpolation, the path is validated against the directory\nwhitelist.	https://git-scm.com/docs/daemon.html
git-daemon --export-all	A										Allow pulling from all directories that look like Git repositories\n(have the objects and refs subdirectories), even if they\ndo not have the git-daemon-export-ok file.	https://git-scm.com/docs/daemon.html
git-daemon --inetd	A										Have the server run as an inetd service. Implies --syslog.\nIncompatible with --detach, --port, --listen, --user and --group\noptions.	https://git-scm.com/docs/daemon.html
git-daemon --listen=<host_or_ipaddr>	A										Listen on a specific IP address or hostname.  IP addresses can\nbe either an IPv4 address or an IPv6 address if supported.  If IPv6\nis not supported, then --listen=hostname is also not supported and\n--listen must be given an IPv4 address.\nCan be given more than once.\nIncompatible with --inetd option.	https://git-scm.com/docs/daemon.html
git-daemon --port=<n>	A										Listen on an alternative port.  Incompatible with --inetd option.	https://git-scm.com/docs/daemon.html
git-daemon --init-timeout=<n>	A										Timeout (in seconds) between the moment the connection is established\nand the client request is received (typically a rather low value, since\nthat should be basically immediate).	https://git-scm.com/docs/daemon.html
git-daemon --timeout=<n>	A										Timeout (in seconds) for specific client sub-requests. This includes\nthe time it takes for the server to process the sub-request and the\ntime spent waiting for the next client’s request.	https://git-scm.com/docs/daemon.html
git-daemon --max-connections=<n>	A										Maximum number of concurrent clients, defaults to 32.  Set it to\nzero for no limit.	https://git-scm.com/docs/daemon.html
git-daemon --syslog	A										Log to syslog instead of stderr. Note that this option does not imply\n--verbose, thus by default only error conditions will be logged.	https://git-scm.com/docs/daemon.html
git-daemon --user-path	A										Allow ~user notation to be used in requests.  When\nspecified with no parameter, requests to\ngit://host/~alice/foo is taken as a request to access\nfoo repository in the home directory of user alice.\nIf --user-path=path is specified, the same request is\ntaken as a request to access path/foo repository in\nthe home directory of user alice.	https://git-scm.com/docs/daemon.html
git-daemon --user-path=<path>	A										Allow ~user notation to be used in requests.  When\nspecified with no parameter, requests to\ngit://host/~alice/foo is taken as a request to access\nfoo repository in the home directory of user alice.\nIf --user-path=path is specified, the same request is\ntaken as a request to access path/foo repository in\nthe home directory of user alice.	https://git-scm.com/docs/daemon.html
git-daemon --verbose	A										Log details about the incoming connections and requested files.	https://git-scm.com/docs/daemon.html
git-daemon --reuseaddr	A										Use SO_REUSEADDR when binding the listening socket.\nThis allows the server to restart without waiting for\nold connections to time out.	https://git-scm.com/docs/daemon.html
git-daemon --detach	A										Detach from the shell. Implies --syslog.	https://git-scm.com/docs/daemon.html
git-daemon --pid-file=<file>	A										Save the process id in file.  Ignored when the daemon\nis run under --inetd.	https://git-scm.com/docs/daemon.html
git-daemon --user=<user>	A										Change daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group, the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3)\nand numeric IDs are not supported.	https://git-scm.com/docs/daemon.html
git-daemon --group=<group>	A										Change daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group, the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3)\nand numeric IDs are not supported.	https://git-scm.com/docs/daemon.html
git-daemon --enable=<service>	A										Enable/disable the service site-wide per default.  Note\nthat a service disabled site-wide can still be enabled\nper repository if it is marked overridable and the\nrepository enables the service with a configuration\nitem.	https://git-scm.com/docs/daemon.html
git-daemon --disable=<service>	A										Enable/disable the service site-wide per default.  Note\nthat a service disabled site-wide can still be enabled\nper repository if it is marked overridable and the\nrepository enables the service with a configuration\nitem.	https://git-scm.com/docs/daemon.html
git-daemon --allow-override=<service>	A										Allow/forbid overriding the site-wide default with per\nrepository configuration.  By default, all the services\nmay be overridden.	https://git-scm.com/docs/daemon.html
git-daemon --forbid-override=<service>	A										Allow/forbid overriding the site-wide default with per\nrepository configuration.  By default, all the services\nmay be overridden.	https://git-scm.com/docs/daemon.html
git-daemon --[no-]informative-errors	A										When informative errors are turned on, git-daemon will report\nmore verbose errors to the client, differentiating conditions\nlike "no such repository" from "repository not exported". This\nis more convenient for clients, but may leak information about\nthe existence of unexported repositories.  When informative\nerrors are not enabled, all errors report "access denied" to the\nclient. The default is --no-informative-errors.	https://git-scm.com/docs/daemon.html
git-daemon --access-hook=<path>	A										Every time a client connects, first run an external command\nspecified by the <path> with service name (e.g. "upload-pack"),\npath to the repository, hostname (%H), canonical hostname\n(%CH), IP address (%IP), and TCP port (%P) as its command-line\narguments. The external command can decide to decline the\nservice by exiting with a non-zero status (or to allow it by\nexiting with a zero status).  It can also look at the $REMOTE_ADDR\nand $REMOTE_PORT environment variables to learn about the\nrequestor when making this decision.	https://git-scm.com/docs/daemon.html
git-daemon <directory>	A										A directory to add to the whitelist of allowed directories. Unless\n--strict-paths is specified this will also include subdirectories\nof each named directory.	https://git-scm.com/docs/daemon.html
git-daemon	A										A really simple server for Git repositories
<pre><code>git daemon [--verbose] [--syslog] [--export-all]\n         [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]\n         [--strict-paths] [--base-path=<path>] [--base-path-relaxed]\n         [--user-path | --user-path=<path>]\n         [--interpolated-path=<pathtemplate>]\n         [--reuseaddr] [--detach] [--pid-file=<file>]\n         [--enable=<service>] [--disable=<service>]\n         [--allow-override=<service>] [--forbid-override=<service>]\n         [--access-hook=<path>] [--[no-]informative-errors]\n         [--inetd |\n          [--listen=<host_or_ipaddr>] [--port=<n>]\n          [--user=<user> [--group=<group>]]]\n         [<directory>…​]</pre></code>	https://git-scm.com/docs/daemon.html
git-describe <commit-ish>…​	A										Commit-ish object names to describe.  Defaults to HEAD if omitted.	https://git-scm.com/docs/describe.html
git-describe --dirty[=<mark>]	A										Describe the working tree.\nIt means describe HEAD and appends <mark> (-dirty by\ndefault) if the working tree is dirty.	https://git-scm.com/docs/describe.html
git-describe --all	A										Instead of using only the annotated tags, use any ref\nfound in refs/ namespace.  This option enables matching\nany known branch, remote-tracking branch, or lightweight tag.	https://git-scm.com/docs/describe.html
git-describe --tags	A										Instead of using only the annotated tags, use any tag\nfound in refs/tags namespace.  This option enables matching\na lightweight (non-annotated) tag.	https://git-scm.com/docs/describe.html
git-describe --contains	A										Instead of finding the tag that predates the commit, find\nthe tag that comes after the commit, and thus contains it.\nAutomatically implies --tags.	https://git-scm.com/docs/describe.html
git-describe --abbrev=<n>	A										Instead of using the default 7 hexadecimal digits as the\nabbreviated object name, use <n> digits, or as many digits\nas needed to form a unique object name.  An <n> of 0\nwill suppress long format, only showing the closest tag.	https://git-scm.com/docs/describe.html
git-describe --candidates=<n>	A										Instead of considering only the 10 most recent tags as\ncandidates to describe the input commit-ish consider\nup to <n> candidates.  Increasing <n> above 10 will take\nslightly longer but may produce a more accurate result.\nAn <n> of 0 will cause only exact matches to be output.	https://git-scm.com/docs/describe.html
git-describe --exact-match	A										Only output exact matches (a tag directly references the\nsupplied commit).  This is a synonym for --candidates=0.	https://git-scm.com/docs/describe.html
git-describe --debug	A										Verbosely display information about the searching strategy\nbeing employed to standard error.  The tag name will still\nbe printed to standard out.	https://git-scm.com/docs/describe.html
git-describe --long	A										Always output the long format (the tag, the number of commits\nand the abbreviated commit name) even when it matches a tag.\nThis is useful when you want to see parts of the commit object name\nin "describe" output, even when the commit in question happens to be\na tagged version.  Instead of just emitting the tag name, it will\ndescribe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2\nthat points at object deadbee…​.).	https://git-scm.com/docs/describe.html
git-describe --match <pattern>	A										Only consider tags matching the given glob(7) pattern,\nexcluding the "refs/tags/" prefix.  This can be used to avoid\nleaking private tags from the repository.	https://git-scm.com/docs/describe.html
git-describe --always	A										Show uniquely abbreviated commit object as fallback.	https://git-scm.com/docs/describe.html
git-describe --first-parent	A										Follow only the first parent commit upon seeing a merge commit.\nThis is useful when you wish to not match tags on branches merged\nin the history of the target commit.	https://git-scm.com/docs/describe.html
git-describe	A										Describe a commit using the most recent tag reachable from it
<pre><code>git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>…​]\ngit describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]</pre></code>	https://git-scm.com/docs/describe.html
git-diff-index -p	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index -u	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index --patch	A										Generate patch (see section on generating patches).	https://git-scm.com/docs/diff-index.html
git-diff-index -s	A										Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-patch	A										Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff-index.html
git-diff-index -U<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies -p.	https://git-scm.com/docs/diff-index.html
git-diff-index --unified=<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies -p.	https://git-scm.com/docs/diff-index.html
git-diff-index --raw	A										Generate the diff in raw format.\nThis is the default.	https://git-scm.com/docs/diff-index.html
git-diff-index --patch-with-raw	A										Synonym for -p --raw.	https://git-scm.com/docs/diff-index.html
git-diff-index --compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/diff-index.html
git-diff-index --minimal	A										Spend extra time to make sure the smallest possible\ndiff is produced.	https://git-scm.com/docs/diff-index.html
git-diff-index --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/diff-index.html
git-diff-index --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/diff-index.html
git-diff-index --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/diff-index.html
git-diff-index default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/diff-index.html
git-diff-index minimal	A										Spend extra time to make sure the smallest possible diff is\nproduced.	https://git-scm.com/docs/diff-index.html
git-diff-index patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/diff-index.html
git-diff-index histogram	A										This algorithm extends the patience algorithm to "support\nlow-occurrence common elements".	https://git-scm.com/docs/diff-index.html
git-diff-index --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.	https://git-scm.com/docs/diff-index.html
git-diff-index --numstat	A										Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0.	https://git-scm.com/docs/diff-index.html
git-diff-index --shortstat	A										Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines.	https://git-scm.com/docs/diff-index.html
git-diff-index --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:	https://git-scm.com/docs/diff-index.html
git-diff-index changes	A										Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.	https://git-scm.com/docs/diff-index.html
git-diff-index lines	A										Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.	https://git-scm.com/docs/diff-index.html
git-diff-index files	A										Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.	https://git-scm.com/docs/diff-index.html
git-diff-index cumulative	A										Count changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.	https://git-scm.com/docs/diff-index.html
git-diff-index <limit>	A										An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.	https://git-scm.com/docs/diff-index.html
git-diff-index --summary	A										Output a condensed summary of extended header information\nsuch as creations, renames and mode changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --patch-with-stat	A										Synonym for -p --stat.	https://git-scm.com/docs/diff-index.html
git-diff-index -z	A										When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.	https://git-scm.com/docs/diff-index.html
git-diff-index --name-only	A										Show only names of changed files.	https://git-scm.com/docs/diff-index.html
git-diff-index --name-status	A										Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.	https://git-scm.com/docs/diff-index.html
git-diff-index --submodule[=<format>]	A										Specify how differences in submodules are shown.  When --submodule\nor --submodule=log is given, the log format is used.  This format lists\nthe commits in the range like git-submodule[1] summary does.\nOmitting the --submodule option or specifying --submodule=short,\nuses the short format. This format just shows the names of the commits\nat the beginning and end of the range.  Can be tweaked via the\ndiff.submodule configuration variable.	https://git-scm.com/docs/diff-index.html
git-diff-index --color[=<when>]	A										Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-color	A										Turn off colored diff.\nIt is the same as --color=never.	https://git-scm.com/docs/diff-index.html
git-diff-index --word-diff[=<mode>]	A										Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:	https://git-scm.com/docs/diff-index.html
git-diff-index color	A										Highlight changed words using only colors.  Implies --color.	https://git-scm.com/docs/diff-index.html
git-diff-index plain	A										Show words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.	https://git-scm.com/docs/diff-index.html
git-diff-index porcelain	A										Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.	https://git-scm.com/docs/diff-index.html
git-diff-index none	A										Disable word diff again.	https://git-scm.com/docs/diff-index.html
git-diff-index --word-diff-regex=<regex>	A										Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.	https://git-scm.com/docs/diff-index.html
git-diff-index --color-words[=<regex>]	A										Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-renames	A										Turn off rename detection, even when the configuration\nfile gives the default to do so.	https://git-scm.com/docs/diff-index.html
git-diff-index --check	A										Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that solely consist of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code.	https://git-scm.com/docs/diff-index.html
git-diff-index --ws-error-highlight=<kind>	A										Highlight whitespace errors on lines specified by <kind>\nin the color specified by color.diff.whitespace.  <kind>\nis a comma separated list of old, new, context.  When\nthis option is not given, only whitespace errors in new\nlines are highlighted.  E.g. --ws-error-highlight=new,old\nhighlights whitespace errors on both deleted and added lines.\nall can be used as a short-hand for old,new,context.	https://git-scm.com/docs/diff-index.html
git-diff-index --full-index	A										Instead of the first handful of characters, show the full\npre- and post-image blob object names on the "index"\nline when generating patch format output.	https://git-scm.com/docs/diff-index.html
git-diff-index --binary	A										In addition to --full-index, output a binary diff that\ncan be applied with git-apply.	https://git-scm.com/docs/diff-index.html
git-diff-index --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show only a partial prefix.  This is\nindependent of the --full-index option above, which controls\nthe diff-patch output format.  Non default number of\ndigits can be specified with --abbrev=<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/diff-index.html
git-diff-index --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/diff-index.html
git-diff-index -M[<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-renames[=<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff-index.html
git-diff-index -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff-index.html
git-diff-index --find-copies-harder	A										For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect.	https://git-scm.com/docs/diff-index.html
git-diff-index -D	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/diff-index.html
git-diff-index --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/diff-index.html
git-diff-index -l<num>	A										The -M and -C options require O(n^2) processing time where n\nis the number of potential rename/copy targets.  This\noption prevents rename/copy detection from running if\nthe number of rename/copy targets exceeds the specified\nnumber.	https://git-scm.com/docs/diff-index.html
git-diff-index --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]	A										Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.	https://git-scm.com/docs/diff-index.html
git-diff-index -S<string>	A										Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.	https://git-scm.com/docs/diff-index.html
git-diff-index -G<regex>	A										Look for differences whose patch text contains added/removed\nlines that match <regex>.	https://git-scm.com/docs/diff-index.html
git-diff-index --pickaxe-all	A										When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>.	https://git-scm.com/docs/diff-index.html
git-diff-index --pickaxe-regex	A										Treat the <string> given to -S as an extended POSIX regular\nexpression to match.	https://git-scm.com/docs/diff-index.html
git-diff-index -O<orderfile>	A										Output the patch in the order specified in the\n<orderfile>, which has one shell glob pattern per line.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.	https://git-scm.com/docs/diff-index.html
git-diff-index -R	A										Swap two inputs; that is, show differences from index or\non-disk file to tree contents.	https://git-scm.com/docs/diff-index.html
git-diff-index --relative[=<path>]	A										When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.	https://git-scm.com/docs/diff-index.html
git-diff-index -a	A										Treat all files as text.	https://git-scm.com/docs/diff-index.html
git-diff-index --text	A										Treat all files as text.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/diff-index.html
git-diff-index -b	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/diff-index.html
git-diff-index -w	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/diff-index.html
git-diff-index --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/diff-index.html
git-diff-index -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff-index.html
git-diff-index --exit-code	A										Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences.	https://git-scm.com/docs/diff-index.html
git-diff-index --quiet	A										Disable all output of the program. Implies --exit-code.	https://git-scm.com/docs/diff-index.html
git-diff-index --ext-diff	A										Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/diff-index.html
git-diff-index --textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/diff-index.html
git-diff-index --no-textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/diff-index.html
git-diff-index --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be\neither "none", "untracked", "dirty" or "all", which is the default.\nUsing "none" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n"untracked" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using "dirty" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/diff-index.html
git-diff-index --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/diff-index.html
git-diff-index --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/diff-index.html
git-diff-index --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/diff-index.html
git-diff-index <tree-ish>	A										The id of a tree object to diff against.	https://git-scm.com/docs/diff-index.html
git-diff-index --cached	A										do not consider the on-disk file at all	https://git-scm.com/docs/diff-index.html
git-diff-index -m	A										By default, files recorded in the index but not checked\nout are reported as deleted.  This flag makes\ngit diff-index say that all non-checked-out files are up\nto date.	https://git-scm.com/docs/diff-index.html
git-diff-index	A										Compare a tree to the working tree or index
<pre><code>git diff-index [-m] [--cached] [<common diff options>] <tree-ish> [<path>…​]</pre></code>	https://git-scm.com/docs/diff-index.html
git-diff -p	A										Generate patch (see section on generating patches).\nThis is the default.	https://git-scm.com/docs/diff.html
git-diff -u	A										Generate patch (see section on generating patches).\nThis is the default.	https://git-scm.com/docs/diff.html
git-diff --patch	A										Generate patch (see section on generating patches).\nThis is the default.	https://git-scm.com/docs/diff.html
git-diff -s	A										Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff.html
git-diff --no-patch	A										Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch.	https://git-scm.com/docs/diff.html
git-diff -U<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies -p.	https://git-scm.com/docs/diff.html
git-diff --unified=<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies -p.	https://git-scm.com/docs/diff.html
git-diff --raw	A										Generate the diff in raw format.	https://git-scm.com/docs/diff.html
git-diff --patch-with-raw	A										Synonym for -p --raw.	https://git-scm.com/docs/diff.html
git-diff --compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/diff.html
git-diff --no-compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/diff.html
git-diff --minimal	A										Spend extra time to make sure the smallest possible\ndiff is produced.	https://git-scm.com/docs/diff.html
git-diff --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/diff.html
git-diff --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/diff.html
git-diff --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/diff.html
git-diff default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/diff.html
git-diff minimal	A										Spend extra time to make sure the smallest possible diff is\nproduced.	https://git-scm.com/docs/diff.html
git-diff patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/diff.html
git-diff histogram	A										This algorithm extends the patience algorithm to "support\nlow-occurrence common elements".	https://git-scm.com/docs/diff.html
git-diff --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.	https://git-scm.com/docs/diff.html
git-diff --numstat	A										Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0.	https://git-scm.com/docs/diff.html
git-diff --shortstat	A										Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines.	https://git-scm.com/docs/diff.html
git-diff --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:	https://git-scm.com/docs/diff.html
git-diff changes	A										Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.	https://git-scm.com/docs/diff.html
git-diff lines	A										Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.	https://git-scm.com/docs/diff.html
git-diff files	A										Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.	https://git-scm.com/docs/diff.html
git-diff cumulative	A										Count changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.	https://git-scm.com/docs/diff.html
git-diff <limit>	A										An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.	https://git-scm.com/docs/diff.html
git-diff --summary	A										Output a condensed summary of extended header information\nsuch as creations, renames and mode changes.	https://git-scm.com/docs/diff.html
git-diff --patch-with-stat	A										Synonym for -p --stat.	https://git-scm.com/docs/diff.html
git-diff -z	A										When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.	https://git-scm.com/docs/diff.html
git-diff --name-only	A										Show only names of changed files.	https://git-scm.com/docs/diff.html
git-diff --name-status	A										Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.	https://git-scm.com/docs/diff.html
git-diff --submodule[=<format>]	A										Specify how differences in submodules are shown.  When --submodule\nor --submodule=log is given, the log format is used.  This format lists\nthe commits in the range like git-submodule[1] summary does.\nOmitting the --submodule option or specifying --submodule=short,\nuses the short format. This format just shows the names of the commits\nat the beginning and end of the range.  Can be tweaked via the\ndiff.submodule configuration variable.	https://git-scm.com/docs/diff.html
git-diff --color[=<when>]	A										Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto.\nIt can be changed by the color.ui and color.diff\nconfiguration settings.	https://git-scm.com/docs/diff.html
git-diff --no-color	A										Turn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never.	https://git-scm.com/docs/diff.html
git-diff --word-diff[=<mode>]	A										Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:	https://git-scm.com/docs/diff.html
git-diff color	A										Highlight changed words using only colors.  Implies --color.	https://git-scm.com/docs/diff.html
git-diff plain	A										Show words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.	https://git-scm.com/docs/diff.html
git-diff porcelain	A										Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.	https://git-scm.com/docs/diff.html
git-diff none	A										Disable word diff again.	https://git-scm.com/docs/diff.html
git-diff --word-diff-regex=<regex>	A										Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.	https://git-scm.com/docs/diff.html
git-diff --color-words[=<regex>]	A										Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>.	https://git-scm.com/docs/diff.html
git-diff --no-renames	A										Turn off rename detection, even when the configuration\nfile gives the default to do so.	https://git-scm.com/docs/diff.html
git-diff --check	A										Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that solely consist of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code.	https://git-scm.com/docs/diff.html
git-diff --ws-error-highlight=<kind>	A										Highlight whitespace errors on lines specified by <kind>\nin the color specified by color.diff.whitespace.  <kind>\nis a comma separated list of old, new, context.  When\nthis option is not given, only whitespace errors in new\nlines are highlighted.  E.g. --ws-error-highlight=new,old\nhighlights whitespace errors on both deleted and added lines.\nall can be used as a short-hand for old,new,context.	https://git-scm.com/docs/diff.html
git-diff --full-index	A										Instead of the first handful of characters, show the full\npre- and post-image blob object names on the "index"\nline when generating patch format output.	https://git-scm.com/docs/diff.html
git-diff --binary	A										In addition to --full-index, output a binary diff that\ncan be applied with git-apply.	https://git-scm.com/docs/diff.html
git-diff --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show only a partial prefix.  This is\nindependent of the --full-index option above, which controls\nthe diff-patch output format.  Non default number of\ndigits can be specified with --abbrev=<n>.	https://git-scm.com/docs/diff.html
git-diff -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/diff.html
git-diff --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/diff.html
git-diff -M[<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff.html
git-diff --find-renames[=<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/diff.html
git-diff -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff.html
git-diff --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/diff.html
git-diff --find-copies-harder	A										For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect.	https://git-scm.com/docs/diff.html
git-diff -D	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/diff.html
git-diff --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/diff.html
git-diff -l<num>	A										The -M and -C options require O(n^2) processing time where n\nis the number of potential rename/copy targets.  This\noption prevents rename/copy detection from running if\nthe number of rename/copy targets exceeds the specified\nnumber.	https://git-scm.com/docs/diff.html
git-diff --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]	A										Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.	https://git-scm.com/docs/diff.html
git-diff -S<string>	A										Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.	https://git-scm.com/docs/diff.html
git-diff -G<regex>	A										Look for differences whose patch text contains added/removed\nlines that match <regex>.	https://git-scm.com/docs/diff.html
git-diff --pickaxe-all	A										When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>.	https://git-scm.com/docs/diff.html
git-diff --pickaxe-regex	A										Treat the <string> given to -S as an extended POSIX regular\nexpression to match.	https://git-scm.com/docs/diff.html
git-diff -O<orderfile>	A										Output the patch in the order specified in the\n<orderfile>, which has one shell glob pattern per line.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.	https://git-scm.com/docs/diff.html
git-diff -R	A										Swap two inputs; that is, show differences from index or\non-disk file to tree contents.	https://git-scm.com/docs/diff.html
git-diff --relative[=<path>]	A										When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.	https://git-scm.com/docs/diff.html
git-diff -a	A										Treat all files as text.	https://git-scm.com/docs/diff.html
git-diff --text	A										Treat all files as text.	https://git-scm.com/docs/diff.html
git-diff --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/diff.html
git-diff -b	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/diff.html
git-diff --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/diff.html
git-diff -w	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/diff.html
git-diff --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/diff.html
git-diff --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/diff.html
git-diff --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/diff.html
git-diff -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff.html
git-diff --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/diff.html
git-diff --exit-code	A										Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences.	https://git-scm.com/docs/diff.html
git-diff --quiet	A										Disable all output of the program. Implies --exit-code.	https://git-scm.com/docs/diff.html
git-diff --ext-diff	A										Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends.	https://git-scm.com/docs/diff.html
git-diff --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/diff.html
git-diff --textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/diff.html
git-diff --no-textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/diff.html
git-diff --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be\neither "none", "untracked", "dirty" or "all", which is the default.\nUsing "none" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n"untracked" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using "dirty" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/diff.html
git-diff --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/diff.html
git-diff --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/diff.html
git-diff --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/diff.html
git-diff <path>…​	A										The <paths> parameters, when given, are used to limit\nthe diff to the named paths (you can give directory\nnames and get diff for all files under them).	https://git-scm.com/docs/diff.html
git-diff	A										Show changes between commits, commit and working tree, etc
<pre><code>git diff [options] [<commit>] [--] [<path>…​]\ngit diff [options] --cached [<commit>] [--] [<path>…​]\ngit diff [options] <commit> <commit> [--] [<path>…​]\ngit diff [options] <blob> <blob>\ngit diff [options] [--no-index] [--] <path> <path></pre></code>	https://git-scm.com/docs/diff.html
git-fast-import --force	A										Force updating modified existing branches, even if doing\nso would cause commits to be lost (as the new commit does\nnot contain the old commit).	https://git-scm.com/docs/fast-import.html
git-fast-import --quiet	A										Disable all non-fatal output, making fast-import silent when it\nis successful.  This option disables the output shown by\n--stats.	https://git-scm.com/docs/fast-import.html
git-fast-import --stats	A										Display some basic statistics about the objects fast-import has\ncreated, the packfiles they were stored into, and the\nmemory used by fast-import during this run.  Showing this output\nis currently the default, but can be disabled with --quiet.	https://git-scm.com/docs/fast-import.html
git-fast-import --cat-blob-fd=<fd>	A										Write responses to get-mark, cat-blob, and ls queries to the\nfile descriptor <fd> instead of stdout.  Allows progress\noutput intended for the end-user to be separated from other\noutput.	https://git-scm.com/docs/fast-import.html
git-fast-import --date-format=<fmt>	A										Specify the type of dates the frontend will supply to\nfast-import within author, committer and tagger commands.\nSee “Date Formats” below for details about which formats\nare supported, and their syntax.	https://git-scm.com/docs/fast-import.html
git-fast-import --done	A										Terminate with error if there is no done command at the end of\nthe stream.  This option might be useful for detecting errors\nthat cause the frontend to terminate before it has started to\nwrite a stream.	https://git-scm.com/docs/fast-import.html
git-fast-import --export-marks=<file>	A										Dumps the internal marks table to <file> when complete.\nMarks are written one per line as :markid SHA-1.\nFrontends can use this file to validate imports after they\nhave been completed, or to save the marks table across\nincremental runs.  As <file> is only opened and truncated\nat checkpoint (or completion) the same path can also be\nsafely given to --import-marks.	https://git-scm.com/docs/fast-import.html
git-fast-import --import-marks=<file>	A										Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks.\nMultiple options may be supplied to import more than one\nset of marks.  If a mark is defined to different values,\nthe last file wins.	https://git-scm.com/docs/fast-import.html
git-fast-import --import-marks-if-exists=<file>	A										Like --import-marks but instead of erroring out, silently\nskips the file if it does not exist.	https://git-scm.com/docs/fast-import.html
git-fast-import --[no-]relative-marks	A										After specifying --relative-marks the paths specified\nwith --import-marks= and --export-marks= are relative\nto an internal directory in the current repository.\nIn git-fast-import this means that the paths are relative\nto the .git/info/fast-import directory. However, other\nimporters may use a different location.	https://git-scm.com/docs/fast-import.html
git-fast-import --active-branches=<n>	A										Maximum number of branches to maintain active at once.\nSee “Memory Utilization” below for details.  Default is 5.	https://git-scm.com/docs/fast-import.html
git-fast-import --big-file-threshold=<n>	A										Maximum size of a blob that fast-import will attempt to\ncreate a delta for, expressed in bytes.  The default is 512m\n(512 MiB).  Some importers may wish to lower this on systems\nwith constrained memory.	https://git-scm.com/docs/fast-import.html
git-fast-import --depth=<n>	A										Maximum delta depth, for blob and tree deltification.\nDefault is 10.	https://git-scm.com/docs/fast-import.html
git-fast-import --export-pack-edges=<file>	A										After creating a packfile, print a line of data to\n<file> listing the filename of the packfile and the last\ncommit on each branch that was written to that packfile.\nThis information may be useful after importing projects\nwhose total object set exceeds the 4 GiB packfile limit,\nas these commits can be used as edge points during calls\nto git pack-objects.	https://git-scm.com/docs/fast-import.html
git-fast-import --max-pack-size=<n>	A										Maximum size of each output packfile.\nThe default is unlimited.	https://git-scm.com/docs/fast-import.html
git-fast-import fastimport.unpackLimit	A										See git-config[1]	https://git-scm.com/docs/fast-import.html
git-fast-import	A										Backend for fast Git data importers
<pre><code>frontend | git fast-import [options]</pre></code>	https://git-scm.com/docs/fast-import.html
git-fetch --all	A										Fetch all remotes.	https://git-scm.com/docs/fetch.html
git-fetch -a	A										Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/fetch.html
git-fetch --append	A										Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/fetch.html
git-fetch --depth=<depth>	A										Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see\ngit-clone[1]), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched.	https://git-scm.com/docs/fetch.html
git-fetch --unshallow	A										If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories.	https://git-scm.com/docs/fetch.html
git-fetch --update-shallow	A										By default when fetching from a shallow repository,\ngit fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accept such\nrefs.	https://git-scm.com/docs/fetch.html
git-fetch --dry-run	A										Show what would be done, without making any changes.	https://git-scm.com/docs/fetch.html
git-fetch -f	A										When git fetch is used with <rbranch>:<lbranch>\nrefspec, it refuses to update the local branch\n<lbranch> unless the remote branch <rbranch> it\nfetches is a descendant of <lbranch>.  This option\noverrides that check.	https://git-scm.com/docs/fetch.html
git-fetch --force	A										When git fetch is used with <rbranch>:<lbranch>\nrefspec, it refuses to update the local branch\n<lbranch> unless the remote branch <rbranch> it\nfetches is a descendant of <lbranch>.  This option\noverrides that check.	https://git-scm.com/docs/fetch.html
git-fetch -k	A										Keep downloaded pack.	https://git-scm.com/docs/fetch.html
git-fetch --keep	A										Keep downloaded pack.	https://git-scm.com/docs/fetch.html
git-fetch --multiple	A										Allow several <repository> and <group> arguments to be\nspecified. No <refspec>s may be specified.	https://git-scm.com/docs/fetch.html
git-fetch -p	A										Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning.	https://git-scm.com/docs/fetch.html
git-fetch --prune	A										Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning.	https://git-scm.com/docs/fetch.html
git-fetch -n	A										By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1].	https://git-scm.com/docs/fetch.html
git-fetch --no-tags	A										By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1].	https://git-scm.com/docs/fetch.html
git-fetch --refmap=<refspec>	A										When fetching refs listed on the command line, use the\nspecified refspec (can be given more than once) to map the\nrefs to remote-tracking branches, instead of the values of\nremote.*.fetch configuration variables for the remote\nrepository.  See section on "Configured Remote-tracking\nBranches" for details.	https://git-scm.com/docs/fetch.html
git-fetch -t	A										Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune).	https://git-scm.com/docs/fetch.html
git-fetch --tags	A										Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune).	https://git-scm.com/docs/fetch.html
git-fetch --recurse-submodules[=yes|on-demand|no]	A										This option controls if and under what conditions new commits of\npopulated submodules should be fetched too. It can be used as a\nboolean option to completely disable recursion when set to no or to\nunconditionally recurse into all populated submodules when set to\nyes, which is the default when this option is used without any\nvalue. Use on-demand to only recurse into a populated submodule\nwhen the superproject retrieves a commit that updates the submodule’s\nreference to a commit that isn’t already in the local submodule\nclone.	https://git-scm.com/docs/fetch.html
git-fetch -j	A										Number of parallel children to be used for fetching submodules.\nEach will fetch from different submodules, such that fetching many\nsubmodules will be faster. By default submodules will be fetched\none at a time.	https://git-scm.com/docs/fetch.html
git-fetch --jobs=<n>	A										Number of parallel children to be used for fetching submodules.\nEach will fetch from different submodules, such that fetching many\nsubmodules will be faster. By default submodules will be fetched\none at a time.	https://git-scm.com/docs/fetch.html
git-fetch --no-recurse-submodules	A										Disable recursive fetching of submodules (this has the same effect as\nusing the --recurse-submodules=no option).	https://git-scm.com/docs/fetch.html
git-fetch --submodule-prefix=<path>	A										Prepend <path> to paths printed in informative messages\nsuch as "Fetching submodule foo".  This option is used\ninternally when recursing over submodules.	https://git-scm.com/docs/fetch.html
git-fetch --recurse-submodules-default=[yes|on-demand]	A										This option is used internally to temporarily provide a\nnon-negative default value for the --recurse-submodules\noption.  All other methods of configuring fetch’s submodule\nrecursion (such as settings in gitmodules[5] and\ngit-config[1]) override this option, as does\nspecifying --[no-]recurse-submodules directly.	https://git-scm.com/docs/fetch.html
git-fetch -u	A										By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it.	https://git-scm.com/docs/fetch.html
git-fetch --update-head-ok	A										By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it.	https://git-scm.com/docs/fetch.html
git-fetch --upload-pack <upload-pack>	A										When given, and the repository to fetch from is handled\nby git fetch-pack, --exec=<upload-pack> is passed to\nthe command to specify non-default path for the command\nrun on the other end.	https://git-scm.com/docs/fetch.html
git-fetch -q	A										Pass --quiet to git-fetch-pack and silence any other internally\nused git commands. Progress is not reported to the standard error\nstream.	https://git-scm.com/docs/fetch.html
git-fetch --quiet	A										Pass --quiet to git-fetch-pack and silence any other internally\nused git commands. Progress is not reported to the standard error\nstream.	https://git-scm.com/docs/fetch.html
git-fetch -v	A										Be verbose.	https://git-scm.com/docs/fetch.html
git-fetch --verbose	A										Be verbose.	https://git-scm.com/docs/fetch.html
git-fetch --progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.	https://git-scm.com/docs/fetch.html
git-fetch -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/fetch.html
git-fetch --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/fetch.html
git-fetch -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/fetch.html
git-fetch --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/fetch.html
git-fetch <repository>	A										The "remote" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below).	https://git-scm.com/docs/fetch.html
git-fetch <group>	A										A name referring to a list of repositories as the value\nof remotes.<group> in the configuration file.\n(See git-config[1]).	https://git-scm.com/docs/fetch.html
git-fetch <refspec>	A										Specifies which refs to fetch and which local refs to update.\nWhen no <refspec>s appear on the command line, the refs to fetch\nare read from remote.<repository>.fetch variables instead\n(see CONFIGURED REMOTE-TRACKING BRANCHES below).	https://git-scm.com/docs/fetch.html
git-fetch	A										Download objects and refs from another repository
<pre><code>git fetch [<options>] [<repository> [<refspec>…​]]\ngit fetch [<options>] <group>\ngit fetch --multiple [<options>] [(<repository> | <group>)…​]\ngit fetch --all [<options>]</pre></code>	https://git-scm.com/docs/fetch.html
git-filter-branch --env-filter <command>	A										This filter may be used if you only need to modify the environment\nin which the commit will be performed.  Specifically, you might\nwant to rewrite the author/committer name/email/time environment\nvariables (see git-commit-tree[1] for details).  Do not forget\nto re-export the variables.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --tree-filter <command>	A										This is the filter for rewriting the tree and its contents.\nThe argument is evaluated in shell with the working\ndirectory set to the root of the checked out tree.  The new tree\nis then used as-is (new files are auto-added, disappeared files\nare auto-removed - neither .gitignore files nor any other ignore\nrules HAVE ANY EFFECT!).	https://git-scm.com/docs/filter-branch.html
git-filter-branch --index-filter <command>	A										This is the filter for rewriting the index.  It is similar to the\ntree filter but does not check out the tree, which makes it much\nfaster.  Frequently used with git rm --cached\n--ignore-unmatch ..., see EXAMPLES below.  For hairy\ncases, see git-update-index[1].	https://git-scm.com/docs/filter-branch.html
git-filter-branch --parent-filter <command>	A										This is the filter for rewriting the commit’s parent list.\nIt will receive the parent string on stdin and shall output\nthe new parent string on stdout.  The parent string is in\nthe format described in git-commit-tree[1]: empty for\nthe initial commit, "-p parent" for a normal commit and\n"-p parent1 -p parent2 -p parent3 …​" for a merge commit.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --msg-filter <command>	A										This is the filter for rewriting the commit messages.\nThe argument is evaluated in the shell with the original\ncommit message on standard input; its standard output is\nused as the new commit message.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --commit-filter <command>	A										This is the filter for performing the commit.\nIf this filter is specified, it will be called instead of the\ngit commit-tree command, with arguments of the form\n"<TREE_ID> [(-p <PARENT_COMMIT_ID>)…​]" and the log message on\nstdin.  The commit id is expected on stdout.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --tag-name-filter <command>	A										This is the filter for rewriting tag names. When passed,\nit will be called for every tag ref that points to a rewritten\nobject (or to a tag object which points to a rewritten object).\nThe original tag name is passed via standard input, and the new\ntag name is expected on standard output.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --subdirectory-filter <directory>	A										Only look at the history which touches the given subdirectory.\nThe result will contain that directory (and only that) as its\nproject root. Implies Remap to ancestor.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --prune-empty	A										Some kind of filters will generate empty commits, that left the tree\nuntouched.  This switch allow git-filter-branch to ignore such\ncommits.  Though, this switch only applies for commits that have one\nand only one parent, it will hence keep merges points. Also, this\noption is not compatible with the use of --commit-filter. Though you\njust need to use the function git_commit_non_empty_tree "$@" instead\nof the git commit-tree "$@" idiom in your commit filter to make that\nhappen.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --original <namespace>	A										Use this option to set the namespace where the original commits\nwill be stored. The default value is refs/original.	https://git-scm.com/docs/filter-branch.html
git-filter-branch -d <directory>	A										Use this option to set the path to the temporary directory used for\nrewriting.  When applying a tree filter, the command needs to\ntemporarily check out the tree to some directory, which may consume\nconsiderable space in case of large projects.  By default it\ndoes this in the .git-rewrite/ directory but you can override\nthat choice by this parameter.	https://git-scm.com/docs/filter-branch.html
git-filter-branch -f	A										git filter-branch refuses to start with an existing temporary\ndirectory or when there are already refs starting with\nrefs/original/, unless forced.	https://git-scm.com/docs/filter-branch.html
git-filter-branch --force	A										git filter-branch refuses to start with an existing temporary\ndirectory or when there are already refs starting with\nrefs/original/, unless forced.	https://git-scm.com/docs/filter-branch.html
git-filter-branch <rev-list options>…​	A										Arguments for git rev-list.  All positive refs included by\nthese options are rewritten.  You may also specify options\nsuch as --all, but you must use -- to separate them from\nthe git filter-branch options. Implies Remap to ancestor.	https://git-scm.com/docs/filter-branch.html
git-filter-branch	A										Rewrite branches
<pre><code>git filter-branch [--env-filter <command>] [--tree-filter <command>]\n    [--index-filter <command>] [--parent-filter <command>]\n    [--msg-filter <command>] [--commit-filter <command>]\n    [--tag-name-filter <command>] [--subdirectory-filter <directory>]\n    [--prune-empty]\n    [--original <namespace>] [-d <directory>] [-f | --force]\n    [--] [<rev-list options>…​]</pre></code>	https://git-scm.com/docs/filter-branch.html
git-for-each-ref <count>	A										By default the command shows all refs that match\n<pattern>.  This option makes it stop after showing\nthat many refs.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <key>	A										A field name to sort on.  Prefix - to sort in\ndescending order of the value.  When unspecified,\nrefname is used.  You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <format>	A										A string that interpolates %(fieldname) from the\nobject pointed at by a ref being shown.  If fieldname\nis prefixed with an asterisk (*) and the ref points\nat a tag object, the value for the field in the object\ntag refers is used.  When unspecified, defaults to\n%(objectname) SPC %(objecttype) TAB %(refname).\nIt also interpolates %% to %, and %xx where xx\nare hex digits interpolates to character with hex code\nxx; for example %00 interpolates to \0 (NUL),\n%09 to \t (TAB) and %0a to \n (LF).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref <pattern>…​	A										If one or more patterns are given, only refs are shown that\nmatch against at least one pattern, either using fnmatch(3) or\nliterally, in the latter case matching completely or from the\nbeginning up to a slash.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --shell	A										If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --perl	A										If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --python	A										If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --tcl	A										If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --points-at <object>	A										Only list refs which points at the given object.	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --merged [<object>]	A										Only list refs whose tips are reachable from the\nspecified commit (HEAD if not specified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --no-merged [<object>]	A										Only list refs whose tips are not reachable from the\nspecified commit (HEAD if not specified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref --contains [<object>]	A										Only list refs which contain the specified commit (HEAD if not\nspecified).	https://git-scm.com/docs/for-each-ref.html
git-for-each-ref	A										Output information on each ref
<pre><code>git for-each-ref [--count=<count>] [--shell|--perl|--python|--tcl]\n           [(--sort=<key>)…​] [--format=<format>] [<pattern>…​]\n           [--points-at <object>] [(--merged | --no-merged) [<object>]]\n           [--contains [<object>]]</pre></code>	https://git-scm.com/docs/for-each-ref.html
git-format-patch -p	A										Generate plain patches without any diffstats.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-stat	A										Generate plain patches without any diffstats.	https://git-scm.com/docs/format-patch.html
git-format-patch -U<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.	https://git-scm.com/docs/format-patch.html
git-format-patch --unified=<n>	A										Generate diffs with <n> lines of context instead of\nthe usual three.	https://git-scm.com/docs/format-patch.html
git-format-patch --compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-compaction-heuristic	A										These are to help debugging and tuning an experimental\nheuristic (which is off by default) that shifts the hunk\nboundary in an attempt to make the resulting patch easier\nto read.	https://git-scm.com/docs/format-patch.html
git-format-patch --minimal	A										Spend extra time to make sure the smallest possible\ndiff is produced.	https://git-scm.com/docs/format-patch.html
git-format-patch --patience	A										Generate a diff using the "patience diff" algorithm.	https://git-scm.com/docs/format-patch.html
git-format-patch --histogram	A										Generate a diff using the "histogram diff" algorithm.	https://git-scm.com/docs/format-patch.html
git-format-patch --diff-algorithm={patience|minimal|histogram|myers}	A										Choose a diff algorithm. The variants are as follows:	https://git-scm.com/docs/format-patch.html
git-format-patch default, myers	A										The basic greedy diff algorithm. Currently, this is the default.	https://git-scm.com/docs/format-patch.html
git-format-patch minimal	A										Spend extra time to make sure the smallest possible diff is\nproduced.	https://git-scm.com/docs/format-patch.html
git-format-patch patience	A										Use "patience diff" algorithm when generating patches.	https://git-scm.com/docs/format-patch.html
git-format-patch histogram	A										This algorithm extends the patience algorithm to "support\nlow-occurrence common elements".	https://git-scm.com/docs/format-patch.html
git-format-patch --stat[=<width>[,<name-width>[,<count>]]]	A										Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.	https://git-scm.com/docs/format-patch.html
git-format-patch --numstat	A										Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0.	https://git-scm.com/docs/format-patch.html
git-format-patch --shortstat	A										Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines.	https://git-scm.com/docs/format-patch.html
git-format-patch --dirstat[=<param1,param2,…​>]	A										Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:	https://git-scm.com/docs/format-patch.html
git-format-patch changes	A										Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.	https://git-scm.com/docs/format-patch.html
git-format-patch lines	A										Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.	https://git-scm.com/docs/format-patch.html
git-format-patch files	A										Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.	https://git-scm.com/docs/format-patch.html
git-format-patch cumulative	A										Count changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.	https://git-scm.com/docs/format-patch.html
git-format-patch <limit>	A										An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.	https://git-scm.com/docs/format-patch.html
git-format-patch --summary	A										Output a condensed summary of extended header information\nsuch as creations, renames and mode changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-renames	A										Turn off rename detection, even when the configuration\nfile gives the default to do so.	https://git-scm.com/docs/format-patch.html
git-format-patch --full-index	A										Instead of the first handful of characters, show the full\npre- and post-image blob object names on the "index"\nline when generating patch format output.	https://git-scm.com/docs/format-patch.html
git-format-patch --binary	A										In addition to --full-index, output a binary diff that\ncan be applied with git-apply.	https://git-scm.com/docs/format-patch.html
git-format-patch --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show only a partial prefix.  This is\nindependent of the --full-index option above, which controls\nthe diff-patch output format.  Non default number of\ndigits can be specified with --abbrev=<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch -B[<n>][/<m>]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/format-patch.html
git-format-patch --break-rewrites[=[<n>][/<m>]]	A										Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:	https://git-scm.com/docs/format-patch.html
git-format-patch -M[<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-renames[=<n>]	A										Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%.	https://git-scm.com/docs/format-patch.html
git-format-patch -C[<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-copies[=<n>]	A										Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>.	https://git-scm.com/docs/format-patch.html
git-format-patch --find-copies-harder	A										For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect.	https://git-scm.com/docs/format-patch.html
git-format-patch -D	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/format-patch.html
git-format-patch --irreversible-delete	A										Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lack\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.	https://git-scm.com/docs/format-patch.html
git-format-patch -l<num>	A										The -M and -C options require O(n^2) processing time where n\nis the number of potential rename/copy targets.  This\noption prevents rename/copy detection from running if\nthe number of rename/copy targets exceeds the specified\nnumber.	https://git-scm.com/docs/format-patch.html
git-format-patch -O<orderfile>	A										Output the patch in the order specified in the\n<orderfile>, which has one shell glob pattern per line.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.	https://git-scm.com/docs/format-patch.html
git-format-patch -a	A										Treat all files as text.	https://git-scm.com/docs/format-patch.html
git-format-patch --text	A										Treat all files as text.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-space-at-eol	A										Ignore changes in whitespace at EOL.	https://git-scm.com/docs/format-patch.html
git-format-patch -b	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-space-change	A										Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.	https://git-scm.com/docs/format-patch.html
git-format-patch -w	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-all-space	A										Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-blank-lines	A										Ignore changes whose lines are all blank.	https://git-scm.com/docs/format-patch.html
git-format-patch --inter-hunk-context=<lines>	A										Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.	https://git-scm.com/docs/format-patch.html
git-format-patch -W	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --function-context	A										Show whole surrounding functions of changes.	https://git-scm.com/docs/format-patch.html
git-format-patch --ext-diff	A										Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-ext-diff	A										Disallow external diff drivers.	https://git-scm.com/docs/format-patch.html
git-format-patch --textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-textconv	A										Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-submodules[=<when>]	A										Ignore changes to submodules in the diff generation. <when> can be\neither "none", "untracked", "dirty" or "all", which is the default.\nUsing "none" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n"untracked" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using "dirty" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using "all" hides all changes to submodules.	https://git-scm.com/docs/format-patch.html
git-format-patch --src-prefix=<prefix>	A										Show the given source prefix instead of "a/".	https://git-scm.com/docs/format-patch.html
git-format-patch --dst-prefix=<prefix>	A										Show the given destination prefix instead of "b/".	https://git-scm.com/docs/format-patch.html
git-format-patch --no-prefix	A										Do not show any source or destination prefix.	https://git-scm.com/docs/format-patch.html
git-format-patch -<n>	A										Prepare patches from the topmost <n> commits.	https://git-scm.com/docs/format-patch.html
git-format-patch -o <dir>	A										Use <dir> to store the resulting files, instead of the\ncurrent working directory.	https://git-scm.com/docs/format-patch.html
git-format-patch --output-directory <dir>	A										Use <dir> to store the resulting files, instead of the\ncurrent working directory.	https://git-scm.com/docs/format-patch.html
git-format-patch -n	A										Name output in [PATCH n/m] format, even with a single patch.	https://git-scm.com/docs/format-patch.html
git-format-patch --numbered	A										Name output in [PATCH n/m] format, even with a single patch.	https://git-scm.com/docs/format-patch.html
git-format-patch -N	A										Name output in [PATCH] format.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-numbered	A										Name output in [PATCH] format.	https://git-scm.com/docs/format-patch.html
git-format-patch --start-number <n>	A										Start numbering the patches at <n> instead of 1.	https://git-scm.com/docs/format-patch.html
git-format-patch --numbered-files	A										Output file names will be a simple number sequence\nwithout the default first line of the commit appended.	https://git-scm.com/docs/format-patch.html
git-format-patch -k	A										Do not strip/add [PATCH] from the first line of the\ncommit log message.	https://git-scm.com/docs/format-patch.html
git-format-patch --keep-subject	A										Do not strip/add [PATCH] from the first line of the\ncommit log message.	https://git-scm.com/docs/format-patch.html
git-format-patch -s	A										Add Signed-off-by: line to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/format-patch.html
git-format-patch --signoff	A										Add Signed-off-by: line to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/format-patch.html
git-format-patch --stdout	A										Print all commits to the standard output in mbox format,\ninstead of creating a file for each one.	https://git-scm.com/docs/format-patch.html
git-format-patch --attach[=<boundary>]	A										Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: attachment.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-attach	A										Disable the creation of an attachment, overriding the\nconfiguration setting.	https://git-scm.com/docs/format-patch.html
git-format-patch --inline[=<boundary>]	A										Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: inline.	https://git-scm.com/docs/format-patch.html
git-format-patch --thread[=<style>]	A										Controls addition of In-Reply-To and References headers to\nmake the second and subsequent mails appear as replies to the\nfirst.  Also controls generation of the Message-Id header to\nreference.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-thread	A										Controls addition of In-Reply-To and References headers to\nmake the second and subsequent mails appear as replies to the\nfirst.  Also controls generation of the Message-Id header to\nreference.	https://git-scm.com/docs/format-patch.html
git-format-patch --in-reply-to=Message-Id	A										Make the first mail (or all the mails with --no-thread) appear as a\nreply to the given Message-Id, which avoids breaking threads to\nprovide a new patch series.	https://git-scm.com/docs/format-patch.html
git-format-patch --ignore-if-in-upstream	A										Do not include a patch that matches a commit in\n<until>..<since>.  This will examine all patches reachable\nfrom <since> but not from <until> and compare them with the\npatches being generated, and any patch that matches is\nignored.	https://git-scm.com/docs/format-patch.html
git-format-patch --subject-prefix=<Subject-Prefix>	A										Instead of the standard [PATCH] prefix in the subject\nline, instead use [<Subject-Prefix>]. This\nallows for useful naming of a patch series, and can be\ncombined with the --numbered option.	https://git-scm.com/docs/format-patch.html
git-format-patch -v <n>	A										Mark the series as the <n>-th iteration of the topic. The\noutput filenames have v<n> prepended to them, and the\nsubject prefix ("PATCH" by default, but configurable via the\n--subject-prefix option) has ` v<n>` appended to it.  E.g.\n--reroll-count=4 may produce v4-0001-add-makefile.patch\nfile that has "Subject: [PATCH v4 1/20] Add makefile" in it.	https://git-scm.com/docs/format-patch.html
git-format-patch --reroll-count=<n>	A										Mark the series as the <n>-th iteration of the topic. The\noutput filenames have v<n> prepended to them, and the\nsubject prefix ("PATCH" by default, but configurable via the\n--subject-prefix option) has ` v<n>` appended to it.  E.g.\n--reroll-count=4 may produce v4-0001-add-makefile.patch\nfile that has "Subject: [PATCH v4 1/20] Add makefile" in it.	https://git-scm.com/docs/format-patch.html
git-format-patch --to=<email>	A										Add a To: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-to discards all To: headers added so\nfar (from config or command line).	https://git-scm.com/docs/format-patch.html
git-format-patch --cc=<email>	A										Add a Cc: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-cc discards all Cc: headers added so\nfar (from config or command line).	https://git-scm.com/docs/format-patch.html
git-format-patch --from	A										Use ident in the From: header of each commit email. If the\nauthor ident of the commit is not textually identical to the\nprovided ident, place a From: header in the body of the\nmessage with the original author. If no ident is given, use\nthe committer ident.	https://git-scm.com/docs/format-patch.html
git-format-patch --from=<ident>	A										Use ident in the From: header of each commit email. If the\nauthor ident of the commit is not textually identical to the\nprovided ident, place a From: header in the body of the\nmessage with the original author. If no ident is given, use\nthe committer ident.	https://git-scm.com/docs/format-patch.html
git-format-patch --add-header=<header>	A										Add an arbitrary header to the email headers.  This is in addition\nto any configured headers, and may be used multiple times.\nFor example, --add-header="Organization: git-foo".\nThe negated form --no-add-header discards all (To:,\nCc:, and custom) headers added so far from config or command\nline.	https://git-scm.com/docs/format-patch.html
git-format-patch --[no-]cover-letter	A										In addition to the patches, generate a cover letter file\ncontaining the branch description, shortlog and the overall diffstat.  You can\nfill in a description in the file before sending it out.	https://git-scm.com/docs/format-patch.html
git-format-patch --notes[=<ref>]	A										Append the notes (see git-notes[1]) for the commit\nafter the three-dash line.	https://git-scm.com/docs/format-patch.html
git-format-patch --[no]-signature=<signature>	A										Add a signature to each message produced. Per RFC 3676 the signature\nis separated from the body by a line with '-- ' on it. If the\nsignature option is omitted the signature defaults to the Git version\nnumber.	https://git-scm.com/docs/format-patch.html
git-format-patch --signature-file=<file>	A										Works just like --signature except the signature is read from a file.	https://git-scm.com/docs/format-patch.html
git-format-patch --suffix=.<sfx>	A										Instead of using .patch as the suffix for generated\nfilenames, use specified suffix.  A common alternative is\n--suffix=.txt.  Leaving this empty will remove the .patch\nsuffix.	https://git-scm.com/docs/format-patch.html
git-format-patch -q	A										Do not print the names of the generated files to standard output.	https://git-scm.com/docs/format-patch.html
git-format-patch --quiet	A										Do not print the names of the generated files to standard output.	https://git-scm.com/docs/format-patch.html
git-format-patch --no-binary	A										Do not output contents of changes in binary files, instead\ndisplay a notice that those files changed.  Patches generated\nusing this option cannot be applied properly, but they are\nstill useful for code review.	https://git-scm.com/docs/format-patch.html
git-format-patch --zero-commit	A										Output an all-zero hash in each patch’s From header instead\nof the hash of the commit.	https://git-scm.com/docs/format-patch.html
git-format-patch --base=<commit>	A										Record the base tree information to identify the state the\npatch series applies to.  See the BASE TREE INFORMATION section\nbelow for details.	https://git-scm.com/docs/format-patch.html
git-format-patch --root	A										Treat the revision argument as a <revision range>, even if it\nis just a single commit (that would normally be treated as a\n<since>).  Note that root commits included in the specified\nrange are always formatted as creation patches, independently\nof this flag.	https://git-scm.com/docs/format-patch.html
git-format-patch	A										Prepare patches for e-mail submission
<pre><code>git format-patch [-k] [(-o|--output-directory) <dir> | --stdout]\n           [--no-thread | --thread[=<style>]]\n           [(--attach|--inline)[=<boundary>] | --no-attach]\n           [-s | --signoff]\n           [--signature=<signature> | --no-signature]\n           [--signature-file=<file>]\n           [-n | --numbered | -N | --no-numbered]\n           [--start-number <n>] [--numbered-files]\n           [--in-reply-to=Message-Id] [--suffix=.<sfx>]\n           [--ignore-if-in-upstream]\n           [--subject-prefix=Subject-Prefix] [(--reroll-count|-v) <n>]\n           [--to=<email>] [--cc=<email>]\n           [--[no-]cover-letter] [--quiet] [--notes[=<ref>]]\n           [<common diff options>]\n           [ <since> | <revision range> ]</pre></code>	https://git-scm.com/docs/format-patch.html
git-fsck <object>	A										An object to treat as the head of an unreachability trace.	https://git-scm.com/docs/fsck.html
git-fsck --unreachable	A										Print out objects that exist but that aren’t reachable from any\nof the reference nodes.	https://git-scm.com/docs/fsck.html
git-fsck --[no-]dangling	A										Print objects that exist but that are never directly used (default).\n--no-dangling can be used to omit this information from the output.	https://git-scm.com/docs/fsck.html
git-fsck --root	A										Report root nodes.	https://git-scm.com/docs/fsck.html
git-fsck --tags	A										Report tags.	https://git-scm.com/docs/fsck.html
git-fsck --cache	A										Consider any object recorded in the index also as a head node for\nan unreachability trace.	https://git-scm.com/docs/fsck.html
git-fsck --no-reflogs	A										Do not consider commits that are referenced only by an\nentry in a reflog to be reachable.  This option is meant\nonly to search for commits that used to be in a ref, but\nnow aren’t, but are still in that corresponding reflog.	https://git-scm.com/docs/fsck.html
git-fsck --full	A										Check not just objects in GIT_OBJECT_DIRECTORY\n($GIT_DIR/objects), but also the ones found in alternate\nobject pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES\nor $GIT_DIR/objects/info/alternates,\nand in packed Git archives found in $GIT_DIR/objects/pack\nand corresponding pack subdirectories in alternate\nobject pools.  This is now default; you can turn it off\nwith --no-full.	https://git-scm.com/docs/fsck.html
git-fsck --connectivity-only	A										Check only the connectivity of tags, commits and tree objects. By\navoiding to unpack blobs, this speeds up the operation, at the\nexpense of missing corrupt objects or other problematic issues.	https://git-scm.com/docs/fsck.html
git-fsck --strict	A										Enable more strict checking, namely to catch a file mode\nrecorded with g+w bit set, which was created by older\nversions of Git.  Existing repositories, including the\nLinux kernel, Git itself, and sparse repository have old\nobjects that triggers this check, but it is recommended\nto check new projects with this flag.	https://git-scm.com/docs/fsck.html
git-fsck --verbose	A										Be chatty.	https://git-scm.com/docs/fsck.html
git-fsck --lost-found	A										Write dangling objects into .git/lost-found/commit/ or\n.git/lost-found/other/, depending on type.  If the object is\na blob, the contents are written into the file, rather than\nits object name.	https://git-scm.com/docs/fsck.html
git-fsck --name-objects	A										When displaying names of reachable objects, in addition to the\nSHA-1 also display a name that describes how they are reachable,\ncompatible with git-rev-parse[1], e.g.\nHEAD@{1234567890}~25^2:src/.	https://git-scm.com/docs/fsck.html
git-fsck --[no-]progress	A										Progress status is reported on the standard error stream by\ndefault when it is attached to a terminal, unless\n--no-progress or --verbose is specified. --progress forces\nprogress status even if the standard error stream is not\ndirected to a terminal.	https://git-scm.com/docs/fsck.html
git-fsck	A										Verifies the connectivity and validity of the objects in the database
<pre><code>git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n     [--[no-]full] [--strict] [--verbose] [--lost-found]\n     [--[no-]dangling] [--[no-]progress] [--connectivity-only]\n     [--[no-]name-objects] [<object>*]</pre></code>	https://git-scm.com/docs/fsck.html
git-gc --aggressive	A										Usually git gc runs very quickly while providing good disk\nspace utilization and performance.  This option will cause\ngit gc to more aggressively optimize the repository at the expense\nof taking much more time.  The effects of this optimization are\npersistent, so this option only needs to be used occasionally; every\nfew hundred changesets or so.	https://git-scm.com/docs/gc.html
git-gc --auto	A										With this option, git gc checks whether any housekeeping is\nrequired; if not, it exits without performing any work.\nSome git commands run git gc --auto after performing\noperations that could create many loose objects.	https://git-scm.com/docs/gc.html
git-gc --prune=<date>	A										Prune loose objects older than date (default is 2 weeks ago,\noverridable by the config variable gc.pruneExpire).\n--prune=all prunes loose objects regardless of their age (do\nnot use --prune=all unless you know exactly what you are doing.\nUnless the repository is quiescent, you will lose newly created\nobjects that haven’t been anchored with the refs and end up\ncorrupting your repository).  --prune is on by default.	https://git-scm.com/docs/gc.html
git-gc --no-prune	A										Do not prune any loose objects.	https://git-scm.com/docs/gc.html
git-gc --quiet	A										Suppress all progress reports.	https://git-scm.com/docs/gc.html
git-gc --force	A										Force git gc to run even if there may be another git gc\ninstance running on this repository.	https://git-scm.com/docs/gc.html
git-gc	A										Cleanup unnecessary files and optimize the local repository
<pre><code>git gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force]</pre></code>	https://git-scm.com/docs/gc.html
git-grep --cached	A										Instead of searching tracked files in the working tree, search\nblobs registered in the index file.	https://git-scm.com/docs/grep.html
git-grep --no-index	A										Search files in the current directory that is not managed by Git.	https://git-scm.com/docs/grep.html
git-grep --untracked	A										In addition to searching in the tracked files in the working\ntree, search also in untracked files.	https://git-scm.com/docs/grep.html
git-grep --no-exclude-standard	A										Also search in ignored files by not honoring the .gitignore\nmechanism. Only useful with --untracked.	https://git-scm.com/docs/grep.html
git-grep --exclude-standard	A										Do not pay attention to ignored files specified via the    .gitignore\nmechanism.  Only useful when searching files in the current directory\nwith --no-index.	https://git-scm.com/docs/grep.html
git-grep -a	A										Process binary files as if they were text.	https://git-scm.com/docs/grep.html
git-grep --text	A										Process binary files as if they were text.	https://git-scm.com/docs/grep.html
git-grep --textconv	A										Honor textconv filter settings.	https://git-scm.com/docs/grep.html
git-grep --no-textconv	A										Do not honor textconv filter settings.\nThis is the default.	https://git-scm.com/docs/grep.html
git-grep -i	A										Ignore case differences between the patterns and the\nfiles.	https://git-scm.com/docs/grep.html
git-grep --ignore-case	A										Ignore case differences between the patterns and the\nfiles.	https://git-scm.com/docs/grep.html
git-grep -I	A										Don’t match the pattern in binary files.	https://git-scm.com/docs/grep.html
git-grep --max-depth <depth>	A										For each <pathspec> given on command line, descend at most <depth>\nlevels of directories. A negative value means no limit.\nThis option is ignored if <pathspec> contains active wildcards.\nIn other words if "a*" matches a directory named "a*",\n"*" is matched literally so --max-depth is still effective.	https://git-scm.com/docs/grep.html
git-grep -w	A										Match the pattern only at word boundary (either begin at the\nbeginning of a line, or preceded by a non-word character; end at\nthe end of a line or followed by a non-word character).	https://git-scm.com/docs/grep.html
git-grep --word-regexp	A										Match the pattern only at word boundary (either begin at the\nbeginning of a line, or preceded by a non-word character; end at\nthe end of a line or followed by a non-word character).	https://git-scm.com/docs/grep.html
git-grep -v	A										Select non-matching lines.	https://git-scm.com/docs/grep.html
git-grep --invert-match	A										Select non-matching lines.	https://git-scm.com/docs/grep.html
git-grep -h	A										By default, the command shows the filename for each\nmatch.  -h option is used to suppress this output.\n-H is there for completeness and does not do anything\nexcept it overrides -h given earlier on the command\nline.	https://git-scm.com/docs/grep.html
git-grep -H	A										By default, the command shows the filename for each\nmatch.  -h option is used to suppress this output.\n-H is there for completeness and does not do anything\nexcept it overrides -h given earlier on the command\nline.	https://git-scm.com/docs/grep.html
git-grep --full-name	A										When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory.	https://git-scm.com/docs/grep.html
git-grep -E	A										Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep --extended-regexp	A										Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep -G	A										Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep --basic-regexp	A										Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp.	https://git-scm.com/docs/grep.html
git-grep -P	A										Use Perl-compatible regexp for patterns. Requires libpcre to be\ncompiled in.	https://git-scm.com/docs/grep.html
git-grep --perl-regexp	A										Use Perl-compatible regexp for patterns. Requires libpcre to be\ncompiled in.	https://git-scm.com/docs/grep.html
git-grep -F	A										Use fixed strings for patterns (don’t interpret pattern\nas a regex).	https://git-scm.com/docs/grep.html
git-grep --fixed-strings	A										Use fixed strings for patterns (don’t interpret pattern\nas a regex).	https://git-scm.com/docs/grep.html
git-grep -n	A										Prefix the line number to matching lines.	https://git-scm.com/docs/grep.html
git-grep --line-number	A										Prefix the line number to matching lines.	https://git-scm.com/docs/grep.html
git-grep -l	A										Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --files-with-matches	A										Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --name-only	A										Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep -L	A										Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep --files-without-match	A										Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches.	https://git-scm.com/docs/grep.html
git-grep -O[<pager>]	A										Open the matching files in the pager (not the output of grep).\nIf the pager happens to be "less" or "vi", and the user\nspecified only one pattern, the first file is positioned at\nthe first match automatically. The pager argument is\noptional; if specified, it must be stuck to the option\nwithout a space. If pager is unspecified, the default pager\nwill be used (see core.pager in git-config[1]).	https://git-scm.com/docs/grep.html
git-grep --open-files-in-pager[=<pager>]	A										Open the matching files in the pager (not the output of grep).\nIf the pager happens to be "less" or "vi", and the user\nspecified only one pattern, the first file is positioned at\nthe first match automatically. The pager argument is\noptional; if specified, it must be stuck to the option\nwithout a space. If pager is unspecified, the default pager\nwill be used (see core.pager in git-config[1]).	https://git-scm.com/docs/grep.html
git-grep -z	A										Output \0 instead of the character that normally follows a\nfile name.	https://git-scm.com/docs/grep.html
git-grep --null	A										Output \0 instead of the character that normally follows a\nfile name.	https://git-scm.com/docs/grep.html
git-grep -c	A										Instead of showing every matched line, show the number of\nlines that match.	https://git-scm.com/docs/grep.html
git-grep --count	A										Instead of showing every matched line, show the number of\nlines that match.	https://git-scm.com/docs/grep.html
git-grep --color[=<when>]	A										Show colored matches.\nThe value must be always (the default), never, or auto.	https://git-scm.com/docs/grep.html
git-grep --no-color	A										Turn off match highlighting, even when the configuration file\ngives the default to color output.\nSame as --color=never.	https://git-scm.com/docs/grep.html
git-grep --break	A										Print an empty line between matches from different files.	https://git-scm.com/docs/grep.html
git-grep --heading	A										Show the filename above the matches in that file instead of\nat the start of each shown line.	https://git-scm.com/docs/grep.html
git-grep -p	A										Show the preceding line that contains the function name of\nthe match, unless the matching line is a function name itself.\nThe name is determined in the same way as git diff works out\npatch hunk headers (see Defining a custom hunk-header in\ngitattributes[5]).	https://git-scm.com/docs/grep.html
git-grep --show-function	A										Show the preceding line that contains the function name of\nthe match, unless the matching line is a function name itself.\nThe name is determined in the same way as git diff works out\npatch hunk headers (see Defining a custom hunk-header in\ngitattributes[5]).	https://git-scm.com/docs/grep.html
git-grep -<num>	A										Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -C <num>	A										Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --context <num>	A										Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -A <num>	A										Show <num> trailing lines, and place a line containing\n-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --after-context <num>	A										Show <num> trailing lines, and place a line containing\n-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -B <num>	A										Show <num> leading lines, and place a line containing\n-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep --before-context <num>	A										Show <num> leading lines, and place a line containing\n-- between contiguous groups of matches.	https://git-scm.com/docs/grep.html
git-grep -W	A										Show the surrounding text from the previous line containing a\nfunction name up to the one before the next function name,\neffectively showing the whole function in which the match was\nfound.	https://git-scm.com/docs/grep.html
git-grep --function-context	A										Show the surrounding text from the previous line containing a\nfunction name up to the one before the next function name,\neffectively showing the whole function in which the match was\nfound.	https://git-scm.com/docs/grep.html
git-grep --threads <num>	A										Number of grep worker threads to use.\nSee grep.threads in CONFIGURATION for more information.	https://git-scm.com/docs/grep.html
git-grep -f <file>	A										Read patterns from <file>, one per line.	https://git-scm.com/docs/grep.html
git-grep -e	A										The next parameter is the pattern. This option has to be\nused for patterns starting with - and should be used in\nscripts passing user input to grep.  Multiple patterns are\ncombined by or.	https://git-scm.com/docs/grep.html
git-grep --and	A										Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns.	https://git-scm.com/docs/grep.html
git-grep --or	A										Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns.	https://git-scm.com/docs/grep.html
git-grep --not	A										Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns.	https://git-scm.com/docs/grep.html
git-grep ( …​ )	A										Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns.	https://git-scm.com/docs/grep.html
git-grep --all-match	A										When giving multiple pattern expressions combined with --or,\nthis flag is specified to limit the match to files that\nhave lines to match all of them.	https://git-scm.com/docs/grep.html
git-grep -q	A										Do not output matched lines; instead, exit with status 0 when\nthere is a match and with non-zero status when there isn’t.	https://git-scm.com/docs/grep.html
git-grep --quiet	A										Do not output matched lines; instead, exit with status 0 when\nthere is a match and with non-zero status when there isn’t.	https://git-scm.com/docs/grep.html
git-grep <tree>…​	A										Instead of searching tracked files in the working tree, search\nblobs in the given trees.	https://git-scm.com/docs/grep.html
git-grep --	A										Signals the end of options; the rest of the parameters\nare <pathspec> limiters.	https://git-scm.com/docs/grep.html
git-grep <pathspec>…​	A										If given, limit the search to paths matching at least one pattern.\nBoth leading paths match and glob(7) patterns are supported.	https://git-scm.com/docs/grep.html
git-grep	A										Print lines matching a pattern
<pre><code>git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n       [-v | --invert-match] [-h|-H] [--full-name]\n       [-E | --extended-regexp] [-G | --basic-regexp]\n       [-P | --perl-regexp]\n       [-F | --fixed-strings] [-n | --line-number]\n       [-l | --files-with-matches] [-L | --files-without-match]\n       [(-O | --open-files-in-pager) [<pager>]]\n       [-z | --null]\n       [-c | --count] [--all-match] [-q | --quiet]\n       [--max-depth <depth>]\n       [--color[=<when>] | --no-color]\n       [--break] [--heading] [-p | --show-function]\n       [-A <post-context>] [-B <pre-context>] [-C <context>]\n       [-W | --function-context]\n       [--threads <num>]\n       [-f <file>] [-e] <pattern>\n       [--and|--or|--not|(|)|-e <pattern>…​]\n       [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>…​]\n       [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/grep.html
git-hash-object -t <type>	A										Specify the type (default: "blob").	https://git-scm.com/docs/hash-object.html
git-hash-object -w	A										Actually write the object into the object database.	https://git-scm.com/docs/hash-object.html
git-hash-object --stdin	A										Read the object from standard input instead of from a file.	https://git-scm.com/docs/hash-object.html
git-hash-object --stdin-paths	A										Read file names from the standard input, one per line, instead\nof from the command-line.	https://git-scm.com/docs/hash-object.html
git-hash-object --path	A										Hash object as it were located at the given path. The location of\nfile does not directly influence on the hash value, but path is\nused to determine what Git filters should be applied to the object\nbefore it can be placed to the object database, and, as result of\napplying filters, the actual blob put into the object database may\ndiffer from the given file. This option is mainly useful for hashing\ntemporary files located outside of the working directory or files\nread from stdin.	https://git-scm.com/docs/hash-object.html
git-hash-object --no-filters	A										Hash the contents as is, ignoring any input filter that would\nhave been chosen by the attributes mechanism, including the end-of-line\nconversion. If the file is read from standard input then this\nis always implied, unless the --path option is given.	https://git-scm.com/docs/hash-object.html
git-hash-object --literally	A										Allow --stdin to hash any garbage into a loose object which might not\notherwise pass standard object parsing or git-fsck checks. Useful for\nstress-testing Git itself or reproducing characteristics of corrupt or\nbogus objects encountered in the wild.	https://git-scm.com/docs/hash-object.html
git-hash-object	A										Compute object ID and optionally creates a blob from a file
<pre><code>git hash-object [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>…​\ngit hash-object [-t <type>] [-w] --stdin-paths [--no-filters]</pre></code>	https://git-scm.com/docs/hash-object.html
git-help -a	A										Prints all the available commands on the standard output. This\noption overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help --all	A										Prints all the available commands on the standard output. This\noption overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help -g	A										Prints a list of useful guides on the standard output. This\noption overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help --guides	A										Prints a list of useful guides on the standard output. This\noption overrides any given command or guide name.	https://git-scm.com/docs/help.html
git-help -i	A										Display manual page for the command in the info format. The\ninfo program will be used for that purpose.	https://git-scm.com/docs/help.html
git-help --info	A										Display manual page for the command in the info format. The\ninfo program will be used for that purpose.	https://git-scm.com/docs/help.html
git-help -m	A										Display manual page for the command in the man format. This\noption may be used to override a value set in the\nhelp.format configuration variable.	https://git-scm.com/docs/help.html
git-help --man	A										Display manual page for the command in the man format. This\noption may be used to override a value set in the\nhelp.format configuration variable.	https://git-scm.com/docs/help.html
git-help -w	A										Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose.	https://git-scm.com/docs/help.html
git-help --web	A										Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose.	https://git-scm.com/docs/help.html
git-help	A										Display help information about Git
<pre><code>git help [-a|--all] [-g|--guide]\n       [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]</pre></code>	https://git-scm.com/docs/help.html
git-init -q	A										Only print error and warning messages; all other output will be suppressed.	https://git-scm.com/docs/init.html
git-init --quiet	A										Only print error and warning messages; all other output will be suppressed.	https://git-scm.com/docs/init.html
git-init --bare	A										Create a bare repository. If GIT_DIR environment is not set, it is set to the\ncurrent working directory.	https://git-scm.com/docs/init.html
git-init --template=<template_directory>	A										Specify the directory from which templates will be used.  (See the "TEMPLATE\nDIRECTORY" section below.)	https://git-scm.com/docs/init.html
git-init --separate-git-dir=<git dir>	A										Instead of initializing the repository as a directory to either $GIT_DIR or\n./.git/, create a text file there containing the path to the actual\nrepository.  This file acts as filesystem-agnostic Git symbolic link to the\nrepository.	https://git-scm.com/docs/init.html
git-init --shared[=(false|true|umask|group|all|world|everybody|0xxx)]	A										Specify that the Git repository is to be shared amongst several users.  This\nallows users belonging to the same group to push into that\nrepository.  When specified, the config variable "core.sharedRepository" is\nset so that files and directories under $GIT_DIR are created with the\nrequested permissions.  When not specified, Git will use permissions reported\nby umask(2).	https://git-scm.com/docs/init.html
git-init umask (or false)	A										Use permissions reported by umask(2). The default, when --shared is not\nspecified.	https://git-scm.com/docs/init.html
git-init group (or true)	A										Make the repository group-writable, (and g+sx, since the git group may be not\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask(2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022, using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions.	https://git-scm.com/docs/init.html
git-init all (or world or everybody)	A										Same as group, but make the repository readable by all users.	https://git-scm.com/docs/init.html
git-init 0xxx	A										0xxx is an octal number and each file will have mode 0xxx. 0xxx will\noverride users' umask(2) value (and not only loosen permissions as group and\nall does). 0640 will create a repository which is group-readable, but not\ngroup-writable or accessible to others. 0660 will create a repo that is\nreadable and writable to the current user and group, but inaccessible to others.	https://git-scm.com/docs/init.html
git-init	A										Create an empty Git repository or reinitialize an existing one
<pre><code>git init [-q | --quiet] [--bare] [--template=<template_directory>]\n      [--separate-git-dir <git dir>]\n      [--shared[=<permissions>]] [directory]</pre></code>	https://git-scm.com/docs/init.html
git-instaweb -l	A										Only bind the web server to the local IP (127.0.0.1).	https://git-scm.com/docs/instaweb.html
git-instaweb --local	A										Only bind the web server to the local IP (127.0.0.1).	https://git-scm.com/docs/instaweb.html
git-instaweb -d	A										The HTTP daemon command-line that will be executed.\nCommand-line options may be specified here, and the\nconfiguration file will be added at the end of the command-line.\nCurrently apache2, lighttpd, mongoose, plackup and webrick are supported.\n(Default: lighttpd)	https://git-scm.com/docs/instaweb.html
git-instaweb --httpd	A										The HTTP daemon command-line that will be executed.\nCommand-line options may be specified here, and the\nconfiguration file will be added at the end of the command-line.\nCurrently apache2, lighttpd, mongoose, plackup and webrick are supported.\n(Default: lighttpd)	https://git-scm.com/docs/instaweb.html
git-instaweb -m	A										The module path (only needed if httpd is Apache).\n(Default: /usr/lib/apache2/modules)	https://git-scm.com/docs/instaweb.html
git-instaweb --module-path	A										The module path (only needed if httpd is Apache).\n(Default: /usr/lib/apache2/modules)	https://git-scm.com/docs/instaweb.html
git-instaweb -p	A										The port number to bind the httpd to.  (Default: 1234)	https://git-scm.com/docs/instaweb.html
git-instaweb --port	A										The port number to bind the httpd to.  (Default: 1234)	https://git-scm.com/docs/instaweb.html
git-instaweb -b	A										The web browser that should be used to view the gitweb\npage. This will be passed to the git web{litdd}browse helper\nscript along with the URL of the gitweb instance. See\ngit-web{litdd}browse[1] for more information about this. If\nthe script fails, the URL will be printed to stdout.	https://git-scm.com/docs/instaweb.html
git-instaweb --browser	A										The web browser that should be used to view the gitweb\npage. This will be passed to the git web{litdd}browse helper\nscript along with the URL of the gitweb instance. See\ngit-web{litdd}browse[1] for more information about this. If\nthe script fails, the URL will be printed to stdout.	https://git-scm.com/docs/instaweb.html
git-instaweb start	A										Start the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb --start	A										Start the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb stop	A										Stop the httpd instance and exit.  This does not generate\nany of the configuration files for spawning a new instance,\nnor does it close the browser.	https://git-scm.com/docs/instaweb.html
git-instaweb --stop	A										Stop the httpd instance and exit.  This does not generate\nany of the configuration files for spawning a new instance,\nnor does it close the browser.	https://git-scm.com/docs/instaweb.html
git-instaweb restart	A										Restart the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb --restart	A										Restart the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance.	https://git-scm.com/docs/instaweb.html
git-instaweb	A										Instantly browse your working repository in gitweb
<pre><code>git instaweb [--local] [--httpd=<httpd>] [--port=<port>]\n               [--browser=<browser>]\ngit instaweb [--start] [--stop] [--restart]</pre></code>	https://git-scm.com/docs/instaweb.html
git-log --follow	A										Continue listing the history of a file beyond renames\n(works only for a single file).	https://git-scm.com/docs/log.html
git-log --no-decorate	A										Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/, refs/tags/ and\nrefs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The default option is short.	https://git-scm.com/docs/log.html
git-log --decorate[=short|full|auto|no]	A										Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/, refs/tags/ and\nrefs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The default option is short.	https://git-scm.com/docs/log.html
git-log --source	A										Print out the ref name given on the command line by which each\ncommit was reached.	https://git-scm.com/docs/log.html
git-log --use-mailmap	A										Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See\ngit-shortlog[1].	https://git-scm.com/docs/log.html
git-log --full-diff	A										Without this flag, git log -p <path>... shows commits that\ntouch the specified paths, and diffs about the same specified\npaths.  With this, the full diff is shown for commits that touch\nthe specified paths; this means that "<path>…​" limits only\ncommits, and doesn’t limit diff for those commits.	https://git-scm.com/docs/log.html
git-log --log-size	A										Include a line “log size <number>” in the output for each commit,\nwhere <number> is the length of that commit’s message in bytes.\nIntended to speed up tools that read log messages from git log\noutput by allowing them to allocate space in advance.	https://git-scm.com/docs/log.html
git-log -L <start>,<end>:<file>	A										Trace the evolution of the line range given by "<start>,<end>"\n(or the function name regex <funcname>) within the <file>.  You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments.\nYou can specify this option more than once.	https://git-scm.com/docs/log.html
git-log -L :<funcname>:<file>	A										Trace the evolution of the line range given by "<start>,<end>"\n(or the function name regex <funcname>) within the <file>.  You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments.\nYou can specify this option more than once.	https://git-scm.com/docs/log.html
git-log <revision range>	A										Show only commits in the specified revision range.  When no\n<revision range> is specified, it defaults to HEAD (i.e. the\nwhole history leading to the current commit).  origin..HEAD\nspecifies all the commits reachable from the current commit\n(i.e. HEAD), but not from origin. For a complete list of\nways to spell <revision range>, see the Specifying Ranges\nsection of gitrevisions[7].	https://git-scm.com/docs/log.html
git-log [\--] <path>…​	A										Show only commits that are enough to explain how the files\nthat match the specified paths came to be.  See History\nSimplification below for details and other simplification\nmodes.	https://git-scm.com/docs/log.html
git-log -<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log -n <number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log --max-count=<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/log.html
git-log --skip=<number>	A										Skip number commits before starting to show the commit output.	https://git-scm.com/docs/log.html
git-log --since=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/log.html
git-log --after=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/log.html
git-log --until=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/log.html
git-log --before=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/log.html
git-log --author=<pattern>	A										Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/log.html
git-log --committer=<pattern>	A										Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/log.html
git-log --grep-reflog=<pattern>	A										Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog, commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use.	https://git-scm.com/docs/log.html
git-log --grep=<pattern>	A										Limit the commits output to ones with log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern>, commits whose message\nmatches any of the given patterns are chosen (but see\n--all-match).	https://git-scm.com/docs/log.html
git-log --all-match	A										Limit the commits output to ones that match all given --grep,\ninstead of ones that match at least one.	https://git-scm.com/docs/log.html
git-log --invert-grep	A										Limit the commits output to ones with log message that do not\nmatch the pattern specified with --grep=<pattern>.	https://git-scm.com/docs/log.html
git-log -i	A										Match the regular expression limiting patterns without regard to letter\ncase.	https://git-scm.com/docs/log.html
git-log --regexp-ignore-case	A										Match the regular expression limiting patterns without regard to letter\ncase.	https://git-scm.com/docs/log.html
git-log --basic-regexp	A										Consider the limiting patterns to be basic regular expressions;\nthis is the default.	https://git-scm.com/docs/log.html
git-log -E	A										Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions.	https://git-scm.com/docs/log.html
git-log --extended-regexp	A										Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions.	https://git-scm.com/docs/log.html
git-log -F	A										Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression).	https://git-scm.com/docs/log.html
git-log --fixed-strings	A										Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression).	https://git-scm.com/docs/log.html
git-log --perl-regexp	A										Consider the limiting patterns to be Perl-compatible regular expressions.\nRequires libpcre to be compiled in.	https://git-scm.com/docs/log.html
git-log --remove-empty	A										Stop when a given path disappears from the tree.	https://git-scm.com/docs/log.html
git-log --merges	A										Print only merge commits. This is exactly the same as --min-parents=2.	https://git-scm.com/docs/log.html
git-log --no-merges	A										Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1.	https://git-scm.com/docs/log.html
git-log --min-parents=<number>	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --max-parents=<number>	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --no-min-parents	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --no-max-parents	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/log.html
git-log --first-parent	A										Follow only the first parent commit upon seeing a merge\ncommit.  This option can give a better overview when\nviewing the evolution of a particular topic branch,\nbecause merges into a topic branch tend to be only about\nadjusting to updated upstream from time to time, and\nthis option allows you to ignore the individual commits\nbrought in to your history by such a merge. Cannot be\ncombined with --bisect.	https://git-scm.com/docs/log.html
git-log --not	A										Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not.	https://git-scm.com/docs/log.html
git-log --all	A										Pretend as if all the refs in refs/ are listed on the\ncommand line as <commit>.	https://git-scm.com/docs/log.html
git-log --branches[=<pattern>]	A										Pretend as if all the refs in refs/heads are listed\non the command line as <commit>. If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ?,\n*, or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --tags[=<pattern>]	A										Pretend as if all the refs in refs/tags are listed\non the command line as <commit>. If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ?, *,\nor [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --remotes[=<pattern>]	A										Pretend as if all the refs in refs/remotes are listed\non the command line as <commit>. If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ?, *, or [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --glob=<glob-pattern>	A										Pretend as if all the refs matching shell glob <glob-pattern>\nare listed on the command line as <commit>. Leading refs/,\nis automatically prepended if missing. If pattern lacks ?, *,\nor [, /* at the end is implied.	https://git-scm.com/docs/log.html
git-log --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).	https://git-scm.com/docs/log.html
git-log --reflog	A										Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit>.	https://git-scm.com/docs/log.html
git-log --ignore-missing	A										Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given.	https://git-scm.com/docs/log.html
git-log --bisect	A										Pretend as if the bad bisection ref refs/bisect/bad\nwas listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline. Cannot be combined with --first-parent.	https://git-scm.com/docs/log.html
git-log --stdin	A										In addition to the <commit> listed on the command\nline, read them from the standard input. If a -- separator is\nseen, stop reading commits and start reading paths to limit the\nresult.	https://git-scm.com/docs/log.html
git-log --cherry-mark	A										Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with +.	https://git-scm.com/docs/log.html
git-log --cherry-pick	A										Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference.	https://git-scm.com/docs/log.html
git-log --left-only	A										List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.	https://git-scm.com/docs/log.html
git-log --right-only	A										List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.	https://git-scm.com/docs/log.html
git-log --cherry	A										A synonym for --right-only --cherry-mark --no-merges; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with\ngit log --cherry upstream...mybranch, similar to\ngit cherry upstream mybranch.	https://git-scm.com/docs/log.html
git-log -g	A										Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).	https://git-scm.com/docs/log.html
git-log --walk-reflogs	A										Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).	https://git-scm.com/docs/log.html
git-log --merge	A										After a failed merge, show refs that touch files having a\nconflict and don’t exist on all heads to merge.	https://git-scm.com/docs/log.html
git-log --boundary	A										Output excluded boundary commits. Boundary commits are\nprefixed with -.	https://git-scm.com/docs/log.html
git-log <paths>	A										Commits modifying the given <paths> are selected.	https://git-scm.com/docs/log.html
git-log --simplify-by-decoration	A										Commits that are referred by some branch or tag are selected.	https://git-scm.com/docs/log.html
git-log Default mode	A										Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)	https://git-scm.com/docs/log.html
git-log --full-history	A										Same as the default mode, but does not prune some history.	https://git-scm.com/docs/log.html
git-log --dense	A										Only the selected commits are shown, plus some to have a\nmeaningful history.	https://git-scm.com/docs/log.html
git-log --sparse	A										All commits in the simplified history are shown.	https://git-scm.com/docs/log.html
git-log --simplify-merges	A										Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge.	https://git-scm.com/docs/log.html
git-log --ancestry-path	A										When given a range of commits to display (e.g. commit1..commit2\nor commit2 ^commit1), only display commits that exist\ndirectly on the ancestry chain between the commit1 and\ncommit2, i.e. commits that are both descendants of commit1,\nand ancestors of commit2.	https://git-scm.com/docs/log.html
git-log Default mode	A										Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents.	https://git-scm.com/docs/log.html
git-log --full-history without parent rewriting	A										This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get	https://git-scm.com/docs/log.html
git-log --full-history with parent rewriting	A										Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below).	https://git-scm.com/docs/log.html
git-log --dense	A										Commits that are walked are included if they are not TREESAME\nto any parent.	https://git-scm.com/docs/log.html
git-log --sparse	A										All commits that are walked are included.	https://git-scm.com/docs/log.html
git-log --simplify-merges	A										First, build a history graph in the same way that\n--full-history with parent rewriting does (see above).	https://git-scm.com/docs/log.html
git-log --ancestry-path	A										Limit the displayed commits to those directly on the ancestry\nchain between the “from” and “to” commits in the given commit\nrange. I.e. only display commits that are ancestor of the “to”\ncommit and descendants of the “from” commit.	https://git-scm.com/docs/log.html
git-log --date-order	A										Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order.	https://git-scm.com/docs/log.html
git-log --author-date-order	A										Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order.	https://git-scm.com/docs/log.html
git-log --topo-order	A										Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed.	https://git-scm.com/docs/log.html
git-log --reverse	A										Output the commits in reverse order.\nCannot be combined with --walk-reflogs.	https://git-scm.com/docs/log.html
git-log --no-walk[=(sorted|unsorted)]	A										Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument\nunsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph.	https://git-scm.com/docs/log.html
git-log --do-walk	A										Overrides a previous --no-walk.	https://git-scm.com/docs/log.html
git-log --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/log.html
git-log --format=<format>	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/log.html
git-log --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object\nname, show only a partial prefix.  Non default number of\ndigits can be specified with "--abbrev=<n>" (which also modifies\ndiff output, if it is displayed).	https://git-scm.com/docs/log.html
git-log --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit and those options which imply it such as\n"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/log.html
git-log --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"\nused together.	https://git-scm.com/docs/log.html
git-log --encoding=<encoding>	A										The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output.	https://git-scm.com/docs/log.html
git-log --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/log.html
git-log --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/log.html
git-log --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/log.html
git-log --notes[=<treeish>]	A										Show the notes (see git-notes[1]) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log, git show and git whatchanged commands when\nthere is no --pretty, --format, or --oneline option given\non the command line.	https://git-scm.com/docs/log.html
git-log --no-notes	A										Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n"--notes --notes=foo --no-notes --notes=bar" will only show notes\nfrom "refs/notes/bar".	https://git-scm.com/docs/log.html
git-log --show-notes[=<treeish>]	A										These options are deprecated. Use the above --notes/--no-notes\noptions instead.	https://git-scm.com/docs/log.html
git-log --[no-]standard-notes	A										These options are deprecated. Use the above --notes/--no-notes\noptions instead.	https://git-scm.com/docs/log.html
git-log --show-signature	A										Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output.	https://git-scm.com/docs/log.html
git-log --relative-date	A										Synonym for --date=relative.	https://git-scm.com/docs/log.html
git-log --date=<format>	A										Only takes effect for dates shown in human-readable format, such\nas when using --pretty. log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g.,\niso-local), the user’s local time zone is used instead.	https://git-scm.com/docs/log.html
git-log --parents	A										Print also the parents of the commit (in the form "commit parent…​").\nAlso enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/log.html
git-log --children	A										Print also the children of the commit (in the form "commit child…​").\nAlso enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/log.html
git-log --left-right	A										Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with >.  If combined with --boundary, those\ncommits are prefixed with -.	https://git-scm.com/docs/log.html
git-log --graph	A										Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk.	https://git-scm.com/docs/log.html
git-log --show-linear-break[=<barrier>]	A										When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one.	https://git-scm.com/docs/log.html
git-log -c	A										With this option, diff output for a merge commit\nshows the differences from each of the parents to the merge result\nsimultaneously instead of showing pairwise diff between a parent\nand the result one at a time. Furthermore, it lists only files\nwhich were modified from all parents.	https://git-scm.com/docs/log.html
git-log --cc	A										This flag implies the -c option and further compresses the\npatch output by omitting uninteresting hunks whose contents in\nthe parents have only two variants and the merge result picks\none of them without modification.	https://git-scm.com/docs/log.html
git-log -m	A										This flag makes the merge commits show the full diff like\nregular commits; for each merge parent, a separate log entry\nand diff is generated. An exception is that only diff against\nthe first parent is shown when --first-parent option is given;\nin that case, the output represents the changes the merge\nbrought into the then-current branch.	https://git-scm.com/docs/log.html
git-log -r	A										Show recursive diffs.	https://git-scm.com/docs/log.html
git-log -t	A										Show the tree objects in the diff output. This implies -r.	https://git-scm.com/docs/log.html
git-log	A										Show commit logs
<pre><code>git log [<options>] [<revision range>] [[\--] <path>…​]</pre></code>	https://git-scm.com/docs/log.html
git-ls-files -c	A										Show cached files in the output (default)	https://git-scm.com/docs/ls-files.html
git-ls-files --cached	A										Show cached files in the output (default)	https://git-scm.com/docs/ls-files.html
git-ls-files -d	A										Show deleted files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --deleted	A										Show deleted files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -m	A										Show modified files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --modified	A										Show modified files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -o	A										Show other (i.e. untracked) files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files --others	A										Show other (i.e. untracked) files in the output	https://git-scm.com/docs/ls-files.html
git-ls-files -i	A										Show only ignored files in the output. When showing files in the\nindex, print only those matched by an exclude pattern. When\nshowing "other" files, show only those matched by an exclude\npattern.	https://git-scm.com/docs/ls-files.html
git-ls-files --ignored	A										Show only ignored files in the output. When showing files in the\nindex, print only those matched by an exclude pattern. When\nshowing "other" files, show only those matched by an exclude\npattern.	https://git-scm.com/docs/ls-files.html
git-ls-files -s	A										Show staged contents' object name, mode bits and stage number in the output.	https://git-scm.com/docs/ls-files.html
git-ls-files --stage	A										Show staged contents' object name, mode bits and stage number in the output.	https://git-scm.com/docs/ls-files.html
git-ls-files --directory	A										If a whole directory is classified as "other", show just its\nname (with a trailing slash) and not its whole contents.	https://git-scm.com/docs/ls-files.html
git-ls-files --no-empty-directory	A										Do not list empty directories. Has no effect without --directory.	https://git-scm.com/docs/ls-files.html
git-ls-files -u	A										Show unmerged files in the output (forces --stage)	https://git-scm.com/docs/ls-files.html
git-ls-files --unmerged	A										Show unmerged files in the output (forces --stage)	https://git-scm.com/docs/ls-files.html
git-ls-files -k	A										Show files on the filesystem that need to be removed due\nto file/directory conflicts for checkout-index to\nsucceed.	https://git-scm.com/docs/ls-files.html
git-ls-files --killed	A										Show files on the filesystem that need to be removed due\nto file/directory conflicts for checkout-index to\nsucceed.	https://git-scm.com/docs/ls-files.html
git-ls-files -z	A										\0 line termination on output.	https://git-scm.com/docs/ls-files.html
git-ls-files -x <pattern>	A										Skip untracked files matching pattern.\nNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\nbelow for more information.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude=<pattern>	A										Skip untracked files matching pattern.\nNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\nbelow for more information.	https://git-scm.com/docs/ls-files.html
git-ls-files -X <file>	A										Read exclude patterns from <file>; 1 per line.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-from=<file>	A										Read exclude patterns from <file>; 1 per line.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-per-directory=<file>	A										Read additional exclude patterns that apply only to the\ndirectory and its subdirectories in <file>.	https://git-scm.com/docs/ls-files.html
git-ls-files --exclude-standard	A										Add the standard Git exclusions: .git/info/exclude, .gitignore\nin each directory, and the user’s global exclusion file.	https://git-scm.com/docs/ls-files.html
git-ls-files --error-unmatch	A										If any <file> does not appear in the index, treat this as an\nerror (return 1).	https://git-scm.com/docs/ls-files.html
git-ls-files --with-tree=<tree-ish>	A										When using --error-unmatch to expand the user supplied\n<file> (i.e. path pattern) arguments to paths, pretend\nthat paths which were removed in the index since the\nnamed <tree-ish> are still present.  Using this option\nwith -s or -u options does not make any sense.	https://git-scm.com/docs/ls-files.html
git-ls-files -t	A										This feature is semi-deprecated. For scripting purpose,\ngit-status[1] --porcelain and\ngit-diff-files[1] --name-status are almost always\nsuperior alternatives, and users should look at\ngit-status[1] --short or git-diff[1]\n--name-status for more user-friendly alternatives.	https://git-scm.com/docs/ls-files.html
git-ls-files H	A										cached	https://git-scm.com/docs/ls-files.html
git-ls-files S	A										skip-worktree	https://git-scm.com/docs/ls-files.html
git-ls-files M	A										unmerged	https://git-scm.com/docs/ls-files.html
git-ls-files R	A										removed/deleted	https://git-scm.com/docs/ls-files.html
git-ls-files C	A										modified/changed	https://git-scm.com/docs/ls-files.html
git-ls-files K	A										to be killed	https://git-scm.com/docs/ls-files.html
git-ls-files ?	A										other	https://git-scm.com/docs/ls-files.html
git-ls-files -v	A										Similar to -t, but use lowercase letters for files\nthat are marked as assume unchanged (see\ngit-update-index[1]).	https://git-scm.com/docs/ls-files.html
git-ls-files --full-name	A										When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory.	https://git-scm.com/docs/ls-files.html
git-ls-files --abbrev[=<n>]	A										Instead of showing the full 40-byte hexadecimal object\nlines, show only a partial prefix.\nNon default number of digits can be specified with --abbrev=<n>.	https://git-scm.com/docs/ls-files.html
git-ls-files --debug	A										After each line that describes a file, add more data about its\ncache entry.  This is intended to show as much information as\npossible for manual inspection; the exact format may change at\nany time.	https://git-scm.com/docs/ls-files.html
git-ls-files --eol	A										Show <eolinfo> and <eolattr> of files.\n<eolinfo> is the file content identification used by Git when\nthe "text" attribute is "auto" (or not set and core.autocrlf is not false).\n<eolinfo> is either "-text", "none", "lf", "crlf", "mixed" or "".	https://git-scm.com/docs/ls-files.html
git-ls-files --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/ls-files.html
git-ls-files <file>	A										Files to show. If no files are given all files which match the other\nspecified criteria are shown.	https://git-scm.com/docs/ls-files.html
git-ls-files	A										Show information about files in the index and the working tree
<pre><code>git ls-files [-z] [-t] [-v]\n        (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*\n        (-[c|d|o|i|s|u|k|m])*\n        [--eol]\n        [-x <pattern>|--exclude=<pattern>]\n        [-X <file>|--exclude-from=<file>]\n        [--exclude-per-directory=<file>]\n        [--exclude-standard]\n        [--error-unmatch] [--with-tree=<tree-ish>]\n        [--full-name] [--abbrev] [--] [<file>…​]</pre></code>	https://git-scm.com/docs/ls-files.html
git-merge-base -a	A										Output all merge bases for the commits, instead of just one.	https://git-scm.com/docs/merge-base.html
git-merge-base --all	A										Output all merge bases for the commits, instead of just one.	https://git-scm.com/docs/merge-base.html
git-merge-base	A										Find as good common ancestors as possible for a merge
<pre><code>git merge-base [-a|--all] <commit> <commit>…​\ngit merge-base [-a|--all] --octopus <commit>…​\ngit merge-base --is-ancestor <commit> <commit>\ngit merge-base --independent <commit>…​\ngit merge-base --fork-point <ref> [<commit>]</pre></code>	https://git-scm.com/docs/merge-base.html
git-merge --commit	A										Perform the merge and commit the result. This option can\nbe used to override --no-commit.	https://git-scm.com/docs/merge.html
git-merge --no-commit	A										Perform the merge and commit the result. This option can\nbe used to override --no-commit.	https://git-scm.com/docs/merge.html
git-merge --edit	A										    Invoke an editor before committing successful mechanical merge to\n    further edit the auto-generated merge message, so that the user\n    can explain and justify the merge. The --no-edit option can be\n    used to accept the auto-generated message (this is generally\n    discouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge -e	A										    Invoke an editor before committing successful mechanical merge to\n    further edit the auto-generated merge message, so that the user\n    can explain and justify the merge. The --no-edit option can be\n    used to accept the auto-generated message (this is generally\n    discouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge --no-edit	A										    Invoke an editor before committing successful mechanical merge to\n    further edit the auto-generated merge message, so that the user\n    can explain and justify the merge. The --no-edit option can be\n    used to accept the auto-generated message (this is generally\n    discouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.	https://git-scm.com/docs/merge.html
git-merge --ff	A										When the merge resolves as a fast-forward, only update the branch\npointer, without creating a merge commit.  This is the default\nbehavior.	https://git-scm.com/docs/merge.html
git-merge --no-ff	A										Create a merge commit even when the merge resolves as a\nfast-forward.  This is the default behaviour when merging an\nannotated (and possibly signed) tag.	https://git-scm.com/docs/merge.html
git-merge --ff-only	A										Refuse to merge and exit with a non-zero status unless the\ncurrent HEAD is already up-to-date or the merge can be\nresolved as a fast-forward.	https://git-scm.com/docs/merge.html
git-merge --log[=<n>]	A										In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/merge.html
git-merge --no-log	A										In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/merge.html
git-merge --stat	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge -n	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge --no-stat	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/merge.html
git-merge --squash	A										Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).	https://git-scm.com/docs/merge.html
git-merge --no-squash	A										Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).	https://git-scm.com/docs/merge.html
git-merge -s <strategy>	A										Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise).	https://git-scm.com/docs/merge.html
git-merge --strategy=<strategy>	A										Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise).	https://git-scm.com/docs/merge.html
git-merge -X <option>	A										Pass merge strategy specific option through to the merge\nstrategy.	https://git-scm.com/docs/merge.html
git-merge --strategy-option=<option>	A										Pass merge strategy specific option through to the merge\nstrategy.	https://git-scm.com/docs/merge.html
git-merge --verify-signatures	A										Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted.	https://git-scm.com/docs/merge.html
git-merge --no-verify-signatures	A										Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted.	https://git-scm.com/docs/merge.html
git-merge --summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future.	https://git-scm.com/docs/merge.html
git-merge --no-summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future.	https://git-scm.com/docs/merge.html
git-merge -q	A										Operate quietly. Implies --no-progress.	https://git-scm.com/docs/merge.html
git-merge --quiet	A										Operate quietly. Implies --no-progress.	https://git-scm.com/docs/merge.html
git-merge -v	A										Be verbose.	https://git-scm.com/docs/merge.html
git-merge --verbose	A										Be verbose.	https://git-scm.com/docs/merge.html
git-merge --progress	A										Turn progress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a terminal.\nNote that not all merge strategies may support progress\nreporting.	https://git-scm.com/docs/merge.html
git-merge --no-progress	A										Turn progress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a terminal.\nNote that not all merge strategies may support progress\nreporting.	https://git-scm.com/docs/merge.html
git-merge --allow-unrelated-histories	A										By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added.	https://git-scm.com/docs/merge.html
git-merge -S[<keyid>]	A										GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space.	https://git-scm.com/docs/merge.html
git-merge --gpg-sign[=<keyid>]	A										GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space.	https://git-scm.com/docs/merge.html
git-merge -m <msg>	A										Set the commit message to be used for the merge commit (in\ncase one is created).	https://git-scm.com/docs/merge.html
git-merge --[no-]rerere-autoupdate	A										Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible.	https://git-scm.com/docs/merge.html
git-merge --abort	A										Abort the current conflict resolution process, and\ntry to reconstruct the pre-merge state.	https://git-scm.com/docs/merge.html
git-merge <commit>…​	A										Commits, usually other branch heads, to merge into our branch.\nSpecifying more than one commit will create a merge with\nmore than two parents (affectionately called an Octopus merge).	https://git-scm.com/docs/merge.html
git-merge	A										Join two or more development histories together
<pre><code>git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n    [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n    [--[no-]allow-unrelated-histories]\n    [--[no-]rerere-autoupdate] [-m <msg>] [<commit>…​]\ngit merge <msg> HEAD <commit>…​\ngit merge --abort</pre></code>	https://git-scm.com/docs/merge.html
git-mergetool -t <tool>	A										Use the merge resolution program specified by <tool>.\nValid values include emerge, gvimdiff, kdiff3,\nmeld, vimdiff, and tortoisemerge. Run git mergetool --tool-help\nfor the list of valid <tool> settings.	https://git-scm.com/docs/mergetool.html
git-mergetool --tool=<tool>	A										Use the merge resolution program specified by <tool>.\nValid values include emerge, gvimdiff, kdiff3,\nmeld, vimdiff, and tortoisemerge. Run git mergetool --tool-help\nfor the list of valid <tool> settings.	https://git-scm.com/docs/mergetool.html
git-mergetool --tool-help	A										Print a list of merge tools that may be used with --tool.	https://git-scm.com/docs/mergetool.html
git-mergetool -y	A										Don’t prompt before each invocation of the merge resolution\nprogram.\nThis is the default if the merge resolution program is\nexplicitly specified with the --tool option or with the\nmerge.tool configuration variable.	https://git-scm.com/docs/mergetool.html
git-mergetool --no-prompt	A										Don’t prompt before each invocation of the merge resolution\nprogram.\nThis is the default if the merge resolution program is\nexplicitly specified with the --tool option or with the\nmerge.tool configuration variable.	https://git-scm.com/docs/mergetool.html
git-mergetool --prompt	A										Prompt before each invocation of the merge resolution program\nto give the user a chance to skip the path.	https://git-scm.com/docs/mergetool.html
git-mergetool	A										Run merge conflict resolution tools to resolve merge conflicts
<pre><code>git mergetool [--tool=<tool>] [-y | --[no-]prompt] [<file>…​]</pre></code>	https://git-scm.com/docs/mergetool.html
git-mv -f	A										Force renaming or moving of a file even if the target exists	https://git-scm.com/docs/mv.html
git-mv --force	A										Force renaming or moving of a file even if the target exists	https://git-scm.com/docs/mv.html
git-mv -k	A										Skip move or rename actions which would lead to an error\ncondition. An error happens when a source is neither existing nor\ncontrolled by Git, or when it would overwrite an existing\nfile unless -f is given.	https://git-scm.com/docs/mv.html
git-mv -n	A										Do nothing; only show what would happen	https://git-scm.com/docs/mv.html
git-mv --dry-run	A										Do nothing; only show what would happen	https://git-scm.com/docs/mv.html
git-mv -v	A										Report the names of files as they are moved.	https://git-scm.com/docs/mv.html
git-mv --verbose	A										Report the names of files as they are moved.	https://git-scm.com/docs/mv.html
git-mv	A										Move or rename a file, a directory, or a symlink
<pre><code>git mv <options>…​ <args>…​</pre></code>	https://git-scm.com/docs/mv.html
git-pull -q	A										This is passed to both underlying git-fetch to squelch reporting of\nduring transfer, and underlying git-merge to squelch output during\nmerging.	https://git-scm.com/docs/pull.html
git-pull --quiet	A										This is passed to both underlying git-fetch to squelch reporting of\nduring transfer, and underlying git-merge to squelch output during\nmerging.	https://git-scm.com/docs/pull.html
git-pull -v	A										Pass --verbose to git-fetch and git-merge.	https://git-scm.com/docs/pull.html
git-pull --verbose	A										Pass --verbose to git-fetch and git-merge.	https://git-scm.com/docs/pull.html
git-pull --[no-]recurse-submodules[=yes|on-demand|no]	A										This option controls if new commits of all populated submodules should\nbe fetched too (see git-config[1] and gitmodules[5]).\nThat might be necessary to get the data needed for merging submodule\ncommits, a feature Git learned in 1.7.3. Notice that the result of a\nmerge will not be checked out in the submodule, "git submodule update"\nhas to be called afterwards to bring the work tree up to date with the\nmerge result.	https://git-scm.com/docs/pull.html
git-pull --commit	A										Perform the merge and commit the result. This option can\nbe used to override --no-commit.	https://git-scm.com/docs/pull.html
git-pull --no-commit	A										Perform the merge and commit the result. This option can\nbe used to override --no-commit.	https://git-scm.com/docs/pull.html
git-pull --edit	A										Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).	https://git-scm.com/docs/pull.html
git-pull -e	A										Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).	https://git-scm.com/docs/pull.html
git-pull --no-edit	A										Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).	https://git-scm.com/docs/pull.html
git-pull --ff	A										When the merge resolves as a fast-forward, only update the branch\npointer, without creating a merge commit.  This is the default\nbehavior.	https://git-scm.com/docs/pull.html
git-pull --no-ff	A										Create a merge commit even when the merge resolves as a\nfast-forward.  This is the default behaviour when merging an\nannotated (and possibly signed) tag.	https://git-scm.com/docs/pull.html
git-pull --ff-only	A										Refuse to merge and exit with a non-zero status unless the\ncurrent HEAD is already up-to-date or the merge can be\nresolved as a fast-forward.	https://git-scm.com/docs/pull.html
git-pull --log[=<n>]	A										In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/pull.html
git-pull --no-log	A										In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].	https://git-scm.com/docs/pull.html
git-pull --stat	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull -n	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull --no-stat	A										Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.	https://git-scm.com/docs/pull.html
git-pull --squash	A										Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).	https://git-scm.com/docs/pull.html
git-pull --no-squash	A										Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).	https://git-scm.com/docs/pull.html
git-pull -s <strategy>	A										Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise).	https://git-scm.com/docs/pull.html
git-pull --strategy=<strategy>	A										Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise).	https://git-scm.com/docs/pull.html
git-pull -X <option>	A										Pass merge strategy specific option through to the merge\nstrategy.	https://git-scm.com/docs/pull.html
git-pull --strategy-option=<option>	A										Pass merge strategy specific option through to the merge\nstrategy.	https://git-scm.com/docs/pull.html
git-pull --verify-signatures	A										Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted.	https://git-scm.com/docs/pull.html
git-pull --no-verify-signatures	A										Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted.	https://git-scm.com/docs/pull.html
git-pull --summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future.	https://git-scm.com/docs/pull.html
git-pull --no-summary	A										Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future.	https://git-scm.com/docs/pull.html
git-pull --allow-unrelated-histories	A										By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added.	https://git-scm.com/docs/pull.html
git-pull -r	A										When true, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that information\nto avoid rebasing non-local changes.	https://git-scm.com/docs/pull.html
git-pull --rebase[=false|true|preserve|interactive]	A										When true, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that information\nto avoid rebasing non-local changes.	https://git-scm.com/docs/pull.html
git-pull --no-rebase	A										Override earlier --rebase.	https://git-scm.com/docs/pull.html
git-pull --autostash	A										Before starting rebase, stash local modifications away (see\ngit-stash[1]) if needed, and apply the stash when\ndone. --no-autostash is useful to override the rebase.autoStash\nconfiguration variable (see git-config[1]).	https://git-scm.com/docs/pull.html
git-pull --no-autostash	A										Before starting rebase, stash local modifications away (see\ngit-stash[1]) if needed, and apply the stash when\ndone. --no-autostash is useful to override the rebase.autoStash\nconfiguration variable (see git-config[1]).	https://git-scm.com/docs/pull.html
git-pull --all	A										Fetch all remotes.	https://git-scm.com/docs/pull.html
git-pull -a	A										Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/pull.html
git-pull --append	A										Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten.	https://git-scm.com/docs/pull.html
git-pull --depth=<depth>	A										Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see\ngit-clone[1]), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched.	https://git-scm.com/docs/pull.html
git-pull --unshallow	A										If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories.	https://git-scm.com/docs/pull.html
git-pull --update-shallow	A										By default when fetching from a shallow repository,\ngit fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accept such\nrefs.	https://git-scm.com/docs/pull.html
git-pull -f	A										When git fetch is used with <rbranch>:<lbranch>\nrefspec, it refuses to update the local branch\n<lbranch> unless the remote branch <rbranch> it\nfetches is a descendant of <lbranch>.  This option\noverrides that check.	https://git-scm.com/docs/pull.html
git-pull --force	A										When git fetch is used with <rbranch>:<lbranch>\nrefspec, it refuses to update the local branch\n<lbranch> unless the remote branch <rbranch> it\nfetches is a descendant of <lbranch>.  This option\noverrides that check.	https://git-scm.com/docs/pull.html
git-pull -k	A										Keep downloaded pack.	https://git-scm.com/docs/pull.html
git-pull --keep	A										Keep downloaded pack.	https://git-scm.com/docs/pull.html
git-pull --no-tags	A										By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1].	https://git-scm.com/docs/pull.html
git-pull -u	A										By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it.	https://git-scm.com/docs/pull.html
git-pull --update-head-ok	A										By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it.	https://git-scm.com/docs/pull.html
git-pull --upload-pack <upload-pack>	A										When given, and the repository to fetch from is handled\nby git fetch-pack, --exec=<upload-pack> is passed to\nthe command to specify non-default path for the command\nrun on the other end.	https://git-scm.com/docs/pull.html
git-pull --progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.	https://git-scm.com/docs/pull.html
git-pull -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/pull.html
git-pull --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/pull.html
git-pull -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/pull.html
git-pull --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/pull.html
git-pull <repository>	A										The "remote" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below).	https://git-scm.com/docs/pull.html
git-pull <refspec>	A										Specifies which refs to fetch and which local refs to update.\nWhen no <refspec>s appear on the command line, the refs to fetch\nare read from remote.<repository>.fetch variables instead\n(see git-fetch[1]).	https://git-scm.com/docs/pull.html
git-pull	A										Fetch from and integrate with another repository or a local branch
<pre><code>git pull [options] [<repository> [<refspec>…​]]</pre></code>	https://git-scm.com/docs/pull.html
git-push <repository>	A										The "remote" repository that is destination of a push\noperation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below).	https://git-scm.com/docs/push.html
git-push <refspec>…​	A										Specify what destination ref to update with what source object.\nThe format of a <refspec> parameter is an optional plus\n+, followed by the source object <src>, followed\nby a colon :, followed by the destination ref <dst>.	https://git-scm.com/docs/push.html
git-push --all	A										Push all branches (i.e. refs under refs/heads/); cannot be\nused with other <refspec>.	https://git-scm.com/docs/push.html
git-push --prune	A										Remove remote branches that don’t have a local counterpart. For example\na remote branch tmp will be removed if a local branch with the same\nname doesn’t exist any more. This also respects refspecs, e.g.\ngit push --prune remote refs/heads/*:refs/tmp/* would\nmake sure that remote refs/tmp/foo will be removed if refs/heads/foo\ndoesn’t exist.	https://git-scm.com/docs/push.html
git-push --mirror	A										Instead of naming each ref to push, specifies that all\nrefs under refs/ (which includes but is not\nlimited to refs/heads/, refs/remotes/, and refs/tags/)\nbe mirrored to the remote repository.  Newly created local\nrefs will be pushed to the remote end, locally updated refs\nwill be force updated on the remote end, and deleted refs\nwill be removed from the remote end.  This is the default\nif the configuration option remote.<remote>.mirror is\nset.	https://git-scm.com/docs/push.html
git-push -n	A										Do everything except actually send the updates.	https://git-scm.com/docs/push.html
git-push --dry-run	A										Do everything except actually send the updates.	https://git-scm.com/docs/push.html
git-push --porcelain	A										Produce machine-readable output.  The output status line for each ref\nwill be tab-separated and sent to stdout instead of stderr.  The full\nsymbolic names of the refs will be given.	https://git-scm.com/docs/push.html
git-push --delete	A										All listed refs are deleted from the remote repository. This is\nthe same as prefixing all refs with a colon.	https://git-scm.com/docs/push.html
git-push --tags	A										All refs under refs/tags are pushed, in\naddition to refspecs explicitly listed on the command\nline.	https://git-scm.com/docs/push.html
git-push --follow-tags	A										Push all the refs that would be pushed without this option,\nand also push annotated tags in refs/tags that are missing\nfrom the remote but are pointing at commit-ish that are\nreachable from the refs being pushed.  This can also be specified\nwith configuration variable push.followTags.  For more\ninformation, see push.followTags in git-config[1].	https://git-scm.com/docs/push.html
git-push --[no-]signed	A										GPG-sign the push request to update refs on the receiving\nside, to allow it to be checked by the hooks and/or be\nlogged.  If false or --no-signed, no signing will be\nattempted.  If true or --signed, the push will fail if the\nserver does not support signed pushes.  If set to if-asked,\nsign if and only if the server supports signed pushes.  The push\nwill also fail if the actual call to gpg --sign fails.  See\ngit-receive-pack[1] for the details on the receiving end.	https://git-scm.com/docs/push.html
git-push --sign=(true|false|if-asked)	A										GPG-sign the push request to update refs on the receiving\nside, to allow it to be checked by the hooks and/or be\nlogged.  If false or --no-signed, no signing will be\nattempted.  If true or --signed, the push will fail if the\nserver does not support signed pushes.  If set to if-asked,\nsign if and only if the server supports signed pushes.  The push\nwill also fail if the actual call to gpg --sign fails.  See\ngit-receive-pack[1] for the details on the receiving end.	https://git-scm.com/docs/push.html
git-push --[no-]atomic	A										Use an atomic transaction on the remote side if available.\nEither all refs are updated, or on error, no refs are updated.\nIf the server does not support atomic pushes the push will fail.	https://git-scm.com/docs/push.html
git-push -o	A										Transmit the given string to the server, which passes them to\nthe pre-receive as well as the post-receive hook. The given string\nmust not contain a NUL or LF character.	https://git-scm.com/docs/push.html
git-push --push-option	A										Transmit the given string to the server, which passes them to\nthe pre-receive as well as the post-receive hook. The given string\nmust not contain a NUL or LF character.	https://git-scm.com/docs/push.html
git-push --receive-pack=<git-receive-pack>	A										Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH.	https://git-scm.com/docs/push.html
git-push --exec=<git-receive-pack>	A										Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH.	https://git-scm.com/docs/push.html
git-push --[no-]force-with-lease	A										Usually, "git push" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push --force-with-lease=<refname>	A										Usually, "git push" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push --force-with-lease=<refname>:<expect>	A										Usually, "git push" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.	https://git-scm.com/docs/push.html
git-push -f	A										Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected.	https://git-scm.com/docs/push.html
git-push --force	A										Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected.	https://git-scm.com/docs/push.html
git-push --repo=<repository>	A										This option is equivalent to the <repository> argument. If both\nare specified, the command-line argument takes precedence.	https://git-scm.com/docs/push.html
git-push -u	A										For every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge in git-config[1].	https://git-scm.com/docs/push.html
git-push --set-upstream	A										For every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge in git-config[1].	https://git-scm.com/docs/push.html
git-push --[no-]thin	A										These options are passed to git-send-pack[1]. A thin transfer\nsignificantly reduces the amount of sent data when the sender and\nreceiver share many of the same objects in common. The default is\n\--thin.	https://git-scm.com/docs/push.html
git-push -q	A										Suppress all output, including the listing of updated refs,\nunless an error occurs. Progress is not reported to the standard\nerror stream.	https://git-scm.com/docs/push.html
git-push --quiet	A										Suppress all output, including the listing of updated refs,\nunless an error occurs. Progress is not reported to the standard\nerror stream.	https://git-scm.com/docs/push.html
git-push -v	A										Run verbosely.	https://git-scm.com/docs/push.html
git-push --verbose	A										Run verbosely.	https://git-scm.com/docs/push.html
git-push --progress	A										Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.	https://git-scm.com/docs/push.html
git-push --no-recurse-submodules	A										May be used to make sure all submodule commits used by the\nrevisions to be pushed are available on a remote-tracking branch.\nIf check is used Git will verify that all submodule commits that\nchanged in the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push will\nbe aborted and exit with non-zero status. If on-demand is used\nall submodules that changed in the revisions to be pushed will be\npushed. If on-demand was not able to push all necessary revisions\nit will also be aborted and exit with non-zero status. A value of\nno or using --no-recurse-submodules can be used to override the\npush.recurseSubmodules configuration variable when no submodule\nrecursion is required.	https://git-scm.com/docs/push.html
git-push --recurse-submodules=check|on-demand|no	A										May be used to make sure all submodule commits used by the\nrevisions to be pushed are available on a remote-tracking branch.\nIf check is used Git will verify that all submodule commits that\nchanged in the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push will\nbe aborted and exit with non-zero status. If on-demand is used\nall submodules that changed in the revisions to be pushed will be\npushed. If on-demand was not able to push all necessary revisions\nit will also be aborted and exit with non-zero status. A value of\nno or using --no-recurse-submodules can be used to override the\npush.recurseSubmodules configuration variable when no submodule\nrecursion is required.	https://git-scm.com/docs/push.html
git-push --[no-]verify	A										Toggle the pre-push hook (see githooks[5]).  The\ndefault is --verify, giving the hook a chance to prevent the\npush.  With --no-verify, the hook is bypassed completely.	https://git-scm.com/docs/push.html
git-push -4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/push.html
git-push --ipv4	A										Use IPv4 addresses only, ignoring IPv6 addresses.	https://git-scm.com/docs/push.html
git-push -6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/push.html
git-push --ipv6	A										Use IPv6 addresses only, ignoring IPv4 addresses.	https://git-scm.com/docs/push.html
git-push	A										Update remote refs along with associated objects
<pre><code>git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n       [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n       [-u | --set-upstream] [--push-option=<string>]\n       [--[no-]signed|--sign=(true|false|if-asked)]\n       [--force-with-lease[=<refname>[:<expect>]]]\n       [--no-verify] [<repository> [<refspec>…​]]</pre></code>	https://git-scm.com/docs/push.html
git-read-tree -m	A										Perform a merge, not just a read.  The command will\nrefuse to run if your index file has unmerged entries,\nindicating that you have not finished previous merge you\nstarted.	https://git-scm.com/docs/read-tree.html
git-read-tree --reset	A										Same as -m, except that unmerged entries are discarded\ninstead of failing.	https://git-scm.com/docs/read-tree.html
git-read-tree -u	A										After a successful merge, update the files in the work\ntree with the result of the merge.	https://git-scm.com/docs/read-tree.html
git-read-tree -i	A										Usually a merge requires the index file as well as the\nfiles in the working tree to be up to date with the\ncurrent head commit, in order not to lose local\nchanges.  This flag disables the check with the working\ntree and is meant to be used when creating a merge of\ntrees that are not directly related to the current\nworking tree status into a temporary index file.	https://git-scm.com/docs/read-tree.html
git-read-tree -n	A										Check if the command would error out, without updating the index\nor the files in the working tree for real.	https://git-scm.com/docs/read-tree.html
git-read-tree --dry-run	A										Check if the command would error out, without updating the index\nor the files in the working tree for real.	https://git-scm.com/docs/read-tree.html
git-read-tree -v	A										Show the progress of checking files out.	https://git-scm.com/docs/read-tree.html
git-read-tree --trivial	A										Restrict three-way merge by git read-tree to happen\nonly if there is no file-level merging required, instead\nof resolving merge for trivial cases and leaving\nconflicting files unresolved in the index.	https://git-scm.com/docs/read-tree.html
git-read-tree --aggressive	A										Usually a three-way merge by git read-tree resolves\nthe merge for really trivial cases and leaves other\ncases unresolved in the index, so that porcelains can\nimplement different merge policies.  This flag makes the\ncommand resolve a few more cases internally:	https://git-scm.com/docs/read-tree.html
git-read-tree --prefix=<prefix>/	A										Keep the current index contents, and read the contents\nof the named tree-ish under the directory at <prefix>.\nThe command will refuse to overwrite entries that already\nexisted in the original index file. Note that the <prefix>/\nvalue must end with a slash.	https://git-scm.com/docs/read-tree.html
git-read-tree --exclude-per-directory=<gitignore>	A										When running the command with -u and -m options, the\nmerge result may need to overwrite paths that are not\ntracked in the current branch.  The command usually\nrefuses to proceed with the merge to avoid losing such a\npath.  However this safety valve sometimes gets in the\nway.  For example, it often happens that the other\nbranch added a file that used to be a generated file in\nyour branch, and the safety valve triggers when you try\nto switch to that branch after you ran make but before\nrunning make clean to remove the generated file.  This\noption tells the command to read per-directory exclude\nfile (usually .gitignore) and allows such an untracked\nbut explicitly ignored file to be overwritten.	https://git-scm.com/docs/read-tree.html
git-read-tree --index-output=<file>	A										Instead of writing the results out to $GIT_INDEX_FILE,\nwrite the resulting index in the named file.  While the\ncommand is operating, the original index file is locked\nwith the same mechanism as usual.  The file must allow\nto be rename(2)ed into from a temporary file that is\ncreated next to the usual index file; typically this\nmeans it needs to be on the same filesystem as the index\nfile itself, and you need write permission to the\ndirectories the index file and index output file are\nlocated in.	https://git-scm.com/docs/read-tree.html
git-read-tree --no-sparse-checkout	A										Disable sparse checkout support even if core.sparseCheckout\nis true.	https://git-scm.com/docs/read-tree.html
git-read-tree --empty	A										Instead of reading tree object(s) into the index, just empty\nit.	https://git-scm.com/docs/read-tree.html
git-read-tree <tree-ish#>	A										The id of the tree object(s) to be read/merged.	https://git-scm.com/docs/read-tree.html
git-read-tree	A										Reads tree information into the index
<pre><code>git read-tree [[-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>]\n        [-u [--exclude-per-directory=<gitignore>] | -i]]\n        [--index-output=<file>] [--no-sparse-checkout]\n        (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])</pre></code>	https://git-scm.com/docs/read-tree.html
git-rebase --onto <newbase>	A										Starting point at which to create the new commits. If the\n--onto option is not specified, the starting point is\n<upstream>.  May be any valid commit, and not just an\nexisting branch name.	https://git-scm.com/docs/rebase.html
git-rebase <upstream>	A										Upstream branch to compare against.  May be any valid commit,\nnot just an existing branch name. Defaults to the configured\nupstream for the current branch.	https://git-scm.com/docs/rebase.html
git-rebase <branch>	A										Working branch; defaults to HEAD.	https://git-scm.com/docs/rebase.html
git-rebase --continue	A										Restart the rebasing process after having resolved a merge conflict.	https://git-scm.com/docs/rebase.html
git-rebase --abort	A										Abort the rebase operation and reset HEAD to the original\nbranch. If <branch> was provided when the rebase operation was\nstarted, then HEAD will be reset to <branch>. Otherwise HEAD\nwill be reset to where it was when the rebase operation was\nstarted.	https://git-scm.com/docs/rebase.html
git-rebase --keep-empty	A										Keep the commits that do not change anything from its\nparents in the result.	https://git-scm.com/docs/rebase.html
git-rebase --skip	A										Restart the rebasing process by skipping the current patch.	https://git-scm.com/docs/rebase.html
git-rebase --edit-todo	A										Edit the todo list during an interactive rebase.	https://git-scm.com/docs/rebase.html
git-rebase -m	A										Use merging strategies to rebase.  When the recursive (default) merge\nstrategy is used, this allows rebase to be aware of renames on the\nupstream side.	https://git-scm.com/docs/rebase.html
git-rebase --merge	A										Use merging strategies to rebase.  When the recursive (default) merge\nstrategy is used, this allows rebase to be aware of renames on the\nupstream side.	https://git-scm.com/docs/rebase.html
git-rebase -s <strategy>	A										Use the given merge strategy.\nIf there is no -s option git merge-recursive is used\ninstead.  This implies --merge.	https://git-scm.com/docs/rebase.html
git-rebase --strategy=<strategy>	A										Use the given merge strategy.\nIf there is no -s option git merge-recursive is used\ninstead.  This implies --merge.	https://git-scm.com/docs/rebase.html
git-rebase -X <strategy-option>	A										Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s recursive.  Note the reversal of ours and\ntheirs as noted above for the -m option.	https://git-scm.com/docs/rebase.html
git-rebase --strategy-option=<strategy-option>	A										Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s recursive.  Note the reversal of ours and\ntheirs as noted above for the -m option.	https://git-scm.com/docs/rebase.html
git-rebase -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/rebase.html
git-rebase --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/rebase.html
git-rebase -q	A										Be quiet. Implies --no-stat.	https://git-scm.com/docs/rebase.html
git-rebase --quiet	A										Be quiet. Implies --no-stat.	https://git-scm.com/docs/rebase.html
git-rebase -v	A										Be verbose. Implies --stat.	https://git-scm.com/docs/rebase.html
git-rebase --verbose	A										Be verbose. Implies --stat.	https://git-scm.com/docs/rebase.html
git-rebase --stat	A										Show a diffstat of what changed upstream since the last rebase. The\ndiffstat is also controlled by the configuration option rebase.stat.	https://git-scm.com/docs/rebase.html
git-rebase -n	A										Do not show a diffstat as part of the rebase process.	https://git-scm.com/docs/rebase.html
git-rebase --no-stat	A										Do not show a diffstat as part of the rebase process.	https://git-scm.com/docs/rebase.html
git-rebase --no-verify	A										This option bypasses the pre-rebase hook.  See also githooks[5].	https://git-scm.com/docs/rebase.html
git-rebase --verify	A										Allows the pre-rebase hook to run, which is the default.  This option can\nbe used to override --no-verify.  See also githooks[5].	https://git-scm.com/docs/rebase.html
git-rebase -C<n>	A										Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored.	https://git-scm.com/docs/rebase.html
git-rebase -f	A										Force a rebase even if the current branch is up-to-date and\nthe command without --force would return without doing anything.	https://git-scm.com/docs/rebase.html
git-rebase --force-rebase	A										Force a rebase even if the current branch is up-to-date and\nthe command without --force would return without doing anything.	https://git-scm.com/docs/rebase.html
git-rebase --fork-point	A										Use reflog to find a better common ancestor between <upstream>\nand <branch> when calculating which commits have been\nintroduced by <branch>.	https://git-scm.com/docs/rebase.html
git-rebase --no-fork-point	A										Use reflog to find a better common ancestor between <upstream>\nand <branch> when calculating which commits have been\nintroduced by <branch>.	https://git-scm.com/docs/rebase.html
git-rebase --ignore-whitespace	A										These flag are passed to the git apply program\n(see git-apply[1]) that applies the patch.\nIncompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --whitespace=<option>	A										These flag are passed to the git apply program\n(see git-apply[1]) that applies the patch.\nIncompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --committer-date-is-author-date	A										These flags are passed to git am to easily change the dates\nof the rebased commits (see git-am[1]).\nIncompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase --ignore-date	A										These flags are passed to git am to easily change the dates\nof the rebased commits (see git-am[1]).\nIncompatible with the --interactive option.	https://git-scm.com/docs/rebase.html
git-rebase -i	A										Make a list of the commits which are about to be rebased.  Let the\nuser edit that list before rebasing.  This mode can also be used to\nsplit commits (see SPLITTING COMMITS below).	https://git-scm.com/docs/rebase.html
git-rebase --interactive	A										Make a list of the commits which are about to be rebased.  Let the\nuser edit that list before rebasing.  This mode can also be used to\nsplit commits (see SPLITTING COMMITS below).	https://git-scm.com/docs/rebase.html
git-rebase -p	A										Recreate merge commits instead of flattening the history by replaying\ncommits a merge commit introduces. Merge conflict resolutions or manual\namendments to merge commits are not preserved.	https://git-scm.com/docs/rebase.html
git-rebase --preserve-merges	A										Recreate merge commits instead of flattening the history by replaying\ncommits a merge commit introduces. Merge conflict resolutions or manual\namendments to merge commits are not preserved.	https://git-scm.com/docs/rebase.html
git-rebase -x <cmd>	A										Append "exec <cmd>" after each line creating a commit in the\nfinal history. <cmd> will be interpreted as one or more shell\ncommands.	https://git-scm.com/docs/rebase.html
git-rebase --exec <cmd>	A										Append "exec <cmd>" after each line creating a commit in the\nfinal history. <cmd> will be interpreted as one or more shell\ncommands.	https://git-scm.com/docs/rebase.html
git-rebase --root	A										Rebase all commits reachable from <branch>, instead of\nlimiting them with an <upstream>.  This allows you to rebase\nthe root commit(s) on a branch.  When used with --onto, it\nwill skip changes already contained in <newbase> (instead of\n<upstream>) whereas without --onto it will operate on every change.\nWhen used together with both --onto and --preserve-merges,\nall root commits will be rewritten to have <newbase> as parent\ninstead.	https://git-scm.com/docs/rebase.html
git-rebase --autosquash	A										When the commit log message begins with "squash! …​" (or\n"fixup! …​"), and there is a commit whose title begins with\nthe same …​, automatically modify the todo list of rebase -i\nso that the commit marked for squashing comes right after the\ncommit to be modified, and change the action of the moved\ncommit from pick to squash (or fixup).  Ignores subsequent\n"fixup! " or "squash! " after the first, in case you referred to an\nearlier fixup/squash with git commit --fixup/--squash.	https://git-scm.com/docs/rebase.html
git-rebase --no-autosquash	A										When the commit log message begins with "squash! …​" (or\n"fixup! …​"), and there is a commit whose title begins with\nthe same …​, automatically modify the todo list of rebase -i\nso that the commit marked for squashing comes right after the\ncommit to be modified, and change the action of the moved\ncommit from pick to squash (or fixup).  Ignores subsequent\n"fixup! " or "squash! " after the first, in case you referred to an\nearlier fixup/squash with git commit --fixup/--squash.	https://git-scm.com/docs/rebase.html
git-rebase --autostash	A										Automatically create a temporary stash before the operation\nbegins, and apply it after the operation ends.  This means\nthat you can run rebase on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nrebase might result in non-trivial conflicts.	https://git-scm.com/docs/rebase.html
git-rebase --no-autostash	A										Automatically create a temporary stash before the operation\nbegins, and apply it after the operation ends.  This means\nthat you can run rebase on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nrebase might result in non-trivial conflicts.	https://git-scm.com/docs/rebase.html
git-rebase --no-ff	A										With --interactive, cherry-pick all rebased commits instead of\nfast-forwarding over the unchanged ones.  This ensures that the\nentire history of the rebased branch is composed of new commits.	https://git-scm.com/docs/rebase.html
git-rebase	A										Reapply commits on top of another base tip
<pre><code>git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]\n    [<upstream> [<branch>]]\ngit rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]\n    --root [<branch>]\ngit rebase --continue | --skip | --abort | --edit-todo</pre></code>	https://git-scm.com/docs/rebase.html
git-reflog --all	A										Process the reflogs of all references.	https://git-scm.com/docs/reflog.html
git-reflog --expire=<time>	A										Prune entries older than the specified time. If this option is\nnot specified, the expiration time is taken from the\nconfiguration setting gc.reflogExpire, which in turn\ndefaults to 90 days. --expire=all prunes entries regardless\nof their age; --expire=never turns off pruning of reachable\nentries (but see --expire-unreachable).	https://git-scm.com/docs/reflog.html
git-reflog --expire-unreachable=<time>	A										Prune entries older than <time> that are not reachable from\nthe current tip of the branch. If this option is not\nspecified, the expiration time is taken from the configuration\nsetting gc.reflogExpireUnreachable, which in turn defaults\nto 30 days. --expire-unreachable=all prunes unreachable\nentries regardless of their age; --expire-unreachable=never\nturns off early pruning of unreachable entries (but see\n--expire).	https://git-scm.com/docs/reflog.html
git-reflog --updateref	A										Update the reference to the value of the top reflog entry (i.e.\n<ref>@{0}) if the previous top entry was pruned.  (This\noption is ignored for symbolic references.)	https://git-scm.com/docs/reflog.html
git-reflog --rewrite	A										If a reflog entry’s predecessor is pruned, adjust its "old"\nSHA-1 to be equal to the "new" SHA-1 field of the entry that\nnow precedes it.	https://git-scm.com/docs/reflog.html
git-reflog --stale-fix	A										Prune any reflog entries that point to "broken commits". A\nbroken commit is a commit that is not reachable from any of\nthe reference tips and that refers, directly or indirectly, to\na missing commit, tree, or blob object.	https://git-scm.com/docs/reflog.html
git-reflog -n	A										Do not actually prune any entries; just show what would have\nbeen pruned.	https://git-scm.com/docs/reflog.html
git-reflog --dry-run	A										Do not actually prune any entries; just show what would have\nbeen pruned.	https://git-scm.com/docs/reflog.html
git-reflog --verbose	A										Print extra information on screen.	https://git-scm.com/docs/reflog.html
git-reflog	A										Manage reflog information
<pre><code>git reflog <subcommand> <options></pre></code>	https://git-scm.com/docs/reflog.html
git-remote -v	A										Be a little more verbose and show remote url after name.\nNOTE: This must be placed between remote and subcommand.	https://git-scm.com/docs/remote.html
git-remote --verbose	A										Be a little more verbose and show remote url after name.\nNOTE: This must be placed between remote and subcommand.	https://git-scm.com/docs/remote.html
git-remote	A										Manage set of tracked repositories
<pre><code>git remote [-v | --verbose]\ngit remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=<fetch|push>] <name> <url>\ngit remote rename <old> <new>\ngit remote remove <name>\ngit remote set-head <name> (-a | --auto | -d | --delete | <branch>)\ngit remote set-branches [--add] <name> <branch>…​\ngit remote get-url [--push] [--all] <name>\ngit remote set-url [--push] <name> <newurl> [<oldurl>]\ngit remote set-url --add [--push] <name> <newurl>\ngit remote set-url --delete [--push] <name> <url>\ngit remote [-v | --verbose] show [-n] <name>…​\ngit remote prune [-n | --dry-run] <name>…​\ngit remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)…​]</pre></code>	https://git-scm.com/docs/remote.html
git-request-pull -p	A										Include patch text in the output.	https://git-scm.com/docs/request-pull.html
git-request-pull <start>	A										Commit to start at.  This names a commit that is already in\nthe upstream history.	https://git-scm.com/docs/request-pull.html
git-request-pull <url>	A										The repository URL to be pulled from.	https://git-scm.com/docs/request-pull.html
git-request-pull <end>	A										Commit to end at (defaults to HEAD).  This names the commit\nat the tip of the history you are asking to be pulled.	https://git-scm.com/docs/request-pull.html
git-request-pull	A										Generates a summary of pending changes
<pre><code>git request-pull [-p] <start> <url> [<end>]</pre></code>	https://git-scm.com/docs/request-pull.html
git-reset -q	A										Be quiet, only report errors.	https://git-scm.com/docs/reset.html
git-reset --quiet	A										Be quiet, only report errors.	https://git-scm.com/docs/reset.html
git-reset	A										Reset current HEAD to the specified state
<pre><code>git reset [-q] [<tree-ish>] [--] <paths>…​\ngit reset (--patch | -p) [<tree-ish>] [--] [<paths>…​]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]</pre></code>	https://git-scm.com/docs/reset.html
git-rev-list -<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list -n <number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-count=<number>	A										Limit the number of commits to output.	https://git-scm.com/docs/rev-list.html
git-rev-list --skip=<number>	A										Skip number commits before starting to show the commit output.	https://git-scm.com/docs/rev-list.html
git-rev-list --since=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --after=<date>	A										Show commits more recent than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --until=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --before=<date>	A										Show commits older than a specific date.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-age=<timestamp>	A										Limit the commits output to specified time range.	https://git-scm.com/docs/rev-list.html
git-rev-list --min-age=<timestamp>	A										Limit the commits output to specified time range.	https://git-scm.com/docs/rev-list.html
git-rev-list --author=<pattern>	A										Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/rev-list.html
git-rev-list --committer=<pattern>	A										Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>).	https://git-scm.com/docs/rev-list.html
git-rev-list --grep-reflog=<pattern>	A										Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog, commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use.	https://git-scm.com/docs/rev-list.html
git-rev-list --grep=<pattern>	A										Limit the commits output to ones with log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern>, commits whose message\nmatches any of the given patterns are chosen (but see\n--all-match).	https://git-scm.com/docs/rev-list.html
git-rev-list --all-match	A										Limit the commits output to ones that match all given --grep,\ninstead of ones that match at least one.	https://git-scm.com/docs/rev-list.html
git-rev-list --invert-grep	A										Limit the commits output to ones with log message that do not\nmatch the pattern specified with --grep=<pattern>.	https://git-scm.com/docs/rev-list.html
git-rev-list -i	A										Match the regular expression limiting patterns without regard to letter\ncase.	https://git-scm.com/docs/rev-list.html
git-rev-list --regexp-ignore-case	A										Match the regular expression limiting patterns without regard to letter\ncase.	https://git-scm.com/docs/rev-list.html
git-rev-list --basic-regexp	A										Consider the limiting patterns to be basic regular expressions;\nthis is the default.	https://git-scm.com/docs/rev-list.html
git-rev-list -E	A										Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions.	https://git-scm.com/docs/rev-list.html
git-rev-list --extended-regexp	A										Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions.	https://git-scm.com/docs/rev-list.html
git-rev-list -F	A										Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression).	https://git-scm.com/docs/rev-list.html
git-rev-list --fixed-strings	A										Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression).	https://git-scm.com/docs/rev-list.html
git-rev-list --perl-regexp	A										Consider the limiting patterns to be Perl-compatible regular expressions.\nRequires libpcre to be compiled in.	https://git-scm.com/docs/rev-list.html
git-rev-list --remove-empty	A										Stop when a given path disappears from the tree.	https://git-scm.com/docs/rev-list.html
git-rev-list --merges	A										Print only merge commits. This is exactly the same as --min-parents=2.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-merges	A										Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1.	https://git-scm.com/docs/rev-list.html
git-rev-list --min-parents=<number>	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --max-parents=<number>	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-min-parents	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-max-parents	A										Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.	https://git-scm.com/docs/rev-list.html
git-rev-list --first-parent	A										Follow only the first parent commit upon seeing a merge\ncommit.  This option can give a better overview when\nviewing the evolution of a particular topic branch,\nbecause merges into a topic branch tend to be only about\nadjusting to updated upstream from time to time, and\nthis option allows you to ignore the individual commits\nbrought in to your history by such a merge. Cannot be\ncombined with --bisect.	https://git-scm.com/docs/rev-list.html
git-rev-list --not	A										Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not.	https://git-scm.com/docs/rev-list.html
git-rev-list --all	A										Pretend as if all the refs in refs/ are listed on the\ncommand line as <commit>.	https://git-scm.com/docs/rev-list.html
git-rev-list --branches[=<pattern>]	A										Pretend as if all the refs in refs/heads are listed\non the command line as <commit>. If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ?,\n*, or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --tags[=<pattern>]	A										Pretend as if all the refs in refs/tags are listed\non the command line as <commit>. If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ?, *,\nor [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --remotes[=<pattern>]	A										Pretend as if all the refs in refs/remotes are listed\non the command line as <commit>. If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ?, *, or [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --glob=<glob-pattern>	A										Pretend as if all the refs matching shell glob <glob-pattern>\nare listed on the command line as <commit>. Leading refs/,\nis automatically prepended if missing. If pattern lacks ?, *,\nor [, /* at the end is implied.	https://git-scm.com/docs/rev-list.html
git-rev-list --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).	https://git-scm.com/docs/rev-list.html
git-rev-list --reflog	A										Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit>.	https://git-scm.com/docs/rev-list.html
git-rev-list --ignore-missing	A										Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given.	https://git-scm.com/docs/rev-list.html
git-rev-list --stdin	A										In addition to the <commit> listed on the command\nline, read them from the standard input. If a -- separator is\nseen, stop reading commits and start reading paths to limit the\nresult.	https://git-scm.com/docs/rev-list.html
git-rev-list --quiet	A										Don’t print anything to standard output.  This form\nis primarily meant to allow the caller to\ntest the exit status to see if a range of objects is fully\nconnected (or not).  It is faster than redirecting stdout\nto /dev/null as the output does not have to be formatted.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry-mark	A										Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with +.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry-pick	A										Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference.	https://git-scm.com/docs/rev-list.html
git-rev-list --left-only	A										List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.	https://git-scm.com/docs/rev-list.html
git-rev-list --right-only	A										List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.	https://git-scm.com/docs/rev-list.html
git-rev-list --cherry	A										A synonym for --right-only --cherry-mark --no-merges; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with\ngit log --cherry upstream...mybranch, similar to\ngit cherry upstream mybranch.	https://git-scm.com/docs/rev-list.html
git-rev-list -g	A										Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).	https://git-scm.com/docs/rev-list.html
git-rev-list --walk-reflogs	A										Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).	https://git-scm.com/docs/rev-list.html
git-rev-list --merge	A										After a failed merge, show refs that touch files having a\nconflict and don’t exist on all heads to merge.	https://git-scm.com/docs/rev-list.html
git-rev-list --boundary	A										Output excluded boundary commits. Boundary commits are\nprefixed with -.	https://git-scm.com/docs/rev-list.html
git-rev-list --use-bitmap-index	A										Try to speed up the traversal using the pack bitmap index (if\none is available). Note that when traversing with --objects,\ntrees and blobs will not have their associated path printed.	https://git-scm.com/docs/rev-list.html
git-rev-list --progress=<header>	A										Show progress reports on stderr as objects are considered. The\n<header> text will be printed with each progress update.	https://git-scm.com/docs/rev-list.html
git-rev-list <paths>	A										Commits modifying the given <paths> are selected.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-by-decoration	A										Commits that are referred by some branch or tag are selected.	https://git-scm.com/docs/rev-list.html
git-rev-list Default mode	A										Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history	A										Same as the default mode, but does not prune some history.	https://git-scm.com/docs/rev-list.html
git-rev-list --dense	A										Only the selected commits are shown, plus some to have a\nmeaningful history.	https://git-scm.com/docs/rev-list.html
git-rev-list --sparse	A										All commits in the simplified history are shown.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-merges	A										Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge.	https://git-scm.com/docs/rev-list.html
git-rev-list --ancestry-path	A										When given a range of commits to display (e.g. commit1..commit2\nor commit2 ^commit1), only display commits that exist\ndirectly on the ancestry chain between the commit1 and\ncommit2, i.e. commits that are both descendants of commit1,\nand ancestors of commit2.	https://git-scm.com/docs/rev-list.html
git-rev-list Default mode	A										Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents.	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history without parent rewriting	A										This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get	https://git-scm.com/docs/rev-list.html
git-rev-list --full-history with parent rewriting	A										Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below).	https://git-scm.com/docs/rev-list.html
git-rev-list --dense	A										Commits that are walked are included if they are not TREESAME\nto any parent.	https://git-scm.com/docs/rev-list.html
git-rev-list --sparse	A										All commits that are walked are included.	https://git-scm.com/docs/rev-list.html
git-rev-list --simplify-merges	A										First, build a history graph in the same way that\n--full-history with parent rewriting does (see above).	https://git-scm.com/docs/rev-list.html
git-rev-list --ancestry-path	A										Limit the displayed commits to those directly on the ancestry\nchain between the “from” and “to” commits in the given commit\nrange. I.e. only display commits that are ancestor of the “to”\ncommit and descendants of the “from” commit.	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect	A										Limit output to the one commit object which is roughly halfway between\nincluded and excluded commits. Note that the bad bisection ref\nrefs/bisect/bad is added to the included commits (if it\nexists) and the good bisection refs refs/bisect/good-* are\nadded to the excluded commits (if they exist). Thus, supposing there\nare no refs in refs/bisect/, if	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect-vars	A										This calculates the same as --bisect, except that refs in\nrefs/bisect/ are not used, and except that this outputs\ntext ready to be eval’ed by the shell. These lines will assign the\nname of the midpoint revision to the variable bisect_rev, and the\nexpected number of commits to be tested after bisect_rev is tested\nto bisect_nr, the expected number of commits to be tested if\nbisect_rev turns out to be good to bisect_good, the expected\nnumber of commits to be tested if bisect_rev turns out to be bad to\nbisect_bad, and the number of commits we are bisecting right now to\nbisect_all.	https://git-scm.com/docs/rev-list.html
git-rev-list --bisect-all	A										This outputs all the commit objects between the included and excluded\ncommits, ordered by their distance to the included and excluded\ncommits. Refs in refs/bisect/ are not used. The farthest\nfrom them is displayed first. (This is the only one displayed by\n--bisect.)	https://git-scm.com/docs/rev-list.html
git-rev-list --date-order	A										Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order.	https://git-scm.com/docs/rev-list.html
git-rev-list --author-date-order	A										Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order.	https://git-scm.com/docs/rev-list.html
git-rev-list --topo-order	A										Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed.	https://git-scm.com/docs/rev-list.html
git-rev-list --reverse	A										Output the commits in reverse order.\nCannot be combined with --walk-reflogs.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects	A										Print the object IDs of any object referenced by the listed\ncommits.  --objects foo ^bar thus means “send me\nall object IDs which I need to download if I have the commit\nobject bar but not foo”.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects-edge	A										Similar to --objects, but also print the IDs of excluded\ncommits prefixed with a “-” character.  This is used by\ngit-pack-objects[1] to build a “thin” pack, which records\nobjects in deltified form based on objects contained in these\nexcluded commits to reduce network traffic.	https://git-scm.com/docs/rev-list.html
git-rev-list --objects-edge-aggressive	A										Similar to --objects-edge, but it tries harder to find excluded\ncommits at the cost of increased time.  This is used instead of\n--objects-edge to build “thin” packs for shallow repositories.	https://git-scm.com/docs/rev-list.html
git-rev-list --indexed-objects	A										Pretend as if all trees and blobs used by the index are listed\non the command line.  Note that you probably want to use\n--objects, too.	https://git-scm.com/docs/rev-list.html
git-rev-list --unpacked	A										Only useful with --objects; print the object IDs that are not\nin packs.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-walk[=(sorted|unsorted)]	A										Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument\nunsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph.	https://git-scm.com/docs/rev-list.html
git-rev-list --do-walk	A										Overrides a previous --no-walk.	https://git-scm.com/docs/rev-list.html
git-rev-list --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/rev-list.html
git-rev-list --format=<format>	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/rev-list.html
git-rev-list --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object\nname, show only a partial prefix.  Non default number of\ndigits can be specified with "--abbrev=<n>" (which also modifies\ndiff output, if it is displayed).	https://git-scm.com/docs/rev-list.html
git-rev-list --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit and those options which imply it such as\n"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/rev-list.html
git-rev-list --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"\nused together.	https://git-scm.com/docs/rev-list.html
git-rev-list --encoding=<encoding>	A										The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output.	https://git-scm.com/docs/rev-list.html
git-rev-list --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/rev-list.html
git-rev-list --show-signature	A										Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output.	https://git-scm.com/docs/rev-list.html
git-rev-list --relative-date	A										Synonym for --date=relative.	https://git-scm.com/docs/rev-list.html
git-rev-list --date=<format>	A										Only takes effect for dates shown in human-readable format, such\nas when using --pretty. log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g.,\niso-local), the user’s local time zone is used instead.	https://git-scm.com/docs/rev-list.html
git-rev-list --header	A										Print the contents of the commit in raw-format; each record is\nseparated with a NUL character.	https://git-scm.com/docs/rev-list.html
git-rev-list --parents	A										Print also the parents of the commit (in the form "commit parent…​").\nAlso enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/rev-list.html
git-rev-list --children	A										Print also the children of the commit (in the form "commit child…​").\nAlso enables parent rewriting, see History Simplification below.	https://git-scm.com/docs/rev-list.html
git-rev-list --timestamp	A										Print the raw commit timestamp.	https://git-scm.com/docs/rev-list.html
git-rev-list --left-right	A										Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with >.  If combined with --boundary, those\ncommits are prefixed with -.	https://git-scm.com/docs/rev-list.html
git-rev-list --graph	A										Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk.	https://git-scm.com/docs/rev-list.html
git-rev-list --show-linear-break[=<barrier>]	A										When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one.	https://git-scm.com/docs/rev-list.html
git-rev-list --count	A										Print a number stating how many commits would have been\nlisted, and suppress all other output.  When used together\nwith --left-right, instead print the counts for left and\nright commits, separated by a tab. When used together with\n--cherry-mark, omit patch equivalent commits from these\ncounts and print the count for equivalent commits separated\nby a tab.	https://git-scm.com/docs/rev-list.html
git-rev-list	A										Lists commit objects in reverse chronological order
<pre><code>git rev-list [ --max-count=<number> ]\n         [ --skip=<number> ]\n         [ --max-age=<timestamp> ]\n         [ --min-age=<timestamp> ]\n         [ --sparse ]\n         [ --merges ]\n         [ --no-merges ]\n         [ --min-parents=<number> ]\n         [ --no-min-parents ]\n         [ --max-parents=<number> ]\n         [ --no-max-parents ]\n         [ --first-parent ]\n         [ --remove-empty ]\n         [ --full-history ]\n         [ --not ]\n         [ --all ]\n         [ --branches[=<pattern>] ]\n         [ --tags[=<pattern>] ]\n         [ --remotes[=<pattern>] ]\n         [ --glob=<glob-pattern> ]\n         [ --ignore-missing ]\n         [ --stdin ]\n         [ --quiet ]\n         [ --topo-order ]\n         [ --parents ]\n         [ --timestamp ]\n         [ --left-right ]\n         [ --left-only ]\n         [ --right-only ]\n         [ --cherry-mark ]\n         [ --cherry-pick ]\n         [ --encoding=<encoding> ]\n         [ --(author|committer|grep)=<pattern> ]\n         [ --regexp-ignore-case | -i ]\n         [ --extended-regexp | -E ]\n         [ --fixed-strings | -F ]\n         [ --date=<format>]\n         [ [ --objects | --objects-edge | --objects-edge-aggressive ]\n           [ --unpacked ] ]\n         [ --pretty | --header ]\n         [ --bisect ]\n         [ --bisect-vars ]\n         [ --bisect-all ]\n         [ --merge ]\n         [ --reverse ]\n         [ --walk-reflogs ]\n         [ --no-walk ] [ --do-walk ]\n         [ --count ]\n         [ --use-bitmap-index ]\n         <commit>…​ [ -- <paths>…​ ]</pre></code>	https://git-scm.com/docs/rev-list.html
git-rev-parse --parseopt	A										Use git rev-parse in option parsing mode (see PARSEOPT section below).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --sq-quote	A										Use git rev-parse in shell quoting mode (see SQ-QUOTE\nsection below). In contrast to the --sq option below, this\nmode does only quoting. Nothing else is done to command input.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --keep-dashdash	A										Only meaningful in --parseopt mode. Tells the option parser to echo\nout the first -- met instead of skipping it.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --stop-at-non-option	A										Only meaningful in --parseopt mode.  Lets the option parser stop at\nthe first non-option argument.  This can be used to parse sub-commands\nthat take options themselves.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --stuck-long	A										Only meaningful in --parseopt mode. Output the options in their\nlong form if available, and with their arguments stuck.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --revs-only	A										Do not output flags and parameters not meant for\ngit rev-list command.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --no-revs	A										Do not output flags and parameters meant for\ngit rev-list command.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --flags	A										Do not output non-flag parameters.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --no-flags	A										Do not output flag parameters.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --default <arg>	A										If there is no parameter given by the user, use <arg>\ninstead.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --prefix <arg>	A										Behave as if git rev-parse was invoked from the <arg>\nsubdirectory of the working tree.  Any relative filenames are\nresolved as if they are prefixed by <arg> and will be printed\nin that form.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --verify	A										Verify that exactly one parameter is provided, and that it\ncan be turned into a raw 20-byte SHA-1 that can be used to\naccess the object database. If so, emit it to the standard\noutput; otherwise, error out.	https://git-scm.com/docs/rev-parse.html
git-rev-parse -q	A										Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --quiet	A										Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --sq	A										Usually the output is made one line per flag and\nparameter.  This option makes output a single line,\nproperly quoted for consumption by shell.  Useful when\nyou expect your parameter to contain whitespaces and\nnewlines (e.g. when using pickaxe -S with\ngit diff-*). In contrast to the --sq-quote option,\nthe command input is still interpreted as usual.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --not	A										When showing object names, prefix them with ^ and\nstrip ^ prefix from the object names that already have\none.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --abbrev-ref[=(strict|loose)]	A										A non-ambiguous short name of the objects name.\nThe option core.warnAmbiguousRefs is used to select the strict\nabbreviation mode.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --short	A										Instead of outputting the full SHA-1 values of object names try to\nabbreviate them to a shorter unique name. When no length is specified\n7 is used. The minimum length is 4.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --short=number	A										Instead of outputting the full SHA-1 values of object names try to\nabbreviate them to a shorter unique name. When no length is specified\n7 is used. The minimum length is 4.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --symbolic	A										Usually the object names are output in SHA-1 form (with\npossible ^ prefix); this option makes them output in a\nform as close to the original input as possible.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --symbolic-full-name	A										This is similar to --symbolic, but it omits input that\nare not refs (i.e. branch or tag names; or more\nexplicitly disambiguating "heads/master" form, when you\nwant to name the "master" branch when there is an\nunfortunately named tag "master"), and show them as full\nrefnames (e.g. "refs/heads/master").	https://git-scm.com/docs/rev-parse.html
git-rev-parse --all	A										Show all refs found in refs/.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --branches[=pattern]	A										Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --tags[=pattern]	A										Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --remotes[=pattern]	A										Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --glob=pattern	A										Show all refs matching the shell glob pattern pattern. If\nthe pattern does not start with refs/, this is automatically\nprepended.  If the pattern does not contain a globbing\ncharacter (?, *, or [), it is turned into a prefix\nmatch by appending /*.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --exclude=<glob-pattern>	A										Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --disambiguate=<prefix>	A										Show every object whose name begins with the given prefix.\nThe <prefix> must be at least 4 hexadecimal digits long to\navoid listing each and every object in the repository by\nmistake.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --local-env-vars	A										List the GIT_* environment variables that are local to the\nrepository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).\nOnly the names of the variables are listed, not their value,\neven if they are set.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-dir	A										Show $GIT_DIR if defined. Otherwise show the path to\nthe .git directory. The path shown, when relative, is\nrelative to the current working directory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-common-dir	A										Show $GIT_COMMON_DIR if defined, else $GIT_DIR.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-inside-git-dir	A										When the current working directory is below the repository\ndirectory print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-inside-work-tree	A										When the current working directory is inside the work tree of the\nrepository print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --is-bare-repository	A										When the repository is bare print "true", otherwise "false".	https://git-scm.com/docs/rev-parse.html
git-rev-parse --resolve-git-dir <path>	A										Check if <path> is a valid repository or a gitfile that\npoints at a valid repository, and print the location of the\nrepository.  If <path> is a gitfile then the resolved path\nto the real repository is printed.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --git-path <path>	A										Resolve "$GIT_DIR/<path>" and takes other path relocation\nvariables such as $GIT_OBJECT_DIRECTORY,\n$GIT_INDEX_FILE…​ into account. For example, if\n$GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse\n--git-path objects/abc" returns /foo/bar/abc.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-cdup	A										When the command is invoked from a subdirectory, show the\npath of the top-level directory relative to the current\ndirectory (typically a sequence of "../", or an empty string).	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-prefix	A										When the command is invoked from a subdirectory, show the\npath of the current directory relative to the top-level\ndirectory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --show-toplevel	A										Show the absolute path of the top-level directory.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --shared-index-path	A										Show the path to the shared index file in split index mode, or\nempty if not in split-index mode.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --since=datestring	A										Parse the date string, and output the corresponding\n--max-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --after=datestring	A										Parse the date string, and output the corresponding\n--max-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --until=datestring	A										Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse --before=datestring	A										Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list.	https://git-scm.com/docs/rev-parse.html
git-rev-parse <args>…​	A										Flags and parameters to be parsed.	https://git-scm.com/docs/rev-parse.html
git-rev-parse	A										Pick out and massage parameters
<pre><code>git rev-parse [ --option ] <args>…​</pre></code>	https://git-scm.com/docs/rev-parse.html
git-revert <commit>…​	A										Commits to revert.\nFor a more complete list of ways to spell commit names, see\ngitrevisions[7].\nSets of commits can also be given but no traversal is done by\ndefault, see git-rev-list[1] and its --no-walk\noption.	https://git-scm.com/docs/revert.html
git-revert -e	A										With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal.	https://git-scm.com/docs/revert.html
git-revert --edit	A										With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal.	https://git-scm.com/docs/revert.html
git-revert -m parent-number	A										Usually you cannot revert a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows revert to reverse the change\nrelative to the specified parent.	https://git-scm.com/docs/revert.html
git-revert --mainline parent-number	A										Usually you cannot revert a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows revert to reverse the change\nrelative to the specified parent.	https://git-scm.com/docs/revert.html
git-revert --no-edit	A										With this option, git revert will not start the commit\nmessage editor.	https://git-scm.com/docs/revert.html
git-revert -n	A										Usually the command automatically creates some commits with\ncommit log messages stating which commits were\nreverted.  This flag applies the changes necessary\nto revert the named commits to your working tree\nand the index, but does not make the commits.  In addition,\nwhen this option is used, your index does not have to match\nthe HEAD commit.  The revert is done against the\nbeginning state of your index.	https://git-scm.com/docs/revert.html
git-revert --no-commit	A										Usually the command automatically creates some commits with\ncommit log messages stating which commits were\nreverted.  This flag applies the changes necessary\nto revert the named commits to your working tree\nand the index, but does not make the commits.  In addition,\nwhen this option is used, your index does not have to match\nthe HEAD commit.  The revert is done against the\nbeginning state of your index.	https://git-scm.com/docs/revert.html
git-revert -S[<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/revert.html
git-revert --gpg-sign[=<keyid>]	A										GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space.	https://git-scm.com/docs/revert.html
git-revert -s	A										Add Signed-off-by line at the end of the commit message.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/revert.html
git-revert --signoff	A										Add Signed-off-by line at the end of the commit message.\nSee the signoff option in git-commit[1] for more information.	https://git-scm.com/docs/revert.html
git-revert --strategy=<strategy>	A										Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge[1]\nfor details.	https://git-scm.com/docs/revert.html
git-revert -X<option>	A										Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/revert.html
git-revert --strategy-option=<option>	A										Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details.	https://git-scm.com/docs/revert.html
git-revert	A										Revert some existing commits
<pre><code>git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>…​\ngit revert --continue\ngit revert --quit\ngit revert --abort</pre></code>	https://git-scm.com/docs/revert.html
git-rm <file>…​	A										Files to remove.  Fileglobs (e.g. *.c) can be given to\nremove all matching files.  If you want Git to expand\nfile glob characters, you may need to shell-escape them.\nA leading directory name\n(e.g. dir to remove dir/file1 and dir/file2) can be\ngiven to remove all files in the directory, and recursively\nall sub-directories,\nbut this requires the -r option to be explicitly given.	https://git-scm.com/docs/rm.html
git-rm -f	A										Override the up-to-date check.	https://git-scm.com/docs/rm.html
git-rm --force	A										Override the up-to-date check.	https://git-scm.com/docs/rm.html
git-rm -n	A										Don’t actually remove any file(s).  Instead, just show\nif they exist in the index and would otherwise be removed\nby the command.	https://git-scm.com/docs/rm.html
git-rm --dry-run	A										Don’t actually remove any file(s).  Instead, just show\nif they exist in the index and would otherwise be removed\nby the command.	https://git-scm.com/docs/rm.html
git-rm -r	A										Allow recursive removal when a leading directory name is\ngiven.	https://git-scm.com/docs/rm.html
git-rm --	A										This option can be used to separate command-line options from\nthe list of files, (useful when filenames might be mistaken\nfor command-line options).	https://git-scm.com/docs/rm.html
git-rm --cached	A										Use this option to unstage and remove paths only from the index.\nWorking tree files, whether modified or not, will be\nleft alone.	https://git-scm.com/docs/rm.html
git-rm --ignore-unmatch	A										Exit with a zero status even if no files matched.	https://git-scm.com/docs/rm.html
git-rm -q	A										git rm normally outputs one line (in the form of an rm command)\nfor each file removed. This option suppresses that output.	https://git-scm.com/docs/rm.html
git-rm --quiet	A										git rm normally outputs one line (in the form of an rm command)\nfor each file removed. This option suppresses that output.	https://git-scm.com/docs/rm.html
git-rm	A										Remove files from the working tree and from the index
<pre><code>git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] <file>…​</pre></code>	https://git-scm.com/docs/rm.html
git-send-email --annotate	A										Review and edit each patch you’re about to send. Default is the value\nof sendemail.annotate. See the CONFIGURATION section for\nsendemail.multiEdit.	https://git-scm.com/docs/send-email.html
git-send-email --bcc=<address>,…​	A										Specify a "Bcc:" value for each email. Default is the value of\nsendemail.bcc.	https://git-scm.com/docs/send-email.html
git-send-email --cc=<address>,…​	A										Specify a starting "Cc:" value for each email.\nDefault is the value of sendemail.cc.	https://git-scm.com/docs/send-email.html
git-send-email --compose	A										Invoke a text editor (see GIT_EDITOR in git-var[1])\nto edit an introductory message for the patch series.	https://git-scm.com/docs/send-email.html
git-send-email --from=<address>	A										Specify the sender of the emails.  If not specified on the command line,\nthe value of the sendemail.from configuration option is used.  If\nneither the command-line option nor sendemail.from are set, then the\nuser will be prompted for the value.  The default for the prompt will be\nthe value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not\nset, as returned by "git var -l".	https://git-scm.com/docs/send-email.html
git-send-email --in-reply-to=<identifier>	A										Make the first mail (or all the mails with --no-thread) appear as a\nreply to the given Message-Id, which avoids breaking threads to\nprovide a new patch series.\nThe second and subsequent emails will be sent as replies according to\nthe --[no]-chain-reply-to setting.	https://git-scm.com/docs/send-email.html
git-send-email --subject=<string>	A										Specify the initial subject of the email thread.\nOnly necessary if --compose is also set.  If --compose\nis not set, this will be prompted for.	https://git-scm.com/docs/send-email.html
git-send-email --to=<address>,…​	A										Specify the primary recipient of the emails generated. Generally, this\nwill be the upstream maintainer of the project involved. Default is the\nvalue of the sendemail.to configuration value; if that is unspecified,\nand --to-cmd is not specified, this will be prompted for.	https://git-scm.com/docs/send-email.html
git-send-email --8bit-encoding=<encoding>	A										When encountering a non-ASCII message or subject that does not\ndeclare its encoding, add headers/quoting to indicate it is\nencoded in <encoding>.  Default is the value of the\nsendemail.assume8bitEncoding; if that is unspecified, this\nwill be prompted for if any non-ASCII files are encountered.	https://git-scm.com/docs/send-email.html
git-send-email --compose-encoding=<encoding>	A										Specify encoding of compose message. Default is the value of the\nsendemail.composeencoding; if that is unspecified, UTF-8 is assumed.	https://git-scm.com/docs/send-email.html
git-send-email --transfer-encoding=(7bit|8bit|quoted-printable|base64)	A										Specify the transfer encoding to be used to send the message over SMTP.\n7bit will fail upon encountering a non-ASCII message.  quoted-printable\ncan be useful when the repository contains files that contain carriage\nreturns, but makes the raw patch email file (as saved from a MUA) much\nharder to inspect manually.  base64 is even more fool proof, but also\neven more opaque.  Default is the value of the sendemail.transferEncoding\nconfiguration value; if that is unspecified, git will use 8bit and not\nadd a Content-Transfer-Encoding header.	https://git-scm.com/docs/send-email.html
git-send-email --xmailer	A										Add (or prevent adding) the "X-Mailer:" header.  By default,\nthe header is added, but it can be turned off by setting the\nsendemail.xmailer configuration variable to false.	https://git-scm.com/docs/send-email.html
git-send-email --no-xmailer	A										Add (or prevent adding) the "X-Mailer:" header.  By default,\nthe header is added, but it can be turned off by setting the\nsendemail.xmailer configuration variable to false.	https://git-scm.com/docs/send-email.html
git-send-email --envelope-sender=<address>	A										Specify the envelope sender used to send the emails.\nThis is useful if your default address is not the address that is\nsubscribed to a list. In order to use the From address, set the\nvalue to "auto". If you use the sendmail binary, you must have\nsuitable privileges for the -f parameter.  Default is the value of the\nsendemail.envelopeSender configuration variable; if that is\nunspecified, choosing the envelope sender is left to your MTA.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-encryption=<encryption>	A										Specify the encryption to use, either ssl or tls.  Any other\nvalue reverts to plain SMTP.  Default is the value of\nsendemail.smtpEncryption.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-domain=<FQDN>	A										Specifies the Fully Qualified Domain Name (FQDN) used in the\nHELO/EHLO command to the SMTP server.  Some servers require the\nFQDN to match your IP address.  If not set, git send-email attempts\nto determine your FQDN automatically.  Default is the value of\nsendemail.smtpDomain.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-auth=<mechanisms>	A										Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting\nforces using only the listed mechanisms. Example:	https://git-scm.com/docs/send-email.html
git-send-email --smtp-pass[=<password>]	A										Password for SMTP-AUTH. The argument is optional: If no\nargument is specified, then the empty string is used as\nthe password. Default is the value of sendemail.smtpPass,\nhowever --smtp-pass always overrides this value.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server=<host>	A										If set, specifies the outgoing SMTP server to use (e.g.\nsmtp.example.com or a raw IP address).  Alternatively it can\nspecify a full pathname of a sendmail-like program instead;\nthe program must support the -i option.  Default value can\nbe specified by the sendemail.smtpServer configuration\noption; the built-in default is /usr/sbin/sendmail or\n/usr/lib/sendmail if such program is available, or\nlocalhost otherwise.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server-port=<port>	A										Specifies a port different from the default port (SMTP\nservers typically listen to smtp port 25, but may also listen to\nsubmission port 587, or the common SSL smtp port 465);\nsymbolic port names (e.g. "submission" instead of 587)\nare also accepted. The port can also be set with the\nsendemail.smtpServerPort configuration variable.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-server-option=<option>	A										If set, specifies the outgoing SMTP server option to use.\nDefault value can be specified by the sendemail.smtpServerOption\nconfiguration option.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-ssl	A										Legacy alias for --smtp-encryption ssl.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-ssl-cert-path	A										Path to a store of trusted CA certificates for SMTP SSL/TLS\ncertificate validation (either a directory that has been processed\nby c_rehash, or a single file containing one or more PEM format\ncertificates concatenated together: see verify(1) -CAfile and\n-CApath for more information on these). Set it to an empty string\nto disable certificate verification. Defaults to the value of the\nsendemail.smtpsslcertpath configuration variable, if set, or the\nbacking SSL library’s compiled-in default otherwise (which should\nbe the best choice on most platforms).	https://git-scm.com/docs/send-email.html
git-send-email --smtp-user=<user>	A										Username for SMTP-AUTH. Default is the value of sendemail.smtpUser;\nif a username is not specified (with --smtp-user or sendemail.smtpUser),\nthen authentication is not attempted.	https://git-scm.com/docs/send-email.html
git-send-email --smtp-debug=0|1	A										Enable (1) or disable (0) debug output. If enabled, SMTP\ncommands and replies will be printed. Useful to debug TLS\nconnection and authentication problems.	https://git-scm.com/docs/send-email.html
git-send-email --to-cmd=<command>	A										Specify a command to execute once per patch file which\nshould generate patch file specific "To:" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.tocmd configuration value.	https://git-scm.com/docs/send-email.html
git-send-email --cc-cmd=<command>	A										Specify a command to execute once per patch file which\nshould generate patch file specific "Cc:" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.ccCmd configuration value.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]chain-reply-to	A										If this is set, each email will be sent as a reply to the previous\nemail sent.  If disabled with "--no-chain-reply-to", all emails after\nthe first will be sent as replies to the first email sent.  When using\nthis, it is recommended that the first file given be an overview of the\nentire patch series. Disabled by default, but the sendemail.chainReplyTo\nconfiguration variable can be used to enable it.	https://git-scm.com/docs/send-email.html
git-send-email --identity=<identity>	A										A configuration identity. When given, causes values in the\nsendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]signed-off-by-cc	A										If this is set, add emails found in Signed-off-by: or Cc: lines to the\ncc list. Default is the value of sendemail.signedoffbycc configuration\nvalue; if that is unspecified, default to --signed-off-by-cc.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]cc-cover	A										If this is set, emails found in Cc: headers in the first patch of\nthe series (typically the cover letter) are added to the cc list\nfor each email set. Default is the value of sendemail.cccover\nconfiguration value; if that is unspecified, default to --no-cc-cover.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]to-cover	A										If this is set, emails found in To: headers in the first patch of\nthe series (typically the cover letter) are added to the to list\nfor each email set. Default is the value of sendemail.tocover\nconfiguration value; if that is unspecified, default to --no-to-cover.	https://git-scm.com/docs/send-email.html
git-send-email --suppress-cc=<category>	A										Specify an additional category of recipients to suppress the\nauto-cc of:	https://git-scm.com/docs/send-email.html
git-send-email --[no-]suppress-from	A										If this is set, do not add the From: address to the cc: list.\nDefault is the value of sendemail.suppressFrom configuration\nvalue; if that is unspecified, default to --no-suppress-from.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]thread	A										If this is set, the In-Reply-To and References headers will be\nadded to each email sent.  Whether each mail refers to the\nprevious email (deep threading per git format-patch\nwording) or to the first email (shallow threading) is\ngoverned by "--[no-]chain-reply-to".	https://git-scm.com/docs/send-email.html
git-send-email --confirm=<mode>	A										Confirm just before sending:	https://git-scm.com/docs/send-email.html
git-send-email --dry-run	A										Do everything except actually send the emails.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]format-patch	A										When an argument may be understood either as a reference or as a file name,\nchoose to understand it as a format-patch argument (--format-patch)\nor as a file name (--no-format-patch). By default, when such a conflict\noccurs, git send-email will fail.	https://git-scm.com/docs/send-email.html
git-send-email --quiet	A										Make git-send-email less verbose.  One line per email should be\nall that is output.	https://git-scm.com/docs/send-email.html
git-send-email --[no-]validate	A										Perform sanity checks on patches.\nCurrently, validation means the following:	https://git-scm.com/docs/send-email.html
git-send-email --force	A										Send emails even if safety checks would prevent it.	https://git-scm.com/docs/send-email.html
git-send-email --dump-aliases	A										Instead of the normal operation, dump the shorthand alias names from\nthe configured alias file(s), one per line in alphabetical order. Note,\nthis only includes the alias name and not its expanded email addresses.\nSee sendemail.aliasesfile for more information about aliases.	https://git-scm.com/docs/send-email.html
git-send-email	A										Send a collection of patches as emails
<pre><code>git send-email [options] <file|directory|rev-list options>…​\ngit send-email --dump-aliases</pre></code>	https://git-scm.com/docs/send-email.html
git-shortlog -n	A										Sort output according to the number of commits per author instead\nof author alphabetic order.	https://git-scm.com/docs/shortlog.html
git-shortlog --numbered	A										Sort output according to the number of commits per author instead\nof author alphabetic order.	https://git-scm.com/docs/shortlog.html
git-shortlog -s	A										Suppress commit description and provide a commit count summary only.	https://git-scm.com/docs/shortlog.html
git-shortlog --summary	A										Suppress commit description and provide a commit count summary only.	https://git-scm.com/docs/shortlog.html
git-shortlog -e	A										Show the email address of each author.	https://git-scm.com/docs/shortlog.html
git-shortlog --email	A										Show the email address of each author.	https://git-scm.com/docs/shortlog.html
git-shortlog --format[=<format>]	A										Instead of the commit subject, use some other information to\ndescribe each commit.  <format> can be any string accepted\nby the --format option of git log, such as * [%h] %s.\n(See the "PRETTY FORMATS" section of git-log[1].)	https://git-scm.com/docs/shortlog.html
git-shortlog -w[<width>[,<indent1>[,<indent2>]]]	A										Linewrap the output by wrapping each line at width.  The first\nline of each entry is indented by indent1 spaces, and the second\nand subsequent lines are indented by indent2 spaces. width,\nindent1, and indent2 default to 76, 6 and 9 respectively.	https://git-scm.com/docs/shortlog.html
git-shortlog <revision range>	A										Show only commits in the specified revision range.  When no\n<revision range> is specified, it defaults to HEAD (i.e. the\nwhole history leading to the current commit).  origin..HEAD\nspecifies all the commits reachable from the current commit\n(i.e. HEAD), but not from origin. For a complete list of\nways to spell <revision range>, see the "Specifying Ranges"\nsection of gitrevisions[7].	https://git-scm.com/docs/shortlog.html
git-shortlog [\--] <path>…​	A										Consider only commits that are enough to explain how the files\nthat match the specified paths came to be.	https://git-scm.com/docs/shortlog.html
git-shortlog	A										Summarize git log output
<pre><code>git log --pretty=short | git shortlog [<options>]\ngit shortlog [<options>] [<revision range>] [[\--] <path>…​]</pre></code>	https://git-scm.com/docs/shortlog.html
git-show-ref --head	A										Show the HEAD reference, even if it would normally be filtered out.	https://git-scm.com/docs/show-ref.html
git-show-ref --tags	A										Limit to "refs/heads" and "refs/tags", respectively.  These options\nare not mutually exclusive; when given both, references stored in\n"refs/heads" and "refs/tags" are displayed.	https://git-scm.com/docs/show-ref.html
git-show-ref --heads	A										Limit to "refs/heads" and "refs/tags", respectively.  These options\nare not mutually exclusive; when given both, references stored in\n"refs/heads" and "refs/tags" are displayed.	https://git-scm.com/docs/show-ref.html
git-show-ref -d	A										Dereference tags into object IDs as well. They will be shown with "^{}"\nappended.	https://git-scm.com/docs/show-ref.html
git-show-ref --dereference	A										Dereference tags into object IDs as well. They will be shown with "^{}"\nappended.	https://git-scm.com/docs/show-ref.html
git-show-ref -s	A										Only show the SHA-1 hash, not the reference name. When combined with\n--dereference the dereferenced tag will still be shown after the SHA-1.	https://git-scm.com/docs/show-ref.html
git-show-ref --hash[=<n>]	A										Only show the SHA-1 hash, not the reference name. When combined with\n--dereference the dereferenced tag will still be shown after the SHA-1.	https://git-scm.com/docs/show-ref.html
git-show-ref --verify	A										Enable stricter reference checking by requiring an exact ref path.\nAside from returning an error code of 1, it will also print an error\nmessage if --quiet was not specified.	https://git-scm.com/docs/show-ref.html
git-show-ref --abbrev[=<n>]	A										Abbreviate the object name.  When using --hash, you do\nnot have to say --hash --abbrev; --hash=n would do.	https://git-scm.com/docs/show-ref.html
git-show-ref -q	A										Do not print any results to stdout. When combined with --verify this\ncan be used to silently check if a reference exists.	https://git-scm.com/docs/show-ref.html
git-show-ref --quiet	A										Do not print any results to stdout. When combined with --verify this\ncan be used to silently check if a reference exists.	https://git-scm.com/docs/show-ref.html
git-show-ref --exclude-existing[=<pattern>]	A										Make git show-ref act as a filter that reads refs from stdin of the\nform "^(?:<anything>\s)?<refname>(?:\^{})?$"\nand performs the following actions on each:\n(1) strip "^{}" at the end of line if any;\n(2) ignore if pattern is provided and does not head-match refname;\n(3) warn if refname is not a well-formed refname and skip;\n(4) ignore if refname is a ref that exists in the local repository;\n(5) otherwise output the line.	https://git-scm.com/docs/show-ref.html
git-show-ref <pattern>…​	A										Show references matching one or more patterns. Patterns are matched from\nthe end of the full name, and only complete parts are matched, e.g.\nmaster matches refs/heads/master, refs/remotes/origin/master,\nrefs/tags/jedi/master but not refs/heads/mymaster or\nrefs/remotes/master/jedi.	https://git-scm.com/docs/show-ref.html
git-show-ref	A										List references in a local repository
<pre><code>git show-ref [-q|--quiet] [--verify] [--head] [-d|--dereference]\n         [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]\n         [--heads] [--] [<pattern>…​]\ngit show-ref --exclude-existing[=<pattern>]</pre></code>	https://git-scm.com/docs/show-ref.html
git-show <object>…​	A										The names of objects to show.\nFor a more complete list of ways to spell object names, see\n"SPECIFYING REVISIONS" section in gitrevisions[7].	https://git-scm.com/docs/show.html
git-show --pretty[=<format>]	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/show.html
git-show --format=<format>	A										Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.	https://git-scm.com/docs/show.html
git-show --abbrev-commit	A										Instead of showing the full 40-byte hexadecimal commit object\nname, show only a partial prefix.  Non default number of\ndigits can be specified with "--abbrev=<n>" (which also modifies\ndiff output, if it is displayed).	https://git-scm.com/docs/show.html
git-show --no-abbrev-commit	A										Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit and those options which imply it such as\n"--oneline". It also overrides the log.abbrevCommit variable.	https://git-scm.com/docs/show.html
git-show --oneline	A										This is a shorthand for "--pretty=oneline --abbrev-commit"\nused together.	https://git-scm.com/docs/show.html
git-show --encoding=<encoding>	A										The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output.	https://git-scm.com/docs/show.html
git-show --expand-tabs=<n>	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/show.html
git-show --expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/show.html
git-show --no-expand-tabs	A										Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.	https://git-scm.com/docs/show.html
git-show --notes[=<treeish>]	A										Show the notes (see git-notes[1]) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log, git show and git whatchanged commands when\nthere is no --pretty, --format, or --oneline option given\non the command line.	https://git-scm.com/docs/show.html
git-show --no-notes	A										Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n"--notes --notes=foo --no-notes --notes=bar" will only show notes\nfrom "refs/notes/bar".	https://git-scm.com/docs/show.html
git-show --show-notes[=<treeish>]	A										These options are deprecated. Use the above --notes/--no-notes\noptions instead.	https://git-scm.com/docs/show.html
git-show --[no-]standard-notes	A										These options are deprecated. Use the above --notes/--no-notes\noptions instead.	https://git-scm.com/docs/show.html
git-show --show-signature	A										Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output.	https://git-scm.com/docs/show.html
git-show	A										Show various types of objects
<pre><code>git show [options] <object>…​</pre></code>	https://git-scm.com/docs/show.html
git-stash save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]	A										Save your local modifications to a new stash, and run git reset\n--hard to revert them.  The <message> part is optional and gives\nthe description along with the stashed state.  For quickly making\na snapshot, you can omit both "save" and <message>, but giving\nonly <message> does not trigger this action to prevent a misspelled\nsubcommand from making an unwanted stash.	https://git-scm.com/docs/stash.html
git-stash list [<options>]	A										List the stashes that you currently have.  Each stash is listed\nwith its name (e.g. stash@{0} is the latest stash, stash@{1} is\nthe one before, etc.), the name of the branch that was current when the\nstash was made, and a short description of the commit the stash was\nbased on.	https://git-scm.com/docs/stash.html
git-stash show [<stash>]	A										Show the changes recorded in the stash as a diff between the\nstashed state and its original parent. When no <stash> is given,\nshows the latest one. By default, the command shows the diffstat, but\nit will accept any format known to git diff (e.g., git stash show\n-p stash@{1} to view the second most recent stash in patch form).\nYou can use stash.showStat and/or stash.showPatch config variables\nto change the default behavior.	https://git-scm.com/docs/stash.html
git-stash pop [--index] [-q|--quiet] [<stash>]	A										Remove a single stashed state from the stash list and apply it\non top of the current working tree state, i.e., do the inverse\noperation of git stash save. The working directory must\nmatch the index.	https://git-scm.com/docs/stash.html
git-stash apply [--index] [-q|--quiet] [<stash>]	A										Like pop, but do not remove the state from the stash list. Unlike pop,\n<stash> may be any commit that looks like a commit created by\nstash save or stash create.	https://git-scm.com/docs/stash.html
git-stash branch <branchname> [<stash>]	A										Creates and checks out a new branch named <branchname> starting from\nthe commit at which the <stash> was originally created, applies the\nchanges recorded in <stash> to the new working tree and index.\nIf that succeeds, and <stash> is a reference of the form\nstash@{<revision>}, it then drops the <stash>. When no <stash>\nis given, applies the latest one.	https://git-scm.com/docs/stash.html
git-stash clear	A										Remove all the stashed states. Note that those states will then\nbe subject to pruning, and may be impossible to recover (see\nExamples below for a possible strategy).	https://git-scm.com/docs/stash.html
git-stash drop [-q|--quiet] [<stash>]	A										Remove a single stashed state from the stash list. When no <stash>\nis given, it removes the latest one. i.e. stash@{0}, otherwise\n<stash> must be a valid stash log reference of the form\nstash@{<revision>}.	https://git-scm.com/docs/stash.html
git-stash create	A										Create a stash (which is a regular commit object) and return its\nobject name, without storing it anywhere in the ref namespace.\nThis is intended to be useful for scripts.  It is probably not\nthe command you want to use; see "save" above.	https://git-scm.com/docs/stash.html
git-stash store	A										Store a given stash created via git stash create (which is a\ndangling merge commit) in the stash ref, updating the stash\nreflog.  This is intended to be useful for scripts.  It is\nprobably not the command you want to use; see "save" above.	https://git-scm.com/docs/stash.html
git-stash	A										Stash the changes in a dirty working directory away
<pre><code>git stash list [<options>]\ngit stash show [<stash>]\ngit stash drop [-q|--quiet] [<stash>]\ngit stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]\ngit stash branch <branchname> [<stash>]\ngit stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n         [-u|--include-untracked] [-a|--all] [<message>]]\ngit stash clear\ngit stash create [<message>]\ngit stash store [-m|--message <message>] [-q|--quiet] <commit></pre></code>	https://git-scm.com/docs/stash.html
git-status -s	A										Give the output in the short-format.	https://git-scm.com/docs/status.html
git-status --short	A										Give the output in the short-format.	https://git-scm.com/docs/status.html
git-status -b	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/status.html
git-status --branch	A										Show the branch and tracking info even in short-format.	https://git-scm.com/docs/status.html
git-status --porcelain	A										Give the output in an easy-to-parse format for scripts.\nThis is similar to the short output, but will remain stable\nacross Git versions and regardless of user configuration. See\nbelow for details.	https://git-scm.com/docs/status.html
git-status --long	A										Give the output in the long-format. This is the default.	https://git-scm.com/docs/status.html
git-status -v	A										In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff).	https://git-scm.com/docs/status.html
git-status --verbose	A										In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff).	https://git-scm.com/docs/status.html
git-status -u[<mode>]	A										Show untracked files.	https://git-scm.com/docs/status.html
git-status --untracked-files[=<mode>]	A										Show untracked files.	https://git-scm.com/docs/status.html
git-status --ignore-submodules[=<when>]	A										Ignore changes to submodules when looking for changes. <when> can be\neither "none", "untracked", "dirty" or "all", which is the default.\nUsing "none" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n"untracked" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using "dirty" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior before 1.7.0). Using "all" hides all changes to submodules\n(and suppresses the output of submodule summaries when the config option\nstatus.submoduleSummary is set).	https://git-scm.com/docs/status.html
git-status --ignored	A										Show ignored files as well.	https://git-scm.com/docs/status.html
git-status -z	A										Terminate entries with NUL, instead of LF.  This implies\nthe --porcelain output format if no other format is given.	https://git-scm.com/docs/status.html
git-status --column[=<options>]	A										Display untracked files in columns. See configuration variable\ncolumn.status for option syntax.--column and --no-column\nwithout options are equivalent to always and never\nrespectively.	https://git-scm.com/docs/status.html
git-status --no-column	A										Display untracked files in columns. See configuration variable\ncolumn.status for option syntax.--column and --no-column\nwithout options are equivalent to always and never\nrespectively.	https://git-scm.com/docs/status.html
git-status	A										Show the working tree status
<pre><code>git status [<options>…​] [--] [<pathspec>…​]</pre></code>	https://git-scm.com/docs/status.html
git-submodule -q	A										Only print error messages.	https://git-scm.com/docs/submodule.html
git-submodule --quiet	A										Only print error messages.	https://git-scm.com/docs/submodule.html
git-submodule --all	A										This option is only valid for the deinit command. Unregister all\nsubmodules in the working tree.	https://git-scm.com/docs/submodule.html
git-submodule -b	A										Branch of repository to add as submodule.\nThe name of the branch is recorded as submodule.<name>.branch in\n.gitmodules for update --remote.	https://git-scm.com/docs/submodule.html
git-submodule --branch	A										Branch of repository to add as submodule.\nThe name of the branch is recorded as submodule.<name>.branch in\n.gitmodules for update --remote.	https://git-scm.com/docs/submodule.html
git-submodule -f	A										This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule.	https://git-scm.com/docs/submodule.html
git-submodule --force	A										This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule.	https://git-scm.com/docs/submodule.html
git-submodule --cached	A										This option is only valid for status and summary commands.  These\ncommands typically use the commit found in the submodule HEAD, but\nwith this option, the commit stored in the index is used instead.	https://git-scm.com/docs/submodule.html
git-submodule --files	A										This option is only valid for the summary command. This command\ncompares the commit in the index with that in the submodule HEAD\nwhen this option is used.	https://git-scm.com/docs/submodule.html
git-submodule -n	A										This option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules.	https://git-scm.com/docs/submodule.html
git-submodule --summary-limit	A										This option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules.	https://git-scm.com/docs/submodule.html
git-submodule --remote	A										This option is only valid for the update command.  Instead of using\nthe superproject’s recorded SHA-1 to update the submodule, use the\nstatus of the submodule’s remote-tracking branch.  The remote used\nis branch’s remote (branch.<name>.remote), defaulting to origin.\nThe remote branch used defaults to master, but the branch name may\nbe overridden by setting the submodule.<name>.branch option in\neither .gitmodules or .git/config (with .git/config taking\nprecedence).	https://git-scm.com/docs/submodule.html
git-submodule -N	A										This option is only valid for the update command.\nDon’t fetch new objects from the remote site.	https://git-scm.com/docs/submodule.html
git-submodule --no-fetch	A										This option is only valid for the update command.\nDon’t fetch new objects from the remote site.	https://git-scm.com/docs/submodule.html
git-submodule --checkout	A										This option is only valid for the update command.\nCheckout the commit recorded in the superproject on a detached HEAD\nin the submodule. This is the default behavior, the main use of\nthis option is to override submodule.$name.update when set to\na value other than checkout.\nIf the key submodule.$name.update is either not explicitly set or\nset to checkout, this option is implicit.	https://git-scm.com/docs/submodule.html
git-submodule --merge	A										This option is only valid for the update command.\nMerge the commit recorded in the superproject into the current branch\nof the submodule. If this option is given, the submodule’s HEAD will\nnot be detached. If a merge failure prevents this process, you will\nhave to resolve the resulting conflicts within the submodule with the\nusual conflict resolution tools.\nIf the key submodule.$name.update is set to merge, this option is\nimplicit.	https://git-scm.com/docs/submodule.html
git-submodule --rebase	A										This option is only valid for the update command.\nRebase the current branch onto the commit recorded in the\nsuperproject. If this option is given, the submodule’s HEAD will not\nbe detached. If a merge failure prevents this process, you will have\nto resolve these failures with git-rebase[1].\nIf the key submodule.$name.update is set to rebase, this option is\nimplicit.	https://git-scm.com/docs/submodule.html
git-submodule --init	A										This option is only valid for the update command.\nInitialize all submodules for which "git submodule init" has not been\ncalled so far before updating.	https://git-scm.com/docs/submodule.html
git-submodule --name	A										This option is only valid for the add command. It sets the submodule’s\nname to the given string instead of defaulting to its path. The name\nmust be valid as a directory name and may not end with a /.	https://git-scm.com/docs/submodule.html
git-submodule --reference <repository>	A										This option is only valid for add and update commands.  These\ncommands sometimes need to clone a remote repository. In this case,\nthis option will be passed to the git-clone[1] command.	https://git-scm.com/docs/submodule.html
git-submodule --recursive	A										This option is only valid for foreach, update, status and sync commands.\nTraverse submodules recursively. The operation is performed not\nonly in the submodules of the current repo, but also\nin any nested submodules inside those submodules (and so on).	https://git-scm.com/docs/submodule.html
git-submodule --depth	A										This option is valid for add and update commands. Create a shallow\nclone with a history truncated to the specified number of revisions.\nSee git-clone[1]	https://git-scm.com/docs/submodule.html
git-submodule --[no-]recommend-shallow	A										This option is only valid for the update command.\nThe initial clone of a submodule will use the recommended\nsubmodule.<name>.shallow as provided by the .gitmodules file\nby default. To ignore the suggestions use --no-recommend-shallow.	https://git-scm.com/docs/submodule.html
git-submodule -j <n>	A										This option is only valid for the update command.\nClone new submodules in parallel with as many jobs.\nDefaults to the submodule.fetchJobs option.	https://git-scm.com/docs/submodule.html
git-submodule --jobs <n>	A										This option is only valid for the update command.\nClone new submodules in parallel with as many jobs.\nDefaults to the submodule.fetchJobs option.	https://git-scm.com/docs/submodule.html
git-submodule <path>…​	A										Paths to submodule(s). When specified this will restrict the command\nto only operate on the submodules found at the specified paths.\n(This argument is required with add).	https://git-scm.com/docs/submodule.html
git-submodule	A										Initialize, update or inspect submodules
<pre><code>git submodule [--quiet] add [-b <branch>] [-f|--force] [--name <name>]\n          [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]\ngit submodule [--quiet] status [--cached] [--recursive] [--] [<path>…​]\ngit submodule [--quiet] init [--] [<path>…​]\ngit submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…​)\ngit submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]\n          [--[no-]recommend-shallow] [-f|--force] [--rebase|--merge]\n          [--reference <repository>] [--depth <depth>] [--recursive]\n          [--jobs <n>] [--] [<path>…​]\ngit submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) <n>]\n          [commit] [--] [<path>…​]\ngit submodule [--quiet] foreach [--recursive] <command>\ngit submodule [--quiet] sync [--recursive] [--] [<path>…​]</pre></code>	https://git-scm.com/docs/submodule.html
git-svn --shared[=(false|true|umask|group|all|world|everybody)]	A										Only used with the init command.\nThese are passed directly to git init.	https://git-scm.com/docs/svn.html
git-svn --template=<template_directory>	A										Only used with the init command.\nThese are passed directly to git init.	https://git-scm.com/docs/svn.html
git-svn -r <arg>	A										Used with the fetch command.	https://git-scm.com/docs/svn.html
git-svn --revision <arg>	A										Used with the fetch command.	https://git-scm.com/docs/svn.html
git-svn -	A										Only used with the set-tree command.	https://git-scm.com/docs/svn.html
git-svn --stdin	A										Only used with the set-tree command.	https://git-scm.com/docs/svn.html
git-svn --rmdir	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -e	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn --edit	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -l<num>	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn --find-copies-harder	A										Only used with the dcommit, set-tree and commit-diff commands.	https://git-scm.com/docs/svn.html
git-svn -A<filename>	A										Syntax is compatible with the file used by git cvsimport:	https://git-scm.com/docs/svn.html
git-svn --authors-file=<filename>	A										Syntax is compatible with the file used by git cvsimport:	https://git-scm.com/docs/svn.html
git-svn --authors-prog=<filename>	A										If this option is specified, for each SVN committer name that\ndoes not exist in the authors file, the given file is executed\nwith the committer name as the first argument.  The program is\nexpected to return a single line of the form "Name <email>",\nwhich will be treated as if included in the authors file.	https://git-scm.com/docs/svn.html
git-svn -q	A										Make git svn less verbose. Specify a second time to make it\neven less verbose.	https://git-scm.com/docs/svn.html
git-svn --quiet	A										Make git svn less verbose. Specify a second time to make it\neven less verbose.	https://git-scm.com/docs/svn.html
git-svn -m	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --merge	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -s<strategy>	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --strategy=<strategy>	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -p	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn --preserve-merges	A										These are only used with the dcommit and rebase commands.	https://git-scm.com/docs/svn.html
git-svn -n	A										This can be used with the dcommit, rebase, branch and\ntag commands.	https://git-scm.com/docs/svn.html
git-svn --dry-run	A										This can be used with the dcommit, rebase, branch and\ntag commands.	https://git-scm.com/docs/svn.html
git-svn --use-log-author	A										When retrieving svn commits into Git (as part of fetch, rebase, or\ndcommit operations), look for the first From: or Signed-off-by: line\nin the log message and use that as the author string.	https://git-scm.com/docs/svn.html
git-svn --add-author-from	A										When committing to svn from Git (as part of commit-diff, set-tree or dcommit\noperations), if the existing log message doesn’t already have a\nFrom: or Signed-off-by: line, append a From: line based on the\nGit commit’s author string.  If you use this, then --use-log-author\nwill retrieve a valid author string for all commits.	https://git-scm.com/docs/svn.html
git-svn	A										Bidirectional operation between a Subversion repository and Git
<pre><code>git svn <command> [options] [arguments]</pre></code>	https://git-scm.com/docs/svn.html
git-symbolic-ref -d	A										Delete the symbolic ref <name>.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --delete	A										Delete the symbolic ref <name>.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref -q	A										Do not issue an error message if the <name> is not a\nsymbolic ref but a detached HEAD; instead exit with\nnon-zero status silently.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --quiet	A										Do not issue an error message if the <name> is not a\nsymbolic ref but a detached HEAD; instead exit with\nnon-zero status silently.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref --short	A										When showing the value of <name> as a symbolic ref, try to shorten the\nvalue, e.g. from refs/heads/master to master.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref -m	A										Update the reflog for <name> with <reason>.  This is valid only\nwhen creating or updating a symbolic ref.	https://git-scm.com/docs/symbolic-ref.html
git-symbolic-ref	A										Read, modify and delete symbolic refs
<pre><code>git symbolic-ref [-m <reason>] <name> <ref>\ngit symbolic-ref [-q] [--short] <name>\ngit symbolic-ref --delete [-q] <name></pre></code>	https://git-scm.com/docs/symbolic-ref.html
git-tag -a	A										Make an unsigned, annotated tag object	https://git-scm.com/docs/tag.html
git-tag --annotate	A										Make an unsigned, annotated tag object	https://git-scm.com/docs/tag.html
git-tag -s	A										Make a GPG-signed tag, using the default e-mail address’s key.	https://git-scm.com/docs/tag.html
git-tag --sign	A										Make a GPG-signed tag, using the default e-mail address’s key.	https://git-scm.com/docs/tag.html
git-tag -u <keyid>	A										Make a GPG-signed tag, using the given key.	https://git-scm.com/docs/tag.html
git-tag --local-user=<keyid>	A										Make a GPG-signed tag, using the given key.	https://git-scm.com/docs/tag.html
git-tag -f	A										Replace an existing tag with the given name (instead of failing)	https://git-scm.com/docs/tag.html
git-tag --force	A										Replace an existing tag with the given name (instead of failing)	https://git-scm.com/docs/tag.html
git-tag -d	A										Delete existing tags with the given names.	https://git-scm.com/docs/tag.html
git-tag --delete	A										Delete existing tags with the given names.	https://git-scm.com/docs/tag.html
git-tag -v	A										Verify the GPG signature of the given tag names.	https://git-scm.com/docs/tag.html
git-tag --verify	A										Verify the GPG signature of the given tag names.	https://git-scm.com/docs/tag.html
git-tag -n<num>	A										<num> specifies how many lines from the annotation, if any,\nare printed when using -l.\nThe default is not to print any annotation lines.\nIf no number is given to -n, only the first line is printed.\nIf the tag is not annotated, the commit message is displayed instead.	https://git-scm.com/docs/tag.html
git-tag -l <pattern>	A										List tags with names that match the given pattern (or all if no\npattern is given).  Running "git tag" without arguments also\nlists all tags. The pattern is a shell wildcard (i.e., matched\nusing fnmatch(3)).  Multiple patterns may be given; if any of\nthem matches, the tag is shown.	https://git-scm.com/docs/tag.html
git-tag --list <pattern>	A										List tags with names that match the given pattern (or all if no\npattern is given).  Running "git tag" without arguments also\nlists all tags. The pattern is a shell wildcard (i.e., matched\nusing fnmatch(3)).  Multiple patterns may be given; if any of\nthem matches, the tag is shown.	https://git-scm.com/docs/tag.html
git-tag --sort=<key>	A										Sort based on the key given.  Prefix - to sort in\ndescending order of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. Also supports "version:refname" or "v:refname" (tag\nnames are treated as versions). The "version:refname" sort\norder can also be affected by the\n"versionsort.prereleaseSuffix" configuration variable.\nThe keys supported are the same as those in git for-each-ref.\nSort order defaults to the value configured for the tag.sort\nvariable if it exists, or lexicographic order otherwise. See\ngit-config[1].	https://git-scm.com/docs/tag.html
git-tag --column[=<options>]	A										Display tag listing in columns. See configuration variable\ncolumn.tag for option syntax.--column and --no-column\nwithout options are equivalent to always and never respectively.	https://git-scm.com/docs/tag.html
git-tag --no-column	A										Display tag listing in columns. See configuration variable\ncolumn.tag for option syntax.--column and --no-column\nwithout options are equivalent to always and never respectively.	https://git-scm.com/docs/tag.html
git-tag --contains [<commit>]	A										Only list tags which contain the specified commit (HEAD if not\nspecified).	https://git-scm.com/docs/tag.html
git-tag --points-at <object>	A										Only list tags of the given object.	https://git-scm.com/docs/tag.html
git-tag -m <msg>	A										Use the given tag message (instead of prompting).\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\nImplies -a if none of -a, -s, or -u <keyid>\nis given.	https://git-scm.com/docs/tag.html
git-tag --message=<msg>	A										Use the given tag message (instead of prompting).\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\nImplies -a if none of -a, -s, or -u <keyid>\nis given.	https://git-scm.com/docs/tag.html
git-tag -F <file>	A										Take the tag message from the given file.  Use - to\nread the message from the standard input.\nImplies -a if none of -a, -s, or -u <keyid>\nis given.	https://git-scm.com/docs/tag.html
git-tag --file=<file>	A										Take the tag message from the given file.  Use - to\nread the message from the standard input.\nImplies -a if none of -a, -s, or -u <keyid>\nis given.	https://git-scm.com/docs/tag.html
git-tag --cleanup=<mode>	A										This option sets how the tag message is cleaned up.\nThe  <mode> can be one of verbatim, whitespace and strip.  The\nstrip mode is default. The verbatim mode does not change message at\nall, whitespace removes just leading/trailing whitespace lines and\nstrip removes both whitespace and commentary.	https://git-scm.com/docs/tag.html
git-tag --create-reflog	A										Create a reflog for the tag.	https://git-scm.com/docs/tag.html
git-tag <tagname>	A										The name of the tag to create, delete, or describe.\nThe new tag name must pass all checks defined by\ngit-check-ref-format[1].  Some of these checks\nmay restrict the characters allowed in a tag name.	https://git-scm.com/docs/tag.html
git-tag <commit>	A										The object that the new tag will refer to, usually a commit.\nDefaults to HEAD.	https://git-scm.com/docs/tag.html
git-tag <object>	A										The object that the new tag will refer to, usually a commit.\nDefaults to HEAD.	https://git-scm.com/docs/tag.html
git-tag <format>	A										A string that interpolates %(fieldname) from the object\npointed at by a ref being shown.  The format is the same as\nthat of git-for-each-ref[1].  When unspecified,\ndefaults to %(refname:strip=2).	https://git-scm.com/docs/tag.html
git-tag --[no-]merged [<commit>]	A										Only list tags whose tips are reachable, or not reachable\nif --no-merged is used, from the specified commit (HEAD\nif not specified).	https://git-scm.com/docs/tag.html
git-tag	A										Create, list, delete or verify a tag object signed with GPG
<pre><code>git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>]\n    <tagname> [<commit> | <object>]\ngit tag -d <tagname>…​\ngit tag [-n[<num>]] -l [--contains <commit>] [--points-at <object>]\n    [--column[=<options>] | --no-column] [--create-reflog] [--sort=<key>]\n    [--format=<format>] [--[no-]merged [<commit>]] [<pattern>…​]\ngit tag -v <tagname>…​</pre></code>	https://git-scm.com/docs/tag.html
git-update-index --add	A										If a specified file isn’t in the index already then it’s\nadded.\nDefault behaviour is to ignore new files.	https://git-scm.com/docs/update-index.html
git-update-index --remove	A										If a specified file is in the index but is missing then it’s\nremoved.\nDefault behavior is to ignore removed file.	https://git-scm.com/docs/update-index.html
git-update-index --refresh	A										Looks at the current index and checks to see if merges or\nupdates are needed by checking stat() information.	https://git-scm.com/docs/update-index.html
git-update-index -q	A										       Quiet.  If --refresh finds that the index needs an update, the\n       default behavior is to error out.  This option makes\ngit update-index continue anyway.	https://git-scm.com/docs/update-index.html
git-update-index --ignore-submodules	A										Do not try to update submodules.  This option is only respected\nwhen passed before --refresh.	https://git-scm.com/docs/update-index.html
git-update-index --unmerged	A										       If --refresh finds unmerged changes in the index, the default\nbehavior is to error out.  This option makes git update-index\n       continue anyway.	https://git-scm.com/docs/update-index.html
git-update-index --ignore-missing	A										Ignores missing files during a --refresh	https://git-scm.com/docs/update-index.html
git-update-index --cacheinfo <mode>,<object>,<path>	A										Directly insert the specified info into the index.  For\nbackward compatibility, you can also give these three\narguments as three separate parameters, but new users are\nencouraged to use a single-parameter form.	https://git-scm.com/docs/update-index.html
git-update-index --cacheinfo <mode> <object> <path>	A										Directly insert the specified info into the index.  For\nbackward compatibility, you can also give these three\narguments as three separate parameters, but new users are\nencouraged to use a single-parameter form.	https://git-scm.com/docs/update-index.html
git-update-index --index-info	A										Read index information from stdin.	https://git-scm.com/docs/update-index.html
git-update-index --chmod=(+|-)x	A										Set the execute permissions on the updated files.	https://git-scm.com/docs/update-index.html
git-update-index --[no-]assume-unchanged	A										When this flag is specified, the object names recorded\nfor the paths are not updated.  Instead, this option\nsets/unsets the "assume unchanged" bit for the\npaths.  When the "assume unchanged" bit is on, the user\npromises not to change the file and allows Git to assume\nthat the working tree file matches what is recorded in\nthe index.  If you want to change the working tree file,\nyou need to unset the bit to tell Git.  This is\nsometimes helpful when working with a big project on a\nfilesystem that has very slow lstat(2) system call\n(e.g. cifs).	https://git-scm.com/docs/update-index.html
git-update-index --really-refresh	A										Like --refresh, but checks stat information unconditionally,\nwithout regard to the "assume unchanged" setting.	https://git-scm.com/docs/update-index.html
git-update-index --[no-]skip-worktree	A										When one of these flags is specified, the object name recorded\nfor the paths are not updated. Instead, these options\nset and unset the "skip-worktree" bit for the paths. See\nsection "Skip-worktree bit" below for more information.	https://git-scm.com/docs/update-index.html
git-update-index -g	A										Runs git update-index itself on the paths whose index\nentries are different from those from the HEAD commit.	https://git-scm.com/docs/update-index.html
git-update-index --again	A										Runs git update-index itself on the paths whose index\nentries are different from those from the HEAD commit.	https://git-scm.com/docs/update-index.html
git-update-index --unresolve	A										Restores the unmerged or needs updating state of a\nfile during a merge if it was cleared by accident.	https://git-scm.com/docs/update-index.html
git-update-index --info-only	A										Do not create objects in the object database for all\n<file> arguments that follow this flag; just insert\ntheir object IDs into the index.	https://git-scm.com/docs/update-index.html
git-update-index --force-remove	A										Remove the file from the index even when the working directory\nstill has such a file. (Implies --remove.)	https://git-scm.com/docs/update-index.html
git-update-index --replace	A										By default, when a file path exists in the index,\ngit update-index refuses an attempt to add path/file.\nSimilarly if a file path/file exists, a file path\ncannot be added.  With --replace flag, existing entries\nthat conflict with the entry being added are\nautomatically removed with warning messages.	https://git-scm.com/docs/update-index.html
git-update-index --stdin	A										Instead of taking list of paths from the command line,\nread list of paths from the standard input.  Paths are\nseparated by LF (i.e. one path per line) by default.	https://git-scm.com/docs/update-index.html
git-update-index --verbose	A										Report what is being added and removed from index.	https://git-scm.com/docs/update-index.html
git-update-index --index-version <n>	A										Write the resulting index out in the named on-disk format version.\nSupported versions are 2, 3 and 4. The current default version is 2\nor 3, depending on whether extra features are used, such as\ngit add -N.	https://git-scm.com/docs/update-index.html
git-update-index -z	A										Only meaningful with --stdin or --index-info; paths are\nseparated with NUL character instead of LF.	https://git-scm.com/docs/update-index.html
git-update-index --split-index	A										Enable or disable split index mode. If enabled, the index is\nsplit into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.\nChanges are accumulated in $GIT_DIR/index while the shared\nindex file contains all index entries stays unchanged. If\nsplit-index mode is already enabled and --split-index is\ngiven again, all changes in $GIT_DIR/index are pushed back to\nthe shared index file. This mode is designed for very large\nindexes that take a significant amount of time to read or write.	https://git-scm.com/docs/update-index.html
git-update-index --no-split-index	A										Enable or disable split index mode. If enabled, the index is\nsplit into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.\nChanges are accumulated in $GIT_DIR/index while the shared\nindex file contains all index entries stays unchanged. If\nsplit-index mode is already enabled and --split-index is\ngiven again, all changes in $GIT_DIR/index are pushed back to\nthe shared index file. This mode is designed for very large\nindexes that take a significant amount of time to read or write.	https://git-scm.com/docs/update-index.html
git-update-index --untracked-cache	A										Enable or disable untracked cache feature. Please use\n--test-untracked-cache before enabling it.	https://git-scm.com/docs/update-index.html
git-update-index --no-untracked-cache	A										Enable or disable untracked cache feature. Please use\n--test-untracked-cache before enabling it.	https://git-scm.com/docs/update-index.html
git-update-index --test-untracked-cache	A										Only perform tests on the working directory to make sure\nuntracked cache can be used. You have to manually enable\nuntracked cache using --untracked-cache or\n--force-untracked-cache or the core.untrackedCache\nconfiguration variable afterwards if you really want to use\nit. If a test fails the exit code is 1 and a message\nexplains what is not working as needed, otherwise the exit\ncode is 0 and OK is printed.	https://git-scm.com/docs/update-index.html
git-update-index --force-untracked-cache	A										Same as --untracked-cache. Provided for backwards\ncompatibility with older versions of Git where\n--untracked-cache used to imply --test-untracked-cache but\nthis option would enable the extension unconditionally.	https://git-scm.com/docs/update-index.html
git-update-index --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/update-index.html
git-update-index <file>	A										Files to act on.\nNote that files beginning with . are discarded. This includes\n./file and dir/./file. If you don’t want this, then use\ncleaner names.\nThe same applies to directories ending / and paths with //	https://git-scm.com/docs/update-index.html
git-update-index	A										Register file contents in the working tree to the index
<pre><code>git update-index\n         [--add] [--remove | --force-remove] [--replace]\n         [--refresh] [-q] [--unmerged] [--ignore-missing]\n         [(--cacheinfo <mode>,<object>,<file>)…​]\n         [--chmod=(+|-)x]\n         [--[no-]assume-unchanged]\n         [--[no-]skip-worktree]\n         [--ignore-submodules]\n         [--[no-]split-index]\n         [--[no-|test-|force-]untracked-cache]\n         [--really-refresh] [--unresolve] [--again | -g]\n         [--info-only] [--index-info]\n         [-z] [--stdin] [--index-version <n>]\n         [--verbose]\n         [--] [<file>…​]</pre></code>	https://git-scm.com/docs/update-index.html
git-update-ref	A										Update the object name stored in a ref safely
<pre><code>git update-ref [-m <reason>] (-d <ref> [<oldvalue>] | [--no-deref] [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])</pre></code>	https://git-scm.com/docs/update-ref.html
git-update-server-info -f	A										Update the info files from scratch.	https://git-scm.com/docs/update-server-info.html
git-update-server-info --force	A										Update the info files from scratch.	https://git-scm.com/docs/update-server-info.html
git-update-server-info	A										Update auxiliary info file to help dumb servers
<pre><code>git update-server-info [--force]</pre></code>	https://git-scm.com/docs/update-server-info.html
git-verify-pack <pack>.idx …​	A										The idx files to verify.	https://git-scm.com/docs/verify-pack.html
git-verify-pack -v	A										After verifying the pack, show list of objects contained\nin the pack and a histogram of delta chain length.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --verbose	A										After verifying the pack, show list of objects contained\nin the pack and a histogram of delta chain length.	https://git-scm.com/docs/verify-pack.html
git-verify-pack -s	A										Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose, list of objects is also shown.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --stat-only	A										Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose, list of objects is also shown.	https://git-scm.com/docs/verify-pack.html
git-verify-pack --	A										Do not interpret any more arguments as options.	https://git-scm.com/docs/verify-pack.html
git-verify-pack	A										Validate packed Git archive files
<pre><code>git verify-pack [-v|--verbose] [-s|--stat-only] [--] <pack>.idx …​</pre></code>	https://git-scm.com/docs/verify-pack.html
git-write-tree --missing-ok	A										Normally git write-tree ensures that the objects referenced by the\ndirectory exist in the object database.  This option disables this\ncheck.	https://git-scm.com/docs/write-tree.html
git-write-tree --prefix=<prefix>/	A										Writes a tree object that represents a subdirectory\n<prefix>.  This can be used to write the tree object\nfor a subproject that is in the named subdirectory.	https://git-scm.com/docs/write-tree.html
git-write-tree	A										Create a tree object from the current index
<pre><code>git write-tree [--missing-ok] [--prefix=<prefix>/]</pre></code>	https://git-scm.com/docs/write-tree.html
