flask.Flask.wsgi_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The flask object implements a WSGI application and acts as the central\nobject. It is passed the name of the module or package of the\napplication. Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.</p><pre><code>from flask import Flask\napp = Flask(__name__)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask
flask.Flask.add_template_filter	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template filter. Works exactly like the\ntemplate_filter() decorator.</p><pre><code>@app.route('/')\ndef index():\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.add_template_filter
flask.Flask.add_template_global	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template global function. Works exactly like the\ntemplate_global() decorator.</p><pre><code>@app.route('/')\ndef index():\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.add_template_global
flask.Flask.add_template_test	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template test. Works exactly like the\ntemplate_test() decorator.</p><pre><code>@app.route('/')\ndef index():\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.add_template_test
flask.Flask.add_url_rule	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Connects a URL rule. Works exactly like the route()\ndecorator. If a view_func is provided it will be registered with the\nendpoint.</p><pre><code>@app.route('/')\ndef index():\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.add_url_rule
flask.Flask.after_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a function to be run after each request.</p><pre><code>with app.app_context():\n  ...</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.after_request
flask.Flask.after_request_funcs	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with lists of functions that should be called after\neach request. The key of the dictionary is the name of the blueprint\nthis function is active for, None for all requests. This can for\nexample be used to close database connections. To register a function\nhere, use the after_request() decorator.</p><pre><code>with app.app_context():\n  ...</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.after_request_funcs
flask.Flask.app_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Binds the application only. For as long as the application is bound\nto the current context the flask.current_app points to that\napplication. An application context is automatically created when a\nrequest context is pushed if necessary.</p><pre><code>with app.app_context():\n  ...</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.app_context
flask.Flask.app_ctx_globals_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The class that is used for the g instance.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.app_ctx_globals_class
flask.Flask.auto_find_instance_path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Tries to locate the instance path if it was not provided to the\nconstructor of the application class. It will basically calculate\nthe path to a folder named instance next to your main file or\nthe package.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.auto_find_instance_path
flask.Flask.before_first_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function to be run before the first request to this\ninstance of the application.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.before_first_request
flask.Flask.before_first_request_funcs	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A lists of functions that should be called at the beginning of the\nfirst request to this instance. To register a function here, use\nthe before_first_request() decorator.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.before_first_request_funcs
flask.Flask.before_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function to run before each request.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.before_request
flask.Flask.before_request_funcs	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with lists of functions that should be called at the\nbeginning of the request. The key of the dictionary is the name of\nthe blueprint this function is active for, None for all requests.\nThis can for example be used to open database connections or\ngetting hold of the currently logged in user. To register a\nfunction here, use the before_request() decorator.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.before_request_funcs
flask.Flask.blueprints	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>all the attached blueprints in a dictionary by name. Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.blueprints
flask.Flask.cli	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The click command line context for this application. Commands\nregistered here show up in the flask command once the\napplication has been discovered. The default commands are\nprovided by Flask itself and can be overridden.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.cli
flask.Flask.config	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The configuration dictionary as Config. This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.config
flask.Flask.config_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The class that is used for the config attribute of this app.\nDefaults to Config.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.config_class
flask.Flask.context_processor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a template context processor function.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.context_processor
flask.Flask.create_global_jinja_loader	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates the loader for the Jinja2 environment. Can be used to\noverride just the loader and keeping the rest unchanged. It’s\ndiscouraged to override this function. Instead one should override\nthe jinja_loader() function instead.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.create_global_jinja_loader
flask.Flask.create_jinja_environment	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates the Jinja2 environment based on jinja_options\nand select_jinja_autoescape(). Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization. Override\nthis function to customize the behavior.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.create_jinja_environment
flask.Flask.create_url_adapter	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set up\nso the request is passed explicitly.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.create_url_adapter
flask.Flask.debug	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The debug flag. Set this to True to enable debugging of the\napplication. In debug mode the debugger will kick in when an unhandled\nexception occurs and the integrated server will automatically reload\nthe application if changes in the code are detected.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.debug
flask.Flask.default_config	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Default configuration parameters.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.default_config
flask.Flask.dispatch_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Does the request dispatching. Matches the URL and returns the\nreturn value of the view or error handler. This does not have to\nbe a response object. In order to convert the return value to a\nproper response object, call make_response().</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.dispatch_request
flask.Flask.do_teardown_appcontext	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Called when an application context is popped. This works pretty\nmuch the same as do_teardown_request() but for the application\ncontext.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.do_teardown_appcontext
flask.Flask.do_teardown_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Called after the actual request dispatching and will\ncall every as teardown_request() decorated function. This is\nnot actually called by the Flask object itself but is always\ntriggered when the request context is popped. That way we have a\ntighter control over certain resources under testing environments.</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.do_teardown_request
flask.Flask.endpoint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator to register a function as an endpoint.\nExample:</p><pre><code>@app.endpoint('example.endpoint')\ndef example():\n  return "example"</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.endpoint
flask.Flask.error_handler_spec	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary of all registered error handlers. The key is None\nfor error handlers active on the application, otherwise the key is\nthe name of the blueprint. Each key points to another dictionary\nwhere the key is the status code of the http exception. The\nspecial key None points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction.</p><pre><code>@app.errorhandler(404)\ndef page_not_found(error):\n  return 'This page does not exist', 404</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.error_handler_spec
flask.Flask.errorhandler	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator that is used to register a function given an\nerror code. Example:</p><pre><code>@app.errorhandler(404)\ndef page_not_found(error):\n  return 'This page does not exist', 404</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.errorhandler
flask.Flask.extensions	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>a place where extensions can store application specific state. For\nexample this is where an extension could store database engines and\nsimilar things. For backwards compatibility extensions should register\nthemselves like this:</p><pre><code>if not hasattr(app, 'extensions'):\n  app.extensions = {}\napp.extensions['extensionname'] = SomeObject()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.extensions
flask.Flask.full_dispatch_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.full_dispatch_request
flask.Flask.get_send_file_max_age	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides default cache_timeout for the send_file() functions.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.get_send_file_max_age
flask.Flask.got_first_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This attribute is set to True if the application started\nhandling the first request.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.got_first_request
flask.Flask.handle_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Default exception handling that kicks in when an exception\noccurs that is not caught. In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used. If no such handler\nexists, a default 500 internal server error message is displayed.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.handle_exception
flask.Flask.handle_http_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Handles an HTTP exception. By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.handle_http_exception
flask.Flask.handle_url_build_error	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Handle BuildError on url_for().</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.handle_url_build_error
flask.Flask.handle_user_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This method is called whenever an exception occurs that should be\nhandled. A special case are\nHTTPExceptions which are forwarded by\nthis function to the handle_http_exception() method. This\nfunction will either return a response value or reraise the\nexception with the same traceback.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.handle_user_exception
flask.Flask.has_static_folder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This is True if the package bound object’s container has a\nfolder for static files.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.has_static_folder
flask.Flask.init_jinja_globals	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Deprecated. Used to initialize the Jinja2 globals.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.init_jinja_globals
flask.Flask.inject_url_defaults	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed. This is used internally and\nautomatically called on URL building.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.inject_url_defaults
flask.Flask.instance_path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Holds the path to the instance folder.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.instance_path
flask.Flask.iter_blueprints	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Iterates over all blueprints by the order they were registered.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.iter_blueprints
flask.Flask.jinja_env	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The Jinja2 environment used to load templates.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.jinja_env
flask.Flask.jinja_environment	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The class that is used for the Jinja environment.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.jinja_environment
flask.Flask.jinja_loader	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The Jinja loader for this package bound object.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.jinja_loader
flask.Flask.jinja_options	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Options that are passed directly to the Jinja2 environment.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.jinja_options
flask.Flask.json_decoder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The JSON decoder class to use. Defaults to JSONDecoder.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.json_decoder
flask.Flask.json_encoder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The JSON encoder class to use. Defaults to JSONEncoder.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.json_encoder
flask.Flask.log_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Logs an exception. This is called by handle_exception()\nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\nlogger.</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.log_exception
flask.Flask.logger	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A logging.Logger object for this application. The\ndefault configuration is to log to stderr if the application is\nin debug mode. This logger can be used to (surprise) log messages.\nHere some examples:</p><pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.logger
flask.Flask.logger_name	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The name of the logger to use. By default the logger name is the\npackage name passed to the constructor.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.logger_name
flask.Flask.make_config	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Used to create the config attribute by the Flask constructor.\nThe instance_relative parameter is passed in from the constructor\nof Flask (there named instance_relative_config) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.make_config
flask.Flask.make_default_options_response	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This method is called to create the default OPTIONS response.\nThis can be changed through subclassing to change the default\nbehavior of OPTIONS responses.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.make_default_options_response
flask.Flask.make_null_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a new instance of a missing session. Instead of overriding\nthis method we recommend replacing the session_interface.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.make_null_session
flask.Flask.make_response	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Converts the return value from a view function to a real\nresponse object that is an instance of response_class.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.make_response
flask.Flask.make_shell_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns the shell context for an interactive shell for this\napplication. This runs all the registered shell context\nprocessors.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.make_shell_context
flask.Flask.name	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The name of the application. This is usually the import name\nwith the difference that it’s guessed from the run file if the\nimport name is main. This name is used as a display name when\nFlask needs the name of the application. It can be set and overridden\nto change the value.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.name
flask.Flask.open_instance_resource	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Opens a resource from the application’s instance folder\n(instance_path). Otherwise works like\nopen_resource(). Instance resources can also be opened for\nwriting.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.open_instance_resource
flask.Flask.open_resource	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Opens a resource from the application’s resource folder. To see\nhow this works, consider the following folder structure:</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.open_resource
flask.Flask.open_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates or opens a new session. Default implementation stores all\nsession data in a signed cookie. This requires that the\nsecret_key is set. Instead of overriding this method\nwe recommend replacing the session_interface.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.open_session
flask.Flask.permanent_session_lifetime	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A timedelta which is used to set the expiration\ndate of a permanent session. The default is 31 days which makes a\npermanent session survive for roughly one month.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.permanent_session_lifetime
flask.Flask.preprocess_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Called before the actual request dispatching and will\ncall each before_request() decorated function, passing no\narguments.\nIf any of these functions returns a value, it’s handled as\nif it was the return value from the view and further\nrequest handling is stopped.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.preprocess_request
flask.Flask.preserve_context_on_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns the value of the PRESERVE_CONTEXT_ON_EXCEPTION\nconfiguration value in case it’s set, otherwise a sensible default\nis returned.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.preserve_context_on_exception
flask.Flask.process_response	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Can be overridden in order to modify the response object\nbefore it’s sent to the WSGI server. By default this will\ncall all the after_request() decorated functions.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.process_response
flask.Flask.propagate_exceptions	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns the value of the PROPAGATE_EXCEPTIONS configuration\nvalue in case it’s set, otherwise a sensible default is returned.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.propagate_exceptions
flask.Flask.register_blueprint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a blueprint on the application.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.register_blueprint
flask.Flask.register_error_handler	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Alternative error attach function to the errorhandler()\ndecorator that is more straightforward to use for non decorator\nusage.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.register_error_handler
flask.Flask.request_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The class that is used for request objects. See Request\nfor more information.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.request_class
flask.Flask.request_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a RequestContext from the given\nenvironment and binds it to the current context. This must be used in\ncombination with the with statement because the request is only bound\nto the current context for the duration of the with block.</p><pre><code>with app.request_context(environ):\n  do_something_with(request)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.request_context
flask.Flask.response_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The class that is used for response objects. See\nResponse for more information.</p><pre><code>@app.route('/')\ndef index():\n  return 'Hello World'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.response_class
flask.Flask.route	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator that is used to register a view function for a\ngiven URL rule. This does the same thing as add_url_rule()\nbut is intended for decorator usage:</p><pre><code>@app.route('/')\ndef index():\n  return 'Hello World'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.route
flask.Flask.run	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Runs the application on a local development server.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.run
flask.Flask.save_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Saves the session if it needs updates. For the default\nimplementation, check open_session(). Instead of overriding this\nmethod we recommend replacing the session_interface.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.save_session
flask.Flask.secret_key	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If a secret key is set, cryptographic components can use this to\nsign cookies and other things. Set this to a complex random value\nwhen you want to use the secure cookie for instance.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.secret_key
flask.Flask.select_jinja_autoescape	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns True if autoescaping should be active for the given\ntemplate name. If no template name is given, returns True.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.select_jinja_autoescape
flask.Flask.send_file_max_age_default	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A timedelta which is used as default cache_timeout\nfor the send_file() functions. The default is 12 hours.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.send_file_max_age_default
flask.Flask.send_static_file	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Function used internally to send static files from the static\nfolder to the browser.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.send_static_file
flask.Flask.session_cookie_name	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The secure cookie uses this for the name of the session cookie.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.session_cookie_name
flask.Flask.session_interface	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>the session interface to use. By default an instance of\nSecureCookieSessionInterface is used here.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.session_interface
flask.Flask.shell_context_processor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a shell context processor function.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.shell_context_processor
flask.Flask.shell_context_processors	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A list of shell context processor functions that should be run\nwhen a shell context is created.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.shell_context_processors
flask.Flask.should_ignore_error	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned. If this\nfunction returns True then the teardown handlers will not be\npassed the error.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.should_ignore_error
flask.Flask.static_folder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The absolute path to the configured static folder.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.static_folder
flask.Flask.teardown_appcontext	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function to be called when the application context\nends. These functions are typically also called when the request\ncontext is popped.</p><pre><code>ctx = app.app_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.teardown_appcontext
flask.Flask.teardown_appcontext_funcs	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A list of functions that are called when the application context\nis destroyed. Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases.</p><pre><code>ctx = app.test_request_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.teardown_appcontext_funcs
flask.Flask.teardown_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a function to be run at the end of each request,\nregardless of whether there was an exception or not. These functions\nare executed when the request context is popped, even if not an\nactual request was performed.</p><pre><code>ctx = app.test_request_context()\nctx.push()\n...\nctx.pop()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.teardown_request
flask.Flask.teardown_request_funcs	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,\nNone for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the\nteardown_request() decorator.</p><pre><code>@app.template_filter()\ndef reverse(s):\n  return s[::-1]</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.teardown_request_funcs
flask.Flask.template_context_processors	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with list of functions that are called without argument\nto populate the template context. The key of the dictionary is the\nname of the blueprint this function is active for, None for all\nrequests. Each returns a dictionary that the template context is\nupdated with. To register a function here, use the\ncontext_processor() decorator.</p><pre><code>@app.template_filter()\ndef reverse(s):\n  return s[::-1]</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.template_context_processors
flask.Flask.template_filter	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:</p><pre><code>@app.template_filter()\ndef reverse(s):\n  return s[::-1]</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.template_filter
flask.Flask.template_global	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:</p><pre><code>@app.template_global()\ndef double(n):\n  return 2 * n</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.template_global
flask.Flask.template_test	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:</p><pre><code>@app.template_test()\ndef is_prime(n):\n  if n == 2:\n    return True\n  for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n    if n % i == 0:\n      return False\n  return True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.template_test
flask.Flask.test_client	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a test client for this application. For information\nabout unit testing head over to Testing Flask Applications.</p><pre><code>app.testing = True\nclient = app.test_client()</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.test_client
flask.Flask.test_client_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>the test client that is used with when test_client is used.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.test_client_class
flask.Flask.test_request_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a WSGI environment from the given values (see\nwerkzeug.test.EnvironBuilder for more information, this\nfunction accepts the same arguments).</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.test_request_context
flask.Flask.testing	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The testing flag. Set this to True to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate unittest helpers that have an\nadditional runtime cost which should not be enabled by default.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.testing
flask.Flask.trap_http_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Checks if an HTTP exception should be trapped or not. By default\nthis will return False for all exceptions except for a bad request\nkey error if TRAP_BAD_REQUEST_ERRORS is set to True. It\nalso returns True if TRAP_HTTP_EXCEPTIONS is set to True.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.trap_http_exception
flask.Flask.update_template_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject. Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.update_template_context
flask.Flask.url_build_error_handlers	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A list of functions that are called when url_for() raises a\nBuildError. Each function registered here\nis called with error, endpoint and values. If a function\nreturns None or raises a BuildError the next function is\ntried.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_build_error_handlers
flask.Flask.url_default_functions	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with lists of functions that can be used as URL value\npreprocessors. The key None here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function. For each function registered this one should also\nprovide a url_defaults() function that adds the parameters\nautomatically again that were removed that way.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_default_functions
flask.Flask.url_defaults	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Callback function for URL defaults for all view functions of the\napplication. It’s called with the endpoint and values and should\nupdate the values passed in place.</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_defaults
flask.Flask.url_map	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The Map for this instance. You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected. Example:</p><pre><code>from werkzeug.routing import BaseConverter\n\nclass ListConverter(BaseConverter):\n  def to_python(self, value):\n    return value.split(',')\n  def to_url(self, values):\n    return ','.join(super(ListConverter, self).to_url(value)\n            for value in values)\n\napp = Flask(__name__)\napp.url_map.converters['list'] = ListConverter</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_map
flask.Flask.url_rule_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The rule object to use for URL rules created. This is used by\nadd_url_rule(). Defaults to werkzeug.routing.Rule.</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_rule_class
flask.Flask.url_value_preprocessor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function as URL value preprocessor for all view\nfunctions of the application. It’s called before the view functions\nare called and can modify the url values provided.</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_value_preprocessor
flask.Flask.url_value_preprocessors	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with lists of functions that can be used as URL\nvalue processor functions. Whenever a URL is built these functions\nare called to modify the dictionary of values in place. The key\nNone here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.url_value_preprocessors
flask.Flask.use_x_sendfile	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Enable this if you want to use the X-Sendfile feature. Keep in\nmind that the server has to support this. This only affects files\nsent with the send_file() method.</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.use_x_sendfile
flask.Flask.view_functions	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary of all view functions registered. The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the route() decorator.</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.view_functions
flask.Flask.wsgi_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The actual WSGI application. This is not implemented in\n__call__ so that middlewares can be applied without losing a\nreference to the class. So instead of doing this:</p><pre><code>app = MyMiddleware(app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Flask.wsgi_app
flask.Blueprint.url_value_preprocessor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Represents a blueprint. A blueprint is an object that records\nfunctions that will be called with the\nBlueprintSetupState later to register functions\nor other things on the main application. See Modular Applications with Blueprints for more\ninformation.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint
flask.Blueprint.add_app_template_filter	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template filter, available application wide. Like\nFlask.add_template_filter() but for a blueprint. Works exactly\nlike the app_template_filter() decorator.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.add_app_template_filter
flask.Blueprint.add_app_template_global	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template global, available application wide. Like\nFlask.add_template_global() but for a blueprint. Works exactly\nlike the app_template_global() decorator.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.add_app_template_global
flask.Blueprint.add_app_template_test	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template test, available application wide. Like\nFlask.add_template_test() but for a blueprint. Works exactly\nlike the app_template_test() decorator.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.add_app_template_test
flask.Blueprint.add_url_rule	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.add_url_rule() but for a blueprint. The endpoint for\nthe url_for() function is prefixed with the name of the blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.add_url_rule
flask.Blueprint.after_app_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.after_request() but for a blueprint. Such a function\nis executed after each request, even if outside of the blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.after_app_request
flask.Blueprint.after_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.after_request() but for a blueprint. This function\nis only executed after each request that is handled by a function of\nthat blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.after_request
flask.Blueprint.app_context_processor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.context_processor() but for a blueprint. Such a\nfunction is executed each request, even if outside of the blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_context_processor
flask.Blueprint.app_errorhandler	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.errorhandler() but for a blueprint. This\nhandler is used for all requests, even if outside of the blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_errorhandler
flask.Blueprint.app_template_filter	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template filter, available application wide. Like\nFlask.template_filter() but for a blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_template_filter
flask.Blueprint.app_template_global	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template global, available application wide. Like\nFlask.template_global() but for a blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_template_global
flask.Blueprint.app_template_test	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Register a custom template test, available application wide. Like\nFlask.template_test() but for a blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_template_test
flask.Blueprint.app_url_defaults	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Same as url_defaults() but application wide.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_url_defaults
flask.Blueprint.app_url_value_preprocessor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Same as url_value_preprocessor() but application wide.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.app_url_value_preprocessor
flask.Blueprint.before_app_first_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.before_first_request(). Such a function is\nexecuted before the first request to the application.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.before_app_first_request
flask.Blueprint.before_app_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.before_request(). Such a function is executed\nbefore each request, even if outside of a blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.before_app_request
flask.Blueprint.before_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.before_request() but for a blueprint. This function\nis only executed before each request that is handled by a function of\nthat blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.before_request
flask.Blueprint.context_processor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.context_processor() but for a blueprint. This\nfunction is only executed for requests handled by a blueprint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.context_processor
flask.Blueprint.endpoint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.endpoint() but for a blueprint. This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method. If the endpoint is prefixed\nwith a . it will be registered to the current blueprint, otherwise\nit’s an application independent endpoint.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.endpoint
flask.Blueprint.errorhandler	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers an error handler that becomes active for this blueprint\nonly. Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function. Another\nspecial case is the 500 internal server error which is always looked\nup from the application.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.errorhandler
flask.Blueprint.get_send_file_max_age	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides default cache_timeout for the send_file() functions.</p><pre><code>class MyFlask(flask.Flask):\n  def get_send_file_max_age(self, name):\n    if name.lower().endswith('.js'):\n      return 60\n    return flask.Flask.get_send_file_max_age(self, name)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.get_send_file_max_age
flask.Blueprint.has_static_folder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This is True if the package bound object’s container has a\nfolder for static files.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.has_static_folder
flask.Blueprint.jinja_loader	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The Jinja loader for this package bound object.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.jinja_loader
flask.Blueprint.make_setup_state	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates an instance of BlueprintSetupState()\nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.make_setup_state
flask.Blueprint.open_resource	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Opens a resource from the application’s resource folder. To see\nhow this works, consider the following folder structure:</p><pre><code>/myapplication.py\n/schema.sql\n/static\n  /style.css\n/templates\n  /layout.html\n  /index.html</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.open_resource
flask.Blueprint.record	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function that is called when the blueprint is\nregistered on the application. This function is called with the\nstate as argument as returned by the make_setup_state()\nmethod.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.record
flask.Blueprint.record_once	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Works like record() but wraps the function in another\nfunction that will ensure the function is only called once. If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.record_once
flask.Blueprint.register	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Called by Flask.register_blueprint() to register a blueprint\non the application. This can be overridden to customize the register\nbehavior. Keyword arguments from\nregister_blueprint() are directly forwarded to this\nmethod in the options dictionary.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.register
flask.Blueprint.register_error_handler	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Non-decorator version of the errorhandler() error attach\nfunction, akin to the register_error_handler()\napplication-wide function of the Flask object but\nfor error handlers limited to this blueprint.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.register_error_handler
flask.Blueprint.route	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.route() but for a blueprint. The endpoint for the\nurl_for() function is prefixed with the name of the blueprint.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.route
flask.Blueprint.send_static_file	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Function used internally to send static files from the static\nfolder to the browser.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.send_static_file
flask.Blueprint.static_folder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The absolute path to the configured static folder.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.static_folder
flask.Blueprint.teardown_app_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.teardown_request() but for a blueprint. Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.teardown_app_request
flask.Blueprint.teardown_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like Flask.teardown_request() but for a blueprint. This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint. Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.teardown_request
flask.Blueprint.url_defaults	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Callback function for URL defaults for this blueprint. It’s called\nwith the endpoint and values and should update the values passed\nin place.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.url_defaults
flask.Blueprint.url_value_preprocessor	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Registers a function as URL value preprocessor for this\nblueprint. It’s called before the view functions are called and\ncan modify the url values provided.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Blueprint.url_value_preprocessor
flask.Request.view_args	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The request object used by default in Flask. Remembers the\nmatched endpoint and view arguments.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request
flask.Request.form	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A MultiDict with the parsed form data from POST\nor PUT requests. Please keep in mind that file uploads will not\nend up here, but instead in the files attribute.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.form
flask.Request.args	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A MultiDict with the parsed contents of the query\nstring. (The part in the URL after the question mark).</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.args
flask.Request.values	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A CombinedMultiDict with the contents of both\nform and args.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.values
flask.Request.cookies	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dict with the contents of all cookies transmitted with\nthe request.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.cookies
flask.Request.stream	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption. Most\nof the time it is a better idea to use data which will give\nyou that data as a string. The stream only returns the data once.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.stream
flask.Request.headers	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The incoming request headers as a dictionary like object.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.headers
flask.Request.data	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Contains the incoming request data as string in case it came with\na mimetype Flask does not handle.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.data
flask.Request.files	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A MultiDict with files uploaded as part of a\nPOST or PUT request. Each file is stored as\nFileStorage object. It basically behaves like a\nstandard file object you know from Python, with the difference that\nit also has a save() function that can\nstore the file on the filesystem.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.files
flask.Request.environ	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The underlying WSGI environment.</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.environ
flask.Request.method	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The current request method (POST, GET etc.)</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.method
flask.Request.path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.path
flask.Request.full_path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.full_path
flask.Request.script_root	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.script_root
flask.Request.url	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.url
flask.Request.base_url	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.base_url
flask.Request.url_root	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Provides different ways to look at the current IRI. Imagine your application is\nlistening on the following application root:</p><pre><code>http://www.example.com/myapplication</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.url_root
flask.Request.is_xhr	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>True if the request was triggered via a JavaScript\nXMLHttpRequest. This only works with libraries that support the\nX-Requested-With header and set it to XMLHttpRequest.\nLibraries that do that are prototype, jQuery and Mochikit and\nprobably some more.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.is_xhr
flask.Request.blueprint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The name of the current blueprint</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.blueprint
flask.Request.endpoint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The endpoint that matched the request. This in combination with\nview_args can be used to reconstruct the same or a\nmodified URL. If an exception happened when matching, this will\nbe None.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.endpoint
flask.Request.get_json	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Parses the incoming JSON request data and returns it. By default\nthis function will return None if the mimetype is not\napplication/json but this can be overridden by the\nforce parameter. If parsing fails the\non_json_loading_failed() method on the request object will be\ninvoked.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.get_json
flask.Request.is_json	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Indicates if this request is JSON or not. By default a request\nis considered to include JSON data if the mimetype is\napplication/json or application/*+json.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.is_json
flask.Request.json	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If the mimetype is application/json this will contain the\nparsed JSON data. Otherwise this will be None.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.json
flask.Request.max_content_length	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Read-only view of the MAX_CONTENT_LENGTH config key.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.max_content_length
flask.Request.module	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The name of the current module if the request was dispatched\nto an actual module. This is deprecated functionality, use blueprints\ninstead.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.module
flask.Request.on_json_loading_failed	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Called if decoding of the JSON data failed. The return value of\nthis method is used by get_json() when an error occurred. The\ndefault implementation just raises a BadRequest exception.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.on_json_loading_failed
flask.Request.routing_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling. This is\nusually a NotFound exception or\nsomething similar.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.routing_exception
flask.Request.url_rule	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The internal URL rule that matched the request. This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler (request.url_rule.methods) etc.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.url_rule
flask.Request.view_args	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dict of view arguments that matched the request. If an exception\nhappened when matching, this will be None.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Request.view_args
flask.request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>To access incoming request data, you can use the global request\nobject. Flask parses incoming request data for you and gives you\naccess to it through that global object. Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.request
flask.Response.set_cookie	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The response object that is used by default in Flask. Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault. Quite often you don’t have to create this object yourself because\nmake_response() will take care of that for you.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response
flask.Response.headers	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A Headers object representing the response headers.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.headers
flask.Response.status	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A string with a response status.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.status
flask.Response.status_code	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The response status as integer.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.status_code
flask.Response.data	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A descriptor that calls get_data() and set_data(). This\nshould not be used and will eventually get deprecated.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.data
flask.Response.mimetype	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The mimetype (content type without charset etc.)</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.mimetype
flask.Response.set_cookie	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Sets a cookie. The parameters are the same as in the cookie Morsel\nobject in the Python standard library but it accepts unicode data, too.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Response.set_cookie
flask.session.permanent	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.session
flask.session.new	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>True if the session is new, False otherwise.</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.session.new
flask.session.modified	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>True if the session object detected a modification. Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to True yourself. Here an example:</p><pre><code># this change is not picked up because a mutable object (here\n# a list) is changed.\nsession['objects'].append(42)\n# so mark it as modified yourself\nsession.modified = True</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.session.modified
flask.session.permanent	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If set to True the session lives for\npermanent_session_lifetime seconds. The\ndefault is 31 days. If set to False (which is the default) the\nsession will be deleted when the user closes the browser.</p><pre><code>class Session(dict, SessionMixin):\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.session.permanent
flask.sessions.SessionInterface.should_set_cookie	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug’s securecookie\nimplementation. The only methods you have to implement are\nopen_session() and save_session(), the others have\nuseful defaults which you don’t need to change.</p><pre><code>class Session(dict, SessionMixin):\n  pass</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface
flask.sessions.SessionInterface.get_cookie_domain	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Helpful helper method that returns the cookie domain that should\nbe used for the session cookie if session cookies are used.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.get_cookie_domain
flask.sessions.SessionInterface.get_cookie_httponly	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns True if the session cookie should be httponly. This\ncurrently just returns the value of the SESSION_COOKIE_HTTPONLY\nconfig var.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.get_cookie_httponly
flask.sessions.SessionInterface.get_cookie_path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns the path for which the cookie should be valid. The\ndefault implementation uses the value from the SESSION_COOKIE_PATH\nconfig var if it’s set, and falls back to APPLICATION_ROOT or\nuses / if it’s None.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.get_cookie_path
flask.sessions.SessionInterface.get_cookie_secure	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns True if the cookie should be secure. This currently\njust returns the value of the SESSION_COOKIE_SECURE setting.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.get_cookie_secure
flask.sessions.SessionInterface.get_expiration_time	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A helper method that returns an expiration date for the session\nor None if the session is linked to the browser session. The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.get_expiration_time
flask.sessions.SessionInterface.is_null_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Checks if a given object is a null session. Null sessions are\nnot asked to be saved.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.is_null_session
flask.sessions.SessionInterface.make_null_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror. This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.make_null_session
flask.sessions.SessionInterface.null_session_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>make_null_session() will look here for the class that should\nbe created when a null session is requested. Likewise the\nis_null_session() method will perform a typecheck against\nthis type.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.null_session_class
flask.sessions.SessionInterface.open_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This method has to be implemented and must either return None\nin case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on SessionMixin.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.open_session
flask.sessions.SessionInterface.pickle_based	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.pickle_based
flask.sessions.SessionInterface.save_session	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This is called for actual sessions returned by open_session()\nat the end of the request. This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.save_session
flask.sessions.SessionInterface.should_set_cookie	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Indicates whether a cookie should be set now or not. This is\nused by session backends to figure out if they should emit a\nset-cookie header or not. The default behavior is controlled by\nthe SESSION_REFRESH_EACH_REQUEST config variable. If\nit’s set to False then a cookie is only set if the session is\nmodified, if set to True it’s always set if the session is\npermanent.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionInterface.should_set_cookie
flask.sessions.SecureCookieSessionInterface.session_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The default session interface that stores sessions in signed cookies\nthrough the itsdangerous module.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface
flask.sessions.SecureCookieSessionInterface.digest_method	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>the hash function to use for the signature. The default is sha1</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface.digest_method
flask.sessions.SecureCookieSessionInterface.key_derivation	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>the name of the itsdangerous supported key derivation. The default\nis hmac.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface.key_derivation
flask.sessions.SecureCookieSessionInterface.salt	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface.salt
flask.sessions.SecureCookieSessionInterface.serializer	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A python serializer for the payload. The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface.serializer
flask.sessions.SecureCookieSessionInterface.session_class	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>alias of SecureCookieSession</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSessionInterface.session_class
flask.sessions.SecureCookieSession	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Base class for sessions based on signed cookies.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SecureCookieSession
flask.sessions.NullSession	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Class used to generate nicer error messages if sessions are not\navailable. Will still allow read-only access to the empty session\nbut fail on setting.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.NullSession
flask.sessions.SessionMixin.permanent	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Expands a basic dictionary with an accessors that are expected\nby Flask extensions and users for the session.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionMixin
flask.sessions.SessionMixin.modified	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>for some backends this will always be True, but some backends will\ndefault this to false and detect changes in the dictionary for as\nlong as changes do not happen on mutable structures in the session.\nThe default mixin implementation just hardcodes True in.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionMixin.modified
flask.sessions.SessionMixin.new	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>some session backends can tell you if a session is new, but that is\nnot necessarily guaranteed. Use with caution. The default mixin\nimplementation just hardcodes False in.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionMixin.new
flask.sessions.SessionMixin.permanent	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>this reflects the '_permanent' key in the dict.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.SessionMixin.permanent
flask.sessions.session_json_serializer	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A customized JSON serializer that supports a few extra types that\nwe take for granted when serializing (tuples, markup objects, datetime).</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.sessions.session_json_serializer
flask.testing.FlaskClient.session_transaction	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a with body when used in a with statement. For general\ninformation about how to use this class refer to\nwerkzeug.test.Client.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.testing.FlaskClient
flask.testing.FlaskClient.session_transaction	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>When used in combination with a with statement this opens a\nsession transaction. This can be used to modify the session that\nthe test client uses. Once the with block is left the session is\nstored back.</p><pre><code>with client.session_transaction() as session:\n  session['value'] = 42</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.testing.FlaskClient.session_transaction
flask.g	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Just store on this whatever you want. For example a database\nconnection or the user that is currently logged in.</p><pre><code>user = getattr(flask.g, 'user', None)\nuser = flask.g.get('user', None)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.g
flask.current_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Points to the application handling the request. This is useful for\nextensions that want to support multiple applications running side\nby side. This is powered by the application context and not by the\nrequest context, so you can change the value of this proxy by\nusing the app_context() method.</p><pre><code>class User(db.Model):\n\n  def __init__(self, username, remote_addr=None):\n    self.username = username\n    if remote_addr is None and has_request_context():\n      remote_addr = request.remote_addr\n    self.remote_addr = remote_addr</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.current_app
flask.has_request_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>If you have code that wants to test if a request context is there or\nnot this function can be used. For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.</p><pre><code>class User(db.Model):\n\n  def __init__(self, username, remote_addr=None):\n    self.username = username\n    if remote_addr is None and has_request_context():\n      remote_addr = request.remote_addr\n    self.remote_addr = remote_addr</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.has_request_context
flask.copy_current_request_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A helper function that decorates a function to retain the current\nrequest context. This is useful when working with greenlets. The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.</p><pre><code>import gevent\nfrom flask import copy_current_request_context\n\n@app.route('/')\ndef index():\n  @copy_current_request_context\n  def do_some_work():\n    # do some work here, it can access flask.request like you\n    # would otherwise in the view function.\n    ...\n  gevent.spawn(do_some_work)\n  return 'Regular response'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.copy_current_request_context
flask.has_app_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Works like has_request_context() but for the application\ncontext. You can also just do a boolean check on the\ncurrent_app object instead.</p><pre><code>url_for('.index')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.has_app_context
flask.url_for	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Generates a URL to the given endpoint with the method provided.</p><pre><code>url_for('.index')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.url_for
flask.abort	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>When passed a dict of code -> exception items it can be used as\ncallable that raises exceptions. If the first argument to the\ncallable is an integer it will be looked up in the mapping, if it’s\na WSGI application it will be raised in a proxy exception.</p><pre><code>def index():\n  return render_template('index.html', foo=42)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.abort
flask.redirect	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location. Supported codes are 301,\n302, 303, 305, and 307. 300 is not supported because it’s not a real\nredirect and 304 because it’s the answer for a request with a request\nwith defined If-Modified-Since headers.</p><pre><code>def index():\n  return render_template('index.html', foo=42)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.redirect
flask.make_response	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Sometimes it is necessary to set additional headers in a view. Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it. This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.</p><pre><code>def index():\n  return render_template('index.html', foo=42)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.make_response
flask.after_this_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Executes a function after this request. This is useful to modify\nresponse objects. The function is passed the response object and has\nto return the same or a new one.</p><pre><code>@app.route('/')\ndef index():\n  @after_this_request\n  def add_header(response):\n    response.headers['X-Foo'] = 'Parachute'\n    return response\n  return 'Hello World!'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.after_this_request
flask.send_file	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Sends the contents of a file to the client. This will use the\nmost efficient method available and configured. By default it will\ntry to use the WSGI server’s file_wrapper support. Alternatively\nyou can set the application’s use_x_sendfile attribute\nto True to directly emit an X-Sendfile header. This however\nrequires support of the underlying webserver for X-Sendfile.</p><pre><code>@app.route('/uploads/<path:filename>')\ndef download_file(filename):\n  return send_from_directory(app.config['UPLOAD_FOLDER'],\n                filename, as_attachment=True)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.send_file
flask.send_from_directory	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Send a file from a given directory with send_file(). This\nis a secure way to quickly expose static files from an upload folder\nor something similar.</p><pre><code>@app.route('/uploads/<path:filename>')\ndef download_file(filename):\n  return send_from_directory(app.config['UPLOAD_FOLDER'],\n                filename, as_attachment=True)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.send_from_directory
flask.safe_join	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Safely join directory and zero or more untrusted pathnames\ncomponents.</p><pre><code>@app.route('/wiki/<path:filename>')\ndef wiki_page(filename):\n  filename = safe_join(app.config['WIKI_FOLDER'], filename)\n  with open(filename, 'rb') as fd:\n    content = fd.read() # Read and process the file content...</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.safe_join
flask.escape	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Convert the characters &, <, >, ‘, and ” in string s to HTML-safe\nsequences. Use this if you need to display text that might contain\nsuch characters in HTML. Marks return value as markup string.</p><pre><code>>>> Markup("Hello <em>World</em>!")\nMarkup(u'Hello <em>World</em>!')\n>>> class Foo(object):\n... def __html__(self):\n...  return '<a href="#">foo</a>'\n...\n>>> Markup(Foo())\nMarkup(u'<a href="#">foo</a>')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.escape
flask.Markup.unescape	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped. This implements the __html__ interface a couple\nof frameworks and web applications use. Markup is a direct\nsubclass of unicode and provides all the methods of unicode just that\nit escapes arguments passed and always returns Markup.</p><pre><code>>>> Markup("Hello <em>World</em>!")\nMarkup(u'Hello <em>World</em>!')\n>>> class Foo(object):\n... def __html__(self):\n...  return '<a href="#">foo</a>'\n...\n>>> Markup(Foo())\nMarkup(u'<a href="#">foo</a>')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Markup
flask.Markup.escape	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Escape the string. Works like escape() with the difference\nthat for subclasses of Markup this function would return the\ncorrect subclass.</p><pre><code>>>> Markup("Main &raquo; <em>About</em>").striptags()\nu'Main \\xbb About'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Markup.escape
flask.Markup.striptags	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Unescape markup into an text_type string and strip all tags. This\nalso resolves known HTML4 and XHTML entities. Whitespace is\nnormalized to one:</p><pre><code>>>> Markup("Main &raquo; <em>About</em>").striptags()\nu'Main \\xbb About'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Markup.striptags
flask.Markup.unescape	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Unescape markup again into an text_type string. This also resolves\nknown HTML4 and XHTML entities:</p><pre><code>>>> Markup("Main &raquo; <em>About</em>").unescape()\nu'Main \\xbb <em>About</em>'</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Markup.unescape
flask.flash	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Flashes a message to the next request. In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call get_flashed_messages().</p><pre><code>try:\n  import simplejson as json\nexcept ImportError:\n  import json</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.flash
flask.get_flashed_messages	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages. By default just the messages are returned,\nbut when with_categories is set to True, the return value will\nbe a list of tuples in the form (category, message) instead.</p><pre><code>try:\n  import simplejson as json\nexcept ImportError:\n  import json</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.get_flashed_messages
flask.json.jsonify	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This function wraps dumps() to add a few enhancements that make\nlife easier. It turns the JSON output into a Response\nobject with the application/json mimetype. For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict. This means that both jsonify(1,2,3) and\njsonify([1,2,3]) serialize to [1,2,3].</p><pre><code>from flask import jsonify\n\n@app.route('/_get_current_user')\ndef get_current_user():\n  return jsonify(username=g.user.username,\n          email=g.user.email,\n          id=g.user.id)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.jsonify
flask.json.dumps	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Serialize obj to a JSON formatted str by using the application’s\nconfigured encoder (json_encoder) if there is an\napplication on the stack.</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.dumps
flask.json.dump	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like dumps() but writes into a file object.</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.dump
flask.json.loads	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Unserialize a JSON object from a string s by using the application’s\nconfigured decoder (json_decoder) if there is an\napplication on the stack.</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.loads
flask.json.load	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like loads() but reads from a file object.</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.load
flask.json.JSONEncoder.default	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The default Flask JSON encoder. This one extends the default simplejson\nencoder by also supporting datetime objects, UUID as well as\nMarkup objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format). In order to support more data types override the\ndefault() method.</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.JSONEncoder
flask.json.JSONEncoder.default	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Implement this method in a subclass such that it returns a\nserializable object for o, or calls the base implementation (to\nraise a TypeError).</p><pre><code>def default(self, o):\n  try:\n    iterable = iter(o)\n  except TypeError:\n    pass\n  else:\n    return list(iterable)\n  return JSONEncoder.default(self, o)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.JSONEncoder.default
flask.json.JSONDecoder	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The default JSON decoder. This one does not change the behavior from\nthe default simplejson decoder. Consult the json documentation\nfor more information. This decoder is not only used for the load\nfunctions of this module but also Request.</p><pre><code>{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.json.JSONDecoder
flask.render_template	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Renders a template from the template folder with the given\ncontext.</p><pre><code>{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.render_template
flask.render_template_string	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped.</p><pre><code>{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.render_template_string
flask.get_template_attribute	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Loads a macro (or variable) a template exports. This can be used to\ninvoke a macro from within Python code. If you for example have a\ntemplate named _cider.html with the following contents:</p><pre><code>{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.get_template_attribute
flask.Config.get_namespace	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Works exactly like a dict but provides ways to fill it from files\nor special dictionaries. There are two common patterns to populate the\nconfig.</p><pre><code>app.config.from_pyfile('yourconfig.cfg')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config
flask.Config.from_envvar	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Loads a configuration from an environment variable pointing to\na configuration file. This is basically just a shortcut with nicer\nerror messages for this line of code:</p><pre><code>app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.from_envvar
flask.Config.from_json	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the\nfrom_mapping() function.</p><pre><code>app.config.from_object('yourapplication.default_config')\nfrom yourapplication import default_config\napp.config.from_object(default_config)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.from_json
flask.Config.from_mapping	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Updates the config like update() ignoring items with non-upper\nkeys.</p><pre><code>app.config.from_object('yourapplication.default_config')\nfrom yourapplication import default_config\napp.config.from_object(default_config)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.from_mapping
flask.Config.from_object	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Updates the values from the given object. An object can be of one\nof the following two types:</p><pre><code>app.config.from_object('yourapplication.default_config')\nfrom yourapplication import default_config\napp.config.from_object(default_config)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.from_object
flask.Config.from_pyfile	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Updates the values in the config from a Python file. This function\nbehaves as if the file was imported as module with the\nfrom_object() function.</p><pre><code>app.config['IMAGE_STORE_TYPE'] = 'fs'\napp.config['IMAGE_STORE_PATH'] = '/var/app/images'\napp.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\nimage_store_config = app.config.get_namespace('IMAGE_STORE_')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.from_pyfile
flask.Config.get_namespace	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:</p><pre><code>app.config['IMAGE_STORE_TYPE'] = 'fs'\napp.config['IMAGE_STORE_PATH'] = '/var/app/images'\napp.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\nimage_store_config = app.config.get_namespace('IMAGE_STORE_')</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.Config.get_namespace
flask.flask.ext	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This module acts as redirect import module to Flask extensions. It was\nadded in 0.8 as the canonical way to import Flask extensions and makes\nit possible for us to have more flexibility in how we distribute\nextensions.</p><pre><code>from flask.ext import foo</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.flask.ext
flask.stream_with_context	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares. The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.</p><pre><code>from flask import stream_with_context, request, Response\n\n@app.route('/stream')\ndef streamed_response():\n  @stream_with_context\n  def generate():\n    yield 'Hello '\n    yield request.args['name']\n    yield '!'\n  return Response(generate())</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.stream_with_context
flask.ctx.RequestContext.push	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The request context contains all request relevant information. It is\ncreated at the beginning of the request and pushed to the\n_request_ctx_stack and removed at the end of it. It will create the\nURL adapter and request object for the WSGI environment provided.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.RequestContext
flask.ctx.RequestContext.copy	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.RequestContext.copy
flask.ctx.RequestContext.match_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Can be overridden by a subclass to hook into the matching\nof the request.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.RequestContext.match_request
flask.ctx.RequestContext.pop	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Pops the request context and unbinds it by doing that. This will\nalso trigger the execution of functions registered by the\nteardown_request() decorator.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.RequestContext.pop
flask.ctx.RequestContext.push	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Binds the request context to the current context.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.RequestContext.push
flask._request_ctx_stack	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The internal LocalStack that is used to implement\nall the context local objects used in Flask. This is a documented\ninstance and can be used by extensions and application code but the\nuse is discouraged in general.</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask._request_ctx_stack
flask.g	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Example usage:</p><pre><code>from flask import _request_ctx_stack\n\ndef get_session():\n  ctx = _request_ctx_stack.top\n  if ctx is not None:\n    return ctx.session</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.g
flask.ctx.AppContext.push	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the\nRequestContext binds request information. The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.AppContext
flask.ctx.AppContext.pop	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Pops the app context.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.AppContext.pop
flask.ctx.AppContext.push	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Binds the app context to the current context.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.ctx.AppContext.push
flask._app_ctx_stack	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Works similar to the request context but only binds the application.\nThis is mainly there for extensions to store data.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask._app_ctx_stack
flask.blueprints.BlueprintSetupState.url_prefix	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Temporary holder object for registering a blueprint with the\napplication. An instance of this class is created by the\nmake_setup_state() method and later passed\nto all register callback functions.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState
flask.blueprints.BlueprintSetupState.add_url_rule	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A helper method to register a rule (and optionally a view function)\nto the application. The endpoint is automatically prefixed with the\nblueprint’s name.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.add_url_rule
flask.blueprints.BlueprintSetupState.app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>a reference to the current application</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.app
flask.blueprints.BlueprintSetupState.blueprint	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>a reference to the blueprint that created this setup state.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.blueprint
flask.blueprints.BlueprintSetupState.first_registration	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.first_registration
flask.blueprints.BlueprintSetupState.options	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>a dictionary with all options that were passed to the\nregister_blueprint() method.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.options
flask.blueprints.BlueprintSetupState.subdomain	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The subdomain that the blueprint should be active for, None\notherwise.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.subdomain
flask.blueprints.BlueprintSetupState.url_defaults	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.url_defaults
flask.blueprints.BlueprintSetupState.url_prefix	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The prefix that should be used for all URLs defined on the\nblueprint.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.blueprints.BlueprintSetupState.url_prefix
flask.signals.signals_available	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>True if the signaling system is available. This is the case\nwhen blinker is installed.</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.signals.signals_available
flask.template_rendered	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when a template was successfully rendered. The\nsignal is invoked with the instance of the template as template\nand the context as dictionary (named context).</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.template_rendered
flask.before_render_template	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as template\nand the context as dictionary (named context).</p><pre><code>def log_template_renders(sender, template, context, **extra):\n  sender.logger.debug('Rendering template "%s" with context %s',\n            template.name or 'string template',\n            context)\n\nfrom flask import before_render_template\nbefore_render_template.connect(log_template_renders, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api
flask.request_started	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when the request context is set up, before\nany request processing happens. Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as request.</p><pre><code>def log_request(sender, **extra):\n  sender.logger.debug('Request context is set up')\n\nfrom flask import request_started\nrequest_started.connect(log_request, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.request_started
flask.request_finished	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named response.</p><pre><code>def log_response(sender, response, **extra):\n  sender.logger.debug('Request context is about to close down. '\n            'Response: %s', response)\n\nfrom flask import request_finished\nrequest_finished.connect(log_response, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.request_finished
flask.got_request_exception	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when an exception happens during request processing.\nIt is sent before the standard exception handling kicks in and even\nin debug mode, where no exception handling happens. The exception\nitself is passed to the subscriber as exception.</p><pre><code>def log_exception(sender, exception, **extra):\n  sender.logger.debug('Got exception during processing: %s', exception)\n\nfrom flask import got_request_exception\ngot_request_exception.connect(log_exception, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.got_request_exception
flask.request_tearing_down	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when the request is tearing down. This is always\ncalled, even if an exception is caused. Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.</p><pre><code>def close_db_connection(sender, **extra):\n  session.close()\n\nfrom flask import request_tearing_down\nrequest_tearing_down.connect(close_db_connection, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.request_tearing_down
flask.appcontext_tearing_down	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when the app context is tearing down. This is always\ncalled, even if an exception is caused. Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.</p><pre><code>def close_db_connection(sender, **extra):\n  session.close()\n\nfrom flask import appcontext_tearing_down\nappcontext_tearing_down.connect(close_db_connection, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.appcontext_tearing_down
flask.appcontext_pushed	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when an application context is pushed. The sender\nis the application. This is usually useful for unittests in order to\ntemporarily hook in information. For instance it can be used to\nset a resource early onto the g object.</p><pre><code>from contextlib import contextmanager\nfrom flask import appcontext_pushed\n\n@contextmanager\ndef user_set(app, user):\n  def handler(sender, **kwargs):\n    g.user = user\n  with appcontext_pushed.connected_to(handler, app):\n    yield</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.appcontext_pushed
flask.appcontext_popped	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when an application context is popped. The sender\nis the application. This usually falls in line with the\nappcontext_tearing_down signal.</p><pre><code>recorded = []\ndef record(sender, message, category, **extra):\n  recorded.append((message, category))\n\nfrom flask import message_flashed\nmessage_flashed.connect(record, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.appcontext_popped
flask.message_flashed	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This signal is sent when the application is flashing a message. The\nmessages is sent as message keyword argument and the category as\ncategory.</p><pre><code>recorded = []\ndef record(sender, message, category, **extra):\n  recorded.append((message, category))\n\nfrom flask import message_flashed\nmessage_flashed.connect(record, app)</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.message_flashed
flask.signals.Namespace.signal	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>An alias for blinker.base.Namespace if blinker is available,\notherwise a dummy class that creates fake signals. This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself.</p><pre><code>class MyView(View):\n  methods = ['GET']\n\n  def dispatch_request(self, name):\n    return 'Hello %s!' % name\n\napp.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.signals.Namespace
flask.signals.Namespace.signal	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a RuntimeError for all other\noperations, including connecting.</p><pre><code>class MyView(View):\n  methods = ['GET']\n\n  def dispatch_request(self, name):\n    return 'Hello %s!' % name\n\napp.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.signals.Namespace.signal
flask.views.View.methods	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Alternative way to use view functions. A subclass has to implement\ndispatch_request() which is called with the view arguments from\nthe URL routing system. If methods is provided the methods\ndo not have to be passed to the add_url_rule()\nmethod explicitly:</p><pre><code>class MyView(View):\n  methods = ['GET']\n\n  def dispatch_request(self, name):\n    return 'Hello %s!' % name\n\napp.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.View
flask.views.View.as_view	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Converts the class into an actual view function that can be used\nwith the routing system. Internally this generates a function on the\nfly which will instantiate the View on each request and call\nthe dispatch_request() method on it.</p><pre><code>class CounterAPI(MethodView):\n\n  def get(self):\n    return session.get('counter', 0)\n\n  def post(self):\n    session['counter'] = session.get('counter', 0) + 1\n    return 'OK'\n\napp.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.View.as_view
flask.views.View.decorators	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>The canonical way to decorate class-based views is to decorate the\nreturn value of as_view(). However since this moves parts of the\nlogic from the class declaration to the place where it’s hooked\ninto the routing system.</p><pre><code>class CounterAPI(MethodView):\n\n  def get(self):\n    return session.get('counter', 0)\n\n  def post(self):\n    session['counter'] = session.get('counter', 0) + 1\n    return 'OK'\n\napp.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.View.decorators
flask.views.View.dispatch_request	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Subclasses have to override this method to implement the\nactual view function code. This method is called with all\nthe arguments from the URL rule.</p><pre><code>class CounterAPI(MethodView):\n\n  def get(self):\n    return session.get('counter', 0)\n\n  def post(self):\n    session['counter'] = session.get('counter', 0) + 1\n    return 'OK'\n\napp.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.View.dispatch_request
flask.views.View.methods	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A list of methods this view can handle.</p><pre><code>class CounterAPI(MethodView):\n\n  def get(self):\n    return session.get('counter', 0)\n\n  def post(self):\n    session['counter'] = session.get('counter', 0) + 1\n    return 'OK'\n\napp.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.View.methods
flask.views.MethodView	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Like a regular class-based view but that dispatches requests to\nparticular methods. For instance if you implement a method called\nget() it means it will respond to 'GET' requests and\nthe dispatch_request() implementation will automatically\nforward your request to that. Also options is set for you\nautomatically:</p><pre><code>class CounterAPI(MethodView):\n\n  def get(self):\n    return session.get('counter', 0)\n\n  def post(self):\n    session['counter'] = session.get('counter', 0) + 1\n    return 'OK'\n\napp.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))</code></pre></section>	http://flask.pocoo.org/docs/0.12/api#flask.views.MethodView
flask.cli.FlaskGroup	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Special subclass of the AppGroup group that supports\nloading more commands from the configured Flask app. Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.FlaskGroup
flask.cli.AppGroup.group	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This works similar to a regular click Group but it\nchanges the behavior of the command() decorator so that it\nautomatically wraps the functions in with_appcontext().</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.AppGroup
flask.cli.AppGroup.command	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This works exactly like the method of the same name on a regular\nclick.Group but it wraps callbacks in with_appcontext()\nunless it’s disabled by passing with_appcontext=False.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.AppGroup.command
flask.cli.AppGroup.group	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>This works exactly like the method of the same name on a regular\nclick.Group but it defaults the group class to\nAppGroup.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.AppGroup.group
flask.cli.ScriptInfo.load_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Help object to deal with Flask applications. This is usually not\nnecessary to interface with as it’s used internally in the dispatching\nto click. In future versions of Flask this object will most likely play\na bigger role. Typically it’s created automatically by the\nFlaskGroup but you can also manually create it and pass it\nonwards as click object.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.ScriptInfo
flask.cli.ScriptInfo.app_import_path	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Optionally the import path for the Flask application.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.ScriptInfo.app_import_path
flask.cli.ScriptInfo.create_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Optionally a function that is passed the script info to create\nthe instance of the application.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.ScriptInfo.create_app
flask.cli.ScriptInfo.data	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>A dictionary with arbitrary data that can be associated with\nthis script info.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.ScriptInfo.data
flask.cli.ScriptInfo.load_app	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Loads the Flask app (if not yet loaded) and returns it. Calling\nthis multiple times will just result in the already loaded app to\nbe returned.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.ScriptInfo.load_app
flask.cli.with_appcontext	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Wraps a callback so that it’s guaranteed to be executed with the\nscript’s application context. If callbacks are registered directly\nto the app.cli object then they are wrapped with this function\nby default unless it’s disabled.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.with_appcontext
flask.cli.pass_script_info	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Marks a function so that an instance of ScriptInfo is passed\nas first argument to the click callback.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.pass_script_info
flask.cli.run_command	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Runs a local development server for the Flask application.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.run_command
flask.cli.shell_command	A							http://flask.pocoo.org/docs/0.12/api			<section class="prog__container"><p>Runs an interactive Python shell in the context of a given\nFlask application. The application will populate the default\nnamespace of this shell according to it’s configuration.</p></section>	http://flask.pocoo.org/docs/0.12/api#flask.cli.shell_command
